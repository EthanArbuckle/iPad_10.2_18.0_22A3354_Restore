void sub_1BE7D988C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D98C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D9A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DA114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;

  if (__p)
    operator delete(__p);

  _Block_object_dispose(&a30, 8);
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  sub_1BE76551C(v61);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose((const void *)(v63 - 216), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1BE7DA27C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 sub_1BE7DA28C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

_QWORD *sub_1BE7DA29C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[6] = result + 6;
  result[7] = result + 6;
  result[8] = 0;
  v2 = a2[8];
  if (v2)
  {
    v4 = a2[6];
    v3 = (uint64_t *)a2[7];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[6];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[6] = v4;
    *(_QWORD *)(v4 + 8) = result + 6;
    result[8] = v2;
    a2[8] = 0;
  }
  return result;
}

_QWORD *sub_1BE7DA2E8(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (result[8])
  {
    v1 = result;
    v2 = result + 6;
    result = (_QWORD *)result[7];
    v3 = v1[6];
    v4 = *result;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    v1[8] = 0;
    if (result != v2)
    {
      do
      {
        v5 = (_QWORD *)result[1];
        operator delete(result);
        result = v5;
      }
      while (v5 != v2);
    }
  }
  return result;
}

__n128 sub_1BE7DA34C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE7DA370(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE7DA388(uint64_t a1, CGFloat a2, CGFloat a3, double a4)
{
  _QWORD *v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  char *v19;
  _BOOL4 IsNull;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  CGFloat **v26;
  CGFloat *v27;
  CGFloat *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CHSubstroke *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  double *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *started;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  _QWORD *v59;
  unint64_t v60;
  double *v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  double *v69;
  char *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  CGFloat **v77;
  CGFloat *v78;
  CGFloat *v79;
  void *__p;
  void *v81;
  uint64_t v82;
  CGRect v83;

  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
  v10 = (double *)v8[7];
  v9 = v8[8];
  if ((unint64_t)v10 < v9)
  {
    *v10 = a2;
    v10[1] = a3;
    v11 = (uint64_t)(v10 + 2);
    goto LABEL_18;
  }
  v12 = (double *)v8[6];
  v13 = ((char *)v10 - (char *)v12) >> 4;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 60)
    sub_1BE61F930();
  v15 = v9 - (_QWORD)v12;
  if (v15 >> 3 > v14)
    v14 = v15 >> 3;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
    v16 = 0xFFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 60)
      sub_1BE61F100();
    v17 = (char *)operator new(16 * v16);
    v18 = (double *)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = a2;
    v18[1] = a3;
    v11 = (uint64_t)(v18 + 2);
    if (v10 == v12)
      goto LABEL_16;
  }
  else
  {
    v18 = (double *)(16 * v13);
    v19 = 0;
    *v18 = a2;
    v18[1] = a3;
    v11 = 16 * v13 + 16;
    if (v10 == v12)
      goto LABEL_16;
  }
  do
  {
    *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
    v18 -= 2;
    v10 -= 2;
  }
  while (v10 != v12);
  v10 = (double *)v8[6];
LABEL_16:
  v8[6] = v18;
  v8[7] = v11;
  v8[8] = v19;
  if (v10)
    operator delete(v10);
LABEL_18:
  v8[7] = v11;
  IsNull = CGRectIsNull(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (IsNull)
  {
    *(CGFloat *)(v21 + 48) = a2;
    *(CGFloat *)(v21 + 56) = a3;
    *(_QWORD *)(v21 + 64) = 0;
    *(_QWORD *)(v21 + 72) = 0;
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v24 = *(double *)(v22 + 24);
    v23 = (double *)(v22 + 24);
    if (v24 != 0.0)
      goto LABEL_23;
  }
  else
  {
    v83.size.width = 0.0;
    v83.size.height = 0.0;
    v83.origin.x = a2;
    v83.origin.y = a3;
    *(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) = CGRectUnion(*(CGRect *)(v21 + 48), v83);
    v23 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  }
  *v23 = a4;
LABEL_23:
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (vabdd_f64(a2, *(double *)(v25 + 48)) + vabdd_f64(a3, *(double *)(v25 + 56)) > 3.0)
  {
    *(CGFloat *)(v25 + 48) = a2;
    *(CGFloat *)(v25 + 56) = a3;
    v26 = *(CGFloat ***)(*(_QWORD *)(a1 + 88) + 8);
    v27 = (CGFloat *)operator new(0x20uLL);
    v27[2] = a2;
    v27[3] = a3;
    v28 = v26[6];
    v26 += 6;
    *(_QWORD *)v27 = v28;
    *((_QWORD *)v27 + 1) = v26;
    *((_QWORD *)v28 + 1) = v27;
    *v26 = v27;
    v26[2] = (CGFloat *)((char *)v26[2] + 1);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 64) == 3)
    {
      v29 = (void *)objc_opt_class();
      objc_msgSend_circumferenceRatioOfCircleFittedToPoints_circleCenter_circleRadius_(v29, v30, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 48, 0, 0, v31);
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = v32
                                                                  + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8)
                                                                              + 24);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v34 = *(uint64_t **)(v33 + 56);
      v35 = *v34;
      *(_QWORD *)(v35 + 8) = v34[1];
      *(_QWORD *)v34[1] = v35;
      --*(_QWORD *)(v33 + 64);
      operator delete(v34);
    }
    if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) > 18.8495559)
    {
      v36 = (void *)objc_opt_class();
      if (v36)
      {
        objc_msgSend_convexHullForPoints_(v36, v37, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, v38, v39, v40);
      }
      else
      {
        __p = 0;
        v81 = 0;
        v82 = 0;
      }
      v41 = [CHSubstroke alloc];
      objc_msgSend_encodedStrokeIdentifier(*(void **)(a1 + 32), v42, v43, v44, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = *(double **)(*(_QWORD *)(a1 + 56) + 8);
      started = (void *)objc_msgSend_initWithStrokeIdentifier_bounds_startTimestamp_endTimestamp_convexHull_curvature_(v41, v49, (uint64_t)v47, (uint64_t)&__p, v50, v51, v48[6], v48[7], v48[8], v48[9], *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24));

      objc_msgSend_addObject_(*(void **)(a1 + 40), v53, (uint64_t)started, v54, v55, v56);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 0;
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v58 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v57 + 48) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v57 + 64) = v58;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 56) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                              + 48);
      v59 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
      v61 = (double *)v59[7];
      v60 = v59[8];
      if ((unint64_t)v61 < v60)
      {
        *v61 = a2;
        v61[1] = a3;
        v62 = (uint64_t)(v61 + 2);
LABEL_47:
        v59[7] = v62;
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = a4;
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = a4;
        v71 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8);
        if (v71[8])
        {
          v72 = v71 + 6;
          v74 = v71[6];
          v73 = (uint64_t *)v71[7];
          v75 = *v73;
          *(_QWORD *)(v75 + 8) = *(_QWORD *)(v74 + 8);
          **(_QWORD **)(v74 + 8) = v75;
          v71[8] = 0;
          if (v73 != v71 + 6)
          {
            do
            {
              v76 = (uint64_t *)v73[1];
              operator delete(v73);
              v73 = v76;
            }
            while (v76 != v72);
          }
        }
        v77 = *(CGFloat ***)(*(_QWORD *)(a1 + 88) + 8);
        v78 = (CGFloat *)operator new(0x20uLL);
        v78[2] = a2;
        v78[3] = a3;
        v79 = v77[6];
        v77 += 6;
        *(_QWORD *)v78 = v79;
        *((_QWORD *)v78 + 1) = v77;
        *((_QWORD *)v79 + 1) = v78;
        *v77 = v78;
        v77[2] = (CGFloat *)((char *)v77[2] + 1);

        if (__p)
        {
          v81 = __p;
          operator delete(__p);
        }
        return;
      }
      v63 = (double *)v59[6];
      v64 = ((char *)v61 - (char *)v63) >> 4;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 60)
        sub_1BE61F930();
      v66 = v60 - (_QWORD)v63;
      if (v66 >> 3 > v65)
        v65 = v66 >> 3;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
        v67 = 0xFFFFFFFFFFFFFFFLL;
      else
        v67 = v65;
      if (v67)
      {
        if (v67 >> 60)
          sub_1BE61F100();
        v68 = (char *)operator new(16 * v67);
        v69 = (double *)&v68[16 * v64];
        v70 = &v68[16 * v67];
        *v69 = a2;
        v69[1] = a3;
        v62 = (uint64_t)(v69 + 2);
        if (v61 == v63)
          goto LABEL_45;
      }
      else
      {
        v69 = (double *)(16 * v64);
        v70 = 0;
        *v69 = a2;
        v69[1] = a3;
        v62 = 16 * v64 + 16;
        if (v61 == v63)
          goto LABEL_45;
      }
      do
      {
        *((_OWORD *)v69 - 1) = *((_OWORD *)v61 - 1);
        v69 -= 2;
        v61 -= 2;
      }
      while (v61 != v63);
      v61 = (double *)v59[6];
LABEL_45:
      v59[6] = v69;
      v59[7] = v62;
      v59[8] = v70;
      if (v61)
        operator delete(v61);
      goto LABEL_47;
    }
  }
}

void sub_1BE7DA8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BE7DAA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7DAA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7DAA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7DAA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7DAA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7DAA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7DAC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE7DACAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7DACC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DAED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DAEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DAEF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7DAF0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DAF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DAF9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DB308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DB98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE7DBAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE7DBAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7DBCE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t p2s@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16[8];
  void *__p[2];
  __int128 v18;
  int v19;
  uint64_t v20[20];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = MEMORY[0x1E0DE4FD0];
  v4 = MEMORY[0x1E0DE4FD0] + 104;
  v20[0] = MEMORY[0x1E0DE4FD0] + 104;
  v5 = MEMORY[0x1E0DE4FD0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v15 = MEMORY[0x1E0DE4FD0] + 64;
  v14[0] = v7;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v7 - 24)) = v8;
  v14[1] = 0;
  v9 = (std::ios_base *)((char *)v14 + *(_QWORD *)(v14[0] - 24));
  std::ios_base::init(v9, v16);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v10 = v6[5];
  v15 = v6[4];
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = v10;
  v14[0] = v6[1];
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = v6[6];
  v20[0] = v4;
  v14[0] = v3 + 24;
  v15 = v5;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 24;
  std::ostream::operator<<();
  sub_1BE7DBF98(v14, (uint64_t)a1);
  v14[0] = *v6;
  v12 = v6[9];
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = v6[8];
  v15 = v12;
  v16[0] = v11 + 16;
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B81298](v20);
}

void sub_1BE7DBF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B81298](a10);
  _Unwind_Resume(a1);
}

void sub_1BE7DBF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_1BE7DC1C8((uint64_t)va);
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE7DBF98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1C3B811B4](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_16;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1BE7DC150(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BE7DC11CLL);
  }
  __cxa_rethrow();
}

void sub_1BE7DC1B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7DC1C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B81298](a1 + 128);
  return a1;
}

double ul2s@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  BOOL v5;
  int v6;
  size_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  const void *v14;
  __int128 v15;
  unint64_t v16;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  do
  {
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v9 = (a1 % 0xA) | 0x30;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v13 = operator new(v11 + 1);
      *((_QWORD *)&v15 + 1) = v7 + 1;
      v16 = v12 | 0x8000000000000000;
      *(_QWORD *)&v15 = v13;
      *v13 = v9;
      v10 = v13 + 1;
    }
    else
    {
      v16 = 0;
      HIBYTE(v16) = v7 + 1;
      v10 = (char *)&v15 + 1;
      v15 = v9;
      if (!v7)
      {
        BYTE1(v15) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_2;
LABEL_19:
        operator delete(*(void **)a2);
        goto LABEL_2;
      }
    }
    if (v6 >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    memmove(v10, v14, v7);
    v10[v7] = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_19;
LABEL_2:
    result = *(double *)&v15;
    *(_OWORD *)a2 = v15;
    *(_QWORD *)(a2 + 16) = v16;
    v5 = a1 >= 0xA;
    a1 /= 0xAuLL;
  }
  while (v5);
  return result;
}

void sub_1BE7DC3B0(_Unwind_Exception *exception_object)
{
  void **v1;
  int v2;

  if (v2 < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

double i2s@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  double result;
  BOOL v5;
  int v6;
  size_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  const void *v14;
  __int128 v16;
  unint64_t v17;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  do
  {
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v9 = (v3 % 0xA) | 0x30;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v13 = operator new(v11 + 1);
      *((_QWORD *)&v16 + 1) = v7 + 1;
      v17 = v12 | 0x8000000000000000;
      *(_QWORD *)&v16 = v13;
      *v13 = v9;
      v10 = v13 + 1;
    }
    else
    {
      v17 = 0;
      HIBYTE(v17) = v7 + 1;
      v10 = (char *)&v16 + 1;
      v16 = v9;
      if (!v7)
      {
        BYTE1(v16) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_5;
LABEL_21:
        operator delete(*(void **)a2);
        goto LABEL_5;
      }
    }
    if (v6 >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    memmove(v10, v14, v7);
    v10[v7] = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_21;
LABEL_5:
    result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
    v5 = v3 > 9;
    v3 /= 0xAuLL;
  }
  while (v5);
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
  }
  return result;
}

void sub_1BE7DC570(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 23) & 0x80) != 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double i2s@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  double result;
  BOOL v5;
  int v6;
  size_t v7;
  unint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  const void *v14;
  __int128 v16;
  unint64_t v17;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  do
  {
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v9 = (v3 % 0xA) | 0x30;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v13 = operator new(v11 + 1);
      *((_QWORD *)&v16 + 1) = v7 + 1;
      v17 = v12 | 0x8000000000000000;
      *(_QWORD *)&v16 = v13;
      *v13 = v9;
      v10 = v13 + 1;
    }
    else
    {
      v17 = 0;
      HIBYTE(v17) = v7 + 1;
      v10 = (char *)&v16 + 1;
      v16 = v9;
      if (!v7)
      {
        BYTE1(v16) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_5;
LABEL_21:
        operator delete(*(void **)a2);
        goto LABEL_5;
      }
    }
    if (v6 >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    memmove(v10, v14, v7);
    v10[v7] = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_21;
LABEL_5:
    result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
    v5 = v3 > 9;
    v3 /= 0xAu;
  }
  while (v5);
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
  }
  return result;
}

void sub_1BE7DC73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 23) & 0x80) != 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void d2s(double a1@<D0>, _QWORD *a2@<X8>)
{
  size_t v3;
  size_t v4;
  void **p_dst;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **__dst;
  unint64_t v14;
  char __str[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x40uLL, "%.10g", a1);
  v3 = strlen(__str);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (void **)operator new(v6 + 1);
    __dst = p_dst;
    v14 = v7 | 0x8000000000000000;
    goto LABEL_8;
  }
  HIBYTE(v14) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_8:
    memcpy(p_dst, __str, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = strlen(__str);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a2[1] = v9;
    a2[2] = v11 | 0x8000000000000000;
    *a2 = v12;
    a2 = v12;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v8;
    if (!v8)
    {
      *(_BYTE *)a2 = 0;
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        return;
LABEL_18:
      operator delete(__dst);
      return;
    }
  }
  memcpy(a2, __str, v9);
  *((_BYTE *)a2 + v9) = 0;
  if (SHIBYTE(v14) < 0)
    goto LABEL_18;
}

void sub_1BE7DC920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE7DC93C(uint64_t *a1@<X0>, int **a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  int v31;
  unint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  int *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  _OWORD *v49;
  int *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t *v54;
  unint64_t v55;
  void **__dst;
  size_t v57;
  int64_t v58;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = *((unsigned __int8 *)a1 + 23);
  v7 = (uint64_t *)*a1;
  v6 = a1[1];
  do
  {
    if ((v5 & 0x80u) == 0)
      v8 = a1;
    else
      v8 = v7;
    if ((v5 & 0x80u) == 0)
      v9 = v5;
    else
      v9 = v6;
    v10 = v9 - v4;
    if (v9 <= v4)
    {
      v14 = -1;
      v15 = -1 - v4;
LABEL_19:
      if ((char)v5 < 0)
      {
        if (v6 < v4)
LABEL_113:
          sub_1BE61C764();
      }
      else
      {
        v6 = v5;
        v7 = a1;
        if (v4 > v5)
          goto LABEL_113;
      }
      if (v6 - v4 >= v15)
        v16 = v15;
      else
        v16 = v6 - v4;
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        sub_1BE61F1B4();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_dst = (void **)operator new(v18 + 1);
        v57 = v16;
        v58 = v19 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v58) = v16;
        p_dst = (void **)&__dst;
        if (!v16)
        {
LABEL_34:
          *((_BYTE *)p_dst + v16) = 0;
          v20 = HIBYTE(v58);
          v21 = __dst;
          if (v58 < 0)
            v20 = v57;
          else
            v21 = (void **)&__dst;
          if (!v20)
          {
            LODWORD(v22) = 0;
            goto LABEL_83;
          }
          v22 = *(unsigned __int8 *)v21 == 45;
          if (*(_BYTE *)v21 == 45)
          {
            if (v20 < 2)
            {
              LODWORD(v22) = 1;
LABEL_83:
              v23 = 0;
LABEL_84:
              if ((_DWORD)v22)
                v31 = -v23;
              else
                v31 = v23;
              v33 = a2[1];
              v32 = (unint64_t)a2[2];
              if ((unint64_t)v33 < v32)
                goto LABEL_88;
              goto LABEL_61;
            }
            v45 = 2;
            if (*((_BYTE *)v21 + v22) != 48)
              goto LABEL_82;
          }
          else
          {
            v45 = 1;
            if (*((_BYTE *)v21 + v22) != 48)
              goto LABEL_82;
          }
          if ((*((unsigned __int8 *)v21 + v45) | 0x20) == 0x78)
          {
            v27 = 2;
            if (*(_BYTE *)v21 == 45)
              v27 = 3;
            if (v27 >= v20)
              goto LABEL_83;
            goto LABEL_42;
          }
LABEL_82:
          v27 = *(unsigned __int8 *)v21 == 45;
          if (v22 >= v20)
            goto LABEL_83;
LABEL_42:
          v23 = 0;
          do
          {
            v24 = *((char *)v21 + v27);
            if ((v24 - 48) >= 0xA)
            {
              if ((v24 - 97) >= 6)
              {
                if ((v24 - 65) > 5)
                  goto LABEL_84;
                v25 = -55;
              }
              else
              {
                v25 = -87;
              }
            }
            else
            {
              v25 = -48;
            }
            v26 = v24 + 16 * v23 + v25;
            ++v27;
            v28 = v26 < v23;
            if (v27 >= v20)
              break;
            v23 = v26;
          }
          while (!v28);
          if (*(_BYTE *)v21 == 45)
            v29 = 0x80000000;
          else
            v29 = 0x7FFFFFFF;
          if ((_DWORD)v22)
            v30 = -v26;
          else
            v30 = v26;
          if (v28)
            v31 = v29;
          else
            v31 = v30;
          v33 = a2[1];
          v32 = (unint64_t)a2[2];
          if ((unint64_t)v33 < v32)
          {
LABEL_88:
            *v33 = v31;
            a2[1] = v33 + 1;
            if ((SHIBYTE(v58) & 0x80000000) == 0)
            {
LABEL_98:
              v5 = *((unsigned __int8 *)a1 + 23);
              v7 = (uint64_t *)*a1;
              v6 = a1[1];
              goto LABEL_99;
            }
LABEL_89:
            operator delete(__dst);
            goto LABEL_98;
          }
LABEL_61:
          v34 = *a2;
          v35 = (char *)v33 - (char *)*a2;
          v36 = v35 >> 2;
          v37 = (v35 >> 2) + 1;
          if (v37 >> 62)
            sub_1BE61F930();
          v38 = v32 - (_QWORD)v34;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            if (v39 >> 62)
              sub_1BE61F100();
            v40 = operator new(4 * v39);
            v41 = (int *)&v40[4 * v36];
            *v41 = v31;
            v42 = (uint64_t)(v41 + 1);
            v43 = (char *)v33 - (char *)v34;
            if (v33 == v34)
            {
LABEL_95:
              *a2 = v41;
              a2[1] = (int *)v42;
              a2[2] = (int *)&v40[4 * v39];
              if (v34)
                operator delete(v34);
              a2[1] = (int *)v42;
              if ((SHIBYTE(v58) & 0x80000000) == 0)
                goto LABEL_98;
              goto LABEL_89;
            }
          }
          else
          {
            v40 = 0;
            v41 = (int *)(4 * v36);
            *(_DWORD *)(4 * v36) = v31;
            v42 = 4 * v36 + 4;
            v43 = (char *)v33 - (char *)v34;
            if (v33 == v34)
              goto LABEL_95;
          }
          v44 = v43 - 4;
          if (v44 < 0x2C)
            goto LABEL_118;
          if ((unint64_t)((char *)v33 - v40 - v35) < 0x20)
            goto LABEL_118;
          v46 = (v44 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v33[v47 / 0xFFFFFFFFFFFFFFFCLL];
          v41 = (int *)((char *)v41 - v47);
          v49 = &v40[4 * v36 - 16];
          v50 = v33 - 4;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 8;
            v51 -= 8;
          }
          while (v51);
          v33 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_118:
            do
            {
              v53 = *--v33;
              *--v41 = v53;
            }
            while (v33 != v34);
          }
          goto LABEL_95;
        }
      }
      memmove(p_dst, (char *)v7 + v4, v16);
      goto LABEL_34;
    }
    v11 = (char *)v8 + v4;
    v12 = (char *)v8 + v9;
    while (*v11 != 95)
    {
      ++v11;
      if (!--v10)
      {
        v11 = v12;
        break;
      }
    }
    v13 = (_BYTE *)(v11 - (_BYTE *)v8);
    if (v11 == v12)
      v14 = -1;
    else
      v14 = (unint64_t)v13;
    v15 = v14 - v4;
    if (v14 != v4)
      goto LABEL_19;
LABEL_99:
    if ((v5 & 0x80u) == 0)
      v54 = a1;
    else
      v54 = v7;
    if ((v5 & 0x80u) == 0)
      v55 = v5;
    else
      v55 = v6;
    if (v55 <= v14)
      break;
    v4 = v14;
    while (*((_BYTE *)v54 + v4) == 95)
    {
      if (v55 == ++v4)
        return;
    }
  }
  while (v4 != -1);
}

void sub_1BE7DCDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  char v16;
  void *v18;

  if (v16 < 0)
  {
    operator delete(__p);
    v18 = *(void **)v15;
    if (*(_QWORD *)v15)
    {
LABEL_6:
      *(_QWORD *)(v15 + 8) = v18;
      operator delete(v18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v18 = *(void **)v15;
    if (*(_QWORD *)v15)
      goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

double i2sh@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  unsigned __int8 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  const void *v13;
  double result;
  __int128 v16;
  unint64_t v17;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  do
  {
    if ((v3 & 0xF) >= 0xA)
      v5 = (v3 & 0xF) + 87;
    else
      v5 = v3 & 0xF | 0x30;
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    if (v8 >= 0x17)
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v10 = v8 | 7;
      v11 = v10 + 1;
      v12 = operator new(v10 + 1);
      *((_QWORD *)&v16 + 1) = v7 + 1;
      v17 = v11 | 0x8000000000000000;
      *(_QWORD *)&v16 = v12;
      *v12 = v5;
      v9 = v12 + 1;
    }
    else
    {
      v17 = 0;
      HIBYTE(v17) = v7 + 1;
      v9 = (char *)&v16 + 1;
      v16 = v5;
      if (!v7)
      {
        BYTE1(v16) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_5;
LABEL_25:
        operator delete(*(void **)a2);
        goto LABEL_5;
      }
    }
    if (v6 >= 0)
      v13 = (const void *)a2;
    else
      v13 = *(const void **)a2;
    memmove(v9, v13, v7);
    v9[v7] = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_25;
LABEL_5:
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
    v4 = v3 > 0xF;
    v3 >>= 4;
  }
  while (v4);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
    if (a1 < 0)
      goto LABEL_30;
  }
  else
  {
    result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
    if (a1 < 0)
    {
LABEL_30:
      std::operator+<char>();
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      result = *(double *)&v16;
      *(_OWORD *)a2 = v16;
      *(_QWORD *)(a2 + 16) = v17;
    }
  }
  return result;
}

void sub_1BE7DD000(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1BE7DD028(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  size_t *v7;
  size_t v8;
  uint64_t i;
  int v10;
  unint64_t v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string __dst;
  _QWORD v23[3];

  v3 = a2;
  v23[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (a2 - 1 < (unint64_t)(v6 >> 2) || (v3 = v6 >> 2, (unint64_t)v6 >= 4))
  {
    i2sh(**(_DWORD **)a1, (uint64_t)&__dst);
    *(std::string *)a3 = __dst;
    if (v3 != 1)
    {
      v7 = (size_t *)(a3 + 8);
      v8 = *(unsigned __int8 *)(a3 + 23);
      for (i = 1; v3 != i; ++i)
      {
        v10 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *v7;
        v11 = v8 + 1;
        if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
          sub_1BE61F1B4();
        if (v11 >= 0x17)
        {
          v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v13 = v11 | 7;
          v14 = v13 + 1;
          p_dst = (std::string *)operator new(v13 + 1);
          __dst.__r_.__value_.__l.__size_ = v8 + 1;
          __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8 + 1;
          if (!v8)
            goto LABEL_20;
        }
        if (v10 >= 0)
          v15 = (const void *)a3;
        else
          v15 = *(const void **)a3;
        memmove(p_dst, v15, v8);
LABEL_20:
        *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v8) = 95;
        i2sh(*(_DWORD *)(*(_QWORD *)a1 + 4 * i), (uint64_t)__p);
        if ((v21 & 0x80u) == 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if ((v21 & 0x80u) == 0)
          v17 = v21;
        else
          v17 = (std::string::size_type)__p[1];
        v18 = std::string::append(&__dst, (const std::string::value_type *)v16, v17);
        v19 = v18->__r_.__value_.__r.__words[0];
        v23[0] = v18->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        v8 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__r.__words[0] = 0;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        if (v10 < 0)
          operator delete(*(void **)a3);
        *(_QWORD *)a3 = v19;
        *v7 = v23[0];
        *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v23 + 7);
        *(_BYTE *)(a3 + 23) = v8;
        if ((char)v21 < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_32:
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_32;
        }
      }
    }
  }
}

void sub_1BE7DD254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  int v22;

  if ((v22 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v21);
  _Unwind_Resume(exception_object);
}

double ul2sh@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unsigned __int8 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  const void *v13;
  double result;
  __int128 v15;
  unint64_t v16;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  do
  {
    if ((a1 & 0xF) >= 0xA)
      v5 = (a1 & 0xF) + 87;
    else
      v5 = a1 & 0xF | 0x30;
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    if (v8 >= 0x17)
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v10 = v8 | 7;
      v11 = v10 + 1;
      v12 = operator new(v10 + 1);
      *((_QWORD *)&v15 + 1) = v7 + 1;
      v16 = v11 | 0x8000000000000000;
      *(_QWORD *)&v15 = v12;
      *v12 = v5;
      v9 = v12 + 1;
    }
    else
    {
      v16 = 0;
      HIBYTE(v16) = v7 + 1;
      v9 = (char *)&v15 + 1;
      v15 = v5;
      if (!v7)
      {
        BYTE1(v15) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_3;
LABEL_22:
        operator delete(*(void **)a2);
        goto LABEL_3;
      }
    }
    if (v6 >= 0)
      v13 = (const void *)a2;
    else
      v13 = *(const void **)a2;
    memmove(v9, v13, v7);
    v9[v7] = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_22;
LABEL_3:
    *(_OWORD *)a2 = v15;
    *(_QWORD *)(a2 + 16) = v16;
    v4 = a1 > 0xF;
    a1 >>= 4;
  }
  while (v4);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_1BE7DD44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 23) & 0x80) != 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void iv2s(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  size_t *v7;
  size_t v8;
  unsigned __int16 *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  void *__p[2];
  unsigned __int8 v22;
  std::string __dst;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2)
  {
    short2sh(*a1, (uint64_t)&__dst);
    *(std::string *)a3 = __dst;
    v6 = a2 - 1;
    if (a2 != 1)
    {
      v7 = (size_t *)(a3 + 8);
      v8 = *(unsigned __int8 *)(a3 + 23);
      v9 = a1 + 1;
      do
      {
        v10 = (char)v8;
        if ((v8 & 0x80u) == 0)
          v11 = v8;
        else
          v11 = *v7;
        v12 = v11 + 1;
        if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8)
          sub_1BE61F1B4();
        if (v12 >= 0x17)
        {
          v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v14 = v12 | 7;
          v15 = v14 + 1;
          p_dst = (std::string *)operator new(v14 + 1);
          __dst.__r_.__value_.__l.__size_ = v11 + 1;
          __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 1;
          if (!v11)
            goto LABEL_20;
        }
        if (v10 >= 0)
          v16 = (const void *)a3;
        else
          v16 = *(const void **)a3;
        memmove(p_dst, v16, v11);
LABEL_20:
        *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v11) = 95;
        short2sh(*v9, (uint64_t)__p);
        if ((v22 & 0x80u) == 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v18 = v22;
        else
          v18 = (std::string::size_type)__p[1];
        v19 = std::string::append(&__dst, (const std::string::value_type *)v17, v18);
        v20 = v19->__r_.__value_.__r.__words[0];
        v24[0] = v19->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
        v8 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        v19->__r_.__value_.__r.__words[0] = 0;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        if (v10 < 0)
          operator delete(*(void **)a3);
        *(_QWORD *)a3 = v20;
        *v7 = v24[0];
        *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v24 + 7);
        *(_BYTE *)(a3 + 23) = v8;
        if ((char)v22 < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_32:
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_32;
        }
        ++v9;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_1BE7DD67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  int v22;

  if ((v22 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v21);
  _Unwind_Resume(exception_object);
}

double short2sh@<D0>(unsigned __int16 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned __int8 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  const void *v13;
  double result;
  __int128 v15;
  unint64_t v16;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  do
  {
    if ((a1 & 0xFu) >= 0xA)
      v5 = (a1 & 0xF) + 87;
    else
      v5 = a1 & 0xF | 0x30;
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    if (v8 >= 0x17)
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v10 = v8 | 7;
      v11 = v10 + 1;
      v12 = operator new(v10 + 1);
      *((_QWORD *)&v15 + 1) = v7 + 1;
      v16 = v11 | 0x8000000000000000;
      *(_QWORD *)&v15 = v12;
      *v12 = v5;
      v9 = v12 + 1;
    }
    else
    {
      v16 = 0;
      HIBYTE(v16) = v7 + 1;
      v9 = (char *)&v15 + 1;
      v15 = v5;
      if (!v7)
      {
        BYTE1(v15) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_3;
LABEL_21:
        operator delete(*(void **)a2);
        goto LABEL_3;
      }
    }
    if (v6 >= 0)
      v13 = (const void *)a2;
    else
      v13 = *(const void **)a2;
    memmove(v9, v13, v7);
    v9[v7] = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_21;
LABEL_3:
    *(_OWORD *)a2 = v15;
    *(_QWORD *)(a2 + 16) = v16;
    v4 = a1;
    a1 >>= 4;
  }
  while (v4 > 0xF);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_1BE7DD874(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 23) & 0x80) != 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1BE7DE2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BE7DE354(id result, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[3];
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x2020000000;
    v9 = &qword_1EF568000;
    v10 = (uint64_t *)qword_1EF5682E0;
    v22 = qword_1EF5682E0;
    if (qword_1EF5682E0)
      goto LABEL_8;
    v23 = 0;
    if (qword_1EF5682B8)
    {
      v10 = (uint64_t *)qword_1EF5682B8;
    }
    else
    {
      v26 = xmmword_1E77F5458;
      v27 = 0;
      qword_1EF5682B8 = _sl_dlopen();
      v11 = v23;
      v10 = (uint64_t *)qword_1EF5682B8;
      if (!qword_1EF5682B8)
        goto LABEL_28;
      if (v23)
        goto LABEL_30;
    }
    while (1)
    {
      v10 = (uint64_t *)dlsym(v10, "kCTFontAttributeName");
      v20[3] = (uint64_t)v10;
      v9[92] = (uint64_t)v10;
LABEL_8:
      v9 = &v19;
      _Block_object_dispose(&v19, 8);
      if (v10)
      {
        v24[0] = *v10;
        v25[0] = a4;
        v19 = 0;
        v20 = &v19;
        v21 = 0x2020000000;
        v10 = &qword_1EF568000;
        a4 = (uint64_t *)qword_1EF5682E8;
        v22 = qword_1EF5682E8;
        if (!qword_1EF5682E8)
        {
          v23 = 0;
          if (qword_1EF5682B8)
          {
            a4 = (uint64_t *)qword_1EF5682B8;
          }
          else
          {
            v26 = xmmword_1E77F5458;
            v27 = 0;
            qword_1EF5682B8 = _sl_dlopen();
            a4 = (uint64_t *)qword_1EF5682B8;
            if (!qword_1EF5682B8)
              goto LABEL_28;
            if (v23)
              free(v23);
          }
          a4 = (uint64_t *)dlsym(a4, "kCTForegroundColorAttributeName");
          v20[3] = (uint64_t)a4;
          qword_1EF5682E8 = (uint64_t)a4;
        }
        v10 = &v19;
        _Block_object_dispose(&v19, 8);
        if (a4)
        {
          v24[1] = *a4;
          v25[1] = a3;
          v19 = 0;
          v20 = &v19;
          v21 = 0x2020000000;
          a4 = &qword_1EF568000;
          a3 = (_QWORD *)qword_1EF5682F0;
          v22 = qword_1EF5682F0;
          if (!qword_1EF5682F0)
          {
            v23 = 0;
            if (qword_1EF5682B8)
            {
              a3 = (_QWORD *)qword_1EF5682B8;
            }
            else
            {
              v26 = xmmword_1E77F5458;
              v27 = 0;
              qword_1EF5682B8 = _sl_dlopen();
              a3 = (_QWORD *)qword_1EF5682B8;
              if (!qword_1EF5682B8)
              {
LABEL_28:
                v11 = (void *)abort_report_np();
                goto LABEL_29;
              }
              if (v23)
                free(v23);
            }
            a3 = dlsym(a3, "kCTParagraphStyleAttributeName");
            v20[3] = (uint64_t)a3;
            qword_1EF5682F0 = (uint64_t)a3;
          }
          _Block_object_dispose(&v19, 8);
          if (a3)
          {
            v24[2] = *a3;
            v25[2] = a5;
            v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v12, (uint64_t)v25, (uint64_t)v24, 3, v13);
            v15 = objc_alloc(MEMORY[0x1E0CB3498]);
            return (id)objc_msgSend_initWithString_attributes_(v15, v16, a2, v14, v17, v18);
          }
        }
      }
      dlerror();
      v11 = (void *)abort_report_np();
LABEL_29:
      __break(1u);
LABEL_30:
      free(v11);
    }
  }
  return result;
}

void sub_1BE7DE6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DE810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DE958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DE968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DE978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DE988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DE998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DEA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHPolygon;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7DEB1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7DEB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DECC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DECD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DEDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7DEE0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DEEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7DEEC8(uint64_t result, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v29;
  double v30;
  double v31;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;

  v6 = *(double *)(result + 40);
  v5 = *(double *)(result + 48);
  v8 = *(double *)(result + 56);
  v7 = *(double *)(result + 64);
  v9 = v8 - v6;
  v10 = v7 - v5;
  v11 = (float)(v10 * v10) + (float)(v9 * v9);
  if (v11 > 0.0)
  {
    v9 = v9 / v11;
    v10 = v10 / v11;
  }
  v12 = a4 - a2;
  v13 = a5 - a3;
  v14 = (float)(v13 * v13) + (float)(v12 * v12);
  if (v14 > 0.0)
  {
    v12 = v12 / v14;
    v13 = v13 / v14;
  }
  v15 = v9;
  v16 = v10;
  v17 = v12;
  v18 = v13;
  v19 = v15 * v13 - v17 * v16;
  if (v19 != 0.0)
  {
    v20 = (v17 * (v5 - a3) - (v6 - a2) * v18) / v19;
    v21 = v20;
    v17 = v6 + v20 * v15;
    v15 = v5 + v21 * v16;
  }
  if (v8 >= v6)
    v22 = *(double *)(result + 40);
  else
    v22 = *(double *)(result + 56);
  v23 = v22 + -0.00100000005;
  if (v6 >= v8)
    v8 = *(double *)(result + 40);
  v24 = v8 + 0.00100000005;
  if (a4 >= a2)
    v25 = a2;
  else
    v25 = a4;
  v26 = v25 + -0.00100000005;
  if (v17 >= v23 && v17 <= v24 && v17 >= v26)
  {
    if (a2 < a4)
      a2 = a4;
    v29 = a2 + 0.00100000005;
    if (v7 >= v5)
      v30 = *(double *)(result + 48);
    else
      v30 = *(double *)(result + 64);
    v31 = v30 + -0.00100000005;
    if (v17 <= v29 && v15 >= v31)
    {
      v33 = v5 >= v7 ? *(double *)(result + 48) : *(double *)(result + 64);
      v34 = v33 + 0.00100000005;
      v35 = a5 >= a3 ? a3 : a5;
      v36 = v35 + -0.00100000005;
      if (v15 <= v34 && v15 >= v36)
      {
        if (a3 >= a5)
          v38 = a3;
        else
          v38 = a5;
        if (v15 <= v38 + 0.00100000005)
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
      }
    }
  }
  return result;
}

BOOL CHLineSegment::intersectsWithLineSegment(CHLineSegment *this, const CHLineSegment *a2)
{
  double y;
  double x;
  double v4;
  double v5;
  float v6;
  float v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v31;
  double v32;
  double v33;
  double v34;
  double v36;
  double v37;
  double v38;
  double v40;

  x = this->var0.x;
  y = this->var0.y;
  v5 = this->var1.x;
  v4 = this->var1.y;
  v6 = v5 - this->var0.x;
  v7 = v4 - y;
  v8 = (float)(v7 * v7) + (float)(v6 * v6);
  if (v8 > 0.0)
  {
    v6 = v6 / v8;
    v7 = v7 / v8;
  }
  v10 = a2->var0.x;
  v9 = a2->var0.y;
  v12 = a2->var1.x;
  v11 = a2->var1.y;
  v13 = v12 - a2->var0.x;
  v14 = v11 - v9;
  v15 = (float)(v14 * v14) + (float)(v13 * v13);
  if (v15 > 0.0)
  {
    v13 = v13 / v15;
    v14 = v14 / v15;
  }
  v16 = v6;
  v17 = v7;
  v18 = v13;
  v19 = v14;
  v20 = v16 * v14 - v18 * v17;
  if (v20 != 0.0)
  {
    v21 = (v18 * (y - v9) - (x - v10) * v19) / v20;
    v22 = v21;
    v18 = x + v21 * v16;
    v16 = y + v22 * v17;
  }
  if (v5 >= x)
    v23 = this->var0.x;
  else
    v23 = this->var1.x;
  v24 = v23 + -0.00100000005;
  if (x >= v5)
    v5 = this->var0.x;
  v25 = v5 + 0.00100000005;
  if (v12 >= v10)
    v26 = a2->var0.x;
  else
    v26 = a2->var1.x;
  v27 = v26 + -0.00100000005;
  if (v18 < v24 || v18 > v25 || v18 < v27)
    return 0;
  if (v10 >= v12)
    v31 = a2->var0.x;
  else
    v31 = a2->var1.x;
  v32 = v31 + 0.00100000005;
  if (v4 >= y)
    v33 = this->var0.y;
  else
    v33 = this->var1.y;
  v34 = v33 + -0.00100000005;
  if (v18 > v32 || v16 < v34)
    return 0;
  if (y < v4)
    y = this->var1.y;
  v36 = y + 0.00100000005;
  if (v11 >= v9)
    v37 = a2->var0.y;
  else
    v37 = a2->var1.y;
  v38 = v37 + -0.00100000005;
  if (v16 > v36 || v16 < v38)
    return 0;
  if (v9 >= v11)
    v40 = a2->var0.y;
  else
    v40 = a2->var1.y;
  return v16 <= v40 + 0.00100000005;
}

void sub_1BE7DF260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CHLineSegment::CHLineSegment(CHLineSegment *this, CGPoint a2, CGPoint a3)
{
  this->var0 = a2;
  this->var1 = a3;
}

{
  this->var0 = a2;
  this->var1 = a3;
}

uint64_t sub_1BE7DF2AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7DF2BC(uint64_t a1)
{

}

void sub_1BE7DF2C4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float v30;
  float v31;
  double v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  double v56;
  double v57;
  float v58;
  float v59;
  float v60;
  double v61;
  double v62;
  float v63;
  float v64;
  double v65;
  double *v66;
  float v67;
  float v68;
  float v69;
  double v70;
  double v71;
  float v72;
  float v73;
  double v74;
  double *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  CHPolygon *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  __int128 v99;

  v10 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_opt_self();
  v16 = objc_msgSend_vertexCount(v10, v11, v12, v13, v14, v15);
  v22 = (char *)malloc_type_calloc(v16, 0x10uLL, 0x1000040451B5BE8uLL);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = a4 - a2;
  v27 = a5 - a3;
  v28 = -(a5 - a3);
  v29 = v26;
  v30 = v27;
  v31 = (float)(v30 * v30) + (float)(v29 * v29);
  if (v31 <= 0.0)
    v31 = 1.0;
  v32 = (float)(v29 / v31);
  v33 = (float)(v30 / v31);
LABEL_4:
  v34 = 16 * v23;
  while (v23 < objc_msgSend_vertexCount(v10, v17, v18, v19, v20, v21, *(_QWORD *)&v95, *(_QWORD *)&v96))
  {
    v40 = objc_msgSend_vertexCount(v10, v35, v36, v37, v38, v39);
    v46 = objc_msgSend_vertices(v10, v41, v42, v43, v44, v45);
    v47 = *(double *)(v46 + v34);
    v48 = *(double *)(v46 + v34 + 8);
    v54 = objc_msgSend_vertices(v10, v49, v50, v51, v52, v53);
    v55 = *(_OWORD *)(v54 + 16 * (++v23 % v40));
    if (v25 + 4 > v16)
    {
      v99 = *(_OWORD *)(v54 + 16 * (v23 % v40));
      v16 += 4;
      v22 = (char *)malloc_type_realloc(v22, 16 * v16, 0x1000040451B5BE8uLL);
      v55 = v99;
    }
    v56 = (v47 - a2) * v28 + v26 * (v48 - a3);
    v57 = (*(double *)&v55 - a2) * v28 + v26 * (*((double *)&v55 + 1) - a3);
    if (v56 < 0.0 && v57 < 0.0)
    {
      *(_OWORD *)&v22[16 * v25] = v55;
      ++v24;
      ++v25;
      goto LABEL_4;
    }
    if (v56 >= 0.0 && v57 < 0.0)
    {
      v67 = *(double *)&v55 - v47;
      v68 = *((double *)&v55 + 1) - v48;
      v69 = (float)(v68 * v68) + (float)(v67 * v67);
      if (v69 > 0.0)
      {
        v67 = v67 / v69;
        v68 = v68 / v69;
      }
      v70 = v67;
      v71 = v68;
      v72 = v32 * v71 - v70 * v33;
      if (v72 != 0.0)
      {
        v73 = (v70 * (a3 - v48) - (a2 - v47) * v71) / v72;
        v74 = v73;
        v97 = a3 + v74 * v33;
        v98 = a2 + v74 * v32;
      }
      v75 = (double *)&v22[16 * v25];
      *v75 = v98;
      v75[1] = v97;
      *((_OWORD *)v75 + 1) = v55;
      ++v24;
      v25 += 2;
      goto LABEL_4;
    }
    v34 += 16;
    if (v56 < 0.0 && v57 >= 0.0)
    {
      v58 = *(double *)&v55 - v47;
      v59 = *((double *)&v55 + 1) - v48;
      v60 = (float)(v59 * v59) + (float)(v58 * v58);
      if (v60 > 0.0)
      {
        v58 = v58 / v60;
        v59 = v59 / v60;
      }
      v61 = v58;
      v62 = v59;
      v63 = v32 * v62 - v61 * v33;
      if (v63 != 0.0)
      {
        v64 = (v61 * (a3 - v48) - (a2 - v47) * v62) / v63;
        v65 = v64;
        v95 = a3 + v65 * v33;
        v96 = a2 + v65 * v32;
      }
      v66 = (double *)&v22[16 * v25];
      *v66 = v96;
      v66[1] = v95;
      ++v25;
      goto LABEL_4;
    }
  }
  v76 = malloc_type_calloc(v25, 0x10uLL, 0x1000040451B5BE8uLL);
  v82 = v76;
  if (v25 == v24)
  {
    v83 = (const void *)objc_msgSend_vertices(v10, v77, v78, v79, v80, v81);
    memcpy(v82, v83, 16 * v24);
  }
  else if (v25 >= 1)
  {
    v84 = (__int128 *)v22;
    v85 = v76;
    v86 = v25;
    do
    {
      v87 = *v84++;
      *v85++ = v87;
      --v86;
    }
    while (v86);
  }
  free(v22);

  v88 = [CHPolygon alloc];
  v92 = objc_msgSend_initWithVertices_vertexCount_(v88, v89, (uint64_t)v82, v25, v90, v91);
  v93 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v94 = *(void **)(v93 + 40);
  *(_QWORD *)(v93 + 40) = v92;

}

void sub_1BE7DF65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF66C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF67C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF6AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DF6CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGFloat CHLineSegment::getEnd(CHLineSegment *this)
{
  return this->var1.x;
}

CGFloat CHLineSegment::getStart(CHLineSegment *this)
{
  return this->var0.x;
}

CGFloat CHLineSegment::intersectionPointWithLine(CHLineSegment *this, const CHLineSegment *a2)
{
  CGFloat result;
  double y;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;

  result = this->var0.x;
  y = this->var0.y;
  v4 = this->var1.x - this->var0.x;
  v5 = this->var1.y - y;
  v6 = (float)(v5 * v5) + (float)(v4 * v4);
  if (v6 > 0.0)
  {
    v4 = v4 / v6;
    v5 = v5 / v6;
  }
  v7 = a2->var0.y;
  v8 = a2->var1.x - a2->var0.x;
  v9 = a2->var1.y - v7;
  v10 = (float)(v9 * v9) + (float)(v8 * v8);
  if (v10 > 0.0)
  {
    v8 = v8 / v10;
    v9 = v9 / v10;
  }
  v11 = v4;
  v12 = v8;
  v13 = v9;
  v14 = v11 * v13 - v12 * v5;
  if (v14 != 0.0)
  {
    v15 = (v12 * (y - v7) - (result - a2->var0.x) * v13) / v14;
    return result + v15 * v11;
  }
  return result;
}

void replaceUnsupportedCharactersByTransliteration(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  CoreHandwriting::synthesis *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CoreHandwriting::synthesis *v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  void *v29;
  int64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[4];
  CoreHandwriting::synthesis *v34;
  id v35;
  uint64_t *v36;
  id *v37;
  void **p_p;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  unint64_t v45;
  unint64_t v46;
  id v47;
  uint8_t buf[4];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v47 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  __p = 0;
  v45 = 0;
  v46 = 0;
  v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  v12 = v11;
  if (v11)
  {
    if (v11 >> 60)
      sub_1BE61F930();
    v11 = (unint64_t)operator new(16 * v11);
    __p = (void *)(v11 + (v45 & 0xFFFFFFFFFFFFFFF0));
    v45 = (unint64_t)__p;
    v46 = v11 + 16 * v12;
  }
  CoreHandwriting::synthesis::CHDiffusionSynthesisSetOfSupportedCharacterByModel((CoreHandwriting::synthesis *)v11);
  v13 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
  CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = 0;
  v20 = objc_msgSend_length(v5, v15, v16, v17, v18, v19);
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = sub_1BE7DFB74;
  v33[3] = &unk_1E77F5510;
  v21 = v13;
  v34 = v21;
  v37 = &v47;
  p_p = &__p;
  v22 = v14;
  v39 = a2;
  v35 = v22;
  v36 = &v40;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v5, v23, 0, v20, (uint64_t)v33, v24);
  v25 = v41;
  if (v41[3] >= 1)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v26 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = v41[3];
      *(_DWORD *)buf = 67109120;
      v49 = v27;
      _os_log_impl(&dword_1BE607000, v26, OS_LOG_TYPE_DEFAULT, "String contains %i unsupported code points.", buf, 8u);
    }

    v25 = v41;
  }
  v28 = v47;
  a3[1] = 0;
  *a3 = v28;
  a3[2] = 0;
  a3[3] = 0;
  v29 = __p;
  v30 = v45 - (_QWORD)__p;
  if ((void *)v45 != __p)
  {
    if (v30 < 0)
      sub_1BE61F930();
    v31 = (char *)operator new(v45 - (_QWORD)__p);
    a3[1] = v31;
    v32 = &v31[16 * (v30 >> 4)];
    a3[3] = v32;
    memcpy(v31, v29, v30);
    a3[2] = v32;
  }
  a3[4] = v25[3];

  _Block_object_dispose(&v40, 8);
  if (__p)
  {
    v45 = (unint64_t)__p;
    operator delete(__p);
  }

}

void sub_1BE7DFACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1BE7DFB74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int IsMember;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  _QWORD v75[4];
  id v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char v81;

  v8 = (int)a2;
  if (objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6))
  {
    unicodeToNSString(v8, v10, v11, v12, v13, v14);
    v74 = (id)objc_claimAutoreleasedReturnValue();
    sub_1BE7DFEF8(a1 + 56, v74, a3, a4);

    return;
  }
  if (objc_msgSend_firstCodepointInString(CFSTR(" "), v10, v11, v12, v13, v14) == v8)
  {
    sub_1BE7DFEF8(a1 + 56, CFSTR(" "), a3, a4);
    return;
  }
  objc_msgSend_controlCharacterSet(MEMORY[0x1E0CB3500], v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_characterIsMember_(v20, v21, (unsigned __int16)v8, v22, v23, v24) & 1) == 0)
  {

LABEL_9:
    unicodeToNSString(v8, v36, v37, v38, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v42, (uint64_t)v41, v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    if (v46)
    {
      objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v47, (uint64_t)v41, v48, v49, v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = 0;
      v79 = &v78;
      v80 = 0x2020000000;
      v81 = 1;
      v57 = objc_msgSend_length(v51, v52, v53, v54, v55, v56);
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 3221225472;
      v75[2] = sub_1BE7E00B8;
      v75[3] = &unk_1E77F3EB8;
      v76 = *(id *)(a1 + 32);
      v77 = &v78;
      objc_msgSend_enumerateCodepointsInRange_usingBlock_(v51, v58, 0, v57, (uint64_t)v75, v59);
      if (*((_BYTE *)v79 + 24)
        || objc_msgSend_isEqualToString_(v51, v60, (uint64_t)CFSTR(" "), v61, v62, v63))
      {
        sub_1BE7DFEF8(a1 + 56, v51, a3, a4);

        _Block_object_dispose(&v78, 8);
LABEL_17:

        return;
      }

      _Block_object_dispose(&v78, 8);
    }
    CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition(v8, *(_QWORD *)(a1 + 72));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_length(v51, v64, v65, v66, v67, v68))
    {

      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      unicodeToNSString(v8, v69, v70, v71, v72, v73);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
    }
    sub_1BE7DFEF8(a1 + 56, v51, a3, a4);
    goto LABEL_17;
  }
  objc_msgSend_newlineCharacterSet(MEMORY[0x1E0CB3500], v25, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  IsMember = objc_msgSend_characterIsMember_(v30, v31, (unsigned __int16)v8, v32, v33, v34);

  if (IsMember)
    goto LABEL_9;
}

void sub_1BE7DFE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DFE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DFE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7DFEB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7DFEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DFED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7DFEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7DFEF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  id v26;

  v7 = a2;
  v13 = 0;
  v26 = v7;
  while (v13 < objc_msgSend_length(v7, v8, v9, v10, v11, v12))
  {
    v15 = *(uint64_t **)(a1 + 8);
    v17 = (_QWORD *)v15[1];
    v16 = v15[2];
    if ((unint64_t)v17 < v16)
    {
      *v17 = a3;
      v17[1] = a4;
      v14 = v17 + 2;
      goto LABEL_3;
    }
    v18 = (_QWORD *)*v15;
    v19 = ((uint64_t)v17 - *v15) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      sub_1BE61F930();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 60)
        sub_1BE61F100();
      v23 = (char *)operator new(16 * v22);
      v24 = &v23[16 * v19];
      *(_QWORD *)v24 = a3;
      *((_QWORD *)v24 + 1) = a4;
      v25 = (uint64_t)v24;
      if (v17 == v18)
      {
LABEL_15:
        v14 = v24 + 16;
        *v15 = v25;
        v15[1] = (uint64_t)(v24 + 16);
        v15[2] = (uint64_t)&v23[16 * v22];
        if (v17)
          goto LABEL_20;
        goto LABEL_3;
      }
    }
    else
    {
      v23 = 0;
      v24 = (char *)(16 * v19);
      *(_QWORD *)v24 = a3;
      *((_QWORD *)v24 + 1) = a4;
      v25 = 16 * v19;
      if (v17 == v18)
        goto LABEL_15;
    }
    do
    {
      *(_OWORD *)(v25 - 16) = *((_OWORD *)v17 - 1);
      v25 -= 16;
      v17 -= 2;
    }
    while (v17 != v18);
    v17 = (_QWORD *)*v15;
    v14 = v24 + 16;
    *v15 = v25;
    v15[1] = (uint64_t)(v24 + 16);
    v15[2] = (uint64_t)&v23[16 * v22];
    if (v17)
LABEL_20:
      operator delete(v17);
LABEL_3:
    v7 = v26;
    v15[1] = (uint64_t)v14;
    ++v13;
  }
  objc_msgSend_appendString_(**(void ***)a1, v8, (uint64_t)v26, v10, v11, v12);

}

void sub_1BE7E007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E0090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E00A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7E00B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((result & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return result;
}

id indicesWithPersonalizedSynthesisSupport(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v27;
  id v28;
  uint64_t v29;

  v3 = a1;
  if ((CHHasPersonalizedSynthesisSupport() & 1) != 0)
  {
    if (qword_1EF5682F8 != -1)
      dispatch_once(&qword_1EF5682F8, &unk_1E77F1990);
    v9 = objc_alloc_init(MEMORY[0x1E0CB3780]);
    v15 = objc_msgSend_length(v3, v10, v11, v12, v13, v14);
    v24 = MEMORY[0x1E0C809B0];
    v25 = 3221225472;
    v26 = sub_1BE7E04E0;
    v27 = &unk_1E77F5538;
    v29 = a2;
    v16 = v9;
    v28 = v16;
    objc_msgSend_enumerateCodepointsInRange_usingBlock_(v3, v17, 0, v15, (uint64_t)&v24, v18);
    objc_msgSend_indexesOfCharacters_withWeakCharacters_(v3, v19, (uint64_t)v16, qword_1EF568308, v20, v21, v24, v25, v26, v27);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v4, v5, v6, v7, v8);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v22;
}

void sub_1BE7E0208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7E0228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E023C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E024C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E025C(CoreHandwriting::synthesis *a1)
{
  void *v1;
  id v2;
  CoreHandwriting::synthesis *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t CodepointInString;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int IsMember;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int isEqualToString;
  uint64_t v42;
  unsigned int v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  CoreHandwriting::synthesis *v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(a1);
  v58 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
  CoreHandwriting::synthesis::CHDiffusionSynthesisSetOfSupportedCharacterByModel(v58);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  v59 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v3 = v58;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v60, (uint64_t)v64, 16, v5);
  if (v10)
  {
    v11 = *(_QWORD *)v61;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v61 != v11)
          objc_enumerationMutation(v3);
        v15 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
        objc_msgSend_objectForKeyedSubscript_(v3, v6, (uint64_t)v15, v7, v8, v9, v58);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        CodepointInString = objc_msgSend_firstCodepointInString(v16, v17, v18, v19, v20, v21);
        IsMember = objc_msgSend_longCharacterIsMember_(v1, v23, CodepointInString, v24, v25, v26);

        if (IsMember)
        {
          v33 = objc_msgSend_firstCodepointInString(v15, v28, v29, v30, v31, v32);
          objc_msgSend_addCharactersInRange_(v2, (const char *)v2, v33, 1, v34, v35);
        }
        else
        {
          objc_msgSend_objectForKeyedSubscript_(v3, v28, (uint64_t)v15, v30, v31, v32);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToString = objc_msgSend_isEqualToString_(v36, v37, (uint64_t)CFSTR(" "), v38, v39, v40);

          if (isEqualToString)
          {
            v43 = objc_msgSend_firstCodepointInString(v15, v6, v42, v7, v8, v9);
            objc_msgSend_addCharactersInRange_(v59, (const char *)v59, v43, 1, v13, v14);
          }
        }
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v60, (uint64_t)v64, 16, v9);
    }
    while (v10);
  }

  objc_msgSend_formUnionWithCharacterSet_(v2, v44, (uint64_t)v1, v45, v46, v47);
  objc_storeStrong((id *)&qword_1EF568300, v2);
  v53 = objc_msgSend_firstCodepointInString(CFSTR(" "), v48, v49, v50, v51, v52);
  objc_msgSend_addCharactersInRange_(v59, v54, v53, 1, v55, v56);
  v57 = (void *)qword_1EF568308;
  qword_1EF568308 = (uint64_t)v59;

}

void sub_1BE7E0470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE7E04E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((objc_msgSend_longCharacterIsMember_((void *)qword_1EF568308, a2, (uint64_t)a2, a4, a5, a6) & 1) == 0)
  {
    if ((objc_msgSend_longCharacterIsMember_((void *)qword_1EF568300, v8, (uint64_t)a2, v9, v10, v11) & 1) != 0
      || (CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition((int)a2, *(_QWORD *)(a1 + 40)), v15 = (void *)objc_claimAutoreleasedReturnValue(), v21 = objc_msgSend_length(v15, v16, v17, v18, v19, v20), v15, v21))
    {
      objc_msgSend_addCharactersInRange_(*(void **)(a1 + 32), v12, a2, 1, v13, v14);
    }
  }
}

void sub_1BE7E0570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id chunkStringForSynthesis(NSString *a1, unint64_t a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t i;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  id v118;
  const char *v119;
  id v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t j;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  uint64_t v149;
  NSUInteger *v150;
  NSUInteger location;
  NSUInteger length;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSRange v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  id v188;
  void *v189;
  uint64_t v190;
  id v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  NSString *v196;
  uint8_t *__p;
  id obj;
  id v200;
  void *v201;
  id v202;
  void *v203;
  _QWORD v204[4];
  id v205;
  id v206;
  id *v207;
  id *v208;
  _QWORD v209[4];
  id v210;
  id v211;
  id v212;
  id v213;
  uint8_t *v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  id *v220;
  id *v221;
  _QWORD v222[8];
  uint8_t buf[8];
  uint8_t *v224;
  uint64_t v225;
  __n128 (*v226)(__n128 *, __n128 *);
  uint64_t (*v227)();
  void *v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD v231[4];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _QWORD v236[4];
  id v237;
  id v238;
  id v239;
  _QWORD v240[4];
  id v241;
  id v242;
  _BYTE v243[128];
  uint64_t v244;
  NSRange v245;

  v244 = *MEMORY[0x1E0C80C00];
  v196 = a1;
  unicodeToNSString(9633, v2, v3, v4, v5, v6);
  v242 = (id)objc_claimAutoreleasedReturnValue();
  replaceUnsupportedCharactersByTransliteration(v196, 0, buf);
  v203 = *(void **)buf;
  __p = v224;
  v190 = v225;
  *(_QWORD *)buf = 0;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  indicesWithPersonalizedSynthesisSupport(v203, 0);
  v7 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v7;
  v189 = (void *)v7;
  if (v7 && CHHasPersonalizedSynthesisModelReady(v7, v8, v9, v10, v11, v12))
  {
    v14 = objc_msgSend_mutableCopy(v13, v8, v9, v10, v11, v12);
    v15 = (void *)MEMORY[0x1E0CB3788];
    v21 = objc_msgSend_length(v203, v16, v17, v18, v19, v20);
    objc_msgSend_indexSetWithIndexesInRange_(v15, v22, 0, v21, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeIndexes_(v25, v26, v14, v27, v28, v29);
  }
  else
  {
    v35 = (void *)MEMORY[0x1E0CB3788];
    v36 = objc_msgSend_length(v203, v8, v9, v10, v11, v12);
    v25 = 0;
    objc_msgSend_indexSetWithIndexesInRange_(v35, v37, 0, v36, v38, v39);
    v14 = objc_claimAutoreleasedReturnValue();
  }
  v195 = v25;
  v193 = (void *)v14;
  objc_msgSend_newlineCharacterSet(MEMORY[0x1E0CB3500], v30, v31, v32, v33, v34);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexesOfCharacters_(v203, v41, (uint64_t)v40, v42, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v192 = (void *)objc_msgSend_mutableCopy(v45, v46, v47, v48, v49, v50);

  objc_msgSend_removeIndexes_(v193, v51, (uint64_t)v192, v52, v53, v54);
  objc_msgSend_removeIndexes_(v25, v55, (uint64_t)v192, v56, v57, v58);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v59, v60, v61, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v240[0] = MEMORY[0x1E0C809B0];
  v240[1] = 3221225472;
  v240[2] = sub_1BE7E0FA4;
  v240[3] = &unk_1E77F5560;
  v191 = v64;
  v241 = v191;
  objc_msgSend_enumerateRangesUsingBlock_(v193, v65, (uint64_t)v240, v66, v67, v68);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v69, v70, v71, v72, v73);
  v239 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v74, v75, v76, v77, v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexesOfCharacters_(v203, v80, (uint64_t)v79, v81, v82, v83);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v201 = (void *)objc_msgSend_mutableCopy(v84, v85, v86, v87, v88, v89);

  objc_msgSend_ch_synthesisHallucinationProneCharSet(MEMORY[0x1E0CB3500], v90, v91, v92, v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexesOfCharacters_(v203, v96, (uint64_t)v95, v97, v98, v99);
  v194 = (void *)objc_claimAutoreleasedReturnValue();

  v188 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v100 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v236[0] = MEMORY[0x1E0C809B0];
  v236[1] = 3221225472;
  v236[2] = sub_1BE7E101C;
  v236[3] = &unk_1E77F5588;
  v200 = v188;
  v237 = v200;
  v202 = v100;
  v238 = v202;
  objc_msgSend_enumerateRangesUsingBlock_(v194, v101, (uint64_t)v236, v102, v103, v104, v188);
  v234 = 0u;
  v235 = 0u;
  v232 = 0u;
  v233 = 0u;
  obj = v191;
  v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v105, (uint64_t)&v232, (uint64_t)v243, 16, v106);
  if (v112)
  {
    v113 = *(_QWORD *)v233;
    do
    {
      for (i = 0; i != v112; ++i)
      {
        if (*(_QWORD *)v233 != v113)
          objc_enumerationMutation(obj);
        v115 = objc_msgSend_rangeValue(*(void **)(*((_QWORD *)&v232 + 1) + 8 * i), v107, v108, v109, v110, v111);
        v117 = v116;
        v231[0] = 0;
        v231[1] = v231;
        v231[2] = 0x2020000000;
        v231[3] = v116 / vcvtpd_u64_f64((double)v116 / (double)a2);
        *(_QWORD *)buf = 0;
        v224 = buf;
        v225 = 0x4012000000;
        v226 = sub_1BE7E1068;
        v227 = nullsub_39;
        v228 = &unk_1BE94989A;
        v229 = v115;
        v230 = 0;
        v222[0] = 0;
        v222[1] = v222;
        v222[2] = 0x4012000000;
        v222[3] = sub_1BE7E1068;
        v222[4] = nullsub_39;
        v222[5] = &unk_1BE94989A;
        v222[6] = v115;
        v222[7] = 0;
        v209[0] = MEMORY[0x1E0C809B0];
        v209[1] = 3221225472;
        v209[2] = sub_1BE7E1078;
        v209[3] = &unk_1E77F55B0;
        v210 = v201;
        v214 = buf;
        v215 = v222;
        v217 = v115;
        v218 = v117;
        v219 = a2;
        v211 = v200;
        v212 = v202;
        v118 = v203;
        v220 = &v239;
        v221 = &v242;
        v213 = v118;
        v216 = v231;
        objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v118, v119, v115, v117, 2, (uint64_t)v209);

        _Block_object_dispose(v222, 8);
        _Block_object_dispose(buf, 8);
        _Block_object_dispose(v231, 8);
      }
      v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v107, (uint64_t)&v232, (uint64_t)v243, 16, v111);
    }
    while (v112);
  }

  v204[0] = MEMORY[0x1E0C809B0];
  v204[1] = 3221225472;
  v204[2] = sub_1BE7E15E0;
  v204[3] = &unk_1E77F55D8;
  v120 = v203;
  v205 = v120;
  v207 = &v239;
  v208 = &v242;
  v206 = v242;
  objc_msgSend_enumerateRangesUsingBlock_(v195, v121, (uint64_t)v204, v122, v123, v124);
  objc_msgSend_sortUsingComparator_(v239, v125, (uint64_t)&unk_1E77F5618, v126, v127, v128);
  for (j = 0; j < objc_msgSend_count(v239, v129, v130, v131, v132, v133); ++j)
  {
    objc_msgSend_objectAtIndexedSubscript_(v239, v135, j, v136, v137, v138);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v145 = objc_msgSend_rangeInOriginalString(v139, v140, v141, v142, v143, v144);
    v147 = v146;

    if ((v190 - (uint64_t)__p) >> 4 >= (unint64_t)(v145 + v147))
      goto LABEL_20;
    if (qword_1EF568E88 != -1)
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v148 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v148, OS_LOG_TYPE_FAULT))
        goto LABEL_19;
LABEL_18:
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v148, OS_LOG_TYPE_FAULT, "Restoring initial chunk indexes error.", buf, 2u);
      goto LABEL_19;
    }
    v148 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v148, OS_LOG_TYPE_FAULT))
      goto LABEL_18;
LABEL_19:

LABEL_20:
    if (v147)
    {
      v149 = 16 * v145;
      v150 = (NSUInteger *)&__p[16 * v145];
      location = *v150;
      length = v150[1];
      v153 = &__p[v149 + 8];
      do
      {
        v245.location = location;
        v245.length = length;
        v157 = NSUnionRange(v245, *(NSRange *)(v153 - 8));
        location = v157.location;
        length = v157.length;
        v153 += 16;
        --v147;
      }
      while (v147);
      objc_msgSend_objectAtIndexedSubscript_(v239, (const char *)v157.length, j, v154, v155, v156);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setRangeInOriginalString_(v158, v159, v157.location, v157.length, v160, v161);

      objc_msgSend_objectAtIndexedSubscript_(v239, v162, j, v163, v164, v165);
      v166 = (void *)objc_claimAutoreleasedReturnValue();
      v172 = objc_msgSend_rangeInOriginalString(v166, v167, v168, v169, v170, v171);
      objc_msgSend_substringWithComposedCharacterRange_(v196, v173, v172, (uint64_t)v173, v174, v175);
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v239, v177, j, v178, v179, v180);
      v181 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setChunkValueOriginal_(v181, v182, (uint64_t)v176, v183, v184, v185);

    }
  }
  v186 = v239;

  if (__p)
    operator delete(__p);

  return v186;
}

void sub_1BE7E0D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7E0F6C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1BE7E0FA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if (a3)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], a2, (uint64_t)a2, a3, a5, a6);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

  }
}

void sub_1BE7E1008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7E101C(uint64_t result, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 >= 2)
  {
    v8 = result;
    objc_msgSend_addIndex_(*(void **)(result + 32), a2, (uint64_t)a2, a4, a5, a6);
    return objc_msgSend_addIndex_(*(void **)(v8 + 40), v9, (uint64_t)&a2[a3], v10, v11, v12);
  }
  return result;
}

__n128 sub_1BE7E1068(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE7E1078(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;

  v9 = objc_msgSend_intersectsIndexesInRange_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56);
  v14 = *(_QWORD *)(a1 + 104);
  v18 = objc_msgSend_intersectsIndexesInRange_(*(void **)(a1 + 40), v15, a3, a4, v16, v17);
  v22 = objc_msgSend_intersectsIndexesInRange_(*(void **)(a1 + 48), v19, a3, a4, v20, v21);
  if ((v18 & 1) != 0 || v22)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56) += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                             + 56);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v27 = *(_QWORD *)(v26 + 56);
    if (v27)
    {
      objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v23, *(_QWORD *)(v26 + 48), v27, v24, v25);
      v46 = (id)objc_claimAutoreleasedReturnValue();
      sub_1BE7E13F0(a1 + 112, v46, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56));

      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v28 = *(_QWORD *)(v26 + 56);
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(v26 + 48) += v28;
    *(_QWORD *)(v26 + 56) = 0;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    *(_QWORD *)(v29 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)
                          + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
    *(_QWORD *)(v29 + 56) = 0;
  }
  v30 = a3 + a4;
  v31 = v11 + v10;
  if (v30 == v11 + v10)
    v32 = 1;
  else
    v32 = v9;
  if (v32 == 1)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56);
    if ((unint64_t)(v33 + a4) > *(_QWORD *)(a1 + 104))
    {
      v34 = a4;
    }
    else
    {
      v33 += a4;
      v34 = 0;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56) += v33;
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    *(_QWORD *)(v35 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)
                          + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
    *(_QWORD *)(v35 + 56) = v34;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v37 = *(_QWORD *)(v36 + 56);
  v38 = v9 ^ 1;
  if (v37 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
    v38 = 1;
  v39 = v12 + a4 + v13 >= v14 || v30 == v31;
  if (v39 || (v38 & 1) == 0)
  {
    if (v37)
    {
      objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v23, *(_QWORD *)(v36 + 48), v37, v24, v25);
      v47 = (id)objc_claimAutoreleasedReturnValue();
      sub_1BE7E13F0(a1 + 112, v47, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56));

      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v40 = *(_QWORD *)(v36 + 56);
    }
    else
    {
      v40 = 0;
    }
    *(_QWORD *)(v36 + 48) += v40;
    *(_QWORD *)(v36 + 56) = 0;
    v41 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v41
                                                                / vcvtpd_u64_f64((double)v41/ (double)*(unint64_t *)(a1 + 104));
  }
  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56);
  if ((unint64_t)(v42 + a4) > *(_QWORD *)(a1 + 104))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56) += v42;
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    *(_QWORD *)(v43 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56)
                          + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
    *(_QWORD *)(v43 + 56) = 0;
    if ((v32 & 1) != 0)
    {
LABEL_28:
      if (v30 != v31)
        return;
      goto LABEL_32;
    }
  }
  else if ((v32 & 1) != 0)
  {
    goto LABEL_28;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56) += a4;
  if (v30 != v31)
    return;
LABEL_32:
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v45 = *(_QWORD *)(v44 + 56);
  if (v45)
  {
    objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v23, *(_QWORD *)(v44 + 48), v45, v24, v25);
    v48 = (id)objc_claimAutoreleasedReturnValue();
    sub_1BE7E13F0(a1 + 112, v48, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 56));

  }
}

void sub_1BE7E13B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E13C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E13DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E13F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  CHTextSynthesizerDataChunk *v33;
  const char *v34;
  void *isNotDef_synthesisSuggestion;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSCharacterSet *v40;
  _BOOL4 v41;
  void *v42;
  CHTextSynthesizerDataChunk *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSString *v49;

  v7 = a2;
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByTrimmingCharactersInSet_(v7, v14, (uint64_t)v13, v15, v16, v17);
  v49 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v49, v18, v19, v20, v21, v22))
  {
    if (objc_msgSend_isEqualToString_(v49, v23, **(_QWORD **)(a1 + 8), v24, v25, v26))
    {
      v32 = **(void ***)a1;
      v33 = [CHTextSynthesizerDataChunk alloc];
      isNotDef_synthesisSuggestion = (void *)objc_msgSend_initWithChunkValueForSynthesis_originalValue_range_isNotDef_synthesisSuggestion_(v33, v34, **(_QWORD **)(a1 + 8), (uint64_t)&stru_1E77F6F28, a3, a4, 1, 1);
      objc_msgSend_addObject_(v32, v36, (uint64_t)isNotDef_synthesisSuggestion, v37, v38, v39);
    }
    else
    {
      objc_msgSend_ch_synthesisHallucinationProneCharSet(MEMORY[0x1E0CB3500], v27, v28, v29, v30, v31);
      v40 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
      v41 = isStringEntirelyFromSet(v49, v40);

      v42 = **(void ***)a1;
      v43 = [CHTextSynthesizerDataChunk alloc];
      if (v41)
        isNotDef_synthesisSuggestion = (void *)objc_msgSend_initWithChunkValueForSynthesis_originalValue_range_isNotDef_synthesisSuggestion_(v43, v44, (uint64_t)v49, (uint64_t)&stru_1E77F6F28, a3, a4, 0, 1);
      else
        isNotDef_synthesisSuggestion = (void *)objc_msgSend_initWithChunkValueForSynthesis_originalValue_range_isNotDef_synthesisSuggestion_(v43, v44, (uint64_t)v49, (uint64_t)&stru_1E77F6F28, a3, a4, 0, 0);
      objc_msgSend_addObject_(v42, v45, (uint64_t)isNotDef_synthesisSuggestion, v46, v47, v48);
    }

  }
}

void sub_1BE7E1580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7E15B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E15CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E15E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  objc_msgSend_substringWithRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6);
  v25 = (id)objc_claimAutoreleasedReturnValue();
  if (a3)
  {
    objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v9, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v25, v15, (uint64_t)v14, -1, v16, v17);
    v24 = objc_msgSend_countCodepoints(v25, v19, v20, v21, v22, v23);

    if (v18 < v24)
      sub_1BE7E13F0(a1 + 48, *(void **)(a1 + 40), (uint64_t)a2, a3);
  }

}

void sub_1BE7E1690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E16A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7E16BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1E0DE7D20](a2, sel_compareByRangeWithDataChunk_, a3, a4, a5, a6);
}

void sub_1BE7E1784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E1924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7E197C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7E1998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E1A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E1A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E1AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7E1C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1BE7E1CDC((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1BE7E1CA4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1C3B812EC](v2, 0x10A0C409A4FACE1);

  _Unwind_Resume(a1);
}

void sub_1BE7E1CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1BE7E1CDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1BE7E5864(v2);
    MEMORY[0x1C3B812EC](v3, 0x10A0C409A4FACE1);
  }
  return a1;
}

void sub_1BE7E1DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE7E1E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E1E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E22A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a11);

  sub_1BE7E0F6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE7E2720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE7E2CB0(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a11);

  sub_1BE7E0F6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE7E2E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E2E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E2E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E3248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  void *v40;

  sub_1BE7FE8A8(&a39);
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);

  _Unwind_Resume(a1);
}

void sub_1BE7E32A4(char **a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  void **v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  double *v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  double *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  char *v68;
  char *v69;
  void *v70;
  char *v71;
  void *v72;
  void *v73;
  char **v74;
  id v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  char *v79;
  unint64_t v80;
  void *__p[2];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v74 = a1;
  v85 = *MEMORY[0x1E0C80C00];
  v75 = a2;
  *(_QWORD *)&v83 = &off_1E77F1338;
  *((_QWORD *)&v84 + 1) = &v83;
  v7 = (id)objc_msgSend_copy(v75, v2, v3, v4, v5, v6);
  v79 = 0;
  v80 = 0;
  v78 = 0;
  v13 = objc_msgSend_strokeCount(v7, v8, v9, v10, v11, v12);
  sub_1BE7A45C8((uint64_t)&v78, v13);
  for (i = 0; objc_msgSend_strokeCount(v7, v14, v15, v16, v17, v18, v74) > i; ++i)
  {
    v24 = objc_msgSend_pointCountForStrokeIndex_(v7, v20, i, v21, v22, v23);
    if (v24)
    {
      __p[0] = 0;
      __p[1] = 0;
      v82 = 0;
      v25 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v26 = sub_1BE7618F0((char **)&v78, (uint64_t)__p);
        v79 = v26;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          v26 = v79;
        }
      }
      else
      {
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = 0;
        *(_OWORD *)v25 = *(_OWORD *)__p;
        *((_QWORD *)v25 + 2) = v82;
        v26 = v25 + 24;
        v79 = v25 + 24;
      }
      v27 = (_BYTE *)*((_QWORD *)v26 - 3);
      if (v24 > (uint64_t)(*((_QWORD *)v26 - 1) - (_QWORD)v27) >> 4)
      {
        if (v24 >> 60)
          sub_1BE61F930();
        v28 = (_BYTE *)*((_QWORD *)v26 - 2);
        v29 = (char *)operator new(16 * v24);
        v30 = &v29[(v28 - v27) & 0xFFFFFFFFFFFFFFF0];
        v31 = v30;
        if (v28 != v27)
        {
          v32 = &v29[(v28 - v27) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v31 = v32 - 16;
            *((_OWORD *)v32 - 1) = *((_OWORD *)v28 - 1);
            v28 -= 16;
            v32 -= 16;
          }
          while (v28 != v27);
        }
        *((_QWORD *)v26 - 3) = v31;
        *((_QWORD *)v26 - 2) = v30;
        *((_QWORD *)v26 - 1) = &v29[16 * v24];
        if (v27)
          operator delete(v27);
      }
      v33 = 0;
      if (v24 <= 1)
        v34 = 1;
      else
        v34 = v24;
LABEL_19:
      objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v14, i, v33, v17, v18);
      __p[0] = v35;
      __p[1] = v36;
      v37 = v79;
      v38 = (void **)(v79 - 24);
      v39 = *((_QWORD *)v79 - 2);
      if (v39 != *((_QWORD *)v79 - 3)
        && *(double *)(v39 - 16) == *(double *)&v35
        && *(double *)(v39 - 8) == *(double *)&v36)
      {
        goto LABEL_37;
      }
      if (!*((_QWORD *)&v84 + 1))
        sub_1BE716090();
      v40 = (*(double (**)(_QWORD, void **))(**((_QWORD **)&v84 + 1) + 48))(*((_QWORD *)&v84 + 1), __p);
      v42 = v40;
      v43 = v41;
      v45 = (char *)*((_QWORD *)v37 - 2);
      v44 = *((_QWORD *)v37 - 1);
      if ((unint64_t)v45 < v44)
      {
        *(double *)v45 = v40;
        *((_QWORD *)v45 + 1) = v41;
        v46 = v45 + 16;
        goto LABEL_36;
      }
      v47 = (char *)*v38;
      v48 = (v45 - (_BYTE *)*v38) >> 4;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60)
        sub_1BE61F930();
      v50 = v44 - (_QWORD)v47;
      if (v50 >> 3 > v49)
        v49 = v50 >> 3;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
        v51 = 0xFFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
      {
        if (v51 >> 60)
          sub_1BE61F100();
        v52 = (char *)operator new(16 * v51);
        v53 = (double *)&v52[16 * v48];
        *v53 = v42;
        *((_QWORD *)v53 + 1) = v43;
        v54 = (uint64_t)v53;
        if (v45 == v47)
        {
LABEL_34:
          v46 = v53 + 2;
          *((_QWORD *)v37 - 3) = v54;
          *((_QWORD *)v37 - 2) = v53 + 2;
          *((_QWORD *)v37 - 1) = &v52[16 * v51];
          if (v45)
            goto LABEL_35;
          goto LABEL_36;
        }
      }
      else
      {
        v52 = 0;
        v53 = (double *)(16 * v48);
        *v53 = v40;
        *((_QWORD *)v53 + 1) = v41;
        v54 = 16 * v48;
        if (v45 == v47)
          goto LABEL_34;
      }
      do
      {
        *(_OWORD *)(v54 - 16) = *((_OWORD *)v45 - 1);
        v54 -= 16;
        v45 -= 16;
      }
      while (v45 != v47);
      v45 = (char *)*v38;
      v46 = v53 + 2;
      *((_QWORD *)v37 - 3) = v54;
      *((_QWORD *)v37 - 2) = v53 + 2;
      *((_QWORD *)v37 - 1) = &v52[16 * v51];
      if (v45)
LABEL_35:
        operator delete(v45);
LABEL_36:
      *((_QWORD *)v37 - 2) = v46;
LABEL_37:
      if (++v33 == v34)
        continue;
      goto LABEL_19;
    }
  }

  v55 = (__int128 *)*((_QWORD *)&v84 + 1);
  if (*((__int128 **)&v84 + 1) == &v83)
  {
    v56 = 4;
    v55 = &v83;
  }
  else
  {
    if (!*((_QWORD *)&v84 + 1))
      goto LABEL_48;
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_48:
  sub_1BE7F375C((double ***)&v78, __p);
  v83 = xmmword_1BE8D68A0;
  v84 = xmmword_1BE8D68A0;
  v57 = (double *)__p[0];
  if (__p[0] != __p[1])
  {
    v58 = 1.79769313e308;
    v59 = -1.79769313e308;
    v60 = -1.79769313e308;
    v61 = 1.79769313e308;
    v62 = -1.79769313e308;
    v63 = 1.79769313e308;
    v64 = -1.79769313e308;
    v65 = 1.79769313e308;
    do
    {
      v66 = *v57;
      v67 = v57[1];
      v57 += 2;
      if (v65 > v66)
      {
        v61 = v66;
        v65 = v66;
      }
      if (v64 < v66)
      {
        v60 = v66;
        v64 = v66;
      }
      if (v63 > v67)
      {
        v58 = v67;
        v63 = v67;
      }
      if (v62 < v67)
      {
        v59 = v67;
        v62 = v67;
      }
    }
    while (v57 != __p[1]);
    *(double *)&v83 = v61;
    *((double *)&v83 + 1) = v60;
    *(double *)&v84 = v58;
    *((double *)&v84 + 1) = v59;
  }
  sub_1BE7FDB94((double **)__p, (double *)&v83, (double **)&v76);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v76;
  v82 = v77;
  sub_1BE7F67A0((uint64_t)__p, v74, 4.0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v68 = (char *)v78;
  if (v78)
  {
    v69 = v79;
    v70 = v78;
    if (v79 != v78)
    {
      v71 = v79;
      do
      {
        v73 = (void *)*((_QWORD *)v71 - 3);
        v71 -= 24;
        v72 = v73;
        if (v73)
        {
          *((_QWORD *)v69 - 2) = v72;
          operator delete(v72);
        }
        v69 = v71;
      }
      while (v71 != v68);
      v70 = v78;
    }
    v79 = v68;
    operator delete(v70);
  }

}

void sub_1BE7E3760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1BE63CEBC(&a14);

  _Unwind_Resume(a1);
}

void sub_1BE7E38C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E3AA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E3B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7E3B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E3C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7E3C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E3F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE7E4D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7E5230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE7E55F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE7E572C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7E5784()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE7E5798()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E77F1338;
  return result;
}

void sub_1BE7E57BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E77F1338;
}

double sub_1BE7E57D4(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t sub_1BE7E57DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BE8DF7BBLL)
    return a1 + 8;
  if (((v3 & 0x80000001BE8DF7BBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BE8DF7BBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BE8DF7BBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *sub_1BE7E5858()
{
  return &unk_1E77F0650;
}

uint64_t sub_1BE7E5864(uint64_t a1)
{
  uint64_t v2;

  sub_1BE62033C(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_1BE62033C(a1 + 64, *(_QWORD **)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
  {
    if (*(_QWORD *)v2)
      munmap(*(void **)v2, *(_QWORD *)(v2 + 8));
    MEMORY[0x1C3B812EC](v2, 0x1010C40A749B91FLL);
  }

  return a1;
}

void sub_1BE7E5C38(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  SEL v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = v3;
  if (a1 && objc_msgSend_count(v3, v4, v5, v6, v7, v8))
  {
    objc_msgSend_activeStrokeGroupAncestorIdentifiers(a1, v10, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend_mutableCopy(v15, v16, v17, v18, v19, v20);

    if (!v21)
    {
      objc_msgSend_set(MEMORY[0x1E0C99E20], v22, v23, v24, v25, v26);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v27 = v9;
    v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v51, (uint64_t)v55, 16, v29);
    if (v30)
    {
      v36 = v30;
      v37 = *(_QWORD *)v52;
      do
      {
        v38 = 0;
        do
        {
          if (*(_QWORD *)v52 != v37)
            objc_enumerationMutation(v27);
          v39 = (void *)MEMORY[0x1E0CB37E8];
          v40 = objc_msgSend_ancestorIdentifier(*(void **)(*((_QWORD *)&v51 + 1) + 8 * v38), v31, v32, v33, v34, v35, (_QWORD)v51);
          objc_msgSend_numberWithInteger_(v39, v41, v40, v42, v43, v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v21, v46, (uint64_t)v45, v47, v48, v49);

          ++v38;
        }
        while (v36 != v38);
        v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v31, (uint64_t)&v51, (uint64_t)v55, 16, v35);
      }
      while (v36);
    }

    objc_setProperty_nonatomic_copy(a1, v50, v21, 40);
  }

}

void sub_1BE7E626C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E6424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v5 - 56));

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7E647C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7E6498(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  uint8_t v3[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1BE7E654C(WeakRetained);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v3, 2u);
  }

}

void sub_1BE7E653C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E654C(void *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    objc_msgSend_invalidate(obj[1], v1, v2, v3, v4, v5);
    v6 = obj[1];
    obj[1] = 0;

    objc_sync_exit(obj);
  }
}

void sub_1BE7E65B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1BE7E65D0()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v0 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }

}

void sub_1BE7E66E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHRemoteRecognizer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7E6DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE7E6F00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  objc_msgSend_UUID(MEMORY[0x1E0CB3A28], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  v25 = (id)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1E0C99E98];
  NSTemporaryDirectory();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)qword_1EF568310;
  qword_1EF568310 = v23;

}

void sub_1BE7E6F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE7E6FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E6FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7E70B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E7130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CloudRegressor::CloudRegressor(CloudRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  _BYTE v21[24];
  id v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;

  EllipseRegressor::EllipseRegressor((EllipseRegressor *)v21, a2, a3);
  v27 = fmodf(v27 + 360.0, 360.0);
  v4 = operator new();
  v5 = v23;
  v6 = v24;
  v7 = v25 + v25;
  v8 = (float)(v25 + v25);
  v9 = v26 + v26;
  v10 = (float)(v26 + v26);
  v11 = v27;
  *(_QWORD *)v4 = &unk_1E77F08B0;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  *(double *)(v4 + 32) = v8;
  *(double *)(v4 + 40) = v10;
  *(double *)(v4 + 48) = v11;
  if (v9 <= v7)
  {
    v12 = v10;
    v10 = v8;
  }
  else
  {
    v11 = (double)((int)(v11 + 90.0) % 360);
    v12 = v8;
  }
  v13 = v11 >= 270.0 || v11 <= 180.0;
  v14 = v11 + -180.0;
  if (v13)
    v14 = v11;
  if (v11 <= 90.0 || v11 > 180.0)
    v16 = v14;
  else
    v16 = v11 + 180.0;
  v17 = fmod(v16, 45.0);
  v18 = fmod(v16, 15.0);
  if (v17 >= 10.0)
  {
    if (45.0 - v17 >= 10.0)
    {
      if (v18 >= 7.5)
      {
        v19 = 15.0 - v18;
        if (v19 < 7.5)
          v16 = v16 + v19;
      }
      else
      {
        v16 = v16 - v18;
      }
    }
    else
    {
      v16 = v16 + 45.0 - v17;
    }
  }
  else
  {
    v16 = v16 - v17;
  }
  v20 = operator new();
  *(_QWORD *)v20 = &off_1E77F0880;
  *(_QWORD *)(v20 + 16) = v5;
  *(_QWORD *)(v20 + 24) = v6;
  *(double *)(v20 + 32) = v10;
  *(double *)(v20 + 40) = v12;
  *(double *)(v20 + 48) = v16;
  *(_QWORD *)this = v20;
  MEMORY[0x1C3B812EC](v4, 0x1081C406FCD2653);

}

void sub_1BE7E743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E7450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1BE7E7468(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "CHCloud");
}

void sub_1BE7E7578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7E7590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreHandwriting::EspressoModelWrapper::~EspressoModelWrapper(void **this)
{
  NSObject *v2;
  uint8_t v3[16];

  if (!CoreHandwriting::EspressoModelWrapper::destroy((CoreHandwriting::EspressoModelWrapper *)this))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v2 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_FAULT, "EspressoModelWrapper::~EspressoModelWrapper Error destroying model", v3, 2u);
    }
  }
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

BOOL CoreHandwriting::EspressoModelWrapper::destroy(CoreHandwriting::EspressoModelWrapper *this)
{
  NSObject *v1;
  _BOOL8 result;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  __int16 v6;

  if (espresso_plan_destroy())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v1 = (id)qword_1EF568E18[0];
    result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v6 = 0;
      v3 = "EspressoModelWrapper::destroy Error destroying plan";
      v4 = (uint8_t *)&v6;
LABEL_11:
      _os_log_impl(&dword_1BE607000, v1, OS_LOG_TYPE_ERROR, v3, v4, 2u);
      return 0;
    }
  }
  else
  {
    if (!espresso_context_destroy())
      return 1;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v1 = (id)qword_1EF568E18[0];
    result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v5 = 0;
      v3 = "EspressoModelWrapper::destroy Error destroying context";
      v4 = (uint8_t *)&v5;
      goto LABEL_11;
    }
  }
  return result;
}

BOOL sub_1BE7E77FC(uint64_t *a1)
{
  uint64_t context;
  uint64_t plan;
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  context = espresso_create_context();
  *a1 = context;
  if (context)
  {
    plan = espresso_create_plan();
    a1[1] = plan;
    if (plan)
    {
      if (espresso_plan_add_network())
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v4 = (id)qword_1EF568E18[0];
        result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v9 = 0;
          v6 = "EspressoModelWrapper::initialize Error loading model";
          v7 = (uint8_t *)&v9;
LABEL_21:
          _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, v6, v7, 2u);
          return 0;
        }
      }
      else
      {
        if (!espresso_plan_build())
        {
          MEMORY[0x1C3B81178](a1 + 4, "");
          return 1;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v4 = (id)qword_1EF568E18[0];
        result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v8 = 0;
          v6 = "EspressoModelWrapper::initialize Error buidling plan";
          v7 = (uint8_t *)&v8;
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v4 = (id)qword_1EF568E18[0];
      result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v10 = 0;
        v6 = "EspressoModelWrapper::initialize Error creating plan";
        v7 = (uint8_t *)&v10;
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E18[0];
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v11 = 0;
      v6 = "EspressoModelWrapper::initialize Error creating context";
      v7 = (uint8_t *)&v11;
      goto LABEL_21;
    }
  }
  return result;
}

BOOL sub_1BE7E7A2C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t v6[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  if (espresso_buffer_pack_tensor_shape())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E18[0];
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)v6 = 0;
      v5 = "EspressoModelWrapper::setInput Error setting input buffer shape";
LABEL_11:
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
      return 0;
    }
  }
  else
  {
    *(_QWORD *)&v7 = a2;
    LODWORD(v17) = 65568;
    if (!espresso_network_bind_buffer())
      return 1;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E18[0];
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)v6 = 0;
      v5 = "EspressoModelWrapper::setInput Error binding input buffer";
      goto LABEL_11;
    }
  }
  return result;
}

BOOL CoreHandwriting::EspressoModelWrapper::bindOutput(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v4;
  _BOOL8 result;
  uint8_t v6[16];
  int v7;

  if (a4)
  {
    v7 = 0;
    espresso_blob_is_dynamic();
  }
  if (!espresso_network_bind_buffer())
    return 1;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E18[0];
  result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::bindOutput Error binding output buffer", v6, 2u);
    return 0;
  }
  return result;
}

BOOL sub_1BE7E7D10(uint64_t a1, const std::string *a2)
{
  const std::string *v2;
  std::string *v4;
  char v5;
  size_t v6;
  const void *v7;
  size_t size;
  size_t v9;
  NSObject *v11;
  _BOOL8 result;
  const char *v13;
  uint8_t *v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v2 = a2;
  v4 = (std::string *)(a1 + 32);
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (*(char *)(a1 + 55) < 0)
  {
    v7 = *(const void **)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 55);
    v7 = (const void *)(a1 + 32);
  }
  if (v5 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v5 < 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= v6)
    v9 = v6;
  else
    v9 = size;
  if (!memcmp(v7, a2, v9) && size == v6)
    return 1;
  if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E18[0];
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v17 = 0;
      v13 = "EspressoModelWrapper::selectConfiguration Error cleaning current plan";
      v14 = (uint8_t *)&v17;
LABEL_32:
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_ERROR, v13, v14, 2u);
      return 0;
    }
    return result;
  }
  if (!espresso_network_select_configuration())
  {
    if (espresso_plan_build())
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v11 = (id)qword_1EF568E18[0];
      result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v15 = 0;
        v13 = "EspressoModelWrapper::selectConfiguration Error building Espresso plan";
        v14 = (uint8_t *)&v15;
        goto LABEL_32;
      }
      return result;
    }
    std::string::operator=(v4, v2);
    return 1;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v11 = (id)qword_1EF568E18[0];
  result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v16 = 0;
    v13 = "EspressoModelWrapper::selectConfiguration Error selecting configuration";
    v14 = (uint8_t *)&v16;
    goto LABEL_32;
  }
  return result;
}

BOOL CoreHandwriting::EspressoModelWrapper::execute(CoreHandwriting::EspressoModelWrapper *this)
{
  int v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = espresso_plan_execute_sync();
  if (v1)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v2 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::execute Error executing model", v4, 2u);
    }
  }
  return v1 == 0;
}

_QWORD *sub_1BE7E7FD4(uint64_t *a1)
{
  uint64_t **v1;
  int v2;
  int v3;
  NSObject *v4;
  _QWORD *result;
  size_t st_size;
  int *v7;
  int *v8;
  int v9;
  stat v10;
  uint64_t v11;

  v1 = (uint64_t **)a1;
  v11 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) < 0)
  {
    v2 = open((const char *)*a1, 0);
    if (v2 < 1)
      goto LABEL_7;
  }
  else
  {
    v2 = open((const char *)a1, 0);
    if (v2 < 1)
      goto LABEL_7;
  }
  v3 = v2;
  if (fstat(v2, &v10) || (st_size = v10.st_size, v7 = (int *)mmap(0, v10.st_size, 1, 2, v3, 0), v7 == (int *)-1))
  {
    close(v3);
  }
  else
  {
    v8 = v7;
    madvise(v7, st_size, 2);
    close(v3);
    if (v8)
    {
      result = (_QWORD *)operator new();
      *result = v8;
      result[1] = st_size;
      v9 = *v8;
      result[2] = v8 + 1;
      result[3] = 0;
      *((_DWORD *)result + 6) = v9;
      return result;
    }
  }
LABEL_7:
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t **)*v1;
    v10.st_dev = 136315138;
    *(_QWORD *)&v10.st_mode = v1;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "Error: unable to mmap resource %s", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

void CHCodeMap::~CHCodeMap(CHCodeMap *this)
{
  char *var0;

  var0 = this->var0;
  if (var0)
    munmap(var0, this->var1);
}

{
  char *var0;

  var0 = this->var0;
  if (var0)
    munmap(var0, this->var1);
}

void CHCodeMap::serializeCodeMapToFile(CHCodeMap *this, NSString *a2, NSString *a3)
{
  CHCodeMap *v4;
  NSString *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  FILE *v52;
  unsigned int __ptr;
  id v54;

  v4 = this;
  v5 = a2;
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_contentsAtPath_(v11, v12, (uint64_t)v4, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v54 = 0;
  objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E0CB36D8], v17, (uint64_t)v16, 0, (uint64_t)&v54, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v54;
  objc_msgSend_keysSortedByValueUsingComparator_(v19, v21, (uint64_t)&unk_1E77F19D0, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend_count(v25, v26, v27, v28, v29, v30);
  __ptr = v31;
  v36 = (_DWORD *)operator new[]();
  if (v31)
  {
    v37 = 0;
    v38 = v31;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v25, v32, v37, v33, v34, v35);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v36[v37] = objc_msgSend_longLongValue(v39, v40, v41, v42, v43, v44);

      ++v37;
    }
    while (v38 != v37);
  }
  v45 = objc_retainAutorelease(v5);
  v51 = (const char *)objc_msgSend_UTF8String(v45, v46, v47, v48, v49, v50);
  v52 = fopen(v51, "w");
  fwrite(&__ptr, 4uLL, 1uLL, v52);
  fwrite(v36, 4uLL, __ptr, v52);
  fclose(v52);
  MEMORY[0x1C3B812C8](v36, 0x1000C8052888210);

}

void sub_1BE7E8390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7E8418(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4, a5, a6);
}

uint64_t CHCodeMap::operator[](uint64_t a1, unint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    CHOSLogForCategory(1);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = v4;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_ERROR, "Error: Index %lu out of bounds of the code map %lu symbols", buf, 0x16u);
    }

    exit(0);
  }
  return *(_QWORD *)(a1 + 16) + 4 * a2;
}

float CHRSketchRecognitionResult::Hscore(CHRSketchRecognitionResult *this, float a2)
{
  float result;

  result = fabsf(a2);
  if (result >= 90.0)
    return 180.0 - result;
  return result;
}

float CHRSketchRecognitionResult::Vscore(CHRSketchRecognitionResult *this, float a2)
{
  float v2;

  v2 = a2 + -90.0;
  if (a2 < 90.0)
    v2 = 90.0 - a2;
  if (a2 < 0.0)
    v2 = a2 + 90.0;
  if (a2 < -90.0)
    return -90.0 - a2;
  else
    return v2;
}

BOOL CHRSketchRecognitionResult::isConsideredEqual(CHRSketchRecognitionResult *this, float a2, float a3, float a4)
{
  float v4;

  v4 = fminf(a2, a3) / (fmaxf(a2, a3) + 0.1);
  return (float)(1.0 - a4) < v4;
}

double CHTriangle::Halign(CHTriangle *this, int a2)
{
  double result;

  switch(a2)
  {
    case 3:
      result = (*((double *)this + 5) + *((double *)this + 7)) * 0.5;
      *((double *)this + 7) = result;
      *((double *)this + 5) = result;
      break;
    case 2:
      result = (*((double *)this + 3) + *((double *)this + 7)) * 0.5;
      *((double *)this + 7) = result;
      *((double *)this + 3) = result;
      break;
    case 1:
      result = (*((double *)this + 3) + *((double *)this + 5)) * 0.5;
      *((double *)this + 5) = result;
      *((double *)this + 3) = result;
      break;
  }
  return result;
}

double CHTriangle::Valign(CHTriangle *this, int a2)
{
  double result;

  switch(a2)
  {
    case 3:
      result = (*((double *)this + 4) + *((double *)this + 6)) * 0.5;
      *((double *)this + 6) = result;
      *((double *)this + 4) = result;
      break;
    case 2:
      result = (*((double *)this + 2) + *((double *)this + 6)) * 0.5;
      *((double *)this + 6) = result;
      *((double *)this + 2) = result;
      break;
    case 1:
      result = (*((double *)this + 2) + *((double *)this + 4)) * 0.5;
      *((double *)this + 4) = result;
      *((double *)this + 2) = result;
      break;
  }
  return result;
}

void CHTriangle::alignToAxis(CHTriangle *this)
{
  char *v2;
  double v3;
  float64x2_t *v4;
  double v5;
  __int128 v6;
  float64x2_t *v7;
  double v8;
  float v9;
  double v10;
  float v11;
  float v12;
  double v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  double v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  int v34;
  float64x2_t *v35;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v45;
  float v46;
  float64x2_t v47;
  float32x2_t v48;
  float v49;
  float v50;
  float v51;
  float32_t v52;
  float v53;
  float v54;

  v2 = (char *)this + 80;
  v3 = *((double *)this + 10);
  v4 = (float64x2_t *)((char *)this + 96);
  v5 = *((double *)this + 12);
  v6 = *((_OWORD *)this + 6);
  *((_OWORD *)this + 1) = *((_OWORD *)this + 5);
  *((_OWORD *)this + 2) = v6;
  v7 = (float64x2_t *)((char *)this + 112);
  v8 = *((double *)this + 14);
  *((_OWORD *)this + 3) = *((_OWORD *)this + 7);
  v9 = v5 - v3;
  *(_QWORD *)&v6 = *((_QWORD *)this + 13);
  v10 = *((double *)this + 11);
  v11 = *(double *)&v6 - v10;
  v12 = v8 - v3;
  v13 = *((double *)this + 15);
  v14 = v13 - v10;
  v15 = v8 - v5;
  *(float *)&v5 = v13 - *(double *)&v6;
  v46 = *(float *)&v5;
  v16 = sqrtf((float)(v11 * v11) + (float)(v9 * v9));
  v49 = sqrtf((float)(v14 * v14) + (float)(v12 * v12));
  *((float *)this + 49) = v16;
  *((float *)this + 50) = v49;
  *((float *)this + 37) = v16;
  *((float *)this + 38) = v49;
  v50 = sqrtf((float)(*(float *)&v5 * *(float *)&v5) + (float)(v15 * v15));
  *((float *)this + 51) = v50;
  *((float *)this + 39) = v50;
  v53 = atan2f(v11, v9);
  v48 = (float32x2_t)vdup_n_s32(0x43340000u);
  v47 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  v17 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(atan2f(v14, v12)), LODWORD(v53)), v48)), v47));
  v51 = v17.f32[0];
  *((_DWORD *)v2 + 26) = v17.i32[0];
  v52 = v17.f32[1];
  *((_DWORD *)v2 + 28) = v17.i32[1];
  *(float32x2_t *)(v2 + 52) = v17;
  v18 = (float)(atan2f(v46, v15) * 180.0) / 3.14159265;
  *((float *)v2 + 27) = v18;
  v54 = v18;
  *((float *)v2 + 15) = v18;
  v19 = acosf((float)((float)(v11 * v14) + (float)(v9 * v12)) / (float)(v16 * v49));
  *((float32x2_t *)v2 + 10) = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(acosf((float)((float)-(float)(v11 * v46) - (float)(v9 * v15))/ (float)(v16 * v50))), LODWORD(v19)), v48)), v47));
  v21 = (float)(acosf((float)((float)(v46 * v14) + (float)(v15 * v12)) / (float)(v50 * v49)) * 180.0) / 3.14159265;
  *(float *)&v21 = v21;
  *((_DWORD *)v2 + 22) = LODWORD(v21);
  v20 = *((float *)v2 - 4);
  *(float *)&v21 = fabsf(v51);
  if (*(float *)&v21 >= 90.0)
    *(float *)&v21 = 180.0 - *(float *)&v21;
  if (*(float *)&v21 < v20)
    v22 = 1;
  else
    v22 = -1;
  if (*(float *)&v21 >= v20)
    LODWORD(v21) = *((_DWORD *)v2 - 4);
  if (v51 < -90.0)
  {
    v23 = -90.0 - v51;
    v25 = v52;
    v24 = v54;
    goto LABEL_15;
  }
  v25 = v52;
  v24 = v54;
  v26 = 90.0;
  if (v51 >= 0.0)
  {
    if (v51 < 90.0)
    {
      v23 = 90.0 - v51;
      goto LABEL_15;
    }
    v26 = -90.0;
  }
  v23 = v51 + v26;
LABEL_15:
  if (v23 < v20)
    v27 = 1;
  else
    v27 = -1;
  if (v23 < v20)
    v20 = v23;
  v28 = fabsf(v25);
  if (v28 >= 90.0)
    v28 = 180.0 - v28;
  if (v28 < *(float *)&v21)
  {
    v22 = 2;
    *(float *)&v21 = v28;
  }
  v29 = -90.0;
  if (v25 < -90.0)
    goto LABEL_27;
  v29 = 90.0;
  if (v25 >= 0.0)
  {
    if (v25 < 90.0)
    {
LABEL_27:
      v30 = v29 - v25;
      goto LABEL_30;
    }
    v29 = -90.0;
  }
  v30 = v25 + v29;
LABEL_30:
  if (v30 < v20)
  {
    v27 = 2;
    v20 = v30;
  }
  v31 = fabsf(v24);
  if (v31 >= 90.0)
    v31 = 180.0 - v31;
  if (v31 >= *(float *)&v21)
    v32 = v22;
  else
    v32 = 3;
  v33 = -90.0;
  if (v24 >= -90.0)
  {
    v33 = 90.0;
    if (v24 >= 0.0)
    {
      if (v24 < 90.0)
        goto LABEL_40;
      v33 = -90.0;
    }
    *(float *)&v21 = v24 + v33;
    if ((float)(v24 + v33) >= v20)
      v34 = v27;
    else
      v34 = 3;
    if (v32 != -1)
      goto LABEL_51;
LABEL_50:
    if (v34 == -1)
      return;
    goto LABEL_51;
  }
LABEL_40:
  *(float *)&v21 = v33 - v24;
  if ((float)(v33 - v24) >= v20)
    v34 = v27;
  else
    v34 = 3;
  if (v32 == -1)
    goto LABEL_50;
LABEL_51:
  v35 = (float64x2_t *)(v2 - 64);
  v36 = (float64x2_t *)(v2 - 48);
  v37 = (float64x2_t *)(v2 - 32);
  if (v32 < 1)
  {
    CHTriangle::fitYAxisAlignedTriangle(this, v34, v21);
  }
  else if (v34 < 1)
  {
    CHTriangle::fitXAxisAlignedTriangle(this, v32, v21);
  }
  else
  {
    CHTriangle::fitAxisAlignedRightTriangle(this, v32, v34, v21);
  }
  v38 = *v36;
  v39 = *v37;
  __asm { FMOV            V4.2D, #3.0 }
  v45 = vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(vsubq_f64(vsubq_f64(vsubq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)v2, *v4), *v7), *v35), *v36), *v37), _Q4)));
  *(float64x2_t *)v2 = vaddq_f64(*v35, v45);
  *v4 = vaddq_f64(v38, v45);
  *v7 = vaddq_f64(v39, v45);
}

double CHTriangle::fitAxisAlignedRightTriangle(CHTriangle *this, int a2, int a3, double result)
{
  float v4;
  float v5;
  char *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  char *v11;

  if (a3 == 3)
  {
    result = (*((double *)this + 4) + *((double *)this + 6)) * 0.5;
    *((double *)this + 6) = result;
    *((double *)this + 4) = result;
    goto LABEL_7;
  }
  if (a3 == 2)
  {
    result = (*((double *)this + 2) + *((double *)this + 6)) * 0.5;
    *((double *)this + 6) = result;
    *((double *)this + 2) = result;
    if (a2 != 3)
      goto LABEL_8;
    goto LABEL_12;
  }
  if (a3 != 1)
  {
LABEL_7:
    if (a2 != 3)
      goto LABEL_8;
LABEL_12:
    result = (*((double *)this + 5) + *((double *)this + 7)) * 0.5;
    *((double *)this + 7) = result;
    *((double *)this + 5) = result;
    goto LABEL_15;
  }
  result = (*((double *)this + 2) + *((double *)this + 4)) * 0.5;
  *((double *)this + 4) = result;
  *((double *)this + 2) = result;
  if (a2 == 3)
    goto LABEL_12;
LABEL_8:
  if (a2 == 2)
  {
    result = (*((double *)this + 3) + *((double *)this + 7)) * 0.5;
    *((double *)this + 7) = result;
  }
  else
  {
    if (a2 != 1)
      goto LABEL_15;
    result = (*((double *)this + 3) + *((double *)this + 5)) * 0.5;
    *((double *)this + 5) = result;
  }
  *((double *)this + 3) = result;
LABEL_15:
  LODWORD(result) = *((_DWORD *)this + a2 + 36);
  v4 = *((float *)this + a3 + 36);
  v5 = fminf(*(float *)&result, v4) / (fmaxf(*(float *)&result, v4) + 0.1);
  if ((float)(1.0 - *((float *)this + 18)) < v5)
  {
    v6 = (char *)this + 16;
    v7 = (double *)((char *)this + 16 * a2 + 16 * a3 - 32);
    v8 = (float)((float)(*(float *)&result + v4) * 0.5);
    v9 = v7[1];
    if (*((double *)this + 2 * (3 - a3) + 2) <= *v7)
      v10 = -v8;
    else
      v10 = v8;
    *(double *)&v6[16 * (3 - a3)] = *v7 + v10;
    v11 = &v6[16 * (3 - a2)];
    if (*((double *)v11 + 1) <= v9)
      v8 = -v8;
    result = v9 + v8;
    *((double *)v11 + 1) = result;
  }
  return result;
}

double CHTriangle::fitXAxisAlignedTriangle(CHTriangle *this, int a2, double result)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  double *v18;
  unsigned int v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double *v25;

  if (a2 == 3)
  {
    result = (*((double *)this + 5) + *((double *)this + 7)) * 0.5;
    *((double *)this + 7) = result;
    *((double *)this + 5) = result;
  }
  else
  {
    if (a2 == 2)
    {
      result = (*((double *)this + 3) + *((double *)this + 7)) * 0.5;
      *((double *)this + 7) = result;
    }
    else
    {
      if (a2 != 1)
        goto LABEL_8;
      result = (*((double *)this + 3) + *((double *)this + 5)) * 0.5;
      *((double *)this + 5) = result;
    }
    *((double *)this + 3) = result;
  }
LABEL_8:
  if (a2 == 1)
    v3 = 2;
  else
    v3 = a2 == 2;
  v4 = a2 % 3 + 1;
  v5 = (a2 + 1) % 3 + 1;
  v6 = *((float *)this + v4 + 32);
  v7 = fabsf(v6 + 90.0);
  v8 = fabsf(v6 + -90.0);
  if (v6 >= 0.0)
    v9 = v8;
  else
    v9 = v7;
  v10 = *((float *)this + v5 + 32);
  v11 = fabsf(v10 + 90.0);
  v12 = fabsf(v10 + -90.0);
  if (v10 >= 0.0)
    v11 = v12;
  *(float *)&result = vabds_f32(v9, v11);
  if (*(float *)&result < *((float *)this + 17))
  {
    v13 = *((float *)this + v4 + 36);
    v14 = *((float *)this + v5 + 36);
    result = 0.1;
    v15 = fminf(v13, v14) / (fmaxf(v13, v14) + 0.1);
    if ((float)(1.0 - *((float *)this + 18)) < v15)
    {
      v16 = (float)(v13 + v14) * 0.5;
      if ((_DWORD)v3 == 2)
        v17 = 0;
      else
        v17 = v3 + 1;
      v18 = (double *)((char *)this + 16 * v17 + 16);
      v19 = v3 - 1;
      if (!(_DWORD)v3)
        v19 = 2;
      v20 = v18[1];
      *((double *)this + 2 * v3 + 2) = (*v18 + *((double *)this + 2 * v19 + 2)) * 0.5;
      v21 = v20;
      v22 = *((float *)this + a2 + 36);
      v23 = fminf(v16, v22) / (fmaxf(v16, v22) + 0.1);
      if ((float)(1.0 - *((float *)this + 19)) >= v23)
        v24 = sqrtf((float)((float)(v22 * v22) * -0.25) + (float)(v16 * v16));
      else
        v24 = v22 * 0.866;
      v25 = (double *)((char *)this + 16 * v3);
      if (v25[3] <= v21)
        v24 = -v24;
      result = (float)(v24 + v21);
      v25[3] = result;
    }
  }
  return result;
}

double CHTriangle::fitYAxisAlignedTriangle(CHTriangle *this, int a2, double result)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  char *v14;
  double *v15;
  unsigned int v16;
  double v17;
  double *v18;
  float v19;
  float v20;
  float v21;
  float v22;

  if (a2 == 3)
  {
    result = (*((double *)this + 4) + *((double *)this + 6)) * 0.5;
    *((double *)this + 6) = result;
    *((double *)this + 4) = result;
  }
  else
  {
    if (a2 == 2)
    {
      result = (*((double *)this + 2) + *((double *)this + 6)) * 0.5;
      *((double *)this + 6) = result;
    }
    else
    {
      if (a2 != 1)
        goto LABEL_8;
      result = (*((double *)this + 2) + *((double *)this + 4)) * 0.5;
      *((double *)this + 4) = result;
    }
    *((double *)this + 2) = result;
  }
LABEL_8:
  v3 = a2 == 2;
  if (a2 == 1)
    v3 = 2;
  v4 = a2 % 3 + 1;
  v5 = (a2 + 1) % 3 + 1;
  v6 = fabsf(*((float *)this + v4 + 32));
  if (v6 > 90.0)
    v6 = 180.0 - v6;
  v7 = fabsf(*((float *)this + v5 + 32));
  v8 = 180.0 - v7;
  if (v7 <= 90.0)
    v8 = v7;
  *(float *)&result = vabds_f32(v6, v8);
  if (*(float *)&result < *((float *)this + 17))
  {
    v9 = *((float *)this + v4 + 36);
    v10 = *((float *)this + v5 + 36);
    result = 0.1;
    v11 = fminf(v9, v10) / (fmaxf(v9, v10) + 0.1);
    if ((float)(1.0 - *((float *)this + 18)) < v11)
    {
      v12 = (float)(v9 + v10) * 0.5;
      if (v3 == 2)
        v13 = 0;
      else
        v13 = v3 + 1;
      v14 = (char *)this + 16;
      v15 = (double *)((char *)this + 16 * v13 + 16);
      v16 = v3 - 1;
      if (!v3)
        v16 = 2;
      v17 = *v15;
      v18 = (double *)&v14[16 * v3];
      v18[1] = (v15[1] + *(double *)&v14[16 * v16 + 8]) * 0.5;
      v19 = v17;
      v20 = *((float *)this + a2 + 36);
      v21 = fminf(v12, v20) / (fmaxf(v12, v20) + 0.1);
      if ((float)(1.0 - *((float *)this + 19)) >= v21)
        v22 = sqrtf((float)((float)(v20 * v20) * -0.25) + (float)(v12 * v12));
      else
        v22 = v20 * 0.866;
      if (*v18 <= v19)
        v22 = -v22;
      result = (float)(v22 + v19);
      *v18 = result;
    }
  }
  return result;
}

BOOL CHTriangle::areHorizontalIsoscelesSides(CHTriangle *this, int a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = *((float *)this + a2 + 32);
  v4 = fabsf(v3 + 90.0);
  v5 = fabsf(v3 + -90.0);
  if (v3 >= 0.0)
    v6 = v5;
  else
    v6 = v4;
  v7 = *((float *)this + a3 + 32);
  v8 = fabsf(v7 + 90.0);
  v9 = fabsf(v7 + -90.0);
  if (v7 >= 0.0)
    v8 = v9;
  if (vabds_f32(v6, v8) >= *((float *)this + 17))
    return 0;
  v10 = *((float *)this + a2 + 36);
  v11 = *((float *)this + a3 + 36);
  v12 = fminf(v10, v11) / (fmaxf(v10, v11) + 0.1);
  return (float)(1.0 - *((float *)this + 18)) < v12;
}

BOOL CHTriangle::areVerticalIsoscelesSides(CHTriangle *this, int a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v3 = fabsf(*((float *)this + a2 + 32));
  if (v3 > 90.0)
    v3 = 180.0 - v3;
  v4 = fabsf(*((float *)this + a3 + 32));
  v5 = 180.0 - v4;
  if (v4 <= 90.0)
    v5 = v4;
  if (vabds_f32(v3, v5) >= *((float *)this + 17))
    return 0;
  v6 = *((float *)this + a2 + 36);
  v7 = *((float *)this + a3 + 36);
  v8 = fminf(v6, v7) / (fmaxf(v6, v7) + 0.1);
  return (float)(1.0 - *((float *)this + 18)) < v8;
}

void CHStraightLine::alignToAxis(CHStraightLine *this, float a2, float a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v5 = *((double *)this + 2);
  v6 = *((double *)this + 3);
  v7 = *((double *)this + 5);
  v8 = *((double *)this + 6);
  v9 = v6 - v8;
  v10 = v5 - v7;
  v11 = (float)(atan2f(v9, v10) * 180.0) / 3.14159265;
  v12 = fabsf(v11);
  v13 = 180.0 - v12;
  if (v12 < 90.0)
    v13 = v12;
  if (v13 < a2)
  {
    v14 = (v6 + v8) * 0.5;
    *((double *)this + 6) = v14;
    *((double *)this + 3) = v14;
    return;
  }
  v15 = v11 + -90.0;
  if (v11 < 90.0)
    v15 = 90.0 - v11;
  if (v11 < 0.0)
    v15 = v11 + 90.0;
  if (v11 < -90.0)
    v16 = -90.0 - v11;
  else
    v16 = v15;
  if (v16 < a2)
  {
    v17 = (v5 + v7) * 0.5;
    *((double *)this + 5) = v17;
    *((double *)this + 2) = v17;
    return;
  }
  if (v11 < 0.0)
    v11 = v11 + 360.0;
  v18 = fmod(v11, 45.0);
  if (v18 < a2 || 45.0 - v18 < a2)
  {
    v20 = vabdd_f64(v7, v5);
    v21 = vabdd_f64(v8, v6);
    v22 = vabdd_f64(v20, v21);
    if ((v6 >= v8 || v21 <= v20) && (v6 <= v8 || v21 >= v20))
    {
      *((double *)this + 3) = v6 - v22 * 0.25;
      *((double *)this + 6) = v8 + v22 * 0.25;
      if (v5 >= v7)
      {
LABEL_29:
        if (v5 <= v7 || v21 >= v20)
        {
          v25 = v22 * 0.25;
          *((double *)this + 2) = v5 + v25;
          v24 = v7 - v25;
          goto LABEL_33;
        }
LABEL_31:
        v23 = v22 * 0.25;
        *((double *)this + 2) = v5 - v23;
        v24 = v7 + v23;
LABEL_33:
        *((double *)this + 5) = v24;
        return;
      }
    }
    else
    {
      *((double *)this + 3) = v6 + v22 * 0.25;
      *((double *)this + 6) = v8 - v22 * 0.25;
      if (v5 >= v7)
        goto LABEL_29;
    }
    if (v21 > v20)
      goto LABEL_31;
    goto LABEL_29;
  }
}

void CHBezierLine::alignToAxis(CHBezierLine *this, float a2, float a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  double v22;
  double v23;
  float v24;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;

  v7 = *((double *)this + 2);
  v6 = *((double *)this + 3);
  v9 = *((double *)this + 5);
  v8 = *((double *)this + 6);
  v10 = v6 - v8;
  v11 = v7 - v9;
  v12 = (float)(atan2f(v10, v11) * 180.0) / 3.14159265;
  v13 = fabsf(v12);
  v14 = 180.0 - v13;
  if (v13 < 90.0)
    v14 = v13;
  if (v14 >= a2)
  {
    v15 = v12 + -90.0;
    if (v12 < 90.0)
      v15 = 90.0 - v12;
    if (v12 < 0.0)
      v15 = v12 + 90.0;
    if (v12 < -90.0)
      v16 = -90.0 - v12;
    else
      v16 = v15;
    if (v16 < a2)
    {
      v9 = (v7 + v9) * 0.5;
      *((double *)this + 5) = v9;
      *((double *)this + 2) = v9;
      v7 = v9;
    }
  }
  else
  {
    v8 = (v6 + v8) * 0.5;
    *((double *)this + 6) = v8;
    *((double *)this + 3) = v8;
    v6 = v8;
  }
  v18 = *((double *)this + 8);
  v17 = *((double *)this + 9);
  v19 = v9 - v7;
  v20 = v8 - v6;
  v21 = (float)(v20 * v20) + (float)(v19 * v19);
  if (v21 > 0.0)
  {
    v19 = v19 / v21;
    v20 = v20 / v21;
  }
  v22 = v18 - v7;
  v23 = v17 - v6;
  v24 = (v17 - v6) * v20 + (v18 - v7) * v19;
  if (v24 > 0.0 && v24 < 1.0)
  {
    v26 = v9 - v18;
    v27 = v8 - v17;
    v28 = sqrtf((float)(v27 * v27) + (float)(v26 * v26));
    v29 = v7 - v18;
    v30 = v6 - v17;
    v31 = sqrtf((float)(v30 * v30) + (float)(v29 * v29));
    v32 = fminf(v31, v28) / (fmaxf(v31, v28) + 0.1);
    if ((float)(1.0 - a3) < v32)
    {
      v33 = v22 * v20 - v23 * v19;
      v34 = v7 + (float)(v21 * (float)(v19 * 0.5)) + (float)(v21 * (float)(v20 * v33));
      v35 = v6 + (float)(v21 * (float)(v20 * 0.5)) - (float)(v21 * (float)(v19 * v33));
      *((double *)this + 8) = v34;
      *((double *)this + 9) = v35;
      *((double *)this + 10) = v9 * 0.25 + v7 * 0.25 + v34 * 0.5;
      *((double *)this + 11) = v8 * 0.25 + v6 * 0.25 + v35 * 0.5;
    }
  }
}

BOOL CHEllipse::isCovering(CHEllipse *this, CGPoint a2)
{
  float v3;
  float v4;
  float v5;
  __float2 v6;
  float v7;
  float v8;

  v3 = *((double *)this + 2) - a2.x;
  v4 = *((double *)this + 3) - a2.y;
  v5 = (*((double *)this + 6) + *((double *)this + 6)) * 3.14159265 / 360.0;
  v6 = __sincosf_stret(v5);
  v7 = (float)((float)(v6.__sinval * v4) + (float)(v6.__cosval * v3)) / (*((double *)this + 4) * 0.5);
  v8 = (float)((float)(v6.__sinval * v3) - (float)(v6.__cosval * v4)) / (*((double *)this + 5) * 0.5);
  return (float)((float)(v8 * v8) + (float)(v7 * v7)) <= 1.0;
}

void sub_1BE7E97F8(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "CHStraightLine");
}

void sub_1BE7E9820(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "CHBezierLine");
}

void sub_1BE7E9898(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  _QWORD v8[14];

  v8[13] = *MEMORY[0x1E0C80C00];
  v8[0] = CFSTR("StrokeBounds");
  v8[1] = CFSTR("SubstrokeBounds");
  v8[2] = CFSTR("StrokePoints");
  v8[3] = CFSTR("GroupBounds");
  v8[4] = CFSTR("Grouping");
  v8[5] = CFSTR("GroupClassification");
  v8[6] = CFSTR("GroupBaselineLegacy");
  v8[7] = CFSTR("GroupBaseline");
  v8[8] = CFSTR("PrincipalLines");
  v8[9] = CFSTR("NormalizedDrawing");
  v8[10] = CFSTR("NormalizedDrawingAll");
  v8[11] = CFSTR("RenderedResult");
  v8[12] = CFSTR("RenderedResultAll");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v8, 13, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568320;
  qword_1EF568320 = v6;

}

void sub_1BE7E9A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7E9A24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  _QWORD v122[13];
  _QWORD v123[15];

  v123[13] = *MEMORY[0x1E0C80C00];
  v122[0] = CFSTR("StrokeBounds");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v121, v6, (uint64_t)CFSTR("Stroke Bounds"), (uint64_t)&stru_1E77F6F28, 0, v7);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v123[0] = v120;
  v122[1] = CFSTR("SubstrokeBounds");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v8, v9, v10, v11, v12);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v119, v13, (uint64_t)CFSTR("Substroke Bounds"), (uint64_t)&stru_1E77F6F28, 0, v14);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  v123[1] = v118;
  v122[2] = CFSTR("StrokePoints");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v15, v16, v17, v18, v19);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v117, v20, (uint64_t)CFSTR("Stroke Points"), (uint64_t)&stru_1E77F6F28, 0, v21);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  v123[2] = v116;
  v122[3] = CFSTR("GroupBounds");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v22, v23, v24, v25, v26);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v115, v27, (uint64_t)CFSTR("Stroke Group Bounds"), (uint64_t)&stru_1E77F6F28, 0, v28);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v123[3] = v114;
  v122[4] = CFSTR("Grouping");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v29, v30, v31, v32, v33);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v113, v34, (uint64_t)CFSTR("Stroke Groups by Color"), (uint64_t)&stru_1E77F6F28, 0, v35);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  v123[4] = v112;
  v122[5] = CFSTR("GroupClassification");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v36, v37, v38, v39, v40);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v111, v41, (uint64_t)CFSTR("Stroke Groups Classification"), (uint64_t)&stru_1E77F6F28, 0, v42);
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  v123[5] = v110;
  v122[6] = CFSTR("GroupBaselineLegacy");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v43, v44, v45, v46, v47);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v109, v48, (uint64_t)CFSTR("Stroke Groups Baseline (Legacy)"), (uint64_t)&stru_1E77F6F28, 0, v49);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v123[6] = v108;
  v122[7] = CFSTR("GroupBaseline");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v50, v51, v52, v53, v54);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v107, v55, (uint64_t)CFSTR("Stroke Groups Baseline"), (uint64_t)&stru_1E77F6F28, 0, v56);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  v123[7] = v106;
  v122[8] = CFSTR("PrincipalLines");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v57, v58, v59, v60, v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v62, v63, (uint64_t)CFSTR("Tokens Principal Lines"), (uint64_t)&stru_1E77F6F28, 0, v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v123[8] = v65;
  v122[9] = CFSTR("NormalizedDrawing");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v66, v67, v68, v69, v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v71, v72, (uint64_t)CFSTR("Normalized Drawing (Selective)"), (uint64_t)&stru_1E77F6F28, 0, v73);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v123[9] = v74;
  v122[10] = CFSTR("NormalizedDrawingAll");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v75, v76, v77, v78, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v80, v81, (uint64_t)CFSTR("Normalized Drawing (All)"), (uint64_t)&stru_1E77F6F28, 0, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v123[10] = v83;
  v122[11] = CFSTR("RenderedResult");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v84, v85, v86, v87, v88);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v89, v90, (uint64_t)CFSTR("Rendered Result (Selective)"), (uint64_t)&stru_1E77F6F28, 0, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v123[11] = v92;
  v122[12] = CFSTR("RenderedResultAll");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v93, v94, v95, v96, v97);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v98, v99, (uint64_t)CFSTR("Rendered Result (All)"), (uint64_t)&stru_1E77F6F28, 0, v100);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v123[12] = v101;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v102, (uint64_t)v123, (uint64_t)v122, 13, v103);
  v104 = objc_claimAutoreleasedReturnValue();
  v105 = (void *)qword_1EF568330;
  qword_1EF568330 = v104;

}

void sub_1BE7E9EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_1BE7EA030()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[13];
  _QWORD v5[14];

  v5[13] = *MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("StrokeBounds");
  v5[0] = objc_opt_class();
  v4[1] = CFSTR("SubstrokeBounds");
  v5[1] = objc_opt_class();
  v4[2] = CFSTR("StrokePoints");
  v5[2] = objc_opt_class();
  v4[3] = CFSTR("GroupBounds");
  v5[3] = objc_opt_class();
  v4[4] = CFSTR("Grouping");
  v5[4] = objc_opt_class();
  v4[5] = CFSTR("GroupClassification");
  v5[5] = objc_opt_class();
  v4[6] = CFSTR("GroupBaselineLegacy");
  v5[6] = objc_opt_class();
  v4[7] = CFSTR("GroupBaseline");
  v5[7] = objc_opt_class();
  v4[8] = CFSTR("PrincipalLines");
  v5[8] = objc_opt_class();
  v4[9] = CFSTR("NormalizedDrawing");
  v5[9] = objc_opt_class();
  v4[10] = CFSTR("NormalizedDrawingAll");
  v5[10] = objc_opt_class();
  v4[11] = CFSTR("RenderedResult");
  v5[11] = objc_opt_class();
  v4[12] = CFSTR("RenderedResultAll");
  v5[12] = objc_opt_class();
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v0, (uint64_t)v5, (uint64_t)v4, 13, v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EF568340;
  qword_1EF568340 = v2;

}

void sub_1BE7EA358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EA368(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  _QWORD v95[10];
  _QWORD v96[12];

  v96[10] = *MEMORY[0x1E0C80C00];
  v95[0] = CFSTR("CHStatusKeyStatus");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v94, v6, (uint64_t)CFSTR("Status"), (uint64_t)&stru_1E77F6F28, 0, v7);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v96[0] = v93;
  v95[1] = CFSTR("CHStatusKeyEnvironment");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v8, v9, v10, v11, v12);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v92, v13, (uint64_t)CFSTR("Environment"), (uint64_t)&stru_1E77F6F28, 0, v14);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v96[1] = v91;
  v95[2] = CFSTR("CHStatusKeyLocales");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v15, v16, v17, v18, v19);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v90, v20, (uint64_t)CFSTR("Locales"), (uint64_t)&stru_1E77F6F28, 0, v21);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v96[2] = v89;
  v95[3] = CFSTR("CHStatusKeyLastDurationTotal");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v22, v23, v24, v25, v26);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v88, v27, (uint64_t)CFSTR("Total Duration"), (uint64_t)&stru_1E77F6F28, 0, v28);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v96[3] = v87;
  v95[4] = CFSTR("CHStatusKeyLastDurationDetailed");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v29, v30, v31, v32, v33);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v86, v34, (uint64_t)CFSTR("Detailed"), (uint64_t)&stru_1E77F6F28, 0, v35);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v96[4] = v85;
  v95[5] = CFSTR("CHStatusStrokeCount");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v36, v37, v38, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v41, v42, (uint64_t)CFSTR("Stroke Count"), (uint64_t)&stru_1E77F6F28, 0, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v96[5] = v44;
  v95[6] = CFSTR("CHStatusKeyGroupCount");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v45, v46, v47, v48, v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v50, v51, (uint64_t)CFSTR("Group Count"), (uint64_t)&stru_1E77F6F28, 0, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v96[6] = v53;
  v95[7] = CFSTR("CHStatusKeyTranscript");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v54, v55, v56, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v59, v60, (uint64_t)CFSTR("Transcript"), (uint64_t)&stru_1E77F6F28, 0, v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v96[7] = v62;
  v95[8] = CFSTR("CHStatusKeyAllResults");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v63, v64, v65, v66, v67);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v68, v69, (uint64_t)CFSTR("Text Results"), (uint64_t)&stru_1E77F6F28, 0, v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v96[8] = v71;
  v95[9] = CFSTR("CHStatusKeyAllMathResults");
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v72, v73, v74, v75, v76);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localizedStringForKey_value_table_(v77, v78, (uint64_t)CFSTR("Math Results"), (uint64_t)&stru_1E77F6F28, 0, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v96[9] = v80;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v81, (uint64_t)v96, (uint64_t)v95, 10, v82);
  v83 = objc_claimAutoreleasedReturnValue();
  v84 = (void *)qword_1EF568350;
  qword_1EF568350 = v83;

}

void sub_1BE7EA700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1BE7EA8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EA8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EAB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EACF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHVisualizationManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7EB140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7EB27C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EB2A4(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(id *)(a1 + 40);
    if (objc_msgSend_count(v2, v3, v4, v5, v6, v7))
    {

    }
    else
    {
      v18 = objc_msgSend_statusReportingEnabled((void *)a1, v8, v9, v10, v11, v12);

      if (!v18)
      {
        if (!*(_BYTE *)(a1 + 9))
        {
          v19 = 0;
LABEL_11:
          *(_BYTE *)(a1 + 9) = v19;
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          objc_msgSend_allValues(*(void **)(a1 + 48), v13, v14, v15, v16, v17, 0);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v60, (uint64_t)v64, 16, v31);
          if (v37)
          {
            v38 = *(_QWORD *)v61;
LABEL_13:
            v39 = 0;
            while (1)
            {
              if (*(_QWORD *)v61 != v38)
                objc_enumerationMutation(v29);
              if ((objc_msgSend_wantsInputDrawings(*(void **)(*((_QWORD *)&v60 + 1) + 8 * v39), v32, v33, v34, v35, v36) & 1) != 0)break;
              if (v37 == ++v39)
              {
                v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v32, (uint64_t)&v60, (uint64_t)v64, 16, v36);
                if (v37)
                  goto LABEL_13;
                goto LABEL_19;
              }
            }

            if (*(_BYTE *)(a1 + 10))
            {
              v50 = 1;
              goto LABEL_26;
            }
            objc_msgSend_recognitionSession((void *)a1, v51, v52, v53, v54, v55);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_registerInputDrawingClient_(v45, v56, a1, v57, v58, v59);
            v50 = 1;
          }
          else
          {
LABEL_19:

            if (!*(_BYTE *)(a1 + 10))
            {
              v50 = 0;
              goto LABEL_26;
            }
            objc_msgSend_recognitionSession((void *)a1, v40, v41, v42, v43, v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_unregisterInputDrawingClient_(v45, v46, a1, v47, v48, v49);
            v50 = 0;
          }

LABEL_26:
          *(_BYTE *)(a1 + 10) = v50;
          return;
        }
        objc_msgSend_recognitionSession((void *)a1, v13, v14, v15, v16, v17);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_unregisterChangeObserver_(v20, v25, a1, v26, v27, v28);
        v19 = 0;
LABEL_10:

        goto LABEL_11;
      }
    }
    if (*(_BYTE *)(a1 + 9))
    {
      v19 = 1;
      goto LABEL_11;
    }
    objc_msgSend_recognitionSession((void *)a1, v13, v14, v15, v16, v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_registerChangeObserver_(v20, v21, a1, v22, v23, v24);
    v19 = 1;
    goto LABEL_10;
  }
}

void sub_1BE7EB498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EB4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EBB48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBBCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBCB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBCC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBCDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBD58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBD70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBD84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EBE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBE4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EBE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EBEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE7EBED4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1BE7EBEF0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a2;
  v8 = objc_msgSend_visualizationIndexForStrokeGroup_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  v9 = (void *)MEMORY[0x1E0CB3940];
  v15 = objc_msgSend_uniqueIdentifier(v3, v10, v11, v12, v13, v14);
  objc_msgSend_stringWithFormat_(v9, v16, (uint64_t)CFSTR("Group %ld (ID: %ld)"), v17, v18, v19, v8 + 1, v15);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void sub_1BE7EBF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EBF7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE7EBF8C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a2;
  v8 = objc_msgSend_visualizationIndexForStrokeGroup_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  v9 = (void *)MEMORY[0x1E0CB3940];
  v15 = objc_msgSend_uniqueIdentifier(v3, v10, v11, v12, v13, v14);
  objc_msgSend_stringWithFormat_(v9, v16, (uint64_t)CFSTR("Group %ld (ID: %ld)"), v17, v18, v19, v8 + 1, v15);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void sub_1BE7EC008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EC018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EC210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7EC25C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = a2;
  v10 = a3;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    objc_msgSend_objectForKeyedSubscript_(*(void **)(v11 + 48), v6, (uint64_t)v5, v7, v8, v9);
  else
    objc_msgSend_objectForKeyedSubscript_(0, v6, (uint64_t)v5, v7, v8, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
    objc_msgSend_objectForKeyedSubscript_(*(void **)(v17 + 48), v12, (uint64_t)v10, v13, v14, v15);
  else
    objc_msgSend_objectForKeyedSubscript_(0, v12, (uint64_t)v10, v13, v14, v15);
  v18 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)v18;
  v25 = 0;
  if (v16 && v18)
  {
    v26 = objc_msgSend_layeringPriority(v16, v19, v20, v21, v22, v23);
    if (v26 <= objc_msgSend_layeringPriority(v24, v27, v28, v29, v30, v31))
    {
      v37 = objc_msgSend_layeringPriority(v16, v32, v33, v34, v35, v36);
      if (v37 >= objc_msgSend_layeringPriority(v24, v38, v39, v40, v41, v42))
        v25 = 0;
      else
        v25 = -1;
    }
    else
    {
      v25 = 1;
    }
  }

  return v25;
}

void sub_1BE7EC344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EC35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EC370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7EC494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EC4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7EC570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7EC9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE7ECB14(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a3;
  v14 = objc_msgSend_integerValue(v17, v4, v5, v6, v7, v8);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v16 = *(_QWORD *)(v15 + 24);
  if (v14 > v16)
  {
    v16 = objc_msgSend_integerValue(v17, v9, v10, v11, v12, v13);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  *(_QWORD *)(v15 + 24) = v16;

}

void sub_1BE7ECB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7ECC04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  objc_msgSend_lastRecognitionResult(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeGroupingResult(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeGroups(v13, v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_count(v19, v20, v21, v22, v23, v24);

  if (!v25)
  {
    v31 = *(_QWORD *)(a1 + 40);
    if (v31)
      objc_msgSend_removeAllObjects(*(void **)(v31 + 56), v26, v27, v28, v29, v30);
    else
      objc_msgSend_removeAllObjects(0, v26, v27, v28, v29, v30);
  }
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v32 = *(_QWORD *)(a1 + 40);
  if (v32)
    objc_msgSend_allValues(*(void **)(v32 + 48), v26, v27, v28, v29, v30, (_QWORD)v66);
  else
    objc_msgSend_allValues(0, v26, v27, v28, v29, v30, (_QWORD)v66);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v66, (uint64_t)v70, 16, v35);
  if (v41)
  {
    v42 = *(_QWORD *)v67;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v67 != v42)
          objc_enumerationMutation(v33);
        objc_msgSend_recognitionSessionDidUpdateRecognitionResult(*(void **)(*((_QWORD *)&v66 + 1) + 8 * i), v36, v37, v38, v39, v40);
      }
      v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v66, (uint64_t)v70, 16, v40);
    }
    while (v41);
  }

  if (objc_msgSend_statusReportingEnabled(*(void **)(a1 + 40), v44, v45, v46, v47, v48))
  {
    objc_msgSend_delegate(*(void **)(a1 + 40), v49, v50, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_opt_respondsToSelector();

    if ((v55 & 1) != 0)
    {
      objc_msgSend_delegate(*(void **)(a1 + 40), v56, v57, v58, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_visualizationManagerDidUpdateSessionStatus_(v61, v62, *(_QWORD *)(a1 + 40), v63, v64, v65);

    }
  }
}

void sub_1BE7ECDAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7ECE78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;

  if (objc_msgSend_statusReportingEnabled(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    objc_msgSend_delegate(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      objc_msgSend_delegate(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
      v23 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_visualizationManagerDidUpdateSessionStatus_(v23, v18, *(_QWORD *)(a1 + 32), v19, v20, v21);

    }
  }
}

void sub_1BE7ECF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7ECF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7ED214(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E50;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v5, OS_SIGNPOST_INTERVAL_END, v6, "CHTranscriptionQuery", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_DEFAULT, "END \"CHTranscriptionQuery\"", v8, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_QWORD *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  id v9;
  NSObject *v10;
  id v11;
  dispatch_queue_t v12;
  void *shared_owners;
  _QWORD *v14;
  _QWORD *v15;
  id v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v5 = a2;
  v6 = a3;
  *a1 = 0;
  a1[1] = 0;
  v7 = (std::__shared_weak_count *)operator new(0x58uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFA50;
  v9 = v6;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EF8E8;
  v7[2].__vftable = 0;
  v7[1].__shared_weak_owners_ = 0;
  v7[1].__shared_owners_ = (uint64_t)&v7[1].__shared_weak_owners_;
  v7[2].__shared_owners_ = 0xC800000002;
  v7[3].__vftable = 0;
  v7[3].__shared_owners_ = 0;
  v7[2].__shared_weak_owners_ = (uint64_t)v9;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v9;
  v12 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderStyleInventoryQueue", v10);
  shared_owners = (void *)v7[3].__shared_owners_;
  v7[3].__shared_owners_ = (uint64_t)v12;

  v14 = operator new(0x38uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E77EFAF8;
  v15 = v14 + 3;
  v16 = v5;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = v16;
  v14[3] = &unk_1E77EF8B8;
  v14[4] = v18;
  v14[5] = v7 + 1;
  v14[6] = v7;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *v15 = &unk_1E77EF998;

  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v22 = (std::__shared_weak_count *)a1[1];
  *a1 = v15;
  a1[1] = v14;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  return a1;
}

void sub_1BE7ED5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  sub_1BE6EED64((uint64_t)&a9);
  sub_1BE6EED64(v9);

  _Unwind_Resume(a1);
}

void sub_1BE7ED608(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  sub_1BE6EED64(v1);

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::getCharactersRequestsToSynthesize(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory *this)
{
  return (***(uint64_t (****)(_QWORD))this)(*(_QWORD *)this);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::processRequestResult(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::runPersonalization(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  id *v6;
  id *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  _QWORD v24[7];
  _QWORD v25[3];
  int v26;
  void *__p;
  id *v28;
  __int128 buf;
  uint64_t v30;
  __n128 (*v31)(uint64_t, uint64_t);
  void (*v32)(id *);
  const char *v33;
  id v34;
  id v35;
  int v36;
  id v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  (**(void (***)(void **__return_ptr, _QWORD, uint64_t))*a1)(&__p, *a1, a3);
  v6 = (id *)__p;
  v7 = v28;
  if (__p != v28)
  {
    v8 = MEMORY[0x1E0C809B0];
    do
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v9 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *v6;
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v10;
        _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizer: requested to synthesize %@", (uint8_t *)&buf, 0xCu);
      }

      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v30 = 0x6012000000;
      v31 = sub_1BE7ED984;
      v32 = sub_1BE7ED9B0;
      v33 = "1 0";
      v34 = *v6;
      v35 = v6[1];
      v36 = *((_DWORD *)v6 + 4);
      v11 = v36;
      v37 = v6[3];
      v38 = *((_OWORD *)v6 + 2);
      v25[0] = 0;
      v25[1] = v25;
      v25[2] = 0x2020000000;
      v26 = DWORD1(v38);
      unicodeToNSString(*((_DWORD *)v6 + 8), v12, v13, v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 88);
      v23[4] = &buf;
      v24[0] = v8;
      v24[1] = 3221225472;
      v24[2] = sub_1BE7EDA18;
      v24[3] = &unk_1E77F5748;
      v24[5] = v25;
      v24[6] = a1;
      v24[4] = &buf;
      v23[0] = v8;
      v23[1] = 3221225472;
      v23[2] = sub_1BE7EDC74;
      v23[3] = &unk_1E77F5798;
      v19 = objc_unsafeClaimAutoreleasedReturnValue((id)(*((uint64_t (**)(id, void *, uint64_t, uint64_t, _QWORD *, _QWORD *))v5
                                                         + 2))(v5, v17, 2 * (v11 == 2), v18, v24, v23));

      _Block_object_dispose(v25, 8);
      _Block_object_dispose(&buf, 8);

      v6 += 6;
    }
    while (v6 != v7);
    v6 = (id *)__p;
  }
  if (v6)
  {
    v20 = v28;
    v21 = v6;
    if (v28 != v6)
    {
      do
      {

        v22 = *(v20 - 6);
        v20 -= 6;

      }
      while (v20 != v6);
      v21 = __p;
    }
    v28 = v6;
    operator delete(v21);
  }

}

void sub_1BE7ED930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 sub_1BE7ED984(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v3;
  result = *(__n128 *)(a2 + 80);
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_1BE7ED9B0(id *a1)
{

}

id *sub_1BE7ED9E0(id *a1)
{

  return a1;
}

void sub_1BE7EDA18(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  id v22;
  __int16 v23;
  int v24;
  __int128 buf;
  int v26;
  id v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = (_QWORD *)a1[6];
    v9 = *(_QWORD *)(a1[4] + 8);
    v10 = *(id *)(v9 + 48);
    *(_QWORD *)&buf = v10;
    *((_QWORD *)&buf + 1) = *(id *)(v9 + 56);
    v26 = *(_DWORD *)(v9 + 64);
    v27 = *(id *)(v9 + 72);
    v28 = *(_OWORD *)(v9 + 80);
    v11 = *(_QWORD *)(a1[5] + 8);
    v12 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v12 + 1;
    DWORD1(v28) = v12;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 138412546;
      v22 = v10;
      v23 = 1024;
      v24 = v12;
      _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizer: synthesis result retrieved for %@ with version %d", (uint8_t *)&v21, 0x12u);
    }

    (*(void (**)(_QWORD, __int128 *, id))(*(_QWORD *)*v8 + 8))(*v8, &buf, v5);
  }
  else if (v6)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v14 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_localizedDescription(v7, v15, v16, v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl(&dword_1BE607000, v14, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizer: character synthesis Error during fast path synthesis: %@", (uint8_t *)&buf, 0xCu);

    }
  }

}

void sub_1BE7EDC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1BE7EDC74(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t i;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CHSynthesisRequestOptions *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  const char *v103;
  uint64_t v104;
  id v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  CHRemoteSynthesisRequest *v136;
  const char *v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v151;
  id obj;
  id v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[4];
  id v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t (*v163)(uint64_t, uint64_t);
  void (*v164)(uint64_t);
  id v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _BYTE v170[128];
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v151 = a2;
  v3 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v9 = objc_msgSend_count(v151, v4, v5, v6, v7, v8);
  v153 = (id)objc_msgSend_initWithCapacity_(v3, v10, v9, v11, v12, v13);
  v168 = 0u;
  v169 = 0u;
  v166 = 0u;
  v167 = 0u;
  obj = v151;
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v166, (uint64_t)v170, 16, v15);
  if (v16)
  {
    v17 = 0;
    v154 = *(_QWORD *)v167;
    do
    {
      v155 = v16;
      for (i = 0; i != v155; ++i)
      {
        if (*(_QWORD *)v167 != v154)
          objc_enumerationMutation(obj);
        v24 = *(id *)(*((_QWORD *)&v166 + 1) + 8 * i);
        if (v24)
        {
          v25 = (void *)objc_msgSend_copy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), v19, v20, v21, v22, v23);
          v31 = (void *)objc_msgSend_copy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72), v26, v27, v28, v29, v30);
          v42 = (CHSynthesisRequestOptions *)objc_msgSend_copy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56), v32, v33, v34, v35, v36);
          if (!v42)
            v42 = objc_alloc_init(CHSynthesisRequestOptions);
          objc_msgSend_drawing(v24, v37, v38, v39, v40, v41);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setStyleDrawing_(v42, v44, (uint64_t)v43, v45, v46, v47);

          objc_msgSend_transcription(v24, v48, v49, v50, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setStyleContent_(v42, v54, (uint64_t)v53, v55, v56, v57);

          objc_msgSend_setValidateSegments_(v42, v58, 1, v59, v60, v61);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 64) == 2)
          {
            objc_msgSend_transcription(v24, v62, v63, v64, v65, v66);
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            unicodeToNSString(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80), v68, v69, v70, v71, v72);
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = objc_msgSend_containsString_(v67, v74, (uint64_t)v73, v75, v76, v77);

            if (v78)
            {
              v160 = 0;
              v161 = &v160;
              v162 = 0x3032000000;
              v163 = sub_1BE7EE228;
              v164 = sub_1BE7EE238;
              v165 = objc_alloc_init(MEMORY[0x1E0CB3940]);
              objc_msgSend_transcription(v24, v84, v85, v86, v87, v88);
              v89 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_transcription(v24, v90, v91, v92, v93, v94);
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              v101 = objc_msgSend_length(v95, v96, v97, v98, v99, v100);
              v156[0] = MEMORY[0x1E0C809B0];
              v156[1] = 3221225472;
              v156[2] = sub_1BE7EE240;
              v156[3] = &unk_1E77F5770;
              v158 = *(_QWORD *)(a1 + 32);
              v159 = &v160;
              v102 = v24;
              v157 = v102;
              objc_msgSend_enumerateCodepointsInRange_usingBlock_(v89, v103, 0, v101, (uint64_t)v156, v104);

              v105 = (id)v161[5];
              objc_msgSend_drawing(v102, v106, v107, v108, v109, v110);
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              v117 = objc_msgSend_copy(v111, v112, v113, v114, v115, v116);

              objc_msgSend_setForwardProcessRatio_(v42, v118, (uint64_t)&unk_1E7829770, v119, v120, v121);
              objc_msgSend_setBackwardProcessRatio_(v42, v122, (uint64_t)&unk_1E7829780, v123, v124, v125);

              _Block_object_dispose(&v160, 8);
              v25 = v105;
              v31 = (void *)v117;
              v17 = 1;
              goto LABEL_14;
            }
            if ((v17 & 1) != 0)
            {
              v17 = 1;
              goto LABEL_15;
            }
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 64) = 0;
            objc_msgSend_styleContent(v42, v79, v80, v81, v82, v83);
            v145 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_stringByAppendingFormat_(v25, v146, (uint64_t)CFSTR(" %@"), v147, v148, v149, v145);
            v135 = objc_claimAutoreleasedReturnValue();

            v17 = 0;
          }
          else
          {
            objc_msgSend_styleContent(v42, v62, v63, v64, v65, v66);
            v130 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_stringByAppendingFormat_(v25, v131, (uint64_t)CFSTR(" %@"), v132, v133, v134, v130);
            v135 = objc_claimAutoreleasedReturnValue();

          }
          v25 = (void *)v135;
LABEL_14:
          objc_msgSend_setSkipStyleInventoryLookup_(v42, v126, 1, v127, v128, v129);
          v136 = [CHRemoteSynthesisRequest alloc];
          v138 = (void *)objc_msgSend_initWithString_drawing_options_requestType_priority_(v136, v137, (uint64_t)v25, (uint64_t)v31, (uint64_t)v42, v31 != 0, 2);
          objc_msgSend_addObject_(v153, v139, (uint64_t)v138, v140, v141, v142);

LABEL_15:
        }

      }
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v143, (uint64_t)&v166, (uint64_t)v170, 16, v144);
    }
    while (v16);
  }

  return v153;
}

void sub_1BE7EE0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7EE228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7EE238(uint64_t a1)
{

}

void sub_1BE7EE240(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  int v9;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 80) == (_DWORD)a2)
  {
    v9 = (int)a2;
    objc_msgSend_transcription(*(void **)(a1 + 32), a2, a3, a4, (uint64_t)a5, a6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0CB3940];
    unicodeToNSString(v9, v13, v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v12, v19, (uint64_t)CFSTR(" %@ "), v20, v21, v22, v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByReplacingCharactersInRange_withString_(v11, v24, a3, a4, (uint64_t)v23, v25);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;

    v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v30, v31, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v29, v36, (uint64_t)v35, v37, v38, v39);
    v40 = objc_claimAutoreleasedReturnValue();
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v42 = *(void **)(v41 + 40);
    *(_QWORD *)(v41 + 40) = v40;

    *a5 = 1;
  }
}

void sub_1BE7EE36C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7EE37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7EE394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7EE3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **sub_1BE7EE3B8(void **a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {

        v5 = *(v3 - 6);
        v3 -= 6;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE7EE424(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BE7EE434(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFA50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE7EE464(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1BE7EE474(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BE7EE484(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE7EE4B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1BE7EE848(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[6];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || !*(_BYTE *)(v2 + 33))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_debugName(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      *(_DWORD *)buf = 138412546;
      v25 = v9;
      v26 = 2048;
      v27 = v10;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEBUG, "%@: start for session %p", buf, 0x16u);

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 33) = 1;
    objc_msgSend_registerChangeObserver_(*(void **)(*(_QWORD *)(a1 + 32) + 48), v11, *(_QWORD *)(a1 + 32), v12, v13, v14);
    v15 = *(_QWORD **)(a1 + 32);
    v16 = v15[3];
    objc_msgSend_processingQueue(v15, v17, v18, v19, v20, v21);
    v22 = objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_1BE7EE9CC;
    v23[3] = &unk_1E77F57C0;
    v23[4] = *(_QWORD *)(a1 + 32);
    v23[5] = v16;
    dispatch_async(v22, v23);

  }
}

void sub_1BE7EE9CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1BE7EE9DC(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, *(double *)(a1 + 40));
}

void sub_1BE7EE9DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  double v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  dispatch_time_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  BOOL v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int doesQueryResultDependOnDeclaredVariables;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _BOOL4 v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  NSObject *v105;
  objc_class *v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _BOOL4 v120;
  int v121;
  int v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  _QWORD block[6];
  uint8_t buf[4];
  uint64_t v146;
  __int16 v147;
  void *v148;
  __int16 v149;
  void *v150;
  __int16 v151;
  void *v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  _BOOL4 v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_BYTE *)(a1 + 32) || *(double *)(a1 + 24) > a7)
    return;
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], a2, a3, a4, a5, a6);
  v9 = v8 - *(double *)(a1 + 24);
  objc_msgSend_preferredUpdatesInterval((void *)a1, v10, v11, v12, v13, v14);
  v21 = v20 - v9;
  if (v21 > 0.0)
  {
    v22 = *(_QWORD *)(a1 + 24);
    v23 = dispatch_time(0, (uint64_t)(v21 * 1000000000.0));
    objc_msgSend_processingQueue((void *)a1, v24, v25, v26, v27, v28);
    v29 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BE7EF080;
    block[3] = &unk_1E77F57C0;
    block[4] = a1;
    block[5] = v22;
    dispatch_after(v23, v29, block);

    return;
  }
  objc_msgSend_lastRecognitionResult(*(void **)(a1 + 48), v15, v16, v17, v18, v19);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v30;
  if (v30)
    v37 = *(_QWORD *)(a1 + 16) == 0;
  else
    v37 = 0;
  LODWORD(v38) = v37;
  objc_msgSend_encodedStrokeProviderVersion(v30, v31, v32, v33, v34, v35);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (v44)
  {
    objc_msgSend_encodedStrokeProviderVersion(*(void **)(a1 + 16), v39, v40, v41, v42, v43);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_encodedStrokeProviderVersion(v36, v46, v47, v48, v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_isEqual_(v45, v52, (uint64_t)v51, v53, v54, v55) ^ 1;

    doesQueryResultDependOnDeclaredVariables = objc_msgSend_q_doesQueryResultDependOnDeclaredVariables((void *)a1, v57, v58, v59, v60, v61);
    v68 = 0;
    if (!v36)
      goto LABEL_19;
  }
  else
  {
    v56 = 0;

    doesQueryResultDependOnDeclaredVariables = objc_msgSend_q_doesQueryResultDependOnDeclaredVariables((void *)a1, v69, v70, v71, v72, v73);
    v68 = 0;
    if (!v36)
      goto LABEL_19;
  }
  if (doesQueryResultDependOnDeclaredVariables)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
      v92 = 0;
      v68 = 0;
      v86 = 0;
      v98 = objc_msgSend_completeness(v36, v63, v64, v65, v66, v67);
      if ((objc_msgSend_q_resultWantedForCompleteness_((void *)a1, v99, v98, v100, v101, v102) & 1) != 0)
        goto LABEL_26;
      goto LABEL_28;
    }
    objc_msgSend_declaredVariables(v36, v63, v64, v65, v66, v67);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_declaredVariables(*(void **)(a1 + 16), v75, v76, v77, v78, v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = objc_msgSend_isEqualToSet_(v74, v81, (uint64_t)v80, v82, v83, v84) ^ 1;

  }
LABEL_19:
  v85 = *(void **)(a1 + 16);
  if (!v85)
  {
    v86 = 0;
    v92 = 0;
    if (!v36)
      goto LABEL_28;
LABEL_21:
    v93 = objc_msgSend_completeness(v36, v63, v64, v65, v66, v67);
    if ((objc_msgSend_q_resultWantedForCompleteness_((void *)a1, v94, v93, v95, v96, v97) & 1) == 0)
      goto LABEL_28;
LABEL_26:
    v143 = 1;
    v103 = 1;
    if (((v38 | v56 | v68) & 1) != 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  v86 = v36 == 0;
  v87 = objc_msgSend_completeness(v85, v63, v64, v65, v66, v67);
  v92 = objc_msgSend_q_resultWantedForCompleteness_((void *)a1, v88, v87, v89, v90, v91);
  if (v36)
    goto LABEL_21;
LABEL_28:
  v143 = 0;
  v104 = v92 & v86 ^ 1 | v38;
  v103 = v92 & v86 | v104 ^ 1;
  if (((v104 | v56) & 1) != 0 || (v68 & 1) != 0)
    goto LABEL_31;
LABEL_30:
  v103 = v86 | v92 ^ 1;
LABEL_31:
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v105 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
  {
    v106 = (objc_class *)objc_opt_class();
    NSStringFromClass(v106);
    v142 = v103;
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recognitionSession((void *)a1, v108, v109, v110, v111, v112);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = v92;
    v120 = v86;
    v121 = v56;
    v122 = v38;
    v38 = objc_msgSend_completeness(v36, v114, v115, v116, v117, v118);
    v128 = objc_msgSend_completeness(*(void **)(a1 + 16), v123, v124, v125, v126, v127);
    *(_DWORD *)buf = 134220802;
    v146 = a1;
    v147 = 2112;
    v148 = v107;
    v149 = 2048;
    v150 = v113;
    v151 = 2112;
    v152 = v36;
    v153 = 2048;
    v154 = v38;
    LOBYTE(v38) = v122;
    v155 = 2048;
    v156 = v128;
    v157 = 1024;
    v158 = v122;
    v159 = 1024;
    v160 = v121;
    v161 = 1024;
    v162 = v120;
    v163 = 1024;
    v164 = v119;
    v165 = 1024;
    v166 = v143;
    v167 = 1024;
    v168 = v142;
    _os_log_impl(&dword_1BE607000, v105, OS_LOG_TYPE_DEBUG, "CHQuery update: query %p (type %@), session %p, latestRecognitionResult %@, lastCompleteness %ld, prevCompleteness %ld, firstResultReady %d, strokeProviderChanged %d, prevResultRemoved %d, prevResultWanted %d, resultWanted %d -> shouldProceed ? %d", buf, 0x62u);

    v103 = v142;
  }

  if (v103)
  {
    v134 = objc_msgSend_copy(v36, v129, v130, v131, v132, v133);
    v135 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v134;

    if ((v38 & 1) == 0)
    {
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v136, v137, v138, v139, v140);
      *(_QWORD *)(a1 + 24) = v141;
    }
    objc_msgSend_q_setNeedsQueryResultUpdating((void *)a1, v136, v137, v138, v139, v140);
  }

}

uint64_t sub_1BE7EEEB4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 32);
  if (v1 && *(_BYTE *)(v1 + 33))
  {
    v2 = result;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_debugName(*(void **)(v2 + 32), v4, v5, v6, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138412290;
      v15 = v9;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEBUG, "%@: pause", (uint8_t *)&v14, 0xCu);

    }
    *(_BYTE *)(*(_QWORD *)(v2 + 32) + 33) = 0;
    return objc_msgSend_unregisterChangeObserver_(*(void **)(*(_QWORD *)(v2 + 32) + 48), v10, *(_QWORD *)(v2 + 32), v11, v12, v13);
  }
  return result;
}

void sub_1BE7EF070(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1BE7EE9DC(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, *(double *)(a1 + 40));
}

uint64_t sub_1BE7EF080(uint64_t a1)
{
  return sub_1BE7EE9DC(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_1BE7EF1C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1BE7EE9DC(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, *(double *)(a1 + 40));
}

void sub_1BE7EF46C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend_queryDidUpdateResult_(WeakRetained, v2, *(_QWORD *)(a1 + 32), v3, v4, v5);

}

void sub_1BE7EF8C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], a2, (uint64_t)CFSTR("^\\s*((\\S)(?:\\s*\\2)*)\\s*$"), 0, 0, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568360;
  qword_1EF568360 = v6;

}

uint64_t HTMLog::writeHeader(FILE **this)
{
  float v2;
  float v3;
  float v4;
  double v5;
  const char *v6;
  uint64_t result;

  fwrite("<!DOCTYPE html>\n<html>\n", 0x17uLL, 1uLL, this[15]);
  fwrite("<head>\n", 7uLL, 1uLL, this[15]);
  fwrite("<style>\n", 8uLL, 1uLL, this[15]);
  v2 = *((float *)this + 5);
  v3 = *((float *)this + 3);
  v4 = (float)(v2 * 3.0) + (float)(v3 * 2.0);
  if (!*((_BYTE *)this + 6))
    v4 = v3 + (float)(v2 * 2.0);
  v5 = v4;
  fprintf(this[15], ".x {background-color:#fff;float:left;width:%.1fpx;margin:%.1fpx;padding:%.1fpx;border-style:groove;border-width:5px;"
    "border-color:#98bf21;}\n",
    v4,
    *((float *)this + 4),
    fminf(v2, 20.0));
  fprintf(this[15], ".plain {background-color:#fff;float:left;width:%.1fpx;margin:%.1fpx;padding:%.1fpx;border:none;}\n",
    v5,
    *((float *)this + 4),
    *((float *)this + 5));
  fprintf(this[15], ".bi {-webkit-border-radius: 8px;-webkit-border-width: 0px;background: -webkit-gradient(linear, left top, left bottom"
    ", color-stop(0%%,#eee), color-stop(40%%,#eee), color-stop(100%%,#eee));}\n");
  fprintf(this[15], ".bred {-webkit-border-radius: 8px;background: -webkit-gradient(linear, left top, left bottom, color-stop(0%%,#eee), "
    "color-stop(40%%,#fcc), color-stop(100%%,#faa));}\n");
  fprintf(this[15], ".byellow {-webkit-border-radius: 8px;background: -webkit-gradient(linear, left top, left bottom, color-stop(0%%,#eee"
    "), color-stop(40%%,#ffc), color-stop(100%%,#ffa));}\n");
  fprintf(this[15], ".bgreen {-webkit-border-radius: 8px;background: -webkit-gradient(linear, left top, left bottom, color-stop(0%%,#eee)"
    ", color-stop(40%%,#cfc), color-stop(100%%,#afa));}\n");
  fwrite("image{opacity: 1;}\n", 0x13uLL, 1uLL, this[15]);
  fwrite("image:hover{opacity: 0.3;}\n", 0x1BuLL, 1uLL, this[15]);
  fwrite("h1{font-size:32px;background-color:#6bf;color:#fff;padding:10px;text-align:center;}\n",
    0x54uLL,
    1uLL,
    this[15]);
  fwrite("</style>\n", 9uLL, 1uLL, this[15]);
  if (*(_BYTE *)this || *((_BYTE *)this + 1))
  {
    fwrite(" <script type=\"text/javascript\">\n", 0x21uLL, 1uLL, this[15]);
    fwrite("function boo(id,xyfile,action)\n", 0x1FuLL, 1uLL, this[15]);
    fwrite("{\n", 2uLL, 1uLL, this[15]);
    fwrite("    document.getElementById('bt' + id).className='bi';\n", 0x37uLL, 1uLL, this[15]);
    fwrite("    document.getElementById('br' + id).className='bi';\n", 0x37uLL, 1uLL, this[15]);
    fwrite("    document.getElementById('brmts' + id).className='bi';\n", 0x3AuLL, 1uLL, this[15]);
    fwrite("    switch(action)\n", 0x13uLL, 1uLL, this[15]);
    fwrite("    {\n", 6uLL, 1uLL, this[15]);
    fwrite("        case 0:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('bt' + id).className='bred';\n", 0x41uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='Trash ' + xyfile + '\\n';\n",
      0x56uLL,
      1uLL,
      this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("        case 1:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('br' + id).className='byellow';\n", 0x44uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='Review ' + xyfile + '\\n';\n",
      0x57uLL,
      1uLL,
      this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("        case 2:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('brmts' + id).className='bgreen';\n", 0x46uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='RMTS ' + xyfile + '\\n';\n",
      0x55uLL,
      1uLL,
      this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("        case 3:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='';\n", 0x40uLL, 1uLL, this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("    }\n", 6uLL, 1uLL, this[15]);
    fwrite("}\n", 2uLL, 1uLL, this[15]);
    fwrite("function validItem(id,xyfile,item)\n", 0x23uLL, 1uLL, this[15]);
    fwrite("{\n", 2uLL, 1uLL, this[15]);
    fwrite(" document.getElementById('po-term'+id).innerHTML += xyfile + ' ' + item + '\\n';\n",
      0x50uLL,
      1uLL,
      this[15]);
    fwrite("}\n", 2uLL, 1uLL, this[15]);
    fwrite("function SendMail(nbExamples) {\n", 0x20uLL, 1uLL, this[15]);
    v6 = (const char *)(this + 11);
    if (*((char *)this + 111) < 0)
      v6 = *(const char **)v6;
    fprintf(this[15], "    var subject= \"I reviewed %s\";\n", v6);
    fwrite("    var body = \"\";\n", 0x13uLL, 1uLL, this[15]);
    fwrite("    var templine=\"\";\n", 0x15uLL, 1uLL, this[15]);
    fwrite("    for (var i=0;i<=nbExamples;i++)\n", 0x24uLL, 1uLL, this[15]);
    fwrite("    {\n", 6uLL, 1uLL, this[15]);
    fwrite("        templine = document.getElementById('po-term'+i).innerHTML;\n", 0x43uLL, 1uLL, this[15]);
    fwrite("        if (templine.length > 5){\n", 0x22uLL, 1uLL, this[15]);
    fwrite("            body+= templine;\n", 0x1DuLL, 1uLL, this[15]);
    fwrite("        }\n", 0xAuLL, 1uLL, this[15]);
    fwrite("    }\n", 6uLL, 1uLL, this[15]);
    fwrite("    var uri = \"mailto:antoine_vinel@apple.com?subject=\";\n", 0x39uLL, 1uLL, this[15]);
    fwrite("    uri += encodeURIComponent(subject);\n", 0x28uLL, 1uLL, this[15]);
    fwrite("    uri += \"&body=\";\n", 0x15uLL, 1uLL, this[15]);
    fwrite("    uri += encodeURIComponent(body);\n", 0x25uLL, 1uLL, this[15]);
    fwrite("    window.open(uri);\n", 0x16uLL, 1uLL, this[15]);
    fwrite("}\n", 2uLL, 1uLL, this[15]);
    fwrite("</script>\n", 0xAuLL, 1uLL, this[15]);
  }
  fwrite("</head>\n", 8uLL, 1uLL, this[15]);
  *((_BYTE *)this + 144) = 1;
  result = fwrite("<body>\n", 7uLL, 1uLL, this[15]);
  if (*(_BYTE *)this)
  {
    fwrite("<p style=\"clear:both;margin:auto;\">This HTML file can't write anything on your disk. To save your work you must "
      "finish the whole page, and click on \"Send via email to Antoine\".</p>\n",
      0xB5uLL,
      1uLL,
      this[15]);
    fwrite("<p style=\"clear:both;margin:auto;\">Click on \"unacceptable\" examples, they will go in a second reviewing proces"
      "s where we'll decide to keep them or not. Don't worry about a small shifting (regarding to background image), and "
      "don't remove an example just because the strokes are looking as stairs, it is normal since it occurs on very small"
      " drawings (and we need them). But you can flag for instance bended arrows or lines ;)</p>\n",
      0x1ACuLL,
      1uLL,
      this[15]);
    fwrite("<p style=\"clear:both;margin:auto;\">This process is non-destructive.</p>\n", 0x48uLL, 1uLL, this[15]);
    fwrite("<p style=\"clear:both;margin:auto;\">Good luck,</p>\n", 0x32uLL, 1uLL, this[15]);
    return fwrite("<p style=\"clear:both;margin:auto;\">Antoine</p>\n", 0x2FuLL, 1uLL, this[15]);
  }
  return result;
}

void HTMLog::~HTMLog(HTMLog *this)
{
  FILE *v2;
  int v3;

  v2 = (FILE *)*((_QWORD *)this + 15);
  if (v2)
  {
    if (*(_BYTE *)this || *((_BYTE *)this + 1))
    {
      fprintf(*((FILE **)this + 15), "<div style=\"clear:both;margin:auto;font-size:250%%;\" >\n");
      fwrite("<p>WARNING : NOTHING WAS SAVED : YOU MUST CLICK ON THE FOLLOWING LINK !</p>\n", 0x4CuLL, 1uLL, *((FILE **)this + 15));
      fprintf(*((FILE **)this + 15), "<p><a href=\"#\" onclick=\"SendMail(%d);\">Send via email to Antoine !</a></p>\n",
        *((_DWORD *)this + 50));
      fwrite("</div>\n", 7uLL, 1uLL, *((FILE **)this + 15));
      fwrite("<p>For information, here are the files you flagged:</p>\n", 0x38uLL, 1uLL, *((FILE **)this + 15));
      if ((*((_DWORD *)this + 50) & 0x80000000) == 0)
      {
        v3 = -1;
        do
          fprintf(*((FILE **)this + 15), "<p id=\"po-term%d\" style=\"margin:0;\" \\>\n", ++v3);
        while (v3 < *((_DWORD *)this + 50));
      }
      fprintf(*((FILE **)this + 15), "<div style=\"clear:both;margin:auto;font-size:250%%;\" >\n");
      fwrite("</div>\n", 7uLL, 1uLL, *((FILE **)this + 15));
      v2 = (FILE *)*((_QWORD *)this + 15);
    }
    fwrite("</body>\n</html>\n", 0x10uLL, 1uLL, v2);
    fclose(*((FILE **)this + 15));
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*((char *)this + 79) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*((void **)this + 11));
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*((char *)this + 55) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(*((void **)this + 4));
    return;
  }
LABEL_16:
  operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    goto LABEL_17;
}

size_t HTMLog::addTextAtPoint(HTMLog *this, CGPoint a2, const char *a3, ...)
{
  FILE *v5;
  const char *v6;
  float y;
  double v8;
  float v9;
  float x;
  float v11;
  va_list va;

  va_start(va, a3);
  v5 = (FILE *)*((_QWORD *)this + 15);
  v6 = (char *)this + 56;
  if (*((char *)this + 79) < 0)
    v6 = *(const char **)v6;
  y = a2.y;
  v8 = *((float *)this + 40);
  v9 = *((float *)this + 39) + (y - *((double *)this + 22)) * v8;
  x = a2.x;
  v11 = *((float *)this + 38) + (x - *((double *)this + 21)) * v8;
  fprintf(v5, "    <text x=\"%.0f\" y=\"%.0f\" font-family=\"Verdana\" font-size=\"%d\" fill=\"%s\">", v11, v9, *((_DWORD *)this + 20), v6);
  vfprintf(*((FILE **)this + 15), a3, va);
  return fwrite("</text>\n", 8uLL, 1uLL, *((FILE **)this + 15));
}

void HTMLog::pushInfo(HTMLog *this, const char *__format, ...)
{
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string __dst;
  void *__p[2];
  int64_t v15;
  va_list v16;
  va_list va;

  va_start(va, __format);
  va_copy(v16, va);
  v3 = (char *)this + 232;
  vsnprintf((char *)this + 232, 0x800uLL, __format, va);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, "<br/>");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v15 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v15 >= 0)
    v12 = HIBYTE(v15);
  else
    v12 = (std::string::size_type)__p[1];
  std::string::append((std::string *)((char *)this + 208), (const std::string::value_type *)v11, v12);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
}

void sub_1BE7F114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

size_t HTMLog::pushH1(FILE **this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  fwrite("<h1>", 4uLL, 1uLL, this[15]);
  vfprintf(this[15], a2, va);
  return fwrite("</h1>", 5uLL, 1uLL, this[15]);
}

size_t HTMLog::pushH2(FILE **this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  fwrite("<h2>", 4uLL, 1uLL, this[15]);
  vfprintf(this[15], a2, va);
  return fwrite("</h2>", 5uLL, 1uLL, this[15]);
}

uint64_t HTMLog::push(FILE **this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vfprintf(this[15], a2, va);
}

size_t HTMLog::openPolyline(FILE **this)
{
  return fwrite("    <polyline points=\"", 0x16uLL, 1uLL, this[15]);
}

uint64_t HTMLog::pushInPolyline(HTMLog *this, CGPoint a2)
{
  float x;
  double v3;
  float v4;
  float y;
  float v6;

  x = a2.x;
  v3 = *((float *)this + 40);
  v4 = *((float *)this + 38) + (x - *((double *)this + 21)) * v3;
  y = a2.y;
  v6 = *((float *)this + 39) + (y - *((double *)this + 22)) * v3;
  return fprintf(*((FILE **)this + 15), " %.3f %.3f", v4, v6);
}

size_t HTMLog::py_start(HTMLog *this)
{
  FILE *v2;

  v2 = fopen("/Volumes/data/tasks/017-HTMLPY/temp.py", "w");
  *((_QWORD *)this + 17) = v2;
  fwrite("import numpy as np\n", 0x13uLL, 1uLL, v2);
  fwrite("import matplotlib.mlab as mlab\n", 0x1FuLL, 1uLL, *((FILE **)this + 17));
  fwrite("import matplotlib.pyplot as plt\n", 0x20uLL, 1uLL, *((FILE **)this + 17));
  fwrite("import StringIO\n", 0x10uLL, 1uLL, *((FILE **)this + 17));
  return fwrite("import urllib, base64\n", 0x16uLL, 1uLL, *((FILE **)this + 17));
}

uint64_t HTMLog::py(FILE **this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vfprintf(this[15], a2, va);
}

uint64_t HTMLog::py_exec(FILE **this)
{
  uint64_t result;

  fwrite("fig = plt.gcf()\n", 0x10uLL, 1uLL, this[17]);
  fwrite("imgdata = StringIO.StringIO()\n", 0x1EuLL, 1uLL, this[17]);
  fwrite("fig.savefig(imgdata, format='png')\n", 0x23uLL, 1uLL, this[17]);
  fwrite("imgdata.seek(0)\n", 0x10uLL, 1uLL, this[17]);
  fwrite("import urllib, base64\n", 0x16uLL, 1uLL, this[17]);
  fwrite("plotfile = open(\"/Volumes/data/tasks/017-HTMLPY/temp.b64\",\"w\")\n", 0x3FuLL, 1uLL, this[17]);
  fwrite("imgdata = StringIO.StringIO()\n", 0x1EuLL, 1uLL, this[17]);
  fwrite("fig.savefig(imgdata, format='png')\n", 0x23uLL, 1uLL, this[17]);
  fwrite("imgdata.seek(0)\n", 0x10uLL, 1uLL, this[17]);
  fwrite("plotfile.write('<img src = \\\"data:image/png;base64,' + urllib.quote(base64.b64encode(imgdata.buf)) + '\\\"/>')\n",
    0x6DuLL,
    1uLL,
    this[17]);
  fwrite("plotfile.close()", 0x10uLL, 1uLL, this[17]);
  fclose(this[17]);
  result = system("python /Volumes/data/tasks/017-HTMLPY/temp.py");
  *((_BYTE *)this + 128) = 1;
  return result;
}

void EllipseRegressor::EllipseRegressor(EllipseRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  double v16;
  uint64_t v17;
  double v18;
  EllipseRegressor *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  double v27;
  float v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  float v45;
  float v46;
  float v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  unint64_t i;
  double v57;
  double v58;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float v65;
  const char *v66;
  __float2 v67;
  __float2 v68;
  __float2 v69;
  __float2 v70;
  __float2 v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float *v77;
  float *v78;
  unint64_t v79;
  double v80;
  double v81;
  double v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float v93;
  float *v94;
  uint64_t v95;
  float *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  float *v101;
  int64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  _OWORD *v107;
  float *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  float v112;
  float v113;
  float *v114;
  float *v115;
  float *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  float *v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;
  _OWORD *v127;
  float *v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  float v134;
  float v135;
  float v136;
  EllipseRegressor *v137;
  CHDrawing *v138;
  unint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float *v143;

  v6 = a2;
  *((_QWORD *)this + 3) = 0;
  objc_storeStrong((id *)this + 3, a2);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 2) = a3;
  *(_QWORD *)this = objc_msgSend_pointCountForStrokeIndex_(v6, v7, 0, v8, v9, v10, (char *)this + 24);
  *((_QWORD *)this + 1) = operator new[]();
  v137 = this;
  if (*(_QWORD *)this)
  {
    v14 = 0;
    v15 = 5;
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v6, v11, 0, v14, v12, v13);
      v17 = *((_QWORD *)v137 + 1);
      *(double *)(v17 + 8 * (v15 - 5)) = v16 * v16;
      *(double *)(v17 + 8 * (v15 - 4)) = v16 * v18;
      *(double *)(v17 + 8 * (v15 - 3)) = v18 * v18;
      *(double *)(v17 + 8 * (v15 - 2)) = v16;
      *(double *)(v17 + 8 * (v15 - 1)) = v18;
      *(_QWORD *)(v17 + 8 * v15) = 0x3FF0000000000000;
      ++v14;
      v15 += 6;
    }
    while (*(_QWORD *)v137 > v14);
  }
  v19 = v137;
  EllipseRegressor::performRegression(v137);
  if (*((float *)v137 + 24) < 0.0)
  {
    v26 = 0;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    while (v26 < objc_msgSend_strokeCount(v6, v20, v21, v22, v23, v24))
    {
      v35 = 0;
      v28 = v28 + (float)(unint64_t)objc_msgSend_pointCountForStrokeIndex_(v6, v30, v26, v32, v33, v34);
      while (v35 < objc_msgSend_pointCountForStrokeIndex_(v6, v36, v26, v37, v38, v39))
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(v6, v20, v26, v35, v23, v24);
        v27 = v27 + v40;
        v29 = v29 + v41;
        ++v35;
      }
      ++v26;
    }
    v43 = 0;
    v44 = v27 / v28;
    v45 = 0.0;
    v46 = 0.0;
    v47 = 0.0;
    v48 = v29 / v28;
    while (v43 < objc_msgSend_strokeCount(v6, v30, v31, v32, v33, v34))
    {
      for (i = 0; i < objc_msgSend_pointCountForStrokeIndex_(v6, v49, v43, v51, v52, v53); ++i)
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(v6, v30, v43, i, v33, v34);
        *(float *)&v57 = v57 - v44;
        *(float *)&v58 = v58 - v48;
        v47 = v47 + (float)(*(float *)&v57 * *(float *)&v57);
        v46 = v46 + (float)(*(float *)&v58 * *(float *)&v58);
        v45 = v45 + (float)(*(float *)&v57 * *(float *)&v58);
      }
      ++v43;
    }
    *(float *)&v54 = v47 / v28;
    *(float *)&v55 = v46 / v28;
    if ((float)(v47 / v28) <= 5.0 || *(float *)&v55 <= 5.0)
    {
      objc_msgSend_bounds(v6, v49, v50, v51, v52, v53, v54, v55);
      v61 = v60 * 0.5;
      v63 = v62 * 0.5;
      *((double *)v137 + 4) = v25.n128_f64[0] + v61;
      *((double *)v137 + 5) = v64 + v63;
      v25.n128_f32[0] = v61;
      *(float *)&v64 = v63;
      *((_DWORD *)v137 + 18) = v25.n128_u32[0];
      *((_DWORD *)v137 + 19) = LODWORD(v64);
      *((_DWORD *)v137 + 20) = 0;
      goto LABEL_88;
    }
    *((double *)v137 + 4) = v44;
    *((double *)v137 + 5) = v48;
    v65 = atan2((float)((float)(v45 / v28) / *(float *)&v54), 1.0);
    v71 = __sincosf_stret(v65);
    v72 = v65 * 57.2957795;
    *((float *)v137 + 20) = v72;
    v73 = v44 + v71.__cosval - v44;
    v74 = v48 + v71.__sinval - v48;
    v75 = (float)(v74 * v74) + (float)(v73 * v73);
    v76 = sqrtf(v75);
    if (v75 > 0.0)
    {
      v73 = v73 / v75;
      v74 = v74 / v75;
    }
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v142 = 0;
    v143 = 0;
    v80 = v73;
    v140 = 0;
    v141 = 0;
    v81 = v74;
    v82 = v76;
    v138 = v6;
LABEL_30:
    if (v79 < objc_msgSend_strokeCount(v6, v66, *(_QWORD *)&v67, *(_QWORD *)&v68, *(_QWORD *)&v69, *(_QWORD *)&v70))
    {
      v87 = 0;
      v139 = v79;
      while (1)
      {
        if (v87 >= objc_msgSend_pointCountForStrokeIndex_(v6, v83, v79, v84, v85, v86))
        {
          ++v79;
          goto LABEL_30;
        }
        objc_msgSend_pointForStrokeIndex_pointIndex_(v6, v66, v79, v87, *(_QWORD *)&v69, *(_QWORD *)&v70);
        v90 = v89 - v44;
        v92 = v91 - v48;
        *(float *)&v89 = ((v91 - v48) * v81 + (v89 - v44) * v80) * v82;
        v93 = fabsf(*(float *)&v89);
        v94 = v143;
        if (v143 < v78)
        {
          *v143 = v93;
          v95 = (uint64_t)(v143 + 1);
          goto LABEL_57;
        }
        v96 = v142;
        v97 = v143 - v142;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 62)
          sub_1BE61F930();
        if (((char *)v78 - (char *)v142) >> 1 > v98)
          v98 = ((char *)v78 - (char *)v142) >> 1;
        v99 = (unint64_t)((char *)v78 - (char *)v142) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v98;
        if (v99)
          break;
        v100 = 0;
        v101 = (float *)(4 * v97);
        *(float *)(4 * v97) = v93;
        v95 = 4 * v97 + 4;
        v102 = (char *)v143 - (char *)v142;
        if (v143 != v142)
          goto LABEL_48;
LABEL_54:
        v78 = (float *)&v100[4 * v99];
        v142 = v101;
        if (v96)
          operator delete(v96);
        v79 = v139;
LABEL_57:
        v143 = (float *)v95;
        v112 = (v90 * v81 - v92 * v80) * v82;
        v113 = fabsf(v112);
        v114 = v141;
        if (v141 < v77)
        {
          *v141 = v113;
          v88 = (uint64_t)(v141 + 1);
          goto LABEL_33;
        }
        v115 = v78;
        v116 = v140;
        v117 = v141 - v140;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 62)
          sub_1BE61F930();
        if (((char *)v77 - (char *)v140) >> 1 > v118)
          v118 = ((char *)v77 - (char *)v140) >> 1;
        if ((unint64_t)((char *)v77 - (char *)v140) >= 0x7FFFFFFFFFFFFFFCLL)
          v119 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119)
        {
          if (v119 >> 62)
            sub_1BE61F100();
          v120 = operator new(4 * v119);
          v121 = (float *)&v120[4 * v117];
          *v121 = v113;
          v88 = (uint64_t)(v121 + 1);
          v122 = (char *)v141 - (char *)v140;
          if (v141 == v140)
          {
LABEL_70:
            v79 = v139;
            goto LABEL_76;
          }
        }
        else
        {
          v120 = 0;
          v121 = (float *)(4 * v117);
          *(float *)(4 * v117) = v113;
          v88 = 4 * v117 + 4;
          v122 = (char *)v141 - (char *)v140;
          if (v141 == v140)
            goto LABEL_70;
        }
        v123 = v122 - 4;
        if (v123 >= 0x2C)
        {
          v79 = v139;
          if ((unint64_t)((char *)v140 - v120) >= 0x20)
          {
            v124 = (v123 >> 2) + 1;
            v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
            v126 = &v141[v125 / 0xFFFFFFFFFFFFFFFCLL];
            v121 = (float *)((char *)v121 - v125);
            v127 = &v120[4 * v117 - 16];
            v128 = v141 - 4;
            v129 = v124 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v130 = *(_OWORD *)v128;
              *(v127 - 1) = *((_OWORD *)v128 - 1);
              *v127 = v130;
              v127 -= 2;
              v128 -= 8;
              v129 -= 8;
            }
            while (v129);
            v114 = v126;
            if (v124 == (v124 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_76;
          }
        }
        else
        {
          v79 = v139;
        }
        do
        {
          v131 = *((_DWORD *)v114-- - 1);
          *((_DWORD *)v121-- - 1) = v131;
        }
        while (v114 != v140);
LABEL_76:
        v77 = (float *)&v120[4 * v119];
        v140 = v121;
        if (v116)
          operator delete(v116);
        v78 = v115;
        v6 = v138;
LABEL_33:
        v141 = (float *)v88;
        ++v87;
      }
      if (v99 >> 62)
        sub_1BE61F100();
      v100 = operator new(4 * v99);
      v101 = (float *)&v100[4 * v97];
      *v101 = v93;
      v95 = (uint64_t)(v101 + 1);
      v102 = (char *)v143 - (char *)v142;
      if (v143 == v142)
        goto LABEL_54;
LABEL_48:
      v103 = v102 - 4;
      if (v103 < 0x2C)
        goto LABEL_96;
      if ((unint64_t)((char *)v142 - v100) < 0x20)
        goto LABEL_96;
      v104 = (v103 >> 2) + 1;
      v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
      v106 = &v143[v105 / 0xFFFFFFFFFFFFFFFCLL];
      v101 = (float *)((char *)v101 - v105);
      v107 = &v100[4 * v97 - 16];
      v108 = v143 - 4;
      v109 = v104 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v110 = *(_OWORD *)v108;
        *(v107 - 1) = *((_OWORD *)v108 - 1);
        *v107 = v110;
        v107 -= 2;
        v108 -= 8;
        v109 -= 8;
      }
      while (v109);
      v94 = v106;
      if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_96:
        do
        {
          v111 = *((_DWORD *)v94-- - 1);
          *((_DWORD *)v101-- - 1) = v111;
        }
        while (v94 != v142);
      }
      goto LABEL_54;
    }
    std::__sort<std::__less<float,float> &,float *>();
    std::__sort<std::__less<float,float> &,float *>();
    *((_QWORD *)v137 + 9) = 0;
    v132 = ((char *)v143 - (char *)v142) / 5uLL;
    v133 = v143 - v142 - 1;
    if (v133 <= v132)
    {
      *((int32x2_t *)v137 + 9) = vdup_n_s32(0x7FC00000u);
      if (!v140)
      {
LABEL_85:
        if (v142)
          operator delete(v142);
        v19 = v137;
LABEL_88:
        *((_DWORD *)v19 + 24) = 1110027796;
        v25.n128_u64[0] = (unint64_t)vdup_n_s32(0x4229AE14u);
        *((_QWORD *)v19 + 11) = v25.n128_u64[0];
        v42 = *((_QWORD *)v19 + 1);
        if (!v42)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else
    {
      v134 = 0.0;
      v135 = 0.0;
      v136 = 0.0;
      do
      {
        v135 = v135 + v142[v133];
        *((float *)v137 + 18) = v135;
        v134 = v134 + v140[v133];
        *((float *)v137 + 19) = v134;
        v136 = v136 + 1.0;
        --v133;
      }
      while (v133 > v132);
      *((float *)v137 + 18) = v135 / v136;
      *((float *)v137 + 19) = v134 / v136;
    }
    operator delete(v140);
    goto LABEL_85;
  }
  v25.n128_u32[0] = *((_DWORD *)v137 + 19);
  v42 = *((_QWORD *)v137 + 1);
  if (v42)
LABEL_12:
    MEMORY[0x1C3B812C8](v42, 0x1000C8000313F17, v25);
LABEL_13:
  *((_QWORD *)v19 + 1) = 0;

}

void sub_1BE7F1D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t EllipseRegressor::performRegression(EllipseRegressor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  double v27;
  unsigned int v28;
  BOOL v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  double v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v45;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;

  v2 = operator new[]();
  v3 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  cblas_dgemm_NEWLAPACK();
  v4 = operator new[]();
  v5 = operator new[]();
  dgetrf_NEWLAPACK();
  dgetri_NEWLAPACK();
  MEMORY[0x1C3B812C8](v4, 0x1000C8052888210);
  v6 = *(double *)v2;
  v7 = -*(double *)(v2 + 8);
  *(double *)v3 = *(double *)(v2 + 16) + *(double *)(v2 + 16);
  *(double *)(v3 + 8) = v7;
  *(double *)(v3 + 16) = v6 + v6;
  v8 = *(double *)(v2 + 48);
  v9 = -*(double *)(v2 + 56);
  *(double *)(v3 + 48) = *(double *)(v2 + 64) + *(double *)(v2 + 64);
  *(double *)(v3 + 56) = v9;
  *(double *)(v3 + 64) = v8 + v8;
  v10 = *(double *)(v2 + 96);
  v11 = -*(double *)(v2 + 104);
  *(double *)(v3 + 96) = *(double *)(v2 + 112) + *(double *)(v2 + 112);
  *(double *)(v3 + 104) = v11;
  *(double *)(v3 + 112) = v10 + v10;
  v12 = *(double *)(v2 + 144);
  v13 = -*(double *)(v2 + 152);
  *(double *)(v3 + 144) = *(double *)(v2 + 160) + *(double *)(v2 + 160);
  *(double *)(v3 + 152) = v13;
  *(double *)(v3 + 160) = v12 + v12;
  v14 = *(double *)(v2 + 192);
  v15 = -*(double *)(v2 + 200);
  *(double *)(v3 + 192) = *(double *)(v2 + 208) + *(double *)(v2 + 208);
  *(double *)(v3 + 200) = v15;
  *(double *)(v3 + 208) = v14 + v14;
  v16 = *(double *)(v2 + 240);
  v17 = -*(double *)(v2 + 248);
  *(double *)(v3 + 240) = *(double *)(v2 + 256) + *(double *)(v2 + 256);
  *(double *)(v3 + 248) = v17;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(double *)(v3 + 256) = v16 + v16;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  v18 = (double *)operator new[]();
  v19 = operator new[]();
  v20 = operator new[]();
  v21 = operator new[]();
  dgeev_NEWLAPACK();
  MEMORY[0x1C3B812C8](v5, 0x1000C8000313F17);
  v22 = fabs(*v18);
  v23 = fabs(v18[1]);
  v24 = v22 + v22 + v23;
  v25 = v23 <= v22;
  if (v23 > v22)
    v22 = v23;
  v26 = fabs(v18[2]);
  v27 = v24 + v26;
  if (v25)
    v28 = 0;
  else
    v28 = 6;
  v29 = v26 <= v22;
  if (v26 > v22)
    v22 = v26;
  v30 = fabs(v18[3]);
  v31 = v27 + v30;
  if (!v29)
    v28 = 12;
  v32 = v30 <= v22;
  if (v30 > v22)
    v22 = v30;
  v33 = fabs(v18[4]);
  v34 = v31 + v33;
  if (!v32)
    v28 = 18;
  v35 = v33 <= v22;
  if (v33 > v22)
    v22 = v33;
  v36 = fabs(v18[5]);
  v37 = v34 + v36;
  if (!v35)
    v28 = 24;
  v38 = v36 <= v22;
  if (v36 > v22)
    v22 = v36;
  v39 = v22 / v37;
  if (!v38)
    v28 = 30;
  v40 = *(double *)(v20 + 8 * v28);
  v41 = *(double *)(v20 + 8 * (v28 | 1));
  v42 = v41 * 0.5;
  *((float *)this + 12) = v40;
  *((float *)this + 13) = v41 * 0.5;
  v43 = *(double *)(v20 + 8 * (v28 + 2));
  *((float *)this + 14) = v43;
  _D3 = vmul_f32(vcvt_f32_f64(*(float64x2_t *)(v20 + 8 * (v28 + 3))), (float32x2_t)0x3F0000003F000000);
  v45 = *(double *)(v20 + 8 * (v28 + 5));
  *(float32x2_t *)((char *)this + 60) = _D3;
  *(float *)&v45 = v45;
  *((_DWORD *)this + 17) = LODWORD(v45);
  _S6 = (float)(v42 + v42) * _D3.f32[0];
  __asm { FMLA            S7, S6, V3.S[1] }
  _S6 = vmuls_lane_f32(v40, _D3, 1);
  __asm { FMLA            S16, S6, V3.S[1] }
  v54 = _S7 - (float)(_S16 + (float)((float)((float)(v41 * 0.5) * *(float *)&v45) * (float)(v41 * 0.5)));
  *((float *)this + 21) = v39;
  *((float *)this + 22) = v54;
  v55 = -(float)(v41 * 0.5);
  v56 = (float)(v40 * v43) - (float)(v42 * v42);
  *((float *)this + 23) = v40 + v43;
  *((float *)this + 24) = v56;
  *((double *)this + 4) = (float)((float)-(float)(vmuls_lane_f32(v55, _D3, 1) + (float)(v43 * _D3.f32[0])) / v56);
  *((double *)this + 5) = (float)((float)-(float)((float)(v55 * _D3.f32[0]) + (float)(v40 * _D3.f32[1])) / v56);
  v57 = atanf((float)(v42 + v42) / (float)(v40 - v43)) * 28.6478898;
  *((float *)this + 20) = v57;
  v58 = (float)(v42 * v42) - (float)(v40 * v43);
  v59 = sqrtf((float)((float)(v42 * (float)(v42 * 4.0)) / (float)((float)(v40 - v43) * (float)(v40 - v43))) + 1.0);
  *((float *)this + 18) = sqrtf((float)(v54 * -2.0)/ (float)(v58 * (float)-(float)((float)(v40 + v43) - (float)((float)(v43 - v40) * v59))));
  *((float *)this + 19) = sqrtf((float)(v54 * -2.0)/ (float)(v58 * (float)-(float)((float)(v40 + v43) - (float)((float)(v40 - v43) * v59))));
  MEMORY[0x1C3B812C8](v20, 0x1000C8000313F17);
  MEMORY[0x1C3B812C8](v21, 0x1000C8000313F17);
  MEMORY[0x1C3B812C8](v18, 0x1000C8000313F17);
  MEMORY[0x1C3B812C8](v19, 0x1000C8000313F17);
  MEMORY[0x1C3B812C8](v2, 0x1000C8000313F17);
  return MEMORY[0x1C3B812C8](v3, 0x1000C8000313F17);
}

float EllipseRegressor::ePolarCoord(EllipseRegressor *this, CGPoint a2)
{
  CGFloat v3;
  float v4;
  CGFloat v5;
  double v6;
  __float2 v7;
  float v8;

  v3 = a2.x - *((double *)this + 4);
  v4 = *((float *)this + 20) * 0.0174532925;
  v5 = a2.y - *((double *)this + 5);
  v6 = *((float *)this + 18);
  v7 = __sincosf_stret(v4);
  v8 = atan2((v7.__cosval * v5 - v3 * v7.__sinval) * v6, (v3 * v7.__cosval + v7.__sinval * v5) * *((float *)this + 19));
  return -v8;
}

double EllipseRegressor::pointFromAngle(EllipseRegressor *this, float a2)
{
  float v4;
  double v5;
  __float2 v6;
  float v7;
  __float2 v8;

  v4 = *((float *)this + 20) * 0.0174532925;
  v5 = *((double *)this + 4);
  v6 = __sincosf_stret(v4);
  v7 = *((float *)this + 18) * v6.__cosval;
  v8 = __sincosf_stret(a2);
  return v5 + (float)(v8.__cosval * v7) + (float)(v8.__sinval * (float)(*((float *)this + 19) * v6.__sinval));
}

int32x2_t EllipseRegressor::fitToCircle(CGFloat *this, CGPoint a2, CGPoint a3, CGPoint a4)
{
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  float v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  float v14;
  float v15;
  float v16;
  int32x2_t result;

  v4 = a3.y - a4.y;
  v5 = a4.y - a2.y;
  v6 = a2.y - a3.y;
  v7 = a3.x * (a4.y - a2.y) + a2.x * (a3.y - a4.y) + a4.x * (a2.y - a3.y);
  v8 = v7 + v7;
  if (v8 == 0.0)
    v8 = 0.01;
  v9 = a2.y * a2.y + a2.x * a2.x;
  v10 = a3.y * a3.y + a3.x * a3.x;
  v11 = a4.y * a4.y + a4.x * a4.x;
  v12 = (v10 * v5 + v9 * v4 + v11 * v6) / v8;
  v13 = (v10 * (a2.x - a4.x) + v9 * (a4.x - a3.x) + v11 * (a3.x - a2.x)) / v8;
  this[4] = v12;
  this[5] = v13;
  v14 = a2.x - v12;
  v15 = a2.y - v13;
  v16 = sqrtf((float)(v15 * v15) + (float)(v14 * v14));
  *((float *)this + 18) = v16;
  *((float *)this + 19) = v16;
  result = vdup_n_s32(0x42280000u);
  this[11] = *(CGFloat *)&result;
  *((_DWORD *)this + 24) = 1109917696;
  *((_DWORD *)this + 20) = 0;
  return result;
}

uint64_t EllipseRegressor::confidenceLevelVersusBezierLine(void **this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __float2 v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __float2 v35;
  float v36;
  double v37;
  float v38;
  double v40;
  float v41;

  objc_msgSend_pointForStrokeIndex_pointIndex_(this[3], a2, 0, 0, a5, a6);
  v7 = *((float *)this + 20) * 0.0174532925;
  v9 = v8 - *((double *)this + 4);
  v11 = v10 - *((double *)this + 5);
  v12 = *((float *)this + 18);
  v13 = __sincosf_stret(v7);
  v19 = atan2((v13.__cosval * v11 - v9 * v13.__sinval) * v12, (v9 * v13.__cosval + v13.__sinval * v11) * *((float *)this + 19));
  v20 = -v19;
  v21 = 0.0;
  if ((unint64_t)*this >= 2)
  {
    v22 = 0.0;
    v23 = 1;
    v40 = -6.28318531;
    v41 = 0.0;
    v24 = v20;
    v25 = v20;
    do
    {
      v28 = v20;
      objc_msgSend_pointForStrokeIndex_pointIndex_(this[3], v14, 0, v23, v17, v18, *(_QWORD *)&v40);
      v29 = *((float *)this + 20) * 0.0174532925;
      v31 = v30 - *((double *)this + 4);
      v33 = v32 - *((double *)this + 5);
      v34 = *((float *)this + 18);
      v35 = __sincosf_stret(v29);
      v36 = atan2((v35.__cosval * v33 - v31 * v35.__sinval) * v34, (v31 * v35.__cosval + v35.__sinval * v33) * *((float *)this + 19));
      v20 = -v36;
      v37 = v28;
      if (v28 <= 2.5 || v36 <= 2.5)
      {
        if (v28 >= -2.5 || v36 >= -2.5)
        {
          v26 = v41;
          if (v28 >= v20)
            v26 = v41 + (float)(v28 + v36);
          else
            v21 = v21 + (float)(v20 - v28);
          v41 = v26;
        }
        else
        {
          v22 = v22 + v40;
          v38 = v37 + 6.28318531 + v36 + v41;
          v41 = v38;
        }
      }
      else
      {
        v22 = v22 + 6.28318531;
        v21 = v20 + 6.28318531 - v37;
      }
      v27 = v22 - v36;
      if (v27 < v25)
        v25 = v27;
      if (v24 < v27)
        v24 = v27;
      ++v23;
    }
    while ((unint64_t)*this > v23);
  }
  objc_msgSend_bounds(this[3], v14, v15, v16, v17, v18);
  return cblas_sdot_NEWLAPACK();
}

unint64_t delaunator::Delaunator::add_triangle(delaunator::Delaunator *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  char *v10;
  void **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;

  v12 = (char *)*((_QWORD *)this + 1);
  v10 = (char *)*((_QWORD *)this + 2);
  v11 = (void **)((char *)this + 8);
  v13 = (char *)*((_QWORD *)this + 3);
  v14 = v10;
  v15 = (v10 - v12) >> 3;
  if (v10 < v13)
  {
    *(_QWORD *)v10 = a2;
    v16 = v10 + 8;
    goto LABEL_22;
  }
  v17 = v15 + 1;
  if ((v15 + 1) >> 61)
    goto LABEL_71;
  v18 = v13 - v12;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 61)
      goto LABEL_72;
    v20 = operator new(8 * v19);
    v21 = &v20[8 * v15];
    v13 = &v20[8 * v19];
    *v21 = a2;
    v16 = (char *)(v21 + 1);
    v22 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (_QWORD *)(8 * v15);
  v13 = 0;
  *(_QWORD *)(8 * v15) = a2;
  v16 = (char *)(8 * v15 + 8);
  v22 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v23 = v22 - 8;
    if (v23 < 0x58)
      goto LABEL_75;
    if ((unint64_t)(v10 - &v20[(v10 - v12) & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_75;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v14 = &v10[-v25];
    v21 = (_QWORD *)((char *)v21 - v25);
    v26 = &v20[8 * v15 - 16];
    v27 = (__int128 *)(v10 - 16);
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_75:
      do
      {
        v30 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v21 = v30;
      }
      while (v14 != v12);
    }
  }
LABEL_20:
  *((_QWORD *)this + 1) = v21;
  *((_QWORD *)this + 2) = v16;
  *((_QWORD *)this + 3) = v13;
  if (v12)
  {
    operator delete(v12);
    v13 = (char *)*((_QWORD *)this + 3);
  }
LABEL_22:
  *((_QWORD *)this + 2) = v16;
  if (v16 < v13)
  {
    *(_QWORD *)v16 = a3;
    v31 = v16 + 8;
    goto LABEL_45;
  }
  v32 = (char *)*v11;
  v33 = v16 - (_BYTE *)*v11;
  v34 = v33 >> 3;
  v35 = (v33 >> 3) + 1;
  if (v35 >> 61)
    goto LABEL_71;
  v36 = v13 - v32;
  if (v36 >> 2 > v35)
    v35 = v36 >> 2;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
    v37 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
  {
    if (v37 >> 61)
      goto LABEL_72;
    v38 = operator new(8 * v37);
    v39 = &v38[8 * v34];
    v13 = &v38[8 * v37];
    *v39 = a3;
    v31 = (char *)(v39 + 1);
    v40 = v16 - v32;
    if (v16 == v32)
      goto LABEL_43;
  }
  else
  {
    v38 = 0;
    v39 = (_QWORD *)(8 * v34);
    v13 = 0;
    *(_QWORD *)(8 * v34) = a3;
    v31 = (char *)(8 * v34 + 8);
    v40 = v16 - v32;
    if (v16 == v32)
      goto LABEL_43;
  }
  v41 = v40 - 8;
  if (v41 < 0x58)
  {
    v42 = v16;
    goto LABEL_42;
  }
  if ((unint64_t)(v16 - &v38[v33]) < 0x20)
  {
    v42 = v16;
    do
    {
LABEL_42:
      v49 = *((_QWORD *)v42 - 1);
      v42 -= 8;
      *--v39 = v49;
    }
    while (v42 != v32);
    goto LABEL_43;
  }
  v43 = (v41 >> 3) + 1;
  v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
  v42 = &v16[-v44];
  v39 = (_QWORD *)((char *)v39 - v44);
  v45 = &v38[8 * v34 - 16];
  v46 = v16 - 16;
  v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = *(_OWORD *)v46;
    *(v45 - 1) = *((_OWORD *)v46 - 1);
    *v45 = v48;
    v45 -= 2;
    v46 -= 32;
    v47 -= 4;
  }
  while (v47);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_42;
LABEL_43:
  *((_QWORD *)this + 1) = v39;
  *((_QWORD *)this + 2) = v31;
  *((_QWORD *)this + 3) = v13;
  if (v32)
  {
    operator delete(v32);
    v13 = (char *)*((_QWORD *)this + 3);
  }
LABEL_45:
  *((_QWORD *)this + 2) = v31;
  if (v31 >= v13)
  {
    v54 = (char *)*v11;
    v55 = v31 - (_BYTE *)*v11;
    v56 = v55 >> 3;
    v57 = (v55 >> 3) + 1;
    if (!(v57 >> 61))
    {
      v58 = v13 - v54;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (!v59)
      {
        v60 = 0;
LABEL_57:
        v61 = &v60[8 * v56];
        v62 = &v60[8 * v59];
        *v61 = a4;
        v51 = v61 + 1;
        if (v31 == v54)
        {
          v53 = a6;
          v52 = a7;
          v50 = a5;
          *((_QWORD *)this + 1) = v61;
          *((_QWORD *)this + 2) = v51;
          *((_QWORD *)this + 3) = v62;
          if (!v54)
            goto LABEL_64;
          goto LABEL_63;
        }
        v63 = v31 - v54 - 8;
        if (v63 >= 0x58 && (unint64_t)(v31 - &v60[v55]) >= 0x20)
        {
          v67 = (v63 >> 3) + 1;
          v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          v64 = &v31[-v68];
          v61 = (_QWORD *)((char *)v61 - v68);
          v69 = &v60[8 * v56 - 16];
          v70 = v31 - 16;
          v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v72 = *(_OWORD *)v70;
            *(v69 - 1) = *((_OWORD *)v70 - 1);
            *v69 = v72;
            v69 -= 2;
            v70 -= 32;
            v71 -= 4;
          }
          while (v71);
          v53 = a6;
          v52 = a7;
          v50 = a5;
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_62:
            *((_QWORD *)this + 1) = v61;
            *((_QWORD *)this + 2) = v51;
            *((_QWORD *)this + 3) = v62;
            if (!v54)
              goto LABEL_64;
LABEL_63:
            operator delete(v54);
            goto LABEL_64;
          }
        }
        else
        {
          v64 = v31;
          v53 = a6;
          v52 = a7;
          v50 = a5;
        }
        do
        {
          v65 = *((_QWORD *)v64 - 1);
          v64 -= 8;
          *--v61 = v65;
        }
        while (v64 != v54);
        goto LABEL_62;
      }
      if (!(v59 >> 61))
      {
        v60 = operator new(8 * v59);
        goto LABEL_57;
      }
LABEL_72:
      sub_1BE61F100();
    }
LABEL_71:
    sub_1BE61F930();
  }
  v50 = a5;
  *(_QWORD *)v31 = a4;
  v51 = v31 + 8;
  v53 = a6;
  v52 = a7;
LABEL_64:
  *((_QWORD *)this + 2) = v51;
  delaunator::Delaunator::link(this, v15, v50);
  delaunator::Delaunator::link(this, v15 + 1, v53);
  delaunator::Delaunator::link(this, v15 + 2, v52);
  return v15;
}

unint64_t delaunator::Delaunator::legalize(uint64_t **this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t *v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;

  v4 = 0;
  v53 = this + 23;
  this[24] = this[23];
  while (1)
  {
    v5 = 3 * (a2 / 3);
    v6 = v5 + (a2 + 2) % 3;
    v54 = v6;
    v55 = v5 + (a2 + 1) % 3;
    v7 = this[4];
    v8 = v7[a2];
    if (v8 != -1)
    {
      while (1)
      {
        while (1)
        {
          v9 = 3 * (v8 / 3);
          v10 = v9 + (v8 + 2) % 3;
          v11 = this[1];
          v12 = v11[v6];
          v13 = v11[v10];
          v14 = **this;
          v15 = (double *)(v14 + 16 * v12);
          v16 = (double *)(v14 + 16 * v11[a2]);
          v17 = *v16;
          v18 = v16[1];
          v19 = (double *)(v14 + 16 * v11[v55]);
          v20 = (double *)(v14 + 16 * v13);
          v21 = v20[1];
          v22 = *v15 - *v20;
          v23 = v17 - *v20;
          v24 = v18 - v21;
          v25 = *v19 - *v20;
          v26 = v19[1] - v21;
          if (v22 * (v24 * (v26 * v26 + v25 * v25) - (v24 * v24 + v23 * v23) * v26)
             - (v15[1] - v21) * (v23 * (v26 * v26 + v25 * v25) - (v24 * v24 + v23 * v23) * v25)
             + ((v15[1] - v21) * (v15[1] - v21) + v22 * v22) * (v23 * v26 - v24 * v25) >= 0.0)
            goto LABEL_36;
          v11[a2] = v13;
          v11[v8] = v12;
          v27 = v7[v10];
          if (v27 == -1)
          {
            v28 = this[13];
            v29 = this[16];
            while (v28[(_QWORD)v29] != v10)
            {
              v29 = (uint64_t *)this[7][(_QWORD)v29];
              if (v29 == this[16])
                goto LABEL_12;
            }
            v28[(_QWORD)v29] = a2;
LABEL_12:
            v27 = -1;
          }
          delaunator::Delaunator::link((delaunator::Delaunator *)this, a2, v27);
          delaunator::Delaunator::link((delaunator::Delaunator *)this, v8, this[4][v6]);
          delaunator::Delaunator::link((delaunator::Delaunator *)this, v6, v9 + (v8 + 2) % 3);
          v30 = v9 + (v8 + 1) % 3;
          v31 = (char *)this[23];
          v32 = (char *)this[24];
          v33 = (v32 - v31) >> 3;
          if (v4 >= v33)
            break;
          *(_QWORD *)&v31[8 * v4++] = v30;
          v7 = this[4];
          v8 = v7[a2];
          if (v8 == -1)
            goto LABEL_36;
        }
        v34 = (unint64_t)this[25];
        if ((unint64_t)v32 >= v34)
          break;
        *(_QWORD *)v32 = v30;
        v35 = (uint64_t)(v32 + 8);
LABEL_35:
        this[24] = (uint64_t *)v35;
        ++v4;
        v7 = this[4];
        v8 = v7[a2];
        if (v8 == -1)
          goto LABEL_36;
      }
      v36 = v33 + 1;
      if ((v33 + 1) >> 61)
        sub_1BE61F930();
      v37 = v34 - (_QWORD)v31;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      if (v36)
      {
        if (v36 >> 61)
          sub_1BE61F100();
        v38 = v36;
        v39 = operator new(8 * v36);
        v40 = (unint64_t *)&v39[8 * v33];
        *v40 = v30;
        v35 = (uint64_t)(v40 + 1);
        v41 = v32 - v31;
        if (v32 != v31)
        {
LABEL_24:
          v42 = v41 - 8;
          v43 = v38;
          if (v42 >= 0x58)
          {
            v6 = v54;
            if ((unint64_t)(v31 - v39) >= 0x20)
            {
              v44 = (v42 >> 3) + 1;
              v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v32[-v45];
              v40 = (unint64_t *)((char *)v40 - v45);
              v47 = &v39[8 * v33 - 16];
              v48 = v32 - 16;
              v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v50 = *(_OWORD *)v48;
                *(v47 - 1) = *((_OWORD *)v48 - 1);
                *v47 = v50;
                v47 -= 2;
                v48 -= 32;
                v49 -= 4;
              }
              while (v49);
              v32 = v46;
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_33:
                this[23] = (uint64_t *)v40;
                this[24] = (uint64_t *)v35;
                this[25] = (uint64_t *)&v39[8 * v43];
                if (v31)
                  operator delete(v31);
                goto LABEL_35;
              }
            }
          }
          else
          {
            v6 = v54;
          }
          do
          {
            v51 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *--v40 = v51;
          }
          while (v32 != v31);
          goto LABEL_33;
        }
      }
      else
      {
        v38 = 0;
        v39 = 0;
        v40 = (unint64_t *)(8 * v33);
        *(_QWORD *)(8 * v33) = v30;
        v35 = 8 * v33 + 8;
        v41 = v32 - v31;
        if (v32 != v31)
          goto LABEL_24;
      }
      v43 = v38;
      v6 = v54;
      goto LABEL_33;
    }
LABEL_36:
    if (!v4)
      return v6;
    --v4;
    a2 = *(_QWORD *)(*v53 + 8 * v4);
  }
}

double delaunator::Delaunator::get_hull_area(uint64_t **this)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  double *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  double *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = this[16];
  v6 = v5;
  do
  {
    while (1)
    {
      v7 = **this;
      v8 = (double *)(v7 + 16 * (_QWORD)v6);
      v9 = (double *)(v7 + 16 * this[7][(_QWORD)v6]);
      v10 = (*v8 - *v9) * (v8[1] + v9[1]);
      if (v2 >= v4)
        break;
      *v2++ = v10;
      v6 = (uint64_t *)this[10][(_QWORD)v6];
      if (v6 == v5)
        goto LABEL_32;
    }
    v11 = v2 - v3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_1BE61F930();
    if (((char *)v4 - (char *)v3) >> 2 > v12)
      v12 = ((char *)v4 - (char *)v3) >> 2;
    if ((unint64_t)((char *)v4 - (char *)v3) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        sub_1BE61F100();
      v14 = operator new(8 * v13);
      v15 = (double *)&v14[8 * v11];
      *v15 = v10;
      v16 = (uint64_t)(v15 + 1);
      v17 = (char *)v2 - (char *)v3;
      if (v2 == v3)
        goto LABEL_18;
    }
    else
    {
      v14 = 0;
      v15 = (double *)(8 * v11);
      *(double *)(8 * v11) = v10;
      v16 = 8 * v11 + 8;
      v17 = (char *)v2 - (char *)v3;
      if (v2 == v3)
        goto LABEL_18;
    }
    v18 = v17 - 8;
    if (v18 < 0x168)
    {
      v19 = v2;
      goto LABEL_17;
    }
    v21 = ((char *)(v2 - 1) - (char *)v3) & 0xFFFFFFFFFFFFFFF8;
    if (&v14[(char *)v2 - (char *)v3 - 8 - v21] > &v14[(char *)v2 - (char *)v3 - 8])
    {
      v19 = v2;
      do
      {
LABEL_17:
        v20 = *((_QWORD *)v19-- - 1);
        *((_QWORD *)v15-- - 1) = v20;
      }
      while (v19 != v3);
      goto LABEL_18;
    }
    if ((double *)((char *)v2 - v21 - 8) > v2 - 1)
    {
      v19 = v2;
      goto LABEL_17;
    }
    if ((unint64_t)((char *)v3 - v14) < 0x20)
    {
      v19 = v2;
      goto LABEL_17;
    }
    v22 = (v18 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v2[v23 / 0xFFFFFFFFFFFFFFF8];
    v15 = (double *)((char *)v15 - v23);
    v24 = &v14[8 * v11 - 16];
    v25 = v2 - 2;
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_17;
LABEL_18:
    v4 = (double *)&v14[8 * v13];
    if (v3)
    {
      operator delete(v3);
      v5 = this[16];
    }
    v3 = v15;
    v2 = (double *)v16;
    v6 = (uint64_t *)this[10][(_QWORD)v6];
  }
  while (v6 != v5);
LABEL_32:
  v28 = (char *)v2 - (char *)v3;
  if (v2 == v3)
  {
    v39 = 0.0;
    if (v3)
      goto LABEL_45;
  }
  else
  {
    v29 = *v3;
    v30 = 0.0;
    if ((unint64_t)v28 < 9)
    {
      v35 = *v3;
    }
    else
    {
      v31 = v28 >> 3;
      if (v31 <= 2)
        v31 = 2;
      v32 = v31 - 1;
      v33 = v3 + 1;
      do
      {
        v34 = *v33++;
        v35 = v29 + v34;
        v36 = fabs(v29);
        v37 = v34 + v29 - (v29 + v34);
        v38 = v29 + v34 - (v29 + v34);
        if (v36 >= fabs(v34))
          v38 = v37;
        v30 = v30 + v38;
        v29 = v35;
        --v32;
      }
      while (v32);
    }
    v39 = v35 + v30;
LABEL_45:
    operator delete(v3);
  }
  return v39;
}

void sub_1BE7F33B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void delaunator::Delaunator::link(delaunator::Delaunator *this, unint64_t a2, unint64_t a3)
{
  void **v6;
  char *v7;
  unint64_t *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  void *exception;

  v7 = (char *)*((_QWORD *)this + 4);
  v8 = (unint64_t *)*((_QWORD *)this + 5);
  v6 = (void **)((char *)this + 32);
  v9 = (char *)v8;
  v10 = ((char *)v8 - v7) >> 3;
  if (v10 == a2)
  {
    v11 = *((_QWORD *)this + 6);
    if ((unint64_t)v8 < v11)
    {
      *v8 = a3;
      v12 = (uint64_t)(v8 + 1);
      goto LABEL_27;
    }
    v13 = a2 + 1;
    if ((a2 + 1) >> 61)
      goto LABEL_52;
    v14 = v11 - (_QWORD)v7;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        goto LABEL_53;
      v16 = (char *)operator new(8 * v15);
      v17 = (unint64_t *)&v16[8 * a2];
      v18 = &v16[8 * v15];
      *v17 = a3;
      v12 = (uint64_t)(v17 + 1);
      v19 = (char *)v8 - v7;
      if (v8 == (unint64_t *)v7)
        goto LABEL_25;
    }
    else
    {
      v16 = 0;
      v17 = (unint64_t *)(8 * a2);
      v18 = 0;
      *(_QWORD *)(8 * a2) = a3;
      v12 = 8 * a2 + 8;
      v19 = (char *)v8 - v7;
      if (v8 == (unint64_t *)v7)
      {
LABEL_25:
        *((_QWORD *)this + 4) = v17;
        *((_QWORD *)this + 5) = v12;
        *((_QWORD *)this + 6) = v18;
        if (v7)
          operator delete(v7);
LABEL_27:
        *((_QWORD *)this + 5) = v12;
        v9 = (char *)v12;
        if (a3 == -1)
          return;
        goto LABEL_28;
      }
    }
    v20 = v19 - 8;
    if (v20 < 0x58)
      goto LABEL_56;
    v21 = &v16[8 * a2];
    if ((unint64_t)((char *)v8 - v21) < 0x20)
      goto LABEL_56;
    v22 = (v20 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = (char *)&v8[v23 / 0xFFFFFFFFFFFFFFF8];
    v17 = (unint64_t *)((char *)v17 - v23);
    v24 = v21 - 16;
    v25 = v8 - 2;
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)v24 = v27;
      v24 -= 32;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v28 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v17 = v28;
      }
      while (v9 != v7);
    }
    goto LABEL_25;
  }
  if (v10 <= a2)
    goto LABEL_5;
  *(_QWORD *)&v7[8 * a2] = a3;
  if (a3 == -1)
    return;
LABEL_28:
  v29 = (char *)*v6;
  v30 = (v9 - (_BYTE *)*v6) >> 3;
  if (v30 != a3)
  {
    if (v30 > a3)
    {
      *(_QWORD *)&v29[8 * a3] = a2;
      return;
    }
LABEL_5:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3B81130](exception, "Cannot link edge");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v31 = *((_QWORD *)this + 6);
  if ((unint64_t)v9 < v31)
  {
    *(_QWORD *)v9 = a2;
    *((_QWORD *)this + 5) = v9 + 8;
    return;
  }
  v32 = 0x1FFFFFFFFFFFFFFFLL;
  if (a3 >= 0x1FFFFFFFFFFFFFFFLL)
LABEL_52:
    sub_1BE61F930();
  v33 = v31 - (_QWORD)v29;
  if (v33 >> 2 <= a3 + 1)
    v34 = a3 + 1;
  else
    v34 = v33 >> 2;
  if ((unint64_t)v33 < 0x7FFFFFFFFFFFFFF8)
    v32 = v34;
  if (v32 >> 61)
LABEL_53:
    sub_1BE61F100();
  v35 = 8 * v32;
  v36 = operator new(8 * v32);
  v37 = (unint64_t *)&v36[8 * a3];
  v38 = &v36[v35];
  *v37 = a2;
  v39 = v37 + 1;
  if (v9 == v29)
    goto LABEL_49;
  v40 = v9 - v29 - 8;
  if (v40 < 0x58)
  {
    v41 = v9;
    goto LABEL_48;
  }
  if ((unint64_t)(&v9[-8 * a3] - v36) < 0x20)
  {
    v41 = v9;
    do
    {
LABEL_48:
      v48 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *--v37 = v48;
    }
    while (v41 != v29);
    goto LABEL_49;
  }
  v42 = (v40 >> 3) + 1;
  v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
  v41 = &v9[-v43];
  v37 = (unint64_t *)((char *)v37 - v43);
  v44 = &v36[8 * a3 - 16];
  v45 = v9 - 16;
  v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v47 = *(_OWORD *)v45;
    *(v44 - 1) = *((_OWORD *)v45 - 1);
    *v44 = v47;
    v44 -= 2;
    v45 -= 32;
    v46 -= 4;
  }
  while (v46);
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  *((_QWORD *)this + 4) = v37;
  *((_QWORD *)this + 5) = v39;
  *((_QWORD *)this + 6) = v38;
  if (v29)
    operator delete(v29);
  *((_QWORD *)this + 5) = v39;
}

void sub_1BE7F3734(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F3748(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F375C(double ***a1@<X0>, _QWORD *a2@<X8>)
{
  double **v2;
  double **v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double **v9;
  double **v10;
  double *v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  BOOL v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double **v29;
  unint64_t v30;
  double **v31;
  unint64_t v32;
  double *v33;
  double **v34;
  _OWORD *v35;
  double *v36;
  double **v37;
  double **v39;
  double *v40;
  uint64_t v41;

  v40 = 0;
  v41 = 0;
  v39 = &v40;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2;
      v6 = v2[1];
      while (v5 != v6)
      {
        v7 = *v5;
        v8 = v5[1];
        v9 = &v40;
        v10 = &v40;
        if (v40)
        {
          v11 = v40;
          while (1)
          {
            v10 = (double **)v11;
            v12 = v11[4];
            if (v7 < v12)
              goto LABEL_13;
            if (v12 < v7)
            {
LABEL_18:
              v11 = (double *)*((_QWORD *)v11 + 1);
              if (!v11)
              {
                v9 = v10 + 1;
                break;
              }
            }
            else
            {
              v13 = v11[5];
              if (v8 >= v13)
              {
                if (v13 >= v8)
                  goto LABEL_9;
                goto LABEL_18;
              }
LABEL_13:
              v11 = *(double **)v11;
              v9 = v10;
              if (!*v10)
                break;
            }
          }
        }
        v14 = (double *)operator new(0x30uLL);
        v14[4] = v7;
        v14[5] = v8;
        *v14 = 0.0;
        v14[1] = 0.0;
        *((_QWORD *)v14 + 2) = v10;
        *v9 = v14;
        if (*v39)
        {
          v39 = (double **)*v39;
          v14 = *v9;
        }
        v15 = v40;
        v16 = v14 == v40;
        *((_BYTE *)v14 + 24) = v14 == v40;
        if (!v16)
        {
          do
          {
            v17 = *((_QWORD *)v14 + 2);
            if (*(_BYTE *)(v17 + 24))
              break;
            v18 = *(double **)(v17 + 16);
            v19 = *(_QWORD *)v18;
            if (*(_QWORD *)v18 == v17)
            {
              v22 = *((_QWORD *)v18 + 1);
              if (!v22 || (v23 = *(unsigned __int8 *)(v22 + 24), v20 = (_BYTE *)(v22 + 24), v23))
              {
                if (*(double **)v17 == v14)
                {
                  *(_BYTE *)(v17 + 24) = 1;
                  *((_BYTE *)v18 + 24) = 0;
                  v26 = *(_QWORD *)(v17 + 8);
                  *(_QWORD *)v18 = v26;
                  if (v26)
                    goto LABEL_37;
                }
                else
                {
                  v24 = *(uint64_t **)(v17 + 8);
                  v25 = *v24;
                  *(_QWORD *)(v17 + 8) = *v24;
                  if (v25)
                  {
                    *(_QWORD *)(v25 + 16) = v17;
                    v18 = *(double **)(v17 + 16);
                  }
                  v24[2] = (uint64_t)v18;
                  *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * (**(_QWORD **)(v17 + 16) != v17)) = v24;
                  *v24 = v17;
                  *(_QWORD *)(v17 + 16) = v24;
                  v18 = (double *)v24[2];
                  v17 = *(_QWORD *)v18;
                  *((_BYTE *)v24 + 24) = 1;
                  *((_BYTE *)v18 + 24) = 0;
                  v26 = *(_QWORD *)(v17 + 8);
                  *(_QWORD *)v18 = v26;
                  if (v26)
LABEL_37:
                    *(_QWORD *)(v26 + 16) = v18;
                }
                *(double *)(v17 + 16) = v18[2];
                *(_QWORD *)(*((_QWORD *)v18 + 2) + 8 * (**((_QWORD **)v18 + 2) != (_QWORD)v18)) = v17;
                *(_QWORD *)(v17 + 8) = v18;
LABEL_7:
                *((_QWORD *)v18 + 2) = v17;
                break;
              }
            }
            else if (!v19 || (v21 = *(unsigned __int8 *)(v19 + 24), v20 = (_BYTE *)(v19 + 24), v21))
            {
              if (*(double **)v17 == v14)
              {
                v28 = *((_QWORD *)v14 + 1);
                *(_QWORD *)v17 = v28;
                if (v28)
                {
                  *(_QWORD *)(v28 + 16) = v17;
                  v18 = *(double **)(v17 + 16);
                }
                *((_QWORD *)v14 + 2) = v18;
                *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * (**(_QWORD **)(v17 + 16) != v17)) = v14;
                *((_QWORD *)v14 + 1) = v17;
                *(_QWORD *)(v17 + 16) = v14;
                v18 = (double *)*((_QWORD *)v14 + 2);
                *((_BYTE *)v14 + 24) = 1;
                *((_BYTE *)v18 + 24) = 0;
                v17 = *((_QWORD *)v18 + 1);
                v27 = *(double **)v17;
                v18[1] = *(double *)v17;
                if (!v27)
                  goto LABEL_6;
              }
              else
              {
                *(_BYTE *)(v17 + 24) = 1;
                *((_BYTE *)v18 + 24) = 0;
                v17 = *((_QWORD *)v18 + 1);
                v27 = *(double **)v17;
                v18[1] = *(double *)v17;
                if (!v27)
                  goto LABEL_6;
              }
              *((_QWORD *)v27 + 2) = v18;
LABEL_6:
              *(double *)(v17 + 16) = v18[2];
              *(_QWORD *)(*((_QWORD *)v18 + 2) + 8 * (**((_QWORD **)v18 + 2) != (_QWORD)v18)) = v17;
              *(_QWORD *)v17 = v18;
              goto LABEL_7;
            }
            *(_BYTE *)(v17 + 24) = 1;
            v14 = v18;
            *((_BYTE *)v18 + 24) = v18 == v15;
            *v20 = 1;
          }
          while (v18 != v15);
        }
        v41 = ++v4;
LABEL_9:
        v5 += 2;
      }
      v2 += 3;
    }
    while (v2 != v3);
    v29 = v39;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v39 != &v40)
    {
      v30 = 0;
      v31 = v39;
      do
      {
        v32 = v30;
        v33 = v31[1];
        if (v33)
        {
          do
          {
            v34 = (double **)v33;
            v33 = *(double **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (double **)v31[2];
            v16 = *v34 == (double *)v31;
            v31 = v34;
          }
          while (!v16);
        }
        ++v30;
        v31 = v34;
      }
      while (v34 != &v40);
      if (v32 >= 0xFFFFFFFFFFFFFFFLL)
        sub_1BE61F930();
      v35 = operator new(16 * v30);
      *a2 = v35;
      a2[1] = v35;
      a2[2] = &v35[v30];
      do
      {
        *v35 = *((_OWORD *)v29 + 2);
        v36 = v29[1];
        if (v36)
        {
          do
          {
            v37 = (double **)v36;
            v36 = *(double **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (double **)v29[2];
            v16 = *v37 == (double *)v29;
            v29 = v37;
          }
          while (!v16);
        }
        ++v35;
        v29 = v37;
      }
      while (v37 != &v40);
      a2[1] = v35;
    }
  }
  sub_1BE671438(v40);
}

void sub_1BE7F3B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  void **v13;
  void *v14;

  v14 = *v13;
  if (*v13)
  {
    *(_QWORD *)(a11 + 8) = v14;
    operator delete(v14);
  }
  sub_1BE671438(a13);
  _Unwind_Resume(a1);
}

void sub_1BE7F3B64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1BE671438(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::getPointSet(unint64_t *a1@<X0>, double **a2@<X8>)
{
  unint64_t v4;
  double *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  double v9;
  int v10;
  double v11;
  unint64_t v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  double *v21;
  double v22;
  unint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*a1)
  {
    v4 = a1[1];
    if (v4)
    {
      v5 = 0;
      v6 = 0;
LABEL_4:
      v7 = 0;
      v8 = 0;
      v9 = (double)(int)v6;
      v10 = -1;
      do
      {
        if (*(_BYTE *)(a1[2] + v6 + *a1 * v7))
        {
          v10 = v7;
          if ((v8 & ((-1227133513 * v7) > 0x24924924)) != 0)
          {
            v8 = 1;
          }
          else
          {
            v11 = (double)(int)v7;
            v12 = (unint64_t)a2[2];
            if ((unint64_t)v5 >= v12)
            {
              v14 = *a2;
              v15 = ((char *)v5 - (char *)*a2) >> 4;
              v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 60)
                sub_1BE61F930();
              v17 = v12 - (_QWORD)v14;
              if (v17 >> 3 > v16)
                v16 = v17 >> 3;
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
                v18 = 0xFFFFFFFFFFFFFFFLL;
              else
                v18 = v16;
              if (v18)
              {
                if (v18 >> 60)
                  sub_1BE61F100();
                v19 = (char *)operator new(16 * v18);
              }
              else
              {
                v19 = 0;
              }
              v20 = (double *)&v19[16 * v15];
              *v20 = v9;
              v20[1] = v11;
              v21 = v20;
              if (v5 != v14)
              {
                do
                {
                  *((_OWORD *)v21 - 1) = *((_OWORD *)v5 - 1);
                  v21 -= 2;
                  v5 -= 2;
                }
                while (v5 != v14);
                v5 = *a2;
              }
              v13 = v20 + 2;
              *a2 = v21;
              a2[1] = v20 + 2;
              a2[2] = (double *)&v19[16 * v18];
              if (v5)
                operator delete(v5);
            }
            else
            {
              *v5 = v9;
              v5[1] = v11;
              v13 = v5 + 2;
            }
            a2[1] = v13;
            v4 = a1[1];
            v8 = 1;
            v5 = v13;
          }
        }
        ++v7;
      }
      while (v4 > v7);
      if (v10 != -1 && v10 % 7)
      {
        v22 = (double)v10;
        v23 = (unint64_t)a2[2];
        if ((unint64_t)v5 < v23)
        {
          *v5 = v9;
          v5[1] = v22;
          v24 = v5 + 2;
LABEL_42:
          a2[1] = v24;
          v5 = v24;
          goto LABEL_43;
        }
        v25 = *a2;
        v26 = ((char *)v5 - (char *)*a2) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          sub_1BE61F930();
        v28 = v23 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 >> 60)
            sub_1BE61F100();
          v30 = (char *)operator new(16 * v29);
          v31 = (double *)&v30[16 * v26];
          *v31 = v9;
          v31[1] = v22;
          v32 = (uint64_t)v31;
          if (v5 == v25)
          {
LABEL_40:
            v24 = v31 + 2;
            *a2 = (double *)v32;
            a2[1] = v31 + 2;
            a2[2] = (double *)&v30[16 * v29];
            if (!v5)
              goto LABEL_42;
LABEL_41:
            operator delete(v5);
            goto LABEL_42;
          }
        }
        else
        {
          v30 = 0;
          v31 = (double *)(16 * v26);
          *v31 = v9;
          v31[1] = v22;
          v32 = 16 * v26;
          if (v5 == v25)
            goto LABEL_40;
        }
        do
        {
          *(_OWORD *)(v32 - 16) = *((_OWORD *)v5 - 1);
          v32 -= 16;
          v5 -= 2;
        }
        while (v5 != v25);
        v5 = *a2;
        v24 = v31 + 2;
        *a2 = (double *)v32;
        a2[1] = v31 + 2;
        a2[2] = (double *)&v30[16 * v29];
        if (!v5)
          goto LABEL_42;
        goto LABEL_41;
      }
LABEL_43:
      while (1)
      {
        v6 += 7;
        if (*a1 <= v6)
          break;
        v4 = a1[1];
        if (v4)
          goto LABEL_4;
      }
    }
  }
}

void sub_1BE7F3E84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::getPointSet(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __n128 (*v28)(__n128 *, __n128 *);
  void (*v29)(uint64_t);
  void *v30;
  void *__p;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = &v25;
  v27 = 0x4812000000;
  v28 = sub_1BE7F412C;
  v29 = sub_1BE7F4150;
  v30 = &unk_1BE94989A;
  __p = 0;
  v32 = 0;
  v33 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v2 = a1;
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v21, (uint64_t)v34, 16, v4);
  if (v5)
  {
    v6 = *(_QWORD *)v22;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v2);
        v9 = *(id *)(*((_QWORD *)&v21 + 1) + 8 * i);
        v20[0] = v7;
        v20[1] = 3221225472;
        v20[2] = sub_1BE7F4168;
        v20[3] = &unk_1E77F2B80;
        v20[4] = &v25;
        objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(CHStrokeUtilities, v10, (uint64_t)v9, 0, 1, (uint64_t)v20);

      }
      v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v11, (uint64_t)&v21, (uint64_t)v34, 16, v12);
    }
    while (v5);
  }

  v13 = v26;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v15 = (_BYTE *)v13[6];
  v14 = (_BYTE *)v13[7];
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_1BE61F930();
    v17 = (char *)operator new(v14 - v15);
    *a2 = v17;
    v18 = &v17[16 * (v16 >> 4)];
    a2[2] = v18;
    memcpy(v17, v15, v16);
    a2[1] = v18;
  }
  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }

}

void sub_1BE7F40B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;

  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE7F412C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE7F4150(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE7F4168(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void CoreHandwriting::getPointSetFromStrings(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  _BYTE *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  void *i;
  const char *v11;
  uint64_t v12;
  double v13;
  double v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  double *v22;
  void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__p;
  double *v33;
  double *v34;
  float *v35;
  float *v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v33 = 0;
  v34 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v3 = a1;
  v6 = (_BYTE *)objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v28, (uint64_t)v37, 16, v5);
  if (v6)
  {
    v27 = a2;
    v7 = 0;
    v8 = *(_QWORD *)v29;
    v9 = (double *)MEMORY[0x1E0C9D538];
    while (1)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v8)
          objc_enumerationMutation(v3);
        parseFloatsFromString(*(NSString **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i), (char **)&v35);
        if ((char *)v36 - (char *)v35 == 8)
        {
          v13 = *v35;
          v14 = v35[1];
        }
        else
        {
          v13 = *v9;
          v14 = v9[1];
          if (!v35)
            goto LABEL_12;
        }
        v36 = v35;
        operator delete(v35);
LABEL_12:
        if (v7 < v34)
        {
          *v7 = v13;
          v7[1] = v14;
          v7 += 2;
          goto LABEL_5;
        }
        v15 = (double *)__p;
        v16 = ((char *)v7 - (_BYTE *)__p) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          sub_1BE61F930();
        v18 = (char *)v34 - (_BYTE *)__p;
        if (((char *)v34 - (_BYTE *)__p) >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 60)
            sub_1BE61F100();
          v20 = (char *)operator new(16 * v19);
          v21 = (double *)&v20[16 * v16];
          *v21 = v13;
          v21[1] = v14;
          if (v7 == v15)
          {
LABEL_27:
            v23 = v7;
            v7 = v21 + 2;
            __p = v21;
            v33 = v21 + 2;
            v34 = (double *)&v20[16 * v19];
            if (!v23)
              goto LABEL_5;
LABEL_28:
            operator delete(v23);
            goto LABEL_5;
          }
        }
        else
        {
          v20 = 0;
          v21 = (double *)(16 * v16);
          *v21 = v13;
          v21[1] = v14;
          if (v7 == v15)
            goto LABEL_27;
        }
        v22 = v21;
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v7 - 1);
          v22 -= 2;
          v7 -= 2;
        }
        while (v7 != v15);
        v23 = __p;
        v7 = v21 + 2;
        __p = v22;
        v33 = v21 + 2;
        v34 = (double *)&v20[16 * v19];
        if (v23)
          goto LABEL_28;
LABEL_5:
        v33 = v7;
      }
      v6 = (_BYTE *)objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v11, (uint64_t)&v28, (uint64_t)v37, 16, v12);
      if (!v6)
      {
        v6 = __p;
        a2 = v27;
        goto LABEL_32;
      }
    }
  }
  v7 = 0;
LABEL_32:

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v24 = (char *)v7 - v6;
  if (v24)
  {
    if (v24 < 0)
      sub_1BE61F930();
    v25 = (char *)operator new(v24);
    *a2 = v25;
    v26 = &v25[16 * (v24 >> 4)];
    a2[2] = v26;
    memcpy(v25, v6, v24);
    a2[1] = v26;
  }
  if (v6)
    operator delete(v6);

}

void sub_1BE7F4544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE7F459C(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>, long double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>)
{
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _OWORD *v28;
  unint64_t v29;
  _OWORD *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  double v41;
  double v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  double v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  long double v60;
  double *v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  double v79;
  double v81;
  id v83;
  double *v84;
  double *v85;
  double *v86;
  double *v87;
  double *v88;

  v17 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v81 = a9;
  v18 = a7;
  v19 = a7 - a9;
  v20 = a10;
  v21 = a8;
  v79 = sqrt((a8 - a10) * (a8 - a10) + v19 * v19);
  v27 = cos(a4);
  v28 = 0;
  v29 = 0;
  v83 = v17;
  while (v29 < objc_msgSend_count(v17, v22, v23, v24, v25, v26))
  {
    objc_msgSend_objectAtIndexedSubscript_(v17, v31, v29, v32, v33, v34);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = *a2 + 24 * v29;
    v87 = 0;
    v88 = 0;
    v86 = 0;
    v45 = *(_BYTE **)v43;
    v44 = *(_BYTE **)(v43 + 8);
    v46 = v44 - v45;
    if (v44 == v45)
    {
      v47 = 0;
      v50 = -1.79769313e308;
      v51 = 1.79769313e308;
    }
    else
    {
      if (v46 < 0)
        sub_1BE61F930();
      v47 = (double *)operator new(v44 - v45);
      v48 = 16 * (v46 >> 4);
      v86 = v47;
      v88 = &v47[(unint64_t)v48 / 8];
      memcpy(v47, v45, v46);
      v49 = 0;
      v87 = &v47[(unint64_t)v48 / 8];
      v50 = -1.79769313e308;
      v51 = 1.79769313e308;
      v41 = -1.79769313e308;
      v42 = 1.79769313e308;
      do
      {
        v52 = v47[v49 / 8];
        if (v42 > v52)
        {
          v51 = v47[v49 / 8];
          v42 = v51;
        }
        if (v41 < v52)
        {
          v50 = v47[v49 / 8];
          v41 = v50;
        }
        v49 += 16;
      }
      while (v48 != v49);
    }
    objc_msgSend_bounds(v40, v35, v36, v37, v38, v39, v41, v42);
    if (v58 <= a5)
    {
      objc_msgSend_bounds(v40, v53, v54, v55, v56, v57);
      if (v59 <= a6)
      {
        v30 = v28;
        if (!v47)
          goto LABEL_4;
LABEL_3:
        v87 = v47;
        operator delete(v47);
        goto LABEL_4;
      }
    }
    v60 = tan(a4);
    sub_1BE7F4A5C(&v86, (uint64_t *)&v84, -v60, v18, v21, v81, v20);
    v61 = v84;
    if (v85 == v84)
    {
      v61 = v85;
    }
    else
    {
      v62 = 1.79769313e308;
      v63 = -1.79769313e308;
      v64 = v84;
      do
      {
        v65 = *v64;
        v64 += 2;
        v66 = v65;
        if (v62 > v65)
          v62 = v66;
        if (v63 < v66)
          v63 = v66;
      }
      while (v64 != v85);
      v67 = (v63 - v62) / v27;
      if (v67 > 0.0 && (v67 / v79 >= 0.5 || v67 / ((v50 - v51) / v27) >= 0.8))
      {
        v68 = 0;
        while (1)
        {
          v69 = (char *)&v61[2 * v68];
          v70 = a3[2];
          if ((unint64_t)v28 < v70)
          {
            *v28 = *(_OWORD *)v69;
            v30 = v28 + 1;
          }
          else
          {
            v71 = (_OWORD *)*a3;
            v72 = ((uint64_t)v28 - *a3) >> 4;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 60)
              sub_1BE61F930();
            v74 = v70 - (_QWORD)v71;
            if (v74 >> 3 > v73)
              v73 = v74 >> 3;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
              v75 = 0xFFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              if (v75 >> 60)
                sub_1BE61F100();
              v76 = (char *)operator new(16 * v75);
              v77 = &v76[16 * v72];
              *(_OWORD *)v77 = *(_OWORD *)v69;
              v78 = (uint64_t)v77;
              if (v28 != v71)
              {
                do
                {
LABEL_43:
                  *(_OWORD *)(v78 - 16) = *(v28 - 1);
                  v78 -= 16;
                  --v28;
                }
                while (v28 != v71);
                v28 = (_OWORD *)*a3;
                v30 = v77 + 16;
                *a3 = v78;
                a3[1] = (uint64_t)(v77 + 16);
                a3[2] = (uint64_t)&v76[16 * v75];
                if (!v28)
                  goto LABEL_30;
LABEL_47:
                operator delete(v28);
                goto LABEL_30;
              }
            }
            else
            {
              v76 = 0;
              v77 = (char *)(16 * v72);
              *(_OWORD *)(16 * v72) = *(_OWORD *)v69;
              v78 = 16 * v72;
              if (v28 != v71)
                goto LABEL_43;
            }
            v30 = v77 + 16;
            *a3 = v78;
            a3[1] = (uint64_t)(v77 + 16);
            a3[2] = (uint64_t)&v76[16 * v75];
            if (v28)
              goto LABEL_47;
          }
LABEL_30:
          a3[1] = (uint64_t)v30;
          ++v68;
          v61 = v84;
          v28 = v30;
          if (v68 >= ((char *)v85 - (char *)v84) >> 4)
            goto LABEL_50;
        }
      }
    }
    v30 = v28;
LABEL_50:
    if (v61)
    {
      v85 = v61;
      operator delete(v61);
    }
    v47 = v86;
    if (v86)
      goto LABEL_3;
LABEL_4:

    ++v29;
    v28 = v30;
    v17 = v83;
  }

}

void sub_1BE7F49A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  void *v21;
  void *v22;
  void *v24;

  if (v22)
    operator delete(v22);

  v24 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1BE7F4A5C(double **a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  double *v10;
  double *v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  _OWORD *v29;
  _OWORD *v30;
  double v31;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _OWORD *v42;
  double v43;
  unint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a3 != 0.0)
  {
    v24 = *a1;
    v25 = a1[1];
    if (*a1 == v25)
      return;
    v26 = -1.0 / a3;
    v27 = a5 - -1.0 / a3 * a4;
    v28 = a7 - -1.0 / a3 * a6;
    v29 = 0;
    if (-1.0 / a3 <= 0.0)
    {
      while (1)
      {
        v43 = v24[1];
        if (v43 < v27 + *v24 * v26 || v43 > v28 + *v24 * v26)
          goto LABEL_55;
        v45 = a2[2];
        if ((unint64_t)v29 >= v45)
          break;
        *v29 = *(_OWORD *)v24;
        v42 = v29 + 1;
LABEL_54:
        a2[1] = (uint64_t)v42;
        v29 = v42;
LABEL_55:
        v24 += 2;
        if (v24 == v25)
          return;
      }
      v46 = (_OWORD *)*a2;
      v47 = ((uint64_t)v29 - *a2) >> 4;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 60)
        goto LABEL_79;
      v49 = v45 - (_QWORD)v46;
      if (v49 >> 3 > v48)
        v48 = v49 >> 3;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
        v50 = 0xFFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 >> 60)
          goto LABEL_80;
        v51 = (char *)operator new(16 * v50);
        v52 = &v51[16 * v47];
        *(_OWORD *)v52 = *(_OWORD *)v24;
        v53 = (uint64_t)v52;
        if (v29 == v46)
        {
LABEL_70:
          v42 = v52 + 16;
          *a2 = v53;
          a2[1] = (uint64_t)(v52 + 16);
          a2[2] = (uint64_t)&v51[16 * v50];
          if (!v29)
            goto LABEL_54;
          goto LABEL_75;
        }
      }
      else
      {
        v51 = 0;
        v52 = (char *)(16 * v47);
        *(_OWORD *)(16 * v47) = *(_OWORD *)v24;
        v53 = 16 * v47;
        if (v29 == v46)
          goto LABEL_70;
      }
      do
      {
        *(_OWORD *)(v53 - 16) = *(v29 - 1);
        v53 -= 16;
        --v29;
      }
      while (v29 != v46);
      v29 = (_OWORD *)*a2;
      v42 = v52 + 16;
      *a2 = v53;
      a2[1] = (uint64_t)(v52 + 16);
      a2[2] = (uint64_t)&v51[16 * v50];
      if (!v29)
        goto LABEL_54;
LABEL_75:
      operator delete(v29);
      goto LABEL_54;
    }
    while (1)
    {
      v31 = v24[1];
      if (v31 > v27 + *v24 * v26 || v31 < v28 + *v24 * v26)
        goto LABEL_32;
      v33 = a2[2];
      if ((unint64_t)v29 >= v33)
        break;
      *v29 = *(_OWORD *)v24;
      v30 = v29 + 1;
LABEL_31:
      a2[1] = (uint64_t)v30;
      v29 = v30;
LABEL_32:
      v24 += 2;
      if (v24 == v25)
        return;
    }
    v34 = (_OWORD *)*a2;
    v35 = ((uint64_t)v29 - *a2) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
LABEL_79:
      sub_1BE61F930();
    v37 = v33 - (_QWORD)v34;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      if (v38 >> 60)
LABEL_80:
        sub_1BE61F100();
      v39 = (char *)operator new(16 * v38);
      v40 = &v39[16 * v35];
      *(_OWORD *)v40 = *(_OWORD *)v24;
      v41 = (uint64_t)v40;
      if (v29 == v34)
      {
LABEL_47:
        v30 = v40 + 16;
        *a2 = v41;
        a2[1] = (uint64_t)(v40 + 16);
        a2[2] = (uint64_t)&v39[16 * v38];
        if (!v29)
          goto LABEL_31;
        goto LABEL_52;
      }
    }
    else
    {
      v39 = 0;
      v40 = (char *)(16 * v35);
      *(_OWORD *)(16 * v35) = *(_OWORD *)v24;
      v41 = 16 * v35;
      if (v29 == v34)
        goto LABEL_47;
    }
    do
    {
      *(_OWORD *)(v41 - 16) = *(v29 - 1);
      v41 -= 16;
      --v29;
    }
    while (v29 != v34);
    v29 = (_OWORD *)*a2;
    v30 = v40 + 16;
    *a2 = v41;
    a2[1] = (uint64_t)(v40 + 16);
    a2[2] = (uint64_t)&v39[16 * v38];
    if (!v29)
      goto LABEL_31;
LABEL_52:
    operator delete(v29);
    goto LABEL_31;
  }
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    v12 = 0;
    while (1)
    {
      if (*v10 < a4 || *v10 > a6)
        goto LABEL_6;
      v15 = a2[2];
      if ((unint64_t)v12 >= v15)
        break;
      *v12 = *(_OWORD *)v10;
      v13 = v12 + 1;
LABEL_5:
      a2[1] = (uint64_t)v13;
      v12 = v13;
LABEL_6:
      v10 += 2;
      if (v10 == v11)
        return;
    }
    v16 = (_OWORD *)*a2;
    v17 = ((uint64_t)v12 - *a2) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_1BE61F930();
    v19 = v15 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_1BE61F100();
      v21 = (char *)operator new(16 * v20);
      v22 = &v21[16 * v17];
      *(_OWORD *)v22 = *(_OWORD *)v10;
      v23 = (uint64_t)v22;
      if (v12 == v16)
      {
LABEL_21:
        v13 = v22 + 16;
        *a2 = v23;
        a2[1] = (uint64_t)(v22 + 16);
        a2[2] = (uint64_t)&v21[16 * v20];
        if (!v12)
          goto LABEL_5;
        goto LABEL_26;
      }
    }
    else
    {
      v21 = 0;
      v22 = (char *)(16 * v17);
      *(_OWORD *)(16 * v17) = *(_OWORD *)v10;
      v23 = 16 * v17;
      if (v12 == v16)
        goto LABEL_21;
    }
    do
    {
      *(_OWORD *)(v23 - 16) = *(v12 - 1);
      v23 -= 16;
      --v12;
    }
    while (v12 != v16);
    v12 = (_OWORD *)*a2;
    v13 = v22 + 16;
    *a2 = v23;
    a2[1] = (uint64_t)(v22 + 16);
    a2[2] = (uint64_t)&v21[16 * v20];
    if (!v12)
      goto LABEL_5;
LABEL_26:
    operator delete(v12);
    goto LABEL_5;
  }
}

void sub_1BE7F4E6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::deformImagePointsAndLines(CoreHandwriting *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, uint64_t a5@<X8>)
{
  uint64_t v8;
  const void *v9;
  int64_t v11;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  double v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  uint64_t v31;
  const void *v32;
  int64_t v33;
  char *v34;
  char *v35;
  double *v36;
  double *v37;
  double *v38;
  double *v39;
  char *v40;
  char *v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  double *v53;
  double *v54;
  void *v55;
  char *v56;
  double *v57;
  double *v58;
  double *v59;
  double *v60;
  void *v61;
  char *v62;
  void *v63;
  char *v64;
  void *v65;
  char *v66;
  void *v67;
  char *v68;
  void *__p;
  char *v70;
  char *v71;
  uint8_t buf[8];
  char *v73;
  void *v74;
  char *v75;
  void *v76;
  char *v77;
  void *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;

  v9 = *(const void **)this;
  v8 = *((_QWORD *)this + 1);
  if (v8 == *(_QWORD *)this || *((_QWORD *)this + 7) == *((_QWORD *)this + 6))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v30 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_ERROR, "Can't deform empty points and principal lines.", buf, 2u);
    }

    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v32 = *(const void **)this;
    v31 = *((_QWORD *)this + 1);
    v33 = v31 - *(_QWORD *)this;
    if (v31 != *(_QWORD *)this)
    {
      if (v33 < 0)
        sub_1BE61F930();
      v34 = (char *)operator new(v31 - *(_QWORD *)this);
      *(_QWORD *)a5 = v34;
      *(_QWORD *)(a5 + 8) = v34;
      v35 = &v34[16 * (v33 >> 4)];
      *(_QWORD *)(a5 + 16) = v35;
      memcpy(v34, v32, v33);
      *(_QWORD *)(a5 + 8) = v35;
    }
    sub_1BE76136C((_QWORD *)(a5 + 24), (uint64_t)this + 24);
  }
  else
  {
    *(_QWORD *)(a5 + 112) = 0;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v11 = v8 - (_QWORD)v9;
    if (v8 - (uint64_t)v9 < 0)
      sub_1BE61F930();
    v14 = (char *)operator new(v8 - (_QWORD)v9);
    v15 = &v14[16 * (v11 >> 4)];
    v80 = v14;
    v82 = v15;
    memcpy(v14, v9, v11);
    v81 = v15;
    sub_1BE76136C(buf, (uint64_t)this + 24);
    if (a2 != 1.0)
    {
      __p = 0;
      v70 = 0;
      v71 = 0;
      v16 = v80;
      v17 = v81;
      if (v80 != v81)
      {
        v18 = 0;
        while (1)
        {
          v20 = *(_QWORD *)v16;
          v21 = *((double *)v16 + 1) * a2;
          if (v18 < v71)
          {
            *(_QWORD *)v18 = v20;
            *((double *)v18 + 1) = v21;
            v19 = v18 + 16;
          }
          else
          {
            v22 = (char *)__p;
            v23 = (v18 - (_BYTE *)__p) >> 4;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 60)
              sub_1BE61F930();
            v25 = v71 - (_BYTE *)__p;
            if ((v71 - (_BYTE *)__p) >> 3 > v24)
              v24 = v25 >> 3;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
              v26 = 0xFFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              if (v26 >> 60)
                sub_1BE61F100();
              v27 = (char *)operator new(16 * v26);
              v28 = (uint64_t)&v27[16 * v23];
              *(_QWORD *)v28 = v20;
              *(double *)(v28 + 8) = v21;
              v29 = (char *)v28;
              if (v18 != v22)
              {
                do
                {
LABEL_21:
                  *((_OWORD *)v29 - 1) = *((_OWORD *)v18 - 1);
                  v29 -= 16;
                  v18 -= 16;
                }
                while (v18 != v22);
                v18 = (char *)__p;
                v19 = (char *)(v28 + 16);
                __p = v29;
                v70 = (char *)(v28 + 16);
                v71 = &v27[16 * v26];
                if (!v18)
                  goto LABEL_8;
LABEL_25:
                operator delete(v18);
                goto LABEL_8;
              }
            }
            else
            {
              v27 = 0;
              v28 = 16 * v23;
              *(_QWORD *)v28 = v20;
              *(double *)(v28 + 8) = v21;
              v29 = (char *)(16 * v23);
              if (v18 != v22)
                goto LABEL_21;
            }
            v19 = (char *)(v28 + 16);
            __p = v29;
            v70 = (char *)(v28 + 16);
            v71 = &v27[16 * v26];
            if (v18)
              goto LABEL_25;
          }
LABEL_8:
          v70 = v19;
          v16 += 16;
          v18 = v19;
          if (v16 == v17)
            goto LABEL_35;
        }
      }
      v19 = 0;
LABEL_35:
      sub_1BE76136C(&v61, (uint64_t)buf);
      v36 = (double *)v67;
      *((double *)v67 + 1) = *((double *)v67 + 1) * a2;
      v36[3] = v36[3] * a2;
      v37 = (double *)v65;
      *((double *)v65 + 1) = *((double *)v65 + 1) * a2;
      v37[3] = v37[3] * a2;
      v38 = (double *)v63;
      v39 = (double *)v61;
      *((double *)v63 + 1) = *((double *)v63 + 1) * a2;
      v38[3] = v38[3] * a2;
      v39[1] = v39[1] * a2;
      v39[3] = v39[3] * a2;
      sub_1BE6F5A88(&v80, (char *)__p, v19, (v19 - (_BYTE *)__p) >> 4);
      sub_1BE6F5A88(buf, (char *)v61, v62, (v62 - (_BYTE *)v61) >> 4);
      sub_1BE6F5A88(&v74, (char *)v63, v64, (v64 - (_BYTE *)v63) >> 4);
      sub_1BE6F5A88(&v76, (char *)v65, v66, (v66 - (_BYTE *)v65) >> 4);
      sub_1BE6F5A88(&v78, (char *)v67, v68, (v68 - (_BYTE *)v67) >> 4);
      if (v67)
      {
        v68 = (char *)v67;
        operator delete(v67);
      }
      if (v65)
      {
        v66 = (char *)v65;
        operator delete(v65);
      }
      if (v63)
      {
        v64 = (char *)v63;
        operator delete(v63);
      }
      if (v61)
      {
        v62 = (char *)v61;
        operator delete(v61);
      }
      if (__p)
        operator delete(__p);
    }
    if (a3 != 0.0 || a4 != 0.0)
    {
      __p = 0;
      v70 = 0;
      v71 = 0;
      sub_1BE76136C(&v61, (uint64_t)buf);
      v40 = v80;
      v41 = v81;
      if (v80 != v81)
      {
        v42 = 0;
        while (1)
        {
          v43 = *((double *)v40 + 1);
          v44 = *((double *)v76 + 1);
          if (v43 >= v44)
          {
            v45 = *((double *)v74 + 1);
            if (v43 > v45)
              v43 = v43 + (v43 - v45) * a4;
          }
          else
          {
            v43 = v43 - (v44 - v43) * a3;
          }
          v46 = *(_QWORD *)v40;
          if (v42 < (double *)v71)
          {
            *(_QWORD *)v42 = v46;
            v42[1] = v43;
            v42 += 2;
          }
          else
          {
            v47 = (double *)__p;
            v48 = ((char *)v42 - (_BYTE *)__p) >> 4;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60)
              sub_1BE61F930();
            v50 = v71 - (_BYTE *)__p;
            if ((v71 - (_BYTE *)__p) >> 3 > v49)
              v49 = v50 >> 3;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              if (v51 >> 60)
                sub_1BE61F100();
              v52 = (char *)operator new(16 * v51);
              v53 = (double *)&v52[16 * v48];
              *(_QWORD *)v53 = v46;
              v53[1] = v43;
              if (v42 != v47)
              {
LABEL_65:
                v54 = v53;
                do
                {
                  *((_OWORD *)v54 - 1) = *((_OWORD *)v42 - 1);
                  v54 -= 2;
                  v42 -= 2;
                }
                while (v42 != v47);
                v55 = __p;
                v42 = v53 + 2;
                __p = v54;
                v70 = (char *)(v53 + 2);
                v71 = &v52[16 * v51];
                if (!v55)
                  goto LABEL_50;
LABEL_71:
                operator delete(v55);
                goto LABEL_50;
              }
            }
            else
            {
              v52 = 0;
              v53 = (double *)(16 * v48);
              *(_QWORD *)v53 = v46;
              v53[1] = v43;
              if (v42 != v47)
                goto LABEL_65;
            }
            v55 = v42;
            v42 = v53 + 2;
            __p = v53;
            v70 = (char *)(v53 + 2);
            v71 = &v52[16 * v51];
            if (v55)
              goto LABEL_71;
          }
LABEL_50:
          v70 = (char *)v42;
          v40 += 16;
          if (v40 == v41)
          {
            v56 = (char *)__p;
            goto LABEL_74;
          }
        }
      }
      v42 = 0;
      v56 = 0;
LABEL_74:
      v57 = (double *)v67;
      v58 = (double *)v65;
      *((double *)v67 + 1) = *((double *)v67 + 1) - (*((double *)v65 + 1) - *((double *)v67 + 1)) * a3;
      v57[3] = v57[3] - (v58[3] - v57[3]) * a3;
      v59 = (double *)v61;
      v60 = (double *)v63;
      *((double *)v61 + 1) = *((double *)v61 + 1) + (*((double *)v61 + 1) - *((double *)v63 + 1)) * a4;
      v59[3] = v59[3] + (v59[3] - v60[3]) * a4;
      sub_1BE6F5A88(&v80, v56, (char *)v42, ((char *)v42 - v56) >> 4);
      sub_1BE6F5A88(buf, (char *)v61, v62, (v62 - (_BYTE *)v61) >> 4);
      sub_1BE6F5A88(&v74, (char *)v63, v64, (v64 - (_BYTE *)v63) >> 4);
      sub_1BE6F5A88(&v76, (char *)v65, v66, (v66 - (_BYTE *)v65) >> 4);
      sub_1BE6F5A88(&v78, (char *)v67, v68, (v68 - (_BYTE *)v67) >> 4);
      if (v67)
      {
        v68 = (char *)v67;
        operator delete(v67);
      }
      if (v65)
      {
        v66 = (char *)v65;
        operator delete(v65);
      }
      if (v63)
      {
        v64 = (char *)v63;
        operator delete(v63);
      }
      if (v61)
      {
        v62 = (char *)v61;
        operator delete(v61);
      }
      if (__p)
        operator delete(__p);
    }
    if (&v80 != (char **)a5)
      sub_1BE6F5A88((_QWORD *)a5, v80, v81, (v81 - v80) >> 4);
    if ((uint8_t *)(a5 + 24) != buf)
    {
      sub_1BE6F5A88((_QWORD *)(a5 + 24), *(char **)buf, v73, (uint64_t)&v73[-*(_QWORD *)buf] >> 4);
      sub_1BE6F5A88((_QWORD *)(a5 + 48), (char *)v74, v75, (v75 - (_BYTE *)v74) >> 4);
      sub_1BE6F5A88((_QWORD *)(a5 + 72), (char *)v76, v77, (v77 - (_BYTE *)v76) >> 4);
      sub_1BE6F5A88((_QWORD *)(a5 + 96), (char *)v78, v79, (v79 - (_BYTE *)v78) >> 4);
    }
    if (v78)
    {
      v79 = (char *)v78;
      operator delete(v78);
    }
    if (v76)
    {
      v77 = (char *)v76;
      operator delete(v76);
    }
    if (v74)
    {
      v75 = (char *)v74;
      operator delete(v74);
    }
    if (*(_QWORD *)buf)
    {
      v73 = *(char **)buf;
      operator delete(*(void **)buf);
    }
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
  }
}

void sub_1BE7F5640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v28;

  sub_1BE6F2154((uint64_t)&a25);
  v28 = *(void **)(v26 - 152);
  if (v28)
  {
    *(_QWORD *)(v26 - 144) = v28;
    operator delete(v28);
  }
  sub_1BE7A79B4(v25);
  _Unwind_Resume(a1);
}

void sub_1BE7F56DC(unint64_t a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;

  v7 = a3 + 1;
  v6 = a3[1];
  if (v6)
  {
    v8 = (uint64_t *)(a3 + 1);
    v9 = a3[1];
    do
    {
      v10 = v9[4];
      if (v10 < a2)
      {
        ++v9;
      }
      else if (v10 <= a2)
      {
        if (v9[5] < a1)
          ++v9;
        else
          v8 = v9;
      }
      else
      {
        v8 = v9;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
    if (v8 == (uint64_t *)v7 || (v11 = v8[4], v11 > a2) || v11 >= a2 && v8[5] > a1)
    {
      v12 = (uint64_t *)operator new(0x30uLL);
      v13 = v12;
      v12[4] = a1;
      v12[5] = a2;
      while (1)
      {
        v14 = v6;
        v15 = v6[4];
        if (v15 > a1)
          goto LABEL_16;
        if (v15 < a1)
        {
LABEL_21:
          v6 = (uint64_t *)v6[1];
          if (!v6)
          {
            v7 = (uint64_t **)(v14 + 1);
            *v12 = 0;
            v12[1] = 0;
            v12[2] = (uint64_t)v14;
            v14[1] = (uint64_t)v12;
            v17 = (uint64_t *)**a3;
            if (v17)
              goto LABEL_25;
            goto LABEL_26;
          }
        }
        else
        {
          v16 = v6[5];
          if (v16 <= a2)
          {
            if (v16 >= a2)
            {
              operator delete(v12);
              return;
            }
            goto LABEL_21;
          }
LABEL_16:
          v6 = (uint64_t *)*v6;
          if (!*v14)
          {
            v7 = (uint64_t **)v14;
            *v12 = 0;
            v12[1] = 0;
            v12[2] = (uint64_t)v14;
            *v14 = (uint64_t)v12;
            v17 = (uint64_t *)**a3;
            if (v17)
              goto LABEL_25;
            goto LABEL_26;
          }
        }
      }
    }
    v18 = (uint64_t *)v8[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (uint64_t *)*v18;
      }
      while (v18);
    }
    else
    {
      v20 = v8;
      do
      {
        v19 = (uint64_t *)v20[2];
        v21 = *v19 == (_QWORD)v20;
        v20 = v19;
      }
      while (!v21);
    }
    if (*a3 == v8)
      *a3 = v19;
    a3[2] = (uint64_t *)((char *)a3[2] - 1);
    sub_1BE670DF8(v6, v8);
    operator delete(v8);
  }
  else
  {
    v13 = (uint64_t *)operator new(0x30uLL);
    v13[4] = a1;
    v13[5] = a2;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v7;
    *v7 = v13;
    v17 = (uint64_t *)**a3;
    if (v17)
    {
LABEL_25:
      *a3 = v17;
      v13 = *v7;
    }
LABEL_26:
    sub_1BE61F5C0(a3[1], v13);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
}

long double CoreHandwriting::angle_deg(CoreHandwriting *this, const CGPoint *a2, const CGPoint *a3)
{
  return atan2(a2->y - *((double *)this + 1), a2->x - *(double *)this) * 57.2957795;
}

long double CoreHandwriting::angle_rad(CoreHandwriting *this, const CGPoint *a2, const CGPoint *a3)
{
  return atan2(a2->y - *((double *)this + 1), a2->x - *(double *)this);
}

double CoreHandwriting::clamp(CoreHandwriting *this, double a2, double a3, double a4)
{
  return fmin(a4, fmax(a2, a3));
}

double sub_1BE7F5930(double **a1, double **a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  BOOL v6;
  double *v7;
  double *v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if ((char *)v3 - (char *)*a1 == (char *)v5 - (char *)*a2)
  {
    v6 = v2 == v3 || v4 == v5;
    v7 = *a2;
    v8 = *a1;
    if (v6)
    {
LABEL_7:
      if (v8 == v3 && v7 == v5)
        return 0.0;
    }
    else
    {
      v8 = *a1;
      v7 = *a2;
      while (*v8 == *v7 && v8[1] == v7[1])
      {
        v8 += 2;
        v7 += 2;
        if (v8 == v3 || v7 == v5)
          goto LABEL_7;
      }
    }
  }
  v11 = *v2;
  v10 = v2[1];
  v12 = (v2[3] - v10) / (v2[2] - *v2);
  v13 = v4[1];
  v14 = (v4[3] - v13) / (v4[2] - *v4);
  v15 = v13 - v14 * *v4;
  v16 = *v2;
  if (v12 != 0.0)
    v16 = (v10 - -1.0 / v12 * v11 - v15) / (v14 - -1.0 / v12);
  return sqrt((v10 - (v15 + v14 * v16)) * (v10 - (v15 + v14 * v16)) + (v11 - v16) * (v11 - v16));
}

double sub_1BE7F5A14(_QWORD *a1, double **a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t v6;
  double v7;
  BOOL v9;
  _BOOL4 v11;
  unint64_t v12;
  double *v13;
  double result;
  unint64_t v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _BOOL4 v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 != *a1)
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = (uint64_t)(*a2 + 2);
    v9 = v5 != *a2 && (char *)v5 - (char *)*a2 == 32;
    v11 = v4 + 4 != v5 || v6 == (_QWORD)v5;
    v12 = v3 >> 4;
    v13 = (double *)(*a1 + 8);
    result = 1.79769313e308;
    v15 = 1;
    while (1)
    {
      v18 = *(v13 - 1);
      v19 = *v13;
      v20 = v18 + 1.0;
      v7 = ((*a2)[3] - (*a2)[1]) / ((*a2)[2] - **a2);
      v21 = *v13 - v18 * v7 + (v18 + 1.0) * v7;
      if (v9)
      {
        v23 = *v4;
        v22 = v4[1];
        if (*v4 == v18 && v22 == v19 && v6 != (_QWORD)v5)
        {
          v26 = v4[2] != v20;
          if (v4[3] != v21)
            v26 = 1;
          v16 = 0.0;
          if (!v26 && !v11)
            goto LABEL_16;
        }
      }
      else
      {
        v23 = *v4;
        v22 = v4[1];
      }
      v27 = (v4[3] - v22) / (v4[2] - v23);
      v28 = (v21 - v19) / (v20 - v18);
      v29 = v19 - v28 * v18;
      v30 = v23;
      if (v27 != 0.0)
        v30 = (v22 - -1.0 / v27 * v23 - v29) / (v28 - -1.0 / v27);
      v16 = sqrt((v22 - (v29 + v28 * v30)) * (v22 - (v29 + v28 * v30)) + (v23 - v30) * (v23 - v30));
LABEL_16:
      if (v16 < result)
        result = v16;
      v17 = result < 1.0 || v15++ >= v12;
      v13 += 2;
      if (v17)
        return result;
    }
  }
  return 1.79769313e308;
}

void CoreHandwriting::filter_delaunay_edges_for_alphashape(uint64_t **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v7;
  double v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  BOOL v30;
  double v31;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v5 = a1[1];
  v4 = a1[2];
  if (v4 != v5)
  {
    v7 = 0;
    v8 = 1.0 / a3;
    do
    {
      v9 = (unint64_t *)&v5[v7];
      v10 = *v9;
      v11 = v9[1];
      v12 = v9[2];
      v13 = **a1;
      v14 = (double *)(v13 + 16 * v10);
      v15 = *v14;
      v16 = v14[1];
      v17 = (double *)(v13 + 16 * v11);
      v18 = (double *)(v13 + 16 * v12);
      v19 = *v17 - v15;
      v20 = v17[1] - v16;
      v21 = *v18 - v15;
      v22 = v18[1] - v16;
      v23 = v20 * v20 + v19 * v19;
      v24 = v22 * v22 + v21 * v21;
      v25 = v19 * v22 - v20 * v21;
      v26 = (v22 * v23 - v20 * v24) * 0.5 / v25;
      v27 = (v19 * v24 - v21 * v23) * 0.5 / v25;
      v30 = v24 <= 0.0 || v23 <= 0.0 || v25 == 0.0;
      v31 = v27 * v27 + v26 * v26;
      if (v30)
        v31 = 1.79769313e308;
      if (v31 < v8)
      {
        sub_1BE7F56DC(v10, v11, (uint64_t **)a2);
        sub_1BE7F56DC(v11, v12, (uint64_t **)a2);
        sub_1BE7F56DC(v12, v10, (uint64_t **)a2);
        v5 = a1[1];
        v4 = a1[2];
      }
      v7 += 3;
    }
    while (v7 < v4 - v5);
  }
}

void sub_1BE7F5CC0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_1BE671438(*v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F5CD4(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D4>)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  float64x2_t v27;
  unint64_t v28;
  long double v29;
  double v30;
  float64x2_t *v31;
  unint64_t v32;
  double v33;
  char *v34;
  double *v35;
  float64x2_t v36;
  char *v37;
  char *v38;
  char *v39;
  float64x2_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  double *v87;
  char *v88;
  void *v89;
  int64_t v90;
  double *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  _BOOL4 v101;
  _BOOL4 v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double *v111;
  size_t v112;
  double *v113;
  CGFloat a;
  unint64_t v115;
  double v116;
  CGFloat b;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  _QWORD *v123;
  double v124;
  double v125;
  float64x2_t v126;
  double *v127;
  double *v128;
  double *v129;
  double *v130;
  double *v131;
  CGAffineTransform v132;
  void *__p;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  float64x2_t *v139;
  float64x2_t *v140;
  float64x2_t *v141;

  v122 = a2;
  v123 = a3;
  v17 = *a1;
  v16 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v18 = v16 - v17;
  if (v16 == v17)
  {
    if (a6 != 1.79769313e308)
    {
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v136 = 0;
      v137 = 0;
      v138 = 0;
      __p = 0;
      v134 = 0;
      v135 = 0;
      v25 = v122;
      goto LABEL_91;
    }
    v27.f64[0] = 0.0;
    v29 = 0.0;
    v25 = v122;
LABEL_24:
    v30 = atan2(v29, v27.f64[0]);
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    __p = 0;
    v134 = 0;
    v135 = 0;
    if (v16 != v17)
    {
      a6 = v30;
      goto LABEL_26;
    }
LABEL_91:
    v39 = 0;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v89 = __p;
    goto LABEL_95;
  }
  if (v18 < 0)
    sub_1BE61F930();
  v19 = v18 >> 4;
  v20 = (unint64_t)((v18 >> 4) - 1) >> 6;
  v21 = operator new(8 * (v20 + 1));
  v22 = v21;
  v123[1] = v18 >> 4;
  v123[2] = v20 + 1;
  *v123 = v21;
  if ((unint64_t)v18 >= 0x410)
    v23 = (unint64_t)((v18 >> 4) - 1) >> 6;
  else
    v23 = 0;
  v21[v23] = 0;
  if ((unint64_t)v18 >= 0x400)
    memset(v21, 255, 8 * (v19 >> 6));
  v24 = ((unint64_t)v18 >> 4) & 0x3F;
  if (v24)
    v22[v19 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
  v25 = v122;
  if (a6 == 1.79769313e308)
  {
    v26 = 0;
    v27 = 0uLL;
    do
    {
      if (((*(_QWORD *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v26 & 0x3E)) & 1) != 0 && v19 > v26)
      {
        v28 = v26;
        do
        {
          if (((*(_QWORD *)((char *)v22 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v28 & 0x3E)) & 1) != 0)
            v27 = vaddq_f64(v27, vsubq_f64(*(float64x2_t *)(v17 + 16 * v28), *(float64x2_t *)(v17 + 16 * v26)));
          v28 += 2;
        }
        while (v19 > v28);
      }
      v26 += 2;
    }
    while (v19 > v26);
    v29 = v27.f64[1];
    goto LABEL_24;
  }
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  __p = 0;
  v134 = 0;
  v135 = 0;
LABEL_26:
  v31 = 0;
  v32 = 0;
  v33 = -a6;
  do
  {
    v35 = (double *)(v17 + 16 * v32);
    v125 = *v35 - a4;
    v124 = v35[1] - a5;
    CGAffineTransformMakeRotation(&v132, v33);
    v36 = vaddq_f64(*(float64x2_t *)&v132.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v132.c, v124), *(float64x2_t *)&v132.a, v125));
    v126 = v36;
    if (v31 < v141)
    {
      *v31++ = v36;
      v140 = v31;
      v38 = v137;
      v37 = v138;
      if (v137 < v138)
        goto LABEL_31;
      goto LABEL_48;
    }
    v40 = v139;
    v41 = v31 - v139;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      sub_1BE61F930();
    v43 = (char *)v141 - (char *)v139;
    if (((char *)v141 - (char *)v139) >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (!v44)
    {
      v45 = 0;
      v46 = (float64x2_t *)(16 * v41);
      v48 = (float64x2_t *)(16 * v41);
      *v48 = v36;
      v47 = v48 + 1;
      if (v31 == v40)
        goto LABEL_45;
      do
      {
LABEL_43:
        v46[-1] = v31[-1];
        --v46;
        --v31;
      }
      while (v31 != v40);
      v31 = v139;
      goto LABEL_45;
    }
    if (v44 >> 60)
      goto LABEL_146;
    v45 = (char *)operator new(16 * v44);
    v36 = v126;
    v46 = (float64x2_t *)&v45[16 * v41];
    *v46 = v126;
    v47 = v46 + 1;
    if (v31 != v40)
      goto LABEL_43;
LABEL_45:
    v139 = v46;
    v140 = v47;
    v141 = (float64x2_t *)&v45[16 * v44];
    if (v31)
    {
      operator delete(v31);
      v36 = v126;
    }
    v31 = v47;
    v140 = v47;
    v38 = v137;
    v37 = v138;
    if (v137 < v138)
    {
LABEL_31:
      *(float64_t *)v38 = v36.f64[0];
      v39 = v38 + 8;
      goto LABEL_67;
    }
LABEL_48:
    v49 = v136;
    v50 = (v38 - v136) >> 3;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61)
      goto LABEL_150;
    v52 = v37 - v136;
    if (v52 >> 2 > v51)
      v51 = v52 >> 2;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      if (v53 >> 61)
        goto LABEL_146;
      v54 = operator new(8 * v53);
      v36.f64[1] = v126.f64[1];
      v55 = &v54[8 * v50];
      *(float64_t *)v55 = v126.f64[0];
      v39 = v55 + 8;
      v56 = v38 - v49;
      if (v38 == v49)
        goto LABEL_65;
LABEL_59:
      v57 = v56 - 8;
      if (v57 < 0x58)
        goto LABEL_157;
      if ((unint64_t)(v49 - v54) < 0x20)
        goto LABEL_157;
      v58 = (v57 >> 3) + 1;
      v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v60 = &v38[-v59];
      v55 -= v59;
      v61 = &v54[8 * v50 - 16];
      v62 = v38 - 16;
      v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v64 = *(_OWORD *)v62;
        *(v61 - 1) = *((_OWORD *)v62 - 1);
        *v61 = v64;
        v61 -= 2;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      v38 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_157:
        do
        {
          v65 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v55 - 1) = v65;
          v55 -= 8;
        }
        while (v38 != v49);
      }
      goto LABEL_65;
    }
    v54 = 0;
    v55 = (char *)(8 * v50);
    *(float64_t *)(8 * v50) = v36.f64[0];
    v39 = (char *)(8 * v50 + 8);
    v56 = v38 - v49;
    if (v38 != v49)
      goto LABEL_59;
LABEL_65:
    v136 = v55;
    v138 = &v54[8 * v53];
    if (v49)
    {
      operator delete(v49);
      v36.f64[1] = v126.f64[1];
    }
LABEL_67:
    v137 = v39;
    v66 = v134;
    if (v134 < v135)
    {
      *(float64_t *)v134 = v36.f64[1];
      v34 = v66 + 8;
      goto LABEL_28;
    }
    v67 = (char *)__p;
    v68 = v134 - (_BYTE *)__p;
    v69 = (v134 - (_BYTE *)__p) >> 3;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 61)
LABEL_150:
      sub_1BE61F930();
    v71 = v135 - (_BYTE *)__p;
    if ((v135 - (_BYTE *)__p) >> 2 > v70)
      v70 = v71 >> 2;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
      v72 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    if (v72)
    {
      if (v72 >> 61)
LABEL_146:
        sub_1BE61F100();
      v73 = (char *)operator new(8 * v72);
      v74 = &v73[8 * v69];
      *(float64_t *)v74 = v126.f64[1];
      v34 = v74 + 8;
      v75 = v66 - v67;
      if (v66 == v67)
        goto LABEL_85;
LABEL_79:
      v76 = v75 - 8;
      if (v76 < 0x58)
        goto LABEL_158;
      if ((unint64_t)(v66 - v73 - v68) < 0x20)
        goto LABEL_158;
      v77 = (v76 >> 3) + 1;
      v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
      v79 = &v66[-v78];
      v74 -= v78;
      v80 = &v73[8 * v69 - 16];
      v81 = v66 - 16;
      v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v83 = *(_OWORD *)v81;
        *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
        *(_OWORD *)v80 = v83;
        v80 -= 32;
        v81 -= 32;
        v82 -= 4;
      }
      while (v82);
      v66 = v79;
      if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          v84 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *((_QWORD *)v74 - 1) = v84;
          v74 -= 8;
        }
        while (v66 != v67);
      }
      goto LABEL_85;
    }
    v73 = 0;
    v74 = (char *)(8 * v69);
    *(float64_t *)(8 * v69) = v36.f64[1];
    v34 = (char *)(8 * v69 + 8);
    v75 = v66 - v67;
    if (v66 != v67)
      goto LABEL_79;
LABEL_85:
    __p = v74;
    v135 = &v73[8 * v72];
    if (v67)
      operator delete(v67);
LABEL_28:
    v134 = v34;
    ++v32;
    v17 = *a1;
  }
  while (v32 < (a1[1] - *a1) >> 4);
  v85 = v136;
  v129 = 0;
  v128 = 0;
  v86 = v39 - v136;
  if (v39 == v136)
  {
    v25 = v122;
    v130 = 0;
    v131 = 0;
    v89 = __p;
    v90 = v34 - (_BYTE *)__p;
    if (v34 == __p)
      goto LABEL_95;
    goto LABEL_93;
  }
  v25 = v122;
  if (v86 < 0)
    sub_1BE61F930();
  v87 = (double *)operator new(v39 - v136);
  v88 = (char *)&v87[v86 >> 3];
  v128 = v87;
  memcpy(v87, v85, v39 - v85);
  v129 = (double *)v88;
  v39 = v85;
  v130 = 0;
  v131 = 0;
  v89 = __p;
  v90 = v34 - (_BYTE *)__p;
  if (v34 != __p)
  {
LABEL_93:
    if (v90 < 0)
      sub_1BE61F930();
    v91 = (double *)operator new(v90);
    v92 = (char *)&v91[v90 >> 3];
    v130 = v91;
    memcpy(v91, v89, v90);
    v131 = (double *)v92;
  }
LABEL_95:
  if (v89)
    operator delete(v89);
  if (v39)
  {
    v137 = v39;
    operator delete(v39);
  }
  if (v139)
    operator delete(v139);
  v93 = (char *)v129 - (char *)v128;
  if (v129 == v128)
  {
    v103 = 0.0;
  }
  else
  {
    v94 = 0;
    v95 = 0;
    v96 = v93 >> 3;
    if ((unint64_t)(v93 >> 3) <= 1)
      v96 = 1;
    v97 = 0.0;
    v98 = 0.0;
    v99 = 0.0;
    do
    {
      if (((*(_QWORD *)(*v123 + ((v94 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v94) & 1) != 0)
      {
        v100 = v128[v94];
        v97 = v97 + v130[v94];
        v101 = v100 < v99;
        v102 = v100 > v98;
        if (!v95)
        {
          v101 = 1;
          v102 = 1;
        }
        if (v101)
          v99 = v128[v94];
        if (v102)
          v98 = v128[v94];
        ++v95;
      }
      ++v94;
    }
    while (v96 != v94);
    v103 = v98 - v99;
    if (v95)
    {
      v104 = v97 / (double)v95;
      goto LABEL_118;
    }
  }
  v104 = *(double *)(MEMORY[0x1E0C9D538] + 8);
LABEL_118:
  if (objc_msgSend_length(v25, v11, v12, v13, v14, v15, v122))
  {
    v110 = v103 / (double)(unint64_t)objc_msgSend_length(v25, v105, v106, v107, v108, v109) * 1.1;
    v127 = 0;
    v111 = v130;
    v112 = (char *)v131 - (char *)v130;
    if (v131 != v130)
      goto LABEL_120;
LABEL_124:
    v113 = 0;
    memset(&v132, 0, 24);
    if (a1[1] != *a1)
      goto LABEL_125;
  }
  else
  {
    v110 = 0.0;
    v127 = 0;
    v111 = v130;
    v112 = (char *)v131 - (char *)v130;
    if (v131 == v130)
      goto LABEL_124;
LABEL_120:
    if ((v112 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v113 = (double *)operator new(v112);
    v127 = v113;
    memcpy(v113, v111, v112);
    memset(&v132, 0, 24);
    if (a1[1] != *a1)
    {
LABEL_125:
      a = 0.0;
      v115 = 0;
      do
      {
        while (1)
        {
          v116 = v127[v115];
          b = v132.b;
          if (*(_QWORD *)&v132.b == *(_QWORD *)&v132.c << 6)
          {
            if (*(_QWORD *)&v132.b + 1 < 0)
              sub_1BE61F930();
            v118 = *(_QWORD *)&v132.c << 7;
            if (*(_QWORD *)&v132.c << 7 <= (*(_QWORD *)&v132.b & 0xFFFFFFFFFFFFFFC0) + 64)
              v118 = (*(_QWORD *)&v132.b & 0xFFFFFFFFFFFFFFC0) + 64;
            if (*(_QWORD *)&v132.b <= 0x3FFFFFFFFFFFFFFEuLL)
              v119 = v118;
            else
              v119 = 0x7FFFFFFFFFFFFFFFLL;
            sub_1BE694488((uint64_t)&v132, v119);
            a = v132.a;
            b = v132.b;
          }
          *(_QWORD *)&v132.b = *(_QWORD *)&b + 1;
          v120 = *(_QWORD *)&b >> 6;
          v121 = 1 << SLOBYTE(b);
          if (vabdd_f64(v116, v104) < v110)
            break;
          *(_QWORD *)(*(_QWORD *)&a + 8 * v120) &= ~v121;
          if (++v115 >= (a1[1] - *a1) >> 4)
            goto LABEL_137;
        }
        *(_QWORD *)(*(_QWORD *)&a + 8 * v120) |= v121;
        ++v115;
      }
      while (v115 < (a1[1] - *a1) >> 4);
    }
  }
LABEL_137:
  if (*v123)
  {
    operator delete((void *)*v123);
    *v123 = 0;
    v123[1] = 0;
    v123[2] = 0;
  }
  *v123 = *(_QWORD *)&v132.a;
  *(_OWORD *)(v123 + 1) = *(_OWORD *)&v132.b;
  memset(&v132, 0, 24);
  if (v113)
    operator delete(v113);
  if (v130)
    operator delete(v130);
  if (v128)
    operator delete(v128);

}

void sub_1BE7F6674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  if (__p)
  {
    operator delete(__p);
    v34 = a31;
    if (!a31)
    {
LABEL_3:
      v35 = *(void **)(v32 - 168);
      if (!v35)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v34 = a31;
    if (!a31)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = *(void **)(v32 - 168);
  if (!v35)
  {
LABEL_4:
    v36 = *(void **)(v32 - 144);
    if (!v36)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v32 - 160) = v35;
  operator delete(v35);
  v36 = *(void **)(v32 - 144);
  if (!v36)
  {
LABEL_5:
    v37 = *a10;
    if (!*a10)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v32 - 136) = v36;
  operator delete(v36);
  v37 = *a10;
  if (!*a10)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(v37);

  _Unwind_Resume(a1);
}

void sub_1BE7F67A0(uint64_t a1@<X0>, char **a2@<X8>, double a3@<D0>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t *v53;
  double *v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t **v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  double v75;
  double v76;
  double *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  double *v81;
  double v82;
  double v83;
  double *v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  double *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double *v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  BOOL v102;
  double v103;
  double v104;
  double v105;
  BOOL v106;
  char v107;
  double v108;
  double *v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  unint64_t v121;
  double v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  unint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  unint64_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  int64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  __int128 *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  __int128 *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  char **v186;
  double *v187;
  double v188;
  double v189;
  double v190;
  uint64_t v191;
  double *v192;
  double v193;
  double v194;
  double v195;
  double v197;
  double v199;
  double v201;
  double v203;
  double v204;
  double v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t i;
  uint64_t v220;
  double *v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  unint64_t v233;
  uint64_t v234;
  double *v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  unint64_t v241;
  uint64_t *v242;
  unint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  _BOOL8 v251;
  char *v252;
  uint64_t *v253;
  _BOOL8 v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t **v257;
  NSObject *v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t **v291;
  uint64_t *v292;
  unint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t **v296;
  uint64_t **v297;
  char **v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t **v301;
  uint64_t *v302;
  unint64_t v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t **v306;
  uint64_t **v307;
  NSObject *v308;
  double *v309;
  double *v310;
  uint64_t v311;
  unint64_t v312;
  double *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  double *v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double *v326;
  double v327;
  double v328;
  double v329;
  double v330;
  char *v331;
  char *v332;
  double v333;
  char *v334;
  double v335;
  double v336;
  double v337;
  double v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double *v349;
  unint64_t v350;
  double v351;
  double v352;
  double v353;
  double *v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  char *v359;
  double *v360;
  uint64_t v361;
  char *v362;
  void *exception;
  double v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  double v369;
  void **v371;
  void *v372[2];
  void *v373[2];
  __int128 v374;
  void *v375[2];
  void *v376[2];
  __int128 v377;
  void *v378[2];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 __p;
  uint64_t v384;
  char *v385;
  char *v386;
  unint64_t v387;
  uint64_t **v388;
  uint64_t *v389;
  uint64_t *v390;
  __int128 buf;
  double v392;
  uint64_t v393;

  v393 = *MEMORY[0x1E0C80C00];
  v385 = 0;
  v386 = 0;
  v387 = 0;
  v5 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v6 = (uint64_t)v4 - *(_QWORD *)a1;
  if (v4 != *(_QWORD **)a1)
  {
    if (v6 < 0)
      sub_1BE61F930();
    v7 = operator new((size_t)v4 - *(_QWORD *)a1);
    v8 = (unint64_t)&v7[v6 >> 3];
    v385 = (char *)v7;
    v386 = (char *)v7;
    v387 = v8;
    v6 = (uint64_t)v7;
    while (1)
    {
      while ((unint64_t)v7 < v8)
      {
        *v7 = *v5;
        v9 = v7 + 1;
        v386 = (char *)(v7 + 1);
        if ((unint64_t)(v7 + 1) >= v8)
          goto LABEL_25;
LABEL_4:
        *v9 = v5[1];
        v7 = v9 + 1;
        v386 = (char *)(v9 + 1);
        v5 += 2;
        if (v5 == v4)
          goto LABEL_64;
      }
      v10 = ((uint64_t)v7 - v6) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_508;
      if ((uint64_t)(v8 - v6) >> 2 > v11)
        v11 = (uint64_t)(v8 - v6) >> 2;
      if (v8 - v6 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
      {
        if (v12 >> 61)
          goto LABEL_510;
        v13 = (char *)operator new(8 * v12);
        v14 = &v13[8 * v10];
        *(_QWORD *)v14 = *v5;
        v9 = v14 + 8;
        v15 = (char *)v7 - v6;
        if (v7 == (_QWORD *)v6)
          goto LABEL_22;
      }
      else
      {
        v13 = 0;
        v14 = (char *)(8 * v10);
        *(_QWORD *)(8 * v10) = *v5;
        v9 = (_QWORD *)(8 * v10 + 8);
        v15 = (char *)v7 - v6;
        if (v7 == (_QWORD *)v6)
          goto LABEL_22;
      }
      v16 = (unint64_t)(v15 - 8);
      if (v16 < 0x168)
      {
        v17 = v7;
        goto LABEL_21;
      }
      v28 = ((unint64_t)v7 - v6 - 8) & 0xFFFFFFFFFFFFFFF8;
      if ((char *)v7 + (_QWORD)v13 - v6 - v28 - 8 > (char *)v7 + (_QWORD)v13 - v6 - 8)
      {
        v17 = v7;
        do
        {
LABEL_21:
          v18 = *--v17;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v17 != (_QWORD *)v6);
        goto LABEL_22;
      }
      if ((_QWORD *)((char *)v7 - v28 - 8) > v7 - 1)
      {
        v17 = v7;
        goto LABEL_21;
      }
      if ((unint64_t)(v6 - (_QWORD)v13) < 0x20)
      {
        v17 = v7;
        goto LABEL_21;
      }
      v30 = (v16 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = &v7[v31 / 0xFFFFFFFFFFFFFFF8];
      v14 -= v31;
      v32 = &v13[8 * v10 - 16];
      v33 = (__int128 *)(v7 - 2);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
LABEL_22:
      v8 = (unint64_t)&v13[8 * v12];
      v385 = v14;
      v387 = v8;
      if (v6)
        operator delete((void *)v6);
      v6 = (uint64_t)v14;
      v386 = (char *)v9;
      if ((unint64_t)v9 < v8)
        goto LABEL_4;
LABEL_25:
      v19 = ((uint64_t)v9 - v6) >> 3;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61)
LABEL_508:
        sub_1BE61F930();
      if ((uint64_t)(v8 - v6) >> 2 > v20)
        v20 = (uint64_t)(v8 - v6) >> 2;
      if (v8 - v6 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
      {
        if (v21 >> 61)
LABEL_510:
          sub_1BE61F100();
        v22 = (char *)operator new(8 * v21);
        v23 = &v22[8 * v19];
        *(_QWORD *)v23 = v5[1];
        v7 = v23 + 8;
        v24 = (char *)v9 - v6;
        if (v9 == (_QWORD *)v6)
          goto LABEL_39;
      }
      else
      {
        v22 = 0;
        v23 = (char *)(8 * v19);
        *(_QWORD *)(8 * v19) = v5[1];
        v7 = (_QWORD *)(8 * v19 + 8);
        v24 = (char *)v9 - v6;
        if (v9 == (_QWORD *)v6)
          goto LABEL_39;
      }
      v25 = (unint64_t)(v24 - 8);
      if (v25 >= 0x168)
      {
        v29 = ((unint64_t)v9 - v6 - 8) & 0xFFFFFFFFFFFFFFF8;
        if ((char *)v9 + (_QWORD)v22 - v6 - v29 - 8 > (char *)v9 + (_QWORD)v22 - v6 - 8)
        {
          v26 = v9;
        }
        else if ((_QWORD *)((char *)v9 - v29 - 8) > v9 - 1)
        {
          v26 = v9;
        }
        else if ((unint64_t)(v6 - (_QWORD)v22) >= 0x20)
        {
          v36 = (v25 >> 3) + 1;
          v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          v26 = &v9[v37 / 0xFFFFFFFFFFFFFFF8];
          v23 -= v37;
          v38 = &v22[8 * v19 - 16];
          v39 = (__int128 *)(v9 - 2);
          v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = *v39;
            *((_OWORD *)v38 - 1) = *(v39 - 1);
            *(_OWORD *)v38 = v41;
            v38 -= 32;
            v39 -= 2;
            v40 -= 4;
          }
          while (v40);
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_39;
        }
        else
        {
          v26 = v9;
        }
      }
      else
      {
        v26 = v9;
      }
      do
      {
        v27 = *--v26;
        *((_QWORD *)v23 - 1) = v27;
        v23 -= 8;
      }
      while (v26 != (_QWORD *)v6);
LABEL_39:
      v8 = (unint64_t)&v22[8 * v21];
      v385 = v23;
      v387 = v8;
      if (v6)
        operator delete((void *)v6);
      v6 = (uint64_t)v23;
      v386 = (char *)v7;
      v5 += 2;
      if (v5 == v4)
        goto LABEL_64;
    }
  }
  v7 = 0;
LABEL_64:
  v371 = (void **)&v385;
  *(_OWORD *)v372 = 0u;
  *(_OWORD *)v373 = 0u;
  v374 = 0u;
  *(_OWORD *)v375 = 0u;
  *(_OWORD *)v376 = 0u;
  v377 = 0u;
  *(_OWORD *)v378 = 0u;
  v379 = 0u;
  v380 = 0u;
  v381 = 0u;
  v382 = 0u;
  __p = 0u;
  v384 = 0;
  v42 = (uint64_t)v7 - v6;
  v388 = 0;
  v389 = 0;
  v390 = 0;
  if ((unint64_t)v7 - v6 < 0x10)
  {
LABEL_512:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3B81130](exception, "not triangulation");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v42 < 0)
    sub_1BE61F930();
  v367 = (unint64_t)v7 - v6;
  v365 = v42 >> 3;
  v43 = (unint64_t)(v42 >> 3) >> 1;
  v44 = (uint64_t *)operator new(8 * v43);
  v45 = v44;
  v46 = 0;
  v47 = &v44[v43];
  v388 = (uint64_t **)v44;
  v389 = v44;
  v390 = v47;
  v366 = v43;
  if (v43 <= 1)
    v48 = 1;
  else
    v48 = v43;
  v49 = 1.79769313e308;
  v50 = -1.79769313e308;
  v51 = -1.79769313e308;
  v52 = 1.79769313e308;
  v53 = v44;
  do
  {
    while (1)
    {
      v54 = (double *)((char *)*v371 + 16 * v46);
      v55 = v54[1];
      if (*v54 < v49)
        v49 = *v54;
      if (v55 < v52)
        v52 = v54[1];
      if (*v54 > v50)
        v50 = *v54;
      if (v55 > v51)
        v51 = v54[1];
      if (v45 >= v47)
        break;
      *v45++ = v46;
      if (++v46 == v48)
        goto LABEL_108;
    }
    v56 = v45 - v53;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 61)
    {
      v389 = v45;
      sub_1BE61F930();
    }
    if (((char *)v47 - (char *)v53) >> 2 > v57)
      v57 = ((char *)v47 - (char *)v53) >> 2;
    if ((unint64_t)((char *)v47 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8)
      v58 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v58 = v57;
    if (v58)
    {
      if (v58 >> 61)
      {
        v389 = v45;
        sub_1BE61F100();
      }
      v59 = operator new(8 * v58);
      v60 = (uint64_t **)&v59[8 * v56];
      *v60 = (uint64_t *)v46;
      v61 = (uint64_t)(v60 + 1);
      v62 = (char *)v45 - (char *)v53;
      if (v45 == v53)
        goto LABEL_94;
    }
    else
    {
      v59 = 0;
      v60 = (uint64_t **)(8 * v56);
      *(_QWORD *)(8 * v56) = v46;
      v61 = 8 * v56 + 8;
      v62 = (char *)v45 - (char *)v53;
      if (v45 == v53)
        goto LABEL_94;
    }
    v63 = v62 - 8;
    if (v63 < 0x168)
    {
      v64 = v45;
      goto LABEL_93;
    }
    v66 = ((char *)(v45 - 1) - (char *)v53) & 0xFFFFFFFFFFFFFFF8;
    if (&v59[(char *)v45 - (char *)v53 - 8 - v66] > &v59[(char *)v45 - (char *)v53 - 8])
    {
      v64 = v45;
      do
      {
LABEL_93:
        v65 = (uint64_t *)*--v64;
        *--v60 = v65;
      }
      while (v64 != v53);
      goto LABEL_94;
    }
    if ((uint64_t *)((char *)v45 - v66 - 8) > v45 - 1)
    {
      v64 = v45;
      goto LABEL_93;
    }
    if ((unint64_t)((char *)v53 - v59) < 0x20)
    {
      v64 = v45;
      goto LABEL_93;
    }
    v67 = (v63 >> 3) + 1;
    v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
    v64 = &v45[v68 / 0xFFFFFFFFFFFFFFF8];
    v60 = (uint64_t **)((char *)v60 - v68);
    v69 = &v59[8 * v56 - 16];
    v70 = v45 - 2;
    v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v72 = *(_OWORD *)v70;
      *(v69 - 1) = *((_OWORD *)v70 - 1);
      *v69 = v72;
      v69 -= 2;
      v70 -= 4;
      v71 -= 4;
    }
    while (v71);
    if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_93;
LABEL_94:
    v47 = (uint64_t *)&v59[8 * v58];
    v388 = v60;
    v390 = v47;
    if (v53)
      operator delete(v53);
    v53 = (uint64_t *)v60;
    v45 = (uint64_t *)v61;
    ++v46;
  }
  while (v46 != v48);
LABEL_108:
  v73 = 0;
  v389 = v45;
  v74 = (char *)*v371;
  v77 = (double *)((char *)*v371 + 8);
  v78 = -1;
  v79 = 1.79769313e308;
  do
  {
    v75 = (v49 + v50) * 0.5;
    v76 = (v52 + v51) * 0.5;
    if ((v76 - *v77) * (v76 - *v77) + (v75 - *(v77 - 1)) * (v75 - *(v77 - 1)) < v79)
    {
      v79 = (v76 - *v77) * (v76 - *v77) + (v75 - *(v77 - 1)) * (v75 - *(v77 - 1));
      v78 = v73;
    }
    ++v73;
    v77 += 2;
  }
  while (v48 != v73);
  v80 = 0;
  v81 = (double *)&v74[16 * v78];
  v82 = *v81;
  v83 = v81[1];
  v84 = (double *)(v74 + 8);
  v85 = -1;
  v86 = 1.79769313e308;
  do
  {
    if (v78 != v80)
    {
      v87 = (v83 - *v84) * (v83 - *v84) + (v82 - *(v84 - 1)) * (v82 - *(v84 - 1));
      if (v87 < v86 && v87 > 0.0)
      {
        v85 = v80;
        v86 = (v83 - *v84) * (v83 - *v84) + (v82 - *(v84 - 1)) * (v82 - *(v84 - 1));
      }
    }
    ++v80;
    v84 += 2;
  }
  while (v48 != v80);
  v88 = 0;
  v89 = (double *)&v74[16 * v85];
  v90 = *v89;
  v91 = v89[1];
  v92 = *v89 - v82;
  v93 = v91 - v83;
  v94 = v93 * v93 + v92 * v92;
  v95 = -(v91 - v83);
  v96 = (double *)(v74 + 8);
  v97 = -1;
  v98 = 1.79769313e308;
  do
  {
    if (v78 != v88 && v85 != v88)
    {
      v99 = *(v96 - 1) - v82;
      v100 = *v96 - v83;
      v101 = v100 * v100 + v99 * v99;
      v102 = v101 <= 0.0 || v94 <= 0.0;
      v103 = v99 * v95 + v92 * v100;
      v104 = (v101 * v95 + v100 * v94) * 0.5 / v103;
      v105 = (v92 * v101 - v99 * v94) * 0.5 / v103;
      v106 = v102 || v103 == 0.0;
      v107 = v106;
      v108 = v105 * v105 + v104 * v104;
      if (v107)
        v108 = 1.79769313e308;
      if (v108 < v98)
      {
        v97 = v88;
        v98 = v108;
      }
    }
    ++v88;
    v96 += 2;
  }
  while (v48 != v88);
  if (v98 >= 1.79769313e308)
    goto LABEL_512;
  v364 = a3;
  v109 = (double *)&v74[16 * v97];
  v111 = *v109;
  v110 = v109[1];
  v112 = *v109 - v82;
  v113 = v110 - v83;
  v114 = v113 * v113;
  if (v93 * (*v109 - v90) - v92 * (v110 - v91) >= 0.0)
  {
    v116 = v93 * v93 + v92 * v92;
    v94 = v114 + v112 * v112;
    v93 = v110 - v83;
    v115 = -v112;
    v117 = *v109 - v82;
    v112 = v92;
    v118 = *v109;
    v119 = v109[1];
    v110 = v91;
    v111 = v90;
    v120 = v97;
    v97 = v85;
  }
  else
  {
    v115 = -v92;
    v116 = v114 + v112 * v112;
    v95 = -v113;
    v117 = v92;
    v118 = v90;
    v119 = v91;
    v120 = v85;
  }
  v121 = 126 - 2 * __clz(v45 - v53);
  v122 = v95 * v117 + v112 * v93;
  *((double *)&v381 + 1) = v82 + (v95 * v94 + v93 * v116) * 0.5 / v122;
  *(double *)&v382 = v83 + (v116 * v115 + v112 * v94) * 0.5 / v122;
  *(_QWORD *)&buf = v371;
  *((double *)&buf + 1) = *((double *)&v381 + 1);
  v392 = *(double *)&v382;
  if (v45 == v53)
    v123 = 0;
  else
    v123 = v121;
  sub_1BE7FEB80((uint64_t)v53, v45, (double *)&buf, v123, 1);
  v124 = llround(ceil(sqrt((double)v366)));
  *((_QWORD *)&v382 + 1) = v124;
  v126 = *((_QWORD *)&v380 + 1);
  v125 = (void *)v380;
  v127 = (uint64_t)(*((_QWORD *)&v380 + 1) - v380) >> 3;
  if (v124 <= v127)
  {
    if (v124 < v127)
    {
      v126 = v380 + 8 * v124;
      *((_QWORD *)&v380 + 1) = v126;
    }
  }
  else
  {
    sub_1BE80012C((uint64_t)&v380, v124 - v127);
    v126 = *((_QWORD *)&v380 + 1);
    v125 = (void *)v380;
  }
  v128 = v126 - (_QWORD)v125;
  if (v128 >= 1)
    memset(v125, 255, 8 * (((unint64_t)v128 >> 3) - ((unint64_t)v128 > 7)) + 8);
  v129 = ((char *)v375[1] - (char *)v375[0]) >> 3;
  if (v366 <= v129)
  {
    if (v366 < v129)
      v375[1] = (char *)v375[0] + 8 * v366;
  }
  else
  {
    sub_1BE80012C((uint64_t)v375, v366 - v129);
  }
  v130 = (uint64_t)(v377 - (unint64_t)v376[1]) >> 3;
  if (v366 <= v130)
  {
    if (v366 < v130)
      *(_QWORD *)&v377 = (char *)v376[1] + 8 * v366;
  }
  else
  {
    sub_1BE80012C((uint64_t)&v376[1], v366 - v130);
  }
  v131 = (char *)v378[0];
  v132 = ((char *)v378[1] - (char *)v378[0]) >> 3;
  if (v366 <= v132)
  {
    if (v366 < v132)
      v378[1] = (char *)v378[0] + 8 * v366;
  }
  else
  {
    sub_1BE80012C((uint64_t)v378, v366 - v132);
    v131 = (char *)v378[0];
  }
  *((_QWORD *)&v379 + 1) = v78;
  v133 = (char *)v375[0];
  v134 = 8 * v120;
  *(_QWORD *)((char *)v375[0] + v134) = v97;
  v135 = (char *)v376[1];
  v136 = 8 * v78;
  *(_QWORD *)((char *)v376[1] + v136) = v97;
  *(_QWORD *)&v133[v136] = v120;
  v137 = 8 * v97;
  *(_QWORD *)&v135[v137] = v120;
  *(_QWORD *)&v133[v137] = v78;
  *(_QWORD *)&v135[v134] = v78;
  *(_QWORD *)&v131[v136] = 0;
  *(_QWORD *)&v131[v137] = 1;
  *(_QWORD *)&v131[v134] = 2;
  v138 = *((double *)&v381 + 1);
  v139 = *(double *)&v382;
  v140 = (v82 - *((double *)&v381 + 1)) / (vabdd_f64(v82, *((double *)&v381 + 1)) + vabdd_f64(v83, *(double *)&v382));
  v141 = 3.0 - v140;
  v142 = v140 + 1.0;
  if (v83 - *(double *)&v382 <= 0.0)
    v143 = v142;
  else
    v143 = v141;
  v144 = llround(floor(v143 * 0.25 * (double)*((unint64_t *)&v382 + 1)));
  if (v144 >= *((_QWORD *)&v382 + 1))
    v144 %= *((_QWORD *)&v382 + 1);
  v145 = v380;
  *(_QWORD *)(v380 + 8 * v144) = v78;
  v146 = (v111 - v138) / (vabdd_f64(v111, v138) + vabdd_f64(v110, v139));
  v147 = 3.0 - v146;
  if (v110 - v139 <= 0.0)
    v147 = v146 + 1.0;
  v148 = llround(floor(v147 * 0.25 * (double)*((unint64_t *)&v382 + 1)));
  if (v148 >= *((_QWORD *)&v382 + 1))
    v148 %= *((_QWORD *)&v382 + 1);
  *(_QWORD *)(v145 + 8 * v148) = v97;
  v149 = v119 - v139;
  v150 = (v118 - v138) / (vabdd_f64(v118, v138) + vabdd_f64(v119, v139));
  v151 = 3.0 - v150;
  v152 = v150 + 1.0;
  if (v149 > 0.0)
    v152 = v151;
  v153 = llround(floor(v152 * 0.25 * (double)*((unint64_t *)&v382 + 1)));
  if (v153 >= *((_QWORD *)&v382 + 1))
    v153 %= *((_QWORD *)&v382 + 1);
  *(_QWORD *)(v145 + 8 * v153) = v120;
  if (v367 >= 0x30)
    v154 = 3 * (v365 & 0xFFFFFFFFFFFFFFFELL) - 15;
  else
    v154 = 3;
  v155 = (char *)v372[0];
  if (v154 <= ((char *)v373[0] - (char *)v372[0]) >> 3)
    goto LABEL_188;
  if (v154 >> 61)
    goto LABEL_517;
  v156 = (char *)v372[1];
  v157 = (char *)operator new(8 * v154);
  v158 = (char *)v372[1] - (char *)v372[0];
  v159 = &v157[((char *)v372[1] - (char *)v372[0]) & 0xFFFFFFFFFFFFFFF8];
  v160 = v159;
  if (v372[1] != v372[0])
  {
    if ((unint64_t)(v158 - 8) < 0x58)
    {
      v160 = &v157[((char *)v372[1] - (char *)v372[0]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_185;
    }
    v160 = &v157[((char *)v372[1] - (char *)v372[0]) & 0xFFFFFFFFFFFFFFF8];
    if ((void *)((char *)v372[1] - (v158 & 0xFFFFFFFFFFFFFFF8) - v157) < (void *)0x20)
      goto LABEL_529;
    v161 = v158 >> 3;
    v162 = ((unint64_t)(v158 - 8) >> 3) + 1;
    v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
    v164 = (char *)v372[1] - v163;
    v160 = &v159[-v163];
    v165 = &v157[8 * v161 - 16];
    v166 = (__int128 *)((char *)v372[1] - 16);
    v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v168 = *v166;
      *((_OWORD *)v165 - 1) = *(v166 - 1);
      *(_OWORD *)v165 = v168;
      v165 -= 32;
      v166 -= 2;
      v167 -= 4;
    }
    while (v167);
    v156 = v164;
    if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_529:
      do
      {
LABEL_185:
        v169 = *((_QWORD *)v156 - 1);
        v156 -= 8;
        *((_QWORD *)v160 - 1) = v169;
        v160 -= 8;
      }
      while (v156 != v155);
    }
  }
  v372[0] = v160;
  v372[1] = v159;
  v373[0] = &v157[8 * v154];
  if (v155)
    operator delete(v155);
LABEL_188:
  v170 = (char *)v373[1];
  if (v154 <= (uint64_t)(*((_QWORD *)&v374 + 1) - (unint64_t)v373[1]) >> 3)
    goto LABEL_200;
  if (v154 >> 61)
LABEL_517:
    sub_1BE61F930();
  v171 = (char *)v374;
  v172 = (char *)operator new(8 * v154);
  v173 = v374 - (unint64_t)v373[1];
  v174 = &v172[(v374 - (unint64_t)v373[1]) & 0xFFFFFFFFFFFFFFF8];
  v175 = v174;
  if ((void *)v374 != v373[1])
  {
    if ((unint64_t)(v173 - 8) < 0x58)
    {
      v175 = &v172[(v374 - (unint64_t)v373[1]) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_197;
    }
    v175 = &v172[(v374 - (unint64_t)v373[1]) & 0xFFFFFFFFFFFFFFF8];
    if ((_QWORD)v374 - (_QWORD)v172 - (v173 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_530;
    v176 = v173 >> 3;
    v177 = ((unint64_t)(v173 - 8) >> 3) + 1;
    v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
    v179 = (char *)(v374 - v178);
    v175 = &v174[-v178];
    v180 = &v172[8 * v176 - 16];
    v181 = (__int128 *)(v374 - 16);
    v182 = v177 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v183 = *v181;
      *((_OWORD *)v180 - 1) = *(v181 - 1);
      *(_OWORD *)v180 = v183;
      v180 -= 32;
      v181 -= 2;
      v182 -= 4;
    }
    while (v182);
    v171 = v179;
    if (v177 != (v177 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_530:
      do
      {
LABEL_197:
        v184 = *((_QWORD *)v171 - 1);
        v171 -= 8;
        *((_QWORD *)v175 - 1) = v184;
        v175 -= 8;
      }
      while (v171 != v170);
    }
  }
  v373[1] = v175;
  *(_QWORD *)&v374 = v174;
  *((_QWORD *)&v374 + 1) = &v172[8 * v154];
  if (v170)
    operator delete(v170);
LABEL_200:
  delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v371, v78, v97, v120, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  v185 = 0;
  v186 = a2;
  v187 = (double *)*v371;
  v188 = NAN;
  v189 = 3.0;
  v190 = NAN;
  while (2)
  {
    v191 = (uint64_t)v388[v185];
    v192 = &v187[2 * v191];
    v193 = *v192;
    v194 = v192[1];
    if (v185)
    {
      v195 = vabdd_f64(v194, v188);
      if (vabdd_f64(v193, v190) <= 2.22044605e-16 && v195 <= 2.22044605e-16)
      {
        v193 = v190;
        v194 = v188;
        goto LABEL_201;
      }
    }
    v197 = vabdd_f64(v194, v83);
    if (vabdd_f64(v193, v82) > 2.22044605e-16 || v197 > 2.22044605e-16)
    {
      v199 = vabdd_f64(v194, v110);
      if (vabdd_f64(v193, v111) > 2.22044605e-16 || v199 > 2.22044605e-16)
      {
        v201 = vabdd_f64(v194, v119);
        if (vabdd_f64(v193, v118) > 2.22044605e-16 || v201 > 2.22044605e-16)
        {
          v203 = (v193 - *((double *)&v381 + 1))
               / (vabdd_f64(v193, *((double *)&v381 + 1)) + vabdd_f64(v194, *(double *)&v382));
          v204 = v189 - v203;
          v205 = v203 + 1.0;
          if (v194 - *(double *)&v382 > 0.0)
            v205 = v204;
          v206 = llround(floor(v205 * 0.25 * (double)*((unint64_t *)&v382 + 1)));
          if (v206 >= *((_QWORD *)&v382 + 1))
          {
            v207 = v376[1];
            if (!*((_QWORD *)&v382 + 1))
            {
              v210 = 0;
LABEL_242:
              v212 = *((_QWORD *)v375[0] + v210);
              v213 = v212;
              while (1)
              {
                v214 = v207[v213];
                if ((v187[2 * v213 + 1] - v194) * (v187[2 * v214] - v187[2 * v213])
                   - (v187[2 * v213] - v193) * (v187[2 * v214 + 1] - v187[2 * v213 + 1]) < 0.0)
                  break;
                v213 = v207[v213];
                if (v214 == v212)
                  goto LABEL_250;
              }
              if (v213 == -1)
              {
LABEL_250:
                v186 = a2;
                goto LABEL_201;
              }
              v215 = delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v371, v213, (uint64_t)v388[v185], v214, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, *((_QWORD *)v378[0] + v213));
              v216 = delaunator::Delaunator::legalize((uint64_t **)&v371, v215 + 2);
              v217 = v378[0];
              *((_QWORD *)v378[0] + v191) = v216;
              v217[v213] = v215;
              v218 = v376[1];
              for (i = *((_QWORD *)v376[1] + v213); ; i = v220)
              {
                v220 = v218[i];
                v187 = (double *)*v371;
                v221 = (double *)((char *)*v371 + 16 * i);
                if ((v221[1] - v194) * (*((double *)*v371 + 2 * v220) - *v221)
                   - (*v221 - v193) * (*((double *)*v371 + 2 * v220 + 1) - v221[1]) >= 0.0)
                  break;
                v222 = delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v371, i, v191, v218[i], v217[v191], 0xFFFFFFFFFFFFFFFFLL, v217[i]);
                v223 = delaunator::Delaunator::legalize((uint64_t **)&v371, v222 + 2);
                v217 = v378[0];
                *((_QWORD *)v378[0] + v191) = v223;
                v218 = v376[1];
                *((_QWORD *)v376[1] + i) = i;
              }
              if (v213 == v212)
              {
                v213 = v212;
                v186 = a2;
                while (1)
                {
                  v224 = v375[0];
                  v225 = *((_QWORD *)v375[0] + v213);
                  if ((v187[2 * v225 + 1] - v194) * (v187[2 * v213] - v187[2 * v225])
                     - (v187[2 * v225] - v193) * (v187[2 * v213 + 1] - v187[2 * v225 + 1]) >= 0.0)
                    break;
                  v226 = delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v371, *((_QWORD *)v375[0] + v213), v191, v213, 0xFFFFFFFFFFFFFFFFLL, v217[v213], v217[v225]);
                  delaunator::Delaunator::legalize((uint64_t **)&v371, v226 + 2);
                  v217 = v378[0];
                  *((_QWORD *)v378[0] + v225) = v226;
                  v218 = v376[1];
                  *((_QWORD *)v376[1] + v213) = v213;
                  v187 = (double *)*v371;
                  v213 = v225;
                }
              }
              else
              {
                v224 = v375[0];
                v186 = a2;
              }
              v227 = v191;
              v224[v227] = v213;
              *((_QWORD *)&v379 + 1) = v213;
              v224[i] = v191;
              v218[v213] = v191;
              v218[v227] = i;
              v228 = *((double *)&v381 + 1);
              v229 = *(double *)&v382;
              v230 = (v193 - *((double *)&v381 + 1))
                   / (vabdd_f64(v193, *((double *)&v381 + 1)) + vabdd_f64(v194, *(double *)&v382));
              v231 = 3.0 - v230;
              v232 = v230 + 1.0;
              if (v194 - *(double *)&v382 > 0.0)
                v232 = v231;
              v233 = llround(floor(v232 * 0.25 * (double)*((unint64_t *)&v382 + 1)));
              if (v233 >= *((_QWORD *)&v382 + 1))
                v233 %= *((_QWORD *)&v382 + 1);
              v234 = v380;
              *(_QWORD *)(v380 + 8 * v233) = v191;
              v235 = &v187[2 * v213];
              v236 = v235[1];
              v237 = v236 - v229;
              v238 = (*v235 - v228) / (vabdd_f64(*v235, v228) + vabdd_f64(v236, v229));
              v239 = 3.0 - v238;
              v240 = v238 + 1.0;
              if (v237 > 0.0)
                v240 = v239;
              v241 = llround(floor(v240 * 0.25 * (double)*((unint64_t *)&v382 + 1)));
              if (v241 >= *((_QWORD *)&v382 + 1))
                v241 %= *((_QWORD *)&v382 + 1);
              *(_QWORD *)(v234 + 8 * v241) = v213;
              v189 = 3.0;
              goto LABEL_201;
            }
            v206 %= *((_QWORD *)&v382 + 1);
          }
          else
          {
            v207 = v376[1];
          }
          v208 = 0;
          do
          {
            while (1)
            {
              v209 = v208 + v206;
              if (v208 + v206 >= *((_QWORD *)&v382 + 1))
                v209 %= *((_QWORD *)&v382 + 1);
              v210 = *(_QWORD *)(v380 + 8 * v209);
              if (v210 == -1)
                break;
              ++v208;
              if (v210 != v207[v210] || v208 >= *((_QWORD *)&v382 + 1))
                goto LABEL_242;
            }
            ++v208;
          }
          while (v208 < *((_QWORD *)&v382 + 1));
          v210 = -1;
          goto LABEL_242;
        }
      }
    }
LABEL_201:
    ++v185;
    v188 = v194;
    v190 = v193;
    if (v185 != v48)
      continue;
    break;
  }
  if (v388)
    operator delete(v388);
  CoreHandwriting::filter_delaunay_edges_for_alphashape((uint64_t **)&v371, (uint64_t)&v388, v364);
  *v186 = 0;
  v186[1] = 0;
  v186[2] = 0;
  v242 = v390;
  v243 = (unint64_t)v390 + 1;
  if (v390 == (uint64_t *)-1)
  {
    v244 = 0;
    v245 = 0;
    v246 = 2;
LABEL_272:
    v368 = v246;
    v247 = 0;
    v248 = 0;
    v249 = 0;
    v250 = 0;
    v251 = 1;
    v252 = v245;
LABEL_275:
    while (++v248 != v368)
    {
      v253 = (uint64_t *)v388;
      if (v388 == &v389)
      {
        v254 = v251;
LABEL_278:
        if ((v249 & 1) != 0)
        {
          v249 = 1;
          v251 = v254;
          if (!v390)
            goto LABEL_407;
        }
        else
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v258 = (id)qword_1EF568E68;
          if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1BE607000, v258, OS_LOG_TYPE_DEBUG, "Unexpected polygon edge with no matches", (uint8_t *)&buf, 2u);
          }

          v249 = 0;
          v251 = 1;
          if (!v390)
            goto LABEL_407;
        }
      }
      else
      {
        while (1)
        {
          v255 = v253[4];
          if (v251)
          {
            v259 = (uint64_t *)((char *)*v371 + 16 * v255);
            v261 = *v259;
            v260 = v259[1];
            if (v252 < v244)
            {
              *(_QWORD *)v252 = v261;
              *((_QWORD *)v252 + 1) = v260;
              v262 = v252 + 16;
              goto LABEL_317;
            }
            v266 = (v252 - v245) >> 4;
            v267 = v266 + 1;
            if ((unint64_t)(v266 + 1) >> 60)
              sub_1BE61F930();
            if ((v244 - v245) >> 3 > v267)
              v267 = (v244 - v245) >> 3;
            if ((unint64_t)(v244 - v245) >= 0x7FFFFFFFFFFFFFF0)
              v268 = 0xFFFFFFFFFFFFFFFLL;
            else
              v268 = v267;
            if (v268)
            {
              if (v268 >> 60)
                sub_1BE61F100();
              v269 = (char *)operator new(16 * v268);
              v270 = &v269[16 * v266];
              *(_QWORD *)v270 = v261;
              *((_QWORD *)v270 + 1) = v260;
              if (v252 != v245)
              {
LABEL_312:
                v271 = v270;
                do
                {
                  v272 = v271 - 16;
                  *((_OWORD *)v271 - 1) = *((_OWORD *)v252 - 1);
                  v252 -= 16;
                  v271 -= 16;
                }
                while (v252 != v245);
                v244 = &v269[16 * v268];
                v262 = v270 + 16;
                *a2 = v272;
                a2[1] = v270 + 16;
                a2[2] = v244;
                if (v245)
LABEL_315:
                  operator delete(v245);
LABEL_316:
                v245 = v272;
LABEL_317:
                a2[1] = v262;
                v247 = v253[5];
                v273 = (uint64_t *)((char *)*v371 + 16 * v247);
                v275 = *v273;
                v274 = v273[1];
                if (v262 < v244)
                {
                  *(_QWORD *)v262 = v275;
                  *((_QWORD *)v262 + 1) = v274;
                  v252 = v262 + 16;
                  a2[1] = v262 + 16;
                  v276 = v389;
                  if (!v389)
                    goto LABEL_397;
LABEL_376:
                  v300 = v253[4];
                  v299 = v253[5];
                  v301 = &v389;
                  v302 = v276;
                  do
                  {
                    v303 = v302[4];
                    if (v303 < v300)
                    {
                      ++v302;
                    }
                    else if (v300 >= v303)
                    {
                      if (v302[5] < v299)
                        ++v302;
                      else
                        v301 = (uint64_t **)v302;
                    }
                    else
                    {
                      v301 = (uint64_t **)v302;
                    }
                    v302 = (uint64_t *)*v302;
                  }
                  while (v302);
                  if (v301 != &v389)
                  {
                    v304 = v301[4];
                    if (v300 >= (unint64_t)v304
                      && ((unint64_t)v304 < v300 || v299 >= (unint64_t)v301[5]))
                    {
                      v305 = v301[1];
                      v306 = v301;
                      if (v305)
                      {
                        do
                        {
                          v307 = (uint64_t **)v305;
                          v305 = (uint64_t *)*v305;
                        }
                        while (v305);
                      }
                      else
                      {
                        do
                        {
                          v307 = (uint64_t **)v306[2];
                          v106 = *v307 == (uint64_t *)v306;
                          v306 = v307;
                        }
                        while (!v106);
                      }
                      if (v388 == v301)
                        v388 = v307;
                      v390 = (uint64_t *)((char *)v390 - 1);
                      sub_1BE670DF8(v276, (uint64_t *)v301);
                      operator delete(v301);
                    }
                  }
LABEL_397:
                  v249 = 1;
                  v251 = 0;
                  v250 = v255;
                  if (v390)
                    goto LABEL_275;
                  goto LABEL_407;
                }
                v277 = (v262 - v245) >> 4;
                v278 = v277 + 1;
                if ((unint64_t)(v277 + 1) >> 60)
                  sub_1BE61F930();
                if ((v244 - v245) >> 3 > v278)
                  v278 = (v244 - v245) >> 3;
                if ((unint64_t)(v244 - v245) >= 0x7FFFFFFFFFFFFFF0)
                  v279 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v279 = v278;
                if (v279)
                {
                  if (v279 >> 60)
                    sub_1BE61F100();
                  v280 = (char *)operator new(16 * v279);
                  v281 = &v280[16 * v277];
                  v244 = &v280[16 * v279];
                  *(_QWORD *)v281 = v275;
                  *((_QWORD *)v281 + 1) = v274;
                  v252 = v281 + 16;
                  if (v262 == v245)
                  {
LABEL_374:
                    v298 = a2;
                    *a2 = v281;
                    a2[1] = v252;
                    a2[2] = v244;
                    goto LABEL_375;
                  }
                }
                else
                {
                  v281 = (char *)(16 * v277);
                  v244 = 0;
                  *(_QWORD *)v281 = v275;
                  *((_QWORD *)v281 + 1) = v274;
                  v252 = (char *)(16 * v277 + 16);
                  if (v262 == v245)
                    goto LABEL_374;
                }
                do
                {
                  *((_OWORD *)v281 - 1) = *((_OWORD *)v262 - 1);
                  v281 -= 16;
                  v262 -= 16;
                }
                while (v262 != v245);
                v298 = a2;
                *a2 = v281;
                a2[1] = v252;
                a2[2] = v244;
                if (!v245)
                {
                  v245 = v281;
                  a2[1] = v252;
                  v276 = v389;
                  if (v389)
                    goto LABEL_376;
                  goto LABEL_397;
                }
LABEL_375:
                operator delete(v245);
                v245 = v281;
                v298[1] = v252;
                v276 = v389;
                if (!v389)
                  goto LABEL_397;
                goto LABEL_376;
              }
            }
            else
            {
              v269 = 0;
              v270 = (char *)(16 * v266);
              *(_QWORD *)v270 = v261;
              *((_QWORD *)v270 + 1) = v260;
              if (v252 != v245)
                goto LABEL_312;
            }
            v272 = v270;
            v244 = &v269[16 * v268];
            v262 = v270 + 16;
            *a2 = v270;
            a2[1] = v270 + 16;
            a2[2] = v244;
            if (v245)
              goto LABEL_315;
            goto LABEL_316;
          }
          if (v255 == v247)
            break;
          if (v253[5] == v247)
            goto LABEL_300;
          v256 = (uint64_t *)v253[1];
          if (v256)
          {
            do
            {
              v257 = (uint64_t **)v256;
              v256 = (uint64_t *)*v256;
            }
            while (v256);
          }
          else
          {
            do
            {
              v257 = (uint64_t **)v253[2];
              v106 = *v257 == v253;
              v253 = (uint64_t *)v257;
            }
            while (!v106);
          }
          LOBYTE(v251) = 0;
          v254 = 0;
          v253 = (uint64_t *)v257;
          if (v257 == &v389)
            goto LABEL_278;
        }
        v255 = v253[5];
LABEL_300:
        if (v255 == v250)
          goto LABEL_345;
        v263 = (uint64_t *)((char *)*v371 + 16 * v255);
        v265 = *v263;
        v264 = v263[1];
        if (v252 < v244)
        {
          *(_QWORD *)v252 = v265;
          *((_QWORD *)v252 + 1) = v264;
          v252 += 16;
          goto LABEL_344;
        }
        v282 = (v252 - v245) >> 4;
        v283 = v282 + 1;
        if ((unint64_t)(v282 + 1) >> 60)
          sub_1BE61F930();
        if ((v244 - v245) >> 3 > v283)
          v283 = (v244 - v245) >> 3;
        if ((unint64_t)(v244 - v245) >= 0x7FFFFFFFFFFFFFF0)
          v284 = 0xFFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (!v284)
        {
          v285 = 0;
          v286 = (char *)(16 * v282);
          *(_QWORD *)v286 = v265;
          *((_QWORD *)v286 + 1) = v264;
          if (v252 != v245)
            goto LABEL_339;
LABEL_400:
          v288 = v286;
          v244 = &v285[16 * v284];
          v252 = v286 + 16;
          *a2 = v286;
          a2[1] = v286 + 16;
          a2[2] = v244;
          if (v245)
            goto LABEL_342;
          goto LABEL_343;
        }
        if (v284 >> 60)
          sub_1BE61F100();
        v285 = (char *)operator new(16 * v284);
        v286 = &v285[16 * v282];
        *(_QWORD *)v286 = v265;
        *((_QWORD *)v286 + 1) = v264;
        if (v252 == v245)
          goto LABEL_400;
LABEL_339:
        v287 = v286;
        do
        {
          v288 = v287 - 16;
          *((_OWORD *)v287 - 1) = *((_OWORD *)v252 - 1);
          v252 -= 16;
          v287 -= 16;
        }
        while (v252 != v245);
        v244 = &v285[16 * v284];
        v252 = v286 + 16;
        *a2 = v288;
        a2[1] = v286 + 16;
        a2[2] = v244;
        if (v245)
LABEL_342:
          operator delete(v245);
LABEL_343:
        v245 = v288;
LABEL_344:
        a2[1] = v252;
LABEL_345:
        if (v389)
        {
          v290 = v253[4];
          v289 = v253[5];
          v291 = &v389;
          v292 = v389;
          do
          {
            v293 = v292[4];
            if (v293 < v290)
            {
              ++v292;
            }
            else if (v290 >= v293)
            {
              if (v292[5] < v289)
                ++v292;
              else
                v291 = (uint64_t **)v292;
            }
            else
            {
              v291 = (uint64_t **)v292;
            }
            v292 = (uint64_t *)*v292;
          }
          while (v292);
          if (v291 != &v389)
          {
            v294 = v291[4];
            if (v290 >= (unint64_t)v294 && ((unint64_t)v294 < v290 || v289 >= (unint64_t)v291[5]))
            {
              v295 = v291[1];
              v296 = v291;
              if (v295)
              {
                do
                {
                  v297 = (uint64_t **)v295;
                  v295 = (uint64_t *)*v295;
                }
                while (v295);
              }
              else
              {
                do
                {
                  v297 = (uint64_t **)v296[2];
                  v106 = *v297 == (uint64_t *)v296;
                  v296 = v297;
                }
                while (!v106);
              }
              if (v388 == v291)
                v388 = v297;
              v390 = (uint64_t *)((char *)v390 - 1);
              sub_1BE670DF8(v389, (uint64_t *)v291);
              operator delete(v291);
            }
          }
        }
        v249 = 1;
        v247 = v255;
        v251 = v255 == v250;
        if (!v390)
          goto LABEL_407;
      }
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v308 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v308, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v368;
      _os_log_impl(&dword_1BE607000, v308, OS_LOG_TYPE_ERROR, "alphashape_polygon_from_edges is running iteration = %ld", (uint8_t *)&buf, 0xCu);
    }

  }
  else
  {
    if (v243 >> 60)
      sub_1BE61F930();
    v245 = (char *)operator new(16 * v243);
    v244 = &v245[16 * v243];
    *a2 = v245;
    a2[1] = v245;
    a2[2] = v244;
    if (v242)
    {
      v246 = 2 * (_QWORD)v242 * (_QWORD)v242;
      goto LABEL_272;
    }
  }
LABEL_407:
  v310 = (double *)*a2;
  v309 = (double *)a2[1];
  v311 = (char *)v309 - *a2;
  if ((unint64_t)v311 >= 0x21)
  {
    v312 = (unint64_t)a2[2];
    if ((unint64_t)v309 < v312)
    {
      *(_OWORD *)v309 = *(_OWORD *)v310;
      v313 = v309 + 2;
      goto LABEL_424;
    }
    v314 = v311 >> 4;
    v315 = (v311 >> 4) + 1;
    if (v315 >> 60)
      sub_1BE61F930();
    v316 = v312 - (_QWORD)v310;
    if (v316 >> 3 > v315)
      v315 = v316 >> 3;
    if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF0)
      v317 = 0xFFFFFFFFFFFFFFFLL;
    else
      v317 = v315;
    if (v317)
    {
      if (v317 >> 60)
        sub_1BE61F100();
      v318 = (char *)operator new(16 * v317);
    }
    else
    {
      v318 = 0;
    }
    v319 = &v318[16 * v314];
    v320 = &v318[16 * v317];
    *(_OWORD *)v319 = *(_OWORD *)v310;
    v313 = (double *)(v319 + 16);
    if (v309 == v310)
    {
      *a2 = v319;
      a2[1] = (char *)v313;
      a2[2] = v320;
      if (v309)
        goto LABEL_423;
    }
    else
    {
      do
      {
        *((_OWORD *)v319 - 1) = *((_OWORD *)v309 - 1);
        v319 -= 16;
        v309 -= 2;
      }
      while (v309 != v310);
      v309 = (double *)*a2;
      *a2 = v319;
      a2[1] = (char *)v313;
      a2[2] = v320;
      if (v309)
LABEL_423:
        operator delete(v309);
    }
LABEL_424:
    a2[1] = (char *)v313;
    v321 = (double *)*a2;
    if (*a2 == (char *)v313)
    {
      v329 = -INFINITY;
      v330 = -INFINITY;
    }
    else
    {
      v322 = 1.79769313e308;
      v323 = -1.79769313e308;
      v324 = -1.79769313e308;
      v325 = 1.79769313e308;
      v326 = (double *)*a2;
      do
      {
        v327 = *v326;
        v328 = v326[1];
        v326 += 2;
        if (v325 > v327)
          v325 = v327;
        if (v324 < v327)
          v324 = v327;
        if (v322 > v328)
          v322 = v328;
        if (v323 < v328)
          v323 = v328;
      }
      while (v326 != v313);
      v329 = v324 - v325;
      v330 = v323 - v322;
    }
    buf = 0uLL;
    v392 = 0.0;
    v331 = (char *)operator new(0x10uLL);
    v332 = v331 + 16;
    *(_OWORD *)v331 = *(_OWORD *)v321;
    *((_QWORD *)&buf + 1) = v331 + 16;
    *(_QWORD *)&v392 = v331 + 16;
    *(_QWORD *)&buf = v331;
    if (v321 == v313)
      goto LABEL_483;
    v369 = fmax(v329, v330) / 30.0;
    v333 = v369 * 1.33;
    while (1)
    {
      v335 = *((double *)v332 - 2);
      v336 = *((double *)v332 - 1);
      v337 = v321[1];
      v338 = sqrt((v336 - v337) * (v336 - v337) + (v335 - *v321) * (v335 - *v321));
      if (v338 >= v333)
      {
        v345 = fmin(floor(v338 / v333), 4.0);
        if (v345 < 1.0)
          goto LABEL_441;
        v346 = (*v321 - v335) / v345;
        v347 = v337 - v336;
        v348 = 1.0;
        v349 = (double *)v332;
        v350 = 1;
        v351 = v347 / v345;
        while (2)
        {
          v352 = v335 + v346 * v348;
          v353 = v336 + v351 * v348;
          if ((unint64_t)v349 < *(_QWORD *)&v392)
          {
            *v349 = v352;
            v349[1] = v353;
            v332 = (char *)(v349 + 2);
            goto LABEL_457;
          }
          v354 = (double *)buf;
          v355 = (uint64_t)((uint64_t)v349 - buf) >> 4;
          v356 = v355 + 1;
          if ((unint64_t)(v355 + 1) >> 60)
            sub_1BE61F930();
          v357 = *(_QWORD *)&v392 - buf;
          if ((uint64_t)(*(_QWORD *)&v392 - buf) >> 3 > v356)
            v356 = v357 >> 3;
          if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF0)
            v358 = 0xFFFFFFFFFFFFFFFLL;
          else
            v358 = v356;
          if (v358)
          {
            if (v358 >> 60)
              sub_1BE61F100();
            v359 = (char *)operator new(16 * v358);
            v360 = (double *)&v359[16 * v355];
            *v360 = v352;
            v360[1] = v353;
            v361 = (uint64_t)v360;
            if (v349 == v354)
            {
LABEL_473:
              v332 = (char *)(v360 + 2);
              *(_QWORD *)&buf = v361;
              *((_QWORD *)&buf + 1) = v360 + 2;
              *(_QWORD *)&v392 = &v359[16 * v358];
              if (v349)
                goto LABEL_474;
              goto LABEL_457;
            }
          }
          else
          {
            v359 = 0;
            v360 = (double *)(16 * v355);
            *v360 = v352;
            v360[1] = v353;
            v361 = 16 * v355;
            if (v349 == v354)
              goto LABEL_473;
          }
          do
          {
            *(_OWORD *)(v361 - 16) = *((_OWORD *)v349 - 1);
            v361 -= 16;
            v349 -= 2;
          }
          while (v349 != v354);
          v349 = (double *)buf;
          v332 = (char *)(v360 + 2);
          *(_QWORD *)&buf = v361;
          *((_QWORD *)&buf + 1) = v360 + 2;
          *(_QWORD *)&v392 = &v359[16 * v358];
          if (v349)
LABEL_474:
            operator delete(v349);
LABEL_457:
          *((_QWORD *)&buf + 1) = v332;
          v348 = (double)++v350;
          v349 = (double *)v332;
          if (v345 < (double)v350)
            goto LABEL_441;
          continue;
        }
      }
      if (v338 >= v369)
        break;
LABEL_441:
      v321 += 2;
      if (v321 == v313)
      {
        v331 = (char *)buf;
LABEL_483:
        if (&buf != (__int128 *)a2)
        {
          sub_1BE6F5A88(a2, v331, v332, (v332 - v331) >> 4);
          v331 = (char *)buf;
        }
        if (v331)
        {
          *((_QWORD *)&buf + 1) = v331;
          operator delete(v331);
        }
        goto LABEL_487;
      }
    }
    if ((unint64_t)v332 < *(_QWORD *)&v392)
    {
      *(_OWORD *)v332 = *(_OWORD *)v321;
      v334 = v332 + 16;
    }
    else
    {
      v339 = (char *)buf;
      v340 = (uint64_t)&v332[-buf] >> 4;
      v341 = v340 + 1;
      if ((unint64_t)(v340 + 1) >> 60)
        sub_1BE61F930();
      v342 = *(_QWORD *)&v392 - buf;
      if ((uint64_t)(*(_QWORD *)&v392 - buf) >> 3 > v341)
        v341 = v342 >> 3;
      if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF0)
        v343 = 0xFFFFFFFFFFFFFFFLL;
      else
        v343 = v341;
      if (v343)
      {
        if (v343 >> 60)
          sub_1BE61F100();
        v344 = (char *)operator new(16 * v343);
      }
      else
      {
        v344 = 0;
      }
      v362 = &v344[16 * v340];
      *(_OWORD *)v362 = *(_OWORD *)v321;
      v334 = v362 + 16;
      if (v332 == v339)
      {
        *(_QWORD *)&buf = v362;
        *((_QWORD *)&buf + 1) = v362 + 16;
        *(_QWORD *)&v392 = &v344[16 * v343];
      }
      else
      {
        do
        {
          *((_OWORD *)v362 - 1) = *((_OWORD *)v332 - 1);
          v362 -= 16;
          v332 -= 16;
        }
        while (v332 != v339);
        v332 = (char *)buf;
        *(_QWORD *)&buf = v362;
        *((_QWORD *)&buf + 1) = v334;
        *(_QWORD *)&v392 = &v344[16 * v343];
        if (!v332)
          goto LABEL_440;
      }
      operator delete(v332);
    }
LABEL_440:
    *((_QWORD *)&buf + 1) = v334;
    v332 = v334;
    goto LABEL_441;
  }
LABEL_487:
  sub_1BE671438(v389);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v380)
  {
    *((_QWORD *)&v380 + 1) = v380;
    operator delete((void *)v380);
  }
  if (v378[0])
  {
    v378[1] = v378[0];
    operator delete(v378[0]);
  }
  if (v376[1])
  {
    *(void **)&v377 = v376[1];
    operator delete(v376[1]);
  }
  if (v375[0])
  {
    v375[1] = v375[0];
    operator delete(v375[0]);
  }
  if (v373[1])
  {
    *(void **)&v374 = v373[1];
    operator delete(v373[1]);
  }
  if (v372[0])
  {
    v372[1] = v372[0];
    operator delete(v372[0]);
  }
  if (v385)
  {
    v386 = v385;
    operator delete(v385);
  }
}

void sub_1BE7F8668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;
  void *v48;
  void *v49;

  v49 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v49;
    operator delete(v49);
  }
  sub_1BE671438(*(_QWORD **)(v45 - 208));
  sub_1BE7FE818(&a21);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *(_QWORD *)(a20 + 8) = 0;
    *(_QWORD *)(a20 + 16) = 0;
    *(_QWORD *)a20 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BE7F84D4);
  }
  v48 = *(void **)(v45 - 240);
  if (!v48)
    _Unwind_Resume(a1);
  *(_QWORD *)(v45 - 232) = v48;
  operator delete(v48);
  _Unwind_Resume(a1);
}

double CoreHandwriting::boundingBoxAsRect(CoreHandwriting *this, const CoreHandwriting::BoundingBox *a2)
{
  return *(double *)this;
}

double CoreHandwriting::scale(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a7 * ((a1 - a3) / fmax(a4 - a3, a6 - a5));
}

id sub_1BE7F8854(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], a2, (uint64_t)CFSTR("["), a4, a5, a6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (_QWORD *)*a1;
  v14 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v14)
  {
    do
    {
      objc_msgSend_appendFormat_(v12, v7, (uint64_t)CFSTR("(%.3f, %.3f),"), v9, v10, v11, *v13, v13[1]);
      v13 += 2;
    }
    while (v13 != v14);
  }
  v15 = objc_msgSend_length(v12, v7, v8, v9, v10, v11);
  objc_msgSend_deleteCharactersInRange_(v12, v16, v15 - 1, 1, v17, v18);
  objc_msgSend_appendString_(v12, v19, (uint64_t)CFSTR("]"), v20, v21, v22);
  return v12;
}

void sub_1BE7F88FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7F890C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CoreHandwriting::principalLinesDescription(CoreHandwriting *this, const CoreHandwriting::PrincipalLines *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], (const char *)a2, (uint64_t)CFSTR("{"), a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB3940];
  sub_1BE7F8854((_QWORD *)this + 9, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v8, v15, (uint64_t)CFSTR(" t: %@"), v16, v17, v18, v14);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v7, v20, (uint64_t)v19, v21, v22, v23);

  v24 = (void *)MEMORY[0x1E0CB3940];
  sub_1BE7F8854((_QWORD *)this + 6, v25, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v24, v31, (uint64_t)CFSTR(" m: %@"), v32, v33, v34, v30);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v7, v36, (uint64_t)v35, v37, v38, v39);

  v40 = (void *)MEMORY[0x1E0CB3940];
  sub_1BE7F8854((_QWORD *)this + 3, v41, v42, v43, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v40, v47, (uint64_t)CFSTR(" b: %@"), v48, v49, v50, v46);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v7, v52, (uint64_t)v51, v53, v54, v55);

  v56 = (void *)MEMORY[0x1E0CB3940];
  sub_1BE7F8854(this, v57, v58, v59, v60, v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v56, v63, (uint64_t)CFSTR(" d: %@"), v64, v65, v66, v62);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v7, v68, (uint64_t)v67, v69, v70, v71);

  objc_msgSend_appendString_(v7, v72, (uint64_t)CFSTR("}"), v73, v74, v75);
  return v7;
}

void sub_1BE7F8A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7F8AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7F8B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE7F8B1C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD v5[59];

  sub_1BE7FBA2C((uint64_t)v5, a1, a2);
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  CoreHandwriting::CPDAffineRegistration::run((CoreHandwriting::CPDAffineRegistration *)v5, a3);
  return sub_1BE7FE8A8(v5);
}

void sub_1BE7F8B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7FE8A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 CoreHandwriting::CPDAffineRegistration::run@<Q0>(CoreHandwriting::CPDAffineRegistration *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  double *v16;
  double *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  _OWORD *v21;
  __n128 *v22;
  __int128 v23;
  __n128 result;

  v4 = *((_QWORD *)this + 11);
  if (v4)
  {
    v6 = *((_QWORD *)this + 41);
    v5 = (double *)*((_QWORD *)this + 42);
    v7 = (double *)*((_QWORD *)this + 45);
    v8 = (double *)(*((_QWORD *)this + 15) + 8);
    v9 = 8 * *((_QWORD *)this + 14);
    v10 = (double *)(*((_QWORD *)this + 8) + 8);
    v11 = 8 * *((_QWORD *)this + 7);
    do
    {
      *(v8 - 1) = *v7 + *v10 * v5[v6] + *(v10 - 1) * *v5;
      *v8 = v7[1] + *v10 * v5[v6 + 1] + *(v10 - 1) * v5[1];
      v8 = (double *)((char *)v8 + v9);
      v10 = (double *)((char *)v10 + v11);
      --v4;
    }
    while (v4);
  }
  if (*((int *)this + 116) >= 1)
  {
    v12 = 0;
    do
    {
      if (*((double *)this + 49) <= *((double *)this + 56))
        break;
      CoreHandwriting::CPDAffineRegistration::expectation(this);
      CoreHandwriting::CPDAffineRegistration::update_transform(this);
      v13 = *((_QWORD *)this + 11);
      if (v13)
      {
        v15 = *((_QWORD *)this + 41);
        v14 = (double *)*((_QWORD *)this + 42);
        v16 = (double *)*((_QWORD *)this + 45);
        v17 = (double *)(*((_QWORD *)this + 15) + 8);
        v18 = 8 * *((_QWORD *)this + 14);
        v19 = (double *)(*((_QWORD *)this + 8) + 8);
        v20 = 8 * *((_QWORD *)this + 7);
        do
        {
          *(v17 - 1) = *v16 + *v19 * v14[v15] + *(v19 - 1) * *v14;
          *v17 = v16[1] + *v19 * v14[v15 + 1] + *(v19 - 1) * v14[1];
          v17 = (double *)((char *)v17 + v18);
          v19 = (double *)((char *)v19 + v20);
          --v13;
        }
        while (v13);
      }
      CoreHandwriting::CPDAffineRegistration::update_variance(this);
      ++v12;
    }
    while (v12 < *((_DWORD *)this + 116));
  }
  v21 = (_OWORD *)*((_QWORD *)this + 42);
  v22 = (__n128 *)*((_QWORD *)this + 45);
  v23 = *(_OWORD *)((char *)v21 + 8 * *((_QWORD *)this + 41));
  *a2 = *v21;
  a2[1] = v23;
  result = *v22;
  a2[2] = *v22;
  return result;
}

void sub_1BE7F8D14(double **a1@<X0>, float64x2_t *a2@<X1>, float64x2_t **a3@<X8>)
{
  double *v3;
  double *v4;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;
  unint64_t v10;
  float64x2_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v7 = 0;
    while (1)
    {
      v9 = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_n_f64(a2[1], v3[1]), *a2, *v3));
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v10)
        break;
      *v7 = v9;
      v8 = v7 + 1;
LABEL_4:
      a3[1] = v8;
      v3 += 2;
      v7 = v8;
      if (v3 == v4)
        return;
    }
    v11 = *a3;
    v12 = v7 - *a3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_1BE61F930();
    v14 = v10 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v19 = v9;
      if (v15 >> 60)
        sub_1BE61F100();
      v16 = (char *)operator new(16 * v15);
      v17 = (float64x2_t *)&v16[16 * v12];
      *v17 = v19;
      v8 = v17 + 1;
      if (v7 == v11)
        goto LABEL_19;
    }
    else
    {
      v16 = 0;
      v17 = (float64x2_t *)(16 * v12);
      v18 = (float64x2_t *)(16 * v12);
      *v18 = v9;
      v8 = v18 + 1;
      if (v7 == v11)
      {
LABEL_19:
        *a3 = v17;
        a3[1] = v8;
        a3[2] = (float64x2_t *)&v16[16 * v15];
        if (v7)
          operator delete(v7);
        goto LABEL_4;
      }
    }
    do
    {
      v17[-1] = v7[-1];
      --v17;
      --v7;
    }
    while (v7 != v11);
    v7 = *a3;
    goto LABEL_19;
  }
}

void sub_1BE7F8E8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

double CoreHandwriting::transformPrincipalLines@<D0>(double **this@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;

  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1BE7F8D14(this, a2, (float64x2_t **)&v12);
  v7 = v13;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v7;
  sub_1BE7F8D14(this + 3, a2, (float64x2_t **)&v12);
  v8 = v13;
  *(_OWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 40) = v8;
  sub_1BE7F8D14(this + 6, a2, (float64x2_t **)&v12);
  v9 = v13;
  *(_OWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 64) = v9;
  sub_1BE7F8D14(this + 9, a2, (float64x2_t **)&v12);
  v10 = v13;
  result = *(double *)&v12;
  *(_OWORD *)(a3 + 72) = v12;
  *(_QWORD *)(a3 + 88) = v10;
  return result;
}

void sub_1BE7F8F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F8F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F8F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F8FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7F8FC0(uint64_t *a1, double *a2, double *a3, double a4)
{
  double v5;
  double v6;
  double *v8;
  double *v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  v5 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2 != a3)
  {
    v8 = a2;
    v10 = 0;
    v11 = v5 - v6 * a4;
    while (1)
    {
      v13 = *v8;
      v14 = v11 + *v8 * a4;
      v15 = a1[2];
      if ((unint64_t)v10 >= v15)
        break;
      *v10 = v13;
      v10[1] = v14;
      v12 = v10 + 2;
LABEL_4:
      a1[1] = (uint64_t)v12;
      v8 += 2;
      v10 = v12;
      if (v8 == a3)
        return;
    }
    v16 = (double *)*a1;
    v17 = ((uint64_t)v10 - *a1) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_1BE61F930();
    v19 = v15 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_1BE61F100();
      v21 = (char *)operator new(16 * v20);
      v22 = (uint64_t)&v21[16 * v17];
      *(double *)v22 = v13;
      *(double *)(v22 + 8) = v14;
      v23 = v22;
      if (v10 == v16)
      {
LABEL_15:
        v12 = (double *)(v22 + 16);
        *a1 = v23;
        a1[1] = v22 + 16;
        a1[2] = (uint64_t)&v21[16 * v20];
        if (!v10)
          goto LABEL_4;
        goto LABEL_20;
      }
    }
    else
    {
      v21 = 0;
      v22 = 16 * v17;
      *(double *)v22 = v13;
      *(double *)(v22 + 8) = v14;
      v23 = 16 * v17;
      if (v10 == v16)
        goto LABEL_15;
    }
    do
    {
      *(_OWORD *)(v23 - 16) = *((_OWORD *)v10 - 1);
      v23 -= 16;
      v10 -= 2;
    }
    while (v10 != v16);
    v10 = (double *)*a1;
    v12 = (double *)(v22 + 16);
    *a1 = v23;
    a1[1] = v22 + 16;
    a1[2] = (uint64_t)&v21[16 * v20];
    if (!v10)
      goto LABEL_4;
LABEL_20:
    operator delete(v10);
    goto LABEL_4;
  }
}

void sub_1BE7F914C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::getDesiredPrincipalLines(CoreHandwriting *this@<X0>, long double a2@<D0>, uint64_t a3@<X8>)
{
  CoreHandwriting *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CoreHandwriting *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat d;
  double v19;
  long double v20;
  __int128 v21;
  double *v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double *v27;
  void *v28;
  void *v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v6 = this;
  v12 = v6;
  if (v6)
  {
    objc_msgSend_principalLines(v6, v7, v8, v9, v10, v11);
    objc_msgSend_principalLines(v12, v13, v14, v15, v16, v17);
    d = v36.d;
    memset(&v36.d, 0, 24);
    if (*((_QWORD *)&v38 + 1))
    {
      *(_QWORD *)&v39 = *((_QWORD *)&v38 + 1);
      operator delete(*((void **)&v38 + 1));
    }
    if ((_QWORD)v37)
    {
      *((_QWORD *)&v37 + 1) = v37;
      operator delete((void *)v37);
    }
  }
  else
  {
    d = 0.0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
  }
  if (*(_QWORD *)&v36.d)
  {
    v36.tx = v36.d;
    operator delete(*(void **)&v36.d);
  }
  if (*(_QWORD *)&v36.a)
  {
    v36.b = v36.a;
    operator delete(*(void **)&v36.a);
  }
  objc_msgSend_orientation(v12, v7, v8, v9, v10, v11);
  if (vabdd_f64(a2, v19) > 0.1)
  {
    v20 = a2 - v19 + dbl_1BE8DFB90[a2 - v19 > 0.0];
    memset(&v36, 0, sizeof(v36));
    v21 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v33.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v33.c = v21;
    *(_OWORD *)&v33.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    CGAffineTransformTranslate(&v34, &v33, -**(double **)&d, -*(double *)(*(_QWORD *)&d + 8));
    CGAffineTransformRotate(&v35, &v34, -v20);
    CGAffineTransformTranslate(&v36, &v35, **(CGFloat **)&d, *(CGFloat *)(*(_QWORD *)&d + 8));
    sub_1BE7F8D14((double **)a3, (float64x2_t *)&v36, (float64x2_t **)&v31);
    v22 = *(double **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v22;
      operator delete(v22);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_OWORD *)a3 = v31;
    *(_QWORD *)(a3 + 16) = v32;
    sub_1BE7F8D14((double **)(a3 + 24), (float64x2_t *)&v36, (float64x2_t **)&v31);
    v23 = *(void **)(a3 + 24);
    if (v23)
    {
      *(_QWORD *)(a3 + 32) = v23;
      operator delete(v23);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_OWORD *)(a3 + 24) = v31;
    *(_QWORD *)(a3 + 40) = v32;
    sub_1BE7F8D14((double **)(a3 + 48), (float64x2_t *)&v36, (float64x2_t **)&v31);
    v24 = *(void **)(a3 + 48);
    if (v24)
    {
      *(_QWORD *)(a3 + 56) = v24;
      operator delete(v24);
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = v31;
    *(_QWORD *)(a3 + 64) = v32;
    sub_1BE7F8D14((double **)(a3 + 72), (float64x2_t *)&v36, (float64x2_t **)&v31);
    v25 = *(void **)(a3 + 72);
    if (v25)
    {
      *(_QWORD *)(a3 + 80) = v25;
      operator delete(v25);
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
    }
    *(_OWORD *)(a3 + 72) = v31;
    *(_QWORD *)(a3 + 88) = v32;
  }
  v26 = -tan(a2);
  sub_1BE7F8FC0((uint64_t *)&v36, *(double **)a3, *(double **)(a3 + 8), v26);
  v27 = *(double **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v27;
    operator delete(v27);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 16) = v36.c;
  sub_1BE7F8FC0((uint64_t *)&v36, *(double **)(a3 + 24), *(double **)(a3 + 32), v26);
  v28 = *(void **)(a3 + 24);
  if (v28)
  {
    *(_QWORD *)(a3 + 32) = v28;
    operator delete(v28);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 40) = v36.c;
  sub_1BE7F8FC0((uint64_t *)&v36, *(double **)(a3 + 48), *(double **)(a3 + 56), v26);
  v29 = *(void **)(a3 + 48);
  if (v29)
  {
    *(_QWORD *)(a3 + 56) = v29;
    operator delete(v29);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  *(_OWORD *)(a3 + 48) = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 64) = v36.c;
  sub_1BE7F8FC0((uint64_t *)&v36, *(double **)(a3 + 72), *(double **)(a3 + 80), v26);
  v30 = *(void **)(a3 + 72);
  if (v30)
  {
    *(_QWORD *)(a3 + 80) = v30;
    operator delete(v30);
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 88) = v36.c;
  if (d != 0.0)
    operator delete(*(void **)&d);

}

void sub_1BE7F94D8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  operator delete(v3);
  sub_1BE6F2154(v2);

  _Unwind_Resume(a1);
}

void CoreHandwriting::getAffineTransformation(double **this@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v25;
  __int128 v26;
  double *v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  double *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  double *v59;
  unint64_t *v60;
  uint64_t v61;
  double *v62;
  _QWORD *v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  _QWORD v77[5];
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[3];
  __int128 v109;
  __int128 v110;
  unsigned __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[24];

  v125[21] = *MEMORY[0x1E0C80C00];
  v5 = *this;
  v4 = this[1];
  v6 = *a2;
  v7 = a2[1];
  if ((char *)v4 - (char *)*this == (char *)v7 - (char *)*a2)
  {
    v8 = *this;
    if (v5 == v4 || v6 == v7)
    {
LABEL_7:
      if (v8 == v4 && v6 == v7)
      {
        v10 = this[3];
        v11 = this[4];
        v12 = a2[3];
        v13 = a2[4];
        if ((char *)v11 - (char *)v10 == (char *)v13 - (char *)v12)
        {
          if (v10 != v11)
          {
            while (v12 != v13)
            {
              if (*v10 != *v12 || v10[1] != v12[1])
                goto LABEL_51;
              v10 += 2;
              v12 += 2;
              if (v10 == v11)
                break;
            }
          }
          if (v10 == v11 && v12 == v13)
          {
            v15 = this[6];
            v16 = this[7];
            v17 = a2[6];
            v18 = a2[7];
            if ((char *)v16 - (char *)v15 == (char *)v18 - (char *)v17)
            {
              if (v15 != v16)
              {
                while (v17 != v18)
                {
                  if (*v15 != *v17 || v15[1] != v17[1])
                    goto LABEL_51;
                  v15 += 2;
                  v17 += 2;
                  if (v15 == v16)
                    break;
                }
              }
              if (v15 == v16 && v17 == v18)
              {
                v20 = this[9];
                v21 = this[10];
                v22 = a2[9];
                v23 = a2[10];
                if ((char *)v21 - (char *)v20 == (char *)v23 - (char *)v22)
                {
                  if (v20 != v21)
                  {
                    while (v22 != v23)
                    {
                      if (*v20 != *v22 || v20[1] != v22[1])
                        goto LABEL_51;
                      v20 += 2;
                      v22 += 2;
                      if (v20 == v21)
                        break;
                    }
                  }
                  if (v20 == v21 && v22 == v23)
                  {
                    v25 = MEMORY[0x1E0C9BAA8];
                    v26 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
                    *(_OWORD *)a3 = *MEMORY[0x1E0C9BAA8];
                    *(_OWORD *)(a3 + 16) = v26;
                    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v25 + 32);
                    return;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      while (*v8 == *v6 && v8[1] == v6[1])
      {
        v8 += 2;
        v6 += 2;
        if (v8 == v4 || v6 == v7)
          goto LABEL_7;
      }
    }
  }
LABEL_51:
  v28 = this[9];
  v30 = *((_QWORD *)v28 + 1);
  v29 = *v28;
  v77[0] = v30;
  v77[1] = 0x3FF0000000000000;
  memset(&v77[2], 0, 24);
  v32 = *((_QWORD *)v28 + 3);
  v78 = *((_QWORD *)v28 + 2);
  v31 = v78;
  v79 = v32;
  v80 = 0x3FF0000000000000;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v34 = *((_QWORD *)v5 + 1);
  v84 = *(_QWORD *)v5;
  v33 = v84;
  v85 = v34;
  v86 = 0x3FF0000000000000;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = v29;
  v91 = v30;
  v92 = 0x3FF0000000000000;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = v78;
  v97 = v32;
  v98 = 0x3FF0000000000000;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = v84;
  v103 = v34;
  v104 = 0x3FF0000000000000;
  *(_QWORD *)&v105 = v32;
  *((_QWORD *)&v105 + 1) = 0x3FF0000000000000;
  v106 = 0uLL;
  *(_QWORD *)&v107 = 0;
  *((_QWORD *)&v107 + 1) = v34;
  memset((char *)v108 + 8, 0, 40);
  *(_QWORD *)&v108[0] = 0x3FF0000000000000;
  *(double *)&v109 = v29;
  *((_QWORD *)&v109 + 1) = v30;
  v111 = __PAIR128__(v78, 0);
  v110 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v112 = v32;
  v113 = 0uLL;
  *((_QWORD *)&v112 + 1) = 0x3FF0000000000000;
  *(_QWORD *)&v114 = v84;
  *((_QWORD *)&v114 + 1) = v34;
  *(_QWORD *)&v115 = 0x3FF0000000000000;
  v35 = 0;
  v36 = v29 * sub_1BE8002FC((double *)&v105) + 0.0;
  do
  {
    *(_QWORD *)&v105 = v31;
    if (!v35)
    {
      *((_QWORD *)&v105 + 1) = 0x3FF0000000000000;
      *(_QWORD *)&v107 = 0;
      v106 = 0uLL;
      *((_QWORD *)&v107 + 1) = v33;
      *(_QWORD *)&v108[0] = 0x3FF0000000000000;
      memset((char *)v108 + 8, 0, 40);
      *(double *)&v109 = v29;
      *((_QWORD *)&v109 + 1) = v30;
      v110 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v111 = 0;
      *((_QWORD *)&v111 + 1) = v31;
      *(_QWORD *)&v112 = v32;
      *((_QWORD *)&v112 + 1) = 0x3FF0000000000000;
      v113 = 0uLL;
      *(_QWORD *)&v114 = v33;
      *((_QWORD *)&v114 + 1) = v34;
      v41 = 4;
      goto LABEL_64;
    }
    *((_QWORD *)&v105 + 1) = v32;
    if (v35 == 1)
    {
      v106 = 0uLL;
      *(_QWORD *)&v107 = 0;
      *((_QWORD *)&v107 + 1) = v33;
      *(_QWORD *)&v108[0] = v34;
      memset((char *)v108 + 8, 0, 40);
      *(double *)&v109 = v29;
      *((_QWORD *)&v109 + 1) = v30;
      v110 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v111 = 0;
      *((_QWORD *)&v111 + 1) = v31;
      *(_QWORD *)&v112 = v32;
      *((_QWORD *)&v112 + 1) = 0x3FF0000000000000;
      v37 = 2;
      v113 = 0uLL;
      goto LABEL_56;
    }
    *(_QWORD *)&v106 = 0x3FF0000000000000;
    if (v35 == 2)
    {
      *((_QWORD *)&v106 + 1) = 0;
      *(_QWORD *)&v107 = 0;
      *((_QWORD *)&v107 + 1) = v33;
      *(_QWORD *)&v108[0] = v34;
      *((_QWORD *)&v108[0] + 1) = 0x3FF0000000000000;
      memset(&v108[1], 0, 32);
      v39 = 3;
      *(_QWORD *)&v109 = 0;
      goto LABEL_59;
    }
    *((_QWORD *)&v106 + 1) = 0;
    *(_QWORD *)&v107 = 0;
    if (v35 == 3)
    {
      *((_QWORD *)&v107 + 1) = v33;
      *(_QWORD *)&v108[0] = v34;
      *((_QWORD *)&v108[0] + 1) = 0x3FF0000000000000;
      memset(&v108[1], 0, 32);
      *(_QWORD *)&v109 = 0;
      *((double *)&v109 + 1) = v29;
      v110 = 0x3FF0000000000000uLL;
      v111 = 0uLL;
      *(_QWORD *)&v112 = v31;
      *((_QWORD *)&v112 + 1) = 0x3FF0000000000000;
      *(_QWORD *)&v114 = 0;
      v113 = 0uLL;
      v41 = 4;
      *((_QWORD *)&v114 + 1) = v33;
      goto LABEL_64;
    }
    *((_QWORD *)&v107 + 1) = v33;
    *(_QWORD *)&v108[0] = v34;
    *((_QWORD *)&v108[0] + 1) = 0x3FF0000000000000;
    memset(&v108[1], 0, 32);
    *(_QWORD *)&v109 = 0;
    *((double *)&v109 + 1) = v29;
    if (v35 != 4)
    {
      v39 = 4;
LABEL_59:
      v40 = (char *)&v105 + 8 * v39;
      *((_QWORD *)v40 + 10) = v30;
      *((_QWORD *)v40 + 11) = 0x3FF0000000000000;
      *((_QWORD *)&v110 + 1) = 0;
      v111 = 0uLL;
      if (v35 == 2)
      {
        *(_QWORD *)&v112 = v32;
        *((_QWORD *)&v112 + 1) = 0x3FF0000000000000;
        *(_QWORD *)&v114 = 0;
        v113 = 0uLL;
        v41 = 4;
        *((_QWORD *)&v114 + 1) = v34;
        goto LABEL_64;
      }
      *(_QWORD *)&v112 = v31;
      *((_QWORD *)&v112 + 1) = v32;
      v113 = 0uLL;
      *(_QWORD *)&v114 = 0;
      v37 = 3;
LABEL_56:
      v38 = (char *)&v105 + 8 * v37;
      *((_QWORD *)v38 + 20) = v33;
      *((_QWORD *)v38 + 21) = v34;
      v41 = v37 + 2;
LABEL_64:
      *((_QWORD *)&v113 + v41) = 0x3FF0000000000000;
      goto LABEL_65;
    }
    v111 = 0uLL;
    v110 = (unint64_t)v30;
    *(_QWORD *)&v112 = v31;
    *((_QWORD *)&v112 + 1) = v32;
    *(_QWORD *)&v114 = 0;
    v113 = 0uLL;
    *((_QWORD *)&v114 + 1) = v33;
    *(_QWORD *)&v115 = v34;
LABEL_65:
    v42 = sub_1BE8002FC((double *)&v105);
    if ((((_BYTE)v35 + 1) & 1) != 0)
      v42 = -v42;
    v36 = v36 + *(double *)&v77[v35++] * v42;
  }
  while (v35 != 5);
  if (v36 == 0.0)
  {
    *(_QWORD *)&v105 = &off_1E77F1310;
    sub_1BE8002C8();
  }
  v43 = 0;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  memset(v108, 0, sizeof(v108));
  v44 = &v105;
  v105 = 0u;
  v106 = 0u;
  while (2)
  {
    v45 = 0;
    v46 = v43;
    while (2)
    {
      if (!(v45 * 16))
      {
        v50 = 0;
        goto LABEL_99;
      }
      if (!v43)
      {
        v121 = *(double *)&v30;
        goto LABEL_93;
      }
      v121 = v29;
      if (v43 == 1)
      {
LABEL_93:
        v122 = 0x3FF0000000000000;
        goto LABEL_94;
      }
      v122 = v30;
      if (v43 == 2)
      {
LABEL_94:
        v123 = 0;
        goto LABEL_95;
      }
      v123 = 0x3FF0000000000000;
      if (v43 == 3)
      {
LABEL_95:
        v124 = 0;
        goto LABEL_96;
      }
      v124 = 0;
      if (v43 != 4)
      {
        v125[0] = 0;
        if (v43 != 5)
        {
          v49 = 5;
          goto LABEL_97;
        }
        goto LABEL_98;
      }
LABEL_96:
      v49 = 4;
LABEL_97:
      *(&v121 + v49) = 0.0;
LABEL_98:
      v50 = 1;
      v51 = 1;
      if (v45 == 3)
        goto LABEL_113;
LABEL_99:
      v52 = &v121 + 5 * v50;
      if (!v43)
      {
        *(_QWORD *)v52 = v32;
        goto LABEL_107;
      }
      *(_QWORD *)v52 = v31;
      if (v43 == 1)
      {
LABEL_107:
        *(&v121 + 5 * v50 + 1) = 1.0;
        goto LABEL_108;
      }
      *((_QWORD *)&v121 + 5 * v50 + 1) = v32;
      if (v43 == 2)
      {
LABEL_108:
        *(&v123 + 5 * v50) = 0;
        goto LABEL_109;
      }
      *(&v123 + 5 * v50) = 0x3FF0000000000000;
      if (v43 == 3)
      {
LABEL_109:
        v125[5 * v50 - 1] = 0;
        goto LABEL_110;
      }
      v125[5 * v50 - 1] = 0;
      if (v43 != 4)
      {
        v125[5 * v50] = 0;
        if (v43 != 5)
        {
          v53 = 5;
          goto LABEL_111;
        }
        goto LABEL_112;
      }
LABEL_110:
      v53 = 4;
LABEL_111:
      *(&v121 + 5 * v50 + v53) = 0.0;
LABEL_112:
      v51 = v50 + 1;
      if (v45 == 6)
        goto LABEL_127;
LABEL_113:
      v54 = &v121 + 5 * v51;
      if (!v43)
      {
        *(_QWORD *)v54 = v34;
        goto LABEL_121;
      }
      *(_QWORD *)v54 = v33;
      if (v43 == 1)
      {
LABEL_121:
        *(&v121 + 5 * v51 + 1) = 1.0;
        goto LABEL_122;
      }
      *((_QWORD *)&v121 + 5 * v51 + 1) = v34;
      if (v43 == 2)
      {
LABEL_122:
        *(&v123 + 5 * v51) = 0;
        goto LABEL_123;
      }
      *(&v123 + 5 * v51) = 0x3FF0000000000000;
      if (v43 == 3)
      {
LABEL_123:
        v125[5 * v51 - 1] = 0;
        goto LABEL_124;
      }
      v125[5 * v51 - 1] = 0;
      if (v43 != 4)
      {
        v125[5 * v51] = 0;
        if (v43 != 5)
        {
          v55 = 5;
          goto LABEL_125;
        }
        goto LABEL_126;
      }
LABEL_124:
      v55 = 4;
LABEL_125:
      *(&v121 + 5 * v51 + v55) = 0.0;
LABEL_126:
      ++v51;
      if (v45 == 9)
        goto LABEL_134;
LABEL_127:
      v56 = &v121 + 5 * v51;
      *v56 = 0.0;
      v56[1] = 0.0;
      v57 = v56 + 2;
      if (v43 < 3)
      {
        *v57 = v29;
        goto LABEL_130;
      }
      *v57 = 0.0;
      if (v43 == 3)
      {
LABEL_130:
        v125[5 * v51 - 1] = v30;
        goto LABEL_131;
      }
      *(double *)&v125[5 * v51 - 1] = v29;
      if (v43 == 4)
      {
LABEL_131:
        v58 = 4;
        goto LABEL_132;
      }
      v125[5 * v51] = v30;
      if (v43 != 5)
      {
        v58 = 5;
LABEL_132:
        *(&v121 + 5 * v51 + v58) = 1.0;
      }
      ++v51;
      if (v45 == 12)
      {
LABEL_142:
        v62 = &v121 + 5 * v51;
        *v62 = 0.0;
        v62[1] = 0.0;
        v63 = v62 + 2;
        if (v43 < 3)
        {
          *v63 = v33;
        }
        else
        {
          *v63 = 0;
          if (v43 != 3)
          {
            v125[5 * v51 - 1] = v33;
            if (v43 != 4)
            {
              v125[5 * v51] = v34;
              if (v43 == 5)
                goto LABEL_80;
              v47 = 5;
LABEL_79:
              *(&v121 + 5 * v51 + v47) = 1.0;
              goto LABEL_80;
            }
LABEL_78:
            v47 = 4;
            goto LABEL_79;
          }
        }
        v125[5 * v51 - 1] = v34;
        goto LABEL_78;
      }
LABEL_134:
      v59 = &v121 + 5 * v51;
      *v59 = 0.0;
      v59[1] = 0.0;
      v60 = (unint64_t *)(v59 + 2);
      if (v43 < 3)
      {
        *v60 = v31;
        goto LABEL_137;
      }
      *v60 = 0;
      if (v43 == 3)
      {
LABEL_137:
        v125[5 * v51 - 1] = v32;
        goto LABEL_138;
      }
      v125[5 * v51 - 1] = v31;
      if (v43 == 4)
      {
LABEL_138:
        v61 = 4;
        goto LABEL_139;
      }
      v125[5 * v51] = v32;
      if (v43 != 5)
      {
        v61 = 5;
LABEL_139:
        *(&v121 + 5 * v51 + v61) = 1.0;
      }
      if (v45 != 15)
      {
        ++v51;
        goto LABEL_142;
      }
LABEL_80:
      v48 = sub_1BE8002FC(&v121);
      if ((v46 & 1) != 0)
        v48 = -v48;
      *(double *)&v44[v45] = v48;
      v45 += 3;
      ++v46;
      if (v45 != 18)
        continue;
      break;
    }
    ++v43;
    v44 = (__int128 *)((char *)v44 + 8);
    if (v43 != 6)
      continue;
    break;
  }
  v64 = a2[9];
  v65 = v64[1];
  v66 = v64[2];
  v67 = v64[3];
  v68 = **a2;
  v69 = (*a2)[1];
  v70 = 1.0 / v36 * *((double *)&v105 + 1) * *v64
      + 0.0
      + 1.0 / v36 * *((double *)v108 + 1) * v66
      + 1.0 / v36 * *((double *)&v109 + 1) * v68
      + 1.0 / v36 * *((double *)&v112 + 1) * v65
      + 1.0 / v36 * *((double *)&v115 + 1) * v67
      + 1.0 / v36 * *((double *)&v118 + 1) * v69;
  v71 = 1.0 / v36 * *(double *)&v106 * *v64
      + 0.0
      + 1.0 / v36 * *(double *)&v108[1] * v66
      + 1.0 / v36 * *(double *)&v110 * v68
      + 1.0 / v36 * *(double *)&v113 * v65
      + 1.0 / v36 * *(double *)&v116 * v67
      + 1.0 / v36 * *(double *)&v119 * v69;
  v72 = 1.0 / v36 * *((double *)&v106 + 1) * *v64
      + 0.0
      + 1.0 / v36 * *((double *)&v108[1] + 1) * v66
      + 1.0 / v36 * *((double *)&v110 + 1) * v68
      + 1.0 / v36 * *((double *)&v113 + 1) * v65
      + 1.0 / v36 * *((double *)&v116 + 1) * v67
      + 1.0 / v36 * *((double *)&v119 + 1) * v69;
  v73 = 1.0 / v36 * *(double *)&v107 * *v64
      + 0.0
      + 1.0 / v36 * *(double *)&v108[2] * v66
      + 1.0 / v36 * *(double *)&v111 * v68
      + 1.0 / v36 * *(double *)&v114 * v65
      + 1.0 / v36 * *(double *)&v117 * v67
      + 1.0 / v36 * *(double *)&v120 * v69;
  v74 = 1.0 / v36 * *((double *)&v107 + 1) * *v64
      + 0.0
      + 1.0 / v36 * *((double *)&v108[2] + 1) * v66
      + 1.0 / v36 * *((double *)&v111 + 1) * v68
      + 1.0 / v36 * *((double *)&v114 + 1) * v65
      + 1.0 / v36 * *((double *)&v117 + 1) * v67
      + 1.0 / v36 * *((double *)&v120 + 1) * v69;
  *(double *)a3 = 1.0 / v36 * *(double *)&v105 * *v64
                + 0.0
                + 1.0 / v36 * *(double *)v108 * v66
                + 1.0 / v36 * *(double *)&v109 * v68
                + 1.0 / v36 * *(double *)&v112 * v65
                + 1.0 / v36 * *(double *)&v115 * v67
                + 1.0 / v36 * *(double *)&v118 * v69;
  *(double *)(a3 + 8) = v72;
  *(double *)(a3 + 16) = v70;
  *(double *)(a3 + 24) = v73;
  *(double *)(a3 + 32) = v71;
  *(double *)(a3 + 40) = v74;
}

void sub_1BE7F9F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::exception a49)
{
  std::exception::~exception(&a49);
  _Unwind_Resume(a1);
}

id CoreHandwriting::getUnprocessedDrawing(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  id v17;
  id v19;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  CHDrawing *v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = &v25;
  v27 = 0x3032000000;
  v28 = sub_1BE7FA1AC;
  v29 = sub_1BE7FA1BC;
  v19 = a1;
  v30 = objc_alloc_init(CHDrawing);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v1 = v19;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v21, (uint64_t)v31, 16, v3, v19);
  if (v4)
  {
    v5 = *(_QWORD *)v22;
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(v1);
        v8 = *(id *)(*((_QWORD *)&v21 + 1) + 8 * v7);
        v20[0] = v6;
        v20[1] = 3221225472;
        v20[2] = sub_1BE7FA1C4;
        v20[3] = &unk_1E77F2B80;
        v20[4] = &v25;
        objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(CHStrokeUtilities, v9, (uint64_t)v8, 0, 1, (uint64_t)v20);
        objc_msgSend_endStroke((void *)v26[5], v10, v11, v12, v13, v14);

        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v15, (uint64_t)&v21, (uint64_t)v31, 16, v16);
    }
    while (v4);
  }

  v17 = (id)v26[5];
  _Block_object_dispose(&v25, 8);

  return v17;
}

void sub_1BE7FA154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7FA1AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7FA1BC(uint64_t a1)
{

}

uint64_t sub_1BE7FA1C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, a3, a4, a5, a6);
}

id CoreHandwriting::getUnprocessedDrawing(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  id v24;
  id obj;
  id v27;
  _QWORD v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  CHDrawing *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v27 = a2;
  v33 = 0;
  v34 = &v33;
  v35 = 0x3032000000;
  v36 = sub_1BE7FA1AC;
  v37 = sub_1BE7FA1BC;
  v38 = objc_alloc_init(CHDrawing);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = v3;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v29, (uint64_t)v39, 16, v5, v3);
  if (v6)
  {
    v7 = *(_QWORD *)v30;
    v8 = MEMORY[0x1E0C809B0];
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(obj);
        v10 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * v9);
        v11 = (void *)objc_opt_class();
        objc_msgSend_strokeForIdentifier_inStrokeProvider_(v11, v12, (uint64_t)v10, (uint64_t)v27, v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v28[0] = v8;
        v28[1] = 3221225472;
        v28[2] = sub_1BE7FA450;
        v28[3] = &unk_1E77F2B80;
        v28[4] = &v33;
        objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(CHStrokeUtilities, v16, (uint64_t)v15, 0, 1, (uint64_t)v28);
        objc_msgSend_endStroke((void *)v34[5], v17, v18, v19, v20, v21);

        ++v9;
      }
      while (v6 != v9);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v29, (uint64_t)v39, 16, v23);
    }
    while (v6);
  }

  v24 = (id)v34[5];
  _Block_object_dispose(&v33, 8);

  return v24;
}

void sub_1BE7FA3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7FA450(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, a3, a4, a5, a6);
}

id CoreHandwriting::getUnprocessedDrawingForStrokeGroup(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v3 = a2;
  objc_msgSend_strokeIdentifiers(a1, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allObjects(v9, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  CoreHandwriting::getUnprocessedDrawing(v15, v3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1BE7FA4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE7FA4EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreHandwriting::lineAtHeight(double a1@<D0>, double a2@<D1>, double **a3@<X8>)
{
  double *v7;
  double *v8;
  double *v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = (double *)operator new(0x10uLL);
  *v7 = 0.0;
  v7[1] = a1;
  a3[1] = v7 + 2;
  a3[2] = v7 + 2;
  *a3 = v7;
  v8 = (double *)operator new(0x20uLL);
  v8[2] = a2;
  v8[3] = a1;
  *(_OWORD *)v8 = *(_OWORD *)v7;
  v9 = v8 + 4;
  *a3 = v8;
  a3[2] = v8 + 4;
  operator delete(v7);
  a3[1] = v9;
}

void sub_1BE7FA584(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void CoreHandwriting::loadPointSet(CoreHandwriting *this@<X0>, double **a2@<X8>)
{
  CoreHandwriting *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  double **v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  double v60;
  unint64_t v61;
  double *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  double *v69;
  double *v70;
  double *v71;
  CoreHandwriting *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = this;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (void *)MEMORY[0x1E0CB3940];
  v72 = v4;
  objc_msgSend_absoluteString(v4, v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithContentsOfFile_encoding_error_(v5, v12, (uint64_t)v11, 4, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  objc_msgSend_componentsSeparatedByString_(v14, v15, (uint64_t)CFSTR("\n"), v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v76, (uint64_t)v80, 16, v21);
  if (v22)
  {
    v27 = 0;
    v28 = *(_QWORD *)v77;
    v73 = v14;
    do
    {
      v75 = v22;
      for (i = 0; i != v75; ++i)
      {
        if (*(_QWORD *)v77 != v28)
          objc_enumerationMutation(v19);
        objc_msgSend_componentsSeparatedByString_(*(void **)(*((_QWORD *)&v76 + 1) + 8 * i), v23, (uint64_t)CFSTR(","), v24, v25, v26);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v30, v31, v32, v33, v34, v35) == 2)
        {
          objc_msgSend_objectAtIndexedSubscript_(v30, v36, 0, v37, v38, v39);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_floatValue(v74, v40, v41, v42, v43, v44);
          v46 = v45;
          objc_msgSend_objectAtIndexedSubscript_(v30, v47, 1, v48, v49, v50);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = a2;
          objc_msgSend_floatValue(v51, v53, v54, v55, v56, v57);
          v58 = v46;
          v60 = v59;
          v61 = (unint64_t)a2[2];
          if ((unint64_t)v27 < v61)
          {
            *v27 = v58;
            v27[1] = v60;
            v27 += 2;
LABEL_22:
            v14 = v73;
            a2[1] = v27;

            goto LABEL_23;
          }
          v62 = *a2;
          v63 = ((char *)v27 - (char *)*a2) >> 4;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 60)
            sub_1BE61F930();
          v65 = v61 - (_QWORD)v62;
          if (v65 >> 3 > v64)
            v64 = v65 >> 3;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
            v66 = 0xFFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 >> 60)
              sub_1BE61F100();
            v67 = v66;
            v68 = (char *)operator new(16 * v66);
            v66 = v67;
            v69 = (double *)&v68[16 * v63];
            *v69 = v58;
            v69[1] = v60;
            if (v27 != v62)
              goto LABEL_18;
LABEL_26:
            v71 = v27;
            a2 = v52;
            v27 = v69 + 2;
            *v52 = v69;
            v52[1] = v69 + 2;
            v52[2] = (double *)&v68[16 * v66];
            if (!v71)
              goto LABEL_22;
          }
          else
          {
            v68 = 0;
            v69 = (double *)(16 * v63);
            *v69 = v58;
            v69[1] = v60;
            if (v27 == v62)
              goto LABEL_26;
LABEL_18:
            v70 = v69;
            a2 = v52;
            do
            {
              *((_OWORD *)v70 - 1) = *((_OWORD *)v27 - 1);
              v70 -= 2;
              v27 -= 2;
            }
            while (v27 != v62);
            v71 = *v52;
            v27 = v69 + 2;
            *v52 = v70;
            v52[1] = v69 + 2;
            v52[2] = (double *)&v68[16 * v66];
            if (!v71)
              goto LABEL_22;
          }
          operator delete(v71);
          goto LABEL_22;
        }
LABEL_23:

      }
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v23, (uint64_t)&v76, (uint64_t)v80, 16, v26);
    }
    while (v22);
  }

}

void sub_1BE7FA890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

double CoreHandwriting::getRenderedTextSizeForString(CoreHandwriting *this, NSString *a2)
{
  int v2;
  CoreHandwriting *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;

  v2 = (int)a2;
  v3 = this;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1BE7FAAF8();
  objc_msgSend_systemFontOfSize_(v10, v11, v12, v13, v14, v15, (double)v2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE7FABB0();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v9, v18, (uint64_t)v16, (uint64_t)v17, v19, v20);

  v21 = sub_1BE7FAD00();
  objc_msgSend_whiteColor(v21, v22, v23, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE7FADB8();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v9, v29, (uint64_t)v27, (uint64_t)v28, v30, v31);

  v32 = sub_1BE7FAD00();
  objc_msgSend_whiteColor(v32, v33, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE7FAF08();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v9, v40, (uint64_t)v38, (uint64_t)v39, v41, v42);

  objc_msgSend_sizeWithAttributes_(v3, v43, (uint64_t)v9, v44, v45, v46);
  v48 = fmax(ceil(v47), 1.0);

  return v48;
}

void sub_1BE7FAA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7FAA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE7FAABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7FAAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7FAAE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE7FAAF8()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EF568390;
  v7 = qword_1EF568390;
  if (!qword_1EF568390)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1BE7FE978;
    v3[3] = &unk_1E77F2D50;
    v3[4] = &v4;
    sub_1BE7FE978((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE7FAB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BE7FABB0()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)qword_1EF568398;
  v6 = qword_1EF568398;
  if (qword_1EF568398)
    goto LABEL_7;
  v7 = 0;
  if (qword_1EF568378)
  {
    v0 = (id *)qword_1EF568378;
  }
  else
  {
    v8 = xmmword_1E77F57E0;
    v9 = 0;
    qword_1EF568378 = _sl_dlopen();
    v1 = v7;
    v0 = (id *)qword_1EF568378;
    if (!qword_1EF568378)
    {
      v1 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v7)
      goto LABEL_12;
  }
  while (1)
  {
    v0 = (id *)dlsym(v0, "NSFontAttributeName");
    v4[3] = (uint64_t)v0;
    qword_1EF568398 = (uint64_t)v0;
LABEL_7:
    _Block_object_dispose(&v3, 8);
    if (v0)
      break;
    dlerror();
    v1 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v1);
  }
  return *v0;
}

void sub_1BE7FACE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BE7FAD00()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EF5683A0;
  v7 = qword_1EF5683A0;
  if (!qword_1EF5683A0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1BE7FEA7C;
    v3[3] = &unk_1E77F2D50;
    v3[4] = &v4;
    sub_1BE7FEA7C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE7FADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BE7FADB8()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)qword_1EF5683A8;
  v6 = qword_1EF5683A8;
  if (qword_1EF5683A8)
    goto LABEL_7;
  v7 = 0;
  if (qword_1EF568378)
  {
    v0 = (id *)qword_1EF568378;
  }
  else
  {
    v8 = xmmword_1E77F57E0;
    v9 = 0;
    qword_1EF568378 = _sl_dlopen();
    v1 = v7;
    v0 = (id *)qword_1EF568378;
    if (!qword_1EF568378)
    {
      v1 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v7)
      goto LABEL_12;
  }
  while (1)
  {
    v0 = (id *)dlsym(v0, "NSForegroundColorAttributeName");
    v4[3] = (uint64_t)v0;
    qword_1EF5683A8 = (uint64_t)v0;
LABEL_7:
    _Block_object_dispose(&v3, 8);
    if (v0)
      break;
    dlerror();
    v1 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v1);
  }
  return *v0;
}

void sub_1BE7FAEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BE7FAF08()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)qword_1EF5683B0;
  v6 = qword_1EF5683B0;
  if (qword_1EF5683B0)
    goto LABEL_7;
  v7 = 0;
  if (qword_1EF568378)
  {
    v0 = (id *)qword_1EF568378;
  }
  else
  {
    v8 = xmmword_1E77F57E0;
    v9 = 0;
    qword_1EF568378 = _sl_dlopen();
    v1 = v7;
    v0 = (id *)qword_1EF568378;
    if (!qword_1EF568378)
    {
      v1 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v7)
      goto LABEL_12;
  }
  while (1)
  {
    v0 = (id *)dlsym(v0, "NSStrokeColorAttributeName");
    v4[3] = (uint64_t)v0;
    qword_1EF5683B0 = (uint64_t)v0;
LABEL_7:
    _Block_object_dispose(&v3, 8);
    if (v0)
      break;
    dlerror();
    v1 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v1);
  }
  return *v0;
}

void sub_1BE7FB03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreHandwriting::getImageAndPrincipalLinesForText(CoreHandwriting *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  double v55;
  double *v56;
  double v57;
  double *v58;
  double *v59;
  double *v60;
  double *v61;
  double *v62;
  double v63;
  double *v64;
  void *v65;
  void *v66;
  double v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  CGImage *v82;
  void *v83;
  CGColorSpace *DeviceRGB;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  CGContext *v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  CoreHandwriting *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  CGRect v105;

  v3 = (int)a2;
  v104 = *MEMORY[0x1E0C80C00];
  v96 = this;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)(a3 + 128) = 0;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = sub_1BE7FAAF8();
  v12 = (double)v3;
  objc_msgSend_systemFontOfSize_(v11, v13, v14, v15, v16, v17, (double)v3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE7FABB0();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v10, v20, (uint64_t)v18, (uint64_t)v19, v21, v22);

  v23 = sub_1BE7FAD00();
  objc_msgSend_whiteColor(v23, v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE7FADB8();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v10, v31, (uint64_t)v29, (uint64_t)v30, v32, v33);

  v34 = sub_1BE7FAD00();
  objc_msgSend_whiteColor(v34, v35, v36, v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE7FAF08();
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v10, v42, (uint64_t)v40, (uint64_t)v41, v43, v44);

  objc_msgSend_sizeWithAttributes_(v96, v45, (uint64_t)v10, v46, v47, v48);
  v50 = v49;
  v52 = v51;
  v53 = (double *)operator new(0x10uLL);
  v54 = v12 / 200.0;
  v55 = v12 / 200.0 * 50.0;
  *v53 = 0.0;
  v53[1] = v55;
  v56 = (double *)operator new(0x20uLL);
  v57 = fmax(ceil(v50), 1.0);
  v56[2] = v57;
  v56[3] = v55;
  *(_OWORD *)v56 = *(_OWORD *)v53;
  operator delete(v53);
  *(_QWORD *)(a3 + 112) = v56;
  *(_QWORD *)(a3 + 120) = v56 + 4;
  *(_QWORD *)(a3 + 128) = v56 + 4;
  v58 = (double *)operator new(0x10uLL);
  *v58 = 0.0;
  v58[1] = v54 * 87.0;
  v59 = (double *)operator new(0x20uLL);
  v59[2] = v57;
  v59[3] = v54 * 87.0;
  *(_OWORD *)v59 = *(_OWORD *)v58;
  operator delete(v58);
  *(_QWORD *)(a3 + 88) = v59;
  *(_QWORD *)(a3 + 96) = v59 + 4;
  *(_QWORD *)(a3 + 104) = v59 + 4;
  v60 = (double *)operator new(0x10uLL);
  *v60 = 0.0;
  v60[1] = v54 * 192.0;
  v61 = (double *)operator new(0x20uLL);
  v61[2] = v57;
  v61[3] = v54 * 192.0;
  *(_OWORD *)v61 = *(_OWORD *)v60;
  operator delete(v60);
  *(_QWORD *)(a3 + 64) = v61;
  *(_QWORD *)(a3 + 72) = v61 + 4;
  *(_QWORD *)(a3 + 80) = v61 + 4;
  v62 = (double *)operator new(0x10uLL);
  v63 = v54 * 226.0;
  *v62 = 0.0;
  v62[1] = v63;
  v64 = (double *)operator new(0x20uLL);
  v64[2] = v57;
  v64[3] = v63;
  *(_OWORD *)v64 = *(_OWORD *)v62;
  operator delete(v62);
  *(_QWORD *)(a3 + 40) = v64;
  *(_QWORD *)(a3 + 48) = v64 + 4;
  *(_QWORD *)(a3 + 56) = v64 + 4;
  v97 = 0;
  v98 = &v97;
  v99 = 0x2020000000;
  v65 = off_1EF568370;
  v100 = off_1EF568370;
  if (!off_1EF568370)
  {
    v101 = 0;
    if (qword_1EF568378)
    {
      v66 = (void *)qword_1EF568378;
    }
    else
    {
      v102 = xmmword_1E77F57E0;
      v103 = 0;
      qword_1EF568378 = _sl_dlopen();
      v66 = (void *)qword_1EF568378;
      if (!qword_1EF568378)
        goto LABEL_35;
      if (v101)
        free(v101);
    }
    v65 = dlsym(v66, "UIGraphicsBeginImageContextWithOptions");
    v98[3] = (uint64_t)v65;
    off_1EF568370 = v65;
  }
  _Block_object_dispose(&v97, 8);
  if (!v65)
    goto LABEL_34;
  v67 = fmax(ceil(v52), 1.0);
  ((void (*)(uint64_t, double, double, double))v65)(1, v57, v67, 0.0);
  objc_msgSend_drawInRect_withAttributes_(v96, v68, (uint64_t)v10, v69, v70, v71, 0.0, 0.0, v57, v67);
  v97 = 0;
  v98 = &v97;
  v99 = 0x2020000000;
  v72 = off_1EF568380;
  v100 = off_1EF568380;
  if (!off_1EF568380)
  {
    v101 = 0;
    if (qword_1EF568378)
    {
      v73 = (void *)qword_1EF568378;
    }
    else
    {
      v102 = xmmword_1E77F57E0;
      v103 = 0;
      qword_1EF568378 = _sl_dlopen();
      v73 = (void *)qword_1EF568378;
      if (!qword_1EF568378)
        goto LABEL_35;
      if (v101)
        free(v101);
    }
    v72 = dlsym(v73, "UIGraphicsGetImageFromCurrentImageContext");
    v98[3] = (uint64_t)v72;
    off_1EF568380 = v72;
  }
  _Block_object_dispose(&v97, 8);
  if (!v72)
  {
LABEL_34:
    dlerror();
    abort_report_np();
LABEL_37:
    __break(1u);
    return;
  }
  ((void (*)(void))v72)();
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = 0;
  v98 = &v97;
  v99 = 0x2020000000;
  v75 = off_1EF568388;
  v100 = off_1EF568388;
  if (off_1EF568388)
    goto LABEL_24;
  v101 = 0;
  if (!qword_1EF568378)
  {
    v102 = xmmword_1E77F57E0;
    v103 = 0;
    qword_1EF568378 = _sl_dlopen();
    v76 = (void *)qword_1EF568378;
    if (qword_1EF568378)
    {
      if (v101)
        free(v101);
      goto LABEL_23;
    }
LABEL_35:
    abort_report_np();
    goto LABEL_37;
  }
  v76 = (void *)qword_1EF568378;
LABEL_23:
  v75 = dlsym(v76, "UIGraphicsEndImageContext");
  v98[3] = (uint64_t)v75;
  off_1EF568388 = v75;
LABEL_24:
  _Block_object_dispose(&v97, 8);
  if (!v75)
    goto LABEL_34;
  ((void (*)(void))v75)();
  v82 = (CGImage *)objc_msgSend_CGImage(v74, v77, v78, v79, v80, v81);
  v83 = malloc_type_calloc((unint64_t)(v67 * (double)(unint64_t)(v57 * 4.0)), 1uLL, 0x100004077774924uLL);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v85 = vcvtd_n_u64_f64(v57, 2uLL);
  v86 = (unint64_t)v57;
  v87 = (unint64_t)v67;
  v88 = CGBitmapContextCreate(v83, (unint64_t)v57, (unint64_t)v67, 8uLL, v85, DeviceRGB, 0x4001u);
  v105.origin.x = 0.0;
  v105.origin.y = 0.0;
  v105.size.width = v57;
  v105.size.height = v67;
  CGContextDrawImage(v88, v105, v82);
  CGColorSpaceRelease(DeviceRGB);
  CGContextRelease(v88);
  v89 = (unint64_t)v67 * (unint64_t)v57;
  if (v89)
  {
    if ((v89 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v90 = (char *)operator new(v87 * v86);
    v91 = &v90[v89];
    bzero(v90, v87 * v86);
  }
  else
  {
    v91 = 0;
    v90 = 0;
  }
  v92 = 0;
  *(_QWORD *)a3 = v86;
  *(_QWORD *)(a3 + 8) = v87;
  *(_QWORD *)(a3 + 16) = v90;
  *(_QWORD *)(a3 + 24) = v91;
  v93 = 1;
  *(_QWORD *)(a3 + 32) = v91;
  do
  {
    v94 = 0;
    v95 = v93;
    do
    {
      v90[v94++] = *((_BYTE *)v83 + v95);
      v95 += 4;
    }
    while (v57 > (double)(int)v94);
    ++v92;
    v93 += v85;
    v90 += v86;
  }
  while (v67 > (double)(int)v92);
  free(v83);

}

void sub_1BE7FB740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, char a12)
{
  void *v12;
  _QWORD *v13;
  void *v14;

  sub_1BE7FB84C(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE7FB84C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void CoreHandwriting::getPointsAndPrincipalLinesForText(CoreHandwriting *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p;
  char *v5;
  unint64_t v6[2];
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;

  CoreHandwriting::getImageAndPrincipalLinesForText(this, a2, (uint64_t)v6);
  CoreHandwriting::getPointSet(v6, (double **)&__p);
  *(_QWORD *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (&__p != (void **)a3)
    sub_1BE6F5A88((_QWORD *)a3, (char *)__p, v5, (v5 - (_BYTE *)__p) >> 4);
  if ((void **)(a3 + 24) != &v9)
  {
    sub_1BE6F5A88((_QWORD *)(a3 + 24), (char *)v9, v10, (v10 - (_BYTE *)v9) >> 4);
    sub_1BE6F5A88((_QWORD *)(a3 + 48), (char *)v11, v12, (v12 - (_BYTE *)v11) >> 4);
    sub_1BE6F5A88((_QWORD *)(a3 + 72), (char *)v13, v14, (v14 - (_BYTE *)v13) >> 4);
    sub_1BE6F5A88((_QWORD *)(a3 + 96), (char *)v15, v16, (v16 - (_BYTE *)v15) >> 4);
  }
  if (__p)
  {
    v5 = (char *)__p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = (char *)v15;
    operator delete(v15);
  }
  if (v13)
  {
    v14 = (char *)v13;
    operator delete(v13);
  }
  if (v11)
  {
    v12 = (char *)v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = (char *)v9;
    operator delete(v9);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
}

void sub_1BE7FB9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE7FB84C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BE7FBA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_1BE7A79B4(v12);
  if (__p)
    operator delete(__p);
  sub_1BE7FB84C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7FBA2C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  double *v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double *v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  size_t v42;
  uint64_t v43;
  _OWORD *v44;
  _QWORD *v45;
  double v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unint64_t v54;
  const double *v55;
  const double *v56;
  float64x2_t v57;
  float64x2_t v58;
  unint64_t v59;
  double *v60;
  uint64_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float64x2x2_t v86;
  float64x2x2_t v87;

  v7 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v8 = v6 - v7;
  v9 = (uint64_t)(v6 - v7) >> 4;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = 2;
  if (v6 == v7)
  {
    v10 = 0;
    goto LABEL_21;
  }
  if (v8 < 0)
    sub_1BE61F930();
  v10 = (char *)operator new(v8);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = &v10[8 * (v8 >> 3)];
  bzero(v10, v8);
  *(_QWORD *)(a1 + 24) = &v10[v8];
  if (v9 <= 1)
    v11 = 1;
  else
    v11 = v9;
  if (v11 < 4
    || ((unint64_t)v10 < v7 + 16 * v11 ? (v12 = v7 >= (unint64_t)&v10[16 * v11]) : (v12 = 1), !v12))
  {
    v14 = 0;
LABEL_17:
    v20 = v11 - v14;
    v21 = 16 * v14;
    do
    {
      v22 = &v10[v21];
      *(_QWORD *)v22 = *(_QWORD *)(v7 + v21);
      *((_QWORD *)v22 + 1) = *(_QWORD *)(v7 + v21 + 8);
      v21 += 16;
      --v20;
    }
    while (v20);
    goto LABEL_21;
  }
  v13 = 0;
  v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v16 = *(_OWORD *)(v7 + v13 + 16);
    v18 = *(_OWORD *)(v7 + v13 + 32);
    v17 = *(_OWORD *)(v7 + v13 + 48);
    v19 = &v10[v13];
    *(_OWORD *)v19 = *(_OWORD *)(v7 + v13);
    *((_OWORD *)v19 + 1) = v16;
    *((_OWORD *)v19 + 2) = v18;
    *((_OWORD *)v19 + 3) = v17;
    v13 += 64;
    v15 -= 4;
  }
  while (v15);
  if (v11 != v14)
    goto LABEL_17;
LABEL_21:
  v81 = *a2;
  v82 = a2[1];
  v23 = v82 - *a2;
  v24 = v23 >> 4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = v23 >> 4;
  v26 = *a3;
  v25 = a3[1];
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v27 = v25 - v26;
  v28 = (uint64_t)(v25 - v26) >> 4;
  *(_QWORD *)(a1 + 48) = v28;
  *(_QWORD *)(a1 + 56) = 2;
  if (v25 == v26)
  {
    v29 = 0;
  }
  else
  {
    if (v27 < 0)
      sub_1BE61F930();
    v29 = (double *)operator new(v27);
    *(_QWORD *)(a1 + 64) = v29;
    *(_QWORD *)(a1 + 80) = &v29[v27 >> 3];
    bzero(v29, v27);
    *(_QWORD *)(a1 + 72) = (char *)v29 + v27;
    if (v28 <= 1)
      v30 = 1;
    else
      v30 = v28;
    if (v30 >= 4
      && ((unint64_t)v29 < v26 + 16 * v30 ? (v31 = v26 >= (unint64_t)&v29[2 * v30]) : (v31 = 1), v31))
    {
      v32 = 0;
      v33 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      v34 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *(_OWORD *)(v26 + v32 + 16);
        v37 = *(_OWORD *)(v26 + v32 + 32);
        v36 = *(_OWORD *)(v26 + v32 + 48);
        v38 = &v29[v32 / 8];
        *(_OWORD *)v38 = *(_OWORD *)(v26 + v32);
        *((_OWORD *)v38 + 1) = v35;
        *((_OWORD *)v38 + 2) = v37;
        *((_OWORD *)v38 + 3) = v36;
        v32 += 64;
        v34 -= 4;
      }
      while (v34);
      if (v30 == v33)
        goto LABEL_41;
    }
    else
    {
      v33 = 0;
    }
    v39 = v30 - v33;
    v40 = 2 * v33;
    do
    {
      v41 = &v29[v40];
      *v41 = *(double *)(v26 + v40 * 8);
      v41[1] = *(double *)(v26 + v40 * 8 + 8);
      v40 += 2;
      --v39;
    }
    while (v39);
  }
LABEL_41:
  v79 = *a3;
  v80 = a3[1];
  v42 = v80 - v79;
  v43 = (uint64_t)(v80 - v79) >> 4;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 88) = v43;
  *(_QWORD *)(a1 + 96) = 2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(int64x2_t *)(a1 + 320) = vdupq_n_s64(2uLL);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v44 = operator new(0x20uLL);
  *v44 = 0u;
  v44[1] = 0u;
  *(_QWORD *)(a1 + 336) = v44;
  *(_QWORD *)(a1 + 344) = v44 + 2;
  *(_QWORD *)(a1 + 352) = v44 + 2;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v45 = operator new(0x10uLL);
  *(_QWORD *)(a1 + 368) = v45 + 2;
  *(_QWORD *)(a1 + 376) = v45 + 2;
  *(_QWORD *)(a1 + 360) = v45;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 448) = xmmword_1BE8DFBA0;
  *(_DWORD *)(a1 + 464) = 90;
  *(_QWORD *)v44 = 0x3FF0000000000000;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = 0;
  *((_QWORD *)v44 + 3) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 384) = xmmword_1BE8DFBB0;
  v46 = 0.0;
  *v45 = 0;
  v45[1] = 0;
  if (v82 == v81)
    goto LABEL_54;
  if (v80 == v79)
  {
    v61 = 0;
    goto LABEL_56;
  }
  v47 = 0;
  do
  {
    v48 = (double *)&v10[16 * v47];
    v49 = *(uint64_t *)v48;
    v50 = *((uint64_t *)v48 + 1);
    if (v42 < 0x40)
    {
      v51 = 0;
LABEL_50:
      v59 = v43 - v51;
      v60 = &v29[2 * v51 + 1];
      do
      {
        v46 = v46
            + (*(double *)&v50 - *v60) * (*(double *)&v50 - *v60)
            + (*(double *)&v49 - *(v60 - 1)) * (*(double *)&v49 - *(v60 - 1));
        v60 += 2;
        --v59;
      }
      while (v59);
      goto LABEL_44;
    }
    v52 = (float64x2_t)vdupq_lane_s64(v49, 0);
    v53 = (float64x2_t)vdupq_lane_s64(v50, 0);
    v54 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    v55 = v29 + 4;
    do
    {
      v56 = v55 - 4;
      v86 = vld2q_f64(v56);
      v87 = vld2q_f64(v55);
      v57 = vsubq_f64(v52, v86.val[0]);
      v58 = vsubq_f64(v52, v87.val[0]);
      v86.val[0] = vsubq_f64(v53, v86.val[1]);
      v86.val[1] = vsubq_f64(v53, v87.val[1]);
      v86.val[0] = vmlaq_f64(vmulq_f64(v86.val[0], v86.val[0]), v57, v57);
      v86.val[1] = vmlaq_f64(vmulq_f64(v86.val[1], v86.val[1]), v58, v58);
      v46 = v46 + v86.val[0].f64[0] + v86.val[0].f64[1] + v86.val[1].f64[0] + v86.val[1].f64[1];
      v55 += 8;
      v54 -= 4;
    }
    while (v54);
    v51 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    if (v43 != (v43 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_50;
LABEL_44:
    ++v47;
  }
  while (v47 != v24);
  *(double *)(a1 + 384) = v46;
LABEL_54:
  v61 = (uint64_t)(v80 - v79) >> 4;
LABEL_56:
  *(double *)(a1 + 384) = v46 / (double)(unint64_t)((v23 >> 3) * v61);
  v62 = v43 * v24;
  if (v43 * v24)
  {
    if (v62 >> 61)
      sub_1BE61F930();
    v63 = 8 * v62;
    v64 = (char *)operator new(8 * v62);
    v62 = (unint64_t)&v64[8 * v62];
    bzero(v64, v63);
    v65 = &v64[v63];
  }
  else
  {
    v65 = 0;
    v64 = 0;
  }
  *((_QWORD *)&v83 + 1) = v23 >> 4;
  *(_QWORD *)&v83 = (uint64_t)(v80 - v79) >> 4;
  *(_OWORD *)(a1 + 400) = v83;
  *(_QWORD *)(a1 + 416) = v64;
  *(_QWORD *)(a1 + 424) = v65;
  *(_QWORD *)(a1 + 432) = v62;
  if (v80 == v79)
  {
    v67 = 0;
    v68 = 0;
    v66 = 0;
  }
  else
  {
    if ((v42 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v66 = (char *)operator new(v42 >> 1);
    v67 = &v66[8 * v43];
    bzero(v66, v42 >> 1);
    v68 = &v66[v42 >> 1];
  }
  *(_QWORD *)(a1 + 288) = v66;
  *(_QWORD *)(a1 + 296) = v68;
  *(_QWORD *)(a1 + 304) = v67;
  if (v82 == v81)
  {
    v70 = 0;
    v71 = 0;
    v69 = 0;
  }
  else
  {
    if (v23 < 0)
      sub_1BE61F930();
    v69 = (char *)operator new((unint64_t)v23 >> 1);
    v70 = &v69[8 * v24];
    bzero(v69, (unint64_t)v23 >> 1);
    v71 = &v69[(unint64_t)v23 >> 1];
  }
  *(_QWORD *)(a1 + 264) = v69;
  *(_QWORD *)(a1 + 272) = v71;
  *(_QWORD *)(a1 + 280) = v70;
  *(_QWORD *)&v84 = v23 >> 4;
  *((_QWORD *)&v84 + 1) = 2;
  if (v82 == v81)
  {
    v73 = 0;
    v74 = 0;
    v72 = 0;
  }
  else
  {
    if (v23 < 0)
      sub_1BE61F930();
    v72 = (char *)operator new(v23);
    v73 = &v72[8 * (v23 >> 3)];
    bzero(v72, v23);
    v74 = &v72[v23];
  }
  *(_OWORD *)(a1 + 144) = v84;
  *(_QWORD *)(a1 + 160) = v72;
  *(_QWORD *)(a1 + 168) = v74;
  *(_QWORD *)(a1 + 176) = v73;
  *(_QWORD *)&v85 = (uint64_t)(v80 - v79) >> 4;
  *((_QWORD *)&v85 + 1) = 2;
  if (v80 == v79)
  {
    v76 = 0;
    v77 = 0;
    v75 = 0;
  }
  else
  {
    if ((v42 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v75 = (char *)operator new(v42);
    v76 = &v75[8 * ((uint64_t)v42 >> 3)];
    bzero(v75, v42);
    v77 = &v75[v42];
  }
  *(_OWORD *)(a1 + 104) = v85;
  *(_QWORD *)(a1 + 120) = v75;
  *(_QWORD *)(a1 + 128) = v77;
  *(_QWORD *)(a1 + 136) = v76;
  return a1;
}

void sub_1BE7FC068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  _QWORD *v19;
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v22 = *(void **)(v20 + 232);
  if (v22)
  {
    v19[43] = v22;
    operator delete(v22);
    v23 = (void *)v19[36];
    if (!v23)
    {
LABEL_3:
      v24 = (void *)v19[33];
      if (!v24)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v23 = (void *)v19[36];
    if (!v23)
      goto LABEL_3;
  }
  v19[37] = v23;
  operator delete(v23);
  v24 = (void *)v19[33];
  if (!v24)
  {
LABEL_4:
    v25 = (void *)v19[30];
    if (!v25)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v19[34] = v24;
  operator delete(v24);
  v25 = (void *)v19[30];
  if (!v25)
  {
LABEL_5:
    v26 = (void *)v19[25];
    if (!v26)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v19[31] = v25;
  operator delete(v25);
  v26 = (void *)v19[25];
  if (!v26)
  {
LABEL_6:
    v27 = (void *)v19[20];
    if (!v27)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v19[26] = v26;
  operator delete(v26);
  v27 = (void *)v19[20];
  if (!v27)
  {
LABEL_7:
    v28 = (void *)v19[15];
    if (!v28)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  v19[21] = v27;
  operator delete(v27);
  v28 = (void *)v19[15];
  if (!v28)
  {
LABEL_8:
    v29 = *a11;
    if (!*a11)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  v19[16] = v28;
  operator delete(v28);
  v29 = *a11;
  if (!*a11)
  {
LABEL_9:
    v30 = *a10;
    if (!*a10)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  v19[9] = v29;
  operator delete(v29);
  v30 = *a10;
  if (!*a10)
LABEL_11:
    _Unwind_Resume(exception_object);
LABEL_10:
  v19[3] = v30;
  operator delete(v30);
  goto LABEL_11;
}

void sub_1BE7FC1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  if (*a11)
    JUMPOUT(0x1BE7FC1D0);
  JUMPOUT(0x1BE7FC11CLL);
}

void sub_1BE7FC1FC()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x1BE7FC130);
  JUMPOUT(0x1BE7FC128);
}

double CoreHandwriting::CPDAffineRegistration::initialize_transformation(CoreHandwriting::CPDAffineRegistration *this)
{
  _OWORD *v1;
  uint64_t v2;
  double result;
  _QWORD *v4;

  v2 = *((_QWORD *)this + 41);
  v1 = (_OWORD *)*((_QWORD *)this + 42);
  *v1 = xmmword_1BE8DFBC0;
  result = 0.0;
  *(_OWORD *)((char *)v1 + 8 * v2) = xmmword_1BE8DFBD0;
  v4 = (_QWORD *)*((_QWORD *)this + 45);
  *v4 = 0;
  v4[1] = 0;
  return result;
}

double CoreHandwriting::CPDAffineRegistration::initialize_sigma2(CoreHandwriting::CPDAffineRegistration *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  double result;

  *((_QWORD *)this + 48) = 0;
  v1 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 11);
  v3 = 0.0;
  if (v1 && v2)
  {
    v4 = 0;
    v5 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 8) + 8;
    v8 = 8 * *((_QWORD *)this + 7);
    do
    {
      v9 = (double *)v7;
      v10 = v2;
      do
      {
        v11 = *(double *)(v6 + 8 * v4 * v5) - *(v9 - 1);
        v12 = *(double *)(v6 + 8 * (v4 * v5 + 1)) - *v9;
        v3 = v3 + v12 * v12 + v11 * v11;
        *((double *)this + 48) = v3;
        v9 = (double *)((char *)v9 + v8);
        --v10;
      }
      while (v10);
      ++v4;
    }
    while (v4 != v1);
  }
  result = v3 / (double)(unint64_t)(v2 * v1 * *((_QWORD *)this + 12));
  *((double *)this + 48) = result;
  return result;
}

double CoreHandwriting::CPDAffineRegistration::transform_point_cloud(CoreHandwriting::CPDAffineRegistration *this)
{
  uint64_t v1;
  double *v2;
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double result;

  v1 = *((_QWORD *)this + 11);
  if (v1)
  {
    v3 = *((_QWORD *)this + 41);
    v2 = (double *)*((_QWORD *)this + 42);
    v4 = (double *)*((_QWORD *)this + 45);
    v5 = (double *)(*((_QWORD *)this + 15) + 8);
    v6 = 8 * *((_QWORD *)this + 14);
    v7 = (double *)(*((_QWORD *)this + 8) + 8);
    v8 = 8 * *((_QWORD *)this + 7);
    do
    {
      *(v5 - 1) = *v4 + *v7 * v2[v3] + *(v7 - 1) * *v2;
      result = v4[1] + *v7 * v2[v3 + 1] + *(v7 - 1) * v2[1];
      *v5 = result;
      v5 = (double *)((char *)v5 + v6);
      v7 = (double *)((char *)v7 + v8);
      --v1;
    }
    while (v1);
  }
  return result;
}

void CoreHandwriting::CPDAffineRegistration::expectation(CoreHandwriting::CPDAffineRegistration *this)
{
  CoreHandwriting::CPDAffineRegistration *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  long double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v32;
  BOOL v34;
  BOOL v36;
  BOOL v38;
  BOOL v40;
  BOOL v42;
  BOOL v43;
  _OWORD *v44;
  const double *v45;
  float64x2_t v46;
  const double *v47;
  float64x2_t v48;
  unint64_t v49;
  unint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  unint64_t v60;
  int32x2_t v61;
  int32x2_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  double *v71;
  double *v72;
  uint64_t v73;
  double v74;
  CoreHandwriting::CPDAffineRegistration *v75;
  unint64_t v76;
  uint64_t v77;
  double *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  unint64_t v91;
  _OWORD *v92;
  char *__p;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  double v98;
  float64x2_t v99;
  __int128 v100;
  float64x2_t v101;
  double v102;
  uint64_t v103;

  v1 = this;
  v2 = *((_QWORD *)this + 5);
  if (!v2)
  {
    __p = 0;
    goto LABEL_86;
  }
  if (v2 >> 61)
    sub_1BE61F930();
  __p = (char *)operator new(8 * v2);
  bzero(__p, 8 * v2);
  v75 = v1;
  v91 = *((_QWORD *)v1 + 11);
  if (v91)
  {
    v103 = 0;
    v89 = *((_QWORD *)v1 + 2);
    v90 = (double *)((char *)v1 + 384);
    v3 = *((_QWORD *)v1 + 14);
    v4 = *((_QWORD *)v1 + 15);
    v84 = *((_QWORD *)v1 + 1);
    v80 = v4;
    v5 = *((_QWORD *)v1 + 51);
    v6 = *((_QWORD *)v1 + 52);
    v81 = v4 + 8;
    v82 = v5;
    v79 = v4 + 8 + 8 * v91;
    v78 = (double *)((char *)v1 + 392);
    v8 = v5 != 1 || v3 != 1;
    v83 = v8;
    v92 = (_OWORD *)(v6 + 16);
    v76 = v4 + 16;
    v86 = 8 * v3;
    v87 = 8 * v5;
    v88 = *((_QWORD *)v1 + 52);
    v77 = v6 + 8 * v91;
    v85 = v2;
    do
    {
      v9 = 8 * v103;
      v10 = (double *)&__p[8 * v103];
      v11 = v10 + 1;
      v12 = *v10;
      v13 = v83;
      if (v91 < 0xA)
        v13 = 1;
      if ((v13 & 1) != 0)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v28 = v88 + v9;
        v29 = v77 + v9;
        v30 = v89 + 8 * v84 * v103;
        v32 = v88 + v9 < v30 + 16 && v30 < v29;
        v34 = v28 < v79 && v80 < v29;
        v36 = v28 < (unint64_t)v78 && (unint64_t)v90 < v29;
        v38 = (unint64_t)v10 < v30 + 16 && v30 < (unint64_t)v11;
        v40 = (unint64_t)v10 < v79 && v80 < (unint64_t)v11;
        v42 = v10 < v78 && v90 < v11;
        v43 = (unint64_t)v10 >= v29 || v28 >= (unint64_t)v11;
        if (v43 && !v32 && !v34 && !v36 && !v38 && !v40 && !v42)
        {
          v44 = v92;
          v45 = (const double *)(v89 + 8 * v103 * v84);
          v46 = vld1q_dup_f64(v45);
          v47 = (const double *)(v89 + 8 * (v103 * v84 + 1));
          v48 = vld1q_dup_f64(v47);
          v95 = v48;
          v96 = v46;
          v48.f64[0] = *v90;
          v94 = (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v48, v48), 0);
          v49 = v76;
          v50 = v91 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v51 = vsubq_f64(v96, *(float64x2_t *)(v49 - 16));
            v52 = vsubq_f64(v96, *(float64x2_t *)v49);
            v53 = vsubq_f64(v95, *(float64x2_t *)(v49 - 8));
            v54 = vsubq_f64(v95, *(float64x2_t *)(v49 + 8));
            v99 = vdivq_f64(vnegq_f64(vmlaq_f64(vmulq_f64(v53, v53), v51, v51)), v94);
            v101 = vdivq_f64(vnegq_f64(vmlaq_f64(vmulq_f64(v54, v54), v52, v52)), v94);
            v102 = exp(v99.f64[1]);
            v98 = exp(v99.f64[0]);
            *(double *)&v55 = v98;
            *((double *)&v55 + 1) = v102;
            v100 = v55;
            v97 = exp(v101.f64[1]);
            *(double *)&v56 = exp(v101.f64[0]);
            *((double *)&v56 + 1) = v97;
            *(v44 - 1) = v100;
            *v44 = v56;
            v12 = v12 + v98 + v102 + *(double *)&v56 + v97;
            v44 += 2;
            v49 += 32;
            v50 -= 4;
          }
          while (v50);
          v21 = __p;
          *(double *)&__p[8 * v103] = v12;
          v14 = v91 & 0xFFFFFFFFFFFFFFFCLL;
          v16 = v90;
          v18 = v86;
          v17 = v87;
          v20 = v103 * v84 + 1;
          v19 = v103 * v84;
          v15 = v89;
          if (v91 == (v91 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_11;
          goto LABEL_17;
        }
      }
      v15 = v89;
      v16 = v90;
      v18 = v86;
      v17 = v87;
      v20 = v103 * v84 + 1;
      v19 = v103 * v84;
      v21 = __p;
LABEL_17:
      v22 = v91 - v14;
      v23 = (double *)(v88 + 8 * (v103 + v82 * v14));
      v24 = (double *)(v81 + v18 * v14);
      do
      {
        v25 = *(double *)(v15 + 8 * v19) - *(v24 - 1);
        v26 = *(double *)(v15 + 8 * v20) - *v24;
        v27 = exp(-(v26 * v26 + v25 * v25) / (*v16 + *v16));
        *v23 = v27;
        v12 = v12 + v27;
        *(double *)&v21[8 * v103] = v12;
        v23 = (double *)((char *)v23 + v17);
        v24 = (double *)((char *)v24 + v18);
        --v22;
      }
      while (v22);
LABEL_11:
      v92 = (_OWORD *)((char *)v92 + 8);
      v2 = v85;
      ++v103;
    }
    while (v103 != v85);
  }
  if (v2 >= 4)
  {
    v57 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v58 = (float64x2_t *)(__p + 16);
    v59 = (float64x2_t)vdupq_n_s64(0x3E80000000000000uLL);
    v60 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v1 = v75;
    while (1)
    {
      v61 = vmovn_s64(vcgtq_f64(v59, v58[-1]));
      if ((v61.i8[0] & 1) != 0)
      {
        v58[-1].f64[0] = 0.00000011920929;
        if ((v61.i8[4] & 1) == 0)
        {
LABEL_78:
          v62 = vmovn_s64(vcgtq_f64(v59, *v58));
          if ((v62.i8[0] & 1) == 0)
            goto LABEL_79;
          goto LABEL_83;
        }
      }
      else if ((v61.i8[4] & 1) == 0)
      {
        goto LABEL_78;
      }
      v58[-1].f64[1] = 0.00000011920929;
      v62 = vmovn_s64(vcgtq_f64(v59, *v58));
      if ((v62.i8[0] & 1) == 0)
      {
LABEL_79:
        if ((v62.i8[4] & 1) != 0)
          goto LABEL_84;
        goto LABEL_75;
      }
LABEL_83:
      v58->f64[0] = 0.00000011920929;
      if ((v62.i8[4] & 1) != 0)
LABEL_84:
        v58->f64[1] = 0.00000011920929;
LABEL_75:
      v58 += 2;
      v60 -= 4;
      if (!v60)
      {
        if (v2 == v57)
          goto LABEL_86;
        goto LABEL_101;
      }
    }
  }
  v57 = 0;
  v1 = v75;
  do
  {
LABEL_101:
    if (*(double *)&__p[8 * v57] < 0.00000011920929)
      *(_QWORD *)&__p[8 * v57] = 0x3E80000000000000;
    ++v57;
  }
  while (v2 != v57);
LABEL_86:
  *((_QWORD *)v1 + 39) = 0;
  v63 = *((_QWORD *)v1 + 33);
  v64 = *((_QWORD *)v1 + 34) - v63;
  if (v64 >= 1)
    bzero(*((void **)v1 + 33), 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
  v65 = (double *)*((_QWORD *)v1 + 36);
  v66 = *((_QWORD *)v1 + 37) - (_QWORD)v65;
  if (v66 >= 1)
    bzero(*((void **)v1 + 36), 8 * (((unint64_t)v66 >> 3) - ((unint64_t)v66 > 7)) + 8);
  if (v2)
  {
    v67 = *((_QWORD *)v1 + 11);
    if (v67)
    {
      v68 = 0;
      v69 = (double *)*((_QWORD *)v1 + 52);
      v70 = 8 * *((_QWORD *)v1 + 51);
      do
      {
        v71 = v69;
        v72 = v65;
        v73 = v67;
        do
        {
          v74 = *v71 / *(double *)&__p[8 * v68];
          *v71 = v74;
          *(double *)(v63 + 8 * v68) = v74 + *(double *)(v63 + 8 * v68);
          *v72 = *v71 + *v72;
          ++v72;
          *((double *)v1 + 39) = *v71 + *((double *)v1 + 39);
          v71 = (double *)((char *)v71 + v70);
          --v73;
        }
        while (v73);
        ++v68;
        ++v69;
      }
      while (v68 != v2);
      goto LABEL_98;
    }
  }
  if (__p)
LABEL_98:
    operator delete(__p);
}

void sub_1BE7FC938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::CPDAffineRegistration::maximization(double **this)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;

  CoreHandwriting::CPDAffineRegistration::update_transform((CoreHandwriting::CPDAffineRegistration *)this);
  v2 = this[11];
  if (v2)
  {
    v4 = this[41];
    v3 = this[42];
    v5 = this[45];
    v6 = this[15] + 1;
    v7 = 8 * (_QWORD)this[14];
    v8 = this[8] + 1;
    v9 = 8 * (_QWORD)this[7];
    do
    {
      *(v6 - 1) = *v5 + *v8 * v3[(_QWORD)v4] + *(v8 - 1) * *v3;
      *v6 = v5[1] + *v8 * v3[(_QWORD)v4 + 1] + *(v8 - 1) * v3[1];
      v6 = (double *)((char *)v6 + v7);
      v8 = (double *)((char *)v8 + v9);
      v2 = (double *)((char *)v2 - 1);
    }
    while (v2);
  }
  CoreHandwriting::CPDAffineRegistration::update_variance((CoreHandwriting::CPDAffineRegistration *)this);
}

__n128 CoreHandwriting::CPDAffineRegistration::getTransform@<Q0>(CoreHandwriting::CPDAffineRegistration *this@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v2;
  __n128 *v3;
  __int128 v4;
  __n128 result;

  v2 = (_OWORD *)*((_QWORD *)this + 42);
  v3 = (__n128 *)*((_QWORD *)this + 45);
  v4 = *(_OWORD *)((char *)v2 + 8 * *((_QWORD *)this + 41));
  *a2 = *v2;
  a2[1] = v4;
  result = *v3;
  a2[2] = *v3;
  return result;
}

double CoreHandwriting::CPDAffineRegistration::point_distance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double *v5;
  double *v6;

  v5 = (double *)(*(_QWORD *)(a2 + 16) + 8 * *(_QWORD *)(a2 + 8) * a3);
  v6 = (double *)(*(_QWORD *)(a4 + 16) + 8 * *(_QWORD *)(a4 + 8) * a5);
  return (v5[1] - v6[1]) * (v5[1] - v6[1]) + (*v5 - *v6) * (*v5 - *v6);
}

void CoreHandwriting::CPDAffineRegistration::update_transform(CoreHandwriting::CPDAffineRegistration *this)
{
  double *v2;
  double *v3;
  double *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  double v21;
  double *v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float64x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  unint64_t v39;
  double *v40;
  float64x2_t v41;
  unint64_t v42;
  double *v43;
  double *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  float64x2_t *v56;
  uint64_t v57;
  _QWORD *f64;
  uint64_t v59;
  void *v60;
  float64x2_t *v61;
  double *v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  BOOL v80;
  _OWORD *v81;
  char *v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  __int128 v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  void *v93;
  double *v94;
  double *v95;
  double *v96;
  void *v97;
  float64x2_t *v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  float64_t *v102;
  char *v103;
  uint64_t v104[2];
  void *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  void *__p;
  void *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  float64x2_t *v117;
  float64x2_t *v118;
  float64x2_t *v119;
  float64x2x2_t v120;

  v2 = (double *)operator new(0x10uLL);
  *v2 = 0.0;
  v2[1] = 0.0;
  v3 = (double *)operator new(0x10uLL);
  v4 = v3;
  *v3 = 0.0;
  v3[1] = 0.0;
  v5 = 0.0;
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 11);
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    if (v7)
    {
      v11 = 0;
      v12 = (double *)*((_QWORD *)this + 52);
      v13 = *((_QWORD *)this + 1);
      v14 = *((_QWORD *)this + 2);
      v15 = *((_QWORD *)this + 8) + 8;
      v16 = 8 * *((_QWORD *)this + 7);
      v17 = 8 * *((_QWORD *)this + 51);
      do
      {
        v18 = v12;
        v19 = (double *)v15;
        v20 = v7;
        do
        {
          v10 = v10 + *v18 * *(double *)(v14 + 8 * v11 * v13);
          *v2 = v10;
          v9 = v9 + *v18 * *(double *)(v14 + 8 * (v11 * v13 + 1));
          v2[1] = v9;
          v8 = v8 + *v18 * *(v19 - 1);
          *v3 = v8;
          v5 = v5 + *v18 * *v19;
          v3[1] = v5;
          v19 = (double *)((char *)v19 + v16);
          v18 = (double *)((char *)v18 + v17);
          --v20;
        }
        while (v20);
        ++v11;
        ++v12;
      }
      while (v11 != v6);
    }
  }
  else
  {
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
  }
  v21 = *((double *)this + 39);
  *v2 = v10 / v21;
  v2[1] = v9 / v21;
  *v3 = v8 / v21;
  v3[1] = v5 / v21;
  if (v6)
  {
    v22 = (double *)(*((_QWORD *)this + 20) + 8);
    v23 = 8 * *((_QWORD *)this + 19);
    v24 = (double *)(*((_QWORD *)this + 2) + 8);
    v25 = 8 * *((_QWORD *)this + 1);
    do
    {
      *(v22 - 1) = *(v24 - 1) - *v2;
      *v22 = *v24 - v2[1];
      v22 = (double *)((char *)v22 + v23);
      v24 = (double *)((char *)v24 + v25);
      --v6;
    }
    while (v6);
  }
  v26 = *((_QWORD *)this + 11);
  v115 = v26;
  v116 = 2;
  v118 = 0;
  v119 = 0;
  v117 = 0;
  v27 = (2 * v26) >> 61;
  v28 = v26;
  if (!(2 * v26))
  {
    v29 = 0;
    if (!v26)
      goto LABEL_29;
LABEL_17:
    v30 = 0;
    v31 = *((_QWORD *)this + 7);
    v32 = *((_QWORD *)this + 8);
    v33 = *(uint64_t *)v4;
    v34 = *((uint64_t *)v4 + 1);
    if (v26 >= 6 && v31 == 1)
    {
      if ((unint64_t)v29 >= v32 + 8 * v26 + 8 || v32 >= (unint64_t)&v29[v26])
      {
        v36 = (float64x2_t)vdupq_lane_s64(v33, 0);
        v30 = v26 & 0xFFFFFFFFFFFFFFFELL;
        v37 = (float64x2_t)vdupq_lane_s64(v34, 0);
        v38 = (float64x2_t *)(v32 + 8);
        v39 = v26 & 0xFFFFFFFFFFFFFFFELL;
        v40 = (double *)v29;
        do
        {
          v120.val[0] = vsubq_f64(*(float64x2_t *)((char *)v38 - 8), v36);
          v41 = *v38++;
          v120.val[1] = vsubq_f64(v41, v37);
          vst2q_f64(v40, v120);
          v40 += 4;
          v39 -= 2;
        }
        while (v39);
        if (v26 == v30)
          goto LABEL_29;
      }
      else
      {
        v30 = 0;
      }
    }
    v42 = v26 - v30;
    v43 = &v29[v30].f64[1];
    v44 = (double *)(v32 + 8 * v30 * v31 + 8);
    v45 = 8 * v31;
    do
    {
      *(v43 - 1) = *(v44 - 1) - *(double *)&v33;
      *v43 = *v44 - *(double *)&v34;
      v43 += 2;
      v44 = (double *)((char *)v44 + v45);
      --v42;
    }
    while (v42);
    goto LABEL_29;
  }
  if (v27)
    sub_1BE61F930();
  v29 = (float64x2_t *)operator new(16 * v26);
  v117 = v29;
  v119 = &v29[v26];
  bzero(v29, 16 * v26);
  v118 = &v29[v28];
  if (v26)
    goto LABEL_17;
LABEL_29:
  v98 = v29;
  sub_1BE7FD330((unint64_t *)v104, (unint64_t *)this + 18);
  sub_1BE7FD330(&v99, (unint64_t *)this + 50);
  sub_1BE7FD4C4(&v108, v104, v100, (float64x2_t *)v101);
  sub_1BE7FD4C4((uint64_t *)&v112, &v108, 2, v29);
  v46 = (void *)*((_QWORD *)this + 25);
  *(_OWORD *)((char *)this + 184) = v112;
  if (v46)
  {
    *((_QWORD *)this + 26) = v46;
    operator delete(v46);
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
  }
  *(_OWORD *)((char *)this + 200) = v113;
  *((_QWORD *)this + 27) = v114;
  v114 = 0;
  v113 = 0uLL;
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    v102 = (float64_t *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    v106 = (char *)v105;
    operator delete(v105);
  }
  v104[0] = 2;
  v104[1] = v26;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  if (!(2 * v26))
  {
    v47 = 0;
    if (!v26)
      goto LABEL_44;
    goto LABEL_42;
  }
  if (v27)
    sub_1BE61F930();
  v47 = (char *)operator new(16 * v26);
  v105 = v47;
  v107 = &v47[16 * v26];
  bzero(v47, 16 * v26);
  v106 = &v47[v28 * 16];
  if (v26)
  {
LABEL_42:
    v48 = (uint64_t *)&v29->f64[1];
    v49 = v26;
    v50 = v47;
    do
    {
      *v50 = *(v48 - 1);
      v51 = *v48;
      v48 += 2;
      v50[v26] = v51;
      ++v50;
      --v49;
    }
    while (v49);
  }
LABEL_44:
  v97 = v47;
  v53 = (uint64_t *)*((_QWORD *)this + 36);
  v52 = (_QWORD *)*((_QWORD *)this + 37);
  v54 = v52 - v53;
  v99 = v54;
  v100 = v54;
  v55 = v54 * v54;
  v102 = 0;
  v103 = 0;
  v101 = 0;
  if (!(v54 * v54))
  {
    v56 = 0;
    if (v52 == v53)
      goto LABEL_54;
    goto LABEL_49;
  }
  if (v55 >> 61)
    sub_1BE61F930();
  v56 = (float64x2_t *)operator new(8 * v55);
  v101 = v56;
  v103 = (char *)&v56->f64[v55];
  bzero(v56, 8 * v55);
  v102 = &v56->f64[v55];
  if (v52 != v53)
  {
LABEL_49:
    if (v54 <= 1)
      v57 = 1;
    else
      v57 = v52 - v53;
    f64 = (_QWORD *)v56->f64;
    do
    {
      v59 = *v53++;
      *f64 = v59;
      f64 += v54 + 1;
      --v57;
    }
    while (v57);
  }
LABEL_54:
  sub_1BE7FD4C4(&v108, v104, v54, v56);
  sub_1BE7FD4C4((uint64_t *)&v112, &v108, 2, v98);
  v60 = (void *)*((_QWORD *)this + 30);
  *((_OWORD *)this + 14) = v112;
  if (v60)
  {
    *((_QWORD *)this + 31) = v60;
    operator delete(v60);
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
  }
  *((_OWORD *)this + 15) = v113;
  *((_QWORD *)this + 32) = v114;
  v114 = 0;
  v113 = 0uLL;
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  if (v56)
    operator delete(v56);
  if (v97)
    operator delete(v97);
  v61 = (float64x2_t *)operator new(0x20uLL);
  v62 = (double *)*((_QWORD *)this + 30);
  v63 = &v62[*((_QWORD *)this + 29)];
  v65 = *v63;
  v64 = v63[1];
  v66 = *v62;
  v67 = v62[1];
  v68 = 1.0 / (*v62 * v64 - *v63 * v67);
  v61->f64[0] = v64 * v68;
  v61->f64[1] = -(v67 * v68);
  v61[1].f64[0] = -(v65 * v68);
  v61[1].f64[1] = v68 * v66;
  sub_1BE7FD4C4(&v108, (uint64_t *)this + 23, 2, v61);
  v70 = v108;
  v69 = v109;
  *(_QWORD *)&v112 = v109;
  *((_QWORD *)&v112 + 1) = v108;
  v71 = v108 * v109;
  v114 = 0;
  v113 = 0uLL;
  if (!(v108 * v109))
  {
    v73 = 0;
    v74 = 0;
    v72 = 0;
    if (!v109)
      goto LABEL_87;
    goto LABEL_67;
  }
  if (v71 >> 61)
    sub_1BE61F930();
  v72 = (char *)operator new(8 * v71);
  v73 = &v72[8 * v71];
  bzero(v72, 8 * v71);
  v74 = v73;
  if (v69)
  {
LABEL_67:
    if (!v70)
      goto LABEL_87;
    v75 = 0;
    v76 = 0;
    v77 = __p;
    v78 = 8 * v69;
    v80 = v69 < 4 || v70 != 1;
    v81 = v72 + 16;
    v82 = (char *)__p + 16;
    do
    {
      v83 = (unint64_t)(&v72[8 * v76] - &v77[v78 * v76]) < 0x20 || v80;
      if ((v83 & 1) != 0)
      {
        v84 = 0;
      }
      else
      {
        v85 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        v86 = (__int128 *)v82;
        v87 = v81;
        do
        {
          v88 = *v86;
          *(v87 - 1) = *(v86 - 1);
          *v87 = v88;
          v87 += 2;
          v86 += 2;
          v85 -= 4;
        }
        while (v85);
        v84 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        if (v69 == (v69 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_75;
      }
      v89 = v69 - v84;
      v90 = &v72[8 * v76 + 8 * v70 * v84];
      v91 = (uint64_t *)&v77[8 * v84 + 8 * v75];
      do
      {
        v92 = *v91++;
        *(_QWORD *)v90 = v92;
        v90 += 8 * v70;
        --v89;
      }
      while (v89);
LABEL_75:
      ++v76;
      v81 = (_OWORD *)((char *)v81 + 8);
      v82 += v78;
      v75 += v69;
    }
    while (v76 != v70);
  }
LABEL_87:
  *((_OWORD *)this + 20) = v112;
  v93 = (void *)*((_QWORD *)this + 42);
  if (v93)
  {
    *((_QWORD *)this + 43) = v93;
    operator delete(v93);
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 43) = 0;
    *((_QWORD *)this + 44) = 0;
  }
  *((_QWORD *)this + 42) = v72;
  *((_QWORD *)this + 43) = v74;
  *((_QWORD *)this + 44) = v73;
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  operator delete(v61);
  v94 = (double *)*((_QWORD *)this + 42);
  v95 = &v94[*((_QWORD *)this + 41)];
  v96 = (double *)*((_QWORD *)this + 45);
  *v96 = *v2 - *v94 * *v4 - *v95 * v4[1];
  v96[1] = v2[1] - v94[1] * *v4 - v95[1] * v4[1];
  if (v98)
    operator delete(v98);
  operator delete(v4);
  operator delete(v2);
}

void sub_1BE7FD19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  operator delete(v31);
  if (__p)
  {
    *(_QWORD *)(v32 - 104) = __p;
    operator delete(__p);
  }
  operator delete(v30);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_1BE7FD2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x1BE7FD1E8);
  JUMPOUT(0x1BE7FD1D4);
}

void sub_1BE7FD308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18)
    JUMPOUT(0x1BE7FD1FCLL);
  JUMPOUT(0x1BE7FD1F0);
}

void sub_1BE7FD31C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1BE7FD23CLL);
  JUMPOUT(0x1BE7FD230);
}

void sub_1BE7FD330(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v15;
  _OWORD *v16;
  __int128 *v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  __int128 v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;

  v4 = *a2;
  v3 = a2[1];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = 0;
  v5 = v4 * v3;
  a1[3] = 0;
  a1[4] = 0;
  if (v4 * v3)
  {
    if (v5 >> 61)
      sub_1BE61F930();
    v7 = (char *)operator new(8 * v5);
    a1[2] = (unint64_t)v7;
    a1[4] = (unint64_t)&v7[8 * v5];
    bzero(v7, 8 * v5);
    a1[3] = (unint64_t)&v7[8 * v5];
    if (v3)
      v8 = v4 == 0;
    else
      v8 = 1;
    if (!v8)
      goto LABEL_14;
  }
  else
  {
    v7 = 0;
    if (v3)
      v9 = v4 == 0;
    else
      v9 = 1;
    if (!v9)
    {
LABEL_14:
      v10 = 0;
      v11 = 0;
      v12 = a2[2];
      v13 = 8 * v3;
      v15 = v3 < 4 || v4 != 1;
      v16 = v7 + 16;
      v17 = (__int128 *)(v12 + 16);
      do
      {
        v18 = (unint64_t)&v7[8 * v11 - v12 - v13 * v11] < 0x20 || v15;
        if ((v18 & 1) != 0)
        {
          v19 = 0;
        }
        else
        {
          v20 = v3 & 0xFFFFFFFFFFFFFFFCLL;
          v21 = v17;
          v22 = v16;
          do
          {
            v23 = *v21;
            *(v22 - 1) = *(v21 - 1);
            *v22 = v23;
            v22 += 2;
            v21 += 2;
            v20 -= 4;
          }
          while (v20);
          v19 = v3 & 0xFFFFFFFFFFFFFFFCLL;
          if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_21;
        }
        v24 = v3 - v19;
        v25 = &v7[8 * v11 + 8 * v4 * v19];
        v26 = (uint64_t *)(v12 + 8 * (v19 + v10));
        do
        {
          v27 = *v26++;
          *(_QWORD *)v25 = v27;
          v25 += 8 * v4;
          --v24;
        }
        while (v24);
LABEL_21:
        ++v11;
        v16 = (_OWORD *)((char *)v16 + 8);
        v17 = (__int128 *)((char *)v17 + v13);
        v10 += v3;
      }
      while (v11 != v4);
    }
  }
}

void sub_1BE7FD4A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE7FD4C4(uint64_t *a1, uint64_t *a2, uint64_t a3, float64x2_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v18;
  float64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  unint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  unint64_t v36;
  double *v37;
  double *v38;
  double v39;

  v7 = *a2;
  *a1 = *a2;
  a1[1] = a3;
  a1[2] = 0;
  v8 = v7 * a3;
  a1[3] = 0;
  a1[4] = 0;
  if (!(v7 * a3))
  {
    v10 = 0;
    if (!v7)
      return;
    goto LABEL_6;
  }
  if (v8 >> 61)
    sub_1BE61F930();
  v10 = (char *)operator new(8 * v8);
  a1[2] = (uint64_t)v10;
  a1[4] = (uint64_t)&v10[8 * v8];
  bzero(v10, 8 * v8);
  a1[3] = (uint64_t)&v10[8 * v8];
  if (v7)
  {
LABEL_6:
    if (a3)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = (float64x2_t *)a2[2];
        v15 = 8 * a3;
        v16 = 8 * v11;
        v18 = v11 > 9 && a3 == 1;
        v19 = v14 + 1;
        do
        {
          v20 = 0;
          v21 = v13 * a3;
          v22 = a4 + 1;
          do
          {
            v23 = v20 + v21;
            *(_QWORD *)&v10[8 * v20 + 8 * v21] = 0;
            v24 = 0.0;
            v25 = 0;
            if (!v18)
              goto LABEL_34;
            v26 = (unint64_t)&v10[8 * v20 + 8 + v15 * v13];
            v27 = (unint64_t)&v10[8 * v20 + v15 * v13];
            v28 = v27 >= (unint64_t)&a4->f64[v20 + (unint64_t)v16 / 8]
               || (unint64_t)&a4->f64[v20] >= v26;
            v29 = !v28;
            if ((unint64_t)v14 + v16 * v13 < v26 && v27 < (unint64_t)v14 + v16 + v16 * v13)
              goto LABEL_34;
            if (v29)
              goto LABEL_34;
            v31 = v11 & 0xFFFFFFFFFFFFFFFCLL;
            v32 = v19;
            v33 = v22;
            do
            {
              v34 = vmulq_f64(v32[-1], v33[-1]);
              v35 = vmulq_f64(*v32, *v33);
              v24 = v24 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
              v33 += 2;
              v32 += 2;
              v31 -= 4;
            }
            while (v31);
            *(double *)&v10[8 * v23] = v24;
            v25 = v11 & 0xFFFFFFFFFFFFFFFCLL;
            if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_34:
              v36 = v11 - v25;
              v37 = &a4->f64[v20 + a3 * v25];
              v38 = &v14->f64[v12 + v25];
              do
              {
                v39 = *v38++;
                v24 = v24 + v39 * *v37;
                *(double *)&v10[8 * v23] = v24;
                v37 = (double *)((char *)v37 + v15);
                --v36;
              }
              while (v36);
            }
            ++v20;
            v22 = (float64x2_t *)((char *)v22 + 8);
          }
          while (v20 != a3);
          ++v13;
          v19 = (float64x2_t *)((char *)v19 + v16);
          v12 += v11;
        }
        while (v13 != v7);
      }
      else
      {
        bzero(v10, 8 * v8);
      }
    }
  }
}

void sub_1BE7FD6FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::CPDAffineRegistration::update_variance(CoreHandwriting::CPDAffineRegistration *this)
{
  double v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  float64x2_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  double *v28;
  double v29;
  unint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t v33;
  unint64_t v34;
  float64x2_t *v35;
  unint64_t v37;
  double v38;
  float64x2_t *v39;
  float64x2_t *v40;
  unint64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unint64_t v44;
  double *v45;
  double *v46;
  double v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  void *v52;
  long double v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  double *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[2];
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;

  v2 = *((double *)this + 55);
  sub_1BE7FD4C4(&v69, (uint64_t *)this + 23, *((_QWORD *)this + 41), *((float64x2_t **)this + 42));
  if (v70)
  {
    v3 = __p;
    v4 = v70;
    if (v70 == 1)
    {
      v5 = 0;
      v6 = 0.0;
    }
    else
    {
      v5 = v70 & 0xFFFFFFFFFFFFFFFELL;
      v6 = 0.0;
      v7 = v70 & 0xFFFFFFFFFFFFFFFELL;
      v8 = (double *)__p;
      do
      {
        v6 = v6 + *v8 + v8[v4 + 1];
        v8 += 2 * v70 + 2;
        v7 -= 2;
      }
      while (v7);
      if (v70 == v5)
        goto LABEL_11;
    }
    v9 = v70 - v5;
    v10 = 8 * v5 * (v70 + 1);
    v11 = v4 * 8 + 8;
    do
    {
      v6 = v6 + *(double *)((char *)__p + v10);
      v10 += v11;
      --v9;
    }
    while (v9);
LABEL_11:
    v72 = v3;
    operator delete(v3);
    goto LABEL_12;
  }
  v3 = __p;
  v6 = 0.0;
  if (__p)
    goto LABEL_11;
LABEL_12:
  v12 = *((_QWORD *)this + 19);
  v13 = (float64x2_t *)*((_QWORD *)this + 20);
  v14 = *((_QWORD *)this + 18);
  v69 = v14;
  v70 = v12;
  v15 = v14 * v12;
  v72 = 0;
  v73 = 0;
  __p = 0;
  if (!(v14 * v12))
  {
    v17 = 0;
    v18 = (uint64_t *)((char *)this + 320);
    if (!v12)
      goto LABEL_30;
    goto LABEL_17;
  }
  if (v15 >> 61)
    sub_1BE61F930();
  v16 = 8 * v15;
  v17 = (float64x2_t *)operator new(8 * v15);
  bzero(v17, v16);
  v18 = (uint64_t *)((char *)this + 320);
  if (v12)
  {
LABEL_17:
    if (!v14)
      goto LABEL_30;
    v19 = 0;
    v20 = 0;
    v21 = 8 * v12;
    v22 = v17 + 1;
    v23 = v13 + 1;
    do
    {
      if (v12 >= 4 && (unint64_t)((char *)v17 + v21 * v20 - ((char *)v13 + v21 * v20)) >= 0x20)
      {
        v30 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        v31 = v23;
        v32 = v22;
        do
        {
          v33 = vmulq_f64(*v31, *v31);
          v32[-1] = vmulq_f64(v31[-1], v31[-1]);
          *v32 = v33;
          v32 += 2;
          v31 += 2;
          v30 -= 4;
        }
        while (v30);
        v24 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_19;
      }
      else
      {
        v24 = 0;
      }
      v25 = v12 - v24;
      v26 = v24 + v19;
      v27 = &v17->f64[v26];
      v28 = &v13->f64[v26];
      do
      {
        v29 = *v28++;
        *v27++ = v29 * v29;
        --v25;
      }
      while (v25);
LABEL_19:
      ++v20;
      v22 = (float64x2_t *)((char *)v22 + v21);
      v23 = (float64x2_t *)((char *)v23 + v21);
      v19 += v12;
    }
    while (v20 != v14);
  }
LABEL_30:
  v34 = *((_QWORD *)this + 5);
  if (!v34)
  {
    v38 = 0.0;
    goto LABEL_42;
  }
  v35 = (float64x2_t *)*((_QWORD *)this + 33);
  if (v34 < 4 || v12 != 1)
  {
    v37 = 0;
    v38 = 0.0;
LABEL_40:
    v44 = v34 - v37;
    v45 = &v17->f64[v37 * v12 + 1];
    v46 = &v35->f64[v37];
    do
    {
      v47 = *v46++;
      v38 = v38 + v47 * (*(v45 - 1) + *v45);
      v45 += v12;
      --v44;
    }
    while (v44);
    goto LABEL_42;
  }
  v37 = v34 & 0xFFFFFFFFFFFFFFFCLL;
  v39 = v17 + 1;
  v40 = v35 + 1;
  v38 = 0.0;
  v41 = v34 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v42 = vmulq_f64(v40[-1], vaddq_f64(v39[-1], *(float64x2_t *)((char *)v39 - 8)));
    v43 = vmulq_f64(*v40, vaddq_f64(*v39, *(float64x2_t *)((char *)v39 + 8)));
    v38 = v38 + v42.f64[0] + v42.f64[1] + v43.f64[0] + v43.f64[1];
    v39 += 2;
    v40 += 2;
    v41 -= 4;
  }
  while (v41);
  if (v34 != v37)
    goto LABEL_40;
LABEL_42:
  sub_1BE7FD4C4(v62, v18, *((_QWORD *)this + 29), *((float64x2_t **)this + 30));
  sub_1BE7FD4C4(&v65, v62, *((_QWORD *)this + 41), *((float64x2_t **)this + 42));
  if (v66)
  {
    v48 = v67;
    v49 = v66;
    if (v66 == 1)
    {
      v50 = 0;
      v51 = 0.0;
LABEL_56:
      v59 = v66 - v50;
      v60 = 8 * v50 * (v66 + 1);
      v61 = v49 * 8 + 8;
      do
      {
        v51 = v51 + *(double *)((char *)v67 + v60);
        v60 += v61;
        --v59;
      }
      while (v59);
      goto LABEL_58;
    }
    v50 = v66 & 0xFFFFFFFFFFFFFFFELL;
    v51 = 0.0;
    v57 = v66 & 0xFFFFFFFFFFFFFFFELL;
    v58 = (double *)v67;
    do
    {
      v51 = v51 + *v58 + v58[v49 + 1];
      v58 += 2 * v66 + 2;
      v57 -= 2;
    }
    while (v57);
    if (v66 != v50)
      goto LABEL_56;
  }
  else
  {
    v48 = v67;
    v51 = 0.0;
    if (!v67)
    {
      v52 = v63;
      if (!v63)
        goto LABEL_48;
      goto LABEL_47;
    }
  }
LABEL_58:
  v68 = v48;
  operator delete(v48);
  v52 = v63;
  if (v63)
  {
LABEL_47:
    v64 = v52;
    operator delete(v52);
  }
LABEL_48:
  v53 = *((double *)this + 48);
  v54 = *((double *)this + 39) * (double)*((unint64_t *)this + 12);
  v55 = (v38 + v6 * -2.0 + v51) / (v53 + v53) + v54 * 0.5 * log(v53);
  *((double *)this + 55) = v55;
  v56 = (v38 - v6) / v54;
  *((double *)this + 48) = v56;
  *((double *)this + 49) = vabdd_f64(v55, v2);
  if (v56 <= 0.0)
    *((double *)this + 48) = *((double *)this + 56) / 10.0;
  if (v17)
    operator delete(v17);
}

void sub_1BE7FDB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (__p)
    operator delete(__p);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_1BE7FDB94(double **a1@<X0>, double *a2@<X1>, double **a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double *v6;
  double *v7;
  uint64_t v8;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  double *v23;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v7 = *a1;
  v6 = a1[1];
  v8 = (char *)v6 - (char *)*a1;
  if (v6 != *a1)
  {
    if (v8 < 0)
      sub_1BE61F930();
    v10 = (double *)operator new((char *)v6 - (char *)*a1);
    *a3 = v10;
    a3[1] = v10;
    a3[2] = &v10[2 * (v8 >> 4)];
    v11 = 1.0 / (v4 - v3);
    while (1)
    {
      v13 = v11 * (*v7 - v5);
      v14 = v11 * (v7[1] - v3);
      v15 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v15)
        break;
      *v10 = v13;
      v10[1] = v14;
      v12 = (uint64_t)(v10 + 2);
LABEL_5:
      a3[1] = (double *)v12;
      v7 += 2;
      v10 = (double *)v12;
      if (v7 == v6)
        return;
    }
    v16 = *a3;
    v17 = ((char *)v10 - (char *)*a3) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_1BE61F930();
    v19 = v15 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_1BE61F100();
      v21 = (char *)operator new(16 * v20);
      v22 = (double *)&v21[16 * v17];
      v23 = (double *)&v21[16 * v20];
      *v22 = v13;
      v22[1] = v14;
      v12 = (uint64_t)(v22 + 2);
      if (v10 == v16)
        goto LABEL_21;
    }
    else
    {
      v22 = (double *)(16 * v17);
      v23 = 0;
      *v22 = v13;
      v22[1] = v14;
      v12 = 16 * v17 + 16;
      if (v10 == v16)
      {
LABEL_21:
        *a3 = v22;
        a3[1] = (double *)v12;
        a3[2] = v23;
LABEL_22:
        operator delete(v10);
        goto LABEL_5;
      }
    }
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
      v22 -= 2;
      v10 -= 2;
    }
    while (v10 != v16);
    v10 = *a3;
    *a3 = v22;
    a3[1] = (double *)v12;
    a3[2] = v23;
    if (!v10)
      goto LABEL_5;
    goto LABEL_22;
  }
}

void sub_1BE7FDD58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CoreHandwriting::adjust_for_scaling@<D0>(double **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  __int128 v13;
  uint64_t v14;
  double v15[4];

  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  sub_1BE7FDB94(a1, v15, (double **)&v13);
  v8 = v14;
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v8;
  sub_1BE7FDB94(a1 + 3, v15, (double **)&v13);
  v9 = v14;
  *(_OWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 40) = v9;
  sub_1BE7FDB94(a1 + 6, v15, (double **)&v13);
  v10 = v14;
  *(_OWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 64) = v10;
  sub_1BE7FDB94(a1 + 9, v15, (double **)&v13);
  v11 = v14;
  result = *(double *)&v13;
  *(_OWORD *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 88) = v11;
  return result;
}

void sub_1BE7FDE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FDE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FDE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FDE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FDE88(double **a1@<X0>, double *a2@<X1>, double **a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double *v6;
  double *v7;
  uint64_t v8;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  double *v23;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v7 = *a1;
  v6 = a1[1];
  v8 = (char *)v6 - (char *)*a1;
  if (v6 != *a1)
  {
    if (v8 < 0)
      sub_1BE61F930();
    v10 = (double *)operator new((char *)v6 - (char *)*a1);
    v11 = v4 - v3;
    *a3 = v10;
    a3[1] = v10;
    a3[2] = &v10[2 * (v8 >> 4)];
    while (1)
    {
      v13 = v5 + *v7 * v11;
      v14 = v3 + v7[1] * v11;
      v15 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v15)
        break;
      *v10 = v13;
      v10[1] = v14;
      v12 = (uint64_t)(v10 + 2);
LABEL_5:
      a3[1] = (double *)v12;
      v7 += 2;
      v10 = (double *)v12;
      if (v7 == v6)
        return;
    }
    v16 = *a3;
    v17 = ((char *)v10 - (char *)*a3) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_1BE61F930();
    v19 = v15 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_1BE61F100();
      v21 = (char *)operator new(16 * v20);
      v22 = (double *)&v21[16 * v17];
      v23 = (double *)&v21[16 * v20];
      *v22 = v13;
      v22[1] = v14;
      v12 = (uint64_t)(v22 + 2);
      if (v10 == v16)
        goto LABEL_21;
    }
    else
    {
      v22 = (double *)(16 * v17);
      v23 = 0;
      *v22 = v13;
      v22[1] = v14;
      v12 = 16 * v17 + 16;
      if (v10 == v16)
      {
LABEL_21:
        *a3 = v22;
        a3[1] = (double *)v12;
        a3[2] = v23;
LABEL_22:
        operator delete(v10);
        goto LABEL_5;
      }
    }
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
      v22 -= 2;
      v10 -= 2;
    }
    while (v10 != v16);
    v10 = *a3;
    *a3 = v22;
    a3[1] = (double *)v12;
    a3[2] = v23;
    if (!v10)
      goto LABEL_5;
    goto LABEL_22;
  }
}

void sub_1BE7FE03C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CoreHandwriting::adjust_back_for_scaling@<D0>(double **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  __int128 v13;
  uint64_t v14;
  double v15[4];

  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  sub_1BE7FDE88(a1, v15, (double **)&v13);
  v8 = v14;
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v8;
  sub_1BE7FDE88(a1 + 3, v15, (double **)&v13);
  v9 = v14;
  *(_OWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 40) = v9;
  sub_1BE7FDE88(a1 + 6, v15, (double **)&v13);
  v10 = v14;
  *(_OWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 64) = v10;
  sub_1BE7FDE88(a1 + 9, v15, (double **)&v13);
  v11 = v14;
  result = *(double *)&v13;
  *(_OWORD *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 88) = v11;
  return result;
}

void sub_1BE7FE11C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FE130(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FE144(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FE158(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::merge_lines(CoreHandwriting *this@<X0>, const CoreHandwriting::PrincipalLines *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;

  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = (_OWORD *)*((_QWORD *)this + 9);
  v8 = operator new(0x10uLL);
  *v8 = *v7;
  v9 = *((_QWORD *)a2 + 9);
  v10 = operator new(0x20uLL);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v10 = *v8;
  *((_OWORD *)v10 + 1) = v11;
  operator delete(v8);
  sub_1BE6F5A88((_QWORD *)(a3 + 72), (char *)v10, (char *)v10 + 32, 2uLL);
  v12 = (_OWORD *)*((_QWORD *)this + 6);
  v13 = operator new(0x10uLL);
  *v13 = *v12;
  v14 = *((_QWORD *)a2 + 6);
  v15 = operator new(0x20uLL);
  v16 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v15 = *v13;
  *((_OWORD *)v15 + 1) = v16;
  operator delete(v13);
  sub_1BE6F5A88((_QWORD *)(a3 + 48), (char *)v15, (char *)v15 + 32, 2uLL);
  v17 = (_OWORD *)*((_QWORD *)this + 3);
  v18 = operator new(0x10uLL);
  *v18 = *v17;
  v19 = *((_QWORD *)a2 + 3);
  v20 = operator new(0x20uLL);
  v21 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v20 = *v18;
  *((_OWORD *)v20 + 1) = v21;
  operator delete(v18);
  sub_1BE6F5A88((_QWORD *)(a3 + 24), (char *)v20, (char *)v20 + 32, 2uLL);
  v22 = *(_OWORD **)this;
  v23 = operator new(0x10uLL);
  *v23 = *v22;
  v24 = *(_QWORD *)a2;
  v25 = operator new(0x20uLL);
  v26 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v25 = *v23;
  *((_OWORD *)v25 + 1) = v26;
  operator delete(v23);
  sub_1BE6F5A88((_QWORD *)a3, (char *)v25, (char *)v25 + 32, 2uLL);
  operator delete(v25);
  operator delete(v20);
  operator delete(v15);
  operator delete(v10);
}

void sub_1BE7FE334(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  operator delete(v4);
  operator delete(v3);
  operator delete(v2);
  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FE3C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7FE3E0(double **a1@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  char *v25;
  char *v26;
  char *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  char *v34;
  char *v35;
  char *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  char *v43;
  char *v44;
  char *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double *v51;
  char *v52;
  char *v53;
  char *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;

  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v4 = a1[3];
  v6 = *v4;
  v5 = v4[1];
  if ((v4[3] - v5) / (v4[2] - *v4) == 0.0)
    v7 = 0.001;
  else
    v7 = (v4[3] - v5) / (v4[2] - *v4);
  v8 = -1.0 / v7;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
    v12 = -3.40282347e38;
    v11 = 3.40282347e38;
  }
  else
  {
    v11 = 3.40282347e38;
    v12 = -3.40282347e38;
    do
    {
      v14 = *v9;
      v13 = v9[1];
      v9 += 2;
      v15 = v13 + -v8 * v14;
      if (v15 > v12)
        v12 = v15;
      if (v15 < v11)
        v11 = v15;
    }
    while (v9 != v10);
  }
  v16 = a1[9];
  v57 = *v16;
  v58 = v16[1];
  v17 = a1[6];
  v59 = *v17;
  v60 = v17[1];
  v18 = v5 - v7 * v6;
  v55 = **a1;
  v56 = (*a1)[1];
  v19 = v8 - v7;
  v20 = (v18 - v12) / (v8 - v7);
  v21 = v18 + v7 * v20;
  v22 = (v18 - v11) / (v8 - v7);
  v23 = v18 + v7 * v22;
  v24 = (double *)operator new(0x10uLL);
  if (v20 >= v22)
  {
    *v24 = v22;
    v24[1] = v23;
    v25 = (char *)operator new(0x20uLL);
    *((double *)v25 + 2) = v20;
    *((double *)v25 + 3) = v21;
  }
  else
  {
    *v24 = v20;
    v24[1] = v21;
    v25 = (char *)operator new(0x20uLL);
    *((double *)v25 + 2) = v22;
    *((double *)v25 + 3) = v23;
  }
  *(_OWORD *)v25 = *(_OWORD *)v24;
  v26 = v25;
  v27 = v25 + 32;
  operator delete(v24);
  sub_1BE6F5A88((_QWORD *)(a3 + 24), v26, v27, 2uLL);
  v28 = v60 - v7 * v59;
  v29 = (v28 - v12) / v19;
  v30 = v28 + v7 * v29;
  v31 = (v28 - v11) / v19;
  v32 = v28 + v7 * v31;
  v33 = (double *)operator new(0x10uLL);
  if (v29 >= v31)
  {
    *v33 = v31;
    v33[1] = v32;
    v34 = (char *)operator new(0x20uLL);
    *((double *)v34 + 2) = v29;
    *((double *)v34 + 3) = v30;
  }
  else
  {
    *v33 = v29;
    v33[1] = v30;
    v34 = (char *)operator new(0x20uLL);
    *((double *)v34 + 2) = v31;
    *((double *)v34 + 3) = v32;
  }
  *(_OWORD *)v34 = *(_OWORD *)v33;
  v35 = v34;
  v36 = v34 + 32;
  operator delete(v33);
  sub_1BE6F5A88((_QWORD *)(a3 + 48), v35, v36, 2uLL);
  v37 = v58 - v7 * v57;
  v38 = (v37 - v12) / v19;
  v39 = v37 + v7 * v38;
  v40 = (v37 - v11) / v19;
  v41 = v37 + v7 * v40;
  v42 = (double *)operator new(0x10uLL);
  if (v38 >= v40)
  {
    *v42 = v40;
    v42[1] = v41;
    v43 = (char *)operator new(0x20uLL);
    *((double *)v43 + 2) = v38;
    *((double *)v43 + 3) = v39;
  }
  else
  {
    *v42 = v38;
    v42[1] = v39;
    v43 = (char *)operator new(0x20uLL);
    *((double *)v43 + 2) = v40;
    *((double *)v43 + 3) = v41;
  }
  *(_OWORD *)v43 = *(_OWORD *)v42;
  v44 = v43;
  v45 = v43 + 32;
  operator delete(v42);
  sub_1BE6F5A88((_QWORD *)(a3 + 72), v44, v45, 2uLL);
  v46 = v56 - v7 * v55;
  v47 = (v46 - v12) / v19;
  v48 = v46 + v7 * v47;
  v49 = (v46 - v11) / v19;
  v50 = v46 + v7 * v49;
  v51 = (double *)operator new(0x10uLL);
  if (v47 >= v49)
  {
    *v51 = v49;
    v51[1] = v50;
    v52 = (char *)operator new(0x20uLL);
    *((double *)v52 + 2) = v47;
    *((double *)v52 + 3) = v48;
  }
  else
  {
    *v51 = v47;
    v51[1] = v48;
    v52 = (char *)operator new(0x20uLL);
    *((double *)v52 + 2) = v49;
    *((double *)v52 + 3) = v50;
  }
  *(_OWORD *)v52 = *(_OWORD *)v51;
  v53 = v52;
  v54 = v52 + 32;
  operator delete(v51);
  sub_1BE6F5A88((_QWORD *)a3, v53, v54, 2uLL);
  operator delete(v53);
  operator delete(v44);
  operator delete(v35);
  operator delete(v26);
}

void sub_1BE7FE780(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  operator delete(v4);
  operator delete(v3);
  operator delete(v2);
  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

id CoreHandwriting::transform(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (id)objc_msgSend_newDrawingWithTransform_(a1, a2, (uint64_t)a2, a4, a5, a6);
}

_QWORD *sub_1BE7FE818(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

_QWORD *sub_1BE7FE8A8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)a1[52];
  if (v2)
  {
    a1[53] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[45];
  if (v3)
  {
    a1[46] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[42];
  if (v4)
  {
    a1[43] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[36];
  if (v5)
  {
    a1[37] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[33];
  if (v6)
  {
    a1[34] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[30];
  if (v7)
  {
    a1[31] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[25];
  if (v8)
  {
    a1[26] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[20];
  if (v9)
  {
    a1[21] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[15];
  if (v10)
  {
    a1[16] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[8];
  if (v11)
  {
    a1[9] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[2];
  if (v12)
  {
    a1[3] = v12;
    operator delete(v12);
  }
  return a1;
}

Class sub_1BE7FE978(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF568378)
  {
    qword_1EF568378 = _sl_dlopen();
    if (!qword_1EF568378)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("UIFont");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EF568390 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1BE7FEA7C(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF568378)
  {
    qword_1EF568378 = _sl_dlopen();
    if (!qword_1EF568378)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("UIColor");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EF5683A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1BE7FEB80(uint64_t result, uint64_t *a2, double *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  double *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t *v81;
  BOOL v82;
  double *v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double *v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t *v97;
  double *v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  uint64_t *v104;
  uint64_t v105;
  double *v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  double *v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double *v135;
  double v136;
  double v137;
  double *v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  double *v153;
  double v154;
  double v155;
  double v156;
  double *v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  uint64_t v163;
  double *v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  int64_t v170;
  uint64_t *v171;
  double v172;
  double v173;
  int64_t v174;
  int64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  double *v180;
  double v181;
  double v182;
  double v183;
  double *v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  uint64_t *v190;
  uint64_t v191;
  double *v192;
  double v193;
  double v194;
  double v195;
  double *v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double *v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  double *v213;
  double v214;
  double v215;
  double v216;
  double *v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t *v228;
  double v229;
  double v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  double *v234;
  double v235;
  double v236;
  double v237;
  double *v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  double *v251;
  double v252;
  double v253;
  double v254;
  double *v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  uint64_t *v263;
  double *v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  uint64_t *v270;
  uint64_t v271;
  double v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  double *v276;
  double v277;
  double v278;
  double v279;
  double *v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  uint64_t *v286;
  double *v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v132 = *(a2 - 1);
        v133 = *v11;
        v134 = **(_QWORD **)a3;
        v135 = (double *)(v134 + 16 * v132);
        v136 = v135[1];
        v137 = a3[1];
        v138 = (double *)(v134 + 16 * *v11);
        v139 = v138[1];
        v140 = (v136 - a3[2]) * (v136 - a3[2])
             + (*v135 - v137) * (*v135 - v137)
             - ((v139 - a3[2]) * (v139 - a3[2])
              + (*v138 - v137) * (*v138 - v137));
        v141 = v136 - v139;
        v142 = *v135 - *v138;
        if (v142 == 0.0)
          v142 = v141;
        if (v140 == 0.0)
          v143 = v142;
        else
          v143 = v140;
        if (v143 < 0.0)
        {
          *v11 = v132;
          *(a2 - 1) = v133;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1BE7FF920(v11, v11 + 1, v10, a3);
      case 4uLL:
        return (uint64_t)sub_1BE7FFD94(v11, v11 + 1, v11 + 2, v10, a3);
      case 5uLL:
        return (uint64_t)sub_1BE7FFF28(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v144 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v145 = 0;
                v146 = **(_QWORD **)a3;
                v147 = a3[1];
                v148 = a3[2];
                v149 = v11;
                do
                {
                  v152 = *v149;
                  v151 = v149[1];
                  v149 = v144;
                  v153 = (double *)(v146 + 16 * v151);
                  v154 = *v153;
                  v155 = v153[1];
                  v156 = (v155 - v148) * (v155 - v148) + (*v153 - v147) * (*v153 - v147);
                  v157 = (double *)(v146 + 16 * v152);
                  v158 = v157[1];
                  v159 = (v158 - v148) * (v158 - v148);
                  v160 = v155 - v158;
                  v161 = v154 - *v157;
                  if (v161 == 0.0)
                    v161 = v160;
                  if (v156 - (v159 + (*v157 - v147) * (*v157 - v147)) == 0.0)
                    v162 = v161;
                  else
                    v162 = v156 - (v159 + (*v157 - v147) * (*v157 - v147));
                  if (v162 < 0.0)
                  {
                    v163 = v145;
                    do
                    {
                      *(uint64_t *)((char *)v11 + v163 + 8) = v152;
                      if (!v163)
                      {
                        v150 = v11;
                        goto LABEL_131;
                      }
                      v152 = *(uint64_t *)((char *)v11 + v163 - 8);
                      v164 = (double *)(v146 + 16 * v152);
                      v165 = v164[1];
                      v166 = (v165 - v148) * (v165 - v148);
                      v167 = v155 - v165;
                      v168 = v154 - *v164;
                      if (v168 == 0.0)
                        v168 = v167;
                      if (v156 - (v166 + (*v164 - v147) * (*v164 - v147)) == 0.0)
                        v169 = v168;
                      else
                        v169 = v156 - (v166 + (*v164 - v147) * (*v164 - v147));
                      v163 -= 8;
                    }
                    while (v169 < 0.0);
                    v150 = (uint64_t *)((char *)v11 + v163 + 8);
LABEL_131:
                    *v150 = v151;
                  }
                  v144 = v149 + 1;
                  v145 += 8;
                }
                while (v149 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v270 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v271 = **(_QWORD **)a3;
              v272 = a3[1];
              v273 = a3[2];
              do
              {
                v275 = *v9;
                v274 = v9[1];
                v9 = v270;
                v276 = (double *)(v271 + 16 * v274);
                v277 = *v276;
                v278 = v276[1];
                v279 = (v278 - v273) * (v278 - v273) + (*v276 - v272) * (*v276 - v272);
                v280 = (double *)(v271 + 16 * v275);
                v281 = v280[1];
                v282 = (v281 - v273) * (v281 - v273);
                v283 = v278 - v281;
                v284 = v277 - *v280;
                if (v284 == 0.0)
                  v284 = v283;
                if (v279 - (v282 + (*v280 - v272) * (*v280 - v272)) == 0.0)
                  v285 = v284;
                else
                  v285 = v279 - (v282 + (*v280 - v272) * (*v280 - v272));
                if (v285 < 0.0)
                {
                  v286 = v9;
                  do
                  {
                    *v286 = v275;
                    v275 = *(v286 - 2);
                    v287 = (double *)(v271 + 16 * v275);
                    v288 = v287[1];
                    v289 = (v288 - v273) * (v288 - v273);
                    v290 = v278 - v288;
                    v291 = v277 - *v287;
                    if (v291 == 0.0)
                      v291 = v290;
                    if (v279 - (v289 + (*v287 - v272) * (*v287 - v272)) == 0.0)
                      v292 = v291;
                    else
                      v292 = v279 - (v289 + (*v287 - v272) * (*v287 - v272));
                    --v286;
                  }
                  while (v292 < 0.0);
                  *v286 = v274;
                }
                v270 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v170 = (v13 - 2) >> 1;
            v171 = *(uint64_t **)a3;
            v172 = a3[1];
            v173 = a3[2];
            v174 = v170;
            do
            {
              v175 = v174;
              if (v170 >= v174)
              {
                v176 = (2 * v174) | 1;
                v177 = &v11[v176];
                v178 = 2 * v174 + 2;
                v179 = *v171;
                if (v178 < (uint64_t)v13)
                {
                  v180 = (double *)(v179 + 16 * *v177);
                  v181 = *v180;
                  v182 = v180[1];
                  v183 = (v182 - v173) * (v182 - v173) + (*v180 - v172) * (*v180 - v172);
                  v184 = (double *)(v179 + 16 * v177[1]);
                  v185 = v184[1];
                  v186 = v183 - ((v185 - v173) * (v185 - v173) + (*v184 - v172) * (*v184 - v172));
                  v187 = v182 - v185;
                  v188 = v181 - *v184;
                  if (v188 == 0.0)
                    v188 = v187;
                  if (v186 == 0.0)
                    v189 = v188;
                  else
                    v189 = v186;
                  if (v189 < 0.0)
                  {
                    ++v177;
                    v176 = 2 * v175 + 2;
                  }
                }
                v190 = &v11[v175];
                result = *v177;
                v191 = *v190;
                v192 = (double *)(v179 + 16 * *v177);
                v193 = *v192;
                v194 = v192[1];
                v195 = (v194 - v173) * (v194 - v173) + (*v192 - v172) * (*v192 - v172);
                v196 = (double *)(v179 + 16 * *v190);
                v197 = *v196;
                v198 = v196[1];
                v199 = (v198 - v173) * (v198 - v173) + (*v196 - v172) * (*v196 - v172);
                v200 = v195 - v199;
                v201 = v194 - v198;
                v202 = v193 - *v196;
                if (v202 == 0.0)
                  v202 = v201;
                if (v200 == 0.0)
                  v203 = v202;
                else
                  v203 = v200;
                if (v203 >= 0.0)
                {
                  do
                  {
                    v210 = v177;
                    *v190 = result;
                    if (v170 < v176)
                      break;
                    v211 = 2 * v176;
                    v176 = (2 * v176) | 1;
                    v177 = &v11[v176];
                    v212 = v211 + 2;
                    if (v212 < (uint64_t)v13)
                    {
                      v213 = (double *)(v179 + 16 * *v177);
                      v214 = *v213;
                      v215 = v213[1];
                      v216 = (v215 - v173) * (v215 - v173) + (*v213 - v172) * (*v213 - v172);
                      v217 = (double *)(v179 + 16 * v177[1]);
                      v218 = v217[1];
                      v219 = v216 - ((v218 - v173) * (v218 - v173) + (*v217 - v172) * (*v217 - v172));
                      v220 = v215 - v218;
                      v221 = v214 - *v217;
                      if (v221 == 0.0)
                        v221 = v220;
                      if (v219 == 0.0)
                        v222 = v221;
                      else
                        v222 = v219;
                      if (v222 < 0.0)
                      {
                        ++v177;
                        v176 = v212;
                      }
                    }
                    result = *v177;
                    v204 = (double *)(v179 + 16 * *v177);
                    v205 = v204[1];
                    v206 = (v205 - v173) * (v205 - v173);
                    v207 = v205 - v198;
                    v208 = *v204 - v197;
                    if (v208 == 0.0)
                      v208 = v207;
                    v209 = v206 + (*v204 - v172) * (*v204 - v172) - v199 == 0.0
                         ? v208
                         : v206 + (*v204 - v172) * (*v204 - v172) - v199;
                    v190 = v210;
                  }
                  while (v209 >= 0.0);
                  *v210 = v191;
                }
              }
              v174 = v175 - 1;
            }
            while (v175);
            v223 = (unint64_t)v12 >> 3;
            do
            {
              if (v223 >= 2)
              {
                v225 = 0;
                v226 = *v11;
                v227 = *(uint64_t **)a3;
                v228 = v11;
                v229 = a3[1];
                v230 = a3[2];
                do
                {
                  v231 = v228;
                  v228 += v225 + 1;
                  v232 = 2 * v225;
                  v225 = (2 * v225) | 1;
                  v233 = v232 + 2;
                  if (v233 < v223)
                  {
                    result = v228[1];
                    v234 = (double *)(*v227 + 16 * *v228);
                    v235 = *v234;
                    v236 = v234[1];
                    v237 = (v236 - v230) * (v236 - v230) + (*v234 - v229) * (*v234 - v229);
                    v238 = (double *)(*v227 + 16 * result);
                    v239 = v238[1];
                    v240 = v237 - ((v239 - v230) * (v239 - v230) + (*v238 - v229) * (*v238 - v229));
                    v241 = v236 - v239;
                    v242 = v235 - *v238;
                    if (v242 == 0.0)
                      v242 = v241;
                    if (v240 == 0.0)
                      v243 = v242;
                    else
                      v243 = v240;
                    if (v243 < 0.0)
                    {
                      ++v228;
                      v225 = v233;
                    }
                  }
                  *v231 = *v228;
                }
                while (v225 <= (uint64_t)((unint64_t)(v223 - 2) >> 1));
                v244 = a2 - 1;
                if (v228 == a2 - 1)
                {
                  *v228 = v226;
                }
                else
                {
                  *v228 = *v244;
                  *v244 = v226;
                  v245 = (char *)v228 - (char *)v11 + 8;
                  if (v245 >= 9)
                  {
                    v246 = (((unint64_t)v245 >> 3) - 2) >> 1;
                    v247 = &v11[v246];
                    v248 = *v247;
                    v249 = *v228;
                    v250 = *v227;
                    v251 = (double *)(v250 + 16 * *v247);
                    v252 = *v251;
                    v253 = v251[1];
                    v254 = (v253 - v230) * (v253 - v230) + (*v251 - v229) * (*v251 - v229);
                    v255 = (double *)(v250 + 16 * *v228);
                    v256 = *v255;
                    v257 = v255[1];
                    v258 = (v257 - v230) * (v257 - v230) + (*v255 - v229) * (*v255 - v229);
                    v259 = v254 - v258;
                    v260 = v253 - v257;
                    v261 = v252 - *v255;
                    if (v261 == 0.0)
                      v261 = v260;
                    if (v259 == 0.0)
                      v262 = v261;
                    else
                      v262 = v259;
                    if (v262 < 0.0)
                    {
                      do
                      {
                        v263 = v247;
                        *v228 = v248;
                        if (!v246)
                          break;
                        v246 = (v246 - 1) >> 1;
                        v247 = &v11[v246];
                        v248 = *v247;
                        v264 = (double *)(v250 + 16 * *v247);
                        v265 = v264[1];
                        v266 = (v265 - v230) * (v265 - v230);
                        v267 = v265 - v257;
                        v268 = *v264 - v256;
                        if (v268 == 0.0)
                          v268 = v267;
                        v269 = v266 + (*v264 - v229) * (*v264 - v229) - v258 == 0.0
                             ? v268
                             : v266 + (*v264 - v229) * (*v264 - v229) - v258;
                        v228 = v263;
                      }
                      while (v269 < 0.0);
                      *v263 = v249;
                    }
                  }
                }
              }
              --a2;
            }
            while ((unint64_t)v223-- > 2);
          }
          return result;
        }
        v14 = v13 >> 1;
        v15 = &v11[v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          result = (uint64_t)sub_1BE7FF920(&v9[v13 >> 1], v9, v10, a3);
        }
        else
        {
          sub_1BE7FF920(v9, &v9[v13 >> 1], v10, a3);
          v16 = &v9[v14];
          sub_1BE7FF920(v9 + 1, v16 - 1, a2 - 2, a3);
          sub_1BE7FF920(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
          result = (uint64_t)sub_1BE7FF920(v16 - 1, v15, &v9[v14 + 1], a3);
          v17 = *v9;
          *v9 = *v16;
          *v16 = v17;
          v10 = a2 - 1;
        }
        --a4;
        v18 = *v9;
        v19 = **(_QWORD **)a3;
        v20 = a3[1];
        v21 = a3[2];
        if ((a5 & 1) == 0)
        {
          v23 = (double *)(v19 + 16 * *(v9 - 1));
          v24 = *v23;
          v25 = v23[1];
          v26 = (v25 - v21) * (v25 - v21) + (*v23 - v20) * (*v23 - v20);
          v27 = *(double *)(v19 + 16 * v18);
          v22 = (2 * v18) | 1;
          v28 = *(double *)(v19 + 8 * v22);
          v29 = (v28 - v21) * (v28 - v21) + (v27 - v20) * (v27 - v20);
          v30 = v26 - v29;
          v31 = v25 - v28;
          v32 = v24 - v27;
          if (v32 == 0.0)
            v32 = v31;
          if (v30 == 0.0)
            v33 = v32;
          else
            v33 = v30;
          if (v33 < 0.0)
            goto LABEL_17;
          v83 = (double *)(v19 + 16 * *v10);
          v84 = v83[1];
          v85 = (v84 - v21) * (v84 - v21);
          v86 = v28 - v84;
          v87 = v27 - *v83;
          if (v87 == 0.0)
            v87 = v86;
          if (v29 - (v85 + (*v83 - v20) * (*v83 - v20)) == 0.0)
            v88 = v87;
          else
            v88 = v29 - (v85 + (*v83 - v20) * (*v83 - v20));
          if (v88 >= 0.0)
          {
            v97 = v9 + 1;
            do
            {
              v11 = v97;
              if (v97 >= a2)
                break;
              ++v97;
              v98 = (double *)(v19 + 16 * *v11);
              v99 = v98[1];
              v100 = (v99 - v21) * (v99 - v21);
              v101 = v28 - v99;
              v102 = v27 - *v98;
              if (v102 == 0.0)
                v102 = v101;
              v103 = v29 - (v100 + (*v98 - v20) * (*v98 - v20)) == 0.0
                   ? v102
                   : v29 - (v100 + (*v98 - v20) * (*v98 - v20));
            }
            while (v103 >= 0.0);
          }
          else
          {
            v11 = v9;
            do
            {
              v89 = v11[1];
              ++v11;
              v90 = (double *)(v19 + 16 * v89);
              v91 = v90[1];
              v92 = (v91 - v21) * (v91 - v21) + (*v90 - v20) * (*v90 - v20);
              v93 = v28 - v91;
              v94 = v27 - *v90;
              v95 = v29 - v92;
              if (v94 == 0.0)
                v94 = v93;
              if (v95 == 0.0)
                v96 = v94;
              else
                v96 = v95;
            }
            while (v96 >= 0.0);
          }
          v104 = a2;
          if (v11 < a2)
          {
            v104 = a2;
            do
            {
              v105 = *--v104;
              v106 = (double *)(v19 + 16 * v105);
              v107 = v106[1];
              v108 = (v107 - v21) * (v107 - v21) + (*v106 - v20) * (*v106 - v20);
              v109 = v28 - v107;
              v110 = v27 - *v106;
              v111 = v29 - v108;
              if (v110 == 0.0)
                v110 = v109;
              if (v111 == 0.0)
                v112 = v110;
              else
                v112 = v111;
            }
            while (v112 < 0.0);
          }
          if (v11 < v104)
          {
            v113 = *v11;
            v114 = *v104;
            do
            {
              *v11 = v114;
              *v104 = v113;
              do
              {
                v115 = v11[1];
                ++v11;
                v113 = v115;
                v116 = (double *)(v19 + 16 * v115);
                v117 = v116[1];
                v118 = (v117 - v21) * (v117 - v21) + (*v116 - v20) * (*v116 - v20);
                v119 = v28 - v117;
                v120 = v27 - *v116;
                v121 = v29 - v118;
                if (v120 == 0.0)
                  v120 = v119;
                if (v121 == 0.0)
                  v122 = v120;
                else
                  v122 = v121;
              }
              while (v122 >= 0.0);
              do
              {
                v123 = *--v104;
                v114 = v123;
                v124 = (double *)(v19 + 16 * v123);
                v125 = v124[1];
                v126 = (v125 - v21) * (v125 - v21) + (*v124 - v20) * (*v124 - v20);
                v127 = v28 - v125;
                v128 = v27 - *v124;
                v129 = v29 - v126;
                if (v128 == 0.0)
                  v128 = v127;
                if (v129 == 0.0)
                  v130 = v128;
                else
                  v130 = v129;
              }
              while (v130 < 0.0);
            }
            while (v11 < v104);
          }
          v131 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v131;
          a5 = 0;
          *v131 = v18;
          continue;
        }
        v22 = (2 * v18) | 1;
LABEL_17:
        v34 = 0;
        v35 = *(double *)(v19 + 16 * *v9);
        v36 = *(double *)(v19 + 8 * v22);
        v37 = (v36 - v21) * (v36 - v21) + (v35 - v20) * (v35 - v20);
        do
        {
          v38 = v9[v34 + 1];
          v39 = (double *)(v19 + 16 * v38);
          v40 = v39[1];
          v41 = (v40 - v21) * (v40 - v21);
          v42 = v40 - v36;
          v43 = *v39 - v35;
          if (v43 == 0.0)
            v43 = v42;
          if (v41 + (*v39 - v20) * (*v39 - v20) - v37 == 0.0)
            v44 = v43;
          else
            v44 = v41 + (*v39 - v20) * (*v39 - v20) - v37;
          ++v34;
        }
        while (v44 < 0.0);
        v45 = &v9[v34];
        v46 = a2;
        if (v34 == 1)
        {
          v46 = a2;
          do
          {
            if (v45 >= v46)
              break;
            v55 = *--v46;
            v56 = (double *)(v19 + 16 * v55);
            v57 = v56[1];
            v58 = (v57 - v21) * (v57 - v21);
            v59 = v57 - v36;
            v60 = *v56 - v35;
            if (v60 == 0.0)
              v60 = v59;
            v61 = v58 + (*v56 - v20) * (*v56 - v20) - v37 == 0.0 ? v60 : v58 + (*v56 - v20) * (*v56 - v20) - v37;
          }
          while (v61 >= 0.0);
        }
        else
        {
          do
          {
            v47 = *--v46;
            v48 = (double *)(v19 + 16 * v47);
            v49 = v48[1];
            v50 = (v49 - v21) * (v49 - v21) + (*v48 - v20) * (*v48 - v20);
            v51 = v49 - v36;
            v52 = *v48 - v35;
            v53 = v50 - v37;
            if (v52 == 0.0)
              v52 = v51;
            if (v53 == 0.0)
              v54 = v52;
            else
              v54 = v53;
          }
          while (v54 >= 0.0);
        }
        if (v45 >= v46)
        {
          v81 = v45 - 1;
          if (v45 - 1 == v9)
            goto LABEL_60;
LABEL_59:
          *v9 = *v81;
          goto LABEL_60;
        }
        v62 = *v46;
        v63 = v45;
        v64 = v46;
        do
        {
          *v63 = v62;
          *v64 = v38;
          do
          {
            v65 = v63[1];
            ++v63;
            v38 = v65;
            v66 = (double *)(v19 + 16 * v65);
            v67 = v66[1];
            v68 = (v67 - v21) * (v67 - v21) + (*v66 - v20) * (*v66 - v20);
            v69 = v67 - v36;
            v70 = *v66 - v35;
            v71 = v68 - v37;
            if (v70 == 0.0)
              v70 = v69;
            if (v71 == 0.0)
              v72 = v70;
            else
              v72 = v71;
          }
          while (v72 < 0.0);
          do
          {
            v73 = *--v64;
            v62 = v73;
            v74 = (double *)(v19 + 16 * v73);
            v75 = v74[1];
            v76 = (v75 - v21) * (v75 - v21) + (*v74 - v20) * (*v74 - v20);
            v77 = v75 - v36;
            v78 = *v74 - v35;
            v79 = v76 - v37;
            if (v78 == 0.0)
              v78 = v77;
            if (v79 == 0.0)
              v80 = v78;
            else
              v80 = v79;
          }
          while (v80 >= 0.0);
        }
        while (v63 < v64);
        v81 = v63 - 1;
        if (v63 - 1 != v9)
          goto LABEL_59;
LABEL_60:
        *v81 = v18;
        if (v45 < v46)
        {
LABEL_63:
          result = sub_1BE7FEB80(v9, v81, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v81 + 1;
          continue;
        }
        v82 = sub_1BE7FFABC(v9, v81, a3);
        v11 = v81 + 1;
        result = sub_1BE7FFABC(v81 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v82)
            continue;
          goto LABEL_63;
        }
        a2 = v81;
        if (!v82)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1BE7FF920(uint64_t *result, uint64_t *a2, uint64_t *a3, double *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;

  v4 = *a2;
  v5 = *result;
  v6 = **(_QWORD **)a4;
  v7 = (double *)(v6 + 16 * *a2);
  v8 = *v7;
  v9 = v7[1];
  v11 = a4[1];
  v10 = a4[2];
  v12 = (v9 - v10) * (v9 - v10) + (*v7 - v11) * (*v7 - v11);
  v13 = (double *)(v6 + 16 * *result);
  v14 = *v13;
  v15 = v13[1];
  v16 = (v15 - v10) * (v15 - v10) + (*v13 - v11) * (*v13 - v11);
  v17 = v12 - v16;
  v18 = v8 - *v13;
  if (v18 == 0.0)
    v18 = v9 - v15;
  if (v17 == 0.0)
    v17 = v18;
  v19 = *a3;
  v20 = (double *)(v6 + 16 * *a3);
  v21 = v20[1];
  v22 = (v21 - v10) * (v21 - v10) + (*v20 - v11) * (*v20 - v11) - v12;
  v23 = v21 - v9;
  v24 = *v20 - v8;
  if (v24 == 0.0)
    v24 = v23;
  if (v22 == 0.0)
    v25 = v24;
  else
    v25 = v22;
  if (v17 >= 0.0)
  {
    if (v25 < 0.0)
    {
      *a2 = v19;
      *a3 = v4;
      v26 = *result;
      v27 = (double *)(v6 + 16 * *a2);
      v28 = v27[1];
      v29 = (double *)(v6 + 16 * *result);
      v30 = v29[1];
      v31 = (v28 - v10) * (v28 - v10)
          + (*v27 - v11) * (*v27 - v11)
          - ((v30 - v10) * (v30 - v10)
           + (*v29 - v11) * (*v29 - v11));
      v32 = *v27 - *v29;
      if (v32 == 0.0)
        v32 = v28 - v30;
      if (v31 == 0.0)
        v31 = v32;
      if (v31 < 0.0)
      {
        *result = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    if (v25 < 0.0)
    {
      *result = v19;
LABEL_26:
      *a3 = v5;
      return result;
    }
    *result = v4;
    *a2 = v5;
    v33 = (double *)(v6 + 16 * *a3);
    v34 = v33[1];
    v35 = (v34 - v10) * (v34 - v10) + (*v33 - v11) * (*v33 - v11) - v16;
    v36 = *v33 - v14;
    if (v36 == 0.0)
      v36 = v34 - v15;
    if (v35 == 0.0)
      v35 = v36;
    if (v35 < 0.0)
    {
      *a2 = *a3;
      goto LABEL_26;
    }
  }
  return result;
}

BOOL sub_1BE7FFABC(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v35 = *(a2 - 1);
      v36 = *a1;
      v37 = **(_QWORD **)a3;
      v38 = (double *)(v37 + 16 * v35);
      v39 = v38[1];
      v40 = a3[1];
      v41 = (double *)(v37 + 16 * *a1);
      v42 = v41[1];
      v43 = (v39 - a3[2]) * (v39 - a3[2])
          + (*v38 - v40) * (*v38 - v40)
          - ((v42 - a3[2]) * (v42 - a3[2])
           + (*v41 - v40) * (*v41 - v40));
      v44 = v39 - v42;
      v45 = *v38 - *v41;
      if (v45 == 0.0)
        v45 = v44;
      if (v43 == 0.0)
        v46 = v45;
      else
        v46 = v43;
      if (v46 < 0.0)
      {
        *a1 = v35;
        *(a2 - 1) = v36;
      }
      break;
    case 3:
      sub_1BE7FF920(a1, a1 + 1, a2 - 1, a3);
      result = 1;
      break;
    case 4:
      sub_1BE7FFD94(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      result = 1;
      break;
    case 5:
      sub_1BE7FFF28(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      result = 1;
      break;
    default:
      v8 = a1 + 2;
      sub_1BE7FF920(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_23:
        result = 1;
      }
      else
      {
        v10 = 0;
        v11 = **(_QWORD **)a3;
        v12 = a3[1];
        v13 = a3[2];
        v14 = 24;
        while (1)
        {
          v15 = *v9;
          v16 = *v8;
          v17 = (double *)(v11 + 16 * *v9);
          v18 = *v17;
          v19 = v17[1];
          v20 = (v19 - v13) * (v19 - v13) + (*v17 - v12) * (*v17 - v12);
          v21 = (double *)(v11 + 16 * *v8);
          v22 = v21[1];
          v23 = (v22 - v13) * (v22 - v13);
          v24 = v19 - v22;
          v25 = v18 - *v21;
          if (v25 == 0.0)
            v25 = v24;
          v26 = v20 - (v23 + (*v21 - v12) * (*v21 - v12)) == 0.0 ? v25 : v20 - (v23 + (*v21 - v12) * (*v21 - v12));
          if (v26 < 0.0)
            break;
LABEL_22:
          v8 = v9;
          v14 += 8;
          if (++v9 == a2)
            goto LABEL_23;
        }
        v27 = v14;
        do
        {
          *(uint64_t *)((char *)a1 + v27) = v16;
          v28 = v27 - 8;
          if (v27 == 8)
          {
            *a1 = v15;
            if (++v10 != 8)
              goto LABEL_22;
            goto LABEL_34;
          }
          v16 = *(uint64_t *)((char *)a1 + v27 - 16);
          v29 = (double *)(v11 + 16 * v16);
          v30 = v29[1];
          v31 = (v30 - v13) * (v30 - v13);
          v32 = v19 - v30;
          v33 = v18 - *v29;
          if (v33 == 0.0)
            v33 = v32;
          if (v20 - (v31 + (*v29 - v12) * (*v29 - v12)) == 0.0)
            v34 = v33;
          else
            v34 = v20 - (v31 + (*v29 - v12) * (*v29 - v12));
          v27 = v28;
        }
        while (v34 < 0.0);
        *(uint64_t *)((char *)a1 + v28) = v15;
        if (++v10 != 8)
          goto LABEL_22;
LABEL_34:
        result = v9 + 1 == a2;
      }
      break;
  }
  return result;
}

uint64_t *sub_1BE7FFD94(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double *v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;

  result = sub_1BE7FF920(a1, a2, a3, a5);
  v11 = *a3;
  v12 = **(_QWORD **)a5;
  v13 = (double *)(v12 + 16 * *a4);
  v14 = *v13;
  v15 = v13[1];
  v16 = a5[1];
  v17 = a5[2];
  v18 = (v15 - v17) * (v15 - v17) + (*v13 - v16) * (*v13 - v16);
  v19 = (double *)(v12 + 16 * *a3);
  v20 = v19[1];
  v21 = v18 - ((v20 - v17) * (v20 - v17) + (*v19 - v16) * (*v19 - v16));
  v22 = v15 - v20;
  v23 = v14 - *v19;
  if (v23 == 0.0)
    v23 = v22;
  if (v21 == 0.0)
    v24 = v23;
  else
    v24 = v21;
  if (v24 < 0.0)
  {
    *a3 = *a4;
    *a4 = v11;
    v25 = *a2;
    v26 = (double *)(v12 + 16 * *a3);
    v27 = *v26;
    v28 = v26[1];
    v29 = (v28 - v17) * (v28 - v17) + (*v26 - v16) * (*v26 - v16);
    v30 = (double *)(v12 + 16 * *a2);
    v31 = v30[1];
    v32 = v29 - ((v31 - v17) * (v31 - v17) + (*v30 - v16) * (*v30 - v16));
    v33 = v28 - v31;
    v34 = v27 - *v30;
    if (v34 == 0.0)
      v34 = v33;
    if (v32 == 0.0)
      v35 = v34;
    else
      v35 = v32;
    if (v35 < 0.0)
    {
      *a2 = *a3;
      *a3 = v25;
      v36 = *a1;
      v37 = (double *)(v12 + 16 * *a2);
      v38 = v37[1];
      v39 = (double *)(v12 + 16 * *a1);
      v40 = v39[1];
      v41 = (v38 - v17) * (v38 - v17)
          + (*v37 - v16) * (*v37 - v16)
          - ((v40 - v17) * (v40 - v17)
           + (*v39 - v16) * (*v39 - v16));
      v42 = *v37 - *v39;
      if (v42 == 0.0)
        v42 = v38 - v40;
      if (v41 == 0.0)
        v41 = v42;
      if (v41 < 0.0)
      {
        *a1 = *a2;
        *a2 = v36;
      }
    }
  }
  return result;
}

uint64_t *sub_1BE7FFF28(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double *v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  double v55;

  result = sub_1BE7FFD94(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **(_QWORD **)a6;
  v15 = (double *)(v14 + 16 * *a5);
  v16 = *v15;
  v17 = v15[1];
  v18 = a6[1];
  v19 = a6[2];
  v20 = (v17 - v19) * (v17 - v19) + (*v15 - v18) * (*v15 - v18);
  v21 = (double *)(v14 + 16 * *a4);
  v22 = v21[1];
  v23 = v20 - ((v22 - v19) * (v22 - v19) + (*v21 - v18) * (*v21 - v18));
  v24 = v17 - v22;
  v25 = v16 - *v21;
  if (v25 == 0.0)
    v25 = v24;
  if (v23 == 0.0)
    v26 = v25;
  else
    v26 = v23;
  if (v26 < 0.0)
  {
    *a4 = *a5;
    *a5 = v13;
    v27 = *a3;
    v28 = (double *)(v14 + 16 * *a4);
    v29 = *v28;
    v30 = v28[1];
    v31 = (v30 - v19) * (v30 - v19) + (*v28 - v18) * (*v28 - v18);
    v32 = (double *)(v14 + 16 * *a3);
    v33 = v32[1];
    v34 = v31 - ((v33 - v19) * (v33 - v19) + (*v32 - v18) * (*v32 - v18));
    v35 = v30 - v33;
    v36 = v29 - *v32;
    if (v36 == 0.0)
      v36 = v35;
    if (v34 == 0.0)
      v37 = v36;
    else
      v37 = v34;
    if (v37 < 0.0)
    {
      *a3 = *a4;
      *a4 = v27;
      v38 = *a2;
      v39 = (double *)(v14 + 16 * *a3);
      v40 = *v39;
      v41 = v39[1];
      v42 = (v41 - v19) * (v41 - v19) + (*v39 - v18) * (*v39 - v18);
      v43 = (double *)(v14 + 16 * *a2);
      v44 = v43[1];
      v45 = v42 - ((v44 - v19) * (v44 - v19) + (*v43 - v18) * (*v43 - v18));
      v46 = v41 - v44;
      v47 = v40 - *v43;
      if (v47 == 0.0)
        v47 = v46;
      if (v45 == 0.0)
        v48 = v47;
      else
        v48 = v45;
      if (v48 < 0.0)
      {
        *a2 = *a3;
        *a3 = v38;
        v49 = *a1;
        v50 = (double *)(v14 + 16 * *a2);
        v51 = v50[1];
        v52 = (double *)(v14 + 16 * *a1);
        v53 = v52[1];
        v54 = (v51 - v19) * (v51 - v19)
            + (*v50 - v18) * (*v50 - v18)
            - ((v53 - v19) * (v53 - v19)
             + (*v52 - v18) * (*v52 - v18));
        v55 = *v50 - *v52;
        if (v55 == 0.0)
          v55 = v51 - v53;
        if (v54 == 0.0)
          v54 = v55;
        if (v54 < 0.0)
        {
          *a1 = *a2;
          *a2 = v49;
        }
      }
    }
  }
  return result;
}

void sub_1BE80012C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_1BE61F930();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1BE61F100();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_1BE8002C8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1E77F1310;
  __cxa_throw(exception, (struct type_info *)&unk_1E77F0590, (void (*)(void *))std::exception::~exception);
}

double sub_1BE8002FC(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;

  v4 = a1[10];
  v3 = a1[11];
  v6 = a1[12];
  v5 = a1[13];
  v8 = a1[16];
  v7 = a1[17];
  v10 = a1[20];
  v9 = a1[21];
  v11 = a1[22];
  v12 = a1[23];
  v15 = a1[14];
  v16 = a1[15];
  v17 = a1[18];
  v18 = a1[19];
  v19 = a1[24];
  v21 = v16 * v19 - v10 * v18;
  v22 = v8 * v19 - v9 * v18;
  v23 = v7 * v19 - v11 * v18;
  v24 = v17 * v19 - v12 * v18;
  v25 = v16 * v9 - v10 * v8;
  v26 = v16 * v11 - v10 * v7;
  v27 = v16 * v12 - v10 * v17;
  v28 = v8 * v11 - v9 * v7;
  v29 = v8 * v12 - v9 * v17;
  v30 = v7 * v12 - v11 * v17;
  v31 = v4 * v22 + 0.0 - v3 * v21 + v15 * v25;
  v32 = v4 * v23 + 0.0 - v6 * v21 + v15 * v26;
  v33 = v3 * v23 + 0.0 - v6 * v22 + v15 * v28;
  v34 = v4 * v24 + 0.0 - v5 * v21 + v15 * v27;
  v35 = v3 * v24 + 0.0 - v5 * v22 + v15 * v29;
  v36 = v4 * v29 + 0.0 - v3 * v27;
  v37 = v6 * v24 + 0.0 - v5 * v23 + v15 * v30;
  v38 = v4 * v30 + 0.0 - v6 * v27;
  v39 = v4 * v28 + 0.0 - v3 * v26;
  v40 = v3 * v30 + 0.0 - v6 * v29;
  v41 = v39 + v6 * v25;
  v1 = a1[6];
  v2 = a1[7];
  v13 = a1[8];
  v14 = a1[9];
  v20 = a1[5];
  return *a1 * (v1 * v37 + 0.0 - v2 * v35 + v13 * v33 - v14 * (v40 + v5 * v28))
       + 0.0
       - a1[1] * (v20 * v37 + 0.0 - v2 * v34 + v13 * v32 - v14 * (v38 + v5 * v26))
       + a1[2] * (v20 * v35 + 0.0 - v1 * v34 + v13 * v31 - v14 * (v36 + v5 * v25))
       - a1[3] * (v20 * v33 + 0.0 - v1 * v32 + v2 * v31 - v14 * v41)
       + a1[4] * (v20 * (v40 + v5 * v28) + 0.0 - v1 * (v38 + v5 * v26) + v2 * (v36 + v5 * v25) - v13 * v41);
}

void sub_1BE8004B0(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1C3B812ECLL);
}

const char *sub_1BE8004D4()
{
  return "Boost QVM error";
}

void sub_1BE80056C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8006CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE8009C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1BE800BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE800C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE800C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE800C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE800FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE800FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE800FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8017B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8017C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8017D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8017E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8017FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE80180C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE80186C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8018A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8018BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8018D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8018E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8018F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE80190C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE80195C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE801970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE801984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80199C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8019B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1BE8019C8(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  if (a5 == 0.0)
    a5 = 1.0;
  if (a6 == 0.0)
    a6 = 1.0;
  *a1 = (*a2 - a3) / a5;
  a1[1] = (v6 - a4) / a6;
  a1[2] = (v7 - a3) / a5;
  a1[3] = (v8 - a4) / a6;
  v9 = (a2[5] - a4) / a6;
  v10 = (a2[6] - a3) / a5;
  v11 = (a2[7] - a4) / a6;
  a1[4] = (a2[4] - a3) / a5;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  v12 = (a2[9] - a4) / a6;
  v13 = (a2[10] - a3) / a5;
  v14 = (a2[11] - a4) / a6;
  a1[8] = (a2[8] - a3) / a5;
  a1[9] = v12;
  a1[10] = v13;
  a1[11] = v14;
  v15 = a2[15];
  v16 = (a2[12] - a3) / a5;
  v17 = (a2[13] - a4) / a6;
  result = (a2[14] - a3) / a5;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = result;
  a1[15] = (v15 - a4) / a6;
  return result;
}

void sub_1BE801C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE801D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE801D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE801F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE801FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8020C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8021B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE802204(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  void (*v6)(id);
  id v7;
  id v8;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v6 = *(void (**)(id))(a1 + 40);
    if (v6)
    {
      v6(v3);
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = v3;
    }
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    v10 = v7;
    v8 = v7;
    LXLexiconEnumerateEntriesForString();
    v5 = *((_BYTE *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1BE8022F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE802308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE802330(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id cf;

  cf = (id)LXEntryCopyString();
  if (!objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 32), v6, (uint64_t)cf, v7, v8, v9)
    && objc_msgSend_isInappropriateLexiconEntry_(*(void **)(a1 + 40), v10, a2, v11, v12, v13))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    *a3 = 1;
  }
  CFRelease(cf);

}

void sub_1BE8023B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE802580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8025A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8025B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8025CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8025E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8025F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE802730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHStringOVSChecker;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

const __CFString *CHDescriptionForCorrectionResultType(unint64_t a1)
{
  if (a1 > 8)
    return &stru_1E77F6F28;
  else
    return off_1E77F5820[a1];
}

void sub_1BE803038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE803170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE803200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE80321C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8032C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE803C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1BE8040CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE804104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80411C(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(a1[4], a2, a3, a4, a5, a6) <= (unint64_t)a2)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      v19 = objc_msgSend_count(a1[4], v14, v15, v16, v17, v18);
      v35 = 134218240;
      v36 = a2;
      v37 = 2048;
      v38 = v19;
      _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_FAULT, "Out of bounds stroke index %lu : original stroke identifiers count %lu", (uint8_t *)&v35, 0x16u);
    }

  }
  if (objc_msgSend_count(a1[4], v8, v9, v10, v11, v12) > (unint64_t)a2)
  {
    objc_msgSend_objectAtIndexedSubscript_(a1[4], v20, (uint64_t)a2, v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend_indexOfObject_(a1[5], v25, (uint64_t)v24, v26, v27, v28);
    if (v30 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v34 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v35) = 0;
        _os_log_impl(&dword_1BE607000, v34, OS_LOG_TYPE_FAULT, "Unable to find stroke identifier in newStrokeIdentifiersOrdering", (uint8_t *)&v35, 2u);
      }

    }
    else
    {
      objc_msgSend_addIndex_(a1[6], v29, v30, v31, v32, v33);
    }

  }
}

void sub_1BE8042D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8042E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL propertyIsSet(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t isValidVerticalMathEntry(CHTokenizedMathResult *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t i;
  int isEqualToString;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  id v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __CFString *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  void *v285;
  const char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  void *v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  const char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  const char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  void *v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  const char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  const char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  const char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  void *v406;
  const char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  BOOL v412;
  int v413;
  char v414;
  void *v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  BOOL v421;
  BOOL v422;
  uint64_t v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  id v429;
  const char *v430;
  uint64_t v431;
  const char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t j;
  NSString *v439;
  int v440;
  int v441;
  void *v443;
  void *v444;
  char v445;
  CHTokenizedMathResult *v446;
  void *v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  _QWORD v452[4];
  id v453;
  _BYTE v454[128];
  uint64_t v455;

  v455 = *MEMORY[0x1E0C80C00];
  v446 = a1;
  objc_msgSend_transcriptionPaths(v446, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v8, v9, a2, v10, v11, v12);
  v447 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v13, v14, v15, v16, v17);
  v444 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_tokenColumnCount(v446, v18, v19, v20, v21, v22);
  v452[0] = MEMORY[0x1E0C809B0];
  v452[1] = 3221225472;
  v452[2] = sub_1BE805040;
  v452[3] = &unk_1E77F1EC8;
  v24 = v444;
  v453 = v24;
  objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v446, v25, (uint64_t)v447, 0, v23, (uint64_t)v452);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v26, v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v24, v32, v33, v34, v35, v36)
    && (objc_msgSend_objectAtIndexedSubscript_(v24, v37, 0, v39, v40, v41),
        v42 = (void *)objc_claimAutoreleasedReturnValue(),
        v48 = (objc_msgSend_properties(v42, v43, v44, v45, v46, v47) & 0x8000) == 0,
        v42,
        !v48))
  {
    if ((unint64_t)objc_msgSend_count(v24, v37, v38, v39, v40, v41) >= 2)
    {
      objc_msgSend_objectAtIndexedSubscript_(v24, v37, 1, v39, v40, v41);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_string(v66, v67, v68, v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v72, v73, (uint64_t)CFSTR("{"), v74, v75, v76);

      v445 = 1;
      i = 2;
      goto LABEL_5;
    }
    v445 = 1;
    i = 2;
  }
  else
  {
    v445 = 0;
    i = 0;
  }
  isEqualToString = 1;
LABEL_5:
  v51 = objc_msgSend_count(v24, v37, v38, v39, v40, v41);
  v57 = isEqualToString == 0;
  if (!isEqualToString || i >= v51)
  {
LABEL_22:
    v65 = i;
    if (v57)
      goto LABEL_23;
    goto LABEL_25;
  }
  objc_msgSend_objectAtIndexedSubscript_(v24, v52, i, v54, v55, v56);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = (objc_msgSend_properties(v58, v59, v60, v61, v62, v63) & 8) == 0;

  if (v64)
  {
    v65 = i;
    goto LABEL_25;
  }
  v65 = i | 1;
  if ((i | 1) >= objc_msgSend_count(v24, v52, v53, v54, v55, v56))
    goto LABEL_25;
  objc_msgSend_objectAtIndexedSubscript_(v24, v52, i | 1, v54, v55, v56);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v83 = (objc_msgSend_properties(v77, v78, v79, v80, v81, v82) & 8) == 0;

  if (v83)
    goto LABEL_25;
  objc_msgSend_objectAtIndexedSubscript_(v24, v52, i | 1, v54, v55, v56);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(v84, v85, v86, v87, v88, v89);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = objc_msgSend_isEqualToString_(v90, v91, (uint64_t)CFSTR("-"), v92, v93, v94);

  v101 = objc_msgSend_count(v24, v96, v97, v98, v99, v100);
  v65 = i + 2;
  if (v95)
    v102 = isEqualToString;
  else
    v102 = 0;
  v57 = v102 == 0;
  if (!v102 || v65 >= v101)
  {
    isEqualToString = v102;
    i += 2;
    goto LABEL_22;
  }
  objc_msgSend_objectAtIndexedSubscript_(v24, v52, i + 2, v54, v55, v56);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v109 = (objc_msgSend_properties(v103, v104, v105, v106, v107, v108) & 8) == 0;

  if (!v109)
  {
    objc_msgSend_count(v24, v52, v53, v54, v55, v56);
    isEqualToString = 0;
    i += 3;
LABEL_23:
    objc_msgSend_count(v24, v52, v53, v54, v55, v56);
    objc_msgSend_count(v24, v110, v111, v112, v113, v114);
    objc_msgSend_count(v24, v115, v116, v117, v118, v119);
    if ((v445 & 1) != 0)
    {
LABEL_82:
      v405 = 0;
      v413 = 0;
      goto LABEL_101;
    }
    objc_msgSend_count(v24, v120, v121, v122, v123, v124);
    v130 = 0;
    v131 = 1;
LABEL_85:
    if (i >= objc_msgSend_count(v24, v125, v126, v127, v128, v129))
      v414 = 1;
    else
      v414 = v131;
    if ((v414 & 1) != 0
      || (objc_msgSend_objectAtIndexedSubscript_(v24, v120, i, v122, v123, v124),
          v415 = (void *)objc_claimAutoreleasedReturnValue(),
          v421 = (objc_msgSend_properties(v415, v416, v417, v418, v419, v420) & 0x20000) == 0,
          v415,
          v421))
    {
      v413 = 0;
    }
    else
    {
      objc_msgSend_count(v24, v120, v121, v122, v123, v124);
      ++i;
      v413 = 1;
    }
    if (isEqualToString)
      v422 = v413 == v130;
    else
      v422 = 0;
    v405 = v422;
    goto LABEL_101;
  }
LABEL_25:
  for (i = v65; i < objc_msgSend_count(v24, v52, v53, v54, v55, v56); ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(v24, v52, i, v54, v55, v56);
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = (objc_msgSend_properties(v132, v133, v134, v135, v136, v137) & 0x80) == 0;

    if (v138)
      break;
  }
  while (i < objc_msgSend_count(v24, v52, v53, v54, v55, v56))
  {
    objc_msgSend_objectAtIndexedSubscript_(v24, v166, i, v167, v168, v169);
    v139 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_properties(v139, v140, v141, v142, v143, v144) & 2) != 0
      || (objc_msgSend_properties(v139, v145, v146, v147, v148, v149) & 4) != 0
      || (objc_msgSend_string(v139, v150, v151, v152, v153, v154),
          v155 = (void *)objc_claimAutoreleasedReturnValue(),
          v160 = objc_msgSend_isEqualToString_(v155, v156, (uint64_t)CFSTR("\\cdot"), v157, v158, v159),
          v155,
          (v160 & 1) != 0))
    {

    }
    else
    {
      objc_msgSend_string(v139, v161, v162, v163, v164, v165);
      v218 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lowercaseString(v218, v219, v220, v221, v222, v223);
      v224 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_isEqualToString_(v224, v225, (uint64_t)CFSTR("z"), v226, v227, v228))
        goto LABEL_46;
      objc_msgSend_strokeIndexes(v139, v229, v230, v231, v232, v233);
      v234 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v234, v235, v236, v237, v238, v239) != 1
        || (objc_msgSend_properties(v139, v240, v241, v242, v243, v244) & 0x40) != 0)
      {

LABEL_46:
        break;
      }
      v250 = (objc_msgSend_properties(v139, v245, v246, v247, v248, v249) & 0x80) == 0;

      if (!v250)
        break;
    }
    objc_msgSend_objectAtIndexedSubscript_(v24, v166, i, v167, v168, v169);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v170, v171, v172, v173, v174, v175);
    v176 = (__CFString *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_objectAtIndexedSubscript_(v24, v177, i, v178, v179, v180);
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v181, v182, v183, v184, v185, v186);
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v170) = objc_msgSend_isEqualToString_(v187, v188, (uint64_t)CFSTR("\\cdot"), v189, v190, v191);

    if ((_DWORD)v170)
    {

      v176 = CFSTR(".");
    }
    objc_msgSend_objectAtIndexedSubscript_(v24, v192, i, v193, v194, v195);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v196, v197, v198, v199, v200, v201);
    v202 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseString(v202, v203, v204, v205, v206, v207);
    v208 = (void *)objc_claimAutoreleasedReturnValue();
    v213 = objc_msgSend_isEqualToString_(v208, v209, (uint64_t)CFSTR("z"), v210, v211, v212);

    if (v213)
    {

      v176 = CFSTR("2");
    }
    objc_msgSend_addObject_(v31, v214, (uint64_t)v176, v215, v216, v217);

    ++i;
  }
  LOBYTE(v252) = 0;
  while (i < objc_msgSend_count(v24, v166, v251, v167, v168, v169))
  {
    objc_msgSend_objectAtIndexedSubscript_(v24, v166, i, v167, v168, v169);
    v253 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_properties(v253, v254, v255, v256, v257, v258) & 0x40) != 0
      || (objc_msgSend_properties(v253, v259, v260, v261, v262, v263) & 0x80) != 0
      || (objc_msgSend_properties(v253, v264, v265, v266, v267, v268) & 0x2000) != 0
      || (objc_msgSend_properties(v253, v269, v270, v271, v272, v273) & 0x200) != 0)
    {

    }
    else
    {
      objc_msgSend_string(v253, v274, v275, v276, v277, v278);
      v279 = (void *)objc_claimAutoreleasedReturnValue();
      v284 = objc_msgSend_isEqualToString_(v279, v280, (uint64_t)CFSTR("/"), v281, v282, v283);

      if (!v284)
        break;
    }
    if ((v252 & 1) != 0)
    {
      LOBYTE(v252) = 1;
    }
    else
    {
      objc_msgSend_objectAtIndexedSubscript_(v24, v166, i, v167, v168, v169);
      v285 = (void *)objc_claimAutoreleasedReturnValue();
      v291 = objc_msgSend_properties(v285, v286, v287, v288, v289, v290);

      v252 = (v291 >> 6) & 1;
    }
    ++i;
  }
  if ((v252 & 1) != 0 && i + 3 < objc_msgSend_count(v24, v166, v251, v167, v168, v169))
  {
    objc_msgSend_objectAtIndexedSubscript_(v24, v166, i, v167, v168, v169);
    v292 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v292, v293, v294, v295, v296, v297);
    v298 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v298, v299, (uint64_t)CFSTR("^"), v300, v301, v302))
    {
      objc_msgSend_objectAtIndexedSubscript_(v24, v303, i + 1, v304, v305, v306);
      v307 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_string(v307, v308, v309, v310, v311, v312);
      v313 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isEqualToString_(v313, v314, (uint64_t)CFSTR("{"), v315, v316, v317))
      {
        objc_msgSend_objectAtIndexedSubscript_(v24, v318, i + 3, v319, v320, v321);
        v443 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(v443, v322, v323, v324, v325, v326);
        v327 = (void *)objc_claimAutoreleasedReturnValue();
        v332 = objc_msgSend_isEqualToString_(v327, v328, (uint64_t)CFSTR("}"), v329, v330, v331);

      }
      else
      {
        v332 = 0;
      }

    }
    else
    {
      v332 = 0;
    }

    objc_msgSend_objectAtIndexedSubscript_(v24, v333, i + 2, v334, v335, v336);
    v337 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v337, v338, v339, v340, v341, v342);
    v343 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(v343, v344, (uint64_t)CFSTR("2"), v345, v346, v347) & 1) != 0)
    {
      v352 = 1;
    }
    else
    {
      objc_msgSend_objectAtIndexedSubscript_(v24, v348, i + 2, v349, v350, v351);
      v353 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_string(v353, v354, v355, v356, v357, v358);
      v359 = (void *)objc_claimAutoreleasedReturnValue();
      v352 = objc_msgSend_isEqualToString_(v359, v360, (uint64_t)CFSTR("3"), v361, v362, v363);

    }
    if (v332)
    {
      if (v352)
        i += 4;
    }
  }
  if ((v445 & 1) == 0)
  {
    if (i >= objc_msgSend_count(v24, v166, v251, v167, v168, v169)
      || (objc_msgSend_objectAtIndexedSubscript_(v24, v125, i, v127, v128, v129),
          v406 = (void *)objc_claimAutoreleasedReturnValue(),
          v412 = (objc_msgSend_properties(v406, v407, v408, v409, v410, v411) & 0x4000) == 0,
          v406,
          v412))
    {
      v131 = 0;
      v130 = 0;
    }
    else
    {
      objc_msgSend_count(v24, v125, v126, v127, v128, v129);
      v131 = 0;
      ++i;
      v130 = 1;
    }
    goto LABEL_85;
  }
  if (i + 2 >= objc_msgSend_count(v24, v166, v251, v167, v168, v169))
    goto LABEL_82;
  objc_msgSend_objectAtIndexedSubscript_(v24, v120, i, v122, v123, v124);
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(v364, v365, v366, v367, v368, v369);
  v370 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v370, v371, (uint64_t)CFSTR("}"), v372, v373, v374))
  {
    objc_msgSend_objectAtIndexedSubscript_(v24, v375, i + 1, v376, v377, v378);
    v379 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v379, v380, v381, v382, v383, v384);
    v385 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v385, v386, (uint64_t)CFSTR("{"), v387, v388, v389))
    {
      objc_msgSend_objectAtIndexedSubscript_(v24, v390, i + 2, v391, v392, v393);
      v394 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_string(v394, v395, v396, v397, v398, v399);
      v400 = (void *)objc_claimAutoreleasedReturnValue();
      v405 = objc_msgSend_isEqualToString_(v400, v401, (uint64_t)CFSTR("}"), v402, v403, v404);

    }
    else
    {
      v405 = 0;
    }

  }
  else
  {
    v405 = 0;
  }

  i += 3;
  v413 = v405;
LABEL_101:
  v423 = objc_msgSend_count(v24, v120, v121, v122, v123, v124);
  v428 = 0;
  if (v405 && i == v423)
  {
    v450 = 0u;
    v451 = 0u;
    v448 = 0u;
    v449 = 0u;
    v429 = v31;
    v436 = objc_msgSend_countByEnumeratingWithState_objects_count_(v429, v430, (uint64_t)&v448, (uint64_t)v454, 16, v431);
    if (v436)
    {
      v437 = *(_QWORD *)v449;
      while (2)
      {
        for (j = 0; j != v436; ++j)
        {
          if (*(_QWORD *)v449 != v437)
            objc_enumerationMutation(v429);
          if ((objc_msgSend_containsObject_(&unk_1E7827FB0, v432, *(_QWORD *)(*((_QWORD *)&v448 + 1) + 8 * j), v433, v434, v435) & 1) == 0)
          {
            v428 = 0;
            goto LABEL_113;
          }
        }
        v436 = objc_msgSend_countByEnumeratingWithState_objects_count_(v429, v432, (uint64_t)&v448, (uint64_t)v454, 16, v435);
        if (v436)
          continue;
        break;
      }
    }
    v428 = 1;
LABEL_113:

  }
  objc_msgSend_componentsJoinedByString_(v31, v424, (uint64_t)&stru_1E77F6F28, v425, v426, v427);
  v439 = (NSString *)objc_claimAutoreleasedReturnValue();
  v440 = isStringNumber(v439);
  if (v428)
    v441 = v440;
  else
    v441 = 0;

  return v441 | (v413 << 8);
}

void sub_1BE804D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE805040(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void findStemsAndEntryCandidates(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  BOOL v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CHTokenizedMathResult *v65;
  __int16 valid;
  char *v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t *v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  void *i;
  void *v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  _BOOL4 v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  int64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  int64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD **v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  BOOL v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _BYTE *v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  void *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  char *v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  void *v225;
  double v226;
  double v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  void *v251;
  const char *v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  double v258;
  CHNonTextCandidateStroke *v259;
  const char *v260;
  _QWORD *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  _QWORD *v265;
  char *v266;
  char *v267;
  size_t v268;
  unint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char **v275;
  char *v276;
  char *v277;
  size_t v278;
  unint64_t v279;
  char *v280;
  void *v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  char *v287;
  char *v288;
  void *v289;
  void *v290;
  char *v291;
  char *v292;
  void *v293;
  void *v294;
  _QWORD *v295;
  _QWORD *v296;
  void *v297;
  void *v298;
  uint64_t v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t **v304;
  uint64_t **v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE *v311;
  int64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD **v317;
  _QWORD *v318;
  id v319;
  id obj;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  void *v325;
  double v326;
  _QWORD v327[5];
  void *v328;
  char *v329;
  unint64_t v330;
  __n128 (*v331)(__n128 *, __n128 *);
  void (*v332)(uint64_t);
  void *v333;
  void *__p;
  void *v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  _QWORD **v345;
  _QWORD *v346;
  uint64_t v347;
  void *v348;
  char *v349;
  unint64_t v350;
  void *v351;
  char *v352;
  unint64_t v353;
  void *v354;
  _QWORD *v355;
  unint64_t v356;
  _BYTE v357[128];
  _BYTE v358[128];
  uint64_t v359;

  v359 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v354 = 0;
  v355 = 0;
  v356 = 0;
  v351 = 0;
  v352 = 0;
  v353 = 0;
  v348 = 0;
  v349 = 0;
  v350 = 0;
  v346 = 0;
  v347 = 0;
  v319 = a2;
  v345 = &v346;
  v343 = 0u;
  v344 = 0u;
  v341 = 0u;
  v342 = 0u;
  if (v5)
    v6 = (void *)v5[6];
  else
    v6 = 0;
  v318 = a3;
  v323 = v5;
  obj = v6;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v341, (uint64_t)v358, 16, v8);
  if (v9)
  {
    v321 = *(_QWORD *)v342;
    do
    {
      v10 = 0;
      v322 = v9;
      do
      {
        if (*(_QWORD *)v342 != v321)
          objc_enumerationMutation(obj);
        v11 = v323;
        if (v323)
          v11 = (void *)v323[7];
        v12 = *(void **)(*((_QWORD *)&v341 + 1) + 8 * v10);
        v13 = v11;
        v14 = (void *)MEMORY[0x1E0CB37E8];
        v325 = v12;
        v20 = objc_msgSend_uniqueIdentifier(v12, v15, v16, v17, v18, v19);
        objc_msgSend_numberWithInteger_(v14, v21, v20, v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v13, v26, (uint64_t)v25, v27, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v324 = v10;

        objc_msgSend_mathResult(v30, v31, v32, v33, v34, v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = v36 == 0;

        if (!v37)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v328 = 0;
          v329 = 0;
          v330 = 0;
          while (1)
          {
            objc_msgSend_mathResult(v30, v38, v39, v40, v41, v42);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_transcriptionPaths(v47, v48, v49, v50, v51, v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v59 = v43 < objc_msgSend_count(v53, v54, v55, v56, v57, v58);

            if (!v59)
            {
              if (!v45)
              {
                v142 = v349;
                if ((unint64_t)v349 >= v350)
                {
                  v148 = v349 - (_BYTE *)v348;
                  v149 = (v349 - (_BYTE *)v348) >> 3;
                  if ((unint64_t)(v149 + 1) >> 61)
                    sub_1BE61F930();
                  v150 = (uint64_t)(v350 - (_QWORD)v348) >> 2;
                  if (v150 <= v149 + 1)
                    v150 = v149 + 1;
                  if (v350 - (unint64_t)v348 >= 0x7FFFFFFFFFFFFFF8)
                    v151 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v151 = v150;
                  if (v151)
                  {
                    if (v151 >> 61)
                      sub_1BE61F100();
                    v152 = (char *)operator new(8 * v151);
                  }
                  else
                  {
                    v152 = 0;
                  }
                  v185 = &v152[8 * v149];
                  v186 = &v152[8 * v151];
                  *(_QWORD *)v185 = v325;
                  v143 = v185 + 8;
                  v187 = (char *)v348;
                  v188 = v349;
                  if (v349 == v348)
                  {
                    v348 = &v152[8 * v149];
                    v349 = v185 + 8;
                    v350 = (unint64_t)v186;
                  }
                  else
                  {
                    v189 = v349 - (_BYTE *)v348 - 8;
                    if (v189 < 0x78)
                      goto LABEL_262;
                    v190 = (v349 - 8 - (_BYTE *)v348) & 0xFFFFFFFFFFFFFFF8;
                    if (&v349[-v190 - 8] < v185 && &v152[v148 - v190 - 8] < v349)
                      goto LABEL_262;
                    v191 = (v189 >> 3) + 1;
                    v192 = 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
                    v185 -= v192;
                    v193 = &v349[-v192];
                    v194 = v349 - 16;
                    v195 = &v152[8 * v149 - 16];
                    v196 = v191 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v198 = *((_OWORD *)v194 - 1);
                      v197 = *(_OWORD *)v194;
                      *((_OWORD *)v194 - 1) = 0uLL;
                      *(_OWORD *)v194 = 0uLL;
                      *((_OWORD *)v195 - 1) = v198;
                      *(_OWORD *)v195 = v197;
                      v194 -= 32;
                      v195 -= 32;
                      v196 -= 4;
                    }
                    while (v196);
                    v188 = v193;
                    if (v191 != (v191 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_262:
                      do
                      {
                        v199 = *((_QWORD *)v188 - 1);
                        v188 -= 8;
                        *(_QWORD *)v188 = 0;
                        *((_QWORD *)v185 - 1) = v199;
                        v185 -= 8;
                      }
                      while (v188 != v187);
                    }
                    v188 = (char *)v348;
                    v200 = v349;
                    v348 = v185;
                    v349 = v143;
                    v350 = (unint64_t)v186;
                    while (v200 != v188)
                    {
                      v201 = (void *)*((_QWORD *)v200 - 1);
                      v200 -= 8;

                    }
                  }
                  if (v188)
                    operator delete(v188);
                }
                else
                {
                  *(_QWORD *)v142 = v325;
                  v143 = v142 + 8;
                }
                v349 = v143;
                goto LABEL_192;
              }
              if (v44)
              {
                v86 = v355;
                v87 = v325;
                if ((unint64_t)v355 < v356)
                {
                  *v86 = v325;
                  v355 = v86 + 1;
                  goto LABEL_82;
                }
                v355 = sub_1BE811548(&v354, v325);
                v163 = objc_msgSend_uniqueIdentifier(v325, v158, v159, v160, v161, v162);
              }
              else
              {
                v146 = v352;
                v87 = v325;
                if ((unint64_t)v352 >= v353)
                {
                  v147 = (char *)sub_1BE811548(&v351, v325);
                  v87 = v325;
                }
                else
                {
                  *(_QWORD *)v146 = v325;
                  v147 = v146 + 8;
                }
                v352 = v147;
LABEL_82:
                v163 = objc_msgSend_uniqueIdentifier(v87, v88, v89, v90, v91, v92);
              }
              v164 = v163;
              v165 = v346;
              v166 = &v346;
LABEL_85:
              v167 = v166;
              if (v165)
              {
                while (1)
                {
                  v166 = (_QWORD **)v165;
                  v168 = v165[4];
                  if (v163 < v168)
                  {
                    v165 = *v166;
                    goto LABEL_85;
                  }
                  if (v168 >= v163)
                    break;
                  v165 = v166[1];
                  if (!v165)
                  {
                    v167 = v166 + 1;
                    goto LABEL_90;
                  }
                }
                v170 = v166;
                v184 = v166 + 5;
                if (v166 + 5 == (_QWORD **)&v328)
                {
LABEL_192:
                  if (v328)
                  {
                    v329 = (char *)v328;
                    operator delete(v328);
                  }
                  goto LABEL_194;
                }
              }
              else
              {
LABEL_90:
                v169 = operator new(0x40uLL);
                v170 = v169;
                v169[4] = v164;
                v169[5] = 0;
                v169[6] = 0;
                v169[7] = 0;
                *v169 = 0;
                v169[1] = 0;
                v169[2] = v166;
                *v167 = v169;
                v171 = v169;
                if (*v345)
                {
                  v345 = (_QWORD **)*v345;
                  v171 = (_QWORD *)*v167;
                }
                v172 = v346;
                v173 = v171 == v346;
                *((_BYTE *)v171 + 24) = v171 == v346;
                if (!v173)
                {
                  do
                  {
                    v174 = v171[2];
                    if (*(_BYTE *)(v174 + 24))
                      break;
                    v175 = *(_QWORD **)(v174 + 16);
                    v176 = *v175;
                    if (*v175 == v174)
                    {
                      v179 = v175[1];
                      if (!v179 || (v180 = *(unsigned __int8 *)(v179 + 24), v177 = (_BYTE *)(v179 + 24), v180))
                      {
                        if (*(_QWORD **)v174 == v171)
                        {
                          *(_BYTE *)(v174 + 24) = 1;
                          *((_BYTE *)v175 + 24) = 0;
                          v183 = *(_QWORD *)(v174 + 8);
                          *v175 = v183;
                          if (v183)
                            goto LABEL_107;
                        }
                        else
                        {
                          v181 = *(uint64_t **)(v174 + 8);
                          v182 = *v181;
                          *(_QWORD *)(v174 + 8) = *v181;
                          if (v182)
                          {
                            *(_QWORD *)(v182 + 16) = v174;
                            v175 = *(_QWORD **)(v174 + 16);
                          }
                          v181[2] = (uint64_t)v175;
                          *(_QWORD *)(*(_QWORD *)(v174 + 16) + 8 * (**(_QWORD **)(v174 + 16) != v174)) = v181;
                          *v181 = v174;
                          *(_QWORD *)(v174 + 16) = v181;
                          v175 = (_QWORD *)v181[2];
                          v174 = *v175;
                          *((_BYTE *)v181 + 24) = 1;
                          *((_BYTE *)v175 + 24) = 0;
                          v183 = *(_QWORD *)(v174 + 8);
                          *v175 = v183;
                          if (v183)
LABEL_107:
                            *(_QWORD *)(v183 + 16) = v175;
                        }
                        *(_QWORD *)(v174 + 16) = v175[2];
                        *(_QWORD *)(v175[2] + 8 * (*(_QWORD *)v175[2] != (_QWORD)v175)) = v174;
                        *(_QWORD *)(v174 + 8) = v175;
LABEL_169:
                        v175[2] = v174;
                        break;
                      }
                    }
                    else if (!v176 || (v178 = *(unsigned __int8 *)(v176 + 24), v177 = (_BYTE *)(v176 + 24), v178))
                    {
                      if (*(_QWORD **)v174 == v171)
                      {
                        v264 = v171[1];
                        *(_QWORD *)v174 = v264;
                        if (v264)
                        {
                          *(_QWORD *)(v264 + 16) = v174;
                          v175 = *(_QWORD **)(v174 + 16);
                        }
                        v171[2] = v175;
                        *(_QWORD *)(*(_QWORD *)(v174 + 16) + 8 * (**(_QWORD **)(v174 + 16) != v174)) = v171;
                        v171[1] = v174;
                        *(_QWORD *)(v174 + 16) = v171;
                        v175 = (_QWORD *)v171[2];
                      }
                      else
                      {
                        v171 = (_QWORD *)v171[2];
                      }
                      *((_BYTE *)v171 + 24) = 1;
                      *((_BYTE *)v175 + 24) = 0;
                      v174 = v175[1];
                      v265 = *(_QWORD **)v174;
                      v175[1] = *(_QWORD *)v174;
                      if (v265)
                        v265[2] = v175;
                      *(_QWORD *)(v174 + 16) = v175[2];
                      *(_QWORD *)(v175[2] + 8 * (*(_QWORD *)v175[2] != (_QWORD)v175)) = v174;
                      *(_QWORD *)v174 = v175;
                      goto LABEL_169;
                    }
                    *(_BYTE *)(v174 + 24) = 1;
                    v171 = v175;
                    *((_BYTE *)v175 + 24) = v175 == v172;
                    *v177 = 1;
                  }
                  while (v175 != v172);
                }
                ++v347;
                v184 = v169 + 5;
                if (v169 + 5 == &v328)
                  goto LABEL_192;
              }
              v267 = (char *)v328;
              v266 = v329;
              v268 = v329 - (_BYTE *)v328;
              v269 = (v329 - (_BYTE *)v328) >> 3;
              v270 = v170[7];
              v271 = (char *)v170[5];
              if (v269 > (v270 - (uint64_t)v271) >> 3)
              {
                if (v271)
                {
                  v170[6] = v271;
                  operator delete(v271);
                  v270 = 0;
                  *v184 = 0;
                  v184[1] = 0;
                  v184[2] = 0;
                }
                if ((v268 & 0x8000000000000000) != 0)
                  goto LABEL_253;
                v272 = v270 >> 2;
                if (v270 >> 2 <= v269)
                  v272 = v269;
                v273 = (unint64_t)v270 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v272;
                if (v273 >> 61)
LABEL_253:
                  sub_1BE61F930();
                v274 = (char *)operator new(8 * v273);
                v271 = v274;
                v170[6] = v274;
                v275 = (char **)(v170 + 6);
                *(v275 - 1) = v274;
                v275[1] = &v274[8 * v273];
                if (v266 != v267)
                  memcpy(v274, v267, v268);
                goto LABEL_191;
              }
              v277 = (char *)v170[6];
              v275 = (char **)(v170 + 6);
              v276 = v277;
              v278 = v277 - v271;
              v279 = (v277 - v271) >> 3;
              if (v279 >= v269)
              {
                if (v329 != v328)
                {
                  v281 = v271;
                  v280 = (char *)v328;
                  goto LABEL_190;
                }
              }
              else
              {
                if (v276 != v271)
                {
                  memmove(v271, v328, v278);
                  v271 = *v275;
                }
                v280 = &v267[8 * v279];
                v268 = v266 - v280;
                if (v266 == v280)
                  goto LABEL_191;
                v281 = v271;
LABEL_190:
                memmove(v281, v280, v268);
              }
LABEL_191:
              *v275 = &v271[v268];
              goto LABEL_192;
            }
            objc_msgSend_mathResult(v30, v60, v61, v62, v63, v64);
            v65 = (CHTokenizedMathResult *)objc_claimAutoreleasedReturnValue();
            valid = isValidVerticalMathEntry(v65, v43);

            v45 = (valid | v45) != 0;
            v44 = (HIBYTE(valid) | v44) != 0;
            if ((_BYTE)valid)
              break;
LABEL_14:
            ++v43;
          }
          v67 = v329;
          if ((unint64_t)v329 >= v330)
          {
            v68 = (char *)v328;
            v69 = v329 - (_BYTE *)v328;
            v70 = (v329 - (_BYTE *)v328) >> 3;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61)
              sub_1BE61F930();
            v72 = v330 - (_QWORD)v328;
            if ((uint64_t)(v330 - (_QWORD)v328) >> 2 > v71)
              v71 = v72 >> 2;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v73)
            {
              if (v73 >> 61)
                sub_1BE61F100();
              v74 = (char *)operator new(8 * v73);
              v75 = (unint64_t *)&v74[8 * v70];
              *v75 = v43;
              v46 = (uint64_t)(v75 + 1);
              v76 = v67 - v68;
              if (v67 == v68)
              {
LABEL_35:
                v328 = v75;
                v329 = (char *)v46;
                v330 = (unint64_t)&v74[8 * v73];
                if (v68)
                  operator delete(v68);
                goto LABEL_13;
              }
            }
            else
            {
              v74 = 0;
              v75 = (unint64_t *)(8 * v70);
              *(_QWORD *)(8 * v70) = v43;
              v46 = 8 * v70 + 8;
              v76 = v67 - v68;
              if (v67 == v68)
                goto LABEL_35;
            }
            v77 = v76 - 8;
            if (v77 < 0x58)
              goto LABEL_263;
            if ((unint64_t)(v67 - v74 - v69) < 0x20)
              goto LABEL_263;
            v78 = (v77 >> 3) + 1;
            v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
            v80 = &v67[-v79];
            v75 = (unint64_t *)((char *)v75 - v79);
            v81 = &v74[8 * v70 - 16];
            v82 = v67 - 16;
            v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v84 = *(_OWORD *)v82;
              *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
              *(_OWORD *)v81 = v84;
              v81 -= 32;
              v82 -= 32;
              v83 -= 4;
            }
            while (v83);
            v67 = v80;
            if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_263:
              do
              {
                v85 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *--v75 = v85;
              }
              while (v67 != v68);
            }
            goto LABEL_35;
          }
          *(_QWORD *)v329 = v43;
          v46 = (uint64_t)(v67 + 8);
LABEL_13:
          v329 = (char *)v46;
          goto LABEL_14;
        }
        objc_msgSend_strokeClassificationResult(v323, v38, v39, v40, v41, v42);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        if (v98
          && (objc_msgSend_classification(v12, v93, v94, v95, v96, v97) == 6
           || objc_msgSend_classification(v12, v99, v100, v101, v102, v103) == 5))
        {
          objc_msgSend_strokeIdentifiers(v12, v99, v100, v101, v102, v103);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          v110 = objc_msgSend_count(v104, v105, v106, v107, v108, v109) == 1;

          if (v110)
          {
            v339 = 0u;
            v340 = 0u;
            v338 = 0u;
            v337 = 0u;
            objc_msgSend_strokeClassificationResult(v323, v111, v112, v113, v114, v115);
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_nontextCandidates(v116, v117, v118, v119, v120, v121);
            v122 = (void *)objc_claimAutoreleasedReturnValue();

            v130 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v122, v123, (uint64_t)&v337, (uint64_t)v357, 16, v124);
            if (!v130)
              goto LABEL_144;
            v131 = *(_QWORD *)v338;
            do
            {
              for (i = 0; i != v130; i = (char *)i + 1)
              {
                if (*(_QWORD *)v338 != v131)
                  objc_enumerationMutation(v122);
                v133 = *(void **)(*((_QWORD *)&v337 + 1) + 8 * (_QWORD)i);
                objc_msgSend_strokeIdentifier(v133, v125, v126, v127, v128, v129);
                v134 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_firstStrokeIdentifier(v325, v135, v136, v137, v138, v139);
                v140 = (void *)objc_claimAutoreleasedReturnValue();
                v141 = v134 == v140;

                if (v141)
                {
                  v130 = v133;
                  goto LABEL_144;
                }
              }
              v130 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v122, v125, (uint64_t)&v337, (uint64_t)v357, 16, v129);
            }
            while (v130);
LABEL_144:

            v224 = v319 == 0;
            if (v130)
              v224 = 1;
            v225 = v325;
            if (v224)
            {
LABEL_151:
              if (!v130 || !objc_msgSend_isVerticalMathHorizontalLine(v130, v219, v220, v221, v222, v223))
                goto LABEL_158;
              v261 = v355;
              if ((unint64_t)v355 >= v356)
              {
                v355 = sub_1BE811548(&v354, v225);
              }
              else
              {
                *v261 = v225;
                v355 = v261 + 1;
              }
            }
            else
            {
              objc_msgSend_bounds(v325, v219, v220, v221, v222, v223);
              v227 = v226;
              objc_msgSend_bounds(v325, v228, v229, v230, v231, v232);
              if (v227 > v233 + v233)
              {
                v328 = 0;
                v329 = (char *)&v328;
                v330 = 0x4812000000;
                v331 = sub_1BE806384;
                v332 = sub_1BE8063A8;
                v333 = &unk_1BE94989A;
                v335 = 0;
                v336 = 0;
                __p = 0;
                v234 = (void *)objc_opt_class();
                objc_msgSend_strokeIdentifiers(v325, v235, v236, v237, v238, v239);
                v240 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_anyObject(v240, v241, v242, v243, v244, v245);
                v246 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_strokeForIdentifier_inStrokeProvider_(v234, v247, (uint64_t)v246, (uint64_t)v319, v248, v249);
                v250 = (void *)objc_claimAutoreleasedReturnValue();

                v251 = (void *)objc_opt_class();
                v327[0] = MEMORY[0x1E0C809B0];
                v327[1] = 3221225472;
                v327[2] = sub_1BE8063C0;
                v327[3] = &unk_1E77F2B80;
                v327[4] = &v328;
                objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(v251, v252, (uint64_t)v250, 1, 1, (uint64_t)v327);
                v326 = 0.0;
                v253 = (void *)objc_opt_class();
                objc_msgSend_lineOrientationForStrokePoints_error_(v253, v254, (uint64_t)(v329 + 48), (uint64_t)&v326, v255, v256);
                v258 = v257;
                v259 = [CHNonTextCandidateStroke alloc];
                v130 = (id)objc_msgSend_initWithStroke_consistingOfSubstrokes_classificationAsNonText_lineOrientation_lineError_containerScore_fallbackClassification_(v259, v260, (uint64_t)v250, 0, 5, 5, v258, v326, 0.0);

                _Block_object_dispose(&v328, 8);
                if (__p)
                {
                  v335 = __p;
                  operator delete(__p);
                }
                v225 = v325;
                goto LABEL_151;
              }
              v130 = 0;
LABEL_158:
              v262 = v349;
              if ((unint64_t)v349 >= v350)
              {
                v263 = (char *)sub_1BE811548(&v348, v225);
              }
              else
              {
                *(_QWORD *)v262 = v225;
                v263 = v262 + 8;
              }
              v349 = v263;
            }

            goto LABEL_194;
          }
        }
        else
        {

        }
        v144 = v349;
        if ((unint64_t)v349 >= v350)
        {
          v153 = v349 - (_BYTE *)v348;
          v154 = (v349 - (_BYTE *)v348) >> 3;
          if ((unint64_t)(v154 + 1) >> 61)
            sub_1BE61F930();
          v155 = (uint64_t)(v350 - (_QWORD)v348) >> 2;
          if (v155 <= v154 + 1)
            v155 = v154 + 1;
          if (v350 - (unint64_t)v348 >= 0x7FFFFFFFFFFFFFF8)
            v156 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v156 = v155;
          if (v156)
          {
            if (v156 >> 61)
              sub_1BE61F100();
            v157 = (char *)operator new(8 * v156);
          }
          else
          {
            v157 = 0;
          }
          v202 = &v157[8 * v154];
          v203 = &v157[8 * v156];
          *(_QWORD *)v202 = v325;
          v145 = v202 + 8;
          v204 = (char *)v348;
          v205 = v349;
          if (v349 == v348)
          {
            v348 = &v157[8 * v154];
            v349 = v202 + 8;
            v350 = (unint64_t)v203;
          }
          else
          {
            v206 = v349 - (_BYTE *)v348 - 8;
            if (v206 < 0x78)
              goto LABEL_264;
            v207 = (v349 - 8 - (_BYTE *)v348) & 0xFFFFFFFFFFFFFFF8;
            if (&v349[-v207 - 8] < v202 && &v157[v153 - v207 - 8] < v349)
              goto LABEL_264;
            v208 = (v206 >> 3) + 1;
            v209 = 8 * (v208 & 0x3FFFFFFFFFFFFFFCLL);
            v202 -= v209;
            v210 = &v349[-v209];
            v211 = v349 - 16;
            v212 = &v157[8 * v154 - 16];
            v213 = v208 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v215 = *((_OWORD *)v211 - 1);
              v214 = *(_OWORD *)v211;
              *((_OWORD *)v211 - 1) = 0uLL;
              *(_OWORD *)v211 = 0uLL;
              *((_OWORD *)v212 - 1) = v215;
              *(_OWORD *)v212 = v214;
              v211 -= 32;
              v212 -= 32;
              v213 -= 4;
            }
            while (v213);
            v205 = v210;
            if (v208 != (v208 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_264:
              do
              {
                v216 = *((_QWORD *)v205 - 1);
                v205 -= 8;
                *(_QWORD *)v205 = 0;
                *((_QWORD *)v202 - 1) = v216;
                v202 -= 8;
              }
              while (v205 != v204);
            }
            v205 = (char *)v348;
            v217 = v349;
            v348 = v202;
            v349 = v145;
            v350 = (unint64_t)v203;
            while (v217 != v205)
            {
              v218 = (void *)*((_QWORD *)v217 - 1);
              v217 -= 8;

            }
          }
          if (v205)
            operator delete(v205);
        }
        else
        {
          *(_QWORD *)v144 = v12;
          v145 = v144 + 8;
        }
        v349 = v145;
LABEL_194:

        v10 = v324 + 1;
      }
      while (v324 + 1 != v322);
      v284 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v282, (uint64_t)&v341, (uint64_t)v358, 16, v283);
      v9 = v284;
    }
    while (v284);
  }

  v285 = v318;
  sub_1BE8113A4(v318, (uint64_t *)&v354);
  sub_1BE8113A4(v318 + 3, (uint64_t *)&v351);
  sub_1BE8113A4(v318 + 6, (uint64_t *)&v348);
  v318[10] = 0;
  v318[11] = 0;
  v318[9] = v318 + 10;
  v286 = v345;
  if (v345 != &v346)
  {
    while (1)
    {
      v299 = v285[10];
      v300 = v318 + 10;
      if ((_QWORD *)v285[9] != v318 + 10)
      {
        v301 = (_QWORD *)v285[10];
        v302 = v318 + 10;
        if (v299)
        {
          do
          {
            v300 = v301;
            v301 = (_QWORD *)v301[1];
          }
          while (v301);
        }
        else
        {
          do
          {
            v300 = (_QWORD *)v302[2];
            v173 = *v300 == (_QWORD)v302;
            v302 = v300;
          }
          while (v173);
        }
        v303 = v286[4];
        if (v300[4] >= v303)
          break;
      }
      if (v299)
        v304 = (uint64_t **)v300;
      else
        v304 = (uint64_t **)(v318 + 10);
      if (v299)
        v305 = (uint64_t **)(v300 + 1);
      else
        v305 = (uint64_t **)(v318 + 10);
      if (!*v305)
        goto LABEL_239;
LABEL_245:
      v316 = (_QWORD *)v286[1];
      if (v316)
      {
        do
        {
          v317 = (_QWORD **)v316;
          v316 = (_QWORD *)*v316;
        }
        while (v316);
      }
      else
      {
        do
        {
          v317 = (_QWORD **)v286[2];
          v173 = *v317 == v286;
          v286 = v317;
        }
        while (!v173);
      }
      v286 = v317;
      v285 = v318;
      if (v317 == &v346)
        goto LABEL_201;
    }
    v305 = (uint64_t **)(v318 + 10);
    v304 = (uint64_t **)(v318 + 10);
    if (v299)
    {
      v306 = (uint64_t *)v285[10];
      while (1)
      {
        while (1)
        {
          v304 = (uint64_t **)v306;
          v307 = v306[4];
          if (v307 <= v303)
            break;
          v306 = *v304;
          v305 = v304;
          if (!*v304)
            goto LABEL_239;
        }
        if (v307 >= v303)
          goto LABEL_245;
        v306 = v304[1];
        if (!v306)
        {
          v305 = v304 + 1;
          break;
        }
      }
    }
LABEL_239:
    v308 = (uint64_t *)operator new(0x40uLL);
    v309 = v286[4];
    v308[5] = 0;
    v308[4] = v309;
    v308[6] = 0;
    v308[7] = 0;
    v311 = (_BYTE *)v286[5];
    v310 = (_BYTE *)v286[6];
    v312 = v310 - v311;
    if (v310 != v311)
    {
      if (v312 < 0)
        sub_1BE61F930();
      v313 = (char *)operator new(v310 - v311);
      v308[5] = (uint64_t)v313;
      v308[6] = (uint64_t)v313;
      v314 = &v313[8 * (v312 >> 3)];
      v308[7] = (uint64_t)v314;
      memcpy(v313, v311, v312);
      v308[6] = (uint64_t)v314;
    }
    *v308 = 0;
    v308[1] = 0;
    v308[2] = (uint64_t)v304;
    *v305 = v308;
    v315 = *(_QWORD *)v318[9];
    if (v315)
    {
      v318[9] = v315;
      v308 = *v305;
    }
    sub_1BE61F5C0((uint64_t *)v318[10], v308);
    ++v318[11];
    goto LABEL_245;
  }
LABEL_201:
  sub_1BE6EF83C(v346);
  v287 = (char *)v348;
  if (v348)
  {
    v288 = v349;
    v289 = v348;
    if (v349 != v348)
    {
      do
      {
        v290 = (void *)*((_QWORD *)v288 - 1);
        v288 -= 8;

      }
      while (v288 != v287);
      v289 = v348;
    }
    v349 = v287;
    operator delete(v289);
  }
  v291 = (char *)v351;
  if (v351)
  {
    v292 = v352;
    v293 = v351;
    if (v352 != v351)
    {
      do
      {
        v294 = (void *)*((_QWORD *)v292 - 1);
        v292 -= 8;

      }
      while (v292 != v291);
      v293 = v351;
    }
    v352 = v291;
    operator delete(v293);
  }
  v295 = v354;
  if (v354)
  {
    v296 = v355;
    v297 = v354;
    if (v355 != v354)
    {
      do
      {
        v298 = (void *)*--v296;

      }
      while (v296 != v295);
      v297 = v354;
    }
    v355 = v295;
    operator delete(v297);
  }

}

void sub_1BE806114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_QWORD *a53,uint64_t a54,char *__p,char *a56,uint64_t a57,char *a58,char *a59,uint64_t a60,char *a61,char *a62)
{
  void **v62;
  char *v64;
  char *v65;
  void *v66;
  char *v67;
  char *v68;
  void *v69;
  char *v70;
  char *v71;
  void *v72;

  sub_1BE6DB9C4(v62);
  sub_1BE6DB9C4(a11);
  sub_1BE6EF83C(a53);
  if (__p)
  {
    v64 = a56;
    v65 = __p;
    if (a56 != __p)
    {
      do
      {
        v66 = (void *)*((_QWORD *)v64 - 1);
        v64 -= 8;

      }
      while (v64 != __p);
      v65 = __p;
    }
    operator delete(v65);
  }
  if (a58)
  {
    v67 = a59;
    v68 = a58;
    if (a59 != a58)
    {
      do
      {
        v69 = (void *)*((_QWORD *)v67 - 1);
        v67 -= 8;

      }
      while (v67 != a58);
      v68 = a58;
    }
    operator delete(v68);
  }
  if (a61)
  {
    v70 = a62;
    v71 = a61;
    if (a62 != a61)
    {
      do
      {
        v72 = (void *)*((_QWORD *)v70 - 1);
        v70 -= 8;

      }
      while (v70 != a61);
      v71 = a61;
    }
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE806384(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE8063A8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE8063C0(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

double scoreStemEntry(CHStrokeGroup *a1, CHStrokeGroup *a2, double a3, int a4)
{
  CHStrokeGroup *v7;
  CHStrokeGroup *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  CGFloat v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  CGFloat v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  double width;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double MinY;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  NSObject *v70;
  const char *v71;
  double v72;
  int v75;
  const char *v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  uint64_t v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v81 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  objc_msgSend_bounds(v7, v9, v10, v11, v12, v13);
  v15 = v14;
  objc_msgSend_bounds(v7, v16, v17, v18, v19, v20);
  v22 = v21;
  objc_msgSend_bounds(v8, v23, v24, v25, v26, v27);
  v86.origin.x = v28;
  v86.origin.y = v29;
  v86.size.width = v30;
  v86.size.height = v31;
  v82.origin.y = -3.40282347e38;
  v82.size.height = INFINITY;
  v82.origin.x = v15;
  v82.size.width = v22;
  v83 = CGRectIntersection(v82, v86);
  width = v83.size.width;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v33 = (id)qword_1EF568E30;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_bounds(v8, v34, v35, v36, v37, v38);
    v40 = "false";
    if (a4)
      v40 = "true";
    v75 = 136315650;
    v76 = v40;
    v77 = 2048;
    v78 = width;
    v79 = 2048;
    v80 = width / v39;
    _os_log_impl(&dword_1BE607000, v33, OS_LOG_TYPE_DEBUG, "scoreStemEntry (below=%s): horizontalOverlap: %f -> %f", (uint8_t *)&v75, 0x20u);
  }

  objc_msgSend_bounds(v8, v41, v42, v43, v44, v45);
  v52 = -1.0;
  if (width >= v51 * 0.6)
  {
    if (a4)
    {
      objc_msgSend_bounds(v8, v46, v47, v48, v49, v50);
      MinY = CGRectGetMinY(v84);
      objc_msgSend_bounds(v7, v54, v55, v56, v57, v58);
    }
    else
    {
      objc_msgSend_bounds(v7, v46, v47, v48, v49, v50);
      MinY = CGRectGetMinY(v85);
      objc_msgSend_bounds(v8, v63, v64, v65, v66, v67);
    }
    v68 = MinY - CGRectGetMaxY(*(CGRect *)&v59);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v69 = v68 / a3;
    v70 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      v71 = "false";
      v75 = 136315650;
      if (a4)
        v71 = "true";
      v76 = v71;
      v77 = 2048;
      v78 = v68;
      v79 = 2048;
      v80 = v69;
      _os_log_impl(&dword_1BE607000, v70, OS_LOG_TYPE_DEBUG, "scoreStemEntry (below=%s): verticalDistanceFromStem: %f -> %f", (uint8_t *)&v75, 0x20u);
    }

    if (v69 <= -0.6 || v69 > 0.0)
    {
      v72 = 3.0;
      if (a4)
        v72 = 1.5;
      if (v69 >= v72 || v69 <= 0.0)
        v52 = -3.0;
      else
        v52 = 4.0 - v69;
    }
    else
    {
      v52 = 100.0;
    }
  }

  return v52;
}

void sub_1BE8067E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE806818(id *a1, id **a2, id **a3, id **a4, void *a5, void *a6)
{
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  double v21;
  CHStrokeGroup *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  id *v82;
  int v83;
  double v84;
  double v85;
  CHStrokeGroup *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  CHStrokeGroup *v119;
  CHStrokeGroup *v120;
  CHStrokeGroup *v121;
  id v122;
  id v123;
  id *v124;
  id *v125;
  CHStrokeGroup *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  id v160;
  double MinX;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t *i;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  void *v181;
  NSObject *v182;
  const char *v183;
  id v184;
  id *v185;
  uint64_t **v186;
  int v187;
  id *location;
  void *v189;
  id *v190;
  id *v193;
  _QWORD v194[8];
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[3];
  char v204;
  id obj;
  id v206;
  char v207;
  __int128 buf;
  uint64_t v209;
  __n128 (*v210)(uint64_t, uint64_t);
  uint64_t (*v211)();
  void *v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  CGRect v216;

  v215 = *MEMORY[0x1E0C80C00];
  v184 = a5;
  v9 = a6;
  *(_BYTE *)a1 = 0;
  location = a1;
  *((_BYTE *)a1 + 16) = 0;
  objc_msgSend_set(MEMORY[0x1E0C99E20], v10, v11, v12, v13, v14);
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = *a2;
  v186 = (uint64_t **)a2;
  v190 = a2[1];
  if (*a2 != v190)
  {
    v187 = 0;
    v185 = a1 + 1;
    v21 = 0.0;
    do
    {
      v193 = v20;
      v22 = (CHStrokeGroup *)*v20;
      LOBYTE(obj) = 0;
      v207 = 0;
      v23 = (void *)MEMORY[0x1E0CB37E8];
      v29 = objc_msgSend_uniqueIdentifier(v22, v24, v25, v26, v27, v28);
      objc_msgSend_numberWithInteger_(v23, v30, v29, v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v9, v35, (uint64_t)v34, v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_mathResult(v39, v40, v41, v42, v43, v44);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      if (v50)
      {
        v51 = (void *)MEMORY[0x1E0CB37E8];
        v52 = objc_msgSend_uniqueIdentifier(v22, v45, v46, v47, v48, v49);
        objc_msgSend_numberWithInteger_(v51, v53, v52, v54, v55, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v9, v58, (uint64_t)v57, v59, v60, v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_mathResult(v62, v63, v64, v65, v66, v67);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_baseCharacterHeight(v68, v69, v70, v71, v72, v73);
        v75 = v74;

      }
      else
      {
        v75 = 9.22337204e18;
      }

      v81 = *a3;
      v82 = a3[1];
      if (*a3 == v82)
      {
        v83 = 0;
        v85 = 0.0;
        v84 = 0.0;
        v124 = *a4;
        v125 = a4[1];
        if (*a4 != v125)
          goto LABEL_20;
      }
      else
      {
        v83 = 0;
        v84 = 0.0;
        v85 = 0.0;
        do
        {
          v86 = (CHStrokeGroup *)*v81;
          v87 = (void *)MEMORY[0x1E0CB37E8];
          v93 = objc_msgSend_uniqueIdentifier(v86, v88, v89, v90, v91, v92);
          objc_msgSend_numberWithInteger_(v87, v94, v93, v95, v96, v97);
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v9, v99, (uint64_t)v98, v100, v101, v102);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_mathResult(v103, v104, v105, v106, v107, v108);
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_baseCharacterHeight(v109, v110, v111, v112, v113, v114);
          v116 = v115;

          if (v75 == 9.22337204e18)
            v117 = v116;
          else
            v117 = v75;
          v118 = scoreStemEntry(v22, v86, v117, 0);
          if (v118 > v84)
          {
            v119 = v22;
            v120 = v86;
            v121 = v120;
            if (v83)
            {
              v122 = obj;
              obj = v119;

              v123 = v206;
              v206 = v121;

            }
            else
            {
              obj = v119;
              v206 = v120;
              v83 = 1;
              v207 = 1;
            }
            v84 = v118;
          }

          v85 = v85 + v116;
          ++v81;
        }
        while (v81 != v82);
        v124 = *a4;
        v125 = a4[1];
        if (*a4 != v125)
        {
LABEL_20:
          if (v75 == 9.22337204e18)
            v75 = v85 / (double)(unint64_t)(a3[1] - *a3);
          while (1)
          {
            v126 = (CHStrokeGroup *)*v124;
            if (scoreStemEntry(v22, v126, v75, 0) > v84)
              break;

            if (++v124 == v125)
              goto LABEL_24;
          }
          if (v83)
          {

            v207 = 0;
          }
          objc_msgSend_addObject_(v189, v127, (uint64_t)v22, v128, v129, v130);
LABEL_44:

          goto LABEL_45;
        }
      }
LABEL_24:
      if (v83)
      {
        v131 = (void *)MEMORY[0x1E0CB37E8];
        v132 = objc_msgSend_uniqueIdentifier(v22, v76, v77, v78, v79, v80);
        objc_msgSend_numberWithInteger_(v131, v133, v132, v134, v135, v136);
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v9, v138, (uint64_t)v137, v139, v140, v141);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_mathResult(v142, v143, v144, v145, v146, v147);
        v148 = (void *)objc_claimAutoreleasedReturnValue();

        if (v148)
        {
          v203[0] = 0;
          v203[1] = v203;
          v203[2] = 0x2020000000;
          v204 = 1;
          *(_QWORD *)&buf = 0;
          *((_QWORD *)&buf + 1) = &buf;
          v209 = 0x5012000000;
          v210 = sub_1BE807134;
          v211 = nullsub_42;
          v212 = &unk_1BE94989A;
          v153 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
          v213 = *MEMORY[0x1E0C9D628];
          v214 = v153;
          v199 = 0;
          v200 = &v199;
          v201 = 0x2020000000;
          v202 = -1;
          v195 = 0;
          v196 = &v195;
          v197 = 0x2020000000;
          v198 = 0;
          v194[0] = MEMORY[0x1E0C809B0];
          v194[1] = 3221225472;
          v194[2] = sub_1BE807144;
          v194[3] = &unk_1E77F4358;
          v194[4] = v203;
          v194[5] = &v199;
          v194[6] = &v195;
          v194[7] = &buf;
          objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v148, v149, (uint64_t)v194, v150, v151, v152);
          if (*((_BYTE *)v196 + 24) || (v159 = 0.0, v200[3] >= 2))
            v159 = 10.0;
          v160 = v206;
          objc_msgSend_bounds(v206, v154, v155, v156, v157, v158);
          MinX = CGRectGetMinX(v216);
          if (MinX > v159 + CGRectGetMaxX(*(CGRect *)(*((_QWORD *)&buf + 1) + 48)))
          {

            v207 = 0;
            objc_msgSend_addObject_(v189, v162, (uint64_t)v22, v163, v164, v165);
            v83 = 0;
          }
          _Block_object_dispose(&v195, 8);
          _Block_object_dispose(&v199, 8);
          _Block_object_dispose(&buf, 8);
          _Block_object_dispose(v203, 8);
        }

        if (v83 && v84 > v21)
        {
          if (v187 == v83)
          {
            objc_storeStrong(location, obj);
            objc_storeStrong(v185, v206);
          }
          else
          {
            *location = obj;
            location[1] = v206;
            v187 = 1;
            *((_BYTE *)location + 16) = 1;
          }
          v21 = v84;
        }
        else if (!v83)
        {
          goto LABEL_45;
        }

        v126 = (CHStrokeGroup *)obj;
        goto LABEL_44;
      }
LABEL_45:

      v20 = v193 + 1;
    }
    while (v193 + 1 != v190);
  }
  if (objc_msgSend_count(v189, v15, v16, v17, v18, v19))
  {
    v166 = *v186;
    v167 = v186[1];
    v172 = v189;
    if (v166 != v167)
    {
      while ((objc_msgSend_containsObject_(v172, v168, *v166, v169, v170, v171) & 1) == 0)
      {
        if (++v166 == v167)
        {
          v166 = v167;
          goto LABEL_57;
        }
      }
      if (v166 != v167)
      {
        for (i = v166 + 1; i != v167; ++i)
        {
          if ((objc_msgSend_containsObject_(v172, v168, *i, v169, v170, v171) & 1) == 0)
          {
            v174 = *i;
            *i = 0;
            v175 = (void *)*v166;
            *v166 = v174;

            ++v166;
          }
        }
      }
    }
LABEL_57:

    v180 = v186[1];
    if (v166 != v180)
    {
      while (v180 != v166)
      {
        v181 = (void *)*--v180;

      }
      v186[1] = v166;
    }
    objc_msgSend_unionSet_(v184, v176, (uint64_t)v172, v177, v178, v179);
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v182 = (id)qword_1EF568E30;
  if (os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG))
  {
    if (*((_BYTE *)location + 16))
      v183 = "true";
    else
      v183 = "false";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v183;
    _os_log_impl(&dword_1BE607000, v182, OS_LOG_TYPE_DEBUG, "findBestStemEntryPair: %s", (uint8_t *)&buf, 0xCu);
  }

}

void sub_1BE806FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  sub_1BE807270(a16);

  _Unwind_Resume(a1);
}

__n128 sub_1BE807134(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE807144(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  id v18;
  CGRect v19;
  CGRect v20;

  v18 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v8 = *(_QWORD *)(a1[5] + 8);
    if (*(_QWORD *)(v8 + 24) == -1)
    {
      *(_QWORD *)(v8 + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (objc_msgSend_properties(v18, v3, v4, v5, v6, v7) & 8) != 0;
    }
    if ((objc_msgSend_properties(v18, v3, v4, v5, v6, v7) & 0x8000) == 0)
    {
      v9 = *(double **)(a1[7] + 8);
      v10 = v9[6];
      v11 = v9[7];
      v12 = v9[8];
      v13 = v9[9];
      objc_msgSend_bounds(v18, v3, v4, v5, v6, v7);
      v20.origin.x = v14;
      v20.origin.y = v15;
      v20.size.width = v16;
      v20.size.height = v17;
      v19.origin.x = v10;
      v19.origin.y = v11;
      v19.size.width = v12;
      v19.size.height = v13;
      *(CGRect *)(*(_QWORD *)(a1[7] + 8) + 48) = CGRectUnion(v19, v20);
    }
  }
  if ((objc_msgSend_properties(v18, v3, v4, v5, v6, v7) & 0x4000) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  }

}

void sub_1BE807248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE80725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE807270(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
  {

  }
  return a1;
}

void sub_1BE808A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59)
{
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;

  if (*(_BYTE *)(v64 - 160))
  {

  }
  sub_1BE81147C(&a59);

  _Unwind_Resume(a1);
}

void sub_1BE808EC8(void *a1, void *a2, void *a3, void *a4, uint64_t **a5, void *a6, _QWORD *a7, _QWORD *a8)
{
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double x;
  double y;
  double width;
  double height;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t i;
  void *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  BOOL v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  CHStrokeGroup *v145;
  const char *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  BOOL v158;
  void *v159;
  const char *v160;
  const char *v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  void *v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void *v195;
  uint64_t *v196;
  _BYTE *v197;
  _QWORD *v198;
  BOOL v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  _BYTE *v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  CHTokenizedMathResultToken *v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  const char *v218;
  uint64_t v219;
  void *v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t **v266;
  uint64_t **v267;
  uint64_t v268;
  void *v269;
  uint64_t *v270;
  uint64_t *v271;
  void *v272;
  CHTokenizedMathResultToken *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  double v286;
  double v287;
  double v288;
  double v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t **v324;
  uint64_t **v325;
  uint64_t v326;
  void *v327;
  uint64_t *v328;
  uint64_t *v329;
  CHTokenizedMathResult *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  CHStrokeGroupRecognitionResult *v336;
  const char *v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char *v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  int64x2_t v364;
  int64x2_t *v365;
  int64x2_t v366;
  int64x2_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t **v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t *v377;
  _QWORD *v378;
  void *v381;
  void *v382;
  id StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
  void *v384;
  id v385;
  id v386;
  id v387;
  id v388;
  id obj;
  uint64_t v390;
  id v391;
  void *v392;
  void *v393;
  void *v394;
  void *v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  _QWORD v401[5];
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  void *v406;
  void *v407;
  void *v408;
  _BYTE v409[128];
  _BYTE v410[128];
  uint8_t buf[24];
  id v412;
  uint64_t v413;
  CGRect v414;
  CGRect v415;
  CGRect v416;

  v413 = *MEMORY[0x1E0C80C00];
  v387 = a2;
  v386 = a3;
  v385 = a4;
  v391 = a6;
  v393 = a1;
  if (!a1)
    goto LABEL_131;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v12 = (id)qword_1EF568E30;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = objc_msgSend_count(v387, v13, v14, v15, v16, v17);
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v386;
    *(_WORD *)&buf[22] = 2112;
    v412 = v385;
    _os_log_impl(&dword_1BE607000, v12, OS_LOG_TYPE_DEBUG, "mergeVerticalMathEntries: %lu entries with stem: %@, result: %@", buf, 0x20u);
  }

  objc_msgSend_set(MEMORY[0x1E0C99E20], v18, v19, v20, v21, v22);
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  if (objc_msgSend_count(v387, v27, v28, v29, v30, v31))
  {
    objc_msgSend_firstObject(v387, v32, v33, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstStrokeIdentifier(v37, v38, v39, v40, v41, v42);
    v384 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_firstObject(v387, v43, v44, v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastStrokeIdentifier(v48, v49, v50, v51, v52, v53);
    v382 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_firstObject(v387, v54, v55, v56, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstStrokeOrigin(v59, v60, v61, v62, v63, v64);
    v66 = v65;
    v68 = v67;

  }
  else
  {
    objc_msgSend_firstStrokeIdentifier(v386, v32, v33, v34, v35, v36);
    v74 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastStrokeIdentifier(v386, v75, v76, v77, v78, v79);
    v382 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstStrokeOrigin(v386, v80, v81, v82, v83, v84);
    v66 = v85;
    v68 = v86;
    v384 = (void *)v74;
  }
  v87 = (void *)objc_msgSend_mutableCopy(v387, v69, v70, v71, v72, v73);
  objc_msgSend_addObject_(v87, v88, (uint64_t)v386, v89, v90, v91);
  if (v385)
    objc_msgSend_addObject_(v87, v92, (uint64_t)v385, v93, v94, v95);
  v404 = 0u;
  v405 = 0u;
  v402 = 0u;
  v403 = 0u;
  obj = v87;
  v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v96, (uint64_t)&v402, (uint64_t)v410, 16, v97);
  if (v103)
  {
    v104 = *(_QWORD *)v403;
    v105 = 1.0;
    do
    {
      for (i = 0; i != v103; ++i)
      {
        if (*(_QWORD *)v403 != v104)
          objc_enumerationMutation(obj);
        v107 = *(void **)(*((_QWORD *)&v402 + 1) + 8 * i);
        objc_msgSend_strokeIdentifiers(v107, v98, v99, v100, v101, v102);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_unionSet_(v394, v109, (uint64_t)v108, v110, v111, v112);

        objc_msgSend_bounds(v107, v113, v114, v115, v116, v117);
        v416.origin.x = v118;
        v416.origin.y = v119;
        v416.size.width = v120;
        v416.size.height = v121;
        v414.origin.x = x;
        v414.origin.y = y;
        v414.size.width = width;
        v414.size.height = height;
        v415 = CGRectUnion(v414, v416);
        x = v415.origin.x;
        y = v415.origin.y;
        width = v415.size.width;
        height = v415.size.height;
        objc_msgSend_groupingConfidence(v107, v122, v123, v124, v125, v126);
        v105 = v105 * v127;
      }
      v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v98, (uint64_t)&v402, (uint64_t)v410, 16, v102);
    }
    while (v103);
  }
  else
  {
    v105 = 1.0;
  }

  objc_msgSend_groupingManager(v393, v128, v129, v130, v131, v132);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  v134 = v133 == 0;

  objc_msgSend_allObjects(v394, v135, v136, v137, v138, v139);
  if (v134)
  {
    v392 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    v401[0] = MEMORY[0x1E0C809B0];
    v401[1] = 3221225472;
    v401[2] = sub_1BE80AA98;
    v401[3] = &unk_1E77F2B30;
    v401[4] = v393;
    objc_msgSend_sortedArrayUsingComparator_(v140, v141, (uint64_t)v401, v142, v143, v144);
    v392 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v145 = [CHStrokeGroup alloc];
  StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = (id)objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v145, v146, (uint64_t)v394, (uint64_t)v384, (uint64_t)v382, 3, CFSTR("CHGroupingPostProcessingManager"), x, y, width, height, v105, v66, v68);
  if (!objc_msgSend_saveInputDrawings(v393, v147, v148, v149, v150, v151)
    || (objc_msgSend_groupingManager(v393, v152, v153, v154, v155, v156),
        v157 = (void *)objc_claimAutoreleasedReturnValue(),
        v158 = v157 == 0,
        v157,
        v158))
  {
    v381 = 0;
  }
  else
  {
    objc_msgSend_groupingManager(v393, v152, v153, v154, v155, v156);
    v159 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recognizableDrawingForStrokeGroup_translationVector_originalDrawing_orderedStrokesIDs_rescalingFactor_replacementStrokeGroup_(v159, v160, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, 0, 0, 0, 0, 0.0, 0.0);
    v381 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v152, v153, v154, v155, v156);
  v396 = (void *)objc_claimAutoreleasedReturnValue();
  v399 = 0u;
  v400 = 0u;
  v397 = 0u;
  v398 = 0u;
  v388 = v387;
  v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v388, v161, (uint64_t)&v397, (uint64_t)v409, 16, v162);
  if (v168)
  {
    v390 = *(_QWORD *)v398;
    v169 = a5 + 1;
    do
    {
      v170 = 0;
      do
      {
        if (*(_QWORD *)v398 != v390)
          objc_enumerationMutation(v388);
        v171 = *(void **)(*((_QWORD *)&v397 + 1) + 8 * v170);
        v172 = (void *)MEMORY[0x1E0CB37E8];
        v173 = objc_msgSend_uniqueIdentifier(v171, v163, v164, v165, v166, v167);
        objc_msgSend_numberWithInteger_(v172, v174, v173, v175, v176, v177);
        v178 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v391, v179, (uint64_t)v178, v180, v181, v182);
        v183 = (void *)objc_claimAutoreleasedReturnValue();

        v189 = objc_msgSend_uniqueIdentifier(v171, v184, v185, v186, v187, v188);
        v190 = v189;
        v191 = (_QWORD *)*v169;
        v192 = a5 + 1;
        v193 = a5 + 1;
        if (*v169)
        {
          while (1)
          {
            while (1)
            {
              v193 = v191;
              v194 = v191[4];
              if (v189 >= v194)
                break;
              v191 = (_QWORD *)*v193;
              v192 = v193;
              if (!*v193)
                goto LABEL_39;
            }
            if (v194 >= v189)
              break;
            v191 = (_QWORD *)v193[1];
            if (!v191)
            {
              v192 = v193 + 1;
              goto LABEL_39;
            }
          }
          v195 = v193;
        }
        else
        {
LABEL_39:
          v195 = operator new(0x40uLL);
          *((_QWORD *)v195 + 4) = v190;
          *((_QWORD *)v195 + 5) = 0;
          *((_QWORD *)v195 + 6) = 0;
          *((_QWORD *)v195 + 7) = 0;
          *(_QWORD *)v195 = 0;
          *((_QWORD *)v195 + 1) = 0;
          *((_QWORD *)v195 + 2) = v193;
          *v192 = v195;
          v196 = (uint64_t *)**a5;
          v197 = v195;
          if (v196)
          {
            *a5 = v196;
            v197 = (_BYTE *)*v192;
          }
          v198 = (_QWORD *)*v169;
          v199 = v197 == (_BYTE *)*v169;
          v197[24] = v199;
          if (!v199)
          {
            do
            {
              v200 = *((_QWORD *)v197 + 2);
              if (*(_BYTE *)(v200 + 24))
                break;
              v201 = *(_BYTE **)(v200 + 16);
              v202 = *(_QWORD *)v201;
              if (*(_QWORD *)v201 == v200)
              {
                v205 = *((_QWORD *)v201 + 1);
                if (!v205 || (v206 = *(unsigned __int8 *)(v205 + 24), v203 = (_BYTE *)(v205 + 24), v206))
                {
                  if (*(_BYTE **)v200 == v197)
                  {
                    *(_BYTE *)(v200 + 24) = 1;
                    v201[24] = 0;
                    v209 = *(_QWORD *)(v200 + 8);
                    *(_QWORD *)v201 = v209;
                    if (v209)
                      goto LABEL_56;
                  }
                  else
                  {
                    v207 = *(uint64_t **)(v200 + 8);
                    v208 = *v207;
                    *(_QWORD *)(v200 + 8) = *v207;
                    if (v208)
                    {
                      *(_QWORD *)(v208 + 16) = v200;
                      v201 = *(_BYTE **)(v200 + 16);
                    }
                    v207[2] = (uint64_t)v201;
                    *(_QWORD *)(*(_QWORD *)(v200 + 16) + 8 * (**(_QWORD **)(v200 + 16) != v200)) = v207;
                    *v207 = v200;
                    *(_QWORD *)(v200 + 16) = v207;
                    v201 = (_BYTE *)v207[2];
                    v200 = *(_QWORD *)v201;
                    *((_BYTE *)v207 + 24) = 1;
                    v201[24] = 0;
                    v209 = *(_QWORD *)(v200 + 8);
                    *(_QWORD *)v201 = v209;
                    if (v209)
LABEL_56:
                      *(_QWORD *)(v209 + 16) = v201;
                  }
                  *(_QWORD *)(v200 + 16) = *((_QWORD *)v201 + 2);
                  *(_QWORD *)(*((_QWORD *)v201 + 2) + 8 * (**((_QWORD **)v201 + 2) != (_QWORD)v201)) = v200;
                  *(_QWORD *)(v200 + 8) = v201;
LABEL_63:
                  *((_QWORD *)v201 + 2) = v200;
                  break;
                }
              }
              else if (!v202 || (v204 = *(unsigned __int8 *)(v202 + 24), v203 = (_BYTE *)(v202 + 24), v204))
              {
                if (*(_BYTE **)v200 == v197)
                {
                  v233 = *((_QWORD *)v197 + 1);
                  *(_QWORD *)v200 = v233;
                  if (v233)
                  {
                    *(_QWORD *)(v233 + 16) = v200;
                    v201 = *(_BYTE **)(v200 + 16);
                  }
                  *((_QWORD *)v197 + 2) = v201;
                  *(_QWORD *)(*(_QWORD *)(v200 + 16) + 8 * (**(_QWORD **)(v200 + 16) != v200)) = v197;
                  *((_QWORD *)v197 + 1) = v200;
                  *(_QWORD *)(v200 + 16) = v197;
                  v201 = (_BYTE *)*((_QWORD *)v197 + 2);
                  v197[24] = 1;
                  v201[24] = 0;
                  v200 = *((_QWORD *)v201 + 1);
                  v210 = *(_BYTE **)v200;
                  *((_QWORD *)v201 + 1) = *(_QWORD *)v200;
                  if (v210)
LABEL_61:
                    *((_QWORD *)v210 + 2) = v201;
                }
                else
                {
                  *(_BYTE *)(v200 + 24) = 1;
                  v201[24] = 0;
                  v200 = *((_QWORD *)v201 + 1);
                  v210 = *(_BYTE **)v200;
                  *((_QWORD *)v201 + 1) = *(_QWORD *)v200;
                  if (v210)
                    goto LABEL_61;
                }
                *(_QWORD *)(v200 + 16) = *((_QWORD *)v201 + 2);
                *(_QWORD *)(*((_QWORD *)v201 + 2) + 8 * (**((_QWORD **)v201 + 2) != (_QWORD)v201)) = v200;
                *(_QWORD *)v200 = v201;
                goto LABEL_63;
              }
              *(_BYTE *)(v200 + 24) = 1;
              v197 = v201;
              v201[24] = v201 == (_BYTE *)v198;
              *v203 = 1;
            }
            while (v201 != (_BYTE *)v198);
          }
          a5[2] = (uint64_t *)((char *)a5[2] + 1);
        }
        sub_1BE80A1E8((uint64_t)v393, v183, v396, (uint64_t **)v195 + 5, v392);
        v211 = [CHTokenizedMathResultToken alloc];
        objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v212, v213, v214, v215, v216);
        v217 = (void *)objc_claimAutoreleasedReturnValue();
        v220 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v211, v218, (uint64_t)CFSTR("\\\\"), (uint64_t)v217, 0x4000, v219, 1.0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
        v407 = v220;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v221, (uint64_t)&v407, 1, v222, v223);
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        v408 = v224;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v225, (uint64_t)&v408, 1, v226, v227);
        v228 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v396, v229, (uint64_t)v228, v230, v231, v232);

        ++v170;
      }
      while (v170 != v168);
      v234 = objc_msgSend_countByEnumeratingWithState_objects_count_(v388, v163, (uint64_t)&v397, (uint64_t)v409, 16, v167);
      v168 = v234;
    }
    while (v234);
  }

  v235 = (void *)MEMORY[0x1E0CB37E8];
  v241 = objc_msgSend_uniqueIdentifier(v386, v236, v237, v238, v239, v240);
  objc_msgSend_numberWithInteger_(v235, v242, v241, v243, v244, v245);
  v246 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v391, v247, v246, v248, v249, v250);
  v251 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_mathResult(v251, v252, v253, v254, v255, v256);
  v257 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v246) = v257 == 0;

  if ((v246 & 1) != 0)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v258, v259, v260, v261, v262);
    v272 = (void *)objc_claimAutoreleasedReturnValue();
    v273 = [CHTokenizedMathResultToken alloc];
    objc_msgSend_indexSetWithIndex_(MEMORY[0x1E0CB36B8], v274, 0, v275, v276, v277);
    v278 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v386, v279, v280, v281, v282, v283);
    v290 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v273, v284, (uint64_t)CFSTR("\\hline"), (uint64_t)v278, 0x20000, v285, 1.0, v286, v287, v288, v289);

    sub_1BE809FE4((uint64_t)v393, v290, v251, v272, v392);
    v406 = v272;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v291, (uint64_t)&v406, 1, v292, v293);
    v294 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v396, v295, (uint64_t)v294, v296, v297, v298);

  }
  else
  {
    v263 = objc_msgSend_uniqueIdentifier(v386, v258, v259, v260, v261, v262);
    v264 = v263;
    v266 = a5 + 1;
    v265 = a5[1];
    if (v265)
    {
      while (1)
      {
        while (1)
        {
          v267 = (uint64_t **)v265;
          v268 = v265[4];
          if (v263 >= v268)
            break;
          v265 = *v267;
          v266 = v267;
          if (!*v267)
            goto LABEL_82;
        }
        if (v268 >= v263)
          break;
        v265 = v267[1];
        if (!v265)
        {
          v266 = v267 + 1;
          goto LABEL_82;
        }
      }
      v269 = v267;
    }
    else
    {
      v267 = a5 + 1;
LABEL_82:
      v269 = operator new(0x40uLL);
      *((_QWORD *)v269 + 4) = v264;
      *((_QWORD *)v269 + 5) = 0;
      *((_QWORD *)v269 + 6) = 0;
      *((_QWORD *)v269 + 7) = 0;
      *(_QWORD *)v269 = 0;
      *((_QWORD *)v269 + 1) = 0;
      *((_QWORD *)v269 + 2) = v267;
      *v266 = (uint64_t *)v269;
      v270 = (uint64_t *)**a5;
      v271 = (uint64_t *)v269;
      if (v270)
      {
        *a5 = v270;
        v271 = *v266;
      }
      sub_1BE61F5C0(a5[1], v271);
      a5[2] = (uint64_t *)((char *)a5[2] + 1);
    }
    sub_1BE80A1E8((uint64_t)v393, v251, v396, (uint64_t **)v269 + 5, v392);
  }
  if (v385)
  {
    v304 = (void *)MEMORY[0x1E0CB37E8];
    v305 = objc_msgSend_uniqueIdentifier(v385, v299, v300, v301, v302, v303);
    objc_msgSend_numberWithInteger_(v304, v306, v305, v307, v308, v309);
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v391, v311, (uint64_t)v310, v312, v313, v314);
    v315 = (void *)objc_claimAutoreleasedReturnValue();

    v321 = objc_msgSend_uniqueIdentifier(v385, v316, v317, v318, v319, v320);
    v322 = v321;
    v324 = a5 + 1;
    v323 = a5[1];
    if (v323)
    {
      while (1)
      {
        while (1)
        {
          v325 = (uint64_t **)v323;
          v326 = v323[4];
          if (v321 >= v326)
            break;
          v323 = *v325;
          v324 = v325;
          if (!*v325)
            goto LABEL_96;
        }
        if (v326 >= v321)
          break;
        v323 = v325[1];
        if (!v323)
        {
          v324 = v325 + 1;
          goto LABEL_96;
        }
      }
      v327 = v325;
    }
    else
    {
      v325 = a5 + 1;
LABEL_96:
      v327 = operator new(0x40uLL);
      *((_QWORD *)v327 + 4) = v322;
      *((_QWORD *)v327 + 5) = 0;
      *((_QWORD *)v327 + 6) = 0;
      *((_QWORD *)v327 + 7) = 0;
      *(_QWORD *)v327 = 0;
      *((_QWORD *)v327 + 1) = 0;
      *((_QWORD *)v327 + 2) = v325;
      *v324 = (uint64_t *)v327;
      v328 = (uint64_t *)**a5;
      v329 = (uint64_t *)v327;
      if (v328)
      {
        *a5 = v328;
        v329 = *v324;
      }
      sub_1BE61F5C0(a5[1], v329);
      a5[2] = (uint64_t *)((char *)a5[2] + 1);
    }
    sub_1BE80A1E8((uint64_t)v393, v315, v396, (uint64_t **)v327 + 5, v392);

  }
  v330 = [CHTokenizedMathResult alloc];
  v335 = (void *)objc_msgSend_initWithSegmentedBestPathTokens_(v330, v331, (uint64_t)v396, v332, v333, v334);
  v336 = [CHStrokeGroupRecognitionResult alloc];
  v338 = (void *)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v336, v337, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA70], MEMORY[0x1E0C9AA70], MEMORY[0x1E0C9AA70], v335, v392, v381, 0);
  objc_msgSend_transcriptionPaths(v335, v339, v340, v341, v342, v343);
  v344 = (void *)objc_claimAutoreleasedReturnValue();
  v350 = objc_msgSend_count(v344, v345, v346, v347, v348, v349);
  v351 = v350;
  memset(buf, 0, sizeof(buf));
  if (v350)
  {
    if (v350 >> 61)
      sub_1BE61F930();
    v352 = 8 * v350;
    v353 = (char *)operator new(8 * v350);
    *(_QWORD *)buf = v353;
    *(_QWORD *)&buf[16] = &v353[8 * v351];
    bzero(v353, 8 * v351);
    *(_QWORD *)&buf[8] = &v353[v352];
  }

  v359 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v360 = *(_QWORD *)&buf[8] - *(_QWORD *)buf - 8;
    if (v360 < 0x18)
    {
      v361 = 0;
      v362 = *(_QWORD **)buf;
      do
LABEL_110:
        *v362++ = v361++;
      while (v362 != v359);
      goto LABEL_111;
    }
    v363 = (v360 >> 3) + 1;
    v361 = v363 & 0x3FFFFFFFFFFFFFFCLL;
    v362 = (_QWORD *)(*(_QWORD *)buf + 8 * (v363 & 0x3FFFFFFFFFFFFFFCLL));
    v364 = (int64x2_t)xmmword_1BE8D5080;
    v365 = (int64x2_t *)(*(_QWORD *)buf + 16);
    v366 = vdupq_n_s64(2uLL);
    v367 = vdupq_n_s64(4uLL);
    v368 = v363 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v365[-1] = v364;
      *v365 = vaddq_s64(v364, v366);
      v364 = vaddq_s64(v364, v367);
      v365 += 2;
      v368 -= 4;
    }
    while (v368);
    if (v363 != v361)
      goto LABEL_110;
  }
LABEL_111:
  v369 = objc_msgSend_uniqueIdentifier(StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v354, v355, v356, v357, v358);
  v370 = v369;
  v372 = a5 + 1;
  v371 = a5[1];
  if (v371)
  {
    while (1)
    {
      while (1)
      {
        v373 = v371;
        v374 = v371[4];
        if (v369 >= v374)
          break;
        v371 = (uint64_t *)*v373;
        v372 = (uint64_t **)v373;
        if (!*v373)
          goto LABEL_118;
      }
      if (v374 >= v369)
        break;
      v371 = (uint64_t *)v373[1];
      if (!v371)
      {
        v372 = (uint64_t **)(v373 + 1);
        goto LABEL_118;
      }
    }
    v378 = v373 + 5;
    if (v373 + 5 == (uint64_t *)buf)
      goto LABEL_124;
  }
  else
  {
    v373 = (uint64_t *)(a5 + 1);
LABEL_118:
    v375 = (uint64_t *)operator new(0x40uLL);
    v375[4] = v370;
    v375[5] = 0;
    v375[6] = 0;
    v375[7] = 0;
    *v375 = 0;
    v375[1] = 0;
    v375[2] = (uint64_t)v373;
    *v372 = v375;
    v376 = (uint64_t *)**a5;
    v377 = v375;
    if (v376)
    {
      *a5 = v376;
      v377 = *v372;
    }
    sub_1BE61F5C0(a5[1], v377);
    a5[2] = (uint64_t *)((char *)a5[2] + 1);
    v378 = v375 + 5;
    if (v375 + 5 == (uint64_t *)buf)
      goto LABEL_124;
  }
  sub_1BE62037C(v378, *(char **)buf, *(char **)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
LABEL_124:
  if (a7)
    *a7 = objc_retainAutorelease(StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin);
  if (a8)
    *a8 = objc_retainAutorelease(v338);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }

LABEL_131:
}

void sub_1BE809D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1BE809FE4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  CHTokenizedMathResultToken *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  double v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;

  v78 = a2;
  v9 = a3;
  v10 = a4;
  v16 = a5;
  if (a1)
  {
    objc_msgSend_strokeIndexes(v78, v11, v12, v13, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inputStrokeIdentifiers(v9, v18, v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v24, (uint64_t)v17, (uint64_t)v23, (uint64_t)v16, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = [CHTokenizedMathResultToken alloc];
    objc_msgSend_string(v78, v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_score(v78, v34, v35, v36, v37, v38);
    v40 = v39;
    objc_msgSend_bounds(v78, v41, v42, v43, v44, v45);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    v53 = v52;
    v59 = objc_msgSend_properties(v78, v54, v55, v56, v57, v58);
    objc_msgSend_maskedAlternative(v78, v60, v61, v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_maskedAlternativeScore(v78, v66, v67, v68, v69, v70);
    v73 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v27, v71, (uint64_t)v33, (uint64_t)v26, v59, (uint64_t)v65, v40, v47, v49, v51, v53, v72);

    objc_msgSend_addObject_(v10, v74, (uint64_t)v73, v75, v76, v77);
  }

}

void sub_1BE80A17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE80A1E8(uint64_t a1, void *a2, void *a3, uint64_t **a4, void *a5)
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  const char *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t i;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  CHTokenizedMathResultToken *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  CHTokenizedMathResultToken *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  CHTokenizedMathResultToken *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  double v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  double v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t j;
  void *v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int isEqualToString;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  CHTokenizedMathResultToken *v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  double v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  double v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  CHTokenizedMathResultToken *v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  double v310;
  double v311;
  const char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  const char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  const char *v336;
  double v337;
  const char *v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  uint64_t *v342;
  void *v344;
  id v345;
  void *v346;
  void *v347;
  _QWORD v348[5];
  id v349;
  id v350;
  id v351;

  v8 = a2;
  v9 = a3;
  v345 = a5;
  v346 = v8;
  objc_msgSend_mathResult(v8, v10, v11, v12, v13, v14);
  v347 = (void *)objc_claimAutoreleasedReturnValue();
  v341 = v9;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v15, v16, v17, v18, v19);
  v344 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = *a4;
  v342 = a4[1];
  if (*a4 != v342)
  {
    while (1)
    {
      v26 = *v25;
      objc_msgSend_array(MEMORY[0x1E0C99DE8], v20, v21, v22, v23, v24);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_transcriptionPaths(v347, v28, v29, v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v33, v34, v26, v35, v36, v37);
      v38 = objc_claimAutoreleasedReturnValue();
      v44 = objc_msgSend_tokenColumnCount(v347, v39, v40, v41, v42, v43);
      v348[0] = MEMORY[0x1E0C809B0];
      v348[1] = 3221225472;
      v348[2] = sub_1BE80AA88;
      v348[3] = &unk_1E77F5870;
      v348[4] = a1;
      v349 = v346;
      v45 = v27;
      v350 = v45;
      v351 = v345;
      objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v347, v46, v38, 0, v44, (uint64_t)v348);

      v47 = v45;
      objc_msgSend_firstObject(v47, v48, v49, v50, v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      LOWORD(v38) = objc_msgSend_properties(v53, v54, v55, v56, v57, v58);

      v64 = v47;
      if ((v38 & 0x8000) != 0)
      {
        objc_msgSend_array(MEMORY[0x1E0C99DE8], v59, v60, v61, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_firstObject(v47, v65, v66, v67, v68, v69);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        for (i = 2; i < objc_msgSend_count(v47, v70, v71, v72, v73, v74) - 3; ++i)
        {
          objc_msgSend_objectAtIndexedSubscript_(v47, v77, i, v78, v79, v80);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v64, v82, (uint64_t)v81, v83, v84, v85);

        }
        v86 = [CHTokenizedMathResultToken alloc];
        objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v87, v88, v89, v90, v91);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v95 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v86, v93, (uint64_t)CFSTR("\\\\"), (uint64_t)v92, 0x4000, v94, 1.0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
        objc_msgSend_addObject_(v64, v96, (uint64_t)v95, v97, v98, v99);

        v100 = [CHTokenizedMathResultToken alloc];
        objc_msgSend_strokeIndexes(v75, v101, v102, v103, v104, v105);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_score(v75, v107, v108, v109, v110, v111);
        v113 = v112;
        objc_msgSend_bounds(v75, v114, v115, v116, v117, v118);
        v125 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v100, v119, (uint64_t)CFSTR("\\hline"), (uint64_t)v106, 0x20000, v120, v113, v121, v122, v123, v124);
        objc_msgSend_addObject_(v64, v126, (uint64_t)v125, v127, v128, v129);

      }
      if (objc_msgSend_count(v64, v130, v131, v132, v133, v134))
        break;
LABEL_25:
      objc_msgSend_addObject_(v344, v135, (uint64_t)v64, v136, v137, v138);

      if (++v25 == v342)
        goto LABEL_26;
    }
    objc_msgSend_objectAtIndexedSubscript_(v64, v135, 0, v136, v137, v138);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v139, v140, v141, v142, v143, v144);
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseString(v145, v146, v147, v148, v149, v150);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_isEqualToString_(v151, v152, (uint64_t)CFSTR("z"), v153, v154, v155)
      || (objc_msgSend_properties(v139, v156, v157, v158, v159, v160) & 0x40) != 0)
    {

    }
    else
    {
      v166 = objc_msgSend_properties(v139, v161, v162, v163, v164, v165);

      if (v166 < 0)
      {
LABEL_14:

        for (j = 1; ; ++j)
        {
          if (j >= objc_msgSend_count(v64, v210, v211, v212, v213, v214))
            goto LABEL_25;
          objc_msgSend_objectAtIndexedSubscript_(v64, v135, j, v136, v137, v138);
          v216 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_string(v216, v217, v218, v219, v220, v221);
          v222 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToString = objc_msgSend_isEqualToString_(v222, v223, (uint64_t)CFSTR("\\cdot"), v224, v225, v226);

          if (isEqualToString)
            break;
          objc_msgSend_string(v216, v228, v229, v230, v231, v232);
          v273 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_lowercaseString(v273, v277, v278, v279, v280, v281);
          v282 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend_isEqualToString_(v282, v283, (uint64_t)CFSTR("z"), v284, v285, v286)
            || (objc_msgSend_properties(v216, v287, v288, v289, v290, v291) & 0x40) != 0)
          {

LABEL_16:
            goto LABEL_17;
          }
          v297 = objc_msgSend_properties(v216, v292, v293, v294, v295, v296);

          if ((v297 & 0x80) == 0)
          {
            v298 = [CHTokenizedMathResultToken alloc];
            objc_msgSend_strokeIndexes(v216, v299, v300, v301, v302, v303);
            v304 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_score(v216, v305, v306, v307, v308, v309);
            v311 = v310;
            objc_msgSend_bounds(v216, v312, v313, v314, v315, v316);
            v318 = v317;
            v320 = v319;
            v322 = v321;
            v324 = v323;
            objc_msgSend_maskedAlternative(v216, v325, v326, v327, v328, v329);
            v330 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_maskedAlternativeScore(v216, v331, v332, v333, v334, v335);
            v273 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v298, v336, (uint64_t)CFSTR("2"), (uint64_t)v304, 2, (uint64_t)v330, v311, v318, v320, v322, v324, v337);

            objc_msgSend_setObject_atIndexedSubscript_(v64, v338, (uint64_t)v273, j, v339, v340);
            goto LABEL_16;
          }
LABEL_17:

        }
        v233 = [CHTokenizedMathResultToken alloc];
        objc_msgSend_strokeIndexes(v216, v234, v235, v236, v237, v238);
        v239 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_score(v216, v240, v241, v242, v243, v244);
        v246 = v245;
        objc_msgSend_bounds(v216, v247, v248, v249, v250, v251);
        v253 = v252;
        v255 = v254;
        v257 = v256;
        v259 = v258;
        objc_msgSend_maskedAlternative(v216, v260, v261, v262, v263, v264);
        v265 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_maskedAlternativeScore(v216, v266, v267, v268, v269, v270);
        v273 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v233, v271, (uint64_t)CFSTR("."), (uint64_t)v239, 4, (uint64_t)v265, v246, v253, v255, v257, v259, v272);

        objc_msgSend_setObject_atIndexedSubscript_(v64, v274, (uint64_t)v273, j, v275, v276);
        goto LABEL_16;
      }
      v167 = [CHTokenizedMathResultToken alloc];
      objc_msgSend_strokeIndexes(v139, v168, v169, v170, v171, v172);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_score(v139, v174, v175, v176, v177, v178);
      v180 = v179;
      objc_msgSend_bounds(v139, v181, v182, v183, v184, v185);
      v187 = v186;
      v189 = v188;
      v191 = v190;
      v193 = v192;
      objc_msgSend_maskedAlternative(v139, v194, v195, v196, v197, v198);
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_maskedAlternativeScore(v139, v200, v201, v202, v203, v204);
      v145 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v167, v205, (uint64_t)CFSTR("2"), (uint64_t)v173, 2, (uint64_t)v199, v180, v187, v189, v191, v193, v206);

      objc_msgSend_setObject_atIndexedSubscript_(v64, v207, (uint64_t)v145, 0, v208, v209);
    }

    goto LABEL_14;
  }
LABEL_26:
  objc_msgSend_addObject_(v341, v20, (uint64_t)v344, v22, v23, v24);

}

void sub_1BE80A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE80AA88(uint64_t a1, void *a2)
{
  sub_1BE809FE4(*(_QWORD *)(a1 + 32), a2, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
}

uint64_t sub_1BE80AA98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = a2;
  v6 = a3;
  objc_msgSend_groupingManager(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeProvider(v12, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v18, v19, (uint64_t)v5, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_groupingManager(*(void **)(a1 + 32), v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeProvider(v29, v30, v31, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v35, v36, (uint64_t)v6, v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_groupingManager(*(void **)(a1 + 32), v41, v42, v43, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeProvider(v46, v47, v48, v49, v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v52, v53, (uint64_t)v23, (uint64_t)v40, v54, v55);

  return v56;
}

void sub_1BE80AB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE80ABC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE80ABE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE80AC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80AC18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE80AC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80AC4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE80AC60(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v25 = a2;
  objc_msgSend_string(v25, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("\\\\"), v10, v11, v12) & 1) != 0)
  {
    objc_msgSend_strokeIndexes(v25, v13, v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_count(v18, v19, v20, v21, v22, v23);

    if (v24)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;

  }
  else
  {

  }
}

void sub_1BE80AD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE80AD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE80AD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE80BDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{

  _Unwind_Resume(a1);
}

void sub_1BE80D3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{

  _Unwind_Resume(a1);
}

void sub_1BE80D83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80D854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80D86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE80D880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE80D890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE80ED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE80F348(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _BOOL4 v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    if (v6)
      v8 = (void *)*((_QWORD *)v6 + 7);
    else
      v8 = 0;
    v9 = v8;
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v16 = objc_msgSend_uniqueIdentifier(v5, v11, v12, v13, v14, v15);
    objc_msgSend_numberWithInteger_(v10, v17, v16, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v9, v22, (uint64_t)v21, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_preferredLocale(v26, v27, v28, v29, v30, v31);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (v37)
    {
      v38 = 1;
    }
    else
    {
      objc_msgSend_mathResult(v26, v32, v33, v34, v35, v36);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = v39 != 0;

    }
    v50 = objc_msgSend_classification(v5, v40, v41, v42, v43, v44) == 1
       || objc_msgSend_classification(v5, v45, v46, v47, v48, v49) == 3;
    v51 = v38 & v50;

  }
  else
  {
    v51 = 0;
  }

  return v51;
}

void sub_1BE80F460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80F4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80F5A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE80F5C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE81040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8107D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1BE8107DC(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4, void *a5, void *a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  CHStrokeGroup *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  double v62;
  double v63;
  void *StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
  uint64_t v65;
  void *v66;
  id v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double x;
  double v97;
  double v98;
  double width;
  unint64_t v100;
  void *v101;
  char v102;
  char v103;
  double v104;
  double v105;
  double v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  double v119;
  double v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  CGFloat v126;
  CGFloat v127;
  CGFloat v128;
  CGFloat v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  CGFloat v157;
  CGFloat v158;
  CGFloat v159;
  CGFloat v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  char v197;
  double v198;
  CGFloat y;
  CGFloat v200;
  BOOL v201;
  NSObject *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  double v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  CGFloat v215;
  CGFloat v216;
  CGFloat v217;
  CGFloat v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  double v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  CGFloat v245;
  CGFloat v246;
  CGFloat v247;
  CGFloat v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  CGFloat v287;
  double v288;
  CHTokenizedMathResultToken *v289;
  const char *v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t Index;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  void *v319;
  CHTokenizedMathResultToken *v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  void *v328;
  void *v332;
  void *v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  CGFloat height;
  id v338;
  void *v339;
  void *v340;
  double v341;
  void *v342;
  double v343;
  CGRect r1;
  uint64_t v345;
  uint64_t (*v346)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v347;
  id v348;
  uint64_t v349;
  unsigned __int8 v350;
  CGRect v351;
  CGRect v352;
  CGRect v353;
  CGRect v354;
  CGRect v355;
  CGRect v356;
  CGRect v357;
  CGRect v358;
  CGRect v359;
  CGRect v360;
  CGRect v361;
  CGRect v362;

  v11 = a2;
  v12 = a5;
  v338 = a6;
  v13 = a7;
  objc_msgSend_strokeIndexes(v11, v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v13, v20, (uint64_t)v19, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = [CHStrokeGroup alloc];
  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v26, (uint64_t)v24, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v24, v31, v32, v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastObject(v24, v37, v38, v39, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_originalBounds(v11, v43, v44, v45, v46, v47);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  v55 = v54;
  objc_msgSend_originalBounds(v11, v56, v57, v58, v59, v60);
  StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = (void *)objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v25, v61, (uint64_t)v30, (uint64_t)v36, (uint64_t)v42, 3, CFSTR("CHMathStrokeGroupingStrategy"), v49, v51, v53, v55, 1.0, v62, v63);

  v65 = *(_QWORD *)(a1 + 24);
  v349 = 0;
  (*(void (**)(void))(v65 + 16))();
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = 0;
  v73 = v67;
  if (!v66)
  {
    v191 = 0;
    goto LABEL_54;
  }
  v335 = (uint64_t)v67;
  v336 = (uint64_t)v13;
  v339 = v11;
  v333 = StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
  v334 = v24;
  v332 = v66;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v68, v69, v70, v71, v72);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&r1.size.height = MEMORY[0x1E0C809B0];
  v345 = 3221225472;
  v346 = sub_1BE8112CC;
  v347 = &unk_1E77F1EC8;
  v75 = v74;
  v348 = v75;
  objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v66, v76, (uint64_t)&r1.size.height, v77, v78, v79);
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v80, v81, v82, v83, v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v86, v87, v88, v89, v90);
  v340 = (void *)objc_claimAutoreleasedReturnValue();
  x = *MEMORY[0x1E0C9D628];
  v97 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v98 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  r1.origin.x = *(CGFloat *)MEMORY[0x1E0C9D628];
  if (!v12)
  {
    if (v338)
    {
      v104 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v106 = *(double *)(MEMORY[0x1E0C9D628] + 24);
      v105 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v195 = objc_msgSend_count(v75, v91, v92, v93, v94, v95) - 1;
      if (v195 < 0)
      {
        v107 = 0;
        v341 = 1.0;
        v343 = 1.0;
        v286 = 0x40000;
        x = r1.origin.x;
        objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v108, (uint64_t)v340, (uint64_t)v73, v336, v111);
        goto LABEL_47;
      }
      v196 = 0;
      v101 = 0;
      v197 = 1;
      v198 = 1.0;
      v343 = 1.0;
      height = v98;
      y = v104;
      v200 = r1.origin.x;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            objc_msgSend_objectAtIndexedSubscript_(v75, v108, v195, v193, v194, v111);
            v202 = objc_claimAutoreleasedReturnValue();
            v118 = v202;
            if ((v196 & 1) == 0)
              break;
            objc_msgSend_score(v202, v203, v204, v205, v206, v207);
            v209 = v208;
            objc_msgSend_bounds(v118, v210, v211, v212, v213, v214);
            v361.origin.x = v215;
            v361.origin.y = v216;
            v361.size.width = v217;
            v361.size.height = v218;
            v355.origin.x = v200;
            v355.origin.y = y;
            v355.size.width = width;
            v355.size.height = height;
            v356 = CGRectUnion(v355, v361);
            height = v356.size.height;
            v200 = v356.origin.x;
            y = v356.origin.y;
            width = v356.size.width;
            v343 = v343 * v209;
            v196 = 1;

            v201 = v195-- <= 0;
            if (v201)
              goto LABEL_35;
          }
          objc_msgSend_string(v202, v203, v204, v205, v206, v207);
          v219 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_insertString_atIndex_(v85, v220, (uint64_t)v219, 0, v221, v222);

          objc_msgSend_strokeIndexes(v118, v223, v224, v225, v226, v227);
          v228 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v340, v229, (uint64_t)v228, v230, v231, v232);

          objc_msgSend_score(v118, v233, v234, v235, v236, v237);
          v239 = v238;
          objc_msgSend_bounds(v118, v240, v241, v242, v243, v244);
          v362.origin.x = v245;
          v362.origin.y = v246;
          v362.size.width = v247;
          v362.size.height = v248;
          v357.origin.x = r1.origin.x;
          v357.origin.y = v104;
          v357.size.width = v105;
          v357.size.height = v106;
          v358 = CGRectUnion(v357, v362);
          r1.origin.x = v358.origin.x;
          v104 = v358.origin.y;
          v105 = v358.size.width;
          v106 = v358.size.height;
          v198 = v198 * v239;
          if (objc_msgSend_isEqualToString_(v85, v249, (uint64_t)v338, v250, v251, v252))
            break;
          if (!objc_msgSend_hasSuffix_(v338, v253, (uint64_t)v85, v255, v256, v257))
          {
LABEL_45:
            v192 = 0;
            v107 = v101;
            goto LABEL_52;
          }
          v196 = 0;
          if (!v195)
            v197 = 0;

          v201 = v195-- <= 0;
          if (v201)
          {
LABEL_35:
            if ((v197 & 1) != 0)
            {
              v341 = v198;
              v286 = 0x40000;
              v287 = y;
              v98 = v106;
              v288 = width;
              width = v105;
              v97 = v104;
              x = r1.origin.x;
              v107 = v101;
              v106 = height;
              v105 = v288;
              v104 = v287;
              r1.origin.x = v200;
              goto LABEL_38;
            }
LABEL_18:
            v192 = 0;
            goto LABEL_53;
          }
        }
        objc_msgSend_string(v339, v253, v254, v255, v256, v257);
        v258 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(v339, v259, v260, v261, v262, v263);
        v264 = (void *)objc_claimAutoreleasedReturnValue();
        v270 = objc_msgSend_length(v264, v265, v266, v267, v268, v269);
        v276 = objc_msgSend_length(v338, v271, v272, v273, v274, v275);
        objc_msgSend_substringToIndex_(v258, v277, v270 - v276, v278, v279, v280);
        v107 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_length(v107, v281, v282, v283, v284, v285))
          break;
        v197 = 1;
        v101 = v107;
        v196 = 1;

        v201 = v195-- <= 0;
        if (v201)
          goto LABEL_35;
      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v118 = (id)qword_1EF568E30;
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        LOWORD(r1.origin.y) = 0;
        _os_log_impl(&dword_1BE607000, v118, OS_LOG_TYPE_ERROR, "Either prefix or suffix must be provided when splittin a text token.", (uint8_t *)&r1.origin.y, 2u);
      }
      v107 = 0;
    }
LABEL_44:
    v192 = 0;
    goto LABEL_52;
  }
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v341 = 1.0;
  v343 = 1.0;
  v103 = 1;
  v104 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v105 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v106 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  while (v100 < objc_msgSend_count(v75, v91, v92, v93, v94, v95))
  {
    objc_msgSend_objectAtIndexedSubscript_(v75, v108, v100, v109, v110, v111);
    v112 = objc_claimAutoreleasedReturnValue();
    v118 = v112;
    if ((v102 & 1) != 0)
    {
      objc_msgSend_score(v112, v113, v114, v115, v116, v117);
      v120 = v119;
      objc_msgSend_bounds(v118, v121, v122, v123, v124, v125);
      v359.origin.x = v126;
      v359.origin.y = v127;
      v359.size.width = v128;
      v359.size.height = v129;
      v351.origin.x = r1.origin.x;
      v351.origin.y = v104;
      v351.size.width = v105;
      v351.size.height = v106;
      v352 = CGRectUnion(v351, v359);
      r1.origin.x = v352.origin.x;
      v104 = v352.origin.y;
      v105 = v352.size.width;
      v106 = v352.size.height;
      v343 = v343 * v120;
      v102 = 1;
LABEL_4:
      v107 = v101;
      goto LABEL_5;
    }
    objc_msgSend_string(v112, v113, v114, v115, v116, v117);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendString_(v85, v131, (uint64_t)v130, v132, v133, v134);

    objc_msgSend_strokeIndexes(v118, v135, v136, v137, v138, v139);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v340, v141, (uint64_t)v140, v142, v143, v144);

    objc_msgSend_score(v118, v145, v146, v147, v148, v149);
    v151 = v150;
    objc_msgSend_bounds(v118, v152, v153, v154, v155, v156);
    v360.origin.x = v157;
    v360.origin.y = v158;
    v360.size.width = v159;
    v360.size.height = v160;
    v353.origin.x = x;
    v353.origin.y = v97;
    v353.size.width = width;
    v353.size.height = v98;
    v354 = CGRectUnion(v353, v360);
    x = v354.origin.x;
    v97 = v354.origin.y;
    width = v354.size.width;
    v98 = v354.size.height;
    v341 = v341 * v151;
    if (!objc_msgSend_isEqualToString_(v85, v161, (uint64_t)v12, v162, v163, v164))
    {
      if (!objc_msgSend_hasPrefix_(v12, v165, (uint64_t)v85, v167, v168, v169))
        goto LABEL_45;
      v102 = 0;
      if (v100 == objc_msgSend_count(v75, v186, v187, v188, v189, v190) - 1)
        v103 = 0;
      goto LABEL_4;
    }
    objc_msgSend_string(v339, v165, v166, v167, v168, v169);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v176 = objc_msgSend_length(v12, v171, v172, v173, v174, v175);
    objc_msgSend_substringFromIndex_(v170, v177, v176, v178, v179, v180);
    v107 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend_length(v107, v181, v182, v183, v184, v185))
      goto LABEL_44;
    v103 = 1;
    v102 = 1;
LABEL_5:

    ++v100;
    v101 = v107;
  }
  if ((v103 & 1) == 0)
    goto LABEL_18;
  v286 = 0x400000;
  v107 = v101;
LABEL_38:
  objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v108, (uint64_t)v340, v335, v336, v111);
LABEL_47:
  v118 = objc_claimAutoreleasedReturnValue();
  v289 = [CHTokenizedMathResultToken alloc];
  v342 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v289, v290, (uint64_t)v85, (uint64_t)v118, v286, v291, v341, x, v97, width, v98);
  objc_msgSend_strokeIndexes(v339, v292, v293, v294, v295, v296);
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  v303 = (void *)objc_msgSend_mutableCopy(v297, v298, v299, v300, v301, v302);

  Index = objc_msgSend_firstIndex(v303, v304, v305, v306, v307, v308);
  objc_msgSend_shiftIndexesStartingAtIndex_by_(v303, v310, 0, -Index, v311, v312);
  objc_msgSend_removeIndexes_(v303, v313, (uint64_t)v340, v314, v315, v316);
  objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v317, (uint64_t)v303, v335, v336, v318);
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  v320 = [CHTokenizedMathResultToken alloc];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v321, (uint64_t)CFSTR("\\text{%@}"), v322, v323, v324, v107);
  v325 = (void *)objc_claimAutoreleasedReturnValue();
  v328 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v320, v326, (uint64_t)v325, (uint64_t)v319, 0x800000, v327, v343, r1.origin.x, v104, v105, v106);

  if (a3)
    *a3 = objc_retainAutorelease(v342);
  if (a4)
    *a4 = objc_retainAutorelease(v328);

  v192 = 1;
LABEL_52:

  v101 = v107;
LABEL_53:
  v350 = v192;

  v191 = v350;
  v11 = v339;
  v73 = (void *)v335;
  v13 = (id)v336;
  StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = v333;
  v24 = v334;
  v66 = v332;
LABEL_54:

  return v191;
}

void sub_1BE8110DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,_Unwind_Exception *exception_object,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8112CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8112D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  if (objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v9, (uint64_t)v17, v10, v11, v12))objc_msgSend_appendString_(*(void **)(a1 + 40), v13, (uint64_t)v17, v14, v15, v16);
  else
    *a7 = 1;

}

void sub_1BE811350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE8113A4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_1BE61F930();
    v6 = (char *)operator new(v4 - *a2);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * (v5 >> 3)];
    do
    {
      *(_QWORD *)&v6[v7] = *(id *)(v3 + v7);
      v7 += 8;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1BE81143C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char **sub_1BE81147C(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  sub_1BE6EF83C(a1[10]);
  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v6 = a1[3];
  if (v6)
  {
    v7 = a1[4];
    v8 = a1[3];
    if (v7 != v6)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 1);
        v7 -= 8;

      }
      while (v7 != v6);
      v8 = a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
  v10 = *a1;
  if (*a1)
  {
    v11 = a1[1];
    v12 = *a1;
    if (v11 != v10)
    {
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 1);
        v11 -= 8;

      }
      while (v11 != v10);
      v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_1BE811548(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  void *v26;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_1BE61F930();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_1BE61F100();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  *(_QWORD *)v10 = a2;
  v12 = v10 + 8;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14)
      return v12;
    goto LABEL_22;
  }
  v15 = (unint64_t)&v14[-*a1 - 8];
  if (v15 < 0x78 || &v14[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v14)
    goto LABEL_30;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v17;
  v18 = &v14[-v17];
  v19 = v14 - 16;
  v20 = &v9[8 * v4 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v14 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      v24 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v10 - 1) = v24;
      v10 -= 8;
    }
    while (v14 != v13);
  }
  v14 = (char *)*a1;
  v25 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  while (v25 != v14)
  {
    v26 = (void *)*((_QWORD *)v25 - 1);
    v25 -= 8;

  }
  if (v14)
LABEL_22:
    operator delete(v14);
  return v12;
}

void sub_1BE81179C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE811898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8118AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *sub_1BE8119A8(uint64_t a1, unint64_t a2)
{
  objc_opt_self();
  if (a2 > 0x1B)
    return 0;
  else
    return off_1E77F5A48[a2];
}

void sub_1BE811B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE811BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE811BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE811BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE811BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE811C80(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  _BOOL4 v7;
  uint64_t result;

  objc_opt_self();
  switch(a2)
  {
    case 0:
      result = a3 == 3;
      break;
    case 1:
      result = a3 == 4 || (a3 & 0xFFFFFFFB) - 1 < 2;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      result = (a3 & 0xFFFFFFFB) == 1 || (a3 & 0xFFFFFFFD) == 4;
      break;
    case 6:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      result = a3 == 1 || (a3 & 0xFFFFFFFD) == 4;
      break;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      v5 = _os_feature_enabled_impl();
      v7 = a3 == 1 || (a3 & 0xFFFFFFFD) == 4;
      if (v5)
        result = v7;
      else
        result = 0;
      break;
    case 19:
    case 20:
    case 21:
      result = (a3 - 1) < 2 || (a3 & 0xFFFFFFFD) == 4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_1BE811E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE811EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8121F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE8128F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE812C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE812E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE813074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE81308C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8130A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8131C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8131D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE81336C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE813380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE813390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE81351C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8137FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE813F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE813F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE813F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE813F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE814150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE81429C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE814414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8145CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE814620(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2;
  v5 = a3;
  objc_opt_self();
  v6 = LMLanguageModelCreate();
  v12 = v6;
  if (v5 && !v6)
  {
    objc_msgSend_localeIdentifier(v5, v7, v8, v9, v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v4, v14, (uint64_t)v13, *MEMORY[0x1E0D434C8], v15, v16);

    v12 = LMLanguageModelCreate();
  }

  return v12;
}

void sub_1BE8146B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE8146D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8146E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE814D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE814DF4()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_BACKGROUND, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("com.apple.CoreHandwriting.LanguageModelLoadingQueue", attr);
  v2 = (void *)qword_1EF5683B8;
  qword_1EF5683B8 = (uint64_t)v1;

}

void sub_1BE814E64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = *(void **)(a1 + 32);
  objc_msgSend_linguisticResourcesFallbackLocale(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = sub_1BE814620((uint64_t)CHRecognizerConfiguration, v7, v8);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E20;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)(a1 + 64))
      v11 = "has";
    else
      v11 = "has not";
    *(_DWORD *)buf = 136315138;
    v17 = v11;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEBUG, "wordLM %s been loaded (async)", buf, 0xCu);
  }

  if (v9)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1BE814FE8;
    v13[3] = &unk_1E77F24A0;
    v12 = *(NSObject **)(a1 + 48);
    v14 = *(id *)(a1 + 56);
    v15 = v9;
    dispatch_sync(v12, v13);

  }
}

void sub_1BE814FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE814FE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend__updateWordLanguageModel_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4, a5, a6);
  return LMLanguageModelRelease();
}

void sub_1BE81571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE815854(uint64_t a1, const __CFURL *a2, int a3, void *a4, CFStringRef theString1, _BYTE *a6)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *PathComponent;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int isEqualToString;
  id v30;

  if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x1E0D43828], 0) == kCFCompareEqualTo)
  {
    objc_msgSend_localeIdentifier(a4, v10, v11, v12, v13, v14);
    v30 = (id)objc_claimAutoreleasedReturnValue();
    PathComponent = CFURLCopyLastPathComponent(a2);
    if (CFStringCompare(PathComponent, CFSTR("char.lm"), 0) == kCFCompareEqualTo)
    {
      objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), v16, (uint64_t)a2, (uint64_t)v30, v17, v18);
      objc_msgSend_localeIdentifier(*(void **)(*(_QWORD *)(a1 + 40) + 48), v19, v20, v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v30, v25, (uint64_t)v24, v26, v27, v28);

      if (isEqualToString)
        *a6 = 1;
    }
    if (PathComponent)
      CFRelease(PathComponent);

  }
}

void sub_1BE815944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, const void *a10)
{
  void *v10;

  sub_1BE815998(&a10);
  _Unwind_Resume(a1);
}

void sub_1BE815968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE81597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, const void *a10)
{
  sub_1BE815998(&a10);

  _Unwind_Resume(a1);
}

const void **sub_1BE815998(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_1BE815B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE815C78()
{
  CHPatternNetwork *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v0 = [CHPatternNetwork alloc];
  v5 = objc_msgSend_initWithFile_(v0, v1, (uint64_t)CFSTR("PP.bin"), v2, v3, v4);
  v6 = (void *)qword_1EF5683C8;
  qword_1EF5683C8 = v5;

}

void sub_1BE815DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B812EC](v1, 0x10B2C40ACD43ABBLL);
  _Unwind_Resume(a1);
}

void sub_1BE815EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B812EC](v1, 0x10B2C40ACD43ABBLL);
  _Unwind_Resume(a1);
}

void sub_1BE81625C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE81674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE817640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE817878(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  objc_msgSend_substringFromIndex_(a2, (const char *)a2, 4, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_capitalizedString(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_stringByAppendingString_(CFSTR("UseCPPFeatureExtraction"), v14, (uint64_t)v13, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(*(void **)(a1 + 32), v19, (uint64_t)v18, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend_BOOLValue(v23, v24, v25, v26, v27, v28);

  return v29;
}

void sub_1BE817904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE817928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE817938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE818324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Unwind_Resume(a1);
}

void sub_1BE81869C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE818740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE818758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE81876C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE818828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE81898C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE818A20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE818B0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = a3;
  if ((objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR(" "), v5, v6, v7) & 1) != 0)
  {

    return 2;
  }
  else
  {
    v13 = 2 * (objc_msgSend_characterAtIndex_(v3, v8, 0, v9, v10, v11) == 57427);

    return v13;
  }
}

void sub_1BE818B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE818C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1BE818C70(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;

  v3 = a2;
  if (objc_msgSend_characterCount(v3, v4, v5, v6, v7, v8) < 2)
    v14 = (*(double (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    v14 = (double)objc_msgSend_characterCount(v3, v9, v10, v11, v12, v13) * -100.0;

  return v14;
}

void sub_1BE818CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE81988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE819E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL sub_1BE819F88(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = 0;
  sub_1BE609EE8((uint64_t)CHRecognizerConfiguration, a2, &v3, 0);
  return v3 == 1;
}

void sub_1BE81A0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE81A0EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE81A350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE81A428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE81A664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE81A680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE81A698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE81A6B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE81A6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE81A6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE81AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE81B360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE81B3D0()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1BE81B3B4);
}

void sub_1BE81B3E4()
{
  void *v0;

  JUMPOUT(0x1BE81B3B4);
}

void sub_1BE81B3F4()
{
  JUMPOUT(0x1BE81B3B4);
}

void sub_1BE81B400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE81B424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE81B444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE81B52C(uint64_t a1, char *__s, char a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_1BE66B04C((_QWORD *)(a1 + 128));
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_BYTE *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v11 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12 < 4)
      goto LABEL_25;
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 23);
    if (v11 < 4)
      goto LABEL_25;
  }
  v13 = v12 - 3;
  if ((v11 & 0x80) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + v13) != 102)
      goto LABEL_25;
  }
  else if (*(_BYTE *)(a1 + v13) != 102)
  {
    goto LABEL_25;
  }
  v14 = v12 - 2;
  if ((v11 & 0x80) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + v14) != 115)
      goto LABEL_25;
  }
  else if (*(_BYTE *)(a1 + v14) != 115)
  {
    goto LABEL_25;
  }
  v15 = v12 - 1;
  if ((v11 & 0x80) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + v15) == 116)
      goto LABEL_23;
LABEL_25:
    Network::deserialize((Network *)a1, __s);
    return a1;
  }
  if (*(_BYTE *)(a1 + v15) != 116)
    goto LABEL_25;
LABEL_23:
  Network::readDataFile((Network *)a1);
  return a1;
}

void sub_1BE81B718(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  void **v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v11;
  void *v12;
  void *v13;

  sub_1BE62033C(v4, *v9);
  sub_1BE66A278(v3, *v8);
  sub_1BE66A1F0(v2);
  v11 = *(void **)(v1 + 104);
  if (v11)
  {
    *(_QWORD *)(v1 + 112) = v11;
    operator delete(v11);
    v12 = *v7;
    if (!*v7)
    {
LABEL_3:
      sub_1BE62033C((uint64_t)(v6 - 1), *v6);
      v13 = *v5;
      if (!*v5)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v12 = *v7;
    if (!*v7)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 88) = v12;
  operator delete(v12);
  sub_1BE62033C((uint64_t)(v6 - 1), *v6);
  v13 = *v5;
  if (!*v5)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v1 + 40) = v13;
  operator delete(v13);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void CHCanvasHeatmap::CHCanvasHeatmap(CHCanvasHeatmap *this, const CHCanvasHeatmap *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v3 = (_QWORD *)((char *)this + 48);
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  v4 = (_QWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  v5 = (_QWORD *)((char *)this + 136);
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *(_QWORD *)this = *(_QWORD *)a2;
  if (this != a2)
  {
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    sub_1BE81E800((_QWORD *)this + 1, *((uint64_t **)a2 + 3), 0);
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    sub_1BE81EEB0(v3, *((_QWORD **)a2 + 8), 0);
    *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
    sub_1BE81F530(v4, *((uint64_t **)a2 + 13), 0);
    *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
    sub_1BE81F6EC(v5, *((uint64_t **)a2 + 19), 0);
  }
}

void sub_1BE81B8BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1BE81B8E8(v4);
  sub_1BE81B968(v3);
  sub_1BE65DB88(v2);
  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE81B8E8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_1BE81B968(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[6];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[4];
      v2[4] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void CHCanvasHeatmap::cleanCanvasHeatmap(CHCanvasHeatmap *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  uint64_t v10;
  uint64_t k;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t m;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;

  *(_QWORD *)this = 20;
  if (*((_QWORD *)this + 4))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 3);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *((_QWORD *)this + 3) = 0;
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  if (*((_QWORD *)this + 14))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 13);
    if (v6)
    {
      do
      {
        v16 = (_QWORD *)*v6;
        v17 = (_QWORD *)v6[6];
        if (v17)
        {
          do
          {
            v18 = (_QWORD *)*v17;
            operator delete(v17);
            v17 = v18;
          }
          while (v18);
        }
        v19 = (void *)v6[4];
        v6[4] = 0;
        if (v19)
          operator delete(v19);
        operator delete(v6);
        v6 = v16;
      }
      while (v16);
    }
    *((_QWORD *)this + 13) = 0;
    v7 = *((_QWORD *)this + 12);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*((_QWORD *)this + 11) + 8 * j) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  if (*((_QWORD *)this + 20))
  {
    v9 = (_QWORD *)*((_QWORD *)this + 19);
    if (v9)
    {
      do
      {
        v20 = (_QWORD *)*v9;
        v21 = (_QWORD *)v9[5];
        if (v21)
        {
          do
          {
            v22 = (_QWORD *)*v21;
            operator delete(v21);
            v21 = v22;
          }
          while (v22);
        }
        v23 = (void *)v9[3];
        v9[3] = 0;
        if (v23)
          operator delete(v23);
        operator delete(v9);
        v9 = v20;
      }
      while (v20);
    }
    *((_QWORD *)this + 19) = 0;
    v10 = *((_QWORD *)this + 18);
    if (v10)
    {
      for (k = 0; k != v10; ++k)
        *(_QWORD *)(*((_QWORD *)this + 17) + 8 * k) = 0;
    }
    *((_QWORD *)this + 20) = 0;
  }
  if (*((_QWORD *)this + 9))
  {
    v12 = (_QWORD *)*((_QWORD *)this + 8);
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    *((_QWORD *)this + 8) = 0;
    v14 = *((_QWORD *)this + 7);
    if (v14)
    {
      for (m = 0; m != v14; ++m)
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * m) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
}

uint64_t CHCanvasHeatmap::nextHeatmapItemID(CHCanvasHeatmap *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v1 + 1;
  return v1;
}

void sub_1BE81BBAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;

  v7 = (uint64_t *)(a1 + 8);
  v8 = *a3;
  v9 = a3[1];
  v10 = *a3 ^ (2 * v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    goto LABEL_53;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a3 ^ (2 * v9);
    if (v10 >= v11)
      v13 = v10 % v11;
  }
  else
  {
    v13 = (v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*v7 + 8 * v13);
  if (!v14 || (v15 = (_QWORD *)*v14) == 0)
  {
LABEL_28:
    if (v12.u32[0] > 1uLL)
    {
      v3 = *a3 ^ (2 * v9);
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v20 = *(_QWORD **)(*v7 + 8 * v3);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (v21)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v21[1];
            if (v25 == v10)
            {
              if (v21[2] == v8 && v21[3] == v9)
                return;
            }
            else if ((v25 & (v11 - 1)) != v3)
            {
              goto LABEL_53;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_53;
          }
        }
        do
        {
          v23 = v21[1];
          if (v23 == v10)
          {
            if (v21[2] == v8 && v21[3] == v9)
              return;
          }
          else
          {
            if (v23 >= v11)
              v23 %= v11;
            if (v23 != v3)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
LABEL_53:
    v26 = operator new(0x28uLL);
    *v26 = 0;
    v26[1] = v10;
    *((_OWORD *)v26 + 1) = *(_OWORD *)a3;
    v26[4] = a2;
    v27 = (_QWORD *)(a1 + 32);
    v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
    v29 = *(float *)(a1 + 40);
    if (v11 && (float)(v29 * (float)v11) >= v28)
    {
      v30 = *v7;
      v31 = *(_QWORD **)(*v7 + 8 * v3);
      if (v31)
      {
LABEL_56:
        *v26 = *v31;
        goto LABEL_92;
      }
    }
    else
    {
      v32 = 1;
      if (v11 >= 3)
        v32 = (v11 & (v11 - 1)) != 0;
      v33 = v32 | (2 * v11);
      v34 = vcvtps_u32_f32(v28 / v29);
      if (v33 <= v34)
        prime = v34;
      else
        prime = v33;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v11 = *(_QWORD *)(a1 + 16);
      }
      if (prime > v11)
        goto LABEL_67;
      if (prime < v11)
      {
        v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
        if (v11 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          v36 = std::__next_prime(v36);
        }
        else
        {
          v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2)
            v36 = v38;
        }
        if (prime <= v36)
          prime = v36;
        if (prime < v11)
LABEL_67:
          sub_1BE61F23C((uint64_t)v7, prime);
      }
      v11 = *(_QWORD *)(a1 + 16);
      v39 = v11 - 1;
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11)
        {
          v3 = v10 % v11;
          v30 = *v7;
          v31 = *(_QWORD **)(*v7 + 8 * (v10 % v11));
          if (v31)
            goto LABEL_56;
        }
        else
        {
          v3 = v10;
          v30 = *v7;
          v31 = *(_QWORD **)(*v7 + 8 * v10);
          if (v31)
            goto LABEL_56;
        }
      }
      else
      {
        v3 = v39 & v10;
        v30 = *v7;
        v31 = *(_QWORD **)(*v7 + 8 * (v39 & v10));
        if (v31)
          goto LABEL_56;
      }
    }
    v41 = *(_QWORD *)(a1 + 24);
    v40 = (_QWORD *)(a1 + 24);
    *v26 = v41;
    *v40 = v26;
    *(_QWORD *)(v30 + 8 * v3) = v40;
    if (!*v26)
    {
LABEL_93:
      a2 = 1;
      goto LABEL_94;
    }
    v42 = *(_QWORD *)(*v26 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v31 = (_QWORD *)(*v7 + 8 * v42);
LABEL_92:
    *v31 = v26;
    goto LABEL_93;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v19 = v15[1];
      if (v19 == v10)
      {
        if (v15[2] == v8 && v15[3] == v9)
          goto LABEL_74;
      }
      else if ((v19 & (v11 - 1)) != v13)
      {
        goto LABEL_28;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_28;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == v10)
      break;
    if (v17 >= v11)
      v17 %= v11;
    if (v17 != v13)
      goto LABEL_28;
LABEL_15:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_28;
  }
  if (v15[2] != v8 || v15[3] != v9)
    goto LABEL_15;
LABEL_74:
  v27 = v15 + 4;
LABEL_94:
  *v27 += a2;
}

void sub_1BE81BF78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL CHCanvasHeatmap::_isHighDensityItem(int8x8_t *this, unint64_t a2)
{
  int8x8_t *v4;
  _QWORD *v5;
  int8x8_t v6;
  int v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  float v23;
  _QWORD *v24;
  _BOOL8 v25;
  _BYTE *v27;
  _BYTE *v28;
  _QWORD *v29;
  _BYTE *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  _BYTE *v34;
  unint64_t v35;
  _BYTE *v36;
  _BYTE *v37;

  v35 = a2;
  v4 = this + 17;
  v5 = (_QWORD *)*((_QWORD *)sub_1BE8201D0((uint64_t)&this[17], a2, &v35) + 5);
  if (!v5)
    return 0;
  v6 = this[2];
  if (!*(_QWORD *)&v6)
  {
    do
      v5 = (_QWORD *)*v5;
    while (v5);
    return 0;
  }
  v7 = 0;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = *(_QWORD *)&v6 - 1;
  do
  {
    while (1)
    {
      v10 = v5[2];
      v11 = v5[3];
      v12 = v10 ^ (2 * v11);
      if (v8.u32[0] > 1uLL)
      {
        v13 = v10 ^ (2 * v11);
        if (v12 >= *(_QWORD *)&v6)
          v13 = v12 % *(_QWORD *)&v6;
      }
      else
      {
        v13 = v12 & v9;
      }
      v14 = *(_QWORD **)(*(_QWORD *)&this[1] + 8 * v13);
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if (v15)
          break;
      }
LABEL_4:
      v5 = (_QWORD *)*v5;
      if (!v5)
        goto LABEL_32;
    }
    if (v8.u32[0] < 2uLL)
    {
      while (1)
      {
        v17 = v15[1];
        if (v12 == v17)
        {
          if (v15[2] == v10 && v15[3] == v11)
            goto LABEL_31;
        }
        else if ((v17 & v9) != v13)
        {
          goto LABEL_4;
        }
        v15 = (_QWORD *)*v15;
        if (!v15)
          goto LABEL_4;
      }
    }
    while (1)
    {
      v19 = v15[1];
      if (v12 == v19)
        break;
      if (v19 >= *(_QWORD *)&v6)
        v19 %= *(_QWORD *)&v6;
      if (v19 != v13)
        goto LABEL_4;
LABEL_25:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_4;
    }
    if (v15[2] != v10 || v15[3] != v11)
      goto LABEL_25;
LABEL_31:
    v7 += v15[4];
    v5 = (_QWORD *)*v5;
  }
  while (v5);
LABEL_32:
  if (v7 <= 10)
    return 0;
  v20 = sub_1BE8201D0((uint64_t)v4, a2, &v35);
  v21 = v20;
  v22 = *((_QWORD *)v20 + 6);
  v23 = (float)v7 / (float)v22;
  if (v22 < 6)
  {
LABEL_44:
    if (v22 <= 3)
    {
      if (v23 <= 70.0)
      {
        v29 = v21 + 40;
        while (1)
        {
          v29 = (_QWORD *)*v29;
          if (!v29)
            break;
          sub_1BE81C254((uint64_t *)&v36, this, v29 + 2);
          v30 = v36;
          v31 = v37;
          if (v36)
          {
            v37 = v36;
            operator delete(v36);
          }
          if ((unint64_t)(v31 - v30) <= 0x20)
          {
            v22 = *((_QWORD *)v21 + 6);
            goto LABEL_52;
          }
        }
      }
      return 1;
    }
LABEL_52:
    if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      if (v23 > 34.0)
        return 1;
      v32 = v21 + 40;
      do
      {
        v32 = (_QWORD *)*v32;
        v25 = v32 == 0;
        if (!v32)
          break;
        sub_1BE81C254((uint64_t *)&v36, this, v32 + 2);
        v33 = v36;
        v34 = v37;
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
      }
      while ((unint64_t)(v34 - v33) > 0x20);
      return v25;
    }
    return 0;
  }
  if (v23 <= 20.0)
  {
    v24 = v20 + 40;
    while (1)
    {
      v24 = (_QWORD *)*v24;
      if (!v24)
        break;
      sub_1BE81C254((uint64_t *)&v36, this, v24 + 2);
      v27 = v36;
      v28 = v37;
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if ((unint64_t)(v28 - v27) <= 0x20)
      {
        v22 = *((_QWORD *)v21 + 6);
        goto LABEL_44;
      }
    }
  }
  return 1;
}

void sub_1BE81C254(uint64_t *a1, int8x8_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;

  v5 = a1;
  v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v7 = -1;
  while (2)
  {
    v8 = -1;
    while (2)
    {
      if (!(v8 | v7))
        goto LABEL_6;
      v10 = a2[2];
      if (!*(_QWORD *)&v10)
        goto LABEL_6;
      v11 = *a3 + v8;
      v12 = a3[1] + v7;
      v13 = v11 ^ (2 * v12);
      v14 = (uint8x8_t)vcnt_s8(v10);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = v11 ^ (2 * v12);
        if (v13 >= *(_QWORD *)&v10)
          v15 = v13 % *(_QWORD *)&v10;
      }
      else
      {
        v15 = v13 & (*(_QWORD *)&v10 - 1);
      }
      v16 = *(_QWORD **)(*(_QWORD *)&a2[1] + 8 * v15);
      if (!v16)
        goto LABEL_6;
      v17 = (_QWORD *)*v16;
      if (!v17)
        goto LABEL_6;
      if (v14.u32[0] < 2uLL)
      {
        v18 = *(_QWORD *)&v10 - 1;
        while (1)
        {
          v20 = v17[1];
          if (v13 == v20)
          {
            if (v17[2] == v11 && v17[3] == v12)
              goto LABEL_35;
          }
          else if ((v20 & v18) != v15)
          {
            goto LABEL_6;
          }
          v17 = (_QWORD *)*v17;
          if (!v17)
            goto LABEL_6;
        }
      }
      while (1)
      {
        v22 = v17[1];
        if (v13 == v22)
          break;
        if (v22 >= *(_QWORD *)&v10)
          v22 %= *(_QWORD *)&v10;
        if (v22 != v15)
          goto LABEL_6;
LABEL_29:
        v17 = (_QWORD *)*v17;
        if (!v17)
          goto LABEL_6;
      }
      if (v17[2] != v11 || v17[3] != v12)
        goto LABEL_29;
LABEL_35:
      if (v17[4] >= 0x15uLL)
      {
        v23 = v5[2];
        if ((unint64_t)v6 < v23)
        {
          *(_QWORD *)v6 = v11;
          *((_QWORD *)v6 + 1) = v12;
          v9 = v6 + 16;
          goto LABEL_5;
        }
        v24 = (char *)*v5;
        v25 = (v6 - v24) >> 4;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
          sub_1BE61F930();
        v27 = v23 - (_QWORD)v24;
        if (v27 >> 3 > v26)
          v26 = v27 >> 3;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 60)
            sub_1BE61F100();
          v29 = (char *)operator new(16 * v28);
          v30 = (uint64_t *)&v29[16 * v25];
          *v30 = v11;
          v30[1] = v12;
          v31 = (uint64_t)v30;
          if (v6 == v24)
          {
LABEL_51:
            v5 = a1;
            v9 = (char *)(v30 + 2);
            *a1 = v31;
            a1[1] = (uint64_t)(v30 + 2);
            a1[2] = (uint64_t)&v29[16 * v28];
            if (v6)
              goto LABEL_52;
            goto LABEL_5;
          }
        }
        else
        {
          v29 = 0;
          v30 = (uint64_t *)(16 * v25);
          *v30 = v11;
          v30[1] = v12;
          v31 = 16 * v25;
          if (v6 == v24)
            goto LABEL_51;
        }
        do
        {
          *(_OWORD *)(v31 - 16) = *((_OWORD *)v6 - 1);
          v31 -= 16;
          v6 -= 16;
        }
        while (v6 != v24);
        v5 = a1;
        v6 = (char *)*a1;
        v9 = (char *)(v30 + 2);
        *a1 = v31;
        a1[1] = (uint64_t)(v30 + 2);
        a1[2] = (uint64_t)&v29[16 * v28];
        if (v6)
LABEL_52:
          operator delete(v6);
LABEL_5:
        v5[1] = (uint64_t)v9;
        v6 = v9;
      }
LABEL_6:
      if (++v8 != 2)
        continue;
      break;
    }
    if (++v7 != 2)
      continue;
    break;
  }
}

void sub_1BE81C4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
  {
    *(_QWORD *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE81C510(int8x8_t *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  int8x8_t *v8;
  int8x8_t *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v16;
  void **v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t ***v22;
  uint64_t **v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  int8x8_t v30;
  void **v31;
  int8x8_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  int8x8_t v40;
  uint8x8_t v41;
  unint64_t v42;
  _QWORD **v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  uint8x8_t v49;
  unint64_t v50;
  int8x8_t v51;
  int8x8_t **v52;
  int8x8_t *v53;
  uint64_t v54;
  int8x8_t v55;
  unint64_t v56;
  int8x8_t *v57;
  int8x8_t *v58;
  unint64_t v59;
  unint64_t v60;
  int8x8_t v61;
  unint64_t v62;
  unint64_t *v63;
  void *v64;
  _QWORD *k;
  _QWORD *v66;
  float64x2_t *v67;
  float64x2_t *v68;
  int8x8_t *v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v76;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v82;
  uint64_t v84;
  int64x2_t *v85;
  float v86;
  _QWORD *v87;
  int64x2_t **v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  size_t prime;
  void *v93;
  void *v94;
  uint64_t v95;
  _QWORD **v96;
  size_t v97;
  size_t v98;
  size_t v99;
  _QWORD *i;
  size_t v101;
  uint64_t v102;
  unint64_t v103;
  uint8x8_t v104;
  uint64_t v105;
  _QWORD *v106;
  void **v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  size_t v112;
  uint64_t v113;
  int8x8_t v114;
  uint64_t v115;
  unint64_t v116;
  uint8x8_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint8x8_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v133;
  uint64_t v135;
  int8x8_t *v136;
  __int128 v137;
  uint64_t v138;
  size_t v139;
  _QWORD *j;
  float v141;
  float v142;
  int8x8_t **v143;
  int8x8_t *v144;
  int8x8_t v145;
  BOOL v146;
  _BOOL8 v147;
  unint64_t v148;
  unint64_t v149;
  size_t v150;
  unint64_t v151;
  uint8x8_t v152;
  uint64_t v153;
  int8x8_t v154;
  unint64_t v155;
  uint8x8_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  void *v161;
  uint8x8_t v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  float v168;
  float v169;
  int8x8_t *v170;
  int8x8_t *v171;
  _BOOL8 v172;
  unint64_t v173;
  unint64_t v174;
  int8x8_t v175;
  unint64_t v176;
  uint8x8_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  void *v182;
  _QWORD *v183;
  int8x8_t *v184;
  int8x8_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint8x8_t v190;
  void **v191;
  int8x8_t *v192;
  unint64_t v194;
  int8x8_t v196;
  __int128 v197;
  float v198;
  float v199;
  int8x8_t v200;
  int8x8_t **v201;
  _BOOL8 v202;
  unint64_t v203;
  unint64_t v204;
  size_t v205;
  unint64_t v206;
  uint8x8_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  int8x8_t v213;
  uint8x8_t v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  void **v221;
  _BOOL4 isHighDensityItem;
  int8x8_t v223;
  uint8x8_t v224;
  unint64_t v225;
  uint64_t ***v226;
  uint64_t **v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int8x8_t v231;
  uint8x8_t v232;
  unint64_t v233;
  uint64_t ***v234;
  uint64_t **v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  int8x8_t v239;
  uint8x8_t v240;
  unint64_t v241;
  uint64_t ***v242;
  uint64_t **v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  void *v249;
  _QWORD *v250;
  _QWORD *v251;
  void *v252;
  int8x8_t *v254;
  int8x8_t *v255;
  _QWORD *v256;
  int8x8_t *v258;
  unint64_t v259;
  int8x8_t *v260;
  int8x8_t *v261;
  int64x2_t v262;
  unint64_t v263;
  void *v264[2];
  void *v265[2];
  int v266;
  void *v267[2];
  void *v268[2];
  int v269;
  void *__p[2];
  void *v271[2];
  float v272;
  int64x2_t v273;
  __int128 v274;
  int v275;
  unint64_t v276;
  int8x8_t *v277;
  int8x8_t *v278;
  char v279;

  *(_OWORD *)v267 = 0u;
  *(_OWORD *)v268 = 0u;
  v269 = 1065353216;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v8 = this + 17;
    v9 = this + 13;
    v261 = this + 19;
    do
    {
      v5 = *(_QWORD *)(v7 + 16);
      __p[0] = (void *)v5;
      v4 = *((_QWORD *)sub_1BE8201D0((uint64_t)&this[17], v5, __p) + 5);
      if (v4)
      {
        do
        {
          sub_1BE81BBAC((uint64_t)this, -*(_QWORD *)(v4 + 32), (uint64_t *)(v4 + 16));
          v10 = *(_QWORD *)(v4 + 16);
          v11 = *(void **)(v4 + 24);
          v12 = v10 ^ (2 * (_QWORD)v11);
          v13 = (unint64_t)this[12];
          if ((v13 & (v13 - 1)) != 0)
          {
            v16 = v10 ^ (2 * (_QWORD)v11);
            if (v12 >= v13)
              v16 = v12 % v13;
            v14 = *(void ***)(*(_QWORD *)&this[11] + 8 * v16);
            do
            {
              do
                v14 = (void **)*v14;
              while (v14[1] != (void *)v12);
            }
            while (v14[2] != (void *)v10 || v14[3] != v11);
          }
          else
          {
            v14 = *(void ***)(*(_QWORD *)&this[11] + 8 * ((v13 - 1) & v12));
            do
            {
              do
                v14 = (void **)*v14;
              while (v14[1] != (void *)v12);
            }
            while (v14[2] != (void *)v10 || v14[3] != v11);
          }
          v18 = v14 + 4;
          v19 = (int8x8_t)v14[5];
          if (v19)
          {
            v20 = (uint8x8_t)vcnt_s8(v19);
            v20.i16[0] = vaddlv_u8(v20);
            if (v20.u32[0] > 1uLL)
            {
              v21 = (unint64_t)__p[0];
              if ((void *)*(_QWORD *)&v19 <= __p[0])
                v21 = (unint64_t)__p[0] % *(_QWORD *)&v19;
            }
            else
            {
              v21 = (*(_QWORD *)&v19 - 1) & (uint64_t)__p[0];
            }
            v22 = (uint64_t ***)*((_QWORD *)*v18 + v21);
            if (v22)
            {
              v23 = *v22;
              if (*v22)
              {
                if (v20.u32[0] < 2uLL)
                {
                  v24 = *(_QWORD *)&v19 - 1;
                  while (1)
                  {
                    v26 = (unint64_t)v23[1];
                    if ((void *)v26 == __p[0])
                    {
                      if (v23[2] == __p[0])
                        goto LABEL_45;
                    }
                    else if ((v26 & v24) != v21)
                    {
                      goto LABEL_47;
                    }
                    v23 = (uint64_t **)*v23;
                    if (!v23)
                      goto LABEL_47;
                  }
                }
                do
                {
                  v25 = (unint64_t)v23[1];
                  if ((void *)v25 == __p[0])
                  {
                    if (v23[2] == __p[0])
                    {
LABEL_45:
                      sub_1BE8204D8((uint64_t)&v273, v14 + 4, v23);
                      if (v273.i64[0])
                        operator delete((void *)v273.i64[0]);
                      break;
                    }
                  }
                  else
                  {
                    if (v25 >= *(_QWORD *)&v19)
                      v25 %= *(_QWORD *)&v19;
                    if (v25 != v21)
                      break;
                  }
                  v23 = (uint64_t **)*v23;
                }
                while (v23);
              }
            }
          }
LABEL_47:
          if (!v14[7])
          {
            v27 = this[12];
            v28 = (unint64_t)v14[1];
            v29 = (uint8x8_t)vcnt_s8(v27);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&v27)
                v28 %= *(_QWORD *)&v27;
            }
            else
            {
              v28 &= *(_QWORD *)&v27 - 1;
            }
            v30 = this[11];
            v31 = *(void ***)(*(_QWORD *)&v30 + 8 * v28);
            do
            {
              v32 = (int8x8_t *)v31;
              v31 = (void **)*v31;
            }
            while (v31 != v14);
            if (v32 == v9)
              goto LABEL_65;
            v33 = (unint64_t)v32[1];
            if (v29.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&v27)
                v33 %= *(_QWORD *)&v27;
            }
            else
            {
              v33 &= *(_QWORD *)&v27 - 1;
            }
            if (v33 != v28)
            {
LABEL_65:
              if (!*v14)
                goto LABEL_66;
              v34 = *((_QWORD *)*v14 + 1);
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(_QWORD *)&v27)
                  v34 %= *(_QWORD *)&v27;
              }
              else
              {
                v34 &= *(_QWORD *)&v27 - 1;
              }
              if (v34 != v28)
LABEL_66:
                *(_QWORD *)(*(_QWORD *)&v30 + 8 * v28) = 0;
            }
            v35 = *v14;
            if (*v14)
            {
              v36 = v35[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v36 >= *(_QWORD *)&v27)
                  v36 %= *(_QWORD *)&v27;
              }
              else
              {
                v36 &= *(_QWORD *)&v27 - 1;
              }
              if (v36 != v28)
              {
                *(_QWORD *)(*(_QWORD *)&this[11] + 8 * v36) = v32;
                v35 = *v14;
              }
            }
            *v32 = (int8x8_t)v35;
            *v14 = 0;
            --*(_QWORD *)&this[14];
            v37 = v14[6];
            if (v37)
            {
              do
              {
                v38 = (_QWORD *)*v37;
                operator delete(v37);
                v37 = v38;
              }
              while (v38);
            }
            v39 = *v18;
            *v18 = 0;
            if (v39)
              operator delete(v39);
            operator delete(v14);
          }
          sub_1BE81FD28((float *)v267, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), (_OWORD *)(v4 + 16));
          v4 = *(_QWORD *)v4;
        }
        while (v4);
        v5 = (unint64_t)__p[0];
      }
      v40 = this[7];
      if (v40)
      {
        v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          v42 = v5;
          if (v5 >= *(_QWORD *)&v40)
            v42 = v5 % *(_QWORD *)&v40;
        }
        else
        {
          v42 = (*(_QWORD *)&v40 - 1) & v5;
        }
        v43 = *(_QWORD ***)(*(_QWORD *)&this[6] + 8 * v42);
        if (v43)
        {
          v44 = *v43;
          if (*v43)
          {
            if (v41.u32[0] < 2uLL)
            {
              v45 = *(_QWORD *)&v40 - 1;
              while (1)
              {
                v47 = v44[1];
                if (v47 == v5)
                {
                  if (v44[2] == v5)
                    goto LABEL_102;
                }
                else if ((v47 & v45) != v42)
                {
                  goto LABEL_104;
                }
                v44 = (_QWORD *)*v44;
                if (!v44)
                  goto LABEL_104;
              }
            }
            do
            {
              v46 = v44[1];
              if (v46 == v5)
              {
                if (v44[2] == v5)
                {
LABEL_102:
                  sub_1BE8204D8((uint64_t)&v273, &this[6], v44);
                  if (v273.i64[0])
                    operator delete((void *)v273.i64[0]);
                  break;
                }
              }
              else
              {
                if (v46 >= *(_QWORD *)&v40)
                  v46 %= *(_QWORD *)&v40;
                if (v46 != v42)
                  break;
              }
              v44 = (_QWORD *)*v44;
            }
            while (v44);
          }
        }
      }
LABEL_104:
      v48 = this[18];
      if (v48)
      {
        v49 = (uint8x8_t)vcnt_s8(v48);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v50 = v5;
          if (*(_QWORD *)&v48 <= v5)
            v50 = v5 % *(_QWORD *)&v48;
        }
        else
        {
          v50 = (*(_QWORD *)&v48 - 1) & v5;
        }
        v51 = *v8;
        v52 = *(int8x8_t ***)(*(_QWORD *)v8 + 8 * v50);
        if (v52)
        {
          v53 = *v52;
          if (*v52)
          {
            v54 = *(_QWORD *)&v48 - 1;
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                v55 = v53[1];
                if (*(_QWORD *)&v55 == v5)
                {
                  if (*(_QWORD *)&v53[2] == v5)
                    goto LABEL_125;
                }
                else if ((*(_QWORD *)&v55 & v54) != v50)
                {
                  goto LABEL_4;
                }
                v53 = (int8x8_t *)*v53;
                if (!v53)
                  goto LABEL_4;
              }
            }
            do
            {
              v56 = (unint64_t)v53[1];
              if (v56 == v5)
              {
                if (*(_QWORD *)&v53[2] == v5)
                {
LABEL_125:
                  if (v49.u32[0] > 1uLL)
                  {
                    if (*(_QWORD *)&v48 <= v5)
                      v5 %= *(_QWORD *)&v48;
                  }
                  else
                  {
                    v5 &= v54;
                  }
                  v57 = *(int8x8_t **)(*(_QWORD *)&v51 + 8 * v5);
                  do
                  {
                    v58 = v57;
                    v57 = (int8x8_t *)*v57;
                  }
                  while (v57 != v53);
                  if (v58 == v261)
                    goto LABEL_142;
                  v59 = (unint64_t)v58[1];
                  if (v49.u32[0] > 1uLL)
                  {
                    if (v59 >= *(_QWORD *)&v48)
                      v59 %= *(_QWORD *)&v48;
                  }
                  else
                  {
                    v59 &= v54;
                  }
                  if (v59 != v5)
                  {
LABEL_142:
                    if (!*(_QWORD *)v53)
                      goto LABEL_143;
                    v60 = *(_QWORD *)(*(_QWORD *)v53 + 8);
                    if (v49.u32[0] > 1uLL)
                    {
                      if (v60 >= *(_QWORD *)&v48)
                        v60 %= *(_QWORD *)&v48;
                    }
                    else
                    {
                      v60 &= v54;
                    }
                    if (v60 != v5)
LABEL_143:
                      *(_QWORD *)(*(_QWORD *)&v51 + 8 * v5) = 0;
                  }
                  v61 = *v53;
                  if (*v53)
                  {
                    v62 = *(_QWORD *)(*(_QWORD *)&v61 + 8);
                    if (v49.u32[0] > 1uLL)
                    {
                      if (v62 >= *(_QWORD *)&v48)
                        v62 %= *(_QWORD *)&v48;
                    }
                    else
                    {
                      v62 &= v54;
                    }
                    if (v62 != v5)
                    {
                      *(_QWORD *)(*(_QWORD *)v8 + 8 * v62) = v58;
                      v61 = *v53;
                    }
                  }
                  *v58 = v61;
                  *v53 = 0;
                  --*(_QWORD *)&this[20];
                  v63 = (unint64_t *)v53[5];
                  if (v63)
                  {
                    do
                    {
                      v4 = *v63;
                      operator delete(v63);
                      v63 = (unint64_t *)v4;
                    }
                    while (v4);
                  }
                  v64 = (void *)v53[3];
                  v53[3] = 0;
                  if (v64)
                    operator delete(v64);
                  operator delete(v53);
                  break;
                }
              }
              else
              {
                if (v56 >= *(_QWORD *)&v48)
                  v56 %= *(_QWORD *)&v48;
                if (v56 != v50)
                  break;
              }
              v53 = (int8x8_t *)*v53;
            }
            while (v53);
          }
        }
      }
LABEL_4:
      v7 = *(_QWORD *)v7;
    }
    while (v7);
  }
  *(_OWORD *)v264 = 0u;
  *(_OWORD *)v265 = 0u;
  v266 = 1065353216;
  k = a2;
  v66 = (_QWORD *)a2[2];
  if (!v66)
    goto LABEL_466;
  v258 = this + 11;
  v260 = this + 13;
  v254 = this + 17;
  v255 = this + 19;
  do
  {
    v67 = (float64x2_t *)v66[3];
    v259 = v66[2];
    v263 = v259;
    v256 = v66;
    v68 = (float64x2_t *)v66[4];
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v271 = 0u;
    v272 = 1.0;
    v69 = this + 11;
    if (v67 == v68)
      goto LABEL_402;
    do
    {
      v262 = vcvtq_s64_f64(vdivq_f64(*v67, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(_QWORD *)this), 0)));
      v273 = v262;
      sub_1BE81BBAC((uint64_t)this, 1, v273.i64);
      v70 = v262.i64[0] ^ (2 * v262.i64[1]);
      v7 = (unint64_t)__p[1];
      if (!__p[1])
        goto LABEL_209;
      v71 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v262.i64[0] ^ (2 * v262.i64[1]);
        if ((void *)v70 >= __p[1])
          v72 = v70 % (unint64_t)__p[1];
      }
      else
      {
        v72 = ((unint64_t)__p[1] - 1) & v70;
      }
      v73 = (_QWORD *)*((_QWORD *)__p[0] + v72);
      if (!v73 || (v74 = (_QWORD *)*v73) == 0)
      {
LABEL_184:
        if (v71.u32[0] > 1uLL)
        {
          v4 = v262.i64[0] ^ (2 * v262.i64[1]);
          if ((void *)v70 >= __p[1])
            v4 = v70 % (unint64_t)__p[1];
        }
        else
        {
          v4 = ((unint64_t)__p[1] - 1) & v70;
        }
        v79 = (_QWORD *)*((_QWORD *)__p[0] + v4);
        if (v79)
        {
          v80 = (_QWORD *)*v79;
          if (v80)
          {
            if (v71.u32[0] < 2uLL)
            {
              while (1)
              {
                v84 = v80[1];
                if (v84 == v70)
                {
                  if (v80[2] == v262.i64[0] && v80[3] == v262.i64[1])
                    goto LABEL_283;
                }
                else if ((v84 & ((uint64_t)__p[1] - 1)) != v4)
                {
                  goto LABEL_209;
                }
                v80 = (_QWORD *)*v80;
                if (!v80)
                  goto LABEL_209;
              }
            }
            do
            {
              v82 = v80[1];
              if (v82 == v70)
              {
                if (v80[2] == v262.i64[0] && v80[3] == v262.i64[1])
                  goto LABEL_283;
              }
              else
              {
                if ((void *)v82 >= __p[1])
                  v82 %= (unint64_t)__p[1];
                if (v82 != v4)
                  break;
              }
              v80 = (_QWORD *)*v80;
            }
            while (v80);
          }
        }
LABEL_209:
        v85 = (int64x2_t *)operator new(0x28uLL);
        v85->i64[0] = 0;
        v85->i64[1] = v70;
        v85[1] = v273;
        v85[2].i64[0] = 1;
        v86 = (float)((unint64_t)v271[1] + 1);
        if (v7 && (float)(v272 * (float)v7) >= v86)
        {
          v87 = __p[0];
          v88 = (int64x2_t **)*((_QWORD *)__p[0] + v4);
          if (v88)
          {
LABEL_212:
            v85->i64[0] = (uint64_t)*v88;
            *v88 = v85;
            goto LABEL_281;
          }
LABEL_262:
          v85->i64[0] = (uint64_t)v271[0];
          v271[0] = v85;
          v87[v4] = v271;
          v107 = &v271[1];
          if (!v85->i64[0])
            goto LABEL_282;
          v110 = *(_QWORD *)(v85->i64[0] + 8);
          if ((v7 & (v7 - 1)) != 0)
          {
            if (v110 >= v7)
              v110 %= v7;
          }
          else
          {
            v110 &= v7 - 1;
          }
          *((_QWORD *)__p[0] + v110) = v85;
LABEL_281:
          v107 = &v271[1];
          goto LABEL_282;
        }
        v89 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v89 = 1;
        v90 = v89 | (2 * v7);
        v91 = vcvtps_u32_f32(v86 / v272);
        if (v90 <= v91)
          prime = v91;
        else
          prime = v90;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v7 = (unint64_t)__p[1];
        }
        if (prime <= v7)
        {
          if (prime >= v7)
            goto LABEL_260;
          v103 = vcvtps_u32_f32((float)(unint64_t)v271[1] / v272);
          if (v7 < 3 || (v104 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v104.i16[0] = vaddlv_u8(v104), v104.u32[0] > 1uLL))
          {
            v103 = std::__next_prime(v103);
          }
          else
          {
            v105 = 1 << -(char)__clz(v103 - 1);
            if (v103 >= 2)
              v103 = v105;
          }
          if (prime <= v103)
            prime = v103;
          if (prime >= v7)
          {
            v7 = (unint64_t)__p[1];
            v109 = (uint64_t)__p[1] - 1;
            if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
            {
LABEL_273:
              if (v70 >= v7)
              {
                v4 = v70 % v7;
                v87 = __p[0];
                v88 = (int64x2_t **)*((_QWORD *)__p[0] + v70 % v7);
                if (v88)
                  goto LABEL_212;
              }
              else
              {
                v4 = v262.i64[0] ^ (2 * v262.i64[1]);
                v87 = __p[0];
                v88 = (int64x2_t **)*((_QWORD *)__p[0] + v70);
                if (v88)
                  goto LABEL_212;
              }
              goto LABEL_262;
            }
LABEL_261:
            v4 = v109 & v70;
            v87 = __p[0];
            v88 = (int64x2_t **)*((_QWORD *)__p[0] + v4);
            if (v88)
              goto LABEL_212;
            goto LABEL_262;
          }
          if (!prime)
          {
            v108 = __p[0];
            __p[0] = 0;
            if (v108)
              operator delete(v108);
            v7 = 0;
            __p[1] = 0;
            v109 = -1;
            goto LABEL_261;
          }
        }
        if (prime >> 61)
          sub_1BE61F100();
        v93 = operator new(8 * prime);
        v94 = __p[0];
        __p[0] = v93;
        if (v94)
          operator delete(v94);
        v95 = 0;
        __p[1] = (void *)prime;
        do
          *((_QWORD *)__p[0] + v95++) = 0;
        while (prime != v95);
        v96 = (_QWORD **)v271[0];
        if (!v271[0])
        {
LABEL_272:
          v7 = prime;
          v109 = prime - 1;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_273;
          goto LABEL_261;
        }
        v97 = *((_QWORD *)v271[0] + 1);
        v98 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v99 = v97 & v98;
          *((_QWORD *)__p[0] + v99) = v271;
          for (i = *v96; *v96; i = *v96)
          {
            v101 = i[1] & v98;
            if (v101 == v99)
            {
              v96 = (_QWORD **)i;
            }
            else if (*((_QWORD *)__p[0] + v101))
            {
              *v96 = (_QWORD *)*i;
              v102 = 8 * v101;
              *i = **(_QWORD **)((char *)__p[0] + v102);
              **(_QWORD **)((char *)__p[0] + v102) = i;
            }
            else
            {
              *((_QWORD *)__p[0] + v101) = v96;
              v96 = (_QWORD **)i;
              v99 = v101;
            }
          }
          goto LABEL_272;
        }
        if (v97 < prime)
        {
          *((_QWORD *)__p[0] + v97) = v271;
          v106 = *v96;
          if (*v96)
            goto LABEL_267;
          goto LABEL_259;
        }
        v97 %= prime;
        *((_QWORD *)__p[0] + v97) = v271;
        v106 = *v96;
        if (!*v96)
        {
LABEL_259:
          v7 = prime;
LABEL_260:
          v109 = v7 - 1;
          if ((v7 & (v7 - 1)) != 0)
            goto LABEL_273;
          goto LABEL_261;
        }
        while (1)
        {
LABEL_267:
          v112 = v106[1];
          if (v112 >= prime)
            v112 %= prime;
          if (v112 == v97)
            goto LABEL_266;
          if (*((_QWORD *)__p[0] + v112))
          {
            *v96 = (_QWORD *)*v106;
            v111 = 8 * v112;
            *v106 = **(_QWORD **)((char *)__p[0] + v111);
            **(_QWORD **)((char *)__p[0] + v111) = v106;
            v106 = v96;
LABEL_266:
            v96 = (_QWORD **)v106;
            v106 = (_QWORD *)*v106;
            if (!v106)
              goto LABEL_272;
          }
          else
          {
            *((_QWORD *)__p[0] + v112) = v96;
            v96 = (_QWORD **)v106;
            v106 = (_QWORD *)*v106;
            v97 = v112;
            if (!v106)
              goto LABEL_272;
          }
        }
      }
      if (v71.u32[0] < 2uLL)
      {
        while (1)
        {
          v78 = v74[1];
          if (v78 == v70)
          {
            if (v74[2] == v262.i64[0] && v74[3] == v262.i64[1])
              goto LABEL_247;
          }
          else if ((v78 & ((uint64_t)__p[1] - 1)) != v72)
          {
            goto LABEL_184;
          }
          v74 = (_QWORD *)*v74;
          if (!v74)
            goto LABEL_184;
        }
      }
      while (1)
      {
        v76 = v74[1];
        if (v76 == v70)
          break;
        if ((void *)v76 >= __p[1])
          v76 %= (unint64_t)__p[1];
        if (v76 != v72)
          goto LABEL_184;
LABEL_171:
        v74 = (_QWORD *)*v74;
        if (!v74)
          goto LABEL_184;
      }
      if (v74[2] != v262.i64[0] || v74[3] != v262.i64[1])
        goto LABEL_171;
LABEL_247:
      v107 = (void **)(v74 + 4);
LABEL_282:
      *v107 = (char *)*v107 + 1;
LABEL_283:
      ++v67;
    }
    while (v67 != v68);
    v5 = (unint64_t)v271[0];
    if (v271[0])
    {
      while (1)
      {
        v113 = *(_QWORD *)(v5 + 16);
        v276 = v259;
        v114 = this[12];
        if (v114)
        {
          v115 = *(_QWORD *)(v5 + 24);
          v116 = v113 ^ (2 * v115);
          v117 = (uint8x8_t)vcnt_s8(v114);
          v117.i16[0] = vaddlv_u8(v117);
          if (v117.u32[0] > 1uLL)
          {
            v118 = v113 ^ (2 * v115);
            if (v116 >= *(_QWORD *)&v114)
              v118 = v116 % *(_QWORD *)&v114;
          }
          else
          {
            v118 = (*(_QWORD *)&v114 - 1) & v116;
          }
          v119 = *(_QWORD **)(*(_QWORD *)v69 + 8 * v118);
          if (v119)
          {
            v120 = (_QWORD *)*v119;
            if (v120)
            {
              if (v117.u32[0] < 2uLL)
              {
                v121 = *(_QWORD *)&v114 - 1;
                while (1)
                {
                  v125 = v120[1];
                  if (v125 == v116)
                  {
                    if (v120[2] == v113 && v120[3] == v115)
                      goto LABEL_373;
                  }
                  else if ((v125 & v121) != v118)
                  {
                    goto LABEL_311;
                  }
                  v120 = (_QWORD *)*v120;
                  if (!v120)
                    goto LABEL_311;
                }
              }
              do
              {
                v123 = v120[1];
                if (v123 == v116)
                {
                  if (v120[2] == v113 && v120[3] == v115)
                  {
LABEL_373:
                    sub_1BE7589BC((uint64_t)(v120 + 4), &v276, &v276);
                    goto LABEL_401;
                  }
                }
                else
                {
                  if (v123 >= *(_QWORD *)&v114)
                    v123 %= *(_QWORD *)&v114;
                  if (v123 != v118)
                    break;
                }
                v120 = (_QWORD *)*v120;
              }
              while (v120);
            }
          }
        }
LABEL_311:
        v273 = 0u;
        v274 = 0u;
        v275 = 1065353216;
        sub_1BE7589BC((uint64_t)&v273, &v276, &v276);
        v126 = *(_QWORD *)(v5 + 16);
        v127 = *(_QWORD *)(v5 + 24);
        v7 = v126 ^ (2 * v127);
        v128 = (unint64_t)this[12];
        if (v128)
        {
          v129 = (uint8x8_t)vcnt_s8((int8x8_t)v128);
          v129.i16[0] = vaddlv_u8(v129);
          if (v129.u32[0] > 1uLL)
          {
            v4 = v126 ^ (2 * v127);
            if (v7 >= v128)
              v4 = v7 % v128;
          }
          else
          {
            v4 = (v128 - 1) & v7;
          }
          v130 = *(_QWORD **)(*(_QWORD *)v69 + 8 * v4);
          if (v130)
          {
            v131 = (_QWORD *)*v130;
            if (v131)
            {
              if (v129.u32[0] < 2uLL)
              {
                while (1)
                {
                  v135 = v131[1];
                  if (v135 == v7)
                  {
                    if (v131[2] == v126 && v131[3] == v127)
                      goto LABEL_397;
                  }
                  else if ((v135 & (v128 - 1)) != v4)
                  {
                    goto LABEL_337;
                  }
                  v131 = (_QWORD *)*v131;
                  if (!v131)
                    goto LABEL_337;
                }
              }
              do
              {
                v133 = v131[1];
                if (v133 == v7)
                {
                  if (v131[2] == v126 && v131[3] == v127)
                    goto LABEL_397;
                }
                else
                {
                  if (v133 >= v128)
                    v133 %= v128;
                  if (v133 != v4)
                    break;
                }
                v131 = (_QWORD *)*v131;
              }
              while (v131);
            }
          }
        }
LABEL_337:
        v136 = (int8x8_t *)operator new(0x48uLL);
        v277 = v136;
        v278 = this + 13;
        v279 = 0;
        *v136 = 0;
        v136[1] = (int8x8_t)v7;
        v137 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)v136[4].i8 = 0u;
        v138 = (uint64_t)&v136[4];
        *(_OWORD *)v136[2].i8 = v137;
        *(_OWORD *)v136[6].i8 = 0u;
        v136[8].i32[0] = v275;
        v139 = v273.u64[1];
        if (v273.i64[1] == 1)
          break;
        if ((v273.i64[1] & (v273.i64[1] - 1)) != 0)
        {
          v139 = std::__next_prime(v273.u64[1]);
          v145 = v136[5];
          v146 = v139 >= *(_QWORD *)&v145;
          if (v139 > *(_QWORD *)&v145)
            goto LABEL_339;
        }
        else
        {
          v145 = 0;
          v146 = 1;
          if (v273.i64[1])
            goto LABEL_339;
        }
        if (!v146)
        {
          v151 = vcvtps_u32_f32((float)(unint64_t)v136[7] / *(float *)v136[8].i32);
          if (*(_QWORD *)&v145 < 3uLL
            || (v152 = (uint8x8_t)vcnt_s8(v145), v152.i16[0] = vaddlv_u8(v152), v152.u32[0] > 1uLL))
          {
            v151 = std::__next_prime(v151);
          }
          else
          {
            v153 = 1 << -(char)__clz(v151 - 1);
            if (v151 >= 2)
              v151 = v153;
          }
          if (v139 <= v151)
            v139 = v151;
          if (v139 < *(_QWORD *)&v145)
            goto LABEL_339;
        }
LABEL_340:
        for (j = (_QWORD *)v274; j; j = (_QWORD *)*j)
          sub_1BE7589BC(v138, j + 2, j + 2);
        v279 = 1;
        v141 = (float)(unint64_t)(*(_QWORD *)&this[14] + 1);
        v142 = *(float *)this[15].i32;
        v69 = this + 11;
        if (v128 && (float)(v142 * (float)v128) >= v141)
        {
          v143 = *(int8x8_t ***)(*(_QWORD *)v258 + 8 * v4);
          v144 = v277;
          if (!v143)
            goto LABEL_385;
        }
        else
        {
          v147 = (v128 & (v128 - 1)) != 0;
          if (v128 < 3)
            v147 = 1;
          v148 = v147 | (2 * v128);
          v149 = vcvtps_u32_f32(v141 / v142);
          if (v148 <= v149)
            v150 = v149;
          else
            v150 = v148;
          if (v150 == 1)
          {
            v150 = 2;
          }
          else if ((v150 & (v150 - 1)) != 0)
          {
            v150 = std::__next_prime(v150);
          }
          v154 = this[12];
          if (v150 > *(_QWORD *)&v154)
            goto LABEL_366;
          if (v150 < *(_QWORD *)&v154)
          {
            v155 = vcvtps_u32_f32((float)(unint64_t)this[14] / *(float *)this[15].i32);
            if (*(_QWORD *)&v154 < 3uLL
              || (v156 = (uint8x8_t)vcnt_s8(v154), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
            {
              v155 = std::__next_prime(v155);
            }
            else
            {
              v157 = 1 << -(char)__clz(v155 - 1);
              if (v155 >= 2)
                v155 = v157;
            }
            if (v150 <= v155)
              v150 = v155;
            if (v150 < *(_QWORD *)&v154)
LABEL_366:
              sub_1BE61F23C((uint64_t)v258, v150);
          }
          v128 = (unint64_t)this[12];
          v158 = v128 - 1;
          if ((v128 & (v128 - 1)) != 0)
          {
            if (v7 >= v128)
            {
              v4 = v7 % v128;
              v143 = *(int8x8_t ***)(*(_QWORD *)v258 + 8 * (v7 % v128));
              v144 = v277;
              if (!v143)
              {
LABEL_385:
                *v144 = *v260;
                *v260 = (int8x8_t)v277;
                *(_QWORD *)(*(_QWORD *)v258 + 8 * v4) = v260;
                if (*v277)
                {
                  v159 = *(_QWORD *)(*(_QWORD *)v277 + 8);
                  if ((v128 & (v128 - 1)) != 0)
                  {
                    if (v159 >= v128)
                      v159 %= v128;
                  }
                  else
                  {
                    v159 &= v128 - 1;
                  }
                  *(_QWORD *)(*(_QWORD *)v258 + 8 * v159) = v277;
                }
                goto LABEL_396;
              }
            }
            else
            {
              v4 = v7;
              v143 = *(int8x8_t ***)(*(_QWORD *)v258 + 8 * v7);
              v144 = v277;
              if (!v143)
                goto LABEL_385;
            }
          }
          else
          {
            v4 = v158 & v7;
            v143 = *(int8x8_t ***)(*(_QWORD *)v258 + 8 * (v158 & v7));
            v144 = v277;
            if (!v143)
              goto LABEL_385;
          }
        }
        *v144 = (int8x8_t)*v143;
        *v143 = v277;
LABEL_396:
        ++*(_QWORD *)&this[14];
LABEL_397:
        v160 = (unint64_t *)v274;
        if ((_QWORD)v274)
        {
          do
          {
            v4 = *v160;
            operator delete(v160);
            v160 = (unint64_t *)v4;
          }
          while (v4);
        }
        v161 = (void *)v273.i64[0];
        v273.i64[0] = 0;
        if (v161)
          operator delete(v161);
LABEL_401:
        sub_1BE81FD28((float *)v267, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), (_OWORD *)(v5 + 16));
        v5 = *(_QWORD *)v5;
        if (!v5)
          goto LABEL_402;
      }
      v139 = 2;
LABEL_339:
      sub_1BE61F23C(v138, v139);
      goto LABEL_340;
    }
LABEL_402:
    v4 = (unint64_t)this[18];
    k = a2;
    if (v4)
    {
      v162 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
      v162.i16[0] = vaddlv_u8(v162);
      if (v162.u32[0] > 1uLL)
      {
        v7 = v259;
        if (v4 <= v259)
          v7 = v259 % v4;
      }
      else
      {
        v7 = (v4 - 1) & v259;
      }
      v163 = *(_QWORD **)(*(_QWORD *)v254 + 8 * v7);
      if (v163)
      {
        v164 = (_QWORD *)*v163;
        if (v164)
        {
          if (v162.u32[0] < 2uLL)
          {
            while (1)
            {
              v166 = v164[1];
              if (v166 == v259)
              {
                if (v164[2] == v259)
                  goto LABEL_461;
              }
              else if ((v166 & (v4 - 1)) != v7)
              {
                goto LABEL_422;
              }
              v164 = (_QWORD *)*v164;
              if (!v164)
                goto LABEL_422;
            }
          }
          do
          {
            v165 = v164[1];
            if (v165 == v259)
            {
              if (v164[2] == v259)
                goto LABEL_461;
            }
            else
            {
              if (v165 >= v4)
                v165 %= v4;
              if (v165 != v7)
                break;
            }
            v164 = (_QWORD *)*v164;
          }
          while (v164);
        }
      }
    }
LABEL_422:
    v167 = operator new(0x40uLL);
    v273.i64[0] = (uint64_t)v167;
    v273.i64[1] = (uint64_t)&this[19];
    LOBYTE(v274) = 0;
    *v167 = 0;
    v167[1] = v259;
    v167[2] = v259;
    sub_1BE81F910((uint64_t)(v167 + 3), (uint64_t)__p);
    LOBYTE(v274) = 1;
    v168 = (float)(unint64_t)(*(_QWORD *)&this[20] + 1);
    v169 = *(float *)this[21].i32;
    if (v4 && (float)(v169 * (float)v4) >= v168)
    {
      v170 = *(int8x8_t **)(*(_QWORD *)v254 + 8 * v7);
      v171 = (int8x8_t *)v273.i64[0];
      if (v170)
        goto LABEL_425;
LABEL_449:
      *v171 = *v255;
      *v255 = *(int8x8_t *)v273.i8;
      *(_QWORD *)(*(_QWORD *)v254 + 8 * v7) = v255;
      if (*(_QWORD *)v273.i64[0])
      {
        v180 = *(_QWORD *)(*(_QWORD *)v273.i64[0] + 8);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v180 >= v4)
            v180 %= v4;
        }
        else
        {
          v180 &= v4 - 1;
        }
        *(_QWORD *)(*(_QWORD *)v254 + 8 * v180) = v273.i64[0];
      }
    }
    else
    {
      v172 = (v4 & (v4 - 1)) != 0;
      if (v4 < 3)
        v172 = 1;
      v173 = v172 | (2 * v4);
      v174 = vcvtps_u32_f32(v168 / v169);
      if (v173 <= v174)
        v5 = v174;
      else
        v5 = v173;
      if (v5 == 1)
      {
        v5 = 2;
      }
      else if ((v5 & (v5 - 1)) != 0)
      {
        v5 = std::__next_prime(v5);
      }
      v175 = this[18];
      if (v5 > *(_QWORD *)&v175)
        goto LABEL_436;
      if (v5 < *(_QWORD *)&v175)
      {
        v176 = vcvtps_u32_f32((float)(unint64_t)this[20] / *(float *)this[21].i32);
        if (*(_QWORD *)&v175 < 3uLL
          || (v177 = (uint8x8_t)vcnt_s8(v175), v177.i16[0] = vaddlv_u8(v177), v177.u32[0] > 1uLL))
        {
          v176 = std::__next_prime(v176);
        }
        else
        {
          v178 = 1 << -(char)__clz(v176 - 1);
          if (v176 >= 2)
            v176 = v178;
        }
        if (v5 <= v176)
          v5 = v176;
        if (v5 < *(_QWORD *)&v175)
LABEL_436:
          sub_1BE61F23C((uint64_t)v254, v5);
      }
      v4 = (unint64_t)this[18];
      v179 = v4 - 1;
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v4 <= v259)
        {
          v7 = v259 % v4;
          v170 = *(int8x8_t **)(*(_QWORD *)v254 + 8 * (v259 % v4));
          v171 = (int8x8_t *)v273.i64[0];
          if (!v170)
            goto LABEL_449;
        }
        else
        {
          v7 = v259;
          v170 = *(int8x8_t **)(*(_QWORD *)v254 + 8 * v259);
          v171 = (int8x8_t *)v273.i64[0];
          if (!v170)
            goto LABEL_449;
        }
      }
      else
      {
        v7 = v179 & v259;
        v170 = *(int8x8_t **)(*(_QWORD *)v254 + 8 * (v179 & v259));
        v171 = (int8x8_t *)v273.i64[0];
        if (!v170)
          goto LABEL_449;
      }
LABEL_425:
      *v171 = *v170;
      *v170 = *(int8x8_t *)v273.i8;
    }
    ++*(_QWORD *)&this[20];
LABEL_461:
    v181 = (unint64_t *)v271[0];
    if (v271[0])
    {
      do
      {
        v4 = *v181;
        operator delete(v181);
        v181 = (unint64_t *)v4;
      }
      while (v4);
    }
    v182 = __p[0];
    __p[0] = 0;
    if (v182)
      operator delete(v182);
    sub_1BE7589BC((uint64_t)v264, &v263, &v263);
    v66 = (_QWORD *)*v256;
  }
  while (*v256);
LABEL_466:
  v183 = v268[0];
  if (v268[0])
  {
    v184 = this + 11;
    v185 = this + 13;
    do
    {
      v186 = v183[2];
      v187 = v183[3];
      v188 = v186 ^ (2 * v187);
      v189 = (unint64_t)this[12];
      if (v189)
      {
        v190 = (uint8x8_t)vcnt_s8((int8x8_t)v189);
        v190.i16[0] = vaddlv_u8(v190);
        if (v190.u32[0] > 1uLL)
        {
          v5 = v186 ^ (2 * v187);
          if (v188 >= v189)
            v5 = v188 % v189;
        }
        else
        {
          v5 = (v189 - 1) & v188;
        }
        v191 = *(void ***)(*(_QWORD *)v184 + 8 * v5);
        if (v191)
        {
          v192 = (int8x8_t *)*v191;
          if (*v191)
          {
            if (v190.u32[0] < 2uLL)
            {
              while (1)
              {
                v196 = v192[1];
                if (*(_QWORD *)&v196 == v188)
                {
                  if (*(_QWORD *)&v192[2] == v186 && *(_QWORD *)&v192[3] == v187)
                    goto LABEL_535;
                }
                else if ((*(_QWORD *)&v196 & (v189 - 1)) != v5)
                {
                  goto LABEL_495;
                }
                v192 = (int8x8_t *)*v192;
                if (!v192)
                  goto LABEL_495;
              }
            }
            do
            {
              v194 = (unint64_t)v192[1];
              if (v194 == v188)
              {
                if (*(_QWORD *)&v192[2] == v186 && *(_QWORD *)&v192[3] == v187)
                  goto LABEL_535;
              }
              else
              {
                if (v194 >= v189)
                  v194 %= v189;
                if (v194 != v5)
                  break;
              }
              v192 = (int8x8_t *)*v192;
            }
            while (v192);
          }
        }
      }
LABEL_495:
      v192 = (int8x8_t *)operator new(0x48uLL);
      v273.i64[0] = (uint64_t)v192;
      v273.i64[1] = (uint64_t)&this[13];
      *v192 = 0;
      v192[1] = (int8x8_t)v188;
      v197 = *((_OWORD *)v183 + 1);
      *(_OWORD *)v192[4].i8 = 0u;
      *(_OWORD *)v192[6].i8 = 0u;
      *(_OWORD *)v192[2].i8 = v197;
      v192[8].i32[0] = 1065353216;
      LOBYTE(v274) = 1;
      v198 = (float)(unint64_t)(*(_QWORD *)&this[14] + 1);
      v199 = *(float *)this[15].i32;
      if (v189 && (float)(v199 * (float)v189) >= v198)
      {
        v200 = *v184;
        v201 = *(int8x8_t ***)(*(_QWORD *)v184 + 8 * v5);
        if (v201)
          goto LABEL_498;
      }
      else
      {
        v202 = (v189 & (v189 - 1)) != 0;
        if (v189 < 3)
          v202 = 1;
        v203 = v202 | (2 * v189);
        v204 = vcvtps_u32_f32(v198 / v199);
        if (v203 <= v204)
          v205 = v204;
        else
          v205 = v203;
        if (v205 == 1)
        {
          v205 = 2;
        }
        else if ((v205 & (v205 - 1)) != 0)
        {
          v205 = std::__next_prime(v205);
          v189 = (unint64_t)this[12];
        }
        if (v205 > v189)
          goto LABEL_509;
        if (v205 < v189)
        {
          v206 = vcvtps_u32_f32((float)(unint64_t)this[14] / *(float *)this[15].i32);
          if (v189 < 3
            || (v207 = (uint8x8_t)vcnt_s8((int8x8_t)v189), v207.i16[0] = vaddlv_u8(v207), v207.u32[0] > 1uLL))
          {
            v206 = std::__next_prime(v206);
          }
          else
          {
            v208 = 1 << -(char)__clz(v206 - 1);
            if (v206 >= 2)
              v206 = v208;
          }
          if (v205 <= v206)
            v205 = v206;
          if (v205 < v189)
LABEL_509:
            sub_1BE61F23C((uint64_t)&this[11], v205);
        }
        v189 = (unint64_t)this[12];
        v209 = v189 - 1;
        if ((v189 & (v189 - 1)) != 0)
        {
          if (v188 >= v189)
          {
            v5 = v188 % v189;
            v200 = *v184;
            v201 = *(int8x8_t ***)(*(_QWORD *)v184 + 8 * (v188 % v189));
            if (v201)
            {
LABEL_498:
              *v192 = (int8x8_t)*v201;
              goto LABEL_533;
            }
          }
          else
          {
            v5 = v188;
            v200 = *v184;
            v201 = *(int8x8_t ***)(*(_QWORD *)v184 + 8 * v188);
            if (v201)
              goto LABEL_498;
          }
        }
        else
        {
          v5 = v209 & v188;
          v200 = *v184;
          v201 = *(int8x8_t ***)(*(_QWORD *)v184 + 8 * (v209 & v188));
          if (v201)
            goto LABEL_498;
        }
      }
      *v192 = *v185;
      *v185 = (int8x8_t)v192;
      *(_QWORD *)(*(_QWORD *)&v200 + 8 * v5) = v185;
      if (!*(_QWORD *)v192)
        goto LABEL_534;
      v210 = *(_QWORD *)(*(_QWORD *)v192 + 8);
      if ((v189 & (v189 - 1)) != 0)
      {
        if (v210 >= v189)
          v210 %= v189;
      }
      else
      {
        v210 &= v189 - 1;
      }
      v201 = (int8x8_t **)(*(_QWORD *)v184 + 8 * v210);
LABEL_533:
      *v201 = v192;
LABEL_534:
      ++*(_QWORD *)&this[14];
LABEL_535:
      v211 = (_QWORD *)v192[6];
      for (k = a2; v211; v211 = (_QWORD *)*v211)
      {
        v212 = v211[2];
        v273.i64[0] = v212;
        v213 = (int8x8_t)a2[1];
        if (v213)
        {
          v214 = (uint8x8_t)vcnt_s8(v213);
          v214.i16[0] = vaddlv_u8(v214);
          if (v214.u32[0] > 1uLL)
          {
            v215 = v212;
            if (v212 >= *(_QWORD *)&v213)
              v215 = v212 % *(_QWORD *)&v213;
          }
          else
          {
            v215 = (*(_QWORD *)&v213 - 1) & v212;
          }
          v216 = *(_QWORD **)(*a2 + 8 * v215);
          if (v216)
          {
            v217 = (_QWORD *)*v216;
            if (v217)
            {
              if (v214.u32[0] < 2uLL)
              {
                v218 = *(_QWORD *)&v213 - 1;
                while (1)
                {
                  v220 = v217[1];
                  if (v212 == v220)
                  {
                    if (v217[2] == v212)
                      goto LABEL_557;
                  }
                  else if ((v220 & v218) != v215)
                  {
                    goto LABEL_556;
                  }
                  v217 = (_QWORD *)*v217;
                  if (!v217)
                    goto LABEL_556;
                }
              }
              do
              {
                v219 = v217[1];
                if (v212 == v219)
                {
                  if (v217[2] == v212)
                    goto LABEL_557;
                }
                else
                {
                  if (v219 >= *(_QWORD *)&v213)
                    v219 %= *(_QWORD *)&v213;
                  if (v219 != v215)
                    break;
                }
                v217 = (_QWORD *)*v217;
              }
              while (v217);
            }
          }
        }
LABEL_556:
        sub_1BE7589BC((uint64_t)v264, (unint64_t *)&v273, &v273);
LABEL_557:
        ;
      }
      v183 = (_QWORD *)*v183;
    }
    while (v183);
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v221 = (void **)v265[0];
  if (v265[0])
  {
    do
    {
      __p[0] = v221[2];
      isHighDensityItem = CHCanvasHeatmap::_isHighDensityItem(this, (unint64_t)__p[0]);
      v223 = this[7];
      if (v223)
      {
        v224 = (uint8x8_t)vcnt_s8(v223);
        v224.i16[0] = vaddlv_u8(v224);
        if (v224.u32[0] > 1uLL)
        {
          v225 = (unint64_t)__p[0];
          if (__p[0] >= (void *)*(_QWORD *)&v223)
            v225 = (unint64_t)__p[0] % *(_QWORD *)&v223;
        }
        else
        {
          v225 = (*(_QWORD *)&v223 - 1) & (uint64_t)__p[0];
        }
        v226 = *(uint64_t ****)(*(_QWORD *)&this[6] + 8 * v225);
        if (v226)
        {
          v227 = *v226;
          if (*v226)
          {
            if (v224.u32[0] < 2uLL)
            {
              v228 = *(_QWORD *)&v223 - 1;
              while (1)
              {
                v230 = (unint64_t)v227[1];
                if ((void *)v230 == __p[0])
                {
                  if (v227[2] == __p[0])
                    goto LABEL_605;
                }
                else if ((v230 & v228) != v225)
                {
                  goto LABEL_583;
                }
                v227 = (uint64_t **)*v227;
                if (!v227)
                  goto LABEL_583;
              }
            }
            do
            {
              v229 = (unint64_t)v227[1];
              if ((void *)v229 == __p[0])
              {
                if (v227[2] == __p[0])
                {
LABEL_605:
                  if (!isHighDensityItem)
                  {
                    sub_1BE8204D8((uint64_t)&v273, &this[6], v227);
                    if (v273.i64[0])
                      operator delete((void *)v273.i64[0]);
                    v239 = (int8x8_t)k[1];
                    if (v239)
                    {
                      v240 = (uint8x8_t)vcnt_s8(v239);
                      v240.i16[0] = vaddlv_u8(v240);
                      if (v240.u32[0] > 1uLL)
                      {
                        v241 = (unint64_t)__p[0];
                        if (__p[0] >= (void *)*(_QWORD *)&v239)
                          v241 = (unint64_t)__p[0] % *(_QWORD *)&v239;
                      }
                      else
                      {
                        v241 = (*(_QWORD *)&v239 - 1) & (uint64_t)__p[0];
                      }
                      v242 = *(uint64_t ****)(*k + 8 * v241);
                      if (v242)
                      {
                        v243 = *v242;
                        if (v243)
                        {
                          if (v240.u32[0] < 2uLL)
                          {
                            v244 = *(_QWORD *)&v239 - 1;
                            while (1)
                            {
                              v246 = (unint64_t)v243[1];
                              if (__p[0] == (void *)v246)
                              {
                                if (v243[2] == __p[0])
                                  goto LABEL_562;
                              }
                              else if ((v246 & v244) != v241)
                              {
                                goto LABEL_561;
                              }
                              v243 = (uint64_t **)*v243;
                              if (!v243)
                                goto LABEL_561;
                            }
                          }
                          do
                          {
                            v245 = (unint64_t)v243[1];
                            if (__p[0] == (void *)v245)
                            {
                              if (v243[2] == __p[0])
                                goto LABEL_562;
                            }
                            else
                            {
                              if (v245 >= *(_QWORD *)&v239)
                                v245 %= *(_QWORD *)&v239;
                              if (v245 != v241)
                                break;
                            }
                            v243 = (uint64_t **)*v243;
                          }
                          while (v243);
                        }
                      }
                    }
LABEL_561:
                    sub_1BE7589BC(a4, (unint64_t *)__p, __p);
                  }
                  goto LABEL_562;
                }
              }
              else
              {
                if (v229 >= *(_QWORD *)&v223)
                  v229 %= *(_QWORD *)&v223;
                if (v229 != v225)
                  break;
              }
              v227 = (uint64_t **)*v227;
            }
            while (v227);
          }
        }
      }
LABEL_583:
      if (isHighDensityItem)
      {
        sub_1BE7589BC((uint64_t)&this[6], (unint64_t *)__p, __p);
        v231 = (int8x8_t)k[1];
        if (v231)
        {
          v232 = (uint8x8_t)vcnt_s8(v231);
          v232.i16[0] = vaddlv_u8(v232);
          if (v232.u32[0] > 1uLL)
          {
            v233 = (unint64_t)__p[0];
            if (__p[0] >= (void *)*(_QWORD *)&v231)
              v233 = (unint64_t)__p[0] % *(_QWORD *)&v231;
          }
          else
          {
            v233 = (*(_QWORD *)&v231 - 1) & (uint64_t)__p[0];
          }
          v234 = *(uint64_t ****)(*k + 8 * v233);
          if (v234)
          {
            v235 = *v234;
            if (v235)
            {
              if (v232.u32[0] < 2uLL)
              {
                v236 = *(_QWORD *)&v231 - 1;
                while (1)
                {
                  v238 = (unint64_t)v235[1];
                  if (__p[0] == (void *)v238)
                  {
                    if (v235[2] == __p[0])
                      goto LABEL_562;
                  }
                  else if ((v238 & v236) != v233)
                  {
                    goto LABEL_561;
                  }
                  v235 = (uint64_t **)*v235;
                  if (!v235)
                    goto LABEL_561;
                }
              }
              while (1)
              {
                v237 = (unint64_t)v235[1];
                if (__p[0] == (void *)v237)
                {
                  if (v235[2] == __p[0])
                    goto LABEL_562;
                }
                else
                {
                  if (v237 >= *(_QWORD *)&v231)
                    v237 %= *(_QWORD *)&v231;
                  if (v237 != v233)
                    goto LABEL_561;
                }
                v235 = (uint64_t **)*v235;
                if (!v235)
                  goto LABEL_561;
              }
            }
          }
        }
        goto LABEL_561;
      }
LABEL_562:
      v221 = (void **)*v221;
    }
    while (v221);
    v247 = v265[0];
    if (v265[0])
    {
      do
      {
        v248 = (_QWORD *)*v247;
        operator delete(v247);
        v247 = v248;
      }
      while (v248);
    }
  }
  v249 = v264[0];
  v264[0] = 0;
  if (v249)
    operator delete(v249);
  v250 = v268[0];
  if (v268[0])
  {
    do
    {
      v251 = (_QWORD *)*v250;
      operator delete(v250);
      v250 = v251;
    }
    while (v251);
  }
  v252 = v267[0];
  v267[0] = 0;
  if (v252)
    operator delete(v252);
}

void sub_1BE81E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_1BE81F8A4(v35 - 176);
  sub_1BE65DB88((uint64_t)&a35);
  sub_1BE65DB88((uint64_t)&a23);
  sub_1BE65DB88((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL CHCanvasHeatmap::isHighDensityItemID(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = this[7];
  if (!*(_QWORD *)&v2)
  {
    v5 = 0;
    return v5 != 0;
  }
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*(_QWORD *)&this[6] + 8 * v4);
  if (!v5)
    return v5 != 0;
  v5 = (_QWORD *)*v5;
  if (!v5)
    return v5 != 0;
  if (v3.u32[0] >= 2uLL)
  {
    do
    {
      v8 = v5[1];
      if (v8 == a2)
      {
        if (v5[2] == a2)
          return v5 != 0;
      }
      else
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
        if (v8 != v4)
          return 0;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    return v5 != 0;
  }
  v7 = *(_QWORD *)&v2 - 1;
  while (1)
  {
    v9 = v5[1];
    if (v9 == a2)
    {
      if (v5[2] == a2)
        return v5 != 0;
      goto LABEL_20;
    }
    if ((v9 & v7) != v4)
      return 0;
LABEL_20:
    v5 = (_QWORD *)*v5;
    if (!v5)
      return v5 != 0;
  }
}

uint64_t CHCanvasHeatmap::computeMinMaxGridCoordinates(uint64_t this, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unint64_t *a6)
{
  _QWORD *i;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a6 = 0;
  *a2 = 0x7FFFFFFFLL;
  *a4 = 0x7FFFFFFFLL;
  *a3 = 0;
  *a5 = 0;
  for (i = *(_QWORD **)(this + 24); i; i = (_QWORD *)*i)
  {
    v7 = *a6;
    if (*a6 <= i[4])
      v7 = i[4];
    *a6 = v7;
    v8 = i[2];
    if (v8 >= *a2)
      v8 = *a2;
    *a2 = v8;
    v9 = i[3];
    if (v9 >= *a4)
      v9 = *a4;
    *a4 = v9;
    v10 = *a3;
    if (*a3 <= i[2])
      v10 = i[2];
    *a3 = v10;
    v11 = *a5;
    if (*a5 <= i[3])
      v11 = i[3];
    *a5 = v11;
  }
  return this;
}

BOOL sub_1BE81E420(unint64_t *a1, _QWORD *a2, CGRect *a3, int a4)
{
  double v5;
  double v6;
  double v7;
  CGRect v9;
  CGRect v10;
  CGRect v11;

  v5 = (double)(uint64_t)(*a1 * *a2);
  v6 = (double)(uint64_t)(*a1 * a2[1]);
  v7 = (double)*a1;
  v9.origin.x = v5;
  v9.origin.y = v6;
  v9.size.width = v7;
  v9.size.height = v7;
  v10 = CGRectIntersection(v9, *a3);
  if (!a4)
    return !CGRectEqualToRect(v10, *MEMORY[0x1E0C9D648]);
  v11.origin.x = v5;
  v11.origin.y = v6;
  v11.size.width = v7;
  v11.size.height = v7;
  return CGRectEqualToRect(v10, v11);
}

unint64_t *CHCanvasHeatmap::itemIDsInCellsIntersectingRectangleRegion@<X0>(unint64_t *this@<X0>, CGRect *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  unint64_t *v8;
  _QWORD *i;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v5 = (_QWORD *)this[13];
  if (v5)
  {
    v8 = this;
    do
    {
      this = (unint64_t *)sub_1BE81E420(v8, v5 + 2, a2, a3);
      if ((_DWORD)this)
      {
        for (i = (_QWORD *)v5[6]; i; i = (_QWORD *)*i)
          this = sub_1BE7589BC(a4, i + 2, i + 2);
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return this;
}

void sub_1BE81E55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81E570(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81E584(void **__p)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[6];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = __p[4];
    __p[4] = 0;
    if (v5)
      operator delete(v5);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_1BE81E5EC(void **__p)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[5];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = __p[3];
    __p[3] = 0;
    if (v5)
      operator delete(v5);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

uint64_t sub_1BE81E654(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[4];
      v2[4] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1BE81E6C0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1BE61F23C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1BE7589BC(a1, i + 2, i + 2);
  return a1;
}

void sub_1BE81E7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81E7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81E800(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v8[4] = a2[4];
      v9 = (uint64_t *)*v8;
      sub_1BE81E93C((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x28uLL);
      *(_QWORD *)v10 = 0;
      v11 = a2[4];
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 4) = v11;
      *((_QWORD *)v10 + 1) = *((_QWORD *)v10 + 2) ^ (2 * *((_QWORD *)v10 + 3));
      sub_1BE81E93C((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1BE81E8F4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BE81E914(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE81E928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81E93C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  size_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *i;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  void *v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  BOOL v56;
  char v57;
  uint64_t v58;
  unint64_t v59;

  v4 = a2[2] ^ (2 * a2[3]);
  a2[1] = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_88;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_88;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v48 = std::__next_prime(v26);
      if (*(_QWORD *)&prime <= v48)
        prime = (int8x8_t)v48;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_41:
        v5 = *(_QWORD *)(a1 + 8);
        v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v29.i16[0] = vaddlv_u8(v29);
        v30 = v29.u32[0];
        if (v29.u32[0] >= 2uLL)
          goto LABEL_47;
        goto LABEL_89;
      }
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_41;
    }
    if (!*(_QWORD *)&prime)
    {
      v49 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v49)
        operator delete(v49);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v50 = (uint8x8_t)vcnt_s8(0);
      v50.i16[0] = vaddlv_u8(v50);
      v30 = v50.u32[0];
      if (v50.u32[0] >= 2uLL)
        goto LABEL_47;
      goto LABEL_89;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_1BE61F100();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(_QWORD **)(a1 + 16);
  if (v15)
  {
    v17 = v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_46;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
              if (!v22)
                break;
            }
            while (v20[2] == v22[2] && v20[3] == v22[3]);
            *v15 = v22;
            v25 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v25);
            **(_QWORD **)(*(_QWORD *)a1 + v25) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = v20;
            v19 = v21;
          }
        }
        v20 = (_QWORD *)*v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_88:
      v51 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v51.i16[0] = vaddlv_u8(v51);
      v30 = v51.u32[0];
      if (v51.u32[0] >= 2uLL)
        goto LABEL_47;
      goto LABEL_89;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = (_QWORD *)*v15; *v15; i = (_QWORD *)*v15)
    {
      v42 = i[1];
      if (v42 >= *(_QWORD *)&prime)
        v42 %= *(_QWORD *)&prime;
      if (v42 == v17)
      {
        v15 = i;
      }
      else
      {
        v43 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          do
          {
            v44 = v43;
            v43 = (_QWORD *)*v43;
            if (!v43)
              break;
          }
          while (i[2] == v43[2] && i[3] == v43[3]);
          *v15 = v43;
          v46 = 8 * v42;
          *v44 = **(_QWORD **)(*(_QWORD *)a1 + v46);
          **(_QWORD **)(*(_QWORD *)a1 + v46) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v15;
          v15 = i;
          v17 = v42;
        }
      }
    }
  }
LABEL_46:
  v5 = (unint64_t)prime;
  v32 = (uint8x8_t)vcnt_s8(prime);
  v32.i16[0] = vaddlv_u8(v32);
  v30 = v32.u32[0];
  if (v32.u32[0] >= 2uLL)
  {
LABEL_47:
    v33 = v4;
    if (v5 <= v4)
      v33 = v4 % v5;
    v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
    if (!v34)
    {
      v39 = 0;
      v47 = a2[1];
      goto LABEL_103;
    }
    v35 = 0;
    while (1)
    {
      v39 = v34;
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_102;
      v40 = v34[1];
      v41 = v40;
      if (v40 >= v5)
        v41 = v40 % v5;
      if (v41 != v33)
        goto LABEL_102;
      if (v40 == v4)
      {
        v37 = v34[2] == a2[2] && v34[3] == a2[3];
        v38 = v35 & !v37;
        v35 |= v37;
        if (v38 == 1)
          goto LABEL_102;
      }
      else if ((v35 & 1) == 1)
      {
        goto LABEL_102;
      }
    }
  }
LABEL_89:
  v52 = (v5 - 1) & v4;
  v53 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v52);
  if (!v53)
  {
    v39 = 0;
    v47 = a2[1];
LABEL_114:
    v47 &= v5 - 1;
    if (v39)
      goto LABEL_106;
LABEL_115:
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = a1 + 16;
    if (!*a2)
      goto LABEL_121;
    v59 = *(_QWORD *)(*a2 + 8);
    if (v30 > 1)
    {
      if (v59 >= v5)
        v59 %= v5;
    }
    else
    {
      v59 &= v5 - 1;
    }
LABEL_120:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v59) = a2;
    goto LABEL_121;
  }
  v54 = 0;
  while (1)
  {
    v39 = v53;
    v53 = (_QWORD *)*v53;
    if (!v53)
      break;
    v58 = v53[1];
    if ((v58 & (v5 - 1)) != v52)
      break;
    if (v58 == v4)
    {
      v56 = v53[2] == a2[2] && v53[3] == a2[3];
      v57 = v54 & !v56;
      v54 |= v56;
      if ((v57 & 1) != 0)
        break;
    }
    else if ((v54 & 1) != 0)
    {
      break;
    }
  }
LABEL_102:
  v47 = a2[1];
  if (v30 <= 1)
    goto LABEL_114;
LABEL_103:
  if (v47 >= v5)
    v47 %= v5;
  if (!v39)
    goto LABEL_115;
LABEL_106:
  *a2 = *v39;
  *v39 = a2;
  if (*a2)
  {
    v59 = *(_QWORD *)(*a2 + 8);
    if (v30 > 1)
    {
      if (v59 >= v5)
        v59 %= v5;
    }
    else
    {
      v59 &= v5 - 1;
    }
    if (v59 != v47)
      goto LABEL_120;
  }
LABEL_121:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE81EEB0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      v9 = (_QWORD *)*v8;
      sub_1BE81EFD0((uint64_t)a1, v8);
      a2 = (_QWORD *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x18uLL);
      *v10 = 0;
      v11 = a2[2];
      v10[1] = v11;
      v10[2] = v11;
      sub_1BE81EFD0((uint64_t)a1, v10);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_1BE81EF88(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BE81EFA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE81EFBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81EFD0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *i;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned __int8 v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = a2[2];
  a2[1] = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_1BE61F100();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(_QWORD **)(a1 + 16);
  if (v15)
  {
    v17 = v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22 && v20[2] == v22[2]);
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = v20;
            v19 = v21;
          }
        }
        v20 = (_QWORD *)*v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = (_QWORD *)*v15; *v15; i = (_QWORD *)*v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (_QWORD *)*v41;
          }
          while (v41 && i[2] == v41[2]);
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = a2[1];
      goto LABEL_85;
    }
    v34 = 0;
    v35 = a2[2];
    while (1)
    {
      v37 = v33;
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (v33[2] != v35);
        v34 |= v33[2] == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = a2[1];
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = a2[2];
  while (1)
  {
    v37 = v50;
    v50 = (_QWORD *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (v50[2] != v52);
      v51 |= v50[2] == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = a2[1];
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *a2 = *v37;
  *v37 = a2;
  if (*a2)
  {
    v55 = *(_QWORD *)(*a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE81F530(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 16) = *((_DWORD *)a2 + 16);
        sub_1BE81EEB0(v8 + 4, (_QWORD *)a2[6], 0);
      }
      v9 = (uint64_t *)*v8;
      sub_1BE81E93C((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      v12 = (_QWORD *)v8[6];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v8[4];
      v8[4] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      v10 = operator new(0x48uLL);
      *v10 = 0;
      v10[1] = 0;
      *((_OWORD *)v10 + 1) = *((_OWORD *)a2 + 1);
      sub_1BE81E6C0((uint64_t)(v10 + 4), (uint64_t)(a2 + 4));
      v10[1] = v10[2] ^ (2 * v10[3]);
      sub_1BE81E93C((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1BE81F670(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_1BE81E584(v1);
  __cxa_rethrow();
}

void sub_1BE81F688(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE81F69C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81F6B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v4 = (_QWORD *)v1[6];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
    operator delete(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81F6EC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 14) = *((_DWORD *)a2 + 14);
        sub_1BE81E800(v8 + 3, (uint64_t *)a2[5], 0);
      }
      v9 = (uint64_t *)*v8;
      sub_1BE81EFD0((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      v12 = (_QWORD *)v8[5];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v8[3];
      v8[3] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      v10 = operator new(0x40uLL);
      *v10 = 0;
      v10[1] = 0;
      v10[2] = a2[2];
      sub_1BE81F910((uint64_t)(v10 + 3), (uint64_t)(a2 + 3));
      v10[1] = v10[2];
      sub_1BE81EFD0((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1BE81F828(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_1BE81E5EC(v1);
  __cxa_rethrow();
}

void sub_1BE81F840(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE81F854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81F868(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v4 = (_QWORD *)v1[5];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
    operator delete(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE81F8A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1BE81F910(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1BE61F23C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(_QWORD **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v13 = v10[2];
      v14 = v10[3];
      v15 = v13 ^ (2 * v14);
      if (v12)
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          prime = v13 ^ (2 * v14);
          if (v15 >= v12)
            prime = v15 % v12;
        }
        else
        {
          prime = (v12 - 1) & v15;
        }
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v17)
        {
          v18 = (_QWORD *)*v17;
          if (v18)
          {
            if (v16.u32[0] < 2uLL)
            {
              while (1)
              {
                v22 = v18[1];
                if (v22 == v15)
                {
                  if (v18[2] == v13 && v18[3] == v14)
                    goto LABEL_85;
                }
                else if ((v22 & (v12 - 1)) != prime)
                {
                  goto LABEL_46;
                }
                v18 = (_QWORD *)*v18;
                if (!v18)
                  goto LABEL_46;
              }
            }
            do
            {
              v20 = v18[1];
              if (v20 == v15)
              {
                if (v18[2] == v13 && v18[3] == v14)
                  goto LABEL_85;
              }
              else
              {
                if (v20 >= v12)
                  v20 %= v12;
                if (v20 != prime)
                  break;
              }
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
      }
LABEL_46:
      v23 = operator new(0x28uLL);
      *v23 = 0;
      v23[1] = v15;
      v24 = *((_OWORD *)v10 + 1);
      v23[4] = v10[4];
      *((_OWORD *)v23 + 1) = v24;
      v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v26 = *(float *)(a1 + 32);
      if (v12 && (float)(v26 * (float)v12) >= v25)
        goto LABEL_74;
      v27 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3)
        v27 = 1;
      v28 = v27 | (2 * v12);
      v29 = vcvtps_u32_f32(v25 / v26);
      if (v28 <= v29)
        v30 = v29;
      else
        v30 = v28;
      if (v30 == 1)
      {
        v30 = 2;
      }
      else if ((v30 & (v30 - 1)) != 0)
      {
        v30 = std::__next_prime(v30);
        v12 = *(_QWORD *)(a1 + 8);
      }
      if (v30 > v12)
        goto LABEL_58;
      if (v30 < v12)
      {
        v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v12 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          v31 = std::__next_prime(v31);
        }
        else
        {
          v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2)
            v31 = v33;
        }
        if (v30 <= v31)
          v30 = v31;
        if (v30 < v12)
LABEL_58:
          sub_1BE61F23C(a1, v30);
      }
      v12 = *(_QWORD *)(a1 + 8);
      v34 = v12 - 1;
      if ((v12 & (v12 - 1)) == 0)
      {
        prime = v34 & v15;
        v35 = *(_QWORD *)a1;
        v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v34 & v15));
        if (v36)
          goto LABEL_75;
        goto LABEL_77;
      }
      if (v15 < v12)
        break;
      prime = v15 % v12;
      v35 = *(_QWORD *)a1;
      v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v15 % v12));
      if (v36)
      {
LABEL_75:
        *v23 = *v36;
        goto LABEL_83;
      }
LABEL_77:
      *v23 = *v11;
      *v11 = v23;
      *(_QWORD *)(v35 + 8 * prime) = v11;
      if (!*v23)
        goto LABEL_84;
      v37 = *(_QWORD *)(*v23 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v37 >= v12)
          v37 %= v12;
      }
      else
      {
        v37 &= v12 - 1;
      }
      v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
LABEL_83:
      *v36 = v23;
LABEL_84:
      ++*(_QWORD *)(a1 + 24);
LABEL_85:
      v10 = (_QWORD *)*v10;
      if (!v10)
        return a1;
    }
    prime = v15;
LABEL_74:
    v35 = *(_QWORD *)a1;
    v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
    if (v36)
      goto LABEL_75;
    goto LABEL_77;
  }
  return a1;
}

void sub_1BE81FCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81FCF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81FD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE81FD28(float *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _QWORD *v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v7 = a2 ^ (2 * a3);
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2 ^ (2 * a3);
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == v7)
            {
              if (v11[2] == a2 && v11[3] == a3)
                return;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == a2 && v11[3] == a3)
              return;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = v7;
  *((_OWORD *)v16 + 1) = *a4;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v21 = 1;
    if (v8 >= 3)
      v21 = (v8 & (v8 - 1)) != 0;
    v22 = v21 | (2 * v8);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (prime > v8)
    {
LABEL_42:
      if (prime >> 61)
        sub_1BE61F100();
      v25 = operator new(8 * prime);
      v26 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v25;
      if (v26)
        operator delete(v26);
      v27 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
      while (prime != v27);
      v29 = (uint64_t *)(a1 + 4);
      v28 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v28)
        goto LABEL_74;
      v30 = v28[1];
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v29;
        for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v28 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
          {
            *v28 = *i;
            v35 = 8 * v34;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v35);
            **(_QWORD **)(*(_QWORD *)a1 + v35) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v28;
            v28 = i;
            v32 = v34;
          }
        }
        goto LABEL_74;
      }
      if (v30 >= prime)
        v30 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v29;
      v39 = (_QWORD *)*v28;
      if (!*v28)
      {
LABEL_74:
        v8 = prime;
        v42 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_75;
        goto LABEL_90;
      }
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 == v30)
          goto LABEL_68;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
        {
          *v28 = *v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
          **(_QWORD **)(*(_QWORD *)a1 + v40) = v39;
          v39 = v28;
LABEL_68:
          v28 = v39;
          v39 = (_QWORD *)*v39;
          if (!v39)
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v28;
          v28 = v39;
          v39 = (_QWORD *)*v39;
          v30 = v41;
          if (!v39)
            goto LABEL_74;
        }
      }
    }
    if (prime < v8)
    {
      v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v8)
      {
        if (!prime)
        {
          v43 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v43)
            operator delete(v43);
          v8 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v42 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      v8 = *((_QWORD *)a1 + 1);
    }
    v42 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_75:
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v19 = *(_QWORD **)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v20)
          goto LABEL_31;
      }
      else
      {
        v4 = v7;
        v19 = *(_QWORD **)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v20)
          goto LABEL_31;
      }
      goto LABEL_91;
    }
LABEL_90:
    v4 = v42 & v7;
    v19 = *(_QWORD **)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v7));
    if (v20)
      goto LABEL_31;
    goto LABEL_91;
  }
  v19 = *(_QWORD **)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
LABEL_31:
    *v16 = *v20;
LABEL_97:
    *v20 = v16;
    goto LABEL_98;
  }
LABEL_91:
  *v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v16;
  v19[v4] = a1 + 4;
  if (*v16)
  {
    v44 = *(_QWORD *)(*v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v44 >= v8)
        v44 %= v8;
    }
    else
    {
      v44 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_97;
  }
LABEL_98:
  ++*((_QWORD *)a1 + 3);
}

void sub_1BE8201BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1BE8201D0(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_1BE61F23C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1BE8204C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE81F8A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8204D8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void NetworkEdge::serialize(NetworkEdge *this@<X0>, const Network *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  void *__p[2];
  unsigned __int8 v41;
  void *__dst[2];
  uint64_t v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;

  ul2s(*(_QWORD *)this, (uint64_t)&v50);
  v6 = std::string::insert(&v50, 0, "Edge (startNode,endNode)= (");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v51, ", ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((_QWORD *)this + 1), (uint64_t)v48);
  if ((v49 & 0x80u) == 0)
    v10 = v48;
  else
    v10 = (void **)v48[0];
  if ((v49 & 0x80u) == 0)
    v11 = v49;
  else
    v11 = (std::string::size_type)v48[1];
  v12 = std::string::append(&v52, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v53, ") inSym=");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((_QWORD *)this + 2), (uint64_t)v46);
  if ((v47 & 0x80u) == 0)
    v16 = v46;
  else
    v16 = (void **)v46[0];
  if ((v47 & 0x80u) == 0)
    v17 = v47;
  else
    v17 = (std::string::size_type)v46[1];
  v18 = std::string::append(&v54, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v55, " outSym= ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((_QWORD *)this + 3), (uint64_t)v44);
  if ((v45 & 0x80u) == 0)
    v22 = v44;
  else
    v22 = (void **)v44[0];
  if ((v45 & 0x80u) == 0)
    v23 = v45;
  else
    v23 = (std::string::size_type)v44[1];
  v24 = std::string::append(&v56, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v57, " ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = *((_QWORD *)this + 3);
  if (*((_BYTE *)a2 + 184))
  {
    if (v28)
    {
      ul2sh(v28, (uint64_t)__dst);
      goto LABEL_26;
    }
    v29 = *((_QWORD *)a2 + 17);
    if (*(char *)(v29 + 23) < 0)
      goto LABEL_25;
LABEL_23:
    v30 = *(_OWORD *)v29;
    v43 = *(_QWORD *)(v29 + 16);
    *(_OWORD *)__dst = v30;
    goto LABEL_26;
  }
  v29 = *((_QWORD *)a2 + 17) + 24 * v28;
  if ((*(char *)(v29 + 23) & 0x80000000) == 0)
    goto LABEL_23;
LABEL_25:
  sub_1BE61F128(__dst, *(void **)v29, *(_QWORD *)(v29 + 8));
LABEL_26:
  if (v43 >= 0)
    v31 = __dst;
  else
    v31 = (void **)__dst[0];
  if (v43 >= 0)
    v32 = HIBYTE(v43);
  else
    v32 = (std::string::size_type)__dst[1];
  v33 = std::string::append(&v58, (const std::string::value_type *)v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v59, " weight = ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  d2s(*((double *)this + 4), __p);
  if ((v41 & 0x80u) == 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  if ((v41 & 0x80u) == 0)
    v38 = v41;
  else
    v38 = (std::string::size_type)__p[1];
  v39 = std::string::append(&v60, (const std::string::value_type *)v37, v38);
  *a3 = *v39;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((char)v41 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v60.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(__dst[0]);
  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v58.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if (((char)v45 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v57.__r_.__value_.__l.__data_);
  if (((char)v45 & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v44[0]);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if (((char)v47 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v55.__r_.__value_.__l.__data_);
  if (((char)v47 & 0x80000000) == 0)
  {
LABEL_48:
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v46[0]);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    if (((char)v49 & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v53.__r_.__value_.__l.__data_);
  if (((char)v49 & 0x80000000) == 0)
  {
LABEL_51:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_68;
  }
LABEL_67:
  operator delete(v48[0]);
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_52:
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(v52.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_70:
    operator delete(v50.__r_.__value_.__l.__data_);
    return;
  }
LABEL_69:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
}

void sub_1BE820A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  if (*(char *)(v67 - 121) < 0)
  {
    operator delete(*(void **)(v67 - 144));
    if ((*(char *)(v67 - 153) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(v67 - 153) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v67 - 176));
  if ((a22 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v67 - 185) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(__p);
  if ((*(char *)(v67 - 185) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v67 - 217) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v67 - 208));
  if ((*(char *)(v67 - 217) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v67 - 240));
  if ((a28 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a67 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a23);
  if ((a67 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a60 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a62);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a34 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a55);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a53 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a29);
  if ((a53 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a46 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a48);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if ((a40 & 0x80000000) == 0)
LABEL_13:
    _Unwind_Resume(a1);
LABEL_25:
  operator delete(a35);
  _Unwind_Resume(a1);
}

void sub_1BE820CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    JUMPOUT(0x1BE820C50);
  JUMPOUT(0x1BE820B00);
}

void sub_1BE820CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    JUMPOUT(0x1BE820C60);
  JUMPOUT(0x1BE820B08);
}

void sub_1BE820CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x1BE820C70);
  JUMPOUT(0x1BE820B10);
}

void sub_1BE820CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    JUMPOUT(0x1BE820C80);
  JUMPOUT(0x1BE820B18);
}

void sub_1BE820CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    JUMPOUT(0x1BE820C90);
  JUMPOUT(0x1BE820B20);
}

void sub_1BE820D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    JUMPOUT(0x1BE820CA0);
  JUMPOUT(0x1BE820B28);
}

uint64_t Network::readOneEdge(Network *this, const char *__s, NetworkEdge *a3)
{
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  void **v35;
  void **v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  BOOL v43;
  signed int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  void **v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  std::logic_error *exception;
  unint64_t v66;
  double v67;
  void **__dst;
  size_t v69;
  int64_t v70;
  uint64_t v71[2];
  uint64_t v72;
  _QWORD v73[8];
  __int128 __p;
  __int128 v75;
  int v76;
  uint64_t v77[20];

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v69 = v7;
    v70 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v70) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = MEMORY[0x1E0DE4FD0];
  v12 = MEMORY[0x1E0DE4FD0] + 104;
  v77[0] = MEMORY[0x1E0DE4FD0] + 104;
  v13 = MEMORY[0x1E0DE4FD0] + 64;
  v14 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v72 = MEMORY[0x1E0DE4FD0] + 64;
  v71[0] = v15;
  *(uint64_t *)((char *)v71 + *(_QWORD *)(v15 - 24)) = v16;
  v71[1] = 0;
  v17 = (std::ios_base *)((char *)v71 + *(_QWORD *)(v71[0] - 24));
  std::ios_base::init(v17, v73);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  v18 = v14[5];
  v72 = v14[4];
  *(_QWORD *)((char *)&v73[-1] + *(_QWORD *)(v72 - 24)) = v18;
  v71[0] = v14[1];
  *(uint64_t *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = v14[6];
  v77[0] = v12;
  v71[0] = v11 + 24;
  v72 = v13;
  std::streambuf::basic_streambuf();
  v19 = MEMORY[0x1E0DE4FB8];
  v73[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v75 = 0u;
  v76 = 24;
  std::stringbuf::str();
  if (SHIBYTE(v70) < 0)
    operator delete(__dst);
  MEMORY[0x1C3B811B4](&__dst, v71, 0);
  if (!(_BYTE)__dst)
  {
    v22 = 0;
    goto LABEL_18;
  }
  v20 = *(_QWORD **)((char *)&v73[2] + *(_QWORD *)(v71[0] - 24));
  v21 = (char *)v20[3];
  if (v21 == (char *)v20[4])
  {
    v23 = (*(uint64_t (**)(_QWORD *))(*v20 + 80))(v20);
    v22 = v23;
    if (v23 == -1)
    {
      v22 = 0;
      v24 = 6;
      goto LABEL_17;
    }
  }
  else
  {
    v20[3] = v21 + 1;
    v22 = *v21;
  }
  v24 = 0;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)v71 + *(_QWORD *)(v71[0] - 24)), *(_DWORD *)((char *)&v73[1] + *(_QWORD *)(v71[0] - 24)) | v24);
LABEL_18:
  if ((*((_BYTE *)&v73[1] + *(_QWORD *)(v71[0] - 24)) & 5) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid empty FST line entry");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v22 == 70)
  {
    __dst = 0;
    MEMORY[0x1C3B811CC](v71, &__dst);
    v26 = (uint64_t **)((char *)this + 64);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
    v27 = (uint64_t)__dst;
    if (v25)
    {
      while (1)
      {
        while (1)
        {
          v28 = (uint64_t **)v25;
          v29 = v25[4];
          if ((unint64_t)__dst >= v29)
            break;
          v25 = *v28;
          v26 = v28;
          if (!*v28)
            goto LABEL_29;
        }
        if (v29 >= (unint64_t)__dst)
          break;
        v25 = v28[1];
        if (!v25)
        {
          v26 = v28 + 1;
          goto LABEL_29;
        }
      }
    }
    else
    {
      v28 = (uint64_t **)((char *)this + 64);
LABEL_29:
      v30 = (uint64_t *)operator new(0x28uLL);
      v30[4] = v27;
      *v30 = 0;
      v30[1] = 0;
      v30[2] = (uint64_t)v28;
      *v26 = v30;
      v31 = **((_QWORD **)this + 7);
      if (v31)
      {
        *((_QWORD *)this + 7) = v31;
        v30 = *v26;
      }
      sub_1BE61F5C0(*((uint64_t **)this + 8), v30);
      ++*((_QWORD *)this + 9);
    }
    goto LABEL_32;
  }
  if (v22 == 73)
  {
    MEMORY[0x1C3B811CC](v71, (char *)this + 24);
LABEL_32:
    v32 = 0;
    goto LABEL_124;
  }
  v67 = 0.0;
  MEMORY[0x1C3B811CC](v71, a3);
  MEMORY[0x1C3B811CC](v71, (char *)a3 + 8);
  __dst = 0;
  v69 = 0;
  v70 = 0;
  sub_1BE7DBF98(v71, (uint64_t)&__dst);
  std::ios_base::clear((std::ios_base *)((char *)v71 + *(_QWORD *)(v71[0] - 24)), 0);
  v33 = HIBYTE(v70);
  v34 = SHIBYTE(v70);
  v35 = __dst;
  v36 = (void **)&__dst;
  if (v70 < 0)
  {
    v36 = __dst;
    v33 = v69;
  }
  if (!v33)
  {
    LODWORD(v37) = 0;
    goto LABEL_69;
  }
  v37 = *(unsigned __int8 *)v36 == 45;
  if (*(_BYTE *)v36 != 45)
  {
    v46 = 1;
    if (*((_BYTE *)v36 + v37) != 48)
      goto LABEL_68;
    goto LABEL_60;
  }
  if (v33 >= 2)
  {
    v46 = 2;
    if (*((_BYTE *)v36 + v37) != 48)
    {
LABEL_68:
      v42 = *(unsigned __int8 *)v36 == 45;
      if (v37 >= v33)
        goto LABEL_69;
LABEL_40:
      v38 = 0;
      do
      {
        v39 = *((char *)v36 + v42);
        if ((v39 - 48) >= 0xA)
        {
          if ((v39 - 97) >= 6)
          {
            if ((v39 - 65) > 5)
              goto LABEL_70;
            v40 = -55;
          }
          else
          {
            v40 = -87;
          }
        }
        else
        {
          v40 = -48;
        }
        v41 = v39 + 16 * v38 + v40;
        ++v42;
        v43 = v41 < v38;
        if (v42 >= v33)
          break;
        v38 = v41;
      }
      while (!v43);
      if (*(_BYTE *)v36 == 45)
        v44 = 0x80000000;
      else
        v44 = 0x7FFFFFFF;
      if ((_DWORD)v37)
        v45 = -v41;
      else
        v45 = v41;
      if (!v43)
        v44 = v45;
      *((_QWORD *)a3 + 2) = v44;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_74;
LABEL_58:
      *(_BYTE *)v35 = 0;
      v69 = 0;
      goto LABEL_75;
    }
LABEL_60:
    v47 = *((unsigned __int8 *)v36 + v46) | 0x20;
    v42 = 2;
    if (*(_BYTE *)v36 == 45)
      v42 = 3;
    if (v47 != 120)
      v42 = *(unsigned __int8 *)v36 == 45;
    if (v42 >= v33)
      goto LABEL_69;
    goto LABEL_40;
  }
  LODWORD(v37) = 1;
LABEL_69:
  v38 = 0;
LABEL_70:
  if ((_DWORD)v37)
    v48 = -v38;
  else
    v48 = v38;
  *((_QWORD *)a3 + 2) = v48;
  if (v34 < 0)
    goto LABEL_58;
LABEL_74:
  LOBYTE(__dst) = 0;
  HIBYTE(v70) = 0;
LABEL_75:
  sub_1BE7DBF98(v71, (uint64_t)&__dst);
  v49 = HIBYTE(v70);
  if (v70 < 0)
    v49 = v69;
  if (*((_BYTE *)this + 184))
  {
    if (v49)
    {
      v50 = __dst;
      if (v70 >= 0)
        v50 = (void **)&__dst;
      v51 = *(unsigned __int8 *)v50 == 45;
      if (*(_BYTE *)v50 == 45)
      {
        if (v49 < 2)
        {
          v51 = 1;
LABEL_93:
          if (v51 >= v49)
          {
            v54 = 0;
LABEL_112:
            if (*(_BYTE *)v50 == 45)
              v59 = -v54;
            else
              v59 = v54;
          }
          else
          {
            v54 = 0;
            do
            {
              v55 = *((char *)v50 + v51);
              if ((v55 - 48) >= 0xA)
              {
                if ((v55 - 97) >= 6)
                {
                  if ((v55 - 65) > 5)
                    goto LABEL_112;
                  v56 = -55;
                }
                else
                {
                  v56 = -87;
                }
              }
              else
              {
                v56 = -48;
              }
              v57 = v55 + 16 * v54 + v56;
              ++v51;
              v58 = v57 < v54;
              if (v51 >= v49)
                break;
              v54 = v57;
            }
            while (!v58);
            if (*(_BYTE *)v50 == 45)
              v59 = 0x80000000;
            else
              v59 = 0x7FFFFFFF;
            if (*(_BYTE *)v50 == 45)
              v60 = -v57;
            else
              v60 = v57;
            if (!v58)
              v59 = v60;
          }
          v52 = (uint64_t *)v59;
          goto LABEL_116;
        }
        v53 = 2;
        if (*((_BYTE *)v50 + v51) != 48)
          goto LABEL_93;
      }
      else
      {
        v53 = 1;
        if (*((_BYTE *)v50 + v51) != 48)
          goto LABEL_93;
      }
      if ((*((unsigned __int8 *)v50 + v53) | 0x20) == 0x78)
      {
        v51 = 2;
        if (*(_BYTE *)v50 == 45)
          v51 = 3;
      }
      goto LABEL_93;
    }
    goto LABEL_86;
  }
  if (!v49)
  {
LABEL_86:
    v52 = 0;
    goto LABEL_116;
  }
  v52 = sub_1BE66A2C4((_QWORD *)this + 16, (uint64_t)&__dst);
LABEL_116:
  *((_QWORD *)a3 + 3) = v52;
  MEMORY[0x1C3B811C0](v71, &v67);
  v61 = v67;
  if ((*(_DWORD *)((_BYTE *)&v73[1] + *(_QWORD *)(v71[0] - 24)) & 5) != 0)
    v61 = 0.0;
  *((double *)a3 + 4) = v61;
  v66 = 0;
  MEMORY[0x1C3B811CC](v71, &v66);
  if ((*(_DWORD *)((_BYTE *)&v73[1] + *(_QWORD *)(v71[0] - 24)) & 5) != 0)
    v62 = 0;
  else
    v62 = (unint64_t)(double)v66;
  *((_QWORD *)a3 + 6) = v62;
  if (SHIBYTE(v70) < 0)
    operator delete(__dst);
  v32 = 1;
LABEL_124:
  v71[0] = *v14;
  v63 = v14[9];
  *(uint64_t *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = v14[8];
  v72 = v63;
  v73[0] = v19 + 16;
  if (SBYTE7(v75) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B81298](v77);
  return v32;
}

void sub_1BE82145C()
{
  __break(1u);
}

void sub_1BE8214A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_end_catch();
  sub_1BE7DC1C8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void Network::readDataFile(Network *this)
{
  Network *v1;
  FILE *v2;
  FILE *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  std::string::size_type v16;
  std::string::size_type size;
  unint64_t v18;
  std::string::size_type *p_size;
  std::string::size_type *v20;
  std::string::size_type v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  std::string::size_type *v25;
  std::string::size_type *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  void *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  void *exception;
  std::string *v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  std::string v69;
  __int128 v70;
  std::string::size_type v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::string v77;
  char __s[2048];
  uint64_t v79;

  v1 = this;
  v79 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 23) < 0)
    this = *(Network **)this;
  v2 = fopen((const char *)this, "rt");
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v65 = std::string::append(&v77, ")");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    *(_QWORD *)&v73 = *((_QWORD *)&v65->__r_.__value_.__l + 2);
    v72 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3B8113C](exception, &v72);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = v2;
  fgets(__s, 2048, v2);
  while (!feof(v3))
  {
    __s[0] = 0;
    if (!fgets(__s, 2048, v3))
      break;
    if (Network::readOneEdge(v1, __s, (NetworkEdge *)&v72))
    {
      v33 = *((_QWORD *)v1 + 11);
      if (v33 < *((_QWORD *)v1 + 12))
      {
        *(_OWORD *)v33 = v72;
        *(_OWORD *)(v33 + 16) = v73;
        *(_OWORD *)(v33 + 32) = v74;
        *(_OWORD *)(v33 + 48) = v75;
        *(_QWORD *)(v33 + 64) = v76;
        v32 = (char *)(v33 + 72);
      }
      else
      {
        v32 = sub_1BE66D0D0((char **)v1 + 10, (uint64_t)&v72);
      }
      *((_QWORD *)v1 + 11) = v32;
    }
  }
  v4 = *((_QWORD *)v1 + 10);
  v5 = *((_QWORD *)v1 + 11);
  v6 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v5 - v4) >> 3));
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1BE821DF8;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = v6;
  sub_1BE836EA0(v4, v5, (uint64_t (**)(__int128 *, __int128 *))&v77, v7, 1);
  v8 = *((_QWORD *)v1 + 10);
  for (i = *((_QWORD *)v1 + 11); v8 != i; v8 += 72)
    sub_1BE821E44(v1, v8);
  v10 = *((_QWORD *)v1 + 13);
  v11 = (int8x16_t *)*((_QWORD *)v1 + 14);
  v12 = 126 - 2 * __clz(((uint64_t)v11->i64 - v10) >> 3);
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1BE821FC4;
  if (v11 == (int8x16_t *)v10)
    v13 = 0;
  else
    v13 = v12;
  sub_1BE838264(v10, v11, (unsigned int (**)(uint64_t))&v77, v13, 1);
  v77.__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = (unint64_t)&v77.__r_.__value_.__l.__size_;
  v14 = (unint64_t *)*((_QWORD *)v1 + 10);
  v15 = (unint64_t *)*((_QWORD *)v1 + 11);
  if (v14 == v15)
  {
    v16 = 0;
    v30 = (_QWORD *)((char *)v1 + 40);
    v29 = *((_QWORD *)v1 + 4);
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v1 + 5) - v29) >> 3);
  }
  else
  {
    v16 = 0;
    do
    {
      size = v77.__r_.__value_.__l.__size_;
      v18 = *v14;
      p_size = &v77.__r_.__value_.__l.__size_;
      v20 = &v77.__r_.__value_.__l.__size_;
      if (v77.__r_.__value_.__l.__size_)
      {
        v21 = v77.__r_.__value_.__l.__size_;
        while (1)
        {
          while (1)
          {
            v20 = (std::string::size_type *)v21;
            v22 = *(_QWORD *)(v21 + 32);
            if (v18 >= v22)
              break;
            v21 = *v20;
            p_size = v20;
            if (!*v20)
              goto LABEL_24;
          }
          if (v22 >= v18)
            break;
          v21 = v20[1];
          if (!v21)
          {
            p_size = v20 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        v23 = (uint64_t *)operator new(0x28uLL);
        v23[4] = v18;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v20;
        *p_size = (std::string::size_type)v23;
        if (*(_QWORD *)v77.__r_.__value_.__l.__data_)
        {
          v77.__r_.__value_.__r.__words[0] = *(_QWORD *)v77.__r_.__value_.__l.__data_;
          v23 = (uint64_t *)*p_size;
        }
        sub_1BE61F5C0((uint64_t *)v77.__r_.__value_.__l.__size_, v23);
        size = v77.__r_.__value_.__l.__size_;
        v16 = ++v77.__r_.__value_.__r.__words[2];
      }
      v24 = v14[1];
      v25 = &v77.__r_.__value_.__l.__size_;
      v26 = &v77.__r_.__value_.__l.__size_;
      if (size)
      {
        while (1)
        {
          while (1)
          {
            v26 = (std::string::size_type *)size;
            v27 = *(_QWORD *)(size + 32);
            if (v24 >= v27)
              break;
            size = *v26;
            v25 = v26;
            if (!*v26)
              goto LABEL_34;
          }
          if (v27 >= v24)
            break;
          size = v26[1];
          if (!size)
          {
            v25 = v26 + 1;
            goto LABEL_34;
          }
        }
      }
      else
      {
LABEL_34:
        v28 = (uint64_t *)operator new(0x28uLL);
        v28[4] = v24;
        *v28 = 0;
        v28[1] = 0;
        v28[2] = (uint64_t)v26;
        *v25 = (std::string::size_type)v28;
        if (*(_QWORD *)v77.__r_.__value_.__l.__data_)
        {
          v77.__r_.__value_.__r.__words[0] = *(_QWORD *)v77.__r_.__value_.__l.__data_;
          v28 = (uint64_t *)*v25;
        }
        sub_1BE61F5C0((uint64_t *)v77.__r_.__value_.__l.__size_, v28);
        v16 = ++v77.__r_.__value_.__r.__words[2];
      }
      v14 += 9;
    }
    while (v14 != v15);
    v29 = *((_QWORD *)v1 + 4);
    v30 = (_QWORD *)((char *)v1 + 40);
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v1 + 5) - v29) >> 3);
    if (v16 > v31)
    {
      sub_1BE66CE80((void **)v1 + 4, v16 - v31);
      v29 = *((_QWORD *)v1 + 4);
      goto LABEL_49;
    }
  }
  if (v31 > v16)
    *v30 = v29 + 40 * v16;
LABEL_49:
  v34 = (uint64_t *)*((_QWORD *)v1 + 10);
  v35 = (uint64_t *)*((_QWORD *)v1 + 11);
  if (v34 != v35)
  {
    v36 = (uint64_t *)*((_QWORD *)v1 + 10);
    do
    {
      ++*(_QWORD *)(v29 + 40 * *v36);
      ++*(_QWORD *)(v29 + 40 * v36[1] + 8);
      v36 += 9;
    }
    while (v36 != v35);
  }
  v37 = (_QWORD *)*((_QWORD *)v1 + 7);
  if (v37 != (_QWORD *)((char *)v1 + 64))
  {
    do
    {
      *(_BYTE *)(v29 + 40 * v37[4] + 32) = 1;
      v38 = (_QWORD *)v37[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v37[2];
          v40 = *v39 == (_QWORD)v37;
          v37 = v39;
        }
        while (!v40);
      }
      v37 = v39;
    }
    while (v39 != (_QWORD *)((char *)v1 + 64));
  }
  v41 = *v34;
  *(_QWORD *)(v29 + 40 * *v34 + 16) = 0;
  if (*v30 == v29)
  {
    *(_QWORD *)(v29 + 24) = 0;
  }
  else
  {
    v42 = 0;
    v43 = (*v30 - v29) / 40;
    if (v43 <= 1)
      v43 = 1;
    v44 = (_BYTE *)(v29 + 32);
    do
    {
      *((_QWORD *)v44 - 2) = v41;
      v45 = *((_QWORD *)v44 - 4);
      if (!v45 && !*v44)
      {
        v46 = __cxa_allocate_exception(0x10uLL);
        ul2s(v42, (uint64_t)&v67);
        v47 = std::string::insert(&v67, 0, "Node[");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v68, "]");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v69, "has out degree zero but is not marked as a final node");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v71 = v51->__r_.__value_.__r.__words[2];
        v70 = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1C3B81118](v46, &v70);
        __cxa_throw(v46, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v41 += v45;
      ++v42;
      v44 += 40;
    }
    while (v43 != v42);
    v53 = 0;
    v54 = 0;
    *(_QWORD *)(v29 + 24) = 0;
    v55 = (_QWORD *)(v29 + 24);
    do
    {
      *v55 = v54;
      v56 = *(v55 - 2);
      if (!v56 && v53 != *((_QWORD *)v1 + 3))
      {
        v57 = __cxa_allocate_exception(0x10uLL);
        ul2s(v53, (uint64_t)&v67);
        v58 = std::string::insert(&v67, 0, "Node[");
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        v60 = std::string::append(&v68, "]");
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = std::string::append(&v69, "has in degree zero but is not marked as an initial node");
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v71 = v62->__r_.__value_.__r.__words[2];
        v70 = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1C3B81118](v57, &v70);
        __cxa_throw(v57, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v55 += 5;
      v54 += v56;
      ++v53;
    }
    while (v43 != v53);
  }
  fclose(v3);
  sub_1BE62033C((uint64_t)&v77, (_QWORD *)v77.__r_.__value_.__l.__size_);
}

void sub_1BE821C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  int v56;

  if (a42 < 0)
    operator delete(__p);
  if (a55 < 0)
  {
    operator delete(a50);
    if ((v56 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v56)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v55);
  _Unwind_Resume(a1);
}

BOOL sub_1BE821DF8(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;

  if (*a1 < *a2)
    return 1;
  if (*a1 != *a2)
    return 0;
  v3 = a1[2];
  v4 = a2[2];
  if (v3 < v4)
    return 1;
  return v3 == v4 && a1[1] < a2[1];
}

void sub_1BE821E44(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[14];
  v4 = a1[15];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (void **)(a1 + 13);
  v9 = (char *)a1[13];
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1BE61F930();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1BE61F100();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)*v8;
  }
LABEL_21:
  a1[13] = v15;
  a1[14] = v7;
  a1[15] = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[14] = v7;
}

BOOL sub_1BE821FC4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
}

uint64_t Network::prepareNetwork(Network *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *exception;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int128 v44;
  std::string::size_type v45;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  v4 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v3 - v2) >> 3));
  *(_QWORD *)&v44 = sub_1BE821DF8;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  sub_1BE836EA0(v2, v3, (uint64_t (**)(__int128 *, __int128 *))&v44, v5, 1);
  v6 = (int8x16_t *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 14) = v6;
  v7 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v7)
  {
    v10 = (uint64_t)v6;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      sub_1BE821E44(this, v7 + v8);
      ++v9;
      v7 = *((_QWORD *)this + 10);
      v8 += 72;
    }
    while (v9 < 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 11) - v7) >> 3));
    v10 = *((_QWORD *)this + 13);
    v6 = (int8x16_t *)*((_QWORD *)this + 14);
  }
  v11 = 126 - 2 * __clz(((uint64_t)v6->i64 - v10) >> 3);
  *(_QWORD *)&v44 = sub_1BE821FC4;
  if (v6 == (int8x16_t *)v10)
    v12 = 0;
  else
    v12 = v11;
  sub_1BE838264(v10, v6, (unsigned int (**)(uint64_t))&v44, v12, 1);
  v13 = *((_QWORD *)this + 13);
  v14 = (int8x16_t *)*((_QWORD *)this + 14);
  v15 = 126 - 2 * __clz(((uint64_t)v14->i64 - v13) >> 3);
  *(_QWORD *)&v44 = sub_1BE821FC4;
  if (v14 == (int8x16_t *)v13)
    v16 = 0;
  else
    v16 = v15;
  result = sub_1BE838264(v13, v14, (unsigned int (**)(uint64_t))&v44, v16, 1);
  v18 = (char *)*((_QWORD *)this + 4);
  v19 = (char *)*((_QWORD *)this + 5);
  if (v18 != v19)
  {
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18 += 40;
    }
    while (v18 != v19);
    v18 = (char *)*((_QWORD *)this + 4);
  }
  v21 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t *)*((_QWORD *)this + 11);
  if (v21 == v20)
  {
    v28 = (char *)*((_QWORD *)this + 5);
    v27 = v28 - v18;
    if (v28 == v18)
      return result;
    goto LABEL_27;
  }
  v22 = (uint64_t *)*((_QWORD *)this + 10);
  do
  {
    ++*(_QWORD *)&v18[40 * *v22];
    ++*(_QWORD *)&v18[40 * v22[1] + 8];
    v22 += 9;
  }
  while (v22 != v20);
  v23 = (char *)*((_QWORD *)this + 5);
  v24 = *v21;
  *(_QWORD *)&v18[40 * v24 + 16] = 0;
  if (v18 != v23)
  {
    v25 = v18;
    do
    {
      *((_QWORD *)v25 + 2) = v24;
      v26 = *(_QWORD *)v25;
      v25 += 40;
      v24 += v26;
    }
    while (v25 != v23);
  }
  *((_QWORD *)v18 + 3) = 0;
  v27 = v23 - v18;
  if (v23 != v18)
  {
LABEL_27:
    v29 = 0;
    v30 = 0;
    v31 = v27 / 40;
    if (v31 <= 1)
      v31 = 1;
    v32 = v18 + 24;
    do
    {
      *v32 = v30;
      v33 = *(v32 - 2);
      if (!v33 && v29 != *((_QWORD *)this + 3))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        ul2s(v29, (uint64_t)&v41);
        v35 = std::string::insert(&v41, 0, "Node[");
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        v37 = std::string::append(&v42, "]");
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v39 = std::string::append(&v43, "has in degree zero but is not marked as an initial node");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v45 = v39->__r_.__value_.__r.__words[2];
        v44 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1C3B81118](exception, &v44);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v32 += 5;
      v30 += v33;
      ++v29;
    }
    while (v31 != v29);
  }
  return result;
}

void sub_1BE8222D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if (a15 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v29 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v28);
    goto LABEL_12;
  }
LABEL_10:
  if (!v29)
    goto LABEL_12;
  goto LABEL_11;
}

void Network::trimDeadEdges(std::string **this, Network *a2)
{
  Network *v2;
  char *v4;
  uint64_t **v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD **v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  unint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  char *v26;
  std::string *v27;
  unint64_t v28;
  char *v29;
  std::string::value_type *v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  std::string::value_type *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t **v43;
  unint64_t v44;
  uint64_t **v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t **v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t **v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  char *v70;
  char *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t **v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t **v81;
  uint64_t **v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t **v89;
  uint64_t **v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t **v97;
  unint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD **v103;
  char *v104;
  _OWORD *v105;
  char *v106;
  void **v107;
  void **v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  void **v113;
  _QWORD **v114;
  uint64_t **v115;
  Network *v116;
  Network *v117;
  char *__p;
  char *v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD **v123;
  _QWORD *v124[2];
  void *v125[2];
  __int128 v126;
  __int128 v127;
  uint64_t **v128;
  uint64_t *v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;

  v2 = a2;
  v4 = (char *)a2 + 56;
  v5 = (uint64_t **)((char *)a2 + 64);
  sub_1BE62033C((uint64_t)a2 + 56, *((_QWORD **)a2 + 8));
  *((_QWORD *)v2 + 7) = v5;
  *((_QWORD *)v2 + 9) = 0;
  v115 = v5;
  *v5 = 0;
  if (v2 != (Network *)this)
  {
    sub_1BE66B898((uint64_t)v2 + 136, this[17], this[18], 0xAAAAAAAAAAAAAAABLL * (((char *)this[18] - (char *)this[17]) >> 3));
    sub_1BE66BB9C((uint64_t **)v2 + 20, this[20], this + 21);
  }
  v6 = *((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 5) != v6)
    *((_QWORD *)v2 + 5) = v6;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v129 = 0;
  v130 = 0;
  v128 = &v129;
  v126 = 0u;
  v127 = 0u;
  *(_OWORD *)v125 = 0u;
  v124[0] = 0;
  v124[1] = 0;
  v123 = v124;
  v7 = (char *)sub_1BE66AAE8(&v123, this[7], this + 8);
  v8 = v123;
  if (v123 == v124)
  {
    v11 = *((_QWORD *)&v127 + 1);
  }
  else
  {
    v9 = (char *)v125[1];
    v10 = (_BYTE *)v126;
    v11 = *((_QWORD *)&v127 + 1);
    do
    {
      v12 = ((v10 - v9) << 6) - 1;
      if (v10 == v9)
        v12 = 0;
      v13 = v127 + v11;
      if (v12 == v13)
      {
        sub_1BE6A3E70((uint64_t)v125);
        v9 = (char *)v125[1];
        v10 = (_BYTE *)v126;
        v13 = *((_QWORD *)&v127 + 1) + v127;
      }
      *(_QWORD *)(*(_QWORD *)&v9[(v13 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v13 & 0x1FF)) = v8[4];
      v11 = ++*((_QWORD *)&v127 + 1);
      v14 = (_QWORD *)v8[1];
      if (v14)
      {
        do
        {
          v15 = (_QWORD **)v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD **)v8[2];
          v16 = *v15 == v8;
          v8 = v15;
        }
        while (!v16);
      }
      v8 = v15;
    }
    while (v15 != v124);
  }
  v113 = (void **)((char *)v2 + 32);
  v114 = (_QWORD **)v4;
  v116 = v2;
  if (v11)
  {
    v117 = (Network *)this;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)((char *)v125[1] + (((unint64_t)v127 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v127 & 0x1FF));
      *(_QWORD *)&v127 = v127 + 1;
      *((_QWORD *)&v127 + 1) = v11 - 1;
      if ((unint64_t)v127 >= 0x400)
      {
        operator delete(*(void **)v125[1]);
        v125[1] = (char *)v125[1] + 8;
        *(_QWORD *)&v127 = v127 - 512;
      }
      v18 = v129;
      if (!v129)
        goto LABEL_35;
      v19 = &v129;
      v20 = v129;
      do
      {
        v21 = v20;
        v22 = v19;
        v23 = v20[4];
        if (v23 >= v17)
          v19 = (uint64_t **)v20;
        else
          ++v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
      if (v19 == &v129)
        goto LABEL_35;
      if (v23 < v17)
        v21 = (uint64_t *)v22;
      if (v17 < v21[4])
      {
LABEL_35:
        v24 = this[4];
        if (*(&v24->__r_.__value_.__l.__size_ + 5 * v17))
        {
          v25 = 0;
          while (1)
          {
            v26 = (char *)*((_QWORD *)&this[13]->__r_.__value_.__l.__data_
                          + v24[1].__r_.__value_.__r.__words[5 * v17]
                          + v25);
            v27 = this[10];
            v28 = *(_QWORD *)v26;
            v29 = v132;
            if (v132 >= v133)
            {
              v32 = v131;
              v33 = 0x8E38E38E38E38E39 * ((v132 - v131) >> 3) + 1;
              if (v33 > 0x38E38E38E38E38ELL)
                sub_1BE61F930();
              if (0x1C71C71C71C71C72 * ((v133 - v131) >> 3) > v33)
                v33 = 0x1C71C71C71C71C72 * ((v133 - v131) >> 3);
              if (0x8E38E38E38E38E39 * ((v133 - v131) >> 3) >= 0x1C71C71C71C71C7)
                v34 = 0x38E38E38E38E38ELL;
              else
                v34 = v33;
              if (v34 > 0x38E38E38E38E38ELL)
                sub_1BE61F100();
              v7 = (char *)operator new(72 * v34);
              v35 = &v7[8 * ((v29 - v32) >> 3)];
              *(_OWORD *)v35 = *(_OWORD *)v26;
              v36 = &v27->__r_.__value_.__s.__data_[8 * ((v26 - (char *)v27) >> 3)];
              *((_OWORD *)v35 + 1) = *((_OWORD *)v36 + 1);
              *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
              *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
              *((_QWORD *)v35 + 8) = *((_QWORD *)v36 + 8);
              if (v29 == v32)
              {
                v39 = &v7[8 * ((v29 - v32) >> 3)];
              }
              else
              {
                v37 = 0;
                do
                {
                  v38 = &v35[v37];
                  *(_OWORD *)(v38 - 72) = *(_OWORD *)&v29[v37 - 72];
                  *(_OWORD *)(v38 - 56) = *(_OWORD *)&v29[v37 - 56];
                  *(_OWORD *)(v38 - 40) = *(_OWORD *)&v29[v37 - 40];
                  *(_OWORD *)(v38 - 24) = *(_OWORD *)&v29[v37 - 24];
                  *((_QWORD *)v38 - 1) = *(_QWORD *)&v29[v37 - 8];
                  v37 -= 72;
                }
                while (&v29[v37] != v32);
                v39 = &v35[v37];
              }
              v40 = v35 + 72;
              v131 = v39;
              v132 = v35 + 72;
              v133 = &v7[72 * v34];
              if (v32)
                operator delete(v32);
              this = (std::string **)v117;
              v132 = v40;
              v31 = v129;
              if (v129)
              {
LABEL_57:
                v41 = &v129;
                do
                {
                  v42 = v31;
                  v43 = v41;
                  v44 = v31[4];
                  v45 = (uint64_t **)(v31 + 1);
                  if (v44 >= v28)
                  {
                    v45 = (uint64_t **)v42;
                    v41 = (uint64_t **)v42;
                  }
                  v31 = *v45;
                }
                while (v31);
                if (v41 != &v129)
                {
                  if (v44 < v28)
                    v42 = (uint64_t *)v43;
                  if (v28 >= v42[4])
                    goto LABEL_38;
                }
              }
            }
            else
            {
              *(_QWORD *)v132 = v28;
              v30 = &v27->__r_.__value_.__s.__data_[8 * ((v26 - (char *)v27) >> 3)];
              *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
              *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
              *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
              *((_OWORD *)v29 + 3) = *((_OWORD *)v30 + 3);
              *((_QWORD *)v29 + 8) = *((_QWORD *)v30 + 8);
              v132 = v29 + 72;
              v31 = v129;
              if (v129)
                goto LABEL_57;
            }
            v46 = (char *)v125[1];
            v47 = (((_QWORD)v126 - (unint64_t)v125[1]) << 6) - 1;
            if ((void *)v126 == v125[1])
              v47 = 0;
            v48 = *((_QWORD *)&v127 + 1) + v127;
            if (v47 == *((_QWORD *)&v127 + 1) + (_QWORD)v127)
            {
              sub_1BE6A3E70((uint64_t)v125);
              v46 = (char *)v125[1];
              v48 = *((_QWORD *)&v127 + 1) + v127;
              this = (std::string **)v117;
            }
            *(_QWORD *)(*(_QWORD *)&v46[(v48 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v48 & 0x1FF)) = v28;
            ++*((_QWORD *)&v127 + 1);
LABEL_38:
            ++v25;
            v24 = this[4];
            if (v25 >= *(&v24->__r_.__value_.__l.__size_ + 5 * v17))
            {
              v18 = v129;
              v2 = v116;
              break;
            }
          }
        }
        v49 = &v129;
LABEL_72:
        v50 = v49;
        if (v18)
        {
          do
          {
            v49 = (uint64_t **)v18;
            v51 = v18[4];
            if (v17 < v51)
            {
              v18 = *v49;
              goto LABEL_72;
            }
            if (v51 >= v17)
              goto LABEL_22;
            v18 = v49[1];
          }
          while (v18);
          v50 = v49 + 1;
        }
        v52 = (uint64_t *)operator new(0x28uLL);
        v52[4] = v17;
        *v52 = 0;
        v52[1] = 0;
        v52[2] = (uint64_t)v49;
        *v50 = v52;
        if (*v128)
        {
          v128 = (uint64_t **)*v128;
          v52 = *v50;
        }
        v7 = (char *)sub_1BE61F5C0(v129, v52);
        ++v130;
      }
LABEL_22:
      v11 = *((_QWORD *)&v127 + 1);
    }
    while (*((_QWORD *)&v127 + 1));
  }
  v53 = v130;
  v54 = *((_QWORD *)v2 + 4);
  v55 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v2 + 5) - v54) >> 3);
  if (v130 > v55)
  {
    sub_1BE66CE80(v113, v130 - v55);
    v121 = 0;
    v122 = 0;
    v120 = &v121;
    goto LABEL_84;
  }
  if (v130 < v55)
    *((_QWORD *)v2 + 5) = v54 + 40 * v130;
  v121 = 0;
  v122 = 0;
  v120 = &v121;
  __p = 0;
  v119 = 0;
  if (v53)
  {
LABEL_84:
    if (v53 >> 61)
      sub_1BE61F930();
    v56 = (char *)operator new(8 * v53);
    __p = v56;
    bzero(v56, 8 * v53);
    v57 = &v56[8 * v53];
    v119 = v57;
    v58 = (uint64_t *)v128;
    if (v128 == &v129)
      goto LABEL_95;
    goto LABEL_86;
  }
  v57 = 0;
  v56 = 0;
  v58 = (uint64_t *)v128;
  if (v128 != &v129)
  {
LABEL_86:
    v59 = 0;
    do
    {
      *(_QWORD *)&v56[8 * v59] = v58[4];
      v60 = (uint64_t *)v58[1];
      if (v60)
      {
        do
        {
          v61 = (uint64_t **)v60;
          v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (uint64_t **)v58[2];
          v16 = *v61 == v58;
          v58 = (uint64_t *)v61;
        }
        while (!v16);
      }
      ++v59;
      v58 = (uint64_t *)v61;
    }
    while (v61 != &v129);
  }
LABEL_95:
  if (v57 != v56)
  {
    v62 = 0;
    do
    {
      while (1)
      {
        v63 = v121;
        v64 = *(_QWORD *)&v56[8 * v62];
        v65 = &v121;
        v66 = &v121;
        if (v121)
          break;
LABEL_105:
        v68 = (uint64_t *)operator new(0x30uLL);
        v68[4] = v64;
        v68[5] = 0;
        *v68 = 0;
        v68[1] = 0;
        v68[2] = (uint64_t)v66;
        *v65 = v68;
        v69 = v68;
        if (*v120)
        {
          v120 = (uint64_t **)*v120;
          v69 = *v65;
        }
        v7 = (char *)sub_1BE61F5C0(v121, v69);
        ++v122;
        v56 = __p;
        v57 = v119;
        v68[5] = v62++;
        if (v62 >= (v119 - __p) >> 3)
          goto LABEL_108;
      }
      while (1)
      {
        while (1)
        {
          v66 = (uint64_t **)v63;
          v67 = v63[4];
          if (v64 >= v67)
            break;
          v63 = *v66;
          v65 = v66;
          if (!*v66)
            goto LABEL_105;
        }
        if (v67 >= v64)
          break;
        v63 = v66[1];
        if (!v63)
        {
          v65 = v66 + 1;
          goto LABEL_105;
        }
      }
      v66[5] = (uint64_t *)v62++;
    }
    while (v62 < (v57 - v56) >> 3);
  }
LABEL_108:
  v70 = v131;
  v71 = v132;
  while (v70 != v71)
  {
    v72 = v121;
    v73 = *(_QWORD *)v70;
    v74 = &v121;
    v75 = &v121;
    if (v121)
    {
      v76 = v121;
      while (1)
      {
        while (1)
        {
          v75 = (uint64_t **)v76;
          v77 = v76[4];
          if (v73 >= v77)
            break;
          v76 = *v75;
          v74 = v75;
          if (!*v75)
            goto LABEL_119;
        }
        if (v77 >= v73)
          break;
        v76 = v75[1];
        if (!v76)
        {
          v74 = v75 + 1;
          goto LABEL_119;
        }
      }
      *(_QWORD *)v70 = v75[5];
      v80 = *((_QWORD *)v70 + 1);
      v81 = &v121;
      v82 = &v121;
      if (v72)
        goto LABEL_126;
LABEL_130:
      v84 = (uint64_t *)operator new(0x30uLL);
      v84[4] = v80;
      v84[5] = 0;
      *v84 = 0;
      v84[1] = 0;
      v84[2] = (uint64_t)v82;
      *v81 = v84;
      v85 = v84;
      if (*v120)
      {
        v120 = (uint64_t **)*v120;
        v85 = *v81;
      }
      v7 = (char *)sub_1BE61F5C0(v121, v85);
      ++v122;
      goto LABEL_110;
    }
LABEL_119:
    v78 = (uint64_t *)operator new(0x30uLL);
    v78[4] = v73;
    v78[5] = 0;
    *v78 = 0;
    v78[1] = 0;
    v78[2] = (uint64_t)v75;
    *v74 = v78;
    v79 = v78;
    if (*v120)
    {
      v120 = (uint64_t **)*v120;
      v79 = *v74;
    }
    v7 = (char *)sub_1BE61F5C0(v121, v79);
    v72 = v121;
    ++v122;
    *(_QWORD *)v70 = v78[5];
    v80 = *((_QWORD *)v70 + 1);
    v81 = &v121;
    v82 = &v121;
    if (!v72)
      goto LABEL_130;
    while (1)
    {
LABEL_126:
      while (1)
      {
        v82 = (uint64_t **)v72;
        v83 = v72[4];
        if (v80 >= v83)
          break;
        v72 = *v82;
        v81 = v82;
        if (!*v82)
          goto LABEL_130;
      }
      if (v83 >= v80)
        break;
      v72 = v82[1];
      if (!v72)
      {
        v81 = v82 + 1;
        goto LABEL_130;
      }
    }
    v84 = (uint64_t *)v82;
LABEL_110:
    *((_QWORD *)v70 + 1) = v84[5];
    v70 += 72;
  }
  v86 = v123;
  if (v123 != v124)
  {
    do
    {
      v87 = v121;
      v88 = v86[4];
      v89 = &v121;
      v90 = &v121;
      if (v121)
      {
        while (1)
        {
          while (1)
          {
            v90 = (uint64_t **)v87;
            v91 = v87[4];
            if (v88 >= v91)
              break;
            v87 = *v90;
            v89 = v90;
            if (!*v90)
              goto LABEL_143;
          }
          if (v91 >= v88)
            break;
          v87 = v90[1];
          if (!v87)
          {
            v89 = v90 + 1;
            goto LABEL_143;
          }
        }
        v92 = (uint64_t *)v90;
      }
      else
      {
LABEL_143:
        v92 = (uint64_t *)operator new(0x30uLL);
        v92[4] = v88;
        v92[5] = 0;
        *v92 = 0;
        v92[1] = 0;
        v92[2] = (uint64_t)v90;
        *v89 = v92;
        v93 = v92;
        if (*v120)
        {
          v120 = (uint64_t **)*v120;
          v93 = *v89;
        }
        v7 = (char *)sub_1BE61F5C0(v121, v93);
        ++v122;
      }
      v94 = v92[5];
      v95 = v115;
      while (1)
      {
        v96 = *v95;
        v97 = v95;
        if (!*v95)
          break;
        while (1)
        {
          v95 = (uint64_t **)v96;
          v98 = v96[4];
          if (v98 > v94)
            break;
          if (v98 >= v94)
            goto LABEL_156;
          v96 = v95[1];
          if (!v96)
          {
            v97 = v95 + 1;
            goto LABEL_153;
          }
        }
      }
LABEL_153:
      v99 = (uint64_t *)operator new(0x28uLL);
      v99[4] = v94;
      *v99 = 0;
      v99[1] = 0;
      v99[2] = (uint64_t)v95;
      *v97 = v99;
      v100 = (_QWORD *)**v114;
      if (v100)
      {
        *v114 = v100;
        v99 = *v97;
      }
      v7 = (char *)sub_1BE61F5C0(*((uint64_t **)v116 + 8), v99);
      ++*((_QWORD *)v116 + 9);
LABEL_156:
      v101 = *((_QWORD *)v116 + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v116 + 5) - v101) >> 3) >= v94)
        *(_BYTE *)(v101 + 40 * v94 + 32) = 1;
      v102 = (_QWORD *)v86[1];
      if (v102)
      {
        do
        {
          v103 = (_QWORD **)v102;
          v102 = (_QWORD *)*v102;
        }
        while (v102);
      }
      else
      {
        do
        {
          v103 = (_QWORD **)v86[2];
          v16 = *v103 == v86;
          v86 = v103;
        }
        while (!v16);
      }
      v86 = v103;
    }
    while (v103 != v124);
  }
  sub_1BE828388((uint64_t)v7, (uint64_t)&v131);
  v105 = v131;
  v104 = v132;
  if (v131 != v132)
  {
    v106 = (char *)*((_QWORD *)v116 + 11);
    do
    {
      if ((unint64_t)v106 < *((_QWORD *)v116 + 12))
      {
        *(_OWORD *)v106 = *v105;
        *((_OWORD *)v106 + 1) = v105[1];
        *((_OWORD *)v106 + 2) = v105[2];
        *((_OWORD *)v106 + 3) = v105[3];
        *((_QWORD *)v106 + 8) = *((_QWORD *)v105 + 8);
        v106 += 72;
      }
      else
      {
        v106 = sub_1BE66D0D0((char **)v116 + 10, (uint64_t)v105);
      }
      *((_QWORD *)v116 + 11) = v106;
      v105 = (_OWORD *)((char *)v105 + 72);
    }
    while (v105 != (_OWORD *)v104);
  }
  Network::prepareNetwork(v116);
  if (__p)
    operator delete(__p);
  sub_1BE62033C((uint64_t)&v120, v121);
  sub_1BE62033C((uint64_t)&v123, v124[0]);
  v107 = (void **)v125[1];
  v108 = (void **)v126;
  *((_QWORD *)&v127 + 1) = 0;
  v109 = v126 - (unint64_t)v125[1];
  if ((unint64_t)v126 - (unint64_t)v125[1] >= 0x11)
  {
    do
    {
      operator delete(*v107);
      v108 = (void **)v126;
      v107 = (void **)((char *)v125[1] + 8);
      v125[1] = v107;
      v109 = v126 - (_QWORD)v107;
    }
    while ((_QWORD)v126 - (_QWORD)v107 > 0x10uLL);
  }
  v110 = v109 >> 3;
  if (v110 == 1)
  {
    v111 = 256;
LABEL_178:
    *(_QWORD *)&v127 = v111;
  }
  else if (v110 == 2)
  {
    v111 = 512;
    goto LABEL_178;
  }
  if (v107 != v108)
  {
    do
    {
      v112 = *v107++;
      operator delete(v112);
    }
    while (v107 != v108);
    if ((void *)v126 != v125[1])
      *(_QWORD *)&v126 = v126 + (((unint64_t)v125[1] - v126 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v125[0])
    operator delete(v125[0]);
  sub_1BE62033C((uint64_t)&v128, v129);
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
}

void sub_1BE822FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  sub_1BE62033C((uint64_t)&a22, a23);
  sub_1BE61BE20((uint64_t)&a25);
  sub_1BE62033C(v25 - 136, *(_QWORD **)(v25 - 128));
  v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(_QWORD *)(v25 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void Network::pushWeightsFromEmptyEdges(Network *this, char a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  void **v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  _QWORD *v31;
  int64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *__p[2];
  __int128 v42;
  __int128 v43;

  v2 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if (!v2)
    return;
  v42 = 0u;
  v43 = 0u;
  *(_OWORD *)__p = 0u;
  if (v2 < 0)
    sub_1BE61F930();
  v4 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3);
  v5 = operator new(8 * (((v4 - 1) >> 6) + 1));
  v6 = v5;
  if (v4 >= 0x41)
    v7 = (v4 - 1) >> 6;
  else
    v7 = 0;
  v5[v7] = 0;
  if (v4 >= 0x40)
    bzero(v5, 8 * (v4 >> 6));
  if ((v4 & 0x3F) != 0)
    v6[v4 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F));
  sub_1BE6A3E70((uint64_t)__p);
  v8 = (void **)v42;
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v43 + *((_QWORD *)&v43 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v43 + *((_QWORD *)&v43 + 1)) & 0x1FF)) = 0;
  v9 = *((_QWORD *)&v43 + 1);
  *v6 |= 1uLL;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  *((_QWORD *)&v43 + 1) = v11;
  if (!v10)
  {
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v43 + v11 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v43 + v11 - 1) & 0x1FF));
      if (v8 == __p[1])
        v18 = 0;
      else
        v18 = (((char *)v8 - (char *)__p[1]) << 6) - 1;
      *((_QWORD *)&v43 + 1) = v11 - 1;
      if (v18 - (v11 + (_QWORD)v43) + 1 >= 0x400)
      {
        operator delete(*(v8 - 1));
        v8 = (void **)(v42 - 8);
        *(_QWORD *)&v42 = v42 - 8;
      }
      v19 = *((_QWORD *)this + 4);
      if (*(_QWORD *)(v19 + 40 * v17))
        break;
LABEL_17:
      v11 = *((_QWORD *)&v43 + 1);
      if (!*((_QWORD *)&v43 + 1))
        goto LABEL_12;
    }
    v20 = 0;
    while (1)
    {
      v21 = *(_QWORD *)(v19 + 40 * v17 + 16) + v20;
      v22 = *((_QWORD *)this + 10);
      v23 = v22 + 72 * v21;
      v24 = *(_QWORD *)(v23 + 8);
      if (!*(_QWORD *)(v23 + 24))
        break;
      v25 = v24 >> 6;
      v26 = 1 << v24;
      if ((v6[v24 >> 6] & (1 << v24)) == 0)
        goto LABEL_40;
LABEL_26:
      if ((unint64_t)++v20 >= *(_QWORD *)(v19 + 40 * v17))
        goto LABEL_17;
    }
    if (!*(_BYTE *)(v19 + 40 * v24 + 32))
    {
      v27 = *(_QWORD *)(v19 + 40 * v24);
      if (v27)
      {
        v28 = *(_QWORD *)(v19 + 40 * v24 + 16);
        v29 = v22 + 72 * v21;
        v30 = (double *)(v29 + 32);
        v31 = (_QWORD *)(v29 + 48);
        if ((a2 & 1) != 0)
        {
          v32 = (int64x2_t *)(v22 + 72 * v28 + 48);
          do
          {
            *(double *)v32[-1].i64 = *v30 + *(double *)v32[-1].i64;
            *v32 = vdupq_n_s64(*v31 + v32->i64[0]);
            v32 = (int64x2_t *)((char *)v32 + 72);
            --v27;
          }
          while (v27);
        }
        else
        {
          v33 = v22 + 72 * v28 + 32;
          do
          {
            *(double *)v33 = *v30 + *(double *)v33;
            v34 = *(_QWORD *)(v33 + 16);
            *(_QWORD *)(v33 + 16) = *v31 + v34;
            *(_QWORD *)(v33 + 24) = v34;
            v33 += 72;
            --v27;
          }
          while (v27);
        }
      }
      v35 = v22 + 72 * v21;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
    }
    *(_QWORD *)(v22 + 72 * v21 + 32) = 0;
    v25 = v24 >> 6;
    v26 = 1 << v24;
    if ((v6[v24 >> 6] & (1 << v24)) != 0)
      goto LABEL_26;
LABEL_40:
    v36 = (char *)__p[1];
    v37 = (((char *)v8 - (char *)__p[1]) << 6) - 1;
    if (v8 == __p[1])
      v37 = 0;
    v38 = *((_QWORD *)&v43 + 1) + v43;
    if (v37 == *((_QWORD *)&v43 + 1) + (_QWORD)v43)
    {
      sub_1BE6A3E70((uint64_t)__p);
      v36 = (char *)__p[1];
      v8 = (void **)v42;
      v38 = *((_QWORD *)&v43 + 1) + v43;
      v19 = *((_QWORD *)this + 4);
    }
    *(_QWORD *)(*(_QWORD *)&v36[(v38 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v38 & 0x1FF)) = v24;
    ++*((_QWORD *)&v43 + 1);
    v6[v25] |= v26;
    goto LABEL_26;
  }
LABEL_12:
  operator delete(v6);
  v12 = (void **)__p[1];
  v13 = (void **)v42;
  *((_QWORD *)&v43 + 1) = 0;
  v14 = v42 - (unint64_t)__p[1];
  if ((unint64_t)v42 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v13 = (void **)v42;
      v12 = (void **)((char *)__p[1] + 8);
      __p[1] = v12;
      v14 = v42 - (_QWORD)v12;
    }
    while ((_QWORD)v42 - (_QWORD)v12 > 0x10uLL);
  }
  v15 = v14 >> 3;
  if (v15 == 1)
  {
    v16 = 256;
    goto LABEL_45;
  }
  if (v15 == 2)
  {
    v16 = 512;
LABEL_45:
    *(_QWORD *)&v43 = v16;
  }
  if (v12 != v13)
  {
    do
    {
      v39 = *v12++;
      operator delete(v39);
    }
    while (v12 != v13);
    if ((void *)v42 != __p[1])
      *(_QWORD *)&v42 = v42 + (((unint64_t)__p[1] - v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1BE823470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(v13);
  sub_1BE61BE20((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Network::checkSingleEmptyIncomingEdgeForNode(Network *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 4);
  v4 = v3 + 40 * a2;
  v7 = *(_QWORD *)(v4 + 8);
  v5 = (unint64_t *)(v4 + 8);
  v6 = v7;
  if (v7 < 2)
    return 1;
  v9 = 0;
  v10 = (_QWORD *)(v3 + 40 * a2 + 24);
  v11 = *((_QWORD *)this + 13);
  do
  {
    if (!*(_QWORD *)(*(_QWORD *)(v11 + 8 * (v9 + *v10)) + 24))
    {
      ++*a3;
      v6 = *v5;
    }
    ++v9;
  }
  while (v9 < v6);
  return *a3 == 0;
}

void Network::guaranteeSingleEmptyIncomingEdgePerNode(Network *this)
{
  uint64_t v1;
  uint64_t v2;
  Network *v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD **v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD **v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD **v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD **v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD **v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE *v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD **v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD **v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _BYTE *v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t *v122;
  __int128 *v123;
  __int128 *v124;
  uint64_t *v125;
  char *v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _BYTE *v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  _QWORD **v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _BYTE *v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD **v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _BYTE *v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  _QWORD **v209;
  _QWORD *v210;
  _QWORD **v211;
  unint64_t v212;
  _QWORD *v213;
  char *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  _QWORD **v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD **v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _BYTE *v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  _OWORD *v237;
  char *v238;
  char *v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  _QWORD *v250;
  void **v251;
  void **v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  _BYTE *v263;
  uint64_t v264;
  _BYTE *v265;
  uint64_t v266;
  _BYTE *v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  void *v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD **v285;
  void **v286;
  uint64_t v287;
  unint64_t v289;
  void **v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t *v293;
  __int128 *v294;
  _OWORD *v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t *v300;
  __int128 v301;
  uint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  uint64_t v307;
  void *__p[2];
  __int128 v309;
  __int128 v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  char *v320;
  char *v321;
  char *v322;

  v1 = *((_QWORD *)this + 4);
  v290 = (void **)((char *)this + 32);
  v2 = *((_QWORD *)this + 5) - v1;
  if (v2)
  {
    v3 = this;
    v286 = (void **)((char *)this + 80);
    v4 = &v304;
    v5 = (_QWORD *)((char *)this + 64);
    do
    {
      v6 = 0;
      v7 = (unsigned __int128)(v2 * (__int128)0x6666666666666667) >> 64;
      v8 = (v7 >> 4) + ((unint64_t)v7 >> 63);
      v9 = v8 <= 1 ? 1 : (v7 >> 4) + ((unint64_t)v7 >> 63);
      while (1)
      {
        if (!*(_BYTE *)(v1 + 40 * v6 + 32))
        {
          v10 = *(_QWORD *)(v1 + 40 * v6 + 8);
          if (v10 >= 2)
          {
            v11 = 0;
            v12 = 0;
            v13 = *(_QWORD *)(v1 + 40 * v6 + 8);
            do
            {
              if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 13) + 8 * *(_QWORD *)(v1 + 40 * v6 + 24) + 8 * v12) + 24))
              {
                ++v11;
                v13 = *(_QWORD *)(v1 + 40 * v6 + 8);
              }
              ++v12;
            }
            while (v12 < v13);
            if (v11)
              break;
          }
        }
        if (++v6 == v9)
          return;
      }
      v14 = v11 == v10;
      v15 = v11 - v14;
      if (v11 == v14)
        break;
      v285 = v4;
      v320 = 0;
      v321 = 0;
      v322 = 0;
      v16 = operator new(0x18uLL);
      v287 = v6;
      v16[1] = &v317;
      v16[2] = v6;
      *v16 = &v317;
      v317 = v16;
      v318 = v16;
      v319 = 1;
      v284 = v15 + v8;
      if (v8 < v15 + v8)
      {
        v17 = v16;
        v18 = 0;
        do
        {
          v19 = operator new(0x18uLL);
          v19[1] = &v317;
          v19[2] = v8 + v18;
          *v19 = v17;
          v17[1] = v19;
          v20 = v18 + 2;
          ++v18;
          v17 = v19;
          v317 = v19;
          v319 = v20;
        }
        while (v15 != v18);
      }
      v315 = 0;
      v316 = 0;
      v314 = &v315;
      v312 = 0;
      v313 = 0;
      v311 = &v312;
      v309 = 0u;
      v310 = 0u;
      *(_OWORD *)__p = 0u;
      v306 = 0;
      v307 = 0;
      v305 = &v306;
      *v4 = 0;
      v4[1] = 0;
      v303 = v4;
      v21 = sub_1BE66AAE8(&v303, *((_QWORD **)v3 + 7), v5);
      v22 = v303;
      v23 = *((_QWORD *)&v310 + 1);
      if (v303 != v4)
      {
        v24 = (char *)__p[1];
        v25 = (_BYTE *)v309;
        do
        {
          v26 = ((v25 - v24) << 6) - 1;
          if (v25 == v24)
            v26 = 0;
          v27 = v310 + v23;
          if (v26 == v27)
          {
            sub_1BE6A3E70((uint64_t)__p);
            v24 = (char *)__p[1];
            v25 = (_BYTE *)v309;
            v27 = *((_QWORD *)&v310 + 1) + v310;
          }
          *(_QWORD *)(*(_QWORD *)&v24[(v27 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v27 & 0x1FF)) = v22[4];
          v23 = ++*((_QWORD *)&v310 + 1);
          v28 = (_QWORD *)v22[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v22[2];
              v30 = *v29 == (_QWORD)v22;
              v22 = v29;
            }
            while (!v30);
          }
          v22 = v29;
        }
        while (v29 != v4);
      }
      if (v23)
      {
        do
        {
          v35 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v310 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v310 & 0x1FF));
          *(_QWORD *)&v310 = v310 + 1;
          *((_QWORD *)&v310 + 1) = v23 - 1;
          if ((unint64_t)v310 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(_QWORD *)&v310 = v310 - 512;
          }
          v36 = v306;
          if (!v306)
            goto LABEL_55;
          v37 = &v306;
          v38 = v306;
          do
          {
            v39 = v38;
            v40 = v37;
            v41 = v38[4];
            if (v41 >= v35)
              v37 = (_QWORD **)v38;
            else
              ++v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
          if (v37 == &v306)
            goto LABEL_55;
          if (v41 < v35)
            v39 = v40;
          if (v35 < v39[4])
          {
LABEL_55:
            v42 = *v290;
            if (*((_QWORD *)*v290 + 5 * v35 + 1))
            {
              v43 = 0;
              v289 = v35;
              while (1)
              {
                v291 = v43;
                v44 = *(_QWORD **)(*((_QWORD *)v3 + 13) + 8 * (v42[5 * v35 + 3] + v43));
                v45 = *((_QWORD *)v3 + 10);
                v46 = 0x8E38E38E38E38E39 * (((uint64_t)v44 - v45) >> 3);
                v48 = v44 + 1;
                v47 = v44[1];
                v292 = *v44;
                if (v47 != v287)
                {
                  if (*v44 != v287)
                  {
                    v139 = v321;
                    if (v321 < v322)
                    {
                      *(_QWORD *)v321 = v292;
                      *((_QWORD *)v139 + 1) = v47;
                      v140 = v45 + 8 * (((uint64_t)v44 - v45) >> 3);
                      *((_OWORD *)v139 + 1) = *(_OWORD *)(v140 + 16);
                      *((_OWORD *)v139 + 2) = *(_OWORD *)(v140 + 32);
                      *((_OWORD *)v139 + 3) = *(_OWORD *)(v140 + 48);
                      *((_QWORD *)v139 + 8) = *(_QWORD *)(v140 + 64);
                      v141 = v139 + 72;
                      goto LABEL_345;
                    }
                    v143 = v320;
                    v144 = 0x8E38E38E38E38E39 * ((v321 - v320) >> 3);
                    v145 = v144 + 1;
                    if (v144 + 1 > 0x38E38E38E38E38ELL)
                      sub_1BE61F930();
                    if (0x1C71C71C71C71C72 * ((v322 - v320) >> 3) > v145)
                      v145 = 0x1C71C71C71C71C72 * ((v322 - v320) >> 3);
                    if (0x8E38E38E38E38E39 * ((v322 - v320) >> 3) >= 0x1C71C71C71C71C7)
                      v146 = 0x38E38E38E38E38ELL;
                    else
                      v146 = v145;
                    if (v146 > 0x38E38E38E38E38ELL)
                      sub_1BE61F100();
                    v21 = operator new(72 * v146);
                    v147 = &v21[9 * v144];
                    *(_OWORD *)v147 = *(_OWORD *)v44;
                    v148 = v45 + 8 * (((uint64_t)v44 - v45) >> 3);
                    *((_OWORD *)v147 + 1) = *(_OWORD *)(v148 + 16);
                    *((_OWORD *)v147 + 2) = *(_OWORD *)(v148 + 32);
                    *((_OWORD *)v147 + 3) = *(_OWORD *)(v148 + 48);
                    v147[8] = *(_QWORD *)(v148 + 64);
                    if (v139 == v143)
                      goto LABEL_358;
                    v149 = 0;
                    do
                    {
                      v150 = (char *)&v147[v149 / 8];
                      *(_OWORD *)(v150 - 72) = *(_OWORD *)&v139[v149 - 72];
                      *(_OWORD *)(v150 - 56) = *(_OWORD *)&v139[v149 - 56];
                      *(_OWORD *)(v150 - 40) = *(_OWORD *)&v139[v149 - 40];
                      *(_OWORD *)(v150 - 24) = *(_OWORD *)&v139[v149 - 24];
                      *((_QWORD *)v150 - 1) = *(_QWORD *)&v139[v149 - 8];
                      v149 -= 72;
                    }
                    while (&v139[v149] != v143);
LABEL_343:
                    v141 = (char *)(v147 + 9);
                    v320 = (char *)&v147[v149 / 8];
                    v321 = (char *)(v147 + 9);
                    v322 = (char *)&v21[9 * v146];
                    if (!v143)
                    {
LABEL_345:
                      v321 = v141;
                      v202 = v306;
                      v3 = this;
                      v35 = v289;
                      v203 = v292;
                      if (!v306)
                        goto LABEL_354;
                      goto LABEL_346;
                    }
LABEL_344:
                    operator delete(v143);
                    goto LABEL_345;
                  }
                  v120 = v318;
                  if (v318 == &v317)
                    goto LABEL_319;
                  v121 = v45 + 72 * v46;
                  v122 = (uint64_t *)(v121 + 24);
                  v123 = (__int128 *)(v121 + 32);
                  v124 = (__int128 *)(v121 + 48);
                  v125 = (uint64_t *)(v121 + 64);
                  v126 = v321;
                  v294 = (__int128 *)(v121 + 48);
                  v295 = v48;
                  v293 = (uint64_t *)(v121 + 64);
                  while (2)
                  {
                    while (1)
                    {
                      v127 = *v48;
                      v128 = *v122;
                      v129 = *v123;
                      v130 = *v124;
                      v131 = *v125;
                      v132 = v120[2];
                      if (v126 >= v322)
                        break;
                      *(_QWORD *)v126 = v132;
                      *(_OWORD *)(v126 + 8) = v127;
                      *((_QWORD *)v126 + 3) = v128;
                      *((_OWORD *)v126 + 2) = v129;
                      *((_OWORD *)v126 + 3) = v130;
                      *((_QWORD *)v126 + 8) = v131;
                      v126 += 72;
                      v321 = v126;
                      v120 = (_QWORD *)v120[1];
                      if (v120 == &v317)
                        goto LABEL_319;
                    }
                    v133 = v320;
                    v134 = 0x8E38E38E38E38E39 * ((v126 - v320) >> 3) + 1;
                    if (v134 > 0x38E38E38E38E38ELL)
                      sub_1BE61F930();
                    v296 = *v48;
                    v298 = *v123;
                    v301 = *v124;
                    if (0x1C71C71C71C71C72 * ((v322 - v320) >> 3) > v134)
                      v134 = 0x1C71C71C71C71C72 * ((v322 - v320) >> 3);
                    if (0x8E38E38E38E38E39 * ((v322 - v320) >> 3) >= 0x1C71C71C71C71C7)
                      v135 = 0x38E38E38E38E38ELL;
                    else
                      v135 = v134;
                    if (v135 > 0x38E38E38E38E38ELL)
                      sub_1BE61F100();
                    v21 = operator new(72 * v135);
                    v136 = (char *)&v21[(v126 - v133) >> 3];
                    *(_QWORD *)v136 = v132;
                    *(_OWORD *)(v136 + 8) = v296;
                    *((_QWORD *)v136 + 3) = v128;
                    *((_OWORD *)v136 + 2) = v298;
                    *((_OWORD *)v136 + 3) = v301;
                    *((_QWORD *)v136 + 8) = v131;
                    if (v126 == v133)
                    {
                      v126 = v136 + 72;
                      v320 = v136;
                      v321 = v136 + 72;
                      v322 = (char *)&v21[9 * v135];
                      if (v133)
                        goto LABEL_216;
                    }
                    else
                    {
                      v137 = 0;
                      do
                      {
                        v138 = &v136[v137];
                        *(_OWORD *)(v138 - 72) = *(_OWORD *)&v126[v137 - 72];
                        *(_OWORD *)(v138 - 56) = *(_OWORD *)&v126[v137 - 56];
                        *(_OWORD *)(v138 - 40) = *(_OWORD *)&v126[v137 - 40];
                        *(_OWORD *)(v138 - 24) = *(_OWORD *)&v126[v137 - 24];
                        *((_QWORD *)v138 - 1) = *(_QWORD *)&v126[v137 - 8];
                        v137 -= 72;
                      }
                      while (&v126[v137] != v133);
                      v126 = v136 + 72;
                      v320 = &v136[v137];
                      v321 = v136 + 72;
                      v322 = (char *)&v21[9 * v135];
                      if (v133)
LABEL_216:
                        operator delete(v133);
                    }
                    v124 = v294;
                    v48 = v295;
                    v125 = v293;
                    v321 = v126;
                    v120 = (_QWORD *)v120[1];
                    if (v120 == &v317)
                      goto LABEL_319;
                    continue;
                  }
                }
                v49 = v45 + 8 * (((uint64_t)v44 - v45) >> 3);
                v52 = *(_QWORD *)(v49 + 24);
                v51 = (uint64_t *)(v49 + 24);
                v50 = v52;
                v53 = v318;
                if (v318 == &v317)
                {
                  v55 = 0;
                  v54 = v50;
                  v302 = v50;
                  v142 = *v44;
                  goto LABEL_260;
                }
                v300 = v51;
                v54 = v50;
                while (1)
                {
                  v55 = v53[2];
                  v56 = v315;
                  if (!v315)
                    goto LABEL_72;
                  v57 = &v315;
                  v58 = v315;
                  do
                  {
                    v59 = v58;
                    v60 = v57;
                    v61 = v58[4];
                    if (v61 >= v55)
                      v57 = (_QWORD **)v58;
                    else
                      ++v58;
                    v58 = (_QWORD *)*v58;
                  }
                  while (v58);
                  if (v57 == &v315)
                    goto LABEL_72;
                  if (v61 < v55)
                    v59 = v60;
                  if (v55 < v59[4])
                  {
LABEL_72:
                    v62 = v312;
                    v63 = &v312;
LABEL_74:
                    v64 = v63;
                    if (v62)
                    {
                      while (1)
                      {
                        v63 = (_QWORD **)v62;
                        v65 = v62[4];
                        if (v55 < v65)
                        {
                          v62 = *v63;
                          goto LABEL_74;
                        }
                        if (v65 >= v55)
                          break;
                        v62 = v63[1];
                        if (!v62)
                        {
                          v64 = v63 + 1;
                          goto LABEL_79;
                        }
                      }
                      v63[5] = 0;
                      v79 = &v315;
                      v80 = &v315;
                      if (v56)
                        goto LABEL_107;
LABEL_111:
                      v83 = operator new(0x30uLL);
                      v83[4] = v55;
                      *((_BYTE *)v83 + 40) = 0;
                      *v83 = 0;
                      v83[1] = 0;
                      v83[2] = v80;
                      *v79 = v83;
                      v84 = v83;
                      if (*v314)
                      {
                        v314 = (_QWORD *)*v314;
                        v84 = (_QWORD *)*v79;
                      }
                      v85 = v315;
                      *((_BYTE *)v84 + 24) = v84 == v315;
                      if (v84 != v85)
                      {
                        do
                        {
                          v86 = v84[2];
                          if (*(_BYTE *)(v86 + 24))
                            break;
                          v87 = *(_QWORD **)(v86 + 16);
                          v88 = *v87;
                          if (*v87 == v86)
                          {
                            v91 = v87[1];
                            if (!v91 || (v92 = *(unsigned __int8 *)(v91 + 24), v89 = (_BYTE *)(v91 + 24), v92))
                            {
                              if (*(_QWORD **)v86 == v84)
                              {
                                *(_BYTE *)(v86 + 24) = 1;
                                *((_BYTE *)v87 + 24) = 0;
                                v95 = *(_QWORD *)(v86 + 8);
                                *v87 = v95;
                                if (v95)
                                  goto LABEL_127;
                              }
                              else
                              {
                                v93 = *(uint64_t **)(v86 + 8);
                                v94 = *v93;
                                *(_QWORD *)(v86 + 8) = *v93;
                                if (v94)
                                {
                                  *(_QWORD *)(v94 + 16) = v86;
                                  v87 = *(_QWORD **)(v86 + 16);
                                }
                                v93[2] = (uint64_t)v87;
                                *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v93;
                                *v93 = v86;
                                *(_QWORD *)(v86 + 16) = v93;
                                v87 = (_QWORD *)v93[2];
                                v86 = *v87;
                                *((_BYTE *)v93 + 24) = 1;
                                *((_BYTE *)v87 + 24) = 0;
                                v95 = *(_QWORD *)(v86 + 8);
                                *v87 = v95;
                                if (v95)
LABEL_127:
                                  *(_QWORD *)(v95 + 16) = v87;
                              }
                              *(_QWORD *)(v86 + 16) = v87[2];
                              *(_QWORD *)(v87[2] + 8 * (*(_QWORD *)v87[2] != (_QWORD)v87)) = v86;
                              *(_QWORD *)(v86 + 8) = v87;
LABEL_134:
                              v87[2] = v86;
                              break;
                            }
                          }
                          else if (!v88 || (v90 = *(unsigned __int8 *)(v88 + 24), v89 = (_BYTE *)(v88 + 24), v90))
                          {
                            if (*(_QWORD **)v86 == v84)
                            {
                              v118 = v84[1];
                              *(_QWORD *)v86 = v118;
                              if (v118)
                              {
                                *(_QWORD *)(v118 + 16) = v86;
                                v87 = *(_QWORD **)(v86 + 16);
                              }
                              v84[2] = v87;
                              *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v84;
                              v84[1] = v86;
                              *(_QWORD *)(v86 + 16) = v84;
                              v87 = (_QWORD *)v84[2];
                              *((_BYTE *)v84 + 24) = 1;
                              *((_BYTE *)v87 + 24) = 0;
                              v86 = v87[1];
                              v96 = *(_QWORD **)v86;
                              v87[1] = *(_QWORD *)v86;
                              if (v96)
LABEL_132:
                                v96[2] = v87;
                            }
                            else
                            {
                              *(_BYTE *)(v86 + 24) = 1;
                              *((_BYTE *)v87 + 24) = 0;
                              v86 = v87[1];
                              v96 = *(_QWORD **)v86;
                              v87[1] = *(_QWORD *)v86;
                              if (v96)
                                goto LABEL_132;
                            }
                            *(_QWORD *)(v86 + 16) = v87[2];
                            *(_QWORD *)(v87[2] + 8 * (*(_QWORD *)v87[2] != (_QWORD)v87)) = v86;
                            *(_QWORD *)v86 = v87;
                            goto LABEL_134;
                          }
                          *(_BYTE *)(v86 + 24) = 1;
                          v84 = v87;
                          *((_BYTE *)v87 + 24) = v87 == v85;
                          *v89 = 1;
                        }
                        while (v87 != v85);
                      }
                      ++v316;
                    }
                    else
                    {
LABEL_79:
                      v66 = operator new(0x30uLL);
                      v66[4] = v55;
                      v66[5] = 0;
                      *v66 = 0;
                      v66[1] = 0;
                      v66[2] = v63;
                      *v64 = v66;
                      v67 = v66;
                      if (*v311)
                      {
                        v311 = (_QWORD *)*v311;
                        v67 = (_QWORD *)*v64;
                      }
                      v68 = v312;
                      *((_BYTE *)v67 + 24) = v67 == v312;
                      if (v67 != v68)
                      {
                        do
                        {
                          v69 = v67[2];
                          if (*(_BYTE *)(v69 + 24))
                            break;
                          v70 = *(_QWORD **)(v69 + 16);
                          v71 = *v70;
                          if (*v70 == v69)
                          {
                            v74 = v70[1];
                            if (!v74 || (v75 = *(unsigned __int8 *)(v74 + 24), v72 = (_BYTE *)(v74 + 24), v75))
                            {
                              if (*(_QWORD **)v69 == v67)
                              {
                                *(_BYTE *)(v69 + 24) = 1;
                                *((_BYTE *)v70 + 24) = 0;
                                v78 = *(_QWORD *)(v69 + 8);
                                *v70 = v78;
                                if (v78)
                                  goto LABEL_95;
                              }
                              else
                              {
                                v76 = *(uint64_t **)(v69 + 8);
                                v77 = *v76;
                                *(_QWORD *)(v69 + 8) = *v76;
                                if (v77)
                                {
                                  *(_QWORD *)(v77 + 16) = v69;
                                  v70 = *(_QWORD **)(v69 + 16);
                                }
                                v76[2] = (uint64_t)v70;
                                *(_QWORD *)(*(_QWORD *)(v69 + 16) + 8 * (**(_QWORD **)(v69 + 16) != v69)) = v76;
                                *v76 = v69;
                                *(_QWORD *)(v69 + 16) = v76;
                                v70 = (_QWORD *)v76[2];
                                v69 = *v70;
                                *((_BYTE *)v76 + 24) = 1;
                                *((_BYTE *)v70 + 24) = 0;
                                v78 = *(_QWORD *)(v69 + 8);
                                *v70 = v78;
                                if (v78)
LABEL_95:
                                  *(_QWORD *)(v78 + 16) = v70;
                              }
                              *(_QWORD *)(v69 + 16) = v70[2];
                              *(_QWORD *)(v70[2] + 8 * (*(_QWORD *)v70[2] != (_QWORD)v70)) = v69;
                              *(_QWORD *)(v69 + 8) = v70;
LABEL_103:
                              v70[2] = v69;
                              break;
                            }
                          }
                          else if (!v71 || (v73 = *(unsigned __int8 *)(v71 + 24), v72 = (_BYTE *)(v71 + 24), v73))
                          {
                            if (*(_QWORD **)v69 == v67)
                            {
                              v117 = v67[1];
                              *(_QWORD *)v69 = v117;
                              if (v117)
                              {
                                *(_QWORD *)(v117 + 16) = v69;
                                v70 = *(_QWORD **)(v69 + 16);
                              }
                              v67[2] = v70;
                              *(_QWORD *)(*(_QWORD *)(v69 + 16) + 8 * (**(_QWORD **)(v69 + 16) != v69)) = v67;
                              v67[1] = v69;
                              *(_QWORD *)(v69 + 16) = v67;
                              v70 = (_QWORD *)v67[2];
                              *((_BYTE *)v67 + 24) = 1;
                              *((_BYTE *)v70 + 24) = 0;
                              v69 = v70[1];
                              v81 = *(_QWORD **)v69;
                              v70[1] = *(_QWORD *)v69;
                              if (v81)
LABEL_101:
                                v81[2] = v70;
                            }
                            else
                            {
                              *(_BYTE *)(v69 + 24) = 1;
                              *((_BYTE *)v70 + 24) = 0;
                              v69 = v70[1];
                              v81 = *(_QWORD **)v69;
                              v70[1] = *(_QWORD *)v69;
                              if (v81)
                                goto LABEL_101;
                            }
                            *(_QWORD *)(v69 + 16) = v70[2];
                            *(_QWORD *)(v70[2] + 8 * (*(_QWORD *)v70[2] != (_QWORD)v70)) = v69;
                            *(_QWORD *)v69 = v70;
                            goto LABEL_103;
                          }
                          *(_BYTE *)(v69 + 24) = 1;
                          v67 = v70;
                          *((_BYTE *)v70 + 24) = v70 == v68;
                          *v72 = 1;
                        }
                        while (v70 != v68);
                      }
                      ++v313;
                      v56 = v315;
                      v66[5] = 0;
                      v79 = &v315;
                      v80 = &v315;
                      if (!v56)
                        goto LABEL_111;
                      while (1)
                      {
LABEL_107:
                        while (1)
                        {
                          v80 = (_QWORD **)v56;
                          v82 = v56[4];
                          if (v55 >= v82)
                            break;
                          v56 = *v80;
                          v79 = v80;
                          if (!*v80)
                            goto LABEL_111;
                        }
                        if (v82 >= v55)
                          break;
                        v56 = v80[1];
                        if (!v56)
                        {
                          v79 = v80 + 1;
                          goto LABEL_111;
                        }
                      }
                      v83 = v80;
                    }
                    *((_BYTE *)v83 + 40) = 0;
                  }
                  if (!v54)
                    break;
                  v97 = v315;
                  v98 = &v315;
                  v99 = &v315;
                  if (v315)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v99 = (_QWORD **)v97;
                        v100 = v97[4];
                        if (v55 >= v100)
                          break;
                        v97 = *v99;
                        v98 = v99;
                        if (!*v99)
                          goto LABEL_145;
                      }
                      if (v100 >= v55)
                        break;
                      v97 = v99[1];
                      if (!v97)
                      {
                        v98 = v99 + 1;
                        goto LABEL_145;
                      }
                    }
                    if (!*((_BYTE *)v99 + 40))
                      goto LABEL_259;
                  }
                  else
                  {
LABEL_145:
                    v101 = operator new(0x30uLL);
                    v101[4] = v55;
                    *((_BYTE *)v101 + 40) = 0;
                    *v101 = 0;
                    v101[1] = 0;
                    v101[2] = v99;
                    *v98 = v101;
                    v102 = v101;
                    if (*v314)
                    {
                      v314 = (_QWORD *)*v314;
                      v102 = (_QWORD *)*v98;
                    }
                    v103 = v315;
                    *((_BYTE *)v102 + 24) = v102 == v315;
                    if (v102 != v103)
                    {
                      do
                      {
                        v104 = v102[2];
                        if (*(_BYTE *)(v104 + 24))
                          break;
                        v105 = *(_QWORD **)(v104 + 16);
                        v106 = *v105;
                        if (*v105 == v104)
                        {
                          v109 = v105[1];
                          if (!v109 || (v110 = *(unsigned __int8 *)(v109 + 24), v107 = (_BYTE *)(v109 + 24), v110))
                          {
                            if (*(_QWORD **)v104 == v102)
                            {
                              *(_BYTE *)(v104 + 24) = 1;
                              *((_BYTE *)v105 + 24) = 0;
                              v113 = *(_QWORD *)(v104 + 8);
                              *v105 = v113;
                              if (v113)
                                goto LABEL_161;
                            }
                            else
                            {
                              v111 = *(uint64_t **)(v104 + 8);
                              v112 = *v111;
                              *(_QWORD *)(v104 + 8) = *v111;
                              if (v112)
                              {
                                *(_QWORD *)(v112 + 16) = v104;
                                v105 = *(_QWORD **)(v104 + 16);
                              }
                              v111[2] = (uint64_t)v105;
                              *(_QWORD *)(*(_QWORD *)(v104 + 16) + 8 * (**(_QWORD **)(v104 + 16) != v104)) = v111;
                              *v111 = v104;
                              *(_QWORD *)(v104 + 16) = v111;
                              v105 = (_QWORD *)v111[2];
                              v104 = *v105;
                              *((_BYTE *)v111 + 24) = 1;
                              *((_BYTE *)v105 + 24) = 0;
                              v113 = *(_QWORD *)(v104 + 8);
                              *v105 = v113;
                              if (v113)
LABEL_161:
                                *(_QWORD *)(v113 + 16) = v105;
                            }
                            *(_QWORD *)(v104 + 16) = v105[2];
                            *(_QWORD *)(v105[2] + 8 * (*(_QWORD *)v105[2] != (_QWORD)v105)) = v104;
                            *(_QWORD *)(v104 + 8) = v105;
LABEL_178:
                            v105[2] = v104;
                            break;
                          }
                        }
                        else if (!v106 || (v108 = *(unsigned __int8 *)(v106 + 24), v107 = (_BYTE *)(v106 + 24), v108))
                        {
                          if (*(_QWORD **)v104 == v102)
                          {
                            v119 = v102[1];
                            *(_QWORD *)v104 = v119;
                            if (v119)
                            {
                              *(_QWORD *)(v119 + 16) = v104;
                              v105 = *(_QWORD **)(v104 + 16);
                            }
                            v102[2] = v105;
                            *(_QWORD *)(*(_QWORD *)(v104 + 16) + 8 * (**(_QWORD **)(v104 + 16) != v104)) = v102;
                            v102[1] = v104;
                            *(_QWORD *)(v104 + 16) = v102;
                            v105 = (_QWORD *)v102[2];
                            *((_BYTE *)v102 + 24) = 1;
                            *((_BYTE *)v105 + 24) = 0;
                            v104 = v105[1];
                            v116 = *(_QWORD **)v104;
                            v105[1] = *(_QWORD *)v104;
                            if (v116)
LABEL_176:
                              v116[2] = v105;
                          }
                          else
                          {
                            *(_BYTE *)(v104 + 24) = 1;
                            *((_BYTE *)v105 + 24) = 0;
                            v104 = v105[1];
                            v116 = *(_QWORD **)v104;
                            v105[1] = *(_QWORD *)v104;
                            if (v116)
                              goto LABEL_176;
                          }
                          *(_QWORD *)(v104 + 16) = v105[2];
                          *(_QWORD *)(v105[2] + 8 * (*(_QWORD *)v105[2] != (_QWORD)v105)) = v104;
                          *(_QWORD *)v104 = v105;
                          goto LABEL_178;
                        }
                        *(_BYTE *)(v104 + 24) = 1;
                        v102 = v105;
                        *((_BYTE *)v105 + 24) = v105 == v103;
                        *v107 = 1;
                      }
                      while (v105 != v103);
                    }
                    ++v316;
                    if (!*((_BYTE *)v101 + 40))
                      goto LABEL_259;
                  }
LABEL_180:
                  v53 = (_QWORD *)v53[1];
                  if (v53 == &v317)
                  {
                    v55 = 0;
                    goto LABEL_259;
                  }
                }
                v114 = v312;
                if (v312)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v218 = (_QWORD **)v114;
                      v115 = v114[4];
                      if (v55 >= v115)
                        break;
                      v114 = *v218;
                      v219 = v218;
                      if (!*v218)
                        goto LABEL_235;
                    }
                    if (v115 >= v55)
                      break;
                    v114 = v218[1];
                    if (!v114)
                    {
                      v219 = v218 + 1;
                      goto LABEL_235;
                    }
                  }
                  if (!v218[5])
                    goto LABEL_259;
                  goto LABEL_180;
                }
                v218 = &v312;
                v219 = &v312;
LABEL_235:
                v151 = operator new(0x30uLL);
                v151[4] = v55;
                v151[5] = 0;
                *v151 = 0;
                v151[1] = 0;
                v151[2] = v218;
                *v219 = v151;
                if (*v311)
                {
                  v311 = (_QWORD *)*v311;
                  v151 = (_QWORD *)*v219;
                }
                v152 = v312;
                *((_BYTE *)v151 + 24) = v151 == v312;
                if (v151 != v152)
                {
                  do
                  {
                    v153 = v151[2];
                    if (*(_BYTE *)(v153 + 24))
                      break;
                    v154 = *(_QWORD **)(v153 + 16);
                    v155 = *v154;
                    if (*v154 == v153)
                    {
                      v158 = v154[1];
                      if (!v158 || (v159 = *(unsigned __int8 *)(v158 + 24), v156 = (_BYTE *)(v158 + 24), v159))
                      {
                        if (*(_QWORD **)v153 == v151)
                        {
                          *(_BYTE *)(v153 + 24) = 1;
                          *((_BYTE *)v154 + 24) = 0;
                          v162 = *(_QWORD *)(v153 + 8);
                          *v154 = v162;
                          if (v162)
                            goto LABEL_251;
                        }
                        else
                        {
                          v160 = *(uint64_t **)(v153 + 8);
                          v161 = *v160;
                          *(_QWORD *)(v153 + 8) = *v160;
                          if (v161)
                          {
                            *(_QWORD *)(v161 + 16) = v153;
                            v154 = *(_QWORD **)(v153 + 16);
                          }
                          v160[2] = (uint64_t)v154;
                          *(_QWORD *)(*(_QWORD *)(v153 + 16) + 8 * (**(_QWORD **)(v153 + 16) != v153)) = v160;
                          *v160 = v153;
                          *(_QWORD *)(v153 + 16) = v160;
                          v154 = (_QWORD *)v160[2];
                          v153 = *v154;
                          *((_BYTE *)v160 + 24) = 1;
                          *((_BYTE *)v154 + 24) = 0;
                          v162 = *(_QWORD *)(v153 + 8);
                          *v154 = v162;
                          if (v162)
LABEL_251:
                            *(_QWORD *)(v162 + 16) = v154;
                        }
                        *(_QWORD *)(v153 + 16) = v154[2];
                        *(_QWORD *)(v154[2] + 8 * (*(_QWORD *)v154[2] != (_QWORD)v154)) = v153;
                        *(_QWORD *)(v153 + 8) = v154;
LABEL_257:
                        v154[2] = v153;
                        break;
                      }
                    }
                    else if (!v155 || (v157 = *(unsigned __int8 *)(v155 + 24), v156 = (_BYTE *)(v155 + 24), v157))
                    {
                      if (*(_QWORD **)v153 == v151)
                      {
                        v217 = v151[1];
                        *(_QWORD *)v153 = v217;
                        if (v217)
                        {
                          *(_QWORD *)(v217 + 16) = v153;
                          v154 = *(_QWORD **)(v153 + 16);
                        }
                        v151[2] = v154;
                        *(_QWORD *)(*(_QWORD *)(v153 + 16) + 8 * (**(_QWORD **)(v153 + 16) != v153)) = v151;
                        v151[1] = v153;
                        *(_QWORD *)(v153 + 16) = v151;
                        v154 = (_QWORD *)v151[2];
                        *((_BYTE *)v151 + 24) = 1;
                        *((_BYTE *)v154 + 24) = 0;
                        v153 = v154[1];
                        v163 = *(_QWORD **)v153;
                        v154[1] = *(_QWORD *)v153;
                        if (v163)
LABEL_255:
                          v163[2] = v154;
                      }
                      else
                      {
                        *(_BYTE *)(v153 + 24) = 1;
                        *((_BYTE *)v154 + 24) = 0;
                        v153 = v154[1];
                        v163 = *(_QWORD **)v153;
                        v154[1] = *(_QWORD *)v153;
                        if (v163)
                          goto LABEL_255;
                      }
                      *(_QWORD *)(v153 + 16) = v154[2];
                      *(_QWORD *)(v154[2] + 8 * (*(_QWORD *)v154[2] != (_QWORD)v154)) = v153;
                      *(_QWORD *)v153 = v154;
                      goto LABEL_257;
                    }
                    *(_BYTE *)(v153 + 24) = 1;
                    v151 = v154;
                    *((_BYTE *)v154 + 24) = v154 == v152;
                    *v156 = 1;
                  }
                  while (v154 != v152);
                }
                ++v313;
LABEL_259:
                v142 = *v44;
                v302 = *v300;
LABEL_260:
                v164 = v45 + 72 * v46;
                v165 = *(_QWORD *)(v164 + 16);
                v297 = *(_OWORD *)(v164 + 32);
                v299 = *(_OWORD *)(v164 + 48);
                v166 = *(_QWORD *)(v164 + 64);
                v167 = v312;
                v168 = &v312;
LABEL_262:
                v169 = v168;
                if (!v167)
                {
LABEL_267:
                  v21 = operator new(0x30uLL);
                  v21[4] = v55;
                  v21[5] = 0;
                  *v21 = 0;
                  v21[1] = 0;
                  v21[2] = v168;
                  *v169 = v21;
                  v171 = v21;
                  if (*v311)
                  {
                    v311 = (_QWORD *)*v311;
                    v171 = (_QWORD *)*v169;
                  }
                  v172 = v312;
                  *((_BYTE *)v171 + 24) = v171 == v312;
                  if (v171 != v172)
                  {
                    do
                    {
                      v173 = v171[2];
                      if (*(_BYTE *)(v173 + 24))
                        break;
                      v174 = *(_QWORD **)(v173 + 16);
                      v175 = *v174;
                      if (*v174 == v173)
                      {
                        v178 = v174[1];
                        if (!v178 || (v179 = *(unsigned __int8 *)(v178 + 24), v176 = (_BYTE *)(v178 + 24), v179))
                        {
                          if (*(_QWORD **)v173 == v171)
                          {
                            *(_BYTE *)(v173 + 24) = 1;
                            *((_BYTE *)v174 + 24) = 0;
                            v182 = *(_QWORD *)(v173 + 8);
                            *v174 = v182;
                            if (v182)
                              goto LABEL_283;
                          }
                          else
                          {
                            v180 = *(uint64_t **)(v173 + 8);
                            v181 = *v180;
                            *(_QWORD *)(v173 + 8) = *v180;
                            if (v181)
                            {
                              *(_QWORD *)(v181 + 16) = v173;
                              v174 = *(_QWORD **)(v173 + 16);
                            }
                            v180[2] = (uint64_t)v174;
                            *(_QWORD *)(*(_QWORD *)(v173 + 16) + 8 * (**(_QWORD **)(v173 + 16) != v173)) = v180;
                            *v180 = v173;
                            *(_QWORD *)(v173 + 16) = v180;
                            v174 = (_QWORD *)v180[2];
                            v173 = *v174;
                            *((_BYTE *)v180 + 24) = 1;
                            *((_BYTE *)v174 + 24) = 0;
                            v182 = *(_QWORD *)(v173 + 8);
                            *v174 = v182;
                            if (v182)
LABEL_283:
                              *(_QWORD *)(v182 + 16) = v174;
                          }
                          *(_QWORD *)(v173 + 16) = v174[2];
                          *(_QWORD *)(v174[2] + 8 * (*(_QWORD *)v174[2] != (_QWORD)v174)) = v173;
                          *(_QWORD *)(v173 + 8) = v174;
LABEL_315:
                          v174[2] = v173;
                          break;
                        }
                      }
                      else if (!v175 || (v177 = *(unsigned __int8 *)(v175 + 24), v176 = (_BYTE *)(v175 + 24), v177))
                      {
                        if (*(_QWORD **)v173 == v171)
                        {
                          v204 = v171[1];
                          *(_QWORD *)v173 = v204;
                          if (v204)
                          {
                            *(_QWORD *)(v204 + 16) = v173;
                            v174 = *(_QWORD **)(v173 + 16);
                          }
                          v171[2] = v174;
                          *(_QWORD *)(*(_QWORD *)(v173 + 16) + 8 * (**(_QWORD **)(v173 + 16) != v173)) = v171;
                          v171[1] = v173;
                          *(_QWORD *)(v173 + 16) = v171;
                          v174 = (_QWORD *)v171[2];
                          *((_BYTE *)v171 + 24) = 1;
                          *((_BYTE *)v174 + 24) = 0;
                          v173 = v174[1];
                          v199 = *(_QWORD **)v173;
                          v174[1] = *(_QWORD *)v173;
                          if (v199)
LABEL_313:
                            v199[2] = v174;
                        }
                        else
                        {
                          *(_BYTE *)(v173 + 24) = 1;
                          *((_BYTE *)v174 + 24) = 0;
                          v173 = v174[1];
                          v199 = *(_QWORD **)v173;
                          v174[1] = *(_QWORD *)v173;
                          if (v199)
                            goto LABEL_313;
                        }
                        *(_QWORD *)(v173 + 16) = v174[2];
                        *(_QWORD *)(v174[2] + 8 * (*(_QWORD *)v174[2] != (_QWORD)v174)) = v173;
                        *(_QWORD *)v173 = v174;
                        goto LABEL_315;
                      }
                      *(_BYTE *)(v173 + 24) = 1;
                      v171 = v174;
                      *((_BYTE *)v174 + 24) = v174 == v172;
                      *v176 = 1;
                    }
                    while (v174 != v172);
                  }
                  ++v313;
                  v21[5] = 1;
                  if (!v54)
                    goto LABEL_286;
LABEL_317:
                  v201 = v321;
                  v200 = v322;
                  if (v321 >= v322)
                    goto LABEL_333;
                  goto LABEL_318;
                }
                while (1)
                {
                  v168 = (_QWORD **)v167;
                  v170 = v167[4];
                  if (v55 < v170)
                  {
                    v167 = *v168;
                    goto LABEL_262;
                  }
                  if (v170 >= v55)
                    break;
                  v167 = v168[1];
                  if (!v167)
                  {
                    v169 = v168 + 1;
                    goto LABEL_267;
                  }
                }
                v21 = v168;
                v168[5] = (_QWORD *)((char *)v168[5] + 1);
                if (v54)
                  goto LABEL_317;
LABEL_286:
                v183 = v315;
                v184 = &v315;
                v185 = &v315;
                if (v315)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v185 = (_QWORD **)v183;
                      v186 = v183[4];
                      if (v55 >= v186)
                        break;
                      v183 = *v185;
                      v184 = v185;
                      if (!*v185)
                        goto LABEL_293;
                    }
                    if (v186 >= v55)
                      break;
                    v183 = v185[1];
                    if (!v183)
                    {
                      v184 = v185 + 1;
                      goto LABEL_293;
                    }
                  }
                  v21 = v185;
                  *((_BYTE *)v185 + 40) = 1;
                  v201 = v321;
                  v200 = v322;
                  if (v321 < v322)
                    goto LABEL_318;
LABEL_333:
                  v143 = v320;
                  v206 = 0x8E38E38E38E38E39 * ((v201 - v320) >> 3) + 1;
                  if (v206 > 0x38E38E38E38E38ELL)
                    sub_1BE61F930();
                  v207 = 0x8E38E38E38E38E39 * ((v200 - v320) >> 3);
                  if (2 * v207 > v206)
                    v206 = 2 * v207;
                  if (v207 >= 0x1C71C71C71C71C7)
                    v146 = 0x38E38E38E38E38ELL;
                  else
                    v146 = v206;
                  if (v146 > 0x38E38E38E38E38ELL)
                    sub_1BE61F100();
                  v21 = operator new(72 * v146);
                  v147 = &v21[(v201 - v143) >> 3];
                  *v147 = v142;
                  v147[1] = v55;
                  v147[2] = v165;
                  v147[3] = v302;
                  *((_OWORD *)v147 + 2) = v297;
                  *((_OWORD *)v147 + 3) = v299;
                  v147[8] = v166;
                  if (v201 != v143)
                  {
                    v149 = 0;
                    do
                    {
                      v208 = (char *)&v147[v149 / 8];
                      *(_OWORD *)(v208 - 72) = *(_OWORD *)&v201[v149 - 72];
                      *(_OWORD *)(v208 - 56) = *(_OWORD *)&v201[v149 - 56];
                      *(_OWORD *)(v208 - 40) = *(_OWORD *)&v201[v149 - 40];
                      *(_OWORD *)(v208 - 24) = *(_OWORD *)&v201[v149 - 24];
                      *((_QWORD *)v208 - 1) = *(_QWORD *)&v201[v149 - 8];
                      v149 -= 72;
                    }
                    while (&v201[v149] != v143);
                    goto LABEL_343;
                  }
LABEL_358:
                  v141 = (char *)(v147 + 9);
                  v320 = (char *)v147;
                  v321 = (char *)(v147 + 9);
                  v322 = (char *)&v21[9 * v146];
                  if (!v143)
                    goto LABEL_345;
                  goto LABEL_344;
                }
LABEL_293:
                v21 = operator new(0x30uLL);
                v21[4] = v55;
                *((_BYTE *)v21 + 40) = 0;
                *v21 = 0;
                v21[1] = 0;
                v21[2] = v185;
                *v184 = v21;
                v187 = v21;
                if (*v314)
                {
                  v314 = (_QWORD *)*v314;
                  v187 = (_QWORD *)*v184;
                }
                v188 = v315;
                *((_BYTE *)v187 + 24) = v187 == v315;
                if (v187 != v188)
                {
                  do
                  {
                    v189 = v187[2];
                    if (*(_BYTE *)(v189 + 24))
                      break;
                    v190 = *(_QWORD **)(v189 + 16);
                    v191 = *v190;
                    if (*v190 == v189)
                    {
                      v194 = v190[1];
                      if (!v194 || (v195 = *(unsigned __int8 *)(v194 + 24), v192 = (_BYTE *)(v194 + 24), v195))
                      {
                        if (*(_QWORD **)v189 == v187)
                        {
                          *(_BYTE *)(v189 + 24) = 1;
                          *((_BYTE *)v190 + 24) = 0;
                          v198 = *(_QWORD *)(v189 + 8);
                          *v190 = v198;
                          if (v198)
                            goto LABEL_309;
                        }
                        else
                        {
                          v196 = *(uint64_t **)(v189 + 8);
                          v197 = *v196;
                          *(_QWORD *)(v189 + 8) = *v196;
                          if (v197)
                          {
                            *(_QWORD *)(v197 + 16) = v189;
                            v190 = *(_QWORD **)(v189 + 16);
                          }
                          v196[2] = (uint64_t)v190;
                          *(_QWORD *)(*(_QWORD *)(v189 + 16) + 8 * (**(_QWORD **)(v189 + 16) != v189)) = v196;
                          *v196 = v189;
                          *(_QWORD *)(v189 + 16) = v196;
                          v190 = (_QWORD *)v196[2];
                          v189 = *v190;
                          *((_BYTE *)v196 + 24) = 1;
                          *((_BYTE *)v190 + 24) = 0;
                          v198 = *(_QWORD *)(v189 + 8);
                          *v190 = v198;
                          if (v198)
LABEL_309:
                            *(_QWORD *)(v198 + 16) = v190;
                        }
                        *(_QWORD *)(v189 + 16) = v190[2];
                        *(_QWORD *)(v190[2] + 8 * (*(_QWORD *)v190[2] != (_QWORD)v190)) = v189;
                        *(_QWORD *)(v189 + 8) = v190;
LABEL_331:
                        v190[2] = v189;
                        break;
                      }
                    }
                    else if (!v191 || (v193 = *(unsigned __int8 *)(v191 + 24), v192 = (_BYTE *)(v191 + 24), v193))
                    {
                      if (*(_QWORD **)v189 == v187)
                      {
                        v220 = v187[1];
                        *(_QWORD *)v189 = v220;
                        if (v220)
                        {
                          *(_QWORD *)(v220 + 16) = v189;
                          v190 = *(_QWORD **)(v189 + 16);
                        }
                        v187[2] = v190;
                        *(_QWORD *)(*(_QWORD *)(v189 + 16) + 8 * (**(_QWORD **)(v189 + 16) != v189)) = v187;
                        v187[1] = v189;
                        *(_QWORD *)(v189 + 16) = v187;
                        v190 = (_QWORD *)v187[2];
                        *((_BYTE *)v187 + 24) = 1;
                        *((_BYTE *)v190 + 24) = 0;
                        v189 = v190[1];
                        v205 = *(_QWORD **)v189;
                        v190[1] = *(_QWORD *)v189;
                        if (v205)
LABEL_329:
                          v205[2] = v190;
                      }
                      else
                      {
                        *(_BYTE *)(v189 + 24) = 1;
                        *((_BYTE *)v190 + 24) = 0;
                        v189 = v190[1];
                        v205 = *(_QWORD **)v189;
                        v190[1] = *(_QWORD *)v189;
                        if (v205)
                          goto LABEL_329;
                      }
                      *(_QWORD *)(v189 + 16) = v190[2];
                      *(_QWORD *)(v190[2] + 8 * (*(_QWORD *)v190[2] != (_QWORD)v190)) = v189;
                      *(_QWORD *)v189 = v190;
                      goto LABEL_331;
                    }
                    *(_BYTE *)(v189 + 24) = 1;
                    v187 = v190;
                    *((_BYTE *)v190 + 24) = v190 == v188;
                    *v192 = 1;
                  }
                  while (v190 != v188);
                }
                ++v316;
                *((_BYTE *)v21 + 40) = 1;
                v201 = v321;
                v200 = v322;
                if (v321 >= v322)
                  goto LABEL_333;
LABEL_318:
                *(_QWORD *)v201 = v142;
                *((_QWORD *)v201 + 1) = v55;
                *((_QWORD *)v201 + 2) = v165;
                *((_QWORD *)v201 + 3) = v302;
                *((_OWORD *)v201 + 2) = v297;
                *((_OWORD *)v201 + 3) = v299;
                *((_QWORD *)v201 + 8) = v166;
                v321 = v201 + 72;
LABEL_319:
                v202 = v306;
                v3 = this;
                v35 = v289;
                v203 = v292;
                if (!v306)
                {
LABEL_354:
                  v214 = (char *)__p[1];
                  v215 = (((_QWORD)v309 - (unint64_t)__p[1]) << 6) - 1;
                  if ((void *)v309 == __p[1])
                    v215 = 0;
                  v216 = *((_QWORD *)&v310 + 1) + v310;
                  if (v215 == *((_QWORD *)&v310 + 1) + (_QWORD)v310)
                  {
                    sub_1BE6A3E70((uint64_t)__p);
                    v214 = (char *)__p[1];
                    v216 = *((_QWORD *)&v310 + 1) + v310;
                  }
                  *(_QWORD *)(*(_QWORD *)&v214[(v216 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v216 & 0x1FF)) = v203;
                  ++*((_QWORD *)&v310 + 1);
                  goto LABEL_58;
                }
LABEL_346:
                v209 = &v306;
                do
                {
                  v210 = v202;
                  v211 = v209;
                  v212 = v202[4];
                  v213 = v202 + 1;
                  if (v212 >= v203)
                  {
                    v213 = v210;
                    v209 = (_QWORD **)v210;
                  }
                  v202 = (_QWORD *)*v213;
                }
                while (v202);
                if (v209 == &v306)
                  goto LABEL_354;
                if (v212 < v203)
                  v210 = v211;
                if (v203 < v210[4])
                  goto LABEL_354;
LABEL_58:
                v43 = v291 + 1;
                v42 = *v290;
                if ((unint64_t)(v291 + 1) >= *((_QWORD *)*v290 + 5 * v35 + 1))
                {
                  v36 = v306;
                  v4 = v285;
                  v5 = v290 + 4;
                  break;
                }
              }
            }
            v221 = &v306;
LABEL_377:
            v222 = v221;
            if (v36)
            {
              do
              {
                v221 = (_QWORD **)v36;
                v223 = v36[4];
                if (v35 < v223)
                {
                  v36 = *v221;
                  goto LABEL_377;
                }
                if (v223 >= v35)
                  goto LABEL_42;
                v36 = v221[1];
              }
              while (v36);
              v222 = v221 + 1;
            }
            v21 = operator new(0x28uLL);
            v21[4] = v35;
            *v21 = 0;
            v21[1] = 0;
            v21[2] = v221;
            *v222 = v21;
            if (*v305)
            {
              v305 = (_QWORD *)*v305;
              v21 = (_QWORD *)*v222;
            }
            v224 = v306;
            v30 = v21 == v306;
            *((_BYTE *)v21 + 24) = v21 == v306;
            if (!v30)
            {
              do
              {
                v225 = v21[2];
                if (*(_BYTE *)(v225 + 24))
                  break;
                v226 = *(_QWORD **)(v225 + 16);
                v227 = *v226;
                if (*v226 == v225)
                {
                  v230 = v226[1];
                  if (!v230 || (v231 = *(unsigned __int8 *)(v230 + 24), v228 = (_BYTE *)(v230 + 24), v231))
                  {
                    if (*(_QWORD **)v225 == v21)
                    {
                      *(_BYTE *)(v225 + 24) = 1;
                      *((_BYTE *)v226 + 24) = 0;
                      v234 = *(_QWORD *)(v225 + 8);
                      *v226 = v234;
                      if (v234)
                        goto LABEL_399;
                    }
                    else
                    {
                      v232 = *(uint64_t **)(v225 + 8);
                      v233 = *v232;
                      *(_QWORD *)(v225 + 8) = *v232;
                      if (v233)
                      {
                        *(_QWORD *)(v233 + 16) = v225;
                        v226 = *(_QWORD **)(v225 + 16);
                      }
                      v232[2] = (uint64_t)v226;
                      *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8 * (**(_QWORD **)(v225 + 16) != v225)) = v232;
                      *v232 = v225;
                      *(_QWORD *)(v225 + 16) = v232;
                      v226 = (_QWORD *)v232[2];
                      v225 = *v226;
                      *((_BYTE *)v232 + 24) = 1;
                      *((_BYTE *)v226 + 24) = 0;
                      v234 = *(_QWORD *)(v225 + 8);
                      *v226 = v234;
                      if (v234)
LABEL_399:
                        *(_QWORD *)(v234 + 16) = v226;
                    }
                    *(_QWORD *)(v225 + 16) = v226[2];
                    *(_QWORD *)(v226[2] + 8 * (*(_QWORD *)v226[2] != (_QWORD)v226)) = v225;
                    *(_QWORD *)(v225 + 8) = v226;
LABEL_40:
                    v226[2] = v225;
                    break;
                  }
                }
                else if (!v227 || (v229 = *(unsigned __int8 *)(v227 + 24), v228 = (_BYTE *)(v227 + 24), v229))
                {
                  if (*(_QWORD **)v225 == v21)
                  {
                    v236 = v21[1];
                    *(_QWORD *)v225 = v236;
                    if (v236)
                    {
                      *(_QWORD *)(v236 + 16) = v225;
                      v226 = *(_QWORD **)(v225 + 16);
                    }
                    v21[2] = v226;
                    *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8 * (**(_QWORD **)(v225 + 16) != v225)) = v21;
                    v21[1] = v225;
                    *(_QWORD *)(v225 + 16) = v21;
                    v226 = (_QWORD *)v21[2];
                    *((_BYTE *)v21 + 24) = 1;
                    *((_BYTE *)v226 + 24) = 0;
                    v225 = v226[1];
                    v235 = *(_QWORD **)v225;
                    v226[1] = *(_QWORD *)v225;
                    if (!v235)
                      goto LABEL_39;
                  }
                  else
                  {
                    v21 = (_QWORD *)v21[2];
                    *(_BYTE *)(v225 + 24) = 1;
                    *((_BYTE *)v226 + 24) = 0;
                    v225 = v226[1];
                    v235 = *(_QWORD **)v225;
                    v226[1] = *(_QWORD *)v225;
                    if (!v235)
                      goto LABEL_39;
                  }
                  v235[2] = v226;
LABEL_39:
                  *(_QWORD *)(v225 + 16) = v226[2];
                  *(_QWORD *)(v226[2] + 8 * (*(_QWORD *)v226[2] != (_QWORD)v226)) = v225;
                  *(_QWORD *)v225 = v226;
                  goto LABEL_40;
                }
                *(_BYTE *)(v225 + 24) = 1;
                v21 = v226;
                *((_BYTE *)v226 + 24) = v226 == v224;
                *v228 = 1;
              }
              while (v226 != v224);
            }
            ++v307;
          }
LABEL_42:
          v23 = *((_QWORD *)&v310 + 1);
        }
        while (*((_QWORD *)&v310 + 1));
      }
      v31 = *((_QWORD *)v3 + 4);
      v32 = *((_QWORD *)v3 + 5);
      if (v32 != v31)
      {
        *((_QWORD *)v3 + 5) = v31;
        v32 = v31;
      }
      v33 = *((_QWORD *)v3 + 10);
      if (*((_QWORD *)v3 + 11) != v33)
        *((_QWORD *)v3 + 11) = v33;
      *((_QWORD *)v3 + 14) = *((_QWORD *)v3 + 13);
      v34 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - v31) >> 3);
      if (v284 <= v34)
      {
        if (v284 < v34)
          *((_QWORD *)v3 + 5) = v31 + 40 * v284;
      }
      else
      {
        sub_1BE66CE80(v290, v284 - v34);
      }
      sub_1BE828388((uint64_t)v21, (uint64_t)&v320);
      v237 = v320;
      v238 = v321;
      if (v320 != v321)
      {
        v239 = (char *)*((_QWORD *)v3 + 11);
        do
        {
          while (1)
          {
            v240 = *((_QWORD *)v3 + 12);
            if ((unint64_t)v239 >= v240)
              break;
            *(_OWORD *)v239 = *v237;
            *((_OWORD *)v239 + 1) = v237[1];
            *((_OWORD *)v239 + 2) = v237[2];
            *((_OWORD *)v239 + 3) = v237[3];
            *((_QWORD *)v239 + 8) = *((_QWORD *)v237 + 8);
            v239 += 72;
            *((_QWORD *)v3 + 11) = v239;
            v237 = (_OWORD *)((char *)v237 + 72);
            if (v237 == (_OWORD *)v238)
              goto LABEL_432;
          }
          v241 = (char *)*v286;
          v242 = 0x8E38E38E38E38E39 * ((v239 - (_BYTE *)*v286) >> 3);
          v243 = v242 + 1;
          if (v242 + 1 > 0x38E38E38E38E38ELL)
            sub_1BE61F930();
          v244 = 0x8E38E38E38E38E39 * ((uint64_t)(v240 - (_QWORD)v241) >> 3);
          if (2 * v244 > v243)
            v243 = 2 * v244;
          if (v244 >= 0x1C71C71C71C71C7)
            v245 = 0x38E38E38E38E38ELL;
          else
            v245 = v243;
          if (v245 > 0x38E38E38E38E38ELL)
            sub_1BE61F100();
          v246 = (char *)operator new(72 * v245);
          v247 = &v246[72 * v242];
          *(_OWORD *)v247 = *v237;
          *((_OWORD *)v247 + 1) = v237[1];
          *((_OWORD *)v247 + 2) = v237[2];
          *((_OWORD *)v247 + 3) = v237[3];
          *((_QWORD *)v247 + 8) = *((_QWORD *)v237 + 8);
          if (v239 == v241)
          {
            v5 = v290 + 4;
            v239 = v247 + 72;
            *((_QWORD *)v3 + 10) = v247;
            *((_QWORD *)v3 + 11) = v247 + 72;
            *((_QWORD *)v3 + 12) = &v246[72 * v245];
            if (!v241)
              goto LABEL_428;
          }
          else
          {
            v248 = 0;
            v5 = v290 + 4;
            do
            {
              v249 = &v247[v248];
              *(_OWORD *)(v249 - 72) = *(_OWORD *)&v239[v248 - 72];
              *(_OWORD *)(v249 - 56) = *(_OWORD *)&v239[v248 - 56];
              *(_OWORD *)(v249 - 40) = *(_OWORD *)&v239[v248 - 40];
              *(_OWORD *)(v249 - 24) = *(_OWORD *)&v239[v248 - 24];
              *((_QWORD *)v249 - 1) = *(_QWORD *)&v239[v248 - 8];
              v248 -= 72;
            }
            while (&v239[v248] != v241);
            v239 = v247 + 72;
            *((_QWORD *)v3 + 10) = &v247[v248];
            *((_QWORD *)v3 + 11) = v247 + 72;
            *((_QWORD *)v3 + 12) = &v246[72 * v245];
            if (!v241)
              goto LABEL_428;
          }
          operator delete(v241);
LABEL_428:
          *((_QWORD *)v3 + 11) = v239;
          v237 = (_OWORD *)((char *)v237 + 72);
        }
        while (v237 != (_OWORD *)v238);
      }
LABEL_432:
      Network::prepareNetwork(v3);
      v250 = v303;
      if (v303 != v4)
      {
        do
        {
          v256 = v250[4];
          v257 = (_QWORD *)*v5;
          v258 = v5;
          v259 = v5;
          if (*v5)
          {
            while (1)
            {
              while (1)
              {
                v259 = v257;
                v260 = v257[4];
                if (v260 <= v256)
                  break;
                v257 = (_QWORD *)*v259;
                v258 = v259;
                if (!*v259)
                  goto LABEL_446;
              }
              if (v260 >= v256)
                break;
              v257 = (_QWORD *)v259[1];
              if (!v257)
              {
                v258 = v259 + 1;
                goto LABEL_446;
              }
            }
          }
          else
          {
LABEL_446:
            v261 = operator new(0x28uLL);
            v261[4] = v256;
            *v261 = 0;
            v261[1] = 0;
            v261[2] = v259;
            *v258 = v261;
            v262 = **((_QWORD **)v3 + 7);
            if (v262)
            {
              *((_QWORD *)v3 + 7) = v262;
              v261 = (_QWORD *)*v258;
            }
            v263 = (_BYTE *)*v5;
            v30 = v261 == (_QWORD *)*v5;
            *((_BYTE *)v261 + 24) = v30;
            if (!v30)
            {
              do
              {
                v264 = v261[2];
                if (*(_BYTE *)(v264 + 24))
                  break;
                v265 = *(_BYTE **)(v264 + 16);
                v266 = *(_QWORD *)v265;
                if (*(_QWORD *)v265 == v264)
                {
                  v269 = *((_QWORD *)v265 + 1);
                  if (!v269 || (v270 = *(unsigned __int8 *)(v269 + 24), v267 = (_BYTE *)(v269 + 24), v270))
                  {
                    if (*(_QWORD **)v264 == v261)
                    {
                      *(_BYTE *)(v264 + 24) = 1;
                      v265[24] = 0;
                      v273 = *(_QWORD *)(v264 + 8);
                      *(_QWORD *)v265 = v273;
                      if (v273)
                        goto LABEL_463;
                    }
                    else
                    {
                      v271 = *(uint64_t **)(v264 + 8);
                      v272 = *v271;
                      *(_QWORD *)(v264 + 8) = *v271;
                      if (v272)
                      {
                        *(_QWORD *)(v272 + 16) = v264;
                        v265 = *(_BYTE **)(v264 + 16);
                      }
                      v271[2] = (uint64_t)v265;
                      *(_QWORD *)(*(_QWORD *)(v264 + 16) + 8 * (**(_QWORD **)(v264 + 16) != v264)) = v271;
                      *v271 = v264;
                      *(_QWORD *)(v264 + 16) = v271;
                      v265 = (_BYTE *)v271[2];
                      v264 = *(_QWORD *)v265;
                      *((_BYTE *)v271 + 24) = 1;
                      v265[24] = 0;
                      v273 = *(_QWORD *)(v264 + 8);
                      *(_QWORD *)v265 = v273;
                      if (v273)
LABEL_463:
                        *(_QWORD *)(v273 + 16) = v265;
                    }
                    *(_QWORD *)(v264 + 16) = *((_QWORD *)v265 + 2);
                    *(_QWORD *)(*((_QWORD *)v265 + 2) + 8 * (**((_QWORD **)v265 + 2) != (_QWORD)v265)) = v264;
                    *(_QWORD *)(v264 + 8) = v265;
LABEL_469:
                    *((_QWORD *)v265 + 2) = v264;
                    break;
                  }
                }
                else if (!v266 || (v268 = *(unsigned __int8 *)(v266 + 24), v267 = (_BYTE *)(v266 + 24), v268))
                {
                  if (*(_QWORD **)v264 == v261)
                  {
                    v278 = v261[1];
                    *(_QWORD *)v264 = v278;
                    if (v278)
                    {
                      *(_QWORD *)(v278 + 16) = v264;
                      v265 = *(_BYTE **)(v264 + 16);
                    }
                    v261[2] = v265;
                    *(_QWORD *)(*(_QWORD *)(v264 + 16) + 8 * (**(_QWORD **)(v264 + 16) != v264)) = v261;
                    v261[1] = v264;
                    *(_QWORD *)(v264 + 16) = v261;
                    v265 = (_BYTE *)v261[2];
                    *((_BYTE *)v261 + 24) = 1;
                    v265[24] = 0;
                    v264 = *((_QWORD *)v265 + 1);
                    v274 = *(_QWORD **)v264;
                    *((_QWORD *)v265 + 1) = *(_QWORD *)v264;
                    if (v274)
LABEL_467:
                      v274[2] = v265;
                  }
                  else
                  {
                    *(_BYTE *)(v264 + 24) = 1;
                    v265[24] = 0;
                    v264 = *((_QWORD *)v265 + 1);
                    v274 = *(_QWORD **)v264;
                    *((_QWORD *)v265 + 1) = *(_QWORD *)v264;
                    if (v274)
                      goto LABEL_467;
                  }
                  *(_QWORD *)(v264 + 16) = *((_QWORD *)v265 + 2);
                  *(_QWORD *)(*((_QWORD *)v265 + 2) + 8 * (**((_QWORD **)v265 + 2) != (_QWORD)v265)) = v264;
                  *(_QWORD *)v264 = v265;
                  goto LABEL_469;
                }
                *(_BYTE *)(v264 + 24) = 1;
                v261 = v265;
                v265[24] = v265 == v263;
                *v267 = 1;
              }
              while (v265 != v263);
            }
            ++*((_QWORD *)v3 + 9);
          }
          v275 = *((_QWORD *)v3 + 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v3 + 5) - v275) >> 3) >= v256)
            *(_BYTE *)(v275 + 40 * v256 + 32) = 1;
          v276 = (_QWORD *)v250[1];
          if (v276)
          {
            do
            {
              v277 = v276;
              v276 = (_QWORD *)*v276;
            }
            while (v276);
          }
          else
          {
            do
            {
              v277 = (_QWORD *)v250[2];
              v30 = *v277 == (_QWORD)v250;
              v250 = v277;
            }
            while (!v30);
          }
          v250 = v277;
        }
        while (v277 != v4);
      }
      sub_1BE62033C((uint64_t)&v303, v304);
      sub_1BE62033C((uint64_t)&v305, v306);
      v251 = (void **)__p[1];
      v252 = (void **)v309;
      *((_QWORD *)&v310 + 1) = 0;
      v253 = v309 - (unint64_t)__p[1];
      if ((unint64_t)v309 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          operator delete(*v251);
          v252 = (void **)v309;
          v251 = (void **)((char *)__p[1] + 8);
          __p[1] = v251;
          v253 = v309 - (_QWORD)v251;
        }
        while ((_QWORD)v309 - (_QWORD)v251 > 0x10uLL);
      }
      v254 = v253 >> 3;
      if (v254 == 1)
      {
        v255 = 256;
      }
      else
      {
        if (v254 != 2)
          goto LABEL_487;
        v255 = 512;
      }
      *(_QWORD *)&v310 = v255;
LABEL_487:
      if (v251 != v252)
      {
        do
        {
          v279 = *v251++;
          operator delete(v279);
        }
        while (v251 != v252);
        if ((void *)v309 != __p[1])
          *(_QWORD *)&v309 = v309 + (((unint64_t)__p[1] - v309 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (__p[0])
        operator delete(__p[0]);
      sub_1BE62033C((uint64_t)&v311, v312);
      sub_1BE671438(v315);
      if (v319)
      {
        v281 = v317;
        v280 = v318;
        v282 = *v318;
        *(_QWORD *)(v282 + 8) = v317[1];
        *(_QWORD *)v281[1] = v282;
        v319 = 0;
        if (v280 != &v317)
        {
          do
          {
            v283 = (_QWORD *)v280[1];
            operator delete(v280);
            v280 = v283;
          }
          while (v283 != &v317);
        }
      }
      if (v320)
      {
        v321 = v320;
        operator delete(v320);
      }
      v1 = *((_QWORD *)v3 + 4);
      v2 = *((_QWORD *)v3 + 5) - v1;
    }
    while (v2);
  }
}

void sub_1BE82561C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,_QWORD *a32,uint64_t a33,char a34,_QWORD *a35,uint64_t a36,void *__p,void **a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  void **v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  void *v54;

  sub_1BE62033C((uint64_t)&a31, a32);
  sub_1BE62033C((uint64_t)&a34, a35);
  v44 = a38;
  v45 = (uint64_t)a39;
  a42 = 0;
  v46 = (char *)a39 - (char *)a38;
  if ((unint64_t)((char *)a39 - (char *)a38) >= 0x11)
  {
    do
    {
      operator delete(*v44);
      v45 = (uint64_t)a39;
      v44 = a38 + 1;
      a38 = v44;
      v46 = (char *)a39 - (char *)v44;
    }
    while ((unint64_t)((char *)a39 - (char *)v44) > 0x10);
  }
  v47 = v46 >> 3;
  if (v47 == 1)
  {
    v48 = 256;
  }
  else
  {
    if (v47 != 2)
    {
LABEL_8:
      if (v44 != (void **)v45)
      {
        do
        {
          v49 = *v44++;
          operator delete(v49);
        }
        while (v44 != (void **)v45);
        if (a39 != a38)
          a39 = (void **)((char *)a39 + (((char *)a38 - (char *)a39 + 7) & 0xFFFFFFFFFFFFFFF8));
      }
      if (__p)
        operator delete(__p);
      sub_1BE62033C(v42 - 184, *(_QWORD **)(v42 - 176));
      sub_1BE671438(*(_QWORD **)(v42 - 152));
      if (*(_QWORD *)(v42 - 120))
      {
        v51 = *(_QWORD *)(v42 - 136);
        v50 = *(uint64_t **)(v42 - 128);
        v52 = *v50;
        *(_QWORD *)(v52 + 8) = *(_QWORD *)(v51 + 8);
        **(_QWORD **)(v51 + 8) = v52;
        *(_QWORD *)(v42 - 120) = 0;
        if (v50 != (uint64_t *)(v42 - 136))
        {
          do
          {
            v53 = (uint64_t *)v50[1];
            operator delete(v50);
            v50 = v53;
          }
          while (v53 != (uint64_t *)(v42 - 136));
        }
      }
      v54 = *(void **)(v42 - 112);
      if (v54)
      {
        *(_QWORD *)(v42 - 104) = v54;
        operator delete(v54);
      }
      _Unwind_Resume(a1);
    }
    v48 = 512;
  }
  a41 = v48;
  goto LABEL_8;
}

void Network::removeEpsOutputEdges(Network *this, Network *a2, int a3)
{
  Network *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t **v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t **v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE *v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t **v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t **v110;
  uint64_t **v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t **v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  _BYTE *v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t **v132;
  uint64_t **v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _BYTE *v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  BOOL v158;
  unint64_t v159;
  uint64_t *v160;
  unsigned int v161;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  char *v170;
  char *v171;
  char *v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t *v180;
  uint64_t **v181;
  uint64_t **v182;
  uint64_t *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  _BYTE *v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t **v199;
  uint64_t **v200;
  uint64_t **v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t **v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  _BYTE *v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t **v222;
  uint64_t *v223;
  uint64_t **v224;
  unint64_t v225;
  uint64_t **v226;
  char *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t **v238;
  unint64_t v239;
  uint64_t *v240;
  _QWORD *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t **v244;
  uint64_t **v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  unint64_t v249;
  uint64_t **v250;
  uint64_t *v251;
  uint64_t **v252;
  unint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  unint64_t v258;
  uint64_t **v259;
  uint64_t **v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  unint64_t v264;
  _QWORD *v265;
  _QWORD **v266;
  unint64_t v267;
  uint64_t **v268;
  uint64_t *v269;
  char *v270;
  uint64_t *v271;
  uint64_t **v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t **v277;
  uint64_t **v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t **v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t **v289;
  unint64_t v290;
  uint64_t v291;
  BOOL v292;
  uint64_t *v293;
  unint64_t v294;
  char *v295;
  char *v296;
  unint64_t v297;
  uint64_t *v298;
  uint64_t *v299;
  unint64_t v300;
  uint64_t **v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t **v304;
  unint64_t v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  _QWORD *v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t *v313;
  unint64_t v314;
  BOOL v315;
  uint64_t **v316;
  uint64_t *v317;
  uint64_t *v318;
  uint64_t *v319;
  uint64_t *v320;
  char *v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t *v328;
  uint64_t **v329;
  uint64_t **v330;
  uint64_t **v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t **v334;
  unint64_t v335;
  uint64_t *v336;
  unint64_t v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t **v341;
  uint64_t **v342;
  uint64_t **v343;
  uint64_t *v344;
  uint64_t *v345;
  uint64_t **v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t **v353;
  uint64_t **v354;
  unint64_t v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t *v358;
  unint64_t v359;
  uint64_t **v360;
  uint64_t *v361;
  unint64_t v362;
  BOOL v363;
  uint64_t **v364;
  uint64_t *v365;
  uint64_t **v366;
  uint64_t **v367;
  unint64_t v368;
  uint64_t *v369;
  uint64_t *v370;
  uint64_t **v371;
  unint64_t v372;
  uint64_t **v373;
  unint64_t v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t **v379;
  uint64_t **v380;
  unint64_t v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t **v385;
  uint64_t **v386;
  uint64_t *v387;
  unint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t **v391;
  uint64_t **v392;
  unint64_t v393;
  uint64_t *v394;
  uint64_t *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t **v400;
  unint64_t v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t v404;
  char *v405;
  _OWORD *v406;
  Network *v407;
  char *v408;
  void **v409;
  void **v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  void *v414;
  void **v415;
  uint64_t **v416;
  uint64_t **v417;
  Network *v418;
  __int128 v419;
  Network *v420;
  int v421;
  unint64_t v422;
  unint64_t v423;
  _QWORD *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t **v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  void *__p[2];
  __int128 v434;
  __int128 v435;
  char *v436;
  char *v437;
  char *v438;
  _QWORD **v439;
  _QWORD *v440[2];
  uint64_t **v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t **v444;
  uint64_t *v445;
  uint64_t v446;
  char *v447;
  char *v448;
  char *v449;
  uint64_t v450;

  v5 = this;
  Network::guaranteeSingleEmptyIncomingEdgePerNode(this);
  v421 = a3;
  Network::pushWeightsFromEmptyEdges(v5, a3);
  v6 = (uint64_t **)((char *)a2 + 64);
  v416 = (uint64_t **)((char *)a2 + 56);
  sub_1BE62033C((uint64_t)a2 + 56, *((_QWORD **)a2 + 8));
  *((_QWORD *)a2 + 7) = (char *)a2 + 64;
  *((_QWORD *)a2 + 8) = 0;
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 9) = 0;
  v415 = (void **)((char *)a2 + 32);
  if (*((_QWORD *)a2 + 5) != v7)
    *((_QWORD *)a2 + 5) = v7;
  v418 = a2;
  v447 = 0;
  v448 = 0;
  v449 = 0;
  v9 = *((_QWORD *)v5 + 4);
  v8 = *((_QWORD *)v5 + 5);
  v445 = 0;
  v446 = 0;
  v443 = 0;
  v444 = &v445;
  v441 = &v442;
  v442 = 0;
  v440[0] = 0;
  v440[1] = 0;
  v439 = v440;
  sub_1BE66AAE8(&v439, *((_QWORD **)v5 + 7), (_QWORD *)v5 + 8);
  v436 = 0;
  v437 = 0;
  v438 = 0;
  if (v8 != v9)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3);
    if (v10 >> 61)
      sub_1BE61F930();
    v436 = (char *)operator new(8 * v10);
    v438 = &v436[8 * v10];
    bzero(v436, 8 * v10);
    v437 = v438;
  }
  v417 = v6;
  v434 = 0u;
  v435 = 0u;
  *(_OWORD *)__p = 0u;
  v431 = 0;
  v432 = 0;
  v430 = &v431;
  sub_1BE6A3E70((uint64_t)__p);
  v423 = 0;
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v435 + *((_QWORD *)&v435 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v435 + *((_QWORD *)&v435 + 1)) & 0x1FF)) = 0;
  v315 = __CFADD__(*((_QWORD *)&v435 + 1), 1);
  v11 = ++*((_QWORD *)&v435 + 1);
  if (!v315)
  {
    v423 = 0;
    v420 = v5;
    do
    {
      v28 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v435 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v435 & 0x1FF));
      *(_QWORD *)&v435 = v435 + 1;
      *((_QWORD *)&v435 + 1) = v11 - 1;
      if ((unint64_t)v435 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v435 = v435 - 512;
      }
      v29 = v431;
      if (!v431)
        goto LABEL_50;
      v30 = &v431;
      v31 = v431;
      do
      {
        v32 = v31;
        v33 = v30;
        v34 = v31[4];
        if (v34 >= v28)
          v30 = (uint64_t **)v31;
        else
          ++v31;
        v31 = (uint64_t *)*v31;
      }
      while (v31);
      if (v30 == &v431)
        goto LABEL_50;
      if (v34 < v28)
        v32 = (uint64_t *)v33;
      if (v28 < v32[4])
      {
LABEL_50:
        v35 = *((_QWORD *)v5 + 4);
        v422 = v28;
        if (*(_QWORD *)(v35 + 40 * v28))
        {
          v36 = 0;
          v37 = v422;
          while (1)
          {
            v38 = *(_QWORD *)(v35 + 40 * v37 + 16) + v36;
            v39 = *((_QWORD *)v5 + 10);
            v40 = (unint64_t *)(v39 + 72 * v38);
            v41 = *v40;
            v42 = v40[1];
            v44 = v40[3];
            v43 = v40 + 3;
            v45 = v445;
            if (v44)
            {
              v46 = &v445;
              v47 = &v445;
              if (!v445)
              {
LABEL_71:
                v55 = (uint64_t *)operator new(0x30uLL);
                v55[4] = v41;
                v55[5] = 0;
                *v55 = 0;
                v55[1] = 0;
                v55[2] = (uint64_t)v46;
                *v47 = v55;
                v56 = v55;
                if (*v444)
                {
                  v444 = (uint64_t **)*v444;
                  v56 = *v47;
                }
                v57 = v445;
                *((_BYTE *)v56 + 24) = v56 == v445;
                if (v56 != v57)
                {
                  do
                  {
                    v58 = v56[2];
                    if (*(_BYTE *)(v58 + 24))
                      break;
                    v59 = *(uint64_t **)(v58 + 16);
                    v60 = *v59;
                    if (*v59 == v58)
                    {
                      v63 = v59[1];
                      if (!v63 || (v64 = *(unsigned __int8 *)(v63 + 24), v61 = (_BYTE *)(v63 + 24), v64))
                      {
                        if (*(uint64_t **)v58 == v56)
                        {
                          *(_BYTE *)(v58 + 24) = 1;
                          *((_BYTE *)v59 + 24) = 0;
                          v67 = *(_QWORD *)(v58 + 8);
                          *v59 = v67;
                          if (v67)
                            goto LABEL_87;
                        }
                        else
                        {
                          v65 = *(uint64_t **)(v58 + 8);
                          v66 = *v65;
                          *(_QWORD *)(v58 + 8) = *v65;
                          if (v66)
                          {
                            *(_QWORD *)(v66 + 16) = v58;
                            v59 = *(uint64_t **)(v58 + 16);
                          }
                          v65[2] = (uint64_t)v59;
                          *(_QWORD *)(*(_QWORD *)(v58 + 16) + 8 * (**(_QWORD **)(v58 + 16) != v58)) = v65;
                          *v65 = v58;
                          *(_QWORD *)(v58 + 16) = v65;
                          v59 = (uint64_t *)v65[2];
                          v58 = *v59;
                          *((_BYTE *)v65 + 24) = 1;
                          *((_BYTE *)v59 + 24) = 0;
                          v67 = *(_QWORD *)(v58 + 8);
                          *v59 = v67;
                          if (v67)
LABEL_87:
                            *(_QWORD *)(v67 + 16) = v59;
                        }
                        *(_QWORD *)(v58 + 16) = v59[2];
                        *(_QWORD *)(v59[2] + 8 * (*(_QWORD *)v59[2] != (_QWORD)v59)) = v58;
                        *(_QWORD *)(v58 + 8) = v59;
LABEL_128:
                        v59[2] = v58;
                        break;
                      }
                    }
                    else if (!v60 || (v62 = *(unsigned __int8 *)(v60 + 24), v61 = (_BYTE *)(v60 + 24), v62))
                    {
                      if (*(uint64_t **)v58 == v56)
                      {
                        v232 = v56[1];
                        *(_QWORD *)v58 = v232;
                        if (v232)
                        {
                          *(_QWORD *)(v232 + 16) = v58;
                          v59 = *(uint64_t **)(v58 + 16);
                        }
                        v56[2] = (uint64_t)v59;
                        *(_QWORD *)(*(_QWORD *)(v58 + 16) + 8 * (**(_QWORD **)(v58 + 16) != v58)) = v56;
                        v56[1] = v58;
                        *(_QWORD *)(v58 + 16) = v56;
                        v59 = (uint64_t *)v56[2];
                        *((_BYTE *)v56 + 24) = 1;
                        *((_BYTE *)v59 + 24) = 0;
                        v58 = v59[1];
                        v90 = *(uint64_t **)v58;
                        v59[1] = *(_QWORD *)v58;
                        if (v90)
LABEL_126:
                          v90[2] = (uint64_t)v59;
                      }
                      else
                      {
                        *(_BYTE *)(v58 + 24) = 1;
                        *((_BYTE *)v59 + 24) = 0;
                        v58 = v59[1];
                        v90 = *(uint64_t **)v58;
                        v59[1] = *(_QWORD *)v58;
                        if (v90)
                          goto LABEL_126;
                      }
                      *(_QWORD *)(v58 + 16) = v59[2];
                      *(_QWORD *)(v59[2] + 8 * (*(_QWORD *)v59[2] != (_QWORD)v59)) = v58;
                      *(_QWORD *)v58 = v59;
                      goto LABEL_128;
                    }
                    *(_BYTE *)(v58 + 24) = 1;
                    v56 = v59;
                    *((_BYTE *)v59 + 24) = v59 == v57;
                    *v61 = 1;
                  }
                  while (v59 != v57);
                }
                v45 = v445;
                ++v446;
                goto LABEL_130;
              }
              v48 = &v445;
              v49 = v445;
              do
              {
                v50 = v49;
                v51 = v48;
                v52 = v49[4];
                if (v52 >= v41)
                  v48 = (uint64_t **)v49;
                else
                  ++v49;
                v49 = (uint64_t *)*v49;
              }
              while (v49);
              if (v48 == &v445)
                goto LABEL_65;
              if (v52 < v41)
                v50 = (uint64_t *)v51;
              if (v41 < v50[4])
              {
LABEL_65:
                v53 = v445;
                while (1)
                {
                  while (1)
                  {
                    v46 = (uint64_t **)v53;
                    v54 = v53[4];
                    if (v41 >= v54)
                      break;
                    v53 = *v46;
                    v47 = v46;
                    if (!*v46)
                      goto LABEL_71;
                  }
                  if (v54 >= v41)
                    break;
                  v53 = v46[1];
                  if (!v53)
                  {
                    v47 = v46 + 1;
                    goto LABEL_71;
                  }
                }
                v55 = (uint64_t *)v46;
LABEL_130:
                v55[5] = v423++;
              }
              v91 = &v445;
              v92 = &v445;
              if (v45)
              {
                v93 = v45;
                while (1)
                {
                  while (1)
                  {
                    v91 = (uint64_t **)v93;
                    v94 = v93[4];
                    if (v41 >= v94)
                      break;
                    v93 = *v91;
                    v92 = v91;
                    if (!*v91)
                      goto LABEL_138;
                  }
                  if (v94 >= v41)
                    break;
                  v93 = v91[1];
                  if (!v93)
                  {
                    v92 = v91 + 1;
                    goto LABEL_138;
                  }
                }
                v107 = v91[5];
LABEL_163:
                v111 = &v445;
                v112 = v45;
                do
                {
                  v113 = v112;
                  v114 = v111;
                  v115 = v112[4];
                  if (v115 >= v42)
                    v111 = (uint64_t **)v112;
                  else
                    ++v112;
                  v112 = (uint64_t *)*v112;
                }
                while (v112);
                if (v111 == &v445)
                  goto LABEL_172;
                if (v115 < v42)
                  v113 = (uint64_t *)v114;
                if (v42 < v113[4])
                {
LABEL_172:
                  v116 = v45;
                  while (1)
                  {
                    while (1)
                    {
                      v109 = (uint64_t **)v116;
                      v117 = v116[4];
                      if (v42 >= v117)
                        break;
                      v116 = *v109;
                      v110 = v109;
                      if (!*v109)
                        goto LABEL_178;
                    }
                    if (v117 >= v42)
                      break;
                    v116 = v109[1];
                    if (!v116)
                    {
                      v110 = v109 + 1;
                      goto LABEL_178;
                    }
                  }
                  v118 = (uint64_t *)v109;
                  goto LABEL_203;
                }
              }
              else
              {
LABEL_138:
                v95 = (uint64_t *)operator new(0x30uLL);
                v95[4] = v41;
                v95[5] = 0;
                *v95 = 0;
                v95[1] = 0;
                v95[2] = (uint64_t)v91;
                *v92 = v95;
                if (*v444)
                {
                  v444 = (uint64_t **)*v444;
                  v95 = *v92;
                }
                v96 = v445;
                *((_BYTE *)v95 + 24) = v95 == v445;
                if (v95 != v96)
                {
                  do
                  {
                    v97 = v95[2];
                    if (*(_BYTE *)(v97 + 24))
                      break;
                    v98 = *(uint64_t **)(v97 + 16);
                    v99 = *v98;
                    if (*v98 == v97)
                    {
                      v102 = v98[1];
                      if (!v102 || (v103 = *(unsigned __int8 *)(v102 + 24), v100 = (_BYTE *)(v102 + 24), v103))
                      {
                        if (*(uint64_t **)v97 == v95)
                        {
                          *(_BYTE *)(v97 + 24) = 1;
                          *((_BYTE *)v98 + 24) = 0;
                          v106 = *(_QWORD *)(v97 + 8);
                          *v98 = v106;
                          if (v106)
                            goto LABEL_154;
                        }
                        else
                        {
                          v104 = *(uint64_t **)(v97 + 8);
                          v105 = *v104;
                          *(_QWORD *)(v97 + 8) = *v104;
                          if (v105)
                          {
                            *(_QWORD *)(v105 + 16) = v97;
                            v98 = *(uint64_t **)(v97 + 16);
                          }
                          v104[2] = (uint64_t)v98;
                          *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8 * (**(_QWORD **)(v97 + 16) != v97)) = v104;
                          *v104 = v97;
                          *(_QWORD *)(v97 + 16) = v104;
                          v98 = (uint64_t *)v104[2];
                          v97 = *v98;
                          *((_BYTE *)v104 + 24) = 1;
                          *((_BYTE *)v98 + 24) = 0;
                          v106 = *(_QWORD *)(v97 + 8);
                          *v98 = v106;
                          if (v106)
LABEL_154:
                            *(_QWORD *)(v106 + 16) = v98;
                        }
                        *(_QWORD *)(v97 + 16) = v98[2];
                        *(_QWORD *)(v98[2] + 8 * (*(_QWORD *)v98[2] != (_QWORD)v98)) = v97;
                        *(_QWORD *)(v97 + 8) = v98;
LABEL_161:
                        v98[2] = v97;
                        break;
                      }
                    }
                    else if (!v99 || (v101 = *(unsigned __int8 *)(v99 + 24), v100 = (_BYTE *)(v99 + 24), v101))
                    {
                      if (*(uint64_t **)v97 == v95)
                      {
                        v230 = v95[1];
                        *(_QWORD *)v97 = v230;
                        if (v230)
                        {
                          *(_QWORD *)(v230 + 16) = v97;
                          v98 = *(uint64_t **)(v97 + 16);
                        }
                        v95[2] = (uint64_t)v98;
                        *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8 * (**(_QWORD **)(v97 + 16) != v97)) = v95;
                        v95[1] = v97;
                        *(_QWORD *)(v97 + 16) = v95;
                        v98 = (uint64_t *)v95[2];
                        *((_BYTE *)v95 + 24) = 1;
                        *((_BYTE *)v98 + 24) = 0;
                        v97 = v98[1];
                        v108 = *(uint64_t **)v97;
                        v98[1] = *(_QWORD *)v97;
                        if (v108)
LABEL_159:
                          v108[2] = (uint64_t)v98;
                      }
                      else
                      {
                        *(_BYTE *)(v97 + 24) = 1;
                        *((_BYTE *)v98 + 24) = 0;
                        v97 = v98[1];
                        v108 = *(uint64_t **)v97;
                        v98[1] = *(_QWORD *)v97;
                        if (v108)
                          goto LABEL_159;
                      }
                      *(_QWORD *)(v97 + 16) = v98[2];
                      *(_QWORD *)(v98[2] + 8 * (*(_QWORD *)v98[2] != (_QWORD)v98)) = v97;
                      *(_QWORD *)v97 = v98;
                      goto LABEL_161;
                    }
                    *(_BYTE *)(v97 + 24) = 1;
                    v95 = v98;
                    *((_BYTE *)v98 + 24) = v98 == v96;
                    *v100 = 1;
                  }
                  while (v98 != v96);
                }
                v107 = 0;
                v45 = v445;
                ++v446;
                v109 = &v445;
                v110 = &v445;
                if (v445)
                  goto LABEL_163;
LABEL_178:
                v118 = (uint64_t *)operator new(0x30uLL);
                v118[4] = v42;
                v118[5] = 0;
                *v118 = 0;
                v118[1] = 0;
                v118[2] = (uint64_t)v109;
                *v110 = v118;
                v119 = v118;
                if (*v444)
                {
                  v444 = (uint64_t **)*v444;
                  v119 = *v110;
                }
                v120 = v445;
                *((_BYTE *)v119 + 24) = v119 == v445;
                if (v119 != v120)
                {
                  do
                  {
                    v121 = v119[2];
                    if (*(_BYTE *)(v121 + 24))
                      break;
                    v122 = *(uint64_t **)(v121 + 16);
                    v123 = *v122;
                    if (*v122 == v121)
                    {
                      v126 = v122[1];
                      if (!v126 || (v127 = *(unsigned __int8 *)(v126 + 24), v124 = (_BYTE *)(v126 + 24), v127))
                      {
                        if (*(uint64_t **)v121 == v119)
                        {
                          *(_BYTE *)(v121 + 24) = 1;
                          *((_BYTE *)v122 + 24) = 0;
                          v130 = *(_QWORD *)(v121 + 8);
                          *v122 = v130;
                          if (v130)
                            goto LABEL_194;
                        }
                        else
                        {
                          v128 = *(uint64_t **)(v121 + 8);
                          v129 = *v128;
                          *(_QWORD *)(v121 + 8) = *v128;
                          if (v129)
                          {
                            *(_QWORD *)(v129 + 16) = v121;
                            v122 = *(uint64_t **)(v121 + 16);
                          }
                          v128[2] = (uint64_t)v122;
                          *(_QWORD *)(*(_QWORD *)(v121 + 16) + 8 * (**(_QWORD **)(v121 + 16) != v121)) = v128;
                          *v128 = v121;
                          *(_QWORD *)(v121 + 16) = v128;
                          v122 = (uint64_t *)v128[2];
                          v121 = *v122;
                          *((_BYTE *)v128 + 24) = 1;
                          *((_BYTE *)v122 + 24) = 0;
                          v130 = *(_QWORD *)(v121 + 8);
                          *v122 = v130;
                          if (v130)
LABEL_194:
                            *(_QWORD *)(v130 + 16) = v122;
                        }
                        *(_QWORD *)(v121 + 16) = v122[2];
                        *(_QWORD *)(v122[2] + 8 * (*(_QWORD *)v122[2] != (_QWORD)v122)) = v121;
                        *(_QWORD *)(v121 + 8) = v122;
LABEL_201:
                        v122[2] = v121;
                        break;
                      }
                    }
                    else if (!v123 || (v125 = *(unsigned __int8 *)(v123 + 24), v124 = (_BYTE *)(v123 + 24), v125))
                    {
                      if (*(uint64_t **)v121 == v119)
                      {
                        v233 = v119[1];
                        *(_QWORD *)v121 = v233;
                        if (v233)
                        {
                          *(_QWORD *)(v233 + 16) = v121;
                          v122 = *(uint64_t **)(v121 + 16);
                        }
                        v119[2] = (uint64_t)v122;
                        *(_QWORD *)(*(_QWORD *)(v121 + 16) + 8 * (**(_QWORD **)(v121 + 16) != v121)) = v119;
                        v119[1] = v121;
                        *(_QWORD *)(v121 + 16) = v119;
                        v122 = (uint64_t *)v119[2];
                        *((_BYTE *)v119 + 24) = 1;
                        *((_BYTE *)v122 + 24) = 0;
                        v121 = v122[1];
                        v131 = *(uint64_t **)v121;
                        v122[1] = *(_QWORD *)v121;
                        if (v131)
LABEL_199:
                          v131[2] = (uint64_t)v122;
                      }
                      else
                      {
                        *(_BYTE *)(v121 + 24) = 1;
                        *((_BYTE *)v122 + 24) = 0;
                        v121 = v122[1];
                        v131 = *(uint64_t **)v121;
                        v122[1] = *(_QWORD *)v121;
                        if (v131)
                          goto LABEL_199;
                      }
                      *(_QWORD *)(v121 + 16) = v122[2];
                      *(_QWORD *)(v122[2] + 8 * (*(_QWORD *)v122[2] != (_QWORD)v122)) = v121;
                      *(_QWORD *)v121 = v122;
                      goto LABEL_201;
                    }
                    *(_BYTE *)(v121 + 24) = 1;
                    v119 = v122;
                    *((_BYTE *)v122 + 24) = v122 == v120;
                    *v124 = 1;
                  }
                  while (v122 != v120);
                }
                v45 = v445;
                ++v446;
LABEL_203:
                v118[5] = v423++;
              }
              v132 = &v445;
LABEL_206:
              v133 = v132;
              if (v45)
              {
                while (1)
                {
                  v132 = (uint64_t **)v45;
                  v134 = v45[4];
                  if (v42 < v134)
                  {
                    v45 = *v132;
                    goto LABEL_206;
                  }
                  if (v134 >= v42)
                    break;
                  v45 = v132[1];
                  if (!v45)
                  {
                    v133 = v132 + 1;
                    goto LABEL_211;
                  }
                }
                v147 = v132[5];
              }
              else
              {
LABEL_211:
                v135 = (uint64_t *)operator new(0x30uLL);
                v135[4] = v42;
                v135[5] = 0;
                *v135 = 0;
                v135[1] = 0;
                v135[2] = (uint64_t)v132;
                *v133 = v135;
                if (*v444)
                {
                  v444 = (uint64_t **)*v444;
                  v135 = *v133;
                }
                v136 = v445;
                *((_BYTE *)v135 + 24) = v135 == v445;
                if (v135 != v136)
                {
                  do
                  {
                    v137 = v135[2];
                    if (*(_BYTE *)(v137 + 24))
                      break;
                    v138 = *(uint64_t **)(v137 + 16);
                    v139 = *v138;
                    if (*v138 == v137)
                    {
                      v142 = v138[1];
                      if (!v142 || (v143 = *(unsigned __int8 *)(v142 + 24), v140 = (_BYTE *)(v142 + 24), v143))
                      {
                        if (*(uint64_t **)v137 == v135)
                        {
                          *(_BYTE *)(v137 + 24) = 1;
                          *((_BYTE *)v138 + 24) = 0;
                          v146 = *(_QWORD *)(v137 + 8);
                          *v138 = v146;
                          if (v146)
                            goto LABEL_227;
                        }
                        else
                        {
                          v144 = *(uint64_t **)(v137 + 8);
                          v145 = *v144;
                          *(_QWORD *)(v137 + 8) = *v144;
                          if (v145)
                          {
                            *(_QWORD *)(v145 + 16) = v137;
                            v138 = *(uint64_t **)(v137 + 16);
                          }
                          v144[2] = (uint64_t)v138;
                          *(_QWORD *)(*(_QWORD *)(v137 + 16) + 8 * (**(_QWORD **)(v137 + 16) != v137)) = v144;
                          *v144 = v137;
                          *(_QWORD *)(v137 + 16) = v144;
                          v138 = (uint64_t *)v144[2];
                          v137 = *v138;
                          *((_BYTE *)v144 + 24) = 1;
                          *((_BYTE *)v138 + 24) = 0;
                          v146 = *(_QWORD *)(v137 + 8);
                          *v138 = v146;
                          if (v146)
LABEL_227:
                            *(_QWORD *)(v146 + 16) = v138;
                        }
                        *(_QWORD *)(v137 + 16) = v138[2];
                        *(_QWORD *)(v138[2] + 8 * (*(_QWORD *)v138[2] != (_QWORD)v138)) = v137;
                        *(_QWORD *)(v137 + 8) = v138;
LABEL_234:
                        v138[2] = v137;
                        break;
                      }
                    }
                    else if (!v139 || (v141 = *(unsigned __int8 *)(v139 + 24), v140 = (_BYTE *)(v139 + 24), v141))
                    {
                      if (*(uint64_t **)v137 == v135)
                      {
                        v231 = v135[1];
                        *(_QWORD *)v137 = v231;
                        if (v231)
                        {
                          *(_QWORD *)(v231 + 16) = v137;
                          v138 = *(uint64_t **)(v137 + 16);
                        }
                        v135[2] = (uint64_t)v138;
                        *(_QWORD *)(*(_QWORD *)(v137 + 16) + 8 * (**(_QWORD **)(v137 + 16) != v137)) = v135;
                        v135[1] = v137;
                        *(_QWORD *)(v137 + 16) = v135;
                        v138 = (uint64_t *)v135[2];
                        *((_BYTE *)v135 + 24) = 1;
                        *((_BYTE *)v138 + 24) = 0;
                        v137 = v138[1];
                        v148 = *(uint64_t **)v137;
                        v138[1] = *(_QWORD *)v137;
                        if (v148)
LABEL_232:
                          v148[2] = (uint64_t)v138;
                      }
                      else
                      {
                        *(_BYTE *)(v137 + 24) = 1;
                        *((_BYTE *)v138 + 24) = 0;
                        v137 = v138[1];
                        v148 = *(uint64_t **)v137;
                        v138[1] = *(_QWORD *)v137;
                        if (v148)
                          goto LABEL_232;
                      }
                      *(_QWORD *)(v137 + 16) = v138[2];
                      *(_QWORD *)(v138[2] + 8 * (*(_QWORD *)v138[2] != (_QWORD)v138)) = v137;
                      *(_QWORD *)v137 = v138;
                      goto LABEL_234;
                    }
                    *(_BYTE *)(v137 + 24) = 1;
                    v135 = v138;
                    *((_BYTE *)v138 + 24) = v138 == v136;
                    *v140 = 1;
                  }
                  while (v138 != v136);
                }
                v147 = 0;
                ++v446;
              }
              ++*(_QWORD *)&v436[8 * (_QWORD)v107];
              v149 = *((_QWORD *)v5 + 17) + 24 * *v43;
              v150 = *(unsigned __int8 *)(v149 + 23);
              if ((v150 & 0x80u) == 0)
                v151 = (_BYTE *)(*((_QWORD *)v5 + 17) + 24 * *v43);
              else
                v151 = *(_BYTE **)v149;
              if ((v150 & 0x80u) != 0)
                v150 = *(_QWORD *)(v149 + 8);
              if (!v150)
              {
                LODWORD(v152) = 0;
                goto LABEL_273;
              }
              v152 = *v151 == 45;
              if (*v151 == 45)
              {
                if (v150 < 2)
                {
                  LODWORD(v152) = 1;
LABEL_273:
                  v159 = v36;
                  v153 = 0;
LABEL_274:
                  v160 = v107;
                  if ((_DWORD)v152)
                    LODWORD(v163) = -v153;
                  else
                    LODWORD(v163) = v153;
LABEL_277:
                  v165 = sub_1BE66A2C4((_QWORD *)v418 + 16, v149);
                  v166 = v165;
                  if (v421)
                    v163 = (uint64_t *)(int)v163;
                  else
                    v163 = v165;
                  v167 = v39 + 72 * v38;
                  v168 = *(_QWORD *)(v167 + 32);
                  v169 = *(_OWORD *)(v167 + 48);
                  v170 = v448;
                  if (v448 >= v449)
                  {
                    v172 = v447;
                    v173 = 0x8E38E38E38E38E39 * ((v448 - v447) >> 3) + 1;
                    if (v173 > 0x38E38E38E38E38ELL)
                      sub_1BE61F930();
                    v419 = *(_OWORD *)(v167 + 48);
                    if (0x1C71C71C71C71C72 * ((v449 - v447) >> 3) > v173)
                      v173 = 0x1C71C71C71C71C72 * ((v449 - v447) >> 3);
                    if (0x8E38E38E38E38E39 * ((v449 - v447) >> 3) >= 0x1C71C71C71C71C7)
                      v174 = 0x38E38E38E38E38ELL;
                    else
                      v174 = v173;
                    if (v174 > 0x38E38E38E38E38ELL)
                      sub_1BE61F100();
                    v175 = (char *)operator new(72 * v174);
                    v176 = &v175[8 * ((v170 - v172) >> 3)];
                    *(_QWORD *)v176 = v160;
                    *((_QWORD *)v176 + 1) = v147;
                    *((_QWORD *)v176 + 2) = v163;
                    *((_QWORD *)v176 + 3) = v166;
                    *((_QWORD *)v176 + 4) = v168;
                    *((_OWORD *)v176 + 3) = v419;
                    if (v170 == v172)
                    {
                      v179 = &v175[8 * ((v170 - v172) >> 3)];
                      v5 = v420;
                      v36 = v159;
                    }
                    else
                    {
                      v177 = 0;
                      v5 = v420;
                      v36 = v159;
                      do
                      {
                        v178 = &v176[v177];
                        *(_OWORD *)(v178 - 72) = *(_OWORD *)&v170[v177 - 72];
                        *(_OWORD *)(v178 - 56) = *(_OWORD *)&v170[v177 - 56];
                        *(_OWORD *)(v178 - 40) = *(_OWORD *)&v170[v177 - 40];
                        *(_OWORD *)(v178 - 24) = *(_OWORD *)&v170[v177 - 24];
                        *((_QWORD *)v178 - 1) = *(_QWORD *)&v170[v177 - 8];
                        v177 -= 72;
                      }
                      while (&v170[v177] != v172);
                      v179 = &v176[v177];
                    }
                    v171 = v176 + 72;
                    v447 = v179;
                    v448 = v176 + 72;
                    v449 = &v175[72 * v174];
                    if (v172)
                      operator delete(v172);
                  }
                  else
                  {
                    *(_QWORD *)v448 = v160;
                    *((_QWORD *)v170 + 1) = v147;
                    *((_QWORD *)v170 + 2) = v163;
                    *((_QWORD *)v170 + 3) = v165;
                    *((_QWORD *)v170 + 4) = v168;
                    v171 = v170 + 72;
                    *((_OWORD *)v170 + 3) = v169;
                    v5 = v420;
                    v36 = v159;
                  }
                  v448 = v171;
                  goto LABEL_378;
                }
                v164 = 2;
                if (v151[v152] == 48)
                {
LABEL_267:
                  if ((v151[v164] | 0x20) == 0x78)
                  {
                    v157 = 2;
                    if (*v151 == 45)
                      v157 = 3;
                    if (v157 >= v150)
                      goto LABEL_273;
LABEL_246:
                    v153 = 0;
                    do
                    {
                      v154 = (char)v151[v157];
                      if ((v154 - 48) >= 0xA)
                      {
                        if ((v154 - 97) >= 6)
                        {
                          if ((v154 - 65) > 5)
                          {
                            v159 = v36;
                            goto LABEL_274;
                          }
                          v155 = -55;
                        }
                        else
                        {
                          v155 = -87;
                        }
                      }
                      else
                      {
                        v155 = -48;
                      }
                      v156 = v154 + 16 * v153 + v155;
                      ++v157;
                      v158 = v156 < v153;
                      if (v157 >= v150)
                        break;
                      v153 = v156;
                    }
                    while (!v158);
                    v159 = v36;
                    v160 = v107;
                    if (*v151 == 45)
                      v161 = 0x80000000;
                    else
                      v161 = 0x7FFFFFFF;
                    if ((_DWORD)v152)
                      v162 = -v156;
                    else
                      v162 = v156;
                    if (v158)
                      LODWORD(v163) = v161;
                    else
                      LODWORD(v163) = v162;
                    goto LABEL_277;
                  }
                }
              }
              else
              {
                v164 = 1;
                if (v151[v152] == 48)
                  goto LABEL_267;
              }
              v157 = *v151 == 45;
              if (v152 >= v150)
                goto LABEL_273;
              goto LABEL_246;
            }
            v68 = &v445;
            v69 = &v445;
            if (v445)
            {
              v70 = &v445;
              v71 = v445;
              do
              {
                v72 = v71;
                v73 = v70;
                v74 = v71[4];
                if (v74 >= v41)
                  v70 = (uint64_t **)v71;
                else
                  ++v71;
                v71 = (uint64_t *)*v71;
              }
              while (v71);
              if (v70 != &v445)
              {
                if (v74 < v41)
                  v72 = (uint64_t *)v73;
                if (v41 >= v72[4])
                  goto LABEL_306;
              }
              v75 = v445;
              while (1)
              {
                while (1)
                {
                  v68 = (uint64_t **)v75;
                  v76 = v75[4];
                  if (v41 >= v76)
                    break;
                  v75 = *v68;
                  v69 = v68;
                  if (!*v68)
                    goto LABEL_105;
                }
                if (v76 >= v41)
                  break;
                v75 = v68[1];
                if (!v75)
                {
                  v69 = v68 + 1;
                  goto LABEL_105;
                }
              }
              v77 = (uint64_t *)v68;
            }
            else
            {
LABEL_105:
              v77 = (uint64_t *)operator new(0x30uLL);
              v77[4] = v41;
              v77[5] = 0;
              *v77 = 0;
              v77[1] = 0;
              v77[2] = (uint64_t)v68;
              *v69 = v77;
              v78 = v77;
              if (*v444)
              {
                v444 = (uint64_t **)*v444;
                v78 = *v69;
              }
              v79 = v445;
              *((_BYTE *)v78 + 24) = v78 == v445;
              if (v78 != v79)
              {
                do
                {
                  v80 = v78[2];
                  if (*(_BYTE *)(v80 + 24))
                    break;
                  v81 = *(uint64_t **)(v80 + 16);
                  v82 = *v81;
                  if (*v81 == v80)
                  {
                    v85 = v81[1];
                    if (!v85 || (v86 = *(unsigned __int8 *)(v85 + 24), v83 = (_BYTE *)(v85 + 24), v86))
                    {
                      if (*(uint64_t **)v80 == v78)
                      {
                        *(_BYTE *)(v80 + 24) = 1;
                        *((_BYTE *)v81 + 24) = 0;
                        v89 = *(_QWORD *)(v80 + 8);
                        *v81 = v89;
                        if (v89)
                          goto LABEL_121;
                      }
                      else
                      {
                        v87 = *(uint64_t **)(v80 + 8);
                        v88 = *v87;
                        *(_QWORD *)(v80 + 8) = *v87;
                        if (v88)
                        {
                          *(_QWORD *)(v88 + 16) = v80;
                          v81 = *(uint64_t **)(v80 + 16);
                        }
                        v87[2] = (uint64_t)v81;
                        *(_QWORD *)(*(_QWORD *)(v80 + 16) + 8 * (**(_QWORD **)(v80 + 16) != v80)) = v87;
                        *v87 = v80;
                        *(_QWORD *)(v80 + 16) = v87;
                        v81 = (uint64_t *)v87[2];
                        v80 = *v81;
                        *((_BYTE *)v87 + 24) = 1;
                        *((_BYTE *)v81 + 24) = 0;
                        v89 = *(_QWORD *)(v80 + 8);
                        *v81 = v89;
                        if (v89)
LABEL_121:
                          *(_QWORD *)(v89 + 16) = v81;
                      }
                      *(_QWORD *)(v80 + 16) = v81[2];
                      *(_QWORD *)(v81[2] + 8 * (*(_QWORD *)v81[2] != (_QWORD)v81)) = v80;
                      *(_QWORD *)(v80 + 8) = v81;
LABEL_303:
                      v81[2] = v80;
                      break;
                    }
                  }
                  else if (!v82 || (v84 = *(unsigned __int8 *)(v82 + 24), v83 = (_BYTE *)(v82 + 24), v84))
                  {
                    if (*(uint64_t **)v80 == v78)
                    {
                      v235 = v78[1];
                      *(_QWORD *)v80 = v235;
                      if (v235)
                      {
                        *(_QWORD *)(v235 + 16) = v80;
                        v81 = *(uint64_t **)(v80 + 16);
                      }
                      v78[2] = (uint64_t)v81;
                      *(_QWORD *)(*(_QWORD *)(v80 + 16) + 8 * (**(_QWORD **)(v80 + 16) != v80)) = v78;
                      v78[1] = v80;
                      *(_QWORD *)(v80 + 16) = v78;
                      v81 = (uint64_t *)v78[2];
                      *((_BYTE *)v78 + 24) = 1;
                      *((_BYTE *)v81 + 24) = 0;
                      v80 = v81[1];
                      v180 = *(uint64_t **)v80;
                      v81[1] = *(_QWORD *)v80;
                      if (v180)
LABEL_301:
                        v180[2] = (uint64_t)v81;
                    }
                    else
                    {
                      *(_BYTE *)(v80 + 24) = 1;
                      *((_BYTE *)v81 + 24) = 0;
                      v80 = v81[1];
                      v180 = *(uint64_t **)v80;
                      v81[1] = *(_QWORD *)v80;
                      if (v180)
                        goto LABEL_301;
                    }
                    *(_QWORD *)(v80 + 16) = v81[2];
                    *(_QWORD *)(v81[2] + 8 * (*(_QWORD *)v81[2] != (_QWORD)v81)) = v80;
                    *(_QWORD *)v80 = v81;
                    goto LABEL_303;
                  }
                  *(_BYTE *)(v80 + 24) = 1;
                  v78 = v81;
                  *((_BYTE *)v81 + 24) = v81 == v79;
                  *v83 = 1;
                }
                while (v81 != v79);
              }
              v45 = v445;
              ++v446;
            }
            v77[5] = v423++;
LABEL_306:
            v181 = &v445;
            v182 = &v445;
            if (v45)
            {
              v183 = v45;
              while (1)
              {
                while (1)
                {
                  v181 = (uint64_t **)v183;
                  v184 = v183[4];
                  if (v41 >= v184)
                    break;
                  v183 = *v181;
                  v182 = v181;
                  if (!*v181)
                    goto LABEL_313;
                }
                if (v184 >= v41)
                  break;
                v183 = v181[1];
                if (!v183)
                {
                  v182 = v181 + 1;
                  goto LABEL_313;
                }
              }
              v197 = v181[5];
LABEL_338:
              v201 = &v445;
              v202 = v45;
              do
              {
                v203 = v202;
                v204 = v201;
                v205 = v202[4];
                if (v205 >= v42)
                  v201 = (uint64_t **)v202;
                else
                  ++v202;
                v202 = (uint64_t *)*v202;
              }
              while (v202);
              if (v201 == &v445)
                goto LABEL_350;
              if (v205 < v42)
                v203 = (uint64_t *)v204;
              if (v42 < v203[4])
              {
LABEL_350:
                while (1)
                {
                  while (1)
                  {
                    v199 = (uint64_t **)v45;
                    v206 = v45[4];
                    if (v42 >= v206)
                      break;
                    v45 = *v199;
                    v200 = v199;
                    if (!*v199)
                      goto LABEL_353;
                  }
                  if (v206 >= v42)
                    break;
                  v45 = v199[1];
                  if (!v45)
                  {
                    v200 = v199 + 1;
                    goto LABEL_353;
                  }
                }
                v199[5] = v197;
              }
              goto LABEL_378;
            }
LABEL_313:
            v185 = (uint64_t *)operator new(0x30uLL);
            v185[4] = v41;
            v185[5] = 0;
            *v185 = 0;
            v185[1] = 0;
            v185[2] = (uint64_t)v181;
            *v182 = v185;
            if (*v444)
            {
              v444 = (uint64_t **)*v444;
              v185 = *v182;
            }
            v186 = v445;
            *((_BYTE *)v185 + 24) = v185 == v445;
            if (v185 != v186)
            {
              do
              {
                v187 = v185[2];
                if (*(_BYTE *)(v187 + 24))
                  break;
                v188 = *(uint64_t **)(v187 + 16);
                v189 = *v188;
                if (*v188 == v187)
                {
                  v192 = v188[1];
                  if (!v192 || (v193 = *(unsigned __int8 *)(v192 + 24), v190 = (_BYTE *)(v192 + 24), v193))
                  {
                    if (*(uint64_t **)v187 == v185)
                    {
                      *(_BYTE *)(v187 + 24) = 1;
                      *((_BYTE *)v188 + 24) = 0;
                      v196 = *(_QWORD *)(v187 + 8);
                      *v188 = v196;
                      if (v196)
                        goto LABEL_329;
                    }
                    else
                    {
                      v194 = *(uint64_t **)(v187 + 8);
                      v195 = *v194;
                      *(_QWORD *)(v187 + 8) = *v194;
                      if (v195)
                      {
                        *(_QWORD *)(v195 + 16) = v187;
                        v188 = *(uint64_t **)(v187 + 16);
                      }
                      v194[2] = (uint64_t)v188;
                      *(_QWORD *)(*(_QWORD *)(v187 + 16) + 8 * (**(_QWORD **)(v187 + 16) != v187)) = v194;
                      *v194 = v187;
                      *(_QWORD *)(v187 + 16) = v194;
                      v188 = (uint64_t *)v194[2];
                      v187 = *v188;
                      *((_BYTE *)v194 + 24) = 1;
                      *((_BYTE *)v188 + 24) = 0;
                      v196 = *(_QWORD *)(v187 + 8);
                      *v188 = v196;
                      if (v196)
LABEL_329:
                        *(_QWORD *)(v196 + 16) = v188;
                    }
                    *(_QWORD *)(v187 + 16) = v188[2];
                    *(_QWORD *)(v188[2] + 8 * (*(_QWORD *)v188[2] != (_QWORD)v188)) = v187;
                    *(_QWORD *)(v187 + 8) = v188;
LABEL_336:
                    v188[2] = v187;
                    break;
                  }
                }
                else if (!v189 || (v191 = *(unsigned __int8 *)(v189 + 24), v190 = (_BYTE *)(v189 + 24), v191))
                {
                  if (*(uint64_t **)v187 == v185)
                  {
                    v234 = v185[1];
                    *(_QWORD *)v187 = v234;
                    if (v234)
                    {
                      *(_QWORD *)(v234 + 16) = v187;
                      v188 = *(uint64_t **)(v187 + 16);
                    }
                    v185[2] = (uint64_t)v188;
                    *(_QWORD *)(*(_QWORD *)(v187 + 16) + 8 * (**(_QWORD **)(v187 + 16) != v187)) = v185;
                    v185[1] = v187;
                    *(_QWORD *)(v187 + 16) = v185;
                    v188 = (uint64_t *)v185[2];
                    *((_BYTE *)v185 + 24) = 1;
                    *((_BYTE *)v188 + 24) = 0;
                    v187 = v188[1];
                    v198 = *(uint64_t **)v187;
                    v188[1] = *(_QWORD *)v187;
                    if (v198)
LABEL_334:
                      v198[2] = (uint64_t)v188;
                  }
                  else
                  {
                    *(_BYTE *)(v187 + 24) = 1;
                    *((_BYTE *)v188 + 24) = 0;
                    v187 = v188[1];
                    v198 = *(uint64_t **)v187;
                    v188[1] = *(_QWORD *)v187;
                    if (v198)
                      goto LABEL_334;
                  }
                  *(_QWORD *)(v187 + 16) = v188[2];
                  *(_QWORD *)(v188[2] + 8 * (*(_QWORD *)v188[2] != (_QWORD)v188)) = v187;
                  *(_QWORD *)v187 = v188;
                  goto LABEL_336;
                }
                *(_BYTE *)(v187 + 24) = 1;
                v185 = v188;
                *((_BYTE *)v188 + 24) = v188 == v186;
                *v190 = 1;
              }
              while (v188 != v186);
            }
            v197 = 0;
            v45 = v445;
            ++v446;
            v199 = &v445;
            v200 = &v445;
            if (v445)
              goto LABEL_338;
LABEL_353:
            v207 = (uint64_t *)operator new(0x30uLL);
            v207[4] = v42;
            v207[5] = 0;
            *v207 = 0;
            v207[1] = 0;
            v207[2] = (uint64_t)v199;
            *v200 = v207;
            v208 = v207;
            if (*v444)
            {
              v444 = (uint64_t **)*v444;
              v208 = *v200;
            }
            v209 = v445;
            *((_BYTE *)v208 + 24) = v208 == v445;
            if (v208 != v209)
            {
              do
              {
                v210 = v208[2];
                if (*(_BYTE *)(v210 + 24))
                  break;
                v211 = *(uint64_t **)(v210 + 16);
                v212 = *v211;
                if (*v211 == v210)
                {
                  v215 = v211[1];
                  if (!v215 || (v216 = *(unsigned __int8 *)(v215 + 24), v213 = (_BYTE *)(v215 + 24), v216))
                  {
                    if (*(uint64_t **)v210 == v208)
                    {
                      *(_BYTE *)(v210 + 24) = 1;
                      *((_BYTE *)v211 + 24) = 0;
                      v219 = *(_QWORD *)(v210 + 8);
                      *v211 = v219;
                      if (v219)
                        goto LABEL_369;
                    }
                    else
                    {
                      v217 = *(uint64_t **)(v210 + 8);
                      v218 = *v217;
                      *(_QWORD *)(v210 + 8) = *v217;
                      if (v218)
                      {
                        *(_QWORD *)(v218 + 16) = v210;
                        v211 = *(uint64_t **)(v210 + 16);
                      }
                      v217[2] = (uint64_t)v211;
                      *(_QWORD *)(*(_QWORD *)(v210 + 16) + 8 * (**(_QWORD **)(v210 + 16) != v210)) = v217;
                      *v217 = v210;
                      *(_QWORD *)(v210 + 16) = v217;
                      v211 = (uint64_t *)v217[2];
                      v210 = *v211;
                      *((_BYTE *)v217 + 24) = 1;
                      *((_BYTE *)v211 + 24) = 0;
                      v219 = *(_QWORD *)(v210 + 8);
                      *v211 = v219;
                      if (v219)
LABEL_369:
                        *(_QWORD *)(v219 + 16) = v211;
                    }
                    *(_QWORD *)(v210 + 16) = v211[2];
                    *(_QWORD *)(v211[2] + 8 * (*(_QWORD *)v211[2] != (_QWORD)v211)) = v210;
                    *(_QWORD *)(v210 + 8) = v211;
LABEL_376:
                    v211[2] = v210;
                    break;
                  }
                }
                else if (!v212 || (v214 = *(unsigned __int8 *)(v212 + 24), v213 = (_BYTE *)(v212 + 24), v214))
                {
                  if (*(uint64_t **)v210 == v208)
                  {
                    v236 = v208[1];
                    *(_QWORD *)v210 = v236;
                    if (v236)
                    {
                      *(_QWORD *)(v236 + 16) = v210;
                      v211 = *(uint64_t **)(v210 + 16);
                    }
                    v208[2] = (uint64_t)v211;
                    *(_QWORD *)(*(_QWORD *)(v210 + 16) + 8 * (**(_QWORD **)(v210 + 16) != v210)) = v208;
                    v208[1] = v210;
                    *(_QWORD *)(v210 + 16) = v208;
                    v211 = (uint64_t *)v208[2];
                    *((_BYTE *)v208 + 24) = 1;
                    *((_BYTE *)v211 + 24) = 0;
                    v210 = v211[1];
                    v220 = *(uint64_t **)v210;
                    v211[1] = *(_QWORD *)v210;
                    if (v220)
LABEL_374:
                      v220[2] = (uint64_t)v211;
                  }
                  else
                  {
                    *(_BYTE *)(v210 + 24) = 1;
                    *((_BYTE *)v211 + 24) = 0;
                    v210 = v211[1];
                    v220 = *(uint64_t **)v210;
                    v211[1] = *(_QWORD *)v210;
                    if (v220)
                      goto LABEL_374;
                  }
                  *(_QWORD *)(v210 + 16) = v211[2];
                  *(_QWORD *)(v211[2] + 8 * (*(_QWORD *)v211[2] != (_QWORD)v211)) = v210;
                  *(_QWORD *)v210 = v211;
                  goto LABEL_376;
                }
                *(_BYTE *)(v210 + 24) = 1;
                v208 = v211;
                *((_BYTE *)v211 + 24) = v211 == v209;
                *v213 = 1;
              }
              while (v211 != v209);
            }
            ++v446;
            v207[5] = (uint64_t)v197;
LABEL_378:
            v221 = v431;
            if (!v431)
              goto LABEL_387;
            v222 = &v431;
            do
            {
              v223 = v221;
              v224 = v222;
              v225 = v221[4];
              v226 = (uint64_t **)(v221 + 1);
              if (v225 >= v42)
              {
                v226 = (uint64_t **)v223;
                v222 = (uint64_t **)v223;
              }
              v221 = *v226;
            }
            while (v221);
            if (v222 == &v431)
              goto LABEL_387;
            if (v225 < v42)
              v223 = (uint64_t *)v224;
            if (v42 < v223[4])
            {
LABEL_387:
              v227 = (char *)__p[1];
              v228 = (((_QWORD)v434 - (unint64_t)__p[1]) << 6) - 1;
              if ((void *)v434 == __p[1])
                v228 = 0;
              v229 = *((_QWORD *)&v435 + 1) + v435;
              if (v228 == *((_QWORD *)&v435 + 1) + (_QWORD)v435)
              {
                sub_1BE6A3E70((uint64_t)__p);
                v227 = (char *)__p[1];
                v229 = *((_QWORD *)&v435 + 1) + v435;
              }
              *(_QWORD *)(*(_QWORD *)&v227[(v229 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v229 & 0x1FF)) = v42;
              ++*((_QWORD *)&v435 + 1);
            }
            ++v36;
            v35 = *((_QWORD *)v5 + 4);
            v37 = v422;
            if (v36 >= *(_QWORD *)(v35 + 40 * v422))
            {
              v29 = v431;
              break;
            }
          }
        }
        v237 = &v431;
LABEL_436:
        v238 = v237;
        if (v29)
        {
          do
          {
            v237 = (uint64_t **)v29;
            v239 = v29[4];
            if (v422 < v239)
            {
              v29 = *v237;
              goto LABEL_436;
            }
            if (v239 >= v422)
              goto LABEL_37;
            v29 = v237[1];
          }
          while (v29);
          v238 = v237 + 1;
        }
        v240 = (uint64_t *)operator new(0x28uLL);
        v240[4] = v422;
        *v240 = 0;
        v240[1] = 0;
        v240[2] = (uint64_t)v237;
        *v238 = v240;
        if (*v430)
        {
          v430 = (uint64_t **)*v430;
          v240 = *v238;
        }
        sub_1BE61F5C0(v431, v240);
        ++v432;
      }
LABEL_37:
      v11 = *((_QWORD *)&v435 + 1);
    }
    while (*((_QWORD *)&v435 + 1));
  }
  if (v446 && *((_QWORD *)v5 + 5) != *((_QWORD *)v5 + 4))
  {
    for (i = 0; i < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v5 + 5) - *((_QWORD *)v5 + 4)) >> 3); ++i)
    {
      v13 = v445;
      v14 = &v445;
LABEL_15:
      v15 = v14;
      if (v13)
      {
        while (1)
        {
          v14 = (uint64_t **)v13;
          v16 = v13[4];
          if (i < v16)
          {
            v13 = *v14;
            goto LABEL_15;
          }
          if (v16 >= i)
            break;
          v13 = v14[1];
          if (!v13)
          {
            v15 = v14 + 1;
            goto LABEL_20;
          }
        }
        v19 = v14[5];
        v20 = v442;
        v21 = &v442;
        v22 = &v442;
        if (v442)
          goto LABEL_27;
      }
      else
      {
LABEL_20:
        v17 = (uint64_t *)operator new(0x30uLL);
        v17[4] = i;
        v17[5] = 0;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v14;
        *v15 = v17;
        v18 = v17;
        if (*v444)
        {
          v444 = (uint64_t **)*v444;
          v18 = *v15;
        }
        sub_1BE61F5C0(v445, v18);
        ++v446;
        v19 = (uint64_t *)v17[5];
        v20 = v442;
        v21 = &v442;
        v22 = &v442;
        if (v442)
        {
          while (1)
          {
LABEL_27:
            while (1)
            {
              v22 = (uint64_t **)v20;
              v23 = v20[4];
              if ((unint64_t)v19 >= v23)
                break;
              v20 = *v22;
              v21 = v22;
              if (!*v22)
                goto LABEL_31;
            }
            if (v23 >= (unint64_t)v19)
              break;
            v20 = v22[1];
            if (!v20)
            {
              v21 = v22 + 1;
              goto LABEL_31;
            }
          }
          v24 = (uint64_t *)v22;
          goto LABEL_12;
        }
      }
LABEL_31:
      v24 = (uint64_t *)operator new(0x30uLL);
      v24[4] = (uint64_t)v19;
      v24[5] = 0;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = (uint64_t)v22;
      *v21 = v24;
      v25 = v24;
      if (*v441)
      {
        v441 = (uint64_t **)*v441;
        v25 = *v21;
      }
      sub_1BE61F5C0(v442, v25);
      ++v443;
LABEL_12:
      v24[5] = i;
    }
  }
  v26 = *((_QWORD *)v418 + 4);
  v27 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v418 + 5) - v26) >> 3);
  if (v423 <= v27)
  {
    if (v423 < v27)
      *((_QWORD *)v418 + 5) = v26 + 40 * v423;
  }
  else
  {
    sub_1BE66CE80(v415, v423 - v27);
  }
  v241 = v439;
  if (v439 != v440)
  {
    while (1)
    {
      v242 = v445;
      v243 = v241[4];
      v244 = &v445;
LABEL_450:
      v245 = v244;
      if (v242)
      {
        while (1)
        {
          v244 = (uint64_t **)v242;
          v246 = v242[4];
          if (v243 < v246)
          {
            v242 = *v244;
            goto LABEL_450;
          }
          if (v246 >= v243)
            break;
          v242 = v244[1];
          if (!v242)
          {
            v245 = v244 + 1;
            goto LABEL_455;
          }
        }
        v247 = (uint64_t *)v244;
      }
      else
      {
LABEL_455:
        v247 = (uint64_t *)operator new(0x30uLL);
        v247[4] = v243;
        v247[5] = 0;
        *v247 = 0;
        v247[1] = 0;
        v247[2] = (uint64_t)v244;
        *v245 = v247;
        v248 = v247;
        if (*v444)
        {
          v444 = (uint64_t **)*v444;
          v248 = *v245;
        }
        sub_1BE61F5C0(v445, v248);
        ++v446;
      }
      v249 = v247[5];
      v250 = v417;
      while (1)
      {
        v251 = *v250;
        v252 = v250;
        if (!*v250)
          break;
        while (1)
        {
          v250 = (uint64_t **)v251;
          v253 = v251[4];
          if (v253 > v249)
            break;
          if (v253 >= v249)
            goto LABEL_468;
          v251 = v250[1];
          if (!v251)
          {
            v252 = v250 + 1;
            goto LABEL_465;
          }
        }
      }
LABEL_465:
      v254 = (uint64_t *)operator new(0x28uLL);
      v254[4] = v249;
      *v254 = 0;
      v254[1] = 0;
      v254[2] = (uint64_t)v250;
      *v252 = v254;
      v255 = (uint64_t *)**v416;
      if (v255)
      {
        *v416 = v255;
        v254 = *v252;
      }
      sub_1BE61F5C0(*((uint64_t **)v418 + 8), v254);
      ++*((_QWORD *)v418 + 9);
LABEL_468:
      v256 = *((_QWORD *)v418 + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v418 + 5) - v256) >> 3) >= v249)
        *(_BYTE *)(v256 + 40 * v249 + 32) = 1;
      v257 = v445;
      v258 = v241[4];
      v259 = &v445;
LABEL_472:
      v260 = v259;
      if (v257)
      {
        while (1)
        {
          v259 = (uint64_t **)v257;
          v261 = v257[4];
          if (v258 < v261)
          {
            v257 = *v259;
            goto LABEL_472;
          }
          if (v261 >= v258)
            break;
          v257 = v259[1];
          if (!v257)
          {
            v260 = v259 + 1;
            goto LABEL_477;
          }
        }
        v264 = (unint64_t)v259[5];
        v265 = (_QWORD *)v241[1];
        if (v265)
        {
          do
          {
LABEL_482:
            v266 = (_QWORD **)v265;
            v265 = (_QWORD *)*v265;
          }
          while (v265);
          goto LABEL_447;
        }
      }
      else
      {
LABEL_477:
        v262 = (uint64_t *)operator new(0x30uLL);
        v262[4] = v258;
        v262[5] = 0;
        *v262 = 0;
        v262[1] = 0;
        v262[2] = (uint64_t)v259;
        *v260 = v262;
        v263 = v262;
        if (*v444)
        {
          v444 = (uint64_t **)*v444;
          v263 = *v260;
        }
        sub_1BE61F5C0(v445, v263);
        ++v446;
        v264 = v262[5];
        v265 = (_QWORD *)v241[1];
        if (v265)
          goto LABEL_482;
      }
      do
      {
        v266 = (_QWORD **)v241[2];
        v292 = *v266 == v241;
        v241 = v266;
      }
      while (!v292);
LABEL_447:
      v241 = v266;
      if (v266 == v440)
        goto LABEL_488;
    }
  }
  v264 = -1;
LABEL_488:
  v428 = 0;
  v429 = 0;
  v427 = &v428;
  if (v423)
  {
    v267 = 0;
    while (1)
    {
      v270 = v436;
      if (*(_QWORD *)&v436[8 * v267])
        goto LABEL_493;
      if (v267 != v264)
        break;
      v271 = v428;
      v272 = &v428;
      v268 = &v428;
      if (v428)
      {
        while (1)
        {
          while (1)
          {
            v268 = (uint64_t **)v271;
            v273 = v271[4];
            if (v264 >= v273)
              break;
            v271 = *v268;
            v272 = v268;
            if (!*v268)
              goto LABEL_503;
          }
          if (v273 >= v264)
            break;
          v271 = v268[1];
          if (!v271)
          {
            v272 = v268 + 1;
            goto LABEL_503;
          }
        }
        v275 = v264;
        goto LABEL_492;
      }
LABEL_503:
      v269 = (uint64_t *)operator new(0x30uLL);
      v269[4] = v264;
      v269[5] = 0;
      *v269 = 0;
      v269[1] = 0;
      v269[2] = (uint64_t)v268;
      *v272 = v269;
      v274 = *v427;
      v275 = v264;
      v268 = (uint64_t **)v269;
      if (*v427)
        goto LABEL_490;
LABEL_491:
      sub_1BE61F5C0(v428, v269);
      ++v429;
LABEL_492:
      v268[5] = (uint64_t *)v275;
LABEL_493:
      if (++v267 == v423)
        goto LABEL_547;
    }
    v276 = v442;
    v277 = &v442;
    v278 = &v442;
    if (v442)
    {
      while (1)
      {
        while (1)
        {
          v278 = (uint64_t **)v276;
          v279 = v276[4];
          if (v267 >= v279)
            break;
          v276 = *v278;
          v277 = v278;
          if (!*v278)
            goto LABEL_512;
        }
        if (v279 >= v267)
          break;
        v276 = v278[1];
        if (!v276)
        {
          v277 = v278 + 1;
          goto LABEL_512;
        }
      }
      v282 = (unint64_t)v278[5];
      v283 = *((_QWORD *)v5 + 4);
      v284 = v445;
      if (v445)
        goto LABEL_515;
LABEL_531:
      while (1)
      {
        v291 = *(_QWORD *)(v283 + 40 * v282);
        if (!v291)
          break;
        v282 = *(_QWORD *)(*((_QWORD *)v5 + 10) + 72 * (*(_QWORD *)(v283 + 40 * v282 + 16) + v291) + 8);
        v275 = v450;
        if (*(_BYTE *)(v283 + 40 * v282 + 32))
          v292 = 0;
        else
          v292 = *(_QWORD *)&v270[8 * v450] == 0;
        if (!v292)
        {
LABEL_536:
          v293 = v428;
          v272 = &v428;
          v268 = &v428;
          if (v428)
            goto LABEL_541;
          goto LABEL_545;
        }
      }
    }
    else
    {
LABEL_512:
      v280 = (uint64_t *)operator new(0x30uLL);
      v280[4] = v267;
      v280[5] = 0;
      *v280 = 0;
      v280[1] = 0;
      v280[2] = (uint64_t)v278;
      *v277 = v280;
      v281 = v280;
      if (*v441)
      {
        v441 = (uint64_t **)*v441;
        v281 = *v277;
      }
      sub_1BE61F5C0(v442, v281);
      ++v443;
      v270 = v436;
      v282 = v280[5];
      v283 = *((_QWORD *)v5 + 4);
      v284 = v445;
      if (!v445)
        goto LABEL_531;
LABEL_515:
      while (1)
      {
        v285 = *(_QWORD *)(v283 + 40 * v282);
        if (!v285)
          break;
        v282 = *(_QWORD *)(*((_QWORD *)v5 + 10) + 72 * (*(_QWORD *)(v283 + 40 * v282 + 16) + v285) + 8);
        v286 = &v445;
        v287 = v284;
        do
        {
          v288 = v287;
          v289 = v286;
          v290 = v287[4];
          if (v290 >= v282)
            v286 = (uint64_t **)v287;
          else
            ++v287;
          v287 = (uint64_t *)*v287;
        }
        while (v287);
        if (v286 == &v445)
          goto LABEL_525;
        if (v290 < v282)
          v288 = (uint64_t *)v289;
        if (v282 < v288[4])
LABEL_525:
          v286 = &v445;
        v275 = (uint64_t)v286[5];
        if (*(_BYTE *)(v283 + 40 * v282 + 32) || *(_QWORD *)&v270[8 * v275])
          goto LABEL_536;
      }
    }
    v275 = -1;
    v293 = v428;
    v272 = &v428;
    v268 = &v428;
    if (v428)
    {
      while (1)
      {
LABEL_541:
        while (1)
        {
          v268 = (uint64_t **)v293;
          v294 = v293[4];
          if (v267 >= v294)
            break;
          v293 = *v268;
          v272 = v268;
          if (!*v268)
            goto LABEL_545;
        }
        if (v294 >= v267)
          goto LABEL_492;
        v293 = v268[1];
        if (!v293)
        {
          v272 = v268 + 1;
          break;
        }
      }
    }
LABEL_545:
    v269 = (uint64_t *)operator new(0x30uLL);
    v269[4] = v267;
    v269[5] = 0;
    *v269 = 0;
    v269[1] = 0;
    v269[2] = (uint64_t)v268;
    *v272 = v269;
    v274 = *v427;
    v268 = (uint64_t **)v269;
    if (!*v427)
      goto LABEL_491;
LABEL_490:
    v268 = (uint64_t **)v269;
    v427 = (uint64_t **)v274;
    v269 = *v272;
    goto LABEL_491;
  }
LABEL_547:
  v295 = v447;
  v296 = v448;
  if (v448 != v447)
  {
    v297 = 0;
    do
    {
      v299 = v428;
      if (v428)
      {
        v300 = *(_QWORD *)&v295[72 * v297 + 8];
        v301 = &v428;
        v302 = v428;
        do
        {
          v303 = v302;
          v304 = v301;
          v305 = v302[4];
          if (v305 >= v300)
            v301 = (uint64_t **)v302;
          else
            ++v302;
          v302 = (uint64_t *)*v302;
        }
        while (v302);
        if (v301 != &v428)
        {
          if (v305 < v300)
            v303 = (uint64_t *)v304;
          if (v300 >= v303[4])
          {
            do
            {
              while (1)
              {
                v306 = v299;
                v307 = v299[4];
                if (v300 < v307)
                  break;
                if (v307 >= v300)
                {
                  v298 = v306;
                  goto LABEL_550;
                }
                v299 = (uint64_t *)v306[1];
                if (!v299)
                {
                  v308 = (uint64_t **)(v306 + 1);
                  goto LABEL_569;
                }
              }
              v299 = (uint64_t *)*v306;
            }
            while (*v306);
            v308 = (uint64_t **)v306;
LABEL_569:
            v298 = (uint64_t *)operator new(0x30uLL);
            v298[4] = v300;
            v298[5] = 0;
            *v298 = 0;
            v298[1] = 0;
            v298[2] = (uint64_t)v306;
            *v308 = v298;
            v309 = v298;
            if (*v427)
            {
              v427 = (uint64_t **)*v427;
              v309 = *v308;
            }
            sub_1BE61F5C0(v428, v309);
            ++v429;
            v295 = v447;
            v296 = v448;
LABEL_550:
            *(_QWORD *)&v295[72 * v297 + 8] = v298[5];
          }
        }
      }
      ++v297;
    }
    while (v297 < 0x8E38E38E38E38E39 * ((v296 - v295) >> 3));
  }
  v425 = 0;
  v426 = 0;
  v310 = operator new(0x30uLL);
  *v310 = 0;
  v310[1] = 0;
  v310[2] = &v425;
  v424 = v310;
  v425 = v310;
  *((_BYTE *)v310 + 24) = 1;
  v426 = 1;
  v310[4] = 0;
  v310[5] = 0;
  v311 = *v417;
  if (v264 != -1)
  {
    if (v311)
    {
      v312 = (uint64_t *)v417;
      v313 = *v417;
      do
      {
        v314 = v313[4];
        v315 = v314 >= v264;
        if (v314 >= v264)
          v316 = (uint64_t **)v313;
        else
          v316 = (uint64_t **)(v313 + 1);
        if (v315)
          v312 = v313;
        v313 = *v316;
      }
      while (*v316);
      if (v312 != (uint64_t *)v417 && v312[4] <= v264)
      {
        v317 = (uint64_t *)v312[1];
        if (v317)
        {
          do
          {
            v318 = v317;
            v317 = (uint64_t *)*v317;
          }
          while (v317);
        }
        else
        {
          v319 = v312;
          do
          {
            v318 = (uint64_t *)v319[2];
            v292 = *v318 == (_QWORD)v319;
            v319 = v318;
          }
          while (!v292);
        }
        if (*v416 == v312)
          *v416 = v318;
        --*((_QWORD *)v418 + 9);
        sub_1BE670DF8(v311, v312);
        operator delete(v312);
        v311 = (uint64_t *)*((_QWORD *)v418 + 8);
      }
    }
    *((_BYTE *)*v415 + 40 * v264 + 32) = 0;
  }
  sub_1BE62033C((uint64_t)v416, v311);
  *((_QWORD *)v418 + 8) = 0;
  *((_QWORD *)v418 + 9) = 0;
  *((_QWORD *)v418 + 7) = v417;
  v321 = v447;
  if (v448 != v447)
  {
    v322 = 0;
    v323 = -1;
    v324 = 1;
    while (1)
    {
      v325 = (unint64_t *)&v321[72 * v322];
      v327 = *v325;
      v326 = v325[1];
      v328 = v425;
      v329 = &v425;
      v330 = &v425;
      if (!v425)
        break;
      v331 = &v425;
      v332 = v425;
      do
      {
        v333 = v332;
        v334 = v331;
        v335 = v332[4];
        if (v335 >= v327)
          v331 = (uint64_t **)v332;
        else
          ++v332;
        v332 = (uint64_t *)*v332;
      }
      while (v332);
      if (v331 == &v425)
        goto LABEL_608;
      if (v335 < v327)
        v333 = (uint64_t *)v334;
      if (v327 < v333[4])
      {
LABEL_608:
        v336 = v425;
        while (1)
        {
          while (1)
          {
            v330 = (uint64_t **)v336;
            v337 = v336[4];
            if (v327 >= v337)
              break;
            v336 = *v330;
            v329 = v330;
            if (!*v330)
              goto LABEL_614;
          }
          if (v337 >= v327)
            break;
          v336 = v330[1];
          if (!v336)
          {
            v329 = v330 + 1;
            goto LABEL_614;
          }
        }
        v338 = (uint64_t *)v330;
        goto LABEL_617;
      }
LABEL_618:
      v341 = &v425;
      v342 = &v425;
      if (v328)
      {
        v343 = &v425;
        v344 = v328;
        do
        {
          v345 = v344;
          v346 = v343;
          v347 = v344[4];
          if (v347 >= v326)
            v343 = (uint64_t **)v344;
          else
            ++v344;
          v344 = (uint64_t *)*v344;
        }
        while (v344);
        if (v343 != &v425)
        {
          if (v347 < v326)
            v345 = (uint64_t *)v346;
          if (v326 >= v345[4])
          {
            if (*(_QWORD *)&v447[72 * v322 + 8] != v264)
              goto LABEL_699;
LABEL_639:
            v352 = v425;
            v353 = &v425;
            v354 = &v425;
            if (v425)
            {
              while (1)
              {
                while (1)
                {
                  v354 = (uint64_t **)v352;
                  v355 = v352[4];
                  if (v326 >= v355)
                    break;
                  v352 = *v354;
                  v353 = v354;
                  if (!*v354)
                    goto LABEL_646;
                }
                if (v355 >= v326)
                  break;
                v352 = v354[1];
                if (!v352)
                {
                  v353 = v354 + 1;
                  goto LABEL_646;
                }
              }
              v356 = (uint64_t *)v354;
              v358 = *v417;
              if (*v417)
                goto LABEL_653;
            }
            else
            {
LABEL_646:
              v356 = (uint64_t *)operator new(0x30uLL);
              v356[4] = v326;
              v356[5] = 0;
              *v356 = 0;
              v356[1] = 0;
              v356[2] = (uint64_t)v354;
              *v353 = v356;
              v357 = v356;
              if (*v424)
              {
                v424 = (_QWORD *)*v424;
                v357 = *v353;
              }
              v320 = sub_1BE61F5C0(v425, v357);
              ++v426;
              v358 = *v417;
              if (!*v417)
                goto LABEL_663;
LABEL_653:
              v359 = v356[5];
              v360 = v417;
              v361 = v358;
              do
              {
                v362 = v361[4];
                v363 = v362 >= v359;
                if (v362 >= v359)
                  v364 = (uint64_t **)v361;
                else
                  v364 = (uint64_t **)(v361 + 1);
                if (v363)
                  v360 = (uint64_t **)v361;
                v361 = *v364;
              }
              while (*v364);
              if (v360 != v417 && v359 >= (unint64_t)v360[4])
                goto LABEL_699;
            }
LABEL_663:
            v365 = v425;
            v366 = &v425;
            v367 = &v425;
            if (v425)
            {
              while (1)
              {
                while (1)
                {
                  v367 = (uint64_t **)v365;
                  v368 = v365[4];
                  if (v326 >= v368)
                    break;
                  v365 = *v367;
                  v366 = v367;
                  if (!*v367)
                    goto LABEL_670;
                }
                if (v368 >= v326)
                  break;
                v365 = v367[1];
                if (!v365)
                {
                  v366 = v367 + 1;
                  goto LABEL_670;
                }
              }
              v369 = (uint64_t *)v367;
              v371 = v417;
            }
            else
            {
LABEL_670:
              v369 = (uint64_t *)operator new(0x30uLL);
              v369[4] = v326;
              v369[5] = 0;
              *v369 = 0;
              v369[1] = 0;
              v369[2] = (uint64_t)v367;
              *v366 = v369;
              v370 = v369;
              if (*v424)
              {
                v424 = (_QWORD *)*v424;
                v370 = *v366;
              }
              v320 = sub_1BE61F5C0(v425, v370);
              ++v426;
              v371 = v417;
              v358 = *v417;
            }
            v372 = v369[5];
LABEL_676:
            v373 = v371;
            if (v358)
            {
              do
              {
                v371 = (uint64_t **)v358;
                v374 = v358[4];
                if (v374 > v372)
                {
                  v358 = *v371;
                  goto LABEL_676;
                }
                if (v374 >= v372)
                  goto LABEL_684;
                v358 = v371[1];
              }
              while (v358);
              v373 = v371 + 1;
            }
            v375 = (uint64_t *)operator new(0x28uLL);
            v375[4] = v372;
            *v375 = 0;
            v375[1] = 0;
            v375[2] = (uint64_t)v371;
            *v373 = v375;
            v376 = (uint64_t *)**v416;
            if (v376)
            {
              *v416 = v376;
              v375 = *v373;
            }
            v320 = sub_1BE61F5C0(*((uint64_t **)v418 + 8), v375);
            ++*((_QWORD *)v418 + 9);
LABEL_684:
            v377 = *((_QWORD *)v418 + 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v418 + 5) - v377) >> 3) >= v372)
            {
              *(_BYTE *)(v377 + 40 * v372 + 32) = 1;
              v378 = v425;
              v379 = &v425;
              v380 = &v425;
              if (!v425)
                goto LABEL_694;
              while (1)
              {
LABEL_690:
                while (1)
                {
                  v380 = (uint64_t **)v378;
                  v381 = v378[4];
                  if (v326 >= v381)
                    break;
                  v378 = *v380;
                  v379 = v380;
                  if (!*v380)
                    goto LABEL_694;
                }
                if (v381 >= v326)
                  break;
                v378 = v380[1];
                if (!v378)
                {
                  v379 = v380 + 1;
                  goto LABEL_694;
                }
              }
              v382 = (uint64_t *)v380;
            }
            else
            {
              v378 = v425;
              v379 = &v425;
              v380 = &v425;
              if (v425)
                goto LABEL_690;
LABEL_694:
              v382 = (uint64_t *)operator new(0x30uLL);
              v382[4] = v326;
              v382[5] = 0;
              *v382 = 0;
              v382[1] = 0;
              v382[2] = (uint64_t)v380;
              *v379 = v382;
              v383 = v382;
              if (*v424)
              {
                v424 = (_QWORD *)*v424;
                v383 = *v379;
              }
              v320 = sub_1BE61F5C0(v425, v383);
              ++v426;
            }
            v323 = v382[5];
            goto LABEL_699;
          }
        }
        while (1)
        {
          while (1)
          {
            v342 = (uint64_t **)v328;
            v348 = v328[4];
            if (v326 >= v348)
              break;
            v328 = *v342;
            v341 = v342;
            if (!*v342)
              goto LABEL_635;
          }
          if (v348 >= v326)
            break;
          v328 = v342[1];
          if (!v328)
          {
            v341 = v342 + 1;
            goto LABEL_635;
          }
        }
        v349 = (uint64_t *)v342;
      }
      else
      {
LABEL_635:
        v349 = (uint64_t *)operator new(0x30uLL);
        v349[4] = v326;
        v349[5] = 0;
        *v349 = 0;
        v349[1] = 0;
        v349[2] = (uint64_t)v342;
        *v341 = v349;
        v350 = v349;
        if (*v424)
        {
          v424 = (_QWORD *)*v424;
          v350 = *v341;
        }
        v320 = sub_1BE61F5C0(v425, v350);
        ++v426;
      }
      v351 = v324++;
      v349[5] = v351;
      if (*(_QWORD *)&v447[72 * v322 + 8] == v264)
        goto LABEL_639;
LABEL_699:
      v384 = v425;
      v385 = &v425;
      v386 = &v425;
      if (v425)
      {
        v387 = v425;
        while (1)
        {
          while (1)
          {
            v386 = (uint64_t **)v387;
            v388 = v387[4];
            if (v327 >= v388)
              break;
            v387 = *v386;
            v385 = v386;
            if (!*v386)
              goto LABEL_706;
          }
          if (v388 >= v327)
            break;
          v387 = v386[1];
          if (!v387)
          {
            v385 = v386 + 1;
            goto LABEL_706;
          }
        }
        v389 = (uint64_t *)v386;
      }
      else
      {
LABEL_706:
        v389 = (uint64_t *)operator new(0x30uLL);
        v389[4] = v327;
        v389[5] = 0;
        *v389 = 0;
        v389[1] = 0;
        v389[2] = (uint64_t)v386;
        *v385 = v389;
        v390 = v389;
        if (*v424)
        {
          v424 = (_QWORD *)*v424;
          v390 = *v385;
        }
        v320 = sub_1BE61F5C0(v425, v390);
        v384 = v425;
        ++v426;
      }
      v321 = v447;
      *(_QWORD *)&v447[72 * v322] = v389[5];
      v391 = &v425;
      v392 = &v425;
      if (v384)
      {
        while (1)
        {
          while (1)
          {
            v392 = (uint64_t **)v384;
            v393 = v384[4];
            if (v326 >= v393)
              break;
            v384 = *v392;
            v391 = v392;
            if (!*v392)
              goto LABEL_717;
          }
          if (v393 >= v326)
            break;
          v384 = v392[1];
          if (!v384)
          {
            v391 = v392 + 1;
            goto LABEL_717;
          }
        }
        v394 = (uint64_t *)v392;
      }
      else
      {
LABEL_717:
        v394 = (uint64_t *)operator new(0x30uLL);
        v394[4] = v326;
        v394[5] = 0;
        *v394 = 0;
        v394[1] = 0;
        v394[2] = (uint64_t)v392;
        *v391 = v394;
        v395 = v394;
        if (*v424)
        {
          v424 = (_QWORD *)*v424;
          v395 = *v391;
        }
        v320 = sub_1BE61F5C0(v425, v395);
        ++v426;
        v321 = v447;
      }
      *(_QWORD *)&v321[72 * v322++ + 8] = v394[5];
      if (v322 >= 0x8E38E38E38E38E39 * ((v448 - v321) >> 3))
        goto LABEL_721;
    }
LABEL_614:
    v338 = (uint64_t *)operator new(0x30uLL);
    v338[4] = v327;
    v338[5] = 0;
    *v338 = 0;
    v338[1] = 0;
    v338[2] = (uint64_t)v330;
    *v329 = v338;
    v339 = v338;
    if (*v424)
    {
      v424 = (_QWORD *)*v424;
      v339 = *v329;
    }
    v320 = sub_1BE61F5C0(v425, v339);
    v328 = v425;
    ++v426;
LABEL_617:
    v340 = v324++;
    v338[5] = v340;
    goto LABEL_618;
  }
  v323 = -1;
  v324 = 1;
LABEL_721:
  v396 = *((_QWORD *)v418 + 4);
  v397 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v418 + 5) - v396) >> 3);
  if (v324 <= v397)
  {
    v398 = v417;
    if (v324 < v397)
      *((_QWORD *)v418 + 5) = v396 + 40 * v324;
  }
  else
  {
    sub_1BE66CE80(v415, v324 - v397);
    v398 = v417;
  }
  if (v323 != -1)
  {
    v399 = *v398;
    v400 = v398;
    if (*v398)
    {
      while (1)
      {
        while (1)
        {
          v400 = (uint64_t **)v399;
          v401 = v399[4];
          if (v401 <= v323)
            break;
          v399 = *v400;
          v398 = v400;
          if (!*v400)
            goto LABEL_733;
        }
        if (v401 >= v323)
          break;
        v399 = v400[1];
        if (!v399)
        {
          v398 = v400 + 1;
          goto LABEL_733;
        }
      }
    }
    else
    {
LABEL_733:
      v402 = (uint64_t *)operator new(0x28uLL);
      v402[4] = v323;
      *v402 = 0;
      v402[1] = 0;
      v402[2] = (uint64_t)v400;
      *v398 = v402;
      v403 = (uint64_t *)**v416;
      if (v403)
      {
        *v416 = v403;
        v402 = *v398;
      }
      v320 = sub_1BE61F5C0(*((uint64_t **)v418 + 8), v402);
      ++*((_QWORD *)v418 + 9);
    }
    v404 = *((_QWORD *)v418 + 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v418 + 5) - v404) >> 3) >= v323)
      *(_BYTE *)(v404 + 40 * v323 + 32) = 1;
  }
  sub_1BE828388((uint64_t)v320, (uint64_t)&v447);
  v406 = v447;
  v405 = v448;
  v407 = v418;
  if (v447 != v448)
  {
    v408 = (char *)*((_QWORD *)v418 + 11);
    do
    {
      if ((unint64_t)v408 < *((_QWORD *)v407 + 12))
      {
        *(_OWORD *)v408 = *v406;
        *((_OWORD *)v408 + 1) = v406[1];
        *((_OWORD *)v408 + 2) = v406[2];
        *((_OWORD *)v408 + 3) = v406[3];
        *((_QWORD *)v408 + 8) = *((_QWORD *)v406 + 8);
        v408 += 72;
      }
      else
      {
        v408 = sub_1BE66D0D0((char **)v418 + 10, (uint64_t)v406);
      }
      v407 = v418;
      *((_QWORD *)v418 + 11) = v408;
      v406 = (_OWORD *)((char *)v406 + 72);
    }
    while (v406 != (_OWORD *)v405);
  }
  Network::prepareNetwork(v407);
  sub_1BE62033C((uint64_t)&v424, v425);
  sub_1BE62033C((uint64_t)&v427, v428);
  sub_1BE62033C((uint64_t)&v430, v431);
  v409 = (void **)__p[1];
  v410 = (void **)v434;
  *((_QWORD *)&v435 + 1) = 0;
  v411 = v434 - (unint64_t)__p[1];
  if ((unint64_t)v434 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v409);
      v410 = (void **)v434;
      v409 = (void **)((char *)__p[1] + 8);
      __p[1] = v409;
      v411 = v434 - (_QWORD)v409;
    }
    while ((_QWORD)v434 - (_QWORD)v409 > 0x10uLL);
  }
  v412 = v411 >> 3;
  if (v412 == 1)
  {
    v413 = 256;
    goto LABEL_750;
  }
  if (v412 == 2)
  {
    v413 = 512;
LABEL_750:
    *(_QWORD *)&v435 = v413;
  }
  if (v409 != v410)
  {
    do
    {
      v414 = *v409++;
      operator delete(v414);
    }
    while (v409 != v410);
    if ((void *)v434 != __p[1])
      *(_QWORD *)&v434 = v434 + (((unint64_t)__p[1] - v434 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v436)
    operator delete(v436);
  sub_1BE62033C((uint64_t)&v439, v440[0]);
  sub_1BE62033C((uint64_t)&v441, v442);
  sub_1BE62033C((uint64_t)&v444, v445);
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
}

void sub_1BE8282A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  sub_1BE62033C((uint64_t)&a30, a31);
  sub_1BE61BE20((uint64_t)&a33);
  v35 = *(void **)(v33 - 224);
  if (v35)
    operator delete(v35);
  sub_1BE62033C(v33 - 200, *(_QWORD **)(v33 - 192));
  sub_1BE62033C(v33 - 176, *(_QWORD **)(v33 - 168));
  sub_1BE62033C(v33 - 152, *(_QWORD **)(v33 - 144));
  v36 = *(void **)(v33 - 128);
  if (v36)
  {
    *(_QWORD *)(v33 - 120) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void sub_1BE828388(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  BOOL v24;
  _BOOL4 v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  char *v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  unint64_t v38;
  char *v39;
  NSObject *v40;
  double *v41;
  double *v42;
  double v43;
  char *v44;
  char *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  _BOOL4 v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  _DWORD *v59;
  uint64_t *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint8_t buf[16];
  void *__p;
  int v66[2];
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;

  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = &v69;
  __p = 0;
  *(_QWORD *)v66 = 0;
  v3 = *(char **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    v63 = 0;
    if (&__p == (void **)a2)
      goto LABEL_107;
    goto LABEL_106;
  }
  v4 = 0;
  do
  {
    v7 = &v3[72 * v4];
    v8 = *(_DWORD *)v7;
    v9 = *((_DWORD *)v7 + 2);
    v10 = *((_DWORD *)v7 + 4);
    v11 = *((_DWORD *)v7 + 6);
    v12 = v69;
    if (!v69)
    {
      v35 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v66 - (_QWORD)__p) >> 3);
      v36 = &v69;
LABEL_50:
      v37 = v36;
LABEL_97:
      v59 = operator new(0x40uLL);
      v59[8] = v8;
      v59[9] = v9;
      v59[10] = v10;
      v59[11] = v11;
      v59[12] = 0;
      *((_QWORD *)v59 + 7) = 0;
      *(_QWORD *)v59 = 0;
      *((_QWORD *)v59 + 1) = 0;
      *((_QWORD *)v59 + 2) = v36;
      *v37 = (uint64_t *)v59;
      v60 = (uint64_t *)v59;
      if (*v68)
      {
        v68 = (uint64_t **)*v68;
        v60 = *v37;
      }
      sub_1BE61F5C0(v69, v60);
      ++v70;
      v3 = *(char **)a2;
      v34 = *(char **)v66;
      v61 = v67;
      *((_QWORD *)v59 + 7) = v35;
      v62 = &v3[72 * v4];
      if ((unint64_t)v34 >= v61)
        goto LABEL_100;
      goto LABEL_3;
    }
    v13 = &v69;
    v14 = v69;
    do
    {
      while (1)
      {
        v15 = *((_DWORD *)v14 + 8);
        v22 = v15 >= v8;
        v16 = v15 > v8;
        if (v22)
          v17 = v16;
        else
          v17 = -1;
        v18 = *((_DWORD *)v14 + 10);
        v22 = v18 >= v10;
        v19 = v18 > v10;
        if (!v22)
          v19 = -1;
        if (v17 != -1)
        {
          if (v17)
            break;
          v20 = *((_DWORD *)v14 + 9);
          v22 = v20 >= v9;
          v21 = v20 > v9;
          if (!v22)
            v21 = -1;
          if (v21 != -1)
          {
            if (v21)
              break;
            if (v19 != -1)
            {
              v22 = v19 || *((_DWORD *)v14 + 11) >= v11;
              if (v22)
                break;
            }
          }
        }
        v14 = (uint64_t *)v14[1];
        if (!v14)
          goto LABEL_27;
      }
      v13 = (uint64_t **)v14;
      v14 = (uint64_t *)*v14;
    }
    while (v14);
LABEL_27:
    if (v13 == &v69)
      goto LABEL_48;
    v23 = *((_DWORD *)v13 + 8);
    v24 = v23 > v8;
    v25 = v23 < v8;
    if (v24)
      v26 = -1;
    else
      v26 = v25;
    v27 = *((_DWORD *)v13 + 10);
    v28 = *((_DWORD *)v13 + 11);
    v24 = v27 > v10;
    v29 = v27 < v10;
    if (v24)
      v30 = -1;
    else
      v30 = v29;
    v31 = v28 < v11;
    if (v28 > v11)
      v31 = -1;
    if (v26 == -1)
      goto LABEL_48;
    if (!v26)
    {
      v32 = *((_DWORD *)v13 + 9);
      v24 = v32 > v9;
      v33 = v32 < v9;
      if (v24)
        v33 = -1;
      if (v33 == -1 || !v33 && (v30 == -1 || !v30 && (v31 == -1 || !v31 && *((_DWORD *)v13 + 12))))
      {
LABEL_48:
        v34 = *(char **)v66;
        v35 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v66 - (_QWORD)__p) >> 3);
        while (1)
        {
          while (1)
          {
            v36 = (uint64_t **)v12;
            v46 = *((_DWORD *)v12 + 8);
            if (v46 > v8)
              v47 = -1;
            else
              v47 = v46 < v8;
            v49 = *((_DWORD *)v12 + 10);
            v48 = *((_DWORD *)v12 + 11);
            if (v49 > v10)
              v50 = -1;
            else
              v50 = v49 < v10;
            v51 = v48 < v11;
            if (v48 > v11)
              v51 = -1;
            if (v47 != -1)
            {
              if (v47)
                break;
              v52 = *((_DWORD *)v36 + 9);
              v24 = v52 > v9;
              v53 = v52 < v9;
              if (v24)
                v53 = -1;
              if (v53 != -1 && (v53 || v50 != -1 && (v50 || v51 != -1 && (v51 || !*((_DWORD *)v36 + 12)))))
                break;
            }
            v12 = *v36;
            if (!*v36)
              goto LABEL_50;
          }
          v22 = v46 >= v8;
          v54 = v46 > v8;
          if (v22)
            v55 = v54;
          else
            v55 = -1;
          v56 = v49 > v10;
          if (v49 < v10)
            v56 = -1;
          if (v55 != -1)
          {
            if (v55)
              break;
            v57 = *((_DWORD *)v36 + 9);
            v22 = v57 >= v9;
            v58 = v57 > v9;
            if (!v22)
              v58 = -1;
            if (v58 != -1 && (v58 || v56 != -1 && (v56 || v48 >= v11)))
              break;
          }
          v12 = v36[1];
          if (!v12)
          {
            v37 = v36 + 1;
            goto LABEL_97;
          }
        }
        v36[7] = (uint64_t *)v35;
        v62 = &v3[72 * v4];
        if ((unint64_t)v34 >= v67)
        {
LABEL_100:
          v6 = sub_1BE66D0D0((char **)&__p, (uint64_t)v62);
          v3 = *(char **)a2;
          goto LABEL_4;
        }
LABEL_3:
        *(_OWORD *)v34 = *(_OWORD *)v62;
        v5 = &v3[72 * v4];
        *((_OWORD *)v34 + 1) = *((_OWORD *)v5 + 1);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v5 + 2);
        *((_OWORD *)v34 + 3) = *((_OWORD *)v5 + 3);
        *((_QWORD *)v34 + 8) = *((_QWORD *)v5 + 8);
        v6 = v34 + 72;
LABEL_4:
        *(_QWORD *)v66 = v6;
        goto LABEL_5;
      }
    }
    v38 = (unint64_t)v13[7];
    v39 = (char *)__p;
    if (v38 >= 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v66 - (_QWORD)__p) >> 3))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v40 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v40, OS_LOG_TYPE_FAULT, "Error when merging equivalent edges: index out of bounds", buf, 2u);
      }

      v39 = (char *)__p;
      v3 = *(char **)a2;
    }
    v41 = (double *)&v3[72 * v4];
    v42 = (double *)&v39[72 * v38];
    if (v42 != v41)
    {
      v43 = v41[4];
      if (v43 < v42[4])
      {
        *(_OWORD *)v42 = *(_OWORD *)v41;
        v42[4] = v43;
        v44 = &v3[72 * v4];
        v45 = &v39[72 * v38];
        *((_QWORD *)v45 + 5) = *((_QWORD *)v44 + 5);
        *((_OWORD *)v45 + 1) = *((_OWORD *)v44 + 1);
        *((_OWORD *)v45 + 3) = *((_OWORD *)v44 + 3);
        *((_QWORD *)v45 + 8) = *((_QWORD *)v44 + 8);
      }
    }
LABEL_5:
    ++v4;
  }
  while (v4 < 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - (_QWORD)v3) >> 3));
  v63 = (char *)__p;
  if (&__p != (void **)a2)
  {
LABEL_106:
    sub_1BE66B600(a2, v63, *(char **)v66, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v66 - (_QWORD)v63) >> 3));
    v63 = (char *)__p;
  }
LABEL_107:
  if (v63)
  {
    *(_QWORD *)v66 = v63;
    operator delete(v63);
  }
  sub_1BE671438(v69);
}

void sub_1BE8288BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  if (__p)
    operator delete(__p);
  sub_1BE671438(a17);
  _Unwind_Resume(a1);
}

void Network::compose(Network *this, const Network *a2, Network *a3, char a4)
{
  uint64_t v8;
  void **v9;
  _QWORD **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  char *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t *v30;
  _QWORD *v31[2];
  uint64_t *v32;
  _QWORD *v33[2];
  _QWORD **v34;
  _QWORD *v35;
  unint64_t v36;
  void *__p;
  _OWORD *v38;
  uint64_t v39;

  v8 = *((_QWORD *)this + 4);
  v9 = (void **)((char *)this + 32);
  if (*((_QWORD *)this + 5) != v8)
    *((_QWORD *)this + 5) = v8;
  v10 = (_QWORD **)((char *)this + 56);
  v11 = (uint64_t **)((char *)this + 64);
  sub_1BE62033C((uint64_t)this + 56, *((_QWORD **)this + 8));
  *((_QWORD *)this + 7) = v11;
  *((_QWORD *)this + 9) = 0;
  *v11 = 0;
  __p = 0;
  v38 = 0;
  v39 = 0;
  v35 = 0;
  v36 = 0;
  v34 = &v35;
  sub_1BE62033C((uint64_t)this + 216, *((_QWORD **)this + 28));
  *((_QWORD *)this + 27) = (char *)this + 224;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = 0;
  v33[0] = 0;
  v33[1] = 0;
  v31[1] = 0;
  v32 = (uint64_t *)v33;
  v30 = (uint64_t *)v31;
  v31[0] = 0;
  v12 = sub_1BE828C24((uint64_t)this, (uint64_t)a2, a3, *((_QWORD *)a2 + 3), *((_QWORD *)a3 + 3), (uint64_t)&v34, (uint64_t)&__p, &v32, &v30, a4);
  v13 = *((_QWORD *)this + 4);
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v13) >> 3);
  if (v36 <= v14)
  {
    if (v36 < v14)
      *((_QWORD *)this + 5) = v13 + 40 * v36;
  }
  else
  {
    sub_1BE66CE80(v9, v36 - v14);
  }
  sub_1BE828388(v12, (uint64_t)&__p);
  v15 = __p;
  v16 = v38;
  if (__p != v38)
  {
    v17 = (char *)*((_QWORD *)this + 11);
    do
    {
      if ((unint64_t)v17 < *((_QWORD *)this + 12))
      {
        *(_OWORD *)v17 = *v15;
        *((_OWORD *)v17 + 1) = v15[1];
        *((_OWORD *)v17 + 2) = v15[2];
        *((_OWORD *)v17 + 3) = v15[3];
        *((_QWORD *)v17 + 8) = *((_QWORD *)v15 + 8);
        v17 += 72;
      }
      else
      {
        v17 = sub_1BE66D0D0((char **)this + 10, (uint64_t)v15);
      }
      *((_QWORD *)this + 11) = v17;
      v15 = (_OWORD *)((char *)v15 + 72);
    }
    while (v15 != v16);
  }
  Network::prepareNetwork(this);
  v18 = v30;
  if (v30 != (uint64_t *)v31)
  {
    do
    {
      v19 = v18[4];
      v20 = *v11;
      v21 = (uint64_t **)((char *)this + 64);
      v22 = (uint64_t **)((char *)this + 64);
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            v22 = (uint64_t **)v20;
            v23 = v20[4];
            if (v23 <= v19)
              break;
            v20 = *v22;
            v21 = v22;
            if (!*v22)
              goto LABEL_23;
          }
          if (v23 >= v19)
            break;
          v20 = v22[1];
          if (!v20)
          {
            v21 = v22 + 1;
            goto LABEL_23;
          }
        }
      }
      else
      {
LABEL_23:
        v24 = (uint64_t *)operator new(0x28uLL);
        v24[4] = v19;
        *v24 = 0;
        v24[1] = 0;
        v24[2] = (uint64_t)v22;
        *v21 = v24;
        v25 = (_QWORD *)**v10;
        if (v25)
        {
          *v10 = v25;
          v24 = *v21;
        }
        sub_1BE61F5C0(*((uint64_t **)this + 8), v24);
        ++*((_QWORD *)this + 9);
      }
      v26 = *((_QWORD *)this + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v26) >> 3) >= v19)
        *(_BYTE *)(v26 + 40 * v19 + 32) = 1;
      v27 = (uint64_t *)v18[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (uint64_t *)v18[2];
          v29 = *v28 == (_QWORD)v18;
          v18 = v28;
        }
        while (!v29);
      }
      v18 = v28;
    }
    while (v28 != (uint64_t *)v31);
  }
  sub_1BE62033C((uint64_t)&v30, v31[0]);
  sub_1BE62033C((uint64_t)&v32, v33[0]);
  sub_1BE671438(v35);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
}

void sub_1BE828BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_1BE62033C((uint64_t)&a13, a14);
  sub_1BE62033C((uint64_t)&a16, a17);
  sub_1BE671438(a20);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BE828C24(uint64_t result, uint64_t a2, Network *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8, uint64_t **a9, char a10)
{
  unint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _BOOL4 v17;
  BOOL v18;
  _QWORD *v19;
  unint64_t v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  unint64_t v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _BOOL4 v42;
  BOOL v43;
  _QWORD *v44;
  uint64_t **v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v65;

  v62 = result;
  v11 = a4;
  v14 = *(_QWORD **)(a6 + 8);
  if (v14)
  {
    v15 = (_QWORD *)(a6 + 8);
    do
    {
      v16 = v14[4];
      v18 = v16 == a4;
      v17 = v16 < a4;
      if (v18)
        v17 = v14[5] < a5;
      v18 = !v17;
      if (v17)
        v19 = v14 + 1;
      else
        v19 = v14;
      if (v18)
        v15 = v14;
      v14 = (_QWORD *)*v19;
    }
    while (*v19);
    if (v15 != (_QWORD *)(a6 + 8))
    {
      v20 = v15[4];
      v18 = v20 == a4;
      v21 = v20 <= a4;
      if (v18)
        v21 = v15[5] <= a5;
      if (v21)
      {
        v22 = v15[6];
        if (v22 != -1)
        {
          v23 = a8[1];
          if (v23)
          {
            v24 = a8 + 1;
            do
            {
              v25 = v23[4];
              v26 = v25 >= v22;
              if (v25 >= v22)
                v27 = (uint64_t **)v23;
              else
                v27 = (uint64_t **)(v23 + 1);
              if (v26)
                v24 = (uint64_t **)v23;
              v23 = *v27;
            }
            while (*v27);
            if (v24 != a8 + 1 && v22 >= (unint64_t)v24[4])
              return result;
          }
        }
      }
    }
  }
  v58 = (_QWORD *)(a6 + 8);
  v65 = *(_QWORD *)(a6 + 16);
  result = (uint64_t)sub_1BE82A550((uint64_t **)a6, a4, a5, &v65);
  v61 = result;
  v28 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v28 + 40 * v11))
  {
    v29 = 0;
    v59 = v11;
    do
    {
      v30 = *(_QWORD *)(a2 + 80) + 72 * (*(_QWORD *)(v28 + 40 * v11 + 16) + v29);
      v32 = *(_QWORD *)(v30 + 8);
      v31 = *(uint64_t **)(v30 + 16);
      result = Network::findFirstEdgeGivenSymbol(a3, a5, v31);
      v33 = result;
      if (!a5 && a10 && result == -1)
      {
        result = sub_1BE82A170(v62, a2, (uint64_t)a3, a6, v61, v32, 0, v30, 0, a9, a7, 1);
        if ((result & 1) == 0)
        {
          LOBYTE(v56) = 1;
          result = sub_1BE828C24(v62, a2, a3, v32, 0, a6, a7, a8, a9, v56);
        }
      }
      else if (result != -1)
      {
        for (i = *((_QWORD *)a3 + 4); v33 < *(_QWORD *)(i + 40 * a5); i = *((_QWORD *)a3 + 4))
        {
          v35 = v33 + *(_QWORD *)(i + 40 * a5 + 16);
          v36 = *((_QWORD *)a3 + 10);
          v37 = v36 + 72 * v35;
          if (*(uint64_t **)(v37 + 16) != v31)
            break;
          v38 = *(_QWORD *)(v37 + 8);
          result = sub_1BE82A170(v62, a2, (uint64_t)a3, a6, v61, v32, v38, v30, v36 + 72 * v35, a9, a7, 0);
          if ((result & 1) == 0)
          {
            LOBYTE(v57) = a10;
            result = sub_1BE828C24(v62, a2, a3, v32, v38, a6, a7, a8, a9, v57);
          }
          ++v33;
        }
      }
      ++v29;
      v28 = *(_QWORD *)(a2 + 32);
      v11 = v59;
    }
    while (*(_QWORD *)(v28 + 40 * v59) > v29);
  }
  v39 = (_QWORD *)*v58;
  if (*v58)
  {
    v40 = v58;
    do
    {
      v41 = v39[4];
      v18 = v41 == v11;
      v42 = v41 < v11;
      if (v18)
        v42 = v39[5] < a5;
      v43 = !v42;
      if (v42)
        v44 = v39 + 1;
      else
        v44 = v39;
      if (v43)
        v40 = v39;
      v39 = (_QWORD *)*v44;
    }
    while (*v44);
    v45 = a8;
    if (v40 == v58)
      goto LABEL_60;
    v46 = v40[4];
    v18 = v46 == v11;
    v47 = v46 <= v11;
    if (v18)
      v47 = v40[5] <= a5;
    if (!v47)
    {
LABEL_60:
      v48 = -1;
      v50 = a8 + 1;
      v49 = a8[1];
      if (v49)
        goto LABEL_65;
    }
    else
    {
      v48 = v40[6];
      v50 = a8 + 1;
      v49 = a8[1];
      if (v49)
        goto LABEL_65;
    }
LABEL_63:
    v51 = v50;
LABEL_69:
    v53 = (uint64_t *)operator new(0x28uLL);
    v53[4] = v48;
    *v53 = 0;
    v53[1] = 0;
    v53[2] = (uint64_t)v51;
    *v50 = v53;
    v54 = (uint64_t *)**v45;
    if (v54)
    {
      *v45 = v54;
      v55 = *v50;
    }
    else
    {
      v55 = v53;
    }
    result = (uint64_t)sub_1BE61F5C0(v45[1], v55);
    v45[2] = (uint64_t *)((char *)v45[2] + 1);
    return result;
  }
  v48 = -1;
  v45 = a8;
  v50 = a8 + 1;
  v49 = a8[1];
  if (!v49)
    goto LABEL_63;
  while (1)
  {
LABEL_65:
    while (1)
    {
      v51 = (uint64_t **)v49;
      v52 = v49[4];
      if (v48 >= v52)
        break;
      v49 = *v51;
      v50 = v51;
      if (!*v51)
        goto LABEL_69;
    }
    if (v52 >= v48)
      return result;
    v49 = v51[1];
    if (!v49)
    {
      v50 = v51 + 1;
      goto LABEL_69;
    }
  }
}

void sub_1BE829038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t **a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t **a14, uint64_t **a15)
{
  BOOL v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _BOOL4 v20;
  BOOL v21;
  _QWORD *v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  char v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t CursorByAdvancingWithCharacters;
  uint64_t v42;
  int TokenID;
  uint64_t *v44;
  unsigned int v45;
  size_t v46;
  unsigned __int16 *v47;
  uint64_t **v48;
  int v49;
  size_t v50;
  const void *v51;
  size_t v52;
  int v53;
  _BOOL4 v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t *v59;
  int v60;
  size_t v61;
  uint64_t **v62;
  size_t v63;
  int v64;
  _BOOL4 v65;
  int v66;
  int HasChildren;
  int HasEntries;
  unint64_t v69;
  char v70;
  int v71;
  uint64_t *v72;
  unsigned int v73;
  BOOL v74;
  BOOL v75;
  int v76;
  uint64_t *v77;
  unint64_t v78;
  void *v79;
  void **v80;
  uint64_t **v81;
  int v82;
  size_t v83;
  const void *v84;
  size_t v85;
  int v86;
  _BOOL4 v87;
  BOOL v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t *v92;
  int v93;
  size_t v94;
  uint64_t **v95;
  size_t v96;
  int v97;
  _BOOL4 v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  _BOOL4 v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _BOOL4 v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t **v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD *v114;
  unint64_t v115;
  char v116;
  _QWORD *v117;
  int v119;
  int v122;
  uint64_t **v123;
  int v124;
  unint64_t v125;
  uint64_t *v128;
  uint64_t *v129;
  void *v132[2];
  unsigned __int8 v133;
  uint64_t v134;
  void *__p[2];
  char v136;
  __int16 v137;
  uint64_t v138;
  unsigned __int16 v139[4];
  size_t v140;
  unsigned __int8 v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v15 = a6 == a10 || a5 == a10;
  v16 = v15;
  v119 = v16;
  v17 = *(_QWORD **)(a12 + 8);
  if (v17)
  {
    v18 = (_QWORD *)(a12 + 8);
    do
    {
      v19 = v17[4];
      v15 = v19 == a8;
      v20 = v19 < a8;
      if (v15)
        v20 = v17[5] < a10;
      v21 = !v20;
      if (v20)
        v22 = v17 + 1;
      else
        v22 = v17;
      if (v21)
        v18 = v17;
      v17 = (_QWORD *)*v22;
    }
    while (*v22);
    if (v18 != (_QWORD *)(a12 + 8))
    {
      v23 = v18[4];
      v15 = v23 == a8;
      v24 = v23 <= a8;
      if (v15)
        v24 = v18[5] <= a10;
      if (v24)
      {
        v25 = v18[6];
        if (v25 != -1)
        {
          v26 = a14[1];
          if (v26)
          {
            v27 = a14 + 1;
            do
            {
              v28 = v26[4];
              v29 = v28 >= v25;
              if (v28 >= v25)
                v30 = (uint64_t **)v26;
              else
                v30 = (uint64_t **)(v26 + 1);
              if (v29)
                v27 = (uint64_t **)v26;
              v26 = *v30;
            }
            while (*v30);
            if (v27 != a14 + 1 && v25 >= (unint64_t)v27[4])
              return;
          }
        }
      }
    }
  }
  v114 = (_QWORD *)(a12 + 8);
  if (a11)
    v31 = a5;
  else
    v31 = a10;
  v138 = *(_QWORD *)(a12 + 16);
  v115 = v31;
  v128 = sub_1BE82A550((uint64_t **)a12, a8, v31, &v138);
  v32 = a2;
  v33 = *(_QWORD *)(a2 + 32);
  v34 = a8;
  if (*(_QWORD *)(v33 + 40 * a8))
  {
    v35 = 0;
    v117 = (_QWORD *)(a1 + 128);
    v123 = a7 + 1;
    if (a4)
      v36 = a4 == a3;
    else
      v36 = 1;
    v37 = v36;
    v116 = v37;
    do
    {
      v38 = (_QWORD *)(*(_QWORD *)(v32 + 80) + 72 * (*(_QWORD *)(v33 + 40 * v34 + 16) + v35));
      v40 = v38[1];
      v39 = v38[2];
      v137 = v39;
      CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      v42 = CursorByAdvancingWithCharacters;
      if (!v119)
      {
        LODWORD(v129) = 0;
        v124 = 0;
        v45 = 0;
        v122 = 0;
        v32 = a2;
        if (CursorByAdvancingWithCharacters)
          goto LABEL_106;
        goto LABEL_49;
      }
      ul2sh(v39, (uint64_t)v139);
      v129 = sub_1BE66A2C4(v117, (uint64_t)v139);
      if (v42)
      {
        TokenID = LMLexiconCursorFirstTokenID();
        v44 = *v123;
        if (!*v123)
          goto LABEL_98;
      }
      else
      {
        TokenID = 0;
        v44 = *v123;
        if (!*v123)
          goto LABEL_98;
      }
      v125 = v40;
      if ((v141 & 0x80u) == 0)
        v46 = v141;
      else
        v46 = v140;
      if ((v141 & 0x80u) == 0)
        v47 = v139;
      else
        v47 = *(unsigned __int16 **)v139;
      v48 = a7 + 1;
      do
      {
        v49 = *((char *)v44 + 55);
        if (v49 >= 0)
          v50 = *((unsigned __int8 *)v44 + 55);
        else
          v50 = v44[5];
        if (v49 >= 0)
          v51 = v44 + 4;
        else
          v51 = (const void *)v44[4];
        if (v46 >= v50)
          v52 = v50;
        else
          v52 = v46;
        v53 = memcmp(v51, v47, v52);
        v54 = v50 < v46;
        if (v53)
          v54 = v53 < 0;
        v55 = !v54;
        if (v54)
          v56 = v44 + 1;
        else
          v56 = v44;
        if (v55)
          v48 = (uint64_t **)v44;
        v44 = (uint64_t *)*v56;
      }
      while (*v56);
      v40 = v125;
      if (v48 == v123)
        goto LABEL_98;
      v59 = v48[4];
      v58 = v48 + 4;
      v57 = v59;
      v60 = *((char *)v58 + 23);
      if (v60 >= 0)
        v61 = *((unsigned __int8 *)v58 + 23);
      else
        v61 = (size_t)v58[1];
      if (v60 >= 0)
        v62 = v58;
      else
        v62 = (uint64_t **)v57;
      if (v61 >= v46)
        v63 = v46;
      else
        v63 = v61;
      v64 = memcmp(v47, v62, v63);
      v29 = v46 >= v61;
      v40 = v125;
      v65 = !v29;
      if (v64)
        v65 = v64 < 0;
      if (v65)
      {
LABEL_98:
        __p[0] = v139;
        *((_DWORD *)sub_1BE61F944(a7, (const void **)v139, (uint64_t)&unk_1BE8D50A2, (__int128 **)__p) + 14) = TokenID;
      }
      __p[0] = *(void **)(a12 + 16);
      v45 = sub_1BE82A550((uint64_t **)a12, v40, a5, (uint64_t *)__p);
      v32 = a2;
      if ((sub_1BE82A6D4(a1, a2, a12, (uint64_t)v128, v40, a5, 1, (uint64_t)v129, v38, a15, a13) & 1) == 0)
      {
        LMLexiconGetRootCursor();
        sub_1BE829038(a1, a2, a3, a4);
        if ((v116 & 1) == 0)
        {
          LMLexiconGetRootCursor();
          sub_1BE829038(a1, a2, a4, a4);
        }
      }
      if ((char)v141 < 0)
      {
        operator delete(*(void **)v139);
        v124 = v39;
        v122 = (int)v128;
        if (v42)
        {
LABEL_106:
          v66 = *(unsigned __int8 *)(*(_QWORD *)(v32 + 32) + 40 * v40 + 32);
          HasChildren = LMLexiconCursorHasChildren();
          HasEntries = LMLexiconCursorHasEntries();
          if (HasChildren)
          {
            v69 = LMLexiconCursorHash();
            *(_QWORD *)v139 = *(_QWORD *)(a12 + 16);
            sub_1BE82A550((uint64_t **)a12, v40, v69, (uint64_t *)v139);
            if ((sub_1BE82A6D4(a1, a2, a12, (uint64_t)v128, v40, v69, 0, 0, v38, a15, a13) & 1) == 0)
              sub_1BE829038(a1, a2, a3, a4);
          }
          v70 = HasEntries ^ 1;
          if (v66)
            v70 = 0;
          v32 = a2;
          if ((v70 & 1) == 0)
          {
            LMLexiconGetRootCursor();
            v71 = LMLexiconCursorTraversedLength();
            v139[0] = 0;
            LMLexiconCursorGetTraversedCharacters();
            iv2s(v139, v71, (uint64_t)__p);
            v72 = sub_1BE66A2C4(v117, (uint64_t)__p);
            v134 = *(_QWORD *)(a12 + 16);
            v73 = sub_1BE82A550((uint64_t **)a12, v40, a5, &v134);
            v32 = a2;
            if (!(v122 | v45 | v124 | v129)
              || v122 != (_DWORD)v128
              || (v45 == v73 ? (v74 = v124 == (_DWORD)v39) : (v74 = 0),
                  v74 ? (v75 = (_DWORD)v129 == (_DWORD)v72) : (v75 = 0),
                  !v75))
            {
              if (HasEntries)
                HasEntries = LMLexiconCursorFirstTokenID();
              v76 = LMLexiconCursorTraversedLength();
              v139[0] = 0;
              LMLexiconCursorGetTraversedCharacters();
              iv2s(v139, v76, (uint64_t)v132);
              v77 = *v123;
              if (!*v123)
                goto LABEL_165;
              v78 = v40;
              v79 = (v133 & 0x80u) == 0 ? (void *)v133 : v132[1];
              v80 = (v133 & 0x80u) == 0 ? v132 : (void **)v132[0];
              v81 = a7 + 1;
              do
              {
                v82 = *((char *)v77 + 55);
                if (v82 >= 0)
                  v83 = *((unsigned __int8 *)v77 + 55);
                else
                  v83 = v77[5];
                if (v82 >= 0)
                  v84 = v77 + 4;
                else
                  v84 = (const void *)v77[4];
                if ((unint64_t)v79 >= v83)
                  v85 = v83;
                else
                  v85 = (size_t)v79;
                v86 = memcmp(v84, v80, v85);
                v87 = v83 < (unint64_t)v79;
                if (v86)
                  v87 = v86 < 0;
                v88 = !v87;
                if (v87)
                  v89 = v77 + 1;
                else
                  v89 = v77;
                if (v88)
                  v81 = (uint64_t **)v77;
                v77 = (uint64_t *)*v89;
              }
              while (*v89);
              v40 = v78;
              if (v81 == v123)
                goto LABEL_165;
              v92 = v81[4];
              v91 = v81 + 4;
              v90 = v92;
              v93 = *((char *)v91 + 23);
              if (v93 >= 0)
                v94 = *((unsigned __int8 *)v91 + 23);
              else
                v94 = (size_t)v91[1];
              if (v93 >= 0)
                v95 = v91;
              else
                v95 = (uint64_t **)v90;
              if (v94 >= (unint64_t)v79)
                v96 = (size_t)v79;
              else
                v96 = v94;
              v97 = memcmp(v80, v95, v96);
              v29 = (unint64_t)v79 >= v94;
              v40 = v78;
              v98 = !v29;
              if (v97)
                v98 = v97 < 0;
              if (v98)
              {
LABEL_165:
                *(_QWORD *)v139 = v132;
                *((_DWORD *)sub_1BE61F944(a7, (const void **)v132, (uint64_t)&unk_1BE8D50A2, (__int128 **)v139) + 14) = HasEntries;
              }
              v32 = a2;
              if ((sub_1BE82A6D4(a1, a2, a12, (uint64_t)v128, v40, a5, 1, (uint64_t)v72, v38, a15, a13) & 1) == 0)
              {
                sub_1BE829038(a1, a2, a3, a4);
                if ((v116 & 1) == 0)
                {
                  LMLexiconGetRootCursor();
                  sub_1BE829038(a1, a2, a4, a4);
                }
              }
              if ((char)v133 < 0)
                operator delete(v132[0]);
            }
            if (v136 < 0)
              operator delete(__p[0]);
          }
        }
      }
      else
      {
        v124 = v39;
        v122 = (int)v128;
        if (v42)
          goto LABEL_106;
      }
LABEL_49:
      ++v35;
      v33 = *(_QWORD *)(v32 + 32);
      v34 = a8;
    }
    while (v35 < *(_QWORD *)(v33 + 40 * a8));
  }
  v99 = (_QWORD *)*v114;
  if (*v114)
  {
    v100 = (_QWORD *)(a12 + 8);
    do
    {
      v101 = v99[4];
      v15 = v101 == a8;
      v102 = v101 < a8;
      if (v15)
        v102 = v99[5] < v115;
      v103 = !v102;
      if (v102)
        v104 = v99 + 1;
      else
        v104 = v99;
      if (v103)
        v100 = v99;
      v99 = (_QWORD *)*v104;
    }
    while (*v104);
    if (v100 != v114)
    {
      v105 = v100[4];
      v15 = v105 == a8;
      v106 = v105 <= a8;
      if (v15)
        v106 = v115 >= v100[5];
      if (v106)
      {
        v107 = v100[6];
        v109 = a14 + 1;
        v108 = a14[1];
        if (v108)
          goto LABEL_189;
LABEL_187:
        v110 = v109;
LABEL_193:
        v112 = (uint64_t *)operator new(0x28uLL);
        v112[4] = v107;
        *v112 = 0;
        v112[1] = 0;
        v112[2] = (uint64_t)v110;
        *v109 = v112;
        v113 = (uint64_t *)**a14;
        if (v113)
        {
          *a14 = v113;
          v112 = *v109;
        }
        sub_1BE61F5C0(a14[1], v112);
        a14[2] = (uint64_t *)((char *)a14[2] + 1);
        return;
      }
    }
  }
  v107 = -1;
  v109 = a14 + 1;
  v108 = a14[1];
  if (!v108)
    goto LABEL_187;
  while (1)
  {
LABEL_189:
    while (1)
    {
      v110 = (uint64_t **)v108;
      v111 = v108[4];
      if (v107 >= v111)
        break;
      v108 = *v110;
      v109 = v110;
      if (!*v110)
        goto LABEL_193;
    }
    if (v111 >= v107)
      break;
    v108 = v110[1];
    if (!v108)
    {
      v109 = v110 + 1;
      goto LABEL_193;
    }
  }
}

void sub_1BE829A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Network::findFirstEdgeGivenSymbol(Network *this, unint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t **v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  BOOL v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t **v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t **v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  _QWORD **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD **v84;
  _QWORD *v85[2];

  v3 = a3;
  v6 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v6 + 40 * a2);
  if (v7 > 0xA)
  {
    v9 = (uint64_t **)((char *)this + 200);
    v8 = (uint64_t *)*((_QWORD *)this + 25);
    if (v8)
    {
      v10 = (uint64_t **)((char *)this + 200);
      v11 = (_QWORD *)*((_QWORD *)this + 25);
      do
      {
        v12 = v11[4];
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = v11;
        else
          v14 = v11 + 1;
        if (v13)
          v10 = (uint64_t **)v11;
        v11 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v10 != v9 && (unint64_t)v10[4] <= a2)
      {
        while (1)
        {
LABEL_59:
          while (1)
          {
            v48 = (uint64_t **)v8;
            v49 = v8[4];
            if (v49 <= a2)
              break;
            v8 = *v48;
            v47 = v48;
            if (!*v48)
              goto LABEL_63;
          }
          if (v49 >= a2)
            break;
          v8 = v48[1];
          if (!v8)
          {
            v47 = v48 + 1;
            goto LABEL_63;
          }
        }
LABEL_66:
        v55 = v48[6];
        v54 = v48 + 6;
        v53 = v55;
        if (!v55)
          goto LABEL_77;
        v56 = v54;
        do
        {
          v57 = v53[4];
          v58 = v57 >= (unint64_t)v3;
          if (v57 >= (unint64_t)v3)
            v59 = (uint64_t **)v53;
          else
            v59 = (uint64_t **)(v53 + 1);
          if (v58)
            v56 = (uint64_t **)v53;
          v53 = *v59;
        }
        while (*v59);
        if (v56 != v54 && v56[4] <= v3)
        {
          v60 = *v9;
          v61 = (uint64_t **)((char *)this + 200);
          v62 = (uint64_t **)((char *)this + 200);
          if (*v9)
          {
            while (1)
            {
LABEL_82:
              while (1)
              {
                v62 = (uint64_t **)v60;
                v63 = v60[4];
                if (v63 <= a2)
                  break;
                v60 = *v62;
                v61 = v62;
                if (!*v62)
                  goto LABEL_86;
              }
              if (v63 >= a2)
                break;
              v60 = v62[1];
              if (!v60)
              {
                v61 = v62 + 1;
                goto LABEL_86;
              }
            }
LABEL_89:
            if (v56 != v62 + 6)
            {
              v67 = *v9;
              v68 = (uint64_t **)((char *)this + 200);
              if (*v9)
              {
                while (1)
                {
                  while (1)
                  {
                    v68 = (uint64_t **)v67;
                    v69 = v67[4];
                    if (v69 <= a2)
                      break;
                    v67 = *v68;
                    v9 = v68;
                    if (!*v68)
                      goto LABEL_97;
                  }
                  if (v69 >= a2)
                    break;
                  v67 = v68[1];
                  if (!v67)
                  {
                    v9 = v68 + 1;
                    goto LABEL_97;
                  }
                }
              }
              else
              {
LABEL_97:
                v70 = (char *)v68;
                v68 = (uint64_t **)operator new(0x40uLL);
                v68[7] = 0;
                v68[6] = 0;
                v68[4] = (uint64_t *)a2;
                v68[5] = (uint64_t *)(v68 + 6);
                *v68 = 0;
                v68[1] = 0;
                v68[2] = (uint64_t *)v70;
                *v9 = (uint64_t *)v68;
                v71 = **((_QWORD **)this + 24);
                v72 = (uint64_t *)v68;
                if (v71)
                {
                  *((_QWORD *)this + 24) = v71;
                  v72 = *v9;
                }
                sub_1BE61F5C0(*((uint64_t **)this + 25), v72);
                ++*((_QWORD *)this + 26);
              }
              v74 = v68 + 6;
              v73 = v68[6];
              if (v73)
              {
                while (1)
                {
                  while (1)
                  {
                    v75 = (uint64_t **)v73;
                    v76 = v73[4];
                    if (v76 <= (unint64_t)v3)
                      break;
                    v73 = *v75;
                    v74 = v75;
                    if (!*v75)
                      goto LABEL_107;
                  }
                  if (v76 >= (unint64_t)v3)
                    break;
                  v73 = v75[1];
                  if (!v73)
                  {
                    v74 = v75 + 1;
                    goto LABEL_107;
                  }
                }
              }
              else
              {
                v75 = v68 + 6;
LABEL_107:
                v77 = (uint64_t *)v75;
                v75 = (uint64_t **)operator new(0x30uLL);
                v75[4] = v3;
                v75[5] = 0;
                *v75 = 0;
                v75[1] = 0;
                v75[2] = v77;
                *v74 = (uint64_t *)v75;
                v78 = (uint64_t *)*v68[5];
                v79 = (uint64_t *)v75;
                if (v78)
                {
                  v68[5] = v78;
                  v79 = *v74;
                }
                sub_1BE61F5C0(v68[6], v79);
                v68[7] = (uint64_t *)((char *)v68[7] + 1);
              }
              return (uint64_t)v75[5];
            }
            return -1;
          }
        }
        else
        {
LABEL_77:
          v56 = v54;
          v60 = *v9;
          v61 = (uint64_t **)((char *)this + 200);
          v62 = (uint64_t **)((char *)this + 200);
          if (*v9)
            goto LABEL_82;
        }
LABEL_86:
        v64 = (uint64_t *)v62;
        v62 = (uint64_t **)operator new(0x40uLL);
        v62[7] = 0;
        v62[6] = 0;
        v62[4] = (uint64_t *)a2;
        v62[5] = (uint64_t *)(v62 + 6);
        *v62 = 0;
        v62[1] = 0;
        v62[2] = v64;
        *v61 = (uint64_t *)v62;
        v65 = **((_QWORD **)this + 24);
        v66 = (uint64_t *)v62;
        if (v65)
        {
          *((_QWORD *)this + 24) = v65;
          v66 = *v61;
        }
        sub_1BE61F5C0(*((uint64_t **)this + 25), v66);
        ++*((_QWORD *)this + 26);
        goto LABEL_89;
      }
    }
    v85[0] = 0;
    v85[1] = 0;
    v83 = 0;
    v84 = v85;
    v81 = &v82;
    v82 = 0;
    sub_1BE66C85C(&v81, v85, v85);
    v15 = *v9;
    v16 = (uint64_t **)((char *)this + 200);
    v17 = (uint64_t **)((char *)this + 200);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if (a2 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_20;
        }
        if (v18 >= a2)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_20;
        }
      }
LABEL_24:
      v80 = v3;
      sub_1BE62033C((uint64_t)&v81, v82);
      v26 = *((_QWORD *)this + 4);
      if (*(_QWORD *)(v26 + 40 * a2))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = v28;
          v28 = *(_QWORD *)(*((_QWORD *)this + 10) + 72 * (*(_QWORD *)(v26 + 40 * a2 + 16) + v27) + 16);
          if (v29 != v28)
          {
            v30 = *v9;
            v31 = (uint64_t **)((char *)this + 200);
            v32 = (uint64_t **)((char *)this + 200);
            if (*v9)
            {
              while (1)
              {
                while (1)
                {
                  v32 = (uint64_t **)v30;
                  v33 = v30[4];
                  if (v33 <= a2)
                    break;
                  v30 = *v32;
                  v31 = v32;
                  if (!*v32)
                    goto LABEL_36;
                }
                if (v33 >= a2)
                  break;
                v30 = v32[1];
                if (!v30)
                {
                  v31 = v32 + 1;
                  goto LABEL_36;
                }
              }
              v34 = v32;
            }
            else
            {
LABEL_36:
              v34 = operator new(0x40uLL);
              v34[7] = 0;
              v34[6] = 0;
              v34[4] = a2;
              v34[5] = v34 + 6;
              *v34 = 0;
              v34[1] = 0;
              v34[2] = v32;
              *v31 = v34;
              v35 = **((_QWORD **)this + 24);
              v36 = v34;
              if (v35)
              {
                *((_QWORD *)this + 24) = v35;
                v36 = *v31;
              }
              sub_1BE61F5C0(*((uint64_t **)this + 25), v36);
              ++*((_QWORD *)this + 26);
            }
            v37 = (uint64_t *)operator new(0x30uLL);
            v38 = v37;
            v37[4] = v28;
            v37[5] = v27;
            v39 = (uint64_t **)(v34 + 6);
            v40 = (uint64_t *)v34[6];
            if (v40)
            {
              while (1)
              {
                while (1)
                {
                  v41 = (uint64_t **)v40;
                  v42 = v40[4];
                  if (v42 <= v28)
                    break;
                  v40 = (uint64_t *)*v40;
                  v39 = v41;
                  if (!*v41)
                    goto LABEL_47;
                }
                if (v42 >= v28)
                  break;
                v40 = (uint64_t *)v40[1];
                if (!v40)
                {
                  v39 = v41 + 1;
                  goto LABEL_47;
                }
              }
              operator delete(v37);
            }
            else
            {
              v41 = (uint64_t **)(v34 + 6);
LABEL_47:
              *v37 = 0;
              v37[1] = 0;
              v37[2] = (uint64_t)v41;
              *v39 = v37;
              v43 = *(_QWORD *)v34[5];
              if (v43)
              {
                v34[5] = v43;
                v38 = *v39;
              }
              sub_1BE61F5C0((uint64_t *)v34[6], v38);
              ++v34[7];
            }
          }
          ++v27;
          v26 = *((_QWORD *)this + 4);
        }
        while (*(_QWORD *)(v26 + 40 * a2) > v27);
      }
      sub_1BE62033C((uint64_t)&v84, v85[0]);
      v8 = *v9;
      v3 = v80;
      v47 = (uint64_t **)((char *)this + 200);
      v48 = (uint64_t **)((char *)this + 200);
      if (*v9)
        goto LABEL_59;
LABEL_63:
      v50 = (uint64_t *)v48;
      v48 = (uint64_t **)operator new(0x40uLL);
      v48[7] = 0;
      v48[6] = 0;
      v48[4] = (uint64_t *)a2;
      v48[5] = (uint64_t *)(v48 + 6);
      *v48 = 0;
      v48[1] = 0;
      v48[2] = v50;
      *v47 = (uint64_t *)v48;
      v51 = **((_QWORD **)this + 24);
      v52 = (uint64_t *)v48;
      if (v51)
      {
        *((_QWORD *)this + 24) = v51;
        v52 = *v47;
      }
      sub_1BE61F5C0(*((uint64_t **)this + 25), v52);
      ++*((_QWORD *)this + 26);
      goto LABEL_66;
    }
LABEL_20:
    v19 = (uint64_t *)operator new(0x40uLL);
    v20 = v19;
    v21 = v82;
    v22 = v83;
    v19[6] = (uint64_t)v82;
    v23 = v19 + 6;
    v24 = v81;
    v19[4] = a2;
    v19[5] = (uint64_t)v24;
    v19[7] = v22;
    if (v22)
    {
      v21[2] = v23;
      v81 = &v82;
      v82 = 0;
      v83 = 0;
      *v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v17;
      *v16 = v19;
      v25 = **((_QWORD **)this + 24);
      if (!v25)
      {
LABEL_23:
        sub_1BE61F5C0(*((uint64_t **)this + 25), v20);
        ++*((_QWORD *)this + 26);
        goto LABEL_24;
      }
    }
    else
    {
      v19[5] = (uint64_t)v23;
      *v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v17;
      *v16 = v19;
      v25 = **((_QWORD **)this + 24);
      if (!v25)
        goto LABEL_23;
    }
    *((_QWORD *)this + 24) = v25;
    v20 = *v16;
    goto LABEL_23;
  }
  if (!v7)
    return -1;
  result = 0;
  v45 = (uint64_t **)(*((_QWORD *)this + 10) + 72 * *(_QWORD *)(v6 + 40 * a2 + 16) + 16);
  while (1)
  {
    v46 = *v45;
    v45 += 9;
    if (v46 == a3)
      break;
    if (v7 == ++result)
      return -1;
  }
  return result;
}

void sub_1BE82A118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  uint64_t v15;

  sub_1BE62033C(v15, a12);
  sub_1BE62033C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1BE82A140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_1BE62033C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1BE82A158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_1BE62033C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE82A170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t **a10, uint64_t a11, char a12)
{
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t *v44;
  double v45;
  _QWORD **v46;
  uint64_t **v47;
  uint64_t **v48;
  unint64_t v49;
  char *v50;
  uint64_t **v51;
  uint64_t **v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  unint64_t v58;
  uint64_t v59;
  void *__p[2];
  uint64_t v61;
  _QWORD v62[3];
  uint64_t *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(a4 + 16);
  v19 = sub_1BE82A550((uint64_t **)a4, a6, a7, &v67);
  v20 = v19;
  v58 = a6;
  v59 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 40 * a6 + 32) && *(_BYTE *)(*(_QWORD *)(a3 + 32) + 40 * a7 + 32))
  {
    v22 = a10 + 1;
    v21 = a10[1];
    if (v21)
    {
      v23 = a10 + 1;
      v24 = a10[1];
      do
      {
        v25 = v24[4];
        v26 = v25 >= (unint64_t)v19;
        if (v25 >= (unint64_t)v19)
          v27 = (uint64_t **)v24;
        else
          v27 = (uint64_t **)(v24 + 1);
        if (v26)
          v23 = (uint64_t **)v24;
        v24 = *v27;
      }
      while (*v27);
      if (v23 == v22 || v19 < v23[4])
      {
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v21;
            v29 = v21[4];
            if ((unint64_t)v19 >= v29)
              break;
            v21 = *v28;
            v22 = v28;
            if (!*v28)
              goto LABEL_21;
          }
          if (v29 >= (unint64_t)v19)
            break;
          v21 = v28[1];
          if (!v21)
          {
            v22 = v28 + 1;
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
      v28 = a10 + 1;
LABEL_21:
      v30 = (uint64_t *)operator new(0x28uLL);
      v30[4] = (uint64_t)v20;
      *v30 = 0;
      v30[1] = 0;
      v30[2] = (uint64_t)v28;
      *v22 = v30;
      v31 = (uint64_t *)**a10;
      if (v31)
      {
        *a10 = v31;
        v32 = *v22;
      }
      else
      {
        v32 = v30;
      }
      sub_1BE61F5C0(a10[1], v32);
      a10[2] = (uint64_t *)((char *)a10[2] + 1);
    }
  }
  v33 = a5;
  v62[0] = a5;
  v62[1] = v20;
  v34 = *(_QWORD *)(a8 + 16);
  v36 = *(_QWORD *)(a8 + 48);
  v35 = *(_QWORD *)(a8 + 56);
  v62[2] = v34;
  v65 = v36;
  v66 = v35;
  if (a12)
  {
    v37 = *(_QWORD *)(a8 + 24);
    v38 = v59;
    if (*(_BYTE *)(v59 + 184))
    {
      if (v37)
      {
        ul2sh(v37, (uint64_t)__p);
LABEL_38:
        v44 = sub_1BE66A2C4((_QWORD *)(a1 + 128), (uint64_t)__p);
        v63 = v44;
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
        v45 = *(double *)(a8 + 32);
        goto LABEL_46;
      }
      v40 = *(_QWORD *)(v59 + 136);
      if (*(char *)(v40 + 23) < 0)
      {
LABEL_37:
        sub_1BE61F128(__p, *(void **)v40, *(_QWORD *)(v40 + 8));
        goto LABEL_38;
      }
    }
    else
    {
      v40 = *(_QWORD *)(v59 + 136) + 24 * v37;
      if (*(char *)(v40 + 23) < 0)
        goto LABEL_37;
    }
    v41 = *(_OWORD *)v40;
    v61 = *(_QWORD *)(v40 + 16);
    *(_OWORD *)__p = v41;
    goto LABEL_38;
  }
  v39 = *(_QWORD *)(a9 + 24);
  if (!*(_BYTE *)(a3 + 184))
  {
    v42 = *(_QWORD *)(a3 + 136) + 24 * v39;
    if (*(char *)(v42 + 23) < 0)
    {
LABEL_42:
      sub_1BE61F128(__p, *(void **)v42, *(_QWORD *)(v42 + 8));
      goto LABEL_43;
    }
LABEL_35:
    v43 = *(_OWORD *)v42;
    v61 = *(_QWORD *)(v42 + 16);
    *(_OWORD *)__p = v43;
    goto LABEL_43;
  }
  if (!v39)
  {
    v42 = *(_QWORD *)(a3 + 136);
    if (*(char *)(v42 + 23) < 0)
      goto LABEL_42;
    goto LABEL_35;
  }
  ul2sh(v39, (uint64_t)__p);
LABEL_43:
  v44 = sub_1BE66A2C4((_QWORD *)(a1 + 128), (uint64_t)__p);
  v63 = v44;
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  v45 = *(double *)(a9 + 32) + *(double *)(a8 + 32);
  v38 = v59;
LABEL_46:
  v64 = v45;
  __p[0] = (void *)__PAIR64__(v20, v33);
  __p[1] = (void *)__PAIR64__(v44, v34);
  v46 = (_QWORD **)(a1 + 216);
  LODWORD(v61) = 0;
  v47 = (uint64_t **)sub_1BE839128(a1 + 216, (unsigned int *)__p);
  if ((uint64_t **)(a1 + 224) == v47)
  {
    v48 = v47;
    v49 = *(_QWORD *)(a11 + 8);
    if (v49 >= *(_QWORD *)(a11 + 16))
    {
      v50 = sub_1BE66D0D0((char **)a11, (uint64_t)v62);
    }
    else
    {
      *(_QWORD *)v49 = v33;
      *(_QWORD *)(v49 + 8) = v20;
      *(_QWORD *)(v49 + 16) = v34;
      *(_QWORD *)(v49 + 24) = v44;
      *(double *)(v49 + 32) = v45;
      v50 = (char *)(v49 + 72);
      *(_QWORD *)(v49 + 48) = v36;
      *(_QWORD *)(v49 + 56) = v35;
    }
    *(_QWORD *)(a11 + 8) = v50;
    v51 = (uint64_t **)sub_1BE839270(a1 + 216, &v68, (unsigned int *)__p);
    v38 = v59;
    if (!*v51)
    {
      v52 = v51;
      v53 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v53 + 28) = *(_OWORD *)__p;
      *((_DWORD *)v53 + 11) = v61;
      v54 = v68;
      *(_QWORD *)v53 = 0;
      *((_QWORD *)v53 + 1) = 0;
      *((_QWORD *)v53 + 2) = v54;
      *v52 = (uint64_t *)v53;
      v55 = (_QWORD *)**v46;
      if (v55)
      {
        *v46 = v55;
        v56 = *v52;
      }
      else
      {
        v56 = (uint64_t *)v53;
      }
      sub_1BE61F5C0(*v48, v56);
      ++*(_QWORD *)(a1 + 232);
    }
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v38 + 32) + 40 * v58 + 32);
}

void sub_1BE82A528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BE82A530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1BE82A550(uint64_t **a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t **v15;
  uint64_t *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v9 = a1 + 1;
  v8 = a1[1];
  if (v8)
  {
    v10 = a1 + 1;
    v11 = a1[1];
    do
    {
      v12 = v11[4];
      v14 = v12 == a2;
      v13 = v12 < a2;
      if (v14)
        v13 = v11[5] < a3;
      v14 = !v13;
      if (v13)
        v15 = (uint64_t **)(v11 + 1);
      else
        v15 = (uint64_t **)v11;
      if (v14)
        v10 = (uint64_t **)v11;
      v11 = *v15;
    }
    while (*v15);
    if (v10 != v9)
    {
      v16 = v10[4];
      v14 = v16 == (uint64_t *)a2;
      v17 = (unint64_t)v16 <= a2;
      if (v14)
        v17 = (unint64_t)v10[5] <= a3;
      if (v17)
        return v10[6];
    }
    v18 = *a4;
    do
    {
      while (1)
      {
        v19 = (uint64_t **)v8;
        v20 = v8[4];
        v21 = v19[5];
        v22 = (unint64_t)v21 > a3;
        if (v20 != a2)
          v22 = v20 > a2;
        if (v22)
          break;
        v23 = (unint64_t)v21 < a3;
        v14 = v20 == a2;
        v24 = v20 < a2;
        if (v14)
          v24 = v23;
        if (!v24)
          goto LABEL_33;
        v8 = v19[1];
        if (!v8)
        {
          v9 = v19 + 1;
          goto LABEL_29;
        }
      }
      v8 = *v19;
    }
    while (*v19);
    v9 = v19;
  }
  else
  {
    v18 = *a4;
    v19 = a1 + 1;
  }
LABEL_29:
  v25 = (uint64_t *)operator new(0x38uLL);
  v25[4] = a2;
  v25[5] = a3;
  v25[6] = v18;
  *v25 = 0;
  v25[1] = 0;
  v25[2] = (uint64_t)v19;
  *v9 = v25;
  v26 = (uint64_t *)**a1;
  if (v26)
  {
    *a1 = v26;
    v27 = *v9;
  }
  else
  {
    v27 = v25;
  }
  sub_1BE61F5C0(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v18 = *a4;
LABEL_33:
  *a4 = v18 + 1;
  return (uint64_t *)v18;
}

uint64_t sub_1BE82A6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, _QWORD *a9, uint64_t **a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t **v39;
  uint64_t **v40;
  _QWORD *v41;
  char *v42;
  uint64_t **v43;
  uint64_t **v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  unint64_t v50;
  __int128 v51;
  int v52;
  _QWORD v53[9];
  uint64_t v54;
  uint64_t v55;

  v54 = *(_QWORD *)(a3 + 16);
  v17 = sub_1BE82A550((uint64_t **)a3, a5, a6, &v54);
  v18 = v17;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 40 * a5 + 32))
    v19 = a7 == 0;
  else
    v19 = 1;
  v50 = a5;
  if (v19)
  {
    v20 = a1;
  }
  else if (a10[2])
  {
    v20 = a1;
    v18 = (uint64_t *)(*a10)[4];
  }
  else
  {
    v21 = a2;
    v23 = a10 + 1;
    v22 = a10[1];
    if (v22)
    {
      v24 = a10 + 1;
      v25 = a10[1];
      do
      {
        v26 = v25[4];
        v27 = v26 >= (unint64_t)v17;
        if (v26 >= (unint64_t)v17)
          v28 = (uint64_t **)v25;
        else
          v28 = (uint64_t **)(v25 + 1);
        if (v27)
          v24 = (uint64_t **)v25;
        v25 = *v28;
      }
      while (*v28);
      v20 = a1;
      if (v24 == v23 || v17 < v24[4])
      {
        while (1)
        {
          while (1)
          {
            v29 = (uint64_t **)v22;
            v30 = v22[4];
            if ((unint64_t)v17 >= v30)
              break;
            v22 = *v29;
            v23 = v29;
            if (!*v29)
              goto LABEL_27;
          }
          if (v30 >= (unint64_t)v17)
            break;
          v22 = v29[1];
          if (!v22)
          {
            v23 = v29 + 1;
            goto LABEL_27;
          }
        }
      }
      a2 = v21;
    }
    else
    {
      v20 = a1;
      v29 = a10 + 1;
LABEL_27:
      v31 = (uint64_t *)operator new(0x28uLL);
      v31[4] = (uint64_t)v18;
      *v31 = 0;
      v31[1] = 0;
      v31[2] = (uint64_t)v29;
      *v23 = v31;
      v32 = (uint64_t *)**a10;
      if (v32)
      {
        *a10 = v32;
        v33 = *v23;
      }
      else
      {
        v33 = v31;
      }
      a2 = v21;
      sub_1BE61F5C0(a10[1], v33);
      a10[2] = (uint64_t *)((char *)a10[2] + 1);
    }
  }
  v53[0] = a4;
  v53[1] = v18;
  v34 = a9[2];
  v36 = a9[6];
  v35 = a9[7];
  v53[6] = v36;
  v53[7] = v35;
  v53[2] = v34;
  v53[3] = a8;
  v37 = a9[4];
  v53[4] = v37;
  *(_QWORD *)&v51 = __PAIR64__(v18, a4);
  *((_QWORD *)&v51 + 1) = __PAIR64__(a8, v34);
  v38 = (_QWORD **)(v20 + 216);
  v52 = 0;
  v39 = (uint64_t **)sub_1BE839128(v20 + 216, (unsigned int *)&v51);
  if ((uint64_t **)(v20 + 224) == v39)
  {
    v40 = v39;
    v41 = *(_QWORD **)(a11 + 8);
    if ((unint64_t)v41 >= *(_QWORD *)(a11 + 16))
    {
      v42 = sub_1BE66D0D0((char **)a11, (uint64_t)v53);
    }
    else
    {
      *v41 = a4;
      v41[1] = v18;
      v41[2] = v34;
      v41[3] = a8;
      v41[4] = v37;
      v42 = (char *)(v41 + 9);
      v41[6] = v36;
      v41[7] = v35;
    }
    *(_QWORD *)(a11 + 8) = v42;
    v43 = (uint64_t **)sub_1BE839270(v20 + 216, &v55, (unsigned int *)&v51);
    if (!*v43)
    {
      v44 = v43;
      v45 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v45 + 28) = v51;
      *((_DWORD *)v45 + 11) = v52;
      v46 = v55;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v45 + 2) = v46;
      *v44 = (uint64_t *)v45;
      v47 = (_QWORD *)**v38;
      if (v47)
      {
        *v38 = v47;
        v48 = *v44;
      }
      else
      {
        v48 = (uint64_t *)v45;
      }
      sub_1BE61F5C0(*v40, v48);
      ++*(_QWORD *)(v20 + 232);
    }
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 40 * v50 + 32);
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

{
  return a1 == a2;
}

BOOL operator<=(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) <= *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) <= *(double *)(a2 + 104);
}

BOOL operator>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) > *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) > *(double *)(a2 + 104);
}

BOOL operator>=(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) >= *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) >= *(double *)(a2 + 104);
}

void sub_1BE82AA40(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void **v66;
  void **v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  char v81;
  void *__p[2];
  __int128 v83;
  __int128 v84;

  v7 = *a5;
  if (*(int *)(*a5 + 4 * a2) > 0)
    return;
  v8 = a3;
  v9 = a2;
  v83 = 0u;
  v84 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = (_QWORD *)(*a3 + 24 * a2);
  v13 = (_QWORD *)*v10;
  v12 = v10 + 1;
  v11 = v13;
  if (v13 == v12)
  {
    v67 = 0;
    v66 = 0;
    *((_QWORD *)&v84 + 1) = 0;
    v68 = 0;
    goto LABEL_99;
  }
  v14 = a1;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40 * a2))
  {
    do
    {
      v64 = (_QWORD *)v11[1];
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (_QWORD *)v11[2];
          v33 = *v65 == (_QWORD)v11;
          v11 = v65;
        }
        while (!v33);
      }
      v11 = v65;
    }
    while (v65 != v12);
    v67 = 0;
    v66 = 0;
    *(_DWORD *)(v7 + 4 * a2) = 1;
    *((_QWORD *)&v84 + 1) = 0;
    v68 = 0;
    goto LABEL_99;
  }
  v72 = v12;
  v73 = 40 * a2;
  v81 = 1;
  do
  {
    v16 = *(_QWORD *)(v14 + 32);
    if (!*(_QWORD *)(v16 + v73))
    {
      *(_DWORD *)(*a5 + 4 * v9) = 1;
      goto LABEL_84;
    }
    v74 = v11;
    v17 = 0;
    do
    {
      while (1)
      {
        v18 = *(_QWORD *)(v16 + 40 * v9 + 16) + v17;
        v19 = *(_QWORD *)(v14 + 80);
        v20 = *(_QWORD *)(v19 + 72 * v18 + 8);
        v21 = *(_BYTE *)(v16 + 40 * v20 + 32)
            ? v20 & 0xFFFFF
            : v20 & 0xFFFFF | ((*(_QWORD *)(v19 + 72 * v18 + 24) & 0xFFFFFLL) << 20);
        v22 = *v8 + 24 * v20;
        v23 = a4;
        v24 = *a4;
        v26 = (void **)(v22 + 8);
        v25 = *(_QWORD **)(v22 + 8);
        v27 = (_QWORD *)(v22 + 8);
        v28 = (_QWORD *)(v22 + 8);
        if (v25)
        {
          while (1)
          {
            while (1)
            {
              v28 = v25;
              v29 = v25[4];
              if (v21 >= v29)
                break;
              v25 = (_QWORD *)*v28;
              v27 = v28;
              if (!*v28)
                goto LABEL_19;
            }
            if (v29 >= v21)
              break;
            v25 = (_QWORD *)v28[1];
            if (!v25)
            {
              v27 = v28 + 1;
              goto LABEL_19;
            }
          }
        }
        else
        {
LABEL_19:
          v30 = operator new(0x30uLL);
          v30[4] = v21;
          v30[5] = (int)v24;
          *v30 = 0;
          v30[1] = 0;
          v30[2] = v28;
          *v27 = v30;
          v31 = **(_QWORD **)v22;
          if (v31)
          {
            *(_QWORD *)v22 = v31;
            v30 = (_QWORD *)*v27;
          }
          v32 = *v26;
          v33 = v30 == *v26;
          *((_BYTE *)v30 + 24) = v33;
          if (!v33)
          {
            do
            {
              v34 = v30[2];
              if (*(_BYTE *)(v34 + 24))
                break;
              v35 = *(_BYTE **)(v34 + 16);
              v36 = *(_QWORD *)v35;
              if (*(_QWORD *)v35 == v34)
              {
                v39 = *((_QWORD *)v35 + 1);
                if (!v39 || (v40 = *(unsigned __int8 *)(v39 + 24), v37 = (_BYTE *)(v39 + 24), v40))
                {
                  if (*(_QWORD **)v34 == v30)
                  {
                    *(_BYTE *)(v34 + 24) = 1;
                    v35[24] = 0;
                    v43 = *(_QWORD *)(v34 + 8);
                    *(_QWORD *)v35 = v43;
                    if (v43)
                      goto LABEL_36;
                  }
                  else
                  {
                    v41 = *(uint64_t **)(v34 + 8);
                    v42 = *v41;
                    *(_QWORD *)(v34 + 8) = *v41;
                    if (v42)
                    {
                      *(_QWORD *)(v42 + 16) = v34;
                      v35 = *(_BYTE **)(v34 + 16);
                    }
                    v41[2] = (uint64_t)v35;
                    *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v41;
                    *v41 = v34;
                    *(_QWORD *)(v34 + 16) = v41;
                    v35 = (_BYTE *)v41[2];
                    v34 = *(_QWORD *)v35;
                    *((_BYTE *)v41 + 24) = 1;
                    v35[24] = 0;
                    v43 = *(_QWORD *)(v34 + 8);
                    *(_QWORD *)v35 = v43;
                    if (v43)
LABEL_36:
                      *(_QWORD *)(v43 + 16) = v35;
                  }
                  *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
                  *(_QWORD *)(*((_QWORD *)v35 + 2) + 8 * (**((_QWORD **)v35 + 2) != (_QWORD)v35)) = v34;
                  *(_QWORD *)(v34 + 8) = v35;
LABEL_42:
                  *((_QWORD *)v35 + 2) = v34;
                  break;
                }
              }
              else if (!v36 || (v38 = *(unsigned __int8 *)(v36 + 24), v37 = (_BYTE *)(v36 + 24), v38))
              {
                if (*(_QWORD **)v34 == v30)
                {
                  v50 = v30[1];
                  *(_QWORD *)v34 = v50;
                  if (v50)
                  {
                    *(_QWORD *)(v50 + 16) = v34;
                    v35 = *(_BYTE **)(v34 + 16);
                  }
                  v30[2] = v35;
                  *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v30;
                  v30[1] = v34;
                  *(_QWORD *)(v34 + 16) = v30;
                  v35 = (_BYTE *)v30[2];
                  *((_BYTE *)v30 + 24) = 1;
                  v35[24] = 0;
                  v34 = *((_QWORD *)v35 + 1);
                  v44 = *(_QWORD **)v34;
                  *((_QWORD *)v35 + 1) = *(_QWORD *)v34;
                  if (v44)
LABEL_40:
                    v44[2] = v35;
                }
                else
                {
                  *(_BYTE *)(v34 + 24) = 1;
                  v35[24] = 0;
                  v34 = *((_QWORD *)v35 + 1);
                  v44 = *(_QWORD **)v34;
                  *((_QWORD *)v35 + 1) = *(_QWORD *)v34;
                  if (v44)
                    goto LABEL_40;
                }
                *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
                *(_QWORD *)(*((_QWORD *)v35 + 2) + 8 * (**((_QWORD **)v35 + 2) != (_QWORD)v35)) = v34;
                *(_QWORD *)v34 = v35;
                goto LABEL_42;
              }
              *(_BYTE *)(v34 + 24) = 1;
              v30 = v35;
              v35[24] = v35 == (_BYTE *)v32;
              *v37 = 1;
            }
            while (v35 != (_BYTE *)v32);
          }
          ++*(_QWORD *)(v22 + 16);
          ++*v23;
        }
        v45 = *(_DWORD *)(*a7 + 4 * v20);
        if ((v81 & 1) != 0)
          *(_DWORD *)(*a7 + 4 * v20) = ++v45;
        v14 = a1;
        v8 = a3;
        v16 = *(_QWORD *)(a1 + 32);
        v9 = a2;
        if (*(_QWORD *)(v16 + 40 * v20 + 8) == v45)
          break;
        a4 = v23;
        if (++v17 >= *(_QWORD *)(v16 + 40 * a2))
          goto LABEL_59;
      }
      v46 = (char *)v83;
      v47 = (char *)__p[1];
      v48 = (((_QWORD)v83 - (unint64_t)__p[1]) << 6) - 1;
      *(_DWORD *)(*a6 + 4 * v20) = 1;
      if (v46 == v47)
        v48 = 0;
      v49 = *((_QWORD *)&v84 + 1) + v84;
      a4 = v23;
      if (v48 == *((_QWORD *)&v84 + 1) + (_QWORD)v84)
      {
        sub_1BE6A3E70((uint64_t)__p);
        v47 = (char *)__p[1];
        v49 = *((_QWORD *)&v84 + 1) + v84;
        v16 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)&v47[(v49 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v49 & 0x1FF)) = v20;
      ++*((_QWORD *)&v84 + 1);
      ++v17;
    }
    while (v17 < *(_QWORD *)(v16 + 40 * a2));
LABEL_59:
    v51 = *((_QWORD *)&v84 + 1);
    v11 = v74;
    *(_DWORD *)(*a5 + 4 * a2) = 1;
    v12 = v72;
    if (v51)
    {
      while (1)
      {
        v52 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v84 + v51 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v84 + v51 - 1) & 0x1FF));
        if ((void *)v83 == __p[1])
          v53 = 0;
        else
          v53 = (((_QWORD)v83 - (unint64_t)__p[1]) << 6) - 1;
        *((_QWORD *)&v84 + 1) = v51 - 1;
        if (v53 - (v51 + (_QWORD)v84) + 1 >= 0x400)
        {
          operator delete(*(void **)(v83 - 8));
          *(_QWORD *)&v83 = v83 - 8;
        }
        v54 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v54 + 40 * v52 + 32) || *(_DWORD *)(*a5 + 4 * v52))
        {
          v55 = *(_QWORD *)(v54 + 40 * a2);
          if (v55)
            goto LABEL_70;
LABEL_61:
          v51 = *((_QWORD *)&v84 + 1);
          v11 = v74;
          if (!*((_QWORD *)&v84 + 1))
            break;
        }
        else
        {
          sub_1BE82AA40(a1, v52, a3, a4, a5, a6, a7);
          v54 = *(_QWORD *)(a1 + 32);
          v55 = *(_QWORD *)(v54 + 40 * a2);
          if (!v55)
            goto LABEL_61;
LABEL_70:
          v56 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 72 * *(_QWORD *)(v54 + 40 * a2 + 16) + 8);
          while (1)
          {
            v58 = *v56;
            v56 += 9;
            v57 = v58;
            if (!*(_BYTE *)(v54 + 40 * v58 + 32) && !*(_DWORD *)(*a5 + 4 * v57) && *(int *)(*a6 + 4 * v57) >= 1)
              break;
            if (!--v55)
              goto LABEL_61;
          }
          v59 = (char *)__p[1];
          v60 = (((_QWORD)v83 - (unint64_t)__p[1]) << 6) - 1;
          if ((void *)v83 == __p[1])
            v60 = 0;
          v61 = *((_QWORD *)&v84 + 1) + v84;
          if (v60 == *((_QWORD *)&v84 + 1) + (_QWORD)v84)
          {
            sub_1BE6A3E70((uint64_t)__p);
            v59 = (char *)__p[1];
            v61 = *((_QWORD *)&v84 + 1) + v84;
          }
          *(_QWORD *)(*(_QWORD *)&v59[(v61 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v61 & 0x1FF)) = v57;
          v51 = *((_QWORD *)&v84 + 1) + 1;
          *((_QWORD *)&v84 + 1) = v51;
          v11 = v74;
          if (!v51)
            break;
        }
      }
    }
LABEL_84:
    v62 = (_QWORD *)v11[1];
    if (v62)
    {
      do
      {
        v63 = v62;
        v62 = (_QWORD *)*v62;
      }
      while (v62);
    }
    else
    {
      do
      {
        v63 = (_QWORD *)v11[2];
        v33 = *v63 == (_QWORD)v11;
        v11 = v63;
      }
      while (!v33);
    }
    v81 = 0;
    v11 = v63;
  }
  while (v63 != v12);
  v66 = (void **)__p[1];
  v67 = (void **)v83;
  *((_QWORD *)&v84 + 1) = 0;
  v68 = v83 - (unint64_t)__p[1];
  if ((unint64_t)v83 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v66);
      v67 = (void **)v83;
      v66 = (void **)((char *)__p[1] + 8);
      __p[1] = v66;
      v68 = v83 - (_QWORD)v66;
    }
    while ((_QWORD)v83 - (_QWORD)v66 > 0x10uLL);
  }
LABEL_99:
  v69 = v68 >> 3;
  if (v69 == 1)
  {
    v70 = 256;
    goto LABEL_104;
  }
  if (v69 == 2)
  {
    v70 = 512;
LABEL_104:
    *(_QWORD *)&v84 = v70;
  }
  if (v66 != v67)
  {
    do
    {
      v71 = *v66++;
      operator delete(v71);
    }
    while (v66 != v67);
    if ((void *)v83 != __p[1])
      *(_QWORD *)&v83 = v83 + (((unint64_t)__p[1] - v83 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1BE82B1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1BE61BE20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE82B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1BE61BE20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE82B1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1BE61BE20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE82B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1BE61BE20((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_1BE82B214(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_1BE671438(*((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *Network::makeFinalNodeTheLastNode(uint64_t *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;

  v1 = this[4];
  v2 = *(_QWORD *)(this[7] + 32);
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((this[5] - v1) >> 3) - 1;
  if (v2 != v3)
  {
    v4 = this;
    v5 = this[10];
    v6 = this[11] - v5;
    if (v6)
    {
      v7 = v6 / 72;
      if (v7 <= 1)
        v7 = 1;
      v8 = (unint64_t *)(v5 + 8);
      do
      {
        v9 = *(v8 - 1);
        v10 = v3;
        if (v9 == v2 || (v10 = v2, v9 == v3))
          *(v8 - 1) = v10;
        v11 = v3;
        if (*v8 == v2 || (v11 = v2, *v8 == v3))
          *v8 = v11;
        v8 += 9;
        --v7;
      }
      while (v7);
    }
    v12 = v1 + 40 * v2;
    v13 = v1 + 40 * v3;
    v14 = *(_OWORD *)v12;
    v15 = *(_OWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v13 + 32);
    v17 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v17;
    *(_BYTE *)(v12 + 32) = v16;
    v18 = this + 8;
    this = (uint64_t *)this[8];
    v19 = v4[4];
    v20 = (_OWORD *)(v19 + 40 * v3);
    *v20 = v14;
    v20[1] = v15;
    if (this)
    {
      v21 = v4 + 8;
      v22 = this;
      do
      {
        v23 = v22[4];
        v24 = v23 >= v2;
        if (v23 >= v2)
          v25 = v22;
        else
          v25 = v22 + 1;
        if (v24)
          v21 = v22;
        v22 = (uint64_t *)*v25;
      }
      while (*v25);
      if (v21 == v18 || v21[4] > v2)
      {
        *(_BYTE *)(v19 + 40 * v2 + 32) = 0;
        goto LABEL_38;
      }
      v27 = (uint64_t *)v21[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        v29 = v21;
        do
        {
          v28 = (uint64_t *)v29[2];
          v30 = *v28 == (_QWORD)v29;
          v29 = v28;
        }
        while (!v30);
      }
      if ((uint64_t *)v4[7] == v21)
        v4[7] = (uint64_t)v28;
      --v4[9];
      sub_1BE670DF8(this, v21);
      operator delete(v21);
      this = (uint64_t *)v4[8];
      v19 = v4[4];
      *(_BYTE *)(v19 + 40 * v2 + 32) = 0;
      v26 = v4 + 8;
      if (this)
      {
        while (1)
        {
LABEL_38:
          while (1)
          {
            v26 = this;
            v31 = this[4];
            if (v31 <= v3)
              break;
            this = (uint64_t *)*this;
            v18 = v26;
            if (!*v26)
              goto LABEL_42;
          }
          if (v31 >= v3)
            goto LABEL_46;
          this = (uint64_t *)this[1];
          if (!this)
          {
            v18 = v26 + 1;
            break;
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(v19 + 40 * v2 + 32) = 0;
      v26 = v4 + 8;
    }
LABEL_42:
    v32 = (uint64_t *)operator new(0x28uLL);
    v32[4] = v3;
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v26;
    *v18 = (uint64_t)v32;
    v33 = *(_QWORD *)v4[7];
    if (v33)
    {
      v4[7] = v33;
      v34 = (uint64_t *)*v18;
    }
    else
    {
      v34 = v32;
    }
    this = sub_1BE61F5C0((uint64_t *)v4[8], v34);
    ++v4[9];
    v19 = v4[4];
LABEL_46:
    if (0xCCCCCCCCCCCCCCCDLL * ((v4[5] - v19) >> 3) >= v3)
      *(_BYTE *)(v19 + 40 * v3 + 32) = 1;
  }
  return this;
}

void Network::unionNetwork(Network *this, const Network *a2, const Network *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  __int128 *p_dst;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _BYTE v53[24];
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _QWORD **v58;
  _QWORD *v59[2];
  _QWORD **v60;
  _QWORD *v61[2];
  __int128 __dst;
  unint64_t v63;
  char __str[19];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  v9 = *((_QWORD *)a3 + 4);
  v8 = *((_QWORD *)a3 + 5);
  v61[0] = 0;
  v61[1] = 0;
  v60 = v61;
  sub_1BE66AAE8(&v60, *((_QWORD **)a2 + 7), (_QWORD *)a2 + 8);
  v59[0] = 0;
  v59[1] = 0;
  v58 = v59;
  v52 = (_QWORD *)((char *)a3 + 64);
  sub_1BE66AAE8(&v58, *((_QWORD **)a3 + 7), (_QWORD *)a3 + 8);
  v51 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3);
  v10 = v51 - 0x3333333333333333 * ((v8 - v9) >> 3) - 2;
  v11 = *((_QWORD *)this + 4);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v11) >> 3);
  if (v10 <= v12)
  {
    if (v10 < v12)
      *((_QWORD *)this + 5) = v11 + 40 * v10;
  }
  else
  {
    sub_1BE66CE80((void **)this + 4, v10 - v12);
  }
  if (this != a2)
  {
    sub_1BE66B898((uint64_t)this + 136, *((std::string **)a2 + 17), *((std::string **)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3));
    sub_1BE66BB9C((uint64_t **)this + 20, *((_QWORD **)a2 + 20), (_QWORD *)a2 + 21);
  }
  v13 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v13)
  {
    v14 = 0;
    v15 = (char *)*((_QWORD *)this + 11);
    v16 = 1;
    do
    {
      v18 = (_OWORD *)(v13 + 72 * v14);
      if ((unint64_t)v15 < *((_QWORD *)this + 12))
      {
        *(_OWORD *)v15 = *v18;
        v17 = v13 + 72 * v14;
        *((_OWORD *)v15 + 1) = *(_OWORD *)(v17 + 16);
        *((_OWORD *)v15 + 2) = *(_OWORD *)(v17 + 32);
        *((_OWORD *)v15 + 3) = *(_OWORD *)(v17 + 48);
        *((_QWORD *)v15 + 8) = *(_QWORD *)(v17 + 64);
        v15 += 72;
      }
      else
      {
        v15 = sub_1BE66D0D0((char **)this + 10, (uint64_t)v18);
        v13 = *((_QWORD *)a2 + 10);
      }
      *((_QWORD *)this + 11) = v15;
      v14 = v16++;
    }
    while (0x8E38E38E38E38E39 * ((*((_QWORD *)a2 + 11) - v13) >> 3) > v14);
  }
  v19 = *((_QWORD *)a3 + 10);
  if (*((_QWORD *)a3 + 11) != v19)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = v19 + v20;
      v23 = *(_QWORD **)v22;
      *(_QWORD *)v53 = v23;
      v24 = *(_OWORD *)(v22 + 8);
      *(_OWORD *)&v53[8] = v24;
      v54 = *(_QWORD *)(v22 + 24);
      v55 = *(_OWORD *)(v22 + 32);
      v56 = *(_OWORD *)(v22 + 48);
      v57 = *(_QWORD *)(v22 + 64);
      v25 = v58[4];
      if (v23 == v25)
      {
        *(_QWORD *)v53 = v60[4];
        v26 = v24;
        if ((_QWORD *)v24 == v23)
          goto LABEL_21;
      }
      else if (v23 == *((_QWORD **)a3 + 3))
      {
        v26 = v24;
        if ((_QWORD *)v24 == v25)
          goto LABEL_21;
      }
      else
      {
        *((_QWORD *)&__dst + 1) = 0;
        v63 = 0;
        *(_QWORD *)&__dst = (char *)&__dst + 8;
        sub_1BE66AAE8(&__dst, *((_QWORD **)a3 + 7), v52);
        v28 = *(_QWORD *)(__dst + 32);
        sub_1BE62033C((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
        v29 = -2;
        if ((unint64_t)v23 <= v28)
          v29 = -1;
        v26 = *(_QWORD *)&v53[8];
        *(_QWORD *)v53 += v29 + v51;
        if (*(_QWORD **)&v53[8] == v58[4])
        {
LABEL_21:
          v27 = v60[4];
          goto LABEL_29;
        }
      }
      if (v26 == *((_QWORD *)a3 + 3))
        goto LABEL_30;
      *((_QWORD *)&__dst + 1) = 0;
      v63 = 0;
      *(_QWORD *)&__dst = (char *)&__dst + 8;
      sub_1BE66AAE8(&__dst, *((_QWORD **)a3 + 7), v52);
      v30 = *(_QWORD *)(__dst + 32);
      sub_1BE62033C((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
      v31 = -2;
      if (v26 <= v30)
        v31 = -1;
      v27 = (_QWORD *)(v31 + v51 + *(_QWORD *)&v53[8]);
LABEL_29:
      *(_QWORD *)&v53[8] = v27;
LABEL_30:
      snprintf(__str, 0x13uLL, "0x%zx", *(size_t *)&v53[16]);
      v32 = strlen(__str);
      if (v32 >= 0x7FFFFFFFFFFFFFF8)
        sub_1BE61F1B4();
      v33 = v32;
      if (v32 >= 0x17)
      {
        v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v35 = v32 | 7;
        v36 = v35 + 1;
        p_dst = (__int128 *)operator new(v35 + 1);
        *((_QWORD *)&__dst + 1) = v33;
        v63 = v36 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
LABEL_37:
        memcpy(p_dst, __str, v33);
        goto LABEL_38;
      }
      HIBYTE(v63) = v32;
      p_dst = &__dst;
      if (v32)
        goto LABEL_37;
LABEL_38:
      *((_BYTE *)p_dst + v33) = 0;
      sub_1BE66A2C4((_QWORD *)this + 16, (uint64_t)&__dst);
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)__dst);
        v37 = v54;
        if (!*((_BYTE *)a3 + 184))
        {
LABEL_43:
          v38 = *((_QWORD *)a3 + 17) + 24 * v37;
          if (*(char *)(v38 + 23) < 0)
            goto LABEL_46;
LABEL_44:
          v39 = *(_OWORD *)v38;
          v63 = *(_QWORD *)(v38 + 16);
          __dst = v39;
          goto LABEL_47;
        }
      }
      else
      {
        v37 = v54;
        if (!*((_BYTE *)a3 + 184))
          goto LABEL_43;
      }
      if (!v37)
      {
        v38 = *((_QWORD *)a3 + 17);
        if (*(char *)(v38 + 23) < 0)
        {
LABEL_46:
          sub_1BE61F128(&__dst, *(void **)v38, *(_QWORD *)(v38 + 8));
          goto LABEL_47;
        }
        goto LABEL_44;
      }
      ul2sh(v37, (uint64_t)&__dst);
LABEL_47:
      v40 = sub_1BE66A2C4((_QWORD *)this + 16, (uint64_t)&__dst);
      v54 = (unint64_t)v40;
      v41 = *((_QWORD *)this + 11);
      if (v41 >= *((_QWORD *)this + 12))
      {
        v42 = sub_1BE66D0D0((char **)this + 10, (uint64_t)v53);
      }
      else
      {
        *(_OWORD *)v41 = *(_OWORD *)v53;
        *(_QWORD *)(v41 + 16) = *(_QWORD *)&v53[16];
        *(_QWORD *)(v41 + 24) = v40;
        *(_OWORD *)(v41 + 32) = v55;
        *(_OWORD *)(v41 + 48) = v56;
        *(_QWORD *)(v41 + 64) = v57;
        v42 = (char *)(v41 + 72);
      }
      *((_QWORD *)this + 11) = v42;
      if (SHIBYTE(v63) < 0)
        operator delete((void *)__dst);
      ++v21;
      v19 = *((_QWORD *)a3 + 10);
      v20 += 72;
    }
    while (v21 < 0x8E38E38E38E38E39 * ((*((_QWORD *)a3 + 11) - v19) >> 3));
  }
  v43 = (unint64_t)v60[4];
  v45 = (uint64_t **)((char *)this + 64);
  v44 = (uint64_t *)*((_QWORD *)this + 8);
  if (v44)
  {
    while (1)
    {
      while (1)
      {
        v46 = (uint64_t **)v44;
        v47 = v44[4];
        if (v47 <= v43)
          break;
        v44 = *v46;
        v45 = v46;
        if (!*v46)
          goto LABEL_59;
      }
      if (v47 >= v43)
        break;
      v44 = v46[1];
      if (!v44)
      {
        v45 = v46 + 1;
        goto LABEL_59;
      }
    }
  }
  else
  {
    v46 = (uint64_t **)((char *)this + 64);
LABEL_59:
    v48 = (uint64_t *)operator new(0x28uLL);
    v48[4] = v43;
    *v48 = 0;
    v48[1] = 0;
    v48[2] = (uint64_t)v46;
    *v45 = v48;
    v49 = **((_QWORD **)this + 7);
    if (v49)
    {
      *((_QWORD *)this + 7) = v49;
      v48 = *v45;
    }
    sub_1BE61F5C0(*((uint64_t **)this + 8), v48);
    ++*((_QWORD *)this + 9);
  }
  v50 = *((_QWORD *)this + 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v50) >> 3) >= v43)
    *(_BYTE *)(v50 + 40 * v43 + 32) = 1;
  Network::prepareNetwork(this);
  sub_1BE62033C((uint64_t)&v58, v59[0]);
  sub_1BE62033C((uint64_t)&v60, v61[0]);
}

void sub_1BE82BB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,char a26,_QWORD *a27)
{
  sub_1BE62033C((uint64_t)&a23, a24);
  sub_1BE62033C((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

uint64_t Network::guaranteeThatEdgesAreNonNegative(Network *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  double *v4;
  char v5;

  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 11) - v1;
  if (v2)
  {
    v3 = v2 / 72;
    if (v3 <= 1)
      v3 = 1;
    v4 = (double *)(v1 + 32);
    v5 = 1;
    do
    {
      if (*v4 < 0.000000999999997)
      {
        v5 = 0;
        *v4 = 0.000000999999997;
      }
      v4 += 9;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

void Network::convertAllEdgesToScores(Network *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  double *v5;
  long double v6;

  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 11) - v1;
  if (v2)
  {
    v3 = v2 / 72;
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = v3;
    v5 = (double *)(v1 + 32);
    do
    {
      v6 = 2.22044605e-16;
      if (*v5 >= 2.22044605e-16)
      {
        v6 = *v5;
        if (*v5 > 1.0)
          v6 = 1.0;
      }
      *v5 = -log10(v6);
      v5 += 9;
      --v4;
    }
    while (v4);
  }
}

void Network::applyInsertionPenalty(Network *this, float a2)
{
  uint64_t v2;
  unint64_t v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t *v17;
  int64x2_t v18;
  unint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int64x2_t v39;
  uint32x4_t v40;
  int64x2_t v41;
  uint16x8_t v42;
  uint32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  uint32x4_t v47;
  int64x2_t v48;
  int64x2_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  int64x2_t v53;
  int64x2_t v54;
  uint32x4_t v55;
  int64x2_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  uint32x4_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int8x8_t *v66;
  unint64_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int8x8_t v70;
  uint16x8_t v71;
  uint32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int64x2_t v75;
  int64x2_t v76;
  uint32x4_t v77;
  int64x2_t v78;
  unsigned __int8 *v79;
  int v80;
  double v81;
  double v82;
  int64x2_t v83;
  void *__p[2];
  uint64_t v85;

  v2 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v2)
  {
    v4 = 0;
    v5 = a2;
    v82 = a2;
    do
    {
      v6 = *(_QWORD *)(v2 + 72 * v4 + 24);
      if (*((_BYTE *)this + 184))
      {
        if (v6)
        {
          ul2sh(v6, (uint64_t)__p);
          goto LABEL_11;
        }
        v7 = *((_QWORD *)this + 17);
        if ((*(char *)(v7 + 23) & 0x80000000) == 0)
        {
LABEL_8:
          v8 = *(_OWORD *)v7;
          v85 = *(_QWORD *)(v7 + 16);
          *(_OWORD *)__p = v8;
          goto LABEL_11;
        }
      }
      else
      {
        v7 = *((_QWORD *)this + 17) + 24 * v6;
        if ((*(char *)(v7 + 23) & 0x80000000) == 0)
          goto LABEL_8;
      }
      sub_1BE61F128(__p, *(void **)v7, *(_QWORD *)(v7 + 8));
LABEL_11:
      v9 = HIBYTE(v85);
      if (v85 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if (v85 < 0)
        v9 = (unint64_t)__p[1];
      if (v9)
      {
        if (v9 >= 8)
        {
          if (v9 >= 0x20)
          {
            v15 = 0uLL;
            v14 = v9 & 0xFFFFFFFFFFFFFFE0;
            v16 = 0uLL;
            v17 = (int8x16_t *)(v10 + 2);
            v18 = 0uLL;
            v19 = v9 & 0xFFFFFFFFFFFFFFE0;
            v20 = 0uLL;
            v21 = 0uLL;
            v22 = 0uLL;
            v23 = 0uLL;
            v24 = 0uLL;
            v25 = 0uLL;
            v26 = 0uLL;
            v27 = 0uLL;
            v28 = 0uLL;
            v29 = 0uLL;
            v30 = 0uLL;
            v31 = 0uLL;
            v32 = 0uLL;
            do
            {
              v33.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
              v33.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
              v34 = (uint8x16_t)vceqq_s8(v17[-1], v33);
              v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
              v36 = vmovl_u16(*(uint16x4_t *)v35.i8);
              v37.i64[0] = v36.u32[0];
              v37.i64[1] = v36.u32[1];
              v38 = (int8x16_t)vdupq_n_s64(1uLL);
              v83 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v36.u32[2];
              v37.i64[1] = v36.u32[3];
              v39 = (int64x2_t)vandq_s8(v37, v38);
              v40 = vmovl_high_u16(v35);
              v37.i64[0] = v40.u32[0];
              v37.i64[1] = v40.u32[1];
              v41 = (int64x2_t)vandq_s8(v37, v38);
              v42 = vmovl_high_u8(v34);
              v43 = vmovl_u16(*(uint16x4_t *)v42.i8);
              v37.i64[0] = v43.u32[0];
              v37.i64[1] = v43.u32[1];
              v44 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v40.u32[2];
              v37.i64[1] = v40.u32[3];
              v45 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v43.u32[2];
              v37.i64[1] = v43.u32[3];
              v46 = (int64x2_t)vandq_s8(v37, v38);
              v47 = vmovl_high_u16(v42);
              v37.i64[0] = v47.u32[0];
              v37.i64[1] = v47.u32[1];
              v48 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v47.u32[2];
              v37.i64[1] = v47.u32[3];
              v49 = (int64x2_t)vandq_s8(v37, v38);
              v50 = (uint8x16_t)vceqq_s8(*v17, v33);
              v51 = vmovl_u8(*(uint8x8_t *)v50.i8);
              v52 = vmovl_u16(*(uint16x4_t *)v51.i8);
              v37.i64[0] = v52.u32[0];
              v37.i64[1] = v52.u32[1];
              v53 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v52.u32[2];
              v37.i64[1] = v52.u32[3];
              v54 = (int64x2_t)vandq_s8(v37, v38);
              v55 = vmovl_high_u16(v51);
              v37.i64[0] = v55.u32[0];
              v37.i64[1] = v55.u32[1];
              v56 = (int64x2_t)vandq_s8(v37, v38);
              v57 = vmovl_high_u8(v50);
              v58 = vmovl_u16(*(uint16x4_t *)v57.i8);
              v37.i64[0] = v58.u32[0];
              v37.i64[1] = v58.u32[1];
              v59 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v55.u32[2];
              v37.i64[1] = v55.u32[3];
              v60 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v58.u32[2];
              v37.i64[1] = v58.u32[3];
              v61 = (int64x2_t)vandq_s8(v37, v38);
              v62 = vmovl_high_u16(v57);
              v37.i64[0] = v62.u32[0];
              v37.i64[1] = v62.u32[1];
              v63 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v62.u32[2];
              v37.i64[1] = v62.u32[3];
              v24 = vaddq_s64(v24, v49);
              v23 = vaddq_s64(v23, v48);
              v22 = vaddq_s64(v22, v46);
              v20 = vaddq_s64(v20, v45);
              v21 = vaddq_s64(v21, v44);
              v18 = vaddq_s64(v18, v41);
              v16 = vaddq_s64(v16, v39);
              v15 = vaddq_s64(v15, v83);
              v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v37, v38));
              v31 = vaddq_s64(v31, v63);
              v30 = vaddq_s64(v30, v61);
              v28 = vaddq_s64(v28, v60);
              v29 = vaddq_s64(v29, v59);
              v27 = vaddq_s64(v27, v56);
              v26 = vaddq_s64(v26, v54);
              v25 = vaddq_s64(v25, v53);
              v17 += 2;
              v19 -= 32;
            }
            while (v19);
            v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v25, v15), vaddq_s64(v29, v21)), vaddq_s64(vaddq_s64(v27, v18), vaddq_s64(v31, v23))), vaddq_s64(vaddq_s64(vaddq_s64(v26, v16), vaddq_s64(v30, v22)), vaddq_s64(vaddq_s64(v28, v20), vaddq_s64(v32, v24)))));
            if (v9 == v14)
            {
              v5 = v82;
              goto LABEL_36;
            }
            v5 = v82;
            if ((v9 & 0x18) == 0)
            {
              v12 = (void **)((char *)v10 + v14);
              goto LABEL_32;
            }
          }
          else
          {
            v11 = 0;
            v14 = 0;
          }
          v12 = (void **)((char *)v10 + (v9 & 0xFFFFFFFFFFFFFFF8));
          v64 = 0uLL;
          v65 = (int64x2_t)(unint64_t)v11;
          v66 = (int8x8_t *)((char *)v10 + v14);
          v67 = v14 - (v9 & 0xFFFFFFFFFFFFFFF8);
          v68 = 0uLL;
          v69 = 0uLL;
          do
          {
            v70 = *v66++;
            v71 = vmovl_u8((uint8x8_t)vceq_s8(v70, (int8x8_t)0x5F5F5F5F5F5F5F5FLL));
            v72 = vmovl_u16(*(uint16x4_t *)v71.i8);
            v73.i64[0] = v72.u32[0];
            v73.i64[1] = v72.u32[1];
            v74 = (int8x16_t)vdupq_n_s64(1uLL);
            v75 = (int64x2_t)vandq_s8(v73, v74);
            v73.i64[0] = v72.u32[2];
            v73.i64[1] = v72.u32[3];
            v76 = (int64x2_t)vandq_s8(v73, v74);
            v77 = vmovl_high_u16(v71);
            v73.i64[0] = v77.u32[0];
            v73.i64[1] = v77.u32[1];
            v78 = (int64x2_t)vandq_s8(v73, v74);
            v73.i64[0] = v77.u32[2];
            v73.i64[1] = v77.u32[3];
            v69 = vaddq_s64(v69, (int64x2_t)vandq_s8(v73, v74));
            v68 = vaddq_s64(v68, v78);
            v64 = vaddq_s64(v64, v76);
            v65 = vaddq_s64(v65, v75);
            v67 += 8;
          }
          while (v67);
          v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v65, v68), vaddq_s64(v64, v69)));
          if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_32;
        }
        else
        {
          v11 = 0;
          v12 = v10;
LABEL_32:
          v79 = (unsigned __int8 *)v10 + v9;
          do
          {
            v80 = *(unsigned __int8 *)v12;
            v12 = (void **)((char *)v12 + 1);
            if (v80 == 95)
              ++v11;
          }
          while (v12 != (void **)v79);
        }
LABEL_36:
        v13 = v11 + 1;
        goto LABEL_37;
      }
      v13 = 1;
LABEL_37:
      v81 = v5 * (double)v13;
      v2 = *((_QWORD *)this + 10);
      *(double *)(v2 + 72 * v4 + 32) = fmax(*(double *)(v2 + 72 * v4 + 32) + v81, 0.000001);
      if (SHIBYTE(v85) < 0)
      {
        operator delete(__p[0]);
        v2 = *((_QWORD *)this + 10);
      }
      ++v4;
    }
    while (v4 < 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 11) - v2) >> 3));
  }
}

uint64_t Network::applyDiscount(uint64_t this, float a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  double *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;

  v2 = *(uint64_t **)(this + 32);
  v3 = *v2;
  if (*v2)
  {
    v4 = v2[2];
    v5 = *(_QWORD *)(this + 80);
    v6 = a2;
    v7 = 0;
    v8 = v3 - 1;
    if (v3 == 1)
      goto LABEL_8;
    v9 = !is_mul_ok(v8, 0x48uLL);
    if (72 * v4 + v5 + 32 + 72 * v8 < 72 * v4 + v5 + 32)
      goto LABEL_8;
    if (v9)
      goto LABEL_8;
    v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v10 = (double *)(72 * v4 + v5 + 104);
    v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v12 = fmax(*v10 + v6, 0.000001);
      *(v10 - 9) = fmax(*(v10 - 9) + v6, 0.000001);
      *v10 = v12;
      v10 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v3 != v7)
    {
LABEL_8:
      v13 = v3 - v7;
      v14 = (double *)(v5 + 72 * (v7 + v4) + 32);
      do
      {
        *v14 = fmax(*v14 + v6, 0.000001);
        v14 += 9;
        --v13;
      }
      while (v13);
    }
  }
  return this;
}

uint64_t Network::composeTrimAndSimplify(Network *this, const Network *a2, Network *a3, Network *a4, int a5, char a6)
{
  _BYTE v12[256];
  std::string *v13[32];

  sub_1BE66ADA4((uint64_t)v13);
  Network::compose((Network *)v13, a2, a3, a6);
  sub_1BE66ADA4((uint64_t)v12);
  Network::trimDeadEdges(v13, (Network *)v12);
  Network::removeEpsOutputEdges((Network *)v12, a4, a5);
  sub_1BE66A0DC((uint64_t)v12);
  return sub_1BE66A0DC((uint64_t)v13);
}

void sub_1BE82C258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_1BE66A0DC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_1BE82C26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_1BE66A0DC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_1BE82C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_1BE66A0DC((uint64_t)&a9);
  sub_1BE66A0DC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE82C29C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Network *a8, uint64_t a9, char **a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t RootCursor;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  _QWORD *v51;
  unint64_t v52;
  BOOL v53;
  _QWORD *v54;
  char **v55;
  char *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t **v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  BOOL v100;
  _QWORD *v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  char **v147;
  uint64_t v148;
  uint64_t v149;
  char **v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  const void *v161;
  int64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  unint64_t v178;
  uint64_t v179;
  __int128 v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  __int128 v188;
  BOOL v189;
  int v190;
  std::string *p_src;
  std::string::size_type size;
  uint64_t v193;
  std::string *v194;
  uint64_t v195;
  unint64_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int8x16_t *v199;
  int64x2_t v200;
  unint64_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int8x16_t v215;
  uint8x16_t v216;
  uint16x8_t v217;
  uint32x4_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int64x2_t v221;
  uint32x4_t v222;
  int64x2_t v223;
  uint16x8_t v224;
  uint32x4_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  uint32x4_t v229;
  int64x2_t v230;
  int64x2_t v231;
  uint8x16_t v232;
  uint16x8_t v233;
  uint32x4_t v234;
  int64x2_t v235;
  int64x2_t v236;
  uint32x4_t v237;
  int64x2_t v238;
  uint16x8_t v239;
  uint32x4_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  uint32x4_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int8x8_t *v248;
  unint64_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int8x8_t v252;
  uint16x8_t v253;
  uint32x4_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int64x2_t v257;
  int64x2_t v258;
  uint32x4_t v259;
  int64x2_t v260;
  int v261;
  char *v262;
  char **i;
  char **v264;
  char *v265;
  char *v266;
  char *v267;
  int v268;
  size_t v269;
  char *v270;
  size_t v271;
  int v272;
  _BOOL4 v273;
  int v274;
  _BOOL4 v275;
  char *v276;
  _BYTE *v277;
  char *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  _BYTE *v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  int v291;
  std::string::size_type v292;
  std::string::size_type v293;
  std::string *v294;
  std::string::size_type v295;
  std::string::size_type v296;
  std::string *p_dst;
  uint64_t v298;
  uint64_t v299;
  std::string::size_type v300;
  std::string *v301;
  std::string::size_type v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unint64_t v307;
  BOOL v308;
  unsigned int v309;
  int v310;
  int v311;
  std::string::size_type v312;
  std::string::size_type v313;
  std::string *v314;
  std::string::size_type v315;
  uint64_t v316;
  std::string *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  BOOL v321;
  uint64_t *v322;
  _BOOL4 v323;
  int v324;
  uint64_t *v325;
  uint64_t **v326;
  uint64_t *v327;
  uint64_t *v328;
  uint64_t **v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t **v333;
  uint64_t **v334;
  unint64_t v335;
  char *v336;
  std::string::size_type v337;
  std::string *v338;
  std::string::size_type v339;
  int v340;
  int v341;
  int v342;
  int v343;
  unint64_t v344;
  BOOL v345;
  unsigned int v346;
  int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  BOOL v353;
  uint64_t *v354;
  uint64_t v355;
  char v356;
  _QWORD *v357;
  int v358;
  BOOL v359;
  uint64_t *v360;
  uint64_t *v361;
  uint64_t **v362;
  uint64_t **v363;
  uint64_t **v364;
  uint64_t *v365;
  uint64_t *v366;
  uint64_t **v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t *v370;
  uint64_t *v371;
  uint64_t *v372;
  uint64_t **v373;
  uint64_t **v374;
  _OWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  _OWORD *v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t *v381;
  uint64_t *v382;
  char v383;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  _BYTE *v390;
  int v391;
  uint64_t v392;
  int v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  NSObject *v400;
  _QWORD *v401;
  unint64_t v402;
  uint64_t **v403;
  double v404;
  double v405;
  double v406;
  unint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  _QWORD *v411;
  _OWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  _OWORD *v415;
  unint64_t v416;
  _QWORD *v417;
  _QWORD *v418;
  double v419;
  unint64_t v420;
  _QWORD *v421;
  _BYTE *v422;
  uint64_t v423;
  _BYTE *v424;
  uint64_t v425;
  _BYTE *v426;
  int v427;
  uint64_t v428;
  int v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;
  unint64_t v437;
  _QWORD *v438;
  _BYTE *v439;
  uint64_t v440;
  _BYTE *v441;
  uint64_t v442;
  _BYTE *v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  unint64_t v454;
  _QWORD *v455;
  _BYTE *v456;
  uint64_t v457;
  _BYTE *v458;
  uint64_t v459;
  _BYTE *v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  _QWORD *v469;
  unint64_t v470;
  _QWORD *v471;
  _BYTE *v472;
  uint64_t v473;
  _BYTE *v474;
  uint64_t v475;
  _BYTE *v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  double v483;
  _BOOL4 v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t *v491;
  uint64_t **v492;
  unint64_t v493;
  Network *v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  double *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  double *v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  char *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  char *v518;
  char *v519;
  char *v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  const double *v526;
  int64x2_t v527;
  int64x2_t v528;
  const double *v529;
  unsigned __int128 v530;
  unsigned __int128 v531;
  size_t v532;
  void *v533;
  _QWORD *v534;
  _QWORD *v535;
  _QWORD *v536;
  BOOL v537;
  double *v538;
  unint64_t v539;
  double v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  char *v544;
  __int128 *v545;
  uint64_t v546;
  __int128 v547;
  int v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  __int128 v552;
  const void *v553;
  int64_t v554;
  char *v555;
  char *v556;
  char *v557;
  uint64_t CursorByAdvancingWithCharacters;
  int TokenID;
  uint64_t v563;
  int v564;
  _QWORD *v565;
  _QWORD *v567;
  uint64_t v568;
  void **v569;
  _QWORD *v570;
  uint64_t *v571;
  _QWORD **v572;
  uint64_t v573;
  char *v574;
  __int128 v575;
  uint64_t *v576;
  __int128 v577;
  char v578;
  __int128 v579;
  unint64_t v580;
  __int128 v581;
  uint64_t *v582;
  unint64_t v583;
  int64x2_t v584;
  void **v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t **v589;
  char *v590;
  uint64_t v591;
  uint64_t v592[32];
  _BYTE v593[24];
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  std::string *__str;
  int v600[2];
  _QWORD *v601;
  uint64_t v602[11];
  __int128 __p;
  char *v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  uint64_t **v609;
  uint64_t *v610;
  uint64_t v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  uint64_t v615[7];
  char v616;
  _QWORD *v617;
  _QWORD v618[2];
  _QWORD **v619;
  _QWORD *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  std::string __dst;
  std::string v625;
  std::string __src;
  uint64_t *v627;
  uint64_t *v628;
  uint64_t *v629;
  uint64_t **v630;
  uint64_t *v631;
  char *v632;
  __int128 v633;
  unint64_t v634;

  sub_1BE66ADA4((uint64_t)v593);
  sub_1BE66ADA4((uint64_t)v592);
  v590 = 0;
  v591 = 0;
  v589 = (uint64_t **)&v590;
  sub_1BE66ADA4((uint64_t)&v605);
  v563 = a5;
  if (*((_QWORD *)&v607 + 1) != (_QWORD)v607)
    *((_QWORD *)&v607 + 1) = v607;
  sub_1BE62033C((uint64_t)&v609, v610);
  v611 = 0;
  v609 = &v610;
  v610 = 0;
  __p = 0uLL;
  v604 = 0;
  *((_QWORD *)&v633 + 1) = 0;
  v634 = 0;
  *(_QWORD *)&v633 = (char *)&v633 + 8;
  sub_1BE62033C((uint64_t)&v619, v620);
  v621 = 0;
  v619 = &v620;
  v620 = 0;
  v631 = 0;
  v632 = 0;
  v629 = 0;
  v630 = &v631;
  v627 = (uint64_t *)&v628;
  v628 = 0;
  RootCursor = LMLexiconGetRootCursor();
  v15 = LMLexiconGetRootCursor();
  v16 = LMLexiconCursorHash();
  v17 = LMLexiconCursorHash();
  sub_1BE829038((uint64_t)&v605, (uint64_t)a2, a5, a6, v16, v17, (uint64_t **)&v589, a2[3], RootCursor, v16, 0, (uint64_t)&v633, (uint64_t)&__p, (uint64_t **)&v630, &v627);
  if (a6)
    sub_1BE829038((uint64_t)&v605, (uint64_t)a2, a6, a6, v16, v17, (uint64_t **)&v589, a2[3], v15, v17, 1, (uint64_t)&v633, (uint64_t)&__p, (uint64_t **)&v630, &v627);
  sub_1BE62033C((uint64_t)&v630, v631);
  v631 = 0;
  v632 = 0;
  v630 = &v631;
  sub_1BE62033C((uint64_t)&v619, v620);
  v621 = 0;
  v619 = &v620;
  v620 = 0;
  LMLexiconResetCursors();
  v18 = LMLexiconResetCursors();
  v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v607 + 1) - v607) >> 3);
  if (v634 <= v19)
  {
    if (v634 < v19)
      *((_QWORD *)&v607 + 1) = v607 + 40 * v634;
  }
  else
  {
    sub_1BE66CE80((void **)&v607, v634 - v19);
  }
  v20 = v627;
  if (v627 != (uint64_t *)&v628)
  {
    do
    {
      v21 = v20[4];
      v22 = v610;
      v23 = &v610;
      v24 = &v610;
      if (v610)
      {
        while (1)
        {
          while (1)
          {
            v24 = (uint64_t **)v22;
            v25 = v22[4];
            if (v25 <= v21)
              break;
            v22 = *v24;
            v23 = v24;
            if (!*v24)
              goto LABEL_19;
          }
          if (v25 >= v21)
            break;
          v22 = v24[1];
          if (!v22)
          {
            v23 = v24 + 1;
            goto LABEL_19;
          }
        }
      }
      else
      {
LABEL_19:
        v26 = (uint64_t *)operator new(0x28uLL);
        v26[4] = v21;
        *v26 = 0;
        v26[1] = 0;
        v26[2] = (uint64_t)v24;
        *v23 = v26;
        if (*v609)
        {
          v609 = (uint64_t **)*v609;
          v26 = *v23;
        }
        v18 = (uint64_t)sub_1BE61F5C0(v610, v26);
        ++v611;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v607 + 1) - v607) >> 3) >= v21)
        *(_BYTE *)(v607 + 40 * v21 + 32) = 1;
      v27 = (uint64_t *)v20[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (uint64_t *)v20[2];
          v29 = *v28 == (_QWORD)v20;
          v20 = v28;
        }
        while (!v29);
      }
      v20 = v28;
    }
    while (v28 != (uint64_t *)&v628);
  }
  sub_1BE828388(v18, (uint64_t)&__p);
  v30 = *((_QWORD *)&__p + 1);
  v31 = __p;
  if ((_QWORD)__p != *((_QWORD *)&__p + 1))
  {
    v32 = (char *)*((_QWORD *)&v612 + 1);
    do
    {
      if ((unint64_t)v32 < (unint64_t)v613)
      {
        *(_OWORD *)v32 = *(_OWORD *)v31;
        *((_OWORD *)v32 + 1) = *(_OWORD *)(v31 + 16);
        *((_OWORD *)v32 + 2) = *(_OWORD *)(v31 + 32);
        *((_OWORD *)v32 + 3) = *(_OWORD *)(v31 + 48);
        *((_QWORD *)v32 + 8) = *(_QWORD *)(v31 + 64);
        v32 += 72;
      }
      else
      {
        v32 = sub_1BE66D0D0((char **)&v612, v31);
      }
      *((_QWORD *)&v612 + 1) = v32;
      v31 += 72;
    }
    while (v31 != v30);
  }
  Network::prepareNetwork((Network *)&v605);
  sub_1BE62033C((uint64_t)&v627, v628);
  sub_1BE62033C((uint64_t)&v630, v631);
  sub_1BE671438(*((_QWORD **)&v633 + 1));
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  sub_1BE66ADA4((uint64_t)&__p);
  Network::trimDeadEdges((std::string **)&v605, (Network *)&__p);
  Network::removeEpsOutputEdges((Network *)&__p, (Network *)v593, 0);
  sub_1BE66A0DC((uint64_t)&__p);
  sub_1BE66A0DC((uint64_t)&v605);
  LMLexiconResetCursors();
  LMLexiconResetCursors();
  if (v598 != v597)
  {
    v33 = (v598 - v597) / 72;
    if (v33 <= 1)
      v33 = 1;
    v34 = (double *)(v597 + 32);
    do
    {
      if (*v34 < 0.000000999999997)
        *v34 = 0.000000999999997;
      v34 += 9;
      --v33;
    }
    while (v33);
  }
  sub_1BE62033C(a9 + 56, *(_QWORD **)(a9 + 64));
  *(_QWORD *)(a9 + 56) = a9 + 64;
  v585 = (void **)(a9 + 64);
  *(_QWORD *)(a9 + 64) = 0;
  v35 = *(_QWORD *)(a9 + 32);
  *(_QWORD *)(a9 + 72) = 0;
  v569 = (void **)(a9 + 32);
  v36 = *(_QWORD *)(a9 + 40);
  if (v36 != v35)
  {
    *(_QWORD *)(a9 + 40) = v35;
    v36 = v35;
  }
  v37 = 0xCCCCCCCCCCCCCCCDLL * ((v596 - v595) >> 3);
  v38 = 0xCCCCCCCCCCCCCCCDLL * ((v36 - v35) >> 3);
  if (v37 <= v38)
  {
    if (v37 < v38)
      *(_QWORD *)(a9 + 40) = v35 + 8 * ((v596 - v595) >> 3);
  }
  else
  {
    sub_1BE66CE80(v569, v37 - v38);
  }
  if (v593 != (_BYTE *)a9)
  {
    sub_1BE66B898(a9 + 136, __str, *(std::string **)v600, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v600 - (_QWORD)__str) >> 3));
    sub_1BE66BB9C((uint64_t **)(a9 + 160), v601, v602);
  }
  v39 = v596;
  v40 = v595;
  v604 = 0;
  __p = 0uLL;
  v41 = (v596 - v595) / 40;
  if (v596 == v595)
  {
    v43 = 0;
  }
  else
  {
    if (v41 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v42 = 24 * v41;
    v43 = (char *)operator new(24 * v41);
    v44 = 0;
    *(_QWORD *)&__p = v43;
    v604 = &v43[24 * v41];
    do
    {
      v45 = &v43[v44];
      *((_QWORD *)v45 + 2) = 0;
      *(_QWORD *)&v43[v44 + 8] = 0;
      *(_QWORD *)v45 = &v43[v44 + 8];
      v44 += 24;
    }
    while (v42 != v44);
    *((_QWORD *)&__p + 1) = &v43[v42];
  }
  __src.__r_.__value_.__r.__words[0] = 0;
  v46 = v594 & 0xFFFFF;
  v47 = &v43[24 * v594];
  v49 = (uint64_t **)(v47 + 8);
  v48 = (uint64_t *)*((_QWORD *)v47 + 1);
  if (!v48)
  {
    v59 = (uint64_t **)(v47 + 8);
LABEL_79:
    v61 = (uint64_t *)operator new(0x30uLL);
    v61[4] = v46;
    v61[5] = 0;
    *v61 = 0;
    v61[1] = 0;
    v61[2] = (uint64_t)v59;
    *v49 = v61;
    v62 = **(_QWORD **)v47;
    if (v62)
    {
      *(_QWORD *)v47 = v62;
      v61 = *v49;
    }
    sub_1BE61F5C0(*((uint64_t **)v47 + 1), v61);
    ++*((_QWORD *)v47 + 2);
    v39 = v596;
    v40 = v595;
    v41 = 0xCCCCCCCCCCCCCCCDLL * ((v596 - v595) >> 3);
LABEL_82:
    __src.__r_.__value_.__r.__words[0] = 1;
    v55 = (char **)a9;
    v633 = 0uLL;
    v634 = 0;
    if (v39 != v40)
      goto LABEL_71;
LABEL_83:
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v630 = 0;
    v631 = 0;
    v632 = 0;
    v627 = 0;
    v628 = 0;
    v629 = 0;
    goto LABEL_84;
  }
  v50 = (uint64_t **)(v47 + 8);
  v51 = (_QWORD *)*((_QWORD *)v47 + 1);
  do
  {
    v52 = v51[4];
    v53 = v52 >= v46;
    if (v52 >= v46)
      v54 = v51;
    else
      v54 = v51 + 1;
    if (v53)
      v50 = (uint64_t **)v51;
    v51 = (_QWORD *)*v54;
  }
  while (*v54);
  if (v50 == v49 || v46 < (unint64_t)v50[4])
  {
    while (1)
    {
      while (1)
      {
        v59 = (uint64_t **)v48;
        v60 = v48[4];
        if (v46 >= v60)
          break;
        v48 = *v59;
        v49 = v59;
        if (!*v59)
          goto LABEL_79;
      }
      if (v60 >= v46)
        goto LABEL_82;
      v48 = v59[1];
      if (!v48)
      {
        v49 = v59 + 1;
        goto LABEL_79;
      }
    }
  }
  v55 = (char **)a9;
  v633 = 0uLL;
  v634 = 0;
  if (v39 == v40)
    goto LABEL_83;
LABEL_71:
  if (v41 >> 62)
    sub_1BE61F930();
  v56 = (char *)operator new(4 * v41);
  *(_QWORD *)&v633 = v56;
  v634 = (unint64_t)&v56[4 * v41];
  bzero(v56, 4 * v41);
  *((_QWORD *)&v633 + 1) = &v56[4 * v41];
  v57 = (uint64_t *)operator new(4 * v41);
  v630 = (uint64_t **)v57;
  v632 = (char *)v57 + 4 * v41;
  bzero(v57, 4 * v41);
  v631 = (uint64_t *)((char *)v57 + 4 * v41);
  v58 = (uint64_t *)operator new(4 * v41);
  v627 = v58;
  v629 = (uint64_t *)((char *)v58 + 4 * v41);
  bzero(v58, 4 * v41);
  v628 = (uint64_t *)((char *)v58 + 4 * v41);
LABEL_84:
  sub_1BE82AA40((uint64_t)v593, v594, &__p, &__src, (uint64_t *)&v627, &v633, &v630);
  v65 = (_QWORD *)*((_QWORD *)&__p + 1);
  v64 = (_QWORD *)__p;
  v576 = v58;
  v572 = (_QWORD **)(a9 + 56);
  if ((_QWORD)__p == *((_QWORD *)&__p + 1))
  {
    v69 = 0;
  }
  else
  {
    v66 = *((_QWORD *)&__p + 1) - __p - 24;
    if (v66 >= 0x60)
    {
      v523 = v66 / 0x18 + 1;
      v524 = v523 & 3;
      if ((v523 & 3) == 0)
        v524 = 4;
      v525 = v523 - v524;
      v68 = __p + 24 * v525;
      v526 = (const double *)(__p + 64);
      v527 = 0uLL;
      v528 = 0uLL;
      do
      {
        v529 = v526 - 6;
        v530 = (unsigned __int128)vld3q_f64(v529);
        v531 = (unsigned __int128)vld3q_f64(v526);
        v527 = vaddq_s64((int64x2_t)v530, v527);
        v528 = vaddq_s64((int64x2_t)v531, v528);
        v526 += 12;
        v525 -= 4;
      }
      while (v525);
      v67 = vaddvq_s64(vaddq_s64(v528, v527));
    }
    else
    {
      v67 = 0;
      v68 = __p;
    }
    do
    {
      v67 += *(_QWORD *)(v68 + 16);
      v68 += 24;
    }
    while (v68 != *((_QWORD *)&__p + 1));
    if (v67)
    {
      if (v67 >> 61)
        sub_1BE61F930();
      v532 = 8 * v67;
      v533 = operator new(8 * v67);
      bzero(v533, v532);
      v69 = v533;
    }
    else
    {
      v69 = 0;
    }
    do
    {
      v534 = (_QWORD *)*v64;
      if ((_QWORD *)*v64 != v64 + 1)
      {
        do
        {
          v69[v534[5]] = (v534[4] >> 20) & 0xFFFFFFFFFFLL;
          v535 = (_QWORD *)v534[1];
          if (v535)
          {
            do
            {
              v536 = v535;
              v535 = (_QWORD *)*v535;
            }
            while (v535);
          }
          else
          {
            do
            {
              v536 = (_QWORD *)v534[2];
              v29 = *v536 == (_QWORD)v534;
              v534 = v536;
            }
            while (!v29);
          }
          v534 = v536;
        }
        while (v536 != v64 + 1);
      }
      v64 += 3;
    }
    while (v64 != v65);
  }
  v70 = v55[4];
  v71 = 0xCCCCCCCCCCCCCCCDLL * ((v55[5] - v70) >> 3);
  if (__src.__r_.__value_.__r.__words[0] <= v71)
  {
    if (__src.__r_.__value_.__r.__words[0] < v71)
      v55[5] = &v70[40 * __src.__r_.__value_.__r.__words[0]];
  }
  else
  {
    sub_1BE66CE80(v569, __src.__r_.__value_.__r.__words[0] - v71);
  }
  v565 = v69;
  v605 = 0uLL;
  *(_QWORD *)&v606 = 0;
  v72 = v596;
  v73 = v595;
  v74 = v576;
  if (v596 != v595)
  {
    v75 = 0;
    v574 = v56;
    v582 = v57;
    do
    {
      v76 = (_QWORD *)(__p + 24 * v75);
      v77 = (_QWORD *)*v76;
      v567 = v76 + 1;
      if ((_QWORD *)*v76 != v76 + 1)
      {
        if (*(_QWORD *)(v73 + 40 * v75))
        {
          v583 = v75;
          while (1)
          {
            v570 = v77;
            if (*(_QWORD *)(v73 + 40 * v75))
              break;
LABEL_187:
            v141 = v570;
            v142 = (_QWORD *)v570[1];
            if (v142)
            {
              do
              {
                v143 = v142;
                v142 = (_QWORD *)*v142;
              }
              while (v142);
            }
            else
            {
              do
              {
                v143 = (_QWORD *)v141[2];
                v29 = *v143 == (_QWORD)v141;
                v141 = v143;
              }
              while (!v29);
            }
            v77 = v143;
            if (v143 == v567)
            {
              v72 = v596;
              goto LABEL_95;
            }
          }
          v63 = 0;
          v78 = v77[4];
          while (2)
          {
            v79 = v597 + 72 * (*(_QWORD *)(v73 + 40 * v75 + 16) + v63);
            v80 = *(_QWORD *)(v79 + 8);
            v81 = *(_OWORD *)(v79 + 16);
            v82 = *(_QWORD *)(v79 + 24);
            if (*(_BYTE *)(v73 + 40 * v80 + 32))
              v83 = 0;
            else
              v83 = (v82 & 0xFFFFF) << 20;
            v84 = __p + 24 * *(_QWORD *)v79;
            v87 = *(_QWORD **)(v84 + 8);
            v85 = v84 + 8;
            v86 = v87;
            v587 = v63;
            if (!v87)
              goto LABEL_117;
            v88 = (_QWORD *)v85;
            do
            {
              v89 = v86[4];
              v90 = v89 >= v78;
              if (v89 >= v78)
                v91 = v86;
              else
                v91 = v86 + 1;
              if (v90)
                v88 = v86;
              v86 = (_QWORD *)*v91;
            }
            while (*v91);
            if (v88 != (_QWORD *)v85 && v88[4] <= v78)
            {
              v92 = v88[5];
              v118 = __p + 24 * v80;
              v119 = *(_QWORD **)(v118 + 8);
              v94 = v118 + 8;
              v95 = v119;
              if (v119)
                goto LABEL_118;
            }
            else
            {
LABEL_117:
              v92 = -1;
              v93 = __p + 24 * v80;
              v96 = *(_QWORD **)(v93 + 8);
              v94 = v93 + 8;
              v95 = v96;
              if (v96)
              {
LABEL_118:
                v97 = v83 & 0xFFFFFFFFFFF00000 | v80 & 0xFFFFF;
                v98 = (_QWORD *)v94;
                do
                {
                  v99 = v95[4];
                  v100 = v99 >= v97;
                  if (v99 >= v97)
                    v101 = v95;
                  else
                    v101 = v95 + 1;
                  if (v100)
                    v98 = v95;
                  v95 = (_QWORD *)*v101;
                }
                while (*v101);
                if (v98 != (_QWORD *)v94 && v98[4] <= v97)
                {
                  v102 = v98[5];
                  v104 = *(_OWORD *)(v79 + 32);
                  v103 = *(_OWORD *)(v79 + 48);
                  v105 = *(_QWORD *)(v79 + 64);
                  v106 = (char *)*((_QWORD *)&v605 + 1);
                  v107 = v606;
                  if (*((_QWORD *)&v605 + 1) >= (unint64_t)v606)
                    goto LABEL_129;
LABEL_142:
                  *(_QWORD *)v106 = v92;
                  *((_QWORD *)v106 + 1) = v102;
                  *((_QWORD *)v106 + 2) = v81;
                  *((_QWORD *)v106 + 3) = v82;
                  *((_OWORD *)v106 + 2) = v104;
                  *((_OWORD *)v106 + 3) = v103;
                  *((_QWORD *)v106 + 8) = v105;
                  *((_QWORD *)&v605 + 1) = v106 + 72;
                  if (!*(_BYTE *)(v73 + 40 * v80 + 32))
                    goto LABEL_102;
                  break;
                }
              }
            }
            v102 = -1;
            v104 = *(_OWORD *)(v79 + 32);
            v103 = *(_OWORD *)(v79 + 48);
            v105 = *(_QWORD *)(v79 + 64);
            v106 = (char *)*((_QWORD *)&v605 + 1);
            v107 = v606;
            if (*((_QWORD *)&v605 + 1) < (unint64_t)v606)
              goto LABEL_142;
LABEL_129:
            v108 = (char *)v605;
            v109 = 0x8E38E38E38E38E39 * ((uint64_t)&v106[-v605] >> 3);
            v110 = v109 + 1;
            if (v109 + 1 > 0x38E38E38E38E38ELL)
              sub_1BE61F930();
            v111 = 0x8E38E38E38E38E39 * ((v107 - (uint64_t)v605) >> 3);
            if (2 * v111 > v110)
              v110 = 2 * v111;
            if (v111 >= 0x1C71C71C71C71C7)
              v112 = 0x38E38E38E38E38ELL;
            else
              v112 = v110;
            if (v112 > 0x38E38E38E38E38ELL)
              sub_1BE61F100();
            v577 = v104;
            v579 = v103;
            v581 = v81;
            v113 = (char *)operator new(72 * v112);
            v114 = &v113[72 * v109];
            *(_QWORD *)v114 = v92;
            *((_QWORD *)v114 + 1) = v102;
            *((_OWORD *)v114 + 1) = v581;
            *((_OWORD *)v114 + 2) = v577;
            *((_OWORD *)v114 + 3) = v579;
            *((_QWORD *)v114 + 8) = v105;
            if (v106 == v108)
            {
              v117 = &v113[72 * v109];
            }
            else
            {
              v115 = 0;
              do
              {
                v116 = &v114[v115];
                *(_OWORD *)(v116 - 72) = *(_OWORD *)&v106[v115 - 72];
                *(_OWORD *)(v116 - 56) = *(_OWORD *)&v106[v115 - 56];
                *(_OWORD *)(v116 - 40) = *(_OWORD *)&v106[v115 - 40];
                *(_OWORD *)(v116 - 24) = *(_OWORD *)&v106[v115 - 24];
                *((_QWORD *)v116 - 1) = *(_QWORD *)&v106[v115 - 8];
                v115 -= 72;
              }
              while (&v106[v115] != v108);
              v117 = &v114[v115];
            }
            v56 = v574;
            v120 = v114 + 72;
            *(_QWORD *)&v605 = v117;
            *(_QWORD *)&v606 = &v113[72 * v112];
            if (v108)
            {
              operator delete(v108);
              v73 = v595;
            }
            v55 = (char **)a9;
            v74 = v576;
            *((_QWORD *)&v605 + 1) = v120;
            if (!*(_BYTE *)(v73 + 40 * v80 + 32))
            {
LABEL_102:
              v63 = v587 + 1;
              v73 = v595;
              v57 = v582;
              v75 = v583;
              if (*(_QWORD *)(v595 + 40 * v583) <= (unint64_t)(v587 + 1))
                goto LABEL_187;
              continue;
            }
            break;
          }
          v121 = (_QWORD *)(a9 + 64);
          while (1)
          {
            v122 = (_QWORD *)*v121;
            v123 = v121;
            if (!*v121)
              break;
            while (1)
            {
              v121 = v122;
              v124 = v122[4];
              if (v124 > v102)
                break;
              if (v124 >= v102)
                goto LABEL_179;
              v122 = (_QWORD *)v121[1];
              if (!v122)
              {
                v123 = v121 + 1;
                goto LABEL_154;
              }
            }
          }
LABEL_154:
          v125 = operator new(0x28uLL);
          v125[4] = v102;
          *v125 = 0;
          v125[1] = 0;
          v125[2] = v121;
          *v123 = v125;
          v126 = (_QWORD *)**v572;
          if (v126)
          {
            *v572 = v126;
            v125 = (_QWORD *)*v123;
          }
          v55 = (char **)a9;
          v127 = *v585;
          v29 = v125 == *v585;
          *((_BYTE *)v125 + 24) = v29;
          if (!v29)
          {
            do
            {
              v128 = v125[2];
              if (*(_BYTE *)(v128 + 24))
                break;
              v129 = *(_BYTE **)(v128 + 16);
              v130 = *(_QWORD *)v129;
              if (*(_QWORD *)v129 == v128)
              {
                v133 = *((_QWORD *)v129 + 1);
                if (!v133 || (v134 = *(unsigned __int8 *)(v133 + 24), v131 = (_BYTE *)(v133 + 24), v134))
                {
                  if (*(_QWORD **)v128 == v125)
                  {
                    *(_BYTE *)(v128 + 24) = 1;
                    v129[24] = 0;
                    v137 = *(_QWORD *)(v128 + 8);
                    *(_QWORD *)v129 = v137;
                    if (v137)
                      goto LABEL_171;
                  }
                  else
                  {
                    v135 = *(uint64_t **)(v128 + 8);
                    v136 = *v135;
                    *(_QWORD *)(v128 + 8) = *v135;
                    if (v136)
                    {
                      *(_QWORD *)(v136 + 16) = v128;
                      v129 = *(_BYTE **)(v128 + 16);
                    }
                    v135[2] = (uint64_t)v129;
                    *(_QWORD *)(*(_QWORD *)(v128 + 16) + 8 * (**(_QWORD **)(v128 + 16) != v128)) = v135;
                    *v135 = v128;
                    *(_QWORD *)(v128 + 16) = v135;
                    v129 = (_BYTE *)v135[2];
                    v128 = *(_QWORD *)v129;
                    *((_BYTE *)v135 + 24) = 1;
                    v129[24] = 0;
                    v137 = *(_QWORD *)(v128 + 8);
                    *(_QWORD *)v129 = v137;
                    if (v137)
LABEL_171:
                      *(_QWORD *)(v137 + 16) = v129;
                  }
                  *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
                  *(_QWORD *)(*((_QWORD *)v129 + 2) + 8 * (**((_QWORD **)v129 + 2) != (_QWORD)v129)) = v128;
                  *(_QWORD *)(v128 + 8) = v129;
LABEL_177:
                  *((_QWORD *)v129 + 2) = v128;
                  break;
                }
              }
              else if (!v130 || (v132 = *(unsigned __int8 *)(v130 + 24), v131 = (_BYTE *)(v130 + 24), v132))
              {
                if (*(_QWORD **)v128 == v125)
                {
                  v140 = v125[1];
                  *(_QWORD *)v128 = v140;
                  if (v140)
                  {
                    *(_QWORD *)(v140 + 16) = v128;
                    v129 = *(_BYTE **)(v128 + 16);
                  }
                  v125[2] = v129;
                  *(_QWORD *)(*(_QWORD *)(v128 + 16) + 8 * (**(_QWORD **)(v128 + 16) != v128)) = v125;
                  v125[1] = v128;
                  *(_QWORD *)(v128 + 16) = v125;
                  v129 = (_BYTE *)v125[2];
                  *((_BYTE *)v125 + 24) = 1;
                  v129[24] = 0;
                  v128 = *((_QWORD *)v129 + 1);
                  v138 = *(_QWORD **)v128;
                  *((_QWORD *)v129 + 1) = *(_QWORD *)v128;
                  if (v138)
LABEL_175:
                    v138[2] = v129;
                }
                else
                {
                  *(_BYTE *)(v128 + 24) = 1;
                  v129[24] = 0;
                  v128 = *((_QWORD *)v129 + 1);
                  v138 = *(_QWORD **)v128;
                  *((_QWORD *)v129 + 1) = *(_QWORD *)v128;
                  if (v138)
                    goto LABEL_175;
                }
                *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
                *(_QWORD *)(*((_QWORD *)v129 + 2) + 8 * (**((_QWORD **)v129 + 2) != (_QWORD)v129)) = v128;
                *(_QWORD *)v128 = v129;
                goto LABEL_177;
              }
              *(_BYTE *)(v128 + 24) = 1;
              v125 = v129;
              v129[24] = v129 == (_BYTE *)v127;
              *v131 = 1;
            }
            while (v129 != (_BYTE *)v127);
          }
          ++*(_QWORD *)(a9 + 72);
          v56 = v574;
          v74 = v576;
LABEL_179:
          v139 = v55[4];
          if (0xCCCCCCCCCCCCCCCDLL * ((v55[5] - v139) >> 3) >= v102)
            v139[40 * v102 + 32] = 1;
          goto LABEL_102;
        }
        do
        {
          v144 = (_QWORD *)v77[1];
          if (v144)
          {
            do
            {
              v145 = v144;
              v144 = (_QWORD *)*v144;
            }
            while (v144);
          }
          else
          {
            do
            {
              v145 = (_QWORD *)v77[2];
              v29 = *v145 == (_QWORD)v77;
              v77 = v145;
            }
            while (!v29);
          }
          v77 = v145;
        }
        while (v145 != v567);
      }
LABEL_95:
      ++v75;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v72 - v73) >> 3) > v75);
  }
  v146 = v565;
  sub_1BE828388(v63, (uint64_t)&v605);
  v147 = v55;
  v148 = *((_QWORD *)&v605 + 1);
  v149 = v605;
  if ((_QWORD)v605 != *((_QWORD *)&v605 + 1))
  {
    v150 = v147 + 10;
    v151 = v147[11];
    do
    {
      if (v151 < v147[12])
      {
        *(_OWORD *)v151 = *(_OWORD *)v149;
        *((_OWORD *)v151 + 1) = *(_OWORD *)(v149 + 16);
        *((_OWORD *)v151 + 2) = *(_OWORD *)(v149 + 32);
        *((_OWORD *)v151 + 3) = *(_OWORD *)(v149 + 48);
        *((_QWORD *)v151 + 8) = *(_QWORD *)(v149 + 64);
        v151 += 72;
      }
      else
      {
        v151 = sub_1BE66D0D0(v150, v149);
      }
      v147 = (char **)a9;
      *(_QWORD *)(a9 + 88) = v151;
      v149 += 72;
    }
    while (v149 != v148);
  }
  Network::prepareNetwork((Network *)v147);
  if ((_QWORD)v605)
  {
    *((_QWORD *)&v605 + 1) = v605;
    operator delete((void *)v605);
  }
  if (v74)
  {
    v628 = v74;
    operator delete(v74);
  }
  if (v57)
  {
    v631 = v57;
    operator delete(v57);
  }
  if (v56)
    operator delete(v56);
  v152 = (char *)__p;
  if ((_QWORD)__p)
  {
    v153 = (char *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        v154 = v153 - 24;
        sub_1BE671438(*((_QWORD **)v153 - 2));
        v153 = v154;
      }
      while (v154 != v152);
    }
    operator delete(v152);
  }
  *((_QWORD *)&v633 + 1) = 0;
  v634 = 0;
  v632 = 0;
  *(_QWORD *)&v633 = (char *)&v633 + 8;
  v630 = &v631;
  v631 = 0;
  v155 = a9;
  v568 = operator new[]();
  v573 = operator new[]();
  v588 = operator new[]();
  v157 = *(_QWORD *)(a9 + 32);
  v156 = *(_QWORD *)(a9 + 40);
  if (v156 != v157)
  {
    v158 = 0;
    v586 = (uint64_t *)(a13 + 8);
    v571 = (uint64_t *)(a12 + 8);
    do
    {
      if (*(_BYTE *)(v157 + 40 * v158 + 32))
        goto LABEL_222;
      v159 = v146[v158];
      v580 = v158;
      if (*(_QWORD *)(v155 + 24) == v158)
      {
        v627 = 0;
        v628 = 0;
        v629 = 0;
        v161 = *(const void **)a11;
        v160 = *(_QWORD *)(a11 + 8);
        v162 = v160 - *(_QWORD *)a11;
        if (v160 == *(_QWORD *)a11)
          goto LABEL_265;
        if (v162 < 0)
          sub_1BE61F930();
        v163 = (uint64_t *)operator new(v160 - *(_QWORD *)a11);
        v164 = (uint64_t *)((char *)v163 + 4 * (v162 >> 2));
        v627 = v163;
        v629 = v164;
        memcpy(v163, v161, v162);
        v628 = v164;
        v564 = -1;
        v165 = v163;
        do
        {
          if (v563)
          {
            v605 = 0uLL;
            *(_QWORD *)&v606 = 0;
            if (v164 == v165)
            {
              v167 = 0;
              v166 = 0;
            }
            else
            {
              if (v162 < 0)
                sub_1BE61F930();
              v166 = (char *)operator new(v162);
              *(_QWORD *)&v605 = v166;
              *((_QWORD *)&v605 + 1) = v166;
              v167 = &v166[4 * (v162 >> 2)];
              *(_QWORD *)&v606 = v167;
              memcpy(v166, v165, v162);
              *((_QWORD *)&v605 + 1) = v167;
            }
            LMLexiconGetRootCursor();
            v168 = v166;
            if (v166 == v167)
            {
LABEL_237:
              v155 = a9;
              v158 = v580;
              v564 = LMLexiconCursorHasEntries() ? LMLexiconCursorFirstTokenID() : -1;
            }
            else
            {
              while (1)
              {
                LOWORD(__src.__r_.__value_.__l.__data_) = *(_DWORD *)v168;
                if (!LMLexiconGetCursorByAdvancingWithCharacters())
                  break;
                v168 += 4;
                if (v168 == v167)
                  goto LABEL_237;
              }
              v564 = 0;
              v155 = a9;
              v158 = v580;
            }
            LMLexiconResetCursors();
            if (v166)
            {
              *((_QWORD *)&v605 + 1) = v166;
              operator delete(v166);
            }
            v165 = v163;
            if ((v564 & 0x80000000) == 0)
              break;
          }
          if (a6)
          {
            __p = 0uLL;
            v604 = 0;
            v169 = (char *)v164 - (char *)v165;
            if (v164 == v165)
            {
              v171 = 0;
              v170 = 0;
            }
            else
            {
              if (v169 < 0)
                sub_1BE61F930();
              v170 = (char *)operator new((char *)v164 - (char *)v165);
              *(_QWORD *)&__p = v170;
              *((_QWORD *)&__p + 1) = v170;
              v171 = &v170[4 * (v169 >> 2)];
              v604 = v171;
              memcpy(v170, v165, (char *)v164 - (char *)v165);
              *((_QWORD *)&__p + 1) = v171;
            }
            LMLexiconGetRootCursor();
            v172 = v170;
            if (v170 == v171)
            {
LABEL_252:
              v155 = a9;
              v158 = v580;
              v564 = LMLexiconCursorHasEntries() ? LMLexiconCursorFirstTokenID() : -1;
            }
            else
            {
              while (1)
              {
                LOWORD(__src.__r_.__value_.__l.__data_) = *(_DWORD *)v172;
                if (!LMLexiconGetCursorByAdvancingWithCharacters())
                  break;
                v172 += 4;
                if (v172 == v171)
                  goto LABEL_252;
              }
              v564 = 0;
              v155 = a9;
              v158 = v580;
            }
            LMLexiconResetCursors();
            if (v170)
            {
              *((_QWORD *)&__p + 1) = v170;
              operator delete(v170);
            }
            v165 = v163;
            if ((v564 & 0x80000000) == 0)
              break;
          }
          v173 = (char *)((char *)v164 - ((char *)v165 + 4));
          v174 = v165;
          if (v164 != (uint64_t *)((char *)v165 + 4))
          {
            memmove(v165, (char *)v165 + 4, (char *)v164 - ((char *)v165 + 4));
            v163 = v627;
            v174 = v627;
          }
          v164 = (uint64_t *)((char *)v164 - 4);
          v628 = (uint64_t *)&v173[(_QWORD)v165];
          v165 = v174;
          v162 = (char *)v164 - (char *)v174;
        }
        while (v164 != v174);
        if (v163)
        {
          v628 = v163;
          operator delete(v163);
        }
        if (v564 == -1)
LABEL_265:
          v564 = 1;
      }
      else
      {
        v564 = 0;
      }
      v175 = v159 & 0xFFFFF;
      if (*(_BYTE *)(v155 + 184))
      {
        if (v175)
        {
          ul2sh(v159 & 0xFFFFF, (uint64_t)&v605);
          goto LABEL_277;
        }
        v176 = *(_QWORD *)(v155 + 136);
        if ((*(char *)(v176 + 23) & 0x80000000) == 0)
        {
LABEL_270:
          v177 = *(_OWORD *)v176;
          *(_QWORD *)&v606 = *(_QWORD *)(v176 + 16);
          v605 = v177;
          v178 = (v159 >> 20) & 0xFFFFF;
          if (!*(_BYTE *)(v155 + 184))
            goto LABEL_271;
          goto LABEL_278;
        }
      }
      else
      {
        v176 = *(_QWORD *)(v155 + 136) + 24 * v175;
        if ((*(char *)(v176 + 23) & 0x80000000) == 0)
          goto LABEL_270;
      }
      sub_1BE61F128(&v605, *(void **)v176, *(_QWORD *)(v176 + 8));
LABEL_277:
      v178 = (v159 >> 20) & 0xFFFFF;
      if (!*(_BYTE *)(v155 + 184))
      {
LABEL_271:
        v179 = *(_QWORD *)(v155 + 136) + 24 * v178;
        if ((*(char *)(v179 + 23) & 0x80000000) == 0)
          goto LABEL_272;
        goto LABEL_281;
      }
LABEL_278:
      if (v178)
      {
        ul2sh(v178, (uint64_t)&__p);
        goto LABEL_282;
      }
      v179 = *(_QWORD *)(v155 + 136);
      if ((*(char *)(v179 + 23) & 0x80000000) == 0)
      {
LABEL_272:
        v180 = *(_OWORD *)v179;
        v604 = *(char **)(v179 + 16);
        __p = v180;
        if (v175)
          goto LABEL_283;
        goto LABEL_273;
      }
LABEL_281:
      sub_1BE61F128(&__p, *(void **)v179, *(_QWORD *)(v179 + 8));
LABEL_282:
      if (v175)
      {
LABEL_283:
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v605;
        v564 = *((_DWORD *)sub_1BE61F944((uint64_t **)&v589, (const void **)&v605, (uint64_t)&unk_1BE8D50A2, (__int128 **)&__src)+ 14);
        if ((v159 & 0xFFFFF00000) == 0)
          goto LABEL_285;
LABEL_284:
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1BE61F944((uint64_t **)&v589, (const void **)&__p, (uint64_t)&unk_1BE8D50A2, (__int128 **)&__src);
        goto LABEL_285;
      }
LABEL_273:
      if ((v159 & 0xFFFFF00000) != 0)
        goto LABEL_284;
LABEL_285:
      v181 = *v569;
      if (*((_QWORD *)*v569 + 5 * v158))
      {
        v182 = 0;
        do
        {
          v183 = v181[5 * v158 + 2] + v182;
          v184 = *(_QWORD *)(a9 + 80);
          v185 = (_QWORD *)(v184 + 72 * v183);
          v186 = v185[3];
          if (*(_BYTE *)(a9 + 184))
          {
            if (v186)
            {
              ul2sh(v186, (uint64_t)&__src);
              goto LABEL_296;
            }
            v187 = *(_QWORD *)(a9 + 136);
            if ((*(char *)(v187 + 23) & 0x80000000) == 0)
            {
LABEL_292:
              v188 = *(_OWORD *)v187;
              __src.__r_.__value_.__r.__words[2] = *(_QWORD *)(v187 + 16);
              *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v188;
              if (!*v185)
                goto LABEL_293;
              goto LABEL_297;
            }
          }
          else
          {
            v187 = *(_QWORD *)(a9 + 136) + 24 * v186;
            if ((*(char *)(v187 + 23) & 0x80000000) == 0)
              goto LABEL_292;
          }
          sub_1BE61F128(&__src, *(void **)v187, *(_QWORD *)(v187 + 8));
LABEL_296:
          if (!*v185)
          {
LABEL_293:
            v189 = *((_BYTE *)*v569 + 40 * *(_QWORD *)(v184 + 72 * v183 + 8) + 32) != 0;
            goto LABEL_298;
          }
LABEL_297:
          v189 = 0;
LABEL_298:
          v190 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_src = &__src;
          else
            p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          else
            size = __src.__r_.__value_.__l.__size_;
          v578 = v189;
          v575 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
          if (size)
          {
            if (size >= 8)
            {
              if (size >= 0x20)
              {
                v197 = 0uLL;
                v196 = size & 0xFFFFFFFFFFFFFFE0;
                v198 = 0uLL;
                v199 = (int8x16_t *)&p_src->__r_.__value_.__r.__words[2];
                v200 = 0uLL;
                v201 = size & 0xFFFFFFFFFFFFFFE0;
                v202 = 0uLL;
                v203 = 0uLL;
                v204 = 0uLL;
                v205 = 0uLL;
                v206 = 0uLL;
                v207 = 0uLL;
                v208 = 0uLL;
                v209 = 0uLL;
                v210 = 0uLL;
                v211 = 0uLL;
                v212 = 0uLL;
                v213 = 0uLL;
                v214 = 0uLL;
                do
                {
                  v215.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
                  v215.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
                  v216 = (uint8x16_t)vceqq_s8(v199[-1], v215);
                  v217 = vmovl_u8(*(uint8x8_t *)v216.i8);
                  v218 = vmovl_u16(*(uint16x4_t *)v217.i8);
                  v219.i64[0] = v218.u32[0];
                  v219.i64[1] = v218.u32[1];
                  v220 = (int8x16_t)vdupq_n_s64(1uLL);
                  v584 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v218.u32[2];
                  v219.i64[1] = v218.u32[3];
                  v221 = (int64x2_t)vandq_s8(v219, v220);
                  v222 = vmovl_high_u16(v217);
                  v219.i64[0] = v222.u32[0];
                  v219.i64[1] = v222.u32[1];
                  v223 = (int64x2_t)vandq_s8(v219, v220);
                  v224 = vmovl_high_u8(v216);
                  v225 = vmovl_u16(*(uint16x4_t *)v224.i8);
                  v219.i64[0] = v225.u32[0];
                  v219.i64[1] = v225.u32[1];
                  v226 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v222.u32[2];
                  v219.i64[1] = v222.u32[3];
                  v227 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v225.u32[2];
                  v219.i64[1] = v225.u32[3];
                  v228 = (int64x2_t)vandq_s8(v219, v220);
                  v229 = vmovl_high_u16(v224);
                  v219.i64[0] = v229.u32[0];
                  v219.i64[1] = v229.u32[1];
                  v230 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v229.u32[2];
                  v219.i64[1] = v229.u32[3];
                  v231 = (int64x2_t)vandq_s8(v219, v220);
                  v232 = (uint8x16_t)vceqq_s8(*v199, v215);
                  v233 = vmovl_u8(*(uint8x8_t *)v232.i8);
                  v234 = vmovl_u16(*(uint16x4_t *)v233.i8);
                  v219.i64[0] = v234.u32[0];
                  v219.i64[1] = v234.u32[1];
                  v235 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v234.u32[2];
                  v219.i64[1] = v234.u32[3];
                  v236 = (int64x2_t)vandq_s8(v219, v220);
                  v237 = vmovl_high_u16(v233);
                  v219.i64[0] = v237.u32[0];
                  v219.i64[1] = v237.u32[1];
                  v238 = (int64x2_t)vandq_s8(v219, v220);
                  v239 = vmovl_high_u8(v232);
                  v240 = vmovl_u16(*(uint16x4_t *)v239.i8);
                  v219.i64[0] = v240.u32[0];
                  v219.i64[1] = v240.u32[1];
                  v241 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v237.u32[2];
                  v219.i64[1] = v237.u32[3];
                  v242 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v240.u32[2];
                  v219.i64[1] = v240.u32[3];
                  v243 = (int64x2_t)vandq_s8(v219, v220);
                  v244 = vmovl_high_u16(v239);
                  v219.i64[0] = v244.u32[0];
                  v219.i64[1] = v244.u32[1];
                  v245 = (int64x2_t)vandq_s8(v219, v220);
                  v219.i64[0] = v244.u32[2];
                  v219.i64[1] = v244.u32[3];
                  v206 = vaddq_s64(v206, v231);
                  v205 = vaddq_s64(v205, v230);
                  v204 = vaddq_s64(v204, v228);
                  v202 = vaddq_s64(v202, v227);
                  v203 = vaddq_s64(v203, v226);
                  v200 = vaddq_s64(v200, v223);
                  v198 = vaddq_s64(v198, v221);
                  v197 = vaddq_s64(v197, v584);
                  v214 = vaddq_s64(v214, (int64x2_t)vandq_s8(v219, v220));
                  v213 = vaddq_s64(v213, v245);
                  v212 = vaddq_s64(v212, v243);
                  v210 = vaddq_s64(v210, v242);
                  v211 = vaddq_s64(v211, v241);
                  v209 = vaddq_s64(v209, v238);
                  v208 = vaddq_s64(v208, v236);
                  v207 = vaddq_s64(v207, v235);
                  v199 += 2;
                  v201 -= 32;
                }
                while (v201);
                v193 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v207, v197), vaddq_s64(v211, v203)), vaddq_s64(vaddq_s64(v209, v200), vaddq_s64(v213, v205))), vaddq_s64(vaddq_s64(vaddq_s64(v208, v198), vaddq_s64(v212, v204)), vaddq_s64(vaddq_s64(v210, v202), vaddq_s64(v214, v206)))));
                if (size == v196)
                  goto LABEL_322;
                if ((size & 0x18) == 0)
                {
                  v194 = (std::string *)((char *)p_src + v196);
                  goto LABEL_319;
                }
              }
              else
              {
                v193 = 0;
                v196 = 0;
              }
              v194 = (std::string *)((char *)p_src + (size & 0xFFFFFFFFFFFFFFF8));
              v246 = 0uLL;
              v247 = (int64x2_t)(unint64_t)v193;
              v248 = (int8x8_t *)((char *)p_src + v196);
              v249 = v196 - (size & 0xFFFFFFFFFFFFFFF8);
              v250 = 0uLL;
              v251 = 0uLL;
              do
              {
                v252 = *v248++;
                v253 = vmovl_u8((uint8x8_t)vceq_s8(v252, (int8x8_t)0x5F5F5F5F5F5F5F5FLL));
                v254 = vmovl_u16(*(uint16x4_t *)v253.i8);
                v255.i64[0] = v254.u32[0];
                v255.i64[1] = v254.u32[1];
                v256 = (int8x16_t)vdupq_n_s64(1uLL);
                v257 = (int64x2_t)vandq_s8(v255, v256);
                v255.i64[0] = v254.u32[2];
                v255.i64[1] = v254.u32[3];
                v258 = (int64x2_t)vandq_s8(v255, v256);
                v259 = vmovl_high_u16(v253);
                v255.i64[0] = v259.u32[0];
                v255.i64[1] = v259.u32[1];
                v260 = (int64x2_t)vandq_s8(v255, v256);
                v255.i64[0] = v259.u32[2];
                v255.i64[1] = v259.u32[3];
                v251 = vaddq_s64(v251, (int64x2_t)vandq_s8(v255, v256));
                v250 = vaddq_s64(v250, v260);
                v246 = vaddq_s64(v246, v258);
                v247 = vaddq_s64(v247, v257);
                v249 += 8;
              }
              while (v249);
              v193 = vaddvq_s64(vaddq_s64(vaddq_s64(v247, v250), vaddq_s64(v246, v251)));
              if (size != (size & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_319;
            }
            else
            {
              v193 = 0;
              v194 = p_src;
              do
              {
LABEL_319:
                v261 = v194->__r_.__value_.__s.__data_[0];
                v194 = (std::string *)((char *)v194 + 1);
                if (v261 == 95)
                  ++v193;
              }
              while (v194 != (std::string *)((char *)p_src + size));
            }
LABEL_322:
            v195 = v193 + 1;
            goto LABEL_323;
          }
          v195 = 1;
LABEL_323:
          *(_QWORD *)(v588 + 8 * v182) = v195;
          v262 = v590;
          for (i = &v590; ; v262 = *i)
          {
            v264 = i;
            if (!v262)
              goto LABEL_343;
LABEL_326:
            i = (char **)v262;
            v267 = (char *)*((_QWORD *)v262 + 4);
            v265 = v262 + 32;
            v266 = v267;
            v268 = v265[23];
            if (v268 >= 0)
              v269 = v265[23];
            else
              v269 = *((_QWORD *)v265 + 1);
            if (v268 >= 0)
              v270 = v265;
            else
              v270 = v266;
            if (v269 >= size)
              v271 = size;
            else
              v271 = v269;
            v272 = memcmp(p_src, v270, v271);
            v273 = size < v269;
            if (v272)
              v273 = v272 < 0;
            if (!v273)
              break;
          }
          v274 = memcmp(v270, p_src, v271);
          v275 = v269 < size;
          if (v274)
            v275 = v274 < 0;
          if (v275)
          {
            v262 = i[1];
            if (!v262)
            {
              v264 = i + 1;
LABEL_343:
              v276 = (char *)operator new(0x40uLL);
              v277 = v276 + 32;
              if (v190 < 0)
              {
                sub_1BE61F128(v277, (void *)v575, *((unint64_t *)&v575 + 1));
              }
              else
              {
                *(_OWORD *)v277 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                *((_QWORD *)v276 + 6) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
              }
              *((_DWORD *)v276 + 14) = 0;
              *(_QWORD *)v276 = 0;
              *((_QWORD *)v276 + 1) = 0;
              *((_QWORD *)v276 + 2) = i;
              *v264 = v276;
              if (*v589)
              {
                v589 = (uint64_t **)*v589;
                v276 = *v264;
              }
              v278 = v590;
              v29 = v276 == v590;
              v276[24] = v276 == v590;
              if (!v29)
              {
                do
                {
                  v279 = *((_QWORD *)v276 + 2);
                  if (*(_BYTE *)(v279 + 24))
                    break;
                  v280 = *(char **)(v279 + 16);
                  v281 = *(_QWORD *)v280;
                  if (*(_QWORD *)v280 == v279)
                  {
                    v284 = *((_QWORD *)v280 + 1);
                    if (!v284 || (v285 = *(unsigned __int8 *)(v284 + 24), v282 = (_BYTE *)(v284 + 24), v285))
                    {
                      if (*(char **)v279 == v276)
                      {
                        *(_BYTE *)(v279 + 24) = 1;
                        v280[24] = 0;
                        v288 = *(_QWORD *)(v279 + 8);
                        *(_QWORD *)v280 = v288;
                        if (v288)
                          goto LABEL_363;
                      }
                      else
                      {
                        v286 = *(uint64_t **)(v279 + 8);
                        v287 = *v286;
                        *(_QWORD *)(v279 + 8) = *v286;
                        if (v287)
                        {
                          *(_QWORD *)(v287 + 16) = v279;
                          v280 = *(char **)(v279 + 16);
                        }
                        v286[2] = (uint64_t)v280;
                        *(_QWORD *)(*(_QWORD *)(v279 + 16) + 8 * (**(_QWORD **)(v279 + 16) != v279)) = v286;
                        *v286 = v279;
                        *(_QWORD *)(v279 + 16) = v286;
                        v280 = (char *)v286[2];
                        v279 = *(_QWORD *)v280;
                        *((_BYTE *)v286 + 24) = 1;
                        v280[24] = 0;
                        v288 = *(_QWORD *)(v279 + 8);
                        *(_QWORD *)v280 = v288;
                        if (v288)
LABEL_363:
                          *(_QWORD *)(v288 + 16) = v280;
                      }
                      *(_QWORD *)(v279 + 16) = *((_QWORD *)v280 + 2);
                      *(_QWORD *)(*((_QWORD *)v280 + 2) + 8 * (**((_QWORD **)v280 + 2) != (_QWORD)v280)) = v279;
                      *(_QWORD *)(v279 + 8) = v280;
LABEL_471:
                      *((_QWORD *)v280 + 2) = v279;
                      break;
                    }
                  }
                  else if (!v281 || (v283 = *(unsigned __int8 *)(v281 + 24), v282 = (_BYTE *)(v281 + 24), v283))
                  {
                    if (*(char **)v279 == v276)
                    {
                      v397 = *((_QWORD *)v276 + 1);
                      *(_QWORD *)v279 = v397;
                      if (v397)
                      {
                        *(_QWORD *)(v397 + 16) = v279;
                        v280 = *(char **)(v279 + 16);
                      }
                      *((_QWORD *)v276 + 2) = v280;
                      *(_QWORD *)(*(_QWORD *)(v279 + 16) + 8 * (**(_QWORD **)(v279 + 16) != v279)) = v276;
                      *((_QWORD *)v276 + 1) = v279;
                      *(_QWORD *)(v279 + 16) = v276;
                      v280 = (char *)*((_QWORD *)v276 + 2);
                      v276[24] = 1;
                      v280[24] = 0;
                      v279 = *((_QWORD *)v280 + 1);
                      v336 = *(char **)v279;
                      *((_QWORD *)v280 + 1) = *(_QWORD *)v279;
                      if (v336)
LABEL_469:
                        *((_QWORD *)v336 + 2) = v280;
                    }
                    else
                    {
                      *(_BYTE *)(v279 + 24) = 1;
                      v280[24] = 0;
                      v279 = *((_QWORD *)v280 + 1);
                      v336 = *(char **)v279;
                      *((_QWORD *)v280 + 1) = *(_QWORD *)v279;
                      if (v336)
                        goto LABEL_469;
                    }
                    *(_QWORD *)(v279 + 16) = *((_QWORD *)v280 + 2);
                    *(_QWORD *)(*((_QWORD *)v280 + 2) + 8 * (**((_QWORD **)v280 + 2) != (_QWORD)v280)) = v279;
                    *(_QWORD *)v279 = v280;
                    goto LABEL_471;
                  }
                  *(_BYTE *)(v279 + 24) = 1;
                  v276 = v280;
                  v280[24] = v280 == v278;
                  *v282 = 1;
                }
                while (v280 != v278);
              }
              ++v591;
              *(_DWORD *)(v568 + 4 * v182) = 0;
              v289 = (_QWORD *)(a13 + 8);
              if (v195 == 1)
                goto LABEL_473;
LABEL_366:
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                sub_1BE61F128(&v625, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
              else
                v625 = __src;
              v290 = 0;
              v291 = 0;
              while (2)
              {
                v292 = std::string::find(&v625, 95, 0);
                v293 = HIBYTE(v625.__r_.__value_.__r.__words[2]);
                if ((v625.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  v294 = &v625;
                }
                else
                {
                  v293 = v625.__r_.__value_.__l.__size_;
                  v294 = (std::string *)v625.__r_.__value_.__r.__words[0];
                }
                if (v293 >= v292)
                  v295 = v292;
                else
                  v295 = v293;
                if (v295 > 0x7FFFFFFFFFFFFFF7)
                  sub_1BE61F1B4();
                v296 = v292;
                if (v295 >= 0x17)
                {
                  v298 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v295 | 7) != 0x17)
                    v298 = v295 | 7;
                  v299 = v298 + 1;
                  p_dst = (std::string *)operator new(v298 + 1);
                  __dst.__r_.__value_.__r.__words[2] = v299 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                  __dst.__r_.__value_.__l.__size_ = v295;
                }
                else
                {
                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v295;
                  p_dst = &__dst;
                  if (!v295)
                  {
LABEL_386:
                    p_dst->__r_.__value_.__s.__data_[v295] = 0;
                    v300 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    v301 = &__dst;
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    {
                      v300 = __dst.__r_.__value_.__l.__size_;
                      v301 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    }
                    if (!v300)
                    {
                      LODWORD(v302) = 0;
                      goto LABEL_425;
                    }
                    v302 = v301->__r_.__value_.__s.__data_[0] == 45;
                    if (v301->__r_.__value_.__s.__data_[0] == 45)
                    {
                      if (v300 < 2)
                      {
                        LODWORD(v302) = 1;
LABEL_425:
                        v303 = 0;
LABEL_426:
                        if ((_DWORD)v302)
                          v311 = -v303;
                        else
                          v311 = v303;
                        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_430:
                          v312 = v296 + 1;
                          LOBYTE(v313) = *((_BYTE *)&v625.__r_.__value_.__s + 23);
                          if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_431;
LABEL_413:
                          v313 = v625.__r_.__value_.__l.__size_;
                          if (v625.__r_.__value_.__l.__size_ < v312)
                            goto LABEL_917;
                          v314 = (std::string *)v625.__r_.__value_.__r.__words[0];
                          v315 = v625.__r_.__value_.__l.__size_ - v312;
                          if (v625.__r_.__value_.__l.__size_ - v312 > 0x7FFFFFFFFFFFFFF7)
                            goto LABEL_918;
                          goto LABEL_433;
                        }
LABEL_412:
                        operator delete(__dst.__r_.__value_.__l.__data_);
                        v312 = v296 + 1;
                        LOBYTE(v313) = *((_BYTE *)&v625.__r_.__value_.__s + 23);
                        if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
                          goto LABEL_413;
LABEL_431:
                        v313 = v313;
                        if (v312 > v313)
LABEL_917:
                          sub_1BE61C764();
                        v314 = &v625;
                        v315 = v313 - v312;
                        if (v315 > 0x7FFFFFFFFFFFFFF7)
LABEL_918:
                          sub_1BE61F1B4();
LABEL_433:
                        if (v315 >= 0x17)
                        {
                          v331 = (v315 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v315 | 7) != 0x17)
                            v331 = v315 | 7;
                          v332 = v331 + 1;
                          v317 = (std::string *)operator new(v331 + 1);
                          __dst.__r_.__value_.__r.__words[2] = v332 | 0x8000000000000000;
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
                          __dst.__r_.__value_.__l.__size_ = v315;
                        }
                        else
                        {
                          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v315;
                          v317 = &__dst;
                          if (v313 == v312)
                          {
                            __dst.__r_.__value_.__s.__data_[v315] = 0;
                            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_436;
LABEL_461:
                            operator delete(v625.__r_.__value_.__l.__data_);
LABEL_436:
                            v625 = __dst;
                            v318 = *v586;
                            if (!*v586)
                              goto LABEL_370;
                            v319 = a13 + 8;
                            do
                            {
                              v320 = *(_DWORD *)(v318 + 28);
                              v321 = v320 < v311;
                              if (v320 >= v311)
                                v322 = (uint64_t *)v318;
                              else
                                v322 = (uint64_t *)(v318 + 8);
                              if (!v321)
                                v319 = v318;
                              v318 = *v322;
                            }
                            while (*v322);
                            if ((uint64_t *)v319 == v586)
                            {
LABEL_370:
                              v291 = 0;
                            }
                            else
                            {
                              v323 = v311 >= *(_DWORD *)(v319 + 28);
                              v324 = v291 & v323;
                              v291 = v323;
                              if (v324 == 1)
                              {
                                v325 = v631;
                                if (!v631)
                                {
                                  v334 = &v631;
                                  v333 = &v631;
LABEL_579:
                                  v384 = (uint64_t *)operator new(0x30uLL);
                                  v384[4] = v183;
                                  v384[5] = 0;
                                  *v384 = 0;
                                  v384[1] = 0;
                                  v384[2] = (uint64_t)v334;
                                  *v333 = v384;
                                  v385 = v384;
                                  if (*v630)
                                  {
                                    v630 = (uint64_t **)*v630;
                                    v385 = *v333;
                                  }
                                  v386 = v631;
                                  *((_BYTE *)v385 + 24) = v385 == v631;
                                  if (v385 != v386)
                                  {
                                    do
                                    {
                                      v387 = v385[2];
                                      if (*(_BYTE *)(v387 + 24))
                                        break;
                                      v388 = *(uint64_t **)(v387 + 16);
                                      v389 = *v388;
                                      if (*v388 == v387)
                                      {
                                        v392 = v388[1];
                                        if (!v392
                                          || (v393 = *(unsigned __int8 *)(v392 + 24), v390 = (_BYTE *)(v392 + 24), v393))
                                        {
                                          if (*(uint64_t **)v387 == v385)
                                          {
                                            *(_BYTE *)(v387 + 24) = 1;
                                            *((_BYTE *)v388 + 24) = 0;
                                            v396 = *(_QWORD *)(v387 + 8);
                                            *v388 = v396;
                                            if (v396)
                                              goto LABEL_595;
                                          }
                                          else
                                          {
                                            v394 = *(uint64_t **)(v387 + 8);
                                            v395 = *v394;
                                            *(_QWORD *)(v387 + 8) = *v394;
                                            if (v395)
                                            {
                                              *(_QWORD *)(v395 + 16) = v387;
                                              v388 = *(uint64_t **)(v387 + 16);
                                            }
                                            v394[2] = (uint64_t)v388;
                                            *(_QWORD *)(*(_QWORD *)(v387 + 16) + 8
                                                                               * (**(_QWORD **)(v387 + 16) != v387)) = v394;
                                            *v394 = v387;
                                            *(_QWORD *)(v387 + 16) = v394;
                                            v388 = (uint64_t *)v394[2];
                                            v387 = *v388;
                                            *((_BYTE *)v394 + 24) = 1;
                                            *((_BYTE *)v388 + 24) = 0;
                                            v396 = *(_QWORD *)(v387 + 8);
                                            *v388 = v396;
                                            if (v396)
LABEL_595:
                                              *(_QWORD *)(v396 + 16) = v388;
                                          }
                                          *(_QWORD *)(v387 + 16) = v388[2];
                                          *(_QWORD *)(v388[2] + 8 * (*(_QWORD *)v388[2] != (_QWORD)v388)) = v387;
                                          *(_QWORD *)(v387 + 8) = v388;
LABEL_608:
                                          v388[2] = v387;
                                          break;
                                        }
                                      }
                                      else if (!v389
                                             || (v391 = *(unsigned __int8 *)(v389 + 24),
                                                 v390 = (_BYTE *)(v389 + 24),
                                                 v391))
                                      {
                                        if (*(uint64_t **)v387 == v385)
                                        {
                                          v399 = v385[1];
                                          *(_QWORD *)v387 = v399;
                                          if (v399)
                                          {
                                            *(_QWORD *)(v399 + 16) = v387;
                                            v388 = *(uint64_t **)(v387 + 16);
                                          }
                                          v385[2] = (uint64_t)v388;
                                          *(_QWORD *)(*(_QWORD *)(v387 + 16) + 8 * (**(_QWORD **)(v387 + 16) != v387)) = v385;
                                          v385[1] = v387;
                                          *(_QWORD *)(v387 + 16) = v385;
                                          v388 = (uint64_t *)v385[2];
                                          *((_BYTE *)v385 + 24) = 1;
                                          *((_BYTE *)v388 + 24) = 0;
                                          v387 = v388[1];
                                          v398 = *(uint64_t **)v387;
                                          v388[1] = *(_QWORD *)v387;
                                          if (v398)
LABEL_606:
                                            v398[2] = (uint64_t)v388;
                                        }
                                        else
                                        {
                                          *(_BYTE *)(v387 + 24) = 1;
                                          *((_BYTE *)v388 + 24) = 0;
                                          v387 = v388[1];
                                          v398 = *(uint64_t **)v387;
                                          v388[1] = *(_QWORD *)v387;
                                          if (v398)
                                            goto LABEL_606;
                                        }
                                        *(_QWORD *)(v387 + 16) = v388[2];
                                        *(_QWORD *)(v388[2] + 8 * (*(_QWORD *)v388[2] != (_QWORD)v388)) = v387;
                                        *(_QWORD *)v387 = v388;
                                        goto LABEL_608;
                                      }
                                      *(_BYTE *)(v387 + 24) = 1;
                                      v385 = v388;
                                      *((_BYTE *)v388 + 24) = v388 == v386;
                                      *v390 = 1;
                                    }
                                    while (v388 != v386);
                                  }
                                  ++v632;
                                  goto LABEL_610;
                                }
                                v326 = &v631;
                                v327 = v631;
                                do
                                {
                                  v328 = v327;
                                  v329 = v326;
                                  v330 = v327[4];
                                  if (v330 >= v183)
                                    v326 = (uint64_t **)v327;
                                  else
                                    ++v327;
                                  v327 = (uint64_t *)*v327;
                                }
                                while (v327);
                                if (v326 == &v631)
                                  goto LABEL_464;
                                if (v330 < v183)
                                  v328 = (uint64_t *)v329;
                                if (v183 < v328[4])
                                {
LABEL_464:
                                  while (1)
                                  {
                                    while (1)
                                    {
                                      v334 = (uint64_t **)v325;
                                      v335 = v325[4];
                                      if (v183 >= v335)
                                        break;
                                      v325 = *v334;
                                      v333 = v334;
                                      if (!*v334)
                                        goto LABEL_579;
                                    }
                                    if (v335 >= v183)
                                      break;
                                    v325 = v334[1];
                                    if (!v325)
                                    {
                                      v333 = v334 + 1;
                                      goto LABEL_579;
                                    }
                                  }
                                  v384 = (uint64_t *)v334;
LABEL_610:
                                  v384[5] = v311;
LABEL_611:
                                  if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v625.__r_.__value_.__l.__data_);
                                  v146 = v565;
                                  goto LABEL_614;
                                }
                                v291 = 1;
                              }
                            }
                            if (*(_QWORD *)(v588 + 8 * v182) <= (unint64_t)++v290)
                              goto LABEL_611;
                            continue;
                          }
                        }
                        memmove(v317, (char *)v314 + v312, v315);
                        v317->__r_.__value_.__s.__data_[v315] = 0;
                        if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
                          goto LABEL_461;
                        goto LABEL_436;
                      }
                      v316 = 2;
                      if (v301->__r_.__value_.__s.__data_[v302] == 48)
                      {
LABEL_419:
                        if ((v301->__r_.__value_.__s.__data_[v316] | 0x20) == 0x78)
                        {
                          v307 = 2;
                          if (v301->__r_.__value_.__s.__data_[0] == 45)
                            v307 = 3;
                          if (v307 >= v300)
                            goto LABEL_425;
                          goto LABEL_393;
                        }
                      }
                    }
                    else
                    {
                      v316 = 1;
                      if (v301->__r_.__value_.__s.__data_[v302] == 48)
                        goto LABEL_419;
                    }
                    v307 = v301->__r_.__value_.__s.__data_[0] == 45;
                    if (v302 >= v300)
                      goto LABEL_425;
LABEL_393:
                    v303 = 0;
                    do
                    {
                      v304 = v301->__r_.__value_.__s.__data_[v307];
                      if ((v304 - 48) >= 0xA)
                      {
                        if ((v304 - 97) >= 6)
                        {
                          if ((v304 - 65) > 5)
                            goto LABEL_426;
                          v305 = -55;
                        }
                        else
                        {
                          v305 = -87;
                        }
                      }
                      else
                      {
                        v305 = -48;
                      }
                      v306 = v304 + 16 * v303 + v305;
                      ++v307;
                      v308 = v306 < v303;
                      if (v307 >= v300)
                        break;
                      v303 = v306;
                    }
                    while (!v308);
                    if (v301->__r_.__value_.__s.__data_[0] == 45)
                      v309 = 0x80000000;
                    else
                      v309 = 0x7FFFFFFF;
                    if ((_DWORD)v302)
                      v310 = -v306;
                    else
                      v310 = v306;
                    if (v308)
                      v311 = v309;
                    else
                      v311 = v310;
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_430;
                    goto LABEL_412;
                  }
                }
                break;
              }
              memmove(p_dst, v294, v295);
              goto LABEL_386;
            }
            goto LABEL_326;
          }
          *(_DWORD *)(v568 + 4 * v182) = *((_DWORD *)i + 14);
          v289 = (_QWORD *)(a13 + 8);
          if (v195 != 1)
            goto LABEL_366;
LABEL_473:
          v337 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          v338 = &__src;
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v337 = __src.__r_.__value_.__l.__size_;
            v338 = (std::string *)__src.__r_.__value_.__r.__words[0];
          }
          v146 = v565;
          if (!v337)
          {
            LODWORD(v339) = 0;
            goto LABEL_509;
          }
          v339 = v338->__r_.__value_.__s.__data_[0] == 45;
          if (v338->__r_.__value_.__s.__data_[0] != 45)
          {
            v350 = 1;
            if (v338->__r_.__value_.__s.__data_[v339] == 48)
            {
LABEL_503:
              if ((v338->__r_.__value_.__s.__data_[v350] | 0x20) == 0x78)
              {
                v344 = 2;
                if (v338->__r_.__value_.__s.__data_[0] == 45)
                  v344 = 3;
                if (v344 >= v337)
                  goto LABEL_509;
                goto LABEL_480;
              }
            }
LABEL_508:
            v344 = v338->__r_.__value_.__s.__data_[0] == 45;
            if (v339 >= v337)
              goto LABEL_509;
LABEL_480:
            v340 = 0;
            do
            {
              v341 = v338->__r_.__value_.__s.__data_[v344];
              if ((v341 - 48) >= 0xA)
              {
                if ((v341 - 97) >= 6)
                {
                  if ((v341 - 65) > 5)
                    goto LABEL_510;
                  v342 = -55;
                }
                else
                {
                  v342 = -87;
                }
              }
              else
              {
                v342 = -48;
              }
              v343 = v341 + 16 * v340 + v342;
              ++v344;
              v345 = v343 < v340;
              if (v344 >= v337)
                break;
              v340 = v343;
            }
            while (!v345);
            if (v338->__r_.__value_.__s.__data_[0] == 45)
              v346 = 0x80000000;
            else
              v346 = 0x7FFFFFFF;
            if ((_DWORD)v339)
              v347 = -v343;
            else
              v347 = v343;
            if (v345)
              v348 = v346;
            else
              v348 = v347;
            v349 = *v571;
            if (*v571)
              goto LABEL_514;
LABEL_523:
            v355 = *v289;
            v356 = v578;
            if (!*v289)
              v356 = 1;
            if ((v356 & 1) != 0)
              goto LABEL_614;
            goto LABEL_526;
          }
          if (v337 >= 2)
          {
            v350 = 2;
            if (v338->__r_.__value_.__s.__data_[v339] == 48)
              goto LABEL_503;
            goto LABEL_508;
          }
          LODWORD(v339) = 1;
LABEL_509:
          v340 = 0;
LABEL_510:
          if ((_DWORD)v339)
            v348 = -v340;
          else
            v348 = v340;
          v349 = *v571;
          if (!*v571)
            goto LABEL_523;
LABEL_514:
          v351 = a12 + 8;
          do
          {
            v352 = *(_DWORD *)(v349 + 28);
            v353 = v352 < v348;
            if (v352 >= v348)
              v354 = (uint64_t *)v349;
            else
              v354 = (uint64_t *)(v349 + 8);
            if (!v353)
              v351 = v349;
            v349 = *v354;
          }
          while (*v354);
          if ((uint64_t *)v351 == v571 || v348 < *(_DWORD *)(v351 + 28))
            goto LABEL_523;
          v372 = (uint64_t *)*((_QWORD *)&v633 + 1);
          v373 = (uint64_t **)&v633 + 1;
          v374 = (uint64_t **)&v633 + 1;
          if (*((_QWORD *)&v633 + 1))
          {
            v375 = (__int128 *)((char *)&v633 + 8);
            v376 = (_QWORD *)*((_QWORD *)&v633 + 1);
            do
            {
              v377 = v376;
              v378 = v375;
              v379 = v376[4];
              if (v379 >= v183)
                v375 = v376;
              else
                ++v376;
              v376 = (_QWORD *)*v376;
            }
            while (v376);
            if (v375 != (__int128 *)((char *)&v633 + 8))
            {
              if (v379 < v183)
                v377 = v378;
              if (v183 >= v377[4])
                goto LABEL_523;
            }
            while (1)
            {
              while (1)
              {
                v373 = (uint64_t **)v372;
                v380 = v372[4];
                if (v183 >= v380)
                  break;
                v372 = *v373;
                v374 = v373;
                if (!*v373)
                  goto LABEL_571;
              }
              if (v380 >= v183)
                break;
              v372 = v373[1];
              if (!v372)
              {
                v374 = v373 + 1;
                goto LABEL_571;
              }
            }
            v381 = (uint64_t *)v373;
          }
          else
          {
LABEL_571:
            v381 = (uint64_t *)operator new(0x30uLL);
            v381[4] = v183;
            v381[5] = 0;
            *v381 = 0;
            v381[1] = 0;
            v381[2] = (uint64_t)v373;
            *v374 = v381;
            v382 = v381;
            if (*(_QWORD *)v633)
            {
              *(_QWORD *)&v633 = *(_QWORD *)v633;
              v382 = *v374;
            }
            sub_1BE61F5C0(*((uint64_t **)&v633 + 1), v382);
            ++v634;
          }
          v381[5] = v348;
          v355 = *v289;
          v383 = v578;
          if (!*v289)
            v383 = 1;
          if ((v383 & 1) != 0)
            goto LABEL_614;
LABEL_526:
          v357 = v289;
          do
          {
            v358 = *(_DWORD *)(v355 + 28);
            v359 = v358 < v348;
            if (v358 >= v348)
              v360 = (uint64_t *)v355;
            else
              v360 = (uint64_t *)(v355 + 8);
            if (!v359)
              v357 = (_QWORD *)v355;
            v355 = *v360;
          }
          while (*v360);
          if (v357 != v289 && v348 >= *((_DWORD *)v357 + 7))
          {
            v361 = v631;
            v362 = &v631;
            v363 = &v631;
            if (v631)
            {
              v364 = &v631;
              v365 = v631;
              do
              {
                v366 = v365;
                v367 = v364;
                v368 = v365[4];
                if (v368 >= v183)
                  v364 = (uint64_t **)v365;
                else
                  ++v365;
                v365 = (uint64_t *)*v365;
              }
              while (v365);
              if (v364 != &v631)
              {
                if (v368 < v183)
                  v366 = (uint64_t *)v367;
                if (v183 >= v366[4])
                  goto LABEL_614;
              }
              while (1)
              {
                while (1)
                {
                  v362 = (uint64_t **)v361;
                  v369 = v361[4];
                  if (v183 >= v369)
                    break;
                  v361 = *v362;
                  v363 = v362;
                  if (!*v362)
                    goto LABEL_551;
                }
                if (v369 >= v183)
                  break;
                v361 = v362[1];
                if (!v361)
                {
                  v363 = v362 + 1;
                  goto LABEL_551;
                }
              }
              v370 = (uint64_t *)v362;
            }
            else
            {
LABEL_551:
              v370 = (uint64_t *)operator new(0x30uLL);
              v370[4] = v183;
              v370[5] = 0;
              *v370 = 0;
              v370[1] = 0;
              v370[2] = (uint64_t)v362;
              *v363 = v370;
              v371 = v370;
              if (*v630)
              {
                v630 = (uint64_t **)*v630;
                v371 = *v363;
              }
              sub_1BE61F5C0(v631, v371);
              ++v632;
            }
            v370[5] = v348;
          }
LABEL_614:
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__src.__r_.__value_.__l.__data_);
          ++v182;
          v181 = *v569;
          v158 = v580;
        }
        while (v182 < *((_QWORD *)*v569 + 5 * v580));
      }
      LODWORD(__src.__r_.__value_.__l.__data_) = v564;
      if ((LMLanguageModelConditionalProbabilityVector() & 1) == 0)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v400 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v400, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v625.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1BE607000, v400, OS_LOG_TYPE_ERROR, "Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 2Gram!\n", (uint8_t *)&v625, 2u);
        }

      }
      v401 = *v569;
      if (*((_QWORD *)*v569 + 5 * v158))
      {
        v402 = 0;
        do
        {
          v407 = v401[5 * v158 + 2] + v402;
          v408 = *(_QWORD *)(a9 + 80);
          v409 = (_QWORD *)*((_QWORD *)&v633 + 1);
          v410 = (_QWORD *)&v633 + 1;
          v411 = (_QWORD *)&v633 + 1;
          if (*((_QWORD *)&v633 + 1))
          {
            v412 = (__int128 *)((char *)&v633 + 8);
            v413 = (_QWORD *)*((_QWORD *)&v633 + 1);
            do
            {
              v414 = v413;
              v415 = v412;
              v416 = v413[4];
              v417 = v413 + 1;
              if (v416 >= v407)
              {
                v417 = v414;
                v412 = v414;
              }
              v413 = (_QWORD *)*v417;
            }
            while (v413);
            v418 = (_QWORD *)*((_QWORD *)&v633 + 1);
            if (v412 != (__int128 *)((char *)&v633 + 8))
            {
              if (v416 < v407)
                v414 = v415;
              v418 = (_QWORD *)*((_QWORD *)&v633 + 1);
              if (v407 >= v414[4])
              {
                v419 = 0.3;
                if (!LOBYTE(v401[5 * *(_QWORD *)(v408 + 72 * v407 + 8) + 4]))
                  v419 = 3.0;
                *(double *)(v573 + 8 * v402) = v419;
                v418 = v409;
              }
            }
            while (1)
            {
              while (1)
              {
                v410 = v418;
                v420 = v418[4];
                if (v407 >= v420)
                  break;
                v418 = (_QWORD *)*v418;
                v411 = v410;
                if (!*v410)
                  goto LABEL_655;
              }
              if (v420 >= v407)
                break;
              v418 = (_QWORD *)v418[1];
              if (!v418)
              {
                v411 = v410 + 1;
                goto LABEL_655;
              }
            }
            if (v418[5] == 44)
            {
LABEL_773:
              *(_QWORD *)(v573 + 8 * v402) = 0x3FD3333333333333;
              v483 = 0.3;
              if (!*(_QWORD *)(v408 + 72 * v407))
                goto LABEL_774;
              goto LABEL_799;
            }
            v433 = (_QWORD *)&v633 + 1;
            v434 = (_QWORD *)&v633 + 1;
            if (!v409)
            {
LABEL_688:
              v438 = operator new(0x30uLL);
              v438[4] = v407;
              v438[5] = 0;
              *v438 = 0;
              v438[1] = 0;
              v438[2] = v433;
              *v434 = v438;
              if (*(_QWORD *)v633)
              {
                *(_QWORD *)&v633 = *(_QWORD *)v633;
                v438 = (_QWORD *)*v434;
              }
              v439 = (_BYTE *)*((_QWORD *)&v633 + 1);
              *((_BYTE *)v438 + 24) = v438 == *((_QWORD **)&v633 + 1);
              if (v438 != (_QWORD *)v439)
              {
                do
                {
                  v440 = v438[2];
                  if (*(_BYTE *)(v440 + 24))
                    break;
                  v441 = *(_BYTE **)(v440 + 16);
                  v442 = *(_QWORD *)v441;
                  if (*(_QWORD *)v441 == v440)
                  {
                    v445 = *((_QWORD *)v441 + 1);
                    if (!v445 || (v446 = *(unsigned __int8 *)(v445 + 24), v443 = (_BYTE *)(v445 + 24), v446))
                    {
                      if (*(_QWORD **)v440 == v438)
                      {
                        *(_BYTE *)(v440 + 24) = 1;
                        v441[24] = 0;
                        v449 = *(_QWORD *)(v440 + 8);
                        *(_QWORD *)v441 = v449;
                        if (v449)
                          goto LABEL_704;
                      }
                      else
                      {
                        v447 = *(uint64_t **)(v440 + 8);
                        v448 = *v447;
                        *(_QWORD *)(v440 + 8) = *v447;
                        if (v448)
                        {
                          *(_QWORD *)(v448 + 16) = v440;
                          v441 = *(_BYTE **)(v440 + 16);
                        }
                        v447[2] = (uint64_t)v441;
                        *(_QWORD *)(*(_QWORD *)(v440 + 16) + 8 * (**(_QWORD **)(v440 + 16) != v440)) = v447;
                        *v447 = v440;
                        *(_QWORD *)(v440 + 16) = v447;
                        v441 = (_BYTE *)v447[2];
                        v440 = *(_QWORD *)v441;
                        *((_BYTE *)v447 + 24) = 1;
                        v441[24] = 0;
                        v449 = *(_QWORD *)(v440 + 8);
                        *(_QWORD *)v441 = v449;
                        if (v449)
LABEL_704:
                          *(_QWORD *)(v449 + 16) = v441;
                      }
                      *(_QWORD *)(v440 + 16) = *((_QWORD *)v441 + 2);
                      *(_QWORD *)(*((_QWORD *)v441 + 2) + 8 * (**((_QWORD **)v441 + 2) != (_QWORD)v441)) = v440;
                      *(_QWORD *)(v440 + 8) = v441;
LABEL_713:
                      *((_QWORD *)v441 + 2) = v440;
                      break;
                    }
                  }
                  else if (!v442 || (v444 = *(unsigned __int8 *)(v442 + 24), v443 = (_BYTE *)(v442 + 24), v444))
                  {
                    if (*(_QWORD **)v440 == v438)
                    {
                      v487 = v438[1];
                      *(_QWORD *)v440 = v487;
                      if (v487)
                      {
                        *(_QWORD *)(v487 + 16) = v440;
                        v441 = *(_BYTE **)(v440 + 16);
                      }
                      v438[2] = v441;
                      *(_QWORD *)(*(_QWORD *)(v440 + 16) + 8 * (**(_QWORD **)(v440 + 16) != v440)) = v438;
                      v438[1] = v440;
                      *(_QWORD *)(v440 + 16) = v438;
                      v441 = (_BYTE *)v438[2];
                      *((_BYTE *)v438 + 24) = 1;
                      v441[24] = 0;
                      v440 = *((_QWORD *)v441 + 1);
                      v452 = *(_QWORD **)v440;
                      *((_QWORD *)v441 + 1) = *(_QWORD *)v440;
                      if (v452)
LABEL_711:
                        v452[2] = v441;
                    }
                    else
                    {
                      *(_BYTE *)(v440 + 24) = 1;
                      v441[24] = 0;
                      v440 = *((_QWORD *)v441 + 1);
                      v452 = *(_QWORD **)v440;
                      *((_QWORD *)v441 + 1) = *(_QWORD *)v440;
                      if (v452)
                        goto LABEL_711;
                    }
                    *(_QWORD *)(v440 + 16) = *((_QWORD *)v441 + 2);
                    *(_QWORD *)(*((_QWORD *)v441 + 2) + 8 * (**((_QWORD **)v441 + 2) != (_QWORD)v441)) = v440;
                    *(_QWORD *)v440 = v441;
                    goto LABEL_713;
                  }
                  *(_BYTE *)(v440 + 24) = 1;
                  v438 = v441;
                  v441[24] = v441 == v439;
                  *v443 = 1;
                }
                while (v441 != v439);
              }
              v409 = (_QWORD *)*((_QWORD *)&v633 + 1);
              ++v634;
              v450 = (_QWORD *)&v633 + 1;
              v451 = (_QWORD *)&v633 + 1;
              if (!*((_QWORD *)&v633 + 1))
                goto LABEL_721;
              goto LABEL_715;
            }
          }
          else
          {
LABEL_655:
            v421 = operator new(0x30uLL);
            v421[4] = v407;
            v421[5] = 0;
            *v421 = 0;
            v421[1] = 0;
            v421[2] = v410;
            *v411 = v421;
            if (*(_QWORD *)v633)
            {
              *(_QWORD *)&v633 = *(_QWORD *)v633;
              v421 = (_QWORD *)*v411;
            }
            v422 = (_BYTE *)*((_QWORD *)&v633 + 1);
            *((_BYTE *)v421 + 24) = v421 == *((_QWORD **)&v633 + 1);
            if (v421 != (_QWORD *)v422)
            {
              do
              {
                v423 = v421[2];
                if (*(_BYTE *)(v423 + 24))
                  break;
                v424 = *(_BYTE **)(v423 + 16);
                v425 = *(_QWORD *)v424;
                if (*(_QWORD *)v424 == v423)
                {
                  v428 = *((_QWORD *)v424 + 1);
                  if (!v428 || (v429 = *(unsigned __int8 *)(v428 + 24), v426 = (_BYTE *)(v428 + 24), v429))
                  {
                    if (*(_QWORD **)v423 == v421)
                    {
                      *(_BYTE *)(v423 + 24) = 1;
                      v424[24] = 0;
                      v432 = *(_QWORD *)(v423 + 8);
                      *(_QWORD *)v424 = v432;
                      if (v432)
                        goto LABEL_671;
                    }
                    else
                    {
                      v430 = *(uint64_t **)(v423 + 8);
                      v431 = *v430;
                      *(_QWORD *)(v423 + 8) = *v430;
                      if (v431)
                      {
                        *(_QWORD *)(v431 + 16) = v423;
                        v424 = *(_BYTE **)(v423 + 16);
                      }
                      v430[2] = (uint64_t)v424;
                      *(_QWORD *)(*(_QWORD *)(v423 + 16) + 8 * (**(_QWORD **)(v423 + 16) != v423)) = v430;
                      *v430 = v423;
                      *(_QWORD *)(v423 + 16) = v430;
                      v424 = (_BYTE *)v430[2];
                      v423 = *(_QWORD *)v424;
                      *((_BYTE *)v430 + 24) = 1;
                      v424[24] = 0;
                      v432 = *(_QWORD *)(v423 + 8);
                      *(_QWORD *)v424 = v432;
                      if (v432)
LABEL_671:
                        *(_QWORD *)(v432 + 16) = v424;
                    }
                    *(_QWORD *)(v423 + 16) = *((_QWORD *)v424 + 2);
                    *(_QWORD *)(*((_QWORD *)v424 + 2) + 8 * (**((_QWORD **)v424 + 2) != (_QWORD)v424)) = v423;
                    *(_QWORD *)(v423 + 8) = v424;
LABEL_680:
                    *((_QWORD *)v424 + 2) = v423;
                    break;
                  }
                }
                else if (!v425 || (v427 = *(unsigned __int8 *)(v425 + 24), v426 = (_BYTE *)(v425 + 24), v427))
                {
                  if (*(_QWORD **)v423 == v421)
                  {
                    v486 = v421[1];
                    *(_QWORD *)v423 = v486;
                    if (v486)
                    {
                      *(_QWORD *)(v486 + 16) = v423;
                      v424 = *(_BYTE **)(v423 + 16);
                    }
                    v421[2] = v424;
                    *(_QWORD *)(*(_QWORD *)(v423 + 16) + 8 * (**(_QWORD **)(v423 + 16) != v423)) = v421;
                    v421[1] = v423;
                    *(_QWORD *)(v423 + 16) = v421;
                    v424 = (_BYTE *)v421[2];
                    *((_BYTE *)v421 + 24) = 1;
                    v424[24] = 0;
                    v423 = *((_QWORD *)v424 + 1);
                    v435 = *(_QWORD **)v423;
                    *((_QWORD *)v424 + 1) = *(_QWORD *)v423;
                    if (v435)
LABEL_678:
                      v435[2] = v424;
                  }
                  else
                  {
                    *(_BYTE *)(v423 + 24) = 1;
                    v424[24] = 0;
                    v423 = *((_QWORD *)v424 + 1);
                    v435 = *(_QWORD **)v423;
                    *((_QWORD *)v424 + 1) = *(_QWORD *)v423;
                    if (v435)
                      goto LABEL_678;
                  }
                  *(_QWORD *)(v423 + 16) = *((_QWORD *)v424 + 2);
                  *(_QWORD *)(*((_QWORD *)v424 + 2) + 8 * (**((_QWORD **)v424 + 2) != (_QWORD)v424)) = v423;
                  *(_QWORD *)v423 = v424;
                  goto LABEL_680;
                }
                *(_BYTE *)(v423 + 24) = 1;
                v421 = v424;
                v424[24] = v424 == v422;
                *v426 = 1;
              }
              while (v424 != v422);
            }
            v409 = (_QWORD *)*((_QWORD *)&v633 + 1);
            ++v634;
            v433 = (_QWORD *)&v633 + 1;
            v434 = (_QWORD *)&v633 + 1;
            if (!*((_QWORD *)&v633 + 1))
              goto LABEL_688;
          }
          v436 = v409;
          while (1)
          {
            while (1)
            {
              v433 = v436;
              v437 = v436[4];
              if (v407 >= v437)
                break;
              v436 = (_QWORD *)*v433;
              v434 = v433;
              if (!*v433)
                goto LABEL_688;
            }
            if (v437 >= v407)
              break;
            v436 = (_QWORD *)v433[1];
            if (!v436)
            {
              v434 = v433 + 1;
              goto LABEL_688;
            }
          }
          if (v433[5] == 46)
            goto LABEL_773;
          v450 = (_QWORD *)&v633 + 1;
          v451 = (_QWORD *)&v633 + 1;
          if (!v409)
          {
LABEL_721:
            v455 = operator new(0x30uLL);
            v455[4] = v407;
            v455[5] = 0;
            *v455 = 0;
            v455[1] = 0;
            v455[2] = v450;
            *v451 = v455;
            if (*(_QWORD *)v633)
            {
              *(_QWORD *)&v633 = *(_QWORD *)v633;
              v455 = (_QWORD *)*v451;
            }
            v456 = (_BYTE *)*((_QWORD *)&v633 + 1);
            *((_BYTE *)v455 + 24) = v455 == *((_QWORD **)&v633 + 1);
            if (v455 != (_QWORD *)v456)
            {
              do
              {
                v457 = v455[2];
                if (*(_BYTE *)(v457 + 24))
                  break;
                v458 = *(_BYTE **)(v457 + 16);
                v459 = *(_QWORD *)v458;
                if (*(_QWORD *)v458 == v457)
                {
                  v462 = *((_QWORD *)v458 + 1);
                  if (!v462 || (v463 = *(unsigned __int8 *)(v462 + 24), v460 = (_BYTE *)(v462 + 24), v463))
                  {
                    if (*(_QWORD **)v457 == v455)
                    {
                      *(_BYTE *)(v457 + 24) = 1;
                      v458[24] = 0;
                      v466 = *(_QWORD *)(v457 + 8);
                      *(_QWORD *)v458 = v466;
                      if (v466)
                        goto LABEL_737;
                    }
                    else
                    {
                      v464 = *(uint64_t **)(v457 + 8);
                      v465 = *v464;
                      *(_QWORD *)(v457 + 8) = *v464;
                      if (v465)
                      {
                        *(_QWORD *)(v465 + 16) = v457;
                        v458 = *(_BYTE **)(v457 + 16);
                      }
                      v464[2] = (uint64_t)v458;
                      *(_QWORD *)(*(_QWORD *)(v457 + 16) + 8 * (**(_QWORD **)(v457 + 16) != v457)) = v464;
                      *v464 = v457;
                      *(_QWORD *)(v457 + 16) = v464;
                      v458 = (_BYTE *)v464[2];
                      v457 = *(_QWORD *)v458;
                      *((_BYTE *)v464 + 24) = 1;
                      v458[24] = 0;
                      v466 = *(_QWORD *)(v457 + 8);
                      *(_QWORD *)v458 = v466;
                      if (v466)
LABEL_737:
                        *(_QWORD *)(v466 + 16) = v458;
                    }
                    *(_QWORD *)(v457 + 16) = *((_QWORD *)v458 + 2);
                    *(_QWORD *)(*((_QWORD *)v458 + 2) + 8 * (**((_QWORD **)v458 + 2) != (_QWORD)v458)) = v457;
                    *(_QWORD *)(v457 + 8) = v458;
LABEL_745:
                    *((_QWORD *)v458 + 2) = v457;
                    break;
                  }
                }
                else if (!v459 || (v461 = *(unsigned __int8 *)(v459 + 24), v460 = (_BYTE *)(v459 + 24), v461))
                {
                  if (*(_QWORD **)v457 == v455)
                  {
                    v488 = v455[1];
                    *(_QWORD *)v457 = v488;
                    if (v488)
                    {
                      *(_QWORD *)(v488 + 16) = v457;
                      v458 = *(_BYTE **)(v457 + 16);
                    }
                    v455[2] = v458;
                    *(_QWORD *)(*(_QWORD *)(v457 + 16) + 8 * (**(_QWORD **)(v457 + 16) != v457)) = v455;
                    v455[1] = v457;
                    *(_QWORD *)(v457 + 16) = v455;
                    v458 = (_BYTE *)v455[2];
                    *((_BYTE *)v455 + 24) = 1;
                    v458[24] = 0;
                    v457 = *((_QWORD *)v458 + 1);
                    v467 = *(_QWORD **)v457;
                    *((_QWORD *)v458 + 1) = *(_QWORD *)v457;
                    if (v467)
LABEL_743:
                      v467[2] = v458;
                  }
                  else
                  {
                    *(_BYTE *)(v457 + 24) = 1;
                    v458[24] = 0;
                    v457 = *((_QWORD *)v458 + 1);
                    v467 = *(_QWORD **)v457;
                    *((_QWORD *)v458 + 1) = *(_QWORD *)v457;
                    if (v467)
                      goto LABEL_743;
                  }
                  *(_QWORD *)(v457 + 16) = *((_QWORD *)v458 + 2);
                  *(_QWORD *)(*((_QWORD *)v458 + 2) + 8 * (**((_QWORD **)v458 + 2) != (_QWORD)v458)) = v457;
                  *(_QWORD *)v457 = v458;
                  goto LABEL_745;
                }
                *(_BYTE *)(v457 + 24) = 1;
                v455 = v458;
                v458[24] = v458 == v456;
                *v460 = 1;
              }
              while (v458 != v456);
            }
            v409 = (_QWORD *)*((_QWORD *)&v633 + 1);
            ++v634;
            goto LABEL_747;
          }
LABEL_715:
          v453 = v409;
          while (1)
          {
            while (1)
            {
              v450 = v453;
              v454 = v453[4];
              if (v407 >= v454)
                break;
              v453 = (_QWORD *)*v450;
              v451 = v450;
              if (!*v450)
                goto LABEL_721;
            }
            if (v454 >= v407)
              break;
            v453 = (_QWORD *)v450[1];
            if (!v453)
            {
              v451 = v450 + 1;
              goto LABEL_721;
            }
          }
          if (v450[5] == 58)
            goto LABEL_773;
LABEL_747:
          v468 = (_QWORD *)&v633 + 1;
LABEL_749:
          v469 = v468;
          if (v409)
          {
            while (1)
            {
              v468 = v409;
              v470 = v409[4];
              if (v407 < v470)
              {
                v409 = (_QWORD *)*v468;
                goto LABEL_749;
              }
              if (v470 >= v407)
                break;
              v409 = (_QWORD *)v468[1];
              if (!v409)
              {
                v469 = v468 + 1;
                goto LABEL_754;
              }
            }
            if (v468[5] == 12289)
              goto LABEL_773;
          }
          else
          {
LABEL_754:
            v471 = operator new(0x30uLL);
            v471[4] = v407;
            v471[5] = 0;
            *v471 = 0;
            v471[1] = 0;
            v471[2] = v468;
            *v469 = v471;
            if (*(_QWORD *)v633)
            {
              *(_QWORD *)&v633 = *(_QWORD *)v633;
              v471 = (_QWORD *)*v469;
            }
            v472 = (_BYTE *)*((_QWORD *)&v633 + 1);
            *((_BYTE *)v471 + 24) = v471 == *((_QWORD **)&v633 + 1);
            if (v471 != (_QWORD *)v472)
            {
              do
              {
                v473 = v471[2];
                if (*(_BYTE *)(v473 + 24))
                  break;
                v474 = *(_BYTE **)(v473 + 16);
                v475 = *(_QWORD *)v474;
                if (*(_QWORD *)v474 == v473)
                {
                  v478 = *((_QWORD *)v474 + 1);
                  if (!v478 || (v479 = *(unsigned __int8 *)(v478 + 24), v476 = (_BYTE *)(v478 + 24), v479))
                  {
                    if (*(_QWORD **)v473 == v471)
                    {
                      *(_BYTE *)(v473 + 24) = 1;
                      v474[24] = 0;
                      v482 = *(_QWORD *)(v473 + 8);
                      *(_QWORD *)v474 = v482;
                      if (v482)
                        goto LABEL_770;
                    }
                    else
                    {
                      v480 = *(uint64_t **)(v473 + 8);
                      v481 = *v480;
                      *(_QWORD *)(v473 + 8) = *v480;
                      if (v481)
                      {
                        *(_QWORD *)(v481 + 16) = v473;
                        v474 = *(_BYTE **)(v473 + 16);
                      }
                      v480[2] = (uint64_t)v474;
                      *(_QWORD *)(*(_QWORD *)(v473 + 16) + 8 * (**(_QWORD **)(v473 + 16) != v473)) = v480;
                      *v480 = v473;
                      *(_QWORD *)(v473 + 16) = v480;
                      v474 = (_BYTE *)v480[2];
                      v473 = *(_QWORD *)v474;
                      *((_BYTE *)v480 + 24) = 1;
                      v474[24] = 0;
                      v482 = *(_QWORD *)(v473 + 8);
                      *(_QWORD *)v474 = v482;
                      if (v482)
LABEL_770:
                        *(_QWORD *)(v482 + 16) = v474;
                    }
                    *(_QWORD *)(v473 + 16) = *((_QWORD *)v474 + 2);
                    *(_QWORD *)(*((_QWORD *)v474 + 2) + 8 * (**((_QWORD **)v474 + 2) != (_QWORD)v474)) = v473;
                    *(_QWORD *)(v473 + 8) = v474;
LABEL_796:
                    *((_QWORD *)v474 + 2) = v473;
                    break;
                  }
                }
                else if (!v475 || (v477 = *(unsigned __int8 *)(v475 + 24), v476 = (_BYTE *)(v475 + 24), v477))
                {
                  if (*(_QWORD **)v473 == v471)
                  {
                    v489 = v471[1];
                    *(_QWORD *)v473 = v489;
                    if (v489)
                    {
                      *(_QWORD *)(v489 + 16) = v473;
                      v474 = *(_BYTE **)(v473 + 16);
                    }
                    v471[2] = v474;
                    *(_QWORD *)(*(_QWORD *)(v473 + 16) + 8 * (**(_QWORD **)(v473 + 16) != v473)) = v471;
                    v471[1] = v473;
                    *(_QWORD *)(v473 + 16) = v471;
                    v474 = (_BYTE *)v471[2];
                  }
                  else
                  {
                    v471 = (_QWORD *)v471[2];
                  }
                  *((_BYTE *)v471 + 24) = 1;
                  v474[24] = 0;
                  v473 = *((_QWORD *)v474 + 1);
                  v490 = *(_QWORD **)v473;
                  *((_QWORD *)v474 + 1) = *(_QWORD *)v473;
                  if (v490)
                    v490[2] = v474;
                  *(_QWORD *)(v473 + 16) = *((_QWORD *)v474 + 2);
                  *(_QWORD *)(*((_QWORD *)v474 + 2) + 8 * (**((_QWORD **)v474 + 2) != (_QWORD)v474)) = v473;
                  *(_QWORD *)v473 = v474;
                  goto LABEL_796;
                }
                *(_BYTE *)(v473 + 24) = 1;
                v471 = v474;
                v474[24] = v474 == v472;
                *v476 = 1;
              }
              while (v474 != v472);
            }
            ++v634;
          }
          v483 = *(double *)(v573 + 8 * v402);
          if (!*(_QWORD *)(v408 + 72 * v407))
          {
LABEL_774:
            v484 = *((unsigned __int8 *)*v569 + 40 * *(_QWORD *)(v408 + 72 * v407 + 8) + 32) != 0;
            v485 = v631;
            if (v631)
              goto LABEL_800;
            goto LABEL_632;
          }
LABEL_799:
          v484 = 0;
          v485 = v631;
          if (v631)
          {
LABEL_800:
            v403 = &v631;
            do
            {
              v491 = v485;
              v492 = v403;
              v493 = v485[4];
              if (v493 >= v407)
                v403 = (uint64_t **)v485;
              else
                ++v485;
              v485 = (uint64_t *)*v485;
            }
            while (v485);
            if (v403 != &v631)
            {
              if (v493 < v407)
                v491 = (uint64_t *)v492;
              if (v407 >= v491[4])
                goto LABEL_633;
            }
          }
LABEL_632:
          v403 = &v631;
LABEL_633:
          v404 = -v483;
          v405 = 50.0;
          if (v403 == &v631)
            v405 = 0.0;
          v406 = 0.3;
          if (v484)
            v406 = 0.0;
          *(double *)(v408 + 72 * v407 + 32) = fmax(v405+ *(double *)(v408 + 72 * v407 + 32)/ (double)*(unint64_t *)(v588 + 8 * v402++)+ v406 * v404, 0.000001);
          v401 = *v569;
          v158 = v580;
        }
        while (v402 < *((_QWORD *)*v569 + 5 * v580));
      }
      if (SHIBYTE(v604) < 0)
      {
        operator delete((void *)__p);
        v155 = a9;
        if (SBYTE7(v606) < 0)
          goto LABEL_820;
      }
      else
      {
        v155 = a9;
        if (SBYTE7(v606) < 0)
LABEL_820:
          operator delete((void *)v605);
      }
      v157 = *(_QWORD *)(v155 + 32);
      v156 = *(_QWORD *)(v155 + 40);
LABEL_222:
      ++v158;
    }
    while (v158 < 0xCCCCCCCCCCCCCCCDLL * ((v156 - v157) >> 3));
  }
  MEMORY[0x1C3B812C8](v568, 0x1000C8052888210);
  MEMORY[0x1C3B812C8](v573, 0x1000C8000313F17);
  MEMORY[0x1C3B812C8](v588, 0x1000C8000313F17);
  sub_1BE62033C((uint64_t)&v630, v631);
  sub_1BE62033C((uint64_t)&v633, *((_QWORD **)&v633 + 1));
  v495 = *(_QWORD *)(v155 + 80);
  v496 = *(_QWORD *)(v155 + 88) - v495;
  if (v496)
  {
    v497 = v496 / 72;
    if (v497 <= 1)
      v497 = 1;
    v498 = (double *)(v495 + 32);
    do
    {
      if (*v498 < 0.000000999999997)
        *v498 = 0.000000999999997;
      v498 += 9;
      --v497;
    }
    while (v497);
  }
  Network::composeTrimAndSimplify(v494, (const Network *)a2, a8, (Network *)v592, 0, 0);
  if (v592[11] != v592[10])
  {
    Network::makeFinalNodeTheLastNode((uint64_t *)a9);
    Network::makeFinalNodeTheLastNode(v592);
    v499 = *(_QWORD *)*v569;
    if (v499)
    {
      v500 = *((_QWORD *)*v569 + 2);
      v501 = *(_QWORD *)(a9 + 80);
      v502 = 0;
      v503 = v499 - 1;
      if (v499 == 1)
        goto LABEL_831;
      v537 = !is_mul_ok(v503, 0x48uLL);
      if (72 * v500 + v501 + 32 + 72 * v503 < 72 * v500 + v501 + 32)
        goto LABEL_831;
      if (v537)
        goto LABEL_831;
      v502 = v499 & 0xFFFFFFFFFFFFFFFELL;
      v538 = (double *)(72 * v500 + v501 + 104);
      v539 = v499 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v540 = fmax(*v538 + 0.5, 0.000001);
        *(v538 - 9) = fmax(*(v538 - 9) + 0.5, 0.000001);
        *v538 = v540;
        v538 += 18;
        v539 -= 2;
      }
      while (v539);
      if (v499 != v502)
      {
LABEL_831:
        v504 = v499 - v502;
        v505 = (double *)(v501 + 72 * (v502 + v500) + 32);
        do
        {
          *v505 = fmax(*v505 + 0.5, 0.000001);
          v505 += 9;
          --v504;
        }
        while (v504);
      }
    }
    v611 = 0;
    v610 = 0;
    v605 = 0u;
    v606 = 0u;
    v607 = 0u;
    v608 = 0;
    v609 = &v610;
    v612 = 0u;
    v613 = 0u;
    v614 = 0u;
    sub_1BE66B04C(v615);
    v616 = 0;
    v618[0] = 0;
    v617 = v618;
    v621 = 0;
    v620 = 0;
    v618[1] = 0;
    v619 = &v620;
    v623 = 0;
    v622 = 0;
    Network::unionNetwork((Network *)&v605, (const Network *)a9, (const Network *)v592);
    sub_1BE652970(a9, (uint64_t)&v605);
    Network::prepareNetwork((Network *)a9);
    sub_1BE66A0DC((uint64_t)&v605);
  }
  v506 = *(_QWORD *)(a9 + 80);
  v507 = *(_QWORD *)(a9 + 88);
  v508 = 0x8E38E38E38E38E39 * ((v507 - v506) >> 3);
  v509 = *a10;
  v510 = a10[1];
  v511 = v510 - *a10;
  v512 = v511 >> 2;
  v513 = v508 - (v511 >> 2);
  if (v508 <= v511 >> 2)
  {
    if (v508 < v511 >> 2)
      a10[1] = &v509[0x38E38E38E38E38E4 * ((v507 - v506) >> 3)];
    v522 = a9;
    if (v507 != v506)
      goto LABEL_886;
  }
  else
  {
    v514 = a10[2];
    if (v513 <= (v514 - v510) >> 2)
    {
      bzero(a10[1], 4 * v513);
      a10[1] = &v510[4 * v513];
    }
    else
    {
      if (v508 >> 62)
        sub_1BE61F930();
      v515 = v514 - v509;
      v516 = v515 >> 1;
      if (v515 >> 1 <= v508)
        v516 = v508;
      if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFFCLL)
        v517 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v517 = v516;
      if (v517 >> 62)
        sub_1BE61F100();
      v518 = (char *)operator new(4 * v517);
      v519 = &v518[4 * v512];
      bzero(v519, 4 * v513);
      v520 = &v519[4 * v513];
      if (v510 != v509)
      {
        v521 = v510 - v509 - 4;
        if (v521 < 0x2C)
          goto LABEL_930;
        if ((unint64_t)(&v510[-v511] - v518) < 0x20)
          goto LABEL_930;
        v541 = (v521 >> 2) + 1;
        v542 = 4 * (v541 & 0x7FFFFFFFFFFFFFF8);
        v543 = &v510[-v542];
        v519 -= v542;
        v544 = &v518[4 * v512 - 16];
        v545 = (__int128 *)(v510 - 16);
        v546 = v541 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v547 = *v545;
          *((_OWORD *)v544 - 1) = *(v545 - 1);
          *(_OWORD *)v544 = v547;
          v544 -= 32;
          v545 -= 2;
          v546 -= 8;
        }
        while (v546);
        v510 = v543;
        if (v541 != (v541 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_930:
          do
          {
            v548 = *((_DWORD *)v510 - 1);
            v510 -= 4;
            *((_DWORD *)v519 - 1) = v548;
            v519 -= 4;
          }
          while (v510 != v509);
        }
      }
      *a10 = v519;
      a10[1] = v520;
      a10[2] = &v518[4 * v517];
      if (v509)
        operator delete(v509);
    }
    v506 = *(_QWORD *)(a9 + 80);
    v522 = a9;
    if (*(_QWORD *)(a9 + 88) != v506)
    {
LABEL_886:
      v549 = 0;
      while (1)
      {
        v550 = *(_QWORD *)(v506 + 72 * v549 + 24);
        if (!*(_BYTE *)(v522 + 184))
          break;
        if (!v550)
        {
          v551 = *(_QWORD *)(a9 + 136);
          if (*(char *)(v551 + 23) < 0)
          {
LABEL_894:
            sub_1BE61F128(&v633, *(void **)v551, *(_QWORD *)(v551 + 8));
            goto LABEL_895;
          }
          goto LABEL_892;
        }
        ul2sh(v550, (uint64_t)&v633);
LABEL_895:
        sub_1BE7DC93C((uint64_t *)&v633, (int **)&v605);
        __p = 0uLL;
        v604 = 0;
        v553 = (const void *)v605;
        v554 = *((_QWORD *)&v605 + 1) - v605;
        if (*((_QWORD *)&v605 + 1) == (_QWORD)v605)
        {
          v556 = 0;
          v555 = 0;
        }
        else
        {
          if (v554 < 0)
            sub_1BE61F930();
          v555 = (char *)operator new(*((_QWORD *)&v605 + 1) - v605);
          v556 = &v555[4 * (v554 >> 2)];
          *(_QWORD *)&__p = v555;
          v604 = v556;
          memcpy(v555, v553, v554);
          *((_QWORD *)&__p + 1) = v556;
        }
        LMLexiconGetRootCursor();
        v557 = v555;
        if (v555 == v556)
        {
LABEL_902:
          if (LMLexiconCursorHasEntries())
            TokenID = LMLexiconCursorFirstTokenID();
          else
            TokenID = -1;
        }
        else
        {
          while (1)
          {
            LOWORD(v630) = *(_DWORD *)v557;
            CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
            TokenID = CursorByAdvancingWithCharacters;
            if (!CursorByAdvancingWithCharacters)
              break;
            v557 += 4;
            if (v557 == v556)
              goto LABEL_902;
          }
        }
        LMLexiconResetCursors();
        if (v555)
          operator delete(v555);
        if ((_QWORD)v605)
        {
          *((_QWORD *)&v605 + 1) = v605;
          operator delete((void *)v605);
        }
        *(_DWORD *)&(*a10)[4 * v549] = TokenID;
        if (SHIBYTE(v634) < 0)
          operator delete((void *)v633);
        ++v549;
        v522 = a9;
        v506 = *(_QWORD *)(a9 + 80);
        if (v549 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(a9 + 88) - v506) >> 3))
          goto LABEL_911;
      }
      v551 = *(_QWORD *)(v522 + 136) + 24 * v550;
      if (*(char *)(v551 + 23) < 0)
        goto LABEL_894;
LABEL_892:
      v552 = *(_OWORD *)v551;
      v634 = *(_QWORD *)(v551 + 16);
      v633 = v552;
      goto LABEL_895;
    }
  }
LABEL_911:
  if (v565)
    operator delete(v565);
  sub_1BE61F3E8((uint64_t)&v589, v590);
  sub_1BE66A0DC((uint64_t)v592);
  return sub_1BE66A0DC((uint64_t)v593);
}

void sub_1BE82FD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  sub_1BE62033C(v52, (_QWORD *)STACK[0x520]);
  sub_1BE66A278(v51, (_QWORD *)STACK[0x508]);
  sub_1BE66A1F0(v50);
  v54 = (void *)STACK[0x4A8];
  if (STACK[0x4A8])
  {
    STACK[0x4B0] = (unint64_t)v54;
    operator delete(v54);
    v55 = (void *)STACK[0x490];
    if (!STACK[0x490])
    {
LABEL_3:
      sub_1BE62033C(v49 + 56, (_QWORD *)STACK[0x480]);
      v56 = (void *)STACK[0x460];
      if (!STACK[0x460])
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v55 = (void *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_3;
  }
  STACK[0x498] = (unint64_t)v55;
  operator delete(v55);
  sub_1BE62033C(v49 + 56, (_QWORD *)STACK[0x480]);
  v56 = (void *)STACK[0x460];
  if (!STACK[0x460])
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0)
    {
LABEL_11:
      v57 = a25;
      if (!a25)
        goto LABEL_13;
      goto LABEL_12;
    }
LABEL_9:
    operator delete((void *)STACK[0x440]);
    v57 = a25;
    if (!a25)
    {
LABEL_13:
      sub_1BE61F3E8((uint64_t)&a46, (char *)a47);
      sub_1BE66A0DC((uint64_t)&a49);
      sub_1BE66A0DC((uint64_t)&STACK[0x240]);
      _Unwind_Resume(a1);
    }
LABEL_12:
    operator delete(v57);
    goto LABEL_13;
  }
LABEL_8:
  STACK[0x468] = (unint64_t)v56;
  operator delete(v56);
  if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0)
    goto LABEL_11;
  goto LABEL_9;
}

void sub_1BE8300E0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  if (v1)
  {
    operator delete(v1);
    v0 = *(_QWORD *)(v2 - 240);
  }
  if (v0)
  {
    *(_QWORD *)(v2 - 232) = v0;
    JUMPOUT(0x1BE830188);
  }
  JUMPOUT(0x1BE83018CLL);
}

void sub_1BE830120()
{
  JUMPOUT(0x1BE830130);
}

void sub_1BE830128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (SLOBYTE(STACK[0x577]) < 0)
  {
    operator delete((void *)STACK[0x560]);
    if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x357]) < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete((void *)STACK[0x580]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    operator delete((void *)STACK[0x440]);
LABEL_10:
    sub_1BE62033C(v25 - 216, *(_QWORD **)(v25 - 208));
    sub_1BE62033C(v25 - 192, *(_QWORD **)(v25 - 184));
    if (!a25)
      JUMPOUT(0x1BE8300BCLL);
    JUMPOUT(0x1BE8300B4);
  }
LABEL_8:
  if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_1BE8301AC()
{
  JUMPOUT(0x1BE8301C0);
}

BOOL Network::pathsCoincide(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (_QWORD *)a2[7];
  v4 = (uint64_t)(a2[8] - (_QWORD)v3) >> 3;
  v5 = (_QWORD *)a3[7];
  if ((uint64_t)(a3[8] - (_QWORD)v5) >> 3 < v4)
    v4 = (uint64_t)(a3[8] - (_QWORD)v5) >> 3;
  if (!v4)
    return 1;
  if (*v3 != *v5)
    return 0;
  v6 = (_QWORD *)a2[10];
  v7 = (_QWORD *)a3[10];
  if (*v6 != *v7)
    return 0;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v4 == v8)
      break;
    if (v3[v8] != v5[v8])
      break;
    v10 = v6[v8];
    v11 = v7[v8++];
  }
  while (v10 == v11);
  return v9 >= v4;
}

void Network::bestPath(Network *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  double v23;
  uint64_t v24;
  double *v25;
  double *v26;
  unint64_t v27;
  double v28;
  _QWORD *v29;
  _QWORD *v30;
  double *v31;
  unint64_t v32;
  double v33;
  _QWORD *v34;
  _QWORD *v35;
  double *v36;
  unint64_t v37;
  double *v38;
  unint64_t v39;
  double v40;
  double **v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  double *v57;
  char **v58;
  unint64_t v59;
  _QWORD *v60;
  double **v61;
  double v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  double *v66;
  double v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  double *v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double *v76;
  _QWORD *v77;
  double *v78;
  unint64_t v79;
  double *v80;
  unint64_t v81;
  double v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  _QWORD *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  void **v108;
  _QWORD *v109;
  unint64_t v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _OWORD *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v132;
  _BYTE *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;

  v7 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  v8 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
  if (v7)
  {
    if (v8 >> 59)
      sub_1BE61F930();
    v9 = operator new(0x99999999999999A0 * (v7 >> 3));
    v10 = v9;
    do
    {
      *v10 = 0;
      v10[1] = 0x41CFFFFFFFC00000;
      v10[2] = -1;
      v10[3] = -1;
      v10 += 4;
    }
    while (v10 != &v9[4 * v8]);
  }
  else
  {
    v9 = 0;
  }
  v136 = a4;
  v11 = (_QWORD *)operator new[]();
  v12 = v11;
  v13 = v8 + 2;
  *v11 = 16;
  v11[1] = v8 + 4;
  v14 = v11 + 2;
  if (v8 != -4)
    bzero(v11 + 2, 16 * v13 + 32);
  v15 = *((_QWORD *)this + 4);
  v16 = *((_QWORD *)this + 5);
  v17 = v16 - v15;
  if (v16 == v15)
    goto LABEL_107;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v17 / 40;
  if (v21 <= 1)
    v21 = 1;
  do
  {
    while (1)
    {
      v22 = (double *)&v9[4 * v20];
      *(_QWORD *)v22 = v20;
      v23 = 8.98846567e307;
      if (v20 == a2)
        v23 = 0.0;
      v22[1] = v23;
      v22[2] = NAN;
      if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v24 = 0;
        v25 = (double *)(v12 + 5);
        while (*(v25 - 1) != v23 || *(double **)v25 != v22)
        {
          ++v24;
          v25 += 2;
          if (v18 == v24)
            goto LABEL_23;
        }
        if (v24 != -2)
          break;
      }
LABEL_23:
      if (v18 == v13)
      {
        v26 = (double *)&v14[2 * v19];
        if (*v26 <= v23)
        {
          v18 = v8 + 2;
          break;
        }
        *v26 = v23;
        *((_QWORD *)v26 + 1) = v22;
        v12[2] = 0xC1E0000000000000;
        v12[3] = v22;
        if (*(double *)((char *)v14 + ((8 * v19) & 0xFFFFFFFFFFFFFFF0)) >= v23)
        {
          do
          {
            v27 = v19 >> 1;
            if (v19 != v19 >> 1)
            {
              v29 = &v14[2 * v27];
              v30 = &v14[2 * v19];
              *v30 = *v29;
              v30[1] = v29[1];
            }
            v28 = *(double *)((char *)v14 + ((4 * v19) & 0xFFFFFFFFFFFFFFF0));
            v19 >>= 1;
          }
          while (v28 >= v23);
          v18 = v8 + 2;
        }
        else
        {
          v18 = v8 + 2;
          v27 = v19;
        }
      }
      else
      {
        ++v18;
        v31 = (double *)&v14[2 * v18];
        *v31 = v23;
        *((_QWORD *)v31 + 1) = v22;
        v12[2] = 0xC1E0000000000000;
        v12[3] = v22;
        if (*(double *)((char *)v14 + ((8 * v18) & 0xFFFFFFFFFFFFFFF0)) >= v23)
        {
          v32 = v18;
          do
          {
            v27 = v32 >> 1;
            if (v32 != v32 >> 1)
            {
              v34 = &v14[2 * v27];
              v35 = &v14[2 * v32];
              *v35 = *v34;
              v35[1] = v34[1];
            }
            v33 = *(double *)((char *)v14 + ((4 * v32) & 0xFFFFFFFFFFFFFFF0));
            v32 >>= 1;
          }
          while (v33 >= v23);
        }
        else
        {
          v27 = v18;
        }
      }
      v36 = (double *)&v14[2 * v27];
      *v36 = v23;
      *((_QWORD *)v36 + 1) = v22;
      if (v18)
      {
        v37 = v18 - 1;
        if (v18 - 1 <= v18 >> 1)
        {
          v19 = v18;
        }
        else
        {
          v38 = (double *)&v12[2 * v18];
          v19 = v18;
          v39 = v18;
          do
          {
            v40 = *v38;
            v38 -= 2;
            if (v40 > *(double *)&v14[2 * v39])
            {
              v19 = v37;
              v39 = v37;
            }
            --v37;
          }
          while (v37 > v18 >> 1);
        }
        break;
      }
      v19 = 0;
      if (++v20 == v21)
        goto LABEL_107;
    }
    ++v20;
  }
  while (v20 != v21);
  if (v18)
  {
    v41 = (double **)(v12 + 5);
    v42 = (uint64_t)&v12[2 * v18 - 2];
    do
    {
      v43 = *v41;
      v44 = *(_QWORD *)*v41;
      if (v44 == a3)
        break;
      v45 = v18--;
      v46 = v18 >> 1;
      if (v18)
      {
        v71 = (double *)&v14[2 * v45];
        v72 = *v71;
        v12[4] = *(_QWORD *)v71;
        v73 = *((_QWORD *)v71 + 1);
        v12[5] = v73;
        if (v45 >= 3)
        {
          v74 = 1;
          while (1)
          {
            v75 = 2 * v74;
            if (2 * v74 < v18 && *(double *)&v14[2 * (v75 | 1)] < *(double *)&v14[4 * v74])
              v75 |= 1uLL;
            v76 = (double *)&v14[2 * v75];
            if (*v76 >= v72)
              break;
            if (v74 != v75)
            {
              v77 = &v14[2 * v74];
              *v77 = *(_QWORD *)v76;
              v77[1] = *((_QWORD *)v76 + 1);
            }
            v74 = v75;
            if (v75 > v46)
              goto LABEL_100;
          }
          v75 = v74;
LABEL_100:
          v78 = (double *)&v14[2 * v75];
          *v78 = v72;
          *((_QWORD *)v78 + 1) = v73;
          if (v19 != v45)
            goto LABEL_54;
LABEL_101:
          v79 = v45 - 2;
          v19 = v18;
          if (v45 - 2 > v46)
          {
            v80 = (double *)v42;
            v19 = v18;
            v81 = v18;
            do
            {
              v82 = *v80;
              v80 -= 2;
              if (v82 > *(double *)&v14[2 * v81])
              {
                v19 = v79;
                v81 = v79;
              }
              --v79;
            }
            while (v79 > v46);
          }
          goto LABEL_54;
        }
        if (v19 == 2)
          goto LABEL_101;
      }
      else if (v19 == 1)
      {
        v19 = 0;
      }
LABEL_54:
      v47 = a3;
      v48 = *(_QWORD *)(v15 + 40 * v44);
      if (v48)
      {
        v49 = 0;
        v50 = *(_QWORD *)(v15 + 40 * v44 + 16);
        v51 = *((_QWORD *)this + 10);
        if (v18)
          v52 = v45 - 2 > v46;
        else
          v52 = 0;
        v53 = !v52;
        v54 = v19;
        do
        {
          v55 = v51 + 72 * (v49 + v50);
          v56 = v43[1] + *(double *)(v55 + 32);
          if (v56 > 8.98846567e307)
            v56 = 8.98846567e307;
          v57 = (double *)&v9[4 * *(_QWORD *)(v55 + 8)];
          if (v56 < v57[1])
          {
            v57[1] = v56;
            *((_QWORD *)v57 + 2) = v44;
            *((_QWORD *)v57 + 3) = v49;
            if (v45 < 2)
            {
LABEL_70:
              v59 = -1;
            }
            else
            {
              v58 = (char **)(v12 + 5);
              v59 = 1;
              while (*v58 != (char *)v57)
              {
                ++v59;
                v58 += 2;
                if (v45 == v59)
                  goto LABEL_70;
              }
            }
            v60 = &v14[2 * v59];
            *(double *)v60 = v56;
            v60[1] = v57;
            v61 = (double **)(v60 + 1);
            v12[2] = 0xC1E0000000000000;
            v12[3] = v57;
            if (*(double *)((char *)v14 + ((8 * v59) & 0xFFFFFFFFFFFFFFF0)) >= v56)
            {
              do
              {
                v63 = v59 >> 1;
                if (v59 != v59 >> 1)
                {
                  v64 = &v14[2 * v63];
                  v65 = &v14[2 * v59];
                  *v65 = *v64;
                  v65[1] = v64[1];
                }
                v62 = *(double *)((char *)v14 + ((4 * v59) & 0xFFFFFFFFFFFFFFF0));
                v59 >>= 1;
              }
              while (v62 >= v56);
              v66 = (double *)&v14[2 * v63];
              *v66 = v56;
              v61 = (double **)(v66 + 1);
            }
            else
            {
              *(double *)v60 = v56;
            }
            *v61 = v57;
            v67 = *(double *)&v14[2 * v54];
            if (v67 >= v56)
              v68 = 1;
            else
              v68 = v53;
            if (v67 < v56)
            {
              v19 = v18;
              v54 = v18;
            }
            if ((v68 & 1) == 0)
            {
              v69 = 0;
              v19 = v18;
              v54 = v18;
              v70 = v45 - 2;
              do
              {
                if (*(double *)(v42 + v69) > *(double *)&v14[2 * v54])
                {
                  v19 = v70;
                  v54 = v70;
                }
                --v70;
                v69 -= 16;
              }
              while (v70 > v46);
            }
          }
          ++v49;
        }
        while (v49 != v48);
      }
      v42 -= 16;
      a3 = v47;
    }
    while (v18);
  }
LABEL_107:
  v83 = sub_1BE836174((uint64_t)v136, (uint64_t)this, 0, 0, 0, 0);
  v140 = *(_OWORD *)&v9[4 * a3 + 2];
  v84 = (void **)(v83 + 56);
  v85 = a3;
  v87 = *(char **)(v83 + 64);
  v86 = *(_QWORD *)(v83 + 72);
  if ((unint64_t)v87 < v86)
  {
    *(_QWORD *)v87 = v85;
    v88 = v87 + 8;
    v89 = v85;
    goto LABEL_129;
  }
  v138 = v85;
  v90 = (char *)*v84;
  v91 = v87 - (_BYTE *)*v84;
  v92 = v91 >> 3;
  v93 = (v91 >> 3) + 1;
  if (v93 >> 61)
    goto LABEL_169;
  v94 = v86 - (_QWORD)v90;
  if (v94 >> 2 > v93)
    v93 = v94 >> 2;
  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
    v95 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v95 = v93;
  if (v95)
  {
    if (!(v95 >> 61))
    {
      v96 = operator new(8 * v95);
      goto LABEL_119;
    }
LABEL_168:
    sub_1BE61F100();
  }
  v96 = 0;
LABEL_119:
  v97 = &v96[8 * v92];
  v98 = &v96[8 * v95];
  *v97 = v138;
  v88 = v97 + 1;
  if (v87 != v90)
  {
    v99 = v87 - v90 - 8;
    if (v99 < 0x58)
      goto LABEL_172;
    if ((unint64_t)(v87 - v96 - v91) < 0x20)
      goto LABEL_172;
    v100 = (v99 >> 3) + 1;
    v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
    v102 = &v87[-v101];
    v97 = (_QWORD *)((char *)v97 - v101);
    v103 = &v96[8 * v92 - 16];
    v104 = v87 - 16;
    v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v106 = *(_OWORD *)v104;
      *(v103 - 1) = *((_OWORD *)v104 - 1);
      *v103 = v106;
      v103 -= 2;
      v104 -= 32;
      v105 -= 4;
    }
    while (v105);
    v87 = v102;
    if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_172:
      do
      {
        v107 = *((_QWORD *)v87 - 1);
        v87 -= 8;
        *--v97 = v107;
      }
      while (v87 != v90);
    }
  }
  v136[7] = v97;
  v136[8] = v88;
  v136[9] = v98;
  if (v90)
    operator delete(v90);
  v89 = v138;
LABEL_129:
  v136[8] = v88;
  v108 = (void **)(v136 + 10);
  v109 = &v9[4 * v89 + 3];
  v111 = (char *)v136[11];
  v110 = v136[12];
  if ((unint64_t)v111 < v110)
  {
    *(_QWORD *)v111 = *v109;
    v112 = v111 + 8;
    goto LABEL_150;
  }
  v113 = (char *)*v108;
  v114 = v111 - (_BYTE *)*v108;
  v115 = v114 >> 3;
  v116 = (v114 >> 3) + 1;
  if (v116 >> 61)
LABEL_169:
    sub_1BE61F930();
  v117 = v110 - (_QWORD)v113;
  if (v117 >> 2 > v116)
    v116 = v117 >> 2;
  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
    v118 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v118 = v116;
  if (v118)
  {
    v135 = v111 - (_BYTE *)*v108;
    v139 = v114 >> 3;
    if (v118 >> 61)
      goto LABEL_168;
    v119 = operator new(8 * v118);
    v115 = v139;
    v114 = v135;
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[8 * v115];
  *v120 = *v109;
  v112 = v120 + 1;
  if (v111 != v113)
  {
    v121 = v111 - v113 - 8;
    if (v121 < 0x58)
      goto LABEL_173;
    if ((unint64_t)(v111 - &v119[v114]) < 0x20)
      goto LABEL_173;
    v122 = (v121 >> 3) + 1;
    v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
    v124 = &v111[-v123];
    v120 = (_QWORD *)((char *)v120 - v123);
    v125 = &v119[8 * v115 - 16];
    v126 = v111 - 16;
    v127 = v122 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v128 = *(_OWORD *)v126;
      *(v125 - 1) = *((_OWORD *)v126 - 1);
      *v125 = v128;
      v125 -= 2;
      v126 -= 32;
      v127 -= 4;
    }
    while (v127);
    v111 = v124;
    if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_173:
      do
      {
        v129 = *((_QWORD *)v111 - 1);
        v111 -= 8;
        *--v120 = v129;
      }
      while (v111 != v113);
    }
  }
  v136[10] = v120;
  v136[11] = v112;
  v136[12] = &v119[8 * v118];
  if (v113)
    operator delete(v113);
LABEL_150:
  v136[11] = v112;
  v130 = v140;
  if ((_QWORD)v140 != -1 && (int)v140 != a2)
  {
    do
    {
      sub_1BE830CD8(v84, *v84, (char *)&v140);
      sub_1BE830CD8(v108, *v108, (char *)&v9[4 * v140 + 3]);
      v132 = *(_OWORD *)&v9[4 * v140 + 2];
      v140 = v132;
      v130 = v132;
    }
    while ((_QWORD)v132 != -1 && (int)v132 != a2);
  }
  v134 = *v84;
  if (v130 == -1)
  {
    v136[8] = v134;
    v136[11] = v136[10];
    if (v14)
LABEL_161:
      MEMORY[0x1C3B812C8](v12, 0x1020C805730B0C9);
  }
  else
  {
    sub_1BE830CD8(v84, v134, (char *)&v140);
    sub_1BE830CD8(v108, *v108, (char *)&v9[4 * v140 + 3]);
    if (v14)
      goto LABEL_161;
  }
  if (v9)
    operator delete(v9);
}

void sub_1BE830C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;

  sub_1BE670A58(a11);
  if (v13)
  {
    MEMORY[0x1C3B812C8](v12, 0x1020C805730B0C9);
    if (!v11)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v11)
  {
    goto LABEL_3;
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_1BE830CD8(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = v9 + 8;
      return;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v39 = (v16 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v40);
          v17 = (_QWORD *)(v5 + v40);
          v41 = (_OWORD *)(v5 + 16);
          v42 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *v42;
            *(v41 - 1) = *(v42 - 1);
            *v41 = v44;
            v41 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v45 = *v13++;
        *v17++ = v45;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_47:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v9 = *(_QWORD *)v3;
    return;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_1BE61F930();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_1BE61F100();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v37 = 1;
    else
      v37 = v7 >> 2;
    if (v37 >> 61)
      sub_1BE61F100();
    v23 = (char *)operator new(8 * v37);
    v24 = &v23[8 * v37];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v37];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *(_QWORD *)v3;
      v27 = v23 + 8;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_40;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *(_QWORD *)v3;
  v27 = v23 + 8;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v28 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v29 = v28 - v26 - 8;
    if (v29 >= 0x58 && (unint64_t)(v28 - v23) >= 0x20)
    {
      v46 = (v29 >> 3) + 1;
      v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v30 = &v9[-v47];
      v31 = &v23[-v47];
      v48 = v23 - 16;
      v49 = (__int128 *)(v6 + 8 * v8 - 16);
      v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        v33 = (char *)a1[1];
        v34 = v33 - v9;
        if (v33 == v9)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else
    {
      v30 = v9;
      v31 = v23;
    }
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v30 != v26);
    goto LABEL_29;
  }
LABEL_40:
  v31 = v23;
  v38 = (char *)a1[1];
  v34 = v38 - v9;
  if (v38 != v9)
  {
LABEL_30:
    v35 = v9;
    v36 = v24;
    memmove(v27, v35, v34);
    v24 = v36;
    v26 = (char *)*a1;
  }
LABEL_31:
  *a1 = v31;
  a1[1] = &v27[v34];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
}

void sub_1BE831054(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *Network::getTotalNumberOfSegments(Network *this, unint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD **v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  NSObject *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v83;
  Network *v85;
  _QWORD *v86;
  void *__p;
  uint64_t v88;
  uint64_t **v89;
  uint64_t *v90;
  uint64_t v91;
  uint8_t buf[4];
  unint64_t v93;
  __int16 v94;
  uint64_t *v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v90 = 0;
  v91 = 0;
  v5 = &v90;
  v88 = 0;
  v89 = &v90;
  v86 = &v86;
  __p = &v86;
  v6 = (uint64_t **)operator new(0x30uLL);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = (uint64_t *)&v90;
  v89 = v6;
  v90 = (uint64_t *)v6;
  *((_BYTE *)v6 + 24) = 1;
  v91 = 1;
  v6[4] = a3;
  v6[5] = 0;
  v7 = operator new(0x18uLL);
  v83 = a3;
  v7[1] = &v86;
  v7[2] = a3;
  *v7 = &v86;
  v86 = v7;
  __p = v7;
  v8 = 1;
  v88 = 1;
  v85 = this;
  do
  {
    v9 = (_QWORD **)__p;
    v10 = *((_QWORD *)__p + 2);
    v11 = *(_QWORD *)__p;
    *(_QWORD *)(v11 + 8) = *((_QWORD *)__p + 1);
    *v9[1] = v11;
    v88 = v8 - 1;
    operator delete(v9);
    v12 = v10 == a2 || v10 == 0;
    if (!v12)
    {
      v13 = *((_QWORD *)this + 4);
      if (*(_QWORD *)(v13 + 40 * v10 + 8))
      {
        v14 = 0;
        do
        {
          v15 = *(unint64_t **)(*((_QWORD *)this + 13) + 8 * (*(_QWORD *)(v13 + 40 * v10 + 24) + v14));
          v16 = v15[6];
          v17 = v90;
          v18 = &v90;
          v19 = &v90;
          if (!v90)
            goto LABEL_21;
          v20 = v90;
          do
          {
            while (1)
            {
              v19 = (uint64_t **)v20;
              v21 = v20[4];
              if (v10 >= v21)
                break;
              v20 = *v19;
              v18 = v19;
              if (!*v19)
                goto LABEL_21;
            }
            if (v21 >= v10)
            {
              v16 += (uint64_t)v19[5];
              v34 = *v15;
              goto LABEL_47;
            }
            v20 = v19[1];
          }
          while (v20);
          v18 = v19 + 1;
LABEL_21:
          v22 = (uint64_t *)operator new(0x30uLL);
          v22[4] = v10;
          v22[5] = 0;
          *v22 = 0;
          v22[1] = 0;
          v22[2] = (uint64_t)v19;
          *v18 = v22;
          if (*v89)
          {
            v89 = (uint64_t **)*v89;
            v22 = *v18;
          }
          v23 = v90;
          v12 = v22 == v90;
          *((_BYTE *)v22 + 24) = v22 == v90;
          if (!v12)
          {
            do
            {
              v24 = v22[2];
              if (*(_BYTE *)(v24 + 24))
                break;
              v25 = *(uint64_t **)(v24 + 16);
              v26 = *v25;
              if (*v25 == v24)
              {
                v29 = v25[1];
                if (!v29 || (v30 = *(unsigned __int8 *)(v29 + 24), v27 = (_BYTE *)(v29 + 24), v30))
                {
                  if (*(uint64_t **)v24 == v22)
                  {
                    *(_BYTE *)(v24 + 24) = 1;
                    *((_BYTE *)v25 + 24) = 0;
                    v33 = *(_QWORD *)(v24 + 8);
                    *v25 = v33;
                    if (v33)
                      goto LABEL_38;
                  }
                  else
                  {
                    v31 = *(uint64_t **)(v24 + 8);
                    v32 = *v31;
                    *(_QWORD *)(v24 + 8) = *v31;
                    if (v32)
                    {
                      *(_QWORD *)(v32 + 16) = v24;
                      v25 = *(uint64_t **)(v24 + 16);
                    }
                    v31[2] = (uint64_t)v25;
                    *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v31;
                    *v31 = v24;
                    *(_QWORD *)(v24 + 16) = v31;
                    v25 = (uint64_t *)v31[2];
                    v24 = *v25;
                    *((_BYTE *)v31 + 24) = 1;
                    *((_BYTE *)v25 + 24) = 0;
                    v33 = *(_QWORD *)(v24 + 8);
                    *v25 = v33;
                    if (v33)
LABEL_38:
                      *(_QWORD *)(v33 + 16) = v25;
                  }
                  *(_QWORD *)(v24 + 16) = v25[2];
                  *(_QWORD *)(v25[2] + 8 * (*(_QWORD *)v25[2] != (_QWORD)v25)) = v24;
                  *(_QWORD *)(v24 + 8) = v25;
LABEL_45:
                  v25[2] = v24;
                  break;
                }
              }
              else if (!v26 || (v28 = *(unsigned __int8 *)(v26 + 24), v27 = (_BYTE *)(v26 + 24), v28))
              {
                if (*(uint64_t **)v24 == v22)
                {
                  v61 = v22[1];
                  *(_QWORD *)v24 = v61;
                  if (v61)
                  {
                    *(_QWORD *)(v61 + 16) = v24;
                    v25 = *(uint64_t **)(v24 + 16);
                  }
                  v22[2] = (uint64_t)v25;
                  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v22;
                  v22[1] = v24;
                  *(_QWORD *)(v24 + 16) = v22;
                  v25 = (uint64_t *)v22[2];
                  *((_BYTE *)v22 + 24) = 1;
                  *((_BYTE *)v25 + 24) = 0;
                  v24 = v25[1];
                  v35 = *(uint64_t **)v24;
                  v25[1] = *(_QWORD *)v24;
                  if (v35)
LABEL_43:
                    v35[2] = (uint64_t)v25;
                }
                else
                {
                  *(_BYTE *)(v24 + 24) = 1;
                  *((_BYTE *)v25 + 24) = 0;
                  v24 = v25[1];
                  v35 = *(uint64_t **)v24;
                  v25[1] = *(_QWORD *)v24;
                  if (v35)
                    goto LABEL_43;
                }
                *(_QWORD *)(v24 + 16) = v25[2];
                *(_QWORD *)(v25[2] + 8 * (*(_QWORD *)v25[2] != (_QWORD)v25)) = v24;
                *(_QWORD *)v24 = v25;
                goto LABEL_45;
              }
              *(_BYTE *)(v24 + 24) = 1;
              v22 = v25;
              *((_BYTE *)v25 + 24) = v25 == v23;
              *v27 = 1;
            }
            while (v25 != v23);
          }
          v17 = v90;
          ++v91;
          v34 = *v15;
          v36 = &v90;
          v37 = &v90;
          if (v90)
          {
LABEL_47:
            v38 = v17;
            while (1)
            {
              v39 = v38[4];
              if (v34 >= v39)
              {
                if (v39 >= v34)
                {
                  do
                  {
                    while (1)
                    {
                      v46 = v17;
                      v47 = v17[4];
                      if (v34 < v47)
                        break;
                      if (v47 >= v34)
                      {
                        if (v46[5] == v16)
                          goto LABEL_13;
                        goto LABEL_104;
                      }
                      v17 = (uint64_t *)v46[1];
                      if (!v17)
                      {
                        v48 = (uint64_t **)(v46 + 1);
                        goto LABEL_68;
                      }
                    }
                    v17 = (uint64_t *)*v46;
                  }
                  while (*v46);
                  v48 = (uint64_t **)v46;
LABEL_68:
                  v49 = (uint64_t *)operator new(0x30uLL);
                  v49[4] = v34;
                  v49[5] = 0;
                  *v49 = 0;
                  v49[1] = 0;
                  v49[2] = (uint64_t)v46;
                  *v48 = v49;
                  if (*v89)
                  {
                    v89 = (uint64_t **)*v89;
                    v49 = *v48;
                  }
                  v50 = v90;
                  v12 = v49 == v90;
                  *((_BYTE *)v49 + 24) = v49 == v90;
                  if (!v12)
                  {
                    do
                    {
                      v51 = v49[2];
                      if (*(_BYTE *)(v51 + 24))
                        break;
                      v52 = *(uint64_t **)(v51 + 16);
                      v53 = *v52;
                      if (*v52 == v51)
                      {
                        v56 = v52[1];
                        if (!v56 || (v57 = *(unsigned __int8 *)(v56 + 24), v54 = (_BYTE *)(v56 + 24), v57))
                        {
                          if (*(uint64_t **)v51 == v49)
                          {
                            *(_BYTE *)(v51 + 24) = 1;
                            *((_BYTE *)v52 + 24) = 0;
                            v60 = *(_QWORD *)(v51 + 8);
                            *v52 = v60;
                            if (v60)
                              goto LABEL_85;
                          }
                          else
                          {
                            v58 = *(uint64_t **)(v51 + 8);
                            v59 = *v58;
                            *(_QWORD *)(v51 + 8) = *v58;
                            if (v59)
                            {
                              *(_QWORD *)(v59 + 16) = v51;
                              v52 = *(uint64_t **)(v51 + 16);
                            }
                            v58[2] = (uint64_t)v52;
                            *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8 * (**(_QWORD **)(v51 + 16) != v51)) = v58;
                            *v58 = v51;
                            *(_QWORD *)(v51 + 16) = v58;
                            v52 = (uint64_t *)v58[2];
                            v51 = *v52;
                            *((_BYTE *)v58 + 24) = 1;
                            *((_BYTE *)v52 + 24) = 0;
                            v60 = *(_QWORD *)(v51 + 8);
                            *v52 = v60;
                            if (v60)
LABEL_85:
                              *(_QWORD *)(v60 + 16) = v52;
                          }
                          *(_QWORD *)(v51 + 16) = v52[2];
                          *(_QWORD *)(v52[2] + 8 * (*(_QWORD *)v52[2] != (_QWORD)v52)) = v51;
                          *(_QWORD *)(v51 + 8) = v52;
LABEL_11:
                          v52[2] = v51;
                          break;
                        }
                      }
                      else if (!v53 || (v55 = *(unsigned __int8 *)(v53 + 24), v54 = (_BYTE *)(v53 + 24), v55))
                      {
                        if (*(uint64_t **)v51 == v49)
                        {
                          v63 = v49[1];
                          *(_QWORD *)v51 = v63;
                          if (v63)
                          {
                            *(_QWORD *)(v63 + 16) = v51;
                            v52 = *(uint64_t **)(v51 + 16);
                          }
                          v49[2] = (uint64_t)v52;
                          *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8 * (**(_QWORD **)(v51 + 16) != v51)) = v49;
                          v49[1] = v51;
                          *(_QWORD *)(v51 + 16) = v49;
                          v52 = (uint64_t *)v49[2];
                          *((_BYTE *)v49 + 24) = 1;
                          *((_BYTE *)v52 + 24) = 0;
                          v51 = v52[1];
                          v62 = *(uint64_t **)v51;
                          v52[1] = *(_QWORD *)v51;
                          if (!v62)
                            goto LABEL_10;
                        }
                        else
                        {
                          *(_BYTE *)(v51 + 24) = 1;
                          *((_BYTE *)v52 + 24) = 0;
                          v51 = v52[1];
                          v62 = *(uint64_t **)v51;
                          v52[1] = *(_QWORD *)v51;
                          if (!v62)
                            goto LABEL_10;
                        }
                        v62[2] = (uint64_t)v52;
LABEL_10:
                        *(_QWORD *)(v51 + 16) = v52[2];
                        *(_QWORD *)(v52[2] + 8 * (*(_QWORD *)v52[2] != (_QWORD)v52)) = v51;
                        *(_QWORD *)v51 = v52;
                        goto LABEL_11;
                      }
                      *(_BYTE *)(v51 + 24) = 1;
                      v49 = v52;
                      *((_BYTE *)v52 + 24) = v52 == v50;
                      *v54 = 1;
                    }
                    while (v52 != v50);
                  }
                  ++v91;
                  if (!v16)
                    goto LABEL_13;
LABEL_104:
                  if (qword_1EF568E88 != -1)
                    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                  v64 = (id)qword_1EF568E20;
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                  {
                    v65 = *v15;
                    v66 = v90;
                    v67 = &v90;
                    if (v90)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v67 = (uint64_t **)v66;
                          v68 = v66[4];
                          if (v65 >= v68)
                            break;
                          v66 = *v67;
                          v5 = v67;
                          if (!*v67)
                            goto LABEL_114;
                        }
                        if (v68 >= v65)
                          break;
                        v66 = v67[1];
                        if (!v66)
                        {
                          v5 = v67 + 1;
                          goto LABEL_114;
                        }
                      }
                      v69 = (uint64_t *)v67;
                    }
                    else
                    {
LABEL_114:
                      v69 = (uint64_t *)operator new(0x30uLL);
                      v69[4] = v65;
                      v69[5] = 0;
                      *v69 = 0;
                      v69[1] = 0;
                      v69[2] = (uint64_t)v67;
                      *v5 = v69;
                      v70 = v69;
                      if (*v89)
                      {
                        v89 = (uint64_t **)*v89;
                        v70 = *v5;
                      }
                      sub_1BE61F5C0(v90, v70);
                      ++v91;
                    }
                    v77 = v69[5];
                    *(_DWORD *)buf = 134218752;
                    v93 = v65;
                    v94 = 2048;
                    v95 = v83;
                    v96 = 2048;
                    v97 = v77;
                    v98 = 2048;
                    v99 = v16;
                    _os_log_impl(&dword_1BE607000, v64, OS_LOG_TYPE_ERROR, "found paths with incompatible number of segments covered from %zu to %zu: previous value %lu, value for new path %zu \n", buf, 0x2Au);
                  }

                  v76 = 0;
                  if (!v88)
                    goto LABEL_134;
LABEL_132:
                  v79 = v86;
                  v78 = __p;
                  v80 = *(_QWORD *)__p;
                  *(_QWORD *)(v80 + 8) = v86[1];
                  *(_QWORD *)v79[1] = v80;
                  v88 = 0;
                  if (v78 != &v86)
                  {
                    do
                    {
                      v81 = (_QWORD *)v78[1];
                      operator delete(v78);
                      v78 = v81;
                    }
                    while (v81 != &v86);
                  }
                  goto LABEL_134;
                }
                ++v38;
              }
              v38 = (uint64_t *)*v38;
              if (!v38)
              {
                while (1)
                {
                  while (1)
                  {
                    v37 = (uint64_t **)v17;
                    v40 = v17[4];
                    if (v34 >= v40)
                      break;
                    v17 = *v37;
                    v36 = v37;
                    if (!*v37)
                      goto LABEL_57;
                  }
                  if (v40 >= v34)
                    break;
                  v17 = v37[1];
                  if (!v17)
                  {
                    v36 = v37 + 1;
                    goto LABEL_57;
                  }
                }
                v41 = (uint64_t *)v37;
                goto LABEL_60;
              }
            }
          }
LABEL_57:
          v41 = (uint64_t *)operator new(0x30uLL);
          v41[4] = v34;
          v41[5] = 0;
          *v41 = 0;
          v41[1] = 0;
          v41[2] = (uint64_t)v37;
          *v36 = v41;
          v42 = v41;
          if (*v89)
          {
            v89 = (uint64_t **)*v89;
            v42 = *v36;
          }
          sub_1BE61F5C0(v90, v42);
          ++v91;
LABEL_60:
          v41[5] = v16;
          v43 = operator new(0x18uLL);
          v44 = *v15;
          v45 = v86;
          v43[1] = &v86;
          v43[2] = v44;
          *v43 = v45;
          v45[1] = v43;
          v86 = v43;
          ++v88;
LABEL_13:
          ++v14;
          this = v85;
          v13 = *((_QWORD *)v85 + 4);
        }
        while (v14 < *(_QWORD *)(v13 + 40 * v10 + 8));
      }
    }
    v8 = v88;
  }
  while (v88);
  v71 = v90;
  v72 = &v90;
  if (v90)
  {
    while (1)
    {
      while (1)
      {
        v72 = (uint64_t **)v71;
        v73 = v71[4];
        if (v73 <= a2)
          break;
        v71 = *v72;
        v5 = v72;
        if (!*v72)
          goto LABEL_124;
      }
      if (v73 >= a2)
        break;
      v71 = v72[1];
      if (!v71)
      {
        v5 = v72 + 1;
        goto LABEL_124;
      }
    }
    v76 = v72[5];
  }
  else
  {
LABEL_124:
    v74 = (uint64_t *)operator new(0x30uLL);
    v74[4] = a2;
    v74[5] = 0;
    *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v72;
    *v5 = v74;
    v75 = v74;
    if (*v89)
    {
      v89 = (uint64_t **)*v89;
      v75 = *v5;
    }
    sub_1BE61F5C0(v90, v75);
    ++v91;
    v76 = (uint64_t *)v74[5];
    if (v88)
      goto LABEL_132;
  }
LABEL_134:
  sub_1BE62033C((uint64_t)&v89, v90);
  return v76;
}

void sub_1BE8319B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  void *v17;

  sub_1BE76551C(&a13);
  sub_1BE62033C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void Network::kBestPaths(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const void *a5@<X5>, const void *a6@<X7>, _QWORD *a7@<X8>, void *a8, void *a9, int a10, uint64_t a11, char a12, void *a13, void *a14, char a15, char a16, char a17, char a18)
{
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  _QWORD **v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  _QWORD *v49;
  double v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD **v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  char *v98;
  _QWORD *v99;
  double v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _OWORD *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  _QWORD **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD **v162;
  uint64_t *v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD **v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  id v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  double v178;
  void *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  uint64_t *v185;
  int64_t v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  uint64_t *v194;
  uint64_t v195;
  __int128 v196;
  void *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD **v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  _QWORD *v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  _QWORD *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _BYTE *v239;
  _QWORD *v240;
  char *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  _OWORD *v246;
  char *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unsigned __int8 *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  double v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  double *v270;
  double *v271;
  double v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  NSObject *v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD **v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD **v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _BYTE *v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  _QWORD *v308;
  uint64_t v309;
  double v310;
  double v311;
  id v312;
  const char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  id v318;
  double v319;
  void *v320;
  _QWORD *v321;
  _QWORD **v322;
  _QWORD *v323;
  unint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  _BYTE *v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  double v337;
  unsigned __int8 *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  double v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t i;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  void **v371;
  _QWORD **v372;
  _QWORD *v373;
  void **v374;
  _QWORD *v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v381;
  id v382;
  uint64_t v383;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  _QWORD *v388;
  unint64_t v389;
  unsigned __int8 *v390;
  uint64_t *v391;
  id v392;
  id v393;
  uint64_t v394;
  double (**v395)(id, _QWORD *);
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  void **v401;
  uint64_t v402;
  __int16 v403;
  unint64_t v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  void *__p;
  uint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  char *v414;
  char *v415;
  __int128 v416;
  _QWORD *v417;
  _BYTE buf[12];
  __int16 v419;
  uint64_t v420;
  uint64_t v421;

  v421 = *MEMORY[0x1E0C80C00];
  v392 = a8;
  v382 = a9;
  v395 = a13;
  v393 = a14;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  v388 = a7;
  v21 = 100;
  v389 = a4;
  if (!a12)
    v21 = a4;
  v381 = v21;
  v412 = 0;
  v413 = 0;
  v410 = 0;
  v411 = &v412;
  v408 = &v408;
  __p = &v408;
  v22 = operator new(0x18uLL);
  v22[1] = &v408;
  v22[2] = a3;
  *v22 = &v408;
  v408 = v22;
  __p = v22;
  v410 = 1;
  v23 = operator new(0x30uLL);
  v383 = a3 - a2 + 1;
  *v23 = 0;
  v23[1] = 0;
  v23[2] = &v412;
  v411 = v23;
  v412 = v23;
  *((_BYTE *)v23 + 24) = 1;
  v394 = a3;
  v23[4] = a3;
  v23[5] = 0;
  v24 = 1;
  v413 = 1;
  do
  {
    v25 = (_QWORD **)__p;
    v26 = *((_QWORD *)__p + 2);
    v27 = *(_QWORD *)__p;
    *(_QWORD *)(v27 + 8) = *((_QWORD *)__p + 1);
    *v25[1] = v27;
    v410 = v24 - 1;
    operator delete(v25);
    v28 = a1;
    v29 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v29 + 40 * v26 + 8))
    {
      v30 = 0;
      do
      {
        v31 = *(unint64_t **)(*(_QWORD *)(v28 + 104) + 8 * (*(_QWORD *)(v29 + 40 * v26 + 24) + v30));
        v32 = v412;
        v33 = &v412;
LABEL_10:
        v34 = v33;
        if (v32)
        {
          while (1)
          {
            v33 = (_QWORD **)v32;
            v35 = v32[4];
            if (v26 < v35)
            {
              v32 = *v33;
              goto LABEL_10;
            }
            if (v35 >= v26)
              break;
            v32 = v33[1];
            if (!v32)
            {
              v34 = v33 + 1;
              goto LABEL_15;
            }
          }
          v48 = *((double *)v33 + 5);
        }
        else
        {
LABEL_15:
          v36 = operator new(0x30uLL);
          v36[4] = v26;
          v36[5] = 0;
          *v36 = 0;
          v36[1] = 0;
          v36[2] = v33;
          *v34 = v36;
          if (*v411)
          {
            v411 = (_QWORD *)*v411;
            v36 = (_QWORD *)*v34;
          }
          v37 = v412;
          v148 = v36 == v412;
          *((_BYTE *)v36 + 24) = v36 == v412;
          if (!v148)
          {
            do
            {
              v38 = v36[2];
              if (*(_BYTE *)(v38 + 24))
                break;
              v39 = *(_QWORD **)(v38 + 16);
              v40 = *v39;
              if (*v39 == v38)
              {
                v43 = v39[1];
                if (!v43 || (v44 = *(unsigned __int8 *)(v43 + 24), v41 = (_BYTE *)(v43 + 24), v44))
                {
                  if (*(_QWORD **)v38 == v36)
                  {
                    *(_BYTE *)(v38 + 24) = 1;
                    *((_BYTE *)v39 + 24) = 0;
                    v47 = *(_QWORD *)(v38 + 8);
                    *v39 = v47;
                    if (v47)
                      goto LABEL_32;
                  }
                  else
                  {
                    v45 = *(uint64_t **)(v38 + 8);
                    v46 = *v45;
                    *(_QWORD *)(v38 + 8) = *v45;
                    if (v46)
                    {
                      *(_QWORD *)(v46 + 16) = v38;
                      v39 = *(_QWORD **)(v38 + 16);
                    }
                    v45[2] = (uint64_t)v39;
                    *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v45;
                    *v45 = v38;
                    *(_QWORD *)(v38 + 16) = v45;
                    v39 = (_QWORD *)v45[2];
                    v38 = *v39;
                    *((_BYTE *)v45 + 24) = 1;
                    *((_BYTE *)v39 + 24) = 0;
                    v47 = *(_QWORD *)(v38 + 8);
                    *v39 = v47;
                    if (v47)
LABEL_32:
                      *(_QWORD *)(v47 + 16) = v39;
                  }
                  *(_QWORD *)(v38 + 16) = v39[2];
                  *(_QWORD *)(v39[2] + 8 * (*(_QWORD *)v39[2] != (_QWORD)v39)) = v38;
                  *(_QWORD *)(v38 + 8) = v39;
LABEL_39:
                  v39[2] = v38;
                  break;
                }
              }
              else if (!v40 || (v42 = *(unsigned __int8 *)(v40 + 24), v41 = (_BYTE *)(v40 + 24), v42))
              {
                if (*(_QWORD **)v38 == v36)
                {
                  v70 = v36[1];
                  *(_QWORD *)v38 = v70;
                  if (v70)
                  {
                    *(_QWORD *)(v70 + 16) = v38;
                    v39 = *(_QWORD **)(v38 + 16);
                  }
                  v36[2] = v39;
                  *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v36;
                  v36[1] = v38;
                  *(_QWORD *)(v38 + 16) = v36;
                  v39 = (_QWORD *)v36[2];
                  *((_BYTE *)v36 + 24) = 1;
                  *((_BYTE *)v39 + 24) = 0;
                  v38 = v39[1];
                  v49 = *(_QWORD **)v38;
                  v39[1] = *(_QWORD *)v38;
                  if (v49)
LABEL_37:
                    v49[2] = v39;
                }
                else
                {
                  *(_BYTE *)(v38 + 24) = 1;
                  *((_BYTE *)v39 + 24) = 0;
                  v38 = v39[1];
                  v49 = *(_QWORD **)v38;
                  v39[1] = *(_QWORD *)v38;
                  if (v49)
                    goto LABEL_37;
                }
                *(_QWORD *)(v38 + 16) = v39[2];
                *(_QWORD *)(v39[2] + 8 * (*(_QWORD *)v39[2] != (_QWORD)v39)) = v38;
                *(_QWORD *)v38 = v39;
                goto LABEL_39;
              }
              *(_BYTE *)(v38 + 24) = 1;
              v36 = v39;
              *((_BYTE *)v39 + 24) = v39 == v37;
              *v41 = 1;
            }
            while (v39 != v37);
          }
          ++v413;
          v48 = 0.0;
        }
        v50 = v48 + v395[2](v395, v31);
        v51 = v412;
        v52 = *v31;
        if (v412)
        {
          v53 = v412;
          do
          {
            v54 = v53[4];
            if (v52 >= v54)
            {
              if (v54 >= v52)
              {
                do
                {
                  while (1)
                  {
                    v55 = v51;
                    v56 = v51[4];
                    if (v52 < v56)
                      break;
                    if (v56 >= v52)
                    {
                      if (v50 >= *((double *)v55 + 5))
                        goto LABEL_7;
                      goto LABEL_86;
                    }
                    v51 = (_QWORD *)v55[1];
                    if (!v51)
                    {
                      v57 = v55 + 1;
                      goto LABEL_53;
                    }
                  }
                  v51 = (_QWORD *)*v55;
                }
                while (*v55);
                v57 = v55;
LABEL_53:
                v58 = operator new(0x30uLL);
                v58[4] = v52;
                v58[5] = 0;
                *v58 = 0;
                v58[1] = 0;
                v58[2] = v55;
                *v57 = v58;
                if (*v411)
                {
                  v411 = (_QWORD *)*v411;
                  v58 = (_QWORD *)*v57;
                }
                v59 = v412;
                v148 = v58 == v412;
                *((_BYTE *)v58 + 24) = v58 == v412;
                if (!v148)
                {
                  do
                  {
                    v60 = v58[2];
                    if (*(_BYTE *)(v60 + 24))
                      break;
                    v61 = *(_QWORD **)(v60 + 16);
                    v62 = *v61;
                    if (*v61 == v60)
                    {
                      v65 = v61[1];
                      if (!v65 || (v66 = *(unsigned __int8 *)(v65 + 24), v63 = (_BYTE *)(v65 + 24), v66))
                      {
                        if (*(_QWORD **)v60 == v58)
                        {
                          *(_BYTE *)(v60 + 24) = 1;
                          *((_BYTE *)v61 + 24) = 0;
                          v69 = *(_QWORD *)(v60 + 8);
                          *v61 = v69;
                          if (v69)
                            goto LABEL_70;
                        }
                        else
                        {
                          v67 = *(uint64_t **)(v60 + 8);
                          v68 = *v67;
                          *(_QWORD *)(v60 + 8) = *v67;
                          if (v68)
                          {
                            *(_QWORD *)(v68 + 16) = v60;
                            v61 = *(_QWORD **)(v60 + 16);
                          }
                          v67[2] = (uint64_t)v61;
                          *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v67;
                          *v67 = v60;
                          *(_QWORD *)(v60 + 16) = v67;
                          v61 = (_QWORD *)v67[2];
                          v60 = *v61;
                          *((_BYTE *)v67 + 24) = 1;
                          *((_BYTE *)v61 + 24) = 0;
                          v69 = *(_QWORD *)(v60 + 8);
                          *v61 = v69;
                          if (v69)
LABEL_70:
                            *(_QWORD *)(v69 + 16) = v61;
                        }
                        *(_QWORD *)(v60 + 16) = v61[2];
                        *(_QWORD *)(v61[2] + 8 * (*(_QWORD *)v61[2] != (_QWORD)v61)) = v60;
                        *(_QWORD *)(v60 + 8) = v61;
LABEL_84:
                        v61[2] = v60;
                        break;
                      }
                    }
                    else if (!v62 || (v64 = *(unsigned __int8 *)(v62 + 24), v63 = (_BYTE *)(v62 + 24), v64))
                    {
                      if (*(_QWORD **)v60 == v58)
                      {
                        v93 = v58[1];
                        *(_QWORD *)v60 = v93;
                        if (v93)
                        {
                          *(_QWORD *)(v93 + 16) = v60;
                          v61 = *(_QWORD **)(v60 + 16);
                        }
                        v58[2] = v61;
                        *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v58;
                        v58[1] = v60;
                        *(_QWORD *)(v60 + 16) = v58;
                        v61 = (_QWORD *)v58[2];
                        *((_BYTE *)v58 + 24) = 1;
                        *((_BYTE *)v61 + 24) = 0;
                        v60 = v61[1];
                        v71 = *(_QWORD **)v60;
                        v61[1] = *(_QWORD *)v60;
                        if (v71)
LABEL_82:
                          v71[2] = v61;
                      }
                      else
                      {
                        *(_BYTE *)(v60 + 24) = 1;
                        *((_BYTE *)v61 + 24) = 0;
                        v60 = v61[1];
                        v71 = *(_QWORD **)v60;
                        v61[1] = *(_QWORD *)v60;
                        if (v71)
                          goto LABEL_82;
                      }
                      *(_QWORD *)(v60 + 16) = v61[2];
                      *(_QWORD *)(v61[2] + 8 * (*(_QWORD *)v61[2] != (_QWORD)v61)) = v60;
                      *(_QWORD *)v60 = v61;
                      goto LABEL_84;
                    }
                    *(_BYTE *)(v60 + 24) = 1;
                    v58 = v61;
                    *((_BYTE *)v61 + 24) = v61 == v59;
                    *v63 = 1;
                  }
                  while (v61 != v59);
                }
                ++v413;
                if (v50 < 0.0)
                {
LABEL_86:
                  v51 = v412;
                  v52 = *v31;
                  break;
                }
                goto LABEL_7;
              }
              ++v53;
            }
            v53 = (_QWORD *)*v53;
          }
          while (v53);
          if (!v51)
            goto LABEL_88;
          while (1)
          {
            while (1)
            {
              v72 = (_QWORD **)v51;
              v87 = v51[4];
              if (v52 >= v87)
                break;
              v51 = *v72;
              if (!*v72)
                goto LABEL_89;
            }
            if (v87 >= v52)
              break;
            v51 = v72[1];
            if (!v51)
            {
              v73 = v72 + 1;
              goto LABEL_90;
            }
          }
          v74 = v72;
        }
        else
        {
LABEL_88:
          v72 = &v412;
LABEL_89:
          v73 = v72;
LABEL_90:
          v74 = operator new(0x30uLL);
          v74[4] = v52;
          v74[5] = 0;
          *v74 = 0;
          v74[1] = 0;
          v74[2] = v72;
          *v73 = v74;
          v75 = v74;
          if (*v411)
          {
            v411 = (_QWORD *)*v411;
            v75 = (_QWORD *)*v73;
          }
          v76 = v412;
          v148 = v75 == v412;
          *((_BYTE *)v75 + 24) = v75 == v412;
          if (!v148)
          {
            do
            {
              v77 = v75[2];
              if (*(_BYTE *)(v77 + 24))
                break;
              v78 = *(_QWORD **)(v77 + 16);
              v79 = *v78;
              if (*v78 == v77)
              {
                v82 = v78[1];
                if (!v82 || (v83 = *(unsigned __int8 *)(v82 + 24), v80 = (_BYTE *)(v82 + 24), v83))
                {
                  if (*(_QWORD **)v77 == v75)
                  {
                    *(_BYTE *)(v77 + 24) = 1;
                    *((_BYTE *)v78 + 24) = 0;
                    v86 = *(_QWORD *)(v77 + 8);
                    *v78 = v86;
                    if (v86)
                      goto LABEL_107;
                  }
                  else
                  {
                    v84 = *(uint64_t **)(v77 + 8);
                    v85 = *v84;
                    *(_QWORD *)(v77 + 8) = *v84;
                    if (v85)
                    {
                      *(_QWORD *)(v85 + 16) = v77;
                      v78 = *(_QWORD **)(v77 + 16);
                    }
                    v84[2] = (uint64_t)v78;
                    *(_QWORD *)(*(_QWORD *)(v77 + 16) + 8 * (**(_QWORD **)(v77 + 16) != v77)) = v84;
                    *v84 = v77;
                    *(_QWORD *)(v77 + 16) = v84;
                    v78 = (_QWORD *)v84[2];
                    v77 = *v78;
                    *((_BYTE *)v84 + 24) = 1;
                    *((_BYTE *)v78 + 24) = 0;
                    v86 = *(_QWORD *)(v77 + 8);
                    *v78 = v86;
                    if (v86)
LABEL_107:
                      *(_QWORD *)(v86 + 16) = v78;
                  }
                  *(_QWORD *)(v77 + 16) = v78[2];
                  *(_QWORD *)(v78[2] + 8 * (*(_QWORD *)v78[2] != (_QWORD)v78)) = v77;
                  *(_QWORD *)(v77 + 8) = v78;
LABEL_118:
                  v78[2] = v77;
                  break;
                }
              }
              else if (!v79 || (v81 = *(unsigned __int8 *)(v79 + 24), v80 = (_BYTE *)(v79 + 24), v81))
              {
                if (*(_QWORD **)v77 == v75)
                {
                  v92 = v75[1];
                  *(_QWORD *)v77 = v92;
                  if (v92)
                  {
                    *(_QWORD *)(v92 + 16) = v77;
                    v78 = *(_QWORD **)(v77 + 16);
                  }
                  v75[2] = v78;
                  *(_QWORD *)(*(_QWORD *)(v77 + 16) + 8 * (**(_QWORD **)(v77 + 16) != v77)) = v75;
                  v75[1] = v77;
                  *(_QWORD *)(v77 + 16) = v75;
                  v78 = (_QWORD *)v75[2];
                  *((_BYTE *)v75 + 24) = 1;
                  *((_BYTE *)v78 + 24) = 0;
                  v77 = v78[1];
                  v88 = *(_QWORD **)v77;
                  v78[1] = *(_QWORD *)v77;
                  if (v88)
LABEL_116:
                    v88[2] = v78;
                }
                else
                {
                  *(_BYTE *)(v77 + 24) = 1;
                  *((_BYTE *)v78 + 24) = 0;
                  v77 = v78[1];
                  v88 = *(_QWORD **)v77;
                  v78[1] = *(_QWORD *)v77;
                  if (v88)
                    goto LABEL_116;
                }
                *(_QWORD *)(v77 + 16) = v78[2];
                *(_QWORD *)(v78[2] + 8 * (*(_QWORD *)v78[2] != (_QWORD)v78)) = v77;
                *(_QWORD *)v77 = v78;
                goto LABEL_118;
              }
              *(_BYTE *)(v77 + 24) = 1;
              v75 = v78;
              *((_BYTE *)v78 + 24) = v78 == v76;
              *v80 = 1;
            }
            while (v78 != v76);
          }
          ++v413;
        }
        *((double *)v74 + 5) = v50;
        v89 = operator new(0x18uLL);
        v90 = *v31;
        v89[1] = &v408;
        v89[2] = v90;
        v91 = v408;
        *v89 = v408;
        v91[1] = v89;
        v408 = v89;
        ++v410;
LABEL_7:
        ++v30;
        v28 = a1;
        v29 = *(_QWORD *)(a1 + 32);
      }
      while (v30 < *(_QWORD *)(v29 + 40 * v26 + 8));
    }
    v24 = v410;
  }
  while (v410);
  v403 = 1;
  v404 = v389;
  v405 = 0;
  v94 = (_QWORD *)operator new[]();
  *v94 = 16;
  v94[1] = v389 + 2;
  v95 = v94 + 2;
  if (v389 != -2)
    bzero(v94 + 2, 16 * v389 + 32);
  v406 = v95;
  v407 = 0;
  v400 = &v400;
  v401 = &v400;
  v402 = 0;
  if (!a12)
  {
    v100 = 1.79769313e308;
    goto LABEL_266;
  }
  v96 = (_QWORD *)operator new();
  sub_1BE836174((uint64_t)v96, a1, a5, a6, v382, a10);
  v98 = (char *)v96[8];
  v97 = v96[9];
  if ((unint64_t)v98 >= v97)
  {
    v101 = (char *)v96[7];
    v102 = (v98 - v101) >> 3;
    v103 = v102 + 1;
    if ((unint64_t)(v102 + 1) >> 61)
      sub_1BE61F930();
    v104 = v97 - (_QWORD)v101;
    if (v104 >> 2 > v103)
      v103 = v104 >> 2;
    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
      v105 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v105 = v103;
    if (v105)
    {
      if (v105 >> 61)
        sub_1BE61F100();
      v106 = operator new(8 * v105);
    }
    else
    {
      v106 = 0;
    }
    v107 = &v106[8 * v102];
    *v107 = a2;
    v99 = v107 + 1;
    if (v98 != v101)
    {
      v108 = v98 - v101 - 8;
      if (v108 < 0x58)
        goto LABEL_586;
      if ((unint64_t)(v101 - v106) < 0x20)
        goto LABEL_586;
      v109 = (v108 >> 3) + 1;
      v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      v111 = &v98[-v110];
      v107 = (_QWORD *)((char *)v107 - v110);
      v112 = &v106[8 * v102 - 16];
      v113 = v98 - 16;
      v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v115 = *(_OWORD *)v113;
        *(v112 - 1) = *((_OWORD *)v113 - 1);
        *v112 = v115;
        v112 -= 2;
        v113 -= 32;
        v114 -= 4;
      }
      while (v114);
      v98 = v111;
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_586:
        do
        {
          v116 = *((_QWORD *)v98 - 1);
          v98 -= 8;
          *--v107 = v116;
        }
        while (v98 != v101);
      }
    }
    v96[7] = v107;
    v96[8] = v99;
    v96[9] = &v106[8 * v105];
    if (v101)
      operator delete(v101);
  }
  else
  {
    *(_QWORD *)v98 = a2;
    v99 = v98 + 8;
  }
  v96[8] = v99;
  v118 = (char *)v96[11];
  v117 = v96[12];
  if ((unint64_t)v118 >= v117)
  {
    v120 = (char *)v96[10];
    v121 = (v118 - v120) >> 3;
    v122 = v121 + 1;
    if ((unint64_t)(v121 + 1) >> 61)
      sub_1BE61F930();
    v123 = v117 - (_QWORD)v120;
    if (v123 >> 2 > v122)
      v122 = v123 >> 2;
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
      v124 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v124 = v122;
    if (v124)
    {
      if (v124 >> 61)
        sub_1BE61F100();
      v125 = operator new(8 * v124);
    }
    else
    {
      v125 = 0;
    }
    v126 = &v125[8 * v121];
    *v126 = -1;
    v119 = v126 + 1;
    if (v118 != v120)
    {
      v127 = v118 - v120 - 8;
      if (v127 < 0x58)
        goto LABEL_587;
      if ((unint64_t)(v120 - v125) < 0x20)
        goto LABEL_587;
      v128 = (v127 >> 3) + 1;
      v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      v130 = &v118[-v129];
      v126 = (_QWORD *)((char *)v126 - v129);
      v131 = &v125[8 * v121 - 16];
      v132 = v118 - 16;
      v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v134 = *(_OWORD *)v132;
        *(v131 - 1) = *((_OWORD *)v132 - 1);
        *v131 = v134;
        v131 -= 2;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      v118 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_587:
        do
        {
          v135 = *((_QWORD *)v118 - 1);
          v118 -= 8;
          *--v126 = v135;
        }
        while (v118 != v120);
      }
    }
    v96[10] = v126;
    v96[11] = v119;
    v96[12] = &v125[8 * v124];
    if (v120)
      operator delete(v120);
  }
  else
  {
    *(_QWORD *)v118 = -1;
    v119 = v118 + 8;
  }
  v96[11] = v119;
  v136 = operator new(0x18uLL);
  v391 = 0;
  v137 = v400;
  v136[1] = &v400;
  v136[2] = v96;
  *v136 = v137;
  v137[1] = v136;
  v138 = v402 + 1;
  v139 = v402 == -1;
  v400 = v136;
  ++v402;
  v140 = v405;
  if (v405 < v389 && !v139)
  {
    v391 = 0;
    v141 = 0;
    v142 = 0;
    v386 = 0;
    do
    {
      v143 = (_QWORD **)v400;
      v144 = *((_QWORD *)v400 + 2);
      v145 = *(_QWORD *)(*(_QWORD *)(v144 + 64) - 8);
      v146 = *(_QWORD *)v400;
      *(_QWORD *)(v146 + 8) = *((_QWORD *)v400 + 1);
      *v143[1] = v146;
      v402 = v138 - 1;
      operator delete(v143);
      if (v145 == v394)
      {
        sub_1BE8342FC((uint64_t)&v403, v144, *(double *)(v144 + 104));
        v140 = v405;
        if (v405 >= v389)
          break;
      }
      else
      {
        v147 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(v147 + 40 * v145))
          v148 = v412 == 0;
        else
          v148 = 1;
        if (!v148)
        {
          v159 = 0;
          while (1)
          {
            v161 = v412;
            if (!v412)
              goto LABEL_201;
            v162 = &v412;
            v163 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 72 * (*(_QWORD *)(v147 + 40 * v145 + 16) + v159));
            v164 = *v163;
            v165 = v163[1];
            do
            {
              v166 = v161;
              v167 = v162;
              v168 = v161[4];
              v169 = v161 + 1;
              if (v168 >= v165)
              {
                v169 = v166;
                v162 = (_QWORD **)v166;
              }
              v161 = (_QWORD *)*v169;
            }
            while (v161);
            if (v162 == &v412)
              goto LABEL_201;
            if (v168 < v165)
              v166 = v167;
            if (v165 < v166[4])
              goto LABEL_201;
            v170 = operator new();
            sub_1BE835CF4(v170, v144);
            sub_1BE834394(v170, v164, v159, a11, v392, v395, v393, a16, 1.79769313e308, a17, a15);
            if (*(double *)(v170 + 104) >= 1.79769313e308)
            {
              v160 = sub_1BE670A58(v170);
              MEMORY[0x1C3B812EC](v160, 0x10F0C40BCF8F641);
            }
            else
            {
              if (v165 == v394)
              {
                v171 = v392;
                v177 = v393;
                if (a18)
                {
                  if (!*(_QWORD *)(v170 + 216))
                    goto LABEL_217;
                  if (LXCursorHasChildren())
                  {
                    v178 = -2.0;
                    if (*(_QWORD *)(v170 + 216))
                      goto LABEL_220;
LABEL_217:
                    if (*(_QWORD *)(v170 + 208))
                    {
                      if (LXCursorHasEntries())
                      {
                        LXCursorTerminationProbability();
LABEL_220:
                        *(double *)(v170 + 120) = *(double *)(v170 + 120) - v178;
                        v179 = *(void **)(v170 + 224);
                        if (v179)
                        {
LABEL_221:
                          if ((objc_msgSend_isCompletePattern(v179, v172, v173, v174, v175, v176) & 1) == 0)
                            *(double *)(v170 + 184) = *(double *)(v170 + 184) + 15.654;
                        }
                      }
                      else
                      {
                        *(double *)(v170 + 120) = *(double *)(v170 + 120) - -6.0;
                        v179 = *(void **)(v170 + 224);
                        if (v179)
                          goto LABEL_221;
                      }
                    }
                    else
                    {
                      *(double *)(v170 + 120) = *(double *)(v170 + 120) - -2.0;
                      v179 = *(void **)(v170 + 224);
                      if (v179)
                        goto LABEL_221;
                    }
                  }
                  else
                  {
                    *(double *)(v170 + 120) = *(double *)(v170 + 120) - 0.0;
                    v179 = *(void **)(v170 + 224);
                    if (v179)
                      goto LABEL_221;
                  }
                }
                *(double *)(v170 + 104) = (*((double (**)(id, uint64_t))v393 + 2))(v177, v170);
                sub_1BE8367B8(v170, v171);

                sub_1BE8342FC((uint64_t)&v403, v170, *(double *)(v170 + 104));
                goto LABEL_201;
              }
              if (v391 >= v386)
              {
                v180 = v391 - v141;
                v181 = v180 + 1;
                if ((unint64_t)(v180 + 1) >> 61)
                  sub_1BE61F930();
                if (((char *)v386 - (char *)v141) >> 2 > v181)
                  v181 = ((char *)v386 - (char *)v141) >> 2;
                if ((unint64_t)((char *)v386 - (char *)v141) >= 0x7FFFFFFFFFFFFFF8)
                  v182 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v182 = v181;
                if (v182)
                {
                  if (v182 >> 61)
                    sub_1BE61F100();
                  v183 = v182;
                  v184 = operator new(8 * v182);
                  v182 = v183;
                  v185 = (uint64_t *)&v184[8 * v180];
                  *v185 = v170;
                  v142 = (uint64_t)(v185 + 1);
                  v186 = (char *)v391 - (char *)v141;
                  if (v391 != v141)
                  {
LABEL_234:
                    v187 = v186 - 8;
                    if (v187 < 0x168
                      || (v190 = ((char *)(v391 - 1) - (char *)v141) & 0xFFFFFFFFFFFFFFF8,
                          &v184[(char *)v391 - (char *)v141 - 8 - v190] > &v184[(char *)v391 - (char *)v141 - 8])
                      || (uint64_t *)((char *)v391 - v190 - 8) > v391 - 1)
                    {
                      v188 = v391;
                    }
                    else
                    {
                      if ((unint64_t)((char *)v141 - v184) < 0x20)
                      {
                        v188 = v391;
                        goto LABEL_236;
                      }
                      v191 = (v187 >> 3) + 1;
                      v192 = 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
                      v188 = &v391[v192 / 0xFFFFFFFFFFFFFFF8];
                      v185 = (uint64_t *)((char *)v185 - v192);
                      v193 = &v184[8 * v180 - 16];
                      v194 = v391 - 2;
                      v195 = v191 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v196 = *(_OWORD *)v194;
                        *(v193 - 1) = *((_OWORD *)v194 - 1);
                        *v193 = v196;
                        v193 -= 2;
                        v194 -= 4;
                        v195 -= 4;
                      }
                      while (v195);
                      if (v191 == (v191 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_237:
                        v386 = (uint64_t *)&v184[8 * v182];
                        if (v141)
                          goto LABEL_238;
                        goto LABEL_239;
                      }
                    }
                    do
                    {
LABEL_236:
                      v189 = *--v188;
                      *--v185 = v189;
                    }
                    while (v188 != v141);
                    goto LABEL_237;
                  }
                }
                else
                {
                  v184 = 0;
                  v185 = (uint64_t *)(8 * v180);
                  *(_QWORD *)(8 * v180) = v170;
                  v142 = 8 * v180 + 8;
                  v186 = (char *)v391 - (char *)v141;
                  if (v391 != v141)
                    goto LABEL_234;
                }
                v386 = (uint64_t *)&v184[8 * v182];
                if (v141)
LABEL_238:
                  operator delete(v141);
LABEL_239:
                v141 = v185;
                v391 = (uint64_t *)v142;
                goto LABEL_201;
              }
              *v391 = v170;
              v142 = (uint64_t)++v391;
            }
LABEL_201:
            ++v159;
            v147 = *(_QWORD *)(a1 + 32);
            v149 = (uint64_t)v141;
            if (v159 >= *(_QWORD *)(v147 + 40 * v145))
              goto LABEL_192;
          }
        }
        v149 = (uint64_t)v391;
LABEL_192:
        v150 = 126 - 2 * __clz(((uint64_t)v391 - v149) >> 3);
        *(_QWORD *)buf = sub_1BE834E78;
        if (v391 == (uint64_t *)v149)
          v151 = 0;
        else
          v151 = v150;
        sub_1BE839398(v149, v391, (uint64_t (**)(uint64_t *, uint64_t *))buf, v151, 1);
        if ((uint64_t *)v142 != v141)
        {
          v152 = operator new(0x18uLL);
          v153 = v152;
          *v152 = 0;
          v152[1] = 0;
          v155 = *(_QWORD *)(v142 - 8);
          v154 = (uint64_t *)(v142 - 8);
          v152[2] = v155;
          if (v154 == v141)
          {
            v156 = 1;
          }
          else
          {
            v156 = 1;
            v157 = v152;
            do
            {
              v152 = operator new(0x18uLL);
              *v152 = v157;
              v152[1] = 0;
              v158 = *--v154;
              v152[2] = v158;
              v157[1] = v152;
              ++v156;
              v157 = v152;
            }
            while (v154 != v141);
          }
          v197 = v400;
          *((_QWORD *)v400 + 1) = v153;
          *v153 = v197;
          v152[1] = &v400;
          v400 = v152;
          v402 += v156;
        }
        if (v144)
        {
          v198 = sub_1BE670A58(v144);
          MEMORY[0x1C3B812EC](v198, 0x10F0C40BCF8F641);
        }
        v142 = (uint64_t)v141;
        v391 = v141;
        v140 = v405;
        if (v405 >= v389)
          break;
      }
      v138 = v402;
    }
    while (v402);
  }
  if (v407)
  {
    v100 = *(double *)&v406[2 * v407];
    v199 = v391;
    if (!v391)
      goto LABEL_265;
    goto LABEL_264;
  }
  if ((_BYTE)v403)
    v100 = -2147483650.0;
  else
    v100 = 2147483650.0;
  v199 = v391;
  if (v391)
  {
LABEL_264:
    operator delete(v199);
    v140 = v405;
  }
LABEL_265:
  if (v140 < v389)
    goto LABEL_540;
LABEL_266:
  v200 = operator new();
  *(_WORD *)v200 = 1;
  *(_QWORD *)(v200 + 8) = v381;
  *(_QWORD *)(v200 + 16) = 0;
  v201 = (_QWORD *)operator new[]();
  *v201 = 16;
  v201[1] = v381 + 2;
  v202 = v201 + 2;
  if (v381 != -2)
    bzero(v201 + 2, 16 * v381 + 32);
  *(_QWORD *)(v200 + 24) = v202;
  *(_QWORD *)(v200 + 32) = 0;
  if (a12)
  {
    if (v402)
    {
      v383 = 2;
      do
      {
        sub_1BE8342FC(v200, *((_QWORD *)v400 + 2), *(double *)(*((_QWORD *)v400 + 2) + 104));
        v203 = (_QWORD **)v400;
        v204 = *(_QWORD *)v400;
        *(_QWORD *)(v204 + 8) = *((_QWORD *)v400 + 1);
        *v203[1] = v204;
        --v402;
        operator delete(v203);
      }
      while (v402);
      v205 = 0;
    }
    else
    {
      v205 = 0;
      v383 = 2;
    }
    goto LABEL_328;
  }
  v206 = operator new();
  *(_WORD *)v206 = 1;
  *(_QWORD *)(v206 + 8) = v389;
  *(_QWORD *)(v206 + 16) = 0;
  v207 = (_QWORD *)operator new[]();
  *v207 = 16;
  v207[1] = v381 + 2;
  v208 = v207 + 2;
  if (v381 != -2)
    bzero(v207 + 2, 16 * v389 + 32);
  *(_QWORD *)(v206 + 24) = v208;
  *(_QWORD *)(v206 + 32) = 0;
  v209 = v206;
  v210 = operator new();
  sub_1BE836174(v210, a1, a5, a6, v382, a10);
  v212 = *(char **)(v210 + 64);
  v211 = *(_QWORD *)(v210 + 72);
  if ((unint64_t)v212 < v211)
  {
    *(_QWORD *)v212 = a2;
    v213 = v212 + 8;
    v205 = v206;
    goto LABEL_304;
  }
  v214 = *(char **)(v210 + 56);
  v215 = (v212 - v214) >> 3;
  v216 = v215 + 1;
  if ((unint64_t)(v215 + 1) >> 61)
    sub_1BE61F930();
  v217 = v211 - (_QWORD)v214;
  if (v217 >> 2 > v216)
    v216 = v217 >> 2;
  if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
    v218 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v218 = v216;
  if (v218)
  {
    if (v218 >> 61)
      sub_1BE61F100();
    v219 = operator new(8 * v218);
  }
  else
  {
    v219 = 0;
  }
  v220 = &v219[8 * v215];
  v221 = &v219[8 * v218];
  *v220 = a2;
  v213 = v220 + 1;
  if (v212 == v214)
  {
    v205 = v209;
    goto LABEL_302;
  }
  v222 = v212 - v214 - 8;
  if (v222 < 0x58)
  {
    v205 = v209;
    do
    {
LABEL_301:
      v230 = *((_QWORD *)v212 - 1);
      v212 -= 8;
      *--v220 = v230;
    }
    while (v212 != v214);
    goto LABEL_302;
  }
  v205 = v209;
  if ((unint64_t)(v214 - v219) < 0x20)
    goto LABEL_301;
  v223 = (v222 >> 3) + 1;
  v224 = 8 * (v223 & 0x3FFFFFFFFFFFFFFCLL);
  v225 = &v212[-v224];
  v220 = (_QWORD *)((char *)v220 - v224);
  v226 = &v219[8 * v215 - 16];
  v227 = v212 - 16;
  v228 = v223 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v229 = *(_OWORD *)v227;
    *(v226 - 1) = *((_OWORD *)v227 - 1);
    *v226 = v229;
    v226 -= 2;
    v227 -= 32;
    v228 -= 4;
  }
  while (v228);
  v212 = v225;
  if (v223 != (v223 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_301;
LABEL_302:
  *(_QWORD *)(v210 + 56) = v220;
  *(_QWORD *)(v210 + 64) = v213;
  *(_QWORD *)(v210 + 72) = v221;
  if (v214)
    operator delete(v214);
LABEL_304:
  *(_QWORD *)(v210 + 64) = v213;
  v232 = *(char **)(v210 + 88);
  v231 = *(_QWORD *)(v210 + 96);
  if ((unint64_t)v232 >= v231)
  {
    v234 = *(char **)(v210 + 80);
    v235 = (v232 - v234) >> 3;
    v236 = v235 + 1;
    if ((unint64_t)(v235 + 1) >> 61)
      sub_1BE61F930();
    v237 = v231 - (_QWORD)v234;
    if (v237 >> 2 > v236)
      v236 = v237 >> 2;
    if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
      v238 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v238 = v236;
    if (v238)
    {
      if (v238 >> 61)
        sub_1BE61F100();
      v239 = operator new(8 * v238);
    }
    else
    {
      v239 = 0;
    }
    v240 = &v239[8 * v235];
    v241 = &v239[8 * v238];
    *v240 = -1;
    v233 = v240 + 1;
    if (v232 == v234)
    {
      v205 = v209;
      goto LABEL_325;
    }
    v242 = v232 - v234 - 8;
    if (v242 >= 0x58)
    {
      v205 = v209;
      if ((unint64_t)(v234 - v239) >= 0x20)
      {
        v243 = (v242 >> 3) + 1;
        v244 = 8 * (v243 & 0x3FFFFFFFFFFFFFFCLL);
        v245 = &v232[-v244];
        v240 = (_QWORD *)((char *)v240 - v244);
        v246 = &v239[8 * v235 - 16];
        v247 = v232 - 16;
        v248 = v243 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v249 = *(_OWORD *)v247;
          *(v246 - 1) = *((_OWORD *)v247 - 1);
          *v246 = v249;
          v246 -= 2;
          v247 -= 32;
          v248 -= 4;
        }
        while (v248);
        v232 = v245;
        if (v243 == (v243 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_325:
          *(_QWORD *)(v210 + 80) = v240;
          *(_QWORD *)(v210 + 88) = v233;
          *(_QWORD *)(v210 + 96) = v241;
          if (v234)
            operator delete(v234);
          goto LABEL_327;
        }
      }
    }
    else
    {
      v205 = v209;
    }
    do
    {
      v250 = *((_QWORD *)v232 - 1);
      v232 -= 8;
      *--v240 = v250;
    }
    while (v232 != v234);
    goto LABEL_325;
  }
  *(_QWORD *)v232 = -1;
  v233 = v232 + 8;
LABEL_327:
  *(_QWORD *)(v210 + 88) = v233;
  sub_1BE8342FC(v200, v210, *(double *)(v210 + 104));
LABEL_328:
  v251 = 0;
  do
  {
    v252 = *(_QWORD *)(v200 + 16);
    if (!v252)
      goto LABEL_534;
    v385 = v251;
    v387 = v205;
    if (a12)
      v253 = (unsigned __int8 *)v200;
    else
      v253 = (unsigned __int8 *)v205;
    v390 = v253;
    while (1)
    {
LABEL_335:
      v254 = *(_QWORD *)(v200 + 24);
      v255 = *(_QWORD *)(v254 + 24);
      v256 = *(_QWORD *)(*(_QWORD *)(v255 + 64) - 8);
      v257 = v252 - 1;
      *(_QWORD *)(v200 + 16) = v252 - 1;
      if (v252 == 1)
      {
        if (*(_QWORD *)(v200 + 32) == 1)
          *(_QWORD *)(v200 + 32) = v257;
        goto LABEL_370;
      }
      v258 = v254 + 16 * v252;
      v259 = *(double *)v258;
      *(_QWORD *)(v254 + 16) = *(_QWORD *)v258;
      v260 = *(_QWORD *)(v258 + 8);
      *(_QWORD *)(v254 + 24) = v260;
      v261 = v257 >> 1;
      if (v252 < 3)
      {
        if (*(_QWORD *)(v200 + 32) != 2)
          goto LABEL_370;
LABEL_360:
        *(_QWORD *)(v200 + 32) = v257;
        v269 = v252 - 2;
        if (v252 - 2 > v261)
        {
          if (*(_BYTE *)v200)
          {
            v270 = (double *)(v254 + 16 * v252 - 32);
            do
            {
              if (*v270 > *(double *)(v254 + 16 * v257))
              {
                *(_QWORD *)(v200 + 32) = v269;
                v257 = v269;
              }
              --v269;
              v270 -= 2;
            }
            while (v269 > v261);
          }
          else
          {
            v271 = (double *)(v254 + 16 * v252 - 32);
            do
            {
              if (*v271 < *(double *)(v254 + 16 * v257))
              {
                *(_QWORD *)(v200 + 32) = v269;
                v257 = v269;
              }
              --v269;
              v271 -= 2;
            }
            while (v269 > v261);
          }
        }
        goto LABEL_370;
      }
      if (*(_BYTE *)v200)
      {
        v262 = 1;
        while (1)
        {
          v263 = 2 * v262;
          if (2 * v262 < v257 && *(double *)(v254 + 16 * (v263 | 1)) < *(double *)(v254 + 32 * v262))
            v263 |= 1uLL;
          v264 = v254 + 16 * v263;
          if (*(double *)v264 >= v259)
            break;
          if (v262 != v263)
          {
            v265 = (_QWORD *)(v254 + 16 * v262);
            *v265 = *(_QWORD *)v264;
            v265[1] = *(_QWORD *)(v264 + 8);
          }
          v262 = v263;
          if (v263 > v261)
            goto LABEL_359;
        }
      }
      else
      {
        v262 = 1;
        while (1)
        {
          v263 = 2 * v262;
          if (2 * v262 < v257 && *(double *)(v254 + 16 * (v263 | 1)) > *(double *)(v254 + 32 * v262))
            v263 |= 1uLL;
          v266 = v254 + 16 * v263;
          if (*(double *)v266 <= v259)
            break;
          if (v262 != v263)
          {
            v267 = (_QWORD *)(v254 + 16 * v262);
            *v267 = *(_QWORD *)v266;
            v267[1] = *(_QWORD *)(v266 + 8);
          }
          v262 = v263;
          if (v263 > v261)
            goto LABEL_359;
        }
      }
      v263 = v262;
LABEL_359:
      v268 = v254 + 16 * v263;
      *(double *)v268 = v259;
      *(_QWORD *)(v268 + 8) = v260;
      if (*(_QWORD *)(v200 + 32) == v252)
        goto LABEL_360;
LABEL_370:
      v272 = *(double *)(v255 + 104);
      if (v256 != v394)
        break;
      if (v272 < v100)
      {
        v273 = operator new();
        sub_1BE835CF4(v273, v255);
        v274 = *(double *)(v255 + 104);
        if (v405 != v404)
        {
          sub_1BE8364B0((unsigned __int8 *)&v403, v273, v274);
          goto LABEL_519;
        }
        if (v407)
        {
          v275 = v406[2 * v407 + 1];
          if ((sub_1BE8364B0((unsigned __int8 *)&v403, v273, v274) & 1) != 0)
          {
            v273 = v275;
            if (!v275)
            {
LABEL_519:
              if (v405 == v404)
              {
                if (v407)
                {
                  v100 = *(double *)&v406[2 * v407];
                }
                else if ((_BYTE)v403)
                {
                  v100 = -2147483650.0;
                }
                else
                {
                  v100 = 2147483650.0;
                }
              }
              goto LABEL_525;
            }
          }
        }
        else if ((sub_1BE8364B0((unsigned __int8 *)&v403, v273, v274) & 1) != 0)
        {
          goto LABEL_519;
        }
        v347 = sub_1BE670A58(v273);
        MEMORY[0x1C3B812EC](v347, 0x10F0C40BCF8F641);
        goto LABEL_519;
      }
LABEL_525:
      v348 = sub_1BE670A58(v255);
      MEMORY[0x1C3B812EC](v348, 0x10F0C40BCF8F641);
      v252 = *(_QWORD *)(v200 + 16);
      if (!v252)
        goto LABEL_526;
    }
    if (v272 >= v100)
      goto LABEL_525;
    v276 = *(_QWORD *)(a1 + 32);
    if (!*(_QWORD *)(v276 + 40 * v256))
      goto LABEL_525;
    v277 = 0;
    v278 = a1;
    while (2)
    {
      v280 = *(_QWORD *)(v276 + 40 * v256 + 16) + v277;
      v281 = *(_QWORD *)(v278 + 80);
      v282 = (uint64_t *)(v281 + 72 * v280);
      if (v256 != *v282)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v283 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v283, OS_LOG_TYPE_FAULT))
        {
          v284 = *v282;
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v284;
          v419 = 2048;
          v420 = v256;
          _os_log_impl(&dword_1BE607000, v283, OS_LOG_TYPE_FAULT, "Inconsistent network structure: edge with start node %zu belong in output edges of node %zu \n", buf, 0x16u);
        }

      }
      v285 = v412;
      if (v412)
      {
        v286 = *(_QWORD *)(v281 + 72 * v280 + 8);
        v287 = &v412;
        v288 = v412;
        do
        {
          v289 = v288;
          v290 = v287;
          v291 = v288[4];
          if (v291 >= v286)
            v287 = (_QWORD **)v288;
          else
            ++v288;
          v288 = (_QWORD *)*v288;
        }
        while (v288);
        if (v287 != &v412)
        {
          if (v291 < v286)
            v289 = v290;
          if (v286 >= v289[4])
          {
            do
            {
              while (1)
              {
                v292 = v285;
                v293 = v285[4];
                if (v286 < v293)
                  break;
                if (v293 >= v286)
                {
                  v307 = *((double *)v292 + 5);
                  goto LABEL_431;
                }
                v285 = (_QWORD *)v292[1];
                if (!v285)
                {
                  v294 = v292 + 1;
                  goto LABEL_405;
                }
              }
              v285 = (_QWORD *)*v292;
            }
            while (*v292);
            v294 = v292;
LABEL_405:
            v295 = operator new(0x30uLL);
            v295[4] = v286;
            v295[5] = 0;
            *v295 = 0;
            v295[1] = 0;
            v295[2] = v292;
            *v294 = v295;
            if (*v411)
            {
              v411 = (_QWORD *)*v411;
              v295 = (_QWORD *)*v294;
            }
            v296 = v412;
            v148 = v295 == v412;
            *((_BYTE *)v295 + 24) = v295 == v412;
            if (!v148)
            {
              do
              {
                v297 = v295[2];
                if (*(_BYTE *)(v297 + 24))
                  break;
                v298 = *(_QWORD **)(v297 + 16);
                v299 = *v298;
                if (*v298 == v297)
                {
                  v302 = v298[1];
                  if (!v302 || (v303 = *(unsigned __int8 *)(v302 + 24), v300 = (_BYTE *)(v302 + 24), v303))
                  {
                    if (*(_QWORD **)v297 == v295)
                    {
                      *(_BYTE *)(v297 + 24) = 1;
                      *((_BYTE *)v298 + 24) = 0;
                      v306 = *(_QWORD *)(v297 + 8);
                      *v298 = v306;
                      if (v306)
                        goto LABEL_422;
                    }
                    else
                    {
                      v304 = *(uint64_t **)(v297 + 8);
                      v305 = *v304;
                      *(_QWORD *)(v297 + 8) = *v304;
                      if (v305)
                      {
                        *(_QWORD *)(v305 + 16) = v297;
                        v298 = *(_QWORD **)(v297 + 16);
                      }
                      v304[2] = (uint64_t)v298;
                      *(_QWORD *)(*(_QWORD *)(v297 + 16) + 8 * (**(_QWORD **)(v297 + 16) != v297)) = v304;
                      *v304 = v297;
                      *(_QWORD *)(v297 + 16) = v304;
                      v298 = (_QWORD *)v304[2];
                      v297 = *v298;
                      *((_BYTE *)v304 + 24) = 1;
                      *((_BYTE *)v298 + 24) = 0;
                      v306 = *(_QWORD *)(v297 + 8);
                      *v298 = v306;
                      if (v306)
LABEL_422:
                        *(_QWORD *)(v306 + 16) = v298;
                    }
                    *(_QWORD *)(v297 + 16) = v298[2];
                    *(_QWORD *)(v298[2] + 8 * (*(_QWORD *)v298[2] != (_QWORD)v298)) = v297;
                    *(_QWORD *)(v297 + 8) = v298;
LABEL_429:
                    v298[2] = v297;
                    break;
                  }
                }
                else if (!v299 || (v301 = *(unsigned __int8 *)(v299 + 24), v300 = (_BYTE *)(v299 + 24), v301))
                {
                  if (*(_QWORD **)v297 == v295)
                  {
                    v339 = v295[1];
                    *(_QWORD *)v297 = v339;
                    if (v339)
                    {
                      *(_QWORD *)(v339 + 16) = v297;
                      v298 = *(_QWORD **)(v297 + 16);
                    }
                    v295[2] = v298;
                    *(_QWORD *)(*(_QWORD *)(v297 + 16) + 8 * (**(_QWORD **)(v297 + 16) != v297)) = v295;
                    v295[1] = v297;
                    *(_QWORD *)(v297 + 16) = v295;
                    v298 = (_QWORD *)v295[2];
                    *((_BYTE *)v295 + 24) = 1;
                    *((_BYTE *)v298 + 24) = 0;
                    v297 = v298[1];
                    v308 = *(_QWORD **)v297;
                    v298[1] = *(_QWORD *)v297;
                    if (v308)
LABEL_427:
                      v308[2] = v298;
                  }
                  else
                  {
                    *(_BYTE *)(v297 + 24) = 1;
                    *((_BYTE *)v298 + 24) = 0;
                    v297 = v298[1];
                    v308 = *(_QWORD **)v297;
                    v298[1] = *(_QWORD *)v297;
                    if (v308)
                      goto LABEL_427;
                  }
                  *(_QWORD *)(v297 + 16) = v298[2];
                  *(_QWORD *)(v298[2] + 8 * (*(_QWORD *)v298[2] != (_QWORD)v298)) = v297;
                  *(_QWORD *)v297 = v298;
                  goto LABEL_429;
                }
                *(_BYTE *)(v297 + 24) = 1;
                v295 = v298;
                *((_BYTE *)v298 + 24) = v298 == v296;
                *v300 = 1;
              }
              while (v298 != v296);
            }
            ++v413;
            v307 = 0.0;
LABEL_431:
            v309 = operator new();
            sub_1BE835CF4(v309, v255);
            v310 = v100 - v307;
            sub_1BE834394(v309, v256, v277, a11, v392, v395, v393, a16, v310, a17, a15);
            v311 = *(double *)(v309 + 104);
            if (v311 < v310)
            {
              if (v286 == v394)
              {
                v312 = v392;
                v318 = v393;
                if (a18)
                {
                  if (!*(_QWORD *)(v309 + 216))
                    goto LABEL_437;
                  if (LXCursorHasChildren())
                  {
                    v319 = -2.0;
                    if (*(_QWORD *)(v309 + 216))
                      goto LABEL_440;
LABEL_437:
                    if (*(_QWORD *)(v309 + 208))
                    {
                      if (LXCursorHasEntries())
                      {
                        LXCursorTerminationProbability();
LABEL_440:
                        *(double *)(v309 + 120) = *(double *)(v309 + 120) - v319;
                        v320 = *(void **)(v309 + 224);
                        if (v320)
                        {
LABEL_441:
                          if ((objc_msgSend_isCompletePattern(v320, v313, v314, v315, v316, v317) & 1) == 0)
                            *(double *)(v309 + 184) = *(double *)(v309 + 184) + 15.654;
                        }
                      }
                      else
                      {
                        *(double *)(v309 + 120) = *(double *)(v309 + 120) - -6.0;
                        v320 = *(void **)(v309 + 224);
                        if (v320)
                          goto LABEL_441;
                      }
                    }
                    else
                    {
                      *(double *)(v309 + 120) = *(double *)(v309 + 120) - -2.0;
                      v320 = *(void **)(v309 + 224);
                      if (v320)
                        goto LABEL_441;
                    }
                  }
                  else
                  {
                    *(double *)(v309 + 120) = *(double *)(v309 + 120) - 0.0;
                    v320 = *(void **)(v309 + 224);
                    if (v320)
                      goto LABEL_441;
                  }
                }
                *(double *)(v309 + 104) = (*((double (**)(id, uint64_t))v393 + 2))(v318, v309);
                sub_1BE8367B8(v309, v312);

                v343 = *(double *)(v309 + 104);
                if (v405 != v404)
                {
                  sub_1BE8364B0((unsigned __int8 *)&v403, v309, v343);
                  goto LABEL_502;
                }
                if (v407)
                {
                  v344 = v406[2 * v407 + 1];
                  if ((sub_1BE8364B0((unsigned __int8 *)&v403, v309, v343) & 1) != 0)
                  {
                    v309 = v344;
                    if (!v344)
                    {
LABEL_502:
                      if (v405 == v404)
                      {
                        if (v407)
                        {
                          v100 = *(double *)&v406[2 * v407];
                        }
                        else if ((_BYTE)v403)
                        {
                          v100 = -2147483650.0;
                        }
                        else
                        {
                          v100 = 2147483650.0;
                        }
                      }
                      goto LABEL_381;
                    }
                  }
                }
                else if ((sub_1BE8364B0((unsigned __int8 *)&v403, v309, v343) & 1) != 0)
                {
                  goto LABEL_502;
                }
                v345 = sub_1BE670A58(v309);
                MEMORY[0x1C3B812EC](v345, 0x10F0C40BCF8F641);
                goto LABEL_502;
              }
              v321 = v412;
              v322 = &v412;
LABEL_445:
              v323 = v322;
              if (v321)
              {
                while (1)
                {
                  v322 = (_QWORD **)v321;
                  v324 = v321[4];
                  if (v286 < v324)
                  {
                    v321 = *v322;
                    goto LABEL_445;
                  }
                  if (v324 >= v286)
                    break;
                  v321 = v322[1];
                  if (!v321)
                  {
                    v323 = v322 + 1;
                    goto LABEL_450;
                  }
                }
                v337 = v311 + *((double *)v322 + 5);
                v338 = v390;
                if (*((_QWORD *)v390 + 2) != *((_QWORD *)v390 + 1))
                  goto LABEL_470;
              }
              else
              {
LABEL_450:
                v325 = operator new(0x30uLL);
                v325[4] = v286;
                v325[5] = 0;
                *v325 = 0;
                v325[1] = 0;
                v325[2] = v322;
                *v323 = v325;
                if (*v411)
                {
                  v411 = (_QWORD *)*v411;
                  v325 = (_QWORD *)*v323;
                }
                v326 = v412;
                v148 = v325 == v412;
                *((_BYTE *)v325 + 24) = v325 == v412;
                if (!v148)
                {
                  do
                  {
                    v327 = v325[2];
                    if (*(_BYTE *)(v327 + 24))
                      break;
                    v328 = *(_QWORD **)(v327 + 16);
                    v329 = *v328;
                    if (*v328 == v327)
                    {
                      v332 = v328[1];
                      if (!v332 || (v333 = *(unsigned __int8 *)(v332 + 24), v330 = (_BYTE *)(v332 + 24), v333))
                      {
                        if (*(_QWORD **)v327 == v325)
                        {
                          *(_BYTE *)(v327 + 24) = 1;
                          *((_BYTE *)v328 + 24) = 0;
                          v336 = *(_QWORD *)(v327 + 8);
                          *v328 = v336;
                          if (v336)
                            goto LABEL_467;
                        }
                        else
                        {
                          v334 = *(uint64_t **)(v327 + 8);
                          v335 = *v334;
                          *(_QWORD *)(v327 + 8) = *v334;
                          if (v335)
                          {
                            *(_QWORD *)(v335 + 16) = v327;
                            v328 = *(_QWORD **)(v327 + 16);
                          }
                          v334[2] = (uint64_t)v328;
                          *(_QWORD *)(*(_QWORD *)(v327 + 16) + 8 * (**(_QWORD **)(v327 + 16) != v327)) = v334;
                          *v334 = v327;
                          *(_QWORD *)(v327 + 16) = v334;
                          v328 = (_QWORD *)v334[2];
                          v327 = *v328;
                          *((_BYTE *)v334 + 24) = 1;
                          *((_BYTE *)v328 + 24) = 0;
                          v336 = *(_QWORD *)(v327 + 8);
                          *v328 = v336;
                          if (v336)
LABEL_467:
                            *(_QWORD *)(v336 + 16) = v328;
                        }
                        *(_QWORD *)(v327 + 16) = v328[2];
                        *(_QWORD *)(v328[2] + 8 * (*(_QWORD *)v328[2] != (_QWORD)v328)) = v327;
                        *(_QWORD *)(v327 + 8) = v328;
LABEL_479:
                        v328[2] = v327;
                        break;
                      }
                    }
                    else if (!v329 || (v331 = *(unsigned __int8 *)(v329 + 24), v330 = (_BYTE *)(v329 + 24), v331))
                    {
                      if (*(_QWORD **)v327 == v325)
                      {
                        v346 = v325[1];
                        *(_QWORD *)v327 = v346;
                        if (v346)
                        {
                          *(_QWORD *)(v346 + 16) = v327;
                          v328 = *(_QWORD **)(v327 + 16);
                        }
                        v325[2] = v328;
                        *(_QWORD *)(*(_QWORD *)(v327 + 16) + 8 * (**(_QWORD **)(v327 + 16) != v327)) = v325;
                        v325[1] = v327;
                        *(_QWORD *)(v327 + 16) = v325;
                        v328 = (_QWORD *)v325[2];
                        *((_BYTE *)v325 + 24) = 1;
                        *((_BYTE *)v328 + 24) = 0;
                        v327 = v328[1];
                        v340 = *(_QWORD **)v327;
                        v328[1] = *(_QWORD *)v327;
                        if (v340)
LABEL_477:
                          v340[2] = v328;
                      }
                      else
                      {
                        *(_BYTE *)(v327 + 24) = 1;
                        *((_BYTE *)v328 + 24) = 0;
                        v327 = v328[1];
                        v340 = *(_QWORD **)v327;
                        v328[1] = *(_QWORD *)v327;
                        if (v340)
                          goto LABEL_477;
                      }
                      *(_QWORD *)(v327 + 16) = v328[2];
                      *(_QWORD *)(v328[2] + 8 * (*(_QWORD *)v328[2] != (_QWORD)v328)) = v327;
                      *(_QWORD *)v327 = v328;
                      goto LABEL_479;
                    }
                    *(_BYTE *)(v327 + 24) = 1;
                    v325 = v328;
                    *((_BYTE *)v328 + 24) = v328 == v326;
                    *v330 = 1;
                  }
                  while (v328 != v326);
                }
                ++v413;
                v337 = v311 + 0.0;
                v338 = v390;
                if (*((_QWORD *)v390 + 2) != *((_QWORD *)v390 + 1))
                {
LABEL_470:
                  sub_1BE8364B0(v338, v309, v337);
                  goto LABEL_381;
                }
              }
              v341 = *((_QWORD *)v338 + 4);
              if (v341)
              {
                v342 = *(_QWORD *)(*((_QWORD *)v338 + 3) + 16 * v341 + 8);
                if ((sub_1BE8364B0(v338, v309, v337) & 1) != 0)
                {
                  v309 = v342;
                  if (!v342)
                    goto LABEL_381;
                }
              }
              else if ((sub_1BE8364B0(v338, v309, v337) & 1) != 0)
              {
                goto LABEL_381;
              }
            }
            v279 = sub_1BE670A58(v309);
            MEMORY[0x1C3B812EC](v279, 0x10F0C40BCF8F641);
          }
        }
      }
LABEL_381:
      ++v277;
      v278 = a1;
      v276 = *(_QWORD *)(a1 + 32);
      if (v277 < *(_QWORD *)(v276 + 40 * v256))
        continue;
      break;
    }
    if (v255)
      goto LABEL_525;
    v252 = *(_QWORD *)(v200 + 16);
    if (v252)
      goto LABEL_335;
LABEL_526:
    v205 = v387;
    if (!a12)
      v205 = v200;
    v251 = v385 + 1;
    v200 = (uint64_t)v390;
  }
  while (v385 + 1 != v383);
  while (*((_QWORD *)v390 + 2))
  {
    v349 = *(_QWORD *)(*((_QWORD *)v390 + 3) + 24);
    sub_1BE83A5E8(&v399, (uint64_t)v390);
    if (v349)
    {
      v350 = sub_1BE670A58(v349);
      MEMORY[0x1C3B812EC](v350, 0x10F0C40BCF8F641);
    }
  }
  v200 = (uint64_t)v390;
LABEL_534:
  *(_QWORD *)(v200 + 16) = 0;
  *(_QWORD *)(v200 + 32) = 0;
  v351 = *(_QWORD *)(v200 + 24);
  if (v351)
  {
    MEMORY[0x1C3B812C8](v351 - 16, 0x1020C805730B0C9);
    *(_QWORD *)(v200 + 24) = 0;
  }
  MEMORY[0x1C3B812EC](v200, 0x1020C40C3F473B3);
  if (v205)
  {
    v352 = *(_QWORD *)(v205 + 24);
    if (v352)
    {
      MEMORY[0x1C3B812C8](v352 - 16, 0x1020C805730B0C9);
      *(_QWORD *)(v205 + 24) = 0;
    }
    MEMORY[0x1C3B812EC](v205, 0x1020C40C3F473B3);
  }
LABEL_540:
  while (v405)
  {
    v356 = v406[3];
    sub_1BE83A5E8(&v398, (uint64_t)&v403);
    sub_1BE835CF4((uint64_t)buf, v356);
    v358 = v388[1];
    v357 = v388[2];
    if (v358 >= v357)
    {
      v359 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v358 - *v388) >> 5);
      v360 = v359 + 1;
      if ((unint64_t)(v359 + 1) > 0x9D89D89D89D89DLL)
        sub_1BE61F930();
      v361 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v357 - *v388) >> 5);
      if (2 * v361 > v360)
        v360 = 2 * v361;
      if (v361 >= 0x4EC4EC4EC4EC4ELL)
        v362 = 0x9D89D89D89D89DLL;
      else
        v362 = v360;
      v417 = v388 + 2;
      if (v362)
      {
        if (v362 > 0x9D89D89D89D89DLL)
          sub_1BE61F100();
        v363 = (char *)operator new(416 * v362);
      }
      else
      {
        v363 = 0;
      }
      v414 = v363;
      v415 = &v363[416 * v359];
      *(_QWORD *)&v416 = v415;
      *((_QWORD *)&v416 + 1) = &v363[416 * v362];
      sub_1BE835CF4((uint64_t)v415, (uint64_t)buf);
      v364 = 0;
      v365 = (uint64_t)v415;
      *(_QWORD *)&v416 = v416 + 416;
      v367 = (void *)*v388;
      for (i = v388[1]; (void *)(i + v364) != v367; sub_1BE835CF4(v364 + v365, v364 + i))
        v364 -= 416;
      v368 = v365 + v364;
      v370 = (void *)*v388;
      v369 = v388[1];
      *v388 = v368;
      v397 = v416;
      for (*(_OWORD *)(v388 + 1) = v416; (void *)v369 != v370; v369 = sub_1BE670A58(v369 - 416))
        ;
      if (v370)
        operator delete(v370);
      v353 = v397;
      v354 = v388;
    }
    else
    {
      sub_1BE835CF4(v388[1], (uint64_t)buf);
      v353 = v358 + 416;
      v354 = v388;
      v388[1] = v358 + 416;
    }
    v354[1] = v353;
    sub_1BE670A58((uint64_t)buf);
    v355 = sub_1BE670A58(v356);
    MEMORY[0x1C3B812EC](v355, 0x10F0C40BCF8F641);
  }
  if (v402)
  {
    v372 = (_QWORD **)v400;
    v371 = v401;
    v373 = *v401;
    v373[1] = *((_QWORD *)v400 + 1);
    *v372[1] = v373;
    v402 = 0;
    if (v371 != &v400)
    {
      do
      {
        v374 = (void **)v371[1];
        operator delete(v371);
        v371 = v374;
      }
      while (v374 != &v400);
    }
  }
  if (v406)
    MEMORY[0x1C3B812C8](v406 - 2, 0x1020C805730B0C9);
  if (v410)
  {
    v376 = v408;
    v375 = __p;
    v377 = *(_QWORD *)__p;
    *(_QWORD *)(v377 + 8) = v408[1];
    *(_QWORD *)v376[1] = v377;
    v410 = 0;
    if (v375 != &v408)
    {
      do
      {
        v378 = (_QWORD *)v375[1];
        operator delete(v375);
        v375 = v378;
      }
      while (v378 != &v408);
    }
  }
  sub_1BE671438(v412);

}

void sub_1BE834034()
{
  uint64_t v0;

  MEMORY[0x1C3B812EC](v0, 0x1020C40C3F473B3);
  JUMPOUT(0x1BE8341D4);
}

void sub_1BE83407C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  if (v19)
    operator delete(v19);
  JUMPOUT(0x1BE8341D4);
}

void sub_1BE8340FC(void *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BE8342F4);
}

void sub_1BE834128()
{
  __cxa_end_catch();
  JUMPOUT(0x1BE834130);
}

void sub_1BE834140(void *a1, int a2)
{
  if (a2)
    sub_1BE61BEE4(a1);
  JUMPOUT(0x1BE8342F4);
}

void sub_1BE83415C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,uint64_t a51,_QWORD *a52)
{
  uint64_t v52;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  void *v65;

  MEMORY[0x1C3B812EC](v52, 0x10F0C40BCF8F641);
  if (a42)
  {
    v55 = a40;
    v54 = a41;
    v56 = *a41;
    *(_QWORD *)(v56 + 8) = *(_QWORD *)(a40 + 8);
    **(_QWORD **)(v55 + 8) = v56;
    a42 = 0;
    if (v54 != &a40)
    {
      do
      {
        v57 = (uint64_t *)v54[1];
        operator delete(v54);
        v54 = v57;
      }
      while (v57 != &a40);
    }
  }
  if (a46)
    MEMORY[0x1C3B812C8](a46 - 16, 0x1020C805730B0C9);
  if (a50)
  {
    v59 = a48;
    v58 = a49;
    v60 = *a49;
    *(_QWORD *)(v60 + 8) = *(_QWORD *)(a48 + 8);
    **(_QWORD **)(v59 + 8) = v60;
    a50 = 0;
    if (v58 != &a48)
    {
      do
      {
        v61 = (uint64_t *)v58[1];
        operator delete(v58);
        v58 = v61;
      }
      while (v61 != &a48);
    }
  }
  sub_1BE671438(a52);
  v62 = a19;
  v63 = (void *)*a19;
  if (*a19)
  {
    v64 = a19[1];
    v65 = (void *)*a19;
    if ((void *)v64 != v63)
    {
      do
        v64 = sub_1BE670A58(v64 - 416);
      while ((void *)v64 != v63);
      v62 = a19;
      v65 = (void *)*a19;
    }
    v62[1] = v63;
    operator delete(v65);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8342FC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 8))
    return sub_1BE8364B0((unsigned __int8 *)a1, a2, a3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v4 + 8);
    result = sub_1BE8364B0((unsigned __int8 *)a1, a2, a3);
    if ((result & 1) != 0)
    {
      if (v5)
      {
        v7 = v5;
LABEL_10:
        sub_1BE670A58(v7);
        JUMPOUT(0x1C3B812ECLL);
      }
      return result;
    }
  }
  else
  {
    result = sub_1BE8364B0((unsigned __int8 *)a1, a2, a3);
    if ((result & 1) != 0)
      return result;
  }
  if (a2)
  {
    v7 = a2;
    goto LABEL_10;
  }
  return result;
}

void sub_1BE834394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, char a8, double a9, char a10, char a11)
{
  id v18;
  double (**v19)(id, _QWORD);
  double (**v20)(id, _QWORD);
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _QWORD *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  double v73;
  double v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  __int16 v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  const void *v113;
  uint64_t v114;
  BOOL v115;
  _BOOL4 v116;
  uint64_t v117;
  double v118;
  const void *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  unint64_t v133;
  BOOL v135;
  BOOL v136;
  double v137;
  uint64_t v138;
  _BOOL4 v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  NSObject *v147;
  char v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  double (**v152)(id, _QWORD);
  uint64_t v153;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  unint64_t *v158;
  void *__p[2];
  uint64_t v160;
  void *v161;
  _BYTE *v162;

  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = v20[2](v20, a1);
  *(double *)(a1 + 104) = v21;
  if (v21 > a9)
    goto LABEL_173;
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 40 * a2 + 16) + a3;
  v24 = *(_QWORD *)(v22 + 80);
  v25 = v24 + 72 * v23;
  v26 = *(_QWORD *)(v25 + 8);
  v150 = (_QWORD *)(v25 + 8);
  v27 = *(_QWORD *)(v25 + 24);
  v152 = v19;
  v153 = (uint64_t)v18;
  if (*(_BYTE *)(v22 + 184))
  {
    if (v27)
    {
      ul2sh(v27, (uint64_t)__p);
      goto LABEL_9;
    }
    v28 = *(_QWORD *)(v22 + 136);
    if (*(char *)(v28 + 23) < 0)
      goto LABEL_8;
LABEL_6:
    v29 = *(_OWORD *)v28;
    v160 = *(_QWORD *)(v28 + 16);
    *(_OWORD *)__p = v29;
    goto LABEL_9;
  }
  v28 = *(_QWORD *)(v22 + 136) + 24 * v27;
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_6;
LABEL_8:
  sub_1BE61F128(__p, *(void **)v28, *(_QWORD *)(v28 + 8));
LABEL_9:
  sub_1BE7DC93C((uint64_t *)__p, (int **)&v161);
  v148 = a8;
  if (SHIBYTE(v160) < 0)
    operator delete(__p[0]);
  v30 = (v162 - (_BYTE *)v161) >> 2;
  if (!a10)
    v30 = 1;
  v151 = v30;
  v32 = *(char **)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 72);
  v155 = v24;
  v157 = v23;
  if ((unint64_t)v32 >= v31)
  {
    v36 = *(char **)(a1 + 56);
    v37 = (v32 - v36) >> 3;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      goto LABEL_174;
    v39 = v31 - (_QWORD)v36;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 61)
        goto LABEL_175;
      v41 = operator new(8 * v40);
      v42 = &v41[8 * v37];
      v43 = &v41[8 * v40];
      *v42 = v26;
      v44 = (uint64_t)(v42 + 1);
      v45 = v32 - v36;
      if (v32 == v36)
        goto LABEL_33;
    }
    else
    {
      v41 = 0;
      v42 = (_QWORD *)(8 * v37);
      v43 = 0;
      *(_QWORD *)(8 * v37) = v26;
      v44 = 8 * v37 + 8;
      v45 = v32 - v36;
      if (v32 == v36)
        goto LABEL_33;
    }
    v46 = v45 - 8;
    if (v46 < 0x58)
      goto LABEL_178;
    if ((unint64_t)(v36 - v41) < 0x20)
      goto LABEL_178;
    v47 = (v46 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v49 = &v32[-v48];
    v42 = (_QWORD *)((char *)v42 - v48);
    v50 = &v41[8 * v37 - 16];
    v51 = v32 - 16;
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    v32 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_178:
      do
      {
        v54 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *--v42 = v54;
      }
      while (v32 != v36);
    }
LABEL_33:
    *(_QWORD *)(a1 + 56) = v42;
    *(_QWORD *)(a1 + 64) = v44;
    *(_QWORD *)(a1 + 72) = v43;
    if (v36)
      operator delete(v36);
    *(_QWORD *)(a1 + 64) = v44;
    v34 = *(char **)(a1 + 88);
    v33 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v34 < v33)
      goto LABEL_15;
LABEL_36:
    v55 = *(char **)(a1 + 80);
    v56 = (v34 - v55) >> 3;
    v57 = v56 + 1;
    if (!((unint64_t)(v56 + 1) >> 61))
    {
      v58 = v33 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (!v59)
      {
        v60 = 0;
        v61 = (_QWORD *)(8 * v56);
        v62 = 0;
        *(_QWORD *)(8 * v56) = a3;
        v35 = 8 * v56 + 8;
        v63 = v34 - v55;
        if (v34 == v55)
          goto LABEL_53;
        goto LABEL_47;
      }
      if (!(v59 >> 61))
      {
        v60 = operator new(8 * v59);
        v61 = &v60[8 * v56];
        v62 = &v60[8 * v59];
        *v61 = a3;
        v35 = (uint64_t)(v61 + 1);
        v63 = v34 - v55;
        if (v34 == v55)
        {
LABEL_53:
          *(_QWORD *)(a1 + 80) = v61;
          *(_QWORD *)(a1 + 88) = v35;
          *(_QWORD *)(a1 + 96) = v62;
          if (v55)
            operator delete(v55);
          goto LABEL_55;
        }
LABEL_47:
        v64 = v63 - 8;
        if (v64 < 0x58)
          goto LABEL_179;
        if ((unint64_t)(v55 - v60) < 0x20)
          goto LABEL_179;
        v65 = (v64 >> 3) + 1;
        v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v34[-v66];
        v61 = (_QWORD *)((char *)v61 - v66);
        v68 = &v60[8 * v56 - 16];
        v69 = v34 - 16;
        v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 4;
        }
        while (v70);
        v34 = v67;
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_179:
          do
          {
            v72 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v61 = v72;
          }
          while (v34 != v55);
        }
        goto LABEL_53;
      }
LABEL_175:
      sub_1BE61F100();
    }
LABEL_174:
    sub_1BE61F930();
  }
  *(_QWORD *)v32 = v26;
  *(_QWORD *)(a1 + 64) = v32 + 8;
  v34 = *(char **)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v34 >= v33)
    goto LABEL_36;
LABEL_15:
  *(_QWORD *)v34 = a3;
  v35 = (uint64_t)(v34 + 8);
LABEL_55:
  *(_QWORD *)(a1 + 88) = v35;
  v73 = *(double *)(a1 + 136);
  *(double *)(a1 + 136) = v73 + v19[2](v19, v25);
  v158 = (unint64_t *)(v155 + 72 * v157 + 64);
  *(_QWORD *)(a1 + 200) += *v158;
  v74 = v20[2](v20, a1);
  *(double *)(a1 + 104) = v74;
  if (v74 > a9)
    goto LABEL_170;
  v79 = v20[2](v20, a1);
  *(double *)(a1 + 104) = v79;
  if (v79 > a9 || v151 == 0)
    goto LABEL_170;
  v81 = 0;
  v149 = v148 ^ 1 | a10;
  v82 = 0.0;
  v83 = 0.0;
  v84 = 0.0;
  while (1)
  {
    v85 = *((unsigned int *)v161 + v81);
    v86 = objc_msgSend_characterType_(CHCharacterSetRules, v75, v85, v76, v77, v78);
    unicodeToNSString(v85, v87, v88, v89, v90, v91);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = (v86 & 0x13) == 0;
    v98 = *(_QWORD *)(a1 + 56);
    v97 = *(_QWORD *)(a1 + 64);
    if ((v149 & 1) == 0)
    {
      v99 = *v158;
      v104 = v99
           - objc_msgSend_expectedMaxStrokeCount_(CHCharacterSetRules, v92, (unsigned __int16)v85, v93, v94, v95);
      if ((int)v104 >= 1)
        *(double *)(a1 + 152) = *(double *)(a1 + 152) + (double)(*v158 * v104);
      v105 = objc_msgSend_expectedMinStrokeCount_(CHCharacterSetRules, v100, (unsigned __int16)v85, v101, v102, v103)- *v158;
      v106 = *(double *)(a1 + 152);
      if ((int)v105 >= 1)
      {
        v106 = v106 + (double)(*v158 * v105);
        *(double *)(a1 + 152) = v106;
      }
      if (v106 > 15.654)
        *(_QWORD *)(a1 + 152) = 0x402F4ED916872B02;
      v107 = v20[2](v20, a1);
      *(double *)(a1 + 104) = v107;
      if (v107 > a9)
        break;
    }
    v108 = *(_QWORD *)(a1 + 224);
    if (v108)
    {
      v109 = (void *)objc_msgSend_newCursorByAdvancingWithSymbol_fromCursor_inNetwork_(CHPatternNetwork, v92, v85, v108, v153, v95);
      v110 = v109;
      if (v109)
        v111 = v109;
      v112 = *(void **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v110;

      v113 = *(const void **)(a1 + 216);
      v114 = v97 - v98;
      if (*(_QWORD *)(a1 + 224))
        v115 = 1;
      else
        v115 = v114 == 8;
      v116 = !v115;
      if (v113)
      {
LABEL_79:
        v117 = LXCursorCreateByAdvancing();
        CFRelease(v113);
        *(_QWORD *)(a1 + 216) = v117;
        goto LABEL_82;
      }
    }
    else
    {
      v114 = v97 - v98;
      v116 = v114 != 8;
      v113 = *(const void **)(a1 + 216);
      if (v113)
        goto LABEL_79;
    }
    v117 = 0;
LABEL_82:
    if (v117)
      v116 = 0;
    v118 = v20[2](v20, a1);
    *(double *)(a1 + 104) = v118;
    if (v118 > a9)
      break;
    v119 = *(const void **)(a1 + 208);
    if (v116)
    {
      if (v119)
      {
        CFRelease(*(CFTypeRef *)(a1 + 208));
        *(_QWORD *)(a1 + 208) = 0;
      }
LABEL_94:
      v82 = -15.654;
      if (*(_QWORD *)(a1 + 216))
      {
        v96 = 0;
        v82 = -0.0;
      }
      goto LABEL_96;
    }
    if (!v119)
      goto LABEL_94;
    v120 = LXCursorCreateByAdvancing();
    CFRelease(v119);
    *(_QWORD *)(a1 + 208) = v120;
    if (!v120)
      goto LABEL_94;
    if (!*(_QWORD *)(a1 + 216))
    {
      LXCursorConditionalProbability();
      if (v121 < 0.0)
        v82 = -v121;
    }
LABEL_96:
    if (v96)
      v82 = 1.30103;
    if ((v86 & 0x2000) == 0)
    {
      v122 = *(_QWORD *)(a1 + 240);
      v123 = *(_QWORD *)(a1 + 8);
      v124 = *(_QWORD *)(a1 + 32);
      if (v122 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v122 = v123 - v124;
        *(_QWORD *)(a1 + 240) = v123 - v124;
      }
      *(_QWORD *)(a1 + 248) = v123 - (v124 + v122) + 1;
    }
    if (v82 > 0.0 || *(_QWORD *)(a1 + 208) || *(_QWORD *)(a1 + 216))
      v125 = *(double *)(a1 + 120) + v82 * (double)*v158;
    else
      v125 = *(double *)(a1 + 120) + 15.654;
    *(double *)(a1 + 120) = v125;
    v130 = v20[2](v20, a1);
    *(double *)(a1 + 104) = v130;
    if (v130 > a9)
      break;
    if (a4)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 40 * *v150 + 32)
        && (*(_QWORD *)(a1 + 208) || *(_QWORD *)(a1 + 216))
        && (v86 & 0x20) != 0
        && !LXCursorIsRoot())
      {
        if (*(_QWORD *)(a1 + 208))
        {
          LXCursorTerminationProbability();
          if (fabs(v132) == INFINITY)
            v83 = -1.30103;
          else
            v83 = v132;
        }
        if (*(_QWORD *)(a1 + 216))
          v83 = 0.0;
        if (a11)
          goto LABEL_128;
LABEL_152:
        v137 = v84;
      }
      else
      {
        v83 = -1.30103;
        if (v96 || !*(_QWORD *)(a1 + 208) && (v83 = 0.0, *(_QWORD *)(a1 + 216)))
        {
          if (!a11)
            goto LABEL_152;
        }
        else
        {
          LMLanguageModelConditionalProbability();
          v83 = v131;
          if (!a11)
            goto LABEL_152;
        }
LABEL_128:
        if (v114 == 8)
          goto LABEL_152;
        v133 = objc_msgSend_characterType_(CHCharacterSetRules, v126, *(unsigned int *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8) - 4), v127, v128, v129);
        v135 = (v133 & 4) == 0 || (v86 & 3) == 0;
        v136 = (v133 & 3) == 0 || (v86 & 4) == 0;
        v137 = 16.0;
        if (v136 && v135)
        {
          v138 = (v133 >> 2) & 1;
          if ((v86 & 4) == 0)
            LODWORD(v138) = 1;
          v140 = (v86 & 3) == 0 || (v133 & 3) != 0;
          if ((v138 & v140) != 0)
            v137 = v84;
          else
            v137 = 8.0;
        }
      }
      *(double *)(a1 + 168) = *(double *)(a1 + 168) + v137 - v83 * (double)*v158;
      v141 = v20[2](v20, a1);
      *(double *)(a1 + 104) = v141;
      v84 = v137;
      if (v141 > a9)
        break;
    }
    v142 = 0.0;
    if (v116)
      v142 = 15.654;
    *(double *)(a1 + 184) = v142;
    v143 = v20[2](v20, a1);
    *(double *)(a1 + 104) = v143;
    if (v143 > a9)
      break;
    v144 = *(_QWORD *)(a1 + 8);
    v145 = *(void **)a1;
    if (v144 == *(_QWORD *)(a1 + 16))
    {
      v146 = *(_QWORD *)(a1 + 400) * (v144 - 5) + 5;
      *(_QWORD *)(a1 + 16) = v146;
      v145 = malloc_type_realloc(v145, 4 * v146, 0x100004052888210uLL);
      if (!v145)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v147 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BE607000, v147, OS_LOG_TYPE_ERROR, "Error: unable to reallocate memory for path expansion.", (uint8_t *)__p, 2u);
        }

        goto LABEL_161;
      }
      *(_QWORD *)a1 = v145;
      v144 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v144 + 1;
    *((_DWORD *)v145 + v144) = v85;
LABEL_161:

    if (v151 == ++v81)
      goto LABEL_170;
  }

LABEL_170:
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  v19 = v152;
  v18 = (id)v153;
LABEL_173:

}

void sub_1BE834DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_1BE834E78(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(_QWORD *)a1 + 104) < *(double *)(*(_QWORD *)a2 + 104);
}

uint64_t Network::deserialize(Network *this, const char *__filename)
{
  FILE *v4;
  BOOL v5;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void **v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  size_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t i;
  uint64_t v64;
  BOOL *v65;
  uint64_t v66;
  uint64_t **v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t **v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  size_t v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  char *v81;
  const char *v82;
  size_t v83;
  size_t v84;
  __int128 *p_buf;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  void *v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v94;
  char *v96;
  uint64_t v97;
  char *v98;
  void *v99;
  void *__dst[2];
  unint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  __int128 buf;
  unint64_t v107;
  _DWORD __ptr[3];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = fopen(__filename, "rb");
  fread(__ptr, 4uLL, 3uLL, v4);
  v5 = __ptr[0] > 1u || __ptr[1] >= 3u;
  if (v5)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v6 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = __filename;
      _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_ERROR, "Unsupported Network Version %s", (uint8_t *)&buf, 0xCu);
    }

    return fclose(v4);
  }
  v105 = 0;
  fread((char *)&v105 + 4, 4uLL, 1uLL, v4);
  v8 = (char *)*((_QWORD *)this + 10);
  v9 = (_BYTE *)*((_QWORD *)this + 11);
  v7 = (_QWORD *)((char *)this + 80);
  v10 = SHIDWORD(v105);
  v11 = (v9 - v8) >> 3;
  v12 = 0x8E38E38E38E38E39 * v11;
  v13 = SHIDWORD(v105) - 0x8E38E38E38E38E39 * v11;
  if (SHIDWORD(v105) <= 0x8E38E38E38E38E39 * v11)
  {
    if (SHIDWORD(v105) >= 0x8E38E38E38E38E39 * v11)
      goto LABEL_30;
    v24 = &v8[72 * SHIDWORD(v105)];
    goto LABEL_29;
  }
  v14 = *((_QWORD *)this + 12);
  if (0x8E38E38E38E38E39 * ((v14 - (uint64_t)v9) >> 3) >= v13)
  {
    v24 = &v9[72 * (72 * v13 / 0x48)];
LABEL_29:
    *((_QWORD *)this + 11) = v24;
    goto LABEL_30;
  }
  if (v105 < 0)
    sub_1BE61F930();
  v15 = 0x8E38E38E38E38E39 * ((v14 - (uint64_t)v8) >> 3);
  v16 = 2 * v15;
  if (2 * v15 <= SHIDWORD(v105))
    v16 = SHIDWORD(v105);
  if (v15 >= 0x1C71C71C71C71C7)
    v17 = 0x38E38E38E38E38ELL;
  else
    v17 = v16;
  if (v17 > 0x38E38E38E38E38ELL)
    goto LABEL_115;
  v18 = 72 * v17;
  v19 = (char *)operator new(72 * v17);
  v20 = &v19[72 * v12];
  v21 = &v20[72 * (72 * v13 / 0x48)];
  if (v9 != v8)
  {
    v22 = 0;
    do
    {
      v23 = &v20[v22];
      *(_OWORD *)(v23 - 72) = *(_OWORD *)&v9[v22 - 72];
      *(_OWORD *)(v23 - 56) = *(_OWORD *)&v9[v22 - 56];
      *(_OWORD *)(v23 - 40) = *(_OWORD *)&v9[v22 - 40];
      *(_OWORD *)(v23 - 24) = *(_OWORD *)&v9[v22 - 24];
      *((_QWORD *)v23 - 1) = *(_QWORD *)&v9[v22 - 8];
      v22 -= 72;
    }
    while (&v9[v22] != v8);
    v20 += v22;
  }
  *((_QWORD *)this + 10) = v20;
  *((_QWORD *)this + 11) = v21;
  *((_QWORD *)this + 12) = &v19[v18];
  if (v8)
    operator delete(v8);
LABEL_30:
  v27 = (_BYTE *)*((_QWORD *)this + 13);
  v25 = (char *)*((_QWORD *)this + 14);
  v26 = (void **)((char *)this + 104);
  v28 = (v25 - v27) >> 3;
  v29 = v10 - v28;
  if (v10 > v28)
  {
    v30 = *((_QWORD *)this + 15);
    if (v29 > (v30 - (uint64_t)v25) >> 3)
    {
      if ((v10 & 0x80000000) != 0)
        sub_1BE61F930();
      v31 = v30 - (_QWORD)v27;
      v32 = v31 >> 2;
      if (v31 >> 2 <= v10)
        v32 = v10;
      v5 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
      v33 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v5)
        v33 = v32;
      if (!(v33 >> 61))
      {
        v97 = 8 * v33;
        v96 = (char *)operator new(8 * v33);
        v34 = &v96[8 * v28];
        v98 = &v96[v97];
        v35 = 8 * v29;
        bzero(v34, v35);
        v36 = &v34[v35];
        if (v25 == v27)
        {
          v38 = v98;
          goto LABEL_52;
        }
        v37 = v25 - v27 - 8;
        if (v37 >= 0x58)
        {
          v38 = v98;
          if ((unint64_t)(v27 - v96) >= 0x20)
          {
            v40 = (v37 >> 3) + 1;
            v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
            v42 = &v25[-v41];
            v34 -= v41;
            v43 = &v96[8 * ((v25 - v27) >> 3) - 16];
            v44 = v25 - 16;
            v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v46 = *(_OWORD *)v44;
              *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
              *(_OWORD *)v43 = v46;
              v43 -= 32;
              v44 -= 32;
              v45 -= 4;
            }
            while (v45);
            v25 = v42;
            if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_51;
          }
        }
        else
        {
          v38 = v98;
        }
        do
        {
          v47 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *((_QWORD *)v34 - 1) = v47;
          v34 -= 8;
        }
        while (v25 != v27);
LABEL_51:
        v25 = (char *)*v26;
LABEL_52:
        *((_QWORD *)this + 13) = v34;
        *((_QWORD *)this + 14) = v36;
        *((_QWORD *)this + 15) = v38;
        if (v25)
          operator delete(v25);
        goto LABEL_54;
      }
LABEL_115:
      sub_1BE61F100();
    }
    bzero(*((void **)this + 14), 8 * v29);
    v39 = &v25[8 * v29];
    goto LABEL_44;
  }
  if (v10 < v28)
  {
    v39 = &v27[8 * v10];
LABEL_44:
    *((_QWORD *)this + 14) = v39;
  }
LABEL_54:
  fread(&v105, 4uLL, 1uLL, v4);
  v48 = *((_QWORD *)this + 4);
  v49 = (int)v105;
  v50 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v48) >> 3);
  if ((int)v105 <= v50)
  {
    if ((int)v105 < v50)
      *((_QWORD *)this + 5) = v48 + 40 * (int)v105;
  }
  else
  {
    sub_1BE66CE80((void **)this + 4, (int)v105 - v50);
  }
  v104 = 0;
  fread(&v104, 4uLL, 1uLL, v4);
  v51 = v104;
  v52 = (int *)operator new[]();
  fread(v52, 4uLL, v51, v4);
  v103 = 0;
  fread(&v103, 4uLL, 1uLL, v4);
  *((_BYTE *)this + 184) = v103 != 0;
  is_mul_ok(v10, 0x18uLL);
  v53 = (uint64_t *)operator new[]();
  fread(v53, 0x18uLL, v10, v4);
  if ((_DWORD)v10)
  {
    v54 = 0;
    v55 = v53 + 2;
    v56 = v10;
    do
    {
      v57 = *v7 + v54;
      v58 = *(v55 - 2);
      *(_QWORD *)&v59 = v58;
      *((_QWORD *)&v59 + 1) = HIDWORD(v58);
      *(_OWORD *)v57 = v59;
      v60 = *(v55 - 1);
      *(_QWORD *)&v59 = v60;
      *((_QWORD *)&v59 + 1) = HIDWORD(v60);
      *(_OWORD *)(v57 + 16) = v59;
      v61 = *v55;
      v55 += 3;
      *(_QWORD *)(v57 + 32) = v61;
      *(_QWORD *)(v57 + 56) = 0;
      *(_QWORD *)(v57 + 64) = 0;
      *(_QWORD *)(v57 + 48) = 0;
      v54 += 72;
      --v56;
    }
    while (v56);
  }
  MEMORY[0x1C3B812C8](v53, 0x1000C80504FFAC1);
  v62 = (void *)operator new[]();
  fread(v62, 4uLL, v10, v4);
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; ++i)
      *((_QWORD *)*v26 + i) = *v7 + (72 * *((_DWORD *)v62 + i));
  }
  v99 = v62;
  if ((_DWORD)v49)
  {
    v64 = 32;
    do
    {
      v65 = (BOOL *)(*((_QWORD *)this + 4) + v64);
      fread(v65 - 32, 4uLL, 1uLL, v4);
      fread(v65 - 24, 4uLL, 1uLL, v4);
      fread(v65 - 16, 4uLL, 1uLL, v4);
      fread(v65 - 8, 4uLL, 1uLL, v4);
      LOWORD(buf) = 0;
      fread(&buf, 2uLL, 1uLL, v4);
      *v65 = (_WORD)buf != 0;
      v64 += 40;
      --v49;
    }
    while (v49);
  }
  if ((_DWORD)v51)
  {
    v66 = 0;
    v67 = (uint64_t **)((char *)this + 64);
    do
    {
      v68 = v52[v66];
      v69 = *v67;
      v70 = (uint64_t **)((char *)this + 64);
      v71 = (uint64_t **)((char *)this + 64);
      if (*v67)
      {
        while (1)
        {
          while (1)
          {
            v71 = (uint64_t **)v69;
            v72 = v69[4];
            if (v72 <= v68)
              break;
            v69 = *v71;
            v70 = v71;
            if (!*v71)
              goto LABEL_77;
          }
          if (v72 >= v68)
            break;
          v69 = v71[1];
          if (!v69)
          {
            v70 = v71 + 1;
            goto LABEL_77;
          }
        }
      }
      else
      {
LABEL_77:
        v73 = (uint64_t *)operator new(0x28uLL);
        v73[4] = v68;
        *v73 = 0;
        v73[1] = 0;
        v73[2] = (uint64_t)v71;
        *v70 = v73;
        v74 = **((_QWORD **)this + 7);
        if (v74)
        {
          *((_QWORD *)this + 7) = v74;
          v75 = *v70;
        }
        else
        {
          v75 = v73;
        }
        sub_1BE61F5C0(*((uint64_t **)this + 8), v75);
        ++*((_QWORD *)this + 9);
      }
      v76 = *((_QWORD *)this + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v76) >> 3) >= v68)
        *(_BYTE *)(v76 + 40 * (int)v68 + 32) = 1;
      ++v66;
    }
    while (v66 != v51);
  }
  MEMORY[0x1C3B812C8](v52, 0x1000C8052888210);
  *((_QWORD *)this + 3) = 0;
  v102 = 0;
  fread((char *)&v102 + 4, 4uLL, 1uLL, v4);
  fread(&v102, 4uLL, 1uLL, v4);
  v77 = v102;
  v78 = (char *)operator new[]();
  fread(v78, v77, 1uLL, v4);
  if (HIDWORD(v102))
  {
    v79 = 0;
    v80 = &v78[v77];
    v81 = (char *)this + 128;
    v82 = v78;
    while (1)
    {
      v83 = strlen(v82);
      if (v83 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v84 = v83;
      if (v83 >= 0x17)
        break;
      HIBYTE(v107) = v83;
      p_buf = &buf;
      if (v83)
        goto LABEL_93;
LABEL_94:
      *((_BYTE *)p_buf + v84) = 0;
      v88 = strlen(v82);
      if (v88 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v89 = (void *)v88;
      if (v88 >= 0x17)
      {
        v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v88 | 7) != 0x17)
          v91 = v88 | 7;
        v92 = v91 + 1;
        v90 = (void **)operator new(v91 + 1);
        __dst[1] = v89;
        v101 = v92 | 0x8000000000000000;
        __dst[0] = v90;
      }
      else
      {
        HIBYTE(v101) = v88;
        v90 = __dst;
        if (!v88)
          goto LABEL_102;
      }
      memmove(v90, v82, (size_t)v89);
LABEL_102:
      *((_BYTE *)v89 + (_QWORD)v90) = 0;
      (**(void (***)(char *, void **))v81)(v81, __dst);
      if (SHIBYTE(v101) < 0)
        operator delete(__dst[0]);
      do
      {
        if (*(unsigned __int8 *)v82++)
          v94 = v82 >= v80;
        else
          v94 = 1;
      }
      while (!v94);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)buf);
      if (++v79 >= (unint64_t)HIDWORD(v102))
        goto LABEL_111;
    }
    v86 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v86 = v83 | 7;
    v87 = v86 + 1;
    p_buf = (__int128 *)operator new(v86 + 1);
    *((_QWORD *)&buf + 1) = v84;
    v107 = v87 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_93:
    memmove(p_buf, v82, v84);
    goto LABEL_94;
  }
LABEL_111:
  MEMORY[0x1C3B812C8](v78, 0x1000C8077774924);
  MEMORY[0x1C3B812C8](v99, 0x1000C8052888210);
  return fclose(v4);
}

void sub_1BE835840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Network::serialize(Network *this, const char *__filename)
{
  FILE *v3;
  Network *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int32x4_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  Network *v21;
  Network *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  unint64_t __ptr;
  int32x4_t v32;
  uint64_t v33;

  v3 = fopen(__filename, "wb");
  fwrite(&unk_1BE8DFEF8, 4uLL, 1uLL, v3);
  fwrite(&unk_1BE8DFEFC, 4uLL, 1uLL, v3);
  fwrite(&unk_1BE8DFF00, 4uLL, 1uLL, v3);
  __ptr = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  __ptr = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  __ptr = *((_QWORD *)this + 9);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v4 = (Network *)*((_QWORD *)this + 7);
  if (v4 != (Network *)((char *)this + 64))
  {
    do
    {
      __ptr = *((_QWORD *)v4 + 4);
      fwrite(&__ptr, 4uLL, 1uLL, v3);
      v21 = (Network *)*((_QWORD *)v4 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(Network **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (Network *)*((_QWORD *)v4 + 2);
          v23 = *(_QWORD *)v22 == (_QWORD)v4;
          v4 = v22;
        }
        while (!v23);
      }
      v4 = v22;
    }
    while (v22 != (Network *)((char *)this + 64));
  }
  __ptr = *((unsigned __int8 *)this + 184);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v5 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (int32x4_t *)(v5 + v6);
      v32 = vuzp1q_s32(*v8, v8[1]);
      v33 = v8[2].i64[0];
      fwrite(&v32, 0x18uLL, 1uLL, v3);
      ++v7;
      v5 = *((_QWORD *)this + 10);
      v9 = *((_QWORD *)this + 11);
      v6 += 72;
    }
    while (v7 < 0x8E38E38E38E38E39 * ((v9 - v5) >> 3));
    if (v9 != v5)
    {
      v10 = 0;
      do
      {
        v32.i32[0] = (*(_QWORD *)(*((_QWORD *)this + 13) + 8 * v10) - v5) / 0x48;
        fwrite(&v32, 4uLL, 1uLL, v3);
        ++v10;
        v5 = *((_QWORD *)this + 10);
      }
      while (v10 < 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 11) - v5) >> 3));
    }
  }
  v11 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v11)
  {
    v12 = 0;
    v13 = 32;
    do
    {
      v14 = (unsigned __int8 *)(v11 + v13);
      fwrite((const void *)(v11 + v13 - 32), 4uLL, 1uLL, v3);
      fwrite(v14 - 24, 4uLL, 1uLL, v3);
      fwrite(v14 - 16, 4uLL, 1uLL, v3);
      fwrite(v14 - 8, 4uLL, 1uLL, v3);
      v32.i16[0] = *v14;
      fwrite(&v32, 2uLL, 1uLL, v3);
      ++v12;
      v11 = *((_QWORD *)this + 4);
      v13 += 40;
    }
    while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v11) >> 3));
  }
  __ptr = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v16 = *((_QWORD *)this + 17);
  v15 = *((_QWORD *)this + 18);
  v17 = v15 - v16;
  if (v15 == v16)
  {
    v18 = 0;
  }
  else
  {
    LODWORD(v18) = 0;
    v19 = v17 / 24;
    if (v19 <= 1)
      v19 = 1;
    v20 = (char *)(v16 + 23);
    do
    {
      while ((*v20 & 0x80000000) == 0)
      {
        LODWORD(v18) = v18 + *v20 + 1;
        v20 += 24;
        if (!--v19)
          goto LABEL_25;
      }
      LODWORD(v18) = v18 + *(_QWORD *)(v20 - 15) + 1;
      v20 += 24;
      --v19;
    }
    while (v19);
LABEL_25:
    v18 = (int)v18;
  }
  __ptr = v18;
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v24 = *((_QWORD *)this + 17);
  if (*((_QWORD *)this + 18) != v24)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v29 = (char *)(v24 + v25);
      if (v29[23] < 0)
      {
        v28 = *(char **)v29;
        v27 = *((_QWORD *)v29 + 1);
      }
      else
      {
        v27 = v29[23];
        v28 = v29;
      }
      fwrite(v28, v27, 1uLL, v3);
      v32.i8[0] = 0;
      fwrite(&v32, 1uLL, 1uLL, v3);
      ++v26;
      v24 = *((_QWORD *)this + 17);
      v25 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v24) >> 3));
  }
  return fclose(v3);
}

uint64_t sub_1BE835CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  void *v36;
  const void *v37;
  const void *v38;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *(_BYTE **)(a2 + 56);
  v5 = *(_BYTE **)(a2 + 64);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_1BE61F930();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 72) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 64) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v11 = *(_BYTE **)(a2 + 80);
  v10 = *(_BYTE **)(a2 + 88);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_1BE61F930();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 96) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 88) = v14;
  }
  v15 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v17 = *(_BYTE **)(a2 + 256);
  v16 = *(_BYTE **)(a2 + 264);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_1BE61F930();
    v19 = (char *)operator new(v16 - v17);
    *(_QWORD *)(a1 + 256) = v19;
    *(_QWORD *)(a1 + 264) = v19;
    v20 = &v19[16 * (v18 >> 4)];
    *(_QWORD *)(a1 + 272) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 264) = v20;
  }
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v22 = *(_BYTE **)(a2 + 280);
  v21 = *(_BYTE **)(a2 + 288);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      sub_1BE61F930();
    v24 = (char *)operator new(v21 - v22);
    *(_QWORD *)(a1 + 280) = v24;
    *(_QWORD *)(a1 + 288) = v24;
    v25 = &v24[16 * (v23 >> 4)];
    *(_QWORD *)(a1 + 296) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 288) = v25;
  }
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  v27 = *(_BYTE **)(a2 + 304);
  v26 = *(_BYTE **)(a2 + 312);
  v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0)
      sub_1BE61F930();
    v29 = (char *)operator new(v26 - v27);
    *(_QWORD *)(a1 + 304) = v29;
    *(_QWORD *)(a1 + 312) = v29;
    v30 = &v29[8 * (v28 >> 3)];
    *(_QWORD *)(a1 + 320) = v30;
    memcpy(v29, v27, v28);
    *(_QWORD *)(a1 + 312) = v30;
  }
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v32 = *(_BYTE **)(a2 + 328);
  v31 = *(_BYTE **)(a2 + 336);
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0)
      sub_1BE61F930();
    v34 = (char *)operator new(v31 - v32);
    *(_QWORD *)(a1 + 328) = v34;
    *(_QWORD *)(a1 + 336) = v34;
    v35 = &v34[8 * (v33 >> 3)];
    *(_QWORD *)(a1 + 344) = v35;
    memcpy(v34, v32, v33);
    *(_QWORD *)(a1 + 336) = v35;
  }
  sub_1BE690978((_QWORD *)(a1 + 352), a2 + 352);
  sub_1BE690978((_QWORD *)(a1 + 376), a2 + 376);
  *(_OWORD *)(a1 + 400) = xmmword_1BE8DFE90;
  if (*(_QWORD *)a2)
  {
    v36 = malloc_type_malloc(4 * *(_QWORD *)(a1 + 16), 0x100004052888210uLL);
    *(_QWORD *)a1 = v36;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    memcpy(v36, *(const void **)a2, 4 * *(_QWORD *)(a1 + 16));
  }
  v37 = *(const void **)(a1 + 216);
  if (v37)
    CFRetain(v37);
  v38 = *(const void **)(a1 + 208);
  if (v38)
    CFRetain(v38);
  objc_storeStrong((id *)(a1 + 224), *(id *)(a2 + 224));
  return a1;
}

void sub_1BE836038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  id *v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (*v16)
  {
    operator delete(*v16);
    v18 = *v15;
    if (!*v15)
    {
LABEL_3:
      v19 = *v14;
      if (!*v14)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v18 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  v10[42] = v18;
  operator delete(v18);
  v19 = *v14;
  if (!*v14)
  {
LABEL_4:
    v20 = *a10;
    if (!*a10)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v10[39] = v19;
  operator delete(v19);
  v20 = *a10;
  if (!*a10)
  {
LABEL_5:
    v21 = *a9;
    if (!*a9)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  v10[36] = v20;
  operator delete(v20);
  v21 = *a9;
  if (!*a9)
  {
LABEL_7:

    v22 = *v12;
    if (*v12)
    {
      v10[11] = v22;
      operator delete(v22);
    }
    v23 = *v11;
    if (*v11)
    {
      v10[8] = v23;
      operator delete(v23);
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  v10[33] = v21;
  operator delete(v21);
  goto LABEL_7;
}

uint64_t sub_1BE836174(uint64_t a1, uint64_t a2, const void *a3, const void *a4, void *a5, int a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id obj;
  const void *v28;
  const void *v29;
  id v30;

  v30 = a5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 41) = 1;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 232) = a6;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = xmmword_1BE8DFE90;
  v13 = *(_QWORD *)(a2 + 240);
  v12 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 40) = v12 == 0;
  if (v12 <= 5)
    v14 = 5;
  else
    v14 = v12;
  v15 = malloc_type_malloc(4 * v14 + 16, 0x100004052888210uLL);
  obj = a5;
  v28 = a4;
  v29 = a3;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 32) = 0;
  v20 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)(v20 + 1) >= 6)
  {
    v21 = 0;
    *(_OWORD *)(a1 + 240) = xmmword_1BE8D6920;
    v22 = (unint64_t *)(a1 + 240);
  }
  else
  {
    v21 = 5 - v20;
    *(_QWORD *)(a1 + 32) = 5 - v20;
    memset_pattern16(v15, &unk_1BE8D5310, 4 * (5 - v20));
    *(_OWORD *)(a1 + 240) = xmmword_1BE8D6920;
    v22 = (unint64_t *)(a1 + 240);
    if (v14 == v21)
      goto LABEL_14;
  }
  v23 = 0;
  v24 = 4 * v21;
  do
  {
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)a1 + v24) = *(_DWORD *)(v13 + 4 * v23);
      if ((objc_msgSend_characterType_(CHCharacterSetRules, v16, *(unsigned int *)(v13 + 4 * v23), v17, v18, v19, obj) & 0x2000) == 0)break;
      ++v23;
      v24 += 4;
      if (v14 - *(_QWORD *)(a1 + 32) <= v23)
        goto LABEL_14;
    }
    if (*v22 == 0x7FFFFFFFFFFFFFFFLL)
      *v22 = v23;
    *(_QWORD *)(a1 + 248) = ++v23;
    v24 += 4;
  }
  while (v14 - *(_QWORD *)(a1 + 32) > v23);
LABEL_14:
  objc_storeStrong((id *)(a1 + 224), obj);
  v25 = *(_QWORD *)(a1 + 408) + v14;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 216) = v28;
  if (v28)
    CFRetain(v28);
  *(_QWORD *)(a1 + 208) = v29;
  if (v29)
    CFRetain(v29);

  return a1;
}

void sub_1BE8363BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v15 = *(void **)(v12 + 376);
  if (v15)
  {
    operator delete(v15);
    v16 = *(void **)(v12 + 352);
    if (!v16)
    {
LABEL_3:
      v17 = *(void **)(v12 + 328);
      if (!v17)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v16 = *(void **)(v12 + 352);
    if (!v16)
      goto LABEL_3;
  }
  operator delete(v16);
  v17 = *(void **)(v12 + 328);
  if (!v17)
  {
LABEL_4:
    v18 = *(void **)(v12 + 304);
    if (!v18)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v12 + 336) = v17;
  operator delete(v17);
  v18 = *(void **)(v12 + 304);
  if (!v18)
  {
LABEL_5:
    v19 = v13 + 25;
    v20 = *(void **)(v12 + 280);
    if (!v20)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v12 + 312) = v18;
  operator delete(v18);
  v19 = v13 + 25;
  v20 = *(void **)(v12 + 280);
  if (!v20)
  {
LABEL_6:
    v21 = *v19;
    if (!*v19)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v12 + 288) = v20;
  operator delete(v20);
  v21 = *v19;
  if (!*v19)
  {
LABEL_7:

    v22 = *(void **)(v12 + 80);
    if (!v22)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v12 + 264) = v21;
  operator delete(v21);

  v22 = *(void **)(v12 + 80);
  if (!v22)
  {
LABEL_8:
    v23 = *v13;
    if (!*v13)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v12 + 88) = v22;
  operator delete(v22);
  v23 = *v13;
  if (!*v13)
  {
LABEL_9:

    _Unwind_Resume(a1);
  }
LABEL_17:
  *(_QWORD *)(v12 + 64) = v23;
  operator delete(v23);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8364B0(unsigned __int8 *a1, uint64_t a2, double a3)
{
  unint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  _QWORD *v17;
  _QWORD *v18;
  double v19;
  double v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v25;
  double v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double *v32;
  double v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  double *v37;

  v3 = *((_QWORD *)a1 + 2);
  if (a1[1])
    v4 = v3 - 1 > 0xFFFFFFFFFFFFFFFDLL;
  else
    v4 = 1;
  if (!v4)
  {
    v10 = 0;
    v11 = (double *)(*((_QWORD *)a1 + 3) + 24);
    while (*(v11 - 1) != a3 || *(_QWORD *)v11 != a2)
    {
      --v10;
      v11 += 2;
      if (-(uint64_t)v3 == v10)
        goto LABEL_6;
    }
    if (v10 != 2)
      return 0;
  }
LABEL_6:
  if (v3 != *((_QWORD *)a1 + 1))
  {
    v6 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 2) = ++v3;
    v12 = v6 + 16 * v3;
    *(double *)v12 = a3;
    *(_QWORD *)(v12 + 8) = a2;
    v5 = *a1;
    v13 = -2147483650.0;
    if (!*a1)
      v13 = 2147483650.0;
    *(double *)v6 = v13;
    *(_QWORD *)(v6 + 8) = a2;
    v14 = *(double *)(v6 + ((8 * v3) & 0xFFFFFFFFFFFFFFF0));
    v7 = v3;
    if (v5)
    {
      if (v14 >= a3)
      {
        v15 = v3;
        do
        {
          v7 = v15 >> 1;
          if (v15 != v15 >> 1)
          {
            v17 = (_QWORD *)(v6 + 16 * v7);
            v18 = (_QWORD *)(v6 + 16 * v15);
            *v18 = *v17;
            v18[1] = v17[1];
          }
          v16 = *(double *)(v6 + ((4 * v15) & 0xFFFFFFFFFFFFFFF0));
          v15 >>= 1;
        }
        while (v16 >= a3);
      }
    }
    else if (v14 <= a3)
    {
      v25 = v3;
      do
      {
        v7 = v25 >> 1;
        if (v25 != v25 >> 1)
        {
          v27 = (_QWORD *)(v6 + 16 * v7);
          v28 = (_QWORD *)(v6 + 16 * v25);
          *v28 = *v27;
          v28[1] = v27[1];
        }
        v26 = *(double *)(v6 + ((4 * v25) & 0xFFFFFFFFFFFFFFF0));
        v25 >>= 1;
      }
      while (v26 <= a3);
    }
LABEL_38:
    v29 = v6 + 16 * v7;
    *(double *)v29 = a3;
    *(_QWORD *)(v29 + 8) = a2;
    *((_QWORD *)a1 + 4) = v3;
    if (v3)
      goto LABEL_39;
    return 1;
  }
  v5 = *a1;
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  v8 = v6 + 16 * v7;
  if (*a1)
  {
    if (*(double *)v8 > a3)
    {
      v9 = 0xC1E0000000000000;
      goto LABEL_25;
    }
    return 0;
  }
  if (*(double *)v8 >= a3)
    return 0;
  v9 = 0x41DFFFFFFFC00000;
LABEL_25:
  *(double *)v8 = a3;
  *(_QWORD *)(v8 + 8) = a2;
  *(_QWORD *)v6 = v9;
  *(_QWORD *)(v6 + 8) = a2;
  v19 = *(double *)(v6 + ((8 * v7) & 0xFFFFFFFFFFFFFFF0));
  if (v5)
  {
    if (v19 < a3)
      goto LABEL_38;
    do
    {
      v21 = v7 >> 1;
      if (v7 != v7 >> 1)
      {
        v22 = (_QWORD *)(v6 + 16 * v21);
        v23 = (_QWORD *)(v6 + 16 * v7);
        *v23 = *v22;
        v23[1] = v22[1];
      }
      v20 = *(double *)(v6 + ((4 * v7) & 0xFFFFFFFFFFFFFFF0));
      v7 >>= 1;
    }
    while (v20 >= a3);
  }
  else
  {
    if (v19 > a3)
      goto LABEL_38;
    do
    {
      v21 = v7 >> 1;
      if (v7 != v7 >> 1)
      {
        v34 = (_QWORD *)(v6 + 16 * v21);
        v35 = (_QWORD *)(v6 + 16 * v7);
        *v35 = *v34;
        v35[1] = v34[1];
      }
      v33 = *(double *)(v6 + ((4 * v7) & 0xFFFFFFFFFFFFFFF0));
      v7 >>= 1;
    }
    while (v33 <= a3);
  }
  v36 = v6 + 16 * v21;
  *(double *)v36 = a3;
  *(_QWORD *)(v36 + 8) = a2;
  *((_QWORD *)a1 + 4) = v3;
  if (v3)
  {
LABEL_39:
    v30 = v3 >> 1;
    v31 = v3 - 1;
    if (v3 - 1 > v3 >> 1)
    {
      if (v5)
      {
        v32 = (double *)(v6 + 16 * v3 - 16);
        do
        {
          if (*v32 > *(double *)(v6 + 16 * v3))
          {
            *((_QWORD *)a1 + 4) = v31;
            v3 = v31;
          }
          --v31;
          v32 -= 2;
        }
        while (v31 > v30);
      }
      else
      {
        v37 = (double *)(v6 + 16 * v3 - 16);
        do
        {
          if (*v37 < *(double *)(v6 + 16 * v3))
          {
            *((_QWORD *)a1 + 4) = v31;
            v3 = v31;
          }
          --v31;
          v37 -= 2;
        }
        while (v31 > v30);
      }
    }
  }
  return 1;
}

void sub_1BE8367B8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  double *v35;
  double v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  double *v44;
  char *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  _OWORD *v51;
  double *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int HasEntries;
  _BOOL4 v58;
  void *v59;
  int isCompletePattern;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  id v96;

  v96 = a2;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v12 = *(char **)(a1 + 264);
  v11 = *(_QWORD *)(a1 + 272);
  if ((unint64_t)v12 < v11)
  {
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = v8;
    v13 = (uint64_t)(v12 + 16);
    goto LABEL_14;
  }
  v14 = *(char **)(a1 + 256);
  v15 = (v12 - v14) >> 4;
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 60)
    goto LABEL_110;
  v17 = v11 - (_QWORD)v14;
  if (v17 >> 3 > v16)
    v16 = v17 >> 3;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
    v18 = 0xFFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 60)
      goto LABEL_112;
    v19 = (char *)operator new(16 * v18);
    v20 = &v19[16 * v15];
    v21 = &v19[16 * v18];
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = v8;
    v13 = (uint64_t)(v20 + 16);
    if (v12 == v14)
    {
LABEL_12:
      *(_QWORD *)(a1 + 256) = v20;
      *(_QWORD *)(a1 + 264) = v13;
      *(_QWORD *)(a1 + 272) = v21;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v20 = (char *)(16 * v15);
    v21 = 0;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = v8;
    v13 = 16 * v15 + 16;
    if (v12 == v14)
      goto LABEL_12;
  }
  do
  {
    *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
    v20 -= 16;
    v12 -= 16;
  }
  while (v12 != v14);
  v12 = *(char **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v20;
  *(_QWORD *)(a1 + 264) = v13;
  *(_QWORD *)(a1 + 272) = v21;
  if (v12)
LABEL_13:
    operator delete(v12);
LABEL_14:
  v22 = ((v9 - v10) >> 3) - 1;
  *(_QWORD *)(a1 + 264) = v13;
  v24 = *(char **)(a1 + 288);
  v23 = *(_QWORD *)(a1 + 296);
  if ((unint64_t)v24 < v23)
  {
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = v22;
    v25 = (uint64_t)(v24 + 16);
    goto LABEL_27;
  }
  v26 = *(char **)(a1 + 280);
  v27 = (v24 - v26) >> 4;
  v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 60)
LABEL_110:
    sub_1BE61F930();
  v29 = v23 - (_QWORD)v26;
  if (v29 >> 3 > v28)
    v28 = v29 >> 3;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
    v30 = 0xFFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (!(v30 >> 60))
    {
      v31 = (char *)operator new(16 * v30);
      v32 = &v31[16 * v27];
      v33 = &v31[16 * v30];
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = v22;
      v25 = (uint64_t)(v32 + 16);
      if (v24 == v26)
        goto LABEL_25;
      goto LABEL_44;
    }
LABEL_112:
    sub_1BE61F100();
  }
  v32 = (char *)(16 * v27);
  v33 = 0;
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v22;
  v25 = 16 * v27 + 16;
  if (v24 == v26)
  {
LABEL_25:
    *(_QWORD *)(a1 + 280) = v32;
    *(_QWORD *)(a1 + 288) = v25;
    *(_QWORD *)(a1 + 296) = v33;
    if (!v24)
      goto LABEL_27;
    goto LABEL_26;
  }
  do
  {
LABEL_44:
    *((_OWORD *)v32 - 1) = *((_OWORD *)v24 - 1);
    v32 -= 16;
    v24 -= 16;
  }
  while (v24 != v26);
  v24 = *(char **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v32;
  *(_QWORD *)(a1 + 288) = v25;
  *(_QWORD *)(a1 + 296) = v33;
  if (v24)
LABEL_26:
    operator delete(v24);
LABEL_27:
  *(_QWORD *)(a1 + 288) = v25;
  v35 = *(double **)(a1 + 312);
  v34 = *(_QWORD *)(a1 + 320);
  v36 = *(double *)(a1 + 136) / (double)*(unint64_t *)(a1 + 200);
  if ((unint64_t)v35 < v34)
  {
    *v35 = v36;
    v37 = (uint64_t)(v35 + 1);
    goto LABEL_56;
  }
  v38 = *(double **)(a1 + 304);
  v39 = v35 - v38;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61)
    sub_1BE61F930();
  v41 = v34 - (_QWORD)v38;
  if (v41 >> 2 > v40)
    v40 = v41 >> 2;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
    v42 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (v42)
  {
    if (v42 >> 61)
      sub_1BE61F100();
    v43 = operator new(8 * v42);
    v44 = (double *)&v43[8 * v39];
    v45 = &v43[8 * v42];
    *v44 = v36;
    v37 = (uint64_t)(v44 + 1);
    v46 = (char *)v35 - (char *)v38;
    if (v35 == v38)
      goto LABEL_54;
    goto LABEL_48;
  }
  v43 = 0;
  v44 = (double *)(8 * v39);
  v45 = 0;
  *(double *)(8 * v39) = v36;
  v37 = 8 * v39 + 8;
  v46 = (char *)v35 - (char *)v38;
  if (v35 != v38)
  {
LABEL_48:
    v47 = v46 - 8;
    if (v47 < 0x58)
      goto LABEL_119;
    if ((unint64_t)((char *)v38 - v43) < 0x20)
      goto LABEL_119;
    v48 = (v47 >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v50 = &v35[v49 / 0xFFFFFFFFFFFFFFF8];
    v44 = (double *)((char *)v44 - v49);
    v51 = &v43[8 * v39 - 16];
    v52 = v35 - 2;
    v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 4;
      v53 -= 4;
    }
    while (v53);
    v35 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_119:
      do
      {
        v55 = *((_QWORD *)v35-- - 1);
        *((_QWORD *)v44-- - 1) = v55;
      }
      while (v35 != v38);
    }
  }
LABEL_54:
  *(_QWORD *)(a1 + 304) = v44;
  *(_QWORD *)(a1 + 312) = v37;
  *(_QWORD *)(a1 + 320) = v45;
  if (v38)
    operator delete(v38);
LABEL_56:
  *(_QWORD *)(a1 + 312) = v37;
  v56 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 208))
  {
    HasEntries = LXCursorHasEntries();
    v58 = HasEntries != 0;
    if (HasEntries || !v56)
    {
LABEL_62:
      v59 = *(void **)(a1 + 224);
      if (v59)
        goto LABEL_63;
      goto LABEL_66;
    }
LABEL_61:
    v58 = LXCursorHasEntries() != 0;
    goto LABEL_62;
  }
  if (v56)
    goto LABEL_61;
  v58 = 0;
  v59 = *(void **)(a1 + 224);
  if (v59)
  {
LABEL_63:
    isCompletePattern = objc_msgSend_isCompletePattern(v59, v3, v4, v5, v6, v7);
    v61 = *(_QWORD *)(a1 + 360);
    v62 = *(_QWORD *)(a1 + 368);
    if (v61 != v62 << 6)
      goto LABEL_74;
    goto LABEL_67;
  }
LABEL_66:
  isCompletePattern = 0;
  v61 = *(_QWORD *)(a1 + 360);
  v62 = *(_QWORD *)(a1 + 368);
  if (v61 != v62 << 6)
    goto LABEL_74;
LABEL_67:
  if ((uint64_t)(v61 + 1) < 0)
    goto LABEL_111;
  v63 = v62 << 7;
  if (v63 <= (v61 & 0xFFFFFFFFFFFFFFC0) + 64)
    v63 = (v61 & 0xFFFFFFFFFFFFFFC0) + 64;
  if (v61 <= 0x3FFFFFFFFFFFFFFELL)
    v64 = v63;
  else
    v64 = 0x7FFFFFFFFFFFFFFFLL;
  sub_1BE694488(a1 + 352, v64);
  v61 = *(_QWORD *)(a1 + 360);
LABEL_74:
  *(_QWORD *)(a1 + 360) = v61 + 1;
  v65 = *(_QWORD *)(a1 + 352);
  v66 = v61 >> 6;
  v67 = 1 << v61;
  if (v58)
  {
    *(_QWORD *)(v65 + 8 * v66) |= v67;
    v68 = *(_QWORD *)(a1 + 384);
    v69 = *(_QWORD *)(a1 + 392);
    if (v68 != v69 << 6)
      goto LABEL_85;
  }
  else
  {
    *(_QWORD *)(v65 + 8 * v66) &= ~v67;
    v68 = *(_QWORD *)(a1 + 384);
    v69 = *(_QWORD *)(a1 + 392);
    if (v68 != v69 << 6)
      goto LABEL_85;
  }
  if ((uint64_t)(v68 + 1) < 0)
LABEL_111:
    sub_1BE61F930();
  v70 = v69 << 7;
  if (v70 <= (v68 & 0xFFFFFFFFFFFFFFC0) + 64)
    v70 = (v68 & 0xFFFFFFFFFFFFFFC0) + 64;
  if (v68 <= 0x3FFFFFFFFFFFFFFELL)
    v71 = v70;
  else
    v71 = 0x7FFFFFFFFFFFFFFFLL;
  sub_1BE694488(a1 + 376, v71);
  v68 = *(_QWORD *)(a1 + 384);
LABEL_85:
  *(_QWORD *)(a1 + 384) = v68 + 1;
  v72 = *(_QWORD *)(a1 + 376);
  v73 = v68 >> 6;
  v74 = 1 << v68;
  if (isCompletePattern)
    v75 = *(_QWORD *)(v72 + 8 * v73) | v74;
  else
    v75 = *(_QWORD *)(v72 + 8 * v73) & ~v74;
  *(_QWORD *)(v72 + 8 * v73) = v75;
  *(double *)(a1 + 160) = *(double *)(a1 + 160) + *(double *)(a1 + 168);
  *(double *)(a1 + 144) = *(double *)(a1 + 144) + *(double *)(a1 + 152);
  *(double *)(a1 + 112) = *(double *)(a1 + 112) + *(double *)(a1 + 120);
  *(double *)(a1 + 176) = *(double *)(a1 + 176) + *(double *)(a1 + 184);
  *(double *)(a1 + 128) = *(double *)(a1 + 128) + *(double *)(a1 + 136);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  v77 = *(char **)(a1 + 336);
  v76 = *(_QWORD *)(a1 + 344);
  if ((unint64_t)v77 >= v76)
  {
    v79 = *(char **)(a1 + 328);
    v80 = (v77 - v79) >> 3;
    v81 = v80 + 1;
    if ((unint64_t)(v80 + 1) >> 61)
      sub_1BE61F930();
    v82 = v76 - (_QWORD)v79;
    if (v82 >> 2 > v81)
      v81 = v82 >> 2;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
      v83 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v83 = v81;
    if (v83)
    {
      if (v83 >> 61)
        sub_1BE61F100();
      v84 = operator new(8 * v83);
    }
    else
    {
      v84 = 0;
    }
    v85 = &v84[8 * v80];
    v86 = &v84[8 * v83];
    *v85 = *(_QWORD *)(a1 + 104);
    v78 = v85 + 1;
    if (v77 != v79)
    {
      v87 = v77 - v79 - 8;
      if (v87 < 0x58)
        goto LABEL_120;
      if ((unint64_t)(v79 - v84) < 0x20)
        goto LABEL_120;
      v88 = (v87 >> 3) + 1;
      v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
      v90 = &v77[-v89];
      v85 = (_QWORD *)((char *)v85 - v89);
      v91 = &v84[8 * v80 - 16];
      v92 = v77 - 16;
      v93 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v94 = *(_OWORD *)v92;
        *(v91 - 1) = *((_OWORD *)v92 - 1);
        *v91 = v94;
        v91 -= 2;
        v92 -= 32;
        v93 -= 4;
      }
      while (v93);
      v77 = v90;
      if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_120:
        do
        {
          v95 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *--v85 = v95;
        }
        while (v77 != v79);
      }
    }
    *(_QWORD *)(a1 + 328) = v85;
    *(_QWORD *)(a1 + 336) = v78;
    *(_QWORD *)(a1 + 344) = v86;
    if (v79)
      operator delete(v79);
  }
  else
  {
    *(_QWORD *)v77 = *(_QWORD *)(a1 + 104);
    v78 = v77 + 8;
  }
  *(_QWORD *)(a1 + 336) = v78;

}

void sub_1BE836E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE836E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE836E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE836E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE836EA0(uint64_t result, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  __int128 *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  int64_t v77;
  unint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 *v92;
  __int128 *v93;
  __int128 *v94;
  __int128 v95;
  __int128 v96;
  __int128 *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 *v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v8 = result;
LABEL_2:
  v9 = (__int128 *)(a2 - 72);
  v107 = (__int128 *)(a2 - 216);
  v109 = (__int128 *)(a2 - 144);
  v10 = v8;
  v111 = a2;
  while (2)
  {
    v8 = v10;
    v11 = a2 - v10;
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v9, (__int128 *)v10);
        if ((_DWORD)result)
        {
          v51 = *(_OWORD *)v10;
          v50 = *(_OWORD *)(v10 + 16);
          v53 = *(_OWORD *)(v10 + 32);
          v52 = *(_OWORD *)(v10 + 48);
          v54 = *(_QWORD *)(v10 + 64);
          if ((__int128 *)v10 != v9)
          {
            *(_OWORD *)v10 = *(_OWORD *)(a2 - 72);
            *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 - 40);
            *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 - 56);
            *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 - 24);
            *(_QWORD *)(v10 + 64) = *(_QWORD *)(a2 - 8);
          }
          *(_OWORD *)(a2 - 72) = v51;
          *(_OWORD *)(a2 - 40) = v53;
          *(_OWORD *)(a2 - 56) = v50;
          *(_OWORD *)(a2 - 24) = v52;
          *(_QWORD *)(a2 - 8) = v54;
        }
        return result;
      case 3uLL:
        return sub_1BE837B24((__int128 *)v10, (__int128 *)(v10 + 72), v9, a3);
      case 4uLL:
        return sub_1BE837F8C(v10, v10 + 72, v10 + 144, (uint64_t)v9, a3);
      case 5uLL:
        return sub_1BE8380CC(v10, v10 + 72, v10 + 144, v10 + 216, (uint64_t)v9, a3);
      default:
        if (v11 <= 1727)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v55 = (__int128 *)(v10 + 72);
              if (v10 + 72 != a2)
              {
                v56 = 0;
                v57 = (__int128 *)v10;
                do
                {
                  v58 = v55;
                  result = (*a3)(v55, v57);
                  if ((_DWORD)result)
                  {
                    v59 = *(__int128 *)((char *)v57 + 88);
                    v116 = *v58;
                    v117 = v59;
                    v60 = *(__int128 *)((char *)v57 + 120);
                    v118 = *(__int128 *)((char *)v57 + 104);
                    v119 = v60;
                    v120 = *((_QWORD *)v57 + 17);
                    v61 = v56;
                    while (1)
                    {
                      v62 = v10 + v61;
                      v63 = *(_OWORD *)(v10 + v61 + 16);
                      *(_OWORD *)(v62 + 72) = *(_OWORD *)(v10 + v61);
                      v64 = *(_OWORD *)(v10 + v61 + 48);
                      *(_OWORD *)(v62 + 104) = *(_OWORD *)(v10 + v61 + 32);
                      *(_OWORD *)(v62 + 88) = v63;
                      *(_OWORD *)(v62 + 120) = v64;
                      *(_QWORD *)(v62 + 136) = *(_QWORD *)(v10 + v61 + 64);
                      if (!v61)
                        break;
                      v61 -= 72;
                      result = (*a3)(&v116, (__int128 *)(v61 + v10));
                      if ((result & 1) == 0)
                      {
                        v65 = v10 + v61 + 72;
                        if ((__int128 *)v65 == &v116)
                          goto LABEL_69;
                        goto LABEL_77;
                      }
                    }
                    v65 = v10;
                    if ((__int128 *)v10 == &v116)
                      goto LABEL_69;
LABEL_77:
                    *(_OWORD *)v65 = v116;
                    v66 = v118;
                    *(_OWORD *)(v65 + 16) = v117;
                    *(_OWORD *)(v65 + 32) = v66;
                    *(_OWORD *)(v65 + 48) = v119;
                    *(_QWORD *)(v65 + 64) = v120;
                  }
LABEL_69:
                  v55 = (__int128 *)((char *)v58 + 72);
                  v56 += 72;
                  v57 = v58;
                }
                while ((__int128 *)((char *)v58 + 72) != (__int128 *)a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v92 = (__int128 *)(v10 + 72);
            if (v10 + 72 != a2)
            {
              v93 = (__int128 *)(v10 + 136);
              do
              {
                v94 = v92;
                result = (*a3)(v92, (__int128 *)v8);
                if ((_DWORD)result)
                {
                  v95 = *(_OWORD *)(v8 + 88);
                  v116 = *v94;
                  v117 = v95;
                  v96 = *(_OWORD *)(v8 + 120);
                  v118 = *(_OWORD *)(v8 + 104);
                  v119 = v96;
                  v120 = *(_QWORD *)(v8 + 136);
                  v97 = v93;
                  do
                  {
                    v98 = v97;
                    v99 = *(__int128 *)((char *)v97 - 104);
                    v100 = *(__int128 *)((char *)v97 - 120);
                    *(v97 - 4) = *(__int128 *)((char *)v97 - 136);
                    *(v97 - 3) = v100;
                    v101 = *(__int128 *)((char *)v97 - 88);
                    *(v97 - 2) = v99;
                    *(v97 - 1) = v101;
                    v102 = *((_QWORD *)v97 - 9);
                    v97 = (__int128 *)((char *)v97 - 72);
                    *(_QWORD *)v98 = v102;
                    result = (*a3)(&v116, v98 - 13);
                  }
                  while ((result & 1) != 0);
                  if (v97 - 4 != &v116)
                  {
                    *(v97 - 4) = v116;
                    *(v97 - 2) = v118;
                    *(v97 - 3) = v117;
                    *(v97 - 1) = v119;
                    *(_QWORD *)v97 = v120;
                  }
                }
                v92 = (__int128 *)((char *)v94 + 72);
                v93 = (__int128 *)((char *)v93 + 72);
                v8 = (uint64_t)v94;
              }
              while ((__int128 *)((char *)v94 + 72) != (__int128 *)a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v67 = (v12 - 2) >> 1;
            v114 = v67;
            do
            {
              v68 = v67;
              if (v114 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = v8 + 72 * v69;
                if (2 * v67 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(v8 + 72 * v69), (__int128 *)(v70 + 72)))
                {
                  v70 += 72;
                  v69 = 2 * v68 + 2;
                }
                v71 = v8 + 72 * v68;
                result = (*a3)((__int128 *)v70, (__int128 *)v71);
                if ((result & 1) == 0)
                {
                  v116 = *(_OWORD *)v71;
                  v72 = v8 + 72 * v68;
                  v117 = *(_OWORD *)(v72 + 16);
                  v118 = *(_OWORD *)(v72 + 32);
                  v119 = *(_OWORD *)(v72 + 48);
                  v120 = *(_QWORD *)(v72 + 64);
                  do
                  {
                    v73 = v70;
                    if (v71 != v70)
                    {
                      *(_OWORD *)v71 = *(_OWORD *)v70;
                      *(_OWORD *)(v71 + 32) = *(_OWORD *)(v70 + 32);
                      *(_OWORD *)(v71 + 16) = *(_OWORD *)(v70 + 16);
                      *(_OWORD *)(v71 + 48) = *(_OWORD *)(v70 + 48);
                      *(_QWORD *)(v71 + 64) = *(_QWORD *)(v70 + 64);
                    }
                    if (v114 < v69)
                      break;
                    v74 = (2 * v69) | 1;
                    v70 = v8 + 72 * v74;
                    v75 = 2 * v69 + 2;
                    if (v75 < (uint64_t)v12 && (*a3)((__int128 *)(v8 + 72 * v74), (__int128 *)(v70 + 72)))
                    {
                      v70 += 72;
                      v74 = v75;
                    }
                    result = (*a3)((__int128 *)v70, &v116);
                    v71 = v73;
                    v69 = v74;
                  }
                  while (!(_DWORD)result);
                  if ((__int128 *)v73 != &v116)
                  {
                    *(_OWORD *)v73 = v116;
                    v76 = v118;
                    *(_OWORD *)(v73 + 16) = v117;
                    *(_OWORD *)(v73 + 32) = v76;
                    *(_OWORD *)(v73 + 48) = v119;
                    *(_QWORD *)(v73 + 64) = v120;
                  }
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v77 = v11 / 0x48uLL;
            v78 = v111;
            do
            {
              if (v77 >= 2)
              {
                v112 = v78;
                v80 = 0;
                v104 = *(_QWORD *)(v8 + 8);
                v105 = *(_QWORD *)v8;
                v115 = *(_QWORD *)(v8 + 16);
                v82 = *(_QWORD *)(v8 + 32);
                v81 = *(_QWORD *)(v8 + 40);
                v108 = *(_QWORD *)(v8 + 48);
                v110 = *(_QWORD *)(v8 + 24);
                v106 = *(_QWORD *)(v8 + 56);
                v83 = v8;
                v103 = *(_QWORD *)(v8 + 64);
                do
                {
                  v84 = v83 + 72 * v80 + 72;
                  v85 = 2 * v80;
                  v80 = (2 * v80) | 1;
                  v86 = v85 + 2;
                  if (v85 + 2 < v77)
                  {
                    result = (*a3)((__int128 *)v84, (__int128 *)(v84 + 72));
                    if ((_DWORD)result)
                    {
                      v84 += 72;
                      v80 = v86;
                    }
                  }
                  if (v83 != v84)
                  {
                    *(_OWORD *)v83 = *(_OWORD *)v84;
                    *(_OWORD *)(v83 + 32) = *(_OWORD *)(v84 + 32);
                    *(_OWORD *)(v83 + 16) = *(_OWORD *)(v84 + 16);
                    *(_OWORD *)(v83 + 48) = *(_OWORD *)(v84 + 48);
                    *(_QWORD *)(v83 + 64) = *(_QWORD *)(v84 + 64);
                  }
                  v83 = v84;
                }
                while (v80 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                v78 = v112;
                if (v84 == v112 - 72)
                {
                  *(_QWORD *)v84 = v105;
                  *(_QWORD *)(v84 + 8) = v104;
                  *(_QWORD *)(v84 + 32) = v82;
                  *(_QWORD *)(v84 + 40) = v81;
                  *(_QWORD *)(v84 + 16) = v115;
                  *(_QWORD *)(v84 + 24) = v110;
                  *(_QWORD *)(v84 + 48) = v108;
                  *(_QWORD *)(v84 + 56) = v106;
                  *(_QWORD *)(v84 + 64) = v103;
                }
                else
                {
                  *(_OWORD *)v84 = *(_OWORD *)(v112 - 72);
                  *(_OWORD *)(v84 + 32) = *(_OWORD *)(v112 - 40);
                  *(_OWORD *)(v84 + 16) = *(_OWORD *)(v112 - 56);
                  *(_OWORD *)(v84 + 48) = *(_OWORD *)(v112 - 24);
                  *(_QWORD *)(v84 + 64) = *(_QWORD *)(v112 - 8);
                  *(_QWORD *)(v112 - 72) = v105;
                  *(_QWORD *)(v112 - 64) = v104;
                  *(_QWORD *)(v112 - 40) = v82;
                  *(_QWORD *)(v112 - 32) = v81;
                  *(_QWORD *)(v112 - 56) = v115;
                  *(_QWORD *)(v112 - 48) = v110;
                  *(_QWORD *)(v112 - 24) = v108;
                  *(_QWORD *)(v112 - 16) = v106;
                  *(_QWORD *)(v112 - 8) = v103;
                  v87 = v84 - v8 + 72;
                  if (v87 >= 73)
                  {
                    v88 = (v87 / 0x48uLL - 2) >> 1;
                    v89 = v8 + 72 * v88;
                    result = (*a3)((__int128 *)v89, (__int128 *)v84);
                    if ((_DWORD)result)
                    {
                      v116 = *(_OWORD *)v84;
                      v117 = *(_OWORD *)(v84 + 16);
                      v118 = *(_OWORD *)(v84 + 32);
                      v119 = *(_OWORD *)(v84 + 48);
                      v120 = *(_QWORD *)(v84 + 64);
                      do
                      {
                        v90 = v89;
                        if (v84 != v89)
                        {
                          *(_OWORD *)v84 = *(_OWORD *)v89;
                          *(_OWORD *)(v84 + 32) = *(_OWORD *)(v89 + 32);
                          *(_OWORD *)(v84 + 16) = *(_OWORD *)(v89 + 16);
                          *(_OWORD *)(v84 + 48) = *(_OWORD *)(v89 + 48);
                          *(_QWORD *)(v84 + 64) = *(_QWORD *)(v89 + 64);
                        }
                        if (!v88)
                          break;
                        v88 = (v88 - 1) >> 1;
                        v89 = v8 + 72 * v88;
                        result = (*a3)((__int128 *)v89, &v116);
                        v84 = v90;
                      }
                      while ((result & 1) != 0);
                      if ((__int128 *)v90 != &v116)
                      {
                        *(_OWORD *)v90 = v116;
                        v91 = v118;
                        *(_OWORD *)(v90 + 16) = v117;
                        *(_OWORD *)(v90 + 32) = v91;
                        *(_OWORD *)(v90 + 48) = v119;
                        *(_QWORD *)(v90 + 64) = v120;
                      }
                    }
                  }
                }
              }
              v78 -= 72;
            }
            while ((unint64_t)v77-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)(v10 + 72 * (v12 >> 1));
        if ((unint64_t)v11 < 0x2401)
        {
          sub_1BE837B24((__int128 *)(v8 + 72 * (v12 >> 1)), (__int128 *)v8, v9, a3);
          --a4;
          a2 = v111;
          if ((a5 & 1) != 0)
            goto LABEL_13;
LABEL_12:
          if (((*a3)((__int128 *)(v8 - 72), (__int128 *)v8) & 1) != 0)
            goto LABEL_13;
          v39 = *(_OWORD *)(v8 + 16);
          v116 = *(_OWORD *)v8;
          v117 = v39;
          v40 = *(_OWORD *)(v8 + 48);
          v118 = *(_OWORD *)(v8 + 32);
          v119 = v40;
          v120 = *(_QWORD *)(v8 + 64);
          result = (*a3)(&v116, v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v10 += 72;
              result = (*a3)(&v116, (__int128 *)v10);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v41 = (__int128 *)(v8 + 72);
            do
            {
              v10 = (unint64_t)v41;
              if ((unint64_t)v41 >= a2)
                break;
              result = (*a3)(&v116, v41);
              v41 = (__int128 *)(v10 + 72);
            }
            while (!(_DWORD)result);
          }
          v42 = a2;
          if (v10 < a2)
          {
            v42 = a2;
            do
            {
              v42 -= 72;
              result = (*a3)(&v116, (__int128 *)v42);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v42)
          {
            v43 = *(_QWORD *)(v10 + 64);
            v44 = *(_OWORD *)(v42 + 32);
            v45 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v42;
            v46 = *(_OWORD *)(v42 + 16);
            v47 = *(_OWORD *)(v10 + 32);
            *(_OWORD *)(v10 + 32) = v44;
            *(_OWORD *)(v42 + 32) = v47;
            v48 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)(v10 + 16) = v46;
            v49 = *(_OWORD *)(v10 + 48);
            *(_OWORD *)(v10 + 48) = *(_OWORD *)(v42 + 48);
            *(_QWORD *)(v10 + 64) = *(_QWORD *)(v42 + 64);
            *(_OWORD *)v42 = v45;
            *(_OWORD *)(v42 + 16) = v48;
            *(_OWORD *)(v42 + 48) = v49;
            *(_QWORD *)(v42 + 64) = v43;
            do
              v10 += 72;
            while (!(*a3)(&v116, (__int128 *)v10));
            do
            {
              v42 -= 72;
              result = (*a3)(&v116, (__int128 *)v42);
            }
            while ((result & 1) != 0);
          }
          if (v10 - 72 != v8)
          {
            *(_OWORD *)v8 = *(_OWORD *)(v10 - 72);
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(v10 - 40);
            *(_OWORD *)(v8 + 16) = *(_OWORD *)(v10 - 56);
            *(_OWORD *)(v8 + 48) = *(_OWORD *)(v10 - 24);
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v10 - 8);
          }
          if ((__int128 *)(v10 - 72) != &v116)
          {
            *(_OWORD *)(v10 - 72) = v116;
            *(_OWORD *)(v10 - 40) = v118;
            *(_OWORD *)(v10 - 56) = v117;
            *(_OWORD *)(v10 - 24) = v119;
            *(_QWORD *)(v10 - 8) = v120;
          }
          a5 = 0;
          continue;
        }
        sub_1BE837B24((__int128 *)v8, (__int128 *)(v8 + 72 * (v12 >> 1)), v9, a3);
        sub_1BE837B24((__int128 *)(v8 + 72), (__int128 *)(72 * v13 + v8 - 72), v109, a3);
        sub_1BE837B24((__int128 *)(v8 + 144), (__int128 *)(v8 + 72 + 72 * v13), v107, a3);
        sub_1BE837B24((__int128 *)(72 * v13 + v8 - 72), (__int128 *)(v8 + 72 * (v12 >> 1)), (__int128 *)(v8 + 72 + 72 * v13), a3);
        v16 = *(_OWORD *)v8;
        v15 = *(_OWORD *)(v8 + 16);
        v18 = *(_OWORD *)(v8 + 32);
        v17 = *(_OWORD *)(v8 + 48);
        v19 = *(_QWORD *)(v8 + 64);
        if (v12 >= 2)
        {
          v20 = v8 + 72 * v13;
          v22 = *(_OWORD *)(v20 + 16);
          v21 = *(_OWORD *)(v20 + 32);
          *(_OWORD *)v8 = *v14;
          *(_OWORD *)(v8 + 16) = v22;
          v23 = *(_OWORD *)(v20 + 48);
          *(_OWORD *)(v8 + 32) = v21;
          *(_OWORD *)(v8 + 48) = v23;
          *(_QWORD *)(v8 + 64) = *(_QWORD *)(v20 + 64);
        }
        *v14 = v16;
        v24 = v8 + 72 * v13;
        *(_OWORD *)(v24 + 16) = v15;
        *(_OWORD *)(v24 + 32) = v18;
        *(_OWORD *)(v24 + 48) = v17;
        *(_QWORD *)(v24 + 64) = v19;
        --a4;
        a2 = v111;
        if ((a5 & 1) == 0)
          goto LABEL_12;
LABEL_13:
        v25 = 0;
        v26 = *(_OWORD *)(v8 + 16);
        v116 = *(_OWORD *)v8;
        v117 = v26;
        v27 = *(_OWORD *)(v8 + 48);
        v118 = *(_OWORD *)(v8 + 32);
        v119 = v27;
        v120 = *(_QWORD *)(v8 + 64);
        do
          v25 += 72;
        while (((*a3)((__int128 *)(v25 + v8), &v116) & 1) != 0);
        v28 = v8 + v25;
        v29 = (__int128 *)a2;
        if (v25 == 72)
        {
          v29 = (__int128 *)a2;
          do
          {
            if (v28 >= (unint64_t)v29)
              break;
            v29 = (__int128 *)((char *)v29 - 72);
          }
          while (((*a3)(v29, &v116) & 1) == 0);
        }
        else
        {
          do
            v29 = (__int128 *)((char *)v29 - 72);
          while (!(*a3)(v29, &v116));
        }
        v10 = v8 + v25;
        if (v28 < (unint64_t)v29)
        {
          v30 = (unint64_t)v29;
          do
          {
            v31 = *(_QWORD *)(v10 + 64);
            v32 = *(_OWORD *)(v30 + 32);
            v33 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v30;
            v34 = *(_OWORD *)(v30 + 16);
            v35 = *(_OWORD *)(v10 + 32);
            *(_OWORD *)(v10 + 32) = v32;
            *(_OWORD *)(v30 + 32) = v35;
            v36 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)(v10 + 16) = v34;
            v37 = *(_OWORD *)(v10 + 48);
            *(_OWORD *)(v10 + 48) = *(_OWORD *)(v30 + 48);
            *(_QWORD *)(v10 + 64) = *(_QWORD *)(v30 + 64);
            *(_OWORD *)v30 = v33;
            *(_OWORD *)(v30 + 16) = v36;
            *(_OWORD *)(v30 + 48) = v37;
            *(_QWORD *)(v30 + 64) = v31;
            do
              v10 += 72;
            while (((*a3)((__int128 *)v10, &v116) & 1) != 0);
            do
              v30 -= 72;
            while (!(*a3)((__int128 *)v30, &v116));
          }
          while (v10 < v30);
        }
        if (v10 - 72 != v8)
        {
          *(_OWORD *)v8 = *(_OWORD *)(v10 - 72);
          *(_OWORD *)(v8 + 32) = *(_OWORD *)(v10 - 40);
          *(_OWORD *)(v8 + 16) = *(_OWORD *)(v10 - 56);
          *(_OWORD *)(v8 + 48) = *(_OWORD *)(v10 - 24);
          *(_QWORD *)(v8 + 64) = *(_QWORD *)(v10 - 8);
        }
        if ((__int128 *)(v10 - 72) != &v116)
        {
          *(_OWORD *)(v10 - 72) = v116;
          *(_OWORD *)(v10 - 40) = v118;
          *(_OWORD *)(v10 - 56) = v117;
          *(_OWORD *)(v10 - 24) = v119;
          *(_QWORD *)(v10 - 8) = v120;
        }
        if (v28 < (unint64_t)v29)
        {
LABEL_34:
          result = sub_1BE836EA0(v8, v10 - 72, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v38 = sub_1BE837D28(v8, v10 - 72, a3);
        result = sub_1BE837D28(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v38)
            continue;
          goto LABEL_34;
        }
        a2 = v10 - 72;
        if (!v38)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1BE837B24(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v11 = *(_QWORD *)a1;
    v10 = *((_QWORD *)a1 + 1);
    v13 = *((_QWORD *)a1 + 2);
    v12 = *((_QWORD *)a1 + 3);
    v15 = *((_QWORD *)a1 + 4);
    v14 = *((_QWORD *)a1 + 5);
    v17 = *((_QWORD *)a1 + 6);
    v16 = *((_QWORD *)a1 + 7);
    v18 = *((_QWORD *)a1 + 8);
    if ((_DWORD)result)
    {
      if (a1 != a3)
      {
        *a1 = *a3;
        v19 = a3[2];
        a1[1] = a3[1];
        a1[2] = v19;
        a1[3] = a3[3];
        *((_QWORD *)a1 + 8) = *((_QWORD *)a3 + 8);
      }
      *(_QWORD *)a3 = v11;
      *((_QWORD *)a3 + 1) = v10;
      *((_QWORD *)a3 + 4) = v15;
      *((_QWORD *)a3 + 5) = v14;
      *((_QWORD *)a3 + 2) = v13;
      *((_QWORD *)a3 + 3) = v12;
      *((_QWORD *)a3 + 6) = v17;
      *((_QWORD *)a3 + 7) = v16;
      *((_QWORD *)a3 + 8) = v18;
    }
    else
    {
      if (a1 != a2)
      {
        *a1 = *a2;
        v32 = a2[2];
        a1[1] = a2[1];
        a1[2] = v32;
        a1[3] = a2[3];
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      }
      *(_QWORD *)a2 = v11;
      *((_QWORD *)a2 + 1) = v10;
      *((_QWORD *)a2 + 4) = v15;
      *((_QWORD *)a2 + 5) = v14;
      *((_QWORD *)a2 + 2) = v13;
      *((_QWORD *)a2 + 3) = v12;
      *((_QWORD *)a2 + 6) = v17;
      *((_QWORD *)a2 + 7) = v16;
      *((_QWORD *)a2 + 8) = v18;
      result = (*a4)(a3, a2);
      if ((_DWORD)result)
      {
        v34 = *a2;
        v33 = a2[1];
        v35 = a2[2];
        v36 = a2[3];
        v37 = *((_QWORD *)a2 + 8);
        if (a2 != a3)
        {
          *a2 = *a3;
          v38 = a3[2];
          a2[1] = a3[1];
          a2[2] = v38;
          a2[3] = a3[3];
          *((_QWORD *)a2 + 8) = *((_QWORD *)a3 + 8);
        }
        *a3 = v34;
        a3[1] = v33;
        a3[2] = v35;
        a3[3] = v36;
        *((_QWORD *)a3 + 8) = v37;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v21 = *a2;
    v20 = a2[1];
    v22 = a2[2];
    v23 = a2[3];
    v24 = *((_QWORD *)a2 + 8);
    if (a2 != a3)
    {
      *a2 = *a3;
      v25 = a3[2];
      a2[1] = a3[1];
      a2[2] = v25;
      a2[3] = a3[3];
      *((_QWORD *)a2 + 8) = *((_QWORD *)a3 + 8);
    }
    *a3 = v21;
    a3[1] = v20;
    a3[2] = v22;
    a3[3] = v23;
    *((_QWORD *)a3 + 8) = v24;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v27 = *a1;
      v26 = a1[1];
      v28 = a1[2];
      v29 = a1[3];
      v30 = *((_QWORD *)a1 + 8);
      if (a1 != a2)
      {
        *a1 = *a2;
        v31 = a2[2];
        a1[1] = a2[1];
        a1[2] = v31;
        a1[3] = a2[3];
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      }
      *a2 = v27;
      a2[1] = v26;
      a2[2] = v28;
      a2[3] = v29;
      *((_QWORD *)a2 + 8) = v30;
    }
  }
  return result;
}

BOOL sub_1BE837D28(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v6 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 72;
      if (!(*a3)((__int128 *)(a2 - 72), (__int128 *)a1))
        return 1;
      v10 = *(_OWORD *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      v12 = *(_OWORD *)(a1 + 32);
      v11 = *(_OWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 64);
      if (v8 != a1)
      {
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 56);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 - 8);
      }
      *(_OWORD *)(a2 - 72) = v10;
      *(_OWORD *)(a2 - 40) = v12;
      *(_OWORD *)(a2 - 56) = v9;
      *(_OWORD *)(a2 - 24) = v11;
      result = 1;
      *(_QWORD *)(a2 - 8) = v13;
      return result;
    case 3uLL:
      sub_1BE837B24((__int128 *)a1, (__int128 *)(a1 + 72), (__int128 *)(a2 - 72), a3);
      return 1;
    case 4uLL:
      sub_1BE837F8C(a1, a1 + 72, a1 + 144, a2 - 72, a3);
      return 1;
    case 5uLL:
      sub_1BE8380CC(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 144);
      sub_1BE837B24((__int128 *)a1, (__int128 *)(a1 + 72), (__int128 *)(a1 + 144), a3);
      v15 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v27 = *(_OWORD *)v15;
      v28 = v18;
      v19 = *(_OWORD *)(v15 + 48);
      v29 = *(_OWORD *)(v15 + 32);
      v30 = v19;
      v31 = *(_QWORD *)(v15 + 64);
      v20 = v16;
      while (1)
      {
        v21 = a1 + v20;
        v22 = *(_OWORD *)(a1 + v20 + 160);
        *(_OWORD *)(v21 + 216) = *(_OWORD *)(a1 + v20 + 144);
        v23 = *(_OWORD *)(a1 + v20 + 192);
        *(_OWORD *)(v21 + 248) = *(_OWORD *)(a1 + v20 + 176);
        *(_OWORD *)(v21 + 232) = v22;
        *(_OWORD *)(a1 + v20 + 264) = v23;
        *(_QWORD *)(v21 + 280) = *(_QWORD *)(a1 + v20 + 208);
        if (v20 == -144)
          break;
        v20 -= 72;
        if (((*a3)(&v27, (__int128 *)(v21 + 72)) & 1) == 0)
        {
          v24 = a1 + v20 + 216;
          if ((__int128 *)v24 == &v27)
            goto LABEL_8;
          goto LABEL_17;
        }
      }
      v24 = a1;
      if ((__int128 *)a1 == &v27)
        goto LABEL_8;
LABEL_17:
      v25 = v28;
      *(_OWORD *)v24 = v27;
      *(_OWORD *)(v24 + 16) = v25;
      v26 = v30;
      *(_OWORD *)(v24 + 32) = v29;
      *(_OWORD *)(v24 + 48) = v26;
      *(_QWORD *)(v24 + 64) = v31;
LABEL_8:
      if (++v17 == 8)
        return v15 + 72 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 72;
    v15 += 72;
    if (v15 == a2)
      return 1;
  }
}

uint64_t sub_1BE837F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;

  sub_1BE837B24((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  result = (*a5)((__int128 *)a4, (__int128 *)a3);
  if ((_DWORD)result)
  {
    v12 = *(_OWORD *)a3;
    v11 = *(_OWORD *)(a3 + 16);
    v13 = *(_OWORD *)(a3 + 32);
    v14 = *(_OWORD *)(a3 + 48);
    v15 = *(_QWORD *)(a3 + 64);
    if (a3 != a4)
    {
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v16 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a3 + 32) = v16;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(a4 + 64);
    }
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v11;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v14;
    *(_QWORD *)(a4 + 64) = v15;
    result = (*a5)((__int128 *)a3, (__int128 *)a2);
    if ((_DWORD)result)
    {
      v18 = *(_OWORD *)a2;
      v17 = *(_OWORD *)(a2 + 16);
      v19 = *(_OWORD *)(a2 + 32);
      v20 = *(_OWORD *)(a2 + 48);
      v21 = *(_QWORD *)(a2 + 64);
      if (a2 != a3)
      {
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v22 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a2 + 32) = v22;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
        *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
      }
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v19;
      *(_OWORD *)(a3 + 48) = v20;
      *(_QWORD *)(a3 + 64) = v21;
      result = (*a5)((__int128 *)a2, (__int128 *)a1);
      if ((_DWORD)result)
      {
        v24 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        v25 = *(_OWORD *)(a1 + 32);
        v26 = *(_OWORD *)(a1 + 48);
        v27 = *(_QWORD *)(a1 + 64);
        if (a1 != a2)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v28 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v28;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        }
        *(_OWORD *)a2 = v24;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v25;
        *(_OWORD *)(a2 + 48) = v26;
        *(_QWORD *)(a2 + 64) = v27;
      }
    }
  }
  return result;
}

uint64_t sub_1BE8380CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;

  sub_1BE837F8C(a1, a2, a3, a4, a6);
  result = (*a6)((__int128 *)a5, (__int128 *)a4);
  if ((_DWORD)result)
  {
    v14 = *(_OWORD *)a4;
    v13 = *(_OWORD *)(a4 + 16);
    v15 = *(_OWORD *)(a4 + 32);
    v16 = *(_OWORD *)(a4 + 48);
    v17 = *(_QWORD *)(a4 + 64);
    if (a4 != a5)
    {
      *(_OWORD *)a4 = *(_OWORD *)a5;
      v18 = *(_OWORD *)(a5 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
      *(_OWORD *)(a4 + 32) = v18;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(a5 + 64);
    }
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v13;
    *(_OWORD *)(a5 + 32) = v15;
    *(_OWORD *)(a5 + 48) = v16;
    *(_QWORD *)(a5 + 64) = v17;
    result = (*a6)((__int128 *)a4, (__int128 *)a3);
    if ((_DWORD)result)
    {
      v20 = *(_OWORD *)a3;
      v19 = *(_OWORD *)(a3 + 16);
      v21 = *(_OWORD *)(a3 + 32);
      v22 = *(_OWORD *)(a3 + 48);
      v23 = *(_QWORD *)(a3 + 64);
      if (a3 != a4)
      {
        *(_OWORD *)a3 = *(_OWORD *)a4;
        v24 = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a3 + 32) = v24;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
        *(_QWORD *)(a3 + 64) = *(_QWORD *)(a4 + 64);
      }
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v19;
      *(_OWORD *)(a4 + 32) = v21;
      *(_OWORD *)(a4 + 48) = v22;
      *(_QWORD *)(a4 + 64) = v23;
      result = (*a6)((__int128 *)a3, (__int128 *)a2);
      if ((_DWORD)result)
      {
        v26 = *(_OWORD *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v27 = *(_OWORD *)(a2 + 32);
        v28 = *(_OWORD *)(a2 + 48);
        v29 = *(_QWORD *)(a2 + 64);
        if (a2 != a3)
        {
          *(_OWORD *)a2 = *(_OWORD *)a3;
          v30 = *(_OWORD *)(a3 + 32);
          *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
          *(_OWORD *)(a2 + 32) = v30;
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
          *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
        }
        *(_OWORD *)a3 = v26;
        *(_OWORD *)(a3 + 16) = v25;
        *(_OWORD *)(a3 + 32) = v27;
        *(_OWORD *)(a3 + 48) = v28;
        *(_QWORD *)(a3 + 64) = v29;
        result = (*a6)((__int128 *)a2, (__int128 *)a1);
        if ((_DWORD)result)
        {
          v32 = *(_OWORD *)a1;
          v31 = *(_OWORD *)(a1 + 16);
          v33 = *(_OWORD *)(a1 + 32);
          v34 = *(_OWORD *)(a1 + 48);
          v35 = *(_QWORD *)(a1 + 64);
          if (a1 != a2)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v36 = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
            *(_OWORD *)(a1 + 32) = v36;
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          }
          *(_OWORD *)a2 = v32;
          *(_OWORD *)(a2 + 16) = v31;
          *(_OWORD *)(a2 + 32) = v33;
          *(_OWORD *)(a2 + 48) = v34;
          *(_QWORD *)(a2 + 64) = v35;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BE838264(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, int a5)
{
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char *v57;
  int8x16_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int8x16_t *v76;
  char v77;
  uint64_t v78;
  int8x16_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x16_t *v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int64_t v127;

  v8 = (int8x16_t *)result;
LABEL_2:
  v9 = v8;
  while (2)
  {
    v10 = a2;
LABEL_4:
    v124 = a5;
LABEL_5:
    v8 = v9;
    v11 = (char *)v10 - (char *)v9;
    v12 = ((char *)v10 - (char *)v9) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[0]);
        if ((_DWORD)result)
        {
          v75 = v8->i64[0];
          v76 = a2;
          v8->i64[0] = a2[-1].i64[1];
          goto LABEL_171;
        }
        return result;
      case 3:
        v77 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[1], v8->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[1]);
        if ((v77 & 1) != 0)
        {
          v78 = v8->i64[0];
          if ((_DWORD)result)
          {
            v8->i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v78;
          }
          else
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v78;
            result = ((uint64_t (*)(uint64_t))*a3)(a2[-1].i64[1]);
            if ((_DWORD)result)
            {
              v75 = v8->i64[1];
              v76 = a2;
              v8->i64[1] = a2[-1].i64[1];
LABEL_171:
              v76[-1].i64[1] = v75;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v117 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v117;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[1], v8->i64[0]);
          goto LABEL_160;
        }
        return result;
      case 4:
        return sub_1BE672D98(v8, &v8->i64[1], (int8x16_t *)v8[1].i64, &a2[-1].i64[1], a3);
      case 5:
        v79 = v8 + 1;
        v80 = &v8[1].i64[1];
        sub_1BE672D98(v8, &v8->i64[1], (int8x16_t *)v8[1].i64, &v8[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8[1].i64[1]);
        if ((_DWORD)result)
        {
          v81 = *v80;
          *v80 = a2[-1].i64[1];
          a2[-1].i64[1] = v81;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v80, v79->i64[0]);
          if ((_DWORD)result)
          {
            v82 = v79->i64[0];
            v79->i64[0] = *v80;
            *v80 = v82;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v84 = v8->i64[1];
              v83 = v8[1].i64[0];
              v85 = v8->i64[0];
              v8->i64[1] = v83;
              v8[1].i64[0] = v84;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v83, v85);
LABEL_160:
              if ((_DWORD)result)
                *v8 = vextq_s8(*v8, *v8, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v86 = (int8x16_t *)&v8->u64[1];
          v87 = v8 == v10 || v86 == v10;
          v88 = v87;
          if ((a5 & 1) != 0)
          {
            if ((v88 & 1) == 0)
            {
              v89 = 0;
              v90 = (uint64_t *)v8;
              do
              {
                v93 = *v90;
                v92 = v90[1];
                v90 = (uint64_t *)v86;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v92, v93);
                if ((_DWORD)result)
                {
                  v94 = *v90;
                  v95 = v89;
                  do
                  {
                    *(uint64_t *)((char *)&v8->i64[1] + v95) = *(uint64_t *)((char *)v8->i64 + v95);
                    if (!v95)
                    {
                      v91 = (uint64_t *)v8;
                      goto LABEL_119;
                    }
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v94, *(uint64_t *)((char *)&v8->i64[-1] + v95));
                    v95 -= 8;
                  }
                  while ((result & 1) != 0);
                  v91 = (uint64_t *)((char *)&v8->i64[1] + v95);
LABEL_119:
                  *v91 = v94;
                }
                v86 = (int8x16_t *)(v90 + 1);
                v89 += 8;
              }
              while (v90 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v88 & 1) == 0)
          {
            do
            {
              v119 = v8->i64[0];
              v118 = v8->i64[1];
              v8 = v86;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v118, v119);
              if ((_DWORD)result)
              {
                v120 = v8->i64[0];
                v121 = (uint64_t *)v8;
                do
                {
                  v122 = v121;
                  v123 = *--v121;
                  *v122 = v123;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v120, *(v122 - 2));
                }
                while ((result & 1) != 0);
                *v121 = v120;
              }
              v86 = (int8x16_t *)&v8->u64[1];
            }
            while (&v8->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v10)
          {
            v96 = (unint64_t)(v12 - 2) >> 1;
            v127 = v96;
            do
            {
              if (v127 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = &v8->i64[v98];
                if (2 * v96 + 2 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v99, v99[1]))
                {
                  ++v99;
                  v98 = 2 * v96 + 2;
                }
                v100 = &v8->i64[v96];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v99, *v100);
                if ((result & 1) == 0)
                {
                  v125 = *v100;
                  do
                  {
                    v101 = v99;
                    *v100 = *v99;
                    if (v127 < v98)
                      break;
                    v102 = (2 * v98) | 1;
                    v99 = &v8->i64[v102];
                    v103 = 2 * v98 + 2;
                    if (v103 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v99, v99[1]))
                    {
                      ++v99;
                      v102 = v103;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v99, v125);
                    v100 = v101;
                    v98 = v102;
                  }
                  while (!(_DWORD)result);
                  *v101 = v125;
                }
              }
              v97 = v96-- <= 0;
            }
            while (!v97);
            v104 = (unint64_t)v11 >> 3;
            do
            {
              v105 = 0;
              v106 = v8->i64[0];
              v107 = (uint64_t *)v8;
              do
              {
                v108 = &v107[v105 + 1];
                v109 = (2 * v105) | 1;
                v110 = 2 * v105 + 2;
                if (v110 < v104)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v107[v105 + 1], v107[v105 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v108;
                    v109 = v110;
                  }
                }
                *v107 = *v108;
                v107 = v108;
                v105 = v109;
              }
              while (v109 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
              v111 = &a2[-1].i64[1];
              v87 = v108 == (uint64_t *)&a2[-1].u64[1];
              a2 = (int8x16_t *)((char *)a2 - 8);
              if (v87)
              {
                *v108 = v106;
              }
              else
              {
                *v108 = *v111;
                *v111 = v106;
                v112 = (char *)v108 - (char *)v8 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v8->i64[v113];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v114, *v108);
                  if ((_DWORD)result)
                  {
                    v115 = *v108;
                    do
                    {
                      v116 = v114;
                      *v108 = *v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v8->i64[v113];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v114, v115);
                      v108 = v116;
                    }
                    while ((result & 1) != 0);
                    *v116 = v115;
                  }
                }
              }
              v97 = v104-- <= 2;
            }
            while (!v97);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v8->i64[0], v8->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v8->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v8->i64[v13];
            if (v19)
            {
              v8->i64[v13] = v10[-1].i64[1];
              v10[-1].i64[1] = v20;
              --a4;
              v21 = v8->i64[0];
              if ((a5 & 1) != 0)
                goto LABEL_56;
              goto LABEL_55;
            }
            v8->i64[v13] = v8->i64[0];
            v8->i64[0] = v20;
            if ((*a3)(v10[-1].i64[1]))
            {
              v34 = v8->i64[0];
              v8->i64[0] = v10[-1].i64[1];
              v10[-1].i64[1] = v34;
            }
          }
          else if (v19)
          {
            v24 = v8->i64[0];
            v8->i64[0] = v10[-1].i64[1];
            v10[-1].i64[1] = v24;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[0], v8->i64[v13]))
            {
              v25 = v8->i64[v13];
              v8->i64[v13] = v8->i64[0];
              v8->i64[0] = v25;
              --a4;
              v21 = v25;
              if ((a5 & 1) != 0)
                goto LABEL_56;
              goto LABEL_55;
            }
          }
          --a4;
          v21 = v8->i64[0];
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          v54 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-1].i64[1], v21);
          v21 = v8->i64[0];
          if ((v54 & 1) != 0)
            goto LABEL_56;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[0], v10[-1].i64[1]);
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v68 = v9->i64[1];
              v9 = (int8x16_t *)((char *)v9 + 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v68);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v69 = &v8->i64[1];
            do
            {
              v9 = (int8x16_t *)v69;
              if (v69 >= (uint64_t *)v10)
                break;
              ++v69;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v9->i64[0]);
            }
            while (!(_DWORD)result);
          }
          if (v9 < v10)
          {
            v10 = a2;
            do
            {
              v70 = v10[-1].i64[1];
              v10 = (int8x16_t *)((char *)v10 - 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v70);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v10)
          {
            v71 = v9->i64[0];
            v9->i64[0] = v10->i64[0];
            v10->i64[0] = v71;
            do
            {
              v72 = v9->i64[1];
              v9 = (int8x16_t *)((char *)v9 + 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v72));
            do
            {
              v73 = v10[-1].i64[1];
              v10 = (int8x16_t *)((char *)v10 - 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v73);
            }
            while ((result & 1) != 0);
          }
          v74 = &v9[-1].i64[1];
          if (&v9[-1].u64[1] != (unint64_t *)v8)
            v8->i64[0] = *v74;
          a5 = 0;
          *v74 = v21;
          continue;
        }
        v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v8->i64[v13], v8->i64[0]);
        v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v8->i64[v13]);
        v126 = a4;
        if ((v15 & 1) != 0)
        {
          v17 = v8->i64[0];
          if (v16)
          {
            v8->i64[0] = v10[-1].i64[1];
            v10[-1].i64[1] = v17;
          }
          else
          {
            v8->i64[0] = v8->i64[v13];
            v8->i64[v13] = v17;
            if ((*a3)(v10[-1].i64[1]))
            {
              v26 = v8->i64[v13];
              v8->i64[v13] = v10[-1].i64[1];
              v10[-1].i64[1] = v26;
            }
          }
        }
        else if (v16)
        {
          v22 = v8->i64[v13];
          v8->i64[v13] = v10[-1].i64[1];
          v10[-1].i64[1] = v22;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v13], v8->i64[0]))
          {
            v23 = v8->i64[0];
            v8->i64[0] = v8->i64[v13];
            v8->i64[v13] = v23;
          }
        }
        v27 = v13 - 1;
        v28 = v13 - 1;
        v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v28], v8->i64[1]);
        v30 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[0], v8->i64[v28]);
        if ((v29 & 1) != 0)
        {
          v31 = v8->i64[1];
          if (v30)
          {
            v8->i64[1] = v10[-1].i64[0];
            v10[-1].i64[0] = v31;
          }
          else
          {
            v8->i64[1] = v8->i64[v28];
            v8->i64[v28] = v31;
            if ((*a3)(v10[-1].i64[0]))
            {
              v35 = v8->i64[v28];
              v8->i64[v28] = v10[-1].i64[0];
              v10[-1].i64[0] = v35;
            }
          }
        }
        else if (v30)
        {
          v32 = v8->i64[v28];
          v8->i64[v28] = v10[-1].i64[0];
          v10[-1].i64[0] = v32;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v28], v8->i64[1]))
          {
            v33 = v8->i64[1];
            v8->i64[1] = v8->i64[v28];
            v8->i64[v28] = v33;
          }
        }
        v36 = v10;
        v37 = v13 + 1;
        v38 = v13 + 1;
        v39 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v38], v8[1].i64[0]);
        v40 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v36[-2].i64[1], v8->i64[v38]);
        if ((v39 & 1) != 0)
        {
          v41 = v8[1].i64[0];
          if (v40)
          {
            v8[1].i64[0] = a2[-2].i64[1];
            a2[-2].i64[1] = v41;
          }
          else
          {
            v8[1].i64[0] = v8->i64[v38];
            v8->i64[v38] = v41;
            if ((*a3)(a2[-2].i64[1]))
            {
              v44 = v8->i64[v38];
              v8->i64[v38] = a2[-2].i64[1];
              a2[-2].i64[1] = v44;
            }
          }
        }
        else if (v40)
        {
          v42 = v8->i64[v38];
          v8->i64[v38] = a2[-2].i64[1];
          a2[-2].i64[1] = v42;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v38], v8[1].i64[0]))
          {
            v43 = v8[1].i64[0];
            v8[1].i64[0] = v8->i64[v38];
            v8->i64[v38] = v43;
          }
        }
        v45 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v13], v8->i64[v27]);
        v46 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v37], v8->i64[v13]);
        if ((v45 & 1) != 0)
        {
          v47 = v8->i64[v27];
          if (v46)
          {
            v8->i64[v27] = v8->i64[v38];
            v8->i64[v38] = v47;
            v48 = v8->i64[v13];
          }
          else
          {
            v8->i64[v27] = v8->i64[v13];
            v8->i64[v13] = v47;
            v51 = (*a3)(v8->i64[v37]);
            v48 = v8->i64[v13];
            if (v51)
            {
              v52 = v8->i64[v38];
              v8->i64[v13] = v52;
              v8->i64[v38] = v48;
              v48 = v52;
            }
          }
          v10 = a2;
        }
        else
        {
          v48 = v8->i64[v13];
          v10 = a2;
          if (v46)
          {
            v8->i64[v13] = v8->i64[v38];
            v8->i64[v38] = v48;
            v49 = ((uint64_t (*)(void))*a3)();
            v48 = v8->i64[v13];
            if (v49)
            {
              v50 = v8->i64[v28];
              v8->i64[v28] = v48;
              v8->i64[v13] = v50;
              v48 = v50;
            }
          }
        }
        a5 = v124;
        v53 = v8->i64[0];
        v8->i64[0] = v48;
        v8->i64[v13] = v53;
        a4 = v126 - 1;
        v21 = v8->i64[0];
        if ((v124 & 1) == 0)
          goto LABEL_55;
LABEL_56:
        v55 = 0;
        do
          v56 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[++v55], v21);
        while ((v56 & 1) != 0);
        v57 = &v8->i8[v55 * 8];
        v58 = v10;
        if (v55 == 1)
        {
          v58 = v10;
          do
          {
            if (v57 >= (char *)v58)
              break;
            v60 = v58[-1].i64[1];
            v58 = (int8x16_t *)((char *)v58 - 8);
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v60, v21) & 1) == 0);
        }
        else
        {
          do
          {
            v59 = v58[-1].i64[1];
            v58 = (int8x16_t *)((char *)v58 - 8);
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v21));
        }
        if (v57 >= (char *)v58)
        {
          v66 = (uint64_t *)(v57 - 8);
          if (v57 - 8 == (char *)v8)
            goto LABEL_74;
LABEL_73:
          v8->i64[0] = *v66;
          goto LABEL_74;
        }
        v61 = &v8->i64[v55];
        v62 = (uint64_t *)v58;
        do
        {
          v63 = *v61;
          *v61 = *v62;
          *v62 = v63;
          do
          {
            v64 = v61[1];
            ++v61;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v64, v21) & 1) != 0);
          do
            v65 = *--v62;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v65, v21));
        }
        while (v61 < v62);
        v66 = v61 - 1;
        v10 = a2;
        if (v61 - 1 != (uint64_t *)v8)
          goto LABEL_73;
LABEL_74:
        *v66 = v21;
        if (v57 < (char *)v58)
        {
LABEL_77:
          result = sub_1BE838264(v8, v66, a3, a4, a5 & 1);
          a5 = 0;
          v9 = (int8x16_t *)(v66 + 1);
          goto LABEL_4;
        }
        v67 = sub_1BE838DE0(v8, v66, a3);
        v9 = (int8x16_t *)(v66 + 1);
        result = sub_1BE838DE0(v66 + 1, v10, a3);
        if (!(_DWORD)result)
        {
          if (v67)
            goto LABEL_5;
          goto LABEL_77;
        }
        a2 = (int8x16_t *)v66;
        if (!v67)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1BE838DE0(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      sub_1BE672D98(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      sub_1BE672D98(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
  {
LABEL_35:
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
  v31 = *v28;
  v32 = v29;
  do
  {
    v33 = (char *)a1 + v32;
    *(_QWORD *)((char *)a1 + v32 + 24) = *(_QWORD *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8)
        goto LABEL_35;
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *((_QWORD *)v33 + 1)) & 1) != 0);
  *(_QWORD *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8)
    goto LABEL_35;
  return v28 + 1 == a2;
}

_DWORD *sub_1BE839128(uint64_t a1, unsigned int *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;

  v4 = *(_DWORD **)(a1 + 8);
  v2 = (_DWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = v2;
  v10 = *a2;
  v9 = a2[1];
  do
  {
    v11 = v3[7];
    v12 = v11 >= v10;
    v13 = v11 > v10;
    if (v12)
      v14 = v13;
    else
      v14 = -1;
    v15 = v3[9];
    v16 = v3[10];
    v12 = v15 >= v6;
    v17 = v15 > v6;
    if (v12)
      v18 = v17;
    else
      v18 = -1;
    v19 = v16 > v5;
    if (v16 < v5)
      v19 = -1;
    if (v14 == -1)
    {
LABEL_3:
      v3 += 2;
      goto LABEL_4;
    }
    if (v14)
      goto LABEL_23;
    v20 = v3[8];
    v12 = v20 >= v9;
    v21 = v20 > v9;
    if (!v12)
      v21 = -1;
    if (v21 == -1)
      goto LABEL_3;
    if (v21)
      goto LABEL_23;
    if (v18 == -1)
      goto LABEL_3;
    if (v18)
      goto LABEL_23;
    if (v19)
    {
      if (v19 == -1)
        goto LABEL_3;
LABEL_23:
      v8 = v3;
      goto LABEL_4;
    }
    if (v3[11] < v7)
      v3 += 2;
    else
      v8 = v3;
LABEL_4:
    v3 = *(_DWORD **)v3;
  }
  while (v3);
  if (v8 == v2)
    return v2;
  v22 = v8[7];
  v12 = v10 >= v22;
  v23 = v10 > v22;
  if (!v12)
    v23 = -1;
  v24 = v8[9];
  v25 = v8[10];
  v12 = v6 >= v24;
  v26 = v6 > v24;
  if (!v12)
    v26 = -1;
  v12 = v5 >= v25;
  v27 = v5 > v25;
  if (!v12)
    v27 = -1;
  if (v23 == -1)
    return v2;
  if (!v23)
  {
    v28 = v8[8];
    v12 = v9 >= v28;
    v29 = v9 > v28;
    if (!v12)
      v29 = -1;
    if (v29 == -1 || !v29 && (v26 == -1 || !v26 && (v27 == -1 || !v27 && v7 < v8[11])))
      return v2;
  }
  return v8;
}

_DWORD *sub_1BE839270(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  _DWORD *result;
  _DWORD *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  BOOL v22;
  _BOOL4 v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;

  v5 = *(_DWORD **)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[2];
    v7 = a3[3];
    v8 = a3[4];
    v9 = *a3;
    v10 = a3[1];
    do
    {
      while (1)
      {
        v11 = v4;
        v12 = v4[7];
        v13 = v9 < v12 ? -1 : v9 > v12;
        v14 = v4[9];
        v15 = v4[10];
        v16 = v6 < v14 ? -1 : v6 > v14;
        v17 = v7 < v15 ? -1 : v7 > v15;
        if (v13 != -1)
        {
          v18 = v4[11];
          if (v13)
            break;
          v19 = v11[8];
          v20 = v10 >= v19;
          v21 = v10 > v19;
          if (!v20)
            v21 = -1;
          if (v21 != -1 && (v21 || v16 != -1 && (v16 || v17 != -1 && (v17 || v8 >= v18))))
            break;
        }
        v4 = *(_DWORD **)v11;
        result = v11;
        if (!*(_QWORD *)v11)
          goto LABEL_44;
      }
      v22 = v9 > v12;
      v23 = v9 < v12;
      if (v22)
        v24 = -1;
      else
        v24 = v23;
      if (v6 > v14)
        v25 = -1;
      else
        v25 = v6 < v14;
      v26 = v7 < v15;
      if (v7 > v15)
        v26 = -1;
      if (v24 != -1)
      {
        if (v24)
          break;
        v27 = v11[8];
        v20 = v27 >= v10;
        v28 = v27 > v10;
        if (!v20)
          v28 = -1;
        if (v28 != -1 && (v28 || v25 != -1 && (v25 || v26 != -1 && (v26 || v18 >= v8))))
          break;
      }
      result = v11 + 2;
      v4 = (_DWORD *)*((_QWORD *)v11 + 1);
    }
    while (v4);
LABEL_44:
    *a2 = v11;
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1BE839398(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t *, uint64_t *);
  char v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  BOOL v61;
  BOOL v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  BOOL v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;

  v8 = (uint64_t *)result;
LABEL_2:
  v114 = a2 - 1;
  v111 = a2 - 2;
  v112 = a2;
  v9 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    v67 = v114;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v114, v10);
        if ((_DWORD)result)
        {
          v68 = *v10;
          if (v10 != v114)
            *v10 = *v114;
          *v114 = v68;
        }
        return result;
      case 3uLL:
        v69 = v10 + 1;
        v70 = (*a3)(v10 + 1, v10);
        result = (*a3)(v114, v10 + 1);
        if ((v70 & 1) != 0)
        {
          v71 = *v10;
          if ((_DWORD)result)
          {
            if (v10 == v114)
              goto LABEL_217;
          }
          else
          {
            *v10 = v10[1];
            v10[1] = v71;
            result = (*a3)(v114, v10 + 1);
            if (!(_DWORD)result)
              return result;
            v71 = *v69;
            v8 = v10 + 1;
            if (v69 == v114)
              goto LABEL_217;
          }
        }
        else
        {
          if (!(_DWORD)result)
            return result;
          v106 = *v69;
          if (v69 != v114)
            *v69 = *v114;
          *v114 = v106;
          result = (*a3)(v10 + 1, v10);
          if (!(_DWORD)result)
            return result;
          v71 = *v10;
          v67 = v10 + 1;
        }
        *v8 = *v67;
        v8 = v67;
LABEL_217:
        *v8 = v71;
        return result;
      case 4uLL:
        return sub_1BE83A440(v10, v10 + 1, v10 + 2, v114, (uint64_t (**)(_QWORD, _QWORD))a3);
      case 5uLL:
        v72 = v10 + 2;
        v73 = v10 + 3;
        sub_1BE83A440(v10, v10 + 1, v10 + 2, v10 + 3, (uint64_t (**)(_QWORD, _QWORD))a3);
        result = (*a3)(v114, v10 + 3);
        if ((_DWORD)result)
        {
          v74 = *v73;
          if (v73 != v114)
            *v73 = *v114;
          *v114 = v74;
          result = (*a3)(v10 + 3, v10 + 2);
          if ((_DWORD)result)
          {
            v75 = *v72;
            *v72 = *v73;
            *v73 = v75;
            result = (*a3)(v10 + 2, v10 + 1);
            if ((_DWORD)result)
            {
              v76 = v10[1];
              v10[1] = v10[2];
              v10[2] = v76;
              result = (*a3)(v10 + 1, v10);
              if ((_DWORD)result)
              {
                v77 = *v10;
                *v10 = v10[1];
                v10[1] = v77;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v78 = v10 + 1;
          v80 = v10 == a2 || v78 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 0;
              v82 = v10;
              while (1)
              {
                v84 = v82;
                v82 = v78;
                result = (*a3)(v78, v84);
                if (!(_DWORD)result)
                  goto LABEL_155;
                v117 = *v82;
                v85 = v81;
                do
                {
                  *(uint64_t *)((char *)v10 + v85 + 8) = *(uint64_t *)((char *)v10 + v85);
                  if (!v85)
                  {
                    v83 = v10;
                    if (v10 == &v117)
                      goto LABEL_155;
LABEL_154:
                    *v83 = v117;
                    goto LABEL_155;
                  }
                  v85 -= 8;
                  result = (*a3)(&v117, (uint64_t *)((char *)v10 + v85));
                }
                while ((result & 1) != 0);
                v83 = (uint64_t *)((char *)v10 + v85 + 8);
                if (v83 != &v117)
                  goto LABEL_154;
LABEL_155:
                v78 = v82 + 1;
                v81 += 8;
                if (v82 + 1 == a2)
                  return result;
              }
            }
          }
          else if (!v80)
          {
            do
            {
              v107 = v8;
              v8 = v78;
              result = (*a3)(v78, v107);
              if ((_DWORD)result)
              {
                v117 = *v8;
                v108 = v8;
                do
                {
                  v109 = v108;
                  v110 = *--v108;
                  *v109 = v110;
                  result = (*a3)(&v117, v109 - 2);
                }
                while ((result & 1) != 0);
                if (v108 != &v117)
                  *v108 = v117;
              }
              v78 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v86 = (v12 - 2) >> 1;
            v115 = v86;
            do
            {
              if (v115 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &v8[v88];
                if (2 * v86 + 2 < (uint64_t)v12 && (*a3)(&v8[v88], v89 + 1))
                {
                  ++v89;
                  v88 = 2 * v86 + 2;
                }
                v90 = &v8[v86];
                result = (*a3)(v89, v90);
                if ((result & 1) == 0)
                {
                  v117 = *v90;
                  do
                  {
                    v91 = v89;
                    if (v90 != v89)
                      *v90 = *v89;
                    if (v115 < v88)
                      break;
                    v92 = (2 * v88) | 1;
                    v89 = &v8[v92];
                    v93 = 2 * v88 + 2;
                    if (v93 < (uint64_t)v12 && (*a3)(&v8[v92], v89 + 1))
                    {
                      ++v89;
                      v92 = v93;
                    }
                    result = (*a3)(v89, &v117);
                    v90 = v91;
                    v88 = v92;
                  }
                  while (!(_DWORD)result);
                  if (v91 != &v117)
                    *v91 = v117;
                }
              }
              v87 = v86-- <= 0;
            }
            while (!v87);
            v94 = (unint64_t)v11 >> 3;
            v95 = v112;
            do
            {
              v96 = v95;
              v97 = 0;
              v116 = *v8;
              v98 = v8;
              do
              {
                v99 = &v98[v97 + 1];
                v100 = 2 * v97;
                v97 = (2 * v97) | 1;
                v101 = v100 + 2;
                if (v100 + 2 < v94)
                {
                  result = (*a3)(v99, v99 + 1);
                  if ((_DWORD)result)
                  {
                    ++v99;
                    v97 = v101;
                  }
                }
                if (v98 != v99)
                  *v98 = *v99;
                v98 = v99;
              }
              while (v97 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
              v95 = v96 - 1;
              if (v99 == v96 - 1)
              {
                *v99 = v116;
              }
              else
              {
                *v99 = *v95;
                *v95 = v116;
                v102 = (char *)v99 - (char *)v8 + 8;
                if (v102 >= 9)
                {
                  v103 = (((unint64_t)v102 >> 3) - 2) >> 1;
                  v104 = &v8[v103];
                  result = (*a3)(v104, v99);
                  if ((_DWORD)result)
                  {
                    v117 = *v99;
                    do
                    {
                      v105 = v104;
                      if (v99 != v104)
                        *v99 = *v104;
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                      v104 = &v8[v103];
                      result = (*a3)(v104, &v117);
                      v99 = v105;
                    }
                    while ((result & 1) != 0);
                    if (v105 != &v117)
                      *v105 = v117;
                  }
                }
              }
              v87 = v94-- <= 2;
            }
            while (!v87);
          }
          return result;
        }
        v13 = v9;
        v14 = v12 >> 1;
        v15 = &v10[v12 >> 1];
        v16 = *a3;
        if ((unint64_t)v11 >= 0x401)
        {
          v17 = v16(&v10[v12 >> 1], v10);
          v18 = (*a3)(v114, &v10[v12 >> 1]);
          if ((v17 & 1) != 0)
          {
            v19 = *v10;
            if (v18)
            {
              v20 = v114;
              v21 = v10;
              v22 = v10;
              if (v10 == v114)
                goto LABEL_28;
            }
            else
            {
              *v10 = *v15;
              *v15 = v19;
              if (!(*a3)(v114, &v10[v12 >> 1]))
                goto LABEL_29;
              v19 = *v15;
              v20 = v114;
              v21 = &v10[v12 >> 1];
              v22 = v114;
              if (v15 == v114)
                goto LABEL_28;
            }
          }
          else
          {
            if (!v18)
              goto LABEL_29;
            v29 = *v15;
            if (v15 != v114)
              *v15 = *v114;
            *v114 = v29;
            if (!(*a3)(&v10[v12 >> 1], v10))
            {
LABEL_29:
              v33 = v10 + 1;
              v34 = &v8[v14 - 1];
              v35 = (*a3)(v34, v8 + 1);
              v36 = (*a3)(v111, v34);
              if ((v35 & 1) != 0)
              {
                v37 = *v33;
                if (v36)
                {
                  v38 = v111;
                  v39 = v8 + 1;
                  if (v33 == v111)
                  {
LABEL_33:
                    *v39 = v37;
                    goto LABEL_48;
                  }
LABEL_32:
                  *v33 = *v38;
                  v39 = v38;
                  goto LABEL_33;
                }
                if (v14 != 2)
                  *v33 = *v34;
                *v34 = v37;
                if ((*a3)(v111, &v8[v14 - 1]))
                {
                  v37 = *v34;
                  v38 = v111;
                  v33 = &v8[v14 - 1];
                  v39 = v33;
                  if (v34 == v111)
                    goto LABEL_33;
                  goto LABEL_32;
                }
              }
              else if (v36)
              {
                v40 = *v34;
                if (v34 != v111)
                  *v34 = *v111;
                *v111 = v40;
                if ((*a3)(&v8[v14 - 1], v8 + 1))
                {
                  v37 = *v33;
                  v38 = &v8[v14 - 1];
                  v39 = v38;
                  if (v14 == 2)
                    goto LABEL_33;
                  goto LABEL_32;
                }
              }
LABEL_48:
              v41 = v8 + 2;
              v42 = v14 + 1;
              v43 = &v8[v14 + 1];
              v44 = (*a3)(v43, v8 + 2);
              v45 = (*a3)(v13, v43);
              if ((v44 & 1) != 0)
              {
                v46 = *v41;
                if (v45)
                {
                  v9 = v13;
                  v47 = v13;
                  v48 = v8 + 2;
                  if (v41 == v13)
                  {
LABEL_52:
                    *v48 = v46;
                    goto LABEL_64;
                  }
LABEL_51:
                  *v41 = *v47;
                  v48 = v47;
                  goto LABEL_52;
                }
                v9 = v13;
                if (v42 != 2)
                  *v41 = *v43;
                *v43 = v46;
                if ((*a3)(v13, v43))
                {
                  v46 = *v43;
                  v47 = v13;
                  v41 = v43;
                  v48 = v43;
                  if (v43 == v13)
                    goto LABEL_52;
                  goto LABEL_51;
                }
              }
              else
              {
                v9 = v13;
                if (v45)
                {
                  v49 = *v43;
                  if (v43 != v13)
                    *v43 = *v13;
                  *v13 = v49;
                  if ((*a3)(v43, v8 + 2))
                  {
                    v46 = *v41;
                    v47 = v43;
                    v48 = v43;
                    if (v42 == 2)
                      goto LABEL_52;
                    goto LABEL_51;
                  }
                }
              }
LABEL_64:
              v50 = (*a3)(v15, v34);
              v51 = (*a3)(v43, v15);
              if ((v50 & 1) != 0)
              {
                v52 = *v34;
                if ((v51 & 1) != 0)
                {
                  v24 = v114;
LABEL_72:
                  *v34 = *v43;
                  *v43 = v52;
                  goto LABEL_73;
                }
                *v34 = *v15;
                *v15 = v52;
                v34 = v15;
                v24 = v114;
                if ((*a3)(v43, v15))
                {
LABEL_71:
                  v52 = *v34;
                  goto LABEL_72;
                }
              }
              else
              {
                if (!v51)
                {
                  v32 = v8;
                  v24 = v114;
                  goto LABEL_75;
                }
                v53 = *v15;
                *v15 = *v43;
                *v43 = v53;
                v43 = v15;
                v24 = v114;
                if (((*a3)(v15, v34) & 1) != 0)
                  goto LABEL_71;
              }
LABEL_73:
              v32 = v8;
LABEL_75:
              v26 = *v32;
              v27 = v15;
              v15 = v32;
              goto LABEL_76;
            }
            v19 = *v10;
            v20 = &v10[v12 >> 1];
            v21 = v10;
          }
          *v21 = *v20;
          v22 = v20;
LABEL_28:
          *v22 = v19;
          goto LABEL_29;
        }
        v23 = v16(v10, &v10[v12 >> 1]);
        v24 = v114;
        v25 = (*a3)(v114, v10);
        v9 = v13;
        if ((v23 & 1) != 0)
        {
          v26 = *v15;
          if (v25)
          {
            v27 = v114;
            v28 = v114;
            if (v15 == v114)
              goto LABEL_77;
          }
          else
          {
            *v15 = *v10;
            *v10 = v26;
            if (!(*a3)(v114, v10))
              goto LABEL_78;
            v26 = *v10;
            v27 = v114;
            v15 = v10;
            v28 = v10;
            if (v10 == v114)
              goto LABEL_77;
          }
LABEL_76:
          *v15 = *v27;
          v28 = v27;
LABEL_77:
          *v28 = v26;
          goto LABEL_78;
        }
        if (v25)
        {
          v30 = *v10;
          if (v10 != v114)
            *v10 = *v114;
          *v114 = v30;
          v31 = (*a3)(v10, &v10[v12 >> 1]);
          v32 = &v10[v12 >> 1];
          v15 = v10;
          if ((v31 & 1) != 0)
            goto LABEL_75;
        }
LABEL_78:
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(v8 - 1, v8) & 1) == 0)
        {
          v117 = *v8;
          result = (*a3)(&v117, v24);
          a2 = v112;
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
              result = (*a3)(&v117, ++v10);
            while ((result & 1) == 0);
          }
          else
          {
            v63 = v8 + 1;
            do
            {
              v10 = v63;
              if (v63 >= v112)
                break;
              result = (*a3)(&v117, v63);
              v63 = v10 + 1;
            }
            while (!(_DWORD)result);
          }
          v64 = v112;
          if (v10 < v112)
          {
            v64 = v112;
            do
              result = (*a3)(&v117, --v64);
            while ((result & 1) != 0);
          }
          while (v10 < v64)
          {
            v65 = *v10;
            *v10 = *v64;
            *v64 = v65;
            do
              ++v10;
            while (!(*a3)(&v117, v10));
            do
              result = (*a3)(&v117, --v64);
            while ((result & 1) != 0);
          }
          v66 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v66;
          if (v66 != &v117)
            *v66 = v117;
          a5 = 0;
          continue;
        }
        v54 = 0;
        v117 = *v8;
        a2 = v112;
        do
          ++v54;
        while (((*a3)(&v8[v54], &v117) & 1) != 0);
        v55 = &v8[v54];
        v56 = v112;
        if (v54 == 1)
        {
          v56 = v112;
          do
          {
            if (v55 >= v56)
              break;
            --v56;
          }
          while (((*a3)(v56, &v117) & 1) == 0);
        }
        else
        {
          do
            --v56;
          while (!(*a3)(v56, &v117));
        }
        if (v55 >= v56)
        {
          v60 = v55 - 1;
          if (v55 - 1 == v8)
            goto LABEL_98;
LABEL_97:
          *v8 = *v60;
          goto LABEL_98;
        }
        v57 = &v8[v54];
        v58 = v56;
        do
        {
          v59 = *v57;
          *v57 = *v58;
          *v58 = v59;
          do
            ++v57;
          while (((*a3)(v57, &v117) & 1) != 0);
          do
            --v58;
          while (!(*a3)(v58, &v117));
        }
        while (v57 < v58);
        v60 = v57 - 1;
        if (v60 != v8)
          goto LABEL_97;
LABEL_98:
        if (v60 != &v117)
          *v60 = v117;
        v61 = v55 >= v56;
        v9 = v13;
        if (!v61)
        {
LABEL_104:
          result = sub_1BE839398(v8, v60, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v60 + 1;
          continue;
        }
        v62 = sub_1BE83A0A0(v8, v60, a3);
        v10 = v60 + 1;
        result = sub_1BE83A0A0(v60 + 1, v112, a3);
        if (!(_DWORD)result)
        {
          if (v62)
            continue;
          goto LABEL_104;
        }
        a2 = v60;
        if (!v62)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1BE83A0A0(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;

  v5 = a1;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, v5))
      {
        v9 = *v5;
        if (v8 != v5)
          *v5 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      v10 = v5 + 1;
      v11 = a2 - 1;
      v12 = (*a3)(v5 + 1, v5);
      v13 = (*a3)(v11, v5 + 1);
      if ((v12 & 1) != 0)
      {
        v14 = *v5;
        if (v13)
        {
          if (v11 == v5)
            goto LABEL_32;
        }
        else
        {
          *v5 = v5[1];
          v5[1] = v14;
          if (!(*a3)(v11, v5 + 1))
            return 1;
          v14 = *v10;
          ++v5;
          if (v10 == v11)
            goto LABEL_32;
        }
LABEL_31:
        *v5 = *v11;
        v5 = v11;
LABEL_32:
        *v5 = v14;
        return 1;
      }
      if (v13)
      {
        v28 = *v10;
        if (v10 != v11)
          *v10 = *v11;
        *v11 = v28;
        if ((*a3)(v5 + 1, v5))
        {
          v14 = *v5;
          v11 = v5 + 1;
          goto LABEL_31;
        }
      }
      return 1;
    case 4:
      sub_1BE83A440(v5, v5 + 1, v5 + 2, a2 - 1, (uint64_t (**)(_QWORD, _QWORD))a3);
      return 1;
    case 5:
      v21 = v5 + 2;
      v22 = v5 + 3;
      v23 = a2 - 1;
      sub_1BE83A440(v5, v5 + 1, v5 + 2, v5 + 3, (uint64_t (**)(_QWORD, _QWORD))a3);
      if ((*a3)(v23, v5 + 3))
      {
        v24 = *v22;
        if (v22 != v23)
          *v22 = *v23;
        *v23 = v24;
        if ((*a3)(v5 + 3, v5 + 2))
        {
          v25 = *v21;
          *v21 = *v22;
          *v22 = v25;
          if ((*a3)(v5 + 2, v5 + 1))
          {
            v26 = v5[1];
            v5[1] = v5[2];
            v5[2] = v26;
            if ((*a3)(v5 + 1, v5))
            {
              v27 = *v5;
              *v5 = v5[1];
              v5[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v15 = v5 + 2;
      v16 = v5 + 1;
      v17 = (*a3)(v5 + 1, v5);
      v18 = (*a3)(v5 + 2, v5 + 1);
      if ((v17 & 1) != 0)
      {
        v19 = *v5;
        if ((v18 & 1) != 0)
        {
          v16 = v5 + 2;
          v20 = v5;
LABEL_35:
          *v20 = *v16;
          *v16 = v19;
          goto LABEL_36;
        }
        *v5 = v5[1];
        v5[1] = v19;
        v31 = (*a3)(v5 + 2, v5 + 1);
        v20 = v5 + 1;
        v16 = v5 + 2;
        if (!v31)
          goto LABEL_36;
LABEL_34:
        v19 = *v20;
        goto LABEL_35;
      }
      if (v18)
      {
        v29 = v5[1];
        v5[1] = v5[2];
        v5[2] = v29;
        v30 = (*a3)(v5 + 1, v5);
        v20 = v5;
        if ((v30 & 1) != 0)
          goto LABEL_34;
      }
LABEL_36:
      v32 = v5 + 3;
      if (v5 + 3 == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      while (1)
      {
        if ((*a3)(v32, v15))
        {
          v38 = *v32;
          v35 = v33;
          while (1)
          {
            v36 = (char *)v5 + v35;
            *(uint64_t *)((char *)v5 + v35 + 24) = *(uint64_t *)((char *)v5 + v35 + 16);
            if (v35 == -16)
              break;
            v35 -= 8;
            if (((*a3)(&v38, (uint64_t *)v36 + 1) & 1) == 0)
            {
              v37 = (uint64_t *)((char *)v5 + v35 + 24);
              if (v37 == &v38)
                goto LABEL_38;
              goto LABEL_47;
            }
          }
          v37 = v5;
          if (v5 == &v38)
            goto LABEL_38;
LABEL_47:
          *v37 = v38;
LABEL_38:
          if (++v34 == 8)
            return v32 + 1 == a2;
        }
        v15 = v32;
        v33 += 8;
        if (++v32 == a2)
          return 1;
      }
  }
}

uint64_t sub_1BE83A440(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD, _QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      v13 = a3;
      v14 = a1;
      v15 = a3;
      if (a1 == a3)
      {
LABEL_5:
        *v15 = v12;
        goto LABEL_17;
      }
LABEL_4:
      *v14 = *v13;
      v15 = v13;
      goto LABEL_5;
    }
    if (a1 != a2)
      *a1 = *a2;
    *a2 = v12;
    if ((*a5)(a3, a2))
    {
      v12 = *a2;
      v13 = a3;
      v14 = a2;
      v15 = a2;
      if (a2 == a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (v11)
  {
    v16 = *a2;
    if (a2 != a3)
      *a2 = *a3;
    *a3 = v16;
    if ((*a5)(a2, a1))
    {
      v12 = *a1;
      v13 = a2;
      v14 = a1;
      v15 = a2;
      if (a1 == a2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
LABEL_17:
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v18 = *a3;
    if (a3 != a4)
      *a3 = *a4;
    *a4 = v18;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v19 = *a2;
      if (a2 != a3)
        *a2 = *a3;
      *a3 = v19;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v20 = *a1;
        if (a1 != a2)
          *a1 = *a2;
        *a2 = v20;
      }
    }
  }
  return result;
}

_QWORD *sub_1BE83A5E8(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  _QWORD *v13;
  double *v14;
  _QWORD *v15;
  double *v16;
  unint64_t v17;
  double *v18;
  double *v19;

  v3 = *(_QWORD *)(a2 + 16);
  v2 = *(_QWORD **)(a2 + 24);
  if (v3)
  {
    result[1] = 0;
    *result = v2[2];
    if (v2 + 2 != result)
      result[1] = v2[3];
    v4 = v3 - 1;
    *(_QWORD *)(a2 + 16) = v3 - 1;
    if (v3 == 1)
    {
      if (*(_QWORD *)(a2 + 32) == 1)
        *(_QWORD *)(a2 + 32) = v4;
      return result;
    }
    v5 = (double *)&v2[2 * v3];
    v6 = *v5;
    v2[2] = *(_QWORD *)v5;
    v7 = *((_QWORD *)v5 + 1);
    v2[3] = v7;
    v8 = v4 >> 1;
    if (v3 < 3)
    {
      v9 = (unint64_t *)(a2 + 32);
      if (*(_QWORD *)(a2 + 32) != 2)
        return result;
      goto LABEL_31;
    }
    if (*(_BYTE *)a2)
    {
      v10 = 1;
      while (1)
      {
        v11 = 2 * v10;
        if (2 * v10 < v4 && *(double *)&v2[2 * (v11 | 1)] < *(double *)&v2[4 * v10])
          v11 |= 1uLL;
        v12 = (double *)&v2[2 * v11];
        if (*v12 >= v6)
          break;
        if (v10 != v11)
        {
          v13 = &v2[2 * v10];
          *v13 = *(_QWORD *)v12;
          v13[1] = *((_QWORD *)v12 + 1);
        }
        v10 = v11;
        if (v11 > v8)
          goto LABEL_30;
      }
    }
    else
    {
      v10 = 1;
      while (1)
      {
        v11 = 2 * v10;
        if (2 * v10 < v4 && *(double *)&v2[2 * (v11 | 1)] > *(double *)&v2[4 * v10])
          v11 |= 1uLL;
        v14 = (double *)&v2[2 * v11];
        if (*v14 <= v6)
          break;
        if (v10 != v11)
        {
          v15 = &v2[2 * v10];
          *v15 = *(_QWORD *)v14;
          v15[1] = *((_QWORD *)v14 + 1);
        }
        v10 = v11;
        if (v11 > v8)
          goto LABEL_30;
      }
    }
    v11 = v10;
LABEL_30:
    v16 = (double *)&v2[2 * v11];
    *v16 = v6;
    *((_QWORD *)v16 + 1) = v7;
    v9 = (unint64_t *)(a2 + 32);
    if (*(_QWORD *)(a2 + 32) == v3)
    {
LABEL_31:
      *v9 = v4;
      v17 = v3 - 2;
      if (v3 - 2 > v8)
      {
        if (*(_BYTE *)a2)
        {
          v18 = (double *)&v2[2 * v3 - 4];
          do
          {
            if (*v18 > *(double *)&v2[2 * v4])
            {
              *v9 = v17;
              v4 = v17;
            }
            --v17;
            v18 -= 2;
          }
          while (v17 > v8);
        }
        else
        {
          v19 = (double *)&v2[2 * v3 - 4];
          do
          {
            if (*v19 < *(double *)&v2[2 * v4])
            {
              *v9 = v17;
              v4 = v17;
            }
            --v17;
            v19 -= 2;
          }
          while (v17 > v8);
        }
      }
    }
  }
  else
  {
    result[1] = 0;
    *result = *v2;
    if (v2 != result)
      result[1] = v2[1];
  }
  return result;
}

uint64_t sub_1BE83A818(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 416;
    sub_1BE670A58(i - 416);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HeartRegressor::HeartRegressor(HeartRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v4;
  double *v5;
  int64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MidX;
  CGFloat MidY;
  CGFloat *v18;
  double v19;
  double *v20;
  double *v21;
  unint64_t v22;
  _QWORD *v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t v28;
  _OWORD *v30;
  __int128 v31;
  _OWORD *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  double v60;
  double *v61;
  uint64_t v62;
  double *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  double v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  unint64_t v78;
  double *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  double *v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  double *v92;
  uint64_t v93;
  unint64_t v94;
  double *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  double *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  double *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float64x2_t i;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  double *v129;
  double v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  double v135;
  double v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  __double2 v152;
  double v153;
  unint64_t v154;
  double *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double *v165;
  double v166;
  double v167;
  double v168;
  uint64_t v169;
  double v170;
  _QWORD *v171;
  _OWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  HeartRegressor *v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  float64x2_t v179;
  double v180;
  double *v181;
  double *v182;
  double *v183;
  _OWORD *v184;
  void *v185;
  uint64_t v186;
  void *v187;
  char *v188;
  char *v189;
  void *__p;
  void *v191;
  char *v192;
  void *v193;
  _BYTE *v194;
  char v195[16];
  double v196;
  double v197;
  double *v198;
  double *v199;
  uint64_t v200;
  CGRect v201;
  CGRect v202;

  v4 = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  *((float *)this + 4) = sub_1BE631E24(v4, (uint64_t)&v198, (uint64_t)v195, 1, 20.0);
  v191 = 0;
  v192 = 0;
  __p = 0;
  v5 = v198;
  v6 = (char *)v199 - (char *)v198;
  if (v199 != v198)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 3) >= 0x666666666666667)
      sub_1BE61F930();
    __p = operator new(v6);
    v192 = (char *)__p + 8 * (v6 >> 3);
    memcpy(__p, v5, v6 - 3);
    v191 = v192;
  }
  sub_1BE629CD4((uint64_t *)&__p, (uint64_t)&v193);
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v194 - (_BYTE *)v193) >> 3) <= 2)
  {
    objc_msgSend_bounds(v4, v7, v8, v9, v10, v11);
    x = v201.origin.x;
    y = v201.origin.y;
    width = v201.size.width;
    height = v201.size.height;
    MidX = CGRectGetMidX(v201);
    v202.origin.x = x;
    v202.origin.y = y;
    v202.size.width = width;
    v202.size.height = height;
    MidY = CGRectGetMidY(v202);
    v18 = (CGFloat *)operator new();
    *(_QWORD *)v18 = &off_1E77F0898;
    v18[2] = MidX;
    v18[3] = MidY;
    v18[4] = width;
    v18[5] = height;
    v18[6] = 0.0;
    *(_QWORD *)this = v18;
    goto LABEL_195;
  }
  v175 = this;
  if (v196 >= v197)
    v19 = v196;
  else
    v19 = v197;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v20 = v198;
  v21 = v199;
  v22 = 0xCCCCCCCCCCCCCCCDLL * (v199 - v198);
  if (v199 != v198)
  {
    if (v22 >> 61)
      sub_1BE61F930();
    v187 = operator new(0x6666666666666668 * (v199 - v198));
    v188 = (char *)v187;
    v189 = (char *)v187 + 8 * v22;
  }
  v184 = &v184;
  v185 = &v184;
  v186 = 0;
  v23 = operator new(0x20uLL);
  *((_OWORD *)v23 + 1) = *(_OWORD *)(v21 - 5);
  *v23 = &v184;
  v23[1] = &v184;
  v184 = v23;
  v185 = v23;
  v186 = 1;
  v24 = operator new(0x20uLL);
  v24[1] = *(_OWORD *)v20;
  *(_QWORD *)v24 = v23;
  *((_QWORD *)v24 + 1) = &v184;
  v23[1] = v24;
  v184 = v24;
  v186 = 2;
  if (v21 != v20)
  {
    v25 = 1;
    while (1)
    {
      v30 = operator new(0x20uLL);
      v31 = v25 == v22 ? *(_OWORD *)v20 : *(_OWORD *)&v20[5 * v25];
      v30[1] = v31;
      v32 = v184;
      *(_QWORD *)v30 = v184;
      *((_QWORD *)v30 + 1) = &v184;
      *((_QWORD *)v32 + 1) = v30;
      v184 = v30;
      ++v186;
      v33 = (void *)objc_opt_class();
      objc_msgSend_circumferenceRatioOfCircleFittedToPoints_circleCenter_circleRadius_(v33, v34, (uint64_t)&v184, 0, 0, v35);
      v37 = v36;
      v38 = v188;
      if (v188 >= v189)
        break;
      *(_QWORD *)v188 = v36;
      v26 = (uint64_t)(v38 + 8);
LABEL_17:
      v188 = (char *)v26;
      v27 = (_QWORD **)v185;
      v28 = *(_QWORD *)v185;
      *(_QWORD *)(v28 + 8) = *((_QWORD *)v185 + 1);
      *v27[1] = v28;
      --v186;
      operator delete(v27);
      v20 = v198;
      v21 = v199;
      v22 = 0xCCCCCCCCCCCCCCCDLL * (v199 - v198);
      if (v25++ >= v22)
        goto LABEL_42;
    }
    v39 = (char *)v187;
    v40 = v188 - (_BYTE *)v187;
    v41 = (v188 - (_BYTE *)v187) >> 3;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
      sub_1BE61F930();
    v43 = v189 - (_BYTE *)v187;
    if ((v189 - (_BYTE *)v187) >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        sub_1BE61F100();
      v45 = (char *)operator new(8 * v44);
      v46 = &v45[8 * v41];
      *(_QWORD *)v46 = v37;
      v26 = (uint64_t)(v46 + 8);
      v47 = v38 - v39;
      if (v38 == v39)
        goto LABEL_39;
    }
    else
    {
      v45 = 0;
      v46 = (char *)(8 * v41);
      *(_QWORD *)(8 * v41) = v36;
      v26 = 8 * v41 + 8;
      v47 = v38 - v39;
      if (v38 == v39)
      {
LABEL_39:
        v187 = v46;
        v188 = (char *)v26;
        v189 = &v45[8 * v44];
        if (v39)
          operator delete(v39);
        goto LABEL_17;
      }
    }
    v48 = v47 - 8;
    if (v48 < 0x58)
      goto LABEL_211;
    if ((unint64_t)(v38 - v45 - v40) < 0x20)
      goto LABEL_211;
    v49 = (v48 >> 3) + 1;
    v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    v51 = &v38[-v50];
    v46 -= v50;
    v52 = &v45[8 * v41 - 16];
    v53 = v38 - 16;
    v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *(_OWORD *)v53;
      *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
      *(_OWORD *)v52 = v55;
      v52 -= 32;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    v38 = v51;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_211:
      do
      {
        v56 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *((_QWORD *)v46 - 1) = v56;
        v46 -= 8;
      }
      while (v38 != v39);
    }
    goto LABEL_39;
  }
  v20 = v21;
LABEL_42:
  v181 = 0;
  v182 = 0;
  v183 = 0;
  if (v22)
  {
    if (v22 >> 61)
      sub_1BE61F930();
    v57 = (double *)operator new(8 * v22);
    v181 = v57;
    v182 = v57;
    v183 = &v57[v22];
    v58 = (char *)v21 - (char *)v20;
    if (v21 != v20)
      goto LABEL_45;
  }
  else
  {
    v57 = 0;
    v58 = (char *)v21 - (char *)v20;
    if (v21 != v20)
    {
LABEL_45:
      v59 = 0;
      v60 = v19 / 15.0;
      while (1)
      {
        if (v194 == v193)
        {
          v68 = 1.79769313e308;
          v78 = (unint64_t)v183;
          if (v60 < 1.79769313e308)
            goto LABEL_58;
        }
        else
        {
          v65 = 0;
          v66 = 0;
          v67 = 0xCCCCCCCCCCCCCCCDLL * ((v194 - (_BYTE *)v193) >> 3);
          v68 = 1.79769313e308;
          do
          {
            v69 = (void *)objc_opt_class();
            v75 = v66 + 1;
            if (v66 == v67 - 1)
              v76 = 0;
            else
              v76 = v66 + 1;
            objc_msgSend_distanceFromPoint_toSegmentFromPoint_toPoint_(v69, v70, v71, v72, v73, v74, v198[5 * v59], v198[5 * v59 + 1], *(double *)((char *)v193 + v65), *(double *)((char *)v193 + v65 + 8), *((double *)v193 + 5 * v76), *((double *)v193 + 5 * v76 + 1));
            if (v77 < v68)
              v68 = v77;
            v67 = 0xCCCCCCCCCCCCCCCDLL * ((v194 - (_BYTE *)v193) >> 3);
            v65 += 40;
            ++v66;
          }
          while (v75 < v67);
          v57 = v182;
          v78 = (unint64_t)v183;
          if (v68 > v60)
          {
LABEL_58:
            if ((unint64_t)v57 >= v78)
            {
              v79 = v181;
              v87 = v57 - v181;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 61)
                sub_1BE61F930();
              v89 = v78 - (_QWORD)v181;
              if (v89 >> 2 > v88)
                v88 = v89 >> 2;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
                v83 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v83 = v88;
              if (v83)
              {
                if (v83 >> 61)
                  sub_1BE61F100();
                v84 = operator new(8 * v83);
                v85 = (double *)&v84[8 * v87];
                *v85 = v68;
                v62 = (uint64_t)(v85 + 1);
                v90 = (char *)v57 - (char *)v181;
                if (v57 == v181)
                  goto LABEL_91;
              }
              else
              {
                v84 = 0;
                v85 = (double *)(8 * v87);
                *(double *)(8 * v87) = v68;
                v62 = 8 * v87 + 8;
                v90 = (char *)v57 - (char *)v181;
                if (v57 == v181)
                  goto LABEL_91;
              }
              v94 = v90 - 8;
              if (v94 >= 0x168)
              {
                v98 = ((char *)(v57 - 1) - (char *)v181) & 0xFFFFFFFFFFFFFFF8;
                if (&v84[(char *)v57 - (char *)v181 - 8 - v98] > &v84[(char *)v57 - (char *)v181 - 8])
                {
                  v95 = v57;
                }
                else if ((double *)((char *)v57 - v98 - 8) > v57 - 1)
                {
                  v95 = v57;
                }
                else if ((unint64_t)((char *)v181 - v84) >= 0x20)
                {
                  v105 = (v94 >> 3) + 1;
                  v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
                  v95 = &v57[v106 / 0xFFFFFFFFFFFFFFF8];
                  v85 = (double *)((char *)v85 - v106);
                  v107 = &v84[8 * v87 - 16];
                  v108 = v57 - 2;
                  v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v110 = *(_OWORD *)v108;
                    *(v107 - 1) = *((_OWORD *)v108 - 1);
                    *v107 = v110;
                    v107 -= 2;
                    v108 -= 4;
                    v109 -= 4;
                  }
                  while (v109);
                  if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_91;
                }
                else
                {
                  v95 = v57;
                }
              }
              else
              {
                v95 = v57;
              }
              do
              {
                v96 = *((_QWORD *)v95-- - 1);
                *((_QWORD *)v85-- - 1) = v96;
              }
              while (v95 != v181);
              goto LABEL_91;
            }
            *v57 = v68;
            v61 = v57 + 1;
            goto LABEL_47;
          }
        }
        if ((unint64_t)v57 >= v78)
        {
          v79 = v181;
          v80 = v57 - v181;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61)
            sub_1BE61F930();
          v82 = v78 - (_QWORD)v181;
          if (v82 >> 2 > v81)
            v81 = v82 >> 2;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
            v83 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            if (v83 >> 61)
              sub_1BE61F100();
            v84 = operator new(8 * v83);
            v85 = (double *)&v84[8 * v80];
            *v85 = 0.0;
            v62 = (uint64_t)(v85 + 1);
            v86 = (char *)v57 - (char *)v181;
            if (v57 == v181)
              goto LABEL_91;
LABEL_83:
            v91 = v86 - 8;
            if (v91 < 0x168)
            {
              v92 = v57;
              goto LABEL_85;
            }
            v97 = ((char *)(v57 - 1) - (char *)v181) & 0xFFFFFFFFFFFFFFF8;
            if (&v84[(char *)v57 - (char *)v181 - 8 - v97] > &v84[(char *)v57 - (char *)v181 - 8])
            {
              v92 = v57;
              goto LABEL_85;
            }
            if ((double *)((char *)v57 - v97 - 8) > v57 - 1)
            {
              v92 = v57;
              goto LABEL_85;
            }
            if ((unint64_t)((char *)v181 - v84) < 0x20)
            {
              v92 = v57;
              goto LABEL_85;
            }
            v99 = (v91 >> 3) + 1;
            v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
            v92 = &v57[v100 / 0xFFFFFFFFFFFFFFF8];
            v85 = (double *)((char *)v85 - v100);
            v101 = &v84[8 * v80 - 16];
            v102 = v57 - 2;
            v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              *v101 = v104;
              v101 -= 2;
              v102 -= 4;
              v103 -= 4;
            }
            while (v103);
            if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_85:
                v93 = *((_QWORD *)v92-- - 1);
                *((_QWORD *)v85-- - 1) = v93;
              }
              while (v92 != v181);
            }
          }
          else
          {
            v84 = 0;
            v85 = (double *)(8 * v80);
            *(_QWORD *)(8 * v80) = 0;
            v62 = 8 * v80 + 8;
            v86 = (char *)v57 - (char *)v181;
            if (v57 != v181)
              goto LABEL_83;
          }
LABEL_91:
          v181 = v85;
          v183 = (double *)&v84[8 * v83];
          if (v79)
            operator delete(v79);
          goto LABEL_48;
        }
        *v57 = 0.0;
        v61 = v57 + 1;
LABEL_47:
        v62 = (uint64_t)v61;
LABEL_48:
        v182 = (double *)v62;
        ++v59;
        v20 = v198;
        v63 = v199;
        v64 = 0xCCCCCCCCCCCCCCCDLL * (v199 - v198);
        v57 = (double *)v62;
        if (v59 >= v64)
          goto LABEL_115;
      }
    }
  }
  v64 = 0xCCCCCCCCCCCCCCCDLL * (v58 >> 3);
  v63 = v20;
LABEL_115:
  if (v64)
  {
    v111 = 0;
    v112 = 0x7FFFFFFFFFFFFFFFLL;
    v113 = -1.79769313e308;
    do
    {
      v114 = v181[v111];
      if (*((double *)v187 + v111) * v114 > v113)
      {
        v113 = *((double *)v187 + v111) * v114;
        v112 = v111;
      }
      ++v111;
    }
    while (v64 != v111);
  }
  else
  {
    v112 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v115 = (double)v112 + -3.0;
  v116 = (double)v112 + 3.0;
  v117 = (double)v64;
  for (i = 0uLL; v115 <= v116; v115 = v115 + 1.0)
  {
    if (v115 < 0.0)
    {
      v144 = v115 + v117;
    }
    else
    {
      v144 = v115;
      if (v115 >= v117)
        v144 = v115 - v117;
    }
    i = vaddq_f64(i, *(float64x2_t *)&v20[5 * (unint64_t)v144]);
  }
  __asm { FMOV            V1.2D, #7.0 }
  v179 = vdivq_f64(i, _Q1);
  v123 = 0xCCCCCCCCCCCCCCCDLL * (v63 - v20);
  if (v63 == v20)
  {
    v126 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v124 = 0;
    v125 = (int)(v117 * 0.33);
    v126 = 0x7FFFFFFFFFFFFFFFLL;
    v127 = -1.79769313e308;
    v176 = v125;
    do
    {
      v131 = v112 - v124;
      if ((uint64_t)(v112 - v124) < 0)
        v131 = v124 - v112;
      if (v131 <= v123 >> 1)
        v132 = v131;
      else
        v132 = v123 - v131;
      if (v132 >= v125)
      {
        if (v63 == v20)
        {
          v128 = 0.0;
          v129 = v20;
        }
        else
        {
          v177 = v126;
          v133 = 0;
          v134 = 0;
          v135 = 0.0;
          v136 = 0.0;
          do
          {
            v137 = (void *)objc_opt_class();
            objc_msgSend_threePointsOrientationWithOrigin_pointA_pointB_(v137, v138, v139, v140, v141, v142, *(_OWORD *)&v179, v198[5 * v124], v198[5 * v124 + 1], v198[v133], v198[v133 + 1]);
            if (v143 > 0.0)
              v135 = v135 + 1.0;
            else
              v136 = v136 + 1.0;
            ++v134;
            v129 = v198;
            v20 = v199;
            v133 += 5;
          }
          while (v134 < 0xCCCCCCCCCCCCCCCDLL * (v199 - v198));
          v128 = 0.0;
          if (v136 <= 0.0)
          {
            v125 = v176;
            v126 = v177;
          }
          else
          {
            v126 = v177;
            if (v135 > 0.0)
            {
              v128 = v136 / v135;
              if (v135 / v136 < v136 / v135)
                v128 = v135 / v136;
            }
            v125 = v176;
          }
        }
        v63 = v20;
        v130 = (double)v132
             / ((double)v123
              * 0.5)
             * v128
             * (sqrt((v129[5 * v124 + 1] - v179.f64[1]) * (v129[5 * v124 + 1] - v179.f64[1])+ (v129[5 * v124] - v179.f64[0]) * (v129[5 * v124] - v179.f64[0]))/ v19);
        if (v130 > v127)
        {
          v126 = v124;
          v127 = v130;
        }
        v20 = v129;
      }
      ++v124;
      v123 = 0xCCCCCCCCCCCCCCCDLL * (v63 - v20);
    }
    while (v124 < v123);
  }
  v145 = (double)v126 + -3.0;
  v146 = (double)v126 + 3.0;
  v147 = 0.0;
  v148 = 0.0;
  if (v145 <= v146)
  {
    v163 = (double)v123;
    do
    {
      if (v145 < 0.0)
      {
        v164 = v145 + v163;
      }
      else
      {
        v164 = v145;
        if (v145 >= v163)
          v164 = v145 - v163;
      }
      v165 = &v20[5 * (unint64_t)v164];
      v147 = v147 + *v165;
      v148 = v148 + v165[1];
      v145 = v145 + 1.0;
    }
    while (v145 <= v146);
  }
  v149 = v148 / 7.0;
  v178 = v147 / 7.0;
  v150 = atan2(v148 / 7.0 - v179.f64[1], v147 / 7.0 - v179.f64[0]) * 180.0 / 3.14159265 + -90.0;
  if (v150 >= 0.0)
    v151 = v150;
  else
    v151 = v150 + 360.0;
  v152 = __sincos_stret(v151 * 3.14159265 / 180.0);
  v153 = -v152.__sinval;
  if (v194 == v193)
  {
    v180 = -INFINITY;
    v157 = -1.79769313e308;
    v156 = 1.79769313e308;
  }
  else
  {
    v154 = (v194 - (_BYTE *)v193) / 40;
    if (v154 <= 1)
      v154 = 1;
    v155 = (double *)((char *)v193 + 8);
    v156 = 1.79769313e308;
    v157 = -1.79769313e308;
    v158 = -1.79769313e308;
    v159 = 1.79769313e308;
    do
    {
      v160 = *(v155 - 1);
      v161 = v152.__sinval * *v155 + v160 * v152.__cosval;
      v162 = v160 * v153 + *v155 * v152.__cosval;
      if (v161 < v159)
        v159 = v161;
      if (v161 > v158)
        v158 = v161;
      if (v162 < v156)
        v156 = v162;
      if (v162 > v157)
        v157 = v162;
      v155 += 5;
      --v154;
    }
    while (v154);
    v180 = v158 - v159;
  }
  v166 = fmod(v151, 45.0);
  v167 = fmod(v151, 15.0);
  if (v166 >= 10.0)
  {
    if (45.0 - v166 >= 10.0)
    {
      if (v167 >= 7.5)
      {
        v168 = 15.0 - v167;
        if (v168 < 7.5)
          v151 = v151 + v168;
      }
      else
      {
        v151 = v151 - v167;
      }
    }
    else
    {
      v151 = v151 + 45.0 - v166;
    }
  }
  else
  {
    v151 = v151 - v166;
  }
  v169 = operator new();
  v170 = (vabdd_f64(v178 * v153 + v149 * v152.__cosval, v156) - vabdd_f64(v157, v178 * v153 + v149 * v152.__cosval))
       * 0.5;
  *(_QWORD *)v169 = &off_1E77F0898;
  *(double *)(v169 + 16) = v178 + v152.__sinval * v170;
  *(double *)(v169 + 24) = v149 - v152.__cosval * v170;
  *(double *)(v169 + 32) = v180;
  *(double *)(v169 + 40) = v157 - v156;
  *(double *)(v169 + 48) = v151;
  *(_QWORD *)v175 = v169;
  if (v181)
    operator delete(v181);
  if (v186)
  {
    v172 = v184;
    v171 = v185;
    v173 = *(_QWORD *)v185;
    *(_QWORD *)(v173 + 8) = *((_QWORD *)v184 + 1);
    **((_QWORD **)v172 + 1) = v173;
    v186 = 0;
    if (v171 != &v184)
    {
      do
      {
        v174 = (_QWORD *)v171[1];
        operator delete(v171);
        v171 = v174;
      }
      while (v174 != &v184);
    }
  }
  if (v187)
  {
    v188 = (char *)v187;
    operator delete(v187);
  }
LABEL_195:
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }

}

void sub_1BE83BC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _QWORD *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  sub_1BE76551C(&a21);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
    v33 = a30;
    if (!a30)
    {
LABEL_5:
      v34 = *(void **)(v31 - 176);
      if (!v34)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else
  {
    v33 = a30;
    if (!a30)
      goto LABEL_5;
  }
  a31 = (uint64_t)v33;
  operator delete(v33);
  v34 = *(void **)(v31 - 176);
  if (!v34)
  {
LABEL_6:
    v35 = (void *)a11[6];
    if (!v35)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v31 - 168) = v34;
  operator delete(v34);
  v35 = (void *)a11[6];
  if (!v35)
  {
LABEL_7:
    v36 = *a12;
    if (!*a12)
      goto LABEL_8;
    goto LABEL_13;
  }
LABEL_12:
  a11[7] = v35;
  operator delete(v35);
  v36 = *a12;
  if (!*a12)
  {
LABEL_8:

    _Unwind_Resume(a1);
  }
LABEL_13:
  a11[4] = v36;
  operator delete(v36);

  _Unwind_Resume(a1);
}

CGFloat *HeartRegressor::provideAnAnswer(HeartRegressor *this, CHDrawing *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MidX;
  CGFloat MidY;
  CGFloat *result;
  CGRect v13;
  CGRect v14;

  objc_msgSend_bounds(a2, (const char *)a2, a3, a4, a5, a6);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  MidX = CGRectGetMidX(v13);
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  MidY = CGRectGetMidY(v14);
  result = (CGFloat *)operator new();
  *(_QWORD *)result = &off_1E77F0898;
  result[2] = MidX;
  result[3] = MidY;
  result[4] = width;
  result[5] = height;
  result[6] = 0.0;
  return result;
}

void sub_1BE83BE48(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "CHHeart");
}

void sub_1BE83C10C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v26) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHReflowQuery", "", (uint8_t *)&v26, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHReflowQuery\"", (uint8_t *)&v26, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v11 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v17 = objc_msgSend_count(v5, v12, v13, v14, v15, v16);
    v23 = objc_msgSend_count(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_QWORD *)(a1 + 64);
    v26 = 134218752;
    v27 = v17;
    v28 = 2048;
    v29 = v23;
    v30 = 2048;
    v31 = v24;
    v32 = 2048;
    v33 = v25;
    _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEFAULT, "CHReflowQuery found %ld reflowable lines from %ld intial strokes and location = (%.2f,%.2f)", (uint8_t *)&v26, 0x2Au);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1BE83C630(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a2;
  v5 = a3;
  v11 = objc_msgSend_ancestorIdentifier(v4, v6, v7, v8, v9, v10);
  if (v11 <= objc_msgSend_ancestorIdentifier(v5, v12, v13, v14, v15, v16))
  {
    v23 = objc_msgSend_ancestorIdentifier(v4, v17, v18, v19, v20, v21);
    if (v23 >= objc_msgSend_ancestorIdentifier(v5, v24, v25, v26, v27, v28))
      v22 = 0;
    else
      v22 = -1;
  }
  else
  {
    v22 = 1;
  }

  return v22;
}

void sub_1BE83C750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE83CB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE83CC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE83CD14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83CD28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *CHLocalizedDescriptionForRecognitionSessionStatus(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  __CFString *result;

  switch(a1)
  {
    case 0:
      objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedStringForKey_value_table_(v6, v7, (uint64_t)CFSTR("Unknown"), (uint64_t)&stru_1E77F6F28, 0, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 1:
      objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedStringForKey_value_table_(v6, v16, (uint64_t)CFSTR("Initial"), (uint64_t)&stru_1E77F6F28, 0, v17);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 2:
      objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedStringForKey_value_table_(v6, v10, (uint64_t)CFSTR("Accumulating"), (uint64_t)&stru_1E77F6F28, 0, v11);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 3:
      objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedStringForKey_value_table_(v6, v12, (uint64_t)CFSTR("Processing"), (uint64_t)&stru_1E77F6F28, 0, v13);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 4:
      objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4, a5, a6);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedStringForKey_value_table_(v6, v14, (uint64_t)CFSTR("Finished"), (uint64_t)&stru_1E77F6F28, 0, v15);
      v9 = objc_claimAutoreleasedReturnValue();
LABEL_9:
      v18 = (void *)v9;

      result = v18;
      break;
    default:
      result = &stru_1E77F6F28;
      break;
  }
  return result;
}

void sub_1BE83CEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83CEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83CED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83CEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83CEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83D51C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83D534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83D698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE83D6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83D6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE83D700(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)MEMORY[0x1C3B818B0]();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend_visibleStrokeEncodedIdentifiers(*(void **)(a1 + 24), v3, v4, v5, v6, v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(void **)(a1 + 32);
      v9 = (id *)(a1 + 32);
      if (v8 == v10)
        goto LABEL_11;
    }
    else
    {
      v8 = 0;
      v11 = *(_QWORD *)(a1 + 32);
      v9 = (id *)(a1 + 32);
      if (!v11)
      {
LABEL_11:

        objc_autoreleasePoolPop(v2);
        return;
      }
    }
    objc_storeStrong(v9, v8);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v12 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v18 = objc_msgSend_count(*v9, v13, v14, v15, v16, v17);
      v19 = 134217984;
      v20 = v18;
      _os_log_impl(&dword_1BE607000, v12, OS_LOG_TYPE_DEBUG, "stroke provider visible strokes %lu", (uint8_t *)&v19, 0xCu);
    }

    goto LABEL_11;
  }
}

void sub_1BE83D844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83D85C(uint64_t a1)
{
  NSObject *v2;
  dispatch_queue_t v3;
  void *v4;
  dispatch_workloop_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_queue_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  dispatch_queue_t v13;
  void *v14;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v3 = dispatch_queue_create_with_target_V2("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskHighResponsiveness", attr, (dispatch_queue_t)qword_1EF5683F0);
  v4 = (void *)qword_1EF5683E8;
  qword_1EF5683E8 = (uint64_t)v3;

  v5 = dispatch_workloop_create("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskSharedWorkloop");
  v6 = (void *)qword_1EF5683F0;
  qword_1EF5683F0 = (uint64_t)v5;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v7, *(dispatch_qos_class_t *)(*(_QWORD *)(a1 + 32) + 152), 0);
  v8 = objc_claimAutoreleasedReturnValue();

  v9 = dispatch_queue_create_with_target_V2("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskForeground", v8, (dispatch_queue_t)qword_1EF5683F0);
  v10 = (void *)qword_1EF5683D8;
  qword_1EF5683D8 = (uint64_t)v9;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v11, *(dispatch_qos_class_t *)(*(_QWORD *)(a1 + 32) + 152), -15);
  v12 = objc_claimAutoreleasedReturnValue();

  v13 = dispatch_queue_create_with_target_V2("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskBackground", v12, (dispatch_queue_t)qword_1EF5683F0);
  v14 = (void *)qword_1EF5683E0;
  qword_1EF5683E0 = (uint64_t)v13;

}

void sub_1BE83D9A0(uint64_t a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.CoreHandwriting.RecognitionSessionTextInputTaskSharedTarget", *(dispatch_queue_attr_t *)(a1 + 32));
  v2 = (void *)qword_1EF568400;
  qword_1EF568400 = (uint64_t)v1;

}

void sub_1BE83D9CC(uint64_t a1, void *a2)
{
  const char *label;
  NSObject *v4;
  void (**v5)(void);
  _QWORD block[4];
  void (**v7)(void);

  v5 = a2;
  if (!a1)
    goto LABEL_7;
  label = dispatch_queue_get_label(0);
  if (!strcmp(label, "com.apple.CoreHandwriting.RecognitionSession") || (v4 = *(NSObject **)(a1 + 296)) == 0)
  {
    v5[2]();
LABEL_7:

    return;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE83DAA0;
  block[3] = &unk_1E77F2400;
  v7 = v5;
  dispatch_sync(v4, block);

}

void sub_1BE83DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE83DAA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE83DC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;

  a10.super_class = (Class)CHRecognitionSession;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE83DCD8(uint64_t a1)
{
  sub_1BE83DCE8(*(_QWORD *)(a1 + 32), 0, 1);
}

void sub_1BE83DCE8(uint64_t a1, int a2, int a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v6 = (id)qword_1EF568410;
      objc_sync_enter(v6);
      if (qword_1EF568410)
      {
        objc_msgSend_indexesOfObjectsPassingTest_((void *)qword_1EF568410, v7, (uint64_t)&unk_1E77F5DF0, v8, v9, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectsAtIndexes_((void *)qword_1EF568410, v12, (uint64_t)v11, v13, v14, v15);

      }
      objc_sync_exit(v6);

    }
    if (a3)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v16 = *(id *)(a1 + 312);
      v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v46, (uint64_t)v60, 16, v18);
      if (v24)
      {
        v25 = *(_QWORD *)v47;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v47 != v25)
              objc_enumerationMutation(v16);
            objc_msgSend_cancel(*(void **)(*((_QWORD *)&v46 + 1) + 8 * i), v19, v20, v21, v22, v23, (_QWORD)v46);
          }
          v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v46, (uint64_t)v60, 16, v23);
        }
        while (v24);
      }

      objc_msgSend_removeAllObjects(*(void **)(a1 + 312), v27, v28, v29, v30, v31);
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v32 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(id *)(a1 + 312);
      v39 = objc_msgSend_count(v33, v34, v35, v36, v37, v38);
      v45 = objc_msgSend_count((void *)qword_1EF568410, v40, v41, v42, v43, v44);
      *(_DWORD *)buf = 134219008;
      v51 = a1;
      v52 = 1024;
      v53 = a3;
      v54 = 1024;
      v55 = a2;
      v56 = 2048;
      v57 = v39;
      v58 = 2048;
      v59 = v45;
      _os_log_impl(&dword_1BE607000, v32, OS_LOG_TYPE_DEFAULT, "Cancelled tasks on session %p: foreground ? %d, background ? %d. Remaining activeTasks: %ld, sharedBackgroundTasks: %ld", buf, 0x2Cu);

    }
  }
}

void sub_1BE83DF0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE83DF28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE83DF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83E0A8(void **a1, void *a2, int a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  id v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void **v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if (a3)
  {
    if (qword_1EF568418 != -1)
      dispatch_once(&qword_1EF568418, &unk_1E77F1A70);
    v10 = (id)qword_1EF568410;
    objc_sync_enter(v10);
    objc_msgSend_addObject_((void *)qword_1EF568410, v11, (uint64_t)v9, v12, v13, v14);
    objc_sync_exit(v10);

  }
  else
  {
    objc_msgSend_addObject_(a1[39], v5, (uint64_t)v9, v6, v7, v8);
    objc_msgSend_setActive(a1, v15, v16, v17, v18, v19);
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v20 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = a1[39];
    v32 = 134219008;
    v33 = v9;
    v34 = 1024;
    v35 = a3;
    v36 = 2048;
    v37 = a1;
    v38 = 2048;
    v39 = objc_msgSend_count(v21, v22, v23, v24, v25, v26);
    v40 = 2048;
    v41 = objc_msgSend_count((void *)qword_1EF568410, v27, v28, v29, v30, v31);
    _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_DEFAULT, "Registered a new task %p (isBackground=%d) on session %p, activeTasks: %ld, sharedBackgroundTasks: %ld", (uint8_t *)&v32, 0x30u);

  }
}

void sub_1BE83E250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83E260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83E270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1BE83E28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE83E2A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568410;
  qword_1EF568410 = v6;

}

void sub_1BE83E2D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = (id)qword_1EF568410;
    objc_sync_enter(v4);
    objc_msgSend_removeObject_((void *)qword_1EF568410, v5, (uint64_t)v3, v6, v7, v8);
    objc_sync_exit(v4);

    objc_msgSend_removeObject_(*(void **)(a1 + 312), v9, (uint64_t)v3, v10, v11, v12);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(id *)(a1 + 312);
      v25 = 134218752;
      v26 = v3;
      v27 = 2048;
      v28 = a1;
      v29 = 2048;
      v30 = objc_msgSend_count(v14, v15, v16, v17, v18, v19);
      v31 = 2048;
      v32 = objc_msgSend_count((void *)qword_1EF568410, v20, v21, v22, v23, v24);
      _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "Removed a task %p on session %p, activeTasks: %ld, sharedBackgroundTasks: %ld", (uint8_t *)&v25, 0x2Au);

    }
  }

}

void sub_1BE83E434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE83E44C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83E45C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

BOOL sub_1BE83E47C(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v13 = objc_msgSend_status(v2, v3, v4, v5, v6, v7);
  if (v13 == 1)
    objc_msgSend_cancel(v2, v8, v9, v10, v11, v12);

  return v13 == 1;
}

void sub_1BE83E4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83E4D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD block[4];
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v17 = a5;
  if (a1)
  {
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v12, v13, v14, v15, v16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BE83E5E8;
    block[3] = &unk_1E77F5E18;
    v24 = v18;
    v20 = v11;
    v21 = a1;
    v22 = v10;
    v23 = v17;
    dispatch_async(v9, block);

  }
}

void sub_1BE83E5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE83E5E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  NSObject *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_floatForKey_(v7, v8, (uint64_t)CFSTR("CHRecognitionTaskQueuingOverhead"), v9, v10, v11);
  v13 = v12;

  if (v13 > 0.0)
  {
    if (qword_1EF568E88 == -1)
    {
      v19 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
LABEL_5:

        sleep(v13);
        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v19 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        goto LABEL_5;
    }
    v20 = *(_QWORD *)(a1 + 32);
    v39 = 138412546;
    v40 = v20;
    v41 = 2048;
    v42 = v13;
    _os_log_impl(&dword_1BE607000, v19, OS_LOG_TYPE_DEFAULT, "Dispatch task %@ about to get started, waiting for explicit overhead of %0.1fs before starting.", (uint8_t *)&v39, 0x16u);
    goto LABEL_5;
  }
LABEL_6:
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v14, v15, v16, v17, v18);
  v22 = v21;
  v23 = *(double *)(a1 + 64);
  if (qword_1EF568E88 == -1)
  {
    v24 = (id)qword_1EF568E28;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    goto LABEL_8;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v24 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(double *)(a1 + 40);
    v27 = *(_QWORD *)(a1 + 48);
    v39 = 138413058;
    v40 = v25;
    v41 = 2048;
    v42 = v26;
    v43 = 2112;
    v44 = v27;
    v45 = 2048;
    v46 = v22 - v23;
    _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_DEFAULT, "Starting task %@ for session %p on queue %@ after queuing time = %.3f seconds", (uint8_t *)&v39, 0x2Au);
  }
LABEL_9:

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v28, v29, v30, v31, v32);
  v34 = v33;
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v35 = (id)qword_1EF568E28;
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    goto LABEL_11;
  }
  v35 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    v36 = *(_QWORD *)(a1 + 32);
    v37 = *(double *)(a1 + 40);
    v38 = *(_QWORD *)(a1 + 48);
    v39 = 138413058;
    v40 = v36;
    v41 = 2048;
    v42 = v37;
    v43 = 2112;
    v44 = v38;
    v45 = 2048;
    v46 = v34 - v22;
    _os_log_impl(&dword_1BE607000, v35, OS_LOG_TYPE_DEFAULT, "Ending task %@ for session %p on queue %@ after running time = %.3f seconds", (uint8_t *)&v39, 0x2Au);
  }
LABEL_12:

}

void sub_1BE83E8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1BE83EA58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  uint64_t v57;
  id v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t j;
  void *v84;
  id v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t k;
  uint64_t v91;
  id v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  id newValue;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint8_t v110[128];
  uint8_t buf[4];
  uint64_t v112;
  __int16 v113;
  void *v114;
  __int16 v115;
  void *v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v7 = *(void **)(a1 + 32);
  v101 = a1;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168);
  if (v7 != (void *)v8 && (objc_msgSend_isEqualToArray_(v7, a2, v8, a4, a5, a6) & 1) == 0)
  {
    v14 = objc_msgSend_copy(*(void **)(v101 + 32), v9, v10, v11, v12, v13);
    v15 = *(_QWORD *)(v101 + 40);
    v16 = *(void **)(v15 + 168);
    *(_QWORD *)(v15 + 168) = v14;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v101 + 48) + 8) + 24) = objc_msgSend_count(*(void **)(*(_QWORD *)(v101 + 40) + 200), v17, v18, v19, v20, v21) != 0;
    v22 = (void *)objc_opt_class();
    objc_msgSend_effectiveLocalesFromLocales_(v22, v23, *(_QWORD *)(v101 + 32), v24, v25, v26);
    newValue = (id)objc_claimAutoreleasedReturnValue();
    v28 = *(void **)(v101 + 40);
    if (v28)
      objc_setProperty_nonatomic_copy(v28, v27, newValue, 200);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v29 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(_QWORD *)(v101 + 40);
      objc_msgSend_ch_descriptionWithSeparator_filterBlock_(*(void **)(v101 + 32), v30, (uint64_t)CFSTR(", "), (uint64_t)&unk_1E77F5E38, v31, v32);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ch_descriptionWithSeparator_filterBlock_(newValue, v35, (uint64_t)CFSTR(", "), (uint64_t)&unk_1E77F5E58, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v112 = v33;
      v113 = 2112;
      v114 = v34;
      v115 = 2112;
      v116 = v38;
      _os_log_impl(&dword_1BE607000, v29, OS_LOG_TYPE_DEFAULT, "Configuring RecognitionSession %p with preferred locales: %@. Effective locales: %@.", buf, 0x20u);

    }
    v44 = *(_QWORD *)(v101 + 40);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v101 + 48) + 8) + 24) && v44)
    {
      v45 = *(_QWORD *)(v44 + 200);
      if (v45)
      {
        objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v39, v45, v41, v42, v43);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v46 = 0;
      }
      objc_msgSend_allKeys(*(void **)(v44 + 208), v39, v45, v41, v42, v43, newValue);
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v47 = (id)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v106, (uint64_t)buf, 16, v49);
      if (v54)
      {
        v55 = *(_QWORD *)v107;
        do
        {
          for (i = 0; i != v54; ++i)
          {
            if (*(_QWORD *)v107 != v55)
              objc_enumerationMutation(v47);
            v57 = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 8 * i);
            if ((objc_msgSend_containsObject_(v46, v50, v57, v51, v52, v53) & 1) == 0)
            {
              v58 = *(id *)(v44 + 208);
              objc_msgSend_removeObjectForKey_(v58, v59, v57, v60, v61, v62);

            }
          }
          v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v50, (uint64_t)&v106, (uint64_t)buf, 16, v53);
        }
        while (v54);
      }

      v63 = *(id *)(v44 + 200);
      objc_opt_self();
      objc_msgSend_ch_descriptionWithSeparator_filterBlock_(v63, v64, (uint64_t)CFSTR("."), (uint64_t)&unk_1E77F5F68, v65, v66);
      v67 = objc_claimAutoreleasedReturnValue();

      v68 = (void *)v67;
      objc_msgSend_allKeys(*(void **)(v44 + 224), v69, v70, v71, v72, v73);
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v74 = (id)objc_claimAutoreleasedReturnValue();
      v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v75, (uint64_t)&v102, (uint64_t)v110, 16, v76);
      if (v81)
      {
        v82 = *(_QWORD *)v103;
        if (v68)
        {
          do
          {
            for (j = 0; j != v81; ++j)
            {
              if (*(_QWORD *)v103 != v82)
                objc_enumerationMutation(v74);
              v84 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * j);
              if ((objc_msgSend_isEqualToString_(v84, v77, (uint64_t)v68, v78, v79, v80) & 1) == 0)
              {
                v85 = *(id *)(v44 + 224);
                objc_msgSend_removeObjectForKey_(v85, v86, (uint64_t)v84, v87, v88, v89);

              }
            }
            v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v77, (uint64_t)&v102, (uint64_t)v110, 16, v80);
          }
          while (v81);
        }
        else
        {
          do
          {
            for (k = 0; k != v81; ++k)
            {
              if (*(_QWORD *)v103 != v82)
                objc_enumerationMutation(v74);
              v91 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 8 * k);
              v92 = *(id *)(v44 + 224);
              objc_msgSend_removeObjectForKey_(v92, v93, v91, v94, v95, v96);

            }
            v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v97, (uint64_t)&v102, (uint64_t)v110, 16, v98);
          }
          while (v81);
        }
      }

      v44 = *(_QWORD *)(v101 + 40);
    }
    if (v44)
    {
      v99 = *(_QWORD *)(v44 + 176);
      if (v99)
      {
        if (objc_msgSend_count(*(void **)(v44 + 168), v39, v40, v41, v42, v43))
          LOBYTE(v99) = 1;
        else
          LOBYTE(v99) = *(_QWORD *)(v44 + 160) == 2;
      }
    }
    else
    {
      LOBYTE(v99) = 0;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v101 + 56) + 8) + 24) = v99;

  }
}

void sub_1BE83EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1BE83EFB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1BE83EFD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE83F0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE83F0E0(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(result + 32);
  v7 = *(_QWORD *)(result + 40);
  if (v6 != *(_QWORD *)(v7 + 176))
  {
    v8 = result;
    *(_QWORD *)(v7 + 176) = v6;
    v9 = *(_QWORD *)(result + 40);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 176);
      if (v10)
      {
        result = objc_msgSend_count(*(void **)(v9 + 168), a2, a3, a4, a5, a6);
        if (result)
          LOBYTE(v10) = 1;
        else
          LOBYTE(v10) = *(_QWORD *)(v9 + 160) == 2;
      }
    }
    else
    {
      LOBYTE(v10) = 0;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8) + 24) = v10;
  }
  return result;
}

void sub_1BE83F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE83F220(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE83F230(uint64_t a1)
{

}

void sub_1BE83F238(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1BE83F2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE83F2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1E0DE7D20](a2, sel_recognitionSessionDidUpdateRecognitionResult_, *(_QWORD *)(a1 + 32), a4, a5, a6);
}

void sub_1BE83F2F8(uint64_t a1, void *a2)
{
  void (**v3)(id, id);
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = *(id *)(a1 + 264);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v5 = v4;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v15, (uint64_t)v19, 16, v7);
    if (v10)
    {
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v5);
          v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v12);
          if (v13)
          {
            v14 = v13;
            v3[2](v3, v14);

          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v15, (uint64_t)v19, 16, v9);
      }
      while (v10);
    }

  }
}

void sub_1BE83F428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83F508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE83F528(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_1BE83F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE83F654(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
}

void sub_1BE83F800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE83F81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83F830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83F844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE83F85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83F91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE83F93C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_1BE83FA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE83FA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE83FB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE83FB68(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 16);
  return result;
}

void sub_1BE83FBE0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend_recognitionSessionDidChangeStatus_(v7, v3, *(_QWORD *)(a1 + 32), v4, v5, v6);

}

void sub_1BE83FC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE83FC40(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a2;
  *a4 = objc_msgSend_isNonRecognitionTask(v5, v6, v7, v8, v9, v10) ^ 1;
  v16 = objc_msgSend_isNonRecognitionTask(v5, v11, v12, v13, v14, v15) ^ 1;

  return v16;
}

void sub_1BE83FC84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83FCEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83FCFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83FEB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE83FECC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1BE83FED4(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1BE83FED4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  const __CFString *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = objc_msgSend_q_needsForegroundRecognition((void *)a1, a2, a3, a4, a5, a6);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v8 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(id *)(a1 + 312);
      v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);
      v16 = *(unsigned __int8 *)(a1 + 144);
      objc_msgSend_strokeProviderVersion(*(void **)(a1 + 8), v17, v18, v19, v20, v21);
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = (void *)v22;
      v24 = "N";
      v26 = 134219010;
      v27 = a1;
      if (v7)
        v24 = "Y";
      v25 = CFSTR("Y");
      v28 = 2048;
      v29 = v15;
      v30 = 2080;
      v31 = v24;
      v32 = 2112;
      if (!v16)
        v25 = CFSTR("N");
      v33 = v25;
      v34 = 2112;
      v35 = v22;
      _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p cancelOngoingRequests. Cancelling %ld pending tasks. Foreground: %s. hasUnprocessedChanges %@->N. Last saved result for version: %@", (uint8_t *)&v26, 0x34u);

    }
    sub_1BE83DCE8(a1, v7 ^ 1, 1);
    ++*(_QWORD *)(a1 + 256);
    *(_BYTE *)(a1 + 144) = 0;
  }
}

void sub_1BE840070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE840204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE840264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE840274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE840288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CHStrokeClutterFilter *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CHStrokeGroupingResult *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  CHStrokeClassificationResult *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  CHRecognitionSessionResult *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  NSObject *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  NSObject *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void *v185;
  _OWORD v186[3];
  uint8_t buf[4];
  uint64_t v188;
  __int16 v189;
  void *v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 32);
  if (v7
    && *(_QWORD *)(v7 + 176)
    && (objc_msgSend_count(*(void **)(v7 + 168), a2, a3, a4, a5, a6) || *(_QWORD *)(v7 + 160) == 2))
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v13 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        v14 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v188 = v14;
        _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_FAULT, "dataSource %@ returned a nil strokeProviderSnapshot.", buf, 0xCu);
      }

      v12 = *(_QWORD *)(a1 + 40);
    }
    objc_msgSend__setLatestStrokeProvider_(*(void **)(a1 + 32), v8, v12, v9, v10, v11);
    objc_msgSend__setLatestCalculateDocumentProvider_(*(void **)(a1 + 32), v15, *(_QWORD *)(a1 + 56), v16, v17, v18);
    v24 = *(void **)(a1 + 32);
    if (v24)
    {
      objc_setProperty_atomic(v24, v19, *(id *)(a1 + 64), 216);
      v24 = *(void **)(a1 + 32);
    }
    if (!objc_msgSend_mode(v24, v19, v20, v21, v22, v23)
      || objc_msgSend_mode(*(void **)(a1 + 32), v25, v26, v27, v28, v29) == 2)
    {
      sub_1BE83D700(*(_QWORD *)(a1 + 32));
      v30 = *(_QWORD *)(a1 + 32);
      if (v30)
      {
        v31 = *(void **)(v30 + 72);
        if (v31)
        {
          *(_QWORD *)(v30 + 72) = 0;

        }
        v32 = *(void **)(v30 + 80);
        if (v32)
        {
          *(_QWORD *)(v30 + 80) = 0;

        }
      }
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v33 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v39 = *(_QWORD *)(a1 + 32);
      objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v34, v35, v36, v37, v38);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v188 = v39;
      v189 = 2112;
      v190 = v40;
      _os_log_impl(&dword_1BE607000, v33, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p received request to rebuild recognition results. Stroke provider version: %@", buf, 0x16u);

    }
    sub_1BE83FED4(*(_QWORD *)(a1 + 32), v41, v42, v43, v44, v45);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v50 = objc_alloc_init(CHStrokeClutterFilter);
      objc_msgSend_strokeGroupingResult(*(void **)(*(_QWORD *)(a1 + 32) + 8), v51, v52, v53, v54, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeGroups(v56, v57, v58, v59, v60, v61);
      v185 = (void *)objc_claimAutoreleasedReturnValue();

      v62 = [CHStrokeGroupingResult alloc];
      objc_msgSend_set(MEMORY[0x1E0C99E60], v63, v64, v65, v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v184 = (void *)objc_msgSend_initWithStrokeGroups_createdStrokeGroups_deletedStrokeGroups_(v62, v69, (uint64_t)v68, 0, (uint64_t)v185, v70);

      v71 = [CHStrokeClassificationResult alloc];
      objc_msgSend_dictionary(MEMORY[0x1E0C99D80], v72, v73, v74, v75, v76);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dictionary(MEMORY[0x1E0C99D80], v78, v79, v80, v81, v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dictionary(MEMORY[0x1E0C99D80], v84, v85, v86, v87, v88);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dictionary(MEMORY[0x1E0C99D80], v90, v91, v92, v93, v94);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_set(MEMORY[0x1E0C99E60], v96, v97, v98, v99, v100);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      v183 = (void *)objc_msgSend_initWithStrokeClassificationsByStrokeIdentifier_scriptClassificationsByStrokeIdentifier_scriptClassificationRawResultsByStrokeIdentifier_substrokesByStrokeIdentifier_nontextCandidates_(v71, v102, (uint64_t)v77, (uint64_t)v83, (uint64_t)v89, (uint64_t)v95, v101);

      v103 = [CHRecognitionSessionResult alloc];
      objc_msgSend_strokeProviderVersion(*(void **)(*(_QWORD *)(a1 + 32) + 8), v104, v105, v106, v107, v108);
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_encodedStrokeProviderVersion(*(void **)(*(_QWORD *)(a1 + 32) + 8), v110, v111, v112, v113, v114);
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_orderedStrokeIdentifiers(*(void **)(*(_QWORD *)(a1 + 32) + 8), v116, v117, v118, v119, v120);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      v127 = objc_msgSend_sessionMode(*(void **)(*(_QWORD *)(a1 + 32) + 8), v122, v123, v124, v125, v126);
      objc_msgSend_locales(*(void **)(*(_QWORD *)(a1 + 32) + 8), v128, v129, v130, v131, v132);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_preferredLocales(*(void **)(*(_QWORD *)(a1 + 32) + 8), v134, v135, v136, v137, v138);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_declaredVariables(*(void **)(a1 + 56), v140, v141, v142, v143, v144);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      memset(v186, 0, sizeof(v186));
      v151 = objc_msgSend_recognitionEnvironment(*(void **)(a1 + 32), v146, v147, v148, v149, v150);
      v153 = objc_msgSend_initWithStrokeProviderVersion_encodedStrokeProviderVersion_orderedStrokeIdentifiers_sessionMode_locales_preferredLocales_declaredVariables_clutterFilter_strokeClassificationResult_strokeGroupingResult_rawStrokeGroupingResult_recognitionResults_rawRecognitionResults_inlineContinuousModeResults_autoRefineResult_generationDuration_recognitionEnvironment_(v103, v152, (uint64_t)v109, (uint64_t)v115, (uint64_t)v121, v127, v133, v139, v145, v50, v183, v184, v184, 0, 0, 0, 0, v186, v151);

      v154 = v153;
      objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 32), v155, v153, v156, v157, v158);
    }
    else
    {
      v154 = 0;
      objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 32), v46, 0, v47, v48, v49);
    }
    objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 32), v159, 0, v160, v161, v162);
    v167 = *(_QWORD *)(a1 + 32);
    if (v167)
    {
      v168 = *(void **)(v167 + 72);
      if (!v168 || (*(_QWORD *)(v167 + 72) = 0, v168, (v167 = *(_QWORD *)(a1 + 32)) != 0))
      {
        v169 = *(void **)(v167 + 80);
        if (v169)
        {
          *(_QWORD *)(v167 + 80) = 0;

        }
      }
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v170 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
    {
      v171 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      v188 = v171;
      _os_log_impl(&dword_1BE607000, v170, OS_LOG_TYPE_DEBUG, "RecognitionSession %p rebuilding recognition results. Cleared previous results. Will trigger processing soon.", buf, 0xCu);
    }

    v172 = *(_QWORD *)(a1 + 32);
    if (v172)
    {
      *(_BYTE *)(v172 + 144) = 1;
      v173 = *(_QWORD **)(a1 + 32);
    }
    else
    {
      v173 = 0;
    }
    sub_1BE8409F4(v173, 0);
    v178 = *(_QWORD *)(a1 + 32);
    if (v178)
    {
      if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v178 + 312), v174, (uint64_t)&unk_1E77F1BD0, v175, v176, v177) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(_BYTE *)(v178 + 144))
        {
          objc_msgSend__setStatus_((void *)v178, v179, 2, v180, v181, v182);
        }
        else if (*(_QWORD *)(v178 + 8))
        {
          objc_msgSend__setStatus_((void *)v178, v179, 4, v180, v181, v182);
        }
        else
        {
          objc_msgSend__setStatus_((void *)v178, v179, 1, v180, v181, v182);
        }
      }
      else
      {
        objc_msgSend__setStatus_((void *)v178, v179, 3, v180, v181, v182);
      }
    }
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v154 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      v163 = *(_QWORD *)(a1 + 32);
      v164 = *(void **)(a1 + 48);
      v165 = *(_QWORD *)(v163 + 200);
      v166 = *(_QWORD *)(v163 + 168);
      *(_DWORD *)buf = 134218754;
      v188 = v163;
      v189 = 2112;
      v190 = v164;
      v191 = 2112;
      v192 = v165;
      v193 = 2112;
      v194 = v166;
      _os_log_impl(&dword_1BE607000, v154, OS_LOG_TYPE_ERROR, "RecognitionSession %p cannot process rebuildRecognitionResults request. dataSource: %@, text recognition locales: %@, preferred locales: %@.", buf, 0x2Au);
    }
  }

}

void sub_1BE840908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8409F4(_QWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  double v13;
  uint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int64_t v22;
  dispatch_time_t v23;
  NSObject *v24;
  _QWORD v25[6];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!a1[3])
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v4 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_FAULT, "latestStrokeProvider cannot be nil when scheduling change processing.", buf, 2u);
      }

    }
    v5 = a1[32] + 1;
    a1[32] = v5;
    if (a2)
    {
      sub_1BE841344((uint64_t)a1);
    }
    else
    {
      v6 = (void *)a1[33];
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v7 = v6;
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v26, (uint64_t)buf, 16, v9);
      if (v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)v27;
        v13 = 1.79769313e308;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v27 != v12)
              objc_enumerationMutation(v7);
            v15 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
            if ((objc_opt_respondsToSelector() & 1) != 0)
            {
              objc_msgSend_preferredRecognitionResultUpdatesInterval(v15, v16, v17, v18, v19, v20);
              if (v13 >= v21)
                v13 = v21;
              v11 = 1;
            }
          }
          v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v16, (uint64_t)&v26, (uint64_t)buf, 16, v20);
        }
        while (v10);

        if ((v11 & 1) != 0)
          v22 = (uint64_t)(v13 * 1000000000.0);
        else
          v22 = 2000000000;
      }
      else
      {

        v22 = 2000000000;
      }
      v23 = dispatch_time(0, v22);
      v24 = a1[37];
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = sub_1BE84189C;
      v25[3] = &unk_1E77F24A0;
      v25[4] = a1;
      v25[5] = v5;
      dispatch_after(v23, v24, v25);
    }
  }
}

void sub_1BE840C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE840C6C(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  NSObject *v89;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  _QWORD v104[4];
  id v105;
  uint64_t v106;
  const char *v107;
  uint8_t buf[4];
  uint64_t v109;
  __int16 v110;
  void *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E50;
  v3 = os_signpost_id_generate(v2);

  if (qword_1EF568E88 == -1)
  {
    v4 = (id)qword_1EF568E50;
    v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E50;
    v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_7;
  }
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "CHRecognitionSessionPrincipalLinesTask", "", buf, 2u);
  }
LABEL_7:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v6 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionPrincipalLinesTask\"", buf, 2u);
  }

  objc_msgSend_main(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  if (qword_1EF568E88 == -1)
  {
    v12 = (id)qword_1EF568E50;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v12 = (id)qword_1EF568E50;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_15;
  }
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v12, OS_SIGNPOST_INTERVAL_END, v3, "CHRecognitionSessionPrincipalLinesTask", "", buf, 2u);
  }
LABEL_15:

  if (qword_1EF568E88 == -1)
  {
    v13 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    goto LABEL_17;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
LABEL_17:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionPrincipalLinesTask\"", buf, 2u);
  }
LABEL_18:

  objc_msgSend_outputResult(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_cancelled(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
  if (v19)
    v26 = v25;
  else
    v26 = 1;
  if ((v26 & 1) != 0)
  {
    if (qword_1EF568E88 == -1)
    {
      v89 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v89 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    v27 = *(_QWORD *)(a1 + 40);
    objc_msgSend_strokeProvider(*(void **)(a1 + 32), v91, v92, v93, v94, v95);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeProviderVersion(v28, v29, v30, v31, v32, v33);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 48))
      v40 = "Y";
    else
      v40 = "N";
    v41 = objc_msgSend_cancelled(*(void **)(a1 + 32), v34, v35, v36, v37, v38);
    v47 = objc_msgSend_completeness(v19, v42, v43, v44, v45, v46);
    if (v19)
      v48 = "Y";
    else
      v48 = "N";
    *(_DWORD *)buf = 134219266;
    if (v41)
      v49 = "Y";
    else
      v49 = "N";
    v109 = v27;
    v110 = 2112;
    v111 = v39;
    v112 = 2080;
    v113 = v40;
    v114 = 2080;
    v115 = v49;
    v116 = 2080;
    v117 = (uint64_t)v48;
    v118 = 2048;
    v119 = v47;
    _os_log_impl(&dword_1BE607000, v89, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished principal lines task for version: %@. Foreground: %s. Cancelled: %s. Produced result: %s. Completeness level: %ld.", buf, 0x3Eu);

  }
  else
  {
    if (qword_1EF568E88 == -1)
    {
      v89 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v89 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    v50 = *(_QWORD *)(a1 + 40);
    objc_msgSend_strokeProvider(*(void **)(a1 + 32), v97, v98, v99, v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeProviderVersion(v102, v51, v52, v53, v54, v55);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 48))
      v61 = "Y";
    else
      v61 = "N";
    objc_msgSend_generationDuration(v19, v56, v57, v58, v59, v60);
    objc_msgSend_strokeGroupingResult(v19, v62, v63, v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeGroups(v67, v68, v69, v70, v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = objc_msgSend_count(v73, v74, v75, v76, v77, v78);
    v85 = objc_msgSend_completeness(v19, v80, v81, v82, v83, v84);
    *(_DWORD *)buf = 134219266;
    v109 = v50;
    v110 = 2112;
    v111 = v103;
    v112 = 2080;
    v113 = v61;
    v114 = 2048;
    v115 = v107;
    v116 = 2048;
    v117 = v79;
    v118 = 2048;
    v119 = v85;
    _os_log_impl(&dword_1BE607000, v89, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished principal lines task for version: %@. Foreground: %s. Duration: %0.3fs. Groups: %ld. Completeness level: %ld.", buf, 0x3Eu);

  }
LABEL_42:

  v104[0] = MEMORY[0x1E0C809B0];
  v104[1] = 3221225472;
  v104[2] = sub_1BE8412BC;
  v104[3] = &unk_1E77F2428;
  v86 = *(_QWORD *)(a1 + 40);
  v87 = *(id *)(a1 + 32);
  v88 = *(_QWORD *)(a1 + 40);
  v105 = v87;
  v106 = v88;
  sub_1BE83D9CC(v86, v104);

}

void sub_1BE84122C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8412BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6) & 1) == 0)
  {
    objc_msgSend_outputResult(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v14 = *(void **)(a1 + 40);
      objc_msgSend_outputResult(*(void **)(a1 + 32), v7, v13, v9, v10, v11);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__setLastRecognitionResult_(v14, v16, (uint64_t)v15, v17, v18, v19);

    }
  }
  objc_msgSend_setDelegate_(*(void **)(a1 + 32), v7, 0, v9, v10, v11);
  sub_1BE83E2D4(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
}

void sub_1BE841334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE841344(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  void *v73;
  __CFString *v74;
  id v75;
  __CFString *v76;
  id v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  __int128 v89;
  uint64_t v90;
  _QWORD v91[5];
  id v92;
  id v93;
  char v94;
  _QWORD v95[5];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint8_t buf[4];
  uint64_t v101;
  __int16 v102;
  void *v103;
  __int16 v104;
  void *v105;
  _BYTE v106[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_BYTE *)(a1 + 144))
  {
    *(_BYTE *)(a1 + 144) = 0;
    v2 = *(id *)(a1 + 24);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v90 = a1;
    v3 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_strokeProviderVersion(v2, v4, v5, v6, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v101 = a1;
      v102 = 2112;
      v103 = v9;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEBUG, "RecognitionSession %p enqueueing recognition task for version %@.", buf, 0x16u);

    }
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v10 = *(id *)(a1 + 312);
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v96, (uint64_t)v106, 16, v12);
    if (v18)
    {
      v20 = *(_QWORD *)v97;
      *(_QWORD *)&v19 = 134218498;
      v89 = v19;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v97 != v20)
            objc_enumerationMutation(v10);
          v22 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * i);
          if (!objc_msgSend_status(v22, v13, v14, v15, v16, v17, v89))
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v23 = (id)qword_1EF568E28;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_strokeProvider(v22, v24, v25, v26, v27, v28);
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeProviderVersion(v29, v30, v31, v32, v33, v34);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = v2;
              objc_msgSend_strokeProviderVersion(v2, v37, v38, v39, v40, v41);
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v89;
              v101 = v90;
              v102 = 2112;
              v103 = v35;
              v104 = 2112;
              v105 = v42;
              _os_log_impl(&dword_1BE607000, v23, OS_LOG_TYPE_DEBUG, "RecognitionSession %p canceling pending task for version %@, superseded by request for version %@.", buf, 0x20u);

              v2 = v36;
            }

            objc_msgSend_cancel(v22, v43, v44, v45, v46, v47);
          }
        }
        v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v96, (uint64_t)v106, 16, v17);
      }
      while (v18);
    }

    v48 = MEMORY[0x1E0C809B0];
    v95[0] = MEMORY[0x1E0C809B0];
    v95[1] = 3221225472;
    v95[2] = sub_1BE8418D0;
    v95[3] = &unk_1E77F5F20;
    v95[4] = v90;
    v49 = (void *)MEMORY[0x1C3B81A84](v95);
    v50 = *(void **)(v90 + 24);
    v56 = objc_msgSend_strokeGroupingOnly((void *)v90, v51, v52, v53, v54, v55);
    v62 = objc_msgSend_q_wantsAutoRefine((void *)v90, v57, v58, v59, v60, v61);
    v63 = sub_1BE8419B0(v90, v50, 0, 0, v56, 0, v49, v62);
    v64 = v2;
    v70 = objc_msgSend_q_needsForegroundRecognition((void *)v90, v65, v66, v67, v68, v69);
    v71 = v70;
    v72 = 288;
    if (v70)
      v72 = 280;
    v73 = *(void **)(v90 + v72);
    if (v70)
      v74 = CFSTR("ForegroundQueue");
    else
      v74 = CFSTR("BackgroundQueue");
    v75 = v73;
    v76 = v74;
    v77 = v75;
    objc_sync_enter(v77);
    if (v71)
      sub_1BE83DCE8(v90, 1, 0);
    sub_1BE83E0A8((void **)v90, v63, v71 ^ 1);
    if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v90 + 312), v78, (uint64_t)&unk_1E77F1BD0, v79, v80, v81) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*(_BYTE *)(v90 + 144))
      {
        v86 = 2;
      }
      else if (*(_QWORD *)(v90 + 8))
      {
        v86 = 4;
      }
      else
      {
        v86 = 1;
      }
    }
    else
    {
      v86 = 3;
    }
    objc_msgSend__setStatus_((void *)v90, v82, v86, v83, v84, v85);
    v91[0] = v48;
    v91[1] = 3221225472;
    v91[2] = sub_1BE841C78;
    v91[3] = &unk_1E77F5F48;
    v91[4] = v90;
    v87 = v64;
    v92 = v87;
    v94 = v71;
    v88 = v63;
    v93 = v88;
    sub_1BE83E4D4(v90, v77, v76, CFSTR("FullSessionTask"), v91);

    objc_sync_exit(v77);
  }
}

void sub_1BE8417EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE84189C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 256) != *(_QWORD *)(a1 + 40))
      return;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 40))
LABEL_3:
    sub_1BE841344(v2);
}

void sub_1BE8418D0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BE841964;
  v6[3] = &unk_1E77F2428;
  v6[4] = v4;
  v7 = v3;
  v5 = v3;
  sub_1BE83D9CC(v4, v6);

}

void sub_1BE84194C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE841964(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id *v4;
  id v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  v3 = v1;
  if (v2)
  {
    v5 = *(id *)(v2 + 80);
    v4 = (id *)(v2 + 80);
    if (v5 != v3)
    {
      v6 = v3;
      objc_storeStrong(v4, v1);
      v3 = v6;
    }
  }

}

void *sub_1BE8419B0(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, void *a6, void *a7, char a8)
{
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  const char *v43;
  void *isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine;
  void *v45;
  CHRecognitionSessionTextInputTask *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CHRecognitionSessionTask *v91;
  uint64_t v92;
  id v93;
  id v94;
  void *v95;
  id v96;

  v15 = a2;
  v16 = a6;
  v94 = a7;
  v93 = *(id *)(a1 + 40);
  v95 = v16;
  if (v16)
    v96 = 0;
  else
    v96 = *(id *)(a1 + 8);
  v22 = objc_msgSend_mode((void *)a1, v17, v18, v19, v20, v21);
  if (v22)
  {
    if (v22 == 1)
    {
      v45 = *(void **)(a1 + 216);
      if (!v45)
        v45 = (void *)MEMORY[0x1E0C9AA60];
      v42 = v45;
      v46 = [CHRecognitionSessionTextInputTask alloc];
      v47 = *(_QWORD *)(a1 + 200);
      v53 = objc_msgSend_recognitionEnvironment((void *)a1, v48, v49, v50, v51, v52);
      isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine = (void *)objc_msgSend_initWithLocales_strokeProvider_initialTextInputTargets_inputResult_recognitionEnvironment_(v46, v54, v47, (uint64_t)v15, (uint64_t)v42, (uint64_t)v96, v53);
      objc_msgSend_activeTextInputQuery((void *)a1, v55, v56, v57, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setActiveTextInputQuery_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine, v61, (uint64_t)v60, v62, v63, v64);

      goto LABEL_11;
    }
    if (v22 != 2)
    {
      v65 = 0;
      objc_msgSend_setDelegate_(0, v23, a1, v24, v25, v26);
      goto LABEL_13;
    }
  }
  v91 = [CHRecognitionSessionTask alloc];
  v90 = objc_msgSend_mode((void *)a1, v27, v28, v29, v30, v31);
  v88 = *(_QWORD *)(a1 + 168);
  v89 = *(_QWORD *)(a1 + 200);
  v32 = *(_DWORD *)(a1 + 152);
  v38 = objc_msgSend_recognitionEnvironment((void *)a1, v33, v34, v35, v36, v37);
  v39 = *(_QWORD *)(a1 + 328);
  v92 = (uint64_t)v15;
  v40 = *(_QWORD *)(a1 + 120);
  v41 = *(_BYTE *)(a1 + 128);
  v42 = *(id *)(a1 + 320);
  v86 = v40;
  v15 = (id)v92;
  isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine = (void *)objc_msgSend_initWithSessionMode_locales_preferredLocales_strokeProvider_calculateDocumentProvider_inputResult_recognitionQOSClass_recognitionEnvironment_isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine_(v91, v43, v90, v89, v88, v92, v93, v96, v32, v38, a4, v42, v39, 0, a3, v95, v86, v41, v94, a8);
  a5 = v87;
LABEL_11:

  v65 = isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine;
  objc_msgSend_setDelegate_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine, v66, a1, v67, v68, v69);
LABEL_13:
  objc_msgSend_setStrokeGroupingOnly_(v65, v70, a5, v71, v72, v73);
  v74 = *(id *)(a1 + 272);
  v80 = objc_msgSend_count(v74, v75, v76, v77, v78, v79) != 0;
  objc_msgSend_setSaveInputDrawings_(v65, v81, v80, v82, v83, v84);

  return v65;
}

void sub_1BE841C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Unwind_Resume(a1);
}

void sub_1BE841C78(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  const char *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  NSObject *v15;
  unint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const char *v124;
  const char *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  CHRecognitionSessionTask *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  const char *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  void *isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  void *v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  int v197;
  _QWORD v198[5];
  id v199;
  _QWORD v200[4];
  id v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  const char *v205;
  uint8_t buf[4];
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  const char *v211;
  __int16 v212;
  const char *v213;
  __int16 v214;
  const char *v215;
  __int16 v216;
  uint64_t v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v3, v4, v5, v6, v7);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    v11 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 134218498;
    if (v11)
      v12 = "Y";
    else
      v12 = "N";
    v207 = v8;
    v208 = 2112;
    v209 = v9;
    v210 = 2080;
    v211 = v12;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p starting task for version: %@. Foreground: %s.", buf, 0x20u);

  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E50;
  v14 = os_signpost_id_generate(v13);

  if (qword_1EF568E88 == -1)
  {
    v15 = (id)qword_1EF568E50;
    v16 = v14 - 1;
    if (v14 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_14;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v15 = (id)qword_1EF568E50;
    v16 = v14 - 1;
    if (v14 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_14;
  }
  if (os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v14, "CHRecognitionSessionFullTask", "", buf, 2u);
  }
LABEL_14:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v17 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v17, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionFullTask\"", buf, 2u);
  }

  objc_msgSend_main(*(void **)(a1 + 48), v18, v19, v20, v21, v22);
  if (qword_1EF568E88 == -1)
  {
    v23 = (id)qword_1EF568E50;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_22;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v23 = (id)qword_1EF568E50;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_22;
  }
  if (os_signpost_enabled(v23))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v23, OS_SIGNPOST_INTERVAL_END, v14, "CHRecognitionSessionFullTask", "", buf, 2u);
  }
LABEL_22:

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v24 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      goto LABEL_25;
    goto LABEL_24;
  }
  v24 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_24:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionFullTask\"", buf, 2u);
  }
LABEL_25:

  objc_msgSend_outputResult(*(void **)(a1 + 48), v25, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_cancelled(*(void **)(a1 + 48), v31, v32, v33, v34, v35) & 1) != 0 || !v30)
  {
    if (qword_1EF568E88 == -1)
    {
      v36 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v36 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
    }
    v115 = *(_QWORD *)(a1 + 32);
    objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v110, v111, v112, v113, v114);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v117 = *(unsigned __int8 *)(a1 + 56);
    v123 = objc_msgSend_cancelled(*(void **)(a1 + 48), v118, v119, v120, v121, v122);
    v124 = "Y";
    *(_DWORD *)buf = 134219010;
    v207 = v115;
    if (v117)
      v125 = "Y";
    else
      v125 = "N";
    v208 = 2112;
    v209 = (uint64_t)v116;
    if (v123)
      v126 = "Y";
    else
      v126 = "N";
    v210 = 2080;
    if (!v30)
      v124 = "N";
    v211 = v125;
    v212 = 2080;
    v213 = v126;
    v214 = 2080;
    v215 = v124;
    _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished task for version: %@. Foreground: %s. Cancelled: %s. Produced result: %s.", buf, 0x34u);

  }
  else
  {
    if (qword_1EF568E88 == -1)
    {
      v36 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v36 = (id)qword_1EF568E28;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
    }
    v194 = *(_QWORD *)(a1 + 32);
    objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v37, v38, v39, v40, v41);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 56))
      v47 = "Y";
    else
      v47 = "N";
    v192 = v47;
    objc_msgSend_generationDuration(v30, v42, v43, v44, v45, v46);
    objc_msgSend_generationDuration(v30, v48, v49, v50, v51, v52);
    objc_msgSend_generationDuration(v30, v53, v54, v55, v56, v57);
    objc_msgSend_strokeGroupingResult(v30, v58, v59, v60, v61, v62);
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeGroups(v190, v63, v64, v65, v66, v67);
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend_count(v191, v68, v69, v70, v71, v72);
    objc_msgSend_strokeGroupingResult(v30, v74, v75, v76, v77, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_createdStrokeGroups(v79, v80, v81, v82, v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend_count(v85, v86, v87, v88, v89, v90);
    objc_msgSend_strokeGroupingResult(v30, v92, v93, v94, v95, v96);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deletedStrokeGroups(v97, v98, v99, v100, v101, v102);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    v109 = objc_msgSend_count(v103, v104, v105, v106, v107, v108);
    *(_DWORD *)buf = 134220034;
    v207 = v194;
    v208 = 2112;
    v209 = (uint64_t)v196;
    v210 = 2080;
    v211 = v192;
    v212 = 2048;
    v213 = v205;
    v214 = 2048;
    v215 = v204;
    v216 = 2048;
    v217 = v203;
    v218 = 2048;
    v219 = v73;
    v220 = 2048;
    v221 = v91;
    v222 = 2048;
    v223 = v109;
    _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished task for version: %@. Foreground: %s. Duration: %0.3fs (%0.3fs G, %0.3fs R). Groups: %ld, created: %ld, deleted: %ld.", buf, 0x5Cu);

  }
LABEL_44:

  v127 = MEMORY[0x1E0C809B0];
  v128 = *(_QWORD *)(a1 + 32);
  v200[0] = MEMORY[0x1E0C809B0];
  v200[1] = 3221225472;
  v200[2] = sub_1BE8425CC;
  v200[3] = &unk_1E77F2428;
  v129 = *(id *)(a1 + 48);
  v130 = *(_QWORD *)(a1 + 32);
  v201 = v129;
  v202 = v130;
  sub_1BE83D9CC(v128, v200);
  if ((objc_msgSend_cancelled(*(void **)(a1 + 48), v131, v132, v133, v134, v135) & 1) == 0
    && v30
    && (objc_msgSend_skipPrincipalLines(*(void **)(a1 + 32), v136, v137, v138, v139, v140) & 1) == 0
    && (objc_msgSend_strokeGroupingOnly(*(void **)(a1 + 32), v141, v142, v143, v144, v145) & 1) == 0
    && !objc_msgSend_mode(*(void **)(a1 + 32), v146, v147, v148, v149, v150))
  {
    v151 = [CHRecognitionSessionTask alloc];
    v157 = objc_msgSend_mode(*(void **)(a1 + 32), v152, v153, v154, v155, v156);
    v158 = *(_QWORD *)(a1 + 32);
    v159 = *(_QWORD *)(a1 + 40);
    v160 = *(_QWORD *)(v158 + 200);
    v161 = *(_QWORD *)(v158 + 168);
    v162 = *(_QWORD *)(v158 + 40);
    v197 = *(_DWORD *)(v158 + 152);
    v168 = objc_msgSend_recognitionEnvironment((void *)v158, v163, v164, v165, v166, v167);
    v169 = *(_QWORD **)(a1 + 32);
    v193 = v168;
    v195 = v160;
    if (v169)
      v169 = (_QWORD *)v169[40];
    v170 = v169;
    v172 = v170;
    v173 = *(_QWORD *)(a1 + 32);
    if (v173)
      v174 = *(_QWORD *)(v173 + 328);
    else
      v174 = 0;
    isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine = (void *)objc_msgSend_initWithSessionMode_locales_preferredLocales_strokeProvider_calculateDocumentProvider_inputResult_recognitionQOSClass_recognitionEnvironment_isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine_(v151, v171, v157, v195, v161, v159, v162, v30, v197, v193, 0, v170, v174, 0, 3, 0, *(_QWORD *)(v173 + 120), *(_BYTE *)(v173 + 128), 0, 0);

    objc_msgSend_setDelegate_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine, v176, *(_QWORD *)(a1 + 32), v177, v178, v179);
    objc_msgSend_setStrokeGroupingOnly_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine, v180, 0, v181, v182, v183);
    objc_msgSend_setSaveInputDrawings_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine, v184, 0, v185, v186, v187);
    v188 = *(_QWORD *)(a1 + 32);
    v198[0] = v127;
    v198[1] = 3221225472;
    v198[2] = sub_1BE8426AC;
    v198[3] = &unk_1E77F2428;
    v198[4] = v188;
    v189 = isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_recognitionOptions_disableMathTextSwapping_partialResultBlock_wantsAutoRefine;
    v199 = v189;
    sub_1BE83D9CC(v188, v198);

  }
}

void sub_1BE8424CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_1BE8425CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6) & 1) == 0)
  {
    objc_msgSend_outputResult(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 40), v13, (uint64_t)v12, v14, v15, v16);

  }
  objc_msgSend_setDelegate_(*(void **)(a1 + 32), v7, 0, v9, v10, v11);
  sub_1BE83E2D4(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
  {
    if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v21 + 312), v17, (uint64_t)&unk_1E77F1BD0, v18, v19, v20) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*(_BYTE *)(v21 + 144))
      {
        objc_msgSend__setStatus_((void *)v21, v22, 2, v23, v24, v25);
      }
      else if (*(_QWORD *)(v21 + 8))
      {
        objc_msgSend__setStatus_((void *)v21, v22, 4, v23, v24, v25);
      }
      else
      {
        objc_msgSend__setStatus_((void *)v21, v22, 1, v23, v24, v25);
      }
    }
    else
    {
      objc_msgSend__setStatus_((void *)v21, v22, 3, v23, v24, v25);
    }
  }
}

void sub_1BE84269C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8426AC(uint64_t a1)
{
  char *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  int v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  char *v15;
  char v16;

  v1 = *(char **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  if (v1)
  {
    v8 = objc_msgSend_q_needsForegroundRecognition(v1, v2, v3, v4, v5, v6);
    sub_1BE83E0A8((void **)v1, v7, v8 ^ 1);
    v9 = 288;
    if (v8)
      v9 = 280;
    v10 = *(void **)&v1[v9];
    if (v8)
      v11 = CFSTR("ForegroundQueue");
    else
      v11 = CFSTR("BackgroundQueue");
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1BE840C6C;
    v13[3] = &unk_1E77F5EF8;
    v14 = v7;
    v15 = v1;
    v16 = v8;
    v12 = v10;
    sub_1BE83E4D4((uint64_t)v1, v12, v11, CFSTR("PrincipalLinesTask"), v13);

  }
}

void sub_1BE84279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE8427B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE8427C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE842890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE8428B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint8_t v11[16];

  objc_msgSend_data(MEMORY[0x1E0C99D50], a2, a3, a4, a5, a6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_FAULT, "Unimplemented", v11, 2u);
  }

}

void sub_1BE842988()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v0 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_FAULT, "Unimplemented", v1, 2u);
  }

}

void sub_1BE842BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE842C44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE842C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE842EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE842EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE842EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE842EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE842F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE842F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE842F30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE84337C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id sub_1BE843438(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE843728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE843748(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char isKindOfClass;
  uint64_t v6;
  void *v7;
  CHLineWrapper *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 248);
  else
    v3 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3);
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v4 = *(_QWORD *)(a1 + 40);
    if ((isKindOfClass & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = 0;

      v4 = *(_QWORD *)(a1 + 40);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40))
  {
    v8 = objc_alloc_init(CHLineWrapper);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E70;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v14 = 134217984;
      v15 = v12;
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p instantiated a local line wrapper.", (uint8_t *)&v14, 0xCu);
    }

    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      objc_storeStrong((id *)(v13 + 248), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

void sub_1BE843984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE843D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE843F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE843F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE84423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  void *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1BE8442D0(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint8_t v39[16];
  uint8_t v40[16];
  uint8_t v41[16];
  uint8_t buf[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E50;
  v3 = os_signpost_id_generate(v2);

  if (qword_1EF568E88 == -1)
  {
    v4 = (id)qword_1EF568E50;
    v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E50;
    v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_7;
  }
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "CHRecognitionSessionTaskInsights", "", buf, 2u);
  }
LABEL_7:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v6 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionTaskInsights\"", v41, 2u);
  }

  objc_msgSend_main(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  if (qword_1EF568E88 == -1)
  {
    v12 = (id)qword_1EF568E50;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v12 = (id)qword_1EF568E50;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_15;
  }
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)v40 = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v12, OS_SIGNPOST_INTERVAL_END, v3, "CHRecognitionSessionTaskInsights", "", v40, 2u);
  }
LABEL_15:

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    goto LABEL_17;
  }
  v13 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
LABEL_17:
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionTaskInsights\"", v39, 2u);
  }
LABEL_18:

  objc_msgSend_outputResult(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_integerValue(*(void **)(a1 + 40), v20, v21, v22, v23, v24);
  objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v19, v26, v25, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_inputDrawing(v30, v31, v32, v33, v34, v35);
  v36 = objc_claimAutoreleasedReturnValue();
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v38 = *(void **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = v36;

}

void sub_1BE8445BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8445D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE84465C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
    v6 = (_QWORD *)v6[33];
  return objc_msgSend_addObject_(v6, a2, *(_QWORD *)(a1 + 40), a4, a5, a6);
}

void sub_1BE844864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE844894(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
    v6 = (_QWORD *)v6[33];
  return objc_msgSend_removeObject_(v6, a2, *(_QWORD *)(a1 + 40), a4, a5, a6);
}

void sub_1BE844958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE844978(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int shouldRunRecognitionLocallyWithEnvironment;
  uint64_t v9;
  int isKindOfClass;
  uint64_t v11;
  void *v12;
  __objc2_class *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 240);
  else
    v3 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3);
  shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), v5, v6, v7);
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v9 = *(_QWORD *)(a1 + 40);
    if (((shouldRunRecognitionLocallyWithEnvironment ^ isKindOfClass) & 1) == 0)
    {
      v11 = *(_QWORD *)(v9 + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = 0;

      v9 = *(_QWORD *)(a1 + 40);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40))
  {
    if (shouldRunRecognitionLocallyWithEnvironment)
      v13 = CHTextSynthesizer;
    else
      v13 = CHRemoteTextSynthesizer;
    v14 = objc_alloc_init(v13);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
      objc_storeStrong((id *)(v17 + 240), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

void sub_1BE844B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BE844B84(uint64_t *a1)
{
  CHTextSynthesizerWithLocaleFallback *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (a1[4])
  {
    v2 = [CHTextSynthesizerWithLocaleFallback alloc];
    v6 = objc_msgSend_initWithLocales_baseSynthesizer_(v2, v3, *(_QWORD *)(a1[5] + 168), a1[4], v4, v5);
    v7 = *(_QWORD *)(a1[6] + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
}

void sub_1BE844C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE844E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE844E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE844E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE844ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE844EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE844EF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 32);
  if (v7
    && *(_QWORD *)(v7 + 176)
    && (objc_msgSend_count(*(void **)(v7 + 168), a2, a3, a4, a5, a6) || *(_QWORD *)(v7 + 160) == 2))
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (!v12 || !*(_BYTE *)(v12 + 144))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v13 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v56 = 134217984;
        v57 = v14;
        _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEBUG, "RecognitionSession %p received needsRecognitionUpdate request. Will trigger processing soon.", (uint8_t *)&v56, 0xCu);
      }

    }
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v16 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        v17 = *(_QWORD *)(a1 + 48);
        v56 = 138412290;
        v57 = v17;
        _os_log_impl(&dword_1BE607000, v16, OS_LOG_TYPE_FAULT, "dataSource %@ returned a nil strokeProviderSnapshot.", (uint8_t *)&v56, 0xCu);
      }

      v15 = *(_QWORD *)(a1 + 40);
    }
    objc_msgSend__setLatestStrokeProvider_(*(void **)(a1 + 32), v8, v15, v9, v10, v11);
    objc_msgSend__setLatestCalculateDocumentProvider_(*(void **)(a1 + 32), v18, *(_QWORD *)(a1 + 56), v19, v20, v21);
    objc_msgSend__setLatestCanvasAttachmentProvider_(*(void **)(a1 + 32), v22, *(_QWORD *)(a1 + 64), v23, v24, v25);
    v31 = *(void **)(a1 + 32);
    if (v31)
    {
      objc_setProperty_atomic(v31, v26, *(id *)(a1 + 72), 216);
      v31 = *(void **)(a1 + 32);
    }
    if (!objc_msgSend_mode(v31, v26, v27, v28, v29, v30)
      || objc_msgSend_mode(*(void **)(a1 + 32), v32, v33, v34, v35, v36) == 2)
    {
      sub_1BE83D700(*(_QWORD *)(a1 + 32));
      v37 = *(_QWORD *)(a1 + 32);
      if (!v37)
        goto LABEL_43;
      v38 = *(void **)(v37 + 72);
      if (v38)
      {
        *(_QWORD *)(v37 + 72) = 0;

      }
      v39 = *(void **)(v37 + 80);
      if (v39)
      {
        *(_QWORD *)(v37 + 80) = 0;

      }
    }
    v40 = *(_QWORD *)(a1 + 32);
    if (v40)
    {
      *(_BYTE *)(v40 + 144) = 1;
      v41 = *(_QWORD **)(a1 + 32);
      goto LABEL_29;
    }
LABEL_43:
    v41 = 0;
LABEL_29:
    sub_1BE8409F4(v41, *(unsigned __int8 *)(a1 + 80));
    v46 = *(_QWORD *)(a1 + 32);
    if (v46)
    {
      if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v46 + 312), v42, (uint64_t)&unk_1E77F1BD0, v43, v44, v45) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(_BYTE *)(v46 + 144))
        {
          objc_msgSend__setStatus_((void *)v46, v47, 2, v48, v49, v50);
        }
        else if (*(_QWORD *)(v46 + 8))
        {
          objc_msgSend__setStatus_((void *)v46, v47, 4, v48, v49, v50);
        }
        else
        {
          objc_msgSend__setStatus_((void *)v46, v47, 1, v48, v49, v50);
        }
      }
      else
      {
        objc_msgSend__setStatus_((void *)v46, v47, 3, v48, v49, v50);
      }
    }
    return;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v51 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
  {
    v52 = *(_QWORD *)(a1 + 32);
    v53 = *(_QWORD *)(a1 + 48);
    v54 = *(_QWORD *)(v52 + 200);
    v55 = *(_QWORD *)(v52 + 168);
    v56 = 134218754;
    v57 = v52;
    v58 = 2112;
    v59 = v53;
    v60 = 2112;
    v61 = v54;
    v62 = 2112;
    v63 = v55;
    _os_log_impl(&dword_1BE607000, v51, OS_LOG_TYPE_ERROR, "RecognitionSession %p cannot process needsRecognitionUpdate request. dataSource: %@, text recognition locales: %@.,  preferred locales: %@.", (uint8_t *)&v56, 0x2Au);
  }

}

void sub_1BE8452AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE845320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE84557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8455FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isEqualToString;

  objc_msgSend_languageCode(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1BE84563C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8456E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8456F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE845790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8457A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  id v14;
  _QWORD v15[5];
  id v16;

  v7 = *(_QWORD *)(a1 + 32);
  if (v7 && *(_BYTE *)(v7 + 144))
  {
    sub_1BE8409F4((_QWORD *)v7, 1);
    v7 = *(_QWORD *)(a1 + 32);
  }
  v8 = objc_msgSend_q_needsForegroundRecognition((void *)v7, a2, a3, a4, a5, a6);
  v9 = 288;
  if (v8)
    v9 = 280;
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(a1 + 40);
  v12 = *(void **)(v11 + v9);
  if (v8)
    v13 = CFSTR("ForegroundQueue");
  else
    v13 = CFSTR("BackgroundQueue");
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1BE8458A0;
  v15[3] = &unk_1E77F2428;
  v15[4] = v11;
  v16 = v10;
  v14 = v12;
  sub_1BE83E4D4(v11, v14, v13, CFSTR("WaitingPendingRecognitionTasks"), v15);

}

void sub_1BE845888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8458A0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[4];
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = *(NSObject **)(v1 + 296);
  else
    v2 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE845920;
  block[3] = &unk_1E77F1F38;
  v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);

}

intptr_t sub_1BE845920(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1BE845A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE845A30(_QWORD *a1)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = (_QWORD *)a1[4];
  if (v2)
    v2 = (_QWORD *)v2[34];
  v24 = v2;
  objc_msgSend_valueWithNonretainedObject_(MEMORY[0x1E0CB3B18], v3, a1[5], v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v24, v8, (uint64_t)v7, v9, v10, v11);

  v12 = (_QWORD *)a1[4];
  if (v12)
    v12 = (_QWORD *)v12[34];
  v25 = v12;
  if (objc_msgSend_count(v25, v13, v14, v15, v16, v17) != 1)
  {

    return;
  }
  v22 = a1[4];
  if (*(_QWORD *)(v22 + 8))
  {

  }
  else
  {
    v23 = objc_msgSend_indexOfObjectPassingTest_(*(void **)(v22 + 312), v18, (uint64_t)&unk_1E77F1BD0, v19, v20, v21);

    if (v23 == 0x7FFFFFFFFFFFFFFFLL)
      return;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_1BE845B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE845B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE845B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE845C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE845C40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[34];
  v3 = v2;
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = sub_1BE845DB0;
  v27[3] = &unk_1E77F6020;
  v28 = *(id *)(a1 + 40);
  v8 = objc_msgSend_indexOfObjectPassingTest_(v3, v4, (uint64_t)v27, v5, v6, v7);

  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_10;
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    objc_msgSend_removeObjectAtIndex_(*(void **)(v13 + 272), v9, v8, v10, v11, v12);
  else
    objc_msgSend_removeObjectAtIndex_(0, v9, v8, v10, v11, v12);
  v14 = *(_QWORD **)(a1 + 32);
  if (v14)
    v14 = (_QWORD *)v14[34];
  v15 = v14;
  if (!objc_msgSend_count(v15, v16, v17, v18, v19, v20))
  {
    v25 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v25 + 8))
    {

    }
    else
    {
      v26 = objc_msgSend_indexOfObjectPassingTest_(*(void **)(v25 + 312), v21, (uint64_t)&unk_1E77F1BD0, v22, v23, v24);

      if (v26 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_10;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;

    return;
  }

LABEL_10:
}

void sub_1BE845D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE845D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE845DB0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;

  objc_msgSend_nonretainedObjectValue(a2, (const char *)a2, a3, (uint64_t)a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(void **)(a1 + 32);

  if (v8 != v9)
    return 0;
  *a4 = 1;
  return 1;
}

id sub_1BE845E20(uint64_t a1, void *a2, uint64_t a3, void *a4, _QWORD *a5, void *a6, double a7, double a8)
{
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  void *v112;
  uint64_t v113;
  NSObject *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  double v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  NSObject *v135;
  NSObject *v136;
  const char *v137;
  NSObject *v138;
  CHFastStrokeGroupingStrategy *v139;
  const char *v140;
  uint64_t v141;
  const char *v142;
  void *v143;
  NSObject *v144;
  CHStrokeClutterFilter *v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  double v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  CHFastStrokeGroupingStrategy *v164;
  const char *v165;
  uint64_t v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  double v173;
  double v174;
  double v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  double v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  double v189;
  CHRecognitionSessionResult *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  void *v221;
  _QWORD *v222;
  NSObject *v223;
  id v224;
  NSObject *v225;
  void *v226;
  NSObject *v227;
  id v228;
  uint64_t v229;
  void *v230;
  uint64_t v232;
  void *v233;
  void *v234;
  void *v235;
  id v236;
  uint64_t v237;
  void *v239;
  void *v240;
  unsigned int (**v241)(void);
  _QWORD v242[5];
  id v243;
  _QWORD v244[6];
  id v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _QWORD block[5];
  id v255;
  id v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t v263;
  double v264;
  double v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t (*v269)(uint64_t, uint64_t);
  void (*v270)(uint64_t);
  id v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t (*v275)(uint64_t, uint64_t);
  void (*v276)(uint64_t);
  id v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t (*v281)(uint64_t, uint64_t);
  void (*v282)(uint64_t);
  id v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t (*v287)(uint64_t, uint64_t);
  void (*v288)(uint64_t);
  id v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t (*v293)(uint64_t, uint64_t);
  void (*v294)(uint64_t);
  id v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint8_t buf[4];
  double v301;
  _BYTE v302[128];
  _BYTE v303[128];
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a4;
  v240 = v15;
  v241 = a6;
  v239 = v14;
  if (!a1)
  {
    v228 = 0;
    goto LABEL_86;
  }
  v296 = 0;
  v297 = &v296;
  v298 = 0x2020000000;
  v299 = 0;
  v290 = 0;
  v291 = &v290;
  v292 = 0x3032000000;
  v293 = sub_1BE83F220;
  v294 = sub_1BE83F230;
  v295 = 0;
  v284 = 0;
  v285 = &v284;
  v286 = 0x3032000000;
  v287 = sub_1BE83F220;
  v288 = sub_1BE83F230;
  v289 = 0;
  v278 = 0;
  v279 = &v278;
  v280 = 0x3032000000;
  v281 = sub_1BE83F220;
  v282 = sub_1BE83F230;
  v283 = 0;
  v272 = 0;
  v273 = &v272;
  v274 = 0x3032000000;
  v275 = sub_1BE83F220;
  v276 = sub_1BE83F230;
  v277 = 0;
  v266 = 0;
  v267 = &v266;
  v268 = 0x3032000000;
  v269 = sub_1BE83F220;
  v270 = sub_1BE83F230;
  v271 = 0;
  v16 = *(NSObject **)(a1 + 296);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE846CF4;
  block[3] = &unk_1E77F6048;
  v257 = &v278;
  v258 = &v284;
  block[4] = a1;
  v17 = v15;
  v255 = v17;
  v236 = v14;
  v256 = v236;
  v259 = &v290;
  v260 = &v296;
  v264 = a7;
  v265 = a8;
  v261 = &v272;
  v262 = &v266;
  v263 = a3;
  dispatch_sync(v16, block);
  if ((objc_msgSend_shouldForceFastGrouping((void *)a1, v18, v19, v20, v21, v22) & 1) == 0 && v291[5])
    goto LABEL_82;
  if (!v241 || !v241[2]())
  {
    v237 = a3;
    v24 = (id)v279[5];
    if (objc_msgSend_count(v24, v25, v26, v27, v28, v29))
    {
      v35 = (void *)MEMORY[0x1E0C99DE8];
      v36 = objc_msgSend_count(v24, v30, v31, v32, v33, v34);
      objc_msgSend_arrayWithCapacity_(v35, v37, v36, v38, v39, v40);
      v41 = (id)objc_claimAutoreleasedReturnValue();
      v252 = 0u;
      v253 = 0u;
      v250 = 0u;
      v251 = 0u;
      v42 = v24;
      v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v250, (uint64_t)v303, 16, v44);
      if (v49)
      {
        v50 = *(_QWORD *)v251;
        do
        {
          for (i = 0; i != v49; ++i)
          {
            if (*(_QWORD *)v251 != v50)
              objc_enumerationMutation(v42);
            objc_msgSend_strokeIdentifierFromData_(v17, v45, *(_QWORD *)(*((_QWORD *)&v250 + 1) + 8 * i), v46, v47, v48);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeForIdentifier_(v17, v53, (uint64_t)v52, v54, v55, v56);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            if (v61)
              objc_msgSend_addObject_(v41, v57, (uint64_t)v61, v58, v59, v60);

          }
          v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v45, (uint64_t)&v250, (uint64_t)v303, 16, v48);
        }
        while (v49);
      }
      v62 = v42;
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v63 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v63, OS_LOG_TYPE_DEFAULT, "Visible strokes not available in the stroke provider for fast grouping. Falling back on the ordered strokes.", buf, 2u);
      }

      objc_msgSend_orderedStrokes(v17, v64, v65, v66, v67, v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = (void *)MEMORY[0x1E0C99DE8];
      v76 = objc_msgSend_count(v69, v71, v72, v73, v74, v75);
      objc_msgSend_arrayWithCapacity_(v70, v77, v76, v78, v79, v80);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v248 = 0u;
      v249 = 0u;
      v246 = 0u;
      v247 = 0u;
      v41 = v69;
      v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v81, (uint64_t)&v246, (uint64_t)v302, 16, v82);
      if (v88)
      {
        v89 = *(_QWORD *)v247;
        do
        {
          for (j = 0; j != v88; ++j)
          {
            if (*(_QWORD *)v247 != v89)
              objc_enumerationMutation(v41);
            objc_msgSend_encodedStrokeIdentifier(*(void **)(*((_QWORD *)&v246 + 1) + 8 * j), v83, v84, v85, v86, v87);
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v62, v92, (uint64_t)v91, v93, v94, v95);

          }
          v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v83, (uint64_t)&v246, (uint64_t)v302, 16, v87);
        }
        while (v88);
      }

      objc_msgSend_orderedSetWithArray_(MEMORY[0x1E0C99E40], v96, (uint64_t)v62, v97, v98, v99);
      v100 = objc_claimAutoreleasedReturnValue();

      v42 = (id)v100;
    }

    if (!v285[5])
    {
      v106 = (void *)MEMORY[0x1E0CB36F8];
      objc_msgSend_strokeProviderVersion(v17, v101, v102, v103, v104, v105);
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      v245 = 0;
      objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v106, v108, (uint64_t)v107, 1, (uint64_t)&v245, v109);
      v110 = objc_claimAutoreleasedReturnValue();
      v111 = v245;
      v112 = (void *)v285[5];
      v285[5] = v110;

    }
    v113 = v273[5];
    if (v237 && !v113)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v114 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        v120 = objc_msgSend_count(v41, v115, v116, v117, v118, v119);
        *(_DWORD *)buf = 134217984;
        v301 = *(double *)&v120;
        _os_log_impl(&dword_1BE607000, v114, OS_LOG_TYPE_DEFAULT, "Cached fast grouping line clusters not available. Computing line clusters on %lu strokes", buf, 0xCu);
      }

      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v121, v122, v123, v124, v125);
      v127 = v126;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v128, v129, v130, v131, v132);
      v134 = v133;
      if (v267[5])
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v135 = (id)qword_1EF568E28;
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v135, OS_LOG_TYPE_DEFAULT, "Using cached clutter filter for grouping query", buf, 2u);
        }
      }
      else
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v144 = (id)qword_1EF568E28;
        if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v144, OS_LOG_TYPE_DEFAULT, "Cached clutter filter not available. Creating new clutter filter", buf, 2u);
        }

        v145 = objc_alloc_init(CHStrokeClutterFilter);
        v146 = (void *)v267[5];
        v267[5] = (uint64_t)v145;

        objc_msgSend_clutterFilterByAddingStrokes_removingStrokeIdentifiers_affectedStrokeIdentifiers_((void *)v267[5], v147, (uint64_t)v41, 0, 0, v148);
        v149 = objc_claimAutoreleasedReturnValue();
        v135 = v267[5];
        v267[5] = v149;
      }

      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v150, v151, v152, v153, v154);
      v156 = v155;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v157, v158, v159, v160, v161);
      v163 = v162;
      v164 = [CHFastStrokeGroupingStrategy alloc];
      v167 = (void *)objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v164, v165, (uint64_t)v17, 0, v267[5], v166);
      objc_msgSend_lineGroupingResultUsingStrokes_shouldCancel_(v167, v168, (uint64_t)v41, (uint64_t)v241, v169, v170);
      v171 = objc_claimAutoreleasedReturnValue();
      v233 = v167;
      v172 = (void *)v273[5];
      v273[5] = v171;

      v173 = a7;
      v174 = a8;
      v175 = v127;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v176, v177, v178, v179, v180);
      v182 = v181;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v183, v184, v185, v186, v187);
      v189 = v188;
      v190 = [CHRecognitionSessionResult alloc];
      objc_msgSend_strokeProviderVersion(v17, v191, v192, v193, v194, v195);
      v235 = (void *)objc_claimAutoreleasedReturnValue();
      v196 = v285[5];
      objc_msgSend_array(v42, v197, v198, v199, v200, v201);
      v234 = (void *)objc_claimAutoreleasedReturnValue();
      v202 = (_QWORD *)a1;
      v203 = *(_QWORD *)(a1 + 200);
      v232 = *(_QWORD *)(a1 + 168);
      objc_msgSend_declaredVariables(*(void **)(a1 + 40), v204, v205, v206, v207, v208);
      v209 = (void *)objc_claimAutoreleasedReturnValue();
      v210 = v156 - v134;
      v211 = v189 - v175;
      v212 = v267[5];
      v213 = v273[5];
      *(double *)v244 = v210;
      v244[1] = 0;
      *(double *)&v244[2] = v182 - v163;
      v244[3] = 0;
      v244[4] = 0;
      *(double *)&v244[5] = v189 - v175;
      v219 = objc_msgSend_recognitionEnvironment(v202, v214, v215, v216, v217, v218);
      v221 = (void *)objc_msgSend_initWithStrokeProviderVersion_encodedStrokeProviderVersion_orderedStrokeIdentifiers_sessionMode_locales_preferredLocales_declaredVariables_clutterFilter_strokeClassificationResult_strokeGroupingResult_rawStrokeGroupingResult_recognitionResults_rawRecognitionResults_inlineContinuousModeResults_autoRefineResult_generationDuration_recognitionEnvironment_(v190, v220, (uint64_t)v235, v196, (uint64_t)v234, 0, v203, v232, v209, v212, 0, v213, v213, 0, 0, 0, 0, v244, v219);

      v222 = v202;
      a8 = v174;
      a7 = v173;

      v223 = v202[37];
      v242[0] = MEMORY[0x1E0C809B0];
      v242[1] = 3221225472;
      v242[2] = sub_1BE848500;
      v242[3] = &unk_1E77F2428;
      v242[4] = v222;
      v243 = v221;
      v224 = v221;
      dispatch_async(v223, v242);
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v225 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v301 = v211;
        _os_log_impl(&dword_1BE607000, v225, OS_LOG_TYPE_DEFAULT, "Fast grouping duration: %2.2f seconds", buf, 0xCu);
      }

      v143 = v233;
      if (v241)
      {
LABEL_75:
        if (v241[2]())
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v226 = v143;
          v227 = (id)qword_1EF568E28;
          if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BE607000, v227, OS_LOG_TYPE_DEFAULT, "Canceling tokenStrokeIdentifiersForContextStrokes request", buf, 2u);
          }

          v228 = (id)v291[5];
          goto LABEL_85;
        }
      }
LABEL_81:
      objc_msgSend_groupingResultForContextStrokes_clusteredStrokes_fastGroupingResult_point_tokenizationLevel_(v143, v142, (uint64_t)v236, (uint64_t)v41, v273[5], v237, a7, a8);
      v229 = objc_claimAutoreleasedReturnValue();
      v230 = (void *)v291[5];
      v291[5] = v229;

      v297[3] = 1;
LABEL_82:
      if (a5)
        *a5 = v297[3];
      goto LABEL_84;
    }
    if (v113)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v136 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v137 = "Using cached fast grouping line clusters for grouping query";
LABEL_62:
        _os_log_impl(&dword_1BE607000, v136, OS_LOG_TYPE_DEFAULT, v137, buf, 2u);
      }
    }
    else
    {
      if (v237)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v138 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v138, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v138, OS_LOG_TYPE_FAULT, "The tokenization level must be CHStrokeTokenizationLevelStroke to be compatible with fastGroupingResult=nil", buf, 2u);
        }

      }
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v136 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v137 = "CHStrokeTokenizationLevelStroke requested, so avoiding any clustering or grouping";
        goto LABEL_62;
      }
    }

    v139 = [CHFastStrokeGroupingStrategy alloc];
    v143 = (void *)objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v139, v140, (uint64_t)v17, 0, 0, v141);
    if (v241)
      goto LABEL_75;
    goto LABEL_81;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v23 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v23, OS_LOG_TYPE_DEFAULT, "Canceling tokenStrokeIdentifiersForContextStrokes request", buf, 2u);
  }

LABEL_84:
  v228 = (id)v291[5];
LABEL_85:

  _Block_object_dispose(&v266, 8);
  _Block_object_dispose(&v272, 8);

  _Block_object_dispose(&v278, 8);
  _Block_object_dispose(&v284, 8);

  _Block_object_dispose(&v290, 8);
  _Block_object_dispose(&v296, 8);
LABEL_86:

  return v228;
}

void sub_1BE846B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *a67;
  void *v67;
  void *v68;
  void *v69;
  void *v70;

  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);

  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);

  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose(&STACK[0x310], 8);

  _Unwind_Resume(a1);
}

void sub_1BE846CF4(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isValidForStrokes;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int isEqualToData;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int isEqualToArray;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  _BOOL4 v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  NSObject *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  uint64_t v121;
  NSObject *v122;
  void **v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  void *v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  void *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t i;
  uint64_t v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void **v270;
  uint64_t v271;
  void *v272;
  void *v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t m;
  void *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  const char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  id v337;
  const char *v338;
  uint64_t v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t n;
  void *v348;
  void *v349;
  const char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  const char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  id v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t ii;
  void *v371;
  const char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  const char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  void *v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  const char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  const char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  const char *v406;
  uint64_t v407;
  void **v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t jj;
  void *v416;
  const char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  const char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  CHFastStrokeGroupingStrategy *v426;
  const char *v427;
  uint64_t v428;
  void *v429;
  const char *v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  const char *v444;
  uint64_t v445;
  void *v446;
  void *v447;
  uint64_t v448;
  void *v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  id v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t j;
  uint64_t v461;
  void *v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void *v468;
  const char *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  void *v478;
  const char *v479;
  uint64_t v480;
  uint64_t v481;
  void *v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  void *v488;
  const char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void *v494;
  const char *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  uint64_t v500;
  void *v501;
  const char *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  const char *v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  const char *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  void *v523;
  const char *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  void *v529;
  const char *v530;
  const char *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  void **v540;
  id v541;
  const char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t k;
  uint64_t v547;
  void *v548;
  const char *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  void *v554;
  const char *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  const char *v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  void *v568;
  const char *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  const char *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  void *v580;
  const char *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  const char *v585;
  uint64_t v586;
  const char *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  void *v593;
  char isKindOfClass;
  const char *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  void *v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  void *v611;
  uint64_t v612;
  id obj;
  uint64_t v614;
  uint64_t v615;
  void *v616;
  void *v617;
  void *v618;
  id v619;
  id v620;
  void *v621;
  void *v622;
  void **v624;
  void *v625;
  void *v626;
  void *v627;
  id v628;
  id v629;
  id v630;
  void *__p;
  void *v632;
  uint64_t v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  _BYTE v650[128];
  id v651[16];
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  _BYTE buf[24];
  __int128 v657;
  id *v658;
  __int128 *v659;
  double v660;
  double v661;
  uint64_t v662;

  v662 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 32;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 32));
  v7 = *(void **)(*(_QWORD *)v1 + 8);
  if (v7 && objc_msgSend_completeness(v7, v2, v3, v4, v5, v6) >= 1)
  {
    v13 = a1;
    v14 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v14 + 16) == 4)
    {
LABEL_4:
      isValidForStrokes = objc_msgSend_isValidForStrokes_(*(void **)(v14 + 8), v8, *(_QWORD *)(v13 + 48), v10, v11, v12);
      goto LABEL_14;
    }
    v16 = (void *)MEMORY[0x1E0CB36F8];
    objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v8, v9, v10, v11, v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v630 = 0;
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v16, v18, (uint64_t)v17, 1, (uint64_t)&v630, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v630;
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v23 = *(void **)(v22 + 40);
    *(_QWORD *)(v22 + 40) = v20;

    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v26 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v32 = v25;
    if (!v24)
      goto LABEL_12;
    v33 = *(void **)(v24 + 8);
    if (!v33)
      goto LABEL_12;
    objc_msgSend_encodedStrokeProviderVersion(v33, v27, v28, v29, v30, v31);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToData = objc_msgSend_isEqualToData_(v34, v35, (uint64_t)v26, v36, v37, v38);

    if (!isEqualToData)
      goto LABEL_12;
    if (!objc_msgSend_count(v32, v40, v41, v42, v43, v44))
    {

LABEL_134:
      v13 = a1;
      v14 = *(_QWORD *)(a1 + 32);
      goto LABEL_4;
    }
    objc_msgSend_orderedStrokeIdentifiers(*(void **)(v24 + 8), v45, v46, v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_count(v50, v51, v52, v53, v54, v55);
    LODWORD(v56) = v56 == objc_msgSend_count(v32, v57, v58, v59, v60, v61);

    if ((_DWORD)v56)
    {
      objc_msgSend_array(v32, v62, v63, v64, v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_orderedStrokeIdentifiers(*(void **)(v24 + 8), v68, v69, v70, v71, v72);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToArray = objc_msgSend_isEqualToArray_(v73, v74, (uint64_t)v67, v75, v76, v77);

      if (isEqualToArray)
        goto LABEL_134;
    }
    else
    {
LABEL_12:

    }
  }
  isValidForStrokes = 0;
LABEL_14:
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v79 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    v85 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v80, v81, v82, v83, v84);
    objc_msgSend_orderedStrokes(*(void **)(a1 + 40), v86, v87, v88, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = objc_msgSend_count(v91, v92, v93, v94, v95, v96);
    v98 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v85;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v97;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v657) = isValidForStrokes;
    WORD2(v657) = 2048;
    *(_QWORD *)((char *)&v657 + 6) = v98;
    _os_log_impl(&dword_1BE607000, v79, OS_LOG_TYPE_DEFAULT, "Visible stroke count: %lu, Ordered stroke count: %lu lastRecognitionResultIsValid: %d, _lastRecognitionResult: %p", buf, 0x26u);

  }
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v99 = (id)qword_1EF568E28;
    v100 = os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT);
    if (isValidForStrokes)
      goto LABEL_20;
LABEL_136:
    if (v100)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v99, OS_LOG_TYPE_DEFAULT, "Last accurate results for tokenStrokeIdentifiersForContextStrokes don't match visible strokes", buf, 2u);
    }

    v215 = a1;
    goto LABEL_139;
  }
  v99 = (id)qword_1EF568E28;
  v100 = os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT);
  if (!isValidForStrokes)
    goto LABEL_136;
LABEL_20:
  if (v100)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v99, OS_LOG_TYPE_DEFAULT, "Using last accurate results for tokenStrokeIdentifiersForContextStrokes results", buf, 2u);
  }

  v106 = objc_msgSend_count(*(void **)(a1 + 48), v101, v102, v103, v104, v105);
  v107 = *(void ***)(a1 + 32);
  v624 = v107;
  if (v106)
  {
    v108 = *(_QWORD *)(a1 + 104);
    v620 = *(id *)(a1 + 48);
    if (!v107)
      goto LABEL_42;
    v113 = v107[1];
    if (!v113)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v114 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v114, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v114, OS_LOG_TYPE_FAULT, "A cached result must exist when calling _strokeIdentifiersFromCachedResultUsingContextStrokes:tokenizationLevel:", buf, 2u);
      }

      v113 = v107[1];
    }
    if ((objc_msgSend_isValidForStrokes_(v113, v109, (uint64_t)v620, v110, v111, v112) & 1) != 0)
    {
      switch(v108)
      {
        case 0:
          objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v115, (uint64_t)v620, v116, v117, v118);
          v625 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_43;
        case 1:
          v216 = v620;
          objc_msgSend_set(MEMORY[0x1E0C99E20], v217, v218, v219, v220, v221, v216);
          v625 = (void *)objc_claimAutoreleasedReturnValue();
          v222 = v216;
          objc_msgSend_set(MEMORY[0x1E0C99E20], v223, v224, v225, v226, v227);
          v626 = (void *)objc_claimAutoreleasedReturnValue();
          v654 = 0u;
          v655 = 0u;
          v652 = 0u;
          v653 = 0u;
          v228 = v222;
          v231 = objc_msgSend_countByEnumeratingWithState_objects_count_(v228, v229, (uint64_t)&v652, (uint64_t)buf, 16, v230);
          if (v231)
          {
            v232 = *(_QWORD *)v653;
            do
            {
              for (i = 0; i != v231; ++i)
              {
                if (*(_QWORD *)v653 != v232)
                  objc_enumerationMutation(v228);
                v234 = *(_QWORD *)(*((_QWORD *)&v652 + 1) + 8 * i);
                v235 = (void *)objc_opt_class();
                objc_msgSend_strokeGroupingResult(v107[1], v236, v237, v238, v239, v240);
                v241 = (void *)objc_claimAutoreleasedReturnValue();
                v247 = objc_msgSend_strokeGroupOrdering(v107, v242, v243, v244, v245, v246);
                objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v241, v248, v247, 0, v249, v250);
                v251 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v235, v252, v234, (uint64_t)v251, v253, v254);
                v255 = (void *)objc_claimAutoreleasedReturnValue();

                if (v255)
                  objc_msgSend_addObject_(v626, v256, (uint64_t)v255, v257, v258, v259);

                v107 = v624;
              }
              v231 = objc_msgSend_countByEnumeratingWithState_objects_count_(v228, v260, (uint64_t)&v652, (uint64_t)buf, 16, v261);
            }
            while (v231);
          }

          v646 = 0u;
          v647 = 0u;
          v648 = 0u;
          v649 = 0u;
          obj = v626;
          v269 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v262, (uint64_t)&v646, (uint64_t)buf, 16, v263);
          v270 = v624;
          if (!v269)
            goto LABEL_109;
          v614 = *(_QWORD *)v647;
          break;
        case 2:
          v628 = v620;
          objc_msgSend_set(MEMORY[0x1E0C99E20], v450, v451, v452, v453, v454);
          v625 = (void *)objc_claimAutoreleasedReturnValue();
          v654 = 0u;
          v655 = 0u;
          v652 = 0u;
          v653 = 0u;
          v455 = v628;
          v458 = objc_msgSend_countByEnumeratingWithState_objects_count_(v455, v456, (uint64_t)&v652, (uint64_t)buf, 16, v457);
          if (v458)
          {
            v459 = *(_QWORD *)v653;
            do
            {
              for (j = 0; j != v458; ++j)
              {
                if (*(_QWORD *)v653 != v459)
                  objc_enumerationMutation(v455);
                v461 = *(_QWORD *)(*((_QWORD *)&v652 + 1) + 8 * j);
                v462 = (void *)objc_opt_class();
                objc_msgSend_strokeGroupingResult(v107[1], v463, v464, v465, v466, v467);
                v468 = (void *)objc_claimAutoreleasedReturnValue();
                v474 = objc_msgSend_strokeGroupOrdering(v107, v469, v470, v471, v472, v473);
                objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v468, v475, v474, 0, v476, v477);
                v478 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v462, v479, v461, (uint64_t)v478, v480, v481);
                v482 = (void *)objc_claimAutoreleasedReturnValue();

                if (v482)
                {
                  objc_msgSend_strokeIdentifiers(v482, v483, v484, v485, v486, v487);
                  v488 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_allObjects(v488, v489, v490, v491, v492, v493);
                  v494 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_addObjectsFromArray_(v625, v495, (uint64_t)v494, v496, v497, v498);

                }
                v107 = v624;
              }
              v458 = objc_msgSend_countByEnumeratingWithState_objects_count_(v455, v499, (uint64_t)&v652, (uint64_t)buf, 16, v500);
            }
            while (v458);
          }

          goto LABEL_43;
        case 3:
          v619 = v620;
          v501 = (void *)objc_opt_class();
          objc_msgSend_strokeGroupingResult(v107[1], v502, v503, v504, v505, v506);
          v507 = (void *)objc_claimAutoreleasedReturnValue();
          v513 = objc_msgSend_strokeGroupOrdering(v107, v508, v509, v510, v511, v512);
          objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v507, v514, v513, 1, v515, v516);
          v517 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeGroupingResult(v624[1], v518, v519, v520, v521, v522);
          v523 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_textStrokeGroupClusters(v523, v524, v525, v526, v527, v528);
          v529 = (void *)objc_claimAutoreleasedReturnValue();
          v651[0] = 0;
          objc_msgSend_strokeIdentifiersInProximalGroupsForStrokeIdentifiers_sortedStrokeGroups_clusteredStrokeGroups_unusedStrokeIdentifiers_(v501, v530, (uint64_t)v619, (uint64_t)v517, (uint64_t)v529, (uint64_t)v651);
          v622 = (void *)objc_claimAutoreleasedReturnValue();
          v629 = v651[0];

          objc_msgSend_setWithSet_(MEMORY[0x1E0C99E20], v531, (uint64_t)v622, v532, v533, v534);
          v625 = (void *)objc_claimAutoreleasedReturnValue();
          v540 = v624;
          if (objc_msgSend_count(v629, v535, v536, v537, v538, v539))
          {
            v654 = 0u;
            v655 = 0u;
            v652 = 0u;
            v653 = 0u;
            v541 = v629;
            v544 = objc_msgSend_countByEnumeratingWithState_objects_count_(v541, v542, (uint64_t)&v652, (uint64_t)buf, 16, v543);
            if (v544)
            {
              v545 = *(_QWORD *)v653;
              do
              {
                for (k = 0; k != v544; ++k)
                {
                  if (*(_QWORD *)v653 != v545)
                    objc_enumerationMutation(v541);
                  v547 = *(_QWORD *)(*((_QWORD *)&v652 + 1) + 8 * k);
                  v548 = (void *)objc_opt_class();
                  objc_msgSend_strokeGroupingResult(v540[1], v549, v550, v551, v552, v553);
                  v554 = (void *)objc_claimAutoreleasedReturnValue();
                  v560 = objc_msgSend_strokeGroupOrdering(v540, v555, v556, v557, v558, v559);
                  objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v554, v561, v560, 0, v562, v563);
                  v564 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v548, v565, v547, (uint64_t)v564, v566, v567);
                  v568 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v568)
                  {
                    objc_msgSend_strokeIdentifiers(v568, v569, v570, v571, v572, v573);
                    v574 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_allObjects(v574, v575, v576, v577, v578, v579);
                    v580 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_addObjectsFromArray_(v625, v581, (uint64_t)v580, v582, v583, v584);

                  }
                  v540 = v624;
                }
                v544 = objc_msgSend_countByEnumeratingWithState_objects_count_(v541, v585, (uint64_t)&v652, (uint64_t)buf, 16, v586);
              }
              while (v544);
            }

          }
          goto LABEL_43;
        case 4:
          sub_1BE84B458(v107, v620);
          v625 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_43;
        default:
          goto LABEL_42;
      }
      do
      {
        v271 = 0;
        v612 = v269;
        do
        {
          if (*(_QWORD *)v647 != v614)
            objc_enumerationMutation(obj);
          v615 = v271;
          v272 = *(void **)(*((_QWORD *)&v646 + 1) + 8 * v271);
          v273 = v270[1];
          v274 = objc_msgSend_uniqueIdentifier(v272, v264, v265, v266, v267, v268);
          objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v273, v275, v274, v276, v277, v278);
          v627 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_locales(v270[1], v279, v280, v281, v282, v283);
          v284 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_localesSortedByCombinedLanguageFitness_(v627, v285, (uint64_t)v284, v286, v287, v288);
          v616 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_firstObject(v616, v289, v290, v291, v292, v293);
          v617 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_recognitionResultsByLocale(v627, v294, v295, v296, v297, v298);
          v299 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKey_(v299, v300, (uint64_t)v617, v301, v302, v303);
          v618 = (void *)objc_claimAutoreleasedReturnValue();

          if (v618)
          {
            for (m = 0; ; ++m)
            {
              v310 = v618;
              if (m >= objc_msgSend_tokenColumnCount(v618, v304, v305, v306, v307, v308))
                break;
              objc_msgSend_tokenRowsAtColumnIndex_(v618, v311, m, v312, v313, v314);
              v621 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_transcriptionPaths(v618, v315, v316, v317, v318, v319);
              v320 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_firstObject(v320, v321, v322, v323, v324, v325);
              v326 = (void *)objc_claimAutoreleasedReturnValue();
              v331 = objc_msgSend_indexAtPosition_(v326, v327, m, v328, v329, v330);

              objc_msgSend_objectAtIndexedSubscript_(v621, v332, v331, v333, v334, v335);
              v336 = (void *)objc_claimAutoreleasedReturnValue();
              v644 = 0u;
              v645 = 0u;
              v642 = 0u;
              v643 = 0u;
              v337 = v336;
              v345 = objc_msgSend_countByEnumeratingWithState_objects_count_(v337, v338, (uint64_t)&v642, (uint64_t)&v652, 16, v339);
              if (v345)
              {
                v346 = *(_QWORD *)v643;
                do
                {
                  for (n = 0; n != v345; ++n)
                  {
                    if (*(_QWORD *)v643 != v346)
                      objc_enumerationMutation(v337);
                    v348 = *(void **)(*((_QWORD *)&v642 + 1) + 8 * n);
                    objc_msgSend_inputStrokeIdentifiers(v627, v340, v341, v342, v343, v344);
                    v349 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_strokeIndexes(v348, v350, v351, v352, v353, v354);
                    v355 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_objectsAtIndexes_(v349, v356, (uint64_t)v355, v357, v358, v359);
                    v360 = (void *)objc_claimAutoreleasedReturnValue();

                    v640 = 0u;
                    v641 = 0u;
                    v638 = 0u;
                    v639 = 0u;
                    v361 = v360;
                    v368 = objc_msgSend_countByEnumeratingWithState_objects_count_(v361, v362, (uint64_t)&v638, (uint64_t)v651, 16, v363);
                    if (v368)
                    {
                      v369 = *(_QWORD *)v639;
                      while (2)
                      {
                        for (ii = 0; ii != v368; ++ii)
                        {
                          if (*(_QWORD *)v639 != v369)
                            objc_enumerationMutation(v361);
                          if (objc_msgSend_containsObject_(v228, v364, *(_QWORD *)(*((_QWORD *)&v638 + 1) + 8 * ii), v365, v366, v367))
                          {
                            objc_msgSend_addObjectsFromArray_(v625, v364, (uint64_t)v361, v365, v366, v367);
                            goto LABEL_82;
                          }
                        }
                        v368 = objc_msgSend_countByEnumeratingWithState_objects_count_(v361, v364, (uint64_t)&v638, (uint64_t)v651, 16, v367);
                        if (v368)
                          continue;
                        break;
                      }
                    }
LABEL_82:

                  }
                  v345 = objc_msgSend_countByEnumeratingWithState_objects_count_(v337, v340, (uint64_t)&v642, (uint64_t)&v652, 16, v344);
                }
                while (v345);
              }

            }
          }
          else
          {
            v371 = (void *)objc_opt_class();
            v377 = objc_msgSend_classification(v272, v372, v373, v374, v375, v376);
            if (objc_msgSend_isStrokeClassificationTextOrMath_(v371, v378, v377, v379, v380, v381))
            {
              v387 = (void *)MEMORY[0x1E0C99DE8];
              objc_msgSend_inputStrokeIdentifiers(v627, v382, v383, v384, v385, v386);
              v388 = (void *)objc_claimAutoreleasedReturnValue();
              v394 = objc_msgSend_count(v388, v389, v390, v391, v392, v393);
              objc_msgSend_arrayWithCapacity_(v387, v395, v394, v396, v397, v398);
              v399 = (void *)objc_claimAutoreleasedReturnValue();

              v636 = 0u;
              v637 = 0u;
              v634 = 0u;
              v635 = 0u;
              objc_msgSend_inputStrokeIdentifiers(v627, v400, v401, v402, v403, v404);
              v405 = (void *)objc_claimAutoreleasedReturnValue();
              v408 = v624;
              v413 = objc_msgSend_countByEnumeratingWithState_objects_count_(v405, v406, (uint64_t)&v634, (uint64_t)v650, 16, v407);
              if (v413)
              {
                v414 = *(_QWORD *)v635;
                do
                {
                  for (jj = 0; jj != v413; ++jj)
                  {
                    if (*(_QWORD *)v635 != v414)
                      objc_enumerationMutation(v405);
                    objc_msgSend_strokeIdentifierFromData_(v408[3], v409, *(_QWORD *)(*((_QWORD *)&v634 + 1) + 8 * jj), v410, v411, v412);
                    v416 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_strokeForIdentifier_(v408[3], v417, (uint64_t)v416, v418, v419, v420);
                    v425 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v425)
                      objc_msgSend_addObject_(v399, v421, (uint64_t)v425, v422, v423, v424);

                    v408 = v624;
                  }
                  v413 = objc_msgSend_countByEnumeratingWithState_objects_count_(v405, v409, (uint64_t)&v634, (uint64_t)v650, 16, v412);
                }
                while (v413);
              }

              v426 = [CHFastStrokeGroupingStrategy alloc];
              v429 = (void *)objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v426, v427, (uint64_t)v624[3], 0, 0, v428);
              v433 = v429;
              if (v429)
              {
                objc_msgSend_clustersForStrokes_shouldMakeSingleCluster_anchorPoints_(v429, v430, (uint64_t)v399, 1, 1, v432);
              }
              else
              {
                __p = 0;
                v632 = 0;
                v633 = 0;
              }
              objc_msgSend_fastGroupingResultWithFastGroupingClusters_clusteredStrokes_(v433, v430, (uint64_t)&__p, (uint64_t)v399, v431, v432);
              v443 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_groupingResultForContextStrokes_clusteredStrokes_fastGroupingResult_point_tokenizationLevel_(v433, v444, (uint64_t)v228, (uint64_t)v399, (uint64_t)v443, 1, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
              v445 = objc_claimAutoreleasedReturnValue();

              v446 = __p;
              if (__p)
              {
                v447 = __p;
                if (v632 != __p)
                {
                  v448 = (uint64_t)v632 - 32;
                  do
                  {
                    v449 = (void *)(v448 - 40);
                    sub_1BE62033C(v448, *(_QWORD **)(v448 + 8));
                    sub_1BE67AC7C(v448 - 40, *(_QWORD **)(v448 - 32));
                    v448 -= 72;
                  }
                  while (v449 != v446);
                  v447 = __p;
                }
                v632 = v446;
                operator delete(v447);
              }
              v625 = (void *)v445;
            }
            else
            {
              objc_msgSend_strokeIdentifiers(v272, v382, v383, v384, v385, v386);
              v399 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_allObjects(v399, v434, v435, v436, v437, v438);
              v433 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObjectsFromArray_(v625, v439, (uint64_t)v433, v440, v441, v442);
            }

            v310 = 0;
          }

          v271 = v615 + 1;
          v270 = v624;
        }
        while (v615 + 1 != v612);
        v269 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v264, (uint64_t)&v646, (uint64_t)buf, 16, v268);
      }
      while (v269);
LABEL_109:

    }
    else
    {
LABEL_42:
      v625 = 0;
    }
LABEL_43:

    v145 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v146 = *(void **)(v145 + 40);
    *(_QWORD *)(v145 + 40) = v625;
  }
  else
  {
    if (v107)
    {
      v120 = *(double *)(a1 + 112);
      v119 = *(double *)(a1 + 120);
      v121 = *(_QWORD *)(a1 + 104);
      if (!v107[1])
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v122 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v122, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v122, OS_LOG_TYPE_FAULT, "A cached result must exist when calling _strokeIdentifiersFromCachedResultUsingPoint:tokenizationLevel:textOnly:", buf, 2u);
        }

      }
      switch(v121)
      {
        case 1:
          *(_QWORD *)&v652 = 0;
          *((_QWORD *)&v652 + 1) = &v652;
          *(_QWORD *)&v653 = 0x3032000000;
          *((_QWORD *)&v653 + 1) = sub_1BE83F220;
          *(_QWORD *)&v654 = sub_1BE83F230;
          *((_QWORD *)&v654 + 1) = 0;
          v651[0] = 0;
          v651[1] = v651;
          v651[2] = (id)0x2020000000;
          v651[3] = (id)0x7FEFFFFFFFFFFFFFLL;
          v123 = v107;
          v124 = (void *)objc_opt_class();
          objc_msgSend_strokeGroupingResult(v123[1], v125, v126, v127, v128, v129);
          v130 = (void *)objc_claimAutoreleasedReturnValue();
          v136 = objc_msgSend_strokeGroupOrdering(v123, v131, v132, v133, v134, v135);
          objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v130, v137, v136, 0, v138, v139);
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_1BE84BFF4;
          *(_QWORD *)&v657 = &unk_1E77F60E8;
          v660 = v120;
          v661 = v119;
          *((_QWORD *)&v657 + 1) = v624;
          v658 = v651;
          v659 = &v652;
          objc_msgSend_strokeGroupsContainingPoint_strokeGroups_groupProcessingBlock_(v124, v141, (uint64_t)v140, (uint64_t)buf, v142, v143, v120, v119);

          v144 = *(id *)(*((_QWORD *)&v652 + 1) + 40);
          _Block_object_dispose(v651, 8);
          _Block_object_dispose(&v652, 8);

          break;
        case 2:
          sub_1BE84BD4C(v107, v120, v119);
          v190 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifiers(v190, v191, v192, v193, v194, v195);
          v144 = (id)objc_claimAutoreleasedReturnValue();

          break;
        case 3:
          sub_1BE84BD4C(v107, v120, v119);
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifiers(v147, v148, v149, v150, v151, v152);
          v153 = (void *)objc_claimAutoreleasedReturnValue();

          v154 = (void *)objc_opt_class();
          objc_msgSend_allObjects(v153, v155, v156, v157, v158, v159);
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeGroupingResult(v624[1], v161, v162, v163, v164, v165);
          v166 = (void *)objc_claimAutoreleasedReturnValue();
          v172 = objc_msgSend_strokeGroupOrdering(v624, v167, v168, v169, v170, v171);
          objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v166, v173, v172, 0, v174, v175);
          v176 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeGroupingResult(v624[1], v177, v178, v179, v180, v181);
          v182 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_textStrokeGroupClusters(v182, v183, v184, v185, v186, v187);
          v188 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifiersInProximalGroupsForStrokeIdentifiers_sortedStrokeGroups_clusteredStrokeGroups_unusedStrokeIdentifiers_(v154, v189, (uint64_t)v160, (uint64_t)v176, (uint64_t)v188, 0);
          v144 = (id)objc_claimAutoreleasedReturnValue();

          break;
        case 4:
          sub_1BE84BD4C(v107, v120, v119);
          v196 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifiers(v196, v197, v198, v199, v200, v201);
          v202 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_allObjects(v202, v203, v204, v205, v206, v207);
          v208 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1BE84B458(v624, v208);
          v144 = (id)objc_claimAutoreleasedReturnValue();

          break;
        default:
          goto LABEL_44;
      }
    }
    else
    {
LABEL_44:
      v144 = 0;
    }
    v209 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v146 = *(void **)(v209 + 40);
    *(_QWORD *)(v209 + 40) = v144;
  }

  v215 = a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
LABEL_139:
  if ((objc_msgSend_shouldForceFastGrouping(*(void **)(v215 + 32), v210, v211, v212, v213, v214) & 1) != 0
    || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    v592 = *(_QWORD *)(a1 + 32);
    if (v592
      && (objc_msgSend_strokeGroupingResult(*(void **)(v592 + 72), v587, v588, v589, v590, v591),
          v593 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v593,
          (isKindOfClass & 1) != 0))
    {
      objc_msgSend_strokeGroupingResult(*(void **)(v592 + 72), v595, v596, v597, v598, v599);
      v600 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v600 = 0;
    }
    v601 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v602 = *(void **)(v601 + 40);
    *(_QWORD *)(v601 + 40) = v600;

    v608 = *(_QWORD *)(a1 + 32);
    if (v608)
    {
      objc_msgSend_clutterFilter(*(void **)(v608 + 80), v603, v604, v605, v606, v607);
      v609 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v609 = 0;
    }
    v610 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v611 = *(void **)(v610 + 40);
    *(_QWORD *)(v610 + 40) = v609;

  }
}

void sub_1BE848040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1BE848500(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id *v4;
  id v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  v3 = v1;
  if (v2)
  {
    v5 = *(id *)(v2 + 72);
    v4 = (id *)(v2 + 72);
    if (v5 != v3)
    {
      v6 = v3;
      objc_storeStrong(v4, v1);
      v3 = v6;
    }
  }

}

void sub_1BE84861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE848648(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int shouldRunRecognitionLocallyWithEnvironment;
  uint64_t v26;
  int isKindOfClass;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t RecognizerForLocale_sessionMode_remote_priority;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[26];
  v3 = v2;
  objc_msgSend_localeIdentifier(*(void **)(a1 + 40), v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v10, (uint64_t)v9, v11, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), v18, v19, v20);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(*(_QWORD *)(v26 + 8) + 40))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v26 = *(_QWORD *)(a1 + 48);
    if (((shouldRunRecognitionLocallyWithEnvironment ^ isKindOfClass) & 1) == 0)
    {
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(void **)(v28 + 40);
      *(_QWORD *)(v28 + 40) = 0;

      v26 = *(_QWORD *)(a1 + 48);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v26 + 8) + 40)
    && objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1 + 32) + 200), v21, *(_QWORD *)(a1 + 40), v22, v23, v24))
  {
    v30 = (void *)objc_opt_class();
    v31 = *(_QWORD *)(a1 + 40);
    v37 = objc_msgSend_mode(*(void **)(a1 + 32), v32, v33, v34, v35, v36);
    v43 = objc_msgSend_priority(*(void **)(a1 + 32), v38, v39, v40, v41, v42);
    RecognizerForLocale_sessionMode_remote_priority = objc_msgSend_createRecognizerForLocale_sessionMode_remote_priority_(v30, v44, v31, v37, shouldRunRecognitionLocallyWithEnvironment ^ 1u, v43);
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v47 = *(void **)(v46 + 40);
    *(_QWORD *)(v46 + 40) = RecognizerForLocale_sessionMode_remote_priority;

    if (objc_msgSend_autoCapitalizationMode(*(void **)(a1 + 32), v48, v49, v50, v51, v52) != 1)
    {
      v58 = objc_msgSend_autoCapitalizationMode(*(void **)(a1 + 32), v53, v54, v55, v56, v57);
      objc_msgSend_setAutoCapitalizationMode_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v59, v58, v60, v61, v62);
    }
    if (objc_msgSend_autoCorrectionMode(*(void **)(a1 + 32), v53, v54, v55, v56, v57))
    {
      v68 = objc_msgSend_autoCorrectionMode(*(void **)(a1 + 32), v63, v64, v65, v66, v67);
      objc_msgSend_setAutoCorrectionMode_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v69, v68, v70, v71, v72);
    }
    v73 = objc_msgSend_baseWritingDirection(*(void **)(a1 + 32), v63, v64, v65, v66, v67);
    objc_msgSend_setBaseWritingDirection_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v74, v73, v75, v76, v77);
    if ((shouldRunRecognitionLocallyWithEnvironment & 1) == 0)
    {
      v78 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      objc_msgSend_setShouldUseTextReplacements_(v78, v79, 0, v80, v81, v82);
      v83 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v84 = *(void **)(v83 + 40);
      *(_QWORD *)(v83 + 40) = v78;

    }
    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v85)
    {
      v86 = *(_QWORD **)(a1 + 32);
      if (v86)
        v86 = (_QWORD *)v86[26];
      v87 = v86;
      objc_msgSend_localeIdentifier(*(void **)(a1 + 40), v88, v89, v90, v91, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v87, v94, v85, (uint64_t)v93, v95, v96);

    }
  }
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    if ((objc_msgSend_q_needsForegroundRecognition(*(void **)(a1 + 32), v98, v99, v100, v101, v102) & 1) != 0)
      v108 = 1;
    else
      v108 = objc_msgSend_priority(*(void **)(a1 + 32), v103, v104, v105, v106, v107);
    return objc_msgSend_setPriority_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v103, v108, v105, v106, v107);
  }
  return result;
}

void sub_1BE8488F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE848900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE848914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE848924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE848938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE848A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BE848AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE848AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE848AD4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int shouldRunRecognitionLocallyWithEnvironment;
  uint64_t v21;
  void *v22;
  int isRemoteRecognition;
  uint64_t v24;
  void *v25;
  CHTextCorrectionRecognizer *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[28];
  v3 = v2;
  objc_msgSend_objectForKeyedSubscript_(v3, v4, *(_QWORD *)(a1 + 40), v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v11, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), v12, v13, v14);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(void **)(*(_QWORD *)(v21 + 8) + 40);
  if (v22)
  {
    isRemoteRecognition = objc_msgSend_isRemoteRecognition(v22, v15, v16, v17, v18, v19);
    v21 = *(_QWORD *)(a1 + 56);
    if (shouldRunRecognitionLocallyWithEnvironment == isRemoteRecognition)
    {
      v24 = *(_QWORD *)(v21 + 8);
      v25 = *(void **)(v24 + 40);
      *(_QWORD *)(v24 + 40) = 0;

      v21 = *(_QWORD *)(a1 + 56);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v21 + 8) + 40))
  {
    v26 = [CHTextCorrectionRecognizer alloc];
    v27 = *(_QWORD *)(a1 + 48);
    v33 = objc_msgSend_priority(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
    v36 = objc_msgSend_initWithLocales_remoteRecognition_priority_(v26, v34, v27, shouldRunRecognitionLocallyWithEnvironment ^ 1u, v33, v35);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v38 = *(void **)(v37 + 40);
    *(_QWORD *)(v37 + 40) = v36;

    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (v42)
    {
      v43 = *(_QWORD *)(a1 + 32);
      if (v43)
        v44 = *(void **)(v43 + 224);
      else
        v44 = 0;
      objc_msgSend_setObject_forKeyedSubscript_(v44, v39, v42, *(_QWORD *)(a1 + 40), v40, v41);
    }
  }
}

void sub_1BE848C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE848CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE848CF4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int shouldRunRecognitionLocallyWithEnvironment;
  uint64_t v9;
  int isKindOfClass;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t MathRecognizerRunningRemote_priority;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t result;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 232);
  else
    v3 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3);
  shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), v5, v6, v7);
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v9 = *(_QWORD *)(a1 + 40);
    if (((shouldRunRecognitionLocallyWithEnvironment ^ isKindOfClass) & 1) == 0)
    {
      v11 = *(_QWORD *)(v9 + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = 0;

      v9 = *(_QWORD *)(a1 + 40);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40))
  {
    v13 = (void *)objc_opt_class();
    v19 = objc_msgSend_priority(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
    MathRecognizerRunningRemote_priority = objc_msgSend_createMathRecognizerRunningRemote_priority_(v13, v20, shouldRunRecognitionLocallyWithEnvironment ^ 1u, v19, v21, v22);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = MathRecognizerRunningRemote_priority;

    v26 = *(_QWORD *)(a1 + 32);
    if (v26)
      objc_storeStrong((id *)(v26 + 232), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    if ((objc_msgSend_q_needsForegroundRecognition(*(void **)(a1 + 32), v28, v29, v30, v31, v32) & 1) != 0)
      v38 = 1;
    else
      v38 = objc_msgSend_priority(*(void **)(a1 + 32), v33, v34, v35, v36, v37);
    return objc_msgSend_setPriority_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v33, v38, v35, v36, v37);
  }
  return result;
}

void sub_1BE848FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE84940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE849544(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8496AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE8496E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE849700(uint64_t a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CHTokenizedStrokeResult *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t v46[16];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v51 = 0;
  sub_1BE845E20(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 88), v2, &v51, *(void **)(a1 + 56), *(double *)(a1 + 72), *(double *)(a1 + 80));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v3;
  if (v3)
  {
    v10 = (void *)MEMORY[0x1E0C99E20];
    v11 = objc_msgSend_count(v3, v4, v5, v6, v7, v8);
    objc_msgSend_setWithCapacity_(v10, v12, v11, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v17 = v9;
    v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v47, (uint64_t)v52, 16, v19);
    if (v24)
    {
      v25 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v48 != v25)
            objc_enumerationMutation(v17);
          objc_msgSend_strokeIdentifierFromData_(v2, v20, *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i), v21, v22, v23);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v16, v28, (uint64_t)v27, v29, v30, v31);

        }
        v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v47, (uint64_t)v52, 16, v23);
      }
      while (v24);
    }

    v32 = [CHTokenizedStrokeResult alloc];
    v36 = (void *)objc_msgSend_initWithStrokeIdentifiers_resultLevel_(v32, v33, (uint64_t)v16, v51, v34, v35);
    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v37, 1, v38, v39, v40);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v41 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1BE607000, v41, OS_LOG_TYPE_FAULT, "foundStrokeIdentifiers is nil", v46, 2u);
    }

    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v42, 1, v43, v44, v45);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_1BE84994C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE849BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE849C08(uint64_t a1)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  CHTextTransformationManager *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  CHTransformationParameters *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  NSObject *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  double v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t j;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL4 v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  double v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  NSObject *v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  BOOL v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  NSObject *v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BOOL4 v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  double v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  const char *v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  void *v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  NSObject *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  const char *v302;
  uint64_t v303;
  id v304;
  void *v305;
  id v306;
  void *v307;
  id v308;
  id v309;
  void *v310;
  uint64_t v311;
  id obj;
  uint64_t v313;
  uint64_t v314;
  uint64_t k;
  void *v316;
  void *v317;
  id v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  id v331;
  id v332;
  uint64_t v333;
  uint8_t buf[4];
  uint64_t v335;
  __int16 v336;
  uint64_t v337;
  __int16 v338;
  uint64_t v339;
  _BYTE v340[128];
  _BYTE v341[128];
  _BYTE v342[128];
  uint64_t v343;
  CGPoint v344;
  CGRect v345;
  CGRect v346;
  CGRect v347;
  CGRect v348;
  CGRect v349;
  CGRect v350;
  CGRect v351;
  CGRect v352;
  CGRect v353;
  CGRect v354;

  v343 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v333 = 0;
  v309 = v2;
  sub_1BE845E20(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 4, v2, &v333, *(void **)(a1 + 56), *(double *)(a1 + 72), *(double *)(a1 + 80));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v311 = a1;
  if (objc_msgSend_count(v3, v4, v5, v6, v7, v8))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v317 = v3;
    objc_msgSend_allObjects(v3, v9, v10, v11, v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v331 = 0;
    v332 = 0;
    sub_1BE84AA04(v14, v15, 2, 1, 1, &v332, &v331, *(void **)(a1 + 56));
    v307 = (void *)objc_claimAutoreleasedReturnValue();
    v306 = v332;
    v308 = v331;

    objc_msgSend_array(MEMORY[0x1E0C99DE8], v16, v17, v18, v19, v20);
    v316 = (void *)objc_claimAutoreleasedReturnValue();
    v329 = 0u;
    v330 = 0u;
    v327 = 0u;
    v328 = 0u;
    objc_msgSend_nontextCandidates(v308, v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v327, (uint64_t)v342, 16, v28);
    if (v34)
    {
      v35 = *(_QWORD *)v328;
      do
      {
        for (i = 0; i != v34; ++i)
        {
          if (*(_QWORD *)v328 != v35)
            objc_enumerationMutation(v26);
          v37 = *(void **)(*((_QWORD *)&v327 + 1) + 8 * i);
          v38 = objc_msgSend_effectiveClassification(v37, v29, v30, v31, v32, v33);
          objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v39, v38, v40, v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = objc_msgSend_containsObject_(&unk_1E7827FC8, v44, (uint64_t)v43, v45, v46, v47);

          if (v48)
          {
            v49 = (void *)MEMORY[0x1E0C99E60];
            objc_msgSend_supportingStrokeIdentifiers(v37, v29, v30, v31, v32, v33);
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setWithArray_(v49, v51, (uint64_t)v50, v52, v53, v54);
            v55 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend_intersectsSet_(v55, v56, (uint64_t)v317, v57, v58, v59))
              objc_msgSend_addObject_(v316, v60, (uint64_t)v37, v61, v62, v63);

          }
        }
        v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v327, (uint64_t)v342, 16, v33);
      }
      while (v34);
    }

    if (!v307)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v64 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v64, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
      }

    }
    v65 = [CHTextTransformationManager alloc];
    objc_msgSend_allObjects(v317, v66, v67, v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = objc_alloc_init(CHTransformationParameters);
    objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v73, (uint64_t)&unk_1E7827FE0, v74, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    v305 = (void *)objc_msgSend_initWithContextStrokes_relatedNonTextStrokes_parameters_contextResults_strokeGroupingResult_strokeClassificationResult_strokeProvider_excludedStrokeTypes_(v65, v78, (uint64_t)v71, (uint64_t)v316, (uint64_t)v72, (uint64_t)v307, v306, v308, v309, v77);

    objc_msgSend_reflowableTextLinesWithProgress_mergeUnacceptableLines_shouldCancel_(v305, v79, *(_QWORD *)(v311 + 48), 1, *(_QWORD *)(v311 + 56), v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v82 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_localizedDescription(*(void **)(v311 + 48), v83, v84, v85, v86, v87);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v335 = (uint64_t)v88;
      _os_log_impl(&dword_1BE607000, v82, OS_LOG_TYPE_DEFAULT, "CHReflowQuery query progress: %@", buf, 0xCu);

    }
    objc_msgSend_lineWrapper(*(void **)(v311 + 32), v89, v90, v91, v92, v93);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_reflowableLines_withLineWrapper_(CHReflowableTextLine, v95, (uint64_t)v81, (uint64_t)v94, v96, v97);
    v310 = (void *)objc_claimAutoreleasedReturnValue();

    v103 = v311;
    if (*(double *)(v311 + 72) == *MEMORY[0x1E0C9D538]
      && *(double *)(v311 + 80) == *(double *)(MEMORY[0x1E0C9D538] + 8)
      || !objc_msgSend_count(v310, v98, v99, v100, v101, v102))
    {
      v304 = 0;
      goto LABEL_73;
    }
    v104 = *(_QWORD *)(v311 + 32);
    v105 = *(double *)(v311 + 72);
    v106 = *(double *)(v311 + 80);
    v318 = v310;
    if (!v104)
      goto LABEL_57;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v116 = 1.79769313e308;
LABEL_28:
    if (v112 < objc_msgSend_count(v318, v107, v108, v109, v110, v111))
    {
      objc_msgSend_objectAtIndexedSubscript_(v318, v117, v112, v119, v120, v121);
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_tokens(v122, v123, v124, v125, v126, v127);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      for (j = 0; ; ++j)
      {
        if (j >= objc_msgSend_count(v133, v128, v129, v130, v131, v132))
        {

          ++v112;
          goto LABEL_28;
        }
        objc_msgSend_objectAtIndexedSubscript_(v133, v135, j, v136, v137, v138);
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_bounds(v139, v140, v141, v142, v143, v144);
        v344.x = v105;
        v344.y = v106;
        v145 = CGRectContainsPoint(v345, v344);
        v151 = v145;
        if (v145 || (v113 & 1) == 0)
          break;
LABEL_48:

      }
      if (v145)
      {
        objc_msgSend_bounds(v139, v146, v147, v148, v149, v150);
        v152 = vabdd_f64(CGRectGetMidY(v346), v106);
        if ((v113 & 1) == 0)
        {
          v113 = 1;
          v116 = v152;
LABEL_47:
          v114 = j;
          v115 = v112;
          goto LABEL_48;
        }
LABEL_45:
        if (v152 >= v116)
          goto LABEL_48;
        v116 = v152;
        v113 = v151;
        goto LABEL_47;
      }
      objc_msgSend_bounds(v139, v146, v147, v148, v149, v150);
      if (v106 >= CGRectGetMinY(v347))
      {
        objc_msgSend_bounds(v139, v153, v154, v155, v156, v157);
        v152 = 0.0;
        if (v106 <= CGRectGetMaxY(v349))
          goto LABEL_40;
        objc_msgSend_bounds(v139, v158, v159, v160, v161, v162);
        v163 = v106 - CGRectGetMaxY(v350);
      }
      else
      {
        objc_msgSend_bounds(v139, v153, v154, v155, v156, v157);
        v163 = CGRectGetMinY(v348) - v106;
      }
      v152 = v163 + 0.0;
LABEL_40:
      objc_msgSend_bounds(v139, v158, v159, v160, v161, v162);
      if (v105 >= CGRectGetMinX(v351))
      {
        objc_msgSend_bounds(v139, v164, v165, v166, v167, v168);
        if (v105 <= CGRectGetMaxX(v353))
          goto LABEL_45;
        objc_msgSend_bounds(v139, v170, v171, v172, v173, v174);
        v169 = v105 - CGRectGetMaxX(v354);
      }
      else
      {
        objc_msgSend_bounds(v139, v164, v165, v166, v167, v168);
        v169 = CGRectGetMinX(v352) - v105;
      }
      v152 = v152 + v169;
      goto LABEL_45;
    }
    if (v116 == 1.79769313e308)
    {
LABEL_57:
      v304 = 0;
LABEL_72:

      v103 = v311;
LABEL_73:
      objc_msgSend_setCompletedUnitCount_(*(void **)(v103 + 48), v98, 100, v100, v101, v102);
      if (objc_msgSend_count(v310, v244, v245, v246, v247, v248)
        && ((*(uint64_t (**)(void))(*(_QWORD *)(v103 + 56) + 16))() & 1) == 0)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v249 = (id)qword_1EF568E28;
        if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
        {
          v255 = objc_msgSend_count(v310, v250, v251, v252, v253, v254);
          *(_DWORD *)buf = 134217984;
          v335 = v255;
          _os_log_impl(&dword_1BE607000, v249, OS_LOG_TYPE_DEFAULT, "reflowable text lines returned for query with %ld lines", buf, 0xCu);
        }

        v325 = 0u;
        v326 = 0u;
        v323 = 0u;
        v324 = 0u;
        obj = v310;
        v314 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v256, (uint64_t)&v323, (uint64_t)v341, 16, v257);
        if (v314)
        {
          v313 = *(_QWORD *)v324;
          do
          {
            for (k = 0; k != v314; ++k)
            {
              if (*(_QWORD *)v324 != v313)
                objc_enumerationMutation(obj);
              v263 = *(void **)(*((_QWORD *)&v323 + 1) + 8 * k);
              v319 = 0u;
              v320 = 0u;
              v321 = 0u;
              v322 = 0u;
              objc_msgSend_tokens(v263, v258, v259, v260, v261, v262);
              v264 = (void *)objc_claimAutoreleasedReturnValue();
              v267 = objc_msgSend_countByEnumeratingWithState_objects_count_(v264, v265, (uint64_t)&v319, (uint64_t)v340, 16, v266);
              if (v267)
              {
                v268 = *(_QWORD *)v320;
                do
                {
                  v269 = 0;
                  do
                  {
                    if (*(_QWORD *)v320 != v268)
                      objc_enumerationMutation(v264);
                    v270 = *(void **)(*((_QWORD *)&v319 + 1) + 8 * v269);
                    if (qword_1EF568E88 != -1)
                      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                    v271 = (id)qword_1EF568E28;
                    if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
                    {
                      objc_msgSend_string(v270, v272, v273, v274, v275, v276);
                      v277 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_strokeIdentifiers(v270, v278, v279, v280, v281, v282);
                      v283 = (void *)objc_claimAutoreleasedReturnValue();
                      v289 = objc_msgSend_count(v283, v284, v285, v286, v287, v288);
                      objc_msgSend_nonTextStrokeIdentifiers(v270, v290, v291, v292, v293, v294);
                      v295 = (void *)objc_claimAutoreleasedReturnValue();
                      v301 = objc_msgSend_count(v295, v296, v297, v298, v299, v300);
                      *(_DWORD *)buf = 138740483;
                      v335 = (uint64_t)v277;
                      v336 = 2048;
                      v337 = v289;
                      v338 = 2048;
                      v339 = v301;
                      _os_log_impl(&dword_1BE607000, v271, OS_LOG_TYPE_DEBUG, "reflowable token result with string = %{sensitive}@, text-strokes: %ld, non-text-strokes: %ld ", buf, 0x20u);

                    }
                    ++v269;
                  }
                  while (v267 != v269);
                  v267 = objc_msgSend_countByEnumeratingWithState_objects_count_(v264, v302, (uint64_t)&v319, (uint64_t)v340, 16, v303);
                }
                while (v267);
              }

            }
            v314 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v258, (uint64_t)&v323, (uint64_t)v341, 16, v262);
          }
          while (v314);
        }

        v103 = v311;
      }
      (*(void (**)(void))(*(_QWORD *)(v103 + 64) + 16))();

      v177 = v317;
      goto LABEL_76;
    }
    if (v115 >= objc_msgSend_count(v318, v117, v118, v119, v120, v121)
      || (objc_msgSend_objectAtIndexedSubscript_(v318, v182, v115, v183, v184, v185),
          v186 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_tokens(v186, v187, v188, v189, v190, v191),
          v192 = (void *)objc_claimAutoreleasedReturnValue(),
          v198 = v114 < objc_msgSend_count(v192, v193, v194, v195, v196, v197),
          v192,
          v186,
          !v198))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v203 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v203, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v203, OS_LOG_TYPE_FAULT, "Index path for the nearest token should point to a valid token", buf, 2u);
      }

    }
    objc_msgSend_indexPathWithIndex_(MEMORY[0x1E0CB36B0], v199, v115, v200, v201, v202);
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v318, v205, v115, v206, v207, v208);
    v209 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_tokens(v209, v210, v211, v212, v213, v214);
    v215 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v215, v216, v114, v217, v218, v219);
    v220 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_objectAtIndexedSubscript_(v318, v221, v115, v222, v223, v224);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    v231 = objc_msgSend_writingDirection(v225, v226, v227, v228, v229, v230) == 2;

    if (v231)
    {
      objc_msgSend_bounds(v220, v232, v233, v234, v235, v236);
      if (v105 <= v241)
      {
        objc_msgSend_indexPathByAddingIndex_(v204, v237, v114 - 1, v238, v239, v240);
LABEL_71:
        v243 = (void *)objc_claimAutoreleasedReturnValue();

        v304 = v243;
        goto LABEL_72;
      }
    }
    else
    {
      objc_msgSend_bounds(v220, v232, v233, v234, v235, v236);
      if (v105 >= v242)
        ++v114;
    }
    objc_msgSend_indexPathByAddingIndex_(v204, v237, v114, v238, v239, v240);
    goto LABEL_71;
  }
  v175 = v3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v176 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v176, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v176, OS_LOG_TYPE_FAULT, "foundStrokeIdentifiers is nil", buf, 2u);
  }

  v177 = v175;
  objc_msgSend_setCompletedUnitCount_(*(void **)(v311 + 48), v178, 100, v179, v180, v181);
  (*(void (**)(void))(*(_QWORD *)(v311 + 64) + 16))();
LABEL_76:

}

void sub_1BE84A7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

id sub_1BE84AA04(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, _QWORD *a6, _QWORD *a7, void *a8)
{
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  NSObject *v28;
  double v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  id v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  double v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v93;
  void *v94;
  id v95;
  id v96;
  NSObject *v97;
  _BYTE buf[24];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v95 = a8;
  if (!a1)
    goto LABEL_34;
  if (*(_QWORD *)(a1 + 16) == 4)
  {
    v16 = v15;
    v93 = v95;
    v21 = *(void **)(a1 + 8);
    if (!v21)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v22 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_FAULT, "A cached result must exist when calling _contextualTextResultsFromCachedResultUsingContextStrokes:shouldCancel:", buf, 2u);
      }

      v21 = *(void **)(a1 + 8);
    }
    if ((objc_msgSend_isValidForStrokes_(v21, v17, (uint64_t)v16, v18, v19, v20, v93) & 1) != 0)
    {
      v26 = *(void **)(a1 + 8);
      *(_QWORD *)buf = 0;
      objc_msgSend_fullyCoveredStrokeGroupsForContextStrokes_partiallyCoveredStrokeGroups_(v26, v23, (uint64_t)v16, (uint64_t)buf, v24, v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = *(id *)buf;
      v29 = *MEMORY[0x1E0C9D820];
      v30 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend_drawingCanvasSize(*(void **)(a1 + 24), v31, v32, v33, v34, v35);
        v29 = v36;
        v30 = v37;
      }
      if (objc_msgSend_count(v28, v31, v32, v33, v34, v35) && a5)
      {
        sub_1BE84C794(a1, v16, a3);
        v38 = (id)objc_claimAutoreleasedReturnValue();
        v97 = v28;
        objc_msgSend_fullyCoveredStrokeGroupsForContextStrokes_partiallyCoveredStrokeGroups_(v38, v39, (uint64_t)v16, (uint64_t)&v97, v40, v41);
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = v97;

        v28 = v43;
        v27 = (void *)v42;
        objc_msgSend_contextualResultsWithFullyCoveredStrokeGroups_partiallyCoveredStrokeGroups_drawingCanvasSize_(v38, v44, v42, (uint64_t)v43, v45, v46, v29, v30);
      }
      else
      {
        v38 = *(id *)(a1 + 8);
        objc_msgSend_contextualResultsWithFullyCoveredStrokeGroups_partiallyCoveredStrokeGroups_drawingCanvasSize_(v38, v84, (uint64_t)v27, (uint64_t)v28, v85, v86, v29, v30);
      }
      v71 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v28 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v77 = objc_msgSend_count(v16, v72, v73, v74, v75, v76);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v77;
        _os_log_impl(&dword_1BE607000, v28, OS_LOG_TYPE_ERROR, "Unable to extract a contextualTextResult from cached result. The last recognition result is not valid for some of the %ld context strokes.", buf, 0xCu);
      }
      v71 = 0;
    }

    if (a6)
    {
      objc_msgSend_strokeGroupingResult(*(void **)(a1 + 8), v87, v88, v89, v90, v91);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a7)
    {
      objc_msgSend_strokeClassificationResult(*(void **)(a1 + 8), v87, v88, v89, v90, v91);
      *a7 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_41;
  }
  if (!a4)
  {
LABEL_34:
    v71 = 0;
    goto LABEL_41;
  }
  sub_1BE84C794(a1, v15, a3);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isValidForStrokes_(v47, v48, (uint64_t)v15, v49, v50, v51) & 1) == 0)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v78 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = objc_msgSend_count(v15, v79, v80, v81, v82, v83);
      _os_log_impl(&dword_1BE607000, v78, OS_LOG_TYPE_ERROR, "Unable to extract a contextualTextResult from cached result. The onDemand recognition result is not valid for some of the %ld context strokes.", buf, 0xCu);
    }

    goto LABEL_34;
  }
  v96 = 0;
  objc_msgSend_fullyCoveredStrokeGroupsForContextStrokes_partiallyCoveredStrokeGroups_(v47, v52, (uint64_t)v15, (uint64_t)&v96, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = v96;
  v57 = *MEMORY[0x1E0C9D820];
  v58 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend_drawingCanvasSize(*(void **)(a1 + 24), v59, v60, v61, v62, v63);
    v57 = v64;
    v58 = v65;
  }
  objc_msgSend_contextualResultsWithFullyCoveredStrokeGroups_partiallyCoveredStrokeGroups_drawingCanvasSize_(v47, v59, (uint64_t)v55, (uint64_t)v56, v62, v63, v57, v58);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  if (a6)
  {
    objc_msgSend_strokeGroupingResult(v47, v66, v67, v68, v69, v70);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (a7)
  {
    objc_msgSend_strokeClassificationResult(v47, v66, v67, v68, v69, v70);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_41:
  return v71;
}

void sub_1BE84AEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE84B360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

id sub_1BE84B458(void **a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  id v89;
  id v90;
  id v91;
  void *v92;
  void *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  id v98;
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v91 = a2;
  objc_msgSend_strokeGroupingResult(a1[1], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_strokeGroupOrdering(a1, v9, v10, v11, v12, v13);
  objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v8, v15, v14, 1, v16, v17);
  v92 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeGroupingResult(a1[1], v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textStrokeGroupClusters(v23, v24, v25, v26, v27, v28);
  v93 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = (void *)objc_opt_class();
  v98 = 0;
  objc_msgSend_strokeIdentifiersInFullContextForStrokeIdentifiers_sortedStrokeGroups_clusteredStrokeGroups_unusedStrokeIdentifiers_(v29, v30, (uint64_t)v91, (uint64_t)v92, (uint64_t)v93, (uint64_t)&v98);
  v89 = (id)objc_claimAutoreleasedReturnValue();
  v90 = v98;
  objc_msgSend_setWithSet_(MEMORY[0x1E0C99E20], v31, (uint64_t)v89, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v90, v36, v37, v38, v39, v40))
  {
    objc_msgSend_strokeGroupingResult(a1[1], v41, v42, v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend_strokeGroupOrdering(a1, v47, v48, v49, v50, v51);
    objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v46, v53, v52, 0, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();

    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v57 = v90;
    v60 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v58, (uint64_t)&v94, (uint64_t)v99, 16, v59);
    if (v60)
    {
      v61 = *(_QWORD *)v95;
      do
      {
        v62 = 0;
        do
        {
          if (*(_QWORD *)v95 != v61)
            objc_enumerationMutation(v57);
          v63 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * v62);
          v64 = (void *)objc_opt_class();
          objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v64, v65, v63, (uint64_t)v56, v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = v68;
          if (v68)
          {
            objc_msgSend_strokeIdentifiers(v68, v69, v70, v71, v72, v73);
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_allObjects(v75, v76, v77, v78, v79, v80);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObjectsFromArray_(v35, v82, (uint64_t)v81, v83, v84, v85);

          }
          ++v62;
        }
        while (v60 != v62);
        v60 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v86, (uint64_t)&v94, (uint64_t)v99, 16, v87);
      }
      while (v60);
    }

  }
  return v89;
}

void sub_1BE84B6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE84BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id sub_1BE84BD4C(void **a1, double a2, double a3)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD v28[9];
  _QWORD v29[4];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;

  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = sub_1BE83F220;
  v34 = sub_1BE83F230;
  v35 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  v29[3] = 0x7FEFFFFFFFFFFFFFLL;
  v6 = (void *)objc_opt_class();
  objc_msgSend_strokeGroupingResult(a1[1], v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_strokeGroupOrdering(a1, v13, v14, v15, v16, v17);
  objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v12, v19, v18, 0, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = sub_1BE84BEE8;
  v28[3] = &unk_1E77F60E8;
  *(double *)&v28[7] = a2;
  *(double *)&v28[8] = a3;
  v28[4] = a1;
  v28[5] = v29;
  v28[6] = &v30;
  objc_msgSend_strokeGroupsContainingPoint_strokeGroups_groupProcessingBlock_(v6, v23, (uint64_t)v22, (uint64_t)v28, v24, v25, a2, a3);

  v26 = (id)v31[5];
  _Block_object_dispose(v29, 8);
  _Block_object_dispose(&v30, 8);

  return v26;
}

void sub_1BE84BEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1BE84BEE8(double *a1, void *a2)
{
  id v4;
  double v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  id v25;

  v4 = a2;
  v5 = a1[7];
  v6 = a1[8];
  v25 = v4;
  objc_msgSend_strokeIdentifiers(v4, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allObjects(v12, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v19, (uint64_t)v18, *(_QWORD *)(*((_QWORD *)a1 + 4) + 24), v20, v21, v5, v6);
  v23 = v22;

  v24 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  if (v23 < *(double *)(v24 + 24))
  {
    *(double *)(v24 + 24) = v23;
    objc_storeStrong((id *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 8) + 40), a2);
  }

}

void sub_1BE84BFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE84BFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE84BFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE84BFF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t j;
  void *v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t k;
  void *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  CHFastStrokeGroupingStrategy *v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  double v171;
  double v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  double v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  const char *v194;
  void *v195;
  double v196;
  double v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  double v207;
  double v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  void *v220;
  void *v221;
  id v222;
  void *v223;
  void *v224;
  void *v225;
  uint64_t i;
  void *v227;
  void *__p;
  void *v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  _BYTE v239[128];
  _BYTE v240[128];
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v222 = v3;
  v10 = objc_msgSend_uniqueIdentifier(v3, v5, v6, v7, v8, v9);
  objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v4, v11, v10, v12, v13, v14);
  v227 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_locales(*(void **)(*(_QWORD *)(a1 + 32) + 8), v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_localesSortedByCombinedLanguageFitness_(v227, v21, (uint64_t)v20, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v221 = v25;
  objc_msgSend_firstObject(v25, v26, v27, v28, v29, v30);
  v223 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recognitionResultsByLocale(v227, v31, v32, v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v36, v37, (uint64_t)v223, v38, v39, v40);
  v41 = objc_claimAutoreleasedReturnValue();

  v224 = (void *)v41;
  if (v41)
  {
    for (i = 0; i < objc_msgSend_tokenColumnCount(v224, v42, v43, v44, v45, v46); ++i)
    {
      objc_msgSend_tokenRowsAtColumnIndex_(v224, v47, i, v48, v49, v50);
      v225 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_transcriptionPaths(v224, v51, v52, v53, v54, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_firstObject(v56, v57, v58, v59, v60, v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v67 = objc_msgSend_indexAtPosition_(v62, v63, i, v64, v65, v66);

      objc_msgSend_objectAtIndexedSubscript_(v225, v68, v67, v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v237 = 0u;
      v238 = 0u;
      v235 = 0u;
      v236 = 0u;
      v73 = v72;
      v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v74, (uint64_t)&v235, (uint64_t)v240, 16, v75);
      if (v81)
      {
        v82 = *(_QWORD *)v236;
        do
        {
          for (j = 0; j != v81; ++j)
          {
            if (*(_QWORD *)v236 != v82)
              objc_enumerationMutation(v73);
            v84 = *(void **)(*((_QWORD *)&v235 + 1) + 8 * j);
            objc_msgSend_inputStrokeIdentifiers(v227, v76, v77, v78, v79, v80);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeIndexes(v84, v86, v87, v88, v89, v90);
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectsAtIndexes_(v85, v92, (uint64_t)v91, v93, v94, v95);
            v96 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v97, (uint64_t)v96, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v98, v99, *(double *)(a1 + 56), *(double *)(a1 + 64));
            v105 = v104;
            if (v104 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
            {
              objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v100, (uint64_t)v96, v101, v102, v103);
              v106 = objc_claimAutoreleasedReturnValue();
              v107 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
              v108 = *(void **)(v107 + 40);
              *(_QWORD *)(v107 + 40) = v106;

              *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v105;
            }

          }
          v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v76, (uint64_t)&v235, (uint64_t)v240, 16, v80);
        }
        while (v81);
      }

    }
  }
  else
  {
    v109 = (void *)objc_opt_class();
    v115 = objc_msgSend_classification(v222, v110, v111, v112, v113, v114);
    if (objc_msgSend_isStrokeClassificationTextOrMath_(v109, v116, v115, v117, v118, v119))
    {
      v125 = (void *)MEMORY[0x1E0C99DE8];
      objc_msgSend_inputStrokeIdentifiers(v227, v120, v121, v122, v123, v124);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v132 = objc_msgSend_count(v126, v127, v128, v129, v130, v131);
      objc_msgSend_arrayWithCapacity_(v125, v133, v132, v134, v135, v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();

      v233 = 0u;
      v234 = 0u;
      v231 = 0u;
      v232 = 0u;
      objc_msgSend_inputStrokeIdentifiers(v227, v138, v139, v140, v141, v142);
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      v150 = objc_msgSend_countByEnumeratingWithState_objects_count_(v143, v144, (uint64_t)&v231, (uint64_t)v239, 16, v145);
      if (v150)
      {
        v151 = *(_QWORD *)v232;
        do
        {
          for (k = 0; k != v150; ++k)
          {
            if (*(_QWORD *)v232 != v151)
              objc_enumerationMutation(v143);
            objc_msgSend_strokeIdentifierFromData_(*(void **)(*(_QWORD *)(a1 + 32) + 24), v146, *(_QWORD *)(*((_QWORD *)&v231 + 1) + 8 * k), v147, v148, v149);
            v153 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeForIdentifier_(*(void **)(*(_QWORD *)(a1 + 32) + 24), v154, (uint64_t)v153, v155, v156, v157);
            v162 = (void *)objc_claimAutoreleasedReturnValue();
            if (v162)
              objc_msgSend_addObject_(v137, v158, (uint64_t)v162, v159, v160, v161);

          }
          v150 = objc_msgSend_countByEnumeratingWithState_objects_count_(v143, v146, (uint64_t)&v231, (uint64_t)v239, 16, v149);
        }
        while (v150);
      }

      v163 = [CHFastStrokeGroupingStrategy alloc];
      v166 = (void *)objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v163, v164, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0, 0, v165);
      v170 = v166;
      if (v166)
      {
        objc_msgSend_clustersForStrokes_shouldMakeSingleCluster_anchorPoints_(v166, v167, (uint64_t)v137, 1, 1, v169);
      }
      else
      {
        __p = 0;
        v229 = 0;
        v230 = 0;
      }
      objc_msgSend_fastGroupingResultWithFastGroupingClusters_clusteredStrokes_(v170, v167, (uint64_t)&__p, (uint64_t)v137, v168, v169);
      v193 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_groupingResultForContextStrokes_clusteredStrokes_fastGroupingResult_point_tokenizationLevel_(v170, v194, 0, (uint64_t)v137, (uint64_t)v193, 1, *(double *)(a1 + 56), *(double *)(a1 + 64));
      v195 = (void *)objc_claimAutoreleasedReturnValue();
      v196 = *(double *)(a1 + 56);
      v197 = *(double *)(a1 + 64);
      objc_msgSend_allObjects(v195, v198, v199, v200, v201, v202);
      v203 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v204, (uint64_t)v203, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v205, v206, v196, v197);
      v208 = v207;

      if (v208 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        objc_msgSend_strokeIdentifiers(v222, v209, v210, v211, v212, v213);
        v214 = objc_claimAutoreleasedReturnValue();
        v215 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v216 = *(void **)(v215 + 40);
        *(_QWORD *)(v215 + 40) = v214;

        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v208;
      }

      v217 = __p;
      if (__p)
      {
        v218 = __p;
        if (v229 != __p)
        {
          v219 = (uint64_t)v229 - 32;
          do
          {
            v220 = (void *)(v219 - 40);
            sub_1BE62033C(v219, *(_QWORD **)(v219 + 8));
            sub_1BE67AC7C(v219 - 40, *(_QWORD **)(v219 - 32));
            v219 -= 72;
          }
          while (v220 != v217);
          v218 = __p;
        }
        v229 = v217;
        operator delete(v218);
      }

    }
    else
    {
      v171 = *(double *)(a1 + 56);
      v172 = *(double *)(a1 + 64);
      objc_msgSend_strokeIdentifiers(v222, v120, v121, v122, v123, v124);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_allObjects(v173, v174, v175, v176, v177, v178);
      v179 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v180, (uint64_t)v179, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v181, v182, v171, v172);
      v184 = v183;

      if (v184 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        objc_msgSend_strokeIdentifiers(v222, v185, v186, v187, v188, v189);
        v190 = objc_claimAutoreleasedReturnValue();
        v191 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v192 = *(void **)(v191 + 40);
        *(_QWORD *)(v191 + 40) = v190;

        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v184;
      }
    }
  }

}

void sub_1BE84C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_1BE84C794(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_signpost_id_t v32;
  NSObject *v33;
  unint64_t v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  void *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v62 = a2;
  objc_msgSend_dataSource((void *)a1, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeProviderSnapshot(v10, v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_strokeGroupingOnly((void *)a1, v17, v18, v19, v20, v21);
  v23 = sub_1BE8419B0(a1, v16, a3, 1, v22, v62, 0, 0);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v24 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_strokeProviderVersion(v16, v25, v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    v64 = a1;
    v65 = 2112;
    v66 = v30;
    _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p starting high responsiveness task for version: %@.", buf, 0x16u);

  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v31 = (id)qword_1EF568E50;
  v32 = os_signpost_id_generate(v31);

  if (qword_1EF568E88 == -1)
  {
    v33 = (id)qword_1EF568E50;
    v34 = v32 - 1;
    if (v32 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v33 = (id)qword_1EF568E50;
    v34 = v32 - 1;
    if (v32 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_11;
  }
  if (os_signpost_enabled(v33))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v32, "CHRecognitionSessionOnDemandTask", "", buf, 2u);
  }
LABEL_11:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v35 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v35, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionOnDemandTask\"", buf, 2u);
  }

  objc_msgSend_main(v23, v36, v37, v38, v39, v40);
  if (qword_1EF568E88 == -1)
  {
    v41 = (id)qword_1EF568E50;
    if (v34 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_19;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v41 = (id)qword_1EF568E50;
    if (v34 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_19;
  }
  if (os_signpost_enabled(v41))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v41, OS_SIGNPOST_INTERVAL_END, v32, "CHRecognitionSessionOnDemandTask", "", buf, 2u);
  }
LABEL_19:

  if (qword_1EF568E88 == -1)
  {
    v42 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    goto LABEL_21;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v42 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
LABEL_21:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v42, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionOnDemandTask\"", buf, 2u);
  }
LABEL_22:

  objc_msgSend_outputResult(v23, v43, v44, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDelegate_(v23, v49, 0, v50, v51, v52);
  sub_1BE83E2D4(a1, v23);
  if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(a1 + 312), v53, (uint64_t)&unk_1E77F1BD0, v54, v55, v56) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (*(_BYTE *)(a1 + 144))
    {
      objc_msgSend__setStatus_((void *)a1, v57, 2, v58, v59, v60);
    }
    else if (*(_QWORD *)(a1 + 8))
    {
      objc_msgSend__setStatus_((void *)a1, v57, 4, v58, v59, v60);
    }
    else
    {
      objc_msgSend__setStatus_((void *)a1, v57, 1, v58, v59, v60);
    }
  }
  else
  {
    objc_msgSend__setStatus_((void *)a1, v57, 3, v58, v59, v60);
  }

  return v48;
}

void sub_1BE84CBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE84CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE84CD90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE84CDA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  double v26;
  double v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t i;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  uint64_t v129;
  id v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  const char *v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t j;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  CHContextualTextResults *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  NSObject *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  id v263;
  NSObject *v264;
  id v265;
  void *v266;
  id obj;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  id v272;
  id v273;
  void *v274;
  void *v275;
  uint64_t v276;
  id v277;
  void *v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  _QWORD v283[4];
  id v284;
  uint64_t v285;
  id v286;
  id v287;
  id v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  id v297;
  id v298;
  _BYTE v299[128];
  _BYTE v300[128];
  uint8_t v301[128];
  uint8_t buf[4];
  uint64_t v303;
  __int16 v304;
  void *v305;
  __int16 v306;
  uint64_t v307;
  __int16 v308;
  uint64_t v309;
  uint64_t v310;

  v310 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(void))(v2 + 16))())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for location cancelled.", buf, 2u);
    }
    goto LABEL_61;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v271 = a1;
  v4 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_attachments(*(void **)(*(_QWORD *)(v271 + 32) + 48), v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134217984;
    v303 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_DEFAULT, "ContextLookup Query for location starting in document with %ld attachments.", buf, 0xCu);

  }
  objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(v271 + 40), v16, 100, v17, v18, v19);
  objc_msgSend_strokeGroupingResult(*(void **)(*(_QWORD *)(v271 + 32) + 8), v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = *(double *)(v271 + 64);
  v27 = *(double *)(v271 + 72);
  v297 = 0;
  v298 = 0;
  objc_msgSend_textStrokeGroupClustersAtPosition_closestAbove_closestBelow_(v25, v28, (uint64_t)&v298, (uint64_t)&v297, v29, v30, v26, v27);
  v266 = (void *)objc_claimAutoreleasedReturnValue();
  v264 = v298;
  v263 = v297;

  if (objc_msgSend_count(v266, v31, v32, v33, v34, v35))
  {
    v265 = v266;
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v36, v37, v38, v39, v40);
    v265 = (id)objc_claimAutoreleasedReturnValue();
    if (v264)
      objc_msgSend_addObject_(v265, v41, (uint64_t)v264, v42, v43, v44);
    if (v263)
      objc_msgSend_addObject_(v265, v41, (uint64_t)v263, v42, v43, v44);
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v45 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    v52 = *(_QWORD *)(v271 + 64);
    v51 = *(void **)(v271 + 72);
    v53 = objc_msgSend_count(v265, v46, v47, v48, v49, v50);
    objc_msgSend_strokeGroupingResult(*(void **)(*(_QWORD *)(v271 + 32) + 8), v54, v55, v56, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textStrokeGroupClusters(v59, v60, v61, v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend_count(v65, v66, v67, v68, v69, v70);
    *(_DWORD *)buf = 134218752;
    v303 = v52;
    v304 = 2048;
    v305 = v51;
    v306 = 2048;
    v307 = v53;
    v308 = 2048;
    v309 = v71;
    _os_log_impl(&dword_1BE607000, v45, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for location %.2f,%.2f, analyzing contents from %ld text clusters from %ld clusters in the document.", buf, 0x2Au);

  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v72, v73, v74, v75, v76);
  v278 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v77, v78, v79, v80, v81);
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  v295 = 0u;
  v296 = 0u;
  v293 = 0u;
  v294 = 0u;
  obj = v265;
  v270 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v82, (uint64_t)&v293, (uint64_t)v301, 16, v83);
  if (v270)
  {
    v268 = *(_QWORD *)v294;
    do
    {
      v276 = 0;
      do
      {
        if (*(_QWORD *)v294 != v268)
          objc_enumerationMutation(obj);
        v89 = *(void **)(*((_QWORD *)&v293 + 1) + 8 * v276);
        objc_msgSend_array(MEMORY[0x1E0C99DE8], v84, v85, v86, v87, v88, v263);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        v291 = 0u;
        v292 = 0u;
        v289 = 0u;
        v290 = 0u;
        v91 = v89;
        v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v91, v92, (uint64_t)&v289, (uint64_t)v300, 16, v93);
        if (v99)
        {
          v100 = *(_QWORD *)v290;
          do
          {
            for (i = 0; i != v99; ++i)
            {
              if (*(_QWORD *)v290 != v100)
                objc_enumerationMutation(v91);
              objc_msgSend_strokeIdentifiers(*(void **)(*((_QWORD *)&v289 + 1) + 8 * i), v94, v95, v96, v97, v98);
              v102 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_allObjects(v102, v103, v104, v105, v106, v107);
              v108 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObjectsFromArray_(v90, v109, (uint64_t)v108, v110, v111, v112);

            }
            v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v91, v94, (uint64_t)&v289, (uint64_t)v300, 16, v98);
          }
          while (v99);
        }

        v113 = v271;
        v114 = *(_QWORD *)(v271 + 32);
        v287 = 0;
        v288 = 0;
        sub_1BE84AA04(v114, v90, 0, 1, 0, &v288, &v287, *(void **)(v271 + 48));
        v115 = objc_claimAutoreleasedReturnValue();
        v273 = v288;
        v277 = v287;
        v274 = (void *)v115;
        if (!v115)
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v121 = (id)qword_1EF568E18[0];
          if (os_log_type_enabled(v121, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BE607000, v121, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
          }

          v113 = v271;
        }
        objc_msgSend_array(MEMORY[0x1E0C99DE8], v116, v117, v118, v119, v120);
        v275 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeClassificationsByStrokeIdentifier(v277, v122, v123, v124, v125, v126);
        v127 = (void *)objc_claimAutoreleasedReturnValue();
        v283[0] = MEMORY[0x1E0C809B0];
        v283[1] = 3221225472;
        v283[2] = sub_1BE84D960;
        v283[3] = &unk_1E77F6110;
        v128 = v269;
        v129 = *(_QWORD *)(v113 + 32);
        v272 = v128;
        v284 = v128;
        v285 = v129;
        v130 = v275;
        v286 = v130;
        objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v127, v131, (uint64_t)v283, v132, v133, v134);

        objc_msgSend_addObjectsFromArray_(v278, v135, (uint64_t)v274, v136, v137, v138);
        v281 = 0u;
        v282 = 0u;
        v279 = 0u;
        v280 = 0u;
        v139 = v274;
        v142 = 0;
        v148 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v140, (uint64_t)&v279, (uint64_t)v299, 16, v141);
        if (v148)
        {
          v149 = *(_QWORD *)v280;
          do
          {
            for (j = 0; j != v148; ++j)
            {
              if (*(_QWORD *)v280 != v149)
                objc_enumerationMutation(v139);
              v151 = *(void **)(*((_QWORD *)&v279 + 1) + 8 * j);
              if ((objc_msgSend_isNonTextCandidateForContextLookup(v151, v143, v144, v145, v146, v147) & 1) != 0
                || objc_msgSend_isNonTextCandidateForContextLookupByNonTextStrokesBounds_strokeClassificationResult_(v151, v152, (uint64_t)v130, (uint64_t)v277, v155, v156))
              {
                if (!v142)
                {
                  objc_msgSend_set(MEMORY[0x1E0C99E20], v152, v153, v154, v155, v156);
                  v142 = (void *)objc_claimAutoreleasedReturnValue();
                }
                objc_msgSend_textResult(v151, v152, v153, v154, v155, v156);
                v157 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_inputStrokeIdentifiers(v157, v158, v159, v160, v161, v162);
                v163 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_addObjectsFromArray_(v142, v164, (uint64_t)v163, v165, v166, v167);
                objc_msgSend_removeObject_(v278, v168, (uint64_t)v151, v169, v170, v171);
                goto LABEL_42;
              }
              v172 = (void *)objc_opt_class();
              objc_msgSend_strokeGroup(v151, v173, v174, v175, v176, v177);
              v178 = (void *)objc_claimAutoreleasedReturnValue();
              v184 = objc_msgSend_classification(v178, v179, v180, v181, v182, v183);
              LODWORD(v172) = objc_msgSend_isStrokeClassificationMath_(v172, v185, v184, v186, v187, v188);

              if ((_DWORD)v172)
              {
                objc_msgSend_strokeGroup(v151, v143, v144, v145, v146, v147);
                v189 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_strokeIdentifiers(v189, v190, v191, v192, v193, v194);
                v163 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_allObjects(v163, v195, v196, v197, v198, v199);
                v200 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObjectsFromArray_(v142, v201, (uint64_t)v200, v202, v203, v204);

                objc_msgSend_removeObject_(v278, v205, (uint64_t)v151, v206, v207, v208);
LABEL_42:

                continue;
              }
            }
            v148 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v143, (uint64_t)&v279, (uint64_t)v299, 16, v147);
          }
          while (v148);
        }

        objc_msgSend_allObjects(v142, v209, v210, v211, v212, v213);
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObjectsFromArray_(v272, v215, (uint64_t)v214, v216, v217, v218);

        ++v276;
      }
      while (v276 != v270);
      v270 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v84, (uint64_t)&v293, (uint64_t)v301, 16, v88);
    }
    while (v270);
  }

  objc_msgSend_latestStrokeProvider(*(void **)(v271 + 32), v219, v220, v221, v222, v223);
  v224 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v225, (uint64_t)v269, (uint64_t)v224, v226, v227);
  v228 = (void *)objc_claimAutoreleasedReturnValue();

  v229 = [CHContextualTextResults alloc];
  v234 = (void *)objc_msgSend_initWithTextResults_(v229, v230, (uint64_t)v278, v231, v232, v233);
  objc_msgSend_topTranscription(v234, v235, v236, v237, v238, v239);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v241 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
  {
    v247 = objc_msgSend_count(v228, v242, v243, v244, v245, v246);
    *(_DWORD *)buf = 134218243;
    v303 = v247;
    v304 = 2117;
    v305 = v240;
    _os_log_impl(&dword_1BE607000, v241, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for location: %ld non-text strokes returned, presentable text = \"%{sensitive}@\".", buf, 0x16u);
  }

  (*(void (**)(void))(*(_QWORD *)(v271 + 56) + 16))();
  objc_msgSend_resignCurrent(*(void **)(v271 + 40), v248, v249, v250, v251, v252);
  v258 = objc_msgSend_totalUnitCount(*(void **)(v271 + 40), v253, v254, v255, v256, v257);
  objc_msgSend_setCompletedUnitCount_(*(void **)(v271 + 40), v259, v258, v260, v261, v262);

  v3 = v264;
LABEL_61:

}

void sub_1BE84D704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1BE84D960(void **a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  void *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;

  v100 = a2;
  v5 = a3;
  if ((objc_msgSend_isEqualToNumber_(v5, v6, (uint64_t)&unk_1E7829330, v7, v8, v9) & 1) != 0
    || objc_msgSend_isEqualToNumber_(v5, v10, (uint64_t)&unk_1E7829378, v11, v12, v13))
  {
    objc_msgSend_addObject_(a1[4], v10, (uint64_t)v100, v11, v12, v13);
    v14 = (void *)objc_opt_class();
    objc_msgSend_latestStrokeProvider(a1[5], v15, v16, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeForIdentifier_inStrokeProvider_(v14, v21, (uint64_t)v100, (uint64_t)v20, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_count(a1[6], v25, v26, v27, v28, v29))
    {
      for (i = 0; ; ++i)
      {
        v36 = objc_msgSend_count(a1[6], v30, v31, v32, v33, v34);
        v42 = a1[6];
        if (i >= v36)
        {
          v78 = (void *)MEMORY[0x1E0CB3B18];
          objc_msgSend_bounds(v24, v37, v38, v39, v40, v41);
          objc_msgSend_ch_valueWithCGRect_(v78, v79, v80, v81, v82, v83);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v42, v84, (uint64_t)v73, v85, v86, v87);
          goto LABEL_11;
        }
        objc_msgSend_objectAtIndexedSubscript_(a1[6], v37, i, v39, v40, v41);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ch_CGRectValue(v43, v44, v45, v46, v47, v48);
        v50 = v49;
        v52 = v51;
        v54 = v53;
        v56 = v55;

        objc_msgSend_bounds(v24, v57, v58, v59, v60, v61);
        v104.origin.x = v62;
        v104.origin.y = v63;
        v104.size.width = v64;
        v104.size.height = v65;
        v101.origin.x = v50;
        v101.origin.y = v52;
        v101.size.width = v54;
        v101.size.height = v56;
        if (CGRectIntersectsRect(v101, v104))
          break;
      }
      objc_msgSend_bounds(v24, v30, v31, v32, v33, v34);
      v105.origin.x = v88;
      v105.origin.y = v89;
      v105.size.width = v90;
      v105.size.height = v91;
      v102.origin.x = v50;
      v102.origin.y = v52;
      v102.size.width = v54;
      v102.size.height = v56;
      v103 = CGRectUnion(v102, v105);
      objc_msgSend_ch_valueWithCGRect_(MEMORY[0x1E0CB3B18], v92, v93, v94, v95, v96, v103.origin.x, v103.origin.y, v103.size.width, v103.size.height);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_atIndexedSubscript_(a1[6], v97, (uint64_t)v73, i, v98, v99);
    }
    else
    {
      v66 = a1[6];
      v67 = (void *)MEMORY[0x1E0CB3B18];
      objc_msgSend_bounds(v24, v30, v31, v32, v33, v34);
      objc_msgSend_ch_valueWithCGRect_(v67, v68, v69, v70, v71, v72);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v66, v74, (uint64_t)v73, v75, v76, v77);
    }
LABEL_11:

  }
}

void sub_1BE84DB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE84DBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE84DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE84E020(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t i;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t j;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  CGFloat v88;
  double v89;
  CGFloat v90;
  double v91;
  CGFloat v92;
  double v93;
  CGFloat v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  CGFloat v115;
  CGFloat v116;
  CGFloat v117;
  CGFloat v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t k;
  void *v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t m;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t Index;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  CHContextualTextResult *v323;
  const char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  const char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  const char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  const char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  const char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  void *v375;
  const char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t n;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  const char *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  const char *v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  const char *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  NSObject *v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  const char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  id v443;
  void *v444;
  id v445;
  void (**v446)(id, void *, void *, void *, _QWORD);
  id v447;
  void *v448;
  void *v449;
  void *v450;
  id v451;
  uint64_t v452;
  void *v453;
  id obj;
  id v455;
  uint64_t v456;
  uint64_t v457;
  void *v458;
  void *v459;
  void *v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  id v465;
  id v466;
  uint8_t buf[4];
  uint64_t v468;
  __int16 v469;
  uint64_t v470;
  __int16 v471;
  uint64_t v472;
  __int16 v473;
  uint64_t v474;
  __int16 v475;
  uint64_t v476;
  _BYTE v477[128];
  uint64_t v478;
  CGRect v479;
  CGRect v480;
  CGRect v481;
  CGRect v482;
  CGRect v483;

  v478 = *MEMORY[0x1E0C80C00];
  v447 = a2;
  v451 = a3;
  v446 = a4;
  v445 = a5;
  v448 = a1;
  if (!a1)
    goto LABEL_57;
  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E20], v9, (uint64_t)v451, v10, v11, v12);
  v460 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v13, v14, v15, v16, v17);
  v458 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v451, v18, v19, v20, v21, v22))
  {
    v465 = 0;
    v466 = 0;
    sub_1BE84AA04((uint64_t)a1, v451, 0, 1, 0, &v466, &v465, v445);
    v444 = (void *)objc_claimAutoreleasedReturnValue();
    v443 = v466;
    v455 = v465;
    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v23, v24, v25, v26, v27);
    v449 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i < objc_msgSend_count(v451, v28, v29, v30, v31, v32, v443); ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(v451, v34, i, v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeClassificationsByStrokeIdentifier(v455, v40, v41, v42, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKey_(v45, v46, (uint64_t)v39, v47, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend_isEqualToNumber_(v50, v51, (uint64_t)&unk_1E7829330, v52, v53, v54) & 1) != 0
        || objc_msgSend_isEqualToNumber_(v50, v55, (uint64_t)&unk_1E7829378, v56, v57, v58))
      {
        objc_msgSend_addIndex_(v449, v55, i, v56, v57, v58);
        v59 = (void *)objc_opt_class();
        objc_msgSend_latestStrokeProvider(a1, v60, v61, v62, v63, v64);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeForIdentifier_inStrokeProvider_(v59, v66, (uint64_t)v39, (uint64_t)v65, v67, v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend_count(v458, v70, v71, v72, v73, v74))
        {
          for (j = 0; j < objc_msgSend_count(v458, v75, v76, v77, v78, v79); ++j)
          {
            objc_msgSend_objectAtIndexedSubscript_(v458, v75, j, v77, v78, v79);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_ch_CGRectValue(v81, v82, v83, v84, v85, v86);
            v88 = v87;
            v90 = v89;
            v92 = v91;
            v94 = v93;

            objc_msgSend_bounds(v69, v95, v96, v97, v98, v99);
            v482.origin.x = v100;
            v482.origin.y = v101;
            v482.size.width = v102;
            v482.size.height = v103;
            v479.origin.x = v88;
            v479.origin.y = v90;
            v479.size.width = v92;
            v479.size.height = v94;
            if (CGRectIntersectsRect(v479, v482))
            {
              objc_msgSend_bounds(v69, v75, v76, v77, v78, v79);
              v483.origin.x = v115;
              v483.origin.y = v116;
              v483.size.width = v117;
              v483.size.height = v118;
              v480.origin.x = v88;
              v480.origin.y = v90;
              v480.size.width = v92;
              v480.size.height = v94;
              v481 = CGRectUnion(v480, v483);
              objc_msgSend_ch_valueWithCGRect_(MEMORY[0x1E0CB3B18], v119, v120, v121, v122, v123, v481.origin.x, v481.origin.y, v481.size.width, v481.size.height);
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_atIndexedSubscript_(v458, v124, (uint64_t)v110, j, v125, v126);
              goto LABEL_15;
            }
          }
        }
        v104 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend_bounds(v69, v75, v76, v77, v78, v79);
        objc_msgSend_ch_valueWithCGRect_(v104, v105, v106, v107, v108, v109);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v458, v111, (uint64_t)v110, v112, v113, v114);
LABEL_15:

      }
    }
    v127 = (void *)MEMORY[0x1E0C99DE8];
    v128 = objc_msgSend_count(v444, v34, v35, v36, v37, v38);
    objc_msgSend_arrayWithCapacity_(v127, v129, v128, v130, v131, v132);
    v133 = objc_claimAutoreleasedReturnValue();
    v463 = 0u;
    v464 = 0u;
    v461 = 0u;
    v462 = 0u;
    obj = v444;
    v450 = (void *)v133;
    v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v134, (uint64_t)&v461, (uint64_t)v477, 16, v135);
    if (v136)
    {
      v452 = 0;
      v459 = 0;
      v456 = *(_QWORD *)v462;
      do
      {
        v457 = v136;
        for (k = 0; k != v457; ++k)
        {
          if (*(_QWORD *)v462 != v456)
            objc_enumerationMutation(obj);
          v143 = *(void **)(*((_QWORD *)&v461 + 1) + 8 * k);
          objc_msgSend_textResult(v143, v137, v138, v139, v140, v141);
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputStrokeIdentifiers(v144, v145, v146, v147, v148, v149);
          v150 = (void *)objc_claimAutoreleasedReturnValue();

          v151 = v459;
          if ((objc_msgSend_isNonTextCandidateForContextLookup(v143, v152, v153, v154, v155, v156) & 1) != 0
            || objc_msgSend_isNonTextCandidateForContextLookupByNonTextStrokesBounds_strokeClassificationResult_(v143, v157, (uint64_t)v458, (uint64_t)v455, v160, v161))
          {
            if (!v459)
            {
              objc_msgSend_set(MEMORY[0x1E0C99E20], v157, v158, v159, v160, v161);
              v151 = (void *)objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend_addObjectsFromArray_(v151, v157, (uint64_t)v150, v159, v160, v161);
            v459 = v151;
          }
          else
          {
            objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v157, v158, v159, v160, v161);
            v167 = (void *)objc_claimAutoreleasedReturnValue();
            for (m = 0; ; ++m)
            {
              objc_msgSend_textResult(v143, v162, v163, v164, v165, v166);
              v169 = (void *)objc_claimAutoreleasedReturnValue();
              v175 = m < objc_msgSend_tokenColumnCount(v169, v170, v171, v172, v173, v174);

              if (!v175)
                break;
              objc_msgSend_textResult(v143, v176, v177, v178, v179, v180);
              v181 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_tokenColumns(v181, v182, v183, v184, v185, v186);
              v187 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectAtIndexedSubscript_(v187, v188, m, v189, v190, v191);
              v192 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeIndexes(v192, v193, v194, v195, v196, v197);
              v198 = (void *)objc_claimAutoreleasedReturnValue();

              v199 = (void *)MEMORY[0x1E0C99E60];
              objc_msgSend_objectsAtIndexes_(v150, v200, (uint64_t)v198, v201, v202, v203);
              v204 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setWithArray_(v199, v205, (uint64_t)v204, v206, v207, v208);
              v209 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend_intersectsSet_(v209, v210, (uint64_t)v460, v211, v212, v213))
                objc_msgSend_addIndex_(v167, v214, m, v215, v216, v217);

            }
            if (objc_msgSend_count(v167, v176, v177, v178, v179, v180))
            {
              v223 = objc_msgSend_count(v167, v218, v219, v220, v221, v222);
              objc_msgSend_textResult(v143, v224, v225, v226, v227, v228);
              v229 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(v223) = v223 < objc_msgSend_tokenColumnCount(v229, v230, v231, v232, v233, v234);

              if ((_DWORD)v223)
              {
                Index = objc_msgSend_firstIndex(v167, v235, v236, v237, v238, v239);
                v246 = objc_msgSend_lastIndex(v167, v241, v242, v243, v244, v245);
                v252 = objc_msgSend_firstIndex(v167, v247, v248, v249, v250, v251);
                objc_msgSend_textResult(v143, v253, v254, v255, v256, v257);
                v258 = (void *)objc_claimAutoreleasedReturnValue();
                v259 = v246 - v252 + 1;
                objc_msgSend_subResultWithColumnRange_(v258, v260, Index, v259, v261, v262);
                v453 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_topTranscription(v453, v263, v264, v265, v266, v267);
                v268 = (void *)objc_claimAutoreleasedReturnValue();
                v274 = objc_msgSend_length(v268, v269, v270, v271, v272, v273);
                objc_msgSend_textResult(v143, v275, v276, v277, v278, v279);
                v280 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_topTranscription(v280, v281, v282, v283, v284, v285);
                v286 = (void *)objc_claimAutoreleasedReturnValue();
                LODWORD(v274) = (double)(unint64_t)objc_msgSend_length(v286, v287, v288, v289, v290, v291) * 0.6 > (double)(unint64_t)v274;

                if ((_DWORD)v274)
                {
                  objc_msgSend_textResult(v143, v292, v293, v294, v295, v296);
                  v297 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_inputStrokeIdentifiers(v297, v298, v299, v300, v301, v302);
                  v303 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_textResult(v143, v304, v305, v306, v307, v308);
                  v309 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_strokeIndexesForColumnsInRange_(v309, v310, Index, v259, v311, v312);
                  v313 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_objectsAtIndexes_(v303, v314, (uint64_t)v313, v315, v316, v317);
                  v318 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setInputStrokeIdentifiers_(v453, v319, (uint64_t)v318, v320, v321, v322);

                  v323 = [CHContextualTextResult alloc];
                  objc_msgSend_terminatingSpecialCharacter(v143, v324, v325, v326, v327, v328);
                  v329 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_strokeGroup(v143, v330, v331, v332, v333, v334);
                  v335 = (void *)objc_claimAutoreleasedReturnValue();
                  v338 = (void *)objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v323, v336, (uint64_t)v453, (uint64_t)v329, (uint64_t)v335, v337);

                  objc_msgSend_addObject_(v450, v339, (uint64_t)v338, v340, v341, v342);
                  objc_msgSend_inputStrokeIdentifiers(v453, v343, v344, v345, v346, v347);
                  v348 = (void *)objc_claimAutoreleasedReturnValue();

                  v150 = v348;
                  v354 = objc_msgSend_count(v348, v349, v350, v351, v352, v353);
                }
                else
                {
                  objc_msgSend_addObject_(v450, v292, (uint64_t)v143, v294, v295, v296);
                  v354 = objc_msgSend_count(v150, v369, v370, v371, v372, v373);
                }
                v364 = v354;
                objc_msgSend_addObjectsFromArray_(v460, v355, (uint64_t)v150, v356, v357, v358);

              }
              else
              {
                objc_msgSend_addObject_(v450, v235, (uint64_t)v143, v237, v238, v239);
                v364 = objc_msgSend_count(v150, v359, v360, v361, v362, v363);
                objc_msgSend_addObjectsFromArray_(v460, v365, (uint64_t)v150, v366, v367, v368);
              }
              v452 += v364;
            }

          }
        }
        v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v137, (uint64_t)&v461, (uint64_t)v477, 16, v141);
      }
      while (v136);
    }
    else
    {
      v452 = 0;
      v459 = 0;
    }

    for (n = 0; n < objc_msgSend_count(v451, v376, v377, v378, v379, v380); ++n)
    {
      objc_msgSend_objectAtIndexedSubscript_(v451, v382, n, v383, v384, v385);
      v386 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_containsObject_(v459, v387, (uint64_t)v386, v388, v389, v390))
        objc_msgSend_addIndex_(v449, v391, n, v392, v393, v394);

    }
    objc_msgSend_objectsAtIndexes_(v447, v382, (uint64_t)v449, v383, v384, v385);
    v375 = (void *)objc_claimAutoreleasedReturnValue();

    v374 = v450;
  }
  else
  {
    v452 = 0;
    v459 = 0;
    obj = 0;
    v374 = 0;
    v375 = (void *)MEMORY[0x1E0C9AA60];
  }
  v395 = (void *)objc_opt_class();
  objc_msgSend_allObjects(v460, v396, v397, v398, v399, v400);
  v401 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_latestStrokeProvider(v448, v402, v403, v404, v405, v406);
  v407 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v395, v408, (uint64_t)v401, (uint64_t)v407, v409, v410);
  v411 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v374)
  {
    v417 = (void *)MEMORY[0x1E0C9AA60];
    if (qword_1EF568E88 == -1)
      goto LABEL_54;
LABEL_59:
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    goto LABEL_54;
  }
  v417 = (void *)objc_msgSend_copy(v374, v412, v413, v414, v415, v416);
  if (qword_1EF568E88 != -1)
    goto LABEL_59;
LABEL_54:
  v418 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v418, OS_LOG_TYPE_DEFAULT))
  {
    v424 = objc_msgSend_count(v447, v419, v420, v421, v422, v423);
    v430 = objc_msgSend_count(v411, v425, v426, v427, v428, v429);
    v436 = objc_msgSend_count(v375, v431, v432, v433, v434, v435);
    v442 = objc_msgSend_count(v417, v437, v438, v439, v440, v441);
    *(_DWORD *)buf = 134219008;
    v468 = v424;
    v469 = 2048;
    v470 = v430;
    v471 = 2048;
    v472 = v436;
    v473 = 2048;
    v474 = v452;
    v475 = 2048;
    v476 = v442;
    _os_log_impl(&dword_1BE607000, v418, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result: %ld strokes initially selected, %ld strokes covered, %ld nonTextStrokes, %ld text strokes in %ld lines of text.", buf, 0x34u);
  }

  v446[2](v446, v411, v375, v417, MEMORY[0x1E0C9AA60]);
LABEL_57:

}

void sub_1BE84EA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1BE84EEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE84EF28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE84EF40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint8_t buf[16];

  v7 = *(_QWORD *)(a1 + 56);
  if (v7 && (*(unsigned int (**)(void))(v7 + 16))())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v8 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for selected strokes cancelled.", buf, 2u);
    }

  }
  else
  {
    objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(a1 + 32), a2, 100, a4, a5, a6);
    v9 = (void *)objc_opt_class();
    objc_msgSend_encodedStrokeIdentifiers_withStrokeProvider_(v9, v10, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), v11, v12);
    v28 = (id)objc_claimAutoreleasedReturnValue();
    sub_1BE84E020(*(void **)(a1 + 48), *(void **)(a1 + 40), v28, *(void **)(a1 + 64), *(void **)(a1 + 56));
    objc_msgSend_resignCurrent(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
    v23 = objc_msgSend_totalUnitCount(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 32), v24, v23, v25, v26, v27);

  }
}

void sub_1BE84F054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE84F184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE84F1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE84F1C8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t i;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double x;
  double y;
  double v89;
  double v90;
  double v91;
  double v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, void *);
  void *v141;
  id v142;
  uint64_t v143;
  uint8_t buf[4];
  uint64_t v145;
  uint64_t v146;
  CGPoint v147;
  CGPoint v148;
  CGPoint v149;
  CGPoint v150;
  CGPoint v151;

  v146 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(void))(v2 + 16))())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for path cancelled.", buf, 2u);
    }
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_attachments(*(void **)(*(_QWORD *)(a1 + 32) + 48), v5, v6, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134217984;
      v145 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
      _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_DEFAULT, "ContextLookup Query for path starting in document with %ld attachments.", buf, 0xCu);

    }
    objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(a1 + 40), v16, 100, v17, v18, v19);
    objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_orderedStrokes(v25, v26, v27, v28, v29, v30);
    v3 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v31, v32, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_visibleStrokeEncodedIdentifiers(v36, v37, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v43, v44, v45, v46, v47);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i < objc_msgSend_count(v3, v48, v49, v50, v51, v52); ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(v3, v55, i, v57, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_count(v42, v61, v62, v63, v64, v65))
        goto LABEL_24;
      objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v66, v67, v68, v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeIdentifier(v60, v72, v73, v74, v75, v76);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_encodedStrokeIdentifier_(v71, v78, (uint64_t)v77, v79, v80, v81);
      v82 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v71) = objc_msgSend_containsObject_(v42, v83, (uint64_t)v82, v84, v85, v86);
      if ((_DWORD)v71)
      {
LABEL_24:
        objc_msgSend_bounds(v60, v66, v67, v68, v69, v70);
        x = v147.x;
        y = v147.y;
        v90 = v89;
        v92 = v91;
        v93 = CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v147, 0);
        v148.x = x + v90;
        v148.y = y;
        v94 = CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v148, 0);
        v149.x = x + v90;
        v149.y = y + v92;
        v95 = CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v149, 0);
        v150.x = x;
        v150.y = y + v92;
        v100 = v94 + (unint64_t)v93 + v95 + CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v150, 0);
        if (v100 >= 3
          || v100
          && (v151.x = x + v90 * 0.5, v151.y = y + v92 * 0.5, CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v151, 0)))
        {
          objc_msgSend_addIndex_(v53, v96, i, v97, v98, v99);
        }
      }

    }
    v101 = (void *)MEMORY[0x1E0C99DE8];
    v102 = objc_msgSend_count(v53, v55, v56, v57, v58, v59);
    objc_msgSend_arrayWithCapacity_(v101, v103, v102, v104, v105, v106);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = MEMORY[0x1E0C809B0];
    v139 = 3221225472;
    v140 = sub_1BE84F72C;
    v141 = &unk_1E77F6160;
    v108 = v107;
    v109 = *(_QWORD *)(a1 + 32);
    v142 = v108;
    v143 = v109;
    objc_msgSend_enumerateObjectsAtIndexes_options_usingBlock_(v3, v110, (uint64_t)v53, 0, (uint64_t)&v138, v111);
    v112 = (void *)objc_opt_class();
    objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v113, v114, v115, v116, v117, v138, v139, v140, v141);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v112, v119, (uint64_t)v108, (uint64_t)v118, v120, v121);
    v122 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1BE84E020(*(void **)(a1 + 32), v122, v108, *(void **)(a1 + 56), *(void **)(a1 + 48));
    objc_msgSend_resignCurrent(*(void **)(a1 + 40), v123, v124, v125, v126, v127);
    v133 = objc_msgSend_totalUnitCount(*(void **)(a1 + 40), v128, v129, v130, v131, v132);
    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 40), v134, v133, v135, v136, v137);

  }
}

void sub_1BE84F63C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE84F650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE84F660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE84F72C(uint64_t a1, void *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v25 = a2;
  v3 = *(void **)(a1 + 32);
  objc_msgSend_latestStrokeProvider(*(void **)(a1 + 40), v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v25, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodedStrokeIdentifier_(v9, v16, (uint64_t)v15, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v3, v21, (uint64_t)v20, v22, v23, v24);

}

void sub_1BE84F7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE84F7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE84F99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE84F9D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE84F9F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHContextualTextResults *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(a1 + 32), a2, 100, a4, a5, a6);
  sub_1BE84AA04(*(_QWORD *)(a1 + 40), *(void **)(a1 + 48), 0, 1, 1, 0, 0, *(void **)(a1 + 56));
  v28 = (id)objc_claimAutoreleasedReturnValue();
  v7 = [CHContextualTextResults alloc];
  v12 = (void *)objc_msgSend_initWithTextResults_(v7, v8, (uint64_t)v28, v9, v10, v11);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  objc_msgSend_resignCurrent(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
  v23 = objc_msgSend_totalUnitCount(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 32), v24, v23, v25, v26, v27);

}

void sub_1BE84FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE84FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE84FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE84FC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE84FC54(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isSubsetOfSet;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  double v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  NSObject *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  double v135;
  CGFloat v136;
  double v137;
  CGFloat v138;
  double v139;
  CGFloat v140;
  double v141;
  CGFloat v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  CGFloat v148;
  CGFloat v149;
  CGFloat v150;
  CGFloat v151;
  void *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t i;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  id v230;
  id v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  id v258;
  const char *v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t j;
  void *v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  id v285;
  const char *v286;
  uint64_t v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t k;
  void *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  CHTokenizedStrokeResult *v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  uint64_t v314;
  id obj;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  _QWORD v334[4];
  id v335;
  id v336;
  id v337;
  id v338;
  id v339;
  id v340;
  id v341;
  _QWORD *v342;
  uint64_t *v343;
  uint64_t *v344;
  uint64_t *v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD v362[3];
  char v363;
  _BYTE v364[128];
  _BYTE v365[128];
  uint8_t v366[128];
  uint8_t buf[4];
  void *v368;
  _BYTE v369[128];
  _QWORD v370[4];
  CGRect v371;
  CGRect v372;
  CGRect v373;
  CGRect v374;

  v370[1] = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  objc_msgSend_visibleStrokeEncodedIdentifiers(v2, v3, v4, v5, v6, v7);
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_opt_class();
  v370[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v9, (uint64_t)v370, 1, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v321 = a1;
  objc_msgSend_polygonForStrokes_(v8, v13, (uint64_t)v12, v14, v15, v16);
  v316 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeGroupingResult(*(void **)(*(_QWORD *)(a1 + 32) + 8), v17, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_strokeGroupOrdering(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
  objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v22, v29, v28, 1, v30, v31);
  v309 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v32, v33, v34, v35, v36);
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v37, v38, v39, v40, v41);
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v42, v43, v44, v45, v46);
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v47, v48, v49, v50, v51);
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  v362[0] = 0;
  v362[1] = v362;
  v362[2] = 0x2020000000;
  v363 = 0;
  v358 = 0;
  v359 = &v358;
  v360 = 0x2020000000;
  v361 = 0x7FFFFFFFFFFFFFFFLL;
  v354 = 0;
  v355 = &v354;
  v356 = 0x2020000000;
  v357 = 0;
  v350 = 0;
  v351 = &v350;
  v352 = 0x2020000000;
  v353 = 0x7FFFFFFFFFFFFFFFLL;
  v348 = 0u;
  v349 = 0u;
  v346 = 0u;
  v347 = 0u;
  obj = v309;
  v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v52, (uint64_t)&v346, (uint64_t)v369, 16, v53);
  if (v54)
  {
    v314 = 0;
    v317 = *(_QWORD *)v347;
LABEL_3:
    v318 = v54;
    v60 = 0;
    while (1)
    {
      if (*(_QWORD *)v347 != v317)
        objc_enumerationMutation(obj);
      v61 = *(void **)(*((_QWORD *)&v346 + 1) + 8 * v60);
      v62 = *(_QWORD *)(v321 + 56);
      if (v62 && ((*(uint64_t (**)(void))(v62 + 16))() & 1) != 0)
        goto LABEL_45;
      if (!objc_msgSend_count(v320, v55, v56, v57, v58, v59)
        || (objc_msgSend_strokeIdentifiers(v61, v55, v56, v57, v58, v59),
            v63 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend_set(v320, v64, v65, v66, v67, v68),
            v69 = (void *)objc_claimAutoreleasedReturnValue(),
            isSubsetOfSet = objc_msgSend_isSubsetOfSet_(v63, v70, (uint64_t)v69, v71, v72, v73),
            v69,
            v63,
            (isSubsetOfSet & 1) != 0))
      {
        objc_msgSend_bounds(*(void **)(v321 + 40), v55, v56, v57, v58, v59);
        v76 = v75;
        v78 = v77;
        v80 = v79;
        v82 = v81;
        objc_msgSend_bounds(v61, v83, v84, v85, v86, v87);
        v373.origin.x = v88;
        v373.origin.y = v89;
        v373.size.width = v90;
        v373.size.height = v91;
        v371.origin.x = v76;
        v371.origin.y = v78;
        v371.size.width = v80;
        v371.size.height = v82;
        if (CGRectIntersectsRect(v371, v373))
        {
          if (objc_msgSend_classification(v61, v55, v56, v57, v58, v59) == 1
            || objc_msgSend_classification(v61, v92, v93, v94, v95, v96) == 2)
          {
            v97 = *(void **)(*(_QWORD *)(v321 + 32) + 8);
            v98 = objc_msgSend_uniqueIdentifier(v61, v92, v93, v94, v95, v96);
            objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v97, v99, v98, v100, v101, v102);
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_recognitionResultsByLocale(v103, v104, v105, v106, v107, v108);
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_preferredLocale(v103, v110, v111, v112, v113, v114);
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v109, v116, (uint64_t)v115, v117, v118, v119);
            v120 = (id)objc_claimAutoreleasedReturnValue();

            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v121 = (id)qword_1EF568E28;
            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_topTranscription(v120, v122, v123, v124, v125, v126);
              v127 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138739971;
              v368 = v127;
              _os_log_impl(&dword_1BE607000, v121, OS_LOG_TYPE_DEBUG, "ScratchOut: evaluating group with transcription %{sensitive}@", buf, 0xCu);

            }
            v334[0] = MEMORY[0x1E0C809B0];
            v334[1] = 3221225472;
            v334[2] = sub_1BE850A28;
            v334[3] = &unk_1E77F61B0;
            v128 = v103;
            v335 = v128;
            v336 = v2;
            v337 = *(id *)(v321 + 40);
            v342 = v362;
            v338 = v312;
            v343 = &v354;
            v339 = v310;
            v340 = v316;
            v341 = v311;
            v344 = &v358;
            v345 = &v350;
            objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v120, v129, (uint64_t)v334, v130, v131, v132);
            v133 = *((unsigned __int8 *)v355 + 24);

            v314 += v133;
            v134 = v335;
          }
          else
          {
            if (objc_msgSend_classification(v61, v92, v93, v94, v95, v96) != 3)
              goto LABEL_4;
            objc_msgSend_bounds(v61, v55, v56, v57, v58, v59);
            v136 = v135;
            v138 = v137;
            v140 = v139;
            v142 = v141;
            objc_msgSend_bounds(*(void **)(v321 + 40), v143, v144, v145, v146, v147);
            v374.origin.x = v148;
            v374.origin.y = v149;
            v374.size.width = v150;
            v374.size.height = v151;
            v372.origin.x = v136;
            v372.origin.y = v138;
            v372.size.width = v140;
            v372.size.height = v142;
            if (!CGRectIntersectsRect(v372, v374))
              goto LABEL_4;
            v152 = *(void **)(*(_QWORD *)(v321 + 32) + 8);
            v153 = objc_msgSend_uniqueIdentifier(v61, v55, v56, v57, v58, v59);
            objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v152, v154, v153, v155, v156, v157);
            v128 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend_inputStrokeIdentifiers(v128, v158, v159, v160, v161, v162);
            v163 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_array(MEMORY[0x1E0C99DE8], v164, v165, v166, v167, v168, v163);
            v134 = (void *)objc_claimAutoreleasedReturnValue();
            v332 = 0u;
            v333 = 0u;
            v330 = 0u;
            v331 = 0u;
            v120 = v163;
            v174 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v169, (uint64_t)&v330, (uint64_t)v366, 16, v170);
            if (v174)
            {
              v175 = *(_QWORD *)v331;
              do
              {
                for (i = 0; i != v174; ++i)
                {
                  if (*(_QWORD *)v331 != v175)
                    objc_enumerationMutation(v120);
                  objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v171, *(_QWORD *)(*((_QWORD *)&v330 + 1) + 8 * i), (uint64_t)v2, v172, v173);
                  v181 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v181)
                    objc_msgSend_addObject_(v134, v177, (uint64_t)v181, v178, v179, v180);

                }
                v174 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v171, (uint64_t)&v330, (uint64_t)v366, 16, v173);
              }
              while (v174);
            }

            v187 = 0;
            v188 = 0;
            while (v187 < objc_msgSend_count(v120, v182, v183, v184, v185, v186))
            {
              objc_msgSend_objectAtIndexedSubscript_(v134, v189, v187, v190, v191, v192);
              v193 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend_isStroke_intersectingPolygon_(CHStrokeUtilities, v194, (uint64_t)v193, (uint64_t)v316, v195, v196))
              {
                objc_msgSend_objectAtIndexedSubscript_(v120, v197, v187, v198, v199, v200);
                v201 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObject_(v313, v202, (uint64_t)v201, v203, v204, v205);

                v188 = 1;
              }

              ++v187;
            }
            if ((v188 & 1) != 0)
            {
              if (qword_1EF568E88 != -1)
                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v206 = (id)qword_1EF568E28;
              if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
              {
                objc_msgSend_mathResult(v128, v207, v208, v209, v210, v211);
                v212 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_topTranscription(v212, v213, v214, v215, v216, v217);
                v218 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138739971;
                v368 = v218;
                _os_log_impl(&dword_1BE607000, v206, OS_LOG_TYPE_DEBUG, "ScratchOut: math strokes augmented with strokes from group: %{sensitive}@", buf, 0xCu);

              }
            }
          }

        }
      }
LABEL_4:
      if (++v60 == v318)
      {
        v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v346, (uint64_t)v369, 16, v59);
        if (v54)
          goto LABEL_3;
        goto LABEL_45;
      }
    }
  }
  v314 = 0;
LABEL_45:

  v224 = *(_QWORD *)(v321 + 56);
  if (v224 && ((*(uint64_t (**)(void))(v224 + 16))() & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(v321 + 64) + 16))();
    goto LABEL_72;
  }
  if (v314 < 3 || (v221 = v351[3], v221 < 1))
  {
    if (!objc_msgSend_count(v312, v219, v220, v221, v222, v223))
    {
      v230 = v311;
      v231 = 0;
      v319 = 1;
      goto LABEL_55;
    }
    objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v237, 0, v359[3], v238, v239);
    v240 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectsAtIndexes_(v312, v241, (uint64_t)v240, v242, v243, v244);
    v230 = (id)objc_claimAutoreleasedReturnValue();
    v231 = v311;

  }
  else
  {
    objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v219, 0, v221, v222, v223);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectsAtIndexes_(v310, v226, (uint64_t)v225, v227, v228, v229);
    v230 = (id)objc_claimAutoreleasedReturnValue();
    v231 = v311;

  }
  v319 = 0;
LABEL_55:
  if (objc_msgSend_count(v313, v232, v233, v234, v235, v236))
  {
    objc_msgSend_arrayByAddingObjectsFromArray_(v230, v245, (uint64_t)v313, v247, v248, v249);
    v250 = objc_claimAutoreleasedReturnValue();

    v230 = (id)v250;
  }
  v251 = (void *)MEMORY[0x1E0C99E20];
  v252 = objc_msgSend_count(v230, v245, v246, v247, v248, v249);
  objc_msgSend_setWithCapacity_(v251, v253, v252, v254, v255, v256);
  v257 = (void *)objc_claimAutoreleasedReturnValue();
  v328 = 0u;
  v329 = 0u;
  v326 = 0u;
  v327 = 0u;
  v258 = v230;
  v265 = objc_msgSend_countByEnumeratingWithState_objects_count_(v258, v259, (uint64_t)&v326, (uint64_t)v365, 16, v260);
  if (v265)
  {
    v266 = *(_QWORD *)v327;
    do
    {
      for (j = 0; j != v265; ++j)
      {
        if (*(_QWORD *)v327 != v266)
          objc_enumerationMutation(v258);
        objc_msgSend_strokeIdentifierFromData_(v2, v261, *(_QWORD *)(*((_QWORD *)&v326 + 1) + 8 * j), v262, v263, v264);
        v268 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v257, v269, (uint64_t)v268, v270, v271, v272);

      }
      v265 = objc_msgSend_countByEnumeratingWithState_objects_count_(v258, v261, (uint64_t)&v326, (uint64_t)v365, 16, v264);
    }
    while (v265);
  }

  v273 = (void *)MEMORY[0x1E0C99E20];
  v279 = objc_msgSend_count(v231, v274, v275, v276, v277, v278);
  objc_msgSend_setWithCapacity_(v273, v280, v279, v281, v282, v283);
  v284 = (void *)objc_claimAutoreleasedReturnValue();
  v324 = 0u;
  v325 = 0u;
  v322 = 0u;
  v323 = 0u;
  v285 = v231;
  v292 = objc_msgSend_countByEnumeratingWithState_objects_count_(v285, v286, (uint64_t)&v322, (uint64_t)v364, 16, v287);
  if (v292)
  {
    v293 = *(_QWORD *)v323;
    do
    {
      for (k = 0; k != v292; ++k)
      {
        if (*(_QWORD *)v323 != v293)
          objc_enumerationMutation(v285);
        objc_msgSend_strokeIdentifierFromData_(v2, v288, *(_QWORD *)(*((_QWORD *)&v322 + 1) + 8 * k), v289, v290, v291);
        v295 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v284, v296, (uint64_t)v295, v297, v298, v299);

      }
      v292 = objc_msgSend_countByEnumeratingWithState_objects_count_(v285, v288, (uint64_t)&v322, (uint64_t)v364, 16, v291);
    }
    while (v292);
  }

  v300 = [CHTokenizedStrokeResult alloc];
  v304 = (void *)objc_msgSend_initWithStrokeIdentifiers_resultLevel_(v300, v301, (uint64_t)v257, v319, v302, v303);
  objc_msgSend_setCompletedUnitCount_(*(void **)(v321 + 48), v305, 100, v306, v307, v308);
  (*(void (**)(void))(*(_QWORD *)(v321 + 64) + 16))();

LABEL_72:
  _Block_object_dispose(&v350, 8);
  _Block_object_dispose(&v354, 8);
  _Block_object_dispose(&v358, 8);
  _Block_object_dispose(v362, 8);

}

void sub_1BE85077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x260], 8);

  _Unwind_Resume(a1);
}

void sub_1BE850A28(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CGFloat *v19;
  CGFloat x;
  CGFloat y;
  double width;
  CGFloat height;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t j;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __CFString *v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t k;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  double v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  double v158;
  double v159;
  double v160;
  _BOOL4 v161;
  NSObject *v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const __CFString *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  NSObject *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __CFString *v183;
  NSObject *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __CFString *v190;
  void *v191;
  void *v192;
  id v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint8_t buf[4];
  const __CFString *v203;
  __int16 v204;
  double v205;
  __int16 v206;
  double v207;
  __int16 v208;
  uint64_t v209;
  _BYTE v210[128];
  _BYTE v211[128];
  uint64_t v212;
  CGRect v213;
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;

  v212 = *MEMORY[0x1E0C80C00];
  v193 = a2;
  objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v193, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v8, v15, (uint64_t)v14, v16, v17, v18);
  v192 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = (CGFloat *)MEMORY[0x1E0C9D628];
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v200 = 0u;
  v201 = 0u;
  v198 = 0u;
  v199 = 0u;
  v30 = v192;
  v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v198, (uint64_t)v211, 16, v32);
  if (v36)
  {
    v37 = *(_QWORD *)v199;
    do
    {
      for (i = 0; i != v36; ++i)
      {
        if (*(_QWORD *)v199 != v37)
          objc_enumerationMutation(v30);
        objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v33, *(_QWORD *)(*((_QWORD *)&v198 + 1) + 8 * i), *(_QWORD *)(a1 + 40), v34, v35);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = v39;
        if (v39)
        {
          objc_msgSend_bounds(v39, v40, v41, v42, v43, v44);
          v220.origin.x = v46;
          v220.origin.y = v47;
          v220.size.width = v48;
          v220.size.height = v49;
          v213.origin.x = x;
          v213.origin.y = y;
          v213.size.width = width;
          v213.size.height = height;
          v214 = CGRectUnion(v213, v220);
          x = v214.origin.x;
          y = v214.origin.y;
          width = v214.size.width;
          height = v214.size.height;
          objc_msgSend_addObject_(v29, v50, (uint64_t)v45, v51, v52, v53);
        }

      }
      v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v198, (uint64_t)v211, 16, v35);
    }
    while (v36);
  }

  objc_msgSend_bounds(*(void **)(a1 + 48), v54, v55, v56, v57, v58);
  v221.origin.x = v59;
  v221.origin.y = v60;
  v221.size.width = v61;
  v221.size.height = v62;
  v215.origin.x = x;
  v215.origin.y = y;
  v215.size.width = width;
  v215.size.height = height;
  if (CGRectIntersectsRect(v215, v221))
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v63, v64, v65, v66, v67);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    for (j = 0; j < objc_msgSend_count(v30, v68, v69, v70, v71, v72); ++j)
    {
      objc_msgSend_objectAtIndexedSubscript_(v29, v75, j, v76, v77, v78);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isStroke_intersectingPolygon_(CHStrokeUtilities, v80, (uint64_t)v79, *(_QWORD *)(a1 + 72), v81, v82))
      {
        objc_msgSend_objectAtIndexedSubscript_(v30, v83, j, v84, v85, v86);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v73, v88, (uint64_t)v87, v89, v90, v91);

      }
    }
    v99 = *v19;
    v100 = v19[1];
    v101 = v19[2];
    v102 = v19[3];
    v194 = 0u;
    v195 = 0u;
    v196 = 0u;
    v197 = 0u;
    v92 = v73;
    v108 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v103, (uint64_t)&v194, (uint64_t)v210, 16, v104);
    if (v108)
    {
      v109 = *(_QWORD *)v195;
      do
      {
        for (k = 0; k != v108; ++k)
        {
          if (*(_QWORD *)v195 != v109)
            objc_enumerationMutation(v92);
          objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v105, *(_QWORD *)(*((_QWORD *)&v194 + 1) + 8 * k), *(_QWORD *)(a1 + 40), v106, v107);
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          v117 = v111;
          if (v111)
          {
            objc_msgSend_bounds(v111, v112, v113, v114, v115, v116);
            v222.origin.x = v118;
            v222.origin.y = v119;
            v222.size.width = v120;
            v222.size.height = v121;
            v216.origin.x = v99;
            v216.origin.y = v100;
            v216.size.width = v101;
            v216.size.height = v102;
            v217 = CGRectUnion(v216, v222);
            v99 = v217.origin.x;
            v100 = v217.origin.y;
            v101 = v217.size.width;
            v102 = v217.size.height;
          }

        }
        v108 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v105, (uint64_t)&v194, (uint64_t)v210, 16, v107);
      }
      while (v108);
    }

    v218.origin.x = x;
    v218.origin.y = y;
    v218.size.width = width;
    v218.size.height = height;
    v223.origin.x = v99;
    v223.origin.y = v100;
    v223.size.width = v101;
    v223.size.height = v102;
    v219 = CGRectIntersection(v218, v223);
    v122 = v219.size.width;
    v123 = (void *)objc_opt_class();
    objc_msgSend_polygonForStrokes_(v123, v124, (uint64_t)v29, v125, v126, v127);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_polygonDrawing(v128, v129, v130, v131, v132, v133);
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v134, v135, v136, v137, v138, v139);
    v141 = v140;

    objc_msgSend_polygonByIntersectingWithClipPolygon_(*(void **)(a1 + 72), v142, (uint64_t)v128, v143, v144, v145);
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_polygonDrawing(v191, v146, v147, v148, v149, v150);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v151, v152, v153, v154, v155, v156);
    v158 = v157;

    v159 = v122 / width;
    v160 = v158 / fmax(v141, 0.00001);
    v161 = v160 >= 0.5 && v159 >= 0.5;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v162 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_string(v193, v163, v164, v165, v166, v167);
      v168 = objc_claimAutoreleasedReturnValue();
      v169 = (void *)v168;
      v170 = CFSTR("NO");
      *(_DWORD *)buf = 138413059;
      if (v161)
        v170 = CFSTR("YES");
      v203 = v170;
      v204 = 2048;
      v205 = v159;
      v206 = 2048;
      v207 = v160;
      v208 = 2117;
      v209 = v168;
      _os_log_impl(&dword_1BE607000, v162, OS_LOG_TYPE_DEBUG, "ScratchOut: isTokenFullyCovered: %@, intersectingRectWidthRatio %.2f, areaRatio %.2f, token: %{sensitive}@", buf, 0x2Au);

    }
    if (v161)
    {
      v176 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
        goto LABEL_49;
    }
    else if (objc_msgSend_count(v92, v171, v172, v173, v174, v175))
    {
      objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 80), v171, (uint64_t)v92, v173, v174, v175);
      v176 = 1;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
      {
LABEL_49:
        if (v161)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = objc_msgSend_count(*(void **)(a1 + 56), v171, v172, v173, v174, v175);
        }
        else if (!v176)
        {
LABEL_53:
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))
          {
            objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 64), v171, (uint64_t)v30, v173, v174, v175);
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v177 = (id)qword_1EF568E28;
            if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_string(v193, v178, v179, v180, v181, v182);
              v183 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138739971;
              v203 = v183;
              _os_log_impl(&dword_1BE607000, v177, OS_LOG_TYPE_DEBUG, "ScratchOut: paragraph-level result augmented with tentative token: %{sensitive}@", buf, 0xCu);

            }
          }
          if ((v161 | v176) == 1)
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = objc_msgSend_count(*(void **)(a1 + 64), v171, v172, v173, v174, v175);
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v184 = (id)qword_1EF568E28;
            if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_string(v193, v185, v186, v187, v188, v189);
              v190 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138739971;
              v203 = v190;
              _os_log_impl(&dword_1BE607000, v184, OS_LOG_TYPE_DEBUG, "ScratchOut: committing paragraph-level result at token: %{sensitive}@", buf, 0xCu);

            }
          }

LABEL_66:
          goto LABEL_67;
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 1;
        goto LABEL_53;
      }
    }
    else
    {
      v176 = 0;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
        goto LABEL_49;
    }
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 56), v171, (uint64_t)v30, v173, v174, v175);
    goto LABEL_49;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 56), v63, (uint64_t)v30, v65, v66, v67);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))
  {
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 64), v63, (uint64_t)v30, v65, v66, v67);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v92 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_string(v193, v93, v94, v95, v96, v97);
      v98 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138739971;
      v203 = v98;
      _os_log_impl(&dword_1BE607000, v92, OS_LOG_TYPE_DEBUG, "ScratchOut: paragraph-level result augmented with tentative token: %{sensitive}@", buf, 0xCu);

    }
    goto LABEL_66;
  }
LABEL_67:

}

void sub_1BE851214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE8514E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE851534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE851560(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  double v19;
  CHTextTransformationManager *v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  id v43;
  id v44;
  __int128 buf;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  objc_msgSend_date(MEMORY[0x1E0C99D68], a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v43 = 0;
  v44 = 0;
  sub_1BE84AA04(v8, v9, 2, 1, 1, &v44, &v43, *(void **)(a1 + 64));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v44;
  v17 = v43;
  if (v10)
  {
    objc_msgSend_timeIntervalSinceNow(v7, v12, v13, v14, v15, v16);
    v19 = v18;
    v20 = [CHTextTransformationManager alloc];
    v22 = objc_msgSend_initWithContextStrokes_relatedNonTextStrokes_parameters_contextResults_strokeGroupingResult_strokeClassificationResult_strokeProvider_(v20, v21, *(_QWORD *)(a1 + 40), MEMORY[0x1E0C9AA60], *(_QWORD *)(a1 + 48), (uint64_t)v10, v11, v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v28 = v22;
    if (v22)
    {
      objc_msgSend_transformWithProgress_shouldCancel_(v22, v23, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v26, v27);
      v29 = v46;
    }
    else
    {
      v29 = 0;
      buf = 0uLL;
      v46 = 0;
    }
    v36 = v19 * -1000.0;
    *(float *)&v36 = v19 * -1000.0;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v23, v24, v25, v26, v27, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forKey_(v29, v38, (uint64_t)v37, (uint64_t)CFSTR("time_for_recognition_ms"), v39, v40);

    v41 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v42 = *(_QWORD *)(a1 + 72);
    if (v41)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v42 + 16))(v42, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA70]);
    else
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v42 + 16))(v42, buf, *((_QWORD *)&buf + 1), v46);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v28 = (id)qword_1EF568E68;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v35 = objc_msgSend_count(*(void **)(a1 + 40), v30, v31, v32, v33, v34);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v35;
      _os_log_impl(&dword_1BE607000, v28, OS_LOG_TYPE_ERROR, "Unable to build stroke point transformation result for input with %ld context strokes", (uint8_t *)&buf, 0xCu);
    }
  }

}

void sub_1BE8517F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id *sub_1BE851860(id *a1)
{

  return a1;
}

id sub_1BE851898(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  char v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  const char *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  void *v126;
  void (**v127)(id, id, void *);
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  id v135;
  id v136;
  _QWORD v137[5];
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  _BYTE *v146;
  uint64_t *v147;
  float v148;
  char v149;
  _QWORD v150[7];
  uint64_t v151;
  double *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[4];
  id v164;
  uint64_t *v165;
  _QWORD v166[5];
  id v167;
  id v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  __n128 (*v173)(__n128 *, __n128 *);
  uint64_t (*v174)();
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t (*v181)(uint64_t, uint64_t);
  void (*v182)(uint64_t);
  id v183;
  _BYTE buf[24];
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  int v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v134 = a3;
  v135 = a4;
  v136 = a5;
  if (!a1)
  {
    v124 = 0;
    goto LABEL_21;
  }
  v178 = 0;
  v179 = &v178;
  v180 = 0x3032000000;
  v181 = sub_1BE83F220;
  v182 = sub_1BE83F230;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v10, v11, v12, v13, v14);
  v183 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textResult(v9, v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rawTranscriptionPath(v20, v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_textResult(v9, v27, v28, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rawTranscription(v32, v33, v34, v35, v36, v37);
  v133 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v38, v39, v40, v41, v42);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v43, v44, v45, v46, v47);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = 0;
  v171 = &v170;
  v172 = 0x4012000000;
  v173 = sub_1BE852104;
  v174 = nullsub_43;
  v177 = 0;
  v48 = MEMORY[0x1E0C809B0];
  v175 = &unk_1BE94989A;
  v176 = 0;
  v166[0] = MEMORY[0x1E0C809B0];
  v166[1] = 3221225472;
  v166[2] = sub_1BE852518;
  v166[3] = &unk_1E77F6220;
  v166[4] = a1;
  v167 = v135;
  v49 = v136;
  v168 = v49;
  v169 = &v178;
  v130 = (void *)MEMORY[0x1C3B81A84](v166);
  v163[0] = v48;
  v163[1] = 3221225472;
  v163[2] = sub_1BE8528DC;
  v163[3] = &unk_1E77F6248;
  v164 = v49;
  v165 = &v178;
  v132 = (void *)MEMORY[0x1C3B81A84](v163);
  v50 = (void *)objc_opt_class();
  objc_msgSend_autoRefineTriggerFactor(v50, v51, v52, v53, v54, v55);
  v57 = v56;
  v159 = 0;
  v160 = &v159;
  v161 = 0x2020000000;
  v162 = 0;
  v155 = 0;
  v156 = &v155;
  v157 = 0x2020000000;
  v158 = 0;
  v151 = 0;
  v152 = (double *)&v151;
  v153 = 0x2020000000;
  v154 = 0;
  objc_msgSend_textResult(v9, v58, v59, v60, v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textResult(v9, v64, v65, v66, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend_tokenColumnCount(v69, v70, v71, v72, v73, v74);
  v150[0] = v48;
  v150[1] = 3221225472;
  v150[2] = sub_1BE8529C4;
  v150[3] = &unk_1E77F6270;
  v150[4] = &v151;
  v150[5] = &v159;
  v150[6] = &v155;
  objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v63, v76, (uint64_t)v26, 0, v75, (uint64_t)v150);

  v82 = v156[3];
  if (v82 <= 0)
  {
    v152[3] = 0.0;
LABEL_7:
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v85 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_textResult(v9, v86, v87, v88, v89, v90);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_topTranscription(v91, v92, v93, v94, v95, v96);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      v98 = v156[3];
      v99 = v160[3];
      v100 = *((_QWORD *)v152 + 3);
      *(_DWORD *)buf = 138740995;
      *(_QWORD *)&buf[4] = v97;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v98;
      *(_WORD *)&buf[22] = 2048;
      v185 = v99;
      v186 = 2048;
      v187 = v100;
      v188 = 1024;
      v189 = 0;
      _os_log_impl(&dword_1BE607000, v85, OS_LOG_TYPE_DEFAULT, "Line synthesis for Refine or AutoRefine processed. string: \"%{sensitive}@\", token count = %ld, refinable tokens: %ld, averageOrientation %.2f, -> Line orientation refinable ? %d.", buf, 0x30u);

    }
    v84 = 0;
    goto LABEL_12;
  }
  v83 = v152[3] / (double)v82;
  v152[3] = v83;
  if ((double)v82 * 0.5 >= (double)v160[3] || v83 > 0.6)
    goto LABEL_7;
  v84 = 1;
LABEL_12:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v185) = 0;
  objc_msgSend_textResult(v9, v77, v78, v79, v80, v81);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textResult(v9, v102, v103, v104, v105, v106);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = objc_msgSend_tokenColumnCount(v107, v108, v109, v110, v111, v112);
  v114 = v57;
  v137[0] = v48;
  v137[1] = 3221225472;
  v137[2] = sub_1BE852A7C;
  v137[3] = &unk_1E77F6298;
  v146 = buf;
  v137[4] = a1;
  v148 = v114 * 0.75;
  v149 = v84;
  v147 = &v170;
  v115 = v133;
  v138 = v115;
  v143 = &unk_1E77EF468;
  v116 = v129;
  v139 = v116;
  v117 = v130;
  v144 = v117;
  v118 = v132;
  v145 = v118;
  v119 = v131;
  v140 = v119;
  v141 = v9;
  v142 = v134;
  objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v101, v120, (uint64_t)v26, 0, v113, (uint64_t)v137);

  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    v124 = 0;
  }
  else
  {
    v125 = v171[7];
    if (v125)
    {
      objc_msgSend_substringWithRange_(v115, v121, v171[6], v125, v122, v123);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      if (sub_1BE852114((uint64_t)v126, v116, v126))
        v127 = (void (**)(id, id, void *))v117;
      else
        v127 = (void (**)(id, id, void *))v118;
      v127[2](v127, v116, v126);

    }
    v124 = (id)v179[5];
  }

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v151, 8);
  _Block_object_dispose(&v155, 8);
  _Block_object_dispose(&v159, 8);

  _Block_object_dispose(&v170, 8);
  _Block_object_dispose(&v178, 8);

LABEL_21:
  return v124;
}

void sub_1BE851F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a64;
  id a65;
  char a67;
  void *v67;
  void *v68;
  uint64_t v69;

  _Block_object_dispose((const void *)(v69 - 192), 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v69 - 240), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1BE852104(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1BE852114(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  double v48;
  double v49;
  double v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  double v65;
  double v66;
  double v67;
  BOOL v69;
  uint64_t v70;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, void *, uint64_t);
  void *v88;
  id v89;
  id v90;
  uint8_t buf[4];
  id v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  uint64_t v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = MEMORY[0x1E0C809B0];
  v86 = 3221225472;
  v87 = sub_1BE8524B0;
  v88 = &unk_1E77F6160;
  v18 = v11;
  v89 = v18;
  v19 = v17;
  v90 = v19;
  objc_msgSend_enumerateObjectsUsingBlock_(v4, v20, (uint64_t)&v85, v21, v22, v23);
  if (!objc_msgSend_count(v18, v24, v25, v26, v27, v28, v85, v86, v87, v88)
    || (unint64_t)objc_msgSend_count(v19, v29, v30, v31, v32, v33) > 2)
  {
    goto LABEL_13;
  }
  objc_msgSend_objectsAtIndexes_(v4, v34, (uint64_t)v18, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_boundsForStrokes_(CHStrokeUtilities, v39, (uint64_t)v38, v40, v41, v42);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v49;

  objc_msgSend_objectsAtIndexes_(v4, v51, (uint64_t)v19, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_boundsForStrokes_(CHStrokeUtilities, v56, (uint64_t)v55, v57, v58, v59);
  v61 = v60;
  v63 = v62;
  v65 = v64;
  v67 = v66;

  v106.origin.x = v44;
  v106.origin.y = v46;
  v106.size.width = v48;
  v106.size.height = v50;
  v108.origin.x = v61;
  v108.origin.y = v63;
  v108.size.width = v65;
  v108.size.height = v67;
  v107 = CGRectIntersection(v106, v108);
  if (v65 > v48 * 0.3 || v67 > v50 * 0.5)
    goto LABEL_13;
  v69 = v107.size.width <= v65 * 0.5;
  if (v107.size.height > v67 * 0.5)
    v69 = 0;
  if (v65 < v48 * 0.2 || v67 < v50 * 0.2 || v69)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v72 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      v78 = objc_msgSend_count(v19, v73, v74, v75, v76, v77);
      v84 = objc_msgSend_count(v18, v79, v80, v81, v82, v83);
      *(_DWORD *)buf = 138741507;
      v92 = v5;
      v93 = 2048;
      v94 = v78;
      v95 = 2048;
      v96 = v65;
      v97 = 2048;
      v98 = v67;
      v99 = 2048;
      v100 = v84;
      v101 = 2048;
      v102 = v48;
      v103 = 2048;
      v104 = v50;
      _os_log_impl(&dword_1BE607000, v72, OS_LOG_TYPE_DEFAULT, "Token synthesis for Refine or AutoRefine skipped. string: \"%{sensitive}@\", new strokes %ld with bounds = %.2f,%.2f, refined strokes %ld with bounds = %.2f,%.2f", buf, 0x48u);
    }

    v70 = 0;
  }
  else
  {
LABEL_13:
    v70 = 1;
  }

  return v70;
}

void sub_1BE852430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE8524B0(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v16 = a2;
  v10 = objc_msgSend_strokeAttributes(v16, v5, v6, v7, v8, v9);
  v15 = 32;
  if ((v10 & 4) == 0)
    v15 = 40;
  objc_msgSend_addIndex_(*(void **)(a1 + v15), v11, a3, v12, v13, v14);

}

void sub_1BE852504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE852518(_QWORD *a1, void *a2, void *a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  uint8_t buf[4];
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  v80 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v5 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138740227;
    v82 = (uint64_t)v80;
    v83 = 2048;
    v84 = objc_msgSend_count(v79, v6, v7, v8, v9, v10);
    _os_log_impl(&dword_1BE607000, v5, OS_LOG_TYPE_DEFAULT, "AutoRefine Triggering synthesis for %{sensitive}@ with %ld strokes", buf, 0x16u);
  }

  v12 = (void *)a1[4];
  v11 = (void *)a1[5];
  v13 = (void *)a1[6];
  v14 = v79;
  v15 = v11;
  v16 = v80;
  v17 = v13;
  if (v12)
  {
    v18 = (void *)objc_opt_class();
    objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(v18, v19, (uint64_t)v14, 1, 2, (uint64_t)v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_strokeCount(v20, v21, v22, v23, v24, v25))
    {
      objc_msgSend_sortedDrawingUsingStrokeMidPoint_(v20, v26, 0, v27, v28, v29);
      v30 = objc_claimAutoreleasedReturnValue();

      objc_msgSend_textSynthesizer(v12, v31, v32, v33, v34, v35);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        objc_msgSend_synthesisOptionsWithStyleStrength_(CHSynthesisRequestOptions, v36, (uint64_t)v15, v38, v39, v40);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dictionary(v42, v43, v44, v45, v46, v47, v79);
      }
      else
      {
        v42 = 0;
        objc_msgSend_dictionary(0, v36, v37, v38, v39, v40, v79);
      }
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_refineDrawing_transcription_options_shouldCancel_error_(v41, v49, v30, (uint64_t)v16, (uint64_t)v48, (uint64_t)v17, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = (void *)v30;
    }
    else
    {
      v12 = 0;
    }

  }
  if (!v12
    || (objc_msgSend_drawing(v12, v50, v51, v52, v53, v54),
        v55 = (void *)objc_claimAutoreleasedReturnValue(),
        v61 = objc_msgSend_strokeCount(v55, v56, v57, v58, v59, v60) == 0,
        v55,
        v61))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v66 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v72 = objc_msgSend_length(v16, v67, v68, v69, v70, v71);
      v78 = objc_msgSend_count(v14, v73, v74, v75, v76, v77);
      *(_DWORD *)buf = 134218499;
      v82 = v72;
      v83 = 2117;
      v84 = (uint64_t)v16;
      v85 = 2048;
      v86 = v78;
      _os_log_impl(&dword_1BE607000, v66, OS_LOG_TYPE_ERROR, "Chunk synthesis for AutoRefine failed, chunk length = %ld, string = %{sensitive}@, strokes to replace = %ld", buf, 0x20u);
    }

  }
  else
  {
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1[7] + 8) + 40), v62, (uint64_t)v12, v63, v64, v65);
  }

}

void sub_1BE852834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE8528DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  void *v8;
  CHSynthesisResult *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v18 = a2;
  v5 = a3;
  v6 = (void *)objc_opt_class();
  objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(v6, v7, (uint64_t)v18, 1, 2, *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = [CHSynthesisResult alloc];
  v13 = (void *)objc_msgSend_initWithContent_drawing_(v9, v10, (uint64_t)v5, (uint64_t)v8, v11, v12);
  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v14, (uint64_t)v13, v15, v16, v17);

}

void sub_1BE852984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8529AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8529C4(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  objc_msgSend_principalOrientation(v17, v3, v4, v5, v6, v7);
  *(double *)(*(_QWORD *)(a1[4] + 8) + 24) = fabs(v8) + *(double *)(*(_QWORD *)(a1[4] + 8) + 24);
  objc_msgSend_principalOrientation(v17, v9, v10, v11, v12, v13);
  v15 = *(_QWORD *)(a1[5] + 8);
  v16 = *(_QWORD *)(v15 + 24);
  if (fabs(v14) <= 0.6)
    ++v16;
  *(_QWORD *)(v15 + 24) = v16;
  ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);

}

void sub_1BE852A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE852A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE852A7C(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL8 v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  float v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int hasValidPrincipalLines;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  BOOL v79;
  int v80;
  double v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const __CFString *v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  const __CFString *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t Index;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  void *v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  NSObject *v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  int v263;
  uint64_t v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  void *v309;
  int v310;
  uint64_t v311;
  void *v312;
  uint8_t buf[4];
  uint64_t v314;
  __int16 v315;
  void *v316;
  __int16 v317;
  uint64_t v318;
  __int16 v319;
  _BYTE v320[10];
  _BYTE v321[10];
  uint64_t v322;
  _BYTE v323[6];
  uint64_t v324;
  __int16 v325;
  int v326;
  __int16 v327;
  const __CFString *v328;
  __CFString *v329;
  _QWORD v330[3];

  v330[1] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v12 = v6;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
  {
    v13 = objc_msgSend_properties(v6, v7, v8, v9, v10, v11);
    objc_msgSend_string(v12, v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_length(v19, v20, v21, v22, v23, v24);
    v26 = v13 & 0x20;

    if (*a4)
      v32 = 0;
    else
      v32 = a4[2] == 0;
    v33 = (v13 & 0x20) != 0 && !v32;
    objc_msgSend_textSynthesizer(*(void **)(a1 + 32), v27, v28, v29, v30, v31);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v12, v35, v36, v37, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v329 = CHTextSynthesisOptionSupportedCharactersStrict[0];
    v330[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v41, (uint64_t)v330, (uint64_t)&v329, 1, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_supportedCharacterIndexesForString_options_(v34, v44, (uint64_t)v40, (uint64_t)v43, v45, v46);
    v312 = (void *)objc_claimAutoreleasedReturnValue();

    v52 = objc_msgSend_count(v312, v47, v48, v49, v50, v51);
    objc_msgSend_recognitionScore(v12, v53, v54, v55, v56, v57);
    v59 = v58;
    v60 = *(float *)(a1 + 120);
    hasValidPrincipalLines = objc_msgSend_hasValidPrincipalLines(v12, v61, v62, v63, v64, v65);
    objc_msgSend_principalOrientation(v12, v67, v68, v69, v70, v71);
    v78 = v60;
    if (*(_BYTE *)(a1 + 124))
      v79 = v52 == v25;
    else
      v79 = 0;
    v80 = v79;
    v81 = fabs(v77);
    if (v59 <= v78)
      v80 = 0;
    if (v81 <= 0.6)
      v82 = v80;
    else
      v82 = 0;
    v83 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
    v84 = *(_QWORD *)(v83 + 56);
    v311 = v25 + v33;
    if ((unint64_t)(v84 + v25 + v33) >= 0x2E)
    {
      v310 = v82;
      v85 = hasValidPrincipalLines;
      v86 = *(_QWORD *)(v83 + 48);
      if (v86 + v84 <= (unint64_t)objc_msgSend_length(*(void **)(a1 + 40), v72, v73, v74, v75, v76))
      {
        objc_msgSend_substringWithRange_(*(void **)(a1 + 40), v87, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 56), v88, v89);
        v90 = objc_claimAutoreleasedReturnValue();
        hasValidPrincipalLines = v85;
        v114 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
        v82 = v310;
        v115 = 96;
        if (v114)
          v115 = 88;
        (*(void (**)(void))(*(_QWORD *)(a1 + v115) + 16))();
        v116 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
        *(_QWORD *)(v116 + 48) += *(_QWORD *)(v116 + 56);
        *(_QWORD *)(v116 + 56) = 0;
        objc_msgSend_removeAllObjects(*(void **)(a1 + 48), v117, v118, v119, v120, v121);
        objc_msgSend_removeAllObjects(*(void **)(a1 + 56), v122, v123, v124, v125, v126);
      }
      else
      {
        hasValidPrincipalLines = v85;
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v90 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
        {
          v96 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
          v306 = *(_QWORD *)(v96 + 48);
          v308 = *(void **)(v96 + 56);
          v97 = *(void **)(a1 + 40);
          v307 = objc_msgSend_length(v97, v91, v92, v93, v94, v95);
          objc_msgSend_string(v12, v98, v99, v100, v101, v102);
          v309 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_string(v12, v103, v104, v105, v106, v107);
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134219779;
          v314 = v306;
          v315 = 2048;
          v316 = v308;
          v317 = 2117;
          v318 = (uint64_t)v97;
          v319 = 2048;
          *(_QWORD *)v320 = v307;
          *(_WORD *)&v320[8] = 2117;
          *(_QWORD *)v321 = v309;
          *(_WORD *)&v321[8] = 2048;
          v322 = objc_msgSend_length(v108, v109, v110, v111, v112, v113);
          *(_WORD *)v323 = 1024;
          *(_DWORD *)&v323[2] = v26 >> 5;
          LOWORD(v324) = 1024;
          *(_DWORD *)((char *)&v324 + 2) = v32;
          _os_log_impl(&dword_1BE607000, v90, OS_LOG_TYPE_FAULT, "Unexpected currentRange = (%ld, %ld), vs transcription %{sensitive}@, length = %ld - after handling token %{sensitive}@, length = %ld, hasPrecedingSpace ? %d, isFirstToken ? %d", buf, 0x4Au);

          hasValidPrincipalLines = v85;
          v82 = v310;

        }
        else
        {
          v82 = v310;
        }
      }

    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v127 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      if (v82)
        v133 = CFSTR("processed");
      else
        v133 = CFSTR("skipped");
      objc_msgSend_string(v12, v128, v129, v130, v131, v132);
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recognitionScore(v12, v135, v136, v137, v138, v139);
      v141 = v140;
      v142 = *(float *)(a1 + 120);
      objc_msgSend_principalOrientation(v12, v143, v144, v145, v146, v147);
      v149 = *(unsigned __int8 *)(a1 + 124);
      *(_DWORD *)buf = 138414851;
      v314 = (uint64_t)v133;
      v315 = 2117;
      v316 = v134;
      v150 = CFSTR("fallback refine");
      v317 = 2048;
      v318 = v141;
      if (v82)
        v150 = CFSTR("refine");
      v319 = 1024;
      *(_DWORD *)v320 = v52 == v25;
      *(_WORD *)&v320[4] = 1024;
      *(_DWORD *)&v320[6] = v59 > v78;
      *(_WORD *)v321 = 2048;
      *(double *)&v321[2] = v142;
      LOWORD(v322) = 1024;
      *(_DWORD *)((char *)&v322 + 2) = hasValidPrincipalLines;
      HIWORD(v322) = 1024;
      *(_DWORD *)v323 = v81 <= 0.6;
      *(_WORD *)&v323[4] = 2048;
      v324 = v148;
      v325 = 1024;
      v326 = v149;
      v327 = 2112;
      v328 = v150;
      _os_log_impl(&dword_1BE607000, v127, OS_LOG_TYPE_DEFAULT, "Token synthesis for Refine or AutoRefine %@. string: \"%{sensitive}@\" (p=%1.2f), supported ? %d sufficiently confident ? %d (threshold = %.2f), hasValidPrincipalLines ? %d, hasRefinableOrientation ? %d (angle = %.2f). Line orientation refinable ? %d. Applying %@ behavior.", buf, 0x5Cu);

    }
    objc_msgSend_strokeIndexes(v12, v151, v152, v153, v154, v155);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    Index = objc_msgSend_lastIndex(v156, v157, v158, v159, v160, v161);
    objc_msgSend_textResult(*(void **)(a1 + 64), v163, v164, v165, v166, v167);
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inputStrokeIdentifiers(v168, v169, v170, v171, v172, v173);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(Index) = Index < objc_msgSend_count(v174, v175, v176, v177, v178, v179);

    if ((Index & 1) != 0)
    {
      if (v82)
      {
        objc_msgSend_textResult(*(void **)(a1 + 64), v180, v181, v182, v183, v184);
        v185 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputStrokeIdentifiers(v185, v186, v187, v188, v189, v190);
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIndexes(v12, v192, v193, v194, v195, v196);
        v197 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectsAtIndexes_(v191, v198, (uint64_t)v197, v199, v200, v201);
        v202 = (void *)objc_claimAutoreleasedReturnValue();

        v203 = *(void **)(a1 + 56);
        v204 = (void *)objc_opt_class();
        objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v204, v205, (uint64_t)v202, *(_QWORD *)(a1 + 72), v206, v207);
        v208 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObjectsFromArray_(v203, v209, (uint64_t)v208, v210, v211, v212);

        v213 = *(void **)(a1 + 48);
        v214 = (void *)objc_opt_class();
        objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v214, v215, (uint64_t)v202, *(_QWORD *)(a1 + 72), v216, v217);
        v218 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObjectsFromArray_(v213, v219, (uint64_t)v218, v220, v221, v222);

        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 56) += v311;
      }
      else
      {
        v260 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
        v261 = *(_QWORD *)(v260 + 56);
        if (v261)
        {
          objc_msgSend_substringWithRange_(*(void **)(a1 + 40), v180, *(_QWORD *)(v260 + 48), v261, v183, v184);
          v262 = (void *)objc_claimAutoreleasedReturnValue();
          v263 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
          v264 = 96;
          if (v263)
            v264 = 88;
          (*(void (**)(void))(*(_QWORD *)(a1 + v264) + 16))();

        }
        objc_msgSend_textResult(*(void **)(a1 + 64), v180, v181, v261, v183, v184);
        v265 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputStrokeIdentifiers(v265, v266, v267, v268, v269, v270);
        v271 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIndexes(v12, v272, v273, v274, v275, v276);
        v277 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectsAtIndexes_(v271, v278, (uint64_t)v277, v279, v280, v281);
        v282 = (void *)objc_claimAutoreleasedReturnValue();

        v283 = (void *)objc_opt_class();
        objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v283, v284, (uint64_t)v282, *(_QWORD *)(a1 + 72), v285, v286);
        v287 = (void *)objc_claimAutoreleasedReturnValue();
        v288 = *(_QWORD *)(a1 + 96);
        objc_msgSend_string(v12, v289, v290, v291, v292, v293);
        v294 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *, void *))(v288 + 16))(v288, v287, v294);

        v295 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
        *(_QWORD *)(v295 + 48) += v311 + *(_QWORD *)(v295 + 56);
        *(_QWORD *)(v295 + 56) = 0;
        objc_msgSend_removeAllObjects(*(void **)(a1 + 48), v296, v297, v298, v299, v300);
        objc_msgSend_removeAllObjects(*(void **)(a1 + 56), v301, v302, v303, v304, v305);

      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v223 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v223, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend_textResult(*(void **)(a1 + 64), v224, v225, v226, v227, v228);
        v229 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputStrokeIdentifiers(v229, v230, v231, v232, v233, v234);
        v235 = (void *)objc_claimAutoreleasedReturnValue();
        v241 = objc_msgSend_count(v235, v236, v237, v238, v239, v240);
        objc_msgSend_strokeIndexes(v12, v242, v243, v244, v245, v246);
        v247 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_description(v247, v248, v249, v250, v251, v252);
        v253 = (void *)objc_claimAutoreleasedReturnValue();
        v259 = objc_msgSend_properties(v12, v254, v255, v256, v257, v258);
        *(_DWORD *)buf = 134218498;
        v314 = v241;
        v315 = 2112;
        v316 = v253;
        v317 = 2048;
        v318 = v259;
        _os_log_impl(&dword_1BE607000, v223, OS_LOG_TYPE_FAULT, "Error: contextualResult.textResult.inputStrokeIdentifiers has %ld strokes. Incompatible with token stroke indexes %@ and properties=%lu", buf, 0x20u);

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
    }

  }
}

void sub_1BE85330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE853A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

id sub_1BE853BDC(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  const char *v74;
  void *v75;
  id v76;
  void *v77;
  id v79;
  id v80;
  id v81;

  v79 = a2;
  v9 = a3;
  v80 = a4;
  if (a1)
  {
    objc_msgSend_textResult(v9, v10, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textResult(v9, v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_transcriptionPaths(v21, v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v27, v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textResult(v9, v34, v35, v36, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topTranscription(v39, v40, v41, v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend_length(v45, v46, v47, v48, v49, v50);
    objc_msgSend_tokensFromTranscriptionPath_characterRange_(v15, v52, (uint64_t)v33, 0, v51, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    v55 = (void *)objc_opt_class();
    objc_msgSend_textResult(v9, v56, v57, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inputStrokeIdentifiers(v61, v62, v63, v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v55, v68, (uint64_t)v67, (uint64_t)v80, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();

    v72 = v79;
    v73 = (void *)objc_opt_class();
    v81 = 0;
    objc_msgSend_alignReflowableTokens_resultTokens_strokeIdentifiers_outStrokeIdentifiers_(v73, v74, (uint64_t)v79, (uint64_t)v54, (uint64_t)v71, (uint64_t)&v81);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v81;
    v77 = v76;
    if (a5)
      *a5 = objc_retainAutorelease(v76);

  }
  else
  {
    v75 = 0;
    v72 = v79;
  }

  return v75;
}

void sub_1BE853D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8540B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE854164(uint64_t a1)
{
  uint64_t v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  NSObject *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  id v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint8_t v203[128];
  uint8_t buf[4];
  uint64_t v205;
  __int16 v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 72) + 16))())
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60]);
    return;
  }
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v8 = v3;
  if (v2)
  {
    objc_msgSend_forcedCachedContextualResultCoveringStrokes_(*(void **)(v2 + 8), v4, (uint64_t)v3, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v15 = *(void **)(a1 + 32);
      objc_msgSend_latestStrokeProvider(v15, v10, v11, v12, v13, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v196 = v9;
      sub_1BE851898((uint64_t)v15, v9, v16, *(void **)(a1 + 56), *(void **)(a1 + 72));
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v194 = v17;
      v23 = objc_msgSend_totalUnitCount(*(void **)(a1 + 64), v18, v19, v20, v21, v22);
      objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 64), v24, v23, v25, v26, v27);
      if (objc_msgSend_count(v17, v28, v29, v30, v31, v32))
      {
        if (((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))() & 1) == 0
          && objc_msgSend_count(v17, v33, v34, v35, v36, v37))
        {
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v38, v39, v40, v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          v44 = v17;
          v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v45, (uint64_t)&v199, (uint64_t)v203, 16, v46);
          if (v52)
          {
            v53 = *(_QWORD *)v200;
            while (2)
            {
              for (i = 0; i != v52; ++i)
              {
                if (*(_QWORD *)v200 != v53)
                  objc_enumerationMutation(v44);
                v55 = *(void **)(*((_QWORD *)&v199 + 1) + 8 * i);
                objc_msgSend_drawing(v55, v47, v48, v49, v50, v51);
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                v62 = objc_msgSend_strokeCount(v56, v57, v58, v59, v60, v61) == 0;

                if (v62)
                {
                  if (qword_1EF568E88 != -1)
                    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                  v109 = (id)qword_1EF568E18[0];
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                  {
                    objc_msgSend_content(v55, v110, v111, v112, v113, v114);
                    v115 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138739971;
                    v205 = (uint64_t)v115;
                    _os_log_impl(&dword_1BE607000, v109, OS_LOG_TYPE_ERROR, "Session synthesis for autorefine stopping because synthesizer generated an empty drawing for string %{sensitive}@", buf, 0xCu);

                  }
                  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
                  goto LABEL_32;
                }
                objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v63, (uint64_t)v55, *(_QWORD *)(a1 + 72), v64, v65);
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObjectsFromArray_(v43, v67, (uint64_t)v66, v68, v69, v70);

              }
              v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v47, (uint64_t)&v199, (uint64_t)v203, 16, v51);
              if (v52)
                continue;
              break;
            }
          }

          objc_msgSend_array(MEMORY[0x1E0C99D20], v71, v72, v73, v74, v75);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v77 = *(void **)(a1 + 32);
          objc_msgSend_latestStrokeProvider(v77, v78, v79, v80, v81, v82);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v198 = v76;
          sub_1BE853BDC((uint64_t)v77, v43, v196, v83, &v198);
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = v198;

          (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
LABEL_32:

          v17 = v194;
          goto LABEL_26;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v85 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          v91 = objc_msgSend_count(*(void **)(a1 + 40), v86, v87, v88, v89, v90);
          objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v92, v93, v94, v95, v96);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_orderedStrokes(v97, v98, v99, v100, v101, v102);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218240;
          v205 = v91;
          v206 = 2048;
          v207 = objc_msgSend_count(v103, v104, v105, v106, v107, v108);
          _os_log_impl(&dword_1BE607000, v85, OS_LOG_TYPE_ERROR, "Session is cancelling refinement with strokes to replace = %ld, strokes in provider = %ld", buf, 0x16u);

        }
      }
      else
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v85 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v85, OS_LOG_TYPE_ERROR, "Session synthesis for autorefine stopping because synthesizer failed to refine a drawing", buf, 2u);
        }
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
LABEL_26:

      return;
    }
  }
  else
  {

  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v116 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_autoRefineResult(*(void **)(*(_QWORD *)(a1 + 32) + 8), v117, v118, v119, v120, v121);
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textResult(v195, v122, v123, v124, v125, v126);
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topTranscription(v193, v127, v128, v129, v130, v131);
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_autoRefineResult(*(void **)(*(_QWORD *)(a1 + 32) + 8), v132, v133, v134, v135, v136);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIdentifiers(v192, v137, v138, v139, v140, v141);
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    v147 = objc_msgSend_count(v191, v142, v143, v144, v145, v146);
    objc_msgSend_autoRefineResult(*(void **)(*(_QWORD *)(a1 + 32) + 8), v148, v149, v150, v151, v152);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_syntheticStrokeIndexes(v153, v154, v155, v156, v157, v158);
    v159 = (void *)objc_claimAutoreleasedReturnValue();
    v165 = objc_msgSend_count(v159, v160, v161, v162, v163, v164);
    objc_msgSend_autoRefineResult(*(void **)(*(_QWORD *)(a1 + 32) + 8), v166, v167, v168, v169, v170);
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeGroup(v171, v172, v173, v174, v175, v176);
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    v183 = objc_msgSend_uniqueIdentifier(v177, v178, v179, v180, v181, v182);
    v184 = *(_QWORD *)(a1 + 48);
    v190 = objc_msgSend_count(*(void **)(a1 + 40), v185, v186, v187, v188, v189);
    *(_DWORD *)buf = 138741251;
    v205 = (uint64_t)v197;
    v206 = 2048;
    v207 = v147;
    v208 = 2048;
    v209 = v165;
    v210 = 2048;
    v211 = v183;
    v212 = 2117;
    v213 = v184;
    v214 = 2048;
    v215 = v190;
    _os_log_impl(&dword_1BE607000, v116, OS_LOG_TYPE_DEFAULT, "Session unable to reconstruct a recognition result for incoming strokes to AutoRefine: Skipping. Cached autorefine result has text %{sensitive}@ with %ld strokes (%ld synthetic), groupID = %ld, synthesis request for string %{sensitive}@ wants to replace %ld strokes", buf, 0x3Eu);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
}

void sub_1BE854818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE854B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE854B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE854B9C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  id obj;
  uint64_t v107;
  void *v108;
  id v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint8_t buf[16];
  _BYTE v119[128];
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  sub_1BE84AA04(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 2, 1, 1, 0, 0, *(void **)(a1 + 64));
  v99 = objc_claimAutoreleasedReturnValue();
  if (!v99)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v7 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
    }

  }
  objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v2, v3, v4, v5, v6, v99);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v8, v9, v10, v11, v12);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v13, v14, v15, v16, v17);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  obj = v100;
  v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v18, (uint64_t)&v114, (uint64_t)v120, 16, v19);
  if (v20)
  {
    v107 = 0;
    v103 = *(_QWORD *)v115;
    do
    {
      v105 = v20;
      for (i = 0; i != v105; ++i)
      {
        if (*(_QWORD *)v115 != v103)
          objc_enumerationMutation(obj);
        v22 = *(void **)(*((_QWORD *)&v114 + 1) + 8 * i);
        sub_1BE851898(*(_QWORD *)(a1 + 32), v22, v104, *(void **)(a1 + 48), *(void **)(a1 + 64));
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v108, v23, v24, v25, v26, v27))
        {
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v28, v29, v30, v31, v32);
          v33 = objc_claimAutoreleasedReturnValue();
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v34 = v108;
          v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v110, (uint64_t)v119, 16, v36);
          if (v40)
          {
            v41 = *(_QWORD *)v111;
            do
            {
              for (j = 0; j != v40; ++j)
              {
                if (*(_QWORD *)v111 != v41)
                  objc_enumerationMutation(v34);
                objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v37, *(_QWORD *)(*((_QWORD *)&v110 + 1) + 8 * j), *(_QWORD *)(a1 + 64), v38, v39);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObjectsFromArray_(v33, v44, (uint64_t)v43, v45, v46, v47);

              }
              v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v37, (uint64_t)&v110, (uint64_t)v119, 16, v39);
            }
            while (v40);
          }

          objc_msgSend_array(MEMORY[0x1E0C99D20], v48, v49, v50, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = *(void **)(a1 + 32);
          objc_msgSend_latestStrokeProvider(v54, v55, v56, v57, v58, v59);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          v109 = v53;
          sub_1BE853BDC((uint64_t)v54, v33, v22, v60, &v109);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = v109;

          objc_msgSend_addObjectsFromArray_(v101, v63, (uint64_t)v61, v64, v65, v66);
          objc_msgSend_addObjectsFromArray_(v102, v67, (uint64_t)v62, v68, v69, v70);

        }
        else
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v33 = (id)qword_1EF568E60;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BE607000, v33, OS_LOG_TYPE_ERROR, "Failed to refine drawing", buf, 2u);
          }
        }

        v76 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v71, v72, v73, v74, v75);
        v82 = objc_msgSend_count(obj, v77, v78, v79, v80, v81);
        ++v107;
        objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v83, (uint64_t)((double)(v76 * v107) / (double)(unint64_t)v82), v84, v85, v86);

      }
      v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v87, (uint64_t)&v114, (uint64_t)v120, 16, v88);
    }
    while (v20);
  }

  v94 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v89, v90, v91, v92, v93);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v95, v94, v96, v97, v98);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_1BE855010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE855260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE8552AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8552D4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  NSObject *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  id obj;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  id v219;
  void *v220;
  id v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint8_t buf[4];
  void *v231;
  __int16 v232;
  uint64_t v233;
  __int16 v234;
  uint64_t v235;
  _BYTE v236[128];
  _BYTE v237[128];
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  sub_1BE84AA04(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 2, 1, 1, 0, 0, *(void **)(a1 + 64));
  v207 = objc_claimAutoreleasedReturnValue();
  if (!v207)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v7 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
    }

  }
  objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v2, v3, v4, v5, v6, v207);
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v8, v9, v10, v11, v12);
  v217 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v13, v14, v15, v16, v17);
  v218 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21, v22);
  v216 = (void *)objc_claimAutoreleasedReturnValue();
  v228 = 0u;
  v229 = 0u;
  v226 = 0u;
  v227 = 0u;
  obj = v208;
  v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v226, (uint64_t)v237, 16, v24);
  if (v211)
  {
    v213 = 0;
    v209 = *(_QWORD *)v227;
    do
    {
      v215 = 0;
      do
      {
        if (*(_QWORD *)v227 != v209)
          objc_enumerationMutation(obj);
        v25 = *(void **)(*((_QWORD *)&v226 + 1) + 8 * v215);
        sub_1BE851898(*(_QWORD *)(a1 + 32), v25, v210, *(void **)(a1 + 48), *(void **)(a1 + 64));
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v214, v26, v27, v28, v29, v30))
        {
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v31, v32, v33, v34, v35);
          v36 = objc_claimAutoreleasedReturnValue();
          v224 = 0u;
          v225 = 0u;
          v222 = 0u;
          v223 = 0u;
          v37 = v214;
          v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v222, (uint64_t)v236, 16, v39);
          if (v43)
          {
            v44 = *(_QWORD *)v223;
            do
            {
              for (i = 0; i != v43; ++i)
              {
                if (*(_QWORD *)v223 != v44)
                  objc_enumerationMutation(v37);
                objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v40, *(_QWORD *)(*((_QWORD *)&v222 + 1) + 8 * i), *(_QWORD *)(a1 + 64), v41, v42);
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObjectsFromArray_(v36, v47, (uint64_t)v46, v48, v49, v50);

              }
              v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v222, (uint64_t)v236, 16, v42);
            }
            while (v43);
          }

          objc_msgSend_array(MEMORY[0x1E0C99D20], v51, v52, v53, v54, v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = *(void **)(a1 + 32);
          objc_msgSend_latestStrokeProvider(v57, v58, v59, v60, v61, v62);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v221 = v56;
          sub_1BE853BDC((uint64_t)v57, v36, v25, v63, &v221);
          v220 = (void *)objc_claimAutoreleasedReturnValue();
          v219 = v221;

          v69 = 0;
          while (2)
          {
            if (v69 >= objc_msgSend_count(v220, v64, v65, v66, v67, v68))
            {

              goto LABEL_36;
            }
            objc_msgSend_objectAtIndexedSubscript_(v220, v70, v69, v71, v72, v73);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_drawing(v74, v75, v76, v77, v78, v79);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend_strokeCount(v80, v81, v82, v83, v84, v85))
            {
              objc_msgSend_objectAtIndexedSubscript_(v219, v86, v69, v87, v88, v89);
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              v96 = objc_msgSend_count(v90, v91, v92, v93, v94, v95) == 0;

              if (!v96)
              {
                objc_msgSend_drawing(v74, v97, v98, v99, v100, v101);
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObject_(v218, v103, (uint64_t)v102, v104, v105, v106);

                objc_msgSend_objectAtIndexedSubscript_(v219, v107, v69, v108, v109, v110);
                v111 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObject_(v217, v112, (uint64_t)v111, v113, v114, v115);

                v116 = (void *)objc_opt_class();
                objc_msgSend_string(v74, v117, v118, v119, v120, v121);
                v122 = (void *)objc_claimAutoreleasedReturnValue();
                v123 = (void *)MEMORY[0x1E0CB36B8];
                objc_msgSend_objectAtIndexedSubscript_(v219, v124, v69, v125, v126, v127);
                v128 = (void *)objc_claimAutoreleasedReturnValue();
                v134 = objc_msgSend_count(v128, v129, v130, v131, v132, v133);
                objc_msgSend_indexSetWithIndexesInRange_(v123, v135, 0, v134, v136, v137);
                v138 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_bounds(v74, v139, v140, v141, v142, v143);
                objc_msgSend_tokenizedTextResultWithString_strokeIndexes_bounds_trailingSeparator_recognizerGenerationIdentifier_defaultTokenScores_(v116, v144, (uint64_t)v122, (uint64_t)v138, (uint64_t)&stru_1E77F6F28, 0);
                v145 = objc_claimAutoreleasedReturnValue();

                objc_msgSend_addObject_(v216, v146, (uint64_t)v145, v147, v148, v149);
LABEL_30:

                ++v69;
                continue;
              }
            }
            else
            {

            }
            break;
          }
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v145 = (id)qword_1EF568E60;
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend_string(v74, v150, v151, v152, v153, v154);
            v155 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_drawing(v74, v156, v157, v158, v159, v160);
            v161 = (void *)objc_claimAutoreleasedReturnValue();
            v167 = objc_msgSend_strokeCount(v161, v162, v163, v164, v165, v166);
            objc_msgSend_objectAtIndexedSubscript_(v219, v168, v69, v169, v170, v171);
            v172 = (void *)objc_claimAutoreleasedReturnValue();
            v178 = objc_msgSend_count(v172, v173, v174, v175, v176, v177);
            *(_DWORD *)buf = 138740483;
            v231 = v155;
            v232 = 2048;
            v233 = v167;
            v234 = 2048;
            v235 = v178;
            _os_log_impl(&dword_1BE607000, v145, OS_LOG_TYPE_ERROR, "Skipping Refinement for a token %{sensitive}@, drawing with %ld strokes, aligned strokes = %ld", buf, 0x20u);

          }
          goto LABEL_30;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v36 = (id)qword_1EF568E60;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_ERROR, "Failed to refine drawing", buf, 2u);
        }
LABEL_36:

        v184 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v179, v180, v181, v182, v183);
        v190 = objc_msgSend_count(obj, v185, v186, v187, v188, v189);
        ++v213;
        objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v191, (uint64_t)((double)(v184 * v213) / (double)(unint64_t)v190), v192, v193, v194);

        ++v215;
      }
      while (v215 != v211);
      v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v195, (uint64_t)&v226, (uint64_t)v237, 16, v196);
    }
    while (v211);
  }

  v202 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v197, v198, v199, v200, v201);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v203, v202, v204, v205, v206);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_1BE8559B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1BE8564BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_1BE8566FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD v50[4];

  v50[3] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = *(double *)(a1 + 56);
  v17 = *(double *)(a1 + 64);
  objc_msgSend_latestStrokeProvider(*(void **)(a1 + 40), v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v24, (uint64_t)v15, (uint64_t)v23, v25, v26, v16, v17);
  v28 = v27;

  v29 = *(void **)(a1 + 48);
  v49[0] = CFSTR("distance");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, v33, v34, v28);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v50[0] = v35;
  v49[1] = CFSTR("transcription");
  objc_msgSend_string(v3, v36, v37, v38, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v49[2] = CFSTR("strokeIdentifiers");
  v50[1] = v41;
  v50[2] = v15;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v42, (uint64_t)v50, (uint64_t)v49, 3, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v29, v45, (uint64_t)v44, v46, v47, v48);

}

void sub_1BE856868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE856A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE856A60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE856A78(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  NSObject *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  __int128 v120;
  double v121;
  __int128 v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  CHReflowableSynthesisResultToken *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  void *hasPrecedingSpace;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  const char *v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t i;
  void *v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  __int128 v246;
  void *v247;
  double v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  void *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v257;
  int isNotDef;
  void *v259;
  void *v260;
  double v261;
  unint64_t v262;
  void *v263;
  void *v264;
  void *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _OWORD v270[8];
  uint8_t v271[8];
  _BYTE v272[128];
  void *v273;
  uint8_t buf[16];
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  chunkStringForSynthesis(*(NSString **)(a1 + 32), 0x2EuLL);
  v259 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99DE8];
  v7 = objc_msgSend_count(v259, v2, v3, v4, v5, v6);
  objc_msgSend_arrayWithCapacity_(v1, v8, v7, v9, v10, v11);
  v265 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)MEMORY[0x1E0C99DE8];
  v18 = objc_msgSend_count(v259, v13, v14, v15, v16, v17);
  objc_msgSend_arrayWithCapacity_(v12, v19, v18, v20, v21, v22);
  v264 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_styleSampleOptionsForPoint_shouldCancel_(*(void **)(a1 + 40), v23, *(_QWORD *)(a1 + 56), v24, v25, v26, *(double *)(a1 + 72), *(double *)(a1 + 80));
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_synthesisOptionsWithFastPath_(CHSynthesisRequestOptions, v27, 1, v28, v29, v30);
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  v262 = 0;
  v257 = 0;
  *(_QWORD *)&v36 = 134217984;
  v246 = v36;
  while (v262 < objc_msgSend_count(v259, v31, v32, v33, v34, v35, v246))
  {
    v253 = objc_msgSend_count(v265, v37, v38, v39, v40, v41);
    objc_msgSend_objectAtIndexedSubscript_(v259, v42, v262, v43, v44, v45);
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    isNotDef = objc_msgSend_isNotDef(v263, v46, v47, v48, v49, v50);
    if (isNotDef)
    {
      if ((v257 & 1) != 0)
      {
        v257 = 1;
        goto LABEL_63;
      }
      if (objc_msgSend_synthesisSuggestion(v263, v51, v52, v53, v54, v55) == 1)
      {
        v257 = 1;
      }
      else
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v82 = (id)qword_1EF568E18[0];
        v260 = v82;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v82, OS_LOG_TYPE_FAULT, "NotDef chunk can be synthesized with a fast path only.", buf, 2u);
        }
        v257 = 1;
LABEL_19:

      }
LABEL_20:
      v83 = objc_msgSend_rangeInOriginalString(v263, v56, v57, v58, v59, v60);
      v254 = v84;
      v255 = v83;
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v85 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138739971;
        *(_QWORD *)&buf[4] = v263;
        _os_log_impl(&dword_1BE607000, v85, OS_LOG_TYPE_DEFAULT, "Text Synthesis Loop : chunk = %{sensitive}@", buf, 0xCu);
      }

      if (objc_msgSend_synthesisSuggestion(v263, v86, v87, v88, v89, v90) == 1)
      {
        objc_msgSend_textSynthesizer(*(void **)(a1 + 40), v91, v92, v93, v94, v95);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_chunkValueForSynthesis(v263, v97, v98, v99, v100, v101);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dictionary(v252, v103, v104, v105, v106, v107);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_synthesizeDrawingForString_options_shouldCancel_error_(v96, v109, (uint64_t)v102, (uint64_t)v108, *(_QWORD *)(a1 + 56), 0);
        v110 = objc_claimAutoreleasedReturnValue();

        v280 = 0u;
        v281 = 0u;
        v278 = 0u;
        v279 = 0u;
        v276 = 0u;
        v277 = 0u;
        *(_OWORD *)buf = 0u;
        v275 = 0u;
        if (v110)
        {
          objc_msgSend_principalLines(v110, v111, v112, v113, v114, v115);
          v116 = *((double *)&v278 + 1);
          v117 = *((double *)&v276 + 1);
          if (vabdd_f64(*((double *)&v278 + 1), *((double *)&v276 + 1)) > 2.22044605e-16)
            goto LABEL_27;
LABEL_57:
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v245 = (id)qword_1EF568E28;
          if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v271 = 0;
            _os_log_impl(&dword_1BE607000, v245, OS_LOG_TYPE_ERROR, "Notdef token does not contain principal lines information", v271, 2u);
          }

          v260 = 0;
LABEL_62:

          goto LABEL_63;
        }
        v117 = 0.0;
        v116 = 0.0;
        if (vabdd_f64(0.0, 0.0) <= 2.22044605e-16)
          goto LABEL_57;
LABEL_27:
        v261 = v116;
        v118 = *(double *)buf;
        v119 = *(double *)&buf[8];
        v120 = v275;
        v121 = *(double *)&v276;
        v122 = v277;
        v248 = *(double *)&v278;
        v249 = v279;
        v250 = v280;
        v251 = v281;
        objc_msgSend_drawing(v110, v111, v112, v113, v114, v115);
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_bounds(v123, v124, v125, v126, v127, v128);
        if (v131 == 0.0)
          v131 = 1.0;
        if (v132 == 0.0)
          v132 = 1.0;
        *(double *)buf = (v118 - v129) / v131;
        *(double *)&buf[8] = (v119 - v130) / v132;
        *(double *)&v275 = (*(double *)&v120 - v129) / v131;
        *((double *)&v275 + 1) = (*((double *)&v120 + 1) - v130) / v132;
        *(double *)&v276 = (v121 - v129) / v131;
        *((double *)&v276 + 1) = (v117 - v130) / v132;
        *(double *)&v277 = (*(double *)&v122 - v129) / v131;
        *((double *)&v277 + 1) = (*((double *)&v122 + 1) - v130) / v132;
        *(double *)&v278 = (v248 - v129) / v131;
        *((double *)&v278 + 1) = (v261 - v130) / v132;
        *(double *)&v279 = (*(double *)&v249 - v129) / v131;
        *((double *)&v279 + 1) = (*((double *)&v249 + 1) - v130) / v132;
        *(double *)&v280 = (*(double *)&v250 - v129) / v131;
        *((double *)&v280 + 1) = (*((double *)&v250 + 1) - v130) / v132;
        *(double *)&v281 = (*(double *)&v251 - v129) / v131;
        *((double *)&v281 + 1) = (*((double *)&v251 + 1) - v130) / v132;

        v133 = [CHReflowableSynthesisResultToken alloc];
        objc_msgSend_drawing(v110, v134, v135, v136, v137, v138);
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_chunkValueOriginal(v263, v140, v141, v142, v143, v144);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        v270[4] = v278;
        v270[5] = v279;
        v270[6] = v280;
        v270[7] = v281;
        v270[0] = *(_OWORD *)buf;
        v270[1] = v275;
        v270[2] = v276;
        v270[3] = v277;
        objc_msgSend_drawing(v110, v146, v147, v148, v149, v150);
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_bounds(v151, v152, v153, v154, v155, v156);
        hasPrecedingSpace = (void *)objc_msgSend_initWithDrawing_string_principalLines_bounds_hasPrecedingSpace_(v133, v157, (uint64_t)v139, (uint64_t)v145, (uint64_t)v270, 0);
        v273 = hasPrecedingSpace;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v159, (uint64_t)&v273, 1, v160, v161);
        v260 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else if (objc_msgSend_synthesisSuggestion(v263, v91, v92, v93, v94, v95))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v110 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v110, OS_LOG_TYPE_FAULT))
        {
          v172 = objc_msgSend_synthesisSuggestion(v263, v167, v168, v169, v170, v171);
          *(_DWORD *)buf = v246;
          *(_QWORD *)&buf[4] = v172;
          _os_log_impl(&dword_1BE607000, v110, OS_LOG_TYPE_FAULT, "Unknown synthesisSuggestion=%ld", buf, 0xCu);
        }
        v260 = 0;
      }
      else
      {
        objc_msgSend_textSynthesizer(*(void **)(a1 + 40), v162, v163, v164, v165, v166);
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_chunkValueForSynthesis(v263, v174, v175, v176, v177, v178);
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dictionary(v247, v180, v181, v182, v183, v184);
        v185 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_synthesizeDrawingForString_options_shouldCancel_error_(v173, v186, (uint64_t)v179, (uint64_t)v185, *(_QWORD *)(a1 + 56), 0);
        v110 = objc_claimAutoreleasedReturnValue();

        objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v187, (uint64_t)v110, *(_QWORD *)(a1 + 56), v188, v189);
        v260 = (void *)objc_claimAutoreleasedReturnValue();
      }

      if (objc_msgSend_count(v260, v190, v191, v192, v193, v194))
      {
        v268 = 0u;
        v269 = 0u;
        v266 = 0u;
        v267 = 0u;
        v199 = v260;
        v207 = objc_msgSend_countByEnumeratingWithState_objects_count_(v199, v200, (uint64_t)&v266, (uint64_t)v272, 16, v201);
        if (v207)
        {
          v208 = *(_QWORD *)v267;
          v209 = v255;
          v210 = v255 + v254;
          do
          {
            for (i = 0; i != v207; ++i)
            {
              if (*(_QWORD *)v267 != v208)
                objc_enumerationMutation(v199);
              v212 = *(void **)(*((_QWORD *)&v266 + 1) + 8 * i);
              objc_msgSend_string(v212, v202, v203, v204, v205, v206);
              v213 = (void *)objc_claimAutoreleasedReturnValue();
              v219 = objc_msgSend_length(v213, v214, v215, v216, v217, v218);

              v229 = v219 + objc_msgSend_hasPrecedingSpace(v212, v220, v221, v222, v223, v224);
              if (v209 >= v210)
                v230 = v255 + v254 - 1;
              else
                v230 = v209;
              if (v210 - v230 >= v229)
                v231 = v229;
              else
                v231 = v210 - v230;
              objc_msgSend_addObject_(v265, v225, (uint64_t)v212, v226, v227, v228);
              objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v232, v230, v231, v233, v234);
              v235 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObject_(v264, v236, (uint64_t)v235, v237, v238, v239);

              v209 = v231 + v230;
            }
            v207 = objc_msgSend_countByEnumeratingWithState_objects_count_(v199, v202, (uint64_t)&v266, (uint64_t)v272, 16, v206);
          }
          while (v207);
        }

      }
      objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v195, v255 + v254, v196, v197, v198);
      if ((isNotDef & 1) == 0)
        v257 &= v253 >= objc_msgSend_count(v265, v240, v241, v242, v243, v244);
      goto LABEL_62;
    }
    if ((unint64_t)objc_msgSend_count(v259, v51, v52, v53, v54, v55) < 2)
      goto LABEL_20;
    objc_msgSend_chunkValueForSynthesis(v263, v56, v57, v58, v59, v60);
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_countCodepoints(v260, v61, v62, v63, v64, v65) != 1 || !(v257 & 1 | (v262 == 0)))
      goto LABEL_19;
    if (v262 + 1 == objc_msgSend_count(v259, v66, v67, v68, v69, v70))
      goto LABEL_62;
    objc_msgSend_objectAtIndexedSubscript_(v259, v71, v262 + 1, v72, v73, v74);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = objc_msgSend_isNotDef(v75, v76, v77, v78, v79, v80);

    if ((v81 & 1) == 0)
      goto LABEL_20;
LABEL_63:

    ++v262;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1BE8573DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{

  _Unwind_Resume(a1);
}

void sub_1BE8576E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE85772C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

