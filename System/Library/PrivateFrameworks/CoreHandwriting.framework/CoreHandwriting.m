id sub_1BE609DD0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EF568010;
  v7 = qword_1EF568010;
  if (!qword_1EF568010)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1BE6B6388;
    v3[3] = &unk_1E77F31B0;
    v3[4] = &v4;
    sub_1BE6B6388((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE609E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE609EE8(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  void *v185;
  id v186;

  v6 = a2;
  objc_opt_self();
  v7 = v6;
  objc_opt_self();
  objc_msgSend_scriptCode(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v13;
  if (v13)
  {
    if (objc_msgSend_caseInsensitiveCompare_(v13, v14, (uint64_t)CFSTR("Latn"), v15, v16, v17))
    {
      if (objc_msgSend_caseInsensitiveCompare_(v18, v19, (uint64_t)CFSTR("Hans"), v20, v21, v22))
      {
        if (objc_msgSend_caseInsensitiveCompare_(v18, v23, (uint64_t)CFSTR("Hant"), v24, v25, v26))
        {
          if (objc_msgSend_caseInsensitiveCompare_(v18, v27, (uint64_t)CFSTR("Hrkt"), v28, v29, v30)
            && objc_msgSend_caseInsensitiveCompare_(v18, v31, (uint64_t)CFSTR("Hira"), v32, v33, v34)
            && objc_msgSend_caseInsensitiveCompare_(v18, v35, (uint64_t)CFSTR("Kata"), v36, v37, v38)
            && objc_msgSend_caseInsensitiveCompare_(v18, v39, (uint64_t)CFSTR("Jpan"), v40, v41, v42)
            && objc_msgSend_caseInsensitiveCompare_(v18, v43, (uint64_t)CFSTR("Hani"), v44, v45, v46))
          {
            if (objc_msgSend_caseInsensitiveCompare_(v18, v47, (uint64_t)CFSTR("Kore"), v48, v49, v50))
            {
              if (objc_msgSend_caseInsensitiveCompare_(v18, v51, (uint64_t)CFSTR("Thai"), v52, v53, v54))
              {
                if (objc_msgSend_caseInsensitiveCompare_(v18, v55, (uint64_t)CFSTR("Cyrl"), v56, v57, v58))
                  v63 = 8
                      * (objc_msgSend_caseInsensitiveCompare_(v18, v59, (uint64_t)CFSTR("Arab"), v60, v61, v62) == 0);
                else
                  v63 = 7;
              }
              else
              {
                v63 = 6;
              }
            }
            else
            {
              v63 = 5;
            }
          }
          else
          {
            v63 = 4;
          }
        }
        else
        {
          v63 = 3;
        }
      }
      else
      {
        v63 = 2;
      }
    }
    else
    {
      v63 = 1;
    }
  }
  else
  {
    v63 = 0;
  }

  v186 = v7;
  objc_opt_self();
  objc_msgSend_languageCode(v186, v64, v65, v66, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v69;
  if (v69)
  {
    if (objc_msgSend_caseInsensitiveCompare_(v69, v70, (uint64_t)CFSTR("de"), v71, v72, v73))
    {
      if (objc_msgSend_caseInsensitiveCompare_(v74, v75, (uint64_t)CFSTR("en"), v76, v77, v78))
      {
        if (objc_msgSend_caseInsensitiveCompare_(v74, v79, (uint64_t)CFSTR("es"), v80, v81, v82))
        {
          if (objc_msgSend_caseInsensitiveCompare_(v74, v83, (uint64_t)CFSTR("fr"), v84, v85, v86))
          {
            if (objc_msgSend_caseInsensitiveCompare_(v74, v87, (uint64_t)CFSTR("it"), v88, v89, v90))
            {
              if (objc_msgSend_caseInsensitiveCompare_(v74, v91, (uint64_t)CFSTR("pt"), v92, v93, v94))
              {
                if (objc_msgSend_caseInsensitiveCompare_(v74, v95, (uint64_t)CFSTR("id"), v96, v97, v98))
                {
                  if (objc_msgSend_caseInsensitiveCompare_(v74, v99, (uint64_t)CFSTR("ms"), v100, v101, v102))
                  {
                    if (objc_msgSend_caseInsensitiveCompare_(v74, v103, (uint64_t)CFSTR("tr"), v104, v105, v106))
                    {
                      if (objc_msgSend_caseInsensitiveCompare_(v74, v107, (uint64_t)CFSTR("cs"), v108, v109, v110))
                      {
                        if (objc_msgSend_caseInsensitiveCompare_(v74, v111, (uint64_t)CFSTR("da"), v112, v113, v114))
                        {
                          if (objc_msgSend_caseInsensitiveCompare_(v74, v115, (uint64_t)CFSTR("nl"), v116, v117, v118))
                          {
                            if (objc_msgSend_caseInsensitiveCompare_(v74, v119, (uint64_t)CFSTR("nb"), v120, v121, v122))
                            {
                              if (objc_msgSend_caseInsensitiveCompare_(v74, v123, (uint64_t)CFSTR("nn"), v124, v125, v126))
                              {
                                if (objc_msgSend_caseInsensitiveCompare_(v74, v127, (uint64_t)CFSTR("pl"), v128, v129, v130))
                                {
                                  if (objc_msgSend_caseInsensitiveCompare_(v74, v131, (uint64_t)CFSTR("ro"), v132, v133, v134))
                                  {
                                    if (objc_msgSend_caseInsensitiveCompare_(v74, v135, (uint64_t)CFSTR("sv"), v136, v137, v138))
                                    {
                                      if (objc_msgSend_caseInsensitiveCompare_(v74, v139, (uint64_t)CFSTR("fi"), v140, v141, v142))
                                      {
                                        if (objc_msgSend_caseInsensitiveCompare_(v74, v143, (uint64_t)CFSTR("zh"), v144, v145, v146))
                                        {
                                          if (objc_msgSend_caseInsensitiveCompare_(v74, v147, (uint64_t)CFSTR("yue"), v148, v149, v150))
                                          {
                                            if (objc_msgSend_caseInsensitiveCompare_(v74, v151, (uint64_t)CFSTR("ja"), v152, v153, v154))
                                            {
                                              if (objc_msgSend_caseInsensitiveCompare_(v74, v155, (uint64_t)CFSTR("ko"), v156, v157, v158))
                                              {
                                                if (objc_msgSend_caseInsensitiveCompare_(v74, v159, (uint64_t)CFSTR("th"), v160, v161, v162))
                                                {
                                                  if (objc_msgSend_caseInsensitiveCompare_(v74, v163, (uint64_t)CFSTR("ru"), v164, v165, v166))
                                                  {
                                                    if (objc_msgSend_caseInsensitiveCompare_(v74, v167, (uint64_t)CFSTR("uk"), v168, v169, v170))
                                                    {
                                                      if (objc_msgSend_caseInsensitiveCompare_(v74, v171, (uint64_t)CFSTR("ar"), v172, v173, v174)&& objc_msgSend_caseInsensitiveCompare_(v74, v175, (uint64_t)CFSTR("ars"), v176, v177, v178))
                                                      {
                                                        if (objc_msgSend_caseInsensitiveCompare_(v74, v179, (uint64_t)CFSTR("vi"), v180, v181, v182))
                                                        {
                                                          v183 = 0;
                                                        }
                                                        else
                                                        {
                                                          v183 = 27;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v183 = 26;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v183 = 25;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v183 = 24;
                                                  }
                                                }
                                                else
                                                {
                                                  v183 = 23;
                                                }
                                              }
                                              else
                                              {
                                                v183 = 22;
                                              }
                                            }
                                            else
                                            {
                                              v183 = 21;
                                            }
                                          }
                                          else
                                          {
                                            v183 = 20;
                                          }
                                        }
                                        else
                                        {
                                          v183 = 19;
                                        }
                                      }
                                      else
                                      {
                                        v183 = 18;
                                      }
                                    }
                                    else
                                    {
                                      v183 = 17;
                                    }
                                  }
                                  else
                                  {
                                    v183 = 16;
                                  }
                                }
                                else
                                {
                                  v183 = 15;
                                }
                              }
                              else
                              {
                                v183 = 14;
                              }
                            }
                            else
                            {
                              v183 = 13;
                            }
                          }
                          else
                          {
                            v183 = 12;
                          }
                        }
                        else
                        {
                          v183 = 11;
                        }
                      }
                      else
                      {
                        v183 = 10;
                      }
                    }
                    else
                    {
                      v183 = 9;
                    }
                  }
                  else
                  {
                    v183 = 8;
                  }
                }
                else
                {
                  v183 = 7;
                }
              }
              else
              {
                v183 = 6;
              }
            }
            else
            {
              v183 = 4;
            }
          }
          else
          {
            v183 = 2;
          }
        }
        else
        {
          v183 = 3;
        }
      }
      else
      {
        v183 = 1;
      }
    }
    else
    {
      v183 = 5;
    }
  }
  else
  {
    v183 = 0;
  }

  switch(v63)
  {
    case 0:
      v63 = qword_1BE8DFD00[v183];
      v185 = v186;
      if (a3)
        goto LABEL_103;
      goto LABEL_104;
    case 1:
      if ((unint64_t)(v183 - 19) >= 8 && v183)
      {
        v63 = 1;
        v185 = v186;
        if (a3)
          goto LABEL_103;
      }
      else
      {
        v63 = 0;
        v183 = 0;
        v185 = v186;
        if (a3)
          goto LABEL_103;
      }
      goto LABEL_104;
    case 2:
    case 3:
      v184 = ((0xFE7FFFFu >> v183) & 1) == 0;
      if (((0xFE7FFFFu >> v183) & 1) != 0)
        v63 = 0;
      goto LABEL_100;
    case 4:
      v184 = ((0xFDFFFFFu >> v183) & 1) == 0;
      v63 = (4 * ((0xFDFFFFFu >> v183) & 1)) ^ 4;
      goto LABEL_100;
    case 5:
      v184 = ((0xFBFFFFFu >> v183) & 1) == 0;
      if (((0xFBFFFFFu >> v183) & 1) != 0)
        v63 = 0;
      else
        v63 = 5;
      goto LABEL_100;
    case 6:
      v184 = ((0xF7FFFFFu >> v183) & 1) == 0;
      if (((0xF7FFFFFu >> v183) & 1) != 0)
        v63 = 0;
      else
        v63 = 6;
      goto LABEL_100;
    case 7:
      v184 = ((0xCFFFFFFu >> v183) & 1) == 0;
      if (((0xCFFFFFFu >> v183) & 1) != 0)
        v63 = 0;
      else
        v63 = 7;
      goto LABEL_100;
    case 8:
      v184 = ((0xBFFFFFFu >> v183) & 1) == 0;
      v63 = (8 * ((0xBFFFFFFu >> v183) & 1)) ^ 8;
LABEL_100:
      if (!v184)
        v183 = 0;
      break;
    default:
      break;
  }
  v185 = v186;
  if (a3)
LABEL_103:
    *a3 = v183;
LABEL_104:
  if (a4)
    *a4 = v63;

}

void sub_1BE60A504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE60A520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60A534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60A548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE60A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE60A574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE60A590(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BE60B52C(&qword_1EF567150);
  v2 = sub_1BE8C7DDC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BE60B5A8(v6, (uint64_t)&v13);
    v7 = v13;
    result = sub_1BE60AC08(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1BE60B5F0(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id CHCalculateWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CHCalculateWrapper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHCalculateWrapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CHCalculateWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHCalculateWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BE60A874(uint64_t a1, uint64_t a2)
{
  return sub_1BE60A9BC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1BE60A880(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1BE8C7D1C();
  *a2 = 0;
  return result;
}

uint64_t sub_1BE60A8F4(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1BE8C7D28();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1BE60A970@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BE8C7D34();
  v2 = sub_1BE8C7D10();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BE60A9B0(uint64_t a1, uint64_t a2)
{
  return sub_1BE60A9BC(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1BE60A9BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BE8C7D34();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BE60A9F8()
{
  sub_1BE8C7D34();
  sub_1BE8C7D4C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE60AA38()
{
  uint64_t v0;

  sub_1BE8C7D34();
  sub_1BE8C7E24();
  sub_1BE8C7D4C();
  v0 = sub_1BE8C7E3C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1BE60AAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1BE8C7D34();
  v2 = v1;
  if (v0 == sub_1BE8C7D34() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BE8C7E0C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1BE60AB30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BE8C7D10();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BE60AB74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1BE8C7D34();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BE60AB9C()
{
  sub_1BE60B6C0(&qword_1EF567188, (uint64_t)&unk_1BE8D4EA4);
  sub_1BE60B6C0(&qword_1EF567190, (uint64_t)&unk_1BE8D4E44);
  return sub_1BE8C7DF4();
}

unint64_t sub_1BE60AC08(uint64_t a1)
{
  uint64_t v2;

  sub_1BE8C7D34();
  sub_1BE8C7E24();
  sub_1BE8C7D4C();
  v2 = sub_1BE8C7E3C();
  swift_bridgeObjectRelease();
  return sub_1BE60AC88(a1, v2);
}

unint64_t sub_1BE60AC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1BE8C7D34();
    v8 = v7;
    if (v6 == sub_1BE8C7D34() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1BE8C7E0C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1BE8C7D34();
          v15 = v14;
          if (v13 == sub_1BE8C7D34() && v15 == v16)
            break;
          v18 = sub_1BE8C7E0C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1BE60ADFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t inited;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  sub_1BE8C7BA8();
  MEMORY[0x1E0C80A78]();
  v0 = sub_1BE8C7CB0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE60B52C(&qword_1EF567140);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE8D4D60;
  v5 = (void *)*MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D09E80];
  v6 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_initWithUnsignedInteger_, 1);
  *(_QWORD *)(inited + 64) = sub_1BE60B56C();
  *(_QWORD *)(inited + 40) = v8;
  sub_1BE60A590(inited);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D09CA0], v0);
  sub_1BE8C7B9C();
  sub_1BE8C7CEC();
  swift_allocObject();
  sub_1BE8C7CF8();
  sub_1BE8C7CE0();
  v9 = sub_1BE8C7CA4();
  swift_release();
  return v9;
}

BOOL sub_1BE60AFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;

  sub_1BE60B52C(&qword_1EF567140);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE8D4D70;
  v5 = (void *)*MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D09E80];
  v6 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  v7 = v5;
  v8 = objc_msgSend(v6, sel_initWithUnsignedInteger_, 0);
  v9 = sub_1BE60B56C();
  *(_QWORD *)(inited + 40) = v8;
  v10 = (void *)*MEMORY[0x1E0D09E90];
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 72) = v10;
  v11 = sub_1BE60B52C(&qword_1EF567160);
  *(_QWORD *)(inited + 80) = a3;
  v12 = (void *)*MEMORY[0x1E0D09E58];
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 112) = v12;
  v13 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  v14 = v10;
  swift_bridgeObjectRetain();
  v15 = v12;
  *(_QWORD *)(inited + 120) = objc_msgSend(v13, sel_initWithBool_, 1);
  v16 = (void *)*MEMORY[0x1E0D09E78];
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 152) = v16;
  v17 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  v18 = v16;
  v19 = objc_msgSend(v17, sel_initWithBool_, 1);
  *(_QWORD *)(inited + 184) = v9;
  *(_QWORD *)(inited + 160) = v19;
  sub_1BE60A590(inited);
  v20 = (void *)sub_1BE8C7D04();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v20, sel_inputValueAndUnit);

  if (v21)
  return v21 != 0;
}

uint64_t sub_1BE60B164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t inited;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  sub_1BE8C7BA8();
  MEMORY[0x1E0C80A78]();
  v0 = sub_1BE8C7CB0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE60B52C(&qword_1EF567140);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE8D4D60;
  v5 = (void *)*MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D09E80];
  v6 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_initWithUnsignedInteger_, 1);
  *(_QWORD *)(inited + 64) = sub_1BE60B56C();
  *(_QWORD *)(inited + 40) = v8;
  sub_1BE60A590(inited);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D09CA0], v0);
  sub_1BE8C7B9C();
  sub_1BE8C7CEC();
  swift_allocObject();
  v9 = sub_1BE8C7CF8();
  v10 = (void *)sub_1BE8C7CC8();

  if (v10)
  {
    result = sub_1BE8C7CC8();
    if (!result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    v12 = (void *)result;
    v13 = (void *)sub_1BE8C7B6C();

    v14 = (uint64_t)objc_msgSend(v13, sel_code);
    if (v14 > -2000)
    {
LABEL_20:
      swift_release();
      return 0;
    }
  }
  sub_1BE8C7CD4();
  v15 = sub_1BE8C7C98();
  result = swift_release();
  if (v15 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v16 = sub_1BE8C7DD0();
    result = swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_6:
      v17 = 0;
      v27 = v16;
      v28 = v15 & 0xC000000000000001;
      v26 = v15 & 0xFFFFFFFFFFFFFF8;
      v25[0] = v9;
      v25[1] = v15 + 32;
      while (1)
      {
        if (v28)
        {
          MEMORY[0x1C3B805C0](v17, v15);
          v18 = __OFADD__(v17++, 1);
          if (v18)
            goto LABEL_22;
        }
        else
        {
          if (v17 >= *(_QWORD *)(v26 + 16))
          {
            __break(1u);
            goto LABEL_27;
          }
          swift_retain();
          v18 = __OFADD__(v17++, 1);
          if (v18)
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        v19 = sub_1BE8C7CBC();
        v20 = *(_QWORD *)(v19 + 16);
        if (v20)
          break;
LABEL_7:
        swift_release();
        result = swift_bridgeObjectRelease();
        if (v17 == v27)
          goto LABEL_24;
      }
      v9 = 0;
      while (1)
      {
        v21 = *(void **)(v19 + 8 * v9 + 32);
        v22 = v21;
        v23 = (void *)sub_1BE8C7B6C();
        v24 = objc_msgSend(v23, sel_code, v25[0]);

        if (v24 != (id)-1003)
          break;
        if (v20 == ++v9)
          goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_20;
    }
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_6;
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t type metadata accessor for CHCalculateWrapper()
{
  return objc_opt_self();
}

uint64_t method lookup function for CHCalculateWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static CHCalculateWrapper.textTranscriptionForLatex(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static CHCalculateWrapper.isTextTranscriptionUnitConversion(_:locales:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static CHCalculateWrapper.isLatexTranscriptionValidExpression(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_1BE60B52C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B81D90]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1BE60B56C()
{
  unint64_t result;

  result = qword_1EF567148;
  if (!qword_1EF567148)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF567148);
  }
  return result;
}

uint64_t sub_1BE60B5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE60B52C(&qword_1EF567158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1BE60B5F0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void type metadata accessor for CalculateKey()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EF567168)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EF567168);
  }
}

uint64_t sub_1BE60B654()
{
  return sub_1BE60B6C0(&qword_1EF567170, (uint64_t)&unk_1BE8D4E08);
}

uint64_t sub_1BE60B678()
{
  return sub_1BE60B6C0(&qword_1EF567178, (uint64_t)&unk_1BE8D4DDC);
}

uint64_t sub_1BE60B69C()
{
  return sub_1BE60B6C0(&qword_1EF567180, (uint64_t)&unk_1BE8D4E78);
}

uint64_t sub_1BE60B6C0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CalculateKey();
    result = MEMORY[0x1C3B81DA8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CHModelCatalogModelType.init(rawValue:)()
{
  return 0;
}

BOOL sub_1BE60B714(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BE60B728()
{
  sub_1BE8C7E24();
  sub_1BE8C7E30();
  return sub_1BE8C7E3C();
}

uint64_t sub_1BE60B76C()
{
  return sub_1BE8C7E30();
}

uint64_t sub_1BE60B794()
{
  sub_1BE8C7E24();
  sub_1BE8C7E30();
  return sub_1BE8C7E3C();
}

_QWORD *sub_1BE60B7D4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void sub_1BE60B7EC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

id CHModelCatalog.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CHModelCatalog.init()()
{
  void *v0;
  objc_super v2;

  sub_1BE8C7C80();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHModelCatalog();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for CHModelCatalog()
{
  uint64_t result;

  result = qword_1EF5671A8;
  if (!qword_1EF5671A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BE60B950@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[5];
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD v75[4];

  v66 = a2;
  v67 = a3;
  v58 = sub_1BE8C7C68();
  v57 = *(_QWORD *)(v58 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v56 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE8C7B90();
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v60 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v55 = (char *)&v54 - v8;
  v9 = sub_1BE8C7C2C();
  MEMORY[0x1E0C80A78](v9);
  v62 = sub_1BE8C7C50();
  v64 = *(_QWORD *)(v62 - 8);
  v10 = MEMORY[0x1E0C80A78](v62);
  v59 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v63 = (char *)&v54 - v13;
  MEMORY[0x1E0C80A78](v12);
  v65 = (char *)&v54 - v14;
  v15 = sub_1BE60B52C(&qword_1EF5671C0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1BE60B52C(&qword_1EF5671C8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v61 = (char *)&v54 - v23;
  if (a1)
  {
    v75[0] = a1;
    result = sub_1BE8C7E18();
    __break(1u);
  }
  else
  {
    sub_1BE8C7BC0();
    sub_1BE60CD6C(&v72, (uint64_t)v75);
    sub_1BE60CD84(v75, v75[3]);
    sub_1BE8C7C38();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    v24 = v61;
    (*(void (**)(void))(v19 + 32))();
    sub_1BE60CDE8((uint64_t)v75, (uint64_t)&v72);
    v25 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v26 = v22;
    v27 = v18;
    v25(v26, v24, v18);
    v28 = sub_1BE8C7C74();
    v29 = sub_1BE8C7D70();
    v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v31 = swift_slowAlloc();
      v65 = (char *)swift_slowAlloc();
      v70[0] = (uint64_t)v65;
      *(_DWORD *)v31 = 136315394;
      v66 = v25;
      LODWORD(v64) = v30;
      v33 = v73;
      v32 = v74;
      sub_1BE60CD84(&v72, v73);
      v34 = MEMORY[0x1C3B80404](v33, *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8));
      v71 = sub_1BE60CE2C(v34, v35, v70);
      sub_1BE8C7D88();
      swift_bridgeObjectRelease();
      sub_1BE60D544((uint64_t)&v72);
      *(_WORD *)(v31 + 12) = 2080;
      v63 = (char *)(v31 + 14);
      v36 = v56;
      v37 = sub_1BE8C7BE4();
      v38 = v55;
      MEMORY[0x1C3B80470](v37);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v36, v58);
      sub_1BE60D4FC();
      v39 = v69;
      v40 = sub_1BE8C7E00();
      v42 = v41;
      v43 = v38;
      v25 = v66;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v39);
      v71 = sub_1BE60CE2C(v40, v42, v70);
      sub_1BE8C7D88();
      swift_bridgeObjectRelease();
      v44 = *(void (**)(char *, uint64_t))(v19 + 8);
      v44(v26, v27);
      _os_log_impl(&dword_1BE607000, v28, (os_log_type_t)v64, "Found asset %s at %s", (uint8_t *)v31, 0x16u);
      v45 = v65;
      swift_arrayDestroy();
      MEMORY[0x1C3B81DFC](v45, -1, -1);
      v46 = v31;
      v24 = v61;
      MEMORY[0x1C3B81DFC](v46, -1, -1);

    }
    else
    {

      sub_1BE60D544((uint64_t)&v72);
      v44 = *(void (**)(char *, uint64_t))(v19 + 8);
      v44(v26, v27);
    }
    v47 = v60;
    v73 = v27;
    v74 = sub_1BE60D46C();
    v48 = sub_1BE60D5A4((uint64_t *)&v72);
    v25((char *)v48, v24, v27);
    sub_1BE60CD84(&v72, v73);
    v70[3] = swift_getAssociatedTypeWitness();
    v70[4] = swift_getAssociatedConformanceWitness();
    sub_1BE60D5A4(v70);
    sub_1BE8C7BD8();
    sub_1BE8C7C14();
    sub_1BE60D544((uint64_t)v70);
    if ((sub_1BE8C7B78() & 1) != 0)
    {
      v49 = v67;
      v50 = v68;
      v51 = v69;
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v67, v47, v69);
      v52 = 0;
    }
    else
    {
      v50 = v68;
      v51 = v69;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v47, v69);
      v52 = 1;
      v49 = v67;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, v52, 1, v51);
    v44(v24, v27);
    sub_1BE60D544((uint64_t)&v72);
    return sub_1BE60D544((uint64_t)v75);
  }
  return result;
}

uint64_t sub_1BE60C288(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t result;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[2];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[4];

  v62 = a2;
  v3 = sub_1BE8C7C08();
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  MEMORY[0x1E0C80A78](v3);
  v54 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1BE8C7C68();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v47 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1BE8C7B90();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v48 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE8C7C2C();
  MEMORY[0x1E0C80A78](v7);
  v58 = sub_1BE8C7C50();
  v60 = *(_QWORD *)(v58 - 8);
  v8 = MEMORY[0x1E0C80A78](v58);
  v53 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v59 = (char *)&v47 - v11;
  MEMORY[0x1E0C80A78](v10);
  v61 = (char *)&v47 - v12;
  v13 = sub_1BE60B52C(&qword_1EF5671C0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BE60B52C(&qword_1EF5671C8);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v57 = (char *)&v47 - v21;
  if (a1)
  {
    v68[0] = a1;
    result = sub_1BE8C7E18();
    __break(1u);
  }
  else
  {
    sub_1BE8C7BC0();
    sub_1BE60CD6C(&v65, (uint64_t)v68);
    sub_1BE60CD84(v68, v68[3]);
    sub_1BE8C7C38();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    v22 = v57;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v57, v15, v16);
    sub_1BE60CDE8((uint64_t)v68, (uint64_t)&v65);
    v23 = v20;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
    v24 = sub_1BE8C7C74();
    v25 = sub_1BE8C7D70();
    v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = swift_slowAlloc();
      v62 = swift_slowAlloc();
      v64[0] = v62;
      *(_DWORD *)v27 = 136315394;
      LODWORD(v61) = v26;
      v29 = v66;
      v28 = v67;
      sub_1BE60CD84(&v65, v66);
      v30 = MEMORY[0x1C3B80404](v29, *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8));
      v63 = sub_1BE60CE2C(v30, v31, v64);
      sub_1BE8C7D88();
      swift_bridgeObjectRelease();
      sub_1BE60D544((uint64_t)&v65);
      *(_WORD *)(v27 + 12) = 2080;
      v60 = v27 + 14;
      v32 = v47;
      v33 = sub_1BE8C7BE4();
      v34 = v48;
      MEMORY[0x1C3B80470](v33);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v51);
      sub_1BE60D4FC();
      v35 = v52;
      v36 = sub_1BE8C7E00();
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v35);
      v63 = sub_1BE60CE2C(v36, v38, v64);
      sub_1BE8C7D88();
      v22 = v57;
      swift_bridgeObjectRelease();
      v39 = *(void (**)(char *, uint64_t))(v17 + 8);
      v39(v23, v16);
      _os_log_impl(&dword_1BE607000, v24, (os_log_type_t)v61, "Found asset %s at %s", (uint8_t *)v27, 0x16u);
      v40 = v62;
      swift_arrayDestroy();
      MEMORY[0x1C3B81DFC](v40, -1, -1);
      MEMORY[0x1C3B81DFC](v27, -1, -1);

    }
    else
    {

      sub_1BE60D544((uint64_t)&v65);
      v39 = *(void (**)(char *, uint64_t))(v17 + 8);
      v39(v20, v16);
    }
    v42 = v55;
    v41 = v56;
    v43 = v54;
    v44 = sub_1BE60D46C();
    MEMORY[0x1C3B803E0](v16, v44);
    v45 = sub_1BE8C7BFC();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
    v39(v22, v16);
    sub_1BE60D544((uint64_t)v68);
    return v45;
  }
  return result;
}

uint64_t sub_1BE60CAA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v2)(char *, char *, uint64_t);

  return sub_1BE60B950(a1, v2, a2);
}

uint64_t sub_1BE60CB78(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE60C288(a1, v1);
}

id CHModelCatalog.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHModelCatalog();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1BE60CC24()
{
  unint64_t result;

  result = qword_1EF5671A0;
  if (!qword_1EF5671A0)
  {
    result = MEMORY[0x1C3B81DA8](&protocol conformance descriptor for CHModelCatalogModelType, &type metadata for CHModelCatalogModelType);
    atomic_store(result, (unint64_t *)&qword_1EF5671A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CHModelCatalogModelType()
{
  return &type metadata for CHModelCatalogModelType;
}

uint64_t sub_1BE60CCB4()
{
  return type metadata accessor for CHModelCatalog();
}

uint64_t sub_1BE60CCBC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE8C7C8C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for CHModelCatalog()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CHModelCatalog.getModelURL(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CHModelCatalog.getModelVersion(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t sub_1BE60CD6C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *sub_1BE60CD84(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1BE60CDA8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE60B52C(&qword_1EF5671C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BE60CDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1BE60CE2C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1BE60CEFC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1BE60D564((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1BE60D564((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1BE60D544((uint64_t)v12);
  return v7;
}

uint64_t sub_1BE60CEFC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1BE8C7D94();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1BE60D0B4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1BE8C7DB8();
  if (!v8)
  {
    sub_1BE8C7DC4();
    __break(1u);
LABEL_17:
    result = sub_1BE8C7DE8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1BE60D0B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1BE60D148(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BE60D320(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1BE60D320(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1BE60D148(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1BE60D2BC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1BE8C7DA0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1BE8C7DC4();
      __break(1u);
LABEL_10:
      v2 = sub_1BE8C7D58();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1BE8C7DE8();
    __break(1u);
LABEL_14:
    result = sub_1BE8C7DC4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1BE60D2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BE60B52C(&qword_1EF5671E0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1BE60D320(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BE60B52C(&qword_1EF5671E0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BE8C7DE8();
  __break(1u);
  return result;
}

unint64_t sub_1BE60D46C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF5671D0;
  if (!qword_1EF5671D0)
  {
    v1 = sub_1BE60D4B8(&qword_1EF5671C8);
    result = MEMORY[0x1C3B81DA8](MEMORY[0x1E0D500D8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF5671D0);
  }
  return result;
}

uint64_t sub_1BE60D4B8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B81D9C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1BE60D4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF5671D8;
  if (!qword_1EF5671D8)
  {
    v1 = sub_1BE8C7B90();
    result = MEMORY[0x1C3B81DA8](MEMORY[0x1E0CB0048], v1);
    atomic_store(result, (unint64_t *)&qword_1EF5671D8);
  }
  return result;
}

uint64_t sub_1BE60D544(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1BE60D564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_1BE60D5A4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1BE60D680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE60D74C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE60D7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60D7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60D864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE60D934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE60D97C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60E0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

__n128 sub_1BE60E29C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE60E2AC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  CHTokenizedTextResultToken *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  double v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  void *v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double *v111;
  CGFloat v112;
  CGFloat v113;
  CGFloat v114;
  CGFloat v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CGFloat v121;
  CGFloat v122;
  CGFloat v123;
  CGFloat v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  id v131;
  CGRect v132;
  CGRect v133;

  v131 = a2;
  objc_msgSend_string(v131, v3, v4, v5, v6, v7);
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  symbolTextTransliteration(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_score(v131, v10, v11, v12, v13, v14);
  *(long double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = log(v15)
                                                                   + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                               + 24);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  if (objc_msgSend_isEqualToString_(v9, v16, (uint64_t)CFSTR(" "), v17, v18, v19))
  {
    v25 = *(void **)(a1 + 32);
    objc_msgSend_strokeIndexes(v131, v20, v21, v22, v23, v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v25, v27, (uint64_t)v26, v28, v29, v30);

    v31 = *(void **)(a1 + 40);
    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v32, v33, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v31, v38, (uint64_t)v37, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v43, (uint64_t)v42, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    *(long double *)(v48 + 24) = exp(*(double *)(v48 + 24)/ (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
    v49 = [CHTokenizedTextResultToken alloc];
    v55 = (void *)objc_msgSend_copy(*(void **)(a1 + 32), v50, v51, v52, v53, v54);
    v56 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
    objc_msgSend_score(v131, v57, v58, v59, v60, v61);
    v63 = v62;
    v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
    v65 = *(_QWORD *)(a1 + 48);
    v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
    v72 = objc_msgSend_count(*(void **)(a1 + 32), v67, v68, v69, v70, v71);
    v74 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v49, v73, (uint64_t)v47, (uint64_t)v55, 0, v64, v65, v66, v56, v56, v56, v63, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 56), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 64), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 72), v72);

    objc_msgSend_addObject_(*(void **)(a1 + 56), v75, (uint64_t)v74, v76, v77, v78);
    objc_msgSend_setString_(*(void **)(a1 + 40), v79, (uint64_t)&stru_1E77F6F28, v80, v81, v82);
    objc_msgSend_removeAllIndexes(*(void **)(a1 + 32), v83, v84, v85, v86, v87);
    v88 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
    v89 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_OWORD *)(v88 + 48) = *MEMORY[0x1E0C9D648];
    *(_OWORD *)(v88 + 64) = v89;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 40;

  }
  else
  {
    v90 = *(void **)(a1 + 40);
    objc_msgSend_string(v131, v20, v21, v22, v23, v24);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendString_(v90, v92, (uint64_t)v91, v93, v94, v95);

    objc_msgSend_appendString_(*(void **)(a1 + 40), v96, (uint64_t)CFSTR(" "), v97, v98, v99);
    v100 = *(void **)(a1 + 32);
    objc_msgSend_strokeIndexes(v131, v101, v102, v103, v104, v105);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v100, v107, (uint64_t)v106, v108, v109, v110);

    v111 = *(double **)(*(_QWORD *)(a1 + 112) + 8);
    v112 = v111[6];
    v113 = v111[7];
    v114 = v111[8];
    v115 = v111[9];
    objc_msgSend_bounds(v131, v116, v117, v118, v119, v120);
    v133.origin.x = v121;
    v133.origin.y = v122;
    v133.size.width = v123;
    v133.size.height = v124;
    v132.origin.x = v112;
    v132.origin.y = v113;
    v132.size.width = v114;
    v132.size.height = v115;
    *(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 48) = CGRectUnion(v132, v133);
    objc_msgSend_score(v131, v125, v126, v127, v128, v129);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v130
                                                                + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8)
                                                                            + 24);
  }

}

void sub_1BE60E5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE60E67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE60E694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE60E6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE60E6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE60E6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE60E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE60E890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60E8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE60E8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60E8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE60E8E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE60E9AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE60E9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE60E9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60EB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60EFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE60F0D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE60F0E4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  v13 = objc_msgSend_length(v6, v8, v9, v10, v11, v12);
  if (v13 <= objc_msgSend_length(v7, v14, v15, v16, v17, v18))
  {
    v25 = objc_msgSend_length(v6, v19, v20, v21, v22, v23);
    v24 = v25 < objc_msgSend_length(v7, v26, v27, v28, v29, v30);
  }
  else
  {
    v24 = -1;
  }

  return v24;
}

void sub_1BE60F17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE60F390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE60FD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE610604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, _Unwind_Exception *exception_objecta, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  void *v16;
  void *v17;

  sub_1BE61081C(&a12);
  sub_1BE61F3E8((uint64_t)&a15, (char *)a16);

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE61076C(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void **sub_1BE61081C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE610FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

double sub_1BE611148(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1BE611188(uint64_t a1)
{
  return sub_1BE61BE20(a1 + 48);
}

void sub_1BE611190(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isEqualToString;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  _QWORD *v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  _QWORD *v142;
  unint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  _QWORD *v173;
  unint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  CoreHandwriting::LaTeXSyntaxHelper *v192;
  id v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  _QWORD *v200;
  _QWORD **v201;
  int *v202;
  int *v203;
  int *v204;
  int *v205;
  int v206;
  int *v207;
  int *v208;
  int *v209;
  int *v210;
  int v211;
  int *v212;
  int *v213;
  int *v214;
  int *v215;
  int v216;
  int *v217;
  int *v218;
  int *v219;
  int *v220;
  int v221;
  _QWORD *v222;
  _QWORD *v223;
  unint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  _QWORD *v234;
  unint64_t v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  CHTokenizedMathResultToken *v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  double v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  double v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD **v285;
  int v286;
  int *v287;
  NSObject *v288;
  uint64_t *v289;
  _QWORD *v290[2];
  uint64_t v291;
  _BYTE __p[12];
  char v293;
  uint64_t v294;

  v294 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v291 = a3;
  objc_msgSend_string(v5, v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v11, v12, (uint64_t)CFSTR("("), v13, v14, v15);

  if (isEqualToString)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v17, (uint64_t)v5, v19, v20, v21);
    v22 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
    v23 = v22[8];
    v24 = v22[7];
    v25 = ((v23 - v24) << 6) - 1;
    if (v23 == v24)
      v25 = 0;
    v26 = v22[11] + v22[10];
    if (v25 != v26)
      goto LABEL_29;
    goto LABEL_28;
  }
  objc_msgSend_string(v5, v17, v18, v19, v20, v21);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_isEqualToString_(v27, v28, (uint64_t)CFSTR(")"), v29, v30, v31))
  {

LABEL_10:
    objc_msgSend_string(v5, v33, v34, v35, v36, v37);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend_isEqualToString_(v60, v61, (uint64_t)CFSTR("\\lfloor"), v62, v63, v64);

    if (v65)
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v66, (uint64_t)v5, v68, v69, v70);
      v22 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
      v71 = v22[8];
      v24 = v22[7];
      v72 = ((v71 - v24) << 6) - 1;
      if (v71 == v24)
        v72 = 0;
      v26 = v22[11] + v22[10];
      if (v72 != v26)
        goto LABEL_29;
    }
    else
    {
      objc_msgSend_string(v5, v66, v67, v68, v69, v70);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isEqualToString_(v73, v74, (uint64_t)CFSTR("\\rfloor"), v75, v76, v77))
      {
        v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 88);

        if (v78)
        {
          v84 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
          v85 = v84[11] + v84[10] - 1;
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v79, *(_QWORD *)(*(_QWORD *)(v84[7] + ((v85 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v85 & 0x1FF)), v81, v82, v83);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v86, (uint64_t)v40, (uint64_t)CFSTR("\\left\\lfloor"), v87, v88);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          v90 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
          v91 = v90[11] + v90[10] - 1;
          objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v92, (uint64_t)v89, *(_QWORD *)(*(_QWORD *)(v90[7] + ((v91 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v91 & 0x1FF)), v93, v94);

          v95 = *(void **)(a1 + 32);
          objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v96, (uint64_t)v5, (uint64_t)CFSTR("\\right\\rfloor"), v97, v98);
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v95, v100, (uint64_t)v99, v101, v102, v103);

          v59 = *(_QWORD *)(a1 + 56);
          goto LABEL_18;
        }
      }
      else
      {

      }
      objc_msgSend_string(v5, v79, v80, v81, v82, v83);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      v116 = objc_msgSend_isEqualToString_(v111, v112, (uint64_t)CFSTR("\\lceil"), v113, v114, v115);

      if (!v116)
      {
        objc_msgSend_string(v5, v117, v118, v119, v120, v121);
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v124, v125, (uint64_t)CFSTR("\\rceil"), v126, v127, v128))
        {
          v129 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 88);

          if (v129)
          {
            v135 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
            v136 = v135[11] + v135[10] - 1;
            objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v130, *(_QWORD *)(*(_QWORD *)(v135[7] + ((v136 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v136 & 0x1FF)), v132, v133, v134);
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v138, (uint64_t)v137, (uint64_t)CFSTR("\\left\\lceil"), v139, v140);
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            v142 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
            v143 = v142[11] + v142[10] - 1;
            objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v144, (uint64_t)v141, *(_QWORD *)(*(_QWORD *)(v142[7] + ((v143 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v143 & 0x1FF)), v145, v146);

            v147 = *(void **)(a1 + 32);
            objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v148, (uint64_t)v5, (uint64_t)CFSTR("\\right\\rceil"), v149, v150);
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v147, v152, (uint64_t)v151, v153, v154, v155);

            sub_1BE611DE8((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48));
            goto LABEL_30;
          }
        }
        else
        {

        }
        objc_msgSend_string(v5, v130, v131, v132, v133, v134);
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        v161 = objc_msgSend_isEqualToString_(v156, v157, (uint64_t)CFSTR("|"), v158, v159, v160);

        if (!v161)
        {
          objc_msgSend_addObject_(*(void **)(a1 + 32), v162, (uint64_t)v5, v163, v164, v165);
          goto LABEL_30;
        }
        v166 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
        v167 = v166[11];
        if (v167
          && *(_QWORD *)(*(_QWORD *)(v166[7] + (((unint64_t)(v167 + v166[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v167 + v166[10] - 1) & 0x1FF)) < a3 - 1)
        {
          objc_msgSend_arrayWithObject_(MEMORY[0x1E0C99DE8], v162, (uint64_t)CFSTR("\\left|"), v163, v164, v165);
          v172 = (void *)objc_claimAutoreleasedReturnValue();
          v173 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
          v174 = v173[11] + v173[10] - 1;
          v175 = *(_QWORD *)(*(_QWORD *)(v173[7] + ((v174 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v174 & 0x1FF)) + 1;
          if (v175 < a3)
          {
            do
            {
              objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v168, v175, v169, v170, v171);
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_string(v176, v177, v178, v179, v180, v181);
              v182 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObject_(v172, v183, (uint64_t)v182, v184, v185, v186);

              ++v175;
            }
            while (a3 != v175);
          }
          objc_msgSend_addObject_(v172, v168, (uint64_t)CFSTR("\\right|"), v169, v170, v171);
          objc_msgSend_componentsJoinedByString_(v172, v187, (uint64_t)CFSTR(" "), v188, v189, v190);
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          v192 = *(CoreHandwriting::LaTeXSyntaxHelper **)(*(_QWORD *)(a1 + 40) + 8);
          v193 = objc_retainAutorelease(v191);
          v199 = (char *)objc_msgSend_UTF8String(v193, v194, v195, v196, v197, v198);
          sub_1BE61076C(__p, v199);
          sub_1BE7C6930(v192, (uint64_t *)__p, &v289);
          if (v293 < 0)
            operator delete(*(void **)__p);
          v200 = v290[0];
          if (v290[0])
          {
            v201 = v290;
            v202 = (int *)v290;
            v203 = (int *)v290[0];
            do
            {
              v204 = v203;
              v205 = v202;
              v206 = v203[7];
              if (v206 >= 2)
                v202 = v203;
              else
                v203 += 2;
              v203 = *(int **)v203;
            }
            while (v203);
            if (v202 == (int *)v290)
            {
              v222 = v290[0];
            }
            else
            {
              if (v206 < 2)
                v204 = v205;
              if (v204[7] > 2)
              {
                v222 = v290[0];
              }
              else
              {
                v207 = (int *)v290;
                v208 = (int *)v290[0];
                do
                {
                  v209 = v208;
                  v210 = v207;
                  v211 = v208[7];
                  if (v211 >= 5)
                    v207 = v208;
                  else
                    v208 += 2;
                  v208 = *(int **)v208;
                }
                while (v208);
                if (v207 == (int *)v290)
                  goto LABEL_61;
                if (v211 < 5)
                  v209 = v210;
                if (v209[7] >= 6)
                {
LABEL_61:
                  v212 = (int *)v290;
                  v213 = (int *)v290[0];
                  do
                  {
                    v214 = v213;
                    v215 = v212;
                    v216 = v213[7];
                    if (v216 >= 6)
                      v212 = v213;
                    else
                      v213 += 2;
                    v213 = *(int **)v213;
                  }
                  while (v213);
                  if (v212 == (int *)v290)
                    goto LABEL_70;
                  if (v216 < 6)
                    v214 = v215;
                  if (v214[7] >= 7)
                  {
LABEL_70:
                    v217 = (int *)v290;
                    v218 = (int *)v290[0];
                    do
                    {
                      v219 = v218;
                      v220 = v217;
                      v221 = v218[7];
                      if (v221 >= 7)
                        v217 = v218;
                      else
                        v218 += 2;
                      v218 = *(int **)v218;
                    }
                    while (v218);
                    if (v217 == (int *)v290)
                      goto LABEL_79;
                    if (v221 < 7)
                      v219 = v220;
                    v222 = v290[0];
                    if (v219[7] > 7)
                    {
LABEL_79:
                      sub_1BE62033C((uint64_t)&v289, v290[0]);

                      v223 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
                      v224 = v223[11] + v223[10] - 1;
                      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v225, *(_QWORD *)(*(_QWORD *)(v223[7] + ((v224 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v224 & 0x1FF)), v226, v227, v228);
                      v229 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v230, (uint64_t)v229, (uint64_t)CFSTR("\\left|"), v231, v232);
                      v233 = (void *)objc_claimAutoreleasedReturnValue();
                      v234 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
                      v235 = v234[11] + v234[10] - 1;
                      objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v236, (uint64_t)v233, *(_QWORD *)(*(_QWORD *)(v234[7] + ((v235 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v235 & 0x1FF)), v237, v238);

                      v239 = [CHTokenizedMathResultToken alloc];
                      objc_msgSend_strokeIndexes(v5, v240, v241, v242, v243, v244);
                      v245 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_score(v5, v246, v247, v248, v249, v250);
                      v252 = v251;
                      objc_msgSend_bounds(v5, v253, v254, v255, v256, v257);
                      v259 = v258;
                      v261 = v260;
                      v263 = v262;
                      v265 = v264;
                      objc_msgSend_maskedAlternative(v5, v266, v267, v268, v269, v270);
                      v271 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_maskedAlternativeScore(v5, v272, v273, v274, v275, v276);
                      v279 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v239, v277, (uint64_t)CFSTR("\\right|"), (uint64_t)v245, 4096, (uint64_t)v271, v252, v259, v261, v263, v265, v278);

                      objc_msgSend_addObject_(*(void **)(a1 + 32), v280, (uint64_t)v279, v281, v282, v283);
                      sub_1BE611DE8((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48));

                      goto LABEL_30;
                    }
                  }
                  else
                  {
                    v222 = v290[0];
                  }
                }
                else
                {
                  v222 = v290[0];
                }
              }
            }
            do
            {
              v284 = v222;
              v285 = v201;
              v286 = *((_DWORD *)v222 + 7);
              if (v286 >= 0)
                v201 = (_QWORD **)v222;
              else
                ++v222;
              v222 = (_QWORD *)*v222;
            }
            while (v222);
            if (v201 != v290)
            {
              v287 = (int *)(v286 >= 0 ? v284 : v285);
              if (v287[7] <= 0)
              {
                CHOSLogForCategory(1);
                v288 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v288, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)__p = 138412290;
                  *(_QWORD *)&__p[4] = v193;
                  _os_log_impl(&dword_1BE607000, v288, OS_LOG_TYPE_FAULT, "CHBracketsMatchingStep symbol out of codemap in latexHelper for %@", __p, 0xCu);
                }

                v200 = v290[0];
              }
            }
          }
          sub_1BE62033C((uint64_t)&v289, v200);

        }
        objc_msgSend_addObject_(*(void **)(a1 + 32), v162, (uint64_t)v5, v163, v164, v165);
        sub_1BE611D60((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48), &v291);
        goto LABEL_30;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 32), v117, (uint64_t)v5, v119, v120, v121);
      v22 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
      v122 = v22[8];
      v24 = v22[7];
      v123 = ((v122 - v24) << 6) - 1;
      if (v122 == v24)
        v123 = 0;
      v26 = v22[11] + v22[10];
      if (v123 != v26)
        goto LABEL_29;
    }
LABEL_28:
    sub_1BE61FC74(v22 + 6);
    v24 = v22[7];
    v26 = v22[11] + v22[10];
LABEL_29:
    *(_QWORD *)(*(_QWORD *)(v24 + ((v26 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v26 & 0x1FF)) = a3;
    ++v22[11];
    goto LABEL_30;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 88);

  if (!v32)
    goto LABEL_10;
  v38 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
  v39 = v38[11] + v38[10] - 1;
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v33, *(_QWORD *)(*(_QWORD *)(v38[7] + ((v39 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v39 & 0x1FF)), v35, v36, v37);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v41, (uint64_t)v40, (uint64_t)CFSTR("\\left("), v42, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
  v46 = v45[11] + v45[10] - 1;
  objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 32), v47, (uint64_t)v44, *(_QWORD *)(*(_QWORD *)(v45[7] + ((v46 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v46 & 0x1FF)), v48, v49);

  v50 = *(void **)(a1 + 32);
  objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v51, (uint64_t)v5, (uint64_t)CFSTR("\\right)"), v52, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v50, v55, (uint64_t)v54, v56, v57, v58);

  v59 = *(_QWORD *)(a1 + 48);
LABEL_18:
  v104 = *(_QWORD **)(v59 + 8);
  v106 = v104[7];
  v105 = v104[8];
  v107 = ((v105 - v106) << 6) - 1;
  v108 = v105 == v106;
  v110 = v104[10];
  v109 = v104[11];
  if (v108)
    v107 = 0;
  v104[11] = v109 - 1;
  if ((unint64_t)(v107 - (v109 + v110) + 1) >= 0x400)
  {
    operator delete(*(void **)(v105 - 8));
    v104[8] -= 8;
  }

LABEL_30:
}

void sub_1BE611C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE611D60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1BE61FC74(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1BE611DE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v1 = a1[2];
  v3 = ((v1 - v2) << 6) - 1;
  v4 = v1 == v2;
  v6 = a1[4];
  v5 = a1[5];
  if (v4)
    v3 = 0;
  a1[5] = v5 - 1;
  if ((unint64_t)(v3 - (v5 + v6) + 1) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void sub_1BE612474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE6125EC(uint64_t a1, void *a2, unint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isEqualToString;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v49 = a2;
  if ((objc_msgSend_properties(v49, v5, v6, v7, v8, v9) & 0x2000) != 0)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v10, (uint64_t)v49, v12, v13, v14);

  }
  else
  {
    if (!a3)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (objc_msgSend_properties(v49, v10, v11, v12, v13, v14) & 0x80) != 0;
    if (!objc_msgSend_properties(v49, v10, v11, v12, v13, v14)
      || (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 0x10) != 0
      || (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 4) != 0
      && (objc_msgSend_string(v49, v15, v16, v17, v18, v19),
          v20 = (void *)objc_claimAutoreleasedReturnValue(),
          isEqualToString = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)CFSTR("'"), v22, v23, v24),
          v20,
          (isEqualToString & 1) != 0)
      || (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 0x20) != 0
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
      && (objc_msgSend_properties(v49, v15, v16, v17, v18, v19) & 0x40) != 0)
    {
      v31 = (void *)objc_msgSend_mutableCopy(v49, v15, v16, v17, v18, v19);
      v36 = v31;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
        || (v37 = *(_QWORD *)(a1 + 56), v37 == 0x7FFFFFFFFFFFFFFFLL)
        || v37 > a3
        || *(_QWORD *)(a1 + 64) + v37 <= a3)
      {
        objc_msgSend_setProperties_(v31, v32, 64, v33, v34, v35);
      }
      else
      {
        objc_msgSend_setProperties_(v31, v32, 0x80000, v33, v34, v35);
      }
      v43 = *(void **)(a1 + 32);
      v44 = (void *)objc_msgSend_copy(v36, v38, v39, v40, v41, v42);
      objc_msgSend_addObject_(v43, v45, (uint64_t)v44, v46, v47, v48);

    }
    else
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v15, (uint64_t)v49, v17, v18, v19);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (objc_msgSend_properties(v49, v26, v27, v28, v29, v30) & 2) != 0;

  }
}

void sub_1BE612798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6127B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6127CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6127E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6127F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE61280C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6128CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  objc_msgSend_objectForKey_(*(void **)(a1 + 32), a2, (uint64_t)CHMathPostProcessingOptionLocales, a4, a5, a6);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v6 = objc_alloc(MEMORY[0x1E0D09EC8]);
    v11 = (id)objc_msgSend_initWithLocales_(v6, v7, (uint64_t)v20, v8, v9, v10);
  }
  else
  {
    v11 = objc_alloc_init(MEMORY[0x1E0D09EC8]);
  }
  v12 = (void *)qword_1EF567EE8;
  qword_1EF567EE8 = (uint64_t)v11;

  objc_msgSend_conversionVerbs((void *)qword_1EF567EE8, v13, v14, v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)qword_1EF567ED8;
  qword_1EF567ED8 = v18;

}

void sub_1BE612958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE612C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE612D5C()
{
  JUMPOUT(0x1BE612D40);
}

void sub_1BE612D64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v6 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByCharactersInSet_(CFSTR("0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z ! } \\right) \\right\\rfloor \\right\\rceil \\right|"), v7, (uint64_t)v18, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v6, v12, (uint64_t)v11, v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)qword_1EF568BE8;
  qword_1EF568BE8 = v16;

}

void sub_1BE612DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE612DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE612E0C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  CHTokenizedMathResultToken *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  CHTokenizedMathResultToken *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;

  v77 = a2;
  v8 = objc_msgSend_properties(v77, v3, v4, v5, v6, v7);
  v14 = objc_msgSend_properties(v77, v9, v10, v11, v12, v13);
  v20 = objc_msgSend_properties(v77, v15, v16, v17, v18, v19);
  v31 = objc_msgSend_properties(v77, v21, v22, v23, v24, v25);
  v32 = (v14 >> 19) & 1;
  v33 = v8 & 0x40;
  if ((v8 & 0x40) != 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v53 = [CHTokenizedMathResultToken alloc];
    objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v54, v55, v56, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v53, v60, (uint64_t)CFSTR("\\,"), (uint64_t)v59, 0x2000, v61, 1.0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));

    objc_msgSend_addObject_(*(void **)(a1 + 32), v62, (uint64_t)v43, v63, v64, v65);
    goto LABEL_13;
  }
  if ((v20 & 0x2000) != 0)
  {
    objc_msgSend_string(v77, v26, v27, v28, v29, v30);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_isEqualToString_(v43, v48, (uint64_t)CFSTR("\\"), v49, v50, v51))
      goto LABEL_13;
    v52 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);

    if (v52)
    {
      objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v26, (uint64_t)v77, (uint64_t)CFSTR("\\,"), v29, v30);
      v43 = v77;
      v77 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
  }
  else if ((_DWORD)v32 != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v34 = [CHTokenizedMathResultToken alloc];
    objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v35, v36, v37, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v34, v41, (uint64_t)CFSTR("\\"), (uint64_t)v40, 0x2000, v42, 1.0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));

    objc_msgSend_addObject_(*(void **)(a1 + 32), v44, (uint64_t)v43, v45, v46, v47);
LABEL_13:

  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v26, (uint64_t)v77, v28, v29, v30);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v33 >> 6;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = (v31 & 2) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v32;
  v66 = (void *)qword_1EF568BE8;
  objc_msgSend_string(v77, v67, v68, v69, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend_containsObject_(v66, v73, (uint64_t)v72, v74, v75, v76);

}

void sub_1BE613074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6130D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6130F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE613104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE613118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE61312C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6131D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6131EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE613440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE613460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE613478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE613540(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v35 = v3;
  objc_msgSend_string(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend_containsObject_(v4, v11, (uint64_t)v10, v12, v13, v14);

  if ((_DWORD)v4)
  {
    v20 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_string(v35, v15, v16, v17, v18, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v20, v22, (uint64_t)CFSTR("\\text{%@}"), v23, v24, v25, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_updatedToken_withString_(CHTokenizedMathResultToken, v27, (uint64_t)v35, (uint64_t)v26, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(*(void **)(a1 + 40), v31, (uint64_t)v30, v32, v33, v34);

  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v15, (uint64_t)v35, v17, v18, v19);
  }

}

void sub_1BE613638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE613654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE61366C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE613684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE613698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6136B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE613B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE613CBC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isEqualToString;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  id v49;

  v49 = a2;
  v8 = objc_msgSend_properties(v49, v3, v4, v5, v6, v7);
  if (objc_msgSend_properties(v49, v9, v10, v11, v12, v13))
  {
    isEqualToString = 0;
  }
  else
  {
    objc_msgSend_string(v49, v14, v15, v16, v17, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v20, v21, v22, v23, v24, v25) == 1)
    {
      objc_msgSend_string(v49, v26, v27, v28, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], v32, v33, v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByTrimmingCharactersInSet_(v31, v38, (uint64_t)v37, v39, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v42, v43, (uint64_t)&stru_1E77F6F28, v44, v45, v46);

    }
    else
    {
      isEqualToString = 0;
    }

  }
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v48 = isEqualToString | ((v8 & 0x10) >> 4);
  if (!*(_BYTE *)(v47 + 24))
    LOBYTE(v48) = 0;
  *(_BYTE *)(v47 + 24) = v48;

}

void sub_1BE613DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE613DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE613E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6142C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v31;

  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }

  v31 = *(void **)(v29 - 128);
  if (v31)
  {
    *(_QWORD *)(v29 - 120) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

void sub_1BE614468()
{
  void *v0;
  uint64_t v1;

  if (!*(_QWORD *)(v1 - 128))
    JUMPOUT(0x1BE61444CLL);
  JUMPOUT(0x1BE614444);
}

void sub_1BE614494()
{
  void *v0;
  uint64_t v1;

  if (!*(_QWORD *)(v1 - 128))
    JUMPOUT(0x1BE61444CLL);
  JUMPOUT(0x1BE614444);
}

void sub_1BE6144A8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 128))
    JUMPOUT(0x1BE61444CLL);
  JUMPOUT(0x1BE614444);
}

void sub_1BE6144D0()
{
  void *v0;
  uint64_t v1;

  if (!*(_QWORD *)(v1 - 128))
    JUMPOUT(0x1BE61444CLL);
  JUMPOUT(0x1BE614444);
}

void sub_1BE6144E4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 128))
    JUMPOUT(0x1BE614444);
  JUMPOUT(0x1BE61444CLL);
}

__n128 sub_1BE6144F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE614518(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE614530(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  id v37;

  v37 = a2;
  v11 = objc_msgSend_properties(v37, v6, v7, v8, v9, v10);
  v16 = (uint64_t)v37;
  if ((v11 & 0x2000) != 0)
  {
    v17 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v19 = (char *)v17[7];
    v18 = v17[8];
    if ((unint64_t)v19 >= v18)
    {
      v21 = (char *)v17[6];
      v22 = (v19 - v21) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        sub_1BE61F930();
      v24 = v18 - (_QWORD)v21;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          sub_1BE61F100();
        v26 = operator new(8 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[8 * v22];
      *v27 = *a4;
      v20 = v27 + 1;
      if (v19 != v21)
      {
        v28 = v19 - v21 - 8;
        if (v28 < 0x58)
          goto LABEL_30;
        if ((unint64_t)(v21 - v26) < 0x20)
          goto LABEL_30;
        v29 = (v28 >> 3) + 1;
        v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = &v19[-v30];
        v27 = (_QWORD *)((char *)v27 - v30);
        v32 = &v26[8 * v22 - 16];
        v33 = v19 - 16;
        v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        v19 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            v36 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v27 = v36;
          }
          while (v19 != v21);
        }
      }
      v17[6] = v27;
      v17[7] = v20;
      v17[8] = &v26[8 * v25];
      if (v21)
        operator delete(v21);
      v16 = (uint64_t)v37;
    }
    else
    {
      *(_QWORD *)v19 = *a4;
      v20 = v19 + 8;
    }
    v17[7] = v20;
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v12, v16, v13, v14, v15);

}

void sub_1BE6146CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE614D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

double sub_1BE614E98(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1BE614ED8(uint64_t a1)
{
  return sub_1BE61BEF4(a1 + 48);
}

double sub_1BE614EE0(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1BE614F20(uint64_t a1)
{
  return sub_1BE61BEF4(a1 + 48);
}

double sub_1BE614F28(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1BE614F68(uint64_t a1)
{
  return sub_1BE61BEF4(a1 + 48);
}

void sub_1BE614F70(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isEqualToString;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  unint64_t v38;
  id v39;
  _QWORD *v40;
  unint64_t v41;
  id v42;
  _QWORD *v43;
  unint64_t v44;
  id v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  void **v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  int64_t v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  id v191;
  _QWORD *v192;
  unint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  id v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  id v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  id v238;
  void *v239;
  double x;
  double y;
  double width;
  double height;
  id v244;
  const char *v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  uint64_t i;
  void *v256;
  double v257;
  double v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  CGFloat v264;
  CGFloat v265;
  CGFloat v266;
  CGFloat v267;
  uint64_t v268;
  char *v269;
  char *v270;
  void *v271;
  void *v272;
  unint64_t v273;
  char *v274;
  void *v275;
  char *v276;
  char *v277;
  unint64_t v278;
  void *v279;
  unint64_t v280;
  char *v281;
  char *v282;
  int64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  unint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  void *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  unint64_t v298;
  int64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 *v306;
  char *v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  unint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  unint64_t v318;
  uint64_t v319;
  __int128 *v320;
  _OWORD *v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  int64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  __int128 *v338;
  _OWORD *v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  id v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  _QWORD *v363;
  id v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  id v371;
  const char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  char *v377;
  int v378;
  CHTokenizedMathResultToken *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  const char *v386;
  uint64_t v387;
  void *v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  unint64_t v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  int64_t v410;
  unint64_t v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  __int128 *v417;
  _OWORD *v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  void *v422;
  void *v423;
  id v424;
  id v425;
  void *v426;
  void *__p[2];
  char v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  void *v433;
  _BYTE v434[128];
  uint64_t v435;
  CGRect v436;
  CGRect v437;
  CGRect v438;

  v435 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v426 = v3;
  objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v9, v10, (uint64_t)CFSTR("^"), v11, v12, v13);

  if (isEqualToString)
  {
    objc_msgSend_arrayWithObject_(MEMORY[0x1E0C99DE8], v15, (uint64_t)v3, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
    v22 = v21[7];
    v23 = v21[8];
    v24 = ((v23 - v22) << 6) - 1;
    if (v23 == v22)
      v24 = 0;
    if (v24 == v21[11] + v21[10])
    {
      sub_1BE6204C0(v21 + 6);
      v22 = v21[7];
      v23 = v21[8];
    }
    if (v23 == v22)
    {
      v26 = 0;
    }
    else
    {
      v25 = v21[11] + v21[10];
      v26 = (_QWORD *)(*(_QWORD *)(v22 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF));
    }
    v424 = v20;
    *v26 = v424;
    ++v21[11];
    objc_msgSend_strokeIndexes(v426, v102, v103, v104, v105, v106);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v113 = (void *)objc_msgSend_mutableCopy(v107, v108, v109, v110, v111, v112);

    v114 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
    v116 = (char *)v114[7];
    v115 = (char *)v114[8];
    v117 = v115 - v116;
    if (v115 == v116)
      v118 = 0;
    else
      v118 = ((v115 - v116) << 6) - 1;
    v119 = v114[10];
    if (v118 != v114[11] + v119)
      goto LABEL_161;
    v120 = v119 >= 0x200;
    v121 = v119 - 512;
    if (!v120)
    {
      v423 = v113;
      v268 = v117 >> 3;
      v269 = (char *)v114[9];
      v270 = (char *)v114[6];
      if (v117 >> 3 >= (unint64_t)((v269 - v270) >> 3))
      {
        if (v269 == v270)
          v273 = 1;
        else
          v273 = (v269 - v270) >> 2;
        if (!(v273 >> 61))
        {
          v274 = (char *)operator new(8 * v273);
          v275 = operator new(0x1000uLL);
          v276 = &v274[8 * v268];
          v277 = &v274[8 * v273];
          if (v268 == v273)
          {
            v422 = v275;
            if (v117 < 1)
            {
              if (v115 == v116)
                v287 = 1;
              else
                v287 = v117 >> 2;
              if (v287 >> 61)
                sub_1BE61F100();
              v276 = (char *)operator new(8 * v287);
              v277 = &v276[8 * v287];
              operator delete(v274);
              v116 = (char *)v114[7];
              v115 = (char *)v114[8];
              v274 = v276;
            }
            else
            {
              v278 = v268 + 2;
              if (v268 >= -1)
                v278 = v268 + 1;
              v276 -= 8 * (v278 >> 1);
            }
            v275 = v422;
          }
          *(_QWORD *)v276 = v275;
          v288 = v276 + 8;
          if (v115 == v116)
          {
            v289 = v276;
            v290 = v276 + 8;
          }
          else
          {
            do
            {
              if (v276 == v274)
              {
                if (v288 >= v277)
                {
                  if (v277 == v276)
                    v296 = 1;
                  else
                    v296 = (v277 - v276) >> 2;
                  if (v296 >> 61)
                    sub_1BE61F100();
                  v297 = (char *)operator new(8 * v296);
                  v274 = v297;
                  v298 = (v296 + 3) >> 2;
                  v292 = &v297[8 * v298];
                  v290 = v292;
                  v299 = v288 - v276;
                  if (v288 != v276)
                  {
                    v290 = &v292[v299 & 0xFFFFFFFFFFFFFFF8];
                    v300 = v299 - 8;
                    v301 = &v297[8 * v298];
                    v302 = v276;
                    if (v300 < 0x38)
                      goto LABEL_205;
                    v303 = 8 * v298;
                    v301 = &v297[8 * v298];
                    v302 = v276;
                    if ((unint64_t)(v301 - v276) < 0x20)
                      goto LABEL_205;
                    v304 = (v300 >> 3) + 1;
                    v305 = 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
                    v301 = &v292[v305];
                    v302 = &v276[v305];
                    v306 = (__int128 *)(v276 + 16);
                    v307 = &v297[v303 + 16];
                    v308 = v304 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v309 = *v306;
                      *((_OWORD *)v307 - 1) = *(v306 - 1);
                      *(_OWORD *)v307 = v309;
                      v306 += 2;
                      v307 += 32;
                      v308 -= 4;
                    }
                    while (v308);
                    if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_205:
                      do
                      {
                        v310 = *(_QWORD *)v302;
                        v302 += 8;
                        *(_QWORD *)v301 = v310;
                        v301 += 8;
                      }
                      while (v301 != v290);
                    }
                  }
                  v277 = &v297[8 * v296];
                  operator delete(v276);
                }
                else
                {
                  v294 = (v277 - v288) >> 3;
                  if (v294 >= -1)
                    v295 = v294 + 1;
                  else
                    v295 = v294 + 2;
                  v290 = &v288[8 * (v295 >> 1)];
                  v292 = &v276[8 * (v295 >> 1)];
                  if (v288 == v276)
                  {
                    v274 = v288;
                  }
                  else
                  {
                    memmove(&v276[8 * (v295 >> 1)], v276, v288 - v276);
                    v274 = v276;
                  }
                }
              }
              else
              {
                v292 = v276;
                v290 = v288;
              }
              v293 = *((_QWORD *)v115 - 1);
              v115 -= 8;
              *((_QWORD *)v292 - 1) = v293;
              v289 = v292 - 8;
              v288 = v290;
              v276 = v289;
            }
            while (v115 != (char *)v114[7]);
          }
          v291 = (void *)v114[6];
          v114[6] = v274;
          v114[7] = v289;
          v115 = v290;
          v114[8] = v290;
          v114[9] = v277;
          v113 = v423;
          if (v291)
          {
            operator delete(v291);
            v115 = (char *)v114[8];
          }
          goto LABEL_160;
        }
      }
      else
      {
        v271 = operator new(0x1000uLL);
        v272 = v271;
        if (v269 != v115)
        {
          *(_QWORD *)v115 = v271;
          v115 = (char *)(v114[8] + 8);
          v114[8] = v115;
          v113 = v423;
LABEL_160:
          v116 = (char *)v114[7];
LABEL_161:
          if (v115 == v116)
          {
            v344 = 0;
          }
          else
          {
            v343 = v114[11] + v114[10];
            v344 = (_QWORD *)(*(_QWORD *)&v116[(v343 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v343 & 0x1FF));
          }
          v345 = v113;
          *v344 = v345;
          ++v114[11];
          objc_msgSend_string(v426, v346, v347, v348, v349, v350);
          v351 = (void *)objc_claimAutoreleasedReturnValue();
          v357 = (void *)objc_msgSend_mutableCopy(v351, v352, v353, v354, v355, v356);

          v358 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
          v359 = v358[7];
          v360 = v358[8];
          v361 = ((v360 - v359) << 6) - 1;
          if (v360 == v359)
            v361 = 0;
          if (v361 == v358[11] + v358[10])
          {
            sub_1BE620B88(v358 + 6);
            v359 = v358[7];
            v360 = v358[8];
          }
          if (v360 == v359)
          {
            v363 = 0;
          }
          else
          {
            v362 = v358[11] + v358[10];
            v363 = (_QWORD *)(*(_QWORD *)(v359 + ((v362 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v362 & 0x1FF));
          }
          v364 = v357;
          *v363 = v364;
          ++v358[11];
          v365 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
          v366 = v365[8];
          v367 = v365[7];
          v368 = ((v366 - v367) << 6) - 1;
          if (v366 == v367)
            v368 = 0;
          v369 = v365[11] + v365[10];
          v3 = v426;
          if (v368 == v369)
          {
            sub_1BE61FC74(v365 + 6);
            v367 = v365[7];
            v369 = v365[11] + v365[10];
          }
          *(_QWORD *)(*(_QWORD *)(v367 + ((v369 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v369 & 0x1FF)) = 0;
          ++v365[11];

          goto LABEL_176;
        }
        if (v116 == v270)
        {
          if (v115 == v116)
            v311 = 1;
          else
            v311 = (v269 - v116) >> 2;
          if (v311 >> 61)
            goto LABEL_201;
          v312 = (char *)operator new(8 * v311);
          v313 = (v311 + 3) >> 2;
          v286 = &v312[8 * v313];
          v314 = v286;
          if (v115 != v116)
          {
            v314 = &v286[8 * v268];
            v315 = &v312[8 * v313];
            v316 = v116;
            if ((unint64_t)(v117 - 8) < 0x38)
              goto LABEL_206;
            v317 = &v312[8 * v313];
            v315 = v317;
            v316 = v116;
            if ((unint64_t)(v317 - v116) < 0x20)
              goto LABEL_206;
            v318 = ((unint64_t)(v117 - 8) >> 3) + 1;
            v319 = 8 * (v318 & 0x3FFFFFFFFFFFFFFCLL);
            v315 = &v286[v319];
            v316 = &v116[v319];
            v320 = (__int128 *)(v116 + 16);
            v321 = v317 + 16;
            v322 = v318 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v323 = *v320;
              *(v321 - 1) = *(v320 - 1);
              *v321 = v323;
              v320 += 2;
              v321 += 2;
              v322 -= 4;
            }
            while (v322);
            if (v318 != (v318 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_206:
              do
              {
                v324 = *(_QWORD *)v316;
                v316 += 8;
                *(_QWORD *)v315 = v324;
                v315 += 8;
              }
              while (v315 != v314);
            }
          }
          v114[6] = v312;
          v114[7] = v286;
          v114[8] = v314;
          v114[9] = &v312[8 * v311];
          if (v116)
          {
            operator delete(v116);
            v286 = (char *)v114[7];
          }
        }
        else
        {
          v286 = v116;
        }
        *((_QWORD *)v286 - 1) = v272;
        v326 = (char *)v114[7];
        v325 = (char *)v114[8];
        v114[7] = v326 - 8;
        v327 = *((_QWORD *)v326 - 1);
        v114[7] = v326;
        v113 = v423;
        if (v325 != (char *)v114[9])
        {
LABEL_199:
          *(_QWORD *)v325 = v327;
          v115 = (char *)(v114[8] + 8);
          v114[8] = v115;
          goto LABEL_160;
        }
        v328 = (char *)v114[6];
        if (v326 > v328)
        {
          v329 = (v326 - v328) >> 3;
          if (v329 >= -1)
            v330 = v329 + 1;
          else
            v330 = v329 + 2;
          v331 = v330 >> 1;
          v332 = -v331;
          v333 = &v326[-8 * v331];
          v334 = v325 - v326;
          if (v325 != v326)
          {
            memmove(&v326[-8 * v331], v326, v325 - v326);
            v326 = (char *)v114[7];
          }
          v325 = &v333[v334];
          v114[7] = &v326[8 * v332];
          v114[8] = &v333[v334];
          goto LABEL_199;
        }
        if (v325 == v328)
          v407 = 1;
        else
          v407 = (v325 - v328) >> 2;
        if (!(v407 >> 61))
        {
          v408 = (char *)operator new(8 * v407);
          v409 = &v408[8 * (v407 >> 2)];
          v410 = v325 - v326;
          v51 = v325 == v326;
          v325 = v409;
          v113 = v423;
          if (v51)
            goto LABEL_197;
          v325 = &v409[v410 & 0xFFFFFFFFFFFFFFF8];
          v411 = v410 - 8;
          if (v411 >= 0x38)
          {
            v413 = &v408[8 * (v407 >> 2)];
            v412 = v413;
            if ((unint64_t)(v413 - v326) >= 0x20)
            {
              v414 = (v411 >> 3) + 1;
              v415 = 8 * (v414 & 0x3FFFFFFFFFFFFFFCLL);
              v412 = &v409[v415];
              v416 = &v326[v415];
              v417 = (__int128 *)(v326 + 16);
              v418 = v413 + 16;
              v419 = v414 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v420 = *v417;
                *(v418 - 1) = *(v417 - 1);
                *v418 = v420;
                v417 += 2;
                v418 += 2;
                v419 -= 4;
              }
              while (v419);
              v326 = v416;
              if (v414 == (v414 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_197:
                v114[6] = v408;
                v114[7] = v409;
                v114[8] = v325;
                v114[9] = &v408[8 * v407];
                if (v328)
                {
                  operator delete(v328);
                  v325 = (char *)v114[8];
                }
                goto LABEL_199;
              }
            }
          }
          else
          {
            v412 = &v408[8 * (v407 >> 2)];
          }
          do
          {
            v421 = *(_QWORD *)v326;
            v326 += 8;
            *(_QWORD *)v412 = v421;
            v412 += 8;
          }
          while (v412 != v325);
          goto LABEL_197;
        }
      }
LABEL_201:
      sub_1BE61F100();
    }
    v114[10] = v121;
    v122 = v116 + 8;
    v123 = *(_QWORD *)v116;
    v114[7] = v116 + 8;
    if (v115 != (char *)v114[9])
    {
LABEL_159:
      *(_QWORD *)v115 = v123;
      v115 = (char *)(v114[8] + 8);
      v114[8] = v115;
      goto LABEL_160;
    }
    v124 = (char *)v114[6];
    if (v122 > v124)
    {
      v125 = (v122 - v124) >> 3;
      if (v125 >= -1)
        v126 = v125 + 1;
      else
        v126 = v125 + 2;
      v127 = v126 >> 1;
      v128 = -v127;
      v129 = &v122[-8 * v127];
      v130 = v115 - v122;
      if (v115 != v122)
      {
        memmove(&v122[-8 * v127], v122, v115 - v122);
        v115 = (char *)v114[7];
      }
      v131 = &v115[8 * v128];
      v115 = &v129[v130];
      v114[7] = v131;
      v114[8] = &v129[v130];
      goto LABEL_159;
    }
    if (v115 == v124)
      v280 = 1;
    else
      v280 = (v115 - v124) >> 2;
    if (v280 >> 61)
      goto LABEL_201;
    v281 = (char *)operator new(8 * v280);
    v282 = &v281[8 * (v280 >> 2)];
    v283 = v115 - v122;
    v51 = v115 == v122;
    v115 = v282;
    if (!v51)
    {
      v115 = &v282[v283 & 0xFFFFFFFFFFFFFFF8];
      v284 = v283 - 8;
      if (v284 < 0x38)
      {
        v285 = &v281[8 * (v280 >> 2)];
        do
        {
LABEL_156:
          v342 = *(_QWORD *)v122;
          v122 += 8;
          *(_QWORD *)v285 = v342;
          v285 += 8;
        }
        while (v285 != v115);
        goto LABEL_157;
      }
      v335 = &v281[8 * (v280 >> 2)];
      v285 = v335;
      if ((unint64_t)(v335 - v122) < 0x20)
        goto LABEL_156;
      v336 = (v284 >> 3) + 1;
      v337 = 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
      v285 = &v282[v337];
      v122 += v337;
      v338 = (__int128 *)(v116 + 24);
      v339 = v335 + 16;
      v340 = v336 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v341 = *v338;
        *(v339 - 1) = *(v338 - 1);
        *v339 = v341;
        v338 += 2;
        v339 += 2;
        v340 -= 4;
      }
      while (v340);
      if (v336 != (v336 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_156;
    }
LABEL_157:
    v114[6] = v281;
    v114[7] = v282;
    v114[8] = v115;
    v114[9] = &v281[8 * v280];
    if (v124)
    {
      operator delete(v124);
      v115 = (char *)v114[8];
    }
    goto LABEL_159;
  }
  v27 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD **)(v27 + 8);
  v29 = v28[11];
  if (v29)
  {
    if (objc_msgSend_count(*(void **)(*(_QWORD *)(v28[7] + (((unint64_t)(v29 + v28[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v29 + v28[10] - 1) & 0x1FF)), v15, v16, v17, v18, v19) == 1)
    {
      objc_msgSend_string(v3, v15, v30, v17, v18, v19);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)CFSTR("{"), v33, v34, v35);

      v27 = *(_QWORD *)(a1 + 48);
      if ((v36 & 1) == 0)
      {
        v37 = *(_QWORD **)(v27 + 8);
        v38 = v37[11] + v37[10] - 1;
        v39 = *(id *)(*(_QWORD *)(v37[7] + ((v38 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v38 & 0x1FF));
        v40 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
        v41 = v40[11] + v40[10] - 1;
        v42 = *(id *)(*(_QWORD *)(v40[7] + ((v41 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v41 & 0x1FF));
        v43 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
        v44 = v43[11] + v43[10] - 1;
        v45 = *(id *)(*(_QWORD *)(v43[7] + ((v44 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v44 & 0x1FF));
        v46 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
        v47 = v46[11] + v46[10] - 1;

        v49 = v46[7];
        v48 = v46[8];
        v50 = v48 - v49;
        v51 = v48 == v49;
        v53 = v46[10];
        v52 = v46[11];
        v46[11] = v52 - 1;
        v54 = (v50 << 6) - 1;
        if (v51)
          v54 = 0;
        if ((unint64_t)(v54 - (v52 + v53) + 1) >= 0x400)
        {
          operator delete(*(void **)(v48 - 8));
          v46[8] -= 8;
        }
        v55 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
        v56 = v55[11] + v55[10] - 1;

        v58 = v55[7];
        v57 = v55[8];
        v59 = v57 - v58;
        v51 = v57 == v58;
        v61 = v55[10];
        v60 = v55[11];
        v55[11] = v60 - 1;
        v62 = (v59 << 6) - 1;
        if (v51)
          v62 = 0;
        if ((unint64_t)(v62 - (v60 + v61) + 1) >= 0x400)
        {
          operator delete(*(void **)(v57 - 8));
          v55[8] -= 8;
        }
        v63 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
        v64 = v63[11] + v63[10] - 1;

        v70 = v63[7];
        v69 = v63[8];
        v71 = v69 - v70;
        v51 = v69 == v70;
        v73 = v63[10];
        v72 = v63[11];
        v63[11] = v72 - 1;
        v74 = (v71 << 6) - 1;
        if (v51)
          v74 = 0;
        if ((unint64_t)(v74 - (v72 + v73) + 1) >= 0x400)
        {
          operator delete(*(void **)(v69 - 8));
          v63[8] -= 8;
        }
        v75 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
        v77 = v75[7];
        v76 = v75[8];
        v78 = ((v76 - v77) << 6) - 1;
        v51 = v76 == v77;
        v80 = v75[10];
        v79 = v75[11];
        if (v51)
          v78 = 0;
        v75[11] = v79 - 1;
        if ((unint64_t)(v78 - (v79 + v80) + 1) >= 0x400)
        {
          operator delete(*(void **)(v76 - 8));
          v75[8] -= 8;
        }
        v81 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
        v82 = v81[11];
        if (v82)
        {
          v3 = v426;
          objc_msgSend_addObjectsFromArray_(*(void **)(*(_QWORD *)(v81[7] + (((unint64_t)(v82 + v81[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v82 + v81[10] - 1) & 0x1FF)), v65, (uint64_t)v39, v66, v67, v68);
          v83 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
          v84 = v83[11] + v83[10] - 1;
          objc_msgSend_addIndexes_(*(void **)(*(_QWORD *)(v83[7] + ((v84 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v84 & 0x1FF)), v85, (uint64_t)v42, v86, v87, v88);
          v89 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
          v90 = v89[11] + v89[10] - 1;
          objc_msgSend_appendFormat_(*(void **)(*(_QWORD *)(v89[7] + ((v90 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v90 & 0x1FF)), v91, (uint64_t)CFSTR(" %@"), v92, v93, v94, v45);
          v99 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
          v100 = v99[11] + v99[10] - 1;
          v101 = (void **)(*(_QWORD *)(v99[7] + ((v100 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v100 & 0x1FF));
        }
        else
        {
          v279 = *(void **)(a1 + 32);
          v101 = (void **)(a1 + 32);
          v3 = v426;
          objc_msgSend_addObjectsFromArray_(v279, v65, (uint64_t)v39, v66, v67, v68);
        }
        objc_msgSend_addObject_(*v101, v95, (uint64_t)v3, v96, v97, v98);

        goto LABEL_176;
      }
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 48);
    }
  }
  v132 = *(_QWORD **)(v27 + 8);
  v133 = v132[11];
  if (v133)
  {
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(v132[7] + (((unint64_t)(v133 + v132[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v133 + v132[10] - 1) & 0x1FF)), v15, (uint64_t)v3, v17, v18, v19);
    v134 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
    v135 = v134[11] + v134[10] - 1;
    v136 = *(void **)(*(_QWORD *)(v134[7] + ((v135 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v135 & 0x1FF));
    objc_msgSend_strokeIndexes(v3, v137, v138, v139, v140, v141);
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v136, v143, (uint64_t)v142, v144, v145, v146);

    v147 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
    v148 = v147[11] + v147[10] - 1;
    v149 = *(void **)(*(_QWORD *)(v147[7] + ((v148 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v148 & 0x1FF));
    objc_msgSend_string(v3, v150, v151, v152, v153, v154);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v149, v156, (uint64_t)CFSTR(" %@"), v157, v158, v159, v155);

    objc_msgSend_string(v3, v160, v161, v162, v163, v164);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v149) = objc_msgSend_isEqualToString_(v165, v166, (uint64_t)CFSTR("{"), v167, v168, v169);

    if ((_DWORD)v149)
    {
      v175 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
      v176 = v175[11] + v175[10] - 1;
      v177 = *(_QWORD *)(v175[7] + ((v176 >> 6) & 0x3FFFFFFFFFFFFF8));
      ++*(_QWORD *)(v177 + 8 * (v176 & 0x1FF));
    }
    else
    {
      objc_msgSend_string(v3, v170, v171, v172, v173, v174);
      v178 = (void *)objc_claimAutoreleasedReturnValue();
      v183 = objc_msgSend_isEqualToString_(v178, v179, (uint64_t)CFSTR("}"), v180, v181, v182);

      if (v183)
      {
        v184 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
        v185 = v184[11] + v184[10] - 1;
        v186 = *(_QWORD *)(v184[7] + ((v185 >> 6) & 0x3FFFFFFFFFFFFF8));
        --*(_QWORD *)(v186 + 8 * (v185 & 0x1FF));
        v187 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
        v188 = v187[11] + v187[10] - 1;
        if (!*(_QWORD *)(*(_QWORD *)(v187[7] + ((v188 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v188 & 0x1FF)))
        {
          v189 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
          v190 = v189[11] + v189[10] - 1;
          v191 = *(id *)(*(_QWORD *)(v189[7] + ((v190 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v190 & 0x1FF));
          v192 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
          v193 = v192[11] + v192[10] - 1;
          v425 = *(id *)(*(_QWORD *)(v192[7] + ((v193 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v193 & 0x1FF));
          v194 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
          v195 = v194[11] + v194[10] - 1;
          v196 = *(id *)(*(_QWORD *)(v194[7] + ((v195 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v195 & 0x1FF));
          v197 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
          v198 = v197[11] + v197[10] - 1;

          v200 = v197[7];
          v199 = v197[8];
          v201 = v199 - v200;
          v51 = v199 == v200;
          v203 = v197[10];
          v202 = v197[11];
          v197[11] = v202 - 1;
          v204 = (v201 << 6) - 1;
          if (v51)
            v204 = 0;
          if ((unint64_t)(v204 - (v202 + v203) + 1) >= 0x400)
          {
            operator delete(*(void **)(v199 - 8));
            v197[8] -= 8;
          }
          v205 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
          v206 = v205[11] + v205[10] - 1;

          v208 = v205[7];
          v207 = v205[8];
          v209 = v207 - v208;
          v51 = v207 == v208;
          v211 = v205[10];
          v210 = v205[11];
          v205[11] = v210 - 1;
          v212 = (v209 << 6) - 1;
          if (v51)
            v212 = 0;
          if ((unint64_t)(v212 - (v210 + v211) + 1) >= 0x400)
          {
            operator delete(*(void **)(v207 - 8));
            v205[8] -= 8;
          }
          v213 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
          v214 = v213[11] + v213[10] - 1;

          v216 = v213[7];
          v215 = v213[8];
          v217 = v215 - v216;
          v51 = v215 == v216;
          v219 = v213[10];
          v218 = v213[11];
          v213[11] = v218 - 1;
          v220 = (v217 << 6) - 1;
          if (v51)
            v220 = 0;
          if ((unint64_t)(v220 - (v218 + v219) + 1) >= 0x400)
          {
            operator delete(*(void **)(v215 - 8));
            v213[8] -= 8;
          }
          v221 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
          v223 = v221[7];
          v222 = v221[8];
          v224 = ((v222 - v223) << 6) - 1;
          v51 = v222 == v223;
          v226 = v221[10];
          v225 = v221[11];
          if (v51)
            v224 = 0;
          v221[11] = v225 - 1;
          if ((unint64_t)(v224 - (v225 + v226) + 1) >= 0x400)
          {
            operator delete(*(void **)(v222 - 8));
            v221[8] -= 8;
          }
          v227 = v191;
          v228 = v196;
          v3 = v426;
          objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 40) + 8), v229, (uint64_t)v228, v230, v231, v232);
          v237 = (void *)objc_claimAutoreleasedReturnValue();
          v238 = v228;
          v239 = v227;
          if (v237)
          {
            x = *MEMORY[0x1E0C9D628];
            y = *(double *)(MEMORY[0x1E0C9D628] + 8);
            width = *(double *)(MEMORY[0x1E0C9D628] + 16);
            height = *(double *)(MEMORY[0x1E0C9D628] + 24);
            v429 = 0u;
            v430 = 0u;
            v431 = 0u;
            v432 = 0u;
            v244 = v227;
            v252 = objc_msgSend_countByEnumeratingWithState_objects_count_(v244, v245, (uint64_t)&v429, (uint64_t)v434, 16, v246);
            if (v252)
            {
              v253 = *(_QWORD *)v430;
              v254 = 1.0;
              do
              {
                for (i = 0; i != v252; ++i)
                {
                  if (*(_QWORD *)v430 != v253)
                    objc_enumerationMutation(v244);
                  v256 = *(void **)(*((_QWORD *)&v429 + 1) + 8 * i);
                  objc_msgSend_score(v256, v247, v248, v249, v250, v251);
                  v258 = v257;
                  objc_msgSend_bounds(v256, v259, v260, v261, v262, v263);
                  v438.origin.x = v264;
                  v438.origin.y = v265;
                  v438.size.width = v266;
                  v438.size.height = v267;
                  v436.origin.x = x;
                  v436.origin.y = y;
                  v436.size.width = width;
                  v436.size.height = height;
                  v437 = CGRectUnion(v436, v438);
                  x = v437.origin.x;
                  y = v437.origin.y;
                  width = v437.size.width;
                  height = v437.size.height;
                  v254 = v254 * v258;
                }
                v252 = objc_msgSend_countByEnumeratingWithState_objects_count_(v244, v247, (uint64_t)&v429, (uint64_t)v434, 16, v251);
              }
              while (v252);
            }
            else
            {
              v254 = 1.0;
            }

            v370 = *(_QWORD *)(a1 + 40);
            v371 = objc_retainAutorelease(v237);
            v377 = (char *)objc_msgSend_UTF8String(v371, v372, v373, v374, v375, v376);
            sub_1BE61076C(__p, v377);
            v378 = sub_1BE61651C((_QWORD *)(v370 + 16), __p);
            if (v428 < 0)
              operator delete(__p[0]);
            v379 = [CHTokenizedMathResultToken alloc];
            v385 = (void *)objc_msgSend_copy(v425, v380, v381, v382, v383, v384);
            v388 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v379, v386, (uint64_t)v371, (uint64_t)v385, v378, v387, v254, x, y, width, height);

            v433 = v388;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v389, (uint64_t)&v433, 1, v390, v391);
            v392 = objc_claimAutoreleasedReturnValue();

            v238 = v371;
            v239 = (void *)v392;
          }
          v393 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
          v394 = v393[11];
          if (v394)
          {
            objc_msgSend_addObjectsFromArray_(*(void **)(*(_QWORD *)(v393[7] + (((unint64_t)(v394 + v393[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v394 + v393[10] - 1) & 0x1FF)), v233, (uint64_t)v239, v234, v235, v236);
            v395 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
            v396 = v395[11] + v395[10] - 1;
            objc_msgSend_addIndexes_(*(void **)(*(_QWORD *)(v395[7] + ((v396 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v396 & 0x1FF)), v397, (uint64_t)v425, v398, v399, v400);
            v401 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
            v402 = v401[11] + v401[10] - 1;
            objc_msgSend_appendFormat_(*(void **)(*(_QWORD *)(v401[7] + ((v402 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v402 & 0x1FF)), v403, (uint64_t)CFSTR(" %@"), v404, v405, v406, v238);
          }
          else
          {
            objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v233, (uint64_t)v239, v234, v235, v236);
          }

        }
      }
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v15, (uint64_t)v3, v17, v18, v19);
  }
LABEL_176:

}

void sub_1BE6163A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE61651C(_QWORD *a1, _QWORD *a2)
{
  if (sub_1BE61C0EC(a1, (uint64_t)a2))
    return 1;
  if (sub_1BE61C0EC(a1 + 5, (uint64_t)a2))
    return 2;
  if (sub_1BE61C0EC(a1 + 10, (uint64_t)a2))
    return 4;
  if (sub_1BE61C0EC(a1 + 15, (uint64_t)a2))
    return 8;
  if (sub_1BE61C0EC(a1 + 20, (uint64_t)a2))
    return 128;
  if (sub_1BE61C0EC(a1 + 25, (uint64_t)a2))
    return 0x200000;
  if (sub_1BE61C0EC(a1 + 30, (uint64_t)a2))
    return 32;
  if (sub_1BE61C0EC(a1 + 35, (uint64_t)a2))
    return 2048;
  if (sub_1BE61C0EC(a1 + 40, (uint64_t)a2))
    return 4096;
  if (sub_1BE61C0EC(a1 + 50, (uint64_t)a2))
    return 0x2000;
  if (sub_1BE61C0EC(a1 + 55, (uint64_t)a2))
    return 0x4000;
  if (sub_1BE61C0EC(a1 + 45, (uint64_t)a2))
    return 256;
  if (sub_1BE61C05C(a2, "\\%"))
    return 512;
  if (sub_1BE61C05C(a2, "!"))
    return 1024;
  if (sub_1BE61C05C(a2, "\\frac"))
    return 0x8000;
  if (sub_1BE61C05C(a2, "\\sqrt"))
    return 0x10000;
  if (sub_1BE61C05C(a2, "\\hline"))
    return 0x20000;
  if (sub_1BE61C05C(a2, "="))
    return 0x40000;
  return 0;
}

void sub_1BE616EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (v32)
    operator delete(v32);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6170E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE61755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE617710(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v22 = a2;
  objc_msgSend_string(v22, v3, v4, v5, v6, v7);
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  v9 = isSymbolStructural(v8);

  v14 = (const char *)v22;
  if ((v9 & 1) == 0)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (*(_BYTE *)(v15 + 24))
    {
      *(_BYTE *)(v15 + 24) = 1;
    }
    else
    {
      objc_msgSend_strokeIndexes(v22, (const char *)v22, v10, v11, v12, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_count(v16, v17, v18, v19, v20, v21) == 0;

      v14 = (const char *)v22;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v14, (uint64_t)v14, v11, v12, v13);

}

void sub_1BE6177D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6177F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE617BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE617DC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE6182A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6183D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE618564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE618574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE6185C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE61864C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE618660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE618678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE618CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE618EB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1BE618EC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE618ED4(uint64_t a1)
{

}

void sub_1BE618EDC(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int isEqualToString;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  void *v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BOOL4 v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int hasPrefix;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  id v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  id v256;
  const char *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  id v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  id v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  id v304;
  const char *v305;
  uint64_t v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t i;
  void *v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  id v330;
  const char *v331;
  uint64_t v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t j;
  void *v341;
  const char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  const char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  unint64_t v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  unint64_t v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  const char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  id v398;
  id v399;
  id v400;
  id v401;
  id v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  _QWORD v413[4];
  id v414;
  _BYTE v415[128];
  _BYTE v416[128];
  uint64_t v417;

  v417 = *MEMORY[0x1E0C80C00];
  v404 = a2;
  objc_msgSend_string(v404, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_isEqualToString_(v9, v10, (uint64_t)CFSTR("_"), v11, v12, v13))
  {

LABEL_10:
    v27 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
    v28 = v27[11];
    if (v28)
    {
      v29 = v404;
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(v27[7] + (((unint64_t)(v28 + v27[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v28 + v27[10] - 1) & 0x1FF)), v15, (uint64_t)v404, v16, v17, v18);
      v30 = *(_QWORD **)(*(_QWORD *)(a1 + 104) + 8);
      v31 = v30[11] + v30[10] - 1;
      v32 = *(void **)(*(_QWORD *)(v30[7] + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v31 & 0x1FF));
      objc_msgSend_string(v404, v33, v34, v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendFormat_(v32, v39, (uint64_t)CFSTR("%@"), v40, v41, v42, v38);

      objc_msgSend_string(v404, v43, v44, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v38) = objc_msgSend_isEqualToString_(v48, v49, (uint64_t)CFSTR("{"), v50, v51, v52);

      if ((_DWORD)v38)
      {
        v58 = *(_QWORD **)(*(_QWORD *)(a1 + 112) + 8);
        v59 = v58[11] + v58[10] - 1;
        v60 = *(_QWORD *)(v58[7] + ((v59 >> 6) & 0x3FFFFFFFFFFFFF8));
        ++*(_QWORD *)(v60 + 8 * (v59 & 0x1FF));
      }
      else
      {
        objc_msgSend_string(v404, v53, v54, v55, v56, v57);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v61, v62, (uint64_t)CFSTR("}"), v63, v64, v65);

        if (isEqualToString)
        {
          v72 = *(_QWORD **)(*(_QWORD *)(a1 + 112) + 8);
          v73 = v72[11] + v72[10] - 1;
          v74 = *(_QWORD *)(v72[7] + ((v73 >> 6) & 0x3FFFFFFFFFFFFF8));
          --*(_QWORD *)(v74 + 8 * (v73 & 0x1FF));
          v75 = *(_QWORD **)(*(_QWORD *)(a1 + 112) + 8);
          v76 = v75[11] + v75[10] - 1;
          if (!*(_QWORD *)(*(_QWORD *)(v75[7] + ((v76 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v76 & 0x1FF)))
          {
            v77 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8);
            v78 = v77[11] + v77[10] - 1;
            objc_msgSend_reverseObjectEnumerator(*(void **)(*(_QWORD *)(v77[7] + ((v78 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v78 & 0x1FF)), v67, v68, v69, v70, v71);
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_allObjects(v79, v80, v81, v82, v83, v84);
            v85 = (void *)objc_claimAutoreleasedReturnValue();

            v86 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
            v87 = v86[11] + v86[10] - 1;
            v398 = *(id *)(*(_QWORD *)(v86[7] + ((v87 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v87 & 0x1FF));
            v88 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + 8);
            v89 = v88[11] + v88[10] - 1;
            v399 = *(id *)(*(_QWORD *)(v88[7] + ((v89 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v89 & 0x1FF));
            v90 = *(_QWORD **)(*(_QWORD *)(a1 + 104) + 8);
            v91 = v90[11] + v90[10] - 1;
            v400 = *(id *)(*(_QWORD *)(v90[7] + ((v91 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v91 & 0x1FF));
            v92 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8);
            v93 = v92[11] + v92[10] - 1;

            v95 = v92[7];
            v94 = v92[8];
            v96 = v94 - v95;
            v97 = v94 == v95;
            v99 = v92[10];
            v98 = v92[11];
            v92[11] = v98 - 1;
            v100 = (v96 << 6) - 1;
            if (v97)
              v100 = 0;
            if ((unint64_t)(v100 - (v98 + v99) + 1) >= 0x400)
            {
              operator delete(*(void **)(v94 - 8));
              v92[8] -= 8;
            }
            v101 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
            v102 = v101[11] + v101[10] - 1;

            v104 = v101[7];
            v103 = v101[8];
            v105 = v103 - v104;
            v97 = v103 == v104;
            v107 = v101[10];
            v106 = v101[11];
            v101[11] = v106 - 1;
            v108 = (v105 << 6) - 1;
            if (v97)
              v108 = 0;
            if ((unint64_t)(v108 - (v106 + v107) + 1) >= 0x400)
            {
              operator delete(*(void **)(v103 - 8));
              v101[8] -= 8;
            }
            v109 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + 8);
            v110 = v109[11] + v109[10] - 1;

            v112 = v109[7];
            v111 = v109[8];
            v113 = v111 - v112;
            v97 = v111 == v112;
            v115 = v109[10];
            v114 = v109[11];
            v109[11] = v114 - 1;
            v116 = (v113 << 6) - 1;
            if (v97)
              v116 = 0;
            if ((unint64_t)(v116 - (v114 + v115) + 1) >= 0x400)
            {
              operator delete(*(void **)(v111 - 8));
              v109[8] -= 8;
            }
            v117 = *(_QWORD **)(*(_QWORD *)(a1 + 104) + 8);
            v118 = v117[11] + v117[10] - 1;

            v124 = v117[7];
            v123 = v117[8];
            v125 = v123 - v124;
            v97 = v123 == v124;
            v127 = v117[10];
            v126 = v117[11];
            v117[11] = v126 - 1;
            v128 = (v125 << 6) - 1;
            if (v97)
              v128 = 0;
            if ((unint64_t)(v128 - (v126 + v127) + 1) >= 0x400)
            {
              operator delete(*(void **)(v123 - 8));
              v117[8] -= 8;
            }
            v129 = *(_QWORD **)(*(_QWORD *)(a1 + 112) + 8);
            v131 = v129[7];
            v130 = v129[8];
            v132 = ((v130 - v131) << 6) - 1;
            v97 = v130 == v131;
            v134 = v129[10];
            v133 = v129[11];
            if (v97)
              v132 = 0;
            v129[11] = v133 - 1;
            if ((unint64_t)(v132 - (v133 + v134) + 1) >= 0x400)
            {
              operator delete(*(void **)(v130 - 8));
              v129[8] -= 8;
            }
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v119, (uint64_t)CFSTR("%@%@"), v120, v121, v122, v399, v400);
            v397 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = v404;
            objc_msgSend_componentsSeparatedByCharactersInSet_(v397, v135, *(_QWORD *)(a1 + 48), v136, v137, v138);
            v395 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_componentsJoinedByString_(v395, v139, (uint64_t)&stru_1E77F6F28, v140, v141, v142);
            v396 = (void *)objc_claimAutoreleasedReturnValue();
            v143 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (objc_msgSend_count(v85, v144, v145, v146, v147, v148)
              && (objc_msgSend_lastObject(v85, v149, v150, v151, v152, v153),
                  v154 = (void *)objc_claimAutoreleasedReturnValue(),
                  objc_msgSend_string(v154, v155, v156, v157, v158, v159),
                  v160 = (void *)objc_claimAutoreleasedReturnValue(),
                  v165 = objc_msgSend_isEqualToString_(v160, v161, (uint64_t)CFSTR("\\log"), v162, v163, v164),
                  v160,
                  v154,
                  (v165 & 1) == 0))
            {
              objc_msgSend__trimSubscriptTokens_(*(void **)(a1 + 40), v149, (uint64_t)v398, v151, v152, v153);
              v394 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_declaredVariables(*(void **)(a1 + 56), v289, v290, v291, v292, v293);
              v294 = (void *)objc_claimAutoreleasedReturnValue();
              v299 = objc_msgSend_containsObject_(v294, v295, (uint64_t)v396, v296, v297, v298);

              if (v299)
              {
                v411 = 0u;
                v412 = 0u;
                v409 = 0u;
                v410 = 0u;
                v304 = v85;
                v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v304, v305, (uint64_t)&v409, (uint64_t)v416, 16, v306);
                if (v312)
                {
                  v313 = *(_QWORD *)v410;
                  do
                  {
                    for (i = 0; i != v312; ++i)
                    {
                      if (*(_QWORD *)v410 != v313)
                        objc_enumerationMutation(v304);
                      v315 = (void *)objc_msgSend_mutableCopy(*(void **)(*((_QWORD *)&v409 + 1) + 8 * i), v307, v308, v309, v310, v311);
                      objc_msgSend_setProperties_(v315, v316, 16, v317, v318, v319);
                      v325 = (void *)objc_msgSend_copy(v315, v320, v321, v322, v323, v324);
                      objc_msgSend_addObject_(v143, v326, (uint64_t)v325, v327, v328, v329);

                    }
                    v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v304, v307, (uint64_t)&v409, (uint64_t)v416, 16, v311);
                  }
                  while (v312);
                }

                v407 = 0u;
                v408 = 0u;
                v405 = 0u;
                v406 = 0u;
                v330 = v394;
                v338 = objc_msgSend_countByEnumeratingWithState_objects_count_(v330, v331, (uint64_t)&v405, (uint64_t)v415, 16, v332);
                if (v338)
                {
                  v339 = *(_QWORD *)v406;
                  do
                  {
                    for (j = 0; j != v338; ++j)
                    {
                      if (*(_QWORD *)v406 != v339)
                        objc_enumerationMutation(v330);
                      v341 = (void *)objc_msgSend_mutableCopy(*(void **)(*((_QWORD *)&v405 + 1) + 8 * j), v333, v334, v335, v336, v337);
                      objc_msgSend_setProperties_(v341, v342, 16, v343, v344, v345);
                      v351 = (void *)objc_msgSend_copy(v341, v346, v347, v348, v349, v350);
                      objc_msgSend_addObject_(v143, v352, (uint64_t)v351, v353, v354, v355);

                    }
                    v338 = objc_msgSend_countByEnumeratingWithState_objects_count_(v330, v333, (uint64_t)&v405, (uint64_t)v415, 16, v337);
                  }
                  while (v338);
                }

              }
              else
              {
                objc_msgSend_addObjectsFromArray_(v143, v300, (uint64_t)v85, v301, v302, v303);
                objc_msgSend_addObjectsFromArray_(v143, v356, (uint64_t)v394, v357, v358, v359);
              }

            }
            else
            {
              objc_msgSend_addObjectsFromArray_(v143, v149, (uint64_t)v85, v151, v152, v153);
              objc_msgSend_addObjectsFromArray_(v143, v166, (uint64_t)v398, v167, v168, v169);
            }
            v360 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
            v361 = v360[11];
            if (v361)
            {
              objc_msgSend_removeLastObject(*(void **)(*(_QWORD *)(v360[7] + (((unint64_t)(v361 + v360[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v361 + v360[10] - 1) & 0x1FF)), v170, v171, v172, v173, v174);
              v362 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
              v363 = v362[11] + v362[10] - 1;
              objc_msgSend_addObjectsFromArray_(*(void **)(*(_QWORD *)(v362[7] + ((v363 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v363 & 0x1FF)), v364, (uint64_t)v143, v365, v366, v367);
              v368 = *(_QWORD **)(*(_QWORD *)(a1 + 104) + 8);
              v369 = v368[11] + v368[10] - 1;
              objc_msgSend_appendFormat_(*(void **)(*(_QWORD *)(v368[7] + ((v369 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v369 & 0x1FF)), v370, (uint64_t)CFSTR("%@"), v371, v372, v373, v397);
            }
            else
            {
              v374 = objc_msgSend_count(*(void **)(a1 + 64), v170, v171, v172, v173, v174);
              v380 = objc_msgSend_count(v85, v375, v376, v377, v378, v379);
              v386 = objc_msgSend_count(v85, v381, v382, v383, v384, v385);
              objc_msgSend_removeObjectsInRange_(*(void **)(a1 + 64), v387, v374 - v380, v386, v388, v389);
              objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 64), v390, (uint64_t)v143, v391, v392, v393);
            }

          }
        }
      }
    }
    else
    {
      v29 = v404;
      objc_msgSend_addObject_(*(void **)(a1 + 64), v15, (uint64_t)v404, v16, v17, v18);
    }
    goto LABEL_76;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);

  if (!v14)
    goto LABEL_10;
  objc_msgSend_arrayWithObject_(MEMORY[0x1E0C99DE8], v15, (uint64_t)v404, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v21 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
  v22 = v21[7];
  v23 = v21[8];
  v24 = ((v23 - v22) << 6) - 1;
  if (v23 == v22)
    v24 = 0;
  if (v24 == v21[11] + v21[10])
  {
    sub_1BE6204C0(v21 + 6);
    v22 = v21[7];
    v23 = v21[8];
  }
  if (v23 == v22)
  {
    v26 = 0;
  }
  else
  {
    v25 = v21[11] + v21[10];
    v26 = (_QWORD *)(*(_QWORD *)(v22 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF));
  }
  v401 = v19;
  *v26 = v401;
  ++v21[11];
  v179 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  if (a3 >= 1)
  {
    v180 = a3 + 1;
    while (1)
    {
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v175, v180 - 2, v176, v177, v178);
      v181 = (void *)objc_claimAutoreleasedReturnValue();
      v182 = *(void **)(a1 + 40);
      objc_msgSend_string(v181, v183, v184, v185, v186, v187);
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isAlphabetic_(v182, v189, (uint64_t)v188, v190, v191, v192))
      {
        objc_msgSend_string(v181, v193, v194, v195, v196, v197);
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        v204 = objc_msgSend_length(v198, v199, v200, v201, v202, v203) == 1;

      }
      else
      {
        v204 = 0;
      }

      if ((objc_msgSend_properties(v181, v205, v206, v207, v208, v209) & 0x100) == 0)
      {
        objc_msgSend_string(v181, v210, v211, v212, v213, v214);
        v215 = (void *)objc_claimAutoreleasedReturnValue();
        hasPrefix = objc_msgSend_hasPrefix_(v215, v216, (uint64_t)CFSTR("\\"), v217, v218, v219);

        if (((v204 | hasPrefix) & 1) == 0)
          break;
      }
      objc_msgSend_addObject_(v20, v210, (uint64_t)v181, v212, v213, v214);
      objc_msgSend_string(v181, v221, v222, v223, v224, v225);
      v226 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendFormat_(v179, v227, (uint64_t)CFSTR("%@"), v228, v229, v230, v226);

      if ((unint64_t)--v180 <= 1)
        goto LABEL_50;
    }

  }
LABEL_50:
  v231 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8);
  v232 = v231[7];
  v233 = v231[8];
  v234 = ((v233 - v232) << 6) - 1;
  if (v233 == v232)
    v234 = 0;
  if (v234 == v231[11] + v231[10])
  {
    sub_1BE6204C0(v231 + 6);
    v232 = v231[7];
    v233 = v231[8];
  }
  if (v233 == v232)
  {
    v236 = 0;
  }
  else
  {
    v235 = v231[11] + v231[10];
    v236 = (_QWORD *)(*(_QWORD *)(v232 + ((v235 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v235 & 0x1FF));
  }
  v237 = v20;
  *v236 = v237;
  ++v231[11];
  v238 = (void *)MEMORY[0x1E0CB37A0];
  v244 = objc_msgSend_length(v179, v239, v240, v241, v242, v243);
  objc_msgSend_stringWithCapacity_(v238, v245, v244, v246, v247, v248);
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  v255 = objc_msgSend_length(v179, v250, v251, v252, v253, v254);
  v413[0] = MEMORY[0x1E0C809B0];
  v413[1] = 3221225472;
  v413[2] = sub_1BE619EAC;
  v413[3] = &unk_1E77F2070;
  v256 = v249;
  v414 = v256;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v179, v257, 0, v255, 258, (uint64_t)v413);
  v258 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + 8);
  v259 = v258[7];
  v260 = v258[8];
  v261 = ((v260 - v259) << 6) - 1;
  if (v260 == v259)
    v261 = 0;
  if (v261 == v258[11] + v258[10])
  {
    sub_1BE620B88(v258 + 6);
    v259 = v258[7];
    v260 = v258[8];
  }
  if (v260 == v259)
  {
    v263 = 0;
  }
  else
  {
    v262 = v258[11] + v258[10];
    v263 = (_QWORD *)(*(_QWORD *)(v259 + ((v262 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v262 & 0x1FF));
  }
  v264 = v256;
  *v263 = v264;
  ++v258[11];
  objc_msgSend_string(v404, v265, v266, v267, v268, v269);
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  v276 = (void *)objc_msgSend_mutableCopy(v270, v271, v272, v273, v274, v275);

  v277 = *(_QWORD **)(*(_QWORD *)(a1 + 104) + 8);
  v278 = v277[7];
  v279 = v277[8];
  v280 = ((v279 - v278) << 6) - 1;
  if (v279 == v278)
    v280 = 0;
  if (v280 == v277[11] + v277[10])
  {
    sub_1BE620B88(v277 + 6);
    v278 = v277[7];
    v279 = v277[8];
  }
  if (v279 == v278)
  {
    v282 = 0;
  }
  else
  {
    v281 = v277[11] + v277[10];
    v282 = (_QWORD *)(*(_QWORD *)(v278 + ((v281 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v281 & 0x1FF));
  }
  v283 = v276;
  *v282 = v283;
  ++v277[11];
  v284 = *(_QWORD **)(*(_QWORD *)(a1 + 112) + 8);
  v285 = v284[8];
  v286 = v284[7];
  v287 = ((v285 - v286) << 6) - 1;
  if (v285 == v286)
    v287 = 0;
  v288 = v284[11] + v284[10];
  if (v287 == v288)
  {
    sub_1BE61FC74(v284 + 6);
    v286 = v284[7];
    v288 = v284[11] + v284[10];
  }
  *(_QWORD *)(*(_QWORD *)(v286 + ((v288 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v288 & 0x1FF)) = 0;
  ++v284[11];

  v29 = v404;
LABEL_76:
  if ((a3 & 0x8000000000000000) == 0)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a2);

}

void sub_1BE619C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE619EAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_appendString_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE61A370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE61A4C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE61ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  void *v27;

  MEMORY[0x1C3B812EC](v26, 0x10A0C409F3568C5);
  sub_1BE61081C(&a22);
  sub_1BE61F3E8((uint64_t)&a25, (char *)a26);

  _Unwind_Resume(a1);
}

void sub_1BE61B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE61B54C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE61BBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,_QWORD *a50)
{

  sub_1BE62033C((uint64_t)&a49, a50);
  _Unwind_Resume(a1);
}

void sub_1BE61BD2C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v24 = a2;
  if ((objc_msgSend_properties(v24, v3, v4, v5, v6, v7) & 0x4000) != 0)
  {
    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_msgSend_copy(*(void **)(a1 + 40), v8, v9, v10, v11, v12);
    objc_msgSend_addObject_(v13, v15, (uint64_t)v14, v16, v17, v18);

    objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v19, v20, v21, v22, v23);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v8, (uint64_t)v24, v10, v11, v12);
  }

}

void sub_1BE61BDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE61BDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE61BE20(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE61BEE4(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_1BE61BEF4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v10 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 9];
    v6 = (void **)((char *)*v5 + 8 * (v4 & 0x1FF));
    v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v4) & 0x1FF);
    if (v6 != (void **)v7)
    {
      do
      {
        v8 = *v6++;

        if ((char *)v6 - (_BYTE *)*v5 == 4096)
        {
          v9 = (void **)v5[1];
          ++v5;
          v6 = v9;
        }
      }
      while (v6 != (void **)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
    goto LABEL_15;
  }
  if (v11 == 2)
  {
    v12 = 512;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1BE61C05C(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 0;
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      sub_1BE61C764();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t *sub_1BE61C0EC(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_1BE61C318((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unint64_t sub_1BE61C318(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_1BE61C764()
{
  sub_1BE61C778("basic_string");
}

void sub_1BE61C778(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1BE61C7C8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E77EE968, MEMORY[0x1E0DE42E0]);
}

void sub_1BE61C7B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1BE61C7C8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t sub_1BE61C7EC(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  void **v20;
  void *v21;
  void **v22;
  void *v23;
  void **v24;
  void *v25;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  void **v35;
  void **v36;
  void **v37;
  void **v38;

  v2 = *(void ***)(a1 + 456);
  if (v2)
  {
    do
    {
      v27 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v27;
    }
    while (v27);
  }
  v3 = *(void **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void ***)(a1 + 416);
  if (v4)
  {
    do
    {
      v28 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v28;
    }
    while (v28);
  }
  v5 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(void ***)(a1 + 376);
  if (v6)
  {
    do
    {
      v29 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v29;
    }
    while (v29);
  }
  v7 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(void ***)(a1 + 336);
  if (v8)
  {
    do
    {
      v30 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v30;
    }
    while (v30);
  }
  v9 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void ***)(a1 + 296);
  if (v10)
  {
    do
    {
      v31 = (void **)*v10;
      if (*((char *)v10 + 39) < 0)
        operator delete(v10[2]);
      operator delete(v10);
      v10 = v31;
    }
    while (v31);
  }
  v11 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(void ***)(a1 + 256);
  if (v12)
  {
    do
    {
      v32 = (void **)*v12;
      if (*((char *)v12 + 39) < 0)
        operator delete(v12[2]);
      operator delete(v12);
      v12 = v32;
    }
    while (v32);
  }
  v13 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v13)
    operator delete(v13);
  v14 = *(void ***)(a1 + 216);
  if (v14)
  {
    do
    {
      v33 = (void **)*v14;
      if (*((char *)v14 + 39) < 0)
        operator delete(v14[2]);
      operator delete(v14);
      v14 = v33;
    }
    while (v33);
  }
  v15 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v15)
    operator delete(v15);
  v16 = *(void ***)(a1 + 176);
  if (v16)
  {
    do
    {
      v34 = (void **)*v16;
      if (*((char *)v16 + 39) < 0)
        operator delete(v16[2]);
      operator delete(v16);
      v16 = v34;
    }
    while (v34);
  }
  v17 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v17)
    operator delete(v17);
  v18 = *(void ***)(a1 + 136);
  if (v18)
  {
    do
    {
      v35 = (void **)*v18;
      if (*((char *)v18 + 39) < 0)
        operator delete(v18[2]);
      operator delete(v18);
      v18 = v35;
    }
    while (v35);
  }
  v19 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v19)
    operator delete(v19);
  v20 = *(void ***)(a1 + 96);
  if (v20)
  {
    do
    {
      v36 = (void **)*v20;
      if (*((char *)v20 + 39) < 0)
        operator delete(v20[2]);
      operator delete(v20);
      v20 = v36;
    }
    while (v36);
  }
  v21 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v21)
    operator delete(v21);
  v22 = *(void ***)(a1 + 56);
  if (v22)
  {
    do
    {
      v37 = (void **)*v22;
      if (*((char *)v22 + 39) < 0)
        operator delete(v22[2]);
      operator delete(v22);
      v22 = v37;
    }
    while (v37);
  }
  v23 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v23)
    operator delete(v23);
  v24 = *(void ***)(a1 + 16);
  if (v24)
  {
    do
    {
      v38 = (void **)*v24;
      if (*((char *)v24 + 39) < 0)
        operator delete(v24[2]);
      operator delete(v24);
      v24 = v38;
    }
    while (v38);
  }
  v25 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v25)
    operator delete(v25);
  return a1;
}

uint64_t sub_1BE61CB14(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_1BE61CB7C(uint64_t a1)
{
  void *__p[2];
  _WORD v4[12];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[3];
  void *v25[3];
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4[0] = 32001;
  LOWORD(__p[0]) = 123;
  v5 = 1;
  LOBYTE(v4[1]) = 0;
  v7 = 1;
  LOWORD(v6[0]) = 91;
  v9 = 1;
  LOWORD(v8[0]) = 93;
  v11 = 1;
  strcpy((char *)v10, "_");
  v13 = 1;
  strcpy((char *)v12, "^");
  v15 = 1;
  strcpy((char *)v14, "&");
  v17 = 14;
  strcpy((char *)v16, "\\begin{matrix}");
  v19 = 12;
  strcpy((char *)v18, "\\end{matrix}");
  v21 = 15;
  strcpy((char *)v20, "\\begin{aligned}");
  v23 = 13;
  strcpy((char *)v22, "\\end{aligned}");
  HIBYTE(v24[2]) = 16;
  strcpy((char *)v24, "\\begin{array}{l}");
  HIBYTE(v25[2]) = 17;
  strcpy((char *)v25, "\\begin{array}{lr}");
  v27 = 11;
  strcpy((char *)v26, "\\end{array}");
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_1BE61EC50(a1, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1, (uint64_t)v14, (uint64_t)v14);
  sub_1BE61EC50(a1, (uint64_t)v16, (uint64_t)v16);
  sub_1BE61EC50(a1, (uint64_t)v18, (uint64_t)v18);
  sub_1BE61EC50(a1, (uint64_t)v20, (uint64_t)v20);
  sub_1BE61EC50(a1, (uint64_t)v22, (uint64_t)v22);
  sub_1BE61EC50(a1, (uint64_t)v24, (uint64_t)v24);
  sub_1BE61EC50(a1, (uint64_t)v25, (uint64_t)v25);
  sub_1BE61EC50(a1, (uint64_t)v26, (uint64_t)v26);
  if (v27 < 0)
  {
    operator delete(v26[0]);
    if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_88;
    }
  }
  else if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((v23 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v24[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v22[0]);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v19 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v20[0]);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v18[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_94;
  }
LABEL_93:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_95;
  }
LABEL_94:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_96;
  }
LABEL_95:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_97;
  }
LABEL_96:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_98:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_99;
  }
LABEL_97:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_98;
LABEL_14:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_99:
  operator delete(__p[0]);
LABEL_15:
  v4[0] = 12545;
  LOWORD(__p[0]) = 48;
  v5 = 1;
  LOBYTE(v4[1]) = 0;
  v7 = 1;
  LOWORD(v6[0]) = 50;
  v9 = 1;
  LOWORD(v8[0]) = 51;
  v11 = 1;
  strcpy((char *)v10, "4");
  v13 = 1;
  strcpy((char *)v12, "5");
  v15 = 1;
  strcpy((char *)v14, "6");
  v17 = 1;
  strcpy((char *)v16, "7");
  v19 = 1;
  strcpy((char *)v18, "8");
  v21 = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  strcpy((char *)v20, "9");
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  sub_1BE61EC50(a1 + 40, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 40, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 40, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1 + 40, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1 + 40, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1 + 40, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1 + 40, (uint64_t)v14, (uint64_t)v14);
  sub_1BE61EC50(a1 + 40, (uint64_t)v16, (uint64_t)v16);
  sub_1BE61EC50(a1 + 40, (uint64_t)v18, (uint64_t)v18);
  sub_1BE61EC50(a1 + 40, (uint64_t)v20, (uint64_t)v20);
  if (v21 < 0)
  {
    operator delete(v20[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_17:
      if ((v17 & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_102;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v18[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_104;
  }
LABEL_103:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_105;
  }
LABEL_104:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_106;
  }
LABEL_105:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_108:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_109;
  }
LABEL_107:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_108;
LABEL_24:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_109:
  operator delete(__p[0]);
LABEL_25:
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v4[0] = 11265;
  LOWORD(__p[0]) = 46;
  v5 = 1;
  LOBYTE(v4[1]) = 0;
  v7 = 1;
  LOWORD(v6[0]) = 39;
  *(_DWORD *)(a1 + 112) = 1065353216;
  sub_1BE61EC50(a1 + 80, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 80, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 80, (uint64_t)v6, (uint64_t)v6);
  if ((v7 & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_111:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_112;
  }
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_111;
LABEL_27:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_28;
LABEL_112:
  operator delete(__p[0]);
LABEL_28:
  v4[0] = 11521;
  LOWORD(__p[0]) = 43;
  v5 = 1;
  LOBYTE(v4[1]) = 0;
  v7 = 6;
  strcpy((char *)v6, "\\times");
  v9 = 4;
  strcpy((char *)v8, "\\ast");
  v11 = 5;
  strcpy((char *)v10, "\\cdot");
  v13 = 4;
  strcpy((char *)v12, "\\div");
  v15 = 1;
  *(_OWORD *)(a1 + 120) = 0u;
  strcpy((char *)v14, "/");
  v17 = 1;
  strcpy((char *)v16, ":");
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  sub_1BE61EC50(a1 + 120, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 120, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 120, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1 + 120, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1 + 120, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1 + 120, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1 + 120, (uint64_t)v14, (uint64_t)v14);
  sub_1BE61EC50(a1 + 120, (uint64_t)v16, (uint64_t)v16);
  if (v17 < 0)
  {
    operator delete(v16[0]);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_30:
      if ((v13 & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_115;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_31:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_35;
LABEL_119:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_120;
  }
LABEL_118:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_119;
LABEL_35:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_120:
  operator delete(__p[0]);
LABEL_36:
  LOBYTE(v4[0]) = 2;
  strcpy((char *)__p, "\\$");
  v5 = 3;
  *(_DWORD *)((char *)v4 + 1) = 11305698;
  v7 = 2;
  LOWORD(v6[0]) = -23614;
  BYTE2(v6[0]) = 0;
  v9 = 2;
  LOWORD(v8[0]) = -23102;
  BYTE2(v8[0]) = 0;
  v11 = 2;
  LOWORD(v10[0]) = -23870;
  BYTE2(v10[0]) = 0;
  v13 = 3;
  strcpy((char *)v12, "₺");
  v15 = 3;
  LOWORD(v14[0]) = -32030;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  WORD1(v14[0]) = 180;
  v17 = 3;
  strcpy((char *)v16, "₽");
  v19 = 3;
  strcpy((char *)v18, "₩");
  *(_DWORD *)(a1 + 192) = 1065353216;
  sub_1BE61EC50(a1 + 160, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 160, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 160, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1 + 160, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1 + 160, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1 + 160, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1 + 160, (uint64_t)v14, (uint64_t)v14);
  sub_1BE61EC50(a1 + 160, (uint64_t)v16, (uint64_t)v16);
  sub_1BE61EC50(a1 + 160, (uint64_t)v18, (uint64_t)v18);
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_38:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_123;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_124;
  }
LABEL_123:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_40:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_125;
  }
LABEL_124:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_126;
  }
LABEL_125:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_44;
LABEL_128:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_129;
  }
LABEL_127:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_128;
LABEL_44:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_45;
LABEL_129:
  operator delete(__p[0]);
LABEL_45:
  *(_OWORD *)(a1 + 200) = 0u;
  LOBYTE(v4[0]) = 2;
  strcpy((char *)__p, "°");
  v5 = 2;
  strcpy((char *)v4 + 1, "''");
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  sub_1BE61EC50(a1 + 200, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 200, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  if (v5 < 0)
  {
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  else if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__p[0]);
LABEL_47:
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v4[0] = 25859;
  LODWORD(__p[0]) = 6910044;
  v5 = 1;
  LOBYTE(v4[1]) = 0;
  *(_DWORD *)(a1 + 272) = 1065353216;
  sub_1BE61EC50(a1 + 240, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 240, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  if (v5 < 0)
  {
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_49;
  }
  else if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(__p[0]);
LABEL_49:
  LOBYTE(v4[0]) = 1;
  LOWORD(__p[0]) = 40;
  v5 = 6;
  strcpy((char *)v4 + 1, "\\left(");
  v7 = 1;
  LOWORD(v6[0]) = 124;
  v9 = 6;
  strcpy((char *)v8, "\\left|");
  v11 = 6;
  strcpy((char *)v10, "\\lceil");
  v13 = 11;
  strcpy((char *)v12, "\\left\\lceil");
  v15 = 7;
  strcpy((char *)v14, "\\lfloor");
  v17 = 12;
  strcpy((char *)v16, "\\left\\lfloor");
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  sub_1BE61EC50(a1 + 280, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 280, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 280, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1 + 280, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1 + 280, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1 + 280, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1 + 280, (uint64_t)v14, (uint64_t)v14);
  sub_1BE61EC50(a1 + 280, (uint64_t)v16, (uint64_t)v16);
  if (v17 < 0)
  {
    operator delete(v16[0]);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_51:
      if ((v13 & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_136;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_52:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_137;
  }
LABEL_136:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_53:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_138;
  }
LABEL_137:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_139;
  }
LABEL_138:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_56;
LABEL_140:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_141;
  }
LABEL_139:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_140;
LABEL_56:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_141:
  operator delete(__p[0]);
LABEL_57:
  LOBYTE(v4[0]) = 1;
  LOWORD(__p[0]) = 41;
  v5 = 7;
  strcpy((char *)v4 + 1, "\\right)");
  v7 = 7;
  strcpy((char *)v6, "\\right|");
  v9 = 6;
  strcpy((char *)v8, "\\rceil");
  v11 = 12;
  strcpy((char *)v10, "\\right\\rceil");
  v13 = 7;
  strcpy((char *)v12, "\\rfloor");
  v15 = 13;
  strcpy((char *)v14, "\\right\\rfloor");
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  sub_1BE61EC50(a1 + 320, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 320, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 320, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1 + 320, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1 + 320, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1 + 320, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1 + 320, (uint64_t)v14, (uint64_t)v14);
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_59:
      if ((v11 & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_144;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_60:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_145;
  }
LABEL_144:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_146;
  }
LABEL_145:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_63;
LABEL_147:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_148;
  }
LABEL_146:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_147;
LABEL_63:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_64;
LABEL_148:
  operator delete(__p[0]);
LABEL_64:
  LOBYTE(v4[0]) = 4;
  strcpy((char *)__p, "\\sin");
  v5 = 4;
  strcpy((char *)v4 + 1, "\\cos");
  v7 = 4;
  strcpy((char *)v6, "\\tan");
  v9 = 4;
  strcpy((char *)v8, "\\csc");
  v11 = 4;
  strcpy((char *)v10, "\\sec");
  v13 = 4;
  strcpy((char *)v12, "\\cot");
  v15 = 7;
  strcpy((char *)v14, "\\arcsin");
  v17 = 7;
  strcpy((char *)v16, "\\arccos");
  v19 = 7;
  strcpy((char *)v18, "\\arctan");
  v21 = 4;
  strcpy((char *)v20, "\\log");
  v23 = 3;
  strcpy((char *)v22, "\\ln");
  HIBYTE(v24[2]) = 3;
  strcpy((char *)v24, "\\lg");
  HIBYTE(v25[2]) = 5;
  strcpy((char *)v25, "\\sinh");
  v27 = 5;
  strcpy((char *)v26, "\\cosh");
  v29 = 5;
  strcpy((char *)v28, "\\tanh");
  v31 = 5;
  strcpy((char *)v30, "\\coth");
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  sub_1BE61EC50(a1 + 360, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 360, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 360, (uint64_t)v6, (uint64_t)v6);
  sub_1BE61EC50(a1 + 360, (uint64_t)v8, (uint64_t)v8);
  sub_1BE61EC50(a1 + 360, (uint64_t)v10, (uint64_t)v10);
  sub_1BE61EC50(a1 + 360, (uint64_t)v12, (uint64_t)v12);
  sub_1BE61EC50(a1 + 360, (uint64_t)v14, (uint64_t)v14);
  sub_1BE61EC50(a1 + 360, (uint64_t)v16, (uint64_t)v16);
  sub_1BE61EC50(a1 + 360, (uint64_t)v18, (uint64_t)v18);
  sub_1BE61EC50(a1 + 360, (uint64_t)v20, (uint64_t)v20);
  sub_1BE61EC50(a1 + 360, (uint64_t)v22, (uint64_t)v22);
  sub_1BE61EC50(a1 + 360, (uint64_t)v24, (uint64_t)v24);
  sub_1BE61EC50(a1 + 360, (uint64_t)v25, (uint64_t)v25);
  sub_1BE61EC50(a1 + 360, (uint64_t)v26, (uint64_t)v26);
  sub_1BE61EC50(a1 + 360, (uint64_t)v28, (uint64_t)v28);
  sub_1BE61EC50(a1 + 360, (uint64_t)v30, (uint64_t)v30);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_66:
      if ((v27 & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_151;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v28[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_152;
  }
LABEL_151:
  operator delete(v26[0]);
  if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_153;
  }
LABEL_152:
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((v23 & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v24[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_70:
    if ((v21 & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_155;
  }
LABEL_154:
  operator delete(v22[0]);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_71:
    if ((v19 & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_156;
  }
LABEL_155:
  operator delete(v20[0]);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_72:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_157;
  }
LABEL_156:
  operator delete(v18[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_158;
  }
LABEL_157:
  operator delete(v16[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_74:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_159;
  }
LABEL_158:
  operator delete(v14[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_75:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_160;
  }
LABEL_159:
  operator delete(v12[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_76:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_161;
  }
LABEL_160:
  operator delete(v10[0]);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_77:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_162;
  }
LABEL_161:
  operator delete(v8[0]);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_79;
LABEL_163:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_164;
  }
LABEL_162:
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_163;
LABEL_79:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_80;
LABEL_164:
  operator delete(__p[0]);
LABEL_80:
  LOBYTE(v4[0]) = 1;
  LOWORD(__p[0]) = 92;
  v5 = 2;
  strcpy((char *)v4 + 1, "\\,");
  v7 = 2;
  strcpy((char *)v6, "\\;");
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  sub_1BE61EC50(a1 + 400, (uint64_t)__p, (uint64_t)__p);
  sub_1BE61EC50(a1 + 400, (uint64_t)v4 + 1, (uint64_t)v4 + 1);
  sub_1BE61EC50(a1 + 400, (uint64_t)v6, (uint64_t)v6);
  if ((v7 & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0)
      goto LABEL_82;
LABEL_166:
    operator delete(*(void **)((char *)v4 + 1));
    if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_167;
  }
  operator delete(v6[0]);
  if (v5 < 0)
    goto LABEL_166;
LABEL_82:
  if ((SLOBYTE(v4[0]) & 0x80000000) == 0)
    goto LABEL_83;
LABEL_167:
  operator delete(__p[0]);
LABEL_83:
  LOBYTE(v4[0]) = 2;
  strcpy((char *)__p, "\\\\");
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  sub_1BE61EC50(a1 + 440, (uint64_t)__p, (uint64_t)__p);
  if (SLOBYTE(v4[0]) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1BE61E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_objecta, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void *v30;
  void **v31;
  uint64_t v32;

  v32 = v21;
  v29 = *(void ***)(v20 + 456);
  if (v29)
  {
    do
    {
      v31 = (void **)*v29;
      if (*((char *)v29 + 39) < 0)
        operator delete(v29[2]);
      operator delete(v29);
      v29 = v31;
    }
    while (v31);
  }
  v30 = *v25;
  *v25 = 0;
  if (v30)
    operator delete(v30);
  if (a20 < 0)
    operator delete(__p);
  sub_1BE61CB14(v22);
  sub_1BE61CB14(v27);
  sub_1BE61CB14(v28);
  sub_1BE61CB14(v26);
  sub_1BE61CB14(a12);
  sub_1BE61CB14(a13);
  sub_1BE61CB14(v24);
  sub_1BE61CB14(v23);
  sub_1BE61CB14(a14);
  sub_1BE61CB14(v32);
  sub_1BE61CB14(v20);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE61EC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1BE61C318((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1BE61F128(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v26[2] = *(_QWORD *)(a3 + 16);
  }
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_1BE61F23C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BE61F088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE61F0B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BE61F09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE61F0B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE61F0B4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1BE61F100()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *sub_1BE61F128(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1BE61F1B4()
{
  sub_1BE61F1C8("basic_string");
}

void sub_1BE61F1C8(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1BE61F218(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E77EE960, MEMORY[0x1E0DE42D0]);
}

void sub_1BE61F204(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1BE61F218(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_1BE61F23C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_1BE61F100();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void sub_1BE61F3E8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1BE61F3E8(a1, *(_QWORD *)a2);
    sub_1BE61F3E8(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **sub_1BE61F448(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x40uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((_DWORD *)v11 + 14) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    sub_1BE61F5C0(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *sub_1BE61F5C0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

_QWORD *sub_1BE61F774(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_1BE61F128(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1BE61F84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1BE61F89C(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE61F860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1BE61F89C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1BE61F89C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1BE61F930()
{
  sub_1BE61F1C8("vector");
}

uint64_t **sub_1BE61F944(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1BE61F128(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_1BE61F5C0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1BE61FACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE61FAE0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;

  v2 = *(_QWORD **)(a1 + 392);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 352);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 312);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(_QWORD **)(a1 + 272);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v13)
    operator delete(v13);
  v14 = *(_QWORD **)(a1 + 232);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v16)
    operator delete(v16);
  v17 = *(_QWORD **)(a1 + 192);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v19)
    operator delete(v19);
  v20 = *(_QWORD **)(a1 + 152);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v22)
    operator delete(v22);
  v23 = *(_QWORD **)(a1 + 112);
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      operator delete(v23);
      v23 = v24;
    }
    while (v24);
  }
  v25 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v25)
    operator delete(v25);
  v26 = *(_QWORD **)(a1 + 72);
  if (v26)
  {
    do
    {
      v27 = (_QWORD *)*v26;
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v28 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v28)
    operator delete(v28);
  sub_1BE61F3E8(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1BE61FC74(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE6202DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6202F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE62030C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE620324(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE62033C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1BE62033C(a1, *a2);
    sub_1BE62033C(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_1BE62037C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_1BE61F930();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_1BE6204C0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE620B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE620B44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE620B58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE620B70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE620B88(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE6211F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE62120C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE621220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE621238(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE621250(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t *v112;
  int64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v84 = *(a2 - 1);
        v85 = *v10;
        if (*(_QWORD *)(**a3 + 8 * v84) < *(_QWORD *)(**a3 + 8 * *v10))
        {
          *v10 = v84;
          goto LABEL_177;
        }
        return result;
      case 3:
        v86 = **a3;
        v85 = *v10;
        v87 = v10[1];
        v88 = *(_QWORD *)(v86 + 8 * v87);
        v89 = *(a2 - 1);
        v90 = *(_QWORD *)(v86 + 8 * v89);
        if (v88 >= *(_QWORD *)(v86 + 8 * *v10))
        {
          if (v90 < v88)
          {
            v10[1] = v89;
            *(a2 - 1) = v87;
            v142 = *v10;
            v141 = v10[1];
            if (*(_QWORD *)(v86 + 8 * v141) < *(_QWORD *)(v86 + 8 * *v10))
            {
              *v10 = v141;
              v10[1] = v142;
            }
          }
        }
        else
        {
          if (v90 >= v88)
          {
            *v10 = v87;
            v10[1] = v85;
            v151 = *(a2 - 1);
            if (*(_QWORD *)(v86 + 8 * v151) >= *(_QWORD *)(v86 + 8 * v85))
              return result;
            v10[1] = v151;
          }
          else
          {
            *v10 = v89;
          }
LABEL_177:
          *(a2 - 1) = v85;
        }
        return result;
      case 4:
        v91 = v10 + 1;
        v92 = v10[1];
        v93 = v10 + 2;
        v94 = v10[2];
        v95 = **a3;
        v96 = *(_QWORD *)(v95 + 8 * v92);
        v97 = *v10;
        v98 = *(_QWORD *)(v95 + 8 * v94);
        if (v96 >= *(_QWORD *)(v95 + 8 * *v10))
        {
          if (v98 >= v96)
          {
LABEL_171:
            v92 = v94;
            v143 = *(a2 - 1);
            if (*(_QWORD *)(v95 + 8 * v143) >= *(_QWORD *)(v95 + 8 * v92))
              return result;
LABEL_172:
            *v93 = v143;
            *(a2 - 1) = v92;
            v148 = *v93;
            v149 = *v91;
            if (*(_QWORD *)(v95 + 8 * v148) < *(_QWORD *)(v95 + 8 * v149))
            {
              v10[1] = v148;
              v10[2] = v149;
              v150 = *v10;
              if (*(_QWORD *)(v95 + 8 * v148) < *(_QWORD *)(v95 + 8 * *v10))
              {
                *v10 = v148;
                v10[1] = v150;
              }
            }
            return result;
          }
          *v91 = v94;
          *v93 = v92;
          v99 = v10;
          v100 = v10 + 1;
          result = v92;
          if (*(_QWORD *)(v95 + 8 * v94) >= *(_QWORD *)(v95 + 8 * v97))
          {
LABEL_162:
            v143 = *(a2 - 1);
            if (*(_QWORD *)(v95 + 8 * v143) >= *(_QWORD *)(v95 + 8 * v92))
              return result;
            goto LABEL_172;
          }
        }
        else
        {
          v99 = v10;
          v100 = v10 + 2;
          result = *v10;
          if (v98 >= v96)
          {
            *v10 = v92;
            v10[1] = v97;
            v99 = v10 + 1;
            v100 = v10 + 2;
            result = v97;
            if (*(_QWORD *)(v95 + 8 * v94) >= *(_QWORD *)(v95 + 8 * v97))
              goto LABEL_171;
          }
        }
        *v99 = v94;
        *v100 = v97;
        v92 = result;
        goto LABEL_162;
      case 5:
        return (uint64_t)sub_1BE621D84(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, **a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 == a2)
              return result;
            v111 = (unint64_t)(v12 - 2) >> 1;
            v112 = *a3;
            v113 = v111;
            while (1)
            {
              if (v111 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = &v10[v115];
                v117 = *v116;
                if (2 * v113 + 2 < v12)
                {
                  v118 = *v112;
                  if (*(_QWORD *)(*v112 + 8 * v117) < *(_QWORD *)(*v112 + 8 * v116[1]))
                  {
                    v117 = v116[1];
                    ++v116;
                    v115 = 2 * v113 + 2;
                  }
                  v119 = &v10[v113];
                  v120 = *v119;
                  result = *(_QWORD *)(v118 + 8 * v117);
                  if (result < *(_QWORD *)(v118 + 8 * *v119))
                    goto LABEL_126;
                  do
                  {
LABEL_136:
                    v121 = v116;
                    *v119 = v117;
                    if (v111 < v115)
                      break;
                    result = (2 * v115) | 1;
                    v116 = &v10[result];
                    v122 = 2 * v115 + 2;
                    v117 = *v116;
                    if (v122 < v12 && *(_QWORD *)(v118 + 8 * v117) < *(_QWORD *)(v118 + 8 * v116[1]))
                    {
                      v117 = v116[1];
                      ++v116;
                      result = v122;
                    }
                    v119 = v121;
                    v115 = result;
                  }
                  while (*(_QWORD *)(v118 + 8 * v117) >= *(_QWORD *)(v118 + 8 * v120));
                  *v121 = v120;
                  v112 = *a3;
                  goto LABEL_126;
                }
                v118 = *v112;
                v119 = &v10[v113];
                v120 = *v119;
                result = *(_QWORD *)(*v112 + 8 * v117);
                if (result >= *(_QWORD *)(*v112 + 8 * *v119))
                  goto LABEL_136;
              }
LABEL_126:
              v114 = v113-- <= 0;
              if (v114)
              {
                v123 = (unint64_t)v11 >> 3;
                do
                {
                  v124 = 0;
                  v125 = *v10;
                  v126 = *a3;
                  v127 = v10;
                  do
                  {
                    v128 = &v127[v124];
                    v131 = v128[1];
                    v129 = v128 + 1;
                    v130 = v131;
                    v132 = (2 * v124) | 1;
                    v133 = 2 * v124 + 2;
                    if (v133 < v123)
                    {
                      result = v129[1];
                      if (*(_QWORD *)(*v126 + 8 * v130) < *(_QWORD *)(*v126 + 8 * result))
                      {
                        v130 = v129[1];
                        ++v129;
                        v132 = v133;
                      }
                    }
                    *v127 = v130;
                    v127 = v129;
                    v124 = v132;
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
                  if (v129 == --a2)
                  {
                    *v129 = v125;
                  }
                  else
                  {
                    *v129 = *a2;
                    *a2 = v125;
                    v134 = (char *)v129 - (char *)v10 + 8;
                    if (v134 >= 9)
                    {
                      v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                      v136 = &v10[v135];
                      v137 = *v136;
                      v138 = *v129;
                      v139 = **a3;
                      if (*(_QWORD *)(v139 + 8 * *v136) < *(_QWORD *)(v139 + 8 * *v129))
                      {
                        do
                        {
                          v140 = v136;
                          *v129 = v137;
                          if (!v135)
                            break;
                          v135 = (v135 - 1) >> 1;
                          v136 = &v10[v135];
                          v137 = *v136;
                          v129 = v140;
                        }
                        while (*(_QWORD *)(v139 + 8 * *v136) < *(_QWORD *)(v139 + 8 * v138));
                        *v140 = v138;
                      }
                    }
                  }
                  v114 = v123-- <= 2;
                }
                while (!v114);
                return result;
              }
            }
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(_QWORD *)(v15 + 8 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v21 = *v10;
            v22 = *v14;
            v23 = *(_QWORD *)(v15 + 8 * *v10);
            if (v23 >= *(_QWORD *)(v15 + 8 * *v14))
            {
              if (v17 < v23)
              {
                *v10 = v16;
                *(a2 - 1) = v21;
                v25 = *v14;
                if (*(_QWORD *)(v15 + 8 * *v10) < *(_QWORD *)(v15 + 8 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v25;
                  --a4;
                  v26 = v25;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 >= v23)
            {
              *v14 = v21;
              *v10 = v22;
              v37 = *(a2 - 1);
              if (*(_QWORD *)(v15 + 8 * v37) >= *(_QWORD *)(v15 + 8 * v22))
                goto LABEL_32;
              *v10 = v37;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v22;
LABEL_32:
            --a4;
            v26 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(_QWORD *)(v15 + 8 * *v14);
          if (v20 >= *(_QWORD *)(v15 + 8 * *v10))
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v24 = *v10;
              if (*(_QWORD *)(v15 + 8 * *v14) < *(_QWORD *)(v15 + 8 * *v10))
              {
                *v10 = *v14;
                *v14 = v24;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v27 = *(a2 - 1);
              if (*(_QWORD *)(v15 + 8 * v27) >= *(_QWORD *)(v15 + 8 * v19))
                goto LABEL_23;
              *v14 = v27;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v28 = &v10[v13];
          v31 = *(v28 - 1);
          v29 = v28 - 1;
          v30 = v31;
          v32 = v10[1];
          v33 = *(_QWORD *)(v15 + 8 * v31);
          v34 = *(a2 - 2);
          v35 = *(_QWORD *)(v15 + 8 * v34);
          if (v33 >= *(_QWORD *)(v15 + 8 * v32))
          {
            if (v35 < v33)
            {
              *v29 = v34;
              *(a2 - 2) = v30;
              v36 = v10[1];
              if (*(_QWORD *)(v15 + 8 * *v29) < *(_QWORD *)(v15 + 8 * v36))
              {
                v10[1] = *v29;
                *v29 = v36;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v10[1] = v30;
              *v29 = v32;
              v38 = *(a2 - 2);
              if (*(_QWORD *)(v15 + 8 * v38) >= *(_QWORD *)(v15 + 8 * v32))
                goto LABEL_37;
              *v29 = v38;
            }
            else
            {
              v10[1] = v34;
            }
            *(a2 - 2) = v32;
          }
LABEL_37:
          v39 = &v10[v13];
          v42 = v39[1];
          v40 = v39 + 1;
          v41 = v42;
          v43 = v10[2];
          v44 = *(_QWORD *)(v15 + 8 * v42);
          v45 = *(a2 - 3);
          v46 = *(_QWORD *)(v15 + 8 * v45);
          if (v44 >= *(_QWORD *)(v15 + 8 * v43))
          {
            if (v46 < v44)
            {
              *v40 = v45;
              *(a2 - 3) = v41;
              v47 = v10[2];
              if (*(_QWORD *)(v15 + 8 * *v40) < *(_QWORD *)(v15 + 8 * v47))
              {
                v10[2] = *v40;
                *v40 = v47;
              }
            }
          }
          else
          {
            if (v46 >= v44)
            {
              v10[2] = v41;
              *v40 = v43;
              v48 = *(a2 - 3);
              if (*(_QWORD *)(v15 + 8 * v48) >= *(_QWORD *)(v15 + 8 * v43))
                goto LABEL_46;
              *v40 = v48;
            }
            else
            {
              v10[2] = v45;
            }
            *(a2 - 3) = v43;
          }
LABEL_46:
          v49 = *v14;
          v50 = *v29;
          v51 = *(_QWORD *)(v15 + 8 * *v14);
          v52 = *v40;
          v53 = *(_QWORD *)(v15 + 8 * *v40);
          if (v51 < *(_QWORD *)(v15 + 8 * *v29))
          {
            if (v53 >= v51)
            {
              *v29 = v49;
              *v14 = v50;
              v29 = v14;
              v49 = v52;
              if (*(_QWORD *)(v15 + 8 * v52) >= *(_QWORD *)(v15 + 8 * v50))
              {
                v54 = *v10;
                *v10 = v50;
                *v14 = v54;
                --a4;
                v26 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v53 >= v51)
            goto LABEL_54;
          *v14 = v52;
          *v40 = v49;
          v40 = v14;
          v49 = v50;
          if (*(_QWORD *)(v15 + 8 * v52) < *(_QWORD *)(v15 + 8 * v50))
          {
LABEL_53:
            *v29 = v52;
            *v40 = v50;
LABEL_54:
            v55 = *v10;
            *v10 = v49;
            *v14 = v55;
            --a4;
            v26 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v56 = *(_QWORD *)(v15 + 8 * v26);
            if (*(_QWORD *)(v15 + 8 * *(v10 - 1)) < v56)
              goto LABEL_56;
            if (v56 >= *(_QWORD *)(v15 + 8 * *(a2 - 1)))
            {
              v75 = v10 + 1;
              do
              {
                v10 = v75;
                if (v75 >= a2)
                  break;
                ++v75;
              }
              while (v56 >= *(_QWORD *)(v15 + 8 * *v10));
            }
            else
            {
              do
              {
                v74 = v10[1];
                ++v10;
              }
              while (v56 >= *(_QWORD *)(v15 + 8 * v74));
            }
            v76 = a2;
            if (v10 < a2)
            {
              v76 = a2;
              do
                v77 = *--v76;
              while (v56 < *(_QWORD *)(v15 + 8 * v77));
            }
            if (v10 < v76)
            {
              v78 = *v10;
              v79 = *v76;
              do
              {
                *v10 = v79;
                *v76 = v78;
                v80 = *(_QWORD *)(v15 + 8 * v26);
                do
                {
                  v81 = v10[1];
                  ++v10;
                  v78 = v81;
                }
                while (v80 >= *(_QWORD *)(v15 + 8 * v81));
                do
                {
                  v82 = *--v76;
                  v79 = v82;
                }
                while (v80 < *(_QWORD *)(v15 + 8 * v82));
              }
              while (v10 < v76);
            }
            v83 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v83;
            a5 = 0;
            *v83 = v26;
            continue;
          }
          v73 = *v10;
          *v10 = v52;
          *v14 = v73;
          --a4;
          v26 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v57 = 0;
          v58 = **a3;
          v59 = *(_QWORD *)(v58 + 8 * v26);
          do
            v60 = v10[++v57];
          while (*(_QWORD *)(v58 + 8 * v60) < v59);
          v61 = &v10[v57];
          v62 = a2;
          if (v57 == 1)
          {
            v62 = a2;
            do
            {
              if (v61 >= v62)
                break;
              v64 = *--v62;
            }
            while (*(_QWORD *)(v58 + 8 * v64) >= v59);
          }
          else
          {
            do
              v63 = *--v62;
            while (*(_QWORD *)(v58 + 8 * v63) >= v59);
          }
          if (v61 >= v62)
          {
            v71 = v61 - 1;
            if (v61 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v71;
            goto LABEL_74;
          }
          v65 = *v62;
          v66 = &v10[v57];
          v67 = v62;
          do
          {
            *v66 = v65;
            *v67 = v60;
            v68 = *(_QWORD *)(v58 + 8 * v26);
            do
            {
              v69 = v66[1];
              ++v66;
              v60 = v69;
            }
            while (*(_QWORD *)(v58 + 8 * v69) < v68);
            do
            {
              v70 = *--v67;
              v65 = v70;
            }
            while (*(_QWORD *)(v58 + 8 * v70) >= v68);
          }
          while (v66 < v67);
          v71 = v66 - 1;
          if (v66 - 1 != v10)
            goto LABEL_73;
LABEL_74:
          *v71 = v26;
          if (v61 < v62)
            goto LABEL_77;
          v72 = sub_1BE621F24(v10, v71, *a3);
          v10 = v71 + 1;
          result = sub_1BE621F24(v71 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v72)
              continue;
LABEL_77:
            result = sub_1BE621250(v9, v71, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v71 + 1;
            continue;
          }
          a2 = v71;
          if (v72)
            return result;
          goto LABEL_2;
        }
        v101 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 == a2)
            return result;
          v102 = v10 + 1;
          if (v10 + 1 == a2)
            return result;
          v103 = *v101;
          v104 = 8;
          v105 = v10;
          while (1)
          {
            v108 = *v105;
            v107 = v105[1];
            v105 = v102;
            if (*(_QWORD *)(v103 + 8 * v107) < *(_QWORD *)(v103 + 8 * v108))
            {
              v109 = v104;
              do
              {
                *(uint64_t *)((char *)v10 + v109) = v108;
                v110 = v109 - 8;
                if (v109 == 8)
                {
                  v106 = v10;
                  goto LABEL_116;
                }
                v108 = *(uint64_t *)((char *)v10 + v109 - 16);
                v109 -= 8;
              }
              while (*(_QWORD *)(v103 + 8 * v107) < *(_QWORD *)(v103 + 8 * v108));
              v106 = (uint64_t *)((char *)v10 + v110);
LABEL_116:
              *v106 = v107;
            }
            v102 = v105 + 1;
            v104 += 8;
            if (v105 + 1 == a2)
              return result;
          }
        }
        if (v10 != a2)
        {
          v144 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v145 = *v101;
            do
            {
              v147 = *v9;
              v146 = v9[1];
              v9 = v144;
              if (*(_QWORD *)(v145 + 8 * v146) < *(_QWORD *)(v145 + 8 * v147))
              {
                do
                {
                  *v144 = v147;
                  v147 = *(v144 - 2);
                  --v144;
                }
                while (*(_QWORD *)(v145 + 8 * v146) < *(_QWORD *)(v145 + 8 * v147));
                *v144 = v146;
              }
              v144 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t *sub_1BE621D84(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *result;
  v8 = *(_QWORD *)(a6 + 8 * *a2);
  v9 = *a3;
  v10 = *(_QWORD *)(a6 + 8 * *a3);
  if (v8 >= *(_QWORD *)(a6 + 8 * *result))
  {
    if (v10 >= v8)
    {
      v6 = *a3;
      v12 = *a4;
      if (*(_QWORD *)(a6 + 8 * *a4) >= *(_QWORD *)(a6 + 8 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v6;
    v11 = *result;
    if (*(_QWORD *)(a6 + 8 * *a2) < *(_QWORD *)(a6 + 8 * *result))
    {
      *result = *a2;
      *a2 = v11;
      v6 = *a3;
      v12 = *a4;
      if (*(_QWORD *)(a6 + 8 * *a4) >= *(_QWORD *)(a6 + 8 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 >= v8)
    {
      *result = v6;
      *a2 = v7;
      v6 = *a3;
      if (*(_QWORD *)(a6 + 8 * *a3) >= *(_QWORD *)(a6 + 8 * v7))
        goto LABEL_11;
      *a2 = v6;
    }
    else
    {
      *result = v9;
    }
    *a3 = v7;
    v6 = v7;
  }
LABEL_11:
  v12 = *a4;
  if (*(_QWORD *)(a6 + 8 * *a4) >= *(_QWORD *)(a6 + 8 * v6))
    goto LABEL_17;
LABEL_14:
  *a3 = v12;
  *a4 = v6;
  v13 = *a2;
  if (*(_QWORD *)(a6 + 8 * *a3) < *(_QWORD *)(a6 + 8 * *a2))
  {
    *a2 = *a3;
    *a3 = v13;
    v14 = *result;
    if (*(_QWORD *)(a6 + 8 * *a2) < *(_QWORD *)(a6 + 8 * *result))
    {
      *result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  v15 = *a4;
  if (*(_QWORD *)(a6 + 8 * *a5) < *(_QWORD *)(a6 + 8 * *a4))
  {
    *a4 = *a5;
    *a5 = v15;
    v16 = *a3;
    if (*(_QWORD *)(a6 + 8 * *a4) < *(_QWORD *)(a6 + 8 * *a3))
    {
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      if (*(_QWORD *)(a6 + 8 * *a3) < *(_QWORD *)(a6 + 8 * *a2))
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = *result;
        if (*(_QWORD *)(a6 + 8 * *a2) < *(_QWORD *)(a6 + 8 * *result))
        {
          *result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL sub_1BE621F24(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v15 = *(a2 - 1);
      v16 = *a1;
      if (*(_QWORD *)(*a3 + 8 * v15) >= *(_QWORD *)(*a3 + 8 * *a1))
        return 1;
      *a1 = v15;
      *(a2 - 1) = v16;
      return 1;
    case 3:
      v17 = *a3;
      v18 = *a1;
      v19 = a1[1];
      v20 = *(_QWORD *)(*a3 + 8 * v19);
      v21 = *(a2 - 1);
      v22 = *(_QWORD *)(*a3 + 8 * v21);
      if (v20 >= *(_QWORD *)(*a3 + 8 * *a1))
      {
        if (v22 >= v20)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v19;
        v42 = *a1;
        v41 = a1[1];
        if (*(_QWORD *)(v17 + 8 * v41) >= *(_QWORD *)(v17 + 8 * *a1))
          return 1;
        *a1 = v41;
        a1[1] = v42;
        return 1;
      }
      else if (v22 >= v20)
      {
        *a1 = v19;
        a1[1] = v18;
        v47 = *(a2 - 1);
        if (*(_QWORD *)(v17 + 8 * v47) >= *(_QWORD *)(v17 + 8 * v18))
          return 1;
        a1[1] = v47;
        *(a2 - 1) = v18;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v18;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a3;
      v28 = *(_QWORD *)(*a3 + 8 * v24);
      v29 = *a1;
      v30 = *(_QWORD *)(*a3 + 8 * v26);
      if (v28 < *(_QWORD *)(*a3 + 8 * *a1))
      {
        v31 = a1;
        v32 = a1 + 2;
        v33 = *a1;
        if (v30 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v31 = a1 + 1;
          v32 = a1 + 2;
          v33 = v29;
          if (*(_QWORD *)(v27 + 8 * v26) >= *(_QWORD *)(v27 + 8 * v29))
            goto LABEL_38;
        }
LABEL_35:
        *v31 = v26;
        *v32 = v29;
        v24 = v33;
LABEL_36:
        v43 = *(a2 - 1);
        if (*(_QWORD *)(v27 + 8 * v43) >= *(_QWORD *)(v27 + 8 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v30 < v28)
      {
        *v23 = v26;
        *v25 = v24;
        v31 = a1;
        v32 = a1 + 1;
        v33 = v24;
        if (*(_QWORD *)(v27 + 8 * v26) >= *(_QWORD *)(v27 + 8 * v29))
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v43 = *(a2 - 1);
      if (*(_QWORD *)(v27 + 8 * v43) >= *(_QWORD *)(v27 + 8 * v24))
        return 1;
LABEL_39:
      *v25 = v43;
      *(a2 - 1) = v24;
      v44 = *v25;
      v45 = *v23;
      if (*(_QWORD *)(v27 + 8 * v44) >= *(_QWORD *)(v27 + 8 * v45))
        return 1;
      a1[1] = v44;
      a1[2] = v45;
      v46 = *a1;
      if (*(_QWORD *)(v27 + 8 * v44) >= *(_QWORD *)(v27 + 8 * *a1))
        return 1;
      *a1 = v44;
      a1[1] = v46;
      return 1;
    case 5:
      sub_1BE621D84(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = *a3;
      v8 = *(_QWORD *)(*a3 + 8 * v6);
      v9 = *a1;
      v10 = *(_QWORD *)(*a3 + 8 * v4);
      if (v8 >= *(_QWORD *)(*a3 + 8 * *a1))
      {
        if (v10 >= v8)
          goto LABEL_20;
        a1[1] = v4;
        *v5 = v6;
        v13 = *(_QWORD *)(v7 + 8 * v4);
        v14 = *(_QWORD *)(v7 + 8 * v9);
        v11 = a1;
        v12 = a1 + 1;
      }
      else
      {
        v11 = a1;
        v12 = a1 + 2;
        if (v10 < v8)
          goto LABEL_19;
        *a1 = v6;
        a1[1] = v9;
        v13 = *(_QWORD *)(v7 + 8 * v4);
        v14 = *(_QWORD *)(v7 + 8 * v9);
        v11 = a1 + 1;
        v12 = a1 + 2;
      }
      if (v13 >= v14)
        goto LABEL_20;
LABEL_19:
      *v11 = v4;
      *v12 = v9;
LABEL_20:
      v34 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v35 = 0;
      for (i = 24; ; i += 8)
      {
        v37 = *v34;
        v38 = *v5;
        if (*(_QWORD *)(v7 + 8 * *v34) < *(_QWORD *)(v7 + 8 * v38))
          break;
LABEL_23:
        v5 = v34++;
        if (v34 == a2)
          return 1;
      }
      v39 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v39) = v38;
        v40 = v39 - 8;
        if (v39 == 8)
        {
          *a1 = v37;
          if (++v35 != 8)
            goto LABEL_23;
          return v34 + 1 == a2;
        }
        v38 = *(uint64_t *)((char *)a1 + v39 - 16);
        v39 -= 8;
      }
      while (*(_QWORD *)(v7 + 8 * v37) < *(_QWORD *)(v7 + 8 * v38));
      *(uint64_t *)((char *)a1 + v40) = v37;
      if (++v35 != 8)
        goto LABEL_23;
      return v34 + 1 == a2;
  }
}

void sub_1BE6223A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6224C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6224DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6224EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE622884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE622BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE622BF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR(".@#:/-_"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF567EF0;
  qword_1EF567EF0 = v6;

}

void sub_1BE622EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE62309C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE623184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE6231B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6231CC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t k;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id obj;
  uint64_t i;
  id v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t j;
  void *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[128];
  _BYTE v105[128];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  obj = a3;
  v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v100, (uint64_t)v105, 16, v6);
  if (v85)
  {
    v86 = *(_QWORD *)v101;
    do
    {
      for (i = 0; i != v85; ++i)
      {
        if (*(_QWORD *)v101 != v86)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * i);
        objc_msgSend_array(MEMORY[0x1E0C99DE8], v7, v8, v9, v10, v11);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v90 = *(id *)(a1 + 32);
        v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v13, (uint64_t)&v96, (uint64_t)v104, 16, v14);
        if (v93)
        {
          v91 = *(_QWORD *)v97;
          do
          {
            for (j = 0; j != v93; ++j)
            {
              if (*(_QWORD *)v97 != v91)
                objc_enumerationMutation(v90);
              v20 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * j);
              objc_msgSend_array(MEMORY[0x1E0C99DE8], v15, v16, v17, v18, v19);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = objc_msgSend_length(v20, v22, v23, v24, v25, v26);
              v33 = objc_msgSend_rangeOfString_options_range_(v20, v28, (uint64_t)v4, 0, 0, v27);
              v95 = v20;
              if (v33 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v34 = (uint64_t)v29;
                do
                {
                  objc_msgSend_stringByReplacingCharactersInRange_withString_(v95, v29, v33, v34, (uint64_t)v12, v32);
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  v45 = objc_msgSend_count(v21, v36, v37, v38, v39, v40);
                  if (v45)
                  {
                    for (k = 0; k != v45; ++k)
                    {
                      objc_msgSend_objectAtIndexedSubscript_(v21, v41, k, v42, v43, v44);
                      v47 = (void *)objc_claimAutoreleasedReturnValue();
                      v52 = objc_msgSend_rangeOfString_(v47, v48, (uint64_t)v4, v49, v50, v51);
                      v54 = v53;

                      objc_msgSend_objectAtIndexedSubscript_(v21, v55, k, v56, v57, v58);
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_stringByReplacingCharactersInRange_withString_(v59, v60, v52, v54, (uint64_t)v12, v61);
                      v62 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend_addObject_(v21, v63, (uint64_t)v62, v64, v65, v66);
                    }
                  }
                  objc_msgSend_addObject_(v21, v41, (uint64_t)v35, v42, v43, v44);
                  v72 = objc_msgSend_length(v12, v67, v68, v69, v70, v71);
                  v78 = objc_msgSend_length(v95, v73, v74, v75, v76, v77);
                  v33 = objc_msgSend_rangeOfString_options_range_(v95, v79, (uint64_t)v4, 0, v72 + v33, v78 - (v72 + v33));
                  v34 = v80;

                }
                while (v33 != 0x7FFFFFFFFFFFFFFFLL);
              }
              objc_msgSend_addObjectsFromArray_(v92, v29, (uint64_t)v21, v30, v31, v32);

            }
            v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v15, (uint64_t)&v96, (uint64_t)v104, 16, v19);
          }
          while (v93);
        }

        objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v81, (uint64_t)v92, v82, v83, v84);
      }
      v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v100, (uint64_t)v105, 16, v11);
    }
    while (v85);
  }

}

void sub_1BE62351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE623764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE623938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE624008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE62424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1BE62427C(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  double v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isEqualToString;
  uint64_t v12;
  void *cf;

  LXEntryCopyString();
  cf = (void *)objc_claimAutoreleasedReturnValue();
  LXEntryGetPartialProbability();
  v6 = v5;
  isEqualToString = objc_msgSend_isEqualToString_(cf, v7, a1[4], v8, v9, v10);
  v12 = *(_QWORD *)(a1[5] + 8);
  if ((isEqualToString & 1) != 0 || v6 > *(double *)(v12 + 24))
  {
    *(double *)(v12 + 24) = v6;
    *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = LXEntryGetTokenID();
  }
  CFRelease(cf);
  *a3 = isEqualToString;

}

void sub_1BE624324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE62443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1BE62446C(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *cf;

  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  if (a1[7])
  {
    LXEntryCopyString();
    cf = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_caseInsensitiveCompare_(cf, v5, a1[4], v6, v7, v8))
    {
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
      *a3 = 1;
    }
    CFRelease(cf);

  }
  else
  {
    *a3 = 1;
  }
}

void sub_1BE624500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE624600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE624610(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;

  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v63 = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_mutableCopy(v63, v6, v7, v8, v9, v10);
  v12 = (void *)qword_1EF567F08;
  qword_1EF567F08 = v11;

  v13 = (void *)qword_1EF567F08;
  objc_msgSend_ch_basicAlphanumericCharacterSet(MEMORY[0x1E0CB3500], v14, v15, v16, v17, v18);
  v64 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v13, v19, (uint64_t)v64, v20, v21, v22);

  v23 = (void *)qword_1EF567F08;
  objc_msgSend_ch_hiraganaCharacterSet(MEMORY[0x1E0CB3500], v24, v25, v26, v27, v28);
  v65 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v23, v29, (uint64_t)v65, v30, v31, v32);

  v33 = (void *)qword_1EF567F08;
  objc_msgSend_ch_katakanaCharacterSet(MEMORY[0x1E0CB3500], v34, v35, v36, v37, v38);
  v66 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v33, v39, (uint64_t)v66, v40, v41, v42);

  v43 = (void *)qword_1EF567F08;
  objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E0CB3500], v44, v45, v46, v47, v48);
  v67 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v43, v49, (uint64_t)v67, v50, v51, v52);

  v53 = (void *)qword_1EF567F08;
  objc_msgSend_ch_kanjiCompCharacterSet(MEMORY[0x1E0CB3500], v54, v55, v56, v57, v58);
  v68 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v53, v59, (uint64_t)v68, v60, v61, v62);

}

void sub_1BE62472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE62477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE624B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE624E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE624F24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("¡¿"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568BF0;
  qword_1EF568BF0 = v6;

}

void sub_1BE624F58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char IsMember;
  id v32;

  v32 = a2;
  if ((objc_msgSend_isEqualToString_(v32, v7, *MEMORY[0x1E0CB2D30], v8, v9, v10) & 1) != 0)
  {
    v15 = 1;
LABEL_10:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v15;

    return;
  }
  if (objc_msgSend_isEqualToString_(v32, v11, *MEMORY[0x1E0CB2CF0], v12, v13, v14))
  {
    if (a4 == 1)
    {
      v20 = (void *)qword_1EF568BF0;
      objc_msgSend_substringWithRange_(*(void **)(a1 + 32), v16, a3, 1, v18, v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_characterAtIndex_(v21, v22, 0, v23, v24, v25);
      IsMember = objc_msgSend_characterIsMember_(v20, v27, v26, v28, v29, v30);

      if ((IsMember & 1) != 0)
        goto LABEL_6;
    }
LABEL_9:
    v15 = 0;
    goto LABEL_10;
  }
  if ((objc_msgSend_isEqualToString_(v32, v16, *MEMORY[0x1E0CB2D38], v17, v18, v19) & 1) == 0)
    goto LABEL_9;
LABEL_6:

}

void sub_1BE625054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE62506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE62627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }

  _Unwind_Resume(a1);
}

void sub_1BE626D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,void *a63)
{
  void *a64;
  void *a65;
  void *a66;
  void *a67;
  void *a68;
  void *a69;
  void *a70;
  void *a71;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;

  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose((const void *)(v74 - 256), 8);

  _Block_object_dispose((const void *)(v74 - 224), 8);
  _Block_object_dispose((const void *)(v74 - 192), 8);

  _Unwind_Resume(a1);
}

void sub_1BE626F58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("-/"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF567F10;
  qword_1EF567F10 = v6;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v8, (uint64_t)CFSTR("!?();:"), v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_1EF567F18;
  qword_1EF567F18 = v12;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v14, (uint64_t)CFSTR("àáâäãçèéêëìíîïñòóôõöùúûü\xFFÀÁÂÄÃÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜŸ"), v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)qword_1EF567F20;
  qword_1EF567F20 = v18;

  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3780], v20, v21, v22, v23, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = (void *)qword_1EF567F28;
  qword_1EF567F28 = v25;

  v27 = (void *)qword_1EF567F28;
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v28, v29, v30, v31, v32);
  v37 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v27, v33, (uint64_t)v37, v34, v35, v36);

}

void sub_1BE627024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE627038(uint64_t a1, uint64_t a2)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  char UserBitfield;
  double v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int MetaFlags;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  char v43;
  BOOL v44;
  BOOL v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int hasPrefix;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BYTE *v68;
  unsigned int TokenID;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int isInappropriateLexiconEntry;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  unsigned int TokenIDForLemma;
  _BYTE *v100;
  void *v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v111;
  _BOOL4 v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  void *v121;
  id v122;
  uint64_t v123;
  double v124;
  _BOOL4 v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSString *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  id v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  void *v182;
  const char *v183;
  double v184;
  CHTokenizedTextResultToken *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  void *v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE *v269;
  double v270;
  char v271;
  uint64_t v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  void *v285;
  id v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  NSString *v291;
  uint64_t v292;
  const char *v293;
  _BOOL4 v294;
  int v295;
  uint64_t v296;
  double v297;
  double v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  unsigned int v328;
  void *v329;
  const char *v330;
  uint64_t v331;
  NSString *v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  NSString *v338;
  char v339;
  double v340;
  int v341;
  void *v342;
  uint64_t v343;
  double v344;
  uint64_t v345;
  double v346;
  unsigned int v347;
  int isEqualToString;
  double v349;
  uint64_t v350;
  _OWORD v351[8];
  uint8_t buf[16];

  LXEntryCopyString();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LXEntryGetPartialProbability();
  v6 = v5;
  LXEntryGetProbability();
  v8 = v7;
  UserBitfield = LXEntryGetUserBitfield();
  v10 = *(double *)(a1 + 160);
  v16 = objc_msgSend_length(*(void **)(a1 + 32), v11, v12, v13, v14, v15);
  v17 = *(_QWORD *)(a1 + 168);
  v23 = objc_msgSend_length(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  v29 = objc_msgSend_length(v4, v24, v25, v26, v27, v28);
  v34 = objc_msgSend_compare_(v4, v30, *(_QWORD *)(a1 + 40), v31, v32, v33);
  MetaFlags = LXEntryGetMetaFlags();
  v41 = objc_msgSend_length(*(void **)(a1 + 32), v36, v37, v38, v39, v40);
  if (!v34
    || ((MetaFlags & 0x200000) != 0 ? (v42 = v41 >= *(_QWORD *)(a1 + 176)) : (v42 = 1),
        !v42 ? (v43 = 0) : (v43 = 1),
        v23 != v29 ? (v44 = v16 >= v17) : (v44 = 1),
        !v44 ? (v45 = v8 < v10) : (v45 = 0),
        !v45 && (v43 & 1) != 0))
  {
    v50 = __exp10(v6);
    if ((MetaFlags & 0x200000) != 0)
    {
      hasPrefix = objc_msgSend_hasPrefix_(v4, v46, *(_QWORD *)(a1 + 48), v47, v48, v49);
    }
    else
    {
      objc_msgSend_substringWithRange_(v4, v46, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), v48, v49);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      hasPrefix = objc_msgSend_caseInsensitiveCompare_(v51, v52, *(_QWORD *)(a1 + 48), v53, v54, v55) == 0;

    }
    if (objc_msgSend_length(*(void **)(a1 + 48), v57, v58, v59, v60, v61))
    {
      v67 = objc_msgSend_length(*(void **)(a1 + 48), v62, v63, v64, v65, v66) ? hasPrefix : 0;
      if (v67 != 1)
        goto LABEL_142;
    }
    v68 = *(_BYTE **)(a1 + 200);
    if (v68)
      *v68 = 1;
    TokenID = LXEntryGetTokenID();
    isInappropriateLexiconEntry = objc_msgSend_isInappropriateLexiconEntry_(*(void **)(a1 + 56), v70, a2, v71, v72, v73);
    v85 = objc_msgSend_properties(*(void **)(a1 + 64), v75, v76, v77, v78, v79);
    if (isInappropriateLexiconEntry)
      v86 = 276;
    else
      v86 = 260;
    v92 = objc_msgSend_inputSources(*(void **)(a1 + 64), v80, v81, v82, v83, v84);
    v343 = v86;
    v345 = v85;
    v93 = v6 < *(double *)(a1 + 208)
       && objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 32), v87, (uint64_t)v4, v89, v90, v91) != 0;
    objc_msgSend_combinedScore(*(void **)(a1 + 64), v87, v88, v89, v90, v91);
    v98 = v97;
    if (*(_QWORD *)(a1 + 216))
    {
      TokenIDForLemma = LMVocabularyGetTokenIDForLemma();
      if (TokenIDForLemma)
        TokenID = TokenIDForLemma;
    }
    if (!v34)
    {
      v100 = *(_BYTE **)(a1 + 224);
      if (v100)
        *v100 = 1;
    }
    v339 = UserBitfield;
    if (*(_BYTE *)(a1 + 272))
    {
      if ((MetaFlags & 0x200000) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
      {
        uppercaseFirstLetter(*(NSString **)(a1 + 32));
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        uppercaseFirstLetter((NSString *)v4);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v101, v103, (uint64_t)v102, v104, v105, v106);
        goto LABEL_46;
      }
    }
    else if ((MetaFlags & 0x200000) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
    {
      lowercaseFirstLetter(*(NSString **)(a1 + 32));
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      lowercaseFirstLetter((NSString *)v4);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v101, v107, (uint64_t)v102, v108, v109, v110);
LABEL_46:

      if (v34)
        v111 = isEqualToString;
      else
        v111 = 1;
      v347 = TokenID;
      v350 = v92;
      if (v111)
        goto LABEL_50;
      goto LABEL_52;
    }
    v347 = TokenID;
    LOBYTE(isEqualToString) = 0;
    v111 = v34 == 0;
    v350 = v92;
    if (!v34)
    {
LABEL_50:
      v112 = 1;
LABEL_53:
      v118 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 72), v94, (uint64_t)v4, 129, v95, v96);
      v119 = (uint64_t)v113;
      v120 = 1.0 - v50;
      v121 = *(void **)(a1 + 80);
      if (v121)
      {
        if (!*(_QWORD *)(a1 + 192))
        {
          objc_msgSend_objectForKey_(v121, v113, (uint64_t)v4, v115, v116, v117);
          v153 = (void *)objc_claimAutoreleasedReturnValue();

          if (v153)
          {
            if (v119 == objc_msgSend_length(*(void **)(a1 + 72), v113, v114, v115, v116, v117))
            {
              objc_msgSend_objectForKey_(*(void **)(a1 + 80), v113, (uint64_t)v4, v115, v116, v117);
              v122 = (id)objc_claimAutoreleasedReturnValue();
              v350 |= 0x10uLL;
              goto LABEL_57;
            }
            goto LABEL_56;
          }
        }
      }
      if (*(_BYTE *)(a1 + 273))
        goto LABEL_56;
      if (v111)
      {
        v130 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 72), v113, (uint64_t)v4, 1, v116, v117);
        v132 = v131;
        v133 = v4;
        v122 = v133;
        if (*(_BYTE *)(a1 + 272))
        {
          v140 = (MetaFlags & 0x200000) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) != 0;
          if ((MetaFlags & 0x200000) == 0 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
          {
            uppercaseFirstLetter(v133);
            v141 = (void *)objc_claimAutoreleasedReturnValue();

            v140 = 0;
            v122 = v141;
            v147 = objc_msgSend_length(v141, v142, v143, v144, v145, v146);
LABEL_156:
            if (v147 != objc_msgSend_length(*(void **)(a1 + 72), v148, v149, v150, v151, v152))
            {
              objc_msgSend_stringByReplacingCharactersInRange_withString_(*(void **)(a1 + 72), v113, v130, v132, (uint64_t)v122, v117);
              v291 = (NSString *)objc_claimAutoreleasedReturnValue();

              if (v140)
              {
                uppercaseFirstLetter(v291);
                v292 = objc_claimAutoreleasedReturnValue();

                v122 = (id)v292;
              }
              else
              {
                v122 = v291;
              }
            }
            if (v34)
              v120 = v120 * 0.5;
            else
              v120 = 0.0;
LABEL_57:
            if (*(double *)(a1 + 248) + 0.0001 > v98)
              v98 = *(double *)(a1 + 248) + 0.0001;
            v123 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
            v124 = *(double *)(v123 + 24);
            if (v124 >= v98)
              v124 = v98;
            *(double *)(v123 + 24) = v124;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24))
              v125 = 0;
            else
              v125 = v112;
            if (v125)
            {
              *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = v120;
              v126 = 1;
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24) = 1;
              v127 = v350;
              if (!v122)
                goto LABEL_141;
            }
            else
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24))
                v128 = v112;
              else
                v128 = 1;
              if (v128 == 1)
              {
                v129 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
                v127 = v350;
                if (v120 >= *(double *)(v129 + 24))
                {
                  v126 = 0;
                  if (!v122)
                  {
LABEL_141:

LABEL_142:
                    CFRelease(v4);
                    goto LABEL_143;
                  }
                }
                else
                {
                  *(double *)(v129 + 24) = v120;
                  v126 = 1;
                  if (!v122)
                    goto LABEL_141;
                }
              }
              else
              {
                v126 = 0;
                v127 = v350;
                if (!v122)
                  goto LABEL_141;
              }
            }
            if ((v127 & 0x10) == 0
              && (unint64_t)objc_msgSend_length(v122, v113, v114, v115, v116, v117) <= *(_QWORD *)(a1 + 192))
            {
              if (qword_1EF568E88 != -1)
                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v159 = (id)qword_1EF568E18[0];
              if (os_log_type_enabled(v159, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1BE607000, v159, OS_LOG_TYPE_FAULT, "The corrected entry string length must be greater than the length of the active prefix", buf, 2u);
              }

            }
            v341 = v126;
            v160 = v122;
            v164 = v160;
            v165 = *(_QWORD *)(a1 + 192);
            v166 = v160;
            if (!v165)
            {
LABEL_117:
              v180 = v345 | v343;
              if ((v127 & 0x10) != 0)
              {
LABEL_132:
                v185 = [CHTokenizedTextResultToken alloc];
                objc_msgSend_strokeIndexes(*(void **)(a1 + 64), v186, v187, v188, v189, v190);
                v191 = (void *)objc_claimAutoreleasedReturnValue();
                v349 = v98;
                objc_msgSend_modelScore(*(void **)(a1 + 64), v192, v193, v194, v195, v196);
                v346 = v197;
                objc_msgSend_recognitionScore(*(void **)(a1 + 64), v198, v199, v200, v201, v202);
                v344 = v203;
                objc_msgSend_alignmentScore(*(void **)(a1 + 64), v204, v205, v206, v207, v208);
                v340 = v209;
                objc_msgSend_recognizerSourceLocale(*(void **)(a1 + 64), v210, v211, v212, v213, v214);
                v215 = (void *)objc_claimAutoreleasedReturnValue();
                v221 = objc_msgSend_substrokeCount(*(void **)(a1 + 64), v216, v217, v218, v219, v220);
                objc_msgSend_bounds(*(void **)(a1 + 64), v222, v223, v224, v225, v226);
                v228 = v227;
                v230 = v229;
                v232 = v231;
                v234 = v233;
                objc_msgSend_originalBounds(*(void **)(a1 + 64), v235, v236, v237, v238, v239);
                v246 = v245;
                v248 = v247;
                v250 = v249;
                v252 = v251;
                v253 = *(void **)(a1 + 64);
                if (v253)
                  objc_msgSend_principalLines(v253, v240, v241, v242, v243, v244);
                else
                  memset(v351, 0, sizeof(v351));
                v254 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v185, v240, (uint64_t)v166, (uint64_t)v191, v347, v180, v215, v350, v346, v344, v349, v340, v228, v230, v232, v234, v221, v246, v248,
                                 v250,
                                 v252,
                                 v351);

                objc_msgSend_addObject_(*(void **)(a1 + 104), v255, (uint64_t)v254, v256, v257, v258);
                if (((objc_msgSend_count(*(void **)(a1 + 104), v259, v260, v261, v262, v263) != 1) & ~v341) == 0)
                {
                  if (*(_QWORD *)(a1 + 256))
                    **(_QWORD **)(a1 + 256) = objc_msgSend_count(*(void **)(a1 + 104), v264, v265, v266, v267, v268) - 1;
                  v269 = *(_BYTE **)(a1 + 264);
                  if (v269)
                    *v269 = v339 & 1;
                }

                goto LABEL_141;
              }
              if ((MetaFlags & 0x200000) != 0)
              {
                v127 |= 0x40uLL;
              }
              else
              {
                if (objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 32), v161, (uint64_t)v166, v165, v162, v163))
                  v127 |= 0x40uLL;
                if (*(_BYTE *)(a1 + 272))
                  v181 = 0;
                else
                  v181 = isEqualToString;
                if ((v181 & 1) != 0)
                  goto LABEL_128;
              }
              v180 |= 0x200uLL;
LABEL_128:
              objc_msgSend_uppercaseStringWithLocale_(v166, v161, *(_QWORD *)(a1 + 88), v165, v162, v163);
              v182 = (void *)objc_claimAutoreleasedReturnValue();
              buf[0] = 0;
              objc_msgSend_computeEditPenalizationFromString_toReferenceString_withSuffix_withCaseSensitivity_withFirstLetterCaseSensitivity_withDiacriticSensitivity_withDiacriticsCharSet_withConsumableStrokesCharSet_outputSuffix_lexiconExtraCharacters_firstLetterCaseFlipped_(CHLanguageUtilities, v183, (uint64_t)v166, (uint64_t)v182, (uint64_t)&stru_1E77F6F28, 1, 1, 0, 0, *(_QWORD *)(a1 + 96), 0, 0, buf);
              if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 24) != buf[0]
                || *(double *)(a1 + 232) != v184)
              {
                v127 |= 0x100uLL;
              }
              v350 = v127;

              goto LABEL_132;
            }
            if ((MetaFlags & 0x200000) != 0)
            {
              if ((objc_msgSend_hasPrefix_(v160, v161, *(_QWORD *)(a1 + 48), v165, v162, v163) & 1) == 0)
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v177 = (id)qword_1EF568E18[0];
                if (!os_log_type_enabled(v177, OS_LOG_TYPE_FAULT))
                  goto LABEL_115;
                *(_WORD *)buf = 0;
                v178 = "The token prefix should be case-sensitive equal after lexicon correction";
                goto LABEL_114;
              }
            }
            else
            {
              objc_msgSend_substringWithRange_(v160, v161, *(_QWORD *)(a1 + 184), v165, v162, v163);
              v167 = (void *)objc_claimAutoreleasedReturnValue();
              v172 = objc_msgSend_caseInsensitiveCompare_(v167, v168, *(_QWORD *)(a1 + 48), v169, v170, v171);

              if (v172)
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v177 = (id)qword_1EF568E18[0];
                if (!os_log_type_enabled(v177, OS_LOG_TYPE_FAULT))
                  goto LABEL_115;
                *(_WORD *)buf = 0;
                v178 = "The token prefix should be case-insensitive equal after lexicon correction";
LABEL_114:
                _os_log_impl(&dword_1BE607000, v177, OS_LOG_TYPE_FAULT, v178, buf, 2u);
LABEL_115:

              }
            }
            objc_msgSend_substringFromIndex_(v164, v173, *(_QWORD *)(a1 + 192), v174, v175, v176);
            v179 = objc_claimAutoreleasedReturnValue();

            v166 = (void *)v179;
            goto LABEL_117;
          }
        }
        else
        {
          v140 = 0;
        }
        v147 = objc_msgSend_length(v133, v134, v135, v136, v137, v138);
        goto LABEL_156;
      }
      if (v118 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v93)
          goto LABEL_56;
        v154 = objc_msgSend_rangeOfCharacterFromSet_(*(void **)(a1 + 72), v113, qword_1EF567F10, v115, v116, v117);
        if ((v154 != 0x7FFFFFFFFFFFFFFFLL) != (objc_msgSend_rangeOfCharacterFromSet_(v4, v155, qword_1EF567F10, v156, v157, v158) != 0x7FFFFFFFFFFFFFFFLL))goto LABEL_56;
      }
      else
      {
        v270 = (double)(unint64_t)v119;
        if (*(double *)(a1 + 240) <= (double)(unint64_t)v119)
          v270 = *(double *)(a1 + 240);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = *(double *)(a1 + 232) / v270 < 0.5;
        v271 = *(_BYTE *)(a1 + 274);
        v272 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
        if (v271)
          v271 = *(_BYTE *)(v272 + 24) != 0;
        *(_BYTE *)(v272 + 24) = v271;
        if (v93)
          goto LABEL_56;
      }
      v273 = (void *)objc_opt_class();
      v278 = objc_msgSend_singleScriptCodeForString_(v273, v274, *(_QWORD *)(a1 + 32), v275, v276, v277);
      v279 = (void *)objc_opt_class();
      v284 = objc_msgSend_singleScriptCodeForString_(v279, v280, (uint64_t)v4, v281, v282, v283);
      if ((v278 & 0xFFFFFFFD) == 0x14 && v278 != v284 && (v284 & 0xFFFFFFFD) == 0x14)
      {
LABEL_56:
        v122 = 0;
        goto LABEL_57;
      }
      v285 = *(void **)(a1 + 72);
      if (v118 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v286 = v285;
      }
      else
      {
        objc_msgSend_substringWithRange_(v285, v113, v118, v119, v116, v117);
        v286 = (id)objc_claimAutoreleasedReturnValue();
      }
      v342 = v286;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24))
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
        {
          v122 = v4;
          v294 = 0;
          v295 = 1;
          goto LABEL_179;
        }
        objc_msgSend_uppercaseStringWithLocale_(v4, v287, *(_QWORD *)(a1 + 88), v288, v289, v290);
        v296 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (!*(_BYTE *)(a1 + 272) || (MetaFlags & 0x200000) != 0 || (MetaFlags & 0x20) != 0 || (MetaFlags & 1) != 0)
        {
          v122 = v4;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
          {
            v295 = 0;
            v294 = *(_BYTE *)(a1 + 272) != 0;
            goto LABEL_179;
          }
LABEL_178:
          v295 = 0;
          v294 = 0;
LABEL_179:
          buf[0] = 0;
          objc_msgSend_computeEditPenalizationFromString_toReferenceString_withSuffix_withCaseSensitivity_withFirstLetterCaseSensitivity_withDiacriticSensitivity_withDiacriticsCharSet_withConsumableStrokesCharSet_outputSuffix_lexiconExtraCharacters_firstLetterCaseFlipped_(CHLanguageUtilities, v293, (uint64_t)v342, (uint64_t)v122, (uint64_t)&stru_1E77F6F28, 1, 1, 1, qword_1EF567F20, *(_QWORD *)(a1 + 96), 0, 0, buf);
          v298 = v297;
          v98 = v98 + v297 / (double)(unint64_t)objc_msgSend_length(v342, v299, v300, v301, v302, v303);
          if (v118 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v309 = objc_msgSend_length(v342, v304, v305, v306, v307, v308);
            v315 = objc_msgSend_length(v4, v310, v311, v312, v313, v314);
            v320 = objc_msgSend_rangeOfCharacterFromSet_(*(void **)(a1 + 72), v316, qword_1EF567F18, v317, v318, v319);
            v321 = v309 - v315;
            if (v309 - v315 < 0)
              v321 = v315 - v309;
            if (v320 == 0x7FFFFFFFFFFFFFFFLL)
              v98 = v98 + (double)v321 * 0.2;
            else
              v98 = v98 + (double)v321 * 0.2 + 0.6;
            goto LABEL_197;
          }
          v326 = v295;
          if (v119 == objc_msgSend_length(*(void **)(a1 + 72), v304, v305, v306, v307, v308) && v118 == 0)
            v328 = v347;
          else
            v328 = 0;
          v347 = v328;
          objc_msgSend_lowercaseStringWithLocale_(*(void **)(a1 + 72), v322, *(_QWORD *)(a1 + 88), v323, v324, v325);
          v329 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringByReplacingCharactersInRange_withString_(v329, v330, v118, v119, (uint64_t)v122, v331);
          v332 = (NSString *)objc_claimAutoreleasedReturnValue();

          if (v294)
          {
            uppercaseFirstLetter(v332);
            v337 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            if (!v326)
            {
LABEL_196:

              v122 = v332;
LABEL_197:
              v120 = v120 * v298;

              goto LABEL_57;
            }
            objc_msgSend_uppercaseStringWithLocale_(v332, v333, *(_QWORD *)(a1 + 88), v334, v335, v336);
            v337 = objc_claimAutoreleasedReturnValue();
          }
          v338 = (NSString *)v337;

          v332 = v338;
          goto LABEL_196;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
        {
          v122 = v4;
          v295 = 0;
          v294 = 1;
          goto LABEL_179;
        }
        uppercaseFirstLetter((NSString *)v4);
        v296 = objc_claimAutoreleasedReturnValue();
      }
      v122 = (id)v296;
      goto LABEL_178;
    }
LABEL_52:
    v112 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 32), v94, (uint64_t)v4, 1, v95, v96) != 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_53;
  }
  CFRelease(v4);
LABEL_143:

}

void sub_1BE627D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE627D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE627D78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE627DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE627DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE627E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE627E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE627E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE627F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE627F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627FC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE627FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE62800C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE62801C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE62803C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE62804C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TriangleRegressor::TriangleRegressor(TriangleRegressor *this, CHDrawing *a2, HTMLog *a3, float a4, float a5, float a6, float a7)
{
  CHDrawing *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double *v18;
  double *v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  double *v38;
  unsigned int v39;
  double *v40;
  double v41;
  double v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v48;
  double v49;
  double v50;
  double *v51;
  unint64_t v52;
  float v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  double *v62;
  float v63;
  float v64;
  float v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  int v70;
  float v71;
  BOOL v73;
  int64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double *v81;
  int64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float v100;
  float v101;
  float v102;
  double v103;
  double v104;
  float v105;
  float v106;
  float v107;
  double v108;
  double v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  double *v121;
  uint64_t v122;
  double v123;
  double v124;
  double v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float *v133;
  unint64_t v134;
  float v135;
  float v136;
  float *v137;
  unint64_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  uint64_t v145;
  double *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  double v153;
  double v154;
  float v155;
  float v156;
  float v157;
  float *v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  int v166;
  float v167;
  double v168;
  double v169;
  double v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  int v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  float v183;
  float v184;
  _BOOL4 v185;
  float v186;
  uint64_t v187;
  char **v188;
  _OWORD *v189;
  _QWORD *v190;
  char *v191;
  unint64_t v192;
  char **v193;
  _OWORD *v194;
  double v195;
  double v196;
  float v197;
  float v198;
  float v199;
  uint64_t v200;
  float v201;
  double v202;
  float v203;
  float v204;
  int v205;
  double *v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  double *v217;
  double v218;
  double v219;
  float v220;
  float v221;
  float v222;
  float v223;
  int v224;
  double *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  double *v234;
  double *v235;
  int64_t v236;
  double *v237;
  char *v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  _OWORD *v242;
  uint64_t *v243;
  double *v244;
  _OWORD *v245;
  _QWORD *v246;
  unint64_t v247;
  _QWORD *v248;
  _OWORD *v249;
  _OWORD *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  double *v260;
  _QWORD *v261;
  _OWORD *v262;
  unint64_t v263;
  _QWORD *v264;
  _OWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  const void *v274;
  int64_t v275;
  TriangleRegressor *v276;
  double *v277;
  const void *v278;
  int64_t v279;
  double *v280;
  const void *v281;
  int64_t v282;
  double *v283;
  double v284;
  double v285;
  double v286;
  double v287;
  float v288;
  double v289;
  double v290;
  float v291;
  float v292;
  double v293;
  double v294;
  double v295;
  uint64_t v296;
  float v297;
  double v298;
  float v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double *v316;
  TriangleRegressor *i;
  CHDrawing *v318;
  double *v319;
  double v320;
  double v321;
  double v322;
  double v323;
  uint64_t v324;
  double v325;
  double v326;
  double v327;
  double *v328;
  double *v329;
  double *v330;
  double *v331;
  char *v332;
  char *v333;
  char *v334;
  double *v335;
  double *v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  double v343;
  double v344;
  _BYTE v345[12];
  uint64_t v346;
  double v347;
  double v348;
  char v349;
  unint64_t v350;
  uint64_t v351;
  double v352;
  double v353;
  char v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;

  v357 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  *(_QWORD *)this = off_1E77F0758;
  *((float *)this + 8) = a4;
  *((float *)this + 9) = a5;
  *((float *)this + 10) = a6;
  *((float *)this + 11) = a7;
  v335 = 0;
  v336 = 0;
  v337 = 0;
  *(float *)&v17 = sub_1BE6294F4(v12, &v335, 20.0);
  v19 = v335;
  v18 = v336;
  v20 = 0xCCCCCCCCCCCCCCCDLL * (v336 - v335);
  if (v20 < 7)
  {
    objc_msgSend_bounds(v12, (const char *)v336, v13, v14, v15, v16, v17);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v29 = operator new();
    v30 = v24 + v28;
    v31 = v22 + v26;
    v32 = v24;
    v33 = v22;
    v34 = v33;
    *(_OWORD *)(v29 + 64) = xmmword_1BE8D50E0;
    *(_QWORD *)v29 = &off_1E77F0698;
    *(double *)(v29 + 80) = v34;
    *(double *)(v29 + 88) = v32;
    *(double *)(v29 + 96) = v31;
    *(double *)(v29 + 104) = (float)((float)(v32 + v30) * 0.5);
    *(double *)(v29 + 112) = v34;
    *(double *)(v29 + 120) = v30;
    *((_QWORD *)this + 3) = v29;
    goto LABEL_209;
  }
  v35 = 0;
  v36 = *(float *)&v17 * 1.5;
  v37 = v20 - 4;
  v38 = v335 + 16;
  v39 = -1;
  do
  {
    if (v35 == v20 - 3)
      break;
    v40 = &v335[5 * v35];
    v41 = *v40;
    v42 = v40[1];
    v43 = v40[5] - *v40;
    v44 = v40[6] - v42;
    v45 = (float)(v44 * v44) + (float)(v43 * v43);
    v46 = v44 / v45;
    if (v45 > 0.0)
    {
      v47 = v43 / v45;
    }
    else
    {
      v46 = v40[6] - v42;
      v47 = v40[5] - *v40;
    }
    if (v20 - 1 > v35 + 3)
    {
      v48 = sqrtf(v45);
      v49 = v47;
      v50 = v46;
      v51 = v38;
      v52 = v37;
      while (1)
      {
        v53 = ((*v51 - v42) * v50 + (*(v51 - 1) - v41) * v49) * v48;
        v54 = v53 <= 0.0 || v36 <= v53;
        if (!v54)
          break;
        v51 += 5;
        if (!--v52)
          goto LABEL_4;
      }
      v39 = v35;
    }
LABEL_4:
    ++v35;
    --v37;
    v38 += 5;
  }
  while ((v39 & 0x80000000) != 0);
  v55 = v20 - 4;
  v56 = -858993459 * (v336 - v335);
  v57 = v20 - 3;
  while ((int)v56 >= 4)
  {
    v58 = v56 - 1;
    v59 = &v335[5 * (v56 - 1)];
    v60 = *v59;
    v61 = v59[1];
    v62 = &v335[5 * (v56 - 2)];
    v63 = *v62 - *v59;
    v64 = v62[1] - v61;
    v65 = (float)(v64 * v64) + (float)(v63 * v63);
    if (v65 > 0.0)
    {
      v63 = v63 / v65;
      v64 = v64 / v65;
    }
    v66 = &v335[5 * v55 + 1];
    v56 = v58;
    v67 = sqrtf(v65);
    v68 = v63;
    v69 = v64;
    v70 = v57;
    while (1)
    {
      v71 = ((*v66 - v61) * v69 + (*(v66 - 1) - v60) * v68) * v67;
      if (v71 > 0.0 && v36 > v71)
        break;
      --v70;
      v66 -= 5;
      if (v70 <= 0)
      {
        LODWORD(v58) = -1;
        break;
      }
    }
    --v55;
    --v57;
    if ((v58 & 0x80000000) == 0)
    {
      if (&v335[5 * v58] != v336)
      {
        v336 = &v335[5 * v58];
        v18 = v336;
      }
      break;
    }
  }
  if ((v39 & 0x80000000) != 0 || (0xCCCCCCCCCCCCCCCDLL * (v18 - v335) > v39 ? (v73 = v39 == 0) : (v73 = 1), v73))
  {
    v333 = 0;
    v334 = 0;
    v332 = 0;
    v74 = (char *)v18 - (char *)v335;
    if (v18 == v335)
      goto LABEL_42;
    goto LABEL_40;
  }
  v234 = &v335[5 * v39];
  v235 = v335;
  v236 = (char *)v18 - (char *)v234;
  if (v18 != v234)
  {
    memmove(v335, v234, v236 - 3);
    v235 = v335;
  }
  v237 = (double *)((char *)v19 + v236);
  v336 = (double *)((char *)v19 + v236);
  v19 = v235;
  v333 = 0;
  v334 = 0;
  v332 = 0;
  v74 = (char *)v237 - (char *)v235;
  if (v237 != v235)
  {
LABEL_40:
    if (0xCCCCCCCCCCCCCCCDLL * (v74 >> 3) >= 0x666666666666667)
      sub_1BE61F930();
    v332 = (char *)operator new(v74);
    v334 = &v332[8 * (v74 >> 3)];
    memcpy(v332, v19, v74 - 3);
    v333 = v334;
  }
LABEL_42:
  sub_1BE629CD4((uint64_t *)&v332, (uint64_t)&v343);
  v81 = *(double **)&v343;
  v80 = v344;
  v344 = 0.0;
  *(_QWORD *)v345 = 0;
  v343 = 0.0;
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  v82 = *(_QWORD *)&v80 - (_QWORD)v81;
  v319 = v81;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v80 - (_QWORD)v81) >> 3) >= 3)
  {
    for (i = this; v82 != 120; v82 = (char *)v225 + v226 - (char *)v81)
    {
      v196 = *(double *)(*(_QWORD *)&v80 - 40);
      v195 = *(double *)(*(_QWORD *)&v80 - 32);
      v197 = v81[5] - v196;
      v198 = v81[6] - v195;
      v199 = (float)(v198 * v198) + (float)(v197 * v197);
      if (v199 > 0.0)
      {
        v197 = v197 / v199;
        v198 = v198 / v199;
      }
      v200 = v82 / 40;
      v201 = sqrtf(v199);
      v202 = v81[1];
      v203 = ((*v81 - v196) * v198 - (v202 - v195) * v197) * v201;
      v204 = fabsf(v203);
      if ((unint64_t)(v200 - 1) < 2)
      {
        v205 = 0;
      }
      else
      {
        v205 = 0;
        v206 = v81 + 6;
        v207 = 2;
        v208 = v81[1];
        v209 = *v81;
        do
        {
          v214 = v206[4] - v209;
          v215 = v206[5] - v208;
          v216 = (float)(v215 * v215) + (float)(v214 * v214);
          if (v216 > 0.0)
          {
            v214 = v214 / v216;
            v215 = v215 / v216;
          }
          v210 = *(v206 - 1);
          v211 = *v206;
          v212 = ((v210 - v209) * v215 - (*v206 - v208) * v214) * sqrtf(v216);
          v213 = fabsf(v212);
          if (v213 < v204)
            v205 = v207 - 1;
          ++v207;
          if (v213 < v204)
            v204 = v213;
          v206 += 5;
          v208 = v211;
          v209 = v210;
        }
        while (v200 != v207);
      }
      v217 = &v81[5 * v200];
      v219 = *(v217 - 10);
      v218 = *(v217 - 9);
      v220 = *v81 - v219;
      v221 = v202 - v218;
      v222 = (float)(v221 * v221) + (float)(v220 * v220);
      if (v222 > 0.0)
      {
        v220 = v220 / v222;
        v221 = v221 / v222;
      }
      v223 = ((v196 - v219) * v221 - (v195 - v218) * v220) * sqrtf(v222);
      v224 = v200 - 1;
      if (fabsf(v223) >= v204)
        v224 = v205;
      v225 = &v81[5 * v224];
      v226 = *(_QWORD *)&v80 - (_QWORD)(v225 + 5);
      if (*(double **)&v80 != v225 + 5)
        memmove(&v81[5 * v224], v225 + 5, v226 - 3);
      *(_QWORD *)&v80 -= 40;
    }
    v343 = 0.0;
    v344 = 0.0;
    v346 = 0;
    *(_QWORD *)&v345[4] = 0;
    v347 = 0.0;
    v348 = 0.0;
    v351 = 0;
    v350 = 0;
    v352 = 0.0;
    v353 = 0.0;
    v356 = 0;
    v355 = 0;
    v97 = v81[1];
    v99 = v81[5];
    v98 = v81[6];
    v343 = *v81;
    v344 = v97;
    v100 = v99 - v343;
    v101 = v98 - v97;
    *(float *)&v345[4] = v100;
    *(float *)&v345[8] = v101;
    v102 = (float)(v101 * v101) + (float)(v100 * v100);
    *(float *)&v346 = v102;
    HIDWORD(v346) = sqrtf(v102);
    if (v102 > 0.0)
    {
      *(float *)&v345[4] = v100 / v102;
      *(float *)&v345[8] = v101 / v102;
    }
    v345[0] = 1;
    v104 = v81[10];
    v103 = v81[11];
    v347 = v99;
    v348 = v98;
    v105 = v104 - v99;
    v106 = v103 - v98;
    v350 = __PAIR64__(LODWORD(v106), LODWORD(v105));
    v107 = (float)(v106 * v106) + (float)(v105 * v105);
    *(float *)&v351 = v107;
    HIDWORD(v351) = sqrtf(v107);
    if (v107 > 0.0)
    {
      *(float *)&v350 = v105 / v107;
      *((float *)&v350 + 1) = v106 / v107;
    }
    v349 = 1;
    v108 = *v81;
    v109 = v81[1];
    v352 = v104;
    v353 = v103;
    v110 = v108 - v104;
    v111 = v109 - v103;
    v355 = __PAIR64__(LODWORD(v111), LODWORD(v110));
    v112 = (float)(v111 * v111) + (float)(v110 * v110);
    *(float *)&v356 = v112;
    HIDWORD(v356) = sqrtf(v112);
    if (v112 > 0.0)
    {
      *(float *)&v355 = v110 / v112;
      *((float *)&v355 + 1) = v111 / v112;
    }
    v316 = &v312;
    v354 = 1;
    v113 = MEMORY[0x1E0C80A78](((char *)v336 - (char *)v335) / 40);
    v115 = (unsigned __int128)(((char *)v336 - (char *)v335) * (__int128)v114) >> 64;
    v324 = (v115 >> 4) + ((unint64_t)v115 >> 63) - 1;
    v116 = MEMORY[0x1E0C80A78](v113);
    *(_QWORD *)&v123 = (char *)&v312 - v122;
    v124 = v121[5];
    v125 = v121[6];
    v126 = v124 - *v121;
    v127 = v125 - v121[1];
    v128 = (float)(v127 * v127) + (float)(v126 * v126);
    v129 = sqrtf(v128);
    if (v128 > 0.0)
    {
      v126 = v126 / v128;
      v127 = v127 / v128;
    }
    LODWORD(v327) = *(_DWORD *)&v345[8];
    LODWORD(v328) = *(_DWORD *)&v345[4];
    v130 = *(float *)&v350;
    LODWORD(v326) = HIDWORD(v346);
    *v118 = fabsf(v129* (float)(*((float *)&v346 + 1)* (float)((float)(v127 * *(float *)&v345[8]) + (float)(*(float *)&v345[4] * v126))));
    v131 = *((float *)&v350 + 1);
    v132 = *((float *)&v351 + 1);
    *(float *)&v325 = v130;
    v133 = &v118[v120];
    *v133 = fabsf(v129* (float)(*((float *)&v351 + 1) * (float)((float)(v127 * *((float *)&v350 + 1)) + (float)(v130 * v126))));
    v134 = v355;
    v135 = *((float *)&v356 + 1);
    v136 = fabsf(v129* (float)(*((float *)&v356 + 1)* (float)((float)(v127 * *((float *)&v355 + 1)) + (float)(*(float *)&v355 * v126))));
    v137 = &v118[2 * v120];
    *v137 = v136;
    if ((unint64_t)(v119 - 3) < 0xFFFFFFFFFFFFFFFELL)
    {
      v138 = 0;
      v322 = v343;
      v323 = *(float *)&v327;
      v320 = *(float *)&v328;
      v321 = v344;
      v139 = *(float *)&v326;
      v140 = v347;
      v141 = v348;
      v142 = *(float *)&v325;
      v144 = v352;
      v143 = v353;
      v145 = v324;
      if ((unint64_t)v324 <= 2)
        v145 = 2;
      v146 = v121 + 11;
      v147 = v145 - 1;
      v148 = (uint64_t)&v118[2 * v116 - 2];
      v149 = (uint64_t)&v118[v116 - 1];
      v150 = *(_QWORD *)&v123 + 8 * v119 - 4;
      v151 = *(_QWORD *)&v123 + 4 * v119;
      do
      {
        v153 = v124;
        v154 = v125;
        v124 = *(v146 - 1);
        v125 = *v146;
        v155 = v124 - v153;
        v156 = *v146 - v154;
        v157 = (float)(v156 * v156) + (float)(v155 * v155);
        if (v157 > 0.0)
        {
          v155 = v155 / v157;
          v156 = v156 / v157;
        }
        v158 = &v118[v138 / 4];
        v159 = v118[v138 / 4];
        v160 = *(float *)(v149 + v138);
        v161 = v160 + 0.0;
        if ((float)(v160 + 0.0) <= (float)(v159 + 0.5))
          v162 = v159 + 0.5;
        else
          v162 = v160 + 0.0;
        v163 = v136 + 0.0;
        if ((float)(v136 + 0.0) <= v162)
          v164 = v162;
        else
          v164 = v136 + 0.0;
        *(_DWORD *)(*(_QWORD *)&v123 + v138 + 4) = 0;
        if (v161 > (float)(v159 + 0.5) || v163 > v162)
        {
          if (v163 <= v162)
            v166 = 1;
          else
            v166 = 2;
          *(_DWORD *)(*(_QWORD *)&v123 + v138 + 4) = v166;
        }
        v167 = sqrtf(v157);
        v168 = (float)(fabsf(v167* (float)(*(float *)&v326* (float)((float)(*(float *)&v327 * v156) + (float)(*(float *)&v328 * v155))))+ v164);
        v169 = *(v146 - 6);
        v170 = *(v146 - 5);
        v171 = ((v169 - v322) * v323 - (v170 - v321) * v320) * v139;
        *(float *)&v168 = v168 + fabsf(v171) * -0.005;
        v158[1] = *(float *)&v168;
        v172 = v159 + 0.0;
        v173 = *(float *)(v149 + v138);
        if ((float)(v173 + 0.5) <= v172)
          v174 = v172;
        else
          v174 = v173 + 0.5;
        if (v163 <= v174)
          v175 = v174;
        else
          v175 = v163;
        *(_DWORD *)(v151 + v138) = 0;
        if ((float)(v173 + 0.5) > v172 || v163 > v174)
        {
          if (v163 <= v174)
            v176 = 1;
          else
            v176 = 2;
          *(_DWORD *)(v151 + v138) = v176;
        }
        v177 = ((v169 - v140) * v131 - (v170 - v141) * v142) * v132;
        v178 = (float)(fabsf(v167 * (float)(v132 * (float)((float)(v131 * v156) + (float)(*(float *)&v325 * v155))))
                     + v175)
             + fabsf(v177) * -0.005;
        *(float *)(v149 + v138 + 4) = v178;
        *(_DWORD *)(v150 + v138) = 0;
        v179 = *v158 + 0.0;
        v180 = v173 + 0.0;
        if (v180 > v179)
        {
          *(_DWORD *)(v150 + v138) = 1;
          v179 = v180;
        }
        v181 = *(float *)(v148 + v138) + 0.5;
        if (v181 > v179)
        {
          *(_DWORD *)(v150 + v138) = 2;
          v179 = v181;
        }
        v152 = ((v169 - v144) * *((float *)&v134 + 1) - (v170 - v143) * *(float *)&v134) * v135;
        v136 = (float)(fabsf(v167* (float)(v135 * (float)((float)(*((float *)&v134 + 1) * v156) + (float)(*(float *)&v134 * v155))))+ v179)+ fabsf(v152) * -0.005;
        *(float *)(v148 + v138 + 4) = v136;
        v146 += 5;
        v138 += 4;
        --v147;
      }
      while (v147);
    }
    v182 = 4 * v119 - 8;
    v183 = *(float *)((char *)v118 + v182);
    v184 = *(float *)((char *)v133 + v182);
    v185 = v184 > v183;
    if (v184 > v183)
      v183 = v184;
    v186 = *(float *)((char *)v137 + v182);
    v342 = 0;
    v340 = 0u;
    v341 = 0u;
    v338 = 0u;
    v339 = 0u;
    if (v186 <= v183)
      v187 = v185;
    else
      v187 = 2;
    v188 = (char **)&v338 + 3 * v187;
    v189 = (_OWORD *)(v117 - 40);
    v190 = v188 + 1;
    v191 = v188[1];
    v193 = v188 + 2;
    v192 = (unint64_t)v188[2];
    v327 = v123;
    v318 = v12;
    if ((unint64_t)v191 < v192)
    {
      *(_OWORD *)v191 = *v189;
      v194 = v191 + 16;
      v81 = v319;
      goto LABEL_140;
    }
    v227 = *v188;
    v228 = (v191 - *v188) >> 4;
    v229 = v228 + 1;
    if ((unint64_t)(v228 + 1) >> 60)
      sub_1BE61F930();
    v230 = v192 - (_QWORD)v227;
    if (v230 >> 3 > v229)
      v229 = v230 >> 3;
    if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF0)
      v231 = 0xFFFFFFFFFFFFFFFLL;
    else
      v231 = v229;
    if (v231)
    {
      if (v231 >> 60)
        sub_1BE61F100();
      v232 = v187;
      v233 = (char *)operator new(16 * v231);
    }
    else
    {
      v232 = v187;
      v233 = 0;
    }
    v238 = &v233[16 * v228];
    v239 = &v233[16 * v231];
    *(_OWORD *)v238 = *v189;
    v194 = v238 + 16;
    if (v191 == v227)
    {
      v81 = v319;
      *v188 = v238;
      *v190 = v194;
      *v193 = v239;
      v123 = v327;
      if (!v191)
        goto LABEL_139;
    }
    else
    {
      v81 = v319;
      do
      {
        *((_OWORD *)v238 - 1) = *((_OWORD *)v191 - 1);
        v238 -= 16;
        v191 -= 16;
      }
      while (v191 != v227);
      v191 = *v188;
      *v188 = v238;
      *v190 = v194;
      *v193 = v239;
      v123 = v327;
      if (!v191)
        goto LABEL_139;
    }
    operator delete(v191);
LABEL_139:
    v187 = v232;
LABEL_140:
    *v190 = v194;
    v240 = 0xCCCCCCCCCCCCCCCDLL * (v336 - v335);
    if ((int)v240 >= 3)
    {
      v241 = (v240 - 2);
      while (1)
      {
        v243 = (uint64_t *)&v338 + 3 * (int)v187;
        v244 = &v335[5 * v241];
        v246 = v243 + 1;
        v245 = (_OWORD *)v243[1];
        v248 = v243 + 2;
        v247 = v243[2];
        if ((unint64_t)v245 < v247)
        {
          *v245 = *(_OWORD *)v244;
          v249 = v245 + 1;
          goto LABEL_163;
        }
        v250 = (_OWORD *)*v243;
        v251 = ((uint64_t)v245 - *v243) >> 4;
        v252 = v251 + 1;
        if ((unint64_t)(v251 + 1) >> 60)
          goto LABEL_214;
        v253 = v247 - (_QWORD)v250;
        if (v253 >> 3 > v252)
          v252 = v253 >> 3;
        v254 = (unint64_t)v253 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v252;
        v328 = (double *)v187;
        if (v254)
          break;
        v255 = 0;
        v256 = (char *)(16 * v251);
        *(_OWORD *)(16 * v251) = *(_OWORD *)v244;
        v257 = 16 * v251;
        if (v245 != v250)
          goto LABEL_158;
LABEL_160:
        *v243 = v257;
        v249 = v256 + 16;
        *v246 = v256 + 16;
        *v248 = &v255[16 * v254];
        v81 = v319;
        if (v245)
          operator delete(v245);
        v123 = v327;
        v187 = (uint64_t)v328;
LABEL_163:
        *v246 = v249;
        v258 = *(unsigned int *)(*(_QWORD *)&v123 + 4 * v324 * (int)v187 + 4 * v241);
        if ((_DWORD)v187 == (_DWORD)v258)
          goto LABEL_144;
        v259 = (uint64_t *)&v338 + 3 * (int)v258;
        v260 = &v335[5 * v241];
        v261 = v259 + 1;
        v262 = (_OWORD *)v259[1];
        v264 = v259 + 2;
        v263 = v259[2];
        if ((unint64_t)v262 >= v263)
        {
          v265 = (_OWORD *)*v259;
          v266 = ((uint64_t)v262 - *v259) >> 4;
          v267 = v266 + 1;
          if ((unint64_t)(v266 + 1) >> 60)
LABEL_214:
            sub_1BE61F930();
          v268 = v263 - (_QWORD)v265;
          if (v268 >> 3 > v267)
            v267 = v268 >> 3;
          if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF0)
            v269 = 0xFFFFFFFFFFFFFFFLL;
          else
            v269 = v267;
          if (v269)
          {
            v328 = &v335[5 * v241];
            if (v269 >> 60)
LABEL_215:
              sub_1BE61F100();
            v270 = v269;
            v271 = (char *)operator new(16 * v269);
            v269 = v270;
            v272 = &v271[16 * v266];
            *(_OWORD *)v272 = *(_OWORD *)v328;
            v273 = (uint64_t)v272;
            if (v262 != v265)
            {
LABEL_174:
              v123 = v327;
              do
              {
                *(_OWORD *)(v273 - 16) = *(v262 - 1);
                v273 -= 16;
                --v262;
              }
              while (v262 != v265);
              v262 = (_OWORD *)*v259;
LABEL_179:
              *v259 = v273;
              v242 = v272 + 16;
              *v261 = v272 + 16;
              *v264 = &v271[16 * v269];
              v81 = v319;
              if (v262)
                operator delete(v262);
              goto LABEL_143;
            }
          }
          else
          {
            v271 = 0;
            v272 = (char *)(16 * v266);
            *(_OWORD *)(16 * v266) = *(_OWORD *)v260;
            v273 = 16 * v266;
            if (v262 != v265)
              goto LABEL_174;
          }
          v123 = v327;
          goto LABEL_179;
        }
        *v262 = *(_OWORD *)v260;
        v242 = v262 + 1;
LABEL_143:
        *v261 = v242;
        v187 = v258;
LABEL_144:
        v54 = v241-- <= 1;
        if (v54)
          goto LABEL_182;
      }
      if (v254 >> 60)
        goto LABEL_215;
      v255 = (char *)operator new(16 * v254);
      v256 = &v255[16 * v251];
      *(_OWORD *)v256 = *(_OWORD *)v244;
      v257 = (uint64_t)v256;
      if (v245 == v250)
        goto LABEL_160;
      do
      {
LABEL_158:
        *(_OWORD *)(v257 - 16) = *(v245 - 1);
        v257 -= 16;
        --v245;
      }
      while (v245 != v250);
      v245 = (_OWORD *)*v243;
      goto LABEL_160;
    }
LABEL_182:
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v274 = (const void *)v338;
    v275 = *((_QWORD *)&v338 + 1) - v338;
    v276 = i;
    v12 = v318;
    if (*((_QWORD *)&v338 + 1) != (_QWORD)v338)
    {
      if (v275 < 0)
        goto LABEL_216;
      v329 = (double *)operator new(*((_QWORD *)&v338 + 1) - v338);
      v330 = v329;
      v277 = &v329[2 * (v275 >> 4)];
      v331 = v277;
      memcpy(v329, v274, v275);
      v330 = v277;
    }
    sub_1BE8C4644((uint64_t)&v343, &v329, 0);
    if (v329)
    {
      v330 = v329;
      operator delete(v329);
    }
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v278 = (const void *)*((_QWORD *)&v339 + 1);
    v279 = v340 - *((_QWORD *)&v339 + 1);
    if ((_QWORD)v340 != *((_QWORD *)&v339 + 1))
    {
      if (v279 < 0)
        goto LABEL_216;
      v329 = (double *)operator new(v340 - *((_QWORD *)&v339 + 1));
      v330 = v329;
      v280 = &v329[2 * (v279 >> 4)];
      v331 = v280;
      memcpy(v329, v278, v279);
      v330 = v280;
    }
    sub_1BE8C4644((uint64_t)&v347, &v329, 0);
    if (v329)
    {
      v330 = v329;
      operator delete(v329);
    }
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v281 = (const void *)v341;
    v282 = *((_QWORD *)&v341 + 1) - v341;
    if (*((_QWORD *)&v341 + 1) == (_QWORD)v341)
      goto LABEL_195;
    if ((v282 & 0x8000000000000000) == 0)
    {
      v329 = (double *)operator new(*((_QWORD *)&v341 + 1) - v341);
      v330 = v329;
      v283 = &v329[2 * (v282 >> 4)];
      v331 = v283;
      memcpy(v329, v281, v282);
      v330 = v283;
LABEL_195:
      sub_1BE8C4644((uint64_t)&v352, &v329, 0);
      if (v329)
      {
        v330 = v329;
        operator delete(v329);
      }
      v284 = *(float *)&v345[4];
      v285 = *(float *)&v345[8];
      v286 = *(float *)&v350;
      v287 = *((float *)&v350 + 1);
      v288 = *(float *)&v345[4] * *((float *)&v350 + 1) - *(float *)&v350 * *(float *)&v345[8];
      if (v288 == 0.0
        || (v289 = *(float *)&v355,
            v290 = *((float *)&v355 + 1),
            v291 = v286 * *((float *)&v355 + 1) - *(float *)&v355 * v287,
            v291 == 0.0)
        || (v292 = v285 * v289 - v284 * v290, v292 == 0.0))
      {
        v296 = operator new();
        v308 = v81[5];
        v309 = v81[6];
        v310 = v81[10];
        v311 = v81[11];
        v306 = *v81;
        v307 = v81[1];
      }
      else
      {
        *(float *)&v328 = v285 * v289 - v284 * v290;
        v314 = v343;
        v315 = v344;
        v312 = v348;
        v313 = v347;
        v322 = v81[5];
        v323 = v353;
        v293 = v81[6];
        v320 = v352;
        v321 = v293;
        v294 = v81[10];
        v324 = *((uint64_t *)v81 + 11);
        v325 = v294;
        v295 = *v81;
        v326 = v81[1];
        v327 = v295;
        v296 = operator new();
        v297 = (v286 * (v315 - v312) - (v314 - v313) * v287) / v288;
        v298 = v297;
        v299 = (v289 * (v312 - v323) - (v313 - v320) * v290) / v291;
        v300 = v299;
        v301 = v312 + v300 * v287;
        v302 = v313 + v300 * v286;
        *(float *)&v300 = (v284 * (v323 - v315) - (v320 - v314) * v285) / *(float *)&v328;
        v303 = *(float *)&v300;
        v304 = v320 + v303 * v289;
        v305 = v323 + v303 * v290;
        v306 = (v314 + v298 * v284 + v322) * 0.5;
        v307 = (v315 + v298 * v285 + v321) * 0.5;
        v308 = (v325 + v302) * 0.5;
        v309 = (v301 + *(double *)&v324) * 0.5;
        v310 = (v327 + v304) * 0.5;
        v311 = (v326 + v305) * 0.5;
      }
      *(_QWORD *)v296 = &off_1E77F0698;
      *(_OWORD *)(v296 + 64) = *((_OWORD *)v276 + 2);
      *(double *)(v296 + 80) = v306;
      *(double *)(v296 + 88) = v307;
      *(double *)(v296 + 96) = v308;
      *(double *)(v296 + 104) = v309;
      *(double *)(v296 + 112) = v310;
      *(double *)(v296 + 120) = v311;
      *((_QWORD *)v276 + 3) = v296;
      if ((_QWORD)v341)
      {
        *((_QWORD *)&v341 + 1) = v341;
        operator delete((void *)v341);
      }
      if (*((_QWORD *)&v339 + 1))
      {
        *(_QWORD *)&v340 = *((_QWORD *)&v339 + 1);
        operator delete(*((void **)&v339 + 1));
      }
      if ((_QWORD)v338)
      {
        *((_QWORD *)&v338 + 1) = v338;
        operator delete((void *)v338);
      }
      goto LABEL_208;
    }
LABEL_216:
    sub_1BE61F930();
  }
  objc_msgSend_bounds(v12, v75, v76, v77, v78, v79);
  v84 = v83;
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v91 = operator new();
  v92 = v86 + v90;
  v93 = v84 + v88;
  v94 = v86;
  v95 = v84;
  v96 = v95;
  *(_OWORD *)(v91 + 64) = xmmword_1BE8D50E0;
  *(_QWORD *)v91 = &off_1E77F0698;
  *(double *)(v91 + 80) = v96;
  *(double *)(v91 + 88) = v94;
  *(double *)(v91 + 96) = v93;
  *(double *)(v91 + 104) = (float)((float)(v94 + v92) * 0.5);
  *(double *)(v91 + 112) = v96;
  *(double *)(v91 + 120) = v92;
  *((_QWORD *)this + 3) = v91;
  if (v81)
LABEL_208:
    operator delete(v81);
LABEL_209:
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }

}

void sub_1BE6293F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  v5 = *(void **)(v1 + 256);
  if (v5)
  {
    *(_QWORD *)(v1 + 264) = v5;
    operator delete(v5);
    v2 = *(void **)(v1 + 232);
    if (v2)
    {
LABEL_8:
      *(_QWORD *)(v1 + 240) = v2;
      operator delete(v2);
      v3 = *(void **)(v1 + 208);
      if (v3)
      {
LABEL_9:
        *(_QWORD *)(v1 + 216) = v3;
        operator delete(v3);
        if (!*(_QWORD *)(v1 + 56))
          goto LABEL_11;
        goto LABEL_10;
      }
LABEL_4:
      if (!*(_QWORD *)(v1 + 56))
      {
LABEL_11:
        v6 = *(void **)(v1 + 184);
        if (v6)
        {
          *(_QWORD *)(v1 + 192) = v6;
          operator delete(v6);
        }

        _Unwind_Resume(a1);
      }
LABEL_10:
      operator delete(*(void **)(v1 + 56));
      goto LABEL_11;
    }
  }
  else
  {
    v2 = *(void **)(v1 + 232);
    if (v2)
      goto LABEL_8;
  }
  v3 = *(void **)(v1 + 208);
  if (v3)
    goto LABEL_9;
  goto LABEL_4;
}

float sub_1BE6294F4(void *a1, double **a2, float a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  double *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  float v66;
  double v67;
  float v68;
  unint64_t v69;
  float v70;
  int v71;
  int v72;
  double *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  float v79;
  double v80;
  float v81;
  double v82;
  double v83;
  unint64_t v84;
  double *v85;
  double *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v95;
  char *v96;
  int v97;
  int v98;
  double v99;
  double v100;
  double *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  double *v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  char *v127;
  int v128;
  float v130;
  float v131;

  v5 = a1;
  objc_msgSend_bounds(v5, v6, v7, v8, v9, v10);
  v18 = v17;
  v20 = v19;
  v21 = v15;
  v22 = v16;
  if (v15 >= v16)
    v23 = v15;
  else
    v23 = v16;
  v24 = objc_msgSend_pointCountForStrokeIndex_(v5, v11, 0, v12, v13, v14);
  v28 = v24;
  v29 = *a2;
  if (0xCCCCCCCCCCCCCCCDLL * (a2[2] - *a2) < v24)
  {
    if (v24 > 0x666666666666666)
      sub_1BE61F930();
    v30 = (char *)a2[1];
    v31 = (char *)operator new(40 * v24);
    v32 = &v31[v30 - (char *)v29];
    v33 = v32;
    if (v30 != (char *)v29)
    {
      v34 = &v31[v30 - (char *)v29];
      do
      {
        v35 = *(_OWORD *)(v30 - 40);
        v36 = *(_OWORD *)(v30 - 24);
        v33 = v34 - 40;
        *(_QWORD *)(v34 - 11) = *(_QWORD *)(v30 - 11);
        *(_OWORD *)(v34 - 24) = v36;
        *(_OWORD *)(v34 - 40) = v35;
        v30 -= 40;
        v34 -= 40;
      }
      while (v30 != (char *)v29);
    }
    *a2 = (double *)v33;
    a2[1] = (double *)v32;
    a2[2] = (double *)&v31[40 * v28];
    if (v29)
      operator delete(v29);
  }
  objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v25, 0, 0, v26, v27);
  v42 = v40;
  v43 = v41;
  v45 = (char *)a2[1];
  v44 = (unint64_t)a2[2];
  if ((unint64_t)v45 >= v44)
  {
    v47 = *a2;
    v48 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)*a2) >> 3);
    v49 = v48 + 1;
    if (v48 + 1 > 0x666666666666666)
      sub_1BE61F930();
    v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (_QWORD)v47) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x333333333333333)
      v51 = 0x666666666666666;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 > 0x666666666666666)
        sub_1BE61F100();
      v52 = (char *)operator new(40 * v51);
    }
    else
    {
      v52 = 0;
    }
    v53 = &v52[40 * v48];
    *(_QWORD *)v53 = v42;
    *((_QWORD *)v53 + 1) = v43;
    *((_QWORD *)v53 + 2) = 0;
    *((_DWORD *)v53 + 6) = 1;
    v53[28] = 0;
    *((_DWORD *)v53 + 8) = 0;
    v46 = v53 + 40;
    if (v45 != (char *)v47)
    {
      do
      {
        v54 = *(_OWORD *)(v45 - 40);
        v55 = *(_OWORD *)(v45 - 24);
        *(_QWORD *)(v53 - 11) = *(_QWORD *)(v45 - 11);
        *(_OWORD *)(v53 - 24) = v55;
        *(_OWORD *)(v53 - 40) = v54;
        v53 -= 40;
        v45 -= 40;
      }
      while (v45 != (char *)v47);
      v45 = (char *)*a2;
    }
    *a2 = (double *)v53;
    a2[1] = (double *)v46;
    a2[2] = (double *)&v52[40 * v51];
    if (v45)
      operator delete(v45);
  }
  else
  {
    *(_QWORD *)v45 = v40;
    *((_QWORD *)v45 + 1) = v41;
    *((_QWORD *)v45 + 2) = 0;
    *((_DWORD *)v45 + 6) = 1;
    v45[28] = 0;
    v46 = v45 + 40;
    *((_DWORD *)v45 + 8) = 0;
  }
  a2[1] = (double *)v46;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v37, 0, 0, v38, v39);
  v60 = v23 / a3;
  v61 = v18 + 0.1;
  v62 = v20 + 0.1;
  v130 = v62;
  v131 = v61;
  v63 = v18 + v21 + -0.1;
  v64 = v20 + v22 + -0.1;
  v66 = v65;
  v68 = v67;
  v69 = 1;
  v70 = 0.0;
  v71 = 1;
  v72 = 1;
  while (objc_msgSend_pointCountForStrokeIndex_(v5, v56, 0, v57, v58, v59) > v69)
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v74, 0, v69, v76, v77);
    v79 = v78;
    v81 = v80;
    v70 = v70
        + sqrtf((float)((float)(v81 - v68) * (float)(v81 - v68)) + (float)((float)(v79 - v66) * (float)(v79 - v66)));
    if (v70 > v60)
    {
      v82 = v79;
      v83 = v81;
      v85 = a2[1];
      v84 = (unint64_t)a2[2];
      if ((unint64_t)v85 < v84)
      {
        *v85 = v82;
        v85[1] = v83;
        *((_DWORD *)v85 + 4) = v71;
        *((_DWORD *)v85 + 5) = v69;
        *((_DWORD *)v85 + 6) = v72;
        *((_BYTE *)v85 + 28) = 0;
        v73 = v85 + 5;
        ++v71;
        *((_DWORD *)v85 + 8) = 0;
      }
      else
      {
        v86 = *a2;
        v87 = 0xCCCCCCCCCCCCCCCDLL * (v85 - *a2);
        v88 = v87 + 1;
        if (v87 + 1 > 0x666666666666666)
          sub_1BE61F930();
        v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v84 - (_QWORD)v86) >> 3);
        if (2 * v89 > v88)
          v88 = 2 * v89;
        if (v89 >= 0x333333333333333)
          v90 = 0x666666666666666;
        else
          v90 = v88;
        if (v90)
        {
          if (v90 > 0x666666666666666)
            sub_1BE61F100();
          v91 = (char *)operator new(40 * v90);
        }
        else
        {
          v91 = 0;
        }
        v107 = &v91[40 * v87];
        *(double *)v107 = v82;
        *((double *)v107 + 1) = v83;
        *((_DWORD *)v107 + 4) = v71;
        *((_DWORD *)v107 + 5) = v69;
        *((_DWORD *)v107 + 6) = v72;
        v107[28] = 0;
        *((_DWORD *)v107 + 8) = 0;
        v108 = (double *)v107;
        if (v85 != v86)
        {
          do
          {
            v109 = *(_OWORD *)(v85 - 5);
            v110 = *(_OWORD *)(v85 - 3);
            *(double *)((char *)v108 - 11) = *(double *)((char *)v85 - 11);
            *(_OWORD *)(v108 - 3) = v110;
            *(_OWORD *)(v108 - 5) = v109;
            v108 -= 5;
            v85 -= 5;
          }
          while (v85 != v86);
          v85 = *a2;
        }
        v73 = (double *)(v107 + 40);
        *a2 = v108;
        a2[1] = (double *)(v107 + 40);
        a2[2] = (double *)&v91[40 * v90];
        if (v85)
          operator delete(v85);
        ++v71;
      }
      goto LABEL_30;
    }
    if (v79 < v131 || v79 > v63 || v81 < v130 || v81 > v64)
    {
      v73 = a2[1];
      v95 = (unint64_t)a2[2];
      v96 = (char *)(v73 - 5);
      v97 = *((_DWORD *)v73 - 4);
      a2[1] = v73 - 5;
      v98 = v71 - 1;
      v99 = v79;
      v100 = v81;
      if ((unint64_t)(v73 - 5) >= v95)
      {
        v101 = *a2;
        v102 = 0xCCCCCCCCCCCCCCCDLL * ((v96 - (char *)*a2) >> 3);
        v103 = v102 + 1;
        if (v102 + 1 > 0x666666666666666)
          sub_1BE61F930();
        v104 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v95 - (_QWORD)v101) >> 3);
        if (2 * v104 > v103)
          v103 = 2 * v104;
        if (v104 >= 0x333333333333333)
          v105 = 0x666666666666666;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 > 0x666666666666666)
            sub_1BE61F100();
          v106 = (char *)operator new(40 * v105);
        }
        else
        {
          v106 = 0;
        }
        v111 = &v106[40 * v102];
        *(double *)v111 = v99;
        *((double *)v111 + 1) = v100;
        *((_DWORD *)v111 + 4) = v98;
        *((_DWORD *)v111 + 5) = v69;
        v112 = &v106[40 * v105];
        *((_DWORD *)v111 + 6) = v97;
        v111[28] = 0;
        *((_DWORD *)v111 + 8) = 0;
        v73 = (double *)(v111 + 40);
        if (v96 == (char *)v101)
        {
          *a2 = (double *)v111;
          a2[1] = v73;
          a2[2] = (double *)v112;
        }
        else
        {
          do
          {
            v113 = *(_OWORD *)(v96 - 40);
            v114 = *(_OWORD *)(v96 - 24);
            *(_QWORD *)(v111 - 11) = *(_QWORD *)(v96 - 11);
            *(_OWORD *)(v111 - 24) = v114;
            *(_OWORD *)(v111 - 40) = v113;
            v111 -= 40;
            v96 -= 40;
          }
          while (v96 != (char *)v101);
          v96 = (char *)*a2;
          *a2 = (double *)v111;
          a2[1] = v73;
          a2[2] = (double *)v112;
          if (!v96)
            goto LABEL_30;
        }
        operator delete(v96);
      }
      else
      {
        *(v73 - 5) = v99;
        *(v73 - 4) = v100;
        *((_DWORD *)v73 - 6) = v98;
        *((_DWORD *)v73 - 5) = v69;
        *((_DWORD *)v73 - 4) = v97;
        *((_BYTE *)v73 - 12) = 0;
        *((_DWORD *)v73 - 2) = 0;
      }
LABEL_30:
      v72 = 0;
      a2[1] = v73;
      v70 = 0.0;
    }
    ++v72;
    ++v69;
    v66 = v79;
    v68 = v81;
  }
  v115 = objc_msgSend_pointCountForStrokeIndex_(v5, v74, 0, v75, v76, v77);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v5, v116, 0, v115 - 1, v117, v118);
  v119 = (char *)a2[1];
  *((_QWORD *)v119 - 5) = v120;
  *((_QWORD *)v119 - 4) = v121;
  v126 = objc_msgSend_pointCountForStrokeIndex_(v5, v122, 0, v123, v124, v125);
  v127 = (char *)a2[1];
  v128 = *((_DWORD *)v127 - 4) + v72;
  *((_DWORD *)v127 - 5) = v126 - 1;
  *((_DWORD *)v127 - 4) = v128;

  return v60;
}

void sub_1BE629B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629BD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE629C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double TriangleRegressor::provideAnAnswer(TriangleRegressor *this, CHDrawing *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  double result;

  objc_msgSend_bounds(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = operator new();
  v15 = v9 + v13;
  v16 = v7 + v11;
  v17 = v9;
  v18 = v7;
  v19 = v18;
  *(_OWORD *)(v14 + 64) = xmmword_1BE8D50E0;
  *(_QWORD *)v14 = &off_1E77F0698;
  *(double *)(v14 + 80) = v19;
  *(double *)(v14 + 88) = v17;
  *(double *)(v14 + 96) = v16;
  *(double *)(v14 + 104) = (float)((float)(v17 + v15) * 0.5);
  result = v15;
  *(double *)(v14 + 112) = v19;
  *(double *)(v14 + 120) = result;
  return result;
}

void sub_1BE629CD4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  double *v56;
  uint64_t i;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  double *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  double v77;
  double v78;
  char *v79;
  double *v80;
  uint64_t v81;
  char *v82;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  unint64_t v98;
  double v99;
  double v100;
  char *v101;
  char *v102;
  char *v103;
  _BYTE *__dst;
  char *__dsta;
  char *v107;
  char *v108;
  BOOL (*v109)(double *, double *);

  v3 = *a1;
  v4 = (__int128 *)a1[1];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - v3) >> 3);
  *(_QWORD *)a2 = 0;
  if (v6 < 4)
    return;
  v109 = sub_1BE62A6C0;
  v7 = 126 - 2 * __clz(v6);
  if (v4 == (__int128 *)v3)
    v8 = 0;
  else
    v8 = v7;
  sub_1BE62A6E0(v3, v4, (uint64_t (**)(__int128 *, __int128 *))&v109, v8, 1);
  v9 = *a1;
  v11 = *(char **)(a2 + 8);
  v10 = *(char **)(a2 + 16);
  if (v11 >= v10)
  {
    v15 = *(char **)a2;
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v11[-*(_QWORD *)a2] >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0x666666666666666)
      goto LABEL_106;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v15) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x333333333333333)
      v19 = 0x666666666666666;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 > 0x666666666666666)
        goto LABEL_105;
      v20 = (char *)operator new(40 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[40 * v16];
    v22 = *(_OWORD *)v9;
    v23 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)v21 + 4) = *(_QWORD *)(v9 + 32);
    v10 = &v20[40 * v19];
    *(_OWORD *)v21 = v22;
    *((_OWORD *)v21 + 1) = v23;
    v14 = v21 + 40;
    if (v11 != v15)
    {
      do
      {
        v24 = *(_OWORD *)(v11 - 40);
        v25 = *(_OWORD *)(v11 - 24);
        *(_QWORD *)(v21 - 11) = *(_QWORD *)(v11 - 11);
        *(_OWORD *)(v21 - 24) = v25;
        *(_OWORD *)(v21 - 40) = v24;
        v21 -= 40;
        v11 -= 40;
      }
      while (v11 != v15);
      v11 = v15;
    }
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v10;
    if (v11)
    {
      operator delete(v11);
      v10 = *(char **)(a2 + 16);
    }
  }
  else
  {
    v12 = *(_OWORD *)v9;
    v13 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)v11 + 4) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)v11 = v12;
    *((_OWORD *)v11 + 1) = v13;
    v14 = v11 + 40;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v26 = *a1 + 40;
  if (v14 < v10)
  {
    v27 = *(_OWORD *)v26;
    v28 = *(_OWORD *)(*a1 + 56);
    *((_QWORD *)v14 + 4) = *(_QWORD *)(*a1 + 72);
    *(_OWORD *)v14 = v27;
    *((_OWORD *)v14 + 1) = v28;
    v29 = v14 + 40;
    goto LABEL_40;
  }
  v30 = *(char **)a2;
  v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-*(_QWORD *)a2] >> 3);
  v32 = v31 + 1;
  if (v31 + 1 > 0x666666666666666)
LABEL_106:
    sub_1BE61F930();
  v33 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v30) >> 3);
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x333333333333333)
    v34 = 0x666666666666666;
  else
    v34 = v32;
  if (v34)
  {
    if (v34 <= 0x666666666666666)
    {
      v35 = (char *)operator new(40 * v34);
      goto LABEL_34;
    }
LABEL_105:
    sub_1BE61F100();
  }
  v35 = 0;
LABEL_34:
  v36 = &v35[40 * v31];
  v37 = *(_OWORD *)v26;
  v38 = *(_OWORD *)(v26 + 16);
  *((_QWORD *)v36 + 4) = *(_QWORD *)(v26 + 32);
  v39 = &v35[40 * v34];
  *(_OWORD *)v36 = v37;
  *((_OWORD *)v36 + 1) = v38;
  v29 = v36 + 40;
  if (v14 == v30)
  {
    *(_QWORD *)a2 = v36;
    *(_QWORD *)(a2 + 8) = v29;
    v30 = v14;
    *(_QWORD *)(a2 + 16) = v39;
LABEL_39:
    operator delete(v30);
    goto LABEL_40;
  }
  do
  {
    v40 = *(_OWORD *)(v14 - 40);
    v41 = *(_OWORD *)(v14 - 24);
    *(_QWORD *)(v36 - 11) = *(_QWORD *)(v14 - 11);
    *(_OWORD *)(v36 - 24) = v41;
    *(_OWORD *)(v36 - 40) = v40;
    v36 -= 40;
    v14 -= 40;
  }
  while (v14 != v30);
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v29;
  *(_QWORD *)(a2 + 16) = v39;
  if (v30)
    goto LABEL_39;
LABEL_40:
  *(_QWORD *)(a2 + 8) = v29;
  v42 = *a1 + 40 * v6 - 40;
  v43 = operator new(0x28uLL);
  v44 = *(_OWORD *)v42;
  v45 = *(_OWORD *)(v42 + 16);
  v43[4] = *(_QWORD *)(v42 + 32);
  *(_OWORD *)v43 = v44;
  *((_OWORD *)v43 + 1) = v45;
  v46 = (char *)(v43 + 5);
  __dst = v43;
  v47 = 40 * v6 + *a1 - 80;
  v48 = v43;
  v49 = (char *)operator new(0x50uLL);
  v50 = &v49[8 * ((v46 - __dst) >> 3)];
  v51 = *(_OWORD *)v47;
  v52 = *(_OWORD *)(v47 + 16);
  *((_QWORD *)v50 + 4) = *(_QWORD *)(v47 + 32);
  *(_OWORD *)v50 = v51;
  *((_OWORD *)v50 + 1) = v52;
  v53 = v50 + 40;
  if (v46 == __dst)
  {
    __dsta = &v49[8 * ((v46 - __dst) >> 3)];
    v48 = v46;
    v108 = v49 + 80;
LABEL_45:
    operator delete(v48);
    goto LABEL_46;
  }
  do
  {
    v54 = *(_OWORD *)(v46 - 40);
    v55 = *(_OWORD *)(v46 - 24);
    *(_QWORD *)(v50 - 11) = *(_QWORD *)(v46 - 11);
    *(_OWORD *)(v50 - 24) = v55;
    *(_OWORD *)(v50 - 40) = v54;
    v50 -= 40;
    v46 -= 40;
  }
  while (v46 != __dst);
  __dsta = v50;
  v108 = v49 + 80;
  if (v48)
    goto LABEL_45;
LABEL_46:
  v107 = v53;
  v56 = *(double **)(a2 + 8);
  for (i = 2; i != v6; ++i)
  {
    v58 = *a1 + 40 * i;
    v59 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v56 >= v59)
    {
      v63 = *(char **)a2;
      v64 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v56 - *(_QWORD *)a2) >> 3);
      v65 = v64 + 1;
      if (v64 + 1 > 0x666666666666666)
        sub_1BE61F930();
      v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - (_QWORD)v63) >> 3);
      if (2 * v66 > v65)
        v65 = 2 * v66;
      if (v66 >= 0x333333333333333)
        v67 = 0x666666666666666;
      else
        v67 = v65;
      if (v67)
      {
        if (v67 > 0x666666666666666)
          sub_1BE61F100();
        v68 = (char *)operator new(40 * v67);
      }
      else
      {
        v68 = 0;
      }
      v69 = &v68[40 * v64];
      v70 = *(_OWORD *)v58;
      v71 = *(_OWORD *)(v58 + 16);
      *((_QWORD *)v69 + 4) = *(_QWORD *)(v58 + 32);
      *(_OWORD *)v69 = v70;
      *((_OWORD *)v69 + 1) = v71;
      v72 = v69;
      if (v56 != (double *)v63)
      {
        do
        {
          v73 = *(_OWORD *)(v56 - 5);
          v74 = *(_OWORD *)(v56 - 3);
          *(double *)(v72 - 11) = *(double *)((char *)v56 - 11);
          *(_OWORD *)(v72 - 24) = v74;
          *(_OWORD *)(v72 - 40) = v73;
          v72 -= 40;
          v56 -= 5;
        }
        while (v56 != (double *)v63);
        v56 = (double *)v63;
      }
      v62 = (double *)(v69 + 40);
      *(_QWORD *)a2 = v72;
      *(_QWORD *)(a2 + 8) = v69 + 40;
      *(_QWORD *)(a2 + 16) = &v68[40 * v67];
      if (v56)
        operator delete(v56);
    }
    else
    {
      v60 = *(_OWORD *)v58;
      v61 = *(_OWORD *)(v58 + 16);
      v56[4] = *(double *)(v58 + 32);
      *(_OWORD *)v56 = v60;
      *((_OWORD *)v56 + 1) = v61;
      v62 = v56 + 5;
    }
    *(_QWORD *)(a2 + 8) = v62;
    v75 = *(char **)a2;
    v76 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v62 - *(_QWORD *)a2) >> 3);
    if (v76 >= 3)
    {
      v77 = *(v62 - 5);
      v78 = *(v62 - 4);
      do
      {
        v79 = &v75[40 * v76];
        if ((*((double *)v79 - 10) - *((double *)v79 - 15)) * (v78 - *((double *)v79 - 14))
           - (*((double *)v79 - 9) - *((double *)v79 - 14)) * (v77 - *((double *)v79 - 15)) > 0.0)
          break;
        v80 = v62 - 10;
        memmove(v62 - 10, v62 - 5, 0x25uLL);
        v75 = *(char **)a2;
        v62 -= 5;
        *(_QWORD *)(a2 + 8) = v80 + 5;
        v76 = 0xCCCCCCCCCCCCCCCDLL * (((char *)(v80 + 5) - v75) >> 3);
      }
      while (v76 >= 3);
    }
    v56 = v62;
  }
  if ((int)v6 <= 2)
  {
    v97 = __dsta;
    v87 = v107;
  }
  else
  {
    v81 = (v6 - 3);
    v82 = v107;
    do
    {
      v84 = *a1 + 40 * v81;
      if (v82 >= v108)
      {
        v88 = 0xCCCCCCCCCCCCCCCDLL * ((v82 - __dsta) >> 3) + 1;
        if (v88 > 0x666666666666666)
          sub_1BE61F930();
        if (0x999999999999999ALL * ((v108 - __dsta) >> 3) > v88)
          v88 = 0x999999999999999ALL * ((v108 - __dsta) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v108 - __dsta) >> 3) >= 0x333333333333333)
          v89 = 0x666666666666666;
        else
          v89 = v88;
        if (v89)
        {
          if (v89 > 0x666666666666666)
            sub_1BE61F100();
          v90 = (char *)operator new(40 * v89);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[8 * ((v82 - __dsta) >> 3)];
        v92 = *(_OWORD *)v84;
        v93 = *(_OWORD *)(v84 + 16);
        *((_QWORD *)v91 + 4) = *(_QWORD *)(v84 + 32);
        *(_OWORD *)v91 = v92;
        *((_OWORD *)v91 + 1) = v93;
        v94 = v91;
        if (v82 != __dsta)
        {
          do
          {
            v95 = *(_OWORD *)(v82 - 40);
            v96 = *(_OWORD *)(v82 - 24);
            *(_QWORD *)(v94 - 11) = *(_QWORD *)(v82 - 11);
            *(_OWORD *)(v94 - 24) = v96;
            *(_OWORD *)(v94 - 40) = v95;
            v94 -= 40;
            v82 -= 40;
          }
          while (v82 != __dsta);
          v82 = __dsta;
        }
        v87 = v91 + 40;
        __dsta = v94;
        v108 = &v90[40 * v89];
        if (v82)
          operator delete(v82);
      }
      else
      {
        v85 = *(_OWORD *)v84;
        v86 = *(_OWORD *)(v84 + 16);
        *((_QWORD *)v82 + 4) = *(_QWORD *)(v84 + 32);
        *(_OWORD *)v82 = v85;
        *((_OWORD *)v82 + 1) = v86;
        v87 = v82 + 40;
      }
      v97 = __dsta;
      v98 = 0xCCCCCCCCCCCCCCCDLL * ((v87 - __dsta) >> 3);
      if (v98 >= 3)
      {
        v99 = *((double *)v87 - 5);
        v100 = *((double *)v87 - 4);
        do
        {
          v101 = &v97[40 * v98];
          if ((*((double *)v101 - 10) - *((double *)v101 - 15)) * (v100 - *((double *)v101 - 14))
             - (*((double *)v101 - 9) - *((double *)v101 - 14)) * (v99 - *((double *)v101 - 15)) > 0.0)
            break;
          v102 = v87 - 80;
          memmove(v87 - 80, v87 - 40, 0x25uLL);
          v97 = __dsta;
          v87 -= 40;
          v98 = 0xCCCCCCCCCCCCCCCDLL * ((v102 + 40 - __dsta) >> 3);
        }
        while (v98 >= 3);
      }
      v82 = v87;
    }
    while (v81-- > 0);
  }
  v103 = v97;
  if (v87 != v97 + 40)
  {
    memmove(v97, v97 + 40, v87 - (v97 + 40) - 3);
    v103 = __dsta;
  }
  sub_1BE62C19C(a2, *(char **)(a2 + 8), v103, v87 - 40, 0xCCCCCCCCCCCCCCCDLL * ((v87 - 40 - v103) >> 3));
  if (__dsta)
    operator delete(__dsta);
}

void sub_1BE62A660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  if (__p)
  {
    operator delete(__p);
    v14 = *(void **)v12;
    if (!*(_QWORD *)v12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v14 = *(void **)v12;
    if (!*(_QWORD *)v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v12 + 8) = v14;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE62A6B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

BOOL sub_1BE62A6C0(double *a1, double *a2)
{
  if (*a1 == *a2)
    return a1[1] < a2[1];
  else
    return *a1 < *a2;
}

void sub_1BE62A6E0(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  char v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 *v64;
  uint64_t v65;
  char v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 *v103;
  uint64_t v104;
  char v105;
  int v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  __int128 *v165;
  unint64_t v166;
  __int128 *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  BOOL v179;
  __int128 v180;
  __int128 v181;
  __int128 *v182;
  int v183;
  __int128 *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  unint64_t v196;
  char v197;
  int v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 *v205;
  __int128 *v206;
  __n128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 *v218;
  BOOL v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 *v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  unint64_t v240;
  __int128 *v241;
  __int128 v242;
  __int128 v243;
  unint64_t v244;
  __int128 v245;
  char v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 *v255;
  __int128 *v256;
  __int128 v258;
  _BYTE v259[24];
  __int128 v260;
  _BYTE v261[24];

LABEL_1:
  v9 = (char *)a2 - 40;
  v255 = (__int128 *)((char *)a2 - 120);
  v256 = a2 - 5;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 40), (__int128 *)v10))
          goto LABEL_103;
        return;
      case 3uLL:
        v196 = v10 + 40;
        v197 = (*a3)((__int128 *)(v10 + 40), (__int128 *)v10);
        v198 = (*a3)((__int128 *)v9, (__int128 *)(v10 + 40));
        if ((v197 & 1) != 0)
        {
          if (v198)
          {
LABEL_103:
            v199 = *(_OWORD *)v10;
            v200 = *(_OWORD *)(v10 + 16);
            *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
            v260 = v199;
            *(_OWORD *)v261 = v200;
            v201 = *(_OWORD *)v9;
            v202 = *((_OWORD *)v9 + 1);
            *(_QWORD *)(v10 + 29) = *(_QWORD *)(v9 + 29);
            *(_OWORD *)v10 = v201;
            *(_OWORD *)(v10 + 16) = v202;
            v203 = v260;
            v204 = *(_OWORD *)v261;
LABEL_104:
            *(_QWORD *)(v9 + 29) = *(_QWORD *)&v261[13];
            *(_OWORD *)v9 = v203;
            *((_OWORD *)v9 + 1) = v204;
            return;
          }
          v249 = *(_OWORD *)v10;
          v250 = *(_OWORD *)(v10 + 16);
          *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
          v260 = v249;
          *(_OWORD *)v261 = v250;
          v251 = *(_OWORD *)(v10 + 56);
          *(_OWORD *)v10 = *(_OWORD *)v196;
          *(_OWORD *)(v10 + 16) = v251;
          *(_QWORD *)(v10 + 29) = *(_QWORD *)(v10 + 69);
          v252 = *(_OWORD *)v261;
          *(_OWORD *)v196 = v260;
          *(_OWORD *)(v10 + 56) = v252;
          *(_QWORD *)(v10 + 69) = *(_QWORD *)&v261[13];
          if ((*a3)((__int128 *)v9, (__int128 *)(v10 + 40)))
          {
            *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 72);
            v203 = *(_OWORD *)v196;
            v204 = *(_OWORD *)(v10 + 56);
            v260 = *(_OWORD *)v196;
            *(_OWORD *)v261 = v204;
            v254 = *(_OWORD *)v9;
            v253 = *((_OWORD *)v9 + 1);
            *(_QWORD *)(v10 + 69) = *(_QWORD *)(v9 + 29);
            *(_OWORD *)v196 = v254;
            *(_OWORD *)(v10 + 56) = v253;
            goto LABEL_104;
          }
        }
        else if (v198)
        {
          *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 72);
          v233 = *(_OWORD *)(v10 + 56);
          v260 = *(_OWORD *)v196;
          v232 = v260;
          *(_OWORD *)v261 = v233;
          v235 = *(_OWORD *)v9;
          v234 = *((_OWORD *)v9 + 1);
          *(_QWORD *)(v10 + 69) = *(_QWORD *)(v9 + 29);
          *(_OWORD *)v196 = v235;
          *(_OWORD *)(v10 + 56) = v234;
          *(_QWORD *)(v9 + 29) = *(_QWORD *)&v261[13];
          *(_OWORD *)v9 = v232;
          *((_OWORD *)v9 + 1) = v233;
          goto LABEL_131;
        }
        return;
      case 4uLL:
        sub_1BE62BA1C((__int128 *)v10, (__int128 *)(v10 + 40), (__int128 *)(v10 + 80), (__int128 *)((char *)a2 - 40), a3);
        return;
      case 5uLL:
        v196 = v10 + 40;
        v205 = (__int128 *)(v10 + 80);
        v206 = (__int128 *)(v10 + 120);
        v207 = sub_1BE62BA1C((__int128 *)v10, (__int128 *)(v10 + 40), (__int128 *)(v10 + 80), (__int128 *)(v10 + 120), a3);
        if (((unsigned int (*)(char *, unint64_t, __n128))*a3)(v9, v10 + 120, v207))
        {
          *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 152);
          v209 = *(_OWORD *)(v10 + 136);
          v260 = *v206;
          v208 = v260;
          *(_OWORD *)v261 = v209;
          v211 = *(_OWORD *)v9;
          v210 = *((_OWORD *)v9 + 1);
          *(_QWORD *)(v10 + 149) = *(_QWORD *)(v9 + 29);
          *v206 = v211;
          *(_OWORD *)(v10 + 136) = v210;
          *(_QWORD *)(v9 + 29) = *(_QWORD *)&v261[13];
          *(_OWORD *)v9 = v208;
          *((_OWORD *)v9 + 1) = v209;
          if ((*a3)((__int128 *)(v10 + 120), (__int128 *)(v10 + 80)))
          {
            v213 = *v205;
            *(_OWORD *)v261 = *(_OWORD *)(v10 + 96);
            v212 = *(_OWORD *)v261;
            *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 112);
            v214 = *(_OWORD *)(v10 + 136);
            *v205 = *v206;
            *(_OWORD *)(v10 + 96) = v214;
            *(_QWORD *)(v10 + 109) = *(_QWORD *)(v10 + 149);
            *v206 = v213;
            *(_OWORD *)(v10 + 136) = v212;
            *(_QWORD *)(v10 + 149) = *(_QWORD *)&v261[13];
            if ((*a3)((__int128 *)(v10 + 80), (__int128 *)(v10 + 40)))
            {
              v216 = *(_OWORD *)v196;
              *(_OWORD *)v261 = *(_OWORD *)(v10 + 56);
              v215 = *(_OWORD *)v261;
              *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 72);
              v217 = *(_OWORD *)(v10 + 96);
              *(_OWORD *)v196 = *v205;
              *(_OWORD *)(v10 + 56) = v217;
              *(_QWORD *)(v10 + 69) = *(_QWORD *)(v10 + 109);
              *v205 = v216;
              *(_OWORD *)(v10 + 96) = v215;
              *(_QWORD *)(v10 + 109) = *(_QWORD *)&v261[13];
LABEL_131:
              if ((*a3)((__int128 *)v196, (__int128 *)v10))
              {
                v236 = *(_OWORD *)v10;
                v237 = *(_OWORD *)(v10 + 16);
                *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
                v260 = v236;
                *(_OWORD *)v261 = v237;
                v238 = *(_OWORD *)(v196 + 16);
                *(_OWORD *)v10 = *(_OWORD *)v196;
                *(_OWORD *)(v10 + 16) = v238;
                *(_QWORD *)(v10 + 29) = *(_QWORD *)(v196 + 29);
                v239 = *(_OWORD *)v261;
                *(_OWORD *)v196 = v260;
                *(_OWORD *)(v196 + 16) = v239;
                *(_QWORD *)(v196 + 29) = *(_QWORD *)&v261[13];
              }
            }
          }
        }
        return;
      default:
        if (v11 > 959)
        {
          if (!a4)
          {
            if ((__int128 *)v10 != a2)
              sub_1BE62BC50(v10, a2, a2, (unsigned int (**)(uint64_t, char *))a3);
            return;
          }
          v13 = v12 >> 1;
          v14 = v10 + 40 * (v12 >> 1);
          v15 = *a3;
          if ((unint64_t)v11 < 0x1401)
          {
            v22 = v15((__int128 *)v10, (__int128 *)v14);
            v23 = (*a3)((__int128 *)((char *)a2 - 40), (__int128 *)v10);
            if ((v22 & 1) == 0)
            {
              if (v23)
              {
                v40 = *(_OWORD *)v10;
                v41 = *(_OWORD *)(v10 + 16);
                *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
                v260 = v40;
                *(_OWORD *)v261 = v41;
                v42 = *(_OWORD *)v9;
                v43 = *(__int128 *)((char *)a2 - 24);
                *(_QWORD *)(v10 + 29) = *(_QWORD *)((char *)a2 - 11);
                *(_OWORD *)v10 = v42;
                *(_OWORD *)(v10 + 16) = v43;
                v44 = v260;
                v45 = *(_OWORD *)v261;
                *(_QWORD *)((char *)a2 - 11) = *(_QWORD *)&v261[13];
                *(_OWORD *)v9 = v44;
                *(__int128 *)((char *)a2 - 24) = v45;
                if ((*a3)((__int128 *)v10, (__int128 *)v14))
                {
                  v46 = *(_OWORD *)v14;
                  v47 = *(_OWORD *)(v14 + 16);
                  *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
                  v260 = v46;
                  *(_OWORD *)v261 = v47;
                  v48 = *(_OWORD *)v10;
                  v49 = *(_OWORD *)(v10 + 16);
                  *(_QWORD *)(v14 + 29) = *(_QWORD *)(v10 + 29);
                  *(_OWORD *)v14 = v48;
                  *(_OWORD *)(v14 + 16) = v49;
                  v50 = v260;
                  v51 = *(_OWORD *)v261;
                  *(_QWORD *)(v10 + 29) = *(_QWORD *)&v261[13];
                  *(_OWORD *)v10 = v50;
                  *(_OWORD *)(v10 + 16) = v51;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v23)
            {
              v24 = *(_OWORD *)v14;
              v25 = *(_OWORD *)(v14 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
              v260 = v24;
              *(_OWORD *)v261 = v25;
              v26 = *(_OWORD *)v9;
              v27 = *(__int128 *)((char *)a2 - 24);
              *(_QWORD *)(v14 + 29) = *(_QWORD *)((char *)a2 - 11);
              *(_OWORD *)v14 = v26;
              *(_OWORD *)(v14 + 16) = v27;
            }
            else
            {
              v83 = *(_OWORD *)v14;
              v84 = *(_OWORD *)(v14 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
              v260 = v83;
              *(_OWORD *)v261 = v84;
              v85 = *(_OWORD *)v10;
              v86 = *(_OWORD *)(v10 + 16);
              *(_QWORD *)(v14 + 29) = *(_QWORD *)(v10 + 29);
              *(_OWORD *)v14 = v85;
              *(_OWORD *)(v14 + 16) = v86;
              v87 = v260;
              v88 = *(_OWORD *)v261;
              *(_QWORD *)(v10 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v10 = v87;
              *(_OWORD *)(v10 + 16) = v88;
              if (!(*a3)((__int128 *)((char *)a2 - 40), (__int128 *)v10))
                goto LABEL_31;
              v89 = *(_OWORD *)v10;
              v90 = *(_OWORD *)(v10 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
              v260 = v89;
              *(_OWORD *)v261 = v90;
              v91 = *(_OWORD *)v9;
              v92 = *(__int128 *)((char *)a2 - 24);
              *(_QWORD *)(v10 + 29) = *(_QWORD *)((char *)a2 - 11);
              *(_OWORD *)v10 = v91;
              *(_OWORD *)(v10 + 16) = v92;
            }
            v93 = v260;
            v94 = *(_OWORD *)v261;
            *(_QWORD *)((char *)a2 - 11) = *(_QWORD *)&v261[13];
            *(_OWORD *)v9 = v93;
            *(__int128 *)((char *)a2 - 24) = v94;
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = v15((__int128 *)v14, (__int128 *)v10);
          v17 = (*a3)((__int128 *)((char *)a2 - 40), (__int128 *)v14);
          if ((v16 & 1) != 0)
          {
            if (v17)
            {
              v18 = *(_OWORD *)v10;
              v19 = *(_OWORD *)(v10 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
              v260 = v18;
              *(_OWORD *)v261 = v19;
              v20 = *(_OWORD *)v9;
              v21 = *(__int128 *)((char *)a2 - 24);
              *(_QWORD *)(v10 + 29) = *(_QWORD *)((char *)a2 - 11);
              *(_OWORD *)v10 = v20;
              *(_OWORD *)(v10 + 16) = v21;
            }
            else
            {
              v52 = *(_OWORD *)v10;
              v53 = *(_OWORD *)(v10 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
              v260 = v52;
              *(_OWORD *)v261 = v53;
              v54 = *(_OWORD *)v14;
              v55 = *(_OWORD *)(v14 + 16);
              *(_QWORD *)(v10 + 29) = *(_QWORD *)(v14 + 29);
              *(_OWORD *)v10 = v54;
              *(_OWORD *)(v10 + 16) = v55;
              v56 = v260;
              v57 = *(_OWORD *)v261;
              *(_QWORD *)(v14 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v14 = v56;
              *(_OWORD *)(v14 + 16) = v57;
              if (!(*a3)((__int128 *)((char *)a2 - 40), (__int128 *)v14))
                goto LABEL_22;
              v58 = *(_OWORD *)v14;
              v59 = *(_OWORD *)(v14 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
              v260 = v58;
              *(_OWORD *)v261 = v59;
              v60 = *(_OWORD *)v9;
              v61 = *(__int128 *)((char *)a2 - 24);
              *(_QWORD *)(v14 + 29) = *(_QWORD *)((char *)a2 - 11);
              *(_OWORD *)v14 = v60;
              *(_OWORD *)(v14 + 16) = v61;
            }
            v62 = v260;
            v63 = *(_OWORD *)v261;
            *(_QWORD *)((char *)a2 - 11) = *(_QWORD *)&v261[13];
            *(_OWORD *)v9 = v62;
            *(__int128 *)((char *)a2 - 24) = v63;
          }
          else if (v17)
          {
            v28 = *(_OWORD *)v14;
            v29 = *(_OWORD *)(v14 + 16);
            *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
            v260 = v28;
            *(_OWORD *)v261 = v29;
            v30 = *(_OWORD *)v9;
            v31 = *(__int128 *)((char *)a2 - 24);
            *(_QWORD *)(v14 + 29) = *(_QWORD *)((char *)a2 - 11);
            *(_OWORD *)v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            v32 = v260;
            v33 = *(_OWORD *)v261;
            *(_QWORD *)((char *)a2 - 11) = *(_QWORD *)&v261[13];
            *(_OWORD *)v9 = v32;
            *(__int128 *)((char *)a2 - 24) = v33;
            if ((*a3)((__int128 *)v14, (__int128 *)v10))
            {
              v34 = *(_OWORD *)v10;
              v35 = *(_OWORD *)(v10 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
              v260 = v34;
              *(_OWORD *)v261 = v35;
              v36 = *(_OWORD *)v14;
              v37 = *(_OWORD *)(v14 + 16);
              *(_QWORD *)(v10 + 29) = *(_QWORD *)(v14 + 29);
              *(_OWORD *)v10 = v36;
              *(_OWORD *)(v10 + 16) = v37;
              v38 = v260;
              v39 = *(_OWORD *)v261;
              *(_QWORD *)(v14 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v14 = v38;
              *(_OWORD *)(v14 + 16) = v39;
            }
          }
LABEL_22:
          v64 = (__int128 *)(v10 + 40);
          v65 = a1 + 40 * v13 - 40;
          v66 = (*a3)((__int128 *)v65, (__int128 *)(a1 + 40));
          v67 = (*a3)(v256, (__int128 *)v65);
          if ((v66 & 1) != 0)
          {
            if (v67)
            {
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 72);
              v68 = *v64;
              v69 = *(_OWORD *)(a1 + 56);
              v260 = *v64;
              *(_OWORD *)v261 = v69;
              v70 = a2 - 5;
              v72 = *v256;
              v71 = *(a2 - 4);
              *(_QWORD *)(a1 + 69) = *(_QWORD *)((char *)a2 - 51);
              *v64 = v72;
              *(_OWORD *)(a1 + 56) = v71;
            }
            else
            {
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 72);
              v96 = *(_OWORD *)(a1 + 56);
              v260 = *v64;
              v95 = v260;
              *(_OWORD *)v261 = v96;
              v98 = *(_OWORD *)v65;
              v97 = *(_OWORD *)(a1 + 40 * v13 - 24);
              *(_QWORD *)(a1 + 69) = *(_QWORD *)(a1 + 40 * v13 - 11);
              *v64 = v98;
              *(_OWORD *)(a1 + 56) = v97;
              *(_QWORD *)(a1 + 40 * v13 - 11) = *(_QWORD *)&v261[13];
              *(_OWORD *)v65 = v95;
              *(_OWORD *)(a1 + 40 * v13 - 24) = v96;
              if (!(*a3)(v256, (__int128 *)(a1 + 40 * v13 - 40)))
                goto LABEL_36;
              v99 = *(_OWORD *)v65;
              v100 = *(_OWORD *)(a1 + 40 * v13 - 24);
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 40 * v13 - 8);
              v260 = v99;
              *(_OWORD *)v261 = v100;
              v70 = a2 - 5;
              v101 = *v256;
              v102 = *(a2 - 4);
              *(_QWORD *)(a1 + 40 * v13 - 11) = *(_QWORD *)((char *)a2 - 51);
              *(_OWORD *)v65 = v101;
              *(_OWORD *)(a1 + 40 * v13 - 24) = v102;
              v68 = v260;
              v69 = *(_OWORD *)v261;
            }
            *(_QWORD *)((char *)v70 + 29) = *(_QWORD *)&v261[13];
            *v70 = v68;
            v70[1] = v69;
          }
          else if (v67)
          {
            v73 = *(_OWORD *)v65;
            v74 = *(_OWORD *)(a1 + 40 * v13 - 24);
            *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 40 * v13 - 8);
            v260 = v73;
            *(_OWORD *)v261 = v74;
            v75 = *v256;
            v76 = *(a2 - 4);
            *(_QWORD *)(a1 + 40 * v13 - 11) = *(_QWORD *)((char *)a2 - 51);
            *(_OWORD *)v65 = v75;
            *(_OWORD *)(a1 + 40 * v13 - 24) = v76;
            v77 = v260;
            v78 = *(_OWORD *)v261;
            *(_QWORD *)((char *)a2 - 51) = *(_QWORD *)&v261[13];
            *v256 = v77;
            *(a2 - 4) = v78;
            if ((*a3)((__int128 *)(a1 + 40 * v13 - 40), (__int128 *)(a1 + 40)))
            {
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 72);
              v80 = *(_OWORD *)(a1 + 56);
              v260 = *v64;
              v79 = v260;
              *(_OWORD *)v261 = v80;
              v82 = *(_OWORD *)v65;
              v81 = *(_OWORD *)(a1 + 40 * v13 - 24);
              *(_QWORD *)(a1 + 69) = *(_QWORD *)(a1 + 40 * v13 - 11);
              *v64 = v82;
              *(_OWORD *)(a1 + 56) = v81;
              *(_QWORD *)(a1 + 40 * v13 - 11) = *(_QWORD *)&v261[13];
              *(_OWORD *)v65 = v79;
              *(_OWORD *)(a1 + 40 * v13 - 24) = v80;
            }
          }
LABEL_36:
          v103 = (__int128 *)(a1 + 80);
          v104 = a1 + 40 * v13 + 40;
          v105 = (*a3)((__int128 *)v104, (__int128 *)(a1 + 80));
          v106 = (*a3)(v255, (__int128 *)v104);
          if ((v105 & 1) != 0)
          {
            if (v106)
            {
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 112);
              v107 = *v103;
              v108 = *(_OWORD *)(a1 + 96);
              v260 = *v103;
              *(_OWORD *)v261 = v108;
              v109 = (char *)a2 - 120;
              v111 = *v255;
              v110 = *(__int128 *)((char *)a2 - 104);
              *(_QWORD *)(a1 + 109) = *(_QWORD *)((char *)a2 - 91);
              *v103 = v111;
              *(_OWORD *)(a1 + 96) = v110;
            }
            else
            {
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 112);
              v123 = *(_OWORD *)(a1 + 96);
              v260 = *v103;
              v122 = v260;
              *(_OWORD *)v261 = v123;
              v125 = *(_OWORD *)v104;
              v124 = *(_OWORD *)(v104 + 16);
              *(_QWORD *)(a1 + 109) = *(_QWORD *)(v104 + 29);
              *v103 = v125;
              *(_OWORD *)(a1 + 96) = v124;
              *(_QWORD *)(v104 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v104 = v122;
              *(_OWORD *)(v104 + 16) = v123;
              if (!(*a3)(v255, (__int128 *)v104))
                goto LABEL_45;
              v126 = *(_OWORD *)v104;
              v127 = *(_OWORD *)(v104 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v104 + 32);
              v260 = v126;
              *(_OWORD *)v261 = v127;
              v109 = (char *)a2 - 120;
              v128 = *v255;
              v129 = *(__int128 *)((char *)a2 - 104);
              *(_QWORD *)(v104 + 29) = *(_QWORD *)((char *)a2 - 91);
              *(_OWORD *)v104 = v128;
              *(_OWORD *)(v104 + 16) = v129;
              v107 = v260;
              v108 = *(_OWORD *)v261;
            }
            *(_QWORD *)(v109 + 29) = *(_QWORD *)&v261[13];
            *(_OWORD *)v109 = v107;
            *((_OWORD *)v109 + 1) = v108;
          }
          else if (v106)
          {
            v112 = *(_OWORD *)v104;
            v113 = *(_OWORD *)(v104 + 16);
            *(_QWORD *)&v261[16] = *(_QWORD *)(v104 + 32);
            v260 = v112;
            *(_OWORD *)v261 = v113;
            v114 = *v255;
            v115 = *(__int128 *)((char *)a2 - 104);
            *(_QWORD *)(v104 + 29) = *(_QWORD *)((char *)a2 - 91);
            *(_OWORD *)v104 = v114;
            *(_OWORD *)(v104 + 16) = v115;
            v116 = v260;
            v117 = *(_OWORD *)v261;
            *(_QWORD *)((char *)a2 - 91) = *(_QWORD *)&v261[13];
            *v255 = v116;
            *(__int128 *)((char *)a2 - 104) = v117;
            if ((*a3)((__int128 *)v104, (__int128 *)(a1 + 80)))
            {
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 112);
              v119 = *(_OWORD *)(a1 + 96);
              v260 = *v103;
              v118 = v260;
              *(_OWORD *)v261 = v119;
              v121 = *(_OWORD *)v104;
              v120 = *(_OWORD *)(v104 + 16);
              *(_QWORD *)(a1 + 109) = *(_QWORD *)(v104 + 29);
              *v103 = v121;
              *(_OWORD *)(a1 + 96) = v120;
              *(_QWORD *)(v104 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v104 = v118;
              *(_OWORD *)(v104 + 16) = v119;
            }
          }
LABEL_45:
          v130 = (*a3)((__int128 *)v14, (__int128 *)v65);
          v131 = (*a3)((__int128 *)v104, (__int128 *)v14);
          if ((v130 & 1) != 0)
          {
            if (v131)
            {
              v132 = *(_OWORD *)v65;
              v133 = *(_OWORD *)(v65 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v65 + 32);
              v260 = v132;
              *(_OWORD *)v261 = v133;
              v134 = *(_OWORD *)(v104 + 16);
              *(_OWORD *)v65 = *(_OWORD *)v104;
              *(_OWORD *)(v65 + 16) = v134;
              *(_QWORD *)(v65 + 29) = *(_QWORD *)(v104 + 29);
            }
            else
            {
              v145 = *(_OWORD *)v65;
              v146 = *(_OWORD *)(v65 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v65 + 32);
              v260 = v145;
              *(_OWORD *)v261 = v146;
              v147 = *(_OWORD *)(v14 + 16);
              *(_OWORD *)v65 = *(_OWORD *)v14;
              *(_OWORD *)(v65 + 16) = v147;
              *(_QWORD *)(v65 + 29) = *(_QWORD *)(v14 + 29);
              v148 = v260;
              v149 = *(_OWORD *)v261;
              *(_QWORD *)(v14 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v14 = v148;
              *(_OWORD *)(v14 + 16) = v149;
              if (!(*a3)((__int128 *)v104, (__int128 *)v14))
                goto LABEL_54;
              v150 = *(_OWORD *)v14;
              v151 = *(_OWORD *)(v14 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
              v260 = v150;
              *(_OWORD *)v261 = v151;
              v152 = *(_OWORD *)(v104 + 16);
              *(_OWORD *)v14 = *(_OWORD *)v104;
              *(_OWORD *)(v14 + 16) = v152;
              *(_QWORD *)(v14 + 29) = *(_QWORD *)(v104 + 29);
            }
            v153 = v260;
            v154 = *(_OWORD *)v261;
            *(_QWORD *)(v104 + 29) = *(_QWORD *)&v261[13];
            *(_OWORD *)v104 = v153;
            *(_OWORD *)(v104 + 16) = v154;
          }
          else if (v131)
          {
            v135 = *(_OWORD *)v14;
            v136 = *(_OWORD *)(v14 + 16);
            *(_QWORD *)&v261[16] = *(_QWORD *)(v14 + 32);
            v260 = v135;
            *(_OWORD *)v261 = v136;
            v137 = *(_OWORD *)(v104 + 16);
            *(_OWORD *)v14 = *(_OWORD *)v104;
            *(_OWORD *)(v14 + 16) = v137;
            *(_QWORD *)(v14 + 29) = *(_QWORD *)(v104 + 29);
            v138 = v260;
            v139 = *(_OWORD *)v261;
            *(_QWORD *)(v104 + 29) = *(_QWORD *)&v261[13];
            *(_OWORD *)v104 = v138;
            *(_OWORD *)(v104 + 16) = v139;
            if ((*a3)((__int128 *)v14, (__int128 *)v65))
            {
              v140 = *(_OWORD *)v65;
              v141 = *(_OWORD *)(v65 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v65 + 32);
              v260 = v140;
              *(_OWORD *)v261 = v141;
              v142 = *(_OWORD *)(v14 + 16);
              *(_OWORD *)v65 = *(_OWORD *)v14;
              *(_OWORD *)(v65 + 16) = v142;
              *(_QWORD *)(v65 + 29) = *(_QWORD *)(v14 + 29);
              v143 = v260;
              v144 = *(_OWORD *)v261;
              *(_QWORD *)(v14 + 29) = *(_QWORD *)&v261[13];
              *(_OWORD *)v14 = v143;
              *(_OWORD *)(v14 + 16) = v144;
            }
          }
LABEL_54:
          v155 = *(_OWORD *)a1;
          v156 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 32);
          v260 = v155;
          *(_OWORD *)v261 = v156;
          v157 = *(_OWORD *)v14;
          v158 = *(_OWORD *)(v14 + 16);
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(v14 + 29);
          *(_OWORD *)a1 = v157;
          *(_OWORD *)(a1 + 16) = v158;
          v159 = v260;
          v160 = *(_OWORD *)v261;
          *(_QWORD *)(v14 + 29) = *(_QWORD *)&v261[13];
          *(_OWORD *)v14 = v159;
          *(_OWORD *)(v14 + 16) = v160;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
          {
            v180 = *(_OWORD *)a1;
            v181 = *(_OWORD *)(a1 + 16);
            *(_QWORD *)&v259[16] = *(_QWORD *)(a1 + 32);
            v258 = v180;
            *(_OWORD *)v259 = v181;
            if (((*a3)(&v258, (__int128 *)((char *)a2 - 40)) & 1) != 0)
            {
              v10 = a1;
              do
                v10 += 40;
              while (((*a3)(&v258, (__int128 *)v10) & 1) == 0);
            }
            else
            {
              v182 = (__int128 *)(a1 + 40);
              do
              {
                v10 = (unint64_t)v182;
                if (v182 >= a2)
                  break;
                v183 = (*a3)(&v258, v182);
                v182 = (__int128 *)(v10 + 40);
              }
              while (!v183);
            }
            v184 = a2;
            if (v10 < (unint64_t)a2)
            {
              v184 = a2;
              do
                v184 = (__int128 *)((char *)v184 - 40);
              while (((*a3)(&v258, v184) & 1) != 0);
            }
            while (v10 < (unint64_t)v184)
            {
              v185 = *(_OWORD *)v10;
              v186 = *(_OWORD *)(v10 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v10 + 32);
              v260 = v185;
              *(_OWORD *)v261 = v186;
              v187 = *v184;
              v188 = v184[1];
              *(_QWORD *)(v10 + 29) = *(_QWORD *)((char *)v184 + 29);
              *(_OWORD *)v10 = v187;
              *(_OWORD *)(v10 + 16) = v188;
              v189 = v260;
              v190 = *(_OWORD *)v261;
              *(_QWORD *)((char *)v184 + 29) = *(_QWORD *)&v261[13];
              *v184 = v189;
              v184[1] = v190;
              do
                v10 += 40;
              while (!(*a3)(&v258, (__int128 *)v10));
              do
                v184 = (__int128 *)((char *)v184 - 40);
              while (((*a3)(&v258, v184) & 1) != 0);
            }
            v191 = (__int128 *)(v10 - 40);
            if (v10 - 40 != a1)
            {
              v192 = *v191;
              v193 = *(_OWORD *)(v10 - 24);
              *(_QWORD *)(a1 + 29) = *(_QWORD *)(v10 - 11);
              *(_OWORD *)a1 = v192;
              *(_OWORD *)(a1 + 16) = v193;
            }
            a5 = 0;
            v194 = v258;
            v195 = *(_OWORD *)v259;
            *(_QWORD *)(v10 - 11) = *(_QWORD *)&v259[13];
            *v191 = v194;
            *(_OWORD *)(v10 - 24) = v195;
            continue;
          }
LABEL_56:
          v161 = 0;
          v162 = *(_OWORD *)a1;
          v163 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)&v259[16] = *(_QWORD *)(a1 + 32);
          v258 = v162;
          *(_OWORD *)v259 = v163;
          do
            v161 += 40;
          while (((*a3)((__int128 *)(v161 + a1), &v258) & 1) != 0);
          v164 = a1 + v161;
          v165 = a2;
          if (v161 == 40)
          {
            v165 = a2;
            do
            {
              if (v164 >= (unint64_t)v165)
                break;
              v165 = (__int128 *)((char *)v165 - 40);
            }
            while (((*a3)(v165, &v258) & 1) == 0);
          }
          else
          {
            do
              v165 = (__int128 *)((char *)v165 - 40);
            while (!(*a3)(v165, &v258));
          }
          if (v164 < (unint64_t)v165)
          {
            v166 = a1 + v161;
            v167 = v165;
            do
            {
              v168 = *(_OWORD *)v166;
              v169 = *(_OWORD *)(v166 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(v166 + 32);
              v260 = v168;
              *(_OWORD *)v261 = v169;
              v170 = *v167;
              v171 = v167[1];
              *(_QWORD *)(v166 + 29) = *(_QWORD *)((char *)v167 + 29);
              *(_OWORD *)v166 = v170;
              *(_OWORD *)(v166 + 16) = v171;
              v172 = v260;
              v173 = *(_OWORD *)v261;
              *(_QWORD *)((char *)v167 + 29) = *(_QWORD *)&v261[13];
              *v167 = v172;
              v167[1] = v173;
              do
                v166 += 40;
              while (((*a3)((__int128 *)v166, &v258) & 1) != 0);
              do
                v167 = (__int128 *)((char *)v167 - 40);
              while (!(*a3)(v167, &v258));
            }
            while (v166 < (unint64_t)v167);
            v174 = v166 - 40;
            if (v174 == a1)
              goto LABEL_74;
LABEL_73:
            v175 = *(_OWORD *)v174;
            v176 = *(_OWORD *)(v174 + 16);
            *(_QWORD *)(a1 + 29) = *(_QWORD *)(v174 + 29);
            *(_OWORD *)a1 = v175;
            *(_OWORD *)(a1 + 16) = v176;
            goto LABEL_74;
          }
          v174 = v164 - 40;
          if (v164 - 40 != a1)
            goto LABEL_73;
LABEL_74:
          v177 = v258;
          v178 = *(_OWORD *)v259;
          *(_QWORD *)(v174 + 29) = *(_QWORD *)&v259[13];
          *(_OWORD *)v174 = v177;
          *(_OWORD *)(v174 + 16) = v178;
          if (v164 < (unint64_t)v165)
            goto LABEL_77;
          v179 = sub_1BE62B50C(a1, v174, a3);
          v10 = v174 + 40;
          if (!sub_1BE62B50C(v174 + 40, (uint64_t)a2, a3))
          {
            if (v179)
              continue;
LABEL_77:
            sub_1BE62A6E0(a1, v174, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v174 + 40;
            continue;
          }
          a2 = (__int128 *)v174;
          if (v179)
            return;
          goto LABEL_1;
        }
        v218 = (__int128 *)(v10 + 40);
        v220 = (__int128 *)v10 == a2 || v218 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v220)
          {
            v221 = 0;
            v222 = v10;
            do
            {
              v226 = (__int128 *)v222;
              v222 = (unint64_t)v218;
              if ((*a3)(v218, v226))
              {
                v227 = *(_OWORD *)v222;
                v228 = *(_OWORD *)(v222 + 16);
                *(_QWORD *)&v261[16] = *(_QWORD *)(v222 + 32);
                v260 = v227;
                *(_OWORD *)v261 = v228;
                v229 = v221;
                do
                {
                  v230 = v10 + v229;
                  v231 = *(_OWORD *)(v10 + v229 + 16);
                  *(_OWORD *)(v230 + 40) = *(_OWORD *)(v10 + v229);
                  *(_OWORD *)(v230 + 56) = v231;
                  *(_QWORD *)(v230 + 69) = *(_QWORD *)(v10 + v229 + 29);
                  if (!v229)
                  {
                    v223 = v10;
                    goto LABEL_120;
                  }
                  v229 -= 40;
                }
                while (((*a3)(&v260, (__int128 *)(v229 + v10)) & 1) != 0);
                v223 = v10 + v229 + 40;
LABEL_120:
                v224 = v260;
                v225 = *(_OWORD *)v261;
                *(_QWORD *)(v223 + 29) = *(_QWORD *)&v261[13];
                *(_OWORD *)v223 = v224;
                *(_OWORD *)(v223 + 16) = v225;
              }
              v218 = (__int128 *)(v222 + 40);
              v221 += 40;
            }
            while ((__int128 *)(v222 + 40) != a2);
          }
        }
        else if (!v220)
        {
          v240 = v10 - 40;
          do
          {
            v241 = (__int128 *)a1;
            a1 = (uint64_t)v218;
            if ((*a3)(v218, v241))
            {
              v242 = *(_OWORD *)a1;
              v243 = *(_OWORD *)(a1 + 16);
              *(_QWORD *)&v261[16] = *(_QWORD *)(a1 + 32);
              v260 = v242;
              *(_OWORD *)v261 = v243;
              v244 = v240;
              do
              {
                v245 = *(_OWORD *)(v244 + 56);
                *(_OWORD *)(v244 + 80) = *(_OWORD *)(v244 + 40);
                *(_OWORD *)(v244 + 96) = v245;
                *(_QWORD *)(v244 + 109) = *(_QWORD *)(v244 + 69);
                v246 = (*a3)(&v260, (__int128 *)v244);
                v244 -= 40;
              }
              while ((v246 & 1) != 0);
              v247 = v260;
              v248 = *(_OWORD *)v261;
              *(_QWORD *)(v244 + 109) = *(_QWORD *)&v261[13];
              *(_OWORD *)(v244 + 80) = v247;
              *(_OWORD *)(v244 + 96) = v248;
            }
            v218 = (__int128 *)(a1 + 40);
            v240 += 40;
          }
          while ((__int128 *)(a1 + 40) != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 2;
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = ((char *)a2 - (char *)i) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = a2 - 2;
        result = *(a2 - 2);
        if (result < *i || *i >= result && (result = *(a2 - 1), result < i[1]))
        {
          v97 = *(_OWORD *)i;
          *(_OWORD *)i = *(_OWORD *)v43;
          result = *(double *)&v97;
          *(_OWORD *)v43 = v97;
        }
        return result;
      case 3uLL:
        return sub_1BE68209C(i, i + 2, (__int128 *)a2 - 1);
      case 4uLL:
        v44 = (__int128 *)(i + 2);
        v45 = i + 4;
        sub_1BE68209C(i, i + 2, (__int128 *)i + 2);
        v46 = a2 - 2;
        result = *(a2 - 2);
        v47 = i[4];
        if (result < v47 || v47 >= result && (result = *(a2 - 1), result < i[5]))
        {
          v48 = *(_OWORD *)v45;
          *(_OWORD *)v45 = *(_OWORD *)v46;
          *(_OWORD *)v46 = v48;
          result = *v45;
          if (*v45 < *(double *)v44 || *(double *)v44 >= result && (result = i[5], result < i[3]))
          {
            v49 = *v44;
            *v44 = *(_OWORD *)v45;
            *(_OWORD *)v45 = v49;
            result = i[2];
            if (result < *i || *i >= result && (result = i[3], result < i[1]))
            {
              v98 = *(_OWORD *)i;
              *(_OWORD *)i = *v44;
              result = *(double *)&v98;
              *v44 = v98;
            }
          }
        }
        return result;
      case 5uLL:
        return sub_1BE6824CC(i, i + 2, (uint64_t)(i + 4), (uint64_t)(i + 6), (_QWORD *)a2 - 2);
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v60 = (v12 - 2) >> 1;
            v61 = v60;
            while (1)
            {
              v63 = v61;
              if (v60 >= v61)
              {
                v64 = (2 * v61) | 1;
                v65 = &i[2 * v64];
                if (2 * v63 + 2 < (uint64_t)v12)
                {
                  v66 = v65[2];
                  if (*v65 < v66 || v66 >= *v65 && i[2 * v64 + 1] < v65[3])
                  {
                    v65 += 2;
                    v64 = 2 * v63 + 2;
                  }
                }
                v67 = &i[2 * v63];
                v68 = *v67;
                if (*v65 >= *v67)
                {
                  if (v68 < *v65)
                  {
                    v69 = v67[1];
LABEL_135:
                    *(_OWORD *)v67 = *(_OWORD *)v65;
                    if (v60 >= v64)
                    {
                      while (1)
                      {
                        v70 = 2 * v64;
                        v64 = (2 * v64) | 1;
                        v62 = &i[2 * v64];
                        v71 = v70 + 2;
                        if (v71 < (uint64_t)v12)
                        {
                          v72 = v62[2];
                          if (*v62 < v72 || v72 >= *v62 && i[2 * v64 + 1] < v62[3])
                          {
                            v62 += 2;
                            v64 = v71;
                          }
                        }
                        if (*v62 < v68 || v68 >= *v62 && v62[1] < v69)
                          break;
                        *(_OWORD *)v65 = *(_OWORD *)v62;
                        v65 = v62;
                        if (v60 < v64)
                          goto LABEL_123;
                      }
                    }
                    v62 = v65;
LABEL_123:
                    *v62 = v68;
                    v62[1] = v69;
                    goto LABEL_124;
                  }
                  v69 = i[2 * v63 + 1];
                  if (v65[1] >= v69)
                    goto LABEL_135;
                }
              }
LABEL_124:
              v61 = v63 - 1;
              if (!v63)
              {
                v73 = (unint64_t)v11 >> 4;
                while (1)
                {
                  v75 = 0;
                  v99 = *(_OWORD *)i;
                  v76 = i;
                  do
                  {
                    v77 = v76;
                    v78 = v75 + 1;
                    v76 += 2 * v75 + 2;
                    v79 = 2 * v75;
                    v75 = (2 * v75) | 1;
                    v80 = v79 + 2;
                    if (v80 < v73)
                    {
                      v81 = v76[2];
                      if (*v76 < v81 || v81 >= *v76 && v77[2 * v78 + 1] < v76[3])
                      {
                        v76 += 2;
                        v75 = v80;
                      }
                    }
                    *(_OWORD *)v77 = *(_OWORD *)v76;
                  }
                  while (v75 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                  a2 -= 2;
                  if (v76 == a2)
                  {
                    result = *(double *)&v99;
                    *(_OWORD *)v76 = v99;
                  }
                  else
                  {
                    *(_OWORD *)v76 = *(_OWORD *)a2;
                    result = *(double *)&v99;
                    *(_OWORD *)a2 = v99;
                    v82 = (char *)v76 - (char *)i + 16;
                    if (v82 >= 17)
                    {
                      v83 = ((unint64_t)v82 >> 4) - 2;
                      v84 = v83 >> 1;
                      v85 = &i[2 * (v83 >> 1)];
                      result = *v76;
                      if (*v85 < *v76)
                      {
                        v86 = v76[1];
LABEL_162:
                        *(_OWORD *)v76 = *(_OWORD *)v85;
                        if (v83 >= 2)
                        {
                          while (1)
                          {
                            v88 = v84 - 1;
                            v84 = (v84 - 1) >> 1;
                            v87 = &i[2 * v84];
                            if (*v87 >= result && (result < *v87 || i[2 * v84 + 1] >= v86))
                              break;
                            *(_OWORD *)v85 = *(_OWORD *)v87;
                            v85 = &i[2 * v84];
                            if (v88 <= 1)
                              goto LABEL_164;
                          }
                        }
                        v87 = v85;
LABEL_164:
                        *v87 = result;
                        v87[1] = v86;
                        goto LABEL_149;
                      }
                      if (result >= *v85)
                      {
                        v86 = v76[1];
                        if (i[2 * v84 + 1] < v86)
                          goto LABEL_162;
                      }
                    }
                  }
LABEL_149:
                  if (v73-- <= 2)
                    return result;
                }
              }
            }
          }
          v13 = v12 >> 1;
          v14 = &i[2 * (v12 >> 1)];
          if ((unint64_t)v11 < 0x801)
          {
            sub_1BE68209C(&a1[2 * (v12 >> 1)], a1, (__int128 *)a2 - 1);
            --a3;
            result = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1BE68209C(a1, &a1[2 * (v12 >> 1)], (__int128 *)a2 - 1);
            v15 = 2 * v13;
            v16 = &a1[2 * v13 - 2];
            sub_1BE68209C(a1 + 2, v16, (__int128 *)a2 - 2);
            sub_1BE68209C(a1 + 4, &a1[v15 + 2], (__int128 *)a2 - 3);
            sub_1BE68209C(v16, v14, (__int128 *)&a1[v15 + 2]);
            v94 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)v14 = v94;
            --a3;
            result = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          v17 = *(a1 - 2);
          if (v17 >= result)
          {
            if (result < v17)
            {
              v18 = a1[1];
            }
            else
            {
              v18 = a1[1];
              if (*(a1 - 1) < v18)
                goto LABEL_12;
            }
            v34 = *v9;
            if (result >= *v9 && (v34 < result || v18 >= *(a2 - 1)))
            {
              for (i = a1 + 2; i < a2 && result >= *i && (*i < result || v18 >= i[1]); i += 2)
                ;
            }
            else
            {
              i = a1;
              do
              {
                v35 = i[2];
                i += 2;
                v36 = v35;
              }
              while (result >= v35 && (v36 < result || v18 >= i[1]));
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 2; result < v34 || v34 >= result && v18 < j[1]; j -= 2)
              {
                v38 = *(j - 2);
                v34 = v38;
              }
            }
            while (i < j)
            {
              v96 = *(_OWORD *)i;
              *(_OWORD *)i = *(_OWORD *)j;
              *(_OWORD *)j = v96;
              do
              {
                v39 = i[2];
                i += 2;
                v40 = v39;
              }
              while (result >= v39 && (v40 < result || v18 >= i[1]));
              do
              {
                do
                {
                  v41 = *(j - 2);
                  j -= 2;
                  v42 = v41;
                }
                while (result < v41);
              }
              while (v42 >= result && v18 < j[1]);
            }
            if (i - 2 != a1)
              *(_OWORD *)a1 = *((_OWORD *)i - 1);
            a4 = 0;
            *(i - 2) = result;
            *(i - 1) = v18;
            continue;
          }
LABEL_12:
          v19 = 0;
          v20 = a1[1];
          while (1)
          {
            v21 = a1[v19 + 2];
            if (v21 >= result && (result < v21 || a1[v19 + 3] >= v20))
              break;
            v19 += 2;
          }
          v22 = (unint64_t)&a1[v19 + 2];
          if (v19 * 8)
          {
            v23 = *v9;
            v24 = a2 - 2;
            if (*v9 >= result)
            {
              do
              {
                if (result >= v23 && v24[1] < v20)
                  break;
                v25 = *(v24 - 2);
                v24 -= 2;
                v23 = v25;
              }
              while (v25 >= result);
            }
          }
          else
          {
            v24 = a2;
            if (v22 < (unint64_t)a2)
            {
              v26 = *v9;
              v24 = a2 - 2;
              if (*v9 >= result)
              {
                v24 = a2 - 2;
                do
                {
                  if (result < v26)
                  {
                    if (v22 >= (unint64_t)v24)
                      break;
                  }
                  else if (v22 >= (unint64_t)v24 || v24[1] < v20)
                  {
                    break;
                  }
                  v33 = *(v24 - 2);
                  v24 -= 2;
                  v26 = v33;
                }
                while (v33 >= result);
              }
            }
          }
          i = (double *)v22;
          if (v22 < (unint64_t)v24)
          {
            v27 = v24;
            do
            {
              v95 = *(_OWORD *)i;
              *(_OWORD *)i = *(_OWORD *)v27;
              *(_OWORD *)v27 = v95;
              do
              {
                do
                {
                  v28 = i[2];
                  i += 2;
                  v29 = v28;
                }
                while (v28 < result);
              }
              while (result >= v29 && i[1] < v20);
              do
              {
                v30 = *(v27 - 2);
                v27 -= 2;
                v31 = v30;
              }
              while (v30 >= result && (result < v31 || v27[1] >= v20));
            }
            while (i < v27);
          }
          if (i - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)i - 1);
          *(i - 2) = result;
          *(i - 1) = v20;
          if (v22 < (unint64_t)v24)
          {
LABEL_42:
            sub_1BE68167C(a1, i - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = sub_1BE6821C4(a1, i - 2);
          if (!sub_1BE6821C4(i, a2))
          {
            if (v32)
              continue;
            goto LABEL_42;
          }
          a2 = i - 2;
          if (v32)
            return result;
          goto LABEL_1;
        }
        v50 = i + 2;
        v52 = i == a2 || v50 == a2;
        if ((a4 & 1) != 0)
        {
          if (v52)
            return result;
          v53 = 0;
          v54 = i;
LABEL_108:
          v56 = v54;
          v54 = v50;
          result = v56[2];
          if (result >= *v56)
          {
            if (*v56 < result)
              goto LABEL_107;
            v57 = v56[3];
            if (v57 >= v56[1])
              goto LABEL_107;
          }
          else
          {
            v57 = v56[3];
          }
          *(_OWORD *)v50 = *(_OWORD *)v56;
          v55 = i;
          if (v56 == i)
            goto LABEL_106;
          v58 = v53;
          while (1)
          {
            v59 = *(double *)((char *)i + v58 - 16);
            if (result >= v59)
            {
              if (v59 < result)
              {
                v55 = v56;
LABEL_106:
                *v55 = result;
                v55[1] = v57;
LABEL_107:
                v50 = v54 + 2;
                v53 += 16;
                if (v54 + 2 == a2)
                  return result;
                goto LABEL_108;
              }
              v55 = (double *)((char *)i + v58);
              if (v57 >= *(double *)((char *)i + v58 - 8))
                goto LABEL_106;
            }
            v56 -= 2;
            *(_OWORD *)((char *)i + v58) = *(_OWORD *)((char *)i + v58 - 16);
            v58 -= 16;
            if (!v58)
            {
              v55 = i;
              goto LABEL_106;
            }
          }
        }
        if (!v52)
        {
          while (1)
          {
            v89 = a1;
            a1 = v50;
            result = v89[2];
            if (result < *v89)
              break;
            if (*v89 >= result)
            {
              v90 = v89[3];
              if (v90 < v89[1])
                goto LABEL_187;
            }
LABEL_182:
            v50 += 2;
            if (a1 + 2 == a2)
              return result;
          }
          v90 = v89[3];
          do
          {
            do
            {
LABEL_187:
              v91 = v89;
              *((_OWORD *)v89 + 1) = *(_OWORD *)v89;
              v92 = *(v89 - 2);
              v89 -= 2;
              v93 = v92;
            }
            while (result < v92);
          }
          while (v93 >= result && v90 < *(v91 - 1));
          *v91 = result;
          v91[1] = v90;
          goto LABEL_182;
        }
        return result;
    }
  }
}

  v10 = a2 - 3;
  v82 = a2;
  v84 = a2 - 6;
  v80 = a2 - 9;
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v10, a1))
        {
          v35 = *a1;
          *a1 = *(a2 - 3);
          *(a2 - 3) = v35;
          v36 = a1[1];
          a1[1] = *(a2 - 2);
          *(a2 - 2) = v36;
          v37 = a1[2];
          a1[2] = *(a2 - 1);
          *(a2 - 1) = v37;
        }
        return;
      case 3uLL:
        sub_1BE691924(a1, a1 + 3, v10, a3);
        return;
      case 4uLL:
        sub_1BE691D24(a1, a1 + 3, a1 + 6, v10, a3);
        return;
      case 5uLL:
        sub_1BE691E34(a1, a1 + 3, a1 + 6, a1 + 9, v10, a3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v38 = a1 + 3;
              if (a1 + 3 != a2)
              {
                v39 = 0;
                v40 = a1;
                do
                {
                  v43 = v38;
                  if ((*a3)(v38, v40))
                  {
                    v44 = 0;
                    v87 = *(_OWORD *)v43;
                    v88 = v40[5];
                    *v43 = 0;
                    v43[1] = 0;
                    v43[2] = 0;
                    v45 = v39;
                    do
                    {
                      v46 = (char *)a1 + v45;
                      if (v44)
                      {
                        *((_QWORD *)v46 + 4) = v44;
                        operator delete(v44);
                        *((_QWORD *)v46 + 3) = 0;
                        *((_QWORD *)v46 + 4) = 0;
                        *((_QWORD *)v46 + 5) = 0;
                      }
                      *(_OWORD *)(v46 + 24) = *(_OWORD *)v46;
                      *((_QWORD *)v46 + 5) = *((_QWORD *)v46 + 2);
                      *((_QWORD *)v46 + 1) = 0;
                      *((_QWORD *)v46 + 2) = 0;
                      *(_QWORD *)v46 = 0;
                      if (!v45)
                      {
                        v41 = a1 + 1;
                        v42 = a1;
                        goto LABEL_71;
                      }
                      v47 = (*a3)((uint64_t *)&v87, (uint64_t *)((char *)a1 + v45 - 24));
                      v44 = *(void **)v46;
                      v45 -= 24;
                    }
                    while ((v47 & 1) != 0);
                    v48 = (char *)a1 + v45;
                    v41 = (uint64_t *)((char *)a1 + v45 + 32);
                    v42 = (uint64_t *)(v48 + 24);
                    if (v44)
                    {
                      *((_QWORD *)v48 + 4) = v44;
                      operator delete(v44);
                      *v42 = 0;
                      v42[1] = 0;
                      v42[2] = 0;
                    }
LABEL_71:
                    *v42 = v87;
                    *v41 = *((_QWORD *)&v87 + 1);
                    v42[2] = v88;
                    a2 = v82;
                  }
                  v38 = v43 + 3;
                  v39 += 24;
                  v40 = v43;
                }
                while (v43 + 3 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v73 = a1 + 3;
            if (a1 + 3 != a2)
            {
              v74 = a1 - 3;
              do
              {
                v75 = v73;
                if ((*a3)(v73, a1))
                {
                  v76 = 0;
                  v87 = *(_OWORD *)v75;
                  v88 = a1[5];
                  *v75 = 0;
                  v75[1] = 0;
                  v75[2] = 0;
                  v77 = v74;
                  do
                  {
                    if (v76)
                    {
                      v77[7] = (uint64_t)v76;
                      operator delete(v76);
                      v77[6] = 0;
                      v77[7] = 0;
                      v77[8] = 0;
                    }
                    *((_OWORD *)v77 + 3) = *(_OWORD *)(v77 + 3);
                    v77[8] = v77[5];
                    v77[4] = 0;
                    v77[5] = 0;
                    v77[3] = 0;
                    v78 = (*a3)((uint64_t *)&v87, v77);
                    v76 = (void *)v77[3];
                    v77 -= 3;
                  }
                  while ((v78 & 1) != 0);
                  if (v76)
                  {
                    v77[7] = (uint64_t)v76;
                    operator delete(v76);
                    v77[6] = 0;
                    v77[7] = 0;
                    v77[8] = 0;
                  }
                  *((_OWORD *)v77 + 3) = v87;
                  v77[8] = v88;
                }
                v73 = v75 + 3;
                v74 += 3;
                a1 = v75;
              }
              while (v75 + 3 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v49 = (v13 - 2) >> 1;
            v85 = v49;
            do
            {
              v50 = v49;
              if (v85 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &a1[3 * v51];
                if (2 * v49 + 2 < (uint64_t)v13 && (*a3)(&a1[3 * v51], v52 + 3))
                {
                  v52 += 3;
                  v51 = 2 * v50 + 2;
                }
                v53 = &a1[3 * v50];
                if (((*a3)(v52, v53) & 1) == 0)
                {
                  v54 = 0;
                  v87 = *(_OWORD *)v53;
                  v88 = a1[3 * v50 + 2];
                  *v53 = 0;
                  v53[1] = 0;
                  v53[2] = 0;
                  while (1)
                  {
                    v55 = v52;
                    if (v54)
                    {
                      v53[1] = (uint64_t)v54;
                      operator delete(v54);
                      *v53 = 0;
                      v53[1] = 0;
                      v53[2] = 0;
                    }
                    *(_OWORD *)v53 = *(_OWORD *)v52;
                    v53[2] = v52[2];
                    *v52 = 0;
                    v52[1] = 0;
                    v52[2] = 0;
                    if (v85 < v51)
                      break;
                    v56 = (2 * v51) | 1;
                    v52 = &a1[3 * v56];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v13)
                    {
                      v51 = v56;
                    }
                    else if ((*a3)(&a1[3 * v56], v52 + 3))
                    {
                      v52 += 3;
                    }
                    else
                    {
                      v51 = v56;
                    }
                    v57 = (*a3)(v52, (uint64_t *)&v87);
                    v54 = (void *)*v55;
                    v53 = v55;
                    if (v57)
                    {
                      if (v54)
                      {
                        v55[1] = (uint64_t)v54;
                        operator delete(v54);
                        *v55 = 0;
                        v55[1] = 0;
                        v55[2] = 0;
                      }
                      break;
                    }
                  }
                  *(_OWORD *)v55 = v87;
                  v55[2] = v88;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v58 = v12 / 0x18uLL;
            v59 = v82;
            do
            {
              v83 = v59;
              if (v58 >= 2)
              {
                v61 = 0;
                v86 = *a1;
                v79 = a1[2];
                v81 = a1[1];
                a1[1] = 0;
                a1[2] = 0;
                v62 = a1;
                *a1 = 0;
                do
                {
                  v63 = v62;
                  v62 += 3 * v61 + 3;
                  v64 = 2 * v61;
                  v61 = (2 * v61) | 1;
                  v65 = v64 + 2;
                  if (v64 + 2 < v58)
                  {
                    if ((*a3)(v62, v62 + 3))
                    {
                      v62 += 3;
                      v61 = v65;
                    }
                    v66 = (void *)*v63;
                    if (*v63)
                    {
                      v63[1] = (uint64_t)v66;
                      operator delete(v66);
                      *v63 = 0;
                      v63[1] = 0;
                      v63[2] = 0;
                    }
                  }
                  *(_OWORD *)v63 = *(_OWORD *)v62;
                  v63[2] = v62[2];
                  *v62 = 0;
                  v62[1] = 0;
                  v62[2] = 0;
                }
                while (v61 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
                if (v62 == v83 - 3)
                {
                  *v62 = v86;
                  v62[1] = v81;
                  v62[2] = v79;
                }
                else
                {
                  *(_OWORD *)v62 = *(_OWORD *)(v83 - 3);
                  v62[2] = *(v83 - 1);
                  *(v83 - 3) = v86;
                  *(v83 - 2) = v81;
                  *(v83 - 1) = v79;
                  v67 = (char *)v62 - (char *)a1 + 24;
                  if (v67 >= 25)
                  {
                    v68 = (v67 / 0x18uLL - 2) >> 1;
                    v69 = &a1[3 * v68];
                    if ((*a3)(v69, v62))
                    {
                      v70 = 0;
                      v87 = *(_OWORD *)v62;
                      v88 = v62[2];
                      *v62 = 0;
                      v62[1] = 0;
                      v62[2] = 0;
                      while (1)
                      {
                        v71 = v69;
                        if (v70)
                        {
                          v62[1] = (uint64_t)v70;
                          operator delete(v70);
                          *v62 = 0;
                          v62[1] = 0;
                          v62[2] = 0;
                        }
                        *(_OWORD *)v62 = *(_OWORD *)v69;
                        v62[2] = v69[2];
                        *v69 = 0;
                        v69[1] = 0;
                        v69[2] = 0;
                        if (!v68)
                          break;
                        v68 = (v68 - 1) >> 1;
                        v69 = &a1[3 * v68];
                        v72 = (*a3)(v69, (uint64_t *)&v87);
                        v70 = (void *)*v71;
                        v62 = v71;
                        if ((v72 & 1) == 0)
                        {
                          if (v70)
                          {
                            v71[1] = (uint64_t)v70;
                            operator delete(v70);
                            *v71 = 0;
                            v71[1] = 0;
                            v71[2] = 0;
                          }
                          break;
                        }
                      }
                      *(_OWORD *)v71 = v87;
                      v71[2] = v88;
                    }
                  }
                }
              }
              v59 = v83 - 3;
            }
            while ((unint64_t)v58-- > 2);
          }
          return;
        }
        v14 = &a1[3 * (v13 >> 1)];
        if ((unint64_t)v12 < 0xC01)
        {
          sub_1BE691924(&a1[3 * (v13 >> 1)], a1, v10, a3);
          --a4;
          a2 = v82;
          if ((a5 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_1BE691924(a1, &a1[3 * (v13 >> 1)], v10, a3);
          v15 = 3 * (v13 >> 1);
          sub_1BE691924(a1 + 3, &a1[v15 - 3], v84, a3);
          sub_1BE691924(a1 + 6, &a1[v15 + 3], v80, a3);
          sub_1BE691924(&a1[v15 - 3], &a1[v15], &a1[v15 + 3], a3);
          v16 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v16;
          v17 = a1[2];
          a1[2] = a1[v15 + 2];
          a1[v15 + 2] = v17;
          --a4;
          a2 = v82;
          if ((a5 & 1) != 0)
            goto LABEL_10;
        }
        if (((*a3)(a1 - 3, a1) & 1) == 0)
        {
          v87 = *(_OWORD *)a1;
          v88 = a1[2];
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          if (((*a3)((uint64_t *)&v87, v10) & 1) != 0)
          {
            v11 = a1;
            do
              v11 += 3;
            while (((*a3)((uint64_t *)&v87, v11) & 1) == 0);
          }
          else
          {
            v28 = a1 + 3;
            do
            {
              v11 = v28;
              if (v28 >= a2)
                break;
              v29 = (*a3)((uint64_t *)&v87, v28);
              v28 = v11 + 3;
            }
            while (!v29);
          }
          v30 = a2;
          if (v11 < a2)
          {
            v30 = a2;
            do
              v30 -= 3;
            while (((*a3)((uint64_t *)&v87, v30) & 1) != 0);
          }
          while (v11 < v30)
          {
            v31 = *v11;
            *v11 = *v30;
            *v30 = v31;
            v32 = v11[1];
            v11[1] = v30[1];
            v30[1] = v32;
            v33 = v11[2];
            v11[2] = v30[2];
            v30[2] = v33;
            do
              v11 += 3;
            while (!(*a3)((uint64_t *)&v87, v11));
            do
              v30 -= 3;
            while (((*a3)((uint64_t *)&v87, v30) & 1) != 0);
          }
          v34 = (void *)*a1;
          if (v11 - 3 == a1)
          {
            if (!v34)
              goto LABEL_57;
            *(v11 - 2) = (uint64_t)v34;
            operator delete(v34);
          }
          else
          {
            if (v34)
            {
              a1[1] = (uint64_t)v34;
              operator delete(v34);
              *a1 = 0;
              a1[1] = 0;
              a1[2] = 0;
            }
            *(_OWORD *)a1 = *(_OWORD *)(v11 - 3);
            a1[2] = *(v11 - 1);
          }
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 1) = 0;
LABEL_57:
          a5 = 0;
          *(_OWORD *)(v11 - 3) = v87;
          *(v11 - 1) = v88;
          continue;
        }
LABEL_10:
        v18 = 0;
        v87 = *(_OWORD *)a1;
        v88 = a1[2];
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        do
        {
          v19 = (*a3)(&a1[v18 + 3], (uint64_t *)&v87);
          v18 += 3;
        }
        while ((v19 & 1) != 0);
        v20 = &a1[v18];
        v21 = a2;
        if (v18 == 3)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v21 -= 3;
          }
          while (((*a3)(v21, (uint64_t *)&v87) & 1) == 0);
        }
        else
        {
          do
            v21 -= 3;
          while (!(*a3)(v21, (uint64_t *)&v87));
        }
        v11 = &a1[v18];
        if (v20 < v21)
        {
          v22 = v21;
          do
          {
            v23 = *v11;
            *v11 = *v22;
            *v22 = v23;
            v24 = v11[1];
            v11[1] = v22[1];
            v22[1] = v24;
            v25 = v11[2];
            v11[2] = v22[2];
            v22[2] = v25;
            do
              v11 += 3;
            while (((*a3)(v11, (uint64_t *)&v87) & 1) != 0);
            do
              v22 -= 3;
            while (!(*a3)(v22, (uint64_t *)&v87));
          }
          while (v11 < v22);
        }
        v26 = (void *)*a1;
        if (v11 - 3 == a1)
        {
          if (v26)
          {
            *(v11 - 2) = (uint64_t)v26;
            operator delete(v26);
            goto LABEL_30;
          }
        }
        else
        {
          if (v26)
          {
            a1[1] = (uint64_t)v26;
            operator delete(v26);
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v11 - 3);
          a1[2] = *(v11 - 1);
LABEL_30:
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 1) = 0;
        }
        *(_OWORD *)(v11 - 3) = v87;
        *(v11 - 1) = v88;
        if (v20 < v21)
        {
LABEL_34:
          sub_1BE690D90(a1, v11 - 3, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = sub_1BE691A98(a1, v11 - 3, a3);
        if (!sub_1BE691A98(v11, a2, a3))
        {
          if (v27)
            continue;
          goto LABEL_34;
        }
        a2 = v11 - 3;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v150.origin.x = a2[-1].origin.x;
        v150.origin.y = a2[-1].origin.y;
        v47 = a2 - 1;
        v150.size.width = v47->size.width;
        v150.size.height = v47->size.height;
        MinX = CGRectGetMinX(v150);
        if (MinX < CGRectGetMinX(*a1))
        {
          origin = a1->origin;
          size = a1->size;
          v49 = v47->size;
          a1->origin = v47->origin;
          a1->size = v49;
          v47->origin = origin;
          v47->size = size;
        }
        return;
      case 3:
        sub_1BE69717C(a1, &a1[1].origin, &a2[-1].origin);
        return;
      case 4:
        sub_1BE6974B4(a1, &a1[1].origin, &a1[2].origin, &a2[-1].origin);
        return;
      case 5:
        sub_1BE69705C(a1, &a1[1].origin, &a1[2].origin, &a1[3].origin, &a2[-1].origin);
        return;
      default:
        if (v9 <= 767)
        {
          v50 = a1 + 1;
          v52 = a1 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = a1;
              do
              {
                p_x = &v50->origin.x;
                v57 = CGRectGetMinX(v54[1]);
                if (v57 < CGRectGetMinX(*v54))
                {
                  v58 = *p_x;
                  y = v54[1].origin.y;
                  width = v54[1].size.width;
                  v61 = v53;
                  height = v54[1].size.height;
                  do
                  {
                    v63 = (char *)a1 + v61;
                    v64 = *(__int128 *)((char *)&a1->size + v61);
                    *((_OWORD *)v63 + 2) = *(CGPoint *)((char *)&a1->origin + v61);
                    *((_OWORD *)v63 + 3) = v64;
                    if (!v61)
                    {
                      v55 = &a1->origin.x;
                      goto LABEL_67;
                    }
                    v151.origin.x = v58;
                    v151.origin.y = y;
                    v151.size.width = width;
                    v151.size.height = height;
                    v65 = CGRectGetMinX(v151);
                    v61 -= 32;
                  }
                  while (v65 < CGRectGetMinX(*((CGRect *)v63 - 1)));
                  v55 = (CGFloat *)((char *)&a1[1].origin.x + v61);
LABEL_67:
                  *v55 = v58;
                  v55[1] = y;
                  v55[2] = width;
                  v55[3] = height;
                }
                v50 = (CGRect *)(p_x + 4);
                v53 += 32;
                v54 = (CGRect *)p_x;
              }
              while (p_x + 4 != (CGFloat *)a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v107 = (_QWORD *)&v50->origin.x;
              v108 = CGRectGetMinX(a1[1]);
              if (v108 < CGRectGetMinX(*a1))
              {
                v109 = *v107;
                v110 = a1[1].origin.y;
                v111 = a1[1].size.width;
                v112 = v107;
                v113 = a1[1].size.height;
                do
                {
                  v115 = *(v112 - 1);
                  *v112 = *(v112 - 2);
                  v112[1] = v115;
                  v116 = v109;
                  *(CGFloat *)&v115 = v110;
                  v117 = v111;
                  v118 = v113;
                  v119 = CGRectGetMinX(*(CGRect *)((char *)&v115 - 8));
                  v154 = *(CGRect *)((_BYTE *)v112 - 2);
                  v114 = (CGFloat *)(v112 - 2);
                  v112 -= 2;
                }
                while (v119 < CGRectGetMinX(v154));
                *(_QWORD *)v114 = v109;
                v114[1] = v110;
                v114[2] = v111;
                v114[3] = v113;
              }
              v50 = (CGRect *)(v107 + 4);
              a1 = (CGRect *)v107;
            }
            while (v107 + 4 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v120 = a2;
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &a1[v69];
                if (2 * v67 + 2 < v10)
                {
                  v71 = CGRectGetMinX(*v70);
                  if (v71 < CGRectGetMinX(v70[1]))
                  {
                    ++v70;
                    v69 = 2 * v68 + 2;
                  }
                }
                v72 = &a1[v68];
                v73 = CGRectGetMinX(*v70);
                if (v73 >= CGRectGetMinX(*v72))
                {
                  x = v72->origin.x;
                  v75 = v72->origin.y;
                  v76 = v72->size.width;
                  v77 = v72->size.height;
                  do
                  {
                    p_origin = &v72->origin;
                    v72 = v70;
                    v80 = v70->size;
                    *p_origin = v70->origin;
                    p_origin[1] = (CGPoint)v80;
                    if (v66 < v69)
                      break;
                    v81 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = &a1[v69];
                    v82 = v81 + 2;
                    if (v81 + 2 < v10)
                    {
                      v83 = CGRectGetMinX(*v70);
                      if (v83 < CGRectGetMinX(v70[1]))
                      {
                        ++v70;
                        v69 = v82;
                      }
                    }
                    v78 = CGRectGetMinX(*v70);
                    v152.origin.x = x;
                    v152.origin.y = v75;
                    v152.size.width = v76;
                    v152.size.height = v77;
                  }
                  while (v78 >= CGRectGetMinX(v152));
                  v72->origin.x = x;
                  v72->origin.y = v75;
                  v72->size.width = v76;
                  v72->size.height = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v84 = (unint64_t)v9 >> 5;
            v85 = &v120->origin;
            do
            {
              v87 = (_OWORD *)&v85->x;
              v88 = 0;
              v125 = a1->origin;
              v130 = a1->size;
              v89 = a1;
              do
              {
                v91 = &v89->origin;
                v89 += v88 + 1;
                v92 = 2 * v88;
                v88 = (2 * v88) | 1;
                v93 = v92 + 2;
                if (v92 + 2 < v84)
                {
                  v94 = CGRectGetMinX(*v89);
                  if (v94 < CGRectGetMinX(v89[1]))
                  {
                    ++v89;
                    v88 = v93;
                  }
                }
                v90 = v89->size;
                *v91 = v89->origin;
                v91[1] = (CGPoint)v90;
              }
              while (v88 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
              v85 -= 2;
              if (v89 == (CGRect *)(v87 - 2))
              {
                v89->origin = v125;
                v89->size = v130;
              }
              else
              {
                v95 = (CGSize)*(v87 - 1);
                v89->origin = *v85;
                v89->size = v95;
                *v85 = v125;
                *(v87 - 1) = v130;
                v96 = (char *)v89 - (char *)a1 + 32;
                if (v96 >= 33)
                {
                  v97 = (((unint64_t)v96 >> 5) - 2) >> 1;
                  v98 = &a1[v97];
                  v99 = CGRectGetMinX(*v98);
                  if (v99 < CGRectGetMinX(*v89))
                  {
                    v100 = v89->origin.x;
                    v101 = v89->origin.y;
                    v102 = v89->size.width;
                    v103 = v89->size.height;
                    do
                    {
                      v104 = &v89->origin;
                      v89 = v98;
                      v105 = v98->size;
                      *v104 = v98->origin;
                      v104[1] = (CGPoint)v105;
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = &a1[v97];
                      v106 = CGRectGetMinX(*v98);
                      v153.origin.x = v100;
                      v153.origin.y = v101;
                      v153.size.width = v102;
                      v153.size.height = v103;
                    }
                    while (v106 < CGRectGetMinX(v153));
                    v89->origin.x = v100;
                    v89->origin.y = v101;
                    v89->size.width = v102;
                    v89->size.height = v103;
                  }
                }
              }
            }
            while (v84-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 <= 0x1000)
        {
          sub_1BE69717C(v12, &a1->origin, &a2[-1].origin);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_1BE69717C(a1, &v12->origin, &a2[-1].origin);
          v13 = v11;
          sub_1BE69717C(a1 + 1, &a1[v13 - 1].origin, &a2[-2].origin);
          sub_1BE69717C(a1 + 2, &a1[v13 + 1].origin, &a2[-3].origin);
          sub_1BE69717C(&a1[v13 - 1], &v12->origin, &a1[v13 + 1].origin);
          v121 = a1->origin;
          v126 = a1->size;
          v14 = v12->size;
          a1->origin = v12->origin;
          a1->size = v14;
          v12->origin = v121;
          v12->size = v126;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        v15 = CGRectGetMinX(a1[-1]);
        if (v15 >= CGRectGetMinX(*a1))
        {
          v32 = a1->origin.x;
          v33 = a1->origin.y;
          v34 = a1->size.width;
          v35 = a1->size.height;
          v140.origin.x = a1->origin.x;
          v140.origin.y = v33;
          v140.size.width = v34;
          v140.size.height = v35;
          v36 = CGRectGetMinX(v140);
          if (v36 >= CGRectGetMinX(a2[-1]))
          {
            v38 = a1 + 1;
            do
            {
              v8 = v38;
              if (v38 >= a2)
                break;
              v143.origin.x = v32;
              v143.origin.y = v33;
              v143.size.width = v34;
              v143.size.height = v35;
              v39 = CGRectGetMinX(v143);
              v40 = CGRectGetMinX(*v8);
              v38 = v8 + 1;
            }
            while (v39 >= v40);
          }
          else
          {
            v8 = a1;
            do
            {
              v141.origin.x = v32;
              v141.origin.y = v33;
              v141.size.width = v34;
              v141.size.height = v35;
              v37 = CGRectGetMinX(v141);
              v142.origin.x = v8[1].origin.x;
              v142.origin.y = v8[1].origin.y;
              ++v8;
              v142.size.width = v8->size.width;
              v142.size.height = v8->size.height;
            }
            while (v37 >= CGRectGetMinX(v142));
          }
          v41 = a2;
          if (v8 < a2)
          {
            v41 = a2;
            do
            {
              v144.origin.x = v32;
              v144.origin.y = v33;
              v144.size.width = v34;
              v144.size.height = v35;
              v42 = CGRectGetMinX(v144);
              v145.origin.x = v41[-1].origin.x;
              v145.origin.y = v41[-1].origin.y;
              --v41;
              v145.size.width = v41->size.width;
              v145.size.height = v41->size.height;
            }
            while (v42 < CGRectGetMinX(v145));
          }
          while (v8 < v41)
          {
            v123 = v8->origin;
            v128 = v8->size;
            v43 = v41->size;
            v8->origin = v41->origin;
            v8->size = v43;
            v41->origin = v123;
            v41->size = v128;
            do
            {
              v146.origin.x = v32;
              v146.origin.y = v33;
              v146.size.width = v34;
              v146.size.height = v35;
              v44 = CGRectGetMinX(v146);
              v147.origin.x = v8[1].origin.x;
              v147.origin.y = v8[1].origin.y;
              ++v8;
              v147.size.width = v8->size.width;
              v147.size.height = v8->size.height;
            }
            while (v44 >= CGRectGetMinX(v147));
            do
            {
              v148.origin.x = v32;
              v148.origin.y = v33;
              v148.size.width = v34;
              v148.size.height = v35;
              v45 = CGRectGetMinX(v148);
              v149.origin.x = v41[-1].origin.x;
              v149.origin.y = v41[-1].origin.y;
              --v41;
              v149.size.width = v41->size.width;
              v149.size.height = v41->size.height;
            }
            while (v45 < CGRectGetMinX(v149));
          }
          if (&v8[-1] != a1)
          {
            v46 = v8[-1].size;
            a1->origin = v8[-1].origin;
            a1->size = v46;
          }
          a4 = 0;
          v8[-1].origin.x = v32;
          v8[-1].origin.y = v33;
          v8[-1].size.width = v34;
          v8[-1].size.height = v35;
          continue;
        }
LABEL_10:
        v16 = 0;
        v17 = a1->origin.x;
        v18 = a1->origin.y;
        v19 = a1->size.width;
        v20 = a1->size.height;
        do
        {
          v21 = CGRectGetMinX(a1[v16 + 1]);
          v131.origin.x = v17;
          v131.origin.y = v18;
          v131.size.width = v19;
          v131.size.height = v20;
          ++v16;
        }
        while (v21 < CGRectGetMinX(v131));
        v22 = &a1[v16];
        v23 = a2;
        if (v16 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v134.origin.x = v23[-1].origin.x;
            v134.origin.y = v23[-1].origin.y;
            --v23;
            v134.size.width = v23->size.width;
            v134.size.height = v23->size.height;
            v25 = CGRectGetMinX(v134);
            v135.origin.x = v17;
            v135.origin.y = v18;
            v135.size.width = v19;
            v135.size.height = v20;
          }
          while (v25 >= CGRectGetMinX(v135));
        }
        else
        {
          do
          {
            v132.origin.x = v23[-1].origin.x;
            v132.origin.y = v23[-1].origin.y;
            --v23;
            v132.size.width = v23->size.width;
            v132.size.height = v23->size.height;
            v24 = CGRectGetMinX(v132);
            v133.origin.x = v17;
            v133.origin.y = v18;
            v133.size.width = v19;
            v133.size.height = v20;
          }
          while (v24 >= CGRectGetMinX(v133));
        }
        v8 = &a1[v16];
        if (v22 < v23)
        {
          v26 = &v23->origin;
          do
          {
            v122 = v8->origin;
            v127 = v8->size;
            v27 = (CGSize)v26[1];
            v8->origin = *v26;
            v8->size = v27;
            *v26 = v122;
            v26[1] = (CGPoint)v127;
            do
            {
              v136.origin.x = v8[1].origin.x;
              v136.origin.y = v8[1].origin.y;
              ++v8;
              v136.size.width = v8->size.width;
              v136.size.height = v8->size.height;
              v28 = CGRectGetMinX(v136);
              v137.origin.x = v17;
              v137.origin.y = v18;
              v137.size.width = v19;
              v137.size.height = v20;
            }
            while (v28 < CGRectGetMinX(v137));
            do
            {
              v138.origin.x = v26[-2].x;
              v138.origin.y = v26[-2].y;
              v26 -= 2;
              v138.size.width = v26[1].x;
              v138.size.height = v26[1].y;
              v29 = CGRectGetMinX(v138);
              v139.origin.x = v17;
              v139.origin.y = v18;
              v139.size.width = v19;
              v139.size.height = v20;
            }
            while (v29 >= CGRectGetMinX(v139));
          }
          while (v8 < (CGRect *)v26);
        }
        if (&v8[-1] != a1)
        {
          v30 = v8[-1].size;
          a1->origin = v8[-1].origin;
          a1->size = v30;
        }
        v8[-1].origin.x = v17;
        v8[-1].origin.y = v18;
        v8[-1].size.width = v19;
        v8[-1].size.height = v20;
        if (v22 < v23)
        {
LABEL_29:
          sub_1BE696698(a1, &v8[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_1BE6972B0((__int128 *)a1, v8 - 1);
        if (!sub_1BE6972B0((__int128 *)v8, a2))
        {
          if (v31)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 1;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

  n128_f64 = a2[-2].n128_f64;
  v10 = a2[-4].n128_f64;
  v11 = a2[-6].n128_f64;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        v91 = a2[-2].n128_f64[0];
        v90 = a2 - 2;
        a5.n128_f64[0] = v91;
        if (v91 < *(double *)v12)
          goto LABEL_100;
        return a5.n128_f64[0];
      case 3:
        v92 = (__n128 *)(v12 + 32);
        a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
        v93 = a2[-2].n128_f64[0];
        v90 = a2 - 2;
        v94 = v93;
        if (a5.n128_f64[0] >= *(double *)v12)
        {
          if (v94 < a5.n128_f64[0])
          {
            a5 = *v92;
            v213 = *(__n128 *)(v12 + 48);
            v142 = v90[1];
            *v92 = *v90;
            *(__n128 *)(v12 + 48) = v142;
            *v90 = a5;
            v90[1] = v213;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
            if (a5.n128_f64[0] < *(double *)v12)
            {
              v181 = *(__n128 *)v12;
              v214 = *(_OWORD *)(v12 + 16);
              v143 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v92;
              *(_OWORD *)(v12 + 16) = v143;
              a5.n128_u64[0] = v181.n128_u64[0];
              *v92 = v181;
              *(_OWORD *)(v12 + 48) = v214;
            }
          }
        }
        else
        {
          if (v94 < a5.n128_f64[0])
          {
LABEL_100:
            v176 = *(__n128 *)v12;
            v207 = *(__n128 *)(v12 + 16);
            v95 = v90[1];
            *(__n128 *)v12 = *v90;
            *(__n128 *)(v12 + 16) = v95;
            a5 = v176;
            v96 = v207;
LABEL_101:
            *v90 = a5;
            v90[1] = v96;
            return a5.n128_f64[0];
          }
          v183 = *(__n128 *)v12;
          v216 = *(_OWORD *)(v12 + 16);
          v148 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v92;
          *(_OWORD *)(v12 + 16) = v148;
          *v92 = v183;
          *(_OWORD *)(v12 + 48) = v216;
          a5.n128_u64[0] = v90->n128_u64[0];
          if (v90->n128_f64[0] < *(double *)(v12 + 32))
          {
            a5 = *v92;
            v96 = *(__n128 *)(v12 + 48);
            v149 = v90[1];
            *v92 = *v90;
            *(__n128 *)(v12 + 48) = v149;
            goto LABEL_101;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = sub_1BE6FED30((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), a2 - 2, a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v97 = (__n128 *)(v12 + 32);
        v98 = (__n128 *)(v12 + 64);
        v99 = (__n128 *)(v12 + 96);
        sub_1BE6FED30((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a5);
        v101 = a2[-2].n128_f64[0];
        v100 = a2 - 2;
        a5.n128_f64[0] = v101;
        if (v101 < *(double *)(v12 + 96))
        {
          a5 = *v99;
          v208 = *(__n128 *)(v12 + 112);
          v102 = v100[1];
          *v99 = *v100;
          *(__n128 *)(v12 + 112) = v102;
          *v100 = a5;
          v100[1] = v208;
          a5.n128_u64[0] = v99->n128_u64[0];
          if (v99->n128_f64[0] < v98->n128_f64[0])
          {
            v103 = *v98;
            a5 = *(__n128 *)(v12 + 80);
            v104 = *(_OWORD *)(v12 + 112);
            *v98 = *v99;
            *(_OWORD *)(v12 + 80) = v104;
            *v99 = v103;
            *(__n128 *)(v12 + 112) = a5;
            a5.n128_u64[0] = v98->n128_u64[0];
            if (v98->n128_f64[0] < v97->n128_f64[0])
            {
              v105 = *v97;
              a5 = *(__n128 *)(v12 + 48);
              v106 = *(_OWORD *)(v12 + 80);
              *v97 = *v98;
              *(_OWORD *)(v12 + 48) = v106;
              *v98 = v105;
              *(__n128 *)(v12 + 80) = a5;
              a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
              if (a5.n128_f64[0] < *(double *)v12)
              {
                v177 = *(__n128 *)v12;
                v209 = *(_OWORD *)(v12 + 16);
                v107 = *(_OWORD *)(v12 + 48);
                *(__n128 *)v12 = *v97;
                *(_OWORD *)(v12 + 16) = v107;
                a5.n128_u64[0] = v177.n128_u64[0];
                *v97 = v177;
                *(_OWORD *)(v12 + 48) = v209;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v118 = (unint64_t)(v14 - 2) >> 1;
              v119 = v118;
              do
              {
                if (v118 >= v119)
                {
                  v121 = (2 * v119) | 1;
                  v122 = v12 + 32 * v121;
                  if (2 * v119 + 2 < v14 && *(double *)v122 < *(double *)(v122 + 32))
                  {
                    v122 += 32;
                    v121 = 2 * v119 + 2;
                  }
                  v123 = v12 + 32 * v119;
                  v124 = *(double *)v123;
                  if (*(double *)v122 >= *(double *)v123)
                  {
                    v211 = *(_QWORD *)(v123 + 24);
                    v179 = *(_OWORD *)(v123 + 8);
                    do
                    {
                      v125 = (_OWORD *)v123;
                      v123 = v122;
                      v126 = *(_OWORD *)(v122 + 16);
                      *v125 = *(_OWORD *)v122;
                      v125[1] = v126;
                      if (v118 < v121)
                        break;
                      v127 = 2 * v121;
                      v121 = (2 * v121) | 1;
                      v122 = v12 + 32 * v121;
                      v128 = v127 + 2;
                      if (v128 < v14 && *(double *)v122 < *(double *)(v122 + 32))
                      {
                        v122 += 32;
                        v121 = v128;
                      }
                    }
                    while (*(double *)v122 >= v124);
                    *(double *)v123 = v124;
                    *(_QWORD *)(v123 + 24) = v211;
                    *(_OWORD *)(v123 + 8) = v179;
                  }
                }
                v120 = v119-- <= 0;
              }
              while (!v120);
              v129 = (unint64_t)v13 >> 5;
              do
              {
                v130 = 0;
                v180 = *(__n128 *)v12;
                v212 = *(__n128 *)(v12 + 16);
                v131 = (__n128 *)v12;
                do
                {
                  v133 = v131;
                  v131 += 2 * v130 + 2;
                  v134 = 2 * v130;
                  v130 = (2 * v130) | 1;
                  v135 = v134 + 2;
                  if (v135 < v129 && v131->n128_f64[0] < v131[2].n128_f64[0])
                  {
                    v131 += 2;
                    v130 = v135;
                  }
                  v132 = v131[1];
                  *v133 = *v131;
                  v133[1] = v132;
                }
                while (v130 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                a2 -= 2;
                if (v131 == a2)
                {
                  a5.n128_u64[0] = v180.n128_u64[0];
                  *v131 = v180;
                  v131[1] = v212;
                }
                else
                {
                  v136 = a2[1];
                  *v131 = *a2;
                  v131[1] = v136;
                  a5.n128_u64[0] = v180.n128_u64[0];
                  *a2 = v180;
                  a2[1] = v212;
                  v137 = (uint64_t)&v131[2] - v12;
                  if (v137 >= 33)
                  {
                    v138 = (((unint64_t)v137 >> 5) - 2) >> 1;
                    v139 = (__n128 *)(v12 + 32 * v138);
                    a5.n128_u64[0] = v131->n128_u64[0];
                    if (v139->n128_f64[0] < v131->n128_f64[0])
                    {
                      v156 = v131[1].n128_i64[1];
                      v153 = *(__n128 *)((char *)v131 + 8);
                      do
                      {
                        v140 = v131;
                        v131 = v139;
                        v141 = v139[1];
                        *v140 = *v139;
                        v140[1] = v141;
                        if (!v138)
                          break;
                        v138 = (v138 - 1) >> 1;
                        v139 = (__n128 *)(v12 + 32 * v138);
                      }
                      while (v139->n128_f64[0] < a5.n128_f64[0]);
                      v131->n128_u64[0] = a5.n128_u64[0];
                      a5.n128_u64[0] = v153.n128_u64[0];
                      v131[1].n128_u64[1] = v156;
                      *(__n128 *)((char *)v131 + 8) = v153;
                    }
                  }
                }
                v120 = v129-- <= 2;
              }
              while (!v120);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 32 * ((unint64_t)v14 >> 1));
          v17 = *n128_f64;
          if ((unint64_t)v13 <= 0x1000)
          {
            v20 = *(double *)v12;
            if (*(double *)v12 >= v16->n128_f64[0])
            {
              if (v17 < v20)
              {
                v161 = *(__n128 *)v12;
                v188 = *(__n128 *)(v12 + 16);
                v24 = a2[-1];
                *(_OWORD *)v12 = *(_OWORD *)n128_f64;
                *(__n128 *)(v12 + 16) = v24;
                *(__n128 *)n128_f64 = v161;
                a2[-1] = v188;
                if (*(double *)v12 < v16->n128_f64[0])
                {
                  v162 = *v16;
                  v189 = v16[1];
                  v25 = *(__n128 *)(v12 + 16);
                  *v16 = *(__n128 *)v12;
                  v16[1] = v25;
                  *(__n128 *)v12 = v162;
                  *(__n128 *)(v12 + 16) = v189;
                  --a3;
                  v26 = *(double *)v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v20)
            {
              v165 = *v16;
              v193 = v16[1];
              v41 = *(__n128 *)(v12 + 16);
              *v16 = *(__n128 *)v12;
              v16[1] = v41;
              *(__n128 *)v12 = v165;
              *(__n128 *)(v12 + 16) = v193;
              if (*n128_f64 >= *(double *)v12)
                goto LABEL_31;
              v158 = *(__n128 *)v12;
              v185 = *(__n128 *)(v12 + 16);
              v42 = a2[-1];
              *(_OWORD *)v12 = *(_OWORD *)n128_f64;
              *(__n128 *)(v12 + 16) = v42;
            }
            else
            {
              v158 = *v16;
              v185 = v16[1];
              v21 = a2[-1];
              *v16 = *(__n128 *)n128_f64;
              v16[1] = v21;
            }
            *(__n128 *)n128_f64 = v158;
            a2[-1] = v185;
LABEL_31:
            --a3;
            v26 = *(double *)v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_f64[0];
          if (v16->n128_f64[0] >= *(double *)v12)
          {
            if (v17 < v18)
            {
              v159 = *v16;
              v186 = v16[1];
              v22 = a2[-1];
              *v16 = *(__n128 *)n128_f64;
              v16[1] = v22;
              *(__n128 *)n128_f64 = v159;
              a2[-1] = v186;
              if (v16->n128_f64[0] < *(double *)v12)
              {
                v160 = *(__n128 *)v12;
                v187 = *(__n128 *)(v12 + 16);
                v23 = v16[1];
                *(__n128 *)v12 = *v16;
                *(__n128 *)(v12 + 16) = v23;
                *v16 = v160;
                v16[1] = v187;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v163 = *(__n128 *)v12;
              v190 = *(__n128 *)(v12 + 16);
              v27 = v16[1];
              *(__n128 *)v12 = *v16;
              *(__n128 *)(v12 + 16) = v27;
              *v16 = v163;
              v16[1] = v190;
              if (*n128_f64 >= v16->n128_f64[0])
                goto LABEL_22;
              v157 = *v16;
              v184 = v16[1];
              v28 = a2[-1];
              *v16 = *(__n128 *)n128_f64;
              v16[1] = v28;
            }
            else
            {
              v157 = *(__n128 *)v12;
              v184 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(_OWORD *)v12 = *(_OWORD *)n128_f64;
              *(__n128 *)(v12 + 16) = v19;
            }
            *(__n128 *)n128_f64 = v157;
            a2[-1] = v184;
          }
LABEL_22:
          v29 = (__n128 *)(v12 + 32);
          v30 = v12 + 32 * v15;
          v32 = *(double *)(v30 - 32);
          v31 = (__n128 *)(v30 - 32);
          v33 = v32;
          v34 = *v10;
          if (v32 >= *(double *)(v12 + 32))
          {
            if (v34 < v33)
            {
              v164 = *v31;
              v191 = v31[1];
              v38 = a2[-3];
              *v31 = *(__n128 *)v10;
              v31[1] = v38;
              *(__n128 *)v10 = v164;
              a2[-3] = v191;
              if (v31->n128_f64[0] < v29->n128_f64[0])
              {
                v39 = *v29;
                v192 = *(__n128 *)(v12 + 48);
                v40 = v31[1];
                *v29 = *v31;
                *(__n128 *)(v12 + 48) = v40;
                *v31 = v39;
                v31[1] = v192;
              }
            }
          }
          else
          {
            if (v34 >= v33)
            {
              v43 = *v29;
              v194 = *(__n128 *)(v12 + 48);
              v44 = v31[1];
              *v29 = *v31;
              *(__n128 *)(v12 + 48) = v44;
              *v31 = v43;
              v31[1] = v194;
              if (*v10 >= v31->n128_f64[0])
                goto LABEL_36;
              v166 = *v31;
              v195 = v31[1];
              v45 = a2[-3];
              *v31 = *(__n128 *)v10;
              v31[1] = v45;
              v35 = v166;
              v36 = v195;
            }
            else
            {
              v35 = *v29;
              v36 = *(__n128 *)(v12 + 48);
              v37 = a2[-3];
              *v29 = *(__n128 *)v10;
              *(__n128 *)(v12 + 48) = v37;
            }
            *(__n128 *)v10 = v35;
            a2[-3] = v36;
          }
LABEL_36:
          v46 = (__n128 *)(v12 + 64);
          v47 = v12 + 32 * v15;
          v49 = *(double *)(v47 + 32);
          v48 = (__n128 *)(v47 + 32);
          v50 = v49;
          v51 = *v11;
          if (v49 >= *(double *)(v12 + 64))
          {
            if (v51 < v50)
            {
              v167 = *v48;
              v196 = v48[1];
              v55 = a2[-5];
              *v48 = *(__n128 *)v11;
              v48[1] = v55;
              *(__n128 *)v11 = v167;
              a2[-5] = v196;
              if (v48->n128_f64[0] < v46->n128_f64[0])
              {
                v56 = *v46;
                v197 = *(__n128 *)(v12 + 80);
                v57 = v48[1];
                *v46 = *v48;
                *(__n128 *)(v12 + 80) = v57;
                *v48 = v56;
                v48[1] = v197;
              }
            }
          }
          else
          {
            if (v51 >= v50)
            {
              v58 = *v46;
              v198 = *(__n128 *)(v12 + 80);
              v59 = v48[1];
              *v46 = *v48;
              *(__n128 *)(v12 + 80) = v59;
              *v48 = v58;
              v48[1] = v198;
              if (*v11 >= v48->n128_f64[0])
                goto LABEL_45;
              v168 = *v48;
              v199 = v48[1];
              v60 = a2[-5];
              *v48 = *(__n128 *)v11;
              v48[1] = v60;
              v52 = v168;
              v53 = v199;
            }
            else
            {
              v52 = *v46;
              v53 = *(__n128 *)(v12 + 80);
              v54 = a2[-5];
              *v46 = *(__n128 *)v11;
              *(__n128 *)(v12 + 80) = v54;
            }
            *(__n128 *)v11 = v52;
            a2[-5] = v53;
          }
LABEL_45:
          v61 = v16->n128_f64[0];
          v62 = v48->n128_f64[0];
          if (v16->n128_f64[0] >= v31->n128_f64[0])
          {
            if (v62 < v61)
            {
              v170 = *v16;
              v201 = v16[1];
              v64 = v48[1];
              *v16 = *v48;
              v16[1] = v64;
              *v48 = v170;
              v48[1] = v201;
              if (v16->n128_f64[0] < v31->n128_f64[0])
              {
                v171 = *v31;
                v202 = v31[1];
                v65 = v16[1];
                *v31 = *v16;
                v31[1] = v65;
                *v16 = v171;
                v16[1] = v202;
              }
            }
          }
          else
          {
            if (v62 >= v61)
            {
              v172 = *v31;
              v203 = v31[1];
              v66 = v16[1];
              *v31 = *v16;
              v31[1] = v66;
              *v16 = v172;
              v16[1] = v203;
              if (v48->n128_f64[0] >= v16->n128_f64[0])
                goto LABEL_54;
              v169 = *v16;
              v200 = v16[1];
              v67 = v48[1];
              *v16 = *v48;
              v16[1] = v67;
            }
            else
            {
              v169 = *v31;
              v200 = v31[1];
              v63 = v48[1];
              *v31 = *v48;
              v31[1] = v63;
            }
            *v48 = v169;
            v48[1] = v200;
          }
LABEL_54:
          v173 = *(__n128 *)v12;
          v204 = *(__n128 *)(v12 + 16);
          v68 = v16[1];
          *(__n128 *)v12 = *v16;
          *(__n128 *)(v12 + 16) = v68;
          *v16 = v173;
          v16[1] = v204;
          --a3;
          v26 = *(double *)v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(double *)(v12 - 32) >= v26)
          {
            v155 = *(_QWORD *)(v12 + 24);
            v152 = *(__n128 *)(v12 + 8);
            if (v26 >= *n128_f64)
            {
              v83 = v12 + 32;
              do
              {
                v12 = v83;
                if (v83 >= (unint64_t)a2)
                  break;
                v83 += 32;
              }
              while (v26 >= *(double *)v12);
            }
            else
            {
              do
              {
                v82 = *(double *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v82);
            }
            v84 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v85 = v84[-2].n128_f64[0];
                v84 -= 2;
              }
              while (v26 < v85);
            }
            while (v12 < (unint64_t)v84)
            {
              v175 = *(__n128 *)v12;
              v206 = *(__n128 *)(v12 + 16);
              v86 = v84[1];
              *(__n128 *)v12 = *v84;
              *(__n128 *)(v12 + 16) = v86;
              *v84 = v175;
              v84[1] = v206;
              do
              {
                v87 = *(double *)(v12 + 32);
                v12 += 32;
              }
              while (v26 >= v87);
              do
              {
                v88 = v84[-2].n128_f64[0];
                v84 -= 2;
              }
              while (v26 < v88);
            }
            if (v12 - 32 != a1)
            {
              v89 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v89;
            }
            a4 = 0;
            *(double *)(v12 - 32) = v26;
            a5 = v152;
            *(_QWORD *)(v12 - 8) = v155;
            *(__n128 *)(v12 - 24) = v152;
            continue;
          }
LABEL_56:
          v69 = 0;
          v154 = *(_QWORD *)(v12 + 24);
          v151 = *(__n128 *)(v12 + 8);
          do
          {
            v70 = *(double *)(v12 + v69 + 32);
            v69 += 32;
          }
          while (v70 < v26);
          v71 = v12 + v69;
          v72 = a2;
          if (v69 == 32)
          {
            v72 = a2;
            do
            {
              if (v71 >= (unint64_t)v72)
                break;
              v74 = v72[-2].n128_f64[0];
              v72 -= 2;
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = v72[-2].n128_f64[0];
              v72 -= 2;
            }
            while (v73 >= v26);
          }
          v12 += v69;
          if (v71 < (unint64_t)v72)
          {
            v75 = v72;
            do
            {
              v174 = *(__n128 *)v12;
              v205 = *(__n128 *)(v12 + 16);
              v76 = v75[1];
              *(__n128 *)v12 = *v75;
              *(__n128 *)(v12 + 16) = v76;
              *v75 = v174;
              v75[1] = v205;
              do
              {
                v77 = *(double *)(v12 + 32);
                v12 += 32;
              }
              while (v77 < v26);
              do
              {
                v78 = v75[-2].n128_f64[0];
                v75 -= 2;
              }
              while (v78 >= v26);
            }
            while (v12 < (unint64_t)v75);
          }
          if (v12 - 32 != a1)
          {
            v79 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v79;
          }
          *(double *)(v12 - 32) = v26;
          *(_QWORD *)(v12 - 8) = v154;
          *(__n128 *)(v12 - 24) = v151;
          if (v71 < (unint64_t)v72)
            goto LABEL_75;
          v80 = sub_1BE6FE9B4(a1, v12 - 32, v151);
          if (!sub_1BE6FE9B4(v12, (uint64_t)a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            sub_1BE6FDE18(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 32);
          if (v80)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v108 = (__n128 *)(v12 + 32);
        v110 = (__n128 *)v12 == a2 || v108 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v110)
          {
            v111 = 0;
            v112 = v12;
            do
            {
              v114 = v108;
              a5.n128_u64[0] = *(_QWORD *)(v112 + 32);
              if (a5.n128_f64[0] < *(double *)v112)
              {
                v178 = *(_OWORD *)(v112 + 40);
                v210 = *(_QWORD *)(v112 + 56);
                v115 = v111;
                do
                {
                  v116 = v12 + v115;
                  v117 = *(_OWORD *)(v12 + v115 + 16);
                  *(_OWORD *)(v116 + 32) = *(_OWORD *)(v12 + v115);
                  *(_OWORD *)(v116 + 48) = v117;
                  if (!v115)
                  {
                    v113 = v12;
                    goto LABEL_118;
                  }
                  v115 -= 32;
                }
                while (a5.n128_f64[0] < *(double *)(v116 - 32));
                v113 = v12 + v115 + 32;
LABEL_118:
                *(_QWORD *)v113 = a5.n128_u64[0];
                a5.n128_u64[0] = v178;
                *(_QWORD *)(v113 + 24) = v210;
                *(_OWORD *)(v113 + 8) = v178;
              }
              v108 = v114 + 2;
              v111 += 32;
              v112 = (unint64_t)v114;
            }
            while (&v114[2] != a2);
          }
        }
        else if (!v110)
        {
          do
          {
            v144 = (uint64_t)v108;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
            if (a5.n128_f64[0] < *(double *)a1)
            {
              v182 = *(__n128 *)(a1 + 40);
              v215 = *(_QWORD *)(a1 + 56);
              v145 = v108;
              do
              {
                v146 = v145[-1];
                *v145 = v145[-2];
                v145[1] = v146;
                v147 = v145[-4].n128_f64[0];
                v145 -= 2;
              }
              while (a5.n128_f64[0] < v147);
              v145->n128_u64[0] = a5.n128_u64[0];
              a5.n128_u64[0] = v182.n128_u64[0];
              v145[1].n128_u64[1] = v215;
              *(__n128 *)((char *)v145 + 8) = v182;
            }
            v108 += 2;
            a1 = v144;
          }
          while ((__n128 *)(v144 + 32) != a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v131 = a2 - 16;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = (uint64_t)(a2 - v7) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 8))
        {
          v59 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          v60 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = 0;
          v61 = *(void **)a1;
          *(_QWORD *)a1 = v60;

          v62 = *(void **)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v59;

          v63 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v63;
        }
        return;
      case 3:
        sub_1BE76E308(a1, a1 + 16, v131);
        return;
      case 4:
        sub_1BE76E65C(a1, a1 + 16, a1 + 32, v131);
        return;
      case 5:
        sub_1BE76E1A8(a1, a1 + 16, a1 + 32, a1 + 48, v131);
        return;
      default:
        if (v8 > 383)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v78 = (unint64_t)(v9 - 2) >> 1;
              v79 = v78;
              do
              {
                v81 = v79;
                if (v78 >= v79)
                {
                  v82 = (2 * v79) | 1;
                  v83 = a1 + 16 * v82;
                  if (2 * v81 + 2 < v9)
                  {
                    v84 = *(_DWORD *)(v83 + 8);
                    v85 = *(_DWORD *)(v83 + 24);
                    v83 += 16 * (v84 > v85);
                    if (v84 > v85)
                      v82 = 2 * v81 + 2;
                  }
                  v86 = a1 + 16 * v81;
                  v87 = *(_DWORD *)(v86 + 8);
                  if (*(_DWORD *)(v83 + 8) <= v87)
                  {
                    v133 = *(void **)v86;
                    *(_QWORD *)v86 = 0;
                    do
                    {
                      v88 = v86;
                      v86 = v83;
                      v89 = *(_QWORD *)v83;
                      *(_QWORD *)v86 = 0;
                      v90 = *(void **)v88;
                      *(_QWORD *)v88 = v89;

                      *(_DWORD *)(v88 + 8) = *(_DWORD *)(v86 + 8);
                      if (v78 < v82)
                        break;
                      v91 = (2 * v82) | 1;
                      v83 = a1 + 16 * v91;
                      if (2 * v82 + 2 < v9)
                      {
                        v92 = *(_DWORD *)(v83 + 8);
                        v93 = *(_DWORD *)(v83 + 24);
                        v83 += 16 * (v92 > v93);
                        if (v92 > v93)
                          v91 = 2 * v82 + 2;
                      }
                      v82 = v91;
                    }
                    while (*(_DWORD *)(v83 + 8) <= v87);
                    v80 = *(void **)v86;
                    *(_QWORD *)v86 = v133;

                    *(_DWORD *)(v86 + 8) = v87;
                  }
                }
                v79 = v81 - 1;
              }
              while (v81);
              v94 = (unint64_t)v8 >> 4;
              do
              {
                v97 = 0;
                v98 = *(void **)a1;
                *(_QWORD *)a1 = 0;
                v99 = *(_DWORD *)(a1 + 8);
                v100 = a1;
                do
                {
                  v103 = v100 + 16 * v97 + 16;
                  v104 = (2 * v97) | 1;
                  v105 = 2 * v97 + 2;
                  if (v105 < v94)
                  {
                    v106 = *(_DWORD *)(v103 + 8);
                    v107 = *(_DWORD *)(v103 + 24);
                    v103 += 16 * (v106 > v107);
                    if (v106 > v107)
                      v104 = v105;
                  }
                  v101 = *(void **)v103;
                  *(_QWORD *)v103 = 0;
                  v102 = *(void **)v100;
                  *(_QWORD *)v100 = v101;

                  *(_DWORD *)(v100 + 8) = *(_DWORD *)(v103 + 8);
                  v100 = v103;
                  v97 = v104;
                }
                while (v104 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
                v108 = a2 - 16;
                if (v103 == a2 - 16)
                {
                  v95 = *(void **)v103;
                  *(_QWORD *)v103 = v98;

                  *(_DWORD *)(v103 + 8) = v99;
                }
                else
                {
                  v109 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(a2 - 16) = 0;
                  v110 = *(void **)v103;
                  *(_QWORD *)v103 = v109;

                  *(_DWORD *)(v103 + 8) = *(_DWORD *)(a2 - 8);
                  v111 = *(void **)(a2 - 16);
                  *(_QWORD *)(a2 - 16) = v98;

                  *(_DWORD *)(a2 - 8) = v99;
                  v112 = v103 - a1 + 16;
                  if (v112 >= 17)
                  {
                    v113 = (((unint64_t)v112 >> 4) - 2) >> 1;
                    v114 = a1 + 16 * v113;
                    v115 = *(_DWORD *)(v103 + 8);
                    if (*(_DWORD *)(v114 + 8) > v115)
                    {
                      v116 = *(void **)v103;
                      *(_QWORD *)v103 = 0;
                      do
                      {
                        v117 = v103;
                        v103 = v114;
                        v118 = *(_QWORD *)v114;
                        *(_QWORD *)v103 = 0;
                        v119 = *(void **)v117;
                        *(_QWORD *)v117 = v118;

                        *(_DWORD *)(v117 + 8) = *(_DWORD *)(v103 + 8);
                        if (!v113)
                          break;
                        v113 = (v113 - 1) >> 1;
                        v114 = a1 + 16 * v113;
                      }
                      while (*(_DWORD *)(v114 + 8) > v115);
                      v120 = *(void **)v103;
                      *(_QWORD *)v103 = v116;

                      *(_DWORD *)(v103 + 8) = v115;
                    }
                  }
                }
                a2 = v108;
              }
              while (v94-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = (void **)(a1 + 16 * ((unint64_t)v9 >> 1));
          if ((unint64_t)v8 >= 0x801)
          {
            sub_1BE76E308(a1, (uint64_t)v11, v131);
            v12 = 16 * v10;
            v13 = a1 + v12;
            sub_1BE76E308(a1 + 16, a1 + v12 - 16, a2 - 32);
            sub_1BE76E308(a1 + 32, a1 + 16 + v12, a2 - 48);
            sub_1BE76E308(a1 + v12 - 16, (uint64_t)v11, a1 + 16 + v12);
            v14 = *(void **)a1;
            *(_QWORD *)a1 = 0;
            v15 = *v11;
            *v11 = 0;
            v16 = *(void **)a1;
            *(_QWORD *)a1 = v15;

            v17 = *v11;
            *v11 = v14;

            v18 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 + 8);
            *(_DWORD *)(v13 + 8) = v18;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v19 = *(_DWORD *)(a1 + 8);
            if (*(_DWORD *)(a1 - 8) > v19)
              goto LABEL_14;
            v20 = *(void **)a1;
            *(_QWORD *)a1 = 0;
            if (v19 <= *(_DWORD *)(a2 - 8))
            {
              v44 = a1 + 16;
              do
              {
                v7 = v44;
                if (v44 >= a2)
                  break;
                v45 = *(_DWORD *)(v44 + 8);
                v44 += 16;
              }
              while (v19 <= v45);
            }
            else
            {
              v21 = a1;
              do
              {
                v7 = v21 + 16;
                v22 = *(_DWORD *)(v21 + 24);
                v21 += 16;
              }
              while (v19 <= v22);
            }
            v46 = a2;
            if (v7 < a2)
            {
              v47 = a2;
              do
              {
                v46 = v47 - 16;
                v48 = *(_DWORD *)(v47 - 8);
                v47 -= 16;
              }
              while (v19 > v48);
            }
            while (v7 < v46)
            {
              v49 = *(void **)v7;
              *(_QWORD *)v7 = 0;
              v50 = *(void **)v46;
              *(_QWORD *)v46 = 0;
              v51 = *(void **)v7;
              *(_QWORD *)v7 = v50;

              v52 = *(void **)v46;
              *(_QWORD *)v46 = v49;

              v53 = *(_DWORD *)(v7 + 8);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v46 + 8);
              *(_DWORD *)(v46 + 8) = v53;
              do
              {
                v54 = *(_DWORD *)(v7 + 24);
                v7 += 16;
              }
              while (v19 <= v54);
              do
              {
                v55 = *(_DWORD *)(v46 - 8);
                v46 -= 16;
              }
              while (v19 > v55);
            }
            if (v7 - 16 != a1)
            {
              v56 = *(_QWORD *)(v7 - 16);
              *(_QWORD *)(v7 - 16) = 0;
              v57 = *(void **)a1;
              *(_QWORD *)a1 = v56;

              *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 8);
            }
            v58 = *(void **)(v7 - 16);
            *(_QWORD *)(v7 - 16) = v20;

            a4 = 0;
            *(_DWORD *)(v7 - 8) = v19;
            continue;
          }
          sub_1BE76E308((uint64_t)v11, a1, v131);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v19 = *(_DWORD *)(a1 + 8);
LABEL_14:
          v23 = 0;
          v24 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          do
          {
            v25 = *(_DWORD *)(a1 + v23 + 24);
            v23 += 16;
          }
          while (v25 > v19);
          v26 = a1 + v23;
          v27 = a2;
          if (v23 == 16)
          {
            v30 = a2;
            while (v26 < v30)
            {
              v28 = v30 - 16;
              v31 = *(_DWORD *)(v30 - 8);
              v30 -= 16;
              if (v31 > v19)
                goto LABEL_22;
            }
            v28 = v30;
            v7 = v26;
          }
          else
          {
            do
            {
              v28 = v27 - 16;
              v29 = *(_DWORD *)(v27 - 8);
              v27 -= 16;
            }
            while (v29 <= v19);
LABEL_22:
            v7 = v26;
            if (v26 < v28)
            {
              v32 = v28;
              do
              {
                v33 = *(void **)v7;
                *(_QWORD *)v7 = 0;
                v34 = *(void **)v32;
                *(_QWORD *)v32 = 0;
                v35 = *(void **)v7;
                *(_QWORD *)v7 = v34;

                v36 = *(void **)v32;
                *(_QWORD *)v32 = v33;

                v37 = *(_DWORD *)(v7 + 8);
                *(_DWORD *)(v7 + 8) = *(_DWORD *)(v32 + 8);
                *(_DWORD *)(v32 + 8) = v37;
                do
                {
                  v38 = *(_DWORD *)(v7 + 24);
                  v7 += 16;
                }
                while (v38 > v19);
                do
                {
                  v39 = *(_DWORD *)(v32 - 8);
                  v32 -= 16;
                }
                while (v39 <= v19);
              }
              while (v7 < v32);
            }
          }
          if (v7 - 16 != a1)
          {
            v40 = *(_QWORD *)(v7 - 16);
            *(_QWORD *)(v7 - 16) = 0;
            v41 = *(void **)a1;
            *(_QWORD *)a1 = v40;

            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 8);
          }
          v42 = *(void **)(v7 - 16);
          *(_QWORD *)(v7 - 16) = v24;

          *(_DWORD *)(v7 - 8) = v19;
          if (v26 < v28)
            goto LABEL_33;
          v43 = sub_1BE76E488(a1, v7 - 16);
          if (!sub_1BE76E488(v7, a2))
          {
            if (v43)
              continue;
LABEL_33:
            sub_1BE76D914(a1, v7 - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v7 - 16;
          if (v43)
            return;
          goto LABEL_1;
        }
        v64 = (_QWORD *)(a1 + 16);
        v66 = a1 == a2 || v64 == (_QWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v66)
          {
            v67 = 0;
            v68 = (_QWORD *)a1;
            do
            {
              v71 = *((_DWORD *)v68 + 6);
              v72 = *((_DWORD *)v68 + 2);
              v68 = v64;
              if (v71 > v72)
              {
                v73 = *v64;
                *v64 = 0;
                v74 = v67;
                do
                {
                  v75 = a1 + v74;
                  v76 = *(_QWORD *)(a1 + v74);
                  *(_QWORD *)v75 = 0;
                  v77 = *(void **)(a1 + v74 + 16);
                  *(_QWORD *)(v75 + 16) = v76;

                  *(_DWORD *)(v75 + 24) = *(_DWORD *)(v75 + 8);
                  if (!v74)
                  {
                    v69 = a1;
                    goto LABEL_68;
                  }
                  v74 -= 16;
                }
                while (v71 > *(_DWORD *)(v75 - 8));
                v69 = a1 + v74 + 16;
LABEL_68:
                v70 = *(void **)v69;
                *(_QWORD *)v69 = v73;

                *(_DWORD *)(v69 + 8) = v71;
              }
              v64 = v68 + 2;
              v67 += 16;
            }
            while (v68 + 2 != (_QWORD *)a2);
          }
        }
        else if (!v66)
        {
          v121 = (_DWORD *)(a1 + 24);
          do
          {
            v122 = *(_DWORD *)(a1 + 24);
            v123 = *(_DWORD *)(a1 + 8);
            a1 = (uint64_t)v64;
            if (v122 > v123)
            {
              v124 = *v64;
              *v64 = 0;
              v125 = v121;
              do
              {
                v126 = v125;
                v127 = *((_QWORD *)v125 - 3);
                *((_QWORD *)v125 - 3) = 0;
                v128 = (void *)*((_QWORD *)v125 - 1);
                *((_QWORD *)v125 - 1) = v127;

                v129 = *(v125 - 4);
                v125 -= 4;
                *v126 = v129;
              }
              while (v122 > *(v126 - 8));
              v130 = (void *)*((_QWORD *)v125 - 1);
              *((_QWORD *)v125 - 1) = v124;

              *v125 = v122;
            }
            v64 = (_QWORD *)(a1 + 16);
            v121 += 4;
          }
          while (a1 + 16 != a2);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v150.origin.x = a2[-1].origin.x;
        v150.origin.y = a2[-1].origin.y;
        v47 = a2 - 1;
        v150.size.width = v47->size.width;
        v150.size.height = v47->size.height;
        MaxX = CGRectGetMaxX(v150);
        if (MaxX < CGRectGetMaxX(*a1))
        {
          origin = a1->origin;
          size = a1->size;
          v49 = v47->size;
          a1->origin = v47->origin;
          a1->size = v49;
          v47->origin = origin;
          v47->size = size;
        }
        return;
      case 3:
        sub_1BE86EF68(a1, &a1[1].origin, &a2[-1].origin);
        return;
      case 4:
        sub_1BE86F2A0(a1, &a1[1].origin, &a1[2].origin, &a2[-1].origin);
        return;
      case 5:
        sub_1BE86EE48(a1, &a1[1].origin, &a1[2].origin, &a1[3].origin, &a2[-1].origin);
        return;
      default:
        if (v9 <= 767)
        {
          v50 = a1 + 1;
          v52 = a1 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = a1;
              do
              {
                p_x = &v50->origin.x;
                v57 = CGRectGetMaxX(v54[1]);
                if (v57 < CGRectGetMaxX(*v54))
                {
                  v58 = *p_x;
                  y = v54[1].origin.y;
                  width = v54[1].size.width;
                  v61 = v53;
                  height = v54[1].size.height;
                  do
                  {
                    v63 = (char *)a1 + v61;
                    v64 = *(__int128 *)((char *)&a1->size + v61);
                    *((_OWORD *)v63 + 2) = *(CGPoint *)((char *)&a1->origin + v61);
                    *((_OWORD *)v63 + 3) = v64;
                    if (!v61)
                    {
                      v55 = &a1->origin.x;
                      goto LABEL_67;
                    }
                    v151.origin.x = v58;
                    v151.origin.y = y;
                    v151.size.width = width;
                    v151.size.height = height;
                    v65 = CGRectGetMaxX(v151);
                    v61 -= 32;
                  }
                  while (v65 < CGRectGetMaxX(*((CGRect *)v63 - 1)));
                  v55 = (CGFloat *)((char *)&a1[1].origin.x + v61);
LABEL_67:
                  *v55 = v58;
                  v55[1] = y;
                  v55[2] = width;
                  v55[3] = height;
                }
                v50 = (CGRect *)(p_x + 4);
                v53 += 32;
                v54 = (CGRect *)p_x;
              }
              while (p_x + 4 != (CGFloat *)a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v107 = (_QWORD *)&v50->origin.x;
              v108 = CGRectGetMaxX(a1[1]);
              if (v108 < CGRectGetMaxX(*a1))
              {
                v109 = *v107;
                v110 = a1[1].origin.y;
                v111 = a1[1].size.width;
                v112 = v107;
                v113 = a1[1].size.height;
                do
                {
                  v115 = *(v112 - 1);
                  *v112 = *(v112 - 2);
                  v112[1] = v115;
                  v116 = v109;
                  *(CGFloat *)&v115 = v110;
                  v117 = v111;
                  v118 = v113;
                  v119 = CGRectGetMaxX(*(CGRect *)((char *)&v115 - 8));
                  v154 = *(CGRect *)((_BYTE *)v112 - 2);
                  v114 = (CGFloat *)(v112 - 2);
                  v112 -= 2;
                }
                while (v119 < CGRectGetMaxX(v154));
                *(_QWORD *)v114 = v109;
                v114[1] = v110;
                v114[2] = v111;
                v114[3] = v113;
              }
              v50 = (CGRect *)(v107 + 4);
              a1 = (CGRect *)v107;
            }
            while (v107 + 4 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v120 = a2;
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &a1[v69];
                if (2 * v67 + 2 < v10)
                {
                  v71 = CGRectGetMaxX(*v70);
                  if (v71 < CGRectGetMaxX(v70[1]))
                  {
                    ++v70;
                    v69 = 2 * v68 + 2;
                  }
                }
                v72 = &a1[v68];
                v73 = CGRectGetMaxX(*v70);
                if (v73 >= CGRectGetMaxX(*v72))
                {
                  x = v72->origin.x;
                  v75 = v72->origin.y;
                  v76 = v72->size.width;
                  v77 = v72->size.height;
                  do
                  {
                    p_origin = &v72->origin;
                    v72 = v70;
                    v80 = v70->size;
                    *p_origin = v70->origin;
                    p_origin[1] = (CGPoint)v80;
                    if (v66 < v69)
                      break;
                    v81 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = &a1[v69];
                    v82 = v81 + 2;
                    if (v81 + 2 < v10)
                    {
                      v83 = CGRectGetMaxX(*v70);
                      if (v83 < CGRectGetMaxX(v70[1]))
                      {
                        ++v70;
                        v69 = v82;
                      }
                    }
                    v78 = CGRectGetMaxX(*v70);
                    v152.origin.x = x;
                    v152.origin.y = v75;
                    v152.size.width = v76;
                    v152.size.height = v77;
                  }
                  while (v78 >= CGRectGetMaxX(v152));
                  v72->origin.x = x;
                  v72->origin.y = v75;
                  v72->size.width = v76;
                  v72->size.height = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v84 = (unint64_t)v9 >> 5;
            v85 = &v120->origin;
            do
            {
              v87 = (_OWORD *)&v85->x;
              v88 = 0;
              v125 = a1->origin;
              v130 = a1->size;
              v89 = a1;
              do
              {
                v91 = &v89->origin;
                v89 += v88 + 1;
                v92 = 2 * v88;
                v88 = (2 * v88) | 1;
                v93 = v92 + 2;
                if (v92 + 2 < v84)
                {
                  v94 = CGRectGetMaxX(*v89);
                  if (v94 < CGRectGetMaxX(v89[1]))
                  {
                    ++v89;
                    v88 = v93;
                  }
                }
                v90 = v89->size;
                *v91 = v89->origin;
                v91[1] = (CGPoint)v90;
              }
              while (v88 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
              v85 -= 2;
              if (v89 == (CGRect *)(v87 - 2))
              {
                v89->origin = v125;
                v89->size = v130;
              }
              else
              {
                v95 = (CGSize)*(v87 - 1);
                v89->origin = *v85;
                v89->size = v95;
                *v85 = v125;
                *(v87 - 1) = v130;
                v96 = (char *)v89 - (char *)a1 + 32;
                if (v96 >= 33)
                {
                  v97 = (((unint64_t)v96 >> 5) - 2) >> 1;
                  v98 = &a1[v97];
                  v99 = CGRectGetMaxX(*v98);
                  if (v99 < CGRectGetMaxX(*v89))
                  {
                    v100 = v89->origin.x;
                    v101 = v89->origin.y;
                    v102 = v89->size.width;
                    v103 = v89->size.height;
                    do
                    {
                      v104 = &v89->origin;
                      v89 = v98;
                      v105 = v98->size;
                      *v104 = v98->origin;
                      v104[1] = (CGPoint)v105;
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = &a1[v97];
                      v106 = CGRectGetMaxX(*v98);
                      v153.origin.x = v100;
                      v153.origin.y = v101;
                      v153.size.width = v102;
                      v153.size.height = v103;
                    }
                    while (v106 < CGRectGetMaxX(v153));
                    v89->origin.x = v100;
                    v89->origin.y = v101;
                    v89->size.width = v102;
                    v89->size.height = v103;
                  }
                }
              }
            }
            while (v84-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 <= 0x1000)
        {
          sub_1BE86EF68(v12, &a1->origin, &a2[-1].origin);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_1BE86EF68(a1, &v12->origin, &a2[-1].origin);
          v13 = v11;
          sub_1BE86EF68(a1 + 1, &a1[v13 - 1].origin, &a2[-2].origin);
          sub_1BE86EF68(a1 + 2, &a1[v13 + 1].origin, &a2[-3].origin);
          sub_1BE86EF68(&a1[v13 - 1], &v12->origin, &a1[v13 + 1].origin);
          v121 = a1->origin;
          v126 = a1->size;
          v14 = v12->size;
          a1->origin = v12->origin;
          a1->size = v14;
          v12->origin = v121;
          v12->size = v126;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        v15 = CGRectGetMaxX(a1[-1]);
        if (v15 >= CGRectGetMaxX(*a1))
        {
          v32 = a1->origin.x;
          v33 = a1->origin.y;
          v34 = a1->size.width;
          v35 = a1->size.height;
          v140.origin.x = a1->origin.x;
          v140.origin.y = v33;
          v140.size.width = v34;
          v140.size.height = v35;
          v36 = CGRectGetMaxX(v140);
          if (v36 >= CGRectGetMaxX(a2[-1]))
          {
            v38 = a1 + 1;
            do
            {
              v8 = v38;
              if (v38 >= a2)
                break;
              v143.origin.x = v32;
              v143.origin.y = v33;
              v143.size.width = v34;
              v143.size.height = v35;
              v39 = CGRectGetMaxX(v143);
              v40 = CGRectGetMaxX(*v8);
              v38 = v8 + 1;
            }
            while (v39 >= v40);
          }
          else
          {
            v8 = a1;
            do
            {
              v141.origin.x = v32;
              v141.origin.y = v33;
              v141.size.width = v34;
              v141.size.height = v35;
              v37 = CGRectGetMaxX(v141);
              v142.origin.x = v8[1].origin.x;
              v142.origin.y = v8[1].origin.y;
              ++v8;
              v142.size.width = v8->size.width;
              v142.size.height = v8->size.height;
            }
            while (v37 >= CGRectGetMaxX(v142));
          }
          v41 = a2;
          if (v8 < a2)
          {
            v41 = a2;
            do
            {
              v144.origin.x = v32;
              v144.origin.y = v33;
              v144.size.width = v34;
              v144.size.height = v35;
              v42 = CGRectGetMaxX(v144);
              v145.origin.x = v41[-1].origin.x;
              v145.origin.y = v41[-1].origin.y;
              --v41;
              v145.size.width = v41->size.width;
              v145.size.height = v41->size.height;
            }
            while (v42 < CGRectGetMaxX(v145));
          }
          while (v8 < v41)
          {
            v123 = v8->origin;
            v128 = v8->size;
            v43 = v41->size;
            v8->origin = v41->origin;
            v8->size = v43;
            v41->origin = v123;
            v41->size = v128;
            do
            {
              v146.origin.x = v32;
              v146.origin.y = v33;
              v146.size.width = v34;
              v146.size.height = v35;
              v44 = CGRectGetMaxX(v146);
              v147.origin.x = v8[1].origin.x;
              v147.origin.y = v8[1].origin.y;
              ++v8;
              v147.size.width = v8->size.width;
              v147.size.height = v8->size.height;
            }
            while (v44 >= CGRectGetMaxX(v147));
            do
            {
              v148.origin.x = v32;
              v148.origin.y = v33;
              v148.size.width = v34;
              v148.size.height = v35;
              v45 = CGRectGetMaxX(v148);
              v149.origin.x = v41[-1].origin.x;
              v149.origin.y = v41[-1].origin.y;
              --v41;
              v149.size.width = v41->size.width;
              v149.size.height = v41->size.height;
            }
            while (v45 < CGRectGetMaxX(v149));
          }
          if (&v8[-1] != a1)
          {
            v46 = v8[-1].size;
            a1->origin = v8[-1].origin;
            a1->size = v46;
          }
          a4 = 0;
          v8[-1].origin.x = v32;
          v8[-1].origin.y = v33;
          v8[-1].size.width = v34;
          v8[-1].size.height = v35;
          continue;
        }
LABEL_10:
        v16 = 0;
        v17 = a1->origin.x;
        v18 = a1->origin.y;
        v19 = a1->size.width;
        v20 = a1->size.height;
        do
        {
          v21 = CGRectGetMaxX(a1[v16 + 1]);
          v131.origin.x = v17;
          v131.origin.y = v18;
          v131.size.width = v19;
          v131.size.height = v20;
          ++v16;
        }
        while (v21 < CGRectGetMaxX(v131));
        v22 = &a1[v16];
        v23 = a2;
        if (v16 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v134.origin.x = v23[-1].origin.x;
            v134.origin.y = v23[-1].origin.y;
            --v23;
            v134.size.width = v23->size.width;
            v134.size.height = v23->size.height;
            v25 = CGRectGetMaxX(v134);
            v135.origin.x = v17;
            v135.origin.y = v18;
            v135.size.width = v19;
            v135.size.height = v20;
          }
          while (v25 >= CGRectGetMaxX(v135));
        }
        else
        {
          do
          {
            v132.origin.x = v23[-1].origin.x;
            v132.origin.y = v23[-1].origin.y;
            --v23;
            v132.size.width = v23->size.width;
            v132.size.height = v23->size.height;
            v24 = CGRectGetMaxX(v132);
            v133.origin.x = v17;
            v133.origin.y = v18;
            v133.size.width = v19;
            v133.size.height = v20;
          }
          while (v24 >= CGRectGetMaxX(v133));
        }
        v8 = &a1[v16];
        if (v22 < v23)
        {
          v26 = &v23->origin;
          do
          {
            v122 = v8->origin;
            v127 = v8->size;
            v27 = (CGSize)v26[1];
            v8->origin = *v26;
            v8->size = v27;
            *v26 = v122;
            v26[1] = (CGPoint)v127;
            do
            {
              v136.origin.x = v8[1].origin.x;
              v136.origin.y = v8[1].origin.y;
              ++v8;
              v136.size.width = v8->size.width;
              v136.size.height = v8->size.height;
              v28 = CGRectGetMaxX(v136);
              v137.origin.x = v17;
              v137.origin.y = v18;
              v137.size.width = v19;
              v137.size.height = v20;
            }
            while (v28 < CGRectGetMaxX(v137));
            do
            {
              v138.origin.x = v26[-2].x;
              v138.origin.y = v26[-2].y;
              v26 -= 2;
              v138.size.width = v26[1].x;
              v138.size.height = v26[1].y;
              v29 = CGRectGetMaxX(v138);
              v139.origin.x = v17;
              v139.origin.y = v18;
              v139.size.width = v19;
              v139.size.height = v20;
            }
            while (v29 >= CGRectGetMaxX(v139));
          }
          while (v8 < (CGRect *)v26);
        }
        if (&v8[-1] != a1)
        {
          v30 = v8[-1].size;
          a1->origin = v8[-1].origin;
          a1->size = v30;
        }
        v8[-1].origin.x = v17;
        v8[-1].origin.y = v18;
        v8[-1].size.width = v19;
        v8[-1].size.height = v20;
        if (v22 < v23)
        {
LABEL_29:
          sub_1BE86E484(a1, &v8[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_1BE86F09C((__int128 *)a1, v8 - 1);
        if (!sub_1BE86F09C((__int128 *)v8, a2))
        {
          if (v31)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 1;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

  v257 = (uint64_t)(a2 - 18);
  v258 = (uint64_t)(a2 - 9);
  v255 = (uint64_t)(a2 - 27);
  v6 = (double *)a1;
  while (2)
  {
    v7 = (uint64_t)v6;
    v8 = (char *)a2 - (char *)v6;
    v9 = 0x8E38E38E38E38E39 * (a2 - v6);
    a1 = v7;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 5) < *(double *)(v7 + 32))
        {
          v101 = v7;
          goto LABEL_297;
        }
        return;
      case 3:
        v102 = v7 + 72;
        v103 = *(double *)(v7 + 104);
        v104 = *(a2 - 5);
        if (v103 >= *(double *)(v7 + 32))
        {
          if (v104 < v103)
          {
            v107 = v7 + 72;
            v108 = v258;
            goto LABEL_267;
          }
        }
        else
        {
          if (v104 < v103)
          {
            v101 = v7;
LABEL_297:
            v227 = v258;
            goto LABEL_298;
          }
          sub_1BE88E23C(v7, v7 + 72);
          if (*(a2 - 5) < *(double *)(v7 + 104))
          {
            v101 = v7 + 72;
            goto LABEL_297;
          }
        }
        return;
      case 4:
        sub_1BE88E43C(v7, v7 + 72, v7 + 144, v258);
        return;
      case 5:
        v102 = v7 + 72;
        v105 = v7 + 144;
        v106 = v7 + 216;
        sub_1BE88E43C(a1, a1 + 72, a1 + 144, a1 + 216);
        if (*(a2 - 5) < *(double *)(a1 + 248))
        {
          sub_1BE88E23C(v106, v258);
          if (*(double *)(a1 + 248) < *(double *)(a1 + 176))
          {
            sub_1BE88E23C(v105, v106);
            if (*(double *)(a1 + 176) < *(double *)(a1 + 104))
            {
              v107 = v102;
              v108 = v105;
LABEL_267:
              sub_1BE88E23C(v107, v108);
              if (*(double *)(a1 + 104) < *(double *)(a1 + 32))
              {
                v101 = a1;
                v227 = v102;
LABEL_298:
                sub_1BE88E23C(v101, v227);
              }
            }
          }
        }
        return;
      default:
        if (v8 > 1727)
        {
          if (!a3)
          {
            if ((double *)v7 != a2)
            {
              v259 = v8;
              v265 = (unint64_t)(v9 - 2) >> 1;
              v139 = v265;
              v140 = v7;
              do
              {
                v142 = v139;
                if (v265 >= v139)
                {
                  v143 = (2 * v139) | 1;
                  v144 = v140 + 72 * v143;
                  if (2 * v142 + 2 < v9 && *(double *)(v144 + 32) < *(double *)(v144 + 104))
                  {
                    v144 += 72;
                    v143 = 2 * v142 + 2;
                  }
                  v145 = v140 + 72 * v142;
                  if (*(double *)(v144 + 32) >= *(double *)(v145 + 32))
                  {
                    v276 = *(_QWORD ***)v145;
                    v146 = (_QWORD *)(v145 + 8);
                    v147 = *(_QWORD **)(v145 + 8);
                    v277 = v147;
                    v278 = *(_QWORD *)(v145 + 16);
                    if (v278)
                    {
                      v147[2] = &v277;
                      *(_QWORD *)v145 = v146;
                      *v146 = 0;
                      *(_QWORD *)(v145 + 16) = 0;
                    }
                    else
                    {
                      v276 = &v277;
                    }
                    v148 = v140 + 72 * v142;
                    v279 = *(_OWORD *)(v148 + 24);
                    v149 = (_QWORD *)(v148 + 40);
                    v280 = *(_QWORD **)(v148 + 40);
                    v152 = *(_QWORD **)(v148 + 48);
                    v150 = (_QWORD *)(v148 + 48);
                    v151 = v152;
                    v281 = v152;
                    v282 = v150[1];
                    if (v282)
                    {
                      v151[2] = &v281;
                      *v149 = v150;
                      *v150 = 0;
                      v150[1] = 0;
                    }
                    else
                    {
                      v280 = &v281;
                    }
                    v263 = v142;
                    v283 = *(_QWORD *)(v140 + 72 * v142 + 64);
                    do
                    {
                      v153 = v144;
                      v154 = v145 + 8;
                      sub_1BE67AC7C(v145, *(_QWORD **)(v145 + 8));
                      *(_QWORD *)v145 = *(_QWORD *)v153;
                      v156 = (_QWORD *)(v153 + 8);
                      v155 = *(_QWORD *)(v153 + 8);
                      *(_QWORD *)(v145 + 8) = v155;
                      v157 = *(_QWORD *)(v153 + 16);
                      *(_QWORD *)(v145 + 16) = v157;
                      if (v157)
                      {
                        *(_QWORD *)(v155 + 16) = v154;
                        *(_QWORD *)v153 = v156;
                        *v156 = 0;
                        *(_QWORD *)(v153 + 16) = 0;
                      }
                      else
                      {
                        *(_QWORD *)v145 = v154;
                      }
                      v159 = v145 + 48;
                      v158 = *(_QWORD **)(v145 + 48);
                      *(_OWORD *)(v145 + 24) = *(_OWORD *)(v153 + 24);
                      sub_1BE62033C(v145 + 40, v158);
                      v160 = (_QWORD *)(v153 + 40);
                      *(_QWORD *)(v145 + 40) = *(_QWORD *)(v153 + 40);
                      v162 = (_QWORD *)(v153 + 48);
                      v161 = *(_QWORD *)(v153 + 48);
                      *(_QWORD *)(v145 + 48) = v161;
                      v163 = *(_QWORD *)(v153 + 56);
                      *(_QWORD *)(v145 + 56) = v163;
                      if (v163)
                      {
                        *(_QWORD *)(v161 + 16) = v159;
                        *v160 = v162;
                        *v162 = 0;
                        *(_QWORD *)(v153 + 56) = 0;
                        *(_QWORD *)(v145 + 64) = *(_QWORD *)(v153 + 64);
                        if (v265 < v143)
                          break;
                      }
                      else
                      {
                        *(_QWORD *)(v145 + 40) = v159;
                        *(_QWORD *)(v145 + 64) = *(_QWORD *)(v153 + 64);
                        if (v265 < v143)
                          break;
                      }
                      v164 = 2 * v143;
                      v143 = (2 * v143) | 1;
                      v144 = a1 + 72 * v143;
                      v165 = v164 + 2;
                      if (v165 < v9 && *(double *)(v144 + 32) < *(double *)(v144 + 104))
                      {
                        v144 += 72;
                        v143 = v165;
                      }
                      v145 = v153;
                    }
                    while (*(double *)(v144 + 32) >= *((double *)&v279 + 1));
                    sub_1BE67AC7C(v153, *(_QWORD **)(v153 + 8));
                    *(_QWORD *)v153 = v276;
                    v166 = v277;
                    *(_QWORD *)(v153 + 8) = v277;
                    v167 = v278;
                    *(_QWORD *)(v153 + 16) = v278;
                    if (v167)
                    {
                      v166[2] = v156;
                      v276 = &v277;
                      v277 = 0;
                      v278 = 0;
                    }
                    else
                    {
                      *(_QWORD *)v153 = v156;
                    }
                    *(_OWORD *)(v153 + 24) = v279;
                    sub_1BE62033C(v153 + 40, *(_QWORD **)(v153 + 48));
                    *(_QWORD *)(v153 + 40) = v280;
                    v168 = v281;
                    *(_QWORD *)(v153 + 48) = v281;
                    v169 = v282;
                    *(_QWORD *)(v153 + 56) = v282;
                    if (v169)
                    {
                      v141 = 0;
                      v168[2] = v162;
                      v280 = &v281;
                      v281 = 0;
                      v282 = 0;
                    }
                    else
                    {
                      *v160 = v162;
                      v141 = v281;
                    }
                    v140 = a1;
                    v142 = v263;
                    *(_QWORD *)(v153 + 64) = v283;
                    sub_1BE62033C((uint64_t)&v280, v141);
                    sub_1BE67AC7C((uint64_t)&v276, v277);
                  }
                }
                v139 = v142 - 1;
              }
              while (v142);
              v170 = v259 / 0x48;
              v260 = (__int128 *)(v140 + 24);
              v254 = (_QWORD *)(v140 + 48);
              v256 = (_QWORD *)(v140 + 8);
              do
              {
                v172 = a1;
                v173 = *(_QWORD **)(a1 + 8);
                v268 = *(_QWORD ***)a1;
                v269 = v173;
                v270 = *(_QWORD *)(a1 + 16);
                if (v270)
                {
                  v173[2] = &v269;
                  *(_QWORD *)a1 = v256;
                  *v256 = 0;
                  v256[1] = 0;
                }
                else
                {
                  v268 = &v269;
                }
                v271 = *v260;
                v174 = *(_QWORD **)(a1 + 48);
                v272 = *(_QWORD ***)(a1 + 40);
                v273 = v174;
                v274 = *(_QWORD *)(a1 + 56);
                v262 = a2;
                if (v274)
                {
                  v174[2] = &v273;
                  *(_QWORD *)(a1 + 40) = v254;
                  *v254 = 0;
                  v254[1] = 0;
                }
                else
                {
                  v272 = &v273;
                }
                v175 = 0;
                v275 = *(_QWORD *)(a1 + 64);
                v176 = (unint64_t)(v170 - 2) >> 1;
                do
                {
                  while (1)
                  {
                    v177 = v172 + 72 * v175 + 72;
                    v178 = 2 * v175;
                    v175 = (2 * v175) | 1;
                    v179 = v178 + 2;
                    if (v179 < v170 && *(double *)(v177 + 32) < *(double *)(v177 + 104))
                    {
                      v177 += 72;
                      v175 = v179;
                    }
                    v180 = v172 + 8;
                    sub_1BE67AC7C(v172, *(_QWORD **)(v172 + 8));
                    *(_QWORD *)v172 = *(_QWORD *)v177;
                    v182 = (_QWORD *)(v177 + 8);
                    v181 = *(_QWORD *)(v177 + 8);
                    *(_QWORD *)(v172 + 8) = v181;
                    v183 = *(_QWORD *)(v177 + 16);
                    *(_QWORD *)(v172 + 16) = v183;
                    if (v183)
                    {
                      *(_QWORD *)(v181 + 16) = v180;
                      *(_QWORD *)v177 = v182;
                      *v182 = 0;
                      *(_QWORD *)(v177 + 16) = 0;
                    }
                    else
                    {
                      *(_QWORD *)v172 = v180;
                    }
                    v185 = v172 + 48;
                    v184 = *(_QWORD **)(v172 + 48);
                    *(_OWORD *)(v172 + 24) = *(_OWORD *)(v177 + 24);
                    sub_1BE62033C(v172 + 40, v184);
                    v186 = (_QWORD *)(v177 + 40);
                    *(_QWORD *)(v172 + 40) = *(_QWORD *)(v177 + 40);
                    v188 = (_QWORD *)(v177 + 48);
                    v187 = *(_QWORD *)(v177 + 48);
                    *(_QWORD *)(v172 + 48) = v187;
                    v189 = *(_QWORD *)(v177 + 56);
                    *(_QWORD *)(v172 + 56) = v189;
                    if (v189)
                      break;
                    *(_QWORD *)(v172 + 40) = v185;
                    *(_QWORD *)(v172 + 64) = *(_QWORD *)(v177 + 64);
                    v172 = v177;
                    if (v175 > v176)
                      goto LABEL_224;
                  }
                  *(_QWORD *)(v187 + 16) = v185;
                  *v186 = v188;
                  *v188 = 0;
                  *(_QWORD *)(v177 + 56) = 0;
                  *(_QWORD *)(v172 + 64) = *(_QWORD *)(v177 + 64);
                  v172 = v177;
                }
                while (v175 <= v176);
LABEL_224:
                v190 = (_OWORD *)(v177 + 24);
                sub_1BE67AC7C(v177, *(_QWORD **)(v177 + 8));
                v266 = v262 - 9;
                if ((double *)v177 == v262 - 9)
                {
                  *(_QWORD *)v177 = v268;
                  v194 = v269;
                  *(_QWORD *)(v177 + 8) = v269;
                  v195 = v270;
                  *(_QWORD *)(v177 + 16) = v270;
                  if (v195)
                  {
                    v194[2] = v182;
                    v268 = &v269;
                    v269 = 0;
                    v270 = 0;
                  }
                  else
                  {
                    *(_QWORD *)v177 = v182;
                  }
                  *v190 = v271;
                  sub_1BE62033C(v177 + 40, *(_QWORD **)(v177 + 48));
                  *(_QWORD *)(v177 + 40) = v272;
                  v208 = v273;
                  *(_QWORD *)(v177 + 48) = v273;
                  v209 = v274;
                  *(_QWORD *)(v177 + 56) = v274;
                  if (v209)
                  {
                    v208[2] = v188;
                    v272 = &v273;
                    v273 = 0;
                    v274 = 0;
                  }
                  else
                  {
                    *v186 = v188;
                  }
                  *(_QWORD *)(v177 + 64) = v275;
                }
                else
                {
                  *(double *)v177 = *(v262 - 9);
                  v192 = v262 - 8;
                  v191 = *((_QWORD *)v262 - 8);
                  *(_QWORD *)(v177 + 8) = v191;
                  v193 = *((_QWORD *)v262 - 7);
                  *(_QWORD *)(v177 + 16) = v193;
                  if (v193)
                  {
                    *(_QWORD *)(v191 + 16) = v182;
                    *(_QWORD *)v266 = v192;
                    *v192 = 0.0;
                    *(v262 - 7) = 0.0;
                  }
                  else
                  {
                    *(_QWORD *)v177 = v182;
                  }
                  *v190 = *((_OWORD *)v262 - 3);
                  sub_1BE62033C(v177 + 40, *(_QWORD **)(v177 + 48));
                  v196 = v262 - 4;
                  *(double *)(v177 + 40) = *(v262 - 4);
                  v198 = v262 - 3;
                  v197 = *((_QWORD *)v262 - 3);
                  *(_QWORD *)(v177 + 48) = v197;
                  v199 = *((_QWORD *)v262 - 2);
                  *(_QWORD *)(v177 + 56) = v199;
                  if (v199)
                  {
                    *(_QWORD *)(v197 + 16) = v188;
                    *(_QWORD *)v196 = v198;
                    *v198 = 0.0;
                    *(v262 - 2) = 0.0;
                  }
                  else
                  {
                    *v186 = v188;
                  }
                  *(double *)(v177 + 64) = *(v262 - 1);
                  sub_1BE67AC7C((uint64_t)v266, *((_QWORD **)v262 - 8));
                  *((_QWORD *)v262 - 9) = v268;
                  v200 = v269;
                  *((_QWORD *)v262 - 8) = v269;
                  v201 = v270;
                  *((_QWORD *)v262 - 7) = v270;
                  if (v201)
                  {
                    v200[2] = v192;
                    v268 = &v269;
                    v269 = 0;
                    v270 = 0;
                  }
                  else
                  {
                    *(_QWORD *)v266 = v192;
                  }
                  *((_OWORD *)v262 - 3) = v271;
                  sub_1BE62033C((uint64_t)(v262 - 4), *((_QWORD **)v262 - 3));
                  *((_QWORD *)v262 - 4) = v272;
                  v202 = v273;
                  *((_QWORD *)v262 - 3) = v273;
                  v203 = v274;
                  *((_QWORD *)v262 - 2) = v274;
                  if (v203)
                  {
                    v202[2] = v198;
                    v272 = &v273;
                    v273 = 0;
                    v274 = 0;
                    *((_QWORD *)v262 - 1) = v275;
                    v204 = v177 + 72 - a1;
                    if (v204 < 73)
                      goto LABEL_207;
                  }
                  else
                  {
                    *(_QWORD *)v196 = v198;
                    *((_QWORD *)v262 - 1) = v275;
                    v204 = v177 + 72 - a1;
                    if (v204 < 73)
                      goto LABEL_207;
                  }
                  v205 = (v204 / 0x48uLL - 2) >> 1;
                  v206 = a1 + 72 * v205;
                  if (*(double *)(v206 + 32) < *(double *)(v177 + 32))
                  {
                    v276 = *(_QWORD ***)v177;
                    v207 = *(_QWORD **)(v177 + 8);
                    v277 = v207;
                    v278 = *(_QWORD *)(v177 + 16);
                    if (v278)
                    {
                      v207[2] = &v277;
                      *(_QWORD *)v177 = v182;
                      *v182 = 0;
                      *(_QWORD *)(v177 + 16) = 0;
                    }
                    else
                    {
                      v276 = &v277;
                    }
                    v279 = *(_OWORD *)(v177 + 24);
                    v280 = *(_QWORD **)(v177 + 40);
                    v210 = *(_QWORD **)(v177 + 48);
                    v281 = v210;
                    v282 = *(_QWORD *)(v177 + 56);
                    if (v282)
                    {
                      v210[2] = &v281;
                      *v186 = v188;
                      *v188 = 0;
                      *(_QWORD *)(v177 + 56) = 0;
                    }
                    else
                    {
                      v280 = &v281;
                    }
                    v283 = *(_QWORD *)(v177 + 64);
                    while (1)
                    {
                      v212 = v206;
                      v213 = v177 + 8;
                      sub_1BE67AC7C(v177, *(_QWORD **)(v177 + 8));
                      *(_QWORD *)v177 = *(_QWORD *)v212;
                      v215 = (_QWORD *)(v212 + 8);
                      v214 = *(_QWORD *)(v212 + 8);
                      *(_QWORD *)(v177 + 8) = v214;
                      v216 = *(_QWORD *)(v212 + 16);
                      *(_QWORD *)(v177 + 16) = v216;
                      if (v216)
                      {
                        *(_QWORD *)(v214 + 16) = v213;
                        *(_QWORD *)v212 = v215;
                        *v215 = 0;
                        *(_QWORD *)(v212 + 16) = 0;
                      }
                      else
                      {
                        *(_QWORD *)v177 = v213;
                      }
                      v218 = v177 + 48;
                      v217 = *(_QWORD **)(v177 + 48);
                      *(_OWORD *)(v177 + 24) = *(_OWORD *)(v212 + 24);
                      sub_1BE62033C(v177 + 40, v217);
                      v219 = (_QWORD *)(v212 + 40);
                      *(_QWORD *)(v177 + 40) = *(_QWORD *)(v212 + 40);
                      v221 = (_QWORD *)(v212 + 48);
                      v220 = *(_QWORD *)(v212 + 48);
                      *(_QWORD *)(v177 + 48) = v220;
                      v222 = *(_QWORD *)(v212 + 56);
                      *(_QWORD *)(v177 + 56) = v222;
                      if (v222)
                      {
                        *(_QWORD *)(v220 + 16) = v218;
                        *v219 = v221;
                        *v221 = 0;
                        *(_QWORD *)(v212 + 56) = 0;
                        *(_QWORD *)(v177 + 64) = *(_QWORD *)(v212 + 64);
                        v211 = a1;
                        if (!v205)
                        {
LABEL_258:
                          sub_1BE67AC7C(v212, *(_QWORD **)(v212 + 8));
                          *(_QWORD *)v212 = v276;
                          v223 = v277;
                          *(_QWORD *)(v212 + 8) = v277;
                          v224 = v278;
                          *(_QWORD *)(v212 + 16) = v278;
                          if (v224)
                          {
                            v223[2] = v215;
                            v276 = &v277;
                            v277 = 0;
                            v278 = 0;
                          }
                          else
                          {
                            *(_QWORD *)v212 = v215;
                          }
                          *(_OWORD *)(v212 + 24) = v279;
                          sub_1BE62033C(v212 + 40, *(_QWORD **)(v212 + 48));
                          *(_QWORD *)(v212 + 40) = v280;
                          v225 = v281;
                          *(_QWORD *)(v212 + 48) = v281;
                          v226 = v282;
                          *(_QWORD *)(v212 + 56) = v282;
                          if (v226)
                          {
                            v225[2] = v221;
                            v225 = 0;
                            v280 = &v281;
                            v281 = 0;
                            v282 = 0;
                          }
                          else
                          {
                            *v219 = v221;
                          }
                          *(_QWORD *)(v212 + 64) = v283;
                          sub_1BE62033C((uint64_t)&v280, v225);
                          sub_1BE67AC7C((uint64_t)&v276, v277);
                          break;
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v177 + 40) = v218;
                        *(_QWORD *)(v177 + 64) = *(_QWORD *)(v212 + 64);
                        v211 = a1;
                        if (!v205)
                          goto LABEL_258;
                      }
                      v205 = (v205 - 1) >> 1;
                      v206 = v211 + 72 * v205;
                      v177 = v212;
                      if (*(double *)(v206 + 32) >= *((double *)&v279 + 1))
                        goto LABEL_258;
                    }
                  }
                }
LABEL_207:
                sub_1BE62033C((uint64_t)&v272, v273);
                sub_1BE67AC7C((uint64_t)&v268, v269);
                v171 = v170-- <= 2;
                a2 = v262 - 9;
              }
              while (!v171);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = v7 + 72 * ((unint64_t)v9 >> 1);
          v12 = *(a2 - 5);
          if ((unint64_t)v8 >= 0x2401)
          {
            v13 = *(double *)(v11 + 32);
            if (v13 >= *(double *)(v7 + 32))
            {
              if (v12 >= v13 || (sub_1BE88E23C(v11, v258), *(double *)(v11 + 32) >= *(double *)(v7 + 32)))
              {
LABEL_20:
                v19 = v7 + 72 * v10;
                v20 = v19 - 72;
                v21 = *(double *)(v19 - 40);
                v22 = *(a2 - 14);
                if (v21 >= *(double *)(v7 + 104))
                {
                  if (v22 >= v21 || (sub_1BE88E23C(v19 - 72, v257), *(double *)(v20 + 32) >= *(double *)(v7 + 104)))
                  {
LABEL_32:
                    v25 = v7 + 72 * v10;
                    v26 = v25 + 72;
                    v27 = *(double *)(v25 + 104);
                    v28 = *(a2 - 23);
                    if (v27 >= *(double *)(v7 + 176))
                    {
                      if (v28 >= v27 || (sub_1BE88E23C(v25 + 72, v255), *(double *)(v26 + 32) >= *(double *)(v7 + 176)))
                      {
LABEL_41:
                        v31 = *(double *)(v11 + 32);
                        v32 = *(double *)(v26 + 32);
                        if (v31 >= *(double *)(v20 + 32))
                        {
                          if (v32 >= v31)
                            goto LABEL_50;
                          sub_1BE88E23C(v11, v26);
                          if (*(double *)(v11 + 32) >= *(double *)(v20 + 32))
                            goto LABEL_50;
                          v33 = v20;
                          v34 = v11;
                        }
                        else
                        {
                          v33 = v20;
                          if (v32 >= v31)
                          {
                            sub_1BE88E23C(v20, v11);
                            if (*(double *)(v26 + 32) >= *(double *)(v11 + 32))
                            {
LABEL_50:
                              v17 = v7;
                              v18 = v11;
                              goto LABEL_51;
                            }
                            v33 = v11;
                          }
                          v34 = v26;
                        }
                        sub_1BE88E23C(v33, v34);
                        goto LABEL_50;
                      }
                      v29 = v7 + 144;
                      v30 = v26;
                    }
                    else
                    {
                      v29 = v7 + 144;
                      if (v28 >= v27)
                      {
                        sub_1BE88E23C(v29, v25 + 72);
                        if (*(a2 - 23) >= *(double *)(v26 + 32))
                          goto LABEL_41;
                        v29 = v26;
                      }
                      v30 = v255;
                    }
                    sub_1BE88E23C(v29, v30);
                    goto LABEL_41;
                  }
                  v23 = v7 + 72;
                  v24 = v20;
                }
                else
                {
                  v23 = v7 + 72;
                  if (v22 >= v21)
                  {
                    sub_1BE88E23C(v23, v19 - 72);
                    if (*(a2 - 14) >= *(double *)(v20 + 32))
                      goto LABEL_32;
                    v23 = v20;
                  }
                  v24 = v257;
                }
                sub_1BE88E23C(v23, v24);
                goto LABEL_32;
              }
              v14 = v7;
              v15 = v11;
            }
            else
            {
              v14 = v7;
              if (v12 >= v13)
              {
                sub_1BE88E23C(v7, v11);
                if (*(a2 - 5) >= *(double *)(v11 + 32))
                  goto LABEL_20;
                v14 = v11;
              }
              v15 = v258;
            }
            sub_1BE88E23C(v14, v15);
            goto LABEL_20;
          }
          v16 = *(double *)(v7 + 32);
          if (v16 >= *(double *)(v11 + 32))
          {
            if (v12 < v16)
            {
              sub_1BE88E23C(v7, v258);
              if (*(double *)(v7 + 32) < *(double *)(v11 + 32))
              {
                v17 = v11;
                v18 = v7;
                goto LABEL_51;
              }
            }
          }
          else
          {
            v17 = v11;
            if (v12 < v16)
              goto LABEL_15;
            sub_1BE88E23C(v11, v7);
            if (*(a2 - 5) < *(double *)(v7 + 32))
            {
              v17 = v7;
LABEL_15:
              v18 = v258;
LABEL_51:
              sub_1BE88E23C(v17, v18);
            }
          }
          --a3;
          if ((a4 & 1) == 0 && *(double *)(v7 - 40) >= *(double *)(v7 + 32))
          {
            v70 = (_QWORD *)(v7 + 8);
            v69 = *(_QWORD **)(v7 + 8);
            v276 = *(_QWORD ***)v7;
            v277 = v69;
            v278 = *(_QWORD *)(v7 + 16);
            if (v278)
            {
              v69[2] = &v277;
              *(_QWORD *)v7 = v70;
              *v70 = 0;
              *(_QWORD *)(v7 + 16) = 0;
            }
            else
            {
              v276 = &v277;
            }
            v71 = *(_QWORD **)(v7 + 40);
            v279 = *(_OWORD *)(v7 + 24);
            v72 = (_QWORD *)(v7 + 40);
            v75 = *(_QWORD **)(v7 + 48);
            v74 = (_QWORD *)(v7 + 48);
            v73 = v75;
            v280 = v71;
            v281 = v75;
            v282 = v72[2];
            if (v282)
            {
              v73[2] = &v281;
              *v72 = v74;
              *v74 = 0;
              v74[1] = 0;
            }
            else
            {
              v280 = &v281;
            }
            v283 = *(_QWORD *)(a1 + 64);
            if (*((double *)&v279 + 1) >= *(a2 - 5))
            {
              v78 = (double *)(a1 + 72);
              do
              {
                v6 = v78;
                if (v78 >= a2)
                  break;
                v79 = v78[4];
                v78 += 9;
              }
              while (*((double *)&v279 + 1) >= v79);
            }
            else
            {
              v76 = a1;
              do
              {
                v6 = (double *)(v76 + 72);
                v77 = *(double *)(v76 + 104);
                v76 += 72;
              }
              while (*((double *)&v279 + 1) >= v77);
            }
            v80 = (unint64_t)a2;
            if (v6 < a2)
            {
              v81 = a2;
              do
              {
                v80 = (unint64_t)(v81 - 9);
                v82 = *(v81 - 5);
                v81 -= 9;
              }
              while (*((double *)&v279 + 1) < v82);
            }
            while ((unint64_t)v6 < v80)
            {
              sub_1BE88E23C((uint64_t)v6, v80);
              do
              {
                v83 = v6[13];
                v6 += 9;
              }
              while (*((double *)&v279 + 1) >= v83);
              do
              {
                v84 = *(double *)(v80 - 40);
                v80 -= 72;
              }
              while (*((double *)&v279 + 1) < v84);
            }
            v85 = v6 - 9;
            if (v6 - 9 != (double *)a1)
            {
              sub_1BE67AC7C(a1, *(_QWORD **)(a1 + 8));
              *(double *)a1 = *(v6 - 9);
              v86 = v6 - 8;
              v87 = *((_QWORD *)v6 - 8);
              *(_QWORD *)(a1 + 8) = v87;
              v88 = *((_QWORD *)v6 - 7);
              *(_QWORD *)(a1 + 16) = v88;
              if (v88)
              {
                *(_QWORD *)(v87 + 16) = v70;
                *(_QWORD *)v85 = v86;
                *v86 = 0.0;
                *(v6 - 7) = 0.0;
              }
              else
              {
                *(_QWORD *)a1 = v70;
              }
              *((_OWORD *)v72 - 1) = *((_OWORD *)v6 - 3);
              sub_1BE62033C((uint64_t)v72, *(_QWORD **)(a1 + 48));
              *(double *)(a1 + 40) = *(v6 - 4);
              v89 = v6 - 3;
              v90 = *((_QWORD *)v6 - 3);
              *(_QWORD *)(a1 + 48) = v90;
              v91 = *((_QWORD *)v6 - 2);
              *(_QWORD *)(a1 + 56) = v91;
              if (v91)
              {
                *(_QWORD *)(v90 + 16) = v74;
                *((_QWORD *)v6 - 4) = v89;
                *v89 = 0.0;
                *(v6 - 2) = 0.0;
              }
              else
              {
                *v72 = v74;
              }
              *(double *)(a1 + 64) = *(v6 - 1);
            }
            v92 = a2;
            v93 = v6 - 8;
            sub_1BE67AC7C((uint64_t)(v6 - 9), *((_QWORD **)v6 - 8));
            *((_QWORD *)v6 - 9) = v276;
            v94 = v277;
            *((_QWORD *)v6 - 8) = v277;
            v95 = v278;
            *((_QWORD *)v6 - 7) = v278;
            if (v95)
            {
              v94[2] = v93;
              v276 = &v277;
              v277 = 0;
              v278 = 0;
            }
            else
            {
              *(_QWORD *)v85 = v93;
            }
            v97 = v6 - 3;
            v96 = (_QWORD *)*((_QWORD *)v6 - 3);
            *((_OWORD *)v6 - 3) = v279;
            sub_1BE62033C((uint64_t)(v6 - 4), v96);
            *((_QWORD *)v6 - 4) = v280;
            v98 = v281;
            *((_QWORD *)v6 - 3) = v281;
            v99 = v282;
            *((_QWORD *)v6 - 2) = v282;
            if (v99)
            {
              v100 = 0;
              v98[2] = v97;
              v280 = &v281;
              v281 = 0;
              v282 = 0;
            }
            else
            {
              *((_QWORD *)v6 - 4) = v97;
              v100 = v281;
            }
            a2 = v92;
            *((_QWORD *)v6 - 1) = v283;
            sub_1BE62033C((uint64_t)&v280, v100);
            sub_1BE67AC7C((uint64_t)&v276, v277);
            a4 = 0;
            continue;
          }
          v36 = (_QWORD *)(v7 + 8);
          v35 = *(_QWORD **)(v7 + 8);
          v276 = *(_QWORD ***)v7;
          v277 = v35;
          v278 = *(_QWORD *)(v7 + 16);
          if (v278)
          {
            v35[2] = &v277;
            *(_QWORD *)v7 = v36;
            *v36 = 0;
            *(_QWORD *)(v7 + 16) = 0;
          }
          else
          {
            v276 = &v277;
          }
          v38 = (_QWORD *)(v7 + 40);
          v37 = *(_QWORD **)(v7 + 40);
          v279 = *(_OWORD *)(v7 + 24);
          v40 = (_QWORD *)(v7 + 48);
          v39 = *(_QWORD **)(v7 + 48);
          v280 = v37;
          v281 = v39;
          v282 = *(_QWORD *)(v7 + 56);
          if (v282)
          {
            v39[2] = &v281;
            *v38 = v40;
            *v40 = 0;
            *(_QWORD *)(v7 + 56) = 0;
          }
          else
          {
            v280 = &v281;
          }
          v41 = 0;
          v283 = *(_QWORD *)(v7 + 64);
          do
          {
            v42 = *(double *)(v7 + v41 + 104);
            v41 += 72;
          }
          while (v42 < *((double *)&v279 + 1));
          v43 = (double *)(v7 + v41);
          v44 = a2;
          if (v41 == 72)
          {
            v47 = a2;
            while (v43 < v47)
            {
              v45 = (unint64_t)(v47 - 9);
              v48 = *(v47 - 5);
              v47 -= 9;
              if (v48 < *((double *)&v279 + 1))
                goto LABEL_68;
            }
            v45 = (unint64_t)v47;
            v264 = a3;
            v6 = v43;
          }
          else
          {
            do
            {
              v45 = (unint64_t)(v44 - 9);
              v46 = *(v44 - 5);
              v44 -= 9;
            }
            while (v46 >= *((double *)&v279 + 1));
LABEL_68:
            v264 = a3;
            v6 = v43;
            if ((unint64_t)v43 < v45)
            {
              v49 = v45;
              do
              {
                sub_1BE88E23C((uint64_t)v6, v49);
                do
                {
                  v50 = v6[13];
                  v6 += 9;
                }
                while (v50 < *((double *)&v279 + 1));
                do
                {
                  v51 = *(double *)(v49 - 40);
                  v49 -= 72;
                }
                while (v51 >= *((double *)&v279 + 1));
              }
              while ((unint64_t)v6 < v49);
            }
          }
          v52 = v6 - 9;
          if (v6 - 9 != (double *)a1)
          {
            sub_1BE67AC7C(a1, *(_QWORD **)(a1 + 8));
            *(double *)a1 = *(v6 - 9);
            v53 = v6 - 8;
            v54 = *((_QWORD *)v6 - 8);
            *(_QWORD *)(a1 + 8) = v54;
            v55 = *((_QWORD *)v6 - 7);
            *(_QWORD *)(a1 + 16) = v55;
            if (v55)
            {
              *(_QWORD *)(v54 + 16) = v36;
              *(_QWORD *)v52 = v53;
              *v53 = 0.0;
              *(v6 - 7) = 0.0;
            }
            else
            {
              *(_QWORD *)a1 = v36;
            }
            *((_OWORD *)v38 - 1) = *((_OWORD *)v6 - 3);
            sub_1BE62033C((uint64_t)v38, *(_QWORD **)(a1 + 48));
            *(double *)(a1 + 40) = *(v6 - 4);
            v56 = v6 - 3;
            v57 = *((_QWORD *)v6 - 3);
            *(_QWORD *)(a1 + 48) = v57;
            v58 = *((_QWORD *)v6 - 2);
            *(_QWORD *)(a1 + 56) = v58;
            if (v58)
            {
              *(_QWORD *)(v57 + 16) = v40;
              *((_QWORD *)v6 - 4) = v56;
              *v56 = 0.0;
              *(v6 - 2) = 0.0;
            }
            else
            {
              *v38 = v40;
            }
            *(double *)(a1 + 64) = *(v6 - 1);
          }
          v59 = a2;
          v60 = v6 - 8;
          sub_1BE67AC7C((uint64_t)(v6 - 9), *((_QWORD **)v6 - 8));
          *((_QWORD *)v6 - 9) = v276;
          v61 = v277;
          *((_QWORD *)v6 - 8) = v277;
          v62 = v278;
          *((_QWORD *)v6 - 7) = v278;
          if (v62)
          {
            v61[2] = v60;
            v276 = &v277;
            v277 = 0;
            v278 = 0;
          }
          else
          {
            *(_QWORD *)v52 = v60;
          }
          a3 = v264;
          v64 = v6 - 3;
          v63 = (_QWORD *)*((_QWORD *)v6 - 3);
          *((_OWORD *)v6 - 3) = v279;
          sub_1BE62033C((uint64_t)(v6 - 4), v63);
          *((_QWORD *)v6 - 4) = v280;
          v65 = v281;
          *((_QWORD *)v6 - 3) = v281;
          v66 = v282;
          *((_QWORD *)v6 - 2) = v282;
          if (v66)
          {
            v67 = 0;
            v65[2] = v64;
            v280 = &v281;
            v281 = 0;
            v282 = 0;
          }
          else
          {
            *((_QWORD *)v6 - 4) = v64;
            v67 = v281;
          }
          *((_QWORD *)v6 - 1) = v283;
          sub_1BE62033C((uint64_t)&v280, v67);
          sub_1BE67AC7C((uint64_t)&v276, v277);
          a2 = v59;
          if ((unint64_t)v43 < v45)
          {
LABEL_91:
            sub_1BE88C48C(a1, v6 - 9, v264, a4 & 1);
            a4 = 0;
            continue;
          }
          v68 = sub_1BE88DD88((double *)a1, v6 - 9);
          if (!sub_1BE88DD88(v6, v59))
          {
            if (!v68)
              goto LABEL_91;
            continue;
          }
          a2 = v6 - 9;
          if (v68)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((double *)v7 != a2)
          {
            v109 = (_QWORD *)(v7 + 72);
            if ((double *)(v7 + 72) != a2)
            {
              v110 = 0;
              v111 = (_QWORD *)a1;
              do
              {
                v113 = v109;
                if (*((double *)v109 + 4) < *((double *)v111 + 4))
                {
                  v114 = v111 + 10;
                  v115 = (_QWORD *)v111[10];
                  v276 = (_QWORD **)*v113;
                  v277 = v115;
                  v278 = v111[11];
                  if (v278)
                  {
                    v115[2] = &v277;
                    *v113 = v114;
                    *v114 = 0;
                    v111[11] = 0;
                  }
                  else
                  {
                    v276 = &v277;
                  }
                  v116 = v111 + 15;
                  v117 = (_QWORD *)v111[15];
                  v279 = *((_OWORD *)v111 + 6);
                  v280 = (_QWORD *)v111[14];
                  v281 = v117;
                  v282 = v111[16];
                  v118 = a2;
                  if (v282)
                  {
                    v117[2] = &v281;
                    v111[14] = v116;
                    *v116 = 0;
                    v111[16] = 0;
                  }
                  else
                  {
                    v280 = &v281;
                  }
                  v283 = v111[17];
                  v119 = v110;
                  do
                  {
                    v121 = (_QWORD *)(a1 + v119);
                    v122 = (_QWORD **)(a1 + v119 + 80);
                    sub_1BE67AC7C(a1 + v119 + 72, *v122);
                    v121[9] = *v121;
                    v123 = (_QWORD *)(a1 + v119 + 8);
                    v124 = (_QWORD *)*v123;
                    *v122 = (_QWORD *)*v123;
                    v125 = *(_QWORD *)(a1 + v119 + 16);
                    v121[11] = v125;
                    if (v125)
                    {
                      v124[2] = v122;
                      *v121 = v123;
                      *v123 = 0;
                      v121[2] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(a1 + v119 + 72) = v122;
                    }
                    v126 = (_QWORD *)(a1 + v119);
                    *(_OWORD *)(a1 + v119 + 96) = *(_OWORD *)(a1 + v119 + 24);
                    v127 = (_QWORD **)(a1 + v119 + 120);
                    sub_1BE62033C(a1 + v119 + 112, *v127);
                    v126[14] = v126[5];
                    v128 = (_QWORD *)(a1 + v119 + 48);
                    v129 = (_QWORD *)*v128;
                    *v127 = (_QWORD *)*v128;
                    v130 = *(_QWORD *)(a1 + v119 + 56);
                    v126[16] = v130;
                    if (v130)
                    {
                      v129[2] = v127;
                      v126[5] = v128;
                      *v128 = 0;
                      v126[7] = 0;
                      v120 = a1 + v119;
                      *(_QWORD *)(a1 + v119 + 136) = *(_QWORD *)(a1 + v119 + 64);
                      if (!v119)
                      {
LABEL_164:
                        v131 = (_QWORD *)a1;
                        goto LABEL_166;
                      }
                    }
                    else
                    {
                      v126[14] = v127;
                      v120 = a1 + v119;
                      *(_QWORD *)(a1 + v119 + 136) = *(_QWORD *)(a1 + v119 + 64);
                      if (!v119)
                        goto LABEL_164;
                    }
                    v119 -= 72;
                  }
                  while (*((double *)&v279 + 1) < *(double *)(v120 - 40));
                  v131 = (_QWORD *)(a1 + v119 + 72);
LABEL_166:
                  v133 = *(_QWORD **)(v120 + 8);
                  v132 = v120 + 8;
                  sub_1BE67AC7C((uint64_t)v131, v133);
                  *v131 = v276;
                  v134 = v277;
                  *(_QWORD *)v132 = v277;
                  v135 = v278;
                  v131[2] = v278;
                  if (v135)
                  {
                    v134[2] = v132;
                    v276 = &v277;
                    v277 = 0;
                    v278 = 0;
                  }
                  else
                  {
                    *v131 = v132;
                  }
                  v136 = v132 + 40;
                  *(_OWORD *)(v132 + 16) = v279;
                  sub_1BE62033C(v132 + 32, *(_QWORD **)(v132 + 40));
                  *(_QWORD *)(v132 + 32) = v280;
                  v137 = v281;
                  *(_QWORD *)(v132 + 40) = v281;
                  v138 = v282;
                  v131[7] = v282;
                  if (v138)
                  {
                    v112 = 0;
                    v137[2] = v136;
                    v280 = &v281;
                    v281 = 0;
                    v282 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v132 + 32) = v136;
                    v112 = v281;
                  }
                  v131[8] = v283;
                  sub_1BE62033C((uint64_t)&v280, v112);
                  sub_1BE67AC7C((uint64_t)&v276, v277);
                  a2 = v118;
                }
                v109 = v113 + 9;
                v110 += 72;
                v111 = v113;
              }
              while (v113 + 9 != (_QWORD *)a2);
            }
          }
        }
        else if ((double *)v7 != a2)
        {
          v228 = (_QWORD *)(v7 + 72);
          if ((double *)(v7 + 72) != a2)
          {
            v229 = (_QWORD *)(v7 + 136);
            do
            {
              v231 = v228;
              if (*((double *)v228 + 4) < *(double *)(a1 + 32))
              {
                v232 = (_QWORD *)(a1 + 80);
                v233 = *(_QWORD **)(a1 + 80);
                v276 = (_QWORD **)*v231;
                v277 = v233;
                v278 = *(_QWORD *)(a1 + 88);
                if (v278)
                {
                  v233[2] = &v277;
                  *v231 = v232;
                  *v232 = 0;
                  *(_QWORD *)(a1 + 88) = 0;
                }
                else
                {
                  v276 = &v277;
                }
                v234 = (_QWORD *)(a1 + 120);
                v235 = *(_QWORD **)(a1 + 120);
                v279 = *(_OWORD *)(a1 + 96);
                v280 = *(_QWORD **)(a1 + 112);
                v281 = v235;
                v282 = *(_QWORD *)(a1 + 128);
                v236 = a2;
                if (v282)
                {
                  v235[2] = &v281;
                  *(_QWORD *)(a1 + 112) = v234;
                  *v234 = 0;
                  *(_QWORD *)(a1 + 128) = 0;
                }
                else
                {
                  v280 = &v281;
                }
                v283 = *(_QWORD *)(a1 + 136);
                v237 = v229;
                do
                {
                  v240 = v237 - 7;
                  sub_1BE67AC7C((uint64_t)(v237 - 8), (_QWORD *)*(v237 - 7));
                  v241 = v237 - 16;
                  v242 = *(v237 - 16);
                  *(v237 - 8) = *(v237 - 17);
                  *(v237 - 7) = v242;
                  v243 = *(v237 - 15);
                  *(v237 - 6) = v243;
                  if (v243)
                  {
                    *(_QWORD *)(v242 + 16) = v240;
                    *(v237 - 17) = v241;
                    *v241 = 0;
                    *(v237 - 15) = 0;
                  }
                  else
                  {
                    *(v237 - 8) = v240;
                  }
                  *(_OWORD *)(v237 - 5) = *((_OWORD *)v237 - 7);
                  v244 = v237 - 2;
                  sub_1BE62033C((uint64_t)(v237 - 3), (_QWORD *)*(v237 - 2));
                  v245 = v237 - 11;
                  v246 = *(v237 - 11);
                  *(v237 - 3) = *(v237 - 12);
                  *(v237 - 2) = v246;
                  v247 = *(v237 - 10);
                  *(v237 - 1) = v247;
                  if (v247)
                  {
                    *(_QWORD *)(v246 + 16) = v244;
                    *(v237 - 12) = v245;
                    *v245 = 0;
                    *(v237 - 10) = 0;
                  }
                  else
                  {
                    *(v237 - 3) = v244;
                  }
                  v238 = v237 - 9;
                  *v237 = *(v237 - 9);
                  v239 = *((double *)v237 - 22);
                  v237 -= 9;
                }
                while (*((double *)&v279 + 1) < v239);
                v248 = v238 - 7;
                sub_1BE67AC7C((uint64_t)(v238 - 8), (_QWORD *)*(v238 - 7));
                *(v238 - 8) = v276;
                v249 = v277;
                *(v238 - 7) = v277;
                v250 = v278;
                *(v238 - 6) = v278;
                if (v250)
                {
                  v249[2] = v248;
                  v276 = &v277;
                  v277 = 0;
                  v278 = 0;
                }
                else
                {
                  *(v238 - 8) = v248;
                }
                v251 = v238 - 2;
                *(_OWORD *)(v238 - 5) = v279;
                sub_1BE62033C((uint64_t)(v238 - 3), (_QWORD *)*(v238 - 2));
                *(v238 - 3) = v280;
                v252 = v281;
                *(v238 - 2) = v281;
                v253 = v282;
                *(v238 - 1) = v282;
                if (v253)
                {
                  v230 = 0;
                  v252[2] = v251;
                  v280 = &v281;
                  v281 = 0;
                  v282 = 0;
                }
                else
                {
                  *(v238 - 3) = v251;
                  v230 = v281;
                }
                *v238 = v283;
                sub_1BE62033C((uint64_t)&v280, v230);
                sub_1BE67AC7C((uint64_t)&v276, v277);
                a2 = v236;
              }
              v228 = v231 + 9;
              v229 += 9;
              a1 = (uint64_t)v231;
            }
            while (v231 + 9 != (_QWORD *)a2);
          }
        }
        return;
    }
  }
}

BOOL sub_1BE62B50C(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  char v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[24];

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if ((*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
      {
        v10 = *(_OWORD *)a1;
        *(_OWORD *)v74 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)v74;
        *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD *)(a2 - 11);
        v12 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v8;
        *(_OWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 29) = v11;
        *v8 = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)&v74[13];
      }
      return 1;
    case 3uLL:
      v13 = a1 + 40;
      v14 = a2 - 40;
      v15 = (*a3)((__int128 *)(a1 + 40), (__int128 *)a1);
      v16 = (*a3)((__int128 *)v14, (__int128 *)(a1 + 40));
      if ((v15 & 1) != 0)
      {
        if (v16)
        {
          v18 = *(_OWORD *)a1;
          v17 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v74 = v17;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
          v19 = *(_QWORD *)(v14 + 29);
          v20 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 16) = v20;
          *(_QWORD *)(a1 + 29) = v19;
        }
        else
        {
          v56 = *(_OWORD *)a1;
          *(_OWORD *)v74 = *(_OWORD *)(a1 + 16);
          v55 = *(_OWORD *)v74;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
          v57 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 16) = v57;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(a1 + 69);
          *(_OWORD *)v13 = v56;
          *(_OWORD *)(a1 + 56) = v55;
          *(_QWORD *)(a1 + 69) = *(_QWORD *)&v74[13];
          if (!(*a3)((__int128 *)v14, (__int128 *)(a1 + 40)))
            return 1;
          v18 = *(_OWORD *)v13;
          v17 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)v74 = v17;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 72);
          v58 = *(_QWORD *)(v14 + 29);
          v59 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v13 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 56) = v59;
          *(_QWORD *)(a1 + 69) = v58;
        }
        *(_OWORD *)v14 = v18;
        *(_OWORD *)(v14 + 16) = v17;
        *(_QWORD *)(v14 + 29) = *(_QWORD *)&v74[13];
      }
      else if (v16)
      {
        v43 = *(_OWORD *)v13;
        *(_OWORD *)v74 = *(_OWORD *)(a1 + 56);
        v42 = *(_OWORD *)v74;
        *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 72);
        v44 = *(_QWORD *)(v14 + 29);
        v45 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)v13 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 56) = v45;
        *(_QWORD *)(a1 + 69) = v44;
        *(_OWORD *)v14 = v43;
        *(_OWORD *)(v14 + 16) = v42;
        *(_QWORD *)(v14 + 29) = *(_QWORD *)&v74[13];
LABEL_17:
        if ((*a3)((__int128 *)v13, (__int128 *)a1))
        {
          v47 = *(_OWORD *)a1;
          *(_OWORD *)v74 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)v74;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
          v48 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 16) = v48;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(v13 + 29);
          *(_OWORD *)v13 = v47;
          *(_OWORD *)(v13 + 16) = v46;
          *(_QWORD *)(v13 + 29) = *(_QWORD *)&v74[13];
        }
      }
      return 1;
    case 4uLL:
      sub_1BE62BA1C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), (__int128 *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      v13 = a1 + 40;
      v21 = (__int128 *)(a1 + 80);
      v22 = (__int128 *)(a1 + 120);
      v23 = a2 - 40;
      v24 = sub_1BE62BA1C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), (__int128 *)(a1 + 120), a3);
      if (!((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v23, a1 + 120, v24))
        return 1;
      v26 = *v22;
      *(_OWORD *)v74 = *(_OWORD *)(a1 + 136);
      v25 = *(_OWORD *)v74;
      *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 152);
      v27 = *(_QWORD *)(v23 + 29);
      v28 = *(_OWORD *)(v23 + 16);
      *v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 136) = v28;
      *(_QWORD *)(a1 + 149) = v27;
      *(_OWORD *)v23 = v26;
      *(_OWORD *)(v23 + 16) = v25;
      *(_QWORD *)(v23 + 29) = *(_QWORD *)&v74[13];
      if (!(*a3)((__int128 *)(a1 + 120), (__int128 *)(a1 + 80)))
        return 1;
      v30 = *v21;
      *(_OWORD *)v74 = *(_OWORD *)(a1 + 96);
      v29 = *(_OWORD *)v74;
      *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 136);
      *v21 = *v22;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 109) = *(_QWORD *)(a1 + 149);
      *v22 = v30;
      *(_OWORD *)(a1 + 136) = v29;
      *(_QWORD *)(a1 + 149) = *(_QWORD *)&v74[13];
      if (!(*a3)((__int128 *)(a1 + 80), (__int128 *)(a1 + 40)))
        return 1;
      v33 = *(_OWORD *)v13;
      *(_OWORD *)v74 = *(_OWORD *)(a1 + 56);
      v32 = *(_OWORD *)v74;
      *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 72);
      v34 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)v13 = *v21;
      *(_OWORD *)(a1 + 56) = v34;
      *(_QWORD *)(a1 + 69) = *(_QWORD *)(a1 + 109);
      *v21 = v33;
      *(_OWORD *)(a1 + 96) = v32;
      *(_QWORD *)(a1 + 109) = *(_QWORD *)&v74[13];
      goto LABEL_17;
    default:
      v35 = (__int128 *)(a1 + 80);
      v36 = (__int128 *)(a1 + 40);
      v37 = (*a3)((__int128 *)(a1 + 40), (__int128 *)a1);
      v38 = (*a3)((__int128 *)(a1 + 80), (__int128 *)(a1 + 40));
      if ((v37 & 1) != 0)
      {
        if (v38)
        {
          v40 = *(_OWORD *)a1;
          v39 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v74 = v39;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
          v41 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v35;
          *(_OWORD *)(a1 + 16) = v41;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(a1 + 109);
        }
        else
        {
          v61 = *(_OWORD *)a1;
          *(_OWORD *)v74 = *(_OWORD *)(a1 + 16);
          v60 = *(_OWORD *)v74;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
          v62 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *v36;
          *(_OWORD *)(a1 + 16) = v62;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(a1 + 69);
          *v36 = v61;
          *(_OWORD *)(a1 + 56) = v60;
          *(_QWORD *)(a1 + 69) = *(_QWORD *)&v74[13];
          if (!(*a3)((__int128 *)(a1 + 80), (__int128 *)(a1 + 40)))
            goto LABEL_28;
          v40 = *v36;
          v39 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)v74 = v39;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 72);
          v63 = *(_OWORD *)(a1 + 96);
          *v36 = *v35;
          *(_OWORD *)(a1 + 56) = v63;
          *(_QWORD *)(a1 + 69) = *(_QWORD *)(a1 + 109);
        }
        *v35 = v40;
        *(_OWORD *)(a1 + 96) = v39;
        *(_QWORD *)(a1 + 109) = *(_QWORD *)&v74[13];
      }
      else if (v38)
      {
        v50 = *v36;
        *(_OWORD *)v74 = *(_OWORD *)(a1 + 56);
        v49 = *(_OWORD *)v74;
        *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 72);
        v51 = *(_OWORD *)(a1 + 96);
        *v36 = *v35;
        *(_OWORD *)(a1 + 56) = v51;
        *(_QWORD *)(a1 + 69) = *(_QWORD *)(a1 + 109);
        *v35 = v50;
        *(_OWORD *)(a1 + 96) = v49;
        *(_QWORD *)(a1 + 109) = *(_QWORD *)&v74[13];
        if ((*a3)((__int128 *)(a1 + 40), (__int128 *)a1))
        {
          v53 = *(_OWORD *)a1;
          *(_OWORD *)v74 = *(_OWORD *)(a1 + 16);
          v52 = *(_OWORD *)v74;
          *(_QWORD *)&v74[16] = *(_QWORD *)(a1 + 32);
          v54 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *v36;
          *(_OWORD *)(a1 + 16) = v54;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(a1 + 69);
          *v36 = v53;
          *(_OWORD *)(a1 + 56) = v52;
          *(_QWORD *)(a1 + 69) = *(_QWORD *)&v74[13];
        }
      }
LABEL_28:
      v64 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v64, v35))
    {
      v69 = *(_OWORD *)(v64 + 16);
      v73 = *(_OWORD *)v64;
      *(_OWORD *)v74 = v69;
      *(_QWORD *)&v74[16] = *(_QWORD *)(v64 + 32);
      v70 = v65;
      do
      {
        v71 = a1 + v70;
        v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_QWORD *)(v71 + 149) = *(_QWORD *)(a1 + v70 + 109);
        if (v70 == -80)
        {
          v67 = a1;
          goto LABEL_31;
        }
        v70 -= 40;
      }
      while (((*a3)(&v73, (__int128 *)(v71 + 40)) & 1) != 0);
      v67 = a1 + v70 + 120;
LABEL_31:
      v68 = *(_OWORD *)v74;
      *(_OWORD *)v67 = v73;
      *(_OWORD *)(v67 + 16) = v68;
      *(_QWORD *)(v67 + 29) = *(_QWORD *)&v74[13];
      if (++v66 == 8)
        return v64 + 40 == a2;
    }
    v35 = (__int128 *)v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2)
      return 1;
  }
}

__n128 sub_1BE62BA1C(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  char v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[12];

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v13 = *a1;
      v12 = a1[1];
      *(_DWORD *)v43 = HIDWORD(v12);
      *(_QWORD *)&v43[4] = *((_QWORD *)a1 + 4);
      v14 = *(_QWORD *)((char *)a3 + 29);
      v15 = a3[1];
      *a1 = *a3;
      a1[1] = v15;
      *(_QWORD *)((char *)a1 + 29) = v14;
LABEL_9:
      *a3 = v13;
      a3[1] = v12;
      *(_QWORD *)((char *)a3 + 29) = *(_QWORD *)&v43[1];
      goto LABEL_10;
    }
    v22 = *a1;
    *(_OWORD *)v39 = a1[1];
    *(_QWORD *)&v39[16] = *((_QWORD *)a1 + 4);
    v23 = *(_QWORD *)((char *)a2 + 29);
    v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *(_QWORD *)((char *)a1 + 29) = v23;
    *a2 = v22;
    a2[1] = *(_OWORD *)v39;
    *(_QWORD *)((char *)a2 + 29) = *(_QWORD *)&v39[13];
    if ((*a5)(a3, a2))
    {
      v13 = *a2;
      v12 = a2[1];
      *(_DWORD *)v43 = HIDWORD(v12);
      *(_QWORD *)&v43[4] = *((_QWORD *)a2 + 4);
      v25 = *(_QWORD *)((char *)a3 + 29);
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      *(_QWORD *)((char *)a2 + 29) = v25;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v16 = *a2;
    *(_OWORD *)v37 = a2[1];
    *(_QWORD *)&v37[16] = *((_QWORD *)a2 + 4);
    v17 = *(_QWORD *)((char *)a3 + 29);
    v18 = a3[1];
    *a2 = *a3;
    a2[1] = v18;
    *(_QWORD *)((char *)a2 + 29) = v17;
    *a3 = v16;
    a3[1] = *(_OWORD *)v37;
    *(_QWORD *)((char *)a3 + 29) = *(_QWORD *)&v37[13];
    if ((*a5)(a2, a1))
    {
      v19 = *a1;
      *(_OWORD *)v38 = a1[1];
      *(_QWORD *)&v38[16] = *((_QWORD *)a1 + 4);
      v20 = *(_QWORD *)((char *)a2 + 29);
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      *(_QWORD *)((char *)a1 + 29) = v20;
      *a2 = v19;
      a2[1] = *(_OWORD *)v38;
      *(_QWORD *)((char *)a2 + 29) = *(_QWORD *)&v38[13];
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    v28 = *a3;
    *(_OWORD *)v40 = a3[1];
    *(_QWORD *)&v40[16] = *((_QWORD *)a3 + 4);
    v29 = *(_QWORD *)((char *)a4 + 29);
    v30 = a4[1];
    *a3 = *a4;
    a3[1] = v30;
    *(_QWORD *)((char *)a3 + 29) = v29;
    *a4 = v28;
    a4[1] = *(_OWORD *)v40;
    *(_QWORD *)((char *)a4 + 29) = *(_QWORD *)&v40[13];
    if ((*a5)(a3, a2))
    {
      v31 = *a2;
      *(_OWORD *)v41 = a2[1];
      *(_QWORD *)&v41[16] = *((_QWORD *)a2 + 4);
      v32 = *(_QWORD *)((char *)a3 + 29);
      v33 = a3[1];
      *a2 = *a3;
      a2[1] = v33;
      *(_QWORD *)((char *)a2 + 29) = v32;
      *a3 = v31;
      a3[1] = *(_OWORD *)v41;
      *(_QWORD *)((char *)a3 + 29) = *(_QWORD *)&v41[13];
      if ((*a5)(a2, a1))
      {
        v34 = *a1;
        *(_OWORD *)v42 = a1[1];
        result = *(__n128 *)v42;
        *(_QWORD *)&v42[16] = *((_QWORD *)a1 + 4);
        v35 = *(_QWORD *)((char *)a2 + 29);
        v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        *(_QWORD *)((char *)a1 + 29) = v35;
        *a2 = v34;
        a2[1] = *(_OWORD *)v42;
        *(_QWORD *)((char *)a2 + 29) = *(_QWORD *)&v42[13];
      }
    }
  }
  return result;
}

__int128 *sub_1BE62BC50(uint64_t a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(uint64_t, char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  unsigned int v24;
  __int128 *v25;
  int64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  BOOL v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int64_t v57;
  int64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 *v62;
  __int128 *v63;
  __int128 v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  __int128 *v72;
  __int128 *v73;
  __int128 v74;
  _BYTE v75[24];
  __int128 v76;
  _BYTE v77[24];
  uint64_t v78;
  uint64_t v79;

  if ((__int128 *)a1 == a2)
    return a3;
  v78 = v4;
  v79 = v5;
  v71 = a3;
  v73 = a2;
  v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  v70 = (uint64_t)a2 - a1;
  if ((uint64_t)a2 - a1 >= 41 && (unint64_t)v70 >= 0x50)
  {
    v57 = (unint64_t)(v8 - 2) >> 1;
    v58 = v57;
    do
    {
      if (v57 >= v58)
      {
        v61 = (2 * v58) | 1;
        v62 = (__int128 *)(a1 + 40 * v61);
        if (2 * v58 + 2 < v8 && (*a4)(a1 + 40 * v61, (char *)v62 + 40))
        {
          v62 = (__int128 *)((char *)v62 + 40);
          v61 = 2 * v58 + 2;
        }
        v63 = (__int128 *)(a1 + 40 * v58);
        if ((((uint64_t (*)(__int128 *, __int128 *))*a4)(v62, v63) & 1) == 0)
        {
          v64 = v63[1];
          v76 = *v63;
          *(_OWORD *)v77 = v64;
          *(_QWORD *)&v77[16] = *((_QWORD *)v63 + 4);
          do
          {
            v65 = v62;
            v66 = *v62;
            v67 = v62[1];
            *(_QWORD *)((char *)v63 + 29) = *(_QWORD *)((char *)v62 + 29);
            *v63 = v66;
            v63[1] = v67;
            if (v57 < v61)
              break;
            v68 = (2 * v61) | 1;
            v62 = (__int128 *)(a1 + 40 * v68);
            v69 = 2 * v61 + 2;
            if (v69 < v8 && (*a4)(a1 + 40 * v68, (char *)v62 + 40))
            {
              v62 = (__int128 *)((char *)v62 + 40);
              v68 = v69;
            }
            v63 = v65;
            v61 = v68;
          }
          while (!(*a4)((uint64_t)v62, (char *)&v76));
          v59 = v76;
          v60 = *(_OWORD *)v77;
          *(_QWORD *)((char *)v65 + 29) = *(_QWORD *)&v77[13];
          *v65 = v59;
          v65[1] = v60;
        }
      }
      v35 = v58-- <= 0;
    }
    while (!v35);
  }
  v9 = v71;
  a3 = v73;
  v10 = v70;
  if (v73 != v71)
  {
    if (v70 < 80)
    {
      v11 = v73;
      do
      {
        if (((unsigned int (*)(__int128 *, uint64_t, __int128 *))*a4)(v11, a1, a3))
        {
          v13 = *v11;
          *(_OWORD *)v77 = v11[1];
          v12 = *(_OWORD *)v77;
          *(_QWORD *)&v77[16] = *((_QWORD *)v11 + 4);
          v14 = *(_QWORD *)(a1 + 29);
          v15 = *(_OWORD *)(a1 + 16);
          *v11 = *(_OWORD *)a1;
          v11[1] = v15;
          *(_QWORD *)((char *)v11 + 29) = v14;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)&v77[13];
        }
        v11 = (__int128 *)((char *)v11 + 40);
      }
      while (v11 != v71);
      a3 = v71;
      goto LABEL_32;
    }
    v16 = (__int128 *)(a1 + 40);
    v17 = v73;
    while (1)
    {
      if (((unsigned int (*)(__int128 *, uint64_t, __int128 *))*a4)(v17, a1, a3))
      {
        v21 = *v17;
        *(_OWORD *)v77 = v17[1];
        v20 = *(_OWORD *)v77;
        *(_QWORD *)&v77[16] = *((_QWORD *)v17 + 4);
        v22 = *(_QWORD *)(a1 + 29);
        v23 = *(_OWORD *)(a1 + 16);
        *v17 = *(_OWORD *)a1;
        v17[1] = v23;
        *(_QWORD *)((char *)v17 + 29) = v22;
        *(_OWORD *)a1 = v21;
        *(_OWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 29) = *(_QWORD *)&v77[13];
        if ((unint64_t)v8 < 3)
        {
          v25 = v16;
          v26 = 1;
          if ((((uint64_t (*)(__int128 *, uint64_t))*a4)(v16, a1) & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          v24 = (*a4)((uint64_t)v16, (char *)(a1 + 80));
          if (v24)
            v25 = (__int128 *)(a1 + 80);
          else
            v25 = v16;
          if (v24)
            v26 = 2;
          else
            v26 = 1;
          if ((((uint64_t (*)(__int128 *, uint64_t))*a4)(v25, a1) & 1) == 0)
          {
LABEL_24:
            v27 = *(_OWORD *)(a1 + 16);
            v76 = *(_OWORD *)a1;
            *(_OWORD *)v77 = v27;
            *(_QWORD *)&v77[16] = *(_QWORD *)(a1 + 32);
            v28 = a1;
            do
            {
              v30 = v25;
              v31 = *v25;
              v32 = v25[1];
              *(_QWORD *)(v28 + 29) = *(_QWORD *)((char *)v25 + 29);
              *(_OWORD *)v28 = v31;
              *(_OWORD *)(v28 + 16) = v32;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v26)
                break;
              v33 = (2 * v26) | 1;
              v25 = (__int128 *)(a1 + 40 * v33);
              if (2 * v26 + 2 < v8 && (*a4)(a1 + 40 * v33, (char *)v25 + 40))
              {
                v25 = (__int128 *)((char *)v25 + 40);
                v33 = 2 * v26 + 2;
              }
              v29 = (*a4)((uint64_t)v25, (char *)&v76);
              v28 = (uint64_t)v30;
              v26 = v33;
            }
            while (!v29);
            v18 = v76;
            v19 = *(_OWORD *)v77;
            *(_QWORD *)((char *)v30 + 29) = *(_QWORD *)&v77[13];
            *v30 = v18;
            v30[1] = v19;
            v9 = v71;
            v16 = (__int128 *)(a1 + 40);
          }
        }
      }
      v17 = (__int128 *)((char *)v17 + 40);
      if (v17 == v9)
      {
        a3 = v9;
        v10 = v70;
        goto LABEL_35;
      }
    }
  }
LABEL_32:
  if (v70 >= 41)
  {
LABEL_35:
    v72 = a3;
    v34 = v10 / 0x28;
    do
    {
      v36 = 0;
      v74 = *(_OWORD *)a1;
      *(_OWORD *)v75 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)&v75[16] = *(_QWORD *)(a1 + 32);
      v37 = a1;
      do
      {
        v40 = v37 + 40 * v36 + 40;
        v41 = (2 * v36) | 1;
        v42 = 2 * v36 + 2;
        if (v42 < v34 && (*a4)(v37 + 40 * v36 + 40, (char *)(v37 + 40 * v36 + 80)))
        {
          v40 += 40;
          v41 = v42;
        }
        v38 = *(_OWORD *)v40;
        v39 = *(_OWORD *)(v40 + 16);
        *(_QWORD *)(v37 + 29) = *(_QWORD *)(v40 + 29);
        *(_OWORD *)v37 = v38;
        *(_OWORD *)(v37 + 16) = v39;
        v37 = v40;
        v36 = v41;
      }
      while (v41 <= (uint64_t)((unint64_t)(v34 - 2) >> 1));
      v43 = (__int128 *)((char *)v73 - 40);
      v44 = v40 == (_QWORD)v73 - 40;
      v73 = (__int128 *)((char *)v73 - 40);
      if (v44)
      {
        *(_QWORD *)(v40 + 29) = *(_QWORD *)&v75[13];
        *(_OWORD *)v40 = v74;
        *(_OWORD *)(v40 + 16) = *(_OWORD *)v75;
      }
      else
      {
        v45 = *v43;
        v46 = v43[1];
        *(_QWORD *)(v40 + 29) = *(_QWORD *)((char *)v43 + 29);
        *(_OWORD *)v40 = v45;
        *(_OWORD *)(v40 + 16) = v46;
        *v43 = v74;
        v43[1] = *(_OWORD *)v75;
        *(_QWORD *)((char *)v43 + 29) = *(_QWORD *)&v75[13];
        v47 = v40 - a1 + 40;
        if (v47 >= 41)
        {
          v48 = (v47 / 0x28uLL - 2) >> 1;
          v49 = a1 + 40 * v48;
          if ((*a4)(v49, (char *)v40))
          {
            v50 = *(_OWORD *)v40;
            v51 = *(_OWORD *)(v40 + 16);
            *(_QWORD *)&v77[16] = *(_QWORD *)(v40 + 32);
            v76 = v50;
            *(_OWORD *)v77 = v51;
            do
            {
              v52 = v49;
              v53 = *(_OWORD *)v49;
              v54 = *(_OWORD *)(v49 + 16);
              *(_QWORD *)(v40 + 29) = *(_QWORD *)(v49 + 29);
              *(_OWORD *)v40 = v53;
              *(_OWORD *)(v40 + 16) = v54;
              if (!v48)
                break;
              v48 = (v48 - 1) >> 1;
              v49 = a1 + 40 * v48;
              v40 = v52;
            }
            while ((((uint64_t (*)(uint64_t, __int128 *))*a4)(v49, &v76) & 1) != 0);
            v55 = *(_OWORD *)v77;
            *(_OWORD *)v52 = v76;
            *(_OWORD *)(v52 + 16) = v55;
            *(_QWORD *)(v52 + 29) = *(_QWORD *)&v77[13];
          }
        }
      }
      v35 = v34-- <= 2;
    }
    while (!v35);
    return v72;
  }
  return a3;
}

char *sub_1BE62C19C(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  char *v38;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v10) >> 3)) < a5)
  {
    v11 = *(char **)a1;
    v12 = a5 - 0x3333333333333333 * ((uint64_t)(v10 - *(_QWORD *)a1) >> 3);
    if (v12 > 0x666666666666666)
      sub_1BE61F930();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (uint64_t)v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x666666666666666)
        sub_1BE61F100();
      v15 = (char *)operator new(40 * v14);
    }
    else
    {
      v15 = 0;
    }
    v25 = &v15[8 * ((v5 - v11) >> 3)];
    v26 = 40 * a5;
    v27 = &v25[40 * a5];
    v28 = v25;
    do
    {
      v29 = *(_OWORD *)v7;
      v30 = *((_OWORD *)v7 + 1);
      *((_QWORD *)v28 + 4) = *((_QWORD *)v7 + 4);
      *(_OWORD *)v28 = v29;
      *((_OWORD *)v28 + 1) = v30;
      v28 += 40;
      v7 += 40;
      v26 -= 40;
    }
    while (v26);
    v31 = *(char **)a1;
    v32 = &v15[8 * ((v5 - v11) >> 3)];
    if (*(char **)a1 != v5)
    {
      v33 = v5;
      v32 = &v15[8 * ((v5 - v11) >> 3)];
      do
      {
        v34 = *(_OWORD *)(v33 - 40);
        v35 = *(_OWORD *)(v33 - 24);
        *(_QWORD *)(v32 - 11) = *(_QWORD *)(v33 - 11);
        *(_OWORD *)(v32 - 24) = v35;
        *(_OWORD *)(v32 - 40) = v34;
        v32 -= 40;
        v33 -= 40;
      }
      while (v33 != v31);
      v10 = *(_QWORD *)(a1 + 8);
    }
    v36 = &v15[40 * v14];
    v37 = v10 - (_QWORD)v5;
    if (v37)
      memmove(v27, v5, v37 - 3);
    v38 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v37];
    *(_QWORD *)(a1 + 16) = v36;
    if (v38)
      operator delete(v38);
    return v25;
  }
  v16 = v10 - (_QWORD)__dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)) >= a5)
  {
    v17 = &__src[40 * a5];
    v19 = *(_BYTE **)(a1 + 8);
LABEL_18:
    v20 = &v5[40 * a5];
    v21 = &v19[-40 * a5];
    v22 = v19;
    if ((unint64_t)v21 < v10)
    {
      v22 = v19;
      do
      {
        v23 = *(_OWORD *)v21;
        v24 = *((_OWORD *)v21 + 1);
        *((_QWORD *)v22 + 4) = *((_QWORD *)v21 + 4);
        *(_OWORD *)v22 = v23;
        *((_OWORD *)v22 + 1) = v24;
        v21 += 40;
        v22 += 40;
      }
      while ((unint64_t)v21 < v10);
    }
    *(_QWORD *)(a1 + 8) = v22;
    if (v19 != v20)
      memmove(v20, v5, v19 - v20 - 3);
    if (v17 != v7)
      memmove(v5, v7, v17 - v7 - 3);
    return v5;
  }
  v17 = &__src[8 * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)];
  v18 = a4 - v17;
  if (a4 != v17)
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)], v18 - 3);
  v19 = (_BYTE *)(v10 + v18);
  *(_QWORD *)(a1 + 8) = v10 + v18;
  if (v16 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1BE62C428(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "CHTriangle");
}

_QWORD *sub_1BE62CF74(_QWORD *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  objc_super v74;

  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v23 = a10;
  if (a1)
  {
    v74.receiver = a1;
    v74.super_class = (Class)CHStrokeGroupQueryItem;
    a1 = objc_msgSendSuper2(&v74, sel_init);
    if (a1)
    {
      v29 = objc_msgSend_copy(v17, v24, v25, v26, v27, v28);
      v30 = (void *)a1[1];
      a1[1] = v29;

      v36 = objc_msgSend_copy(v18, v31, v32, v33, v34, v35);
      v37 = (void *)a1[2];
      a1[2] = v36;

      v43 = objc_msgSend_copy(v19, v38, v39, v40, v41, v42);
      v44 = (void *)a1[3];
      a1[3] = v43;

      a1[9] = a5;
      a1[4] = a6;
      v50 = objc_msgSend_copy(v20, v45, v46, v47, v48, v49);
      v51 = (void *)a1[5];
      a1[5] = v50;

      v57 = objc_msgSend_copy(v21, v52, v53, v54, v55, v56);
      v58 = (void *)a1[7];
      a1[7] = v57;

      v64 = objc_msgSend_copy(v22, v59, v60, v61, v62, v63);
      v65 = (void *)a1[6];
      a1[6] = v64;

      v71 = objc_msgSend_copy(v23, v66, v67, v68, v69, v70);
      v72 = (void *)a1[8];
      a1[8] = v71;

    }
  }

  return a1;
}

void sub_1BE62D20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE62D224(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE62D234(uint64_t a1)
{

}

void sub_1BE62D23C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1BE62D51C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E50;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v5, OS_SIGNPOST_INTERVAL_END, v6, "CHStrokeGroupQuery_resultsForInitialStrokes", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_DEFAULT, "END \"CHStrokeGroupQuery_resultsForInitialStrokes\"", v8, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE62D888(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v5 = a3;
  v6 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHStrokeGroupQuery_strokesCoveredByStroke", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHStrokeGroupQuery_strokesCoveredByStroke\"", v11, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE62DAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE62DADC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 72), a2, a3, a4, a5, a6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

NSString *__cdecl sub_1BE62E7BC(CHTokenizedMathResultToken *self, SEL a2)
{
  return self->_maskedAlternative;
}

double sub_1BE62E7CC(CHTokenizedMathResultToken *self, SEL a2)
{
  return self->_maskedAlternativeScore;
}

void sub_1BE62FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE630000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE630020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE63003C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE630054(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E50;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHTextSynthesisQuery_refineContext", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refineContext\"", v14, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE6301CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE630464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE630494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6304B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6304D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6304E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_refinedTokens", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refinedTokens\"", v11, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE630644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE630A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE630AB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  NSObject *v41;
  NSObject *v42;
  os_signpost_id_t v43;
  NSObject *v44;
  uint8_t v45[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v13 = v5;
  v16 = 0;
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v50, (uint64_t)v55, 16, v15);
  if (v22)
  {
    v23 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v51 != v23)
          objc_enumerationMutation(v13);
        objc_msgSend_drawing(*(void **)(*((_QWORD *)&v50 + 1) + 8 * i), v17, v18, v19, v20, v21);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
          objc_msgSend_appendDrawing_(v16, v25, (uint64_t)v30, v27, v28, v29);
        else
          v16 = (void *)objc_msgSend_copy(v30, v25, v26, v27, v28, v29);

      }
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v50, (uint64_t)v55, 16, v21);
    }
    while (v22);
  }

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v31 = v6;
  v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v46, (uint64_t)v54, 16, v33);
  if (v38)
  {
    v39 = *(_QWORD *)v47;
    do
    {
      for (j = 0; j != v38; ++j)
      {
        if (*(_QWORD *)v47 != v39)
          objc_enumerationMutation(v31);
        objc_msgSend_addObjectsFromArray_(v12, v34, *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * j), v35, v36, v37);
      }
      v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v46, (uint64_t)v54, 16, v37);
    }
    while (v38);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v41 = (id)qword_1EF568E50;
  v42 = v41;
  v43 = *(_QWORD *)(a1 + 40);
  if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
  {
    *(_WORD *)v45 = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v42, OS_SIGNPOST_INTERVAL_END, v43, "CHTextSynthesisQuery_refineSingleLine", "", v45, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v44 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_1BE607000, v44, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refineSingleLine\"", v45, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE630DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6310C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE6310FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE631128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE631144(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_refinedTokensSingleLine", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_refinedTokensSingleLine\"", v11, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE6312A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6314F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE631518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE631530(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_synthesizeTokens", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_synthesizeTokens\"", v11, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE63168C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE63192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE631960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE63198C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6319A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHTextSynthesisQuery_synthesizeTokensReplacing", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHTextSynthesisQuery_synthesizeTokensReplacing\"", v11, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE631B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void LineRegressor::LineRegressor(LineRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _BYTE v25[608];
  uint64_t v26;
  _BYTE v27[8];
  id v28;
  id v29;
  uint64_t v30;
  float v31;

  v6 = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  objc_storeStrong((id *)this + 1, a2);
  *(_QWORD *)this = a3;
  v7 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;

  v8 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;

  v9 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  *((float *)this + 24) = sub_1BE631E24(v6, (uint64_t)this + 104, (uint64_t)this + 128, 1, 15.0);
  *((_DWORD *)this + 44) = 0;
  *((_DWORD *)this + 8) = 0;
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3);
  v15 = (const char *)(v14 - 1);
  *((_DWORD *)this + 40) = (_DWORD)v15;
  *((_DWORD *)this + 16) = 0;
  if (v14 < 7)
  {
    v16 = objc_msgSend_copy(v6, v15, v10, v11, v12, v13);
    v17 = (void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v16;

  }
  else
  {
    *((_DWORD *)this + 43) = LineRegressor::detectMiddlePointIndex(this, (int)v15, -1);
    *((_DWORD *)this + 47) = LineRegressor::detectMiddlePointIndex(this, 1, 1);
    LineRegressor::detectForwardPointIndex(this);
    LineRegressor::detectBackwardPointIndex(this);
    LineRegressor::detectForwardPointType(this);
    LineRegressor::detectBackwardPointType(this);
    LineRegressor::fillBody(this);
  }
  StraightLineRegressor::StraightLineRegressor((uint64_t)v27, v6, (uint64_t)this + 16, *((void **)this + 10), (uint64_t)this + 48, (uint64_t)a3);
  v18 = v30;
  *((_QWORD *)this + 11) = v30;
  if (fabsf(v31) <= 0.98)
  {
    if (v18)
      MEMORY[0x1C3B812EC](v18, 0x1081C4095753B69);
    *((_QWORD *)this + 11) = 0;
    BezierLineRegressor::BezierLineRegressor((uint64_t)v25, (uint64_t)this + 16, *((void **)this + 10), (uint64_t)this + 48, (uint64_t)a3);
    *((_QWORD *)this + 11) = v26;
    v22 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;

    v23 = (void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;

    v24 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;

    BezierLineRegressor::~BezierLineRegressor((BezierLineRegressor *)v25);
  }
  else
  {
    v19 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;

    v20 = (void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;

    v21 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;

  }
}

void sub_1BE631DC8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v6;

  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 112) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

float sub_1BE631E24(void *a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double *v26;
  double *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double *v42;
  _QWORD *v43;
  double *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  double v58;
  float v59;
  double v60;
  float v61;
  unint64_t v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  double v74;
  float v75;
  float v76;
  int v77;
  double *v78;
  double v79;
  double v80;
  float v81;
  int v82;
  int v83;
  double *v84;
  double v86;
  float v87;
  float v88;
  double v89;
  double v90;
  unint64_t v91;
  double *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  double v102;
  double v103;
  unint64_t v104;
  double *v105;
  double *v106;
  double *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  double *v113;
  double *v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  double *v132;
  float v133;
  id v134;
  float v135;
  float v136;
  float v138;
  float v139;

  v8 = a1;
  objc_msgSend_bounds(v8, v9, v10, v11, v12, v13);
  if (v18 >= v19)
    v20 = v18;
  else
    v20 = v19;
  v21 = objc_msgSend_pointCountForStrokeIndex_(v8, v14, 0, v15, v16, v17);
  v25 = v21;
  v26 = *(double **)a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3) < v21)
  {
    if (v21 > 0x666666666666666)
      sub_1BE61F930();
    v27 = *(double **)(a2 + 8);
    v28 = (char *)operator new(40 * v21);
    v29 = &v28[(char *)v27 - (char *)v26];
    v30 = v29;
    if (v27 != v26)
    {
      v31 = &v28[(char *)v27 - (char *)v26];
      do
      {
        v32 = *(_OWORD *)(v27 - 5);
        v33 = *(_OWORD *)(v27 - 3);
        v30 = v31 - 40;
        *(double *)(v31 - 11) = *(double *)((char *)v27 - 11);
        *(_OWORD *)(v31 - 24) = v33;
        *(_OWORD *)(v31 - 40) = v32;
        v27 -= 5;
        v31 -= 40;
      }
      while (v27 != v26);
    }
    *(_QWORD *)a2 = v30;
    *(_QWORD *)(a2 + 8) = v29;
    *(_QWORD *)(a2 + 16) = &v28[40 * v25];
    if (v26)
      operator delete(v26);
  }
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v22, 0, 0, v23, v24, a3);
  v39 = v37;
  v40 = v38;
  v42 = *(double **)(a2 + 8);
  v41 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v42 >= v41)
  {
    v44 = *(double **)a2;
    v45 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v42 - *(_QWORD *)a2) >> 3);
    v46 = v45 + 1;
    if (v45 + 1 > 0x666666666666666)
      sub_1BE61F930();
    v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - (_QWORD)v44) >> 3);
    if (2 * v47 > v46)
      v46 = 2 * v47;
    if (v47 >= 0x333333333333333)
      v48 = 0x666666666666666;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 > 0x666666666666666)
        sub_1BE61F100();
      v49 = (char *)operator new(40 * v48);
    }
    else
    {
      v49 = 0;
    }
    v50 = &v49[40 * v45];
    *(_QWORD *)v50 = v39;
    *((_QWORD *)v50 + 1) = v40;
    *((_QWORD *)v50 + 2) = 0;
    *((_DWORD *)v50 + 6) = 1;
    v50[28] = 0;
    *((_DWORD *)v50 + 8) = 0;
    v43 = v50 + 40;
    if (v42 != v44)
    {
      do
      {
        v51 = *(_OWORD *)(v42 - 5);
        v52 = *(_OWORD *)(v42 - 3);
        *(double *)(v50 - 11) = *(double *)((char *)v42 - 11);
        *(_OWORD *)(v50 - 24) = v52;
        *(_OWORD *)(v50 - 40) = v51;
        v50 -= 40;
        v42 -= 5;
      }
      while (v42 != v44);
      v42 = *(double **)a2;
    }
    *(_QWORD *)a2 = v50;
    *(_QWORD *)(a2 + 8) = v43;
    *(_QWORD *)(a2 + 16) = &v49[40 * v48];
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_QWORD *)v42 = v37;
    *((_QWORD *)v42 + 1) = v38;
    v42[2] = 0.0;
    *((_DWORD *)v42 + 6) = 1;
    *((_BYTE *)v42 + 28) = 0;
    v43 = v42 + 5;
    *((_DWORD *)v42 + 8) = 0;
  }
  *(_QWORD *)(a2 + 8) = v43;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v34, 0, 0, v35, v36);
  v57 = v20 / a5;
  v59 = v58;
  v61 = v60;
  v62 = 1;
  v135 = v57 + v57;
  v63 = 1;
  v64 = 1;
  v65 = 0.0;
  v138 = v59;
  v139 = v59;
  v66 = v61;
  v67 = v61;
  v134 = v8;
  v133 = v57;
  while (objc_msgSend_pointCountForStrokeIndex_(v8, v53, 0, v54, v55, v56) > v62)
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v68, 0, v62, v70, v71);
    v73 = v72;
    v75 = v74;
    v65 = v65
        + sqrtf((float)((float)(v75 - v67) * (float)(v75 - v67)) + (float)((float)(v73 - v59) * (float)(v73 - v59)));
    if (a4 && v65 > v135)
    {
      v136 = v66;
      v76 = v61;
      v77 = vcvtms_s32_f32(v65 / v57);
      if (v77 >= 1)
      {
        v78 = *(double **)(a2 + 8);
        v80 = *(v78 - 5);
        v79 = *(v78 - 4);
        v81 = (float)v77;
        v82 = 1;
        v83 = v64 / v77;
        do
        {
          v86 = (float)((float)(v77 - v82) / v81);
          v87 = (float)v82 / v81;
          v88 = (float)(v87 * v73) + v80 * v86;
          *(float *)&v86 = (float)(v87 * v75) + v79 * v86;
          v89 = v88;
          v90 = *(float *)&v86;
          v91 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v78 < v91)
          {
            *v78 = v89;
            v78[1] = v90;
            *((_DWORD *)v78 + 4) = v63;
            *((_DWORD *)v78 + 5) = v62;
            *((_DWORD *)v78 + 6) = v83;
            *((_BYTE *)v78 + 28) = 0;
            v84 = v78 + 5;
            *((_DWORD *)v78 + 8) = 0;
          }
          else
          {
            v92 = *(double **)a2;
            v93 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v78 - *(_QWORD *)a2) >> 3);
            v94 = v93 + 1;
            if (v93 + 1 > 0x666666666666666)
              sub_1BE61F930();
            v95 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - (_QWORD)v92) >> 3);
            if (2 * v95 > v94)
              v94 = 2 * v95;
            if (v95 >= 0x333333333333333)
              v96 = 0x666666666666666;
            else
              v96 = v94;
            if (v96)
            {
              if (v96 > 0x666666666666666)
                sub_1BE61F100();
              v97 = (char *)operator new(40 * v96);
            }
            else
            {
              v97 = 0;
            }
            v98 = &v97[40 * v93];
            *(double *)v98 = v89;
            *((double *)v98 + 1) = v90;
            *((_DWORD *)v98 + 4) = v63;
            *((_DWORD *)v98 + 5) = v62;
            *((_DWORD *)v98 + 6) = v83;
            v98[28] = 0;
            *((_DWORD *)v98 + 8) = 0;
            v99 = v98;
            if (v78 != v92)
            {
              do
              {
                v100 = *(_OWORD *)(v78 - 5);
                v101 = *(_OWORD *)(v78 - 3);
                *(double *)(v99 - 11) = *(double *)((char *)v78 - 11);
                *(_OWORD *)(v99 - 24) = v101;
                *(_OWORD *)(v99 - 40) = v100;
                v99 -= 40;
                v78 -= 5;
              }
              while (v78 != v92);
              v78 = *(double **)a2;
            }
            v84 = (double *)(v98 + 40);
            *(_QWORD *)a2 = v99;
            *(_QWORD *)(a2 + 8) = v98 + 40;
            *(_QWORD *)(a2 + 16) = &v97[40 * v96];
            if (v78)
              operator delete(v78);
          }
          ++v63;
          *(_QWORD *)(a2 + 8) = v84;
          v78 = v84;
        }
        while (v77 != v82++);
      }
      v64 = 0;
      v138 = fmaxf(v138, v73);
      v139 = fminf(v139, v73);
      v61 = fminf(v76, v75);
      v66 = fmaxf(v136, v75);
      v65 = 0.0;
      v8 = v134;
      v57 = v133;
    }
    else if (v65 > v57)
    {
      v102 = v73;
      v103 = v75;
      v105 = *(double **)(a2 + 8);
      v104 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v105 >= v104)
      {
        v107 = *(double **)a2;
        v108 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v105 - *(_QWORD *)a2) >> 3);
        v109 = v108 + 1;
        if (v108 + 1 > 0x666666666666666)
          sub_1BE61F930();
        v110 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v104 - (_QWORD)v107) >> 3);
        if (2 * v110 > v109)
          v109 = 2 * v110;
        if (v110 >= 0x333333333333333)
          v111 = 0x666666666666666;
        else
          v111 = v109;
        if (v111)
        {
          if (v111 > 0x666666666666666)
            sub_1BE61F100();
          v112 = (char *)operator new(40 * v111);
        }
        else
        {
          v112 = 0;
        }
        v113 = (double *)&v112[40 * v108];
        *v113 = v102;
        v113[1] = v103;
        *((_DWORD *)v113 + 4) = v63;
        *((_DWORD *)v113 + 5) = v62;
        *((_DWORD *)v113 + 6) = v64;
        *((_BYTE *)v113 + 28) = 0;
        *((_DWORD *)v113 + 8) = 0;
        v114 = v113;
        if (v105 != v107)
        {
          do
          {
            v115 = *(_OWORD *)(v105 - 5);
            v116 = *(_OWORD *)(v105 - 3);
            *(double *)((char *)v114 - 11) = *(double *)((char *)v105 - 11);
            *(_OWORD *)(v114 - 3) = v116;
            *(_OWORD *)(v114 - 5) = v115;
            v114 -= 5;
            v105 -= 5;
          }
          while (v105 != v107);
          v105 = *(double **)a2;
        }
        v106 = v113 + 5;
        *(_QWORD *)a2 = v114;
        *(_QWORD *)(a2 + 8) = v113 + 5;
        *(_QWORD *)(a2 + 16) = &v112[40 * v111];
        if (v105)
          operator delete(v105);
        v8 = v134;
      }
      else
      {
        *v105 = v102;
        v105[1] = v103;
        *((_DWORD *)v105 + 4) = v63;
        *((_DWORD *)v105 + 5) = v62;
        *((_DWORD *)v105 + 6) = v64;
        *((_BYTE *)v105 + 28) = 0;
        v106 = v105 + 5;
        *((_DWORD *)v105 + 8) = 0;
      }
      v64 = 0;
      ++v63;
      *(_QWORD *)(a2 + 8) = v106;
      v138 = fmaxf(v138, v73);
      v139 = fminf(v139, v73);
      v61 = fminf(v61, v75);
      v66 = fmaxf(v66, v75);
      v65 = 0.0;
    }
    ++v64;
    ++v62;
    v67 = v75;
    v59 = v73;
  }
  v117 = objc_msgSend_pointCountForStrokeIndex_(v8, v68, 0, v69, v70, v71);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v118, 0, v117 - 1, v119, v120);
  v121 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v121 - 40) = v122;
  *(_QWORD *)(v121 - 32) = v123;
  v128 = objc_msgSend_pointCountForStrokeIndex_(v8, v124, 0, v125, v126, v127);
  v129 = *(_QWORD *)(a2 + 8);
  v130 = *(_DWORD *)(v129 - 16) + v64;
  *(_DWORD *)(v129 - 20) = v128 - 1;
  *(_DWORD *)(v129 - 16) = v130;
  *v132 = v139;
  v132[1] = v61;
  v132[2] = (float)(v138 - v139);
  v132[3] = (float)(v66 - v61);

  return v57;
}

void sub_1BE632534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE632584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1BE632598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t LineRegressor::initialiseArrowHeadDetection(uint64_t this)
{
  *(_DWORD *)(this + 176) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 160) = -858993459 * ((*(_QWORD *)(this + 112) - *(_QWORD *)(this + 104)) >> 3) - 1;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void LineRegressor::performArrowHeadDetection(LineRegressor *this)
{
  *((_DWORD *)this + 43) = LineRegressor::detectMiddlePointIndex(this, -858993459 * ((*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3) - 1, -1);
  *((_DWORD *)this + 47) = LineRegressor::detectMiddlePointIndex(this, 1, 1);
  LineRegressor::detectForwardPointIndex(this);
  LineRegressor::detectBackwardPointIndex(this);
  LineRegressor::detectForwardPointType(this);
  LineRegressor::detectBackwardPointType(this);
  LineRegressor::fillBody(this);
}

uint64_t LineRegressor::detectMiddlePointIndex(LineRegressor *this, int a2, int a3)
{
  double v4;
  double v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  float v14;
  float v15;
  float v16;
  double v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  float v23;
  double *v24;
  _BOOL4 v25;
  double v26;
  double v27;
  _BOOL4 v28;
  float v30;

  v5 = *((double *)this + 18);
  v4 = *((double *)this + 19);
  v6 = v5 * v5 + v4 * v4;
  v7 = *((_QWORD *)this + 13);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 14) - v7) >> 3);
  result = 0xFFFFFFFFLL;
  if (a2 < 1 || (v10 = a2, v8 <= a2))
  {
    LODWORD(v22) = -1;
    v23 = v5 * v5 + v4 * v4;
LABEL_29:
    if (v6 >= v23)
      result = result;
    else
      result = v22;
    goto LABEL_32;
  }
  v11 = 0;
  v12 = 0;
  v13 = v5 * 0.5 + *((double *)this + 16);
  v14 = v4 * 0.0625 * (v4 * 0.0625) + v5 * 0.0625 * (v5 * 0.0625);
  v15 = v13;
  v16 = v4 * 0.5 + *((double *)this + 17);
  v17 = v15;
  v18 = a3;
  v19 = (double *)(v7 + 40 * a2);
  v20 = 40 * a3;
  v21 = v16;
  v22 = 0xFFFFFFFFLL;
  v23 = v6;
  do
  {
    v24 = (double *)(v7 + 40 * (v10 - 1));
    if (*v24 < v17 && *v19 >= v17)
      v25 = 1;
    else
      v25 = *v24 > v17 && *v19 <= v17;
    v26 = v24[1];
    v27 = v19[1];
    v28 = v27 <= v21;
    if (v26 <= v21)
      v28 = 0;
    if (v26 < v21 && v27 >= v21)
      v28 = 1;
    v30 = (v27 - v21) * (v27 - v21) + (*v19 - v17) * (*v19 - v17);
    if (v25)
    {
      ++v12;
      if ((float)(v23 - v30) > v14)
      {
        result = v10;
        v23 = (v27 - v21) * (v27 - v21) + (*v19 - v17) * (*v19 - v17);
      }
    }
    if (v28)
    {
      ++v11;
      if ((float)(v6 - v30) > v14)
      {
        v22 = v10;
        v6 = (v27 - v21) * (v27 - v21) + (*v19 - v17) * (*v19 - v17);
      }
    }
    v10 += v18;
    if (v10 < 1)
      break;
    v19 = (double *)((char *)v19 + v20);
  }
  while (v8 > v10);
  if (v11 != 1 || v12 == 1)
  {
    if (v11 != 1 && v12 == 1)
      goto LABEL_32;
    goto LABEL_29;
  }
  result = v22;
LABEL_32:
  if ((int)result < 1)
    return 1;
  if (v8 - 2 < result)
    return (v8 - 2);
  return result;
}

void LineRegressor::detectForwardPointIndex(LineRegressor *this)
{
  int v1;
  double *v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  int v7;
  float v8;
  float v9;
  double *v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  char v17;
  double *v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float v42;
  float v43;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;

  *((_DWORD *)this + 41) = -803929351;
  v1 = *((_DWORD *)this + 43);
  v2 = (double *)*((_QWORD *)this + 13);
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 14) - (_QWORD)v2) >> 3);
  v4 = v1;
  if (v3 - 2 > v1)
  {
    v6 = 0;
    v7 = v1 + 1;
    v8 = 0.0;
    v9 = -1.0e10;
    do
    {
      v10 = &v2[5 * v4];
      v12 = *v10;
      v11 = v10[1];
      v13 = *(v10 - 5) - *v10;
      v14 = *(v10 - 4) - v11;
      v15 = (float)(v14 * v14) + (float)(v13 * v13);
      if (v15 > 0.0)
      {
        v13 = v13 / v15;
        v14 = v14 / v15;
      }
      ++v1;
      v16 = v4 + 1;
      if (v3 > v4 + 1)
      {
        v17 = 0;
        v18 = &v2[5 * v7 + 1];
        v19 = -1.0e10;
        v20 = 1.0e10;
        v21 = v1;
        v22 = -v13;
        v23 = -v14;
        v24 = v22;
        v25 = (float)-v14;
        v26 = sqrtf(v15);
        v27 = *((float *)this + 24);
        v28 = 1.0e10;
        v29 = -1.0e10;
        do
        {
          v30 = *(v18 - 1) - v12;
          v31 = *v18 - v11;
          v32 = v31 * v25 + v30 * v24;
          v33 = v32 * v26;
          v34 = v32;
          v35 = v30 * v25 - v31 * v24;
          if (v20 > v34)
            v20 = v34;
          if (v19 < v34)
            v19 = v34;
          v17 |= (float)(v27 * 0.5) > v33;
          if (v28 > v35)
            v28 = v35;
          if (v29 < v35)
            v29 = v35;
          ++v21;
          v18 += 5;
        }
        while (v3 > v21);
        if ((v17 & 1) != 0)
        {
          v36 = (float)(v19 + v20) * 0.5;
          v37 = (float)(v29 + v28) * 0.5;
          v38 = v12 + (float)(v15 * (float)(v36 * v22)) + (float)(v15 * (float)(v37 * v23));
          v39 = v11 + (float)(v15 * (float)(v36 * v23)) - (float)(v15 * (float)(v37 * v22));
          v40 = v38 - v12;
          v41 = v39 - v11;
          *(float *)&v38 = (v41 * v25 + (v38 - v12) * v24) * v26;
          v42 = (v40 * v25 - v41 * v24) * v26;
          v43 = fabsf(v42);
          if ((float)(v27 * -0.5) < *(float *)&v38 && v43 < v27)
          {
            v45 = v15 * (float)((float)(v29 - v28) * (float)(v19 - v20));
            if ((v6 & 1) == 0)
              v8 = v45;
            if (v4 < 3)
            {
              v48 = -2.0;
              if (v4 == 2)
              {
                v49 = (*v2 - v12) * v25 - (v2[1] - v11) * v24;
                v48 = -1.0 - fabsf(v49);
              }
            }
            else
            {
              v46 = (v2[5 * (v4 - 2)] - v12) * v25 - (v2[5 * (v4 - 2) + 1] - v11) * v24;
              v47 = (v2[5 * (v4 - 3)] - v12) * v25 - (v2[5 * (v4 - 3) + 1] - v11) * v24;
              v48 = (float)-fabsf(v46) + fabsf(v47) * -0.5;
            }
            v50 = (float)((float)(v45 / v8) - (float)((float)(v29 + v28) * (float)(v29 + v28))) + v48;
            if (v50 > v9)
            {
              *((float *)this + 41) = v50;
              *((_DWORD *)this + 40) = v4;
              *((float *)this + 42) = atan2f(v23, v22);
              v6 = 1;
              v9 = v50;
            }
            else
            {
              v6 = 1;
            }
          }
        }
      }
      ++v7;
      v4 = v16;
    }
    while (v16 != v3 - 2);
  }
}

void LineRegressor::detectBackwardPointIndex(LineRegressor *this)
{
  int v1;
  char v3;
  uint64_t v4;
  float v5;
  float v6;
  int v7;
  float v8;
  unint64_t v9;
  double *v11;
  double v12;
  double v13;
  double *v14;
  float v15;
  float v16;
  float v17;
  char v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float v42;
  float v43;
  float v45;
  unint64_t v46;
  double *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;

  *((_DWORD *)this + 45) = -803929351;
  v1 = *((_DWORD *)this + 47);
  if (v1 >= 2)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 13);
    v5 = *((float *)this + 24);
    v6 = 0.0;
    v7 = 0;
    v8 = -1.0e10;
    v9 = *((unsigned int *)this + 47);
    do
    {
      v11 = (double *)(v4 + 40 * v9);
      v13 = *v11;
      v12 = v11[1];
      v14 = (double *)(v4 + 40 * (v9 + 1));
      v15 = *v14 - v13;
      v16 = v14[1] - v12;
      v17 = (float)(v16 * v16) + (float)(v15 * v15);
      if (v17 > 0.0)
      {
        v15 = v15 / v17;
        v16 = v16 / v17;
      }
      v18 = 0;
      v19 = -v15;
      v20 = -v16;
      v21 = v19;
      v22 = (float)-v16;
      v23 = sqrtf(v17);
      v24 = -1.0e10;
      v25 = 1.0e10;
      v26 = v7;
      v27 = 1.0e10;
      v28 = -1.0e10;
      do
      {
        v29 = (double *)(v4 + 40 * (v1 + v26 - 1));
        v30 = *v29 - v13;
        v31 = v29[1] - v12;
        v32 = v31 * v22 + v30 * v21;
        v33 = v32 * v23;
        v34 = v32;
        v35 = v30 * v22 - v31 * v21;
        v18 |= (float)(v5 * 0.5) > v33;
        if (v25 > v34)
          v25 = v34;
        if (v24 < v34)
          v24 = v34;
        if (v27 > v35)
          v27 = v35;
        if (v28 < v35)
          v28 = v35;
        --v26;
      }
      while (v1 + v26 + 1 > 2);
      if ((v18 & 1) != 0)
      {
        v36 = (float)(v24 + v25) * 0.5;
        v37 = (float)(v28 + v27) * 0.5;
        v38 = v13 + (float)(v17 * (float)(v36 * v19)) + (float)(v17 * (float)(v37 * v20));
        v39 = v12 + (float)(v17 * (float)(v36 * v20)) - (float)(v17 * (float)(v37 * v19));
        v40 = v38 - v13;
        v41 = v39 - v12;
        *(float *)&v38 = (v41 * v22 + (v38 - v13) * v21) * v23;
        v42 = (v40 * v22 - v41 * v21) * v23;
        v43 = fabsf(v42);
        if (v5 * -0.5 < *(float *)&v38 && v43 < v5)
        {
          v45 = v17 * (float)((float)(v28 - v27) * (float)(v24 - v25));
          if ((v3 & 1) == 0)
            v6 = v45;
          v46 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 14) - v4) >> 3);
          if (v46 - 3 <= v9)
          {
            v50 = -2.0;
            if (v46 - 2 > v9)
            {
              v51 = (*(double *)(v4 + 40 * v9 + 80) - v13) * v22 - (*(double *)(v4 + 40 * v9 + 88) - v12) * v21;
              v50 = -1.0 - fabsf(v51);
            }
          }
          else
          {
            v47 = (double *)(v4 + 40 * v9);
            v48 = (v47[10] - v13) * v22 - (v47[11] - v12) * v21;
            v49 = (v47[15] - v13) * v22 - (v47[16] - v12) * v21;
            v50 = (float)-fabsf(v48) + fabsf(v49) * -0.5;
          }
          v52 = (float)((float)(v45 / v6) - (float)((float)(v28 + v27) * (float)(v28 + v27))) + v50;
          if (v52 > v8)
          {
            *((float *)this + 45) = v52;
            *((_DWORD *)this + 44) = v9;
            *((float *)this + 46) = atan2f(v20, v19);
            v3 = 1;
            v8 = v52;
          }
          else
          {
            v3 = 1;
          }
        }
      }
      --v7;
    }
    while ((uint64_t)v9-- > 2);
  }
}

void LineRegressor::detectForwardPointType(LineRegressor *this)
{
  CHDrawing *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __float2 v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CHDrawing *v27;

  if (*((float *)this + 41) >= -2.0)
  {
    v27 = objc_alloc_init(CHDrawing);
    v2 = objc_alloc_init(CHDrawing);
    v3 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v2;

    for (i = *(int *)(*((_QWORD *)this + 13) + 40 * *((int *)this + 40) + 60);
          objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 1), v4, 0, v5, v6, v7) > i;
          ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v9, 0, i, v10, v11);
      v13 = v12;
      v15 = v14;
      objc_msgSend_addPoint_(*((void **)this + 9), v16, v17, v18, v19, v20);
      v21 = __sincosf_stret(*((float *)this + 46));
      objc_msgSend_addPoint_(v27, v22, v23, v24, v25, v26, v15 * v21.__sinval + v13 * v21.__cosval, v15 * v21.__cosval - v13 * v21.__sinval);
    }
    *((_DWORD *)this + 16) = 1;

  }
  else
  {
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 40) = -858993459 * ((*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3) - 1;
  }
}

void sub_1BE632FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE633000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE633014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void LineRegressor::detectBackwardPointType(LineRegressor *this)
{
  CHDrawing *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __float2 v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CHDrawing *v24;

  if (*((float *)this + 45) >= -2.0)
  {
    v24 = objc_alloc_init(CHDrawing);
    v2 = objc_alloc_init(CHDrawing);
    v3 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v2;

    v7 = *(unsigned int *)(*((_QWORD *)this + 13) + 40 * *((int *)this + 44) - 20);
    if ((int)v7 >= 1)
    {
      do
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v4, 0, v7, v5, v6);
        v9 = v8;
        v11 = v10;
        objc_msgSend_addPoint_(*((void **)this + 5), v12, v13, v14, v15, v16);
        v17 = __sincosf_stret(*((float *)this + 46));
        objc_msgSend_addPoint_(v24, v18, v19, v20, v21, v22, v11 * v17.__sinval + v9 * v17.__cosval, v11 * v17.__cosval - v9 * v17.__sinval);
      }
      while (v7-- > 1);
    }
    *((_DWORD *)this + 8) = 1;

  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    *((_DWORD *)this + 44) = 0;
  }
}

void sub_1BE633134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE63314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE633160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void LineRegressor::fillBody(LineRegressor *this)
{
  CHDrawing *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  double v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  BOOL v25;
  double v26;
  double v27;
  float v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  double *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  float *v38;
  double v40;
  double v41;
  float v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  double *v67;
  double v68;
  double v69;
  float v70;
  float v71;
  float v72;
  double v73;
  double v74;
  unint64_t i;
  double *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  float v84;
  double *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  double *v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  float *v94;
  double v96;
  double v97;
  float v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  float v108;
  float v109;
  float v110;
  double v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  double *__p;
  double *v118;
  double *v119;
  char *v120;

  v2 = objc_alloc_init(CHDrawing);
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v2;

  __p = 0;
  v118 = 0;
  v120 = 0;
  v8 = *((_DWORD *)this + 44);
  if (v8 >= 2)
  {
    v9 = *((_QWORD *)this + 13);
    v10 = (double *)(v9 + 40 * v8);
    v11 = v10[5];
    v12 = v10[6];
    v13 = *v10 - v11;
    v14 = v10[1] - v12;
    v15 = (float)(v14 * v14) + (float)(v13 * v13);
    if (v15 > 0.0)
    {
      v13 = v13 / v15;
      v14 = v14 / v15;
    }
    v16 = *(unsigned int *)(v9 + 40 * v8 + 20);
    v17 = v13;
    v18 = v14;
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v4, 0, v16, v6, v7);
    while (1)
    {
      v26 = v22;
      v27 = v23;
      v28 = (v23 - v12) * v18 + (v22 - v11) * v17;
      v29 = v118;
      if (v118 < (double *)v120)
      {
        *v118 = v22;
        v118[1] = v23;
        v118[2] = 0.0;
        *(double *)((char *)v118 + 21) = 0.0;
        v24 = v118 + 5;
        *((float *)v118 + 8) = v28;
      }
      else
      {
        v30 = 0xCCCCCCCCCCCCCCCDLL * (v118 - __p) + 1;
        if (v30 > 0x666666666666666)
          sub_1BE61F930();
        if (0x999999999999999ALL * ((v120 - (char *)__p) >> 3) > v30)
          v30 = 0x999999999999999ALL * ((v120 - (char *)__p) >> 3);
        v31 = 0xCCCCCCCCCCCCCCCDLL * ((v120 - (char *)__p) >> 3) >= 0x333333333333333 ? 0x666666666666666 : v30;
        if (v31)
        {
          if (v31 > 0x666666666666666)
            sub_1BE61F100();
          v32 = (char *)operator new(40 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[8 * (v118 - __p)];
        *(double *)v33 = v26;
        *((double *)v33 + 1) = v27;
        *((_QWORD *)v33 + 2) = 0;
        *(_QWORD *)(v33 + 21) = 0;
        *((float *)v33 + 8) = v28;
        v34 = (double *)v33;
        if (v118 != __p)
        {
          do
          {
            v35 = *(_OWORD *)(v29 - 5);
            v36 = *(_OWORD *)(v29 - 3);
            *(double *)((char *)v34 - 11) = *(double *)((char *)v29 - 11);
            *(_OWORD *)(v34 - 3) = v36;
            *(_OWORD *)(v34 - 5) = v35;
            v34 -= 5;
            v29 -= 5;
          }
          while (v29 != __p);
          v29 = __p;
        }
        v24 = (double *)(v33 + 40);
        __p = v34;
        v120 = &v32[40 * v31];
        if (v29)
          operator delete(v29);
      }
      v118 = v24;
      v25 = v16-- <= 1;
      if (v25)
        break;
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v19, 0, v16, v20, v21);
    }
    v37 = (char *)__p;
    v38 = (float *)(__p + 5);
    if (__p != v24 && v38 != (float *)v24)
    {
      do
      {
        if (*((float *)v37 + 8) < v38[8])
          v37 = (char *)v38;
        v38 += 10;
      }
      while (v38 != (float *)v24);
    }
    v41 = *(double *)v37;
    v40 = *((double *)v37 + 1);
    v42 = *((float *)v37 + 8);
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v19, 0, *(int *)(*((_QWORD *)this + 13) + 40 * *((int *)this + 44) + 20), v20, v21);
    v45 = v44;
    v47 = v46;
    v48 = v41 - v44;
    v49 = v40 - v46;
    v50 = (float)(v49 * v49) + (float)(v48 * v48);
    if (v50 > 0.0)
      v51 = v48 / v50;
    else
      v51 = v48;
    if (v50 > 0.0)
      v52 = v49 / v50;
    else
      v52 = v49;
    if (v42 > 0.0)
    {
      v53 = sqrtf(v50);
      v54 = 1.0;
      v55 = 1.0 / ceilf((float)(v53 + v53) / *((float *)this + 24));
      do
      {
        objc_msgSend_addPoint_(*((void **)this + 10), v4, v43, v5, v6, v7, v45 + (float)(v50 * (float)(v51 * v54)), v47 + (float)(v50 * (float)(v52 * v54)));
        v54 = v54 - v55;
      }
      while (v54 > 0.01);
    }
  }
  v56 = *((_QWORD *)this + 13);
  v57 = *(int *)(v56 + 40 * *((int *)this + 44) + 20);
  v58 = *((_DWORD *)this + 40);
  LODWORD(v59) = *(_DWORD *)(v56 + 40 * v58 + 20);
  if ((int)v57 <= (int)v59)
  {
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v4, 0, v57, v6, v7);
      objc_msgSend_addPoint_(*((void **)this + 10), v61, v62, v63, v64, v65);
      v58 = *((_DWORD *)this + 40);
      v56 = *((_QWORD *)this + 13);
      v59 = *(int *)(v56 + 40 * v58 + 20);
      v25 = v57++ < v59;
    }
    while (v25);
    v60 = v58;
  }
  else
  {
    v60 = v58;
  }
  v119 = __p;
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 14) - v56) >> 3) - 2 > v60)
  {
    v66 = (double *)(v56 + 40 * (int)v60);
    v67 = (double *)(v56 + 40 * (v58 - 1));
    v68 = *v67;
    v69 = v67[1];
    v70 = *v66 - *v67;
    v71 = v66[1] - v69;
    v72 = (float)(v71 * v71) + (float)(v70 * v70);
    if (v72 > 0.0)
    {
      v70 = v70 / v72;
      v71 = v71 / v72;
    }
    v73 = v70;
    v74 = v71;
    for (i = (int)v59; objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 1), v4, 0, v5, v6, v7) > i; ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v77, 0, i, v78, v79);
      v82 = v80;
      v83 = v81;
      v84 = (v81 - v69) * v74 + (v80 - v68) * v73;
      v85 = v119;
      if (v119 < (double *)v120)
      {
        *v119 = v80;
        v119[1] = v81;
        v119[2] = 0.0;
        *(double *)((char *)v119 + 21) = 0.0;
        v76 = v119 + 5;
        *((float *)v119 + 8) = v84;
      }
      else
      {
        v86 = 0xCCCCCCCCCCCCCCCDLL * (v119 - __p) + 1;
        if (v86 > 0x666666666666666)
          sub_1BE61F930();
        if (0x999999999999999ALL * ((v120 - (char *)__p) >> 3) > v86)
          v86 = 0x999999999999999ALL * ((v120 - (char *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v120 - (char *)__p) >> 3) >= 0x333333333333333)
          v87 = 0x666666666666666;
        else
          v87 = v86;
        if (v87)
        {
          if (v87 > 0x666666666666666)
            sub_1BE61F100();
          v88 = (char *)operator new(40 * v87);
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[8 * (v119 - __p)];
        *(double *)v89 = v82;
        *((double *)v89 + 1) = v83;
        *((_QWORD *)v89 + 2) = 0;
        *(_QWORD *)(v89 + 21) = 0;
        *((float *)v89 + 8) = v84;
        v90 = (double *)v89;
        if (v119 != __p)
        {
          do
          {
            v91 = *(_OWORD *)(v85 - 5);
            v92 = *(_OWORD *)(v85 - 3);
            *(double *)((char *)v90 - 11) = *(double *)((char *)v85 - 11);
            *(_OWORD *)(v90 - 3) = v92;
            *(_OWORD *)(v90 - 5) = v91;
            v90 -= 5;
            v85 -= 5;
          }
          while (v85 != __p);
          v85 = __p;
        }
        v76 = (double *)(v89 + 40);
        __p = v90;
        v120 = &v88[40 * v87];
        if (v85)
          operator delete(v85);
      }
      v119 = v76;
    }
    v93 = (char *)__p;
    v94 = (float *)(__p + 5);
    if (__p != v119 && v94 != (float *)v119)
    {
      do
      {
        if (*((float *)v93 + 8) < v94[8])
          v93 = (char *)v94;
        v94 += 10;
      }
      while (v94 != (float *)v119);
    }
    v97 = *(double *)v93;
    v96 = *((double *)v93 + 1);
    v98 = *((float *)v93 + 8);
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v77, 0, *(int *)(*((_QWORD *)this + 13) + 40 * *((int *)this + 40) + 20), v78, v79);
    v105 = v104;
    v107 = v106;
    v108 = v97 - v104;
    v109 = v96 - v106;
    v110 = (float)(v109 * v109) + (float)(v108 * v108);
    *(float *)&v111 = v108 / v110;
    if (v110 > 0.0)
      v112 = v109 / v110;
    else
      v112 = v109;
    if (v110 > 0.0)
      v113 = v108 / v110;
    else
      v113 = v108;
    if (v98 > 0.0)
    {
      v114 = sqrtf(v110);
      v115 = 1.0 / ceilf((float)(v114 + v114) / *((float *)this + 24));
      if (v115 < 1.01)
      {
        v116 = v115;
        do
        {
          objc_msgSend_addPoint_(*((void **)this + 10), v99, v100, v101, v102, v103, v105 + (float)(v110 * (float)(v113 * v116)), v107 + (float)(v110 * (float)(v112 * v116)), v111);
          v116 = v115 + v116;
        }
        while (v116 < 1.01);
      }
    }
  }
  if (__p)
    operator delete(__p);
}

void sub_1BE63381C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id LineRegressor::provideAnAnswer(LineRegressor *this)
{
  uint64_t v1;
  id v2;
  id v4[10];

  v1 = *((_QWORD *)this + 14);
  *((_OWORD *)this + 1) = *(_OWORD *)*((_QWORD *)this + 13);
  *((_OWORD *)this + 3) = *(_OWORD *)(v1 - 40);
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 8) = 0;
  StraightLineRegressor::StraightLineRegressor((uint64_t)v4, *((void **)this + 1), (uint64_t)this + 16, *((void **)this + 1), (uint64_t)this + 48, *(_QWORD *)this);
  v2 = v4[3];

  return v2;
}

void sub_1BE633BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE633C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE633CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE633F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE634050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE634060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE634110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE634214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE634234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE634248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE634260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE634274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE634674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a27, 8);

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v42 - 144), 8);

  _Unwind_Resume(a1);
}

id sub_1BE634754(unsigned __int8 *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  CHRemoteRecognitionTextRequest *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t shouldUseTextReplacements;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = [CHRemoteRecognitionTextRequest alloc];
    objc_msgSend_locales(a1, v8, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_recognitionMode(a1, v14, v15, v16, v17, v18);
    v25 = objc_msgSend_priority(a1, v20, v21, v22, v23, v24);
    v27 = (void *)objc_msgSend_initWithLocales_recognitionMode_drawing_options_priority_(v7, v26, (uint64_t)v13, v19, (uint64_t)v5, (uint64_t)v6, v25);

    objc_msgSend_activeCharacterSetPerLocale(a1, v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setActiveCharacterSetPerLocale_(v27, v34, (uint64_t)v33, v35, v36, v37);

    v43 = objc_msgSend_contentType(a1, v38, v39, v40, v41, v42);
    objc_msgSend_setContentType_(v27, v44, v43, v45, v46, v47);
    v53 = objc_msgSend_autoCapitalizationMode(a1, v48, v49, v50, v51, v52);
    objc_msgSend_setAutoCapitalizationMode_(v27, v54, v53, v55, v56, v57);
    v63 = objc_msgSend_autoCorrectionMode(a1, v58, v59, v60, v61, v62);
    objc_msgSend_setAutoCorrectionMode_(v27, v64, v63, v65, v66, v67);
    v73 = objc_msgSend_baseWritingDirection(a1, v68, v69, v70, v71, v72);
    objc_msgSend_setBaseWritingDirection_(v27, v74, v73, v75, v76, v77);
    v83 = objc_msgSend_maxRecognitionResultCount(a1, v78, v79, v80, v81, v82);
    objc_msgSend_setMaxRecognitionResultCount_(v27, v84, v83, v85, v86, v87);
    objc_msgSend_minimumDrawingSize(a1, v88, v89, v90, v91, v92);
    objc_msgSend_setMinimumDrawingSize_(v27, v93, v94, v95, v96, v97);
    shouldUseTextReplacements = objc_msgSend_shouldUseTextReplacements(a1, v98, v99, v100, v101, v102);
    objc_msgSend_setShouldUseTextReplacements_(v27, v104, shouldUseTextReplacements, v105, v106, v107);
    v113 = objc_msgSend_enableCachingIfAvailable(a1, v108, v109, v110, v111, v112);
    objc_msgSend_setEnableCachingIfAvailable_(v27, v114, v113, v115, v116, v117);
    v123 = objc_msgSend_enableGen2ModelIfAvailable(a1, v118, v119, v120, v121, v122);
    objc_msgSend_setEnableGen2ModelIfAvailable_(v27, v124, v123, v125, v126, v127);
    v133 = objc_msgSend_enableGen2CharacterLMIfAvailable(a1, v128, v129, v130, v131, v132);
    objc_msgSend_setEnableGen2CharacterLMIfAvailable_(v27, v134, v133, v135, v136, v137);
    objc_msgSend_setEnableStrokeReordering_(v27, v138, a1[56], v139, v140, v141);
  }
  else
  {
    v27 = 0;
  }

  return v27;
}

void sub_1BE6348FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE634918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE63492C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE634944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE634C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE634CD4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE634CE4(uint64_t a1)
{

}

void sub_1BE634CEC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE634DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE634E08(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  if (v8 && v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[4] + 8) + 40), a2);
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
  }
  else if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a4);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v12 = (id)qword_1EF568E38;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_localizedDescription(*(void **)(*(_QWORD *)(a1[6] + 8) + 40), v13, v14, v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138412290;
      v20 = v18;
      _os_log_impl(&dword_1BE607000, v12, OS_LOG_TYPE_DEBUG, "Error during recognition: %@", (uint8_t *)&v19, 0xCu);

    }
  }

}

void sub_1BE634F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE634FA4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE6350A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6350C0(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v10 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E38;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_localizedDescription(v10, v12, v13, v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v17;
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEBUG, "Error during recognition: %@", (uint8_t *)&v18, 0xCu);

    }
  }
  objc_msgSend_logDrawingsAndResultsForRequest_result_error_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 40), (uint64_t)v6, (uint64_t)v10, v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

}

void sub_1BE635224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE635504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE63558C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6355A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE63561C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE63578C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6357A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6357C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE63581C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE635A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE635A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE635BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE635BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE635D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE635F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE635FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE635FF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6366C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE6366E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE636828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE636B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE636B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE636CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE636E84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE636E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE637164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE6372FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE637314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE637328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE63733C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE63734C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE637360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6376E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE637704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE63771C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE637730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE637784(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_inputSources;
}

BOOL sub_1BE637794(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_isOriginal;
}

BOOL sub_1BE6377A4(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_isTopOriginal;
}

BOOL sub_1BE6377B4(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_isTransliterated;
}

NSLocale *__cdecl sub_1BE6377C4(CHTokenizedTextResultToken *self, SEL a2)
{
  return self->_recognizerSourceLocale;
}

void sub_1BE637A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE637C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE637CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE637D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE637DE0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v98;
  CGRect v99;
  CGRect v100;

  v3 = a2;
  if (a1)
  {
    v98 = v3;
    v9 = objc_msgSend_properties(v3, v4, v5, v6, v7, v8);
    v10 = CFSTR(" ");
    if ((v9 & 0x20) == 0)
      v10 = &stru_1E77F6F28;
    v11 = v10;
    v12 = *(void **)(a1 + 296);
    objc_msgSend_string(v98, v13, v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingFormat_(v12, v19, (uint64_t)CFSTR("%@%@"), v20, v21, v22, v11, v18);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(void **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v23;

    v30 = (void *)objc_msgSend_mutableCopy(*(void **)(a1 + 304), v25, v26, v27, v28, v29);
    objc_msgSend_strokeIndexes(v98, v31, v32, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v30, v37, (uint64_t)v36, v38, v39, v40);

    objc_storeStrong((id *)(a1 + 304), v30);
    *(_QWORD *)(a1 + 120) += objc_msgSend_substrokeCount(v98, v41, v42, v43, v44, v45);
    objc_msgSend_recognitionScore(v98, v46, v47, v48, v49, v50);
    *(double *)(a1 + 72) = v51 * *(double *)(a1 + 72);
    objc_msgSend_combinedScore(v98, v52, v53, v54, v55, v56);
    *(double *)(a1 + 80) = v57 * *(double *)(a1 + 80);
    objc_msgSend_alignmentScore(v98, v58, v59, v60, v61, v62);
    *(_QWORD *)(a1 + 88) = v63;
    v64 = *(double *)(a1 + 312);
    v65 = *(double *)(a1 + 320);
    v66 = *(double *)(a1 + 328);
    v67 = *(double *)(a1 + 336);
    objc_msgSend_bounds(v98, v68, v69, v70, v71, v72);
    v100.origin.x = v73;
    v100.origin.y = v74;
    v100.size.width = v75;
    v100.size.height = v76;
    v99.origin.x = v64;
    v99.origin.y = v65;
    v99.size.width = v66;
    v99.size.height = v67;
    *(CGRect *)(a1 + 312) = CGRectUnion(v99, v100);
    v77 = *(_QWORD *)(a1 + 112);
    v83 = objc_msgSend_inputSources(v98, v78, v79, v80, v81, v82);
    v84 = *(_QWORD *)(a1 + 112);
    v90 = objc_msgSend_inputSources(v98, v85, v86, v87, v88, v89);
    v96 = v83 | v77;
    if ((v90 & 4) == 0 || (v84 & 4) == 0)
      v96 &= ~4uLL;
    *(_QWORD *)(a1 + 112) = v96;
    if ((objc_msgSend_properties(v98, v91, v92, v93, v94, v95) & 0x10) != 0)
      *(_QWORD *)(a1 + 96) |= 0x10uLL;

    v3 = v98;
  }

}

void sub_1BE638014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE6381D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE638360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE638384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE63839C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6383B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE638564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE638604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE638618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6387C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE638978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE638A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE638A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE638AF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE638B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE638C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE639C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE63A114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE63A148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE63A15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE63A16C()
{
  void *v0;

  v0 = (void *)qword_1EF568C00;
  qword_1EF568C00 = (uint64_t)&unk_1E7827218;

}

uint64_t sub_1BE63A2D8(uint64_t a1, const char *a2, unsigned int a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  char v22;
  NSObject *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  _QWORD *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  size_t v71;
  void *v72;
  void **v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  NSObject *v293;
  id v295;
  void *v296;
  id v297;
  void *v298;
  void *v299;
  void *__dst[2];
  unint64_t v301;
  id v302;
  uint8_t buf[4];
  _BYTE v304[10];
  void *v305;
  uint64_t v306;

  v15 = (int)a2;
  v16 = a1;
  v306 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    v16 = *(_QWORD *)a1;
  objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], a2, v16, 4, a9, a10);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    if (v15)
      v18 = MGGetBoolAnswer() ^ 1;
    else
      v18 = 1;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v20 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v304 = v18;
      _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_DEBUG, "Model execution on CPU only: %d", buf, 8u);
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v21 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v304 = a3;
      _os_log_impl(&dword_1BE607000, v21, OS_LOG_TYPE_DEBUG, "Model batch size: %d", buf, 8u);
    }

    v22 = v18 ^ 1;
    if (a3 < 2)
      v22 = 1;
    if ((v22 & 1) == 0)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v23 = (id)qword_1EF568E20;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v304 = 1;
        *(_WORD *)&v304[4] = 1024;
        *(_DWORD *)&v304[6] = 1;
        _os_log_impl(&dword_1BE607000, v23, OS_LOG_TYPE_DEBUG, "Falling back to a batch size of %u for usesCPUOnly == %d", buf, 0xEu);
      }

      a3 = 1;
    }
    v24 = objc_alloc(MEMORY[0x1E0C9E958]);
    if (v18)
      v29 = objc_msgSend_initWithComputeUnits_(v24, v25, 0, v26, v27, v28);
    else
      v29 = objc_msgSend_initWithComputeUnits_(v24, v25, 2, v26, v27, v28);
    v299 = (void *)v29;
    objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v30, (uint64_t)v17, v31, v32, v33);
    v302 = 0;
    v296 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_modelWithContentsOfURL_configuration_error_(MEMORY[0x1E0C9E940], v34, (uint64_t)v296, (uint64_t)v299, (uint64_t)&v302, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v297 = v302;
    if (!v36)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v74 = (id)qword_1EF568E18[0];
      v298 = v74;
      if (os_log_type_enabled(v74, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v304 = v297;
        *(_WORD *)&v304[8] = 2112;
        v305 = v17;
        _os_log_impl(&dword_1BE607000, v74, OS_LOG_TYPE_FAULT, "Error in MMapBinaryModel: %@ from path=%@", buf, 0x16u);
      }
      v19 = 0;
      goto LABEL_59;
    }
    v19 = operator new();
    v37 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v19 + 56) = *MEMORY[0x1E0C9D628];
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 8) = 1;
    *(_QWORD *)(v19 + 16) = 0;
    v38 = (_QWORD *)(v19 + 16);
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0x100000000;
    *(_QWORD *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 48) = 0;
    *(_OWORD *)(v19 + 72) = v37;
    objc_storeStrong((id *)(v19 + 40), v36);
    *(_BYTE *)(v19 + 8) = v18;
    *(double *)(v19 + 56) = a4;
    *(double *)(v19 + 64) = a5;
    *(double *)(v19 + 72) = a6;
    *(double *)(v19 + 80) = a7;
    objc_msgSend_lastPathComponent(v17, v39, v40, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByDeletingPathExtension(v44, v45, v46, v47, v48, v49);
    v298 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByDeletingLastPathComponent(v17, v50, v51, v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingString_(v298, v56, (uint64_t)CFSTR(".codemap"), v57, v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingPathComponent_(v55, v61, (uint64_t)v60, v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();

    v295 = objc_retainAutorelease(v65);
    v70 = (const char *)objc_msgSend_cStringUsingEncoding_(v295, v66, 4, v67, v68, v69);
    v71 = strlen(v70);
    if (v71 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v72 = (void *)v71;
    if (v71 >= 0x17)
    {
      v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v71 | 7) != 0x17)
        v75 = v71 | 7;
      v76 = v75 + 1;
      v73 = (void **)operator new(v75 + 1);
      __dst[1] = v72;
      v301 = v76 | 0x8000000000000000;
      __dst[0] = v73;
    }
    else
    {
      HIBYTE(v301) = v71;
      v73 = __dst;
      if (!v71)
      {
LABEL_41:
        *((_BYTE *)v72 + (_QWORD)v73) = 0;
        v77 = sub_1BE7E7FD4((uint64_t *)__dst);
        *v38 = v77;
        if (SHIBYTE(v301) < 0)
        {
          operator delete(__dst[0]);
          if (!*v38)
          {
LABEL_57:
            CHNeuralNetwork::~CHNeuralNetwork((CHNeuralNetwork *)v19);
            MEMORY[0x1C3B812EC]();
            v19 = 0;
            goto LABEL_58;
          }
        }
        else if (!v77)
        {
          goto LABEL_57;
        }
        *(_DWORD *)(v19 + 36) = a3;
        objc_msgSend_modelDescription(*(void **)(v19 + 40), v78, v79, v80, v81, v82);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputDescriptionsByName(v83, v84, v85, v86, v87, v88);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v89, v90, (uint64_t)CFSTR("imgData"), v91, v92, v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_multiArrayConstraint(v94, v95, v96, v97, v98, v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_shape(v100, v101, v102, v103, v104, v105);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = objc_msgSend_count(v106, v107, v108, v109, v110, v111) == 3;

        objc_msgSend_modelDescription(*(void **)(v19 + 40), v113, v114, v115, v116, v117);
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputDescriptionsByName(v118, v119, v120, v121, v122, v123);
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v124, v125, (uint64_t)CFSTR("imgData"), v126, v127, v128);
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_multiArrayConstraint(v129, v130, v131, v132, v133, v134);
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_shape(v135, v136, v137, v138, v139, v140);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        if (v112)
        {
          objc_msgSend_objectAtIndex_(v145, v141, 1, v142, v143, v144);
          v146 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)(v19 + 24) = objc_msgSend_unsignedIntValue(v146, v147, v148, v149, v150, v151);

          objc_msgSend_modelDescription(*(void **)(v19 + 40), v152, v153, v154, v155, v156);
          v157 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputDescriptionsByName(v157, v158, v159, v160, v161, v162);
          v163 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v163, v164, (uint64_t)CFSTR("imgData"), v165, v166, v167);
          v168 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_multiArrayConstraint(v168, v169, v170, v171, v172, v173);
          v174 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_shape(v174, v175, v176, v177, v178, v179);
          v180 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndex_(v180, v181, 2, v182, v183, v184);
        }
        else
        {
          objc_msgSend_objectAtIndex_(v145, v141, 2, v142, v143, v144);
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)(v19 + 24) = objc_msgSend_unsignedIntValue(v191, v192, v193, v194, v195, v196);

          objc_msgSend_modelDescription(*(void **)(v19 + 40), v197, v198, v199, v200, v201);
          v157 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputDescriptionsByName(v157, v202, v203, v204, v205, v206);
          v163 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v163, v207, (uint64_t)CFSTR("imgData"), v208, v209, v210);
          v168 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_multiArrayConstraint(v168, v211, v212, v213, v214, v215);
          v174 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_shape(v174, v216, v217, v218, v219, v220);
          v180 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndex_(v180, v221, 3, v222, v223, v224);
        }
        v185 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(v19 + 28) = objc_msgSend_unsignedIntValue(v185, v186, v187, v188, v189, v190);

        objc_msgSend_modelDescription(*(void **)(v19 + 40), v225, v226, v227, v228, v229);
        v230 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputDescriptionsByName(v230, v231, v232, v233, v234, v235);
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v236, v237, (uint64_t)CFSTR("featureData"), v238, v239, v240);
        v241 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_multiArrayConstraint(v241, v242, v243, v244, v245, v246);
        v247 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_shape(v247, v248, v249, v250, v251, v252);
        v253 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndex_(v253, v254, 0, v255, v256, v257);
        v258 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(v19 + 32) = objc_msgSend_unsignedIntValue(v258, v259, v260, v261, v262, v263);

        objc_msgSend_modelDescription(*(void **)(v19 + 40), v264, v265, v266, v267, v268);
        v269 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_outputDescriptionsByName(v269, v270, v271, v272, v273, v274);
        v275 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v275, v276, (uint64_t)CFSTR("softmax_output"), v277, v278, v279);
        v280 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_multiArrayConstraint(v280, v281, v282, v283, v284, v285);
        v286 = (void *)objc_claimAutoreleasedReturnValue();
        v292 = objc_msgSend_dataType(v286, v287, v288, v289, v290, v291);

        if (v292 == 65568)
        {
          *(_QWORD *)v19 = sub_1BE63B178;
        }
        else
        {
          if (v292 != 65600)
          {
            *(_QWORD *)v19 = 0;
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v293 = (id)qword_1EF568E20;
            if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)v304 = v292;
              _os_log_impl(&dword_1BE607000, v293, OS_LOG_TYPE_ERROR, "Error model output data format not supported: %ld", buf, 0xCu);
            }

            if (*(_QWORD *)v19)
              goto LABEL_58;
            goto LABEL_57;
          }
          *(_QWORD *)v19 = sub_1BE63AEAC;
        }
LABEL_58:

LABEL_59:
        goto LABEL_60;
      }
    }
    memmove(v73, v70, (size_t)v72);
    goto LABEL_41;
  }
  v19 = 0;
LABEL_60:

  return v19;
}

void sub_1BE63AC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1BE63AEAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  float *v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  int v10;
  float v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  float *v30;
  uint64_t v31;
  __int128 v32;
  NSObject *v33;
  __int16 v34[8];

  if (a1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (*(_DWORD *)(a2 + 24))
    {
      v6 = 0;
      v7 = 0;
      v8 = a1 + 8 * a3;
      do
      {
        v10 = *(_DWORD *)CHCodeMap::operator[](a2, v7);
        v11 = *(double *)(v8 + 8 * v7);
        v12 = a4[2];
        if ((unint64_t)v6 < v12)
        {
          *(_DWORD *)v6 = v10;
          v6[1] = v11;
          v9 = v6 + 2;
        }
        else
        {
          v13 = (float *)*a4;
          v14 = (uint64_t)v6 - *a4;
          v15 = v14 >> 3;
          v16 = (v14 >> 3) + 1;
          if (v16 >> 61)
            sub_1BE61F930();
          v17 = v12 - (_QWORD)v13;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            if (v18 >> 61)
              sub_1BE61F100();
            v19 = operator new(8 * v18);
            v20 = (uint64_t)&v19[8 * v15];
            *(_DWORD *)v20 = v10;
            *(float *)(v20 + 4) = v11;
            v21 = (char *)((char *)v6 - (char *)v13);
            if (v6 != v13)
            {
LABEL_16:
              v22 = (unint64_t)(v21 - 8);
              if (v22 < 0x168
                || (v26 = ((char *)(v6 - 2) - (char *)v13) & 0xFFFFFFFFFFFFFFF8, &v19[v14 - 8 - v26] > &v19[v14 - 8])
                || (float *)((char *)v6 - v26 - 8) > v6 - 2
                || (unint64_t)((char *)v6 - v19 - v14) < 0x20)
              {
                v23 = v6;
                v24 = v20;
              }
              else
              {
                v27 = (v22 >> 3) + 1;
                v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
                v23 = &v6[v28 / 0xFFFFFFFFFFFFFFFCLL];
                v24 = v20 - v28;
                v29 = &v19[8 * v15 - 16];
                v30 = v6 - 4;
                v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v32 = *(_OWORD *)v30;
                  *(v29 - 1) = *((_OWORD *)v30 - 1);
                  *v29 = v32;
                  v29 -= 2;
                  v30 -= 8;
                  v31 -= 4;
                }
                while (v31);
                if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_19:
                  v6 = (float *)*a4;
                  v9 = (float *)(v20 + 8);
                  *a4 = v24;
                  a4[1] = v20 + 8;
                  a4[2] = (uint64_t)&v19[8 * v18];
                  if (!v6)
                    goto LABEL_5;
LABEL_23:
                  operator delete(v6);
                  goto LABEL_5;
                }
              }
              do
              {
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 2;
                *(_QWORD *)(v24 - 8) = v25;
                v24 -= 8;
              }
              while (v23 != v13);
              goto LABEL_19;
            }
          }
          else
          {
            v19 = 0;
            v20 = 8 * v15;
            *(_DWORD *)v20 = v10;
            *(float *)(v20 + 4) = v11;
            v21 = (char *)((char *)v6 - (char *)v13);
            if (v6 != v13)
              goto LABEL_16;
          }
          v9 = (float *)(v20 + 8);
          *a4 = v20;
          a4[1] = v20 + 8;
          a4[2] = (uint64_t)&v19[8 * v18];
          if (v6)
            goto LABEL_23;
        }
LABEL_5:
        a4[1] = (uint64_t)v9;
        ++v7;
        v6 = v9;
      }
      while (v7 < *(unsigned int *)(a2 + 24));
    }
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v33 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    {
      v34[0] = 0;
      _os_log_impl(&dword_1BE607000, v33, OS_LOG_TYPE_FAULT, "predictionsPointer == nullptr", (uint8_t *)v34, 2u);
    }

    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1BE63B158(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE63B178(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  NSObject *v33;
  __int16 v34[8];

  if (a1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (*(_DWORD *)(a2 + 24))
    {
      v6 = 0;
      v7 = 0;
      v8 = a1 + 4 * a3;
      do
      {
        v10 = *(_DWORD *)CHCodeMap::operator[](a2, v7);
        v11 = *(_DWORD *)(v8 + 4 * v7);
        v12 = (unint64_t)a4[2];
        if ((unint64_t)v6 < v12)
        {
          *(_DWORD *)v6 = v10;
          *((_DWORD *)v6 + 1) = v11;
          v9 = v6 + 8;
        }
        else
        {
          v13 = *a4;
          v14 = v6 - *a4;
          v15 = v14 >> 3;
          v16 = (v14 >> 3) + 1;
          if (v16 >> 61)
            sub_1BE61F930();
          v17 = v12 - (_QWORD)v13;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            if (v18 >> 61)
              sub_1BE61F100();
            v19 = operator new(8 * v18);
            v20 = &v19[8 * v15];
            *(_DWORD *)v20 = v10;
            *((_DWORD *)v20 + 1) = v11;
            v21 = (char *)(v6 - v13);
            if (v6 != v13)
            {
LABEL_16:
              v22 = (unint64_t)(v21 - 8);
              if (v22 < 0x168
                || (v26 = (v6 - 8 - v13) & 0xFFFFFFFFFFFFFFF8, &v19[v14 - 8 - v26] > &v19[v14 - 8])
                || &v6[-v26 - 8] > v6 - 8
                || (unint64_t)(v6 - v19 - v14) < 0x20)
              {
                v23 = v6;
                v24 = v20;
              }
              else
              {
                v27 = (v22 >> 3) + 1;
                v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
                v23 = &v6[-v28];
                v24 = &v20[-v28];
                v29 = &v19[8 * v15 - 16];
                v30 = v6 - 16;
                v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v32 = *(_OWORD *)v30;
                  *(v29 - 1) = *((_OWORD *)v30 - 1);
                  *v29 = v32;
                  v29 -= 2;
                  v30 -= 32;
                  v31 -= 4;
                }
                while (v31);
                if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_19:
                  v6 = *a4;
                  v9 = v20 + 8;
                  *a4 = v24;
                  a4[1] = v20 + 8;
                  a4[2] = &v19[8 * v18];
                  if (!v6)
                    goto LABEL_5;
LABEL_23:
                  operator delete(v6);
                  goto LABEL_5;
                }
              }
              do
              {
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v24 - 1) = v25;
                v24 -= 8;
              }
              while (v23 != v13);
              goto LABEL_19;
            }
          }
          else
          {
            v19 = 0;
            v20 = (char *)(8 * v15);
            *(_DWORD *)v20 = v10;
            *((_DWORD *)v20 + 1) = v11;
            v21 = (char *)(v6 - v13);
            if (v6 != v13)
              goto LABEL_16;
          }
          v9 = v20 + 8;
          *a4 = v20;
          a4[1] = v20 + 8;
          a4[2] = &v19[8 * v18];
          if (v6)
            goto LABEL_23;
        }
LABEL_5:
        a4[1] = v9;
        ++v7;
        v6 = v9;
      }
      while (v7 < *(unsigned int *)(a2 + 24));
    }
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v33 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    {
      v34[0] = 0;
      _os_log_impl(&dword_1BE607000, v33, OS_LOG_TYPE_FAULT, "predictionsPointer == nullptr", (uint8_t *)v34, 2u);
    }

    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1BE63B420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CHNeuralNetwork::~CHNeuralNetwork(CHNeuralNetwork *this)
{
  CHCodeMap *var2;
  id var7;
  id var8;

  var2 = this->var2;
  if (var2)
  {
    if (var2->var0)
      munmap(var2->var0, var2->var1);
    MEMORY[0x1C3B812EC](var2, 0x1010C40A749B91FLL);
    this->var2 = 0;
  }
  var7 = this->var7;
  if (var7)
  {
    this->var7 = 0;

  }
  var8 = this->var8;
  if (var8)
  {
    this->var8 = 0;

    var8 = this->var8;
  }

}

id CHNeuralNetwork::computeClassificationFeatures(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,float32x2_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,uint64_t a52)
{
  id v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  id v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  float64x2_t *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  float32x2_t *v186;
  uint64_t v187;
  float64x2_t *v188;
  float32x4_t v189;
  float64x2_t v190;
  float64x2_t v191;
  uint64_t v192;
  double *v193;
  float *v194;
  float v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  _BOOL4 IsEmpty;
  _BOOL4 v222;
  double v223;
  double v224;
  id v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  double *v233;
  id v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  id v246;
  NSObject *v247;
  id v249;
  uint64_t v250;
  id v251;
  void *v252;
  id v253;
  uint8_t buf[16];
  __int128 vars0;

  a52 = *MEMORY[0x1E0C80C00];
  v53 = a2;
  v252 = v53;
  if (*(_BYTE *)(a1 + 8))
    v59 = objc_msgSend_count(v53, v54, v55, v56, v57, v58);
  else
    v59 = *(unsigned int *)(a1 + 36);
  objc_msgSend_modelDescription(*(void **)(a1 + 40), v54, v55, v56, v57, v58);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_inputDescriptionsByName(v60, v61, v62, v63, v64, v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v66, v67, (uint64_t)CFSTR("imgData"), v68, v69, v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayConstraint(v71, v72, v73, v74, v75, v76);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v77, v78, v79, v80, v81, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = objc_msgSend_count(v83, v84, v85, v86, v87, v88);

  if (v89 == 3)
  {
    v90 = objc_alloc(MEMORY[0x1E0C9E970]);
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v91, v59, v92, v93, v94);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    a49 = v95;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v96, *(unsigned int *)(a1 + 24), v97, v98, v99);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    a50 = v100;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v101, *(unsigned int *)(a1 + 28), v102, v103, v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    a51 = v105;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v106, (uint64_t)&a49, 3, v107, v108);
  }
  else
  {
    v90 = objc_alloc(MEMORY[0x1E0C9E970]);
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v112, v59, v113, v114, v115);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    a45 = v95;
    a46 = &unk_1E7828118;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v116, *(unsigned int *)(a1 + 24), v117, v118, v119);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    a47 = v100;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v120, *(unsigned int *)(a1 + 28), v121, v122, v123);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    a48 = v105;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v124, (uint64_t)&a45, 4, v125, v126);
  }
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  v127 = (void *)objc_msgSend_initWithShape_dataType_error_(v90, v110, (uint64_t)v109, 65600, 0, v111);

  v249 = objc_retainAutorelease(v127);
  v250 = objc_msgSend_dataPointer(v249, v128, v129, v130, v131, v132);
  v138 = *(_DWORD *)(a1 + 24);
  v139 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32))
  {
    v140 = objc_alloc(MEMORY[0x1E0C9E970]);
    a42 = &unk_1E7828118;
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v141, v59, v142, v143, v144);
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    a43 = v145;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v146, *(unsigned int *)(a1 + 32), v147, v148, v149);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    a44 = v150;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v151, (uint64_t)&a42, 3, v152, v153);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    v251 = (id)objc_msgSend_initWithShape_dataType_error_(v140, v155, (uint64_t)v154, 65600, 0, v156);

  }
  else
  {
    v251 = 0;
  }
  v157 = 0;
  v158 = 0;
  v159 = (v139 * v138);
  v160 = (float64x2_t *)(v250 + 32);
  while (v158 < objc_msgSend_count(v252, v133, v134, v135, v136, v137))
  {
    objc_msgSend_objectAtIndexedSubscript_(v252, v161, v158, v162, v163, v164);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_drawing(v165, v166, v167, v168, v169, v170);
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    v179 = v171;
    if (v171)
    {
      LODWORD(v178) = *(_DWORD *)(a1 + 24);
      LODWORD(v177) = *(_DWORD *)(a1 + 28);
      objc_msgSend_bitmapRepresentationForSize_(v171, v172, v173, v174, v175, v176, (double)v178, (double)v177);
    }
    else
    {
      a21 = 0;
      *(_OWORD *)buf = 0u;
      vars0 = 0u;
    }

    if ((_DWORD)v159)
    {
      if (v159 < 8)
      {
        v185 = 0;
LABEL_21:
        v192 = v159 - v185;
        v193 = (double *)(v250 + 8 * (v185 + v157));
        v194 = (float *)a21 + v185;
        do
        {
          v195 = *v194++;
          *v193++ = v195;
          --v192;
        }
        while (v192);
        goto LABEL_23;
      }
      v186 = a21 + 2;
      v187 = v159 & 0xFFFFFFF8;
      v188 = v160;
      do
      {
        v189 = *(float32x4_t *)v186[-2].f32;
        v190 = vcvtq_f64_f32(*v186);
        v191 = vcvt_hight_f64_f32(*(float32x4_t *)v186->f32);
        v188[-2] = vcvtq_f64_f32(*(float32x2_t *)v189.f32);
        v188[-1] = vcvt_hight_f64_f32(v189);
        *v188 = v190;
        v188[1] = v191;
        v188 += 4;
        v186 += 4;
        v187 -= 8;
      }
      while (v187);
      v185 = v159 & 0xFFFFFFF8;
      if (v185 != v159)
        goto LABEL_21;
    }
LABEL_23:
    if (*(_DWORD *)(a1 + 32))
    {
      objc_msgSend_drawing(v165, v180, v181, v182, v183, v184);
      v196 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_bounds(v196, v197, v198, v199, v200, v201);
      v203 = v202;
      v205 = v204;
      v207 = v206;

      if (CGRectIsNull(*(CGRect *)(a1 + 56)))
      {
        objc_msgSend_normalizationContext(v165, v208, v209, v210, v211, v212);
        v216 = v215;
        v218 = v217;
      }
      else
      {
        v213 = *(_QWORD *)(a1 + 56);
        v216 = *(double *)(a1 + 64);
        v214 = *(_QWORD *)(a1 + 72);
        v218 = *(double *)(a1 + 80);
      }
      v219 = v216;
      v220 = v218;
      IsEmpty = CGRectIsEmpty(*(CGRect *)&v213);
      v222 = IsEmpty;
      if (IsEmpty)
        v223 = 195.0;
      else
        v223 = v218;
      if (IsEmpty)
        v224 = 156.0;
      else
        v224 = v218 * 156.0 / 195.0;
      v225 = objc_retainAutorelease(v251);
      v231 = objc_msgSend_dataPointer(v225, v226, v227, v228, v229, v230);
      if (v222)
        v232 = 0.0;
      else
        v232 = v216;
      v233 = (double *)(v231 + 8 * v158 * *(unsigned int *)(a1 + 32));
      *v233 = v205 / v224;
      v233[1] = v207 / v223;
      v233[2] = (v207 * 0.5 + v203 - v232) / v223;
    }
    *(_QWORD *)buf = &unk_1E77F0828;
    if (a21)
      MEMORY[0x1C3B812C8](a21, 0x1000C8052888210);

    ++v158;
    v160 = (float64x2_t *)((char *)v160 + 8 * v159);
    v157 += v159;
  }
  v234 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend_setObject_forKeyedSubscript_(v234, v235, (uint64_t)v249, (uint64_t)CFSTR("imgData"), v236, v237);
  if (v251)
    objc_msgSend_setObject_forKeyedSubscript_(v234, v238, (uint64_t)v251, (uint64_t)CFSTR("featureData"), v239, v240);
  v241 = objc_alloc(MEMORY[0x1E0C9E8F8]);
  v253 = 0;
  v245 = (void *)objc_msgSend_initWithDictionary_error_(v241, v242, (uint64_t)v234, (uint64_t)&v253, v243, v244);
  v246 = v253;
  if (!v245)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v247 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v246;
      _os_log_impl(&dword_1BE607000, v247, OS_LOG_TYPE_ERROR, "Error creating MLFeatures: %@", buf, 0xCu);
    }

  }
  return v245;
}

void sub_1BE63BB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE63BCFC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E77F0828;
  v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1C3B812C8](v2, 0x1000C8052888210);
    a1[16] = 0;
  }
  return a1;
}

#error "1BE63BDA0: call analysis failed (funcsize=340)"

void sub_1BE63C2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{

  _Unwind_Resume(a1);
}

void CHNeuralNetwork::feedforwardFromBatches(CHNeuralNetwork *this@<X0>, MLDictionaryFeatureProvider *a2@<X1>, void ***a3@<X8>)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id var7;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  id v152;
  MLDictionaryFeatureProvider *v153;
  id v154;
  _BYTE buf[24];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v153 = a2;
  v5 = objc_alloc(MEMORY[0x1E0C9E9B0]);
  v151 = (void *)objc_msgSend_initWithUsesCPUOnly_(v5, v6, this->var1, v7, v8, v9);
  objc_msgSend_setMaxComputationBatchSize_(v151, v10, this->var6, v11, v12, v13);
  var7 = this->var7;
  v154 = 0;
  objc_msgSend_predictionFromFeatures_options_error_(var7, v15, (uint64_t)v153, (uint64_t)v151, (uint64_t)&v154, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v152 = v154;
  if (!v17)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v22 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_localizedDescription(v152, v23, v24, v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_FAULT, "Error for model prediction in CHNeuralNetwork::feedforwardFromBatches: %@", buf, 0xCu);

    }
  }
  objc_msgSend_featureValueForName_(v17, v18, (uint64_t)CFSTR("softmax_output"), v19, v20, v21);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v29, v30, v31, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = objc_retainAutorelease(v35);
  v42 = objc_msgSend_dataPointer(v36, v37, v38, v39, v40, v41);
  objc_msgSend_shape(v36, v43, v44, v45, v46, v47);
  v48 = objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v48, v49, v50, v51, v52, v53) == 5)
    goto LABEL_8;
  objc_msgSend_shape(v36, v54, v55, v56, v57, v58);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = objc_msgSend_count(v64, v65, v66, v67, v68, v69) == 2;

  if (!v70)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v48 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_shape(v36, v127, v128, v129, v130, v131);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      v138 = objc_msgSend_count(v132, v133, v134, v135, v136, v137);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v138;
      _os_log_impl(&dword_1BE607000, v48, OS_LOG_TYPE_FAULT, "Unexpected prediction tensor dimension: %lu", buf, 0xCu);

    }
LABEL_8:

  }
  objc_msgSend_shape(v36, v59, v60, v61, v62, v63);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = objc_msgSend_count(v71, v72, v73, v74, v75, v76) == 5;

  objc_msgSend_shape(v36, v78, v79, v80, v81, v82);
  v83 = objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v83, v84, v85, v86, v87, v88) == 5)
  {
LABEL_11:

    goto LABEL_13;
  }
  v94 = this->var6 == 1;

  if (!v94)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v83 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_shape(v36, v139, v140, v141, v142, v143);
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      v150 = objc_msgSend_count(v144, v145, v146, v147, v148, v149);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = 5;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v150;
      _os_log_impl(&dword_1BE607000, v83, OS_LOG_TYPE_FAULT, "Prediction tensor must be of dimension %ld instead of %lu for batch size different from 1", buf, 0x16u);

    }
    goto LABEL_11;
  }
LABEL_13:
  objc_msgSend_shape(v36, v89, v90, v91, v92, v93);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v95, v96, v77, v97, v98, v99);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v106 = objc_msgSend_integerValue(v100, v101, v102, v103, v104, v105);

  objc_msgSend_strides(v36, v107, v108, v109, v110, v111);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v112, v113, v77, v114, v115, v116);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  v123 = objc_msgSend_integerValue(v117, v118, v119, v120, v121, v122);

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v106)
  {
    if (v106 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v124 = (void **)operator new(24 * v106);
    *a3 = v124;
    a3[2] = &v124[3 * v106];
    bzero(v124, 24 * ((24 * v106 - 24) / 0x18) + 24);
    v125 = 0;
    a3[1] = &v124[3 * ((24 * v106 - 24) / 0x18) + 3];
    do
    {
      ((void (*)(_BYTE *__return_ptr, uint64_t, CHCodeMap *, uint64_t))this->var0)(buf, v42, this->var2, v125);
      v126 = *v124;
      if (*v124)
      {
        v124[1] = v126;
        operator delete(v126);
        *v124 = 0;
        v124[1] = 0;
        v124[2] = 0;
      }
      *(_OWORD *)v124 = *(_OWORD *)buf;
      v124[2] = *(void **)&buf[16];
      v124 += 3;
      v125 += v123;
      --v106;
    }
    while (v106);
  }

}

void sub_1BE63C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE63C9C0(unint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, void *a5, char a6)
{
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  _BOOL4 v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  _BOOL4 v37;
  int v38;
  float *v39;
  float v40;
  BOOL v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  unsigned __int16 v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD *v74;
  _BYTE *v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint8_t buf[4];
  int v80;
  __int16 v81;
  _BOOL4 v82;
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v11 = a5;
  v16 = v11;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 1;
  v78 = a4;
  v17 = *a3;
  v18 = a3[1];
  if (*a3 != v18)
  {
    if (v11)
    {
      if ((a6 & 1) != 0)
      {
        while (1)
        {
          v44 = *v17;
          if ((objc_msgSend_characterIsMember_(v16, v12, (unsigned __int16)*v17, v13, v14, v15) & 1) == 0)
          {
            v45 = *(void **)(a2 + 48);
            if ((v44 - 57440) > 0x400 || v45 == 0)
              goto LABEL_41;
            objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v12, v44, v13, v14, v15);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v45, v48, (uint64_t)v47, v49, v50, v51);
            v52 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v52)
              goto LABEL_41;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v53 = v52;
            v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v54, (uint64_t)&v70, (uint64_t)v83, 16, v55);
            if (v61)
            {
              v62 = *(_QWORD *)v71;
              while (2)
              {
                for (i = 0; i != v61; ++i)
                {
                  if (*(_QWORD *)v71 != v62)
                    objc_enumerationMutation(v53);
                  v64 = objc_msgSend_unsignedIntValue(*(void **)(*((_QWORD *)&v70 + 1) + 8 * i), v56, v57, v58, v59, v60);
                  if ((objc_msgSend_characterIsMember_(v16, v65, v64, v66, v67, v68) & 1) == 0)
                  {

                    goto LABEL_41;
                  }
                }
                v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v56, (uint64_t)&v70, (uint64_t)v83, 16, v60);
                if (v61)
                  continue;
                break;
              }
            }

          }
          sub_1BE63CF30((uint64_t)&v74, v44);
LABEL_41:
          if (++v17 == v18)
            goto LABEL_6;
        }
      }
      do
      {
        v43 = *v17;
        if ((objc_msgSend_characterIsMember_(v16, v12, (unsigned __int16)*v17, v13, v14, v15) & 1) != 0)
          sub_1BE63CF30((uint64_t)&v74, v43);
        ++v17;
      }
      while (v17 != v18);
    }
    else
    {
      do
        sub_1BE63CF30((uint64_t)&v74, *v17++);
      while (v17 != v18);
    }
  }
LABEL_6:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v20 = v74;
  v19 = v75;
  if (v75 != (_BYTE *)v74)
  {
    while (1)
    {
      v69 = *v20;
      if (v19 - (_BYTE *)v20 >= 9)
      {
        v21 = 0;
        v22 = (v19 - (_BYTE *)v20) >> 3;
        v23 = v77;
        v24 = *v20;
        v25 = (float *)v20;
        do
        {
          v26 = &v25[2 * v21 + 2];
          v27 = (2 * v21) | 1;
          v28 = 2 * v21 + 2;
          if (v28 < v22)
          {
            v29 = v26[1];
            v30 = v26[3];
            v31 = v29 > v30;
            if (!v23)
              v31 = v29 < v30;
            v26 += 2 * v31;
            if (v31)
              v27 = v28;
          }
          *(_QWORD *)v25 = *(_QWORD *)v26;
          v25 = v26;
          v21 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
        v32 = v19 - 8;
        if (v26 == (float *)(v19 - 8))
        {
          *(_QWORD *)v26 = v24;
        }
        else
        {
          *(_QWORD *)v26 = *v32;
          *v32 = v24;
          v33 = (char *)v26 - (char *)v20 + 8;
          if (v33 >= 9)
          {
            v34 = (((unint64_t)v33 >> 3) - 2) >> 1;
            v35 = *((float *)&v20[v34] + 1);
            v36 = v26[1];
            v37 = v35 > v36;
            if (!v23)
              v37 = v35 < v36;
            if (v37)
            {
              v38 = *(_DWORD *)v26;
              do
              {
                v39 = v26;
                v26 = (float *)&v20[v34];
                *(_QWORD *)v39 = *(_QWORD *)v26;
                if (!v34)
                  break;
                v34 = (v34 - 1) >> 1;
                v40 = *((float *)&v20[v34] + 1);
                v41 = v40 > v36;
                if (!v23)
                  v41 = v40 < v36;
              }
              while (v41);
              *(_DWORD *)v26 = v38;
              v26[1] = v36;
            }
          }
        }
      }
      v75 -= 8;
      sub_1BE63D2AC(a1, (_QWORD *)*a1, (char *)&v69);
      if ((_DWORD)v69 != 57424)
        goto LABEL_9;
      if (qword_1EF568E88 != -1)
        break;
      v42 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
        goto LABEL_34;
LABEL_8:

LABEL_9:
      v20 = v74;
      v19 = v75;
      if (v75 == (_BYTE *)v74)
        goto LABEL_58;
    }
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v42 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      goto LABEL_8;
LABEL_34:
    *(_DWORD *)buf = 67109376;
    v80 = v69;
    v81 = 1024;
    v82 = v16 == 0;
    _os_log_impl(&dword_1BE607000, v42, OS_LOG_TYPE_FAULT, "Not-a-char codepoint (U+%04x) is being added to the filtered candidate results (activeCharacterSet is nil: %d)", buf, 0xEu);
    goto LABEL_8;
  }
LABEL_58:
  if (v19)
  {
    v75 = v19;
    operator delete(v19);
  }

}

void sub_1BE63CE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void **sub_1BE63CEBC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE63CF30(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL4 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL4 v23;
  int v24;
  float *v25;
  float v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  float v53;
  float v54;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  float v60;
  BOOL v61;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v6 = (uint64_t)&v5[-*(_QWORD *)a1];
  v7 = v6 >> 3;
  if ((unint64_t)(v6 >> 3) >= *(_QWORD *)(a1 + 32))
  {
    if (*((float *)v4 + 1) >= *((float *)&a2 + 1))
      return;
    if (v6 >= 9)
    {
      v8 = 0;
      v9 = *(unsigned __int8 *)(a1 + 24);
      v10 = *(_QWORD *)v4;
      v11 = *(char **)a1;
      do
      {
        v12 = (float *)&v11[8 * v8 + 8];
        v13 = (2 * v8) | 1;
        v14 = 2 * v8 + 2;
        if (v14 < v7)
        {
          v15 = v12[1];
          v16 = v12[3];
          v17 = v15 > v16;
          if (!v9)
            v17 = v15 < v16;
          v12 += 2 * v17;
          if (v17)
            v13 = v14;
        }
        *(_QWORD *)v11 = *(_QWORD *)v12;
        v11 = (char *)v12;
        v8 = v13;
      }
      while (v13 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
      v18 = v5 - 8;
      if (v12 == (float *)(v5 - 8))
      {
        *(_QWORD *)v12 = v10;
      }
      else
      {
        *(_QWORD *)v12 = *(_QWORD *)v18;
        *(_QWORD *)v18 = v10;
        v19 = (char *)v12 - v4 + 8;
        if (v19 >= 9)
        {
          v20 = (((unint64_t)v19 >> 3) - 2) >> 1;
          v21 = *(float *)&v4[8 * v20 + 4];
          v22 = v12[1];
          v23 = v21 > v22;
          if (!v9)
            v23 = v21 < v22;
          if (v23)
          {
            v24 = *(_DWORD *)v12;
            do
            {
              v25 = v12;
              v12 = (float *)&v4[8 * v20];
              *(_QWORD *)v25 = *(_QWORD *)v12;
              if (!v20)
                break;
              v20 = (v20 - 1) >> 1;
              v26 = *(float *)&v4[8 * v20 + 4];
              v27 = v26 > v22;
              if (!v9)
                v27 = v26 < v22;
            }
            while (v27);
            *(_DWORD *)v12 = v24;
            v12[1] = v22;
          }
        }
      }
    }
    v5 = (char *)(*(_QWORD *)(a1 + 8) - 8);
    *(_QWORD *)(a1 + 8) = v5;
  }
  v28 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v28)
  {
    v30 = *(char **)a1;
    v31 = (uint64_t)&v5[-*(_QWORD *)a1];
    v32 = v31 >> 3;
    v33 = (v31 >> 3) + 1;
    if (v33 >> 61)
      sub_1BE61F930();
    v34 = v28 - (_QWORD)v30;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 61)
        sub_1BE61F100();
      v36 = operator new(8 * v35);
      v37 = &v36[8 * v32];
      v38 = &v36[8 * v35];
      *v37 = a2;
      v29 = (uint64_t)(v37 + 1);
      v39 = (char *)(v5 - v30);
      if (v5 == v30)
        goto LABEL_47;
    }
    else
    {
      v36 = 0;
      v37 = (_QWORD *)(8 * v32);
      v38 = 0;
      *(_QWORD *)(8 * v32) = a2;
      v29 = 8 * v32 + 8;
      v39 = (char *)(v5 - v30);
      if (v5 == v30)
        goto LABEL_47;
    }
    v40 = (unint64_t)(v39 - 8);
    if (v40 >= 0x58)
    {
      if ((unint64_t)(v5 - v36 - v31) >= 0x20)
      {
        v42 = (v40 >> 3) + 1;
        v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v5[-v43];
        v37 = (_QWORD *)((char *)v37 - v43);
        v44 = &v36[8 * v32 - 16];
        v45 = v5 - 16;
        v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 4;
        }
        while (v46);
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_46;
      }
      else
      {
        v41 = v5;
      }
    }
    else
    {
      v41 = v5;
    }
    do
    {
      v48 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *--v37 = v48;
    }
    while (v41 != v30);
LABEL_46:
    v5 = *(char **)a1;
LABEL_47:
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v29;
    *(_QWORD *)(a1 + 16) = v38;
    if (v5)
      operator delete(v5);
    goto LABEL_49;
  }
  *(_QWORD *)v5 = a2;
  v29 = (uint64_t)(v5 + 8);
LABEL_49:
  *(_QWORD *)(a1 + 8) = v29;
  v49 = *(char **)a1;
  v50 = v29 - *(_QWORD *)a1;
  if (v50 >= 9)
  {
    v51 = *(unsigned __int8 *)(a1 + 24);
    v52 = (((unint64_t)v50 >> 3) - 2) >> 1;
    v53 = *(float *)&v49[8 * v52 + 4];
    v54 = *(float *)(v29 - 4);
    v55 = v53 > v54;
    if (!*(_BYTE *)(a1 + 24))
      v55 = v53 < v54;
    if (v55)
    {
      v58 = *(_DWORD *)(v29 - 8);
      v57 = v29 - 8;
      v56 = v58;
      do
      {
        v59 = (_QWORD *)v57;
        v57 = (uint64_t)&v49[8 * v52];
        *v59 = *(_QWORD *)v57;
        if (!v52)
          break;
        v52 = (v52 - 1) >> 1;
        v60 = *(float *)&v49[8 * v52 + 4];
        v61 = v60 > v54;
        if (!v51)
          v61 = v60 < v54;
      }
      while (v61);
      *(_DWORD *)v57 = v56;
      *(float *)(v57 + 4) = v54;
    }
  }
}

char *sub_1BE63D2AC(unint64_t *a1, _QWORD *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = (_QWORD *)a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = (_QWORD *)a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v46 = (v16 >> 3) + 1;
          v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v47);
          v17 = (_QWORD *)(v5 + v47);
          v48 = (_OWORD *)(v5 + 16);
          v49 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *v49;
            *(v48 - 1) = *(v49 - 1);
            *v48 = v51;
            v48 += 2;
            v49 += 2;
            v50 -= 4;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = (_QWORD *)a1[1];
      }
      do
      {
        v52 = *v13++;
        *v17++ = v52;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = (unint64_t)v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 8 * (a1[1] > (unint64_t)v3);
    *(_QWORD *)v9 = *(_QWORD *)v3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_1BE61F930();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_1BE61F100();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_QWORD *)v6 == a2)
      v45 = 1;
    else
      v45 = v7 >> 2;
    if (v45 >> 61)
      sub_1BE61F100();
    v23 = (char *)operator new(8 * v45);
    v24 = &v23[8 * v45];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v45];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *(_QWORD *)v3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *(_QWORD *)v3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_60;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_60;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
  }
  v44 = (_QWORD *)*a1;
  *a1 = (unint64_t)v28;
  a1[1] = (unint64_t)&v27[v40];
  a1[2] = (unint64_t)v24;
  if (v44)
    operator delete(v44);
  return v23;
}

void sub_1BE63D61C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

#error "1BE63D6FC: call analysis failed (funcsize=90)"

void sub_1BE63D79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CHNeuralNetwork::feedforward(CHNeuralNetwork *this, MLDictionaryFeatureProvider *a2)
{
  MLDictionaryFeatureProvider *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id var7;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc(MEMORY[0x1E0C9E9B0]);
  v9 = (void *)objc_msgSend_initWithUsesCPUOnly_(v4, v5, this->var1, v6, v7, v8);
  var7 = this->var7;
  v40 = 0;
  objc_msgSend_predictionFromFeatures_options_error_(var7, v11, (uint64_t)v3, (uint64_t)v9, (uint64_t)&v40, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v40;
  if (!v13)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v19 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_localizedDescription(v18, v20, v21, v22, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v42 = v25;
      _os_log_impl(&dword_1BE607000, v19, OS_LOG_TYPE_FAULT, "Error for model prediction in CHNeuralNetwork::feedforward: %@", buf, 0xCu);

    }
  }
  objc_msgSend_featureValueForName_(v13, v14, (uint64_t)CFSTR("softmax_output"), v15, v16, v17);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v26, v27, v28, v29, v30, v31);
  v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v38 = objc_msgSend_dataPointer(v32, v33, v34, v35, v36, v37);

  if (!v38)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v39 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v39, OS_LOG_TYPE_FAULT, "predictionResultsPtr is nullptr", buf, 2u);
    }

  }
  ((void (*)(uint64_t, CHCodeMap *, _QWORD))this->var0)(v38, this->var2, 0);

}

void sub_1BE63DA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

CHCodeMap *CHNeuralNetwork::supportedCodes@<X0>(CHNeuralNetwork *this@<X0>, char **a2@<X8>)
{
  CHNeuralNetwork *v2;
  CHCodeMap *result;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  CHNeuralNetwork *v27;

  v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = this->var2;
  if (result->var3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v27 = v2;
    while (1)
    {
      v10 = *(_DWORD *)CHCodeMap::operator[]((uint64_t)result, v8);
      if (v7 >= v6)
        break;
      *(_DWORD *)v7 = v10;
      v9 = (uint64_t)(v7 + 4);
LABEL_4:
      a2[1] = (char *)v9;
      ++v8;
      result = v2->var2;
      v7 = (char *)v9;
      if (v8 >= result->var3)
        return result;
    }
    v11 = (v7 - v5) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      sub_1BE61F930();
    if ((v6 - v5) >> 1 > v12)
      v12 = (v6 - v5) >> 1;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 62)
        sub_1BE61F100();
      v14 = operator new(4 * v13);
      v15 = &v14[4 * v11];
      *(_DWORD *)v15 = v10;
      v9 = (uint64_t)(v15 + 4);
      v16 = v7 - v5;
      if (v7 == v5)
        goto LABEL_20;
    }
    else
    {
      v14 = 0;
      v15 = (char *)(4 * v11);
      *(_DWORD *)(4 * v11) = v10;
      v9 = 4 * v11 + 4;
      v16 = v7 - v5;
      if (v7 == v5)
        goto LABEL_20;
    }
    v17 = v16 - 4;
    if (v17 >= 0xBC)
    {
      v20 = (v7 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v14[v7 - v5 - 4 - v20] > &v14[v7 - v5 - 4])
      {
        v18 = v7;
      }
      else if (&v7[-v20 - 4] > v7 - 4)
      {
        v18 = v7;
      }
      else if ((unint64_t)(v5 - v14) >= 0x20)
      {
        v21 = (v17 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v18 = &v7[-v22];
        v15 -= v22;
        v23 = &v14[4 * v11 - 16];
        v24 = v7 - 16;
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          v6 = &v14[4 * v13];
          *a2 = v15;
          a2[1] = (char *)v9;
          a2[2] = v6;
          if (v5)
            operator delete(v5);
          v5 = v15;
          v2 = v27;
          goto LABEL_4;
        }
      }
      else
      {
        v18 = v7;
      }
    }
    else
    {
      v18 = v7;
    }
    do
    {
      v19 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v15 - 1) = v19;
      v15 -= 4;
    }
    while (v18 != v5);
    goto LABEL_20;
  }
  return result;
}

void sub_1BE63DC90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE63DCB0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E77F0828;
  v1 = a1[16];
  if (v1)
    MEMORY[0x1C3B812C8](v1, 0x1000C8052888210);
  JUMPOUT(0x1C3B812E0);
}

uint64_t sub_1BE63DD00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v24;
  uint64_t v25;
  float v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v34;
  uint64_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  int i;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _OWORD *v49;

  v6 = *(_DWORD *)(a1 + 140);
  v7 = *(_DWORD *)(a2 + 136);
  *(_QWORD *)a3 = &unk_1E77F0828;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = *(unsigned int *)(a2 + 136);
    if ((_DWORD)v10)
    {
      v11 = *(unsigned int *)(a1 + 136);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(_QWORD *)(a2 + 128);
        v15 = *(_QWORD *)(a1 + 128);
        v16 = v11 - 1;
        v17 = v11 & 0xFFFFFFF8;
        while (1)
        {
          v18 = 0;
          v19 = 4 * (v11 * v13);
          v20 = v15 + v19;
          v21 = v15 + 4 * v11 + v19;
          v24 = __CFADD__(v11 * v13, v16) || (unint64_t)(v11 - 1) >> 32 != 0 || (_DWORD)v10 != 1;
          do
          {
            v25 = (v13 * v7 + v18);
            *(_DWORD *)(result + 4 * v25) = 0;
            v26 = 0.0;
            if (v11 < 0x14 || (__CFADD__((_DWORD)v18, v16) ? (v27 = 1) : (v27 = v24), (v27 & 1) != 0))
            {
              v28 = 0;
LABEL_21:
              v29 = v18 + v10 * v28;
              do
              {
                v26 = v26 + (float)(*(float *)(v15 + 4 * (v12 + v28)) * *(float *)(v14 + 4 * v29));
                *(float *)(result + 4 * v25) = v26;
                ++v28;
                v29 += v10;
              }
              while (v11 != v28);
              goto LABEL_23;
            }
            v28 = 0;
            v30 = 4 * (v13 * v7 + v18);
            v31 = result + v30;
            v32 = result + 4 + v30;
            v34 = result + v30 < (unint64_t)(v14 + 4 * v11 + 4 * v18) && v14 + 4 * v18 < v32;
            if (v20 < v32 && v31 < v21)
              goto LABEL_21;
            if (v34)
              goto LABEL_21;
            v36 = 0;
            do
            {
              v37 = (float32x4_t *)(v15 + 4 * (v12 + v36));
              v38 = *v37;
              v39 = v37[1];
              v40 = (float32x4_t *)(v14 + 4 * (v18 + v36));
              v41 = vmulq_f32(v38, *v40);
              v42 = vmulq_f32(v39, v40[1]);
              v26 = (float)((float)((float)((float)((float)((float)((float)(v26 + v41.f32[0]) + v41.f32[1]) + v41.f32[2])
                                                  + v41.f32[3])
                                          + v42.f32[0])
                                  + v42.f32[1])
                          + v42.f32[2])
                  + v42.f32[3];
              v36 += 8;
            }
            while (v17 != v36);
            *(float *)(result + 4 * v25) = v26;
            v28 = v11 & 0xFFFFFFF8;
            if (v17 != v11)
              goto LABEL_21;
LABEL_23:
            ++v18;
          }
          while (v18 != v10);
          ++v13;
          v12 += v11;
          if (v13 == v9)
            return result;
        }
      }
      for (i = 0; i != v9; ++i)
      {
        if (v10 >= 8)
        {
          v44 = 0;
          if (!__CFADD__(v7 * i, v10 - 1) && !((unint64_t)(v10 - 1) >> 32))
          {
            v47 = v11;
            v48 = v10 & 0xFFFFFFF8;
            do
            {
              v49 = (_OWORD *)(result + 4 * v47);
              *v49 = 0uLL;
              v49[1] = 0uLL;
              v47 += 8;
              v48 -= 8;
            }
            while (v48);
            v44 = v10 & 0xFFFFFFF8;
            if (v44 == v10)
              goto LABEL_42;
          }
        }
        else
        {
          v44 = 0;
        }
        v45 = v10 - v44;
        v46 = v11 + v44;
        do
        {
          *(_DWORD *)(result + 4 * v46++) = 0;
          --v45;
        }
        while (v45);
LABEL_42:
        LODWORD(v11) = v11 + v7;
      }
    }
  }
  return result;
}

uint64_t sub_1BE63DFA8@<X0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &unk_1E77F0828;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = *(unsigned int *)(a1 + 136);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *a2;
      v15 = *(_QWORD *)(a1 + 128);
      v16 = v10 - 1;
      do
      {
        if (v10 >= 0xC)
        {
          v17 = 0;
          v19 = v10 * v13;
          v20 = __CFADD__(v7 * v13, v16);
          v21 = __CFADD__(v19, v16);
          if (!v20
            && !v21
            && !((unint64_t)(v10 - 1) >> 32)
            && result + 4 * (v7 * v13) - (v15 + 4 * (unint64_t)v19) >= 0x20)
          {
            v22 = v11;
            v23 = v12;
            v24 = v10 & 0xFFFFFFF8;
            do
            {
              v25 = (float32x4_t *)(v15 + 4 * v23);
              v26 = vmulq_n_f32(*v25, v14);
              v27 = vmulq_n_f32(v25[1], v14);
              v28 = (float32x4_t *)(result + 4 * v22);
              *v28 = v26;
              v28[1] = v27;
              v23 += 8;
              v22 += 8;
              v24 -= 8;
            }
            while (v24);
            v17 = v10 & 0xFFFFFFF8;
            if (v17 == v10)
              goto LABEL_4;
          }
        }
        else
        {
          v17 = 0;
        }
        v18 = v10 - v17;
        do
        {
          *(float *)(result + 4 * (v11 + v17)) = v14 * *(float *)(v15 + 4 * (v12 + v17));
          LODWORD(v17) = v17 + 1;
          --v18;
        }
        while (v18);
LABEL_4:
        ++v13;
        v12 += v10;
        v11 += v7;
      }
      while (v13 != v9);
    }
  }
  return result;
}

uint64_t sub_1BE63E108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &unk_1E77F0828;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = *(unsigned int *)(a1 + 136);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)(a2 + 128);
      v16 = *(_DWORD *)(a2 + 136);
      v17 = *(_QWORD *)(a1 + 128);
      v18 = v10 - 1;
      do
      {
        if (v10 >= 0x10)
        {
          v19 = 0;
          v21 = v16 * v14;
          v22 = __CFADD__(v7 * v14, v18);
          v23 = __CFADD__(v10 * v14, v18);
          if (!__CFADD__(v21, v18) && !v22 && !v23 && !((unint64_t)(v10 - 1) >> 32))
          {
            v19 = 0;
            v24 = result + 4 * (v7 * v14);
            if (v24 - (v17 + 4 * (unint64_t)(v10 * v14)) >= 0x20
              && v24 - (v15 + 4 * (unint64_t)v21) >= 0x20)
            {
              v25 = v11;
              v26 = v12;
              v27 = v13;
              v28 = v10 & 0xFFFFFFF8;
              do
              {
                v29 = (float32x4_t *)(v17 + 4 * v27);
                v30 = *v29;
                v31 = v29[1];
                v32 = (float32x4_t *)(v15 + 4 * v26);
                v33 = vaddq_f32(v30, *v32);
                v34 = vaddq_f32(v31, v32[1]);
                v35 = (float32x4_t *)(result + 4 * v25);
                *v35 = v33;
                v35[1] = v34;
                v27 += 8;
                v26 += 8;
                v25 += 8;
                v28 -= 8;
              }
              while (v28);
              v19 = v10 & 0xFFFFFFF8;
              if (v19 == v10)
                goto LABEL_8;
            }
          }
        }
        else
        {
          v19 = 0;
        }
        v20 = v10 - v19;
        do
        {
          *(float *)(result + 4 * (v11 + v19)) = *(float *)(v17 + 4 * (v13 + v19))
                                                               + *(float *)(v15 + 4 * (v12 + v19));
          LODWORD(v19) = v19 + 1;
          --v20;
        }
        while (v20);
LABEL_8:
        ++v14;
        v13 += v10;
        v12 += v16;
        v11 += v7;
      }
      while (v14 != v9);
    }
  }
  return result;
}

uint64_t sub_1BE63E2AC(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;

  v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    v3 = *(unsigned int *)(result + 136);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 128);
      v8 = *(_DWORD *)(a2 + 136);
      v9 = v3 - 1;
      v10 = *(_QWORD *)(result + 128);
      do
      {
        if (v3 >= 0xC)
        {
          v11 = 0;
          v13 = __CFADD__(v3 * v6, v9);
          v14 = __CFADD__(v8 * v6, v9);
          if (v13 || v14 || (unint64_t)(v3 - 1) >> 32)
            goto LABEL_6;
          v15 = 4 * (v3 * v6);
          v16 = 4 * (v8 * v6);
          if (v10 + v15 >= (unint64_t)(v7 + 4 * v3 + v16) || v7 + v16 >= (unint64_t)(v10 + 4 * v3 + v15))
          {
            v17 = v4;
            v18 = v5;
            v19 = v3 & 0xFFFFFFF8;
            do
            {
              v20 = (float32x4_t *)(v7 + 4 * v18);
              v21 = *v20;
              v22 = v20[1];
              v23 = (float32x4_t *)(v10 + 4 * v17);
              v24 = vaddq_f32(v22, v23[1]);
              *v23 = vaddq_f32(v21, *v23);
              v23[1] = v24;
              v18 += 8;
              v17 += 8;
              v19 -= 8;
            }
            while (v19);
            v11 = v3 & 0xFFFFFFF8;
            if (v11 == v3)
              goto LABEL_8;
            goto LABEL_6;
          }
        }
        v11 = 0;
LABEL_6:
        v12 = v3 - v11;
        do
        {
          *(float *)(v10 + 4 * (v4 + v11)) = *(float *)(v7 + 4 * (v5 + v11))
                                                           + *(float *)(v10 + 4 * (v4 + v11));
          LODWORD(v11) = v11 + 1;
          --v12;
        }
        while (v12);
LABEL_8:
        ++v6;
        v5 += v8;
        v4 += v3;
      }
      while (v6 != v2);
    }
  }
  return result;
}

uint64_t sub_1BE63E3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    MEMORY[0x1C3B812C8](v4, 0x1000C8052888210);
  v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  v6 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v6;
  memcpy(v6, *(const void **)(a2 + 128), 4 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

uint64_t sub_1BE63E458(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 128), a2, 4 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

BOOL sub_1BE63E48C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140)))
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 4 * (v3 * v2)) == 0;
  else
    return 0;
}

uint64_t sub_1BE63E4E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void characterCodes(NSString *a1@<X0>, _QWORD *a2@<X8>)
{
  NSString *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  _QWORD v40[5];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 (*v44)(__n128 *, __n128 *);
  void (*v45)(uint64_t);
  void *v46;
  void *__p;
  _BYTE *v48;
  char *v49;

  v3 = a1;
  v41 = 0;
  v42 = &v41;
  v43 = 0x4812000000;
  v44 = sub_1BE63E7F0;
  v45 = sub_1BE63E814;
  v46 = &unk_1BE94989A;
  __p = 0;
  v48 = 0;
  v49 = 0;
  v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  v15 = v9;
  v16 = __p;
  if (v9 <= (v49 - (_BYTE *)__p) >> 2)
    goto LABEL_13;
  if (v9 >> 62)
    sub_1BE61F930();
  v17 = v48;
  v18 = (char *)operator new(4 * v9);
  v19 = v17 - v16;
  v20 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
  v21 = v20;
  if (v17 != v16)
  {
    if ((unint64_t)(v19 - 4) < 0x2C)
    {
      v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v30 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v21 - 1) = v30;
        v21 -= 4;
      }
      while (v17 != v16);
      goto LABEL_11;
    }
    v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
    if (v17 - v18 - (v19 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_10;
    v22 = v19 >> 2;
    v23 = ((unint64_t)(v19 - 4) >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v17[-v24];
    v21 = &v20[-v24];
    v26 = &v18[4 * v22 - 16];
    v27 = (__int128 *)(v17 - 16);
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *v27;
      *((_OWORD *)v26 - 1) = *(v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 2;
      v28 -= 8;
    }
    while (v28);
    v17 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  __p = v21;
  v48 = v20;
  v49 = &v18[4 * v15];
  if (v16)
    operator delete(v16);
LABEL_13:
  v31 = objc_msgSend_length(v3, v10, v11, v12, v13, v14);
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = sub_1BE63E82C;
  v40[3] = &unk_1E77F2388;
  v40[4] = &v41;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v3, v32, 0, v31, (uint64_t)v40, v33);
  v34 = v42;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v36 = (_BYTE *)v34[6];
  v35 = (_BYTE *)v34[7];
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0)
      sub_1BE61F930();
    v38 = (char *)operator new(v35 - v36);
    *a2 = v38;
    v39 = &v38[4 * (v37 >> 2)];
    a2[2] = v39;
    memcpy(v38, v36, v37);
    a2[1] = v39;
  }
  _Block_object_dispose(&v41, 8);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }

}

void sub_1BE63E778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  uint64_t v22;
  void *v24;
  void *v25;

  v24 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v24;
    operator delete(v24);
    _Block_object_dispose(&a14, 8);
    v25 = __p;
    if (!__p)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    _Block_object_dispose(&a14, 8);
    v25 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a21 = (uint64_t)v25;
  operator delete(v25);

  _Unwind_Resume(a1);
}

__n128 sub_1BE63E7F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE63E814(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE63E82C(uint64_t a1, int a2)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (char *)v3[7];
  v4 = v3[8];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 4);
    goto LABEL_22;
  }
  v8 = (char *)v3[6];
  v9 = (v5 - v8) >> 2;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62)
    sub_1BE61F930();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 1 > v10)
    v10 = v11 >> 1;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
    v12 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 62)
      sub_1BE61F100();
    v13 = operator new(4 * v12);
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_DWORD *)(4 * v9);
  v15 = 0;
  *(_DWORD *)(4 * v9) = a2;
  v7 = 4 * v9 + 4;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v6 = &v5[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v20 = &v13[4 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v24 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  v3[6] = v14;
  v3[7] = v7;
  v3[8] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  v3[7] = v7;
}

void sub_1BE63EAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE63EE54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE63EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE63EF8C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE63EF9C(uint64_t a1)
{

}

void sub_1BE63EFA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 408), a2, a3, a4, a5, a6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1BE63EFDC(uint64_t a1, void *a2)
{
  const char *label;
  NSObject *v4;
  void (**v5)(void);
  _QWORD block[4];
  void (**v7)(void);

  v5 = a2;
  if (!a1)
    goto LABEL_7;
  label = dispatch_queue_get_label(0);
  if (!strcmp(label, "com.apple.CoreHandwriting.recognizerQueue") || (v4 = *(NSObject **)(a1 + 264)) == 0)
  {
    v5[2]();
LABEL_7:

    return;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE643490;
  block[3] = &unk_1E77F2400;
  v7 = v5;
  dispatch_sync(v4, block);

}

void sub_1BE63F09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE63F23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE63F250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE63F260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE63F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE63F36C(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_isInappropriateString_(*(void **)(a1[4] + 488), a2, a1[5], a4, a5, a6);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1BE63F470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BE63F49C(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t i;
  uint64_t v130;
  char *v131;
  NSString *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSString *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  NSString *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  NSString *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSString *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  void *v216;
  id v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  char *v223;
  char *v224;
  uint64_t v225;
  _BYTE v226[128];
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v218 = *(id *)(a1 + 40);
  if (v1)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4, v5, v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)(v1 + 384) && objc_msgSend_length(v218, v7, v8, v9, v10, v11))
    {
      v18 = objc_msgSend_length(v218, v13, v14, v15, v16, v17);
      v22 = objc_msgSend_codepointAtIndex_outRange_(v218, v19, v18 - 1, (uint64_t)&v225, v20, v21);
      VariantMap::VariantsForCode(*(VariantMap **)(v1 + 384), v22, &v223);
      if (objc_msgSend_shouldGenerateDigitLetterAlternatives(*(void **)(v1 + 456), v23, v24, v25, v26, v27))
      {
        v32 = v218;
        objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v33, (uint64_t)CFSTR("012olzOLZ"), v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByTrimmingCharactersInSet_(v32, v38, (uint64_t)v37, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v42, v43, (uint64_t)&stru_1E77F6F28, v44, v45, v46))
        {
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v47, v48, v49, v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v53, (uint64_t)v32, v54, v55, v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v58, (uint64_t)v32, v59, v60, v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = objc_msgSend_length(v62, v63, v64, v65, v66, v67);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v62, v69, (uint64_t)CFSTR("l"), (uint64_t)CFSTR("1"), 1, 0, v68);
          v75 = objc_msgSend_length(v57, v70, v71, v72, v73, v74);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v57, v76, (uint64_t)CFSTR("1"), (uint64_t)CFSTR("l"), 1, 0, v75);
          v82 = objc_msgSend_length(v62, v77, v78, v79, v80, v81);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v62, v83, (uint64_t)CFSTR("o"), (uint64_t)CFSTR("0"), 1, 0, v82);
          v89 = objc_msgSend_length(v57, v84, v85, v86, v87, v88);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v57, v90, (uint64_t)CFSTR("0"), (uint64_t)CFSTR("o"), 1, 0, v89);
          v96 = objc_msgSend_length(v62, v91, v92, v93, v94, v95);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v62, v97, (uint64_t)CFSTR("z"), (uint64_t)CFSTR("2"), 1, 0, v96);
          v103 = objc_msgSend_length(v57, v98, v99, v100, v101, v102);
          objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v57, v104, (uint64_t)CFSTR("2"), (uint64_t)CFSTR("z"), 1, 0, v103);
          objc_msgSend_addObject_(v52, v105, (uint64_t)v62, v106, v107, v108);
          objc_msgSend_lowercaseString(v57, v109, v110, v111, v112, v113);
          v114 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v52, v115, (uint64_t)v114, v116, v117, v118);

        }
        else
        {
          v52 = 0;
        }

        v221 = 0u;
        v222 = 0u;
        v219 = 0u;
        v220 = 0u;
        v120 = v52;
        v127 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v121, (uint64_t)&v219, (uint64_t)v226, 16, v122);
        if (v127)
        {
          v128 = *(_QWORD *)v220;
          do
          {
            for (i = 0; i != v127; ++i)
            {
              if (*(_QWORD *)v220 != v128)
                objc_enumerationMutation(v120);
              v130 = *(_QWORD *)(*((_QWORD *)&v219 + 1) + 8 * i);
              if ((objc_msgSend_isInappropriateString_(*(void **)(v1 + 488), v123, v130, v124, v125, v126) & 1) == 0)
                objc_msgSend_addObject_(v12, v123, v130, v124, v125, v126);
            }
            v127 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v123, (uint64_t)&v219, (uint64_t)v226, 16, v126);
          }
          while (v127);
        }

      }
      v131 = v224;
      if (v224 != v223)
      {
        objc_msgSend_substringToIndex_(v218, v28, v225, v29, v30, v31);
        v132 = (NSString *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_shouldEnforceGrammarOnTransliterations(*(void **)(v1 + 456), v133, v134, v135, v136, v137) & 1) != 0)
        {
          v143 = isMixedCaseString(v132);
          v149 = objc_msgSend_contentType(*(void **)(v1 + 456), v144, v145, v146, v147, v148);
          objc_msgSend_rootCursorForContentType_inNetwork_forFirstSegmentGroup_(CHPatternNetwork, v150, v149, *(_QWORD *)(v1 + 288), 0, v151);
          v152 = (void *)objc_claimAutoreleasedReturnValue();
          v155 = (void *)objc_msgSend_newCursorByAdvancingWithString_fromCursor_inNetwork_(CHPatternNetwork, v153, (uint64_t)v132, (uint64_t)v152, *(_QWORD *)(v1 + 288), v154);

          v161 = v223;
          if (v224 != v223)
          {
            v162 = 0;
            if (v155)
            {
              do
              {
                v178 = *(_DWORD *)&v161[4 * v162];
                v182 = (void *)objc_msgSend_newCursorByAdvancingWithSymbol_fromCursor_inNetwork_(CHPatternNetwork, v156, v178, (uint64_t)v155, *(_QWORD *)(v1 + 288), v160);
                if (v182)
                {
                  unicodeToNSString(v178, v156, v179, v180, v181, v160);
                  v183 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v184, (uint64_t)CFSTR("%@%@"), v185, v186, v187, v132, v183);
                  v188 = (NSString *)objc_claimAutoreleasedReturnValue();
                  v193 = v188;
                  if (((v143 & 1) != 0 || (isMixedCaseString(v188) & 1) == 0)
                    && (objc_msgSend_isInappropriateString_(*(void **)(v1 + 488), v189, (uint64_t)v193, v190, v191, v192) & 1) == 0)
                  {
                    objc_msgSend_addObject_(v12, v194, (uint64_t)v193, v195, v196, v197);
                  }

                }
                ++v162;
                v161 = v223;
              }
              while (v162 < (v224 - v223) >> 2);
            }
            else
            {
              do
              {
                unicodeToNSString(*(_DWORD *)&v161[4 * v162], v156, v157, v158, v159, v160);
                v163 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v164, (uint64_t)CFSTR("%@%@"), v165, v166, v167, v132, v163);
                v168 = (NSString *)objc_claimAutoreleasedReturnValue();
                v173 = v168;
                if (((v143 & 1) != 0 || (isMixedCaseString(v168) & 1) == 0)
                  && (objc_msgSend_isInappropriateString_(*(void **)(v1 + 488), v169, (uint64_t)v173, v170, v171, v172) & 1) == 0)
                {
                  objc_msgSend_addObject_(v12, v174, (uint64_t)v173, v175, v176, v177);
                }

                ++v162;
                v161 = v223;
              }
              while (v162 < (v224 - v223) >> 2);
            }
          }

        }
        else
        {
          v198 = v223;
          if (v224 != v223)
          {
            v199 = 0;
            do
            {
              unicodeToNSString(*(_DWORD *)&v198[4 * v199], v138, v139, v140, v141, v142);
              v200 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v201, (uint64_t)CFSTR("%@%@"), v202, v203, v204, v132, v200);
              v205 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend_isInappropriateString_(*(void **)(v1 + 488), v206, (uint64_t)v205, v207, v208, v209) & 1) == 0)
                objc_msgSend_addObject_(v12, v210, (uint64_t)v205, v211, v212, v213);

              ++v199;
              v198 = v223;
            }
            while (v199 < (v224 - v223) >> 2);
          }
        }

        v131 = v223;
      }
      v214 = v12;
      if (v131)
      {
        v224 = v131;
        operator delete(v131);
      }
    }
    else
    {
      v119 = v12;
    }

  }
  else
  {
    v12 = 0;
  }

  v215 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v216 = *(void **)(v215 + 40);
  *(_QWORD *)(v215 + 40) = v12;

}

void sub_1BE63FA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE63FBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isMainThread;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  int *v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int *v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  int *v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  void (*v170)(uint64_t);
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  id v194;
  id v195;
  __int128 buf;
  void (*v197)(uint64_t);
  void *v198;
  uint64_t v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 3221225472;
  v197 = sub_1BE643160;
  v198 = &unk_1E77F1F38;
  v199 = v2;
  sub_1BE63EFDC(v2, &buf);
  v3 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(*v3 + 224) = objc_msgSend_newRecognitionEngine(*(void **)(*(_QWORD *)(a1 + 32) + 456), v4, v5, v6, v7, v8);
  *(_QWORD *)(*v3 + 232) = objc_msgSend_newFreeFormEngine(*(void **)(*(_QWORD *)(a1 + 32) + 456), v9, v10, v11, v12, v13);
  v19 = objc_msgSend_newCornerDetector(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
  v20 = *(void **)(*(_QWORD *)(a1 + 32) + 240);
  *(_QWORD *)(*v3 + 240) = v19;

  isMainThread = objc_msgSend_isMainThread(MEMORY[0x1E0CB3978], v21, v22, v23, v24, v25);
  *(_QWORD *)(*v3 + 480) = objc_msgSend_newWordLanguageModelForRecognizer_async_synchronizationQueue_(*(void **)(*v3 + 456), v27, *v3, isMainThread, *(_QWORD *)(*v3 + 264), v28);
  v34 = objc_msgSend_newSpellChecker(*(void **)(*(_QWORD *)(a1 + 32) + 456), v29, v30, v31, v32, v33);
  v35 = *(void **)(*(_QWORD *)(a1 + 32) + 416);
  *(_QWORD *)(*v3 + 416) = v34;

  v36 = *(void **)(*(_QWORD *)(a1 + 32) + 456);
  v195 = 0;
  v41 = objc_msgSend_newStaticLexicon_(v36, v37, (uint64_t)&v195, v38, v39, v40);
  v46 = v195;
  *(_QWORD *)(*v3 + 472) = v41;
  if (v46)
  {
    if (qword_1EF568E88 == -1)
    {
      v47 = (id)qword_1EF568E20;
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v47 = (id)qword_1EF568E20;
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
    }
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v46;
    _os_log_impl(&dword_1BE607000, v47, OS_LOG_TYPE_ERROR, "Error loading the static lexicon: %@", (uint8_t *)&buf, 0xCu);
    goto LABEL_5;
  }
LABEL_6:
  v48 = *(void **)(*(_QWORD *)(a1 + 32) + 456);
  v194 = 0;
  v49 = objc_msgSend_newSecondaryStaticLexicon_(v48, v42, (uint64_t)&v194, v43, v44, v45);
  v54 = v194;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336) = v49;
  if (!v54)
    goto LABEL_11;
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v55 = (id)qword_1EF568E20;
    if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    goto LABEL_9;
  }
  v55 = (id)qword_1EF568E20;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
LABEL_9:
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v54;
    _os_log_impl(&dword_1BE607000, v55, OS_LOG_TYPE_ERROR, "Error loading the secondary static lexicon: %@", (uint8_t *)&buf, 0xCu);
  }
LABEL_10:

LABEL_11:
  v56 = *(void **)(*(_QWORD *)(a1 + 32) + 456);
  v193 = 0;
  v57 = objc_msgSend_newPhraseLexicon_(v56, v50, (uint64_t)&v193, v51, v52, v53);
  v63 = v193;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344) = v57;
  if (!v63)
    goto LABEL_16;
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v64 = (id)qword_1EF568E20;
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    goto LABEL_14;
  }
  v64 = (id)qword_1EF568E20;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
LABEL_14:
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v63;
    _os_log_impl(&dword_1BE607000, v64, OS_LOG_TYPE_ERROR, "Error loading the phrase lexicon: %@", (uint8_t *)&buf, 0xCu);
  }
LABEL_15:

LABEL_16:
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320) = objc_msgSend_newCJKStaticLexicon(*(void **)(*(_QWORD *)(a1 + 32) + 456), v58, v59, v60, v61, v62);
  v68 = objc_msgSend_newOVSStringCheckerWithStaticLexicon_customLexicon_(*(void **)(*(_QWORD *)(a1 + 32) + 456), v65, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 472), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352), v66, v67);
  v69 = *(_QWORD *)(a1 + 32);
  v70 = *(void **)(v69 + 488);
  *(_QWORD *)(v69 + 488) = v68;

  v76 = objc_msgSend_newPatternFST(*(void **)(*(_QWORD *)(a1 + 32) + 456), v71, v72, v73, v74, v75);
  v77 = *(_QWORD *)(a1 + 32);
  v78 = *(void **)(v77 + 288);
  *(_QWORD *)(v77 + 288) = v76;

  objc_msgSend_sharedPostProcessingFST(*(void **)(*(_QWORD *)(a1 + 32) + 456), v79, v80, v81, v82, v83);
  v84 = objc_claimAutoreleasedReturnValue();
  v85 = *(_QWORD *)(a1 + 32);
  v86 = *(void **)(v85 + 296);
  *(_QWORD *)(v85 + 296) = v84;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280) = objc_msgSend_newGrammarFST(*(void **)(*(_QWORD *)(a1 + 32) + 456), v87, v88, v89, v90, v91);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 272) = objc_msgSend_newRadicalClusterFST(*(void **)(*(_QWORD *)(a1 + 32) + 456), v92, v93, v94, v95, v96);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384) = objc_msgSend_newTransliterationVariantMap(*(void **)(*(_QWORD *)(a1 + 32) + 456), v97, v98, v99, v100, v101);
  v107 = *(_QWORD *)(a1 + 32);
  if (v107)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v102, v103, v104, v105, v106);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)(v107 + 384))
    {
      unicodeToNSString(9785, v108, v109, v110, v111, v112);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v113, v115, (uint64_t)v114, v116, v117, v118);

      VariantMap::VariantsForCode(*(VariantMap **)(v107 + 384), 9785, (char **)&buf);
      v125 = (int *)*((_QWORD *)&buf + 1);
      v124 = (int *)buf;
      if ((_QWORD)buf != *((_QWORD *)&buf + 1))
      {
        do
        {
          if (*v124 != 9785)
          {
            unicodeToNSString(*v124, v119, v120, v121, v122, v123);
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v113, v127, (uint64_t)v126, v128, v129, v130);

          }
          ++v124;
        }
        while (v124 != v125);
        v124 = (int *)buf;
      }
      if (v124)
      {
        *((_QWORD *)&buf + 1) = v124;
        operator delete(v124);
      }
      unicodeToNSString(9786, v119, v120, v121, v122, v123);
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v113, v132, (uint64_t)v131, v133, v134, v135);

      VariantMap::VariantsForCode(*(VariantMap **)(v107 + 384), 9786, (char **)&buf);
      v142 = (int *)*((_QWORD *)&buf + 1);
      v141 = (int *)buf;
      if ((_QWORD)buf != *((_QWORD *)&buf + 1))
      {
        do
        {
          if (*v141 != 9786)
          {
            unicodeToNSString(*v141, v136, v137, v138, v139, v140);
            v143 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v113, v144, (uint64_t)v143, v145, v146, v147);

          }
          ++v141;
        }
        while (v141 != v142);
        v141 = (int *)buf;
      }
      if (v141)
      {
        *((_QWORD *)&buf + 1) = v141;
        operator delete(v141);
      }
      unicodeToNSString(9825, v136, v137, v138, v139, v140);
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v113, v149, (uint64_t)v148, v150, v151, v152);

      VariantMap::VariantsForCode(*(VariantMap **)(v107 + 384), 9825, (char **)&buf);
      v159 = (int *)*((_QWORD *)&buf + 1);
      v158 = (int *)buf;
      if ((_QWORD)buf != *((_QWORD *)&buf + 1))
      {
        do
        {
          if (*v158 != 9825)
          {
            unicodeToNSString(*v158, v153, v154, v155, v156, v157);
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v113, v161, (uint64_t)v160, v162, v163, v164);

          }
          ++v158;
        }
        while (v158 != v159);
        v158 = (int *)buf;
      }
      if (v158)
      {
        *((_QWORD *)&buf + 1) = v158;
        operator delete(v158);
      }
    }
  }
  else
  {
    v113 = 0;
  }
  v165 = *(_QWORD *)(a1 + 32);
  v166 = *(void **)(v165 + 24);
  *(_QWORD *)(v165 + 24) = v113;

  *((_QWORD *)&buf + 1) = 0;
  v197 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  v167 = *(_QWORD *)(a1 + 32);
  v168 = v167 + 544;
  sub_1BE62033C(v167 + 536, *(_QWORD **)(v167 + 544));
  v169 = (_QWORD *)*((_QWORD *)&buf + 1);
  *(_QWORD *)(v167 + 536) = buf;
  *(_QWORD *)(v167 + 544) = v169;
  v170 = v197;
  *(_QWORD *)(v167 + 552) = v197;
  if (v170)
  {
    v169[2] = v168;
    *(_QWORD *)&buf = (char *)&buf + 8;
    *((_QWORD *)&buf + 1) = 0;
    v197 = 0;
    v169 = 0;
  }
  else
  {
    *(_QWORD *)(v167 + 536) = v168;
  }
  sub_1BE62033C((uint64_t)&buf, v169);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 312) = objc_msgSend_newCharacterLanguageModelAndMap_force_(*(void **)(*(_QWORD *)(a1 + 32) + 456), v171, *(_QWORD *)(a1 + 32) + 536, 0, v172, v173);
  v179 = objc_msgSend_newCTCRecognitionModel(*(void **)(*(_QWORD *)(a1 + 32) + 456), v174, v175, v176, v177, v178);
  v180 = *(_QWORD *)(a1 + 32);
  v181 = *(void **)(v180 + 248);
  *(_QWORD *)(v180 + 248) = v179;

  v187 = objc_msgSend_newMecabraWrapper(*(void **)(*(_QWORD *)(a1 + 32) + 456), v182, v183, v184, v185, v186);
  v188 = *(_QWORD *)(a1 + 32);
  v189 = *(void **)(v188 + 464);
  *(_QWORD *)(v188 + 464) = v187;

  v190 = *(_QWORD *)(a1 + 32);
  if (v190)
  {
    v191 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v197 = sub_1BE640540;
    v198 = &unk_1E77F1F38;
    v199 = v190;
    sub_1BE63EFDC(v190, &buf);
    v192 = *(_QWORD *)(a1 + 32);
    if (v192)
    {
      *(_QWORD *)&buf = v191;
      *((_QWORD *)&buf + 1) = 3221225472;
      v197 = sub_1BE6403AC;
      v198 = &unk_1E77F1F38;
      v199 = v192;
      sub_1BE63EFDC(v192, &buf);
    }
  }

}

void sub_1BE640324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE6403AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int shouldConvertKanaInPostProcessing;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 440);
  *(_QWORD *)(v2 + 440) = 0;

  shouldConvertKanaInPostProcessing = objc_msgSend_shouldConvertKanaInPostProcessing(*(void **)(*(_QWORD *)(a1 + 32) + 456), v4, v5, v6, v7, v8);
  v15 = *(_QWORD *)(a1 + 32);
  if (shouldConvertKanaInPostProcessing)
  {
    v16 = *(void **)(v15 + 464);
    v17 = objc_msgSend_mecabraInputMethodType(*(void **)(v15 + 456), v10, v11, v12, v13, v14);
    objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v16, v18, v17, *(_QWORD *)(v15 + 368), v19, v20);
    v15 = *(_QWORD *)(a1 + 32);
  }
  v43 = objc_msgSend_postProcessorLexiconWithStaticLexicon_secondaryLexicon_(*(void **)(v15 + 456), v10, *(_QWORD *)(v15 + 472), *(_QWORD *)(v15 + 336), v13, v14);
  v21 = *(_QWORD **)(a1 + 32);
  v41 = v21[43];
  v42 = v21[44];
  v23 = v21[53];
  v22 = v21[54];
  v24 = (void *)v21[57];
  v25 = v21[58];
  v27 = v21[60];
  v26 = v21[61];
  v28 = v21[52];
  v30 = v21[37];
  v29 = v21[38];
  v36 = objc_msgSend__effectiveMaxRecognitionResultCount(v21, v31, v32, v33, v34, v35);
  v38 = objc_msgSend_newPostProcessorWithStaticLexicon_customLexicon_phraseLexicon_customPhraseLexicon_textReplacements_postProcessingFST_wordLM_mecabraWrapper_ovsStringChecker_spellChecker_lmVocabulary_maxResultCount_(v24, v37, v43, v42, v41, v23, v22, v30, v27, v25, v26, v28, v29, v36);
  v39 = *(_QWORD *)(a1 + 32);
  v40 = *(void **)(v39 + 440);
  *(_QWORD *)(v39 + 440) = v38;

}

void sub_1BE6404F0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 448);
  *(_QWORD *)(v2 + 448) = 0;

  v6 = objc_msgSend_newMergedResultPostProcessorWithStaticLexicon_customLexicon_stringChecker_(*(void **)(*(_QWORD *)(a1 + 32) + 456), v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 472), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488), v5);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 448);
  *(_QWORD *)(v7 + 448) = v6;

}

void sub_1BE640540(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int shouldUseModernizedCTCDecoder;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  id v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  int v62;
  float v63;
  id v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;
  double v72;
  id v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  id v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned int v97;
  _QWORD *v98;
  _QWORD *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t *v156;
  char *v157;
  int64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  _OWORD *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  unint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  _BYTE *v177;
  unint64_t *v178;
  char *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  unint64_t v188;
  unint64_t *v189;
  int64_t v190;
  char *v191;
  char *v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  double *v232;
  void *v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  double *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  float v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  float v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  int64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  void *v319;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  float v331;
  const char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  const char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  const char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  float v349;
  char *v350;
  _QWORD *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  uint64_t *v359;
  char *v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  char *v366;
  uint64_t v367;
  __int128 v368;
  __int128 v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  int v382;
  int v383;
  unsigned int v384;
  int v386;
  char *v387;
  char *v388;
  char *v389;
  uint64_t v390;
  int v391;
  char *v392;
  char *v393;
  int64_t v394;
  char *v395;
  char *v396;
  uint64_t v397;
  char *v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  char *v405;
  uint64_t *v406;
  char *v407;
  uint64_t v408;
  int64_t v409;
  int64_t v410;
  char *v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  char *v419;
  int64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  char *v438;
  char *v439;
  uint64_t v440;
  __int128 v441;
  __int128 v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  const char *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  char *v462;
  char *v463;
  char *v464;
  int64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  char *v470;
  char *v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  const char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  void *v484;
  void *v485;
  const char *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  const char *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  float v497;
  float v498;
  uint64_t v499;
  char *v500;
  char *v501;
  char *v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  void *v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  const char *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  int64_t v524;
  char *v525;
  char *v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  char *v532;
  char *v533;
  void *v534;
  const void *v535;
  const void *v536;
  void *v537;
  const char *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  const char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  float v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  const char *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  void *v561;
  const char *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  float v567;
  const char *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  char *v573;
  uint64_t v574;
  char *v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  char *v581;
  uint64_t *v582;
  char *v583;
  int64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  char *v589;
  char *v590;
  uint64_t v591;
  __int128 v592;
  __int128 v593;
  uint64_t v594;
  char *v595;
  uint64_t v596;
  uint64_t v597;
  const void *v598;
  const void *v599;
  void *v600;
  const char *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  void *v606;
  const char *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  const void *v612;
  const void *v613;
  const char *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  void *v619;
  char *v620;
  uint64_t v621;
  _QWORD *v622;
  _QWORD *v623;
  const char *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  char *v630;
  int64_t v631;
  char *v632;
  char *v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  void *v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  void *v645;
  const char *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  float v651;
  const char *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  void *v657;
  const char *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  void *v663;
  const char *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  float v669;
  char *v670;
  uint64_t v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  char *v678;
  uint64_t *v679;
  char *v680;
  int64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v684;
  char *v685;
  char *v686;
  char *v687;
  uint64_t v688;
  __int128 v689;
  __int128 v690;
  uint64_t v691;
  char *v692;
  uint64_t v693;
  uint64_t v694;
  void *v695;
  int64_t v696;
  char *v697;
  char *v698;
  uint64_t v699;
  void **v700;
  _QWORD *v701;
  _QWORD *v702;
  void *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  void *v710;
  uint64_t v711;
  void *v712;
  _QWORD *v713;
  uint64_t v714;
  __int128 v715;
  __int128 v716;
  _QWORD *v717;
  void *v718;
  uint64_t v719;
  uint64_t v720;
  _QWORD *v721;
  _QWORD *v722;
  void *v723;
  uint64_t v724;
  uint64_t v725;
  double *v726;
  _QWORD *v727;
  uint64_t v728;
  char *v729;
  char v730;
  int v731;
  int v732;
  _BYTE *__src;
  uint64_t v734;
  void *v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  uint8_t buf[8];
  __int128 v740;
  __int128 v741;
  void *v742;
  __int128 v743;
  uint64_t (**v744)();
  char v745;
  __int128 v746;
  char *v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  uint64_t v751;
  char *v752;
  const void *v753;
  void *__p;
  char *v755;
  char *v756;
  char *v757;
  char *v758;
  uint64_t (**v759)();
  __int128 v760;
  void *v761;
  __int128 v762;
  uint64_t (**v763)();
  char v764;
  void *v765;
  char *v766;
  char *v767;
  unint64_t *v768;
  char *v769;
  unint64_t v770;
  char *v771;
  char *v772;
  char *v773;
  _BYTE v774[7];
  _BYTE v775[7];
  char *p_p;
  char *v777;
  char *v778;
  uint64_t v779[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 256);
  *(_QWORD *)(v2 + 256) = 0;

  shouldUseModernizedCTCDecoder = objc_msgSend_shouldUseModernizedCTCDecoder(*(void **)(*(_QWORD *)(a1 + 32) + 456), v4, v5, v6, v7, v8);
  v15 = *(_QWORD *)(a1 + 32);
  if (!shouldUseModernizedCTCDecoder)
  {
    v27 = objc_msgSend_newCTCTextDecoderWithStaticLexicon_customLexicon_wordLanguageModel_(*(void **)(v15 + 456), v10, *(_QWORD *)(v15 + 472), *(_QWORD *)(v15 + 352), *(_QWORD *)(v15 + 480), v14);
    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(void **)(v28 + 256);
    *(_QWORD *)(v28 + 256) = v27;

    return;
  }
  v16 = *(void **)(v15 + 248);
  if (v16)
  {
    if (objc_msgSend_codeMap(v16, v10, v11, v12, v13, v14))
      goto LABEL_4;
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v30 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_FAULT, "The recognition model must be loaded before the text decoder can be initialized", buf, 2u);
    }

    if (objc_msgSend_codeMap(*(void **)(*(_QWORD *)(a1 + 32) + 248), v31, v32, v33, v34, v35))
    {
LABEL_4:
      if (!objc_msgSend_codeMap(*(void **)(*(_QWORD *)(a1 + 32) + 248), v17, v18, v19, v20, v21))
        return;
LABEL_17:
      v42 = objc_msgSend__effectiveMaxRecognitionResultCount(*(void **)(a1 + 32), v22, v23, v24, v25, v26);
      v43 = *(_QWORD **)(a1 + 32);
      if (v43)
        v43 = (_QWORD *)v43[31];
      v44 = v43;
      v50 = objc_msgSend_blankIndex(v44, v45, v46, v47, v48, v49);

      if (2 * v42 <= 20)
        v51 = 20;
      else
        v51 = 2 * v42;
      if (v42 <= 3)
        v52 = 3;
      else
        v52 = v42;
      v53 = *(_QWORD *)(a1 + 32);
      if (v53)
      {
        v54 = *(id *)(v53 + 248);
        if (v54)
        {
          v60 = v54;
          objc_msgSend_decodingPruningPolicy(v54, v55, v56, v57, v58, v59);
          v61 = *(char **)buf;

          v53 = *(_QWORD *)(a1 + 32);
          if (v61 == (char *)1)
          {
            v62 = 0;
            v63 = 0.0;
            if (v53)
            {
              v64 = *(id *)(v53 + 248);
              if (v64)
              {
                v70 = v64;
                objc_msgSend_decodingPruningPolicy(v64, v65, v66, v67, v68, v69);
                v63 = *((float *)&v740 + 1);

              }
            }
            v71 = 0;
            v72 = v63;
LABEL_46:
            v771 = 0;
            v772 = 0;
            v773 = 0;
            v98 = *(_QWORD **)(a1 + 32);
            if (v98)
              v98 = (_QWORD *)v98[31];
            v99 = v98;
            v105 = *(unsigned int *)(objc_msgSend_codeMap(v99, v100, v101, v102, v103, v104) + 24);

            v736 = a1;
            v734 = v50;
            v731 = v52;
            v732 = v51;
            v730 = v71;
            if ((_DWORD)v105)
            {
              v106 = (char *)operator new(4 * v105);
              v107 = 0;
              v108 = &v106[4 * v105];
              v771 = v106;
              v772 = v106;
              v737 = -1;
              v773 = v108;
              v109 = v106;
              while (1)
              {
                v112 = *(_QWORD **)(v736 + 32);
                if (v112)
                  v112 = (_QWORD *)v112[31];
                v113 = v112;
                v119 = objc_msgSend_codeMap(v113, v114, v115, v116, v117, v118);
                v120 = (_DWORD *)CHCodeMap::operator[](v119, v107);
                v121 = v120;
                if (v109 >= v108)
                  break;
                *(_DWORD *)v109 = *v120;
                v110 = v109 + 4;
LABEL_51:
                v772 = v110;

                v111 = v737;
                if (*((_DWORD *)v110 - 1) == 57427)
                  v111 = v107;
                v737 = v111;
                ++v107;
                v109 = v110;
                if (v107 == v105)
                  goto LABEL_85;
              }
              v122 = (v109 - v106) >> 2;
              v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 62)
                sub_1BE61F930();
              if ((v108 - v106) >> 1 > v123)
                v123 = (v108 - v106) >> 1;
              if ((unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFFCLL)
                v124 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                if (v124 >> 62)
                  sub_1BE61F100();
                v125 = operator new(4 * v124);
                v126 = &v125[4 * v122];
                *(_DWORD *)v126 = *v121;
                v110 = v126 + 4;
                v127 = v109 - v106;
                if (v109 == v106)
                  goto LABEL_71;
              }
              else
              {
                v125 = 0;
                v126 = (char *)(4 * v122);
                *(_DWORD *)(4 * v122) = *v121;
                v110 = (char *)(4 * v122 + 4);
                v127 = v109 - v106;
                if (v109 == v106)
                  goto LABEL_71;
              }
              v128 = v127 - 4;
              if (v128 >= 0xBC)
              {
                v131 = (v109 - 4 - v106) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v125[v109 - v106 - 4 - v131] > &v125[v109 - v106 - 4])
                {
                  v129 = v109;
                }
                else if (&v109[-v131 - 4] > v109 - 4)
                {
                  v129 = v109;
                }
                else if ((unint64_t)(v106 - v125) >= 0x20)
                {
                  v132 = (v128 >> 2) + 1;
                  v133 = 4 * (v132 & 0x7FFFFFFFFFFFFFF8);
                  v129 = &v109[-v133];
                  v126 -= v133;
                  v134 = &v125[4 * v122 - 16];
                  v135 = v109 - 16;
                  v136 = v132 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v137 = *(_OWORD *)v135;
                    *(v134 - 1) = *((_OWORD *)v135 - 1);
                    *v134 = v137;
                    v134 -= 2;
                    v135 -= 32;
                    v136 -= 8;
                  }
                  while (v136);
                  if (v132 == (v132 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_71;
                }
                else
                {
                  v129 = v109;
                }
              }
              else
              {
                v129 = v109;
              }
              do
              {
                v130 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *((_DWORD *)v126 - 1) = v130;
                v126 -= 4;
              }
              while (v129 != v106);
LABEL_71:
              v108 = &v125[4 * v124];
              v771 = v126;
              v772 = v110;
              v773 = v108;
              if (v106)
                operator delete(v106);
              v106 = v126;
              goto LABEL_51;
            }
            v110 = 0;
            v737 = -1;
LABEL_85:
            v768 = 0;
            v769 = 0;
            v770 = 0;
            v138 = v736;
            v139 = *(_QWORD **)(v736 + 32);
            if (v139)
              v139 = (_QWORD *)v139[31];
            v140 = v139;
            v146 = objc_msgSend_spaceIndex(v140, v141, v142, v143, v144, v145);
            v147 = v146;
            v148 = v769;
            if ((unint64_t)v769 < v770)
            {
              *(_QWORD *)v769 = v146;
              v149 = (uint64_t)(v148 + 8);
              goto LABEL_108;
            }
            v150 = (char *)v768;
            v151 = (v769 - (char *)v768) >> 3;
            v152 = v151 + 1;
            if ((unint64_t)(v151 + 1) >> 61)
              sub_1BE61F930();
            v153 = v770 - (_QWORD)v768;
            if ((uint64_t)(v770 - (_QWORD)v768) >> 2 > v152)
              v152 = v153 >> 2;
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
              v154 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v154 = v152;
            if (v154)
            {
              if (v154 >> 61)
                sub_1BE61F100();
              v155 = operator new(8 * v154);
              v156 = (uint64_t *)&v155[8 * v151];
              v157 = &v155[8 * v154];
              *v156 = v147;
              v149 = (uint64_t)(v156 + 1);
              v158 = v148 - v150;
              if (v148 == v150)
                goto LABEL_106;
            }
            else
            {
              v155 = 0;
              v156 = (uint64_t *)(8 * v151);
              v157 = 0;
              *(_QWORD *)(8 * v151) = v147;
              v149 = 8 * v151 + 8;
              v158 = v148 - v150;
              if (v148 == v150)
              {
LABEL_106:
                v768 = (unint64_t *)v156;
                v769 = (char *)v149;
                v770 = (unint64_t)v157;
                if (v150)
                  operator delete(v150);
LABEL_108:
                v769 = (char *)v149;

                v170 = v769;
                if (v737 < (v110 - v771) >> 2)
                {
                  if ((unint64_t)v769 >= v770)
                  {
                    v172 = v768;
                    v173 = (v769 - (char *)v768) >> 3;
                    v174 = v173 + 1;
                    if ((unint64_t)(v173 + 1) >> 61)
                      sub_1BE61F930();
                    v175 = v770 - (_QWORD)v768;
                    if ((uint64_t)(v770 - (_QWORD)v768) >> 2 > v174)
                      v174 = v175 >> 2;
                    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8)
                      v176 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v176 = v174;
                    if (v176)
                    {
                      if (v176 >> 61)
                        sub_1BE61F100();
                      v177 = operator new(8 * v176);
                    }
                    else
                    {
                      v177 = 0;
                    }
                    v178 = (unint64_t *)&v177[8 * v173];
                    v179 = &v177[8 * v176];
                    *v178 = v737;
                    v171 = (char *)(v178 + 1);
                    if (v170 != (char *)v172)
                    {
                      v180 = v170 - (char *)v172 - 8;
                      if (v180 < 0x58)
                        goto LABEL_531;
                      if ((unint64_t)((char *)v172 - v177) < 0x20)
                        goto LABEL_531;
                      v181 = (v180 >> 3) + 1;
                      v182 = 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
                      v183 = &v170[-v182];
                      v178 = (unint64_t *)((char *)v178 - v182);
                      v184 = &v177[8 * v173 - 16];
                      v185 = v170 - 16;
                      v186 = v181 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v187 = *(_OWORD *)v185;
                        *(v184 - 1) = *((_OWORD *)v185 - 1);
                        *v184 = v187;
                        v184 -= 2;
                        v185 -= 32;
                        v186 -= 4;
                      }
                      while (v186);
                      v170 = v183;
                      if (v181 != (v181 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_531:
                        do
                        {
                          v188 = *((_QWORD *)v170 - 1);
                          v170 -= 8;
                          *--v178 = v188;
                        }
                        while (v170 != (char *)v172);
                      }
                    }
                    v768 = v178;
                    v769 = v171;
                    v770 = (unint64_t)v179;
                    if (v172)
                      operator delete(v172);
                  }
                  else
                  {
                    *(_QWORD *)v769 = v737;
                    v171 = v170 + 8;
                  }
                  v769 = v171;
                  v170 = v171;
                }
                v764 = 1;
                v763 = &off_1E77F1118;
                v766 = 0;
                v767 = 0;
                v765 = 0;
                v189 = v768;
                v190 = v170 - (char *)v768;
                if (v190)
                {
                  if (v190 < 0)
                    sub_1BE61F930();
                  v191 = (char *)operator new(v190);
                  v192 = &v191[8 * (v190 >> 3)];
                  v765 = v191;
                  v767 = v192;
                  __src = v191;
                  memcpy(v191, v189, v190);
                  v729 = v192;
                  v766 = v192;
                }
                else
                {
                  v729 = 0;
                  __src = 0;
                }
                v760 = xmmword_1BE8D52C0;
                v759 = &off_1E77F1160;
                v761 = 0;
                v762 = 0uLL;
                objc_msgSend_languageResourceBundleWithStaticLexicon_customLexicon_wordLanguageModel_(*(void **)(*(_QWORD *)(v736 + 32) + 456), v168, *(_QWORD *)(*(_QWORD *)(v736 + 32) + 472), *(_QWORD *)(*(_QWORD *)(v736 + 32) + 352), *(_QWORD *)(*(_QWORD *)(v736 + 32) + 480), v169);
                v193 = (void *)objc_claimAutoreleasedReturnValue();
                v735 = v193;
                objc_msgSend_characterLanguageModel(v193, v194, v195, v196, v197, v198);
                v199 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v199)
                  goto LABEL_217;
                objc_msgSend_characterLanguageModel(v193, v200, v201, v202, v203, v204);
                v205 = (void *)objc_claimAutoreleasedReturnValue();
                v211 = objc_msgSend_lmSPIType(v205, v206, v207, v208, v209, v210);

                if (v211 == 2)
                {
                  objc_msgSend_characterLanguageModel(v193, v212, v213, v214, v215, v216);
                  v217 = (void *)objc_claimAutoreleasedReturnValue();
                  v223 = (char *)objc_msgSend_languageModel(v217, v218, v219, v220, v221, v222);
                  v224 = v223;
                  if (v223)
                    CFRetain(v223);
                  *(_QWORD *)buf = v224;

                  v225 = operator new();
                  v231 = v225;
                  if (v224)
                  {
                    CFRetain(v224);
                    v758 = v224;
                    *(_OWORD *)(v231 + 8) = xmmword_1BE8D52C0;
                    v232 = (double *)(v231 + 8);
                    *(_QWORD *)v231 = &off_1E77F1060;
                    CFRetain(v224);
                  }
                  else
                  {
                    v758 = 0;
                    *(_OWORD *)(v225 + 8) = xmmword_1BE8D52C0;
                    v232 = (double *)(v225 + 8);
                    *(_QWORD *)v225 = &off_1E77F1060;
                  }
                  *(_QWORD *)(v231 + 24) = v224;
                  *(_QWORD *)(v231 + 32) = 0;
                  *(_QWORD *)(v231 + 40) = 0;
                  *(_QWORD *)(v231 + 48) = 0;
                  v255 = v771;
                  v256 = v110 - v771;
                  if (v110 != v771)
                  {
                    if (v256 < 0)
                      sub_1BE61F930();
                    v257 = (char *)operator new(v110 - v771);
                    *(_QWORD *)(v231 + 32) = v257;
                    *(_QWORD *)(v231 + 40) = v257;
                    v258 = &v257[4 * (v256 >> 2)];
                    *(_QWORD *)(v231 + 48) = v258;
                    memcpy(v257, v255, v110 - v255);
                    *(_QWORD *)(v231 + 40) = v258;
                  }
                  *(_QWORD *)(v231 + 56) = v737;
                  if (v224)
                    CFRelease(v224);
                  objc_msgSend_characterLanguageModel(v735, v226, v227, v228, v229, v230);
                  v259 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_decodingWeight(v259, v260, v261, v262, v263, v264);
                  v265 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_floatValue(v265, v266, v267, v268, v269, v270);
                  *v232 = v271;

                  objc_msgSend_characterLanguageModel(v735, v272, v273, v274, v275, v276);
                  v277 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_lowerBoundLogProbability(v277, v278, v279, v280, v281, v282);
                  v283 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_floatValue(v283, v284, v285, v286, v287, v288);
                  *(double *)(v231 + 16) = v289;

                  v290 = (char *)v762;
                  if ((unint64_t)v762 < *((_QWORD *)&v762 + 1))
                  {
                    *(_QWORD *)v762 = v231;
                    v291 = (uint64_t)(v290 + 8);
                    v193 = v735;
                    goto LABEL_197;
                  }
                  v292 = (char *)v761;
                  v293 = v762 - (_QWORD)v761;
                  v294 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                  v295 = v294 + 1;
                  if ((unint64_t)(v294 + 1) >> 61)
                    sub_1BE61F930();
                  v296 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                  if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v295)
                    v295 = v296 >> 2;
                  if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8)
                    v297 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v297 = v295;
                  if (v297)
                  {
                    if (v297 >> 61)
                      sub_1BE61F100();
                    v298 = (char *)operator new(8 * v297);
                    v299 = &v298[8 * v294];
                    v300 = &v298[8 * v297];
                    *(_QWORD *)v299 = v231;
                    v291 = (uint64_t)(v299 + 8);
                    v301 = v290 - v292;
                    if (v290 != v292)
                      goto LABEL_163;
                  }
                  else
                  {
                    v298 = 0;
                    v299 = (char *)(8 * v294);
                    v300 = 0;
                    *(_QWORD *)(8 * v294) = v231;
                    v291 = 8 * v294 + 8;
                    v301 = v290 - v292;
                    if (v290 != v292)
                    {
LABEL_163:
                      v302 = v301 - 8;
                      v193 = v735;
                      if (v302 < 0x78
                        || &v290[-(v302 & 0xFFFFFFFFFFFFFFF8) - 8] < v299
                        && &v298[v293 - (v302 & 0xFFFFFFFFFFFFFFF8) - 8] < v290)
                      {
                        goto LABEL_532;
                      }
                      v303 = (v302 >> 3) + 1;
                      v304 = 8 * (v303 & 0x3FFFFFFFFFFFFFFCLL);
                      v299 -= v304;
                      v305 = &v290[-v304];
                      v306 = v290 - 16;
                      v307 = &v298[8 * v294 - 16];
                      v308 = v303 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v310 = *((_OWORD *)v306 - 1);
                        v309 = *(_OWORD *)v306;
                        *((_OWORD *)v306 - 1) = 0uLL;
                        *(_OWORD *)v306 = 0uLL;
                        *((_OWORD *)v307 - 1) = v310;
                        *(_OWORD *)v307 = v309;
                        v306 -= 32;
                        v307 -= 32;
                        v308 -= 4;
                      }
                      while (v308);
                      v290 = v305;
                      if (v303 != (v303 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_532:
                        do
                        {
                          v311 = *((_QWORD *)v290 - 1);
                          v290 -= 8;
                          *(_QWORD *)v290 = 0;
                          *((_QWORD *)v299 - 1) = v311;
                          v299 -= 8;
                        }
                        while (v290 != v292);
                      }
                      v290 = (char *)v761;
                      v312 = (char *)v762;
                      v761 = v299;
                      *(_QWORD *)&v762 = v291;
                      *((_QWORD *)&v762 + 1) = v300;
                      while (v312 != v290)
                      {
                        v314 = *((_QWORD *)v312 - 1);
                        v312 -= 8;
                        v313 = v314;
                        *(_QWORD *)v312 = 0;
                        if (v314)
                          (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
                      }
                      goto LABEL_195;
                    }
                  }
                  v761 = v299;
                  *(_QWORD *)&v762 = v291;
                  *((_QWORD *)&v762 + 1) = v300;
                  v193 = v735;
LABEL_195:
                  if (v290)
                    operator delete(v290);
LABEL_197:
                  *(_QWORD *)&v762 = v291;
                  if (!v224)
                    goto LABEL_217;
                  goto LABEL_216;
                }
                objc_msgSend_characterLanguageModel(v193, v212, v213, v214, v215, v216);
                v233 = (void *)objc_claimAutoreleasedReturnValue();
                v239 = objc_msgSend_lmSPIType(v233, v234, v235, v236, v237, v238);

                if (v239 != 1)
                  goto LABEL_217;
                objc_msgSend_characterLanguageModel(v193, v200, v201, v202, v203, v204);
                v240 = (void *)objc_claimAutoreleasedReturnValue();
                v246 = (char *)objc_msgSend_languageModel(v240, v241, v242, v243, v244, v245);
                v224 = v246;
                if (v246)
                  CFRetain(v246);
                p_p = v224;

                v247 = operator new();
                v253 = v247;
                if (v224)
                {
                  CFRetain(v224);
                  v757 = v224;
                  CFRetain(v224);
                  *(_QWORD *)buf = v224;
                  *(_OWORD *)(v253 + 8) = xmmword_1BE8D52C0;
                  v254 = (double *)(v253 + 8);
                  *(_QWORD *)v253 = &off_1E77F10A8;
                  CFRetain(v224);
                }
                else
                {
                  v757 = 0;
                  *(_QWORD *)buf = 0;
                  *(_OWORD *)(v247 + 8) = xmmword_1BE8D52C0;
                  v254 = (double *)(v247 + 8);
                  *(_QWORD *)v247 = &off_1E77F10A8;
                }
                *(_QWORD *)(v253 + 24) = v224;
                *(_QWORD *)(v253 + 32) = 0;
                *(_QWORD *)(v253 + 40) = 0;
                *(_QWORD *)(v253 + 48) = 0;
                v315 = v771;
                v316 = v110 - v771;
                if (v110 == v771)
                {
                  *(_DWORD *)(v253 + 56) = 5;
                  *(_QWORD *)(v253 + 64) = v737;
                  *(_DWORD *)(v253 + 72) = 1065353216;
                  if (v224)
                  {
LABEL_180:
                    CFRelease(v224);
                    CFRelease(v224);
                  }
                }
                else
                {
                  if (v316 < 0)
                    sub_1BE61F930();
                  v726 = v254;
                  v317 = operator new(v110 - v771);
                  *(_QWORD *)(v253 + 32) = v317;
                  *(_QWORD *)(v253 + 40) = v317;
                  v318 = v316 >> 2;
                  *(_QWORD *)(v253 + 48) = &v317[v318];
                  memcpy(v317, v315, v110 - v315);
                  *(_QWORD *)(v253 + 40) = &v317[v318];
                  *(_DWORD *)(v253 + 56) = 5;
                  *(_QWORD *)(v253 + 64) = v737;
                  *(_DWORD *)(v253 + 72) = 1065353216;
                  do
                  {
                    *v317++ = CVNLPNormalizeCodepointForCharLM();
                    --v318;
                  }
                  while (v318 * 4);
                  if (v224)
                    goto LABEL_180;
                }
                objc_msgSend_characterLanguageModel(v193, v248, v249, v250, v251, v252, v726);
                v319 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_decodingWeight(v319, v320, v321, v322, v323, v324);
                v325 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_floatValue(v325, v326, v327, v328, v329, v330);
                *v254 = v331;

                objc_msgSend_characterLanguageModel(v193, v332, v333, v334, v335, v336);
                v337 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_lowerBoundLogProbability(v337, v338, v339, v340, v341, v342);
                v343 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_floatValue(v343, v344, v345, v346, v347, v348);
                *(double *)(v253 + 16) = v349;

                v350 = (char *)v762;
                if ((unint64_t)v762 >= *((_QWORD *)&v762 + 1))
                {
                  v352 = (char *)v761;
                  v353 = v762 - (_QWORD)v761;
                  v354 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                  v355 = v354 + 1;
                  if ((unint64_t)(v354 + 1) >> 61)
                    sub_1BE61F930();
                  v356 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                  if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v355)
                    v355 = v356 >> 2;
                  if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8)
                    v357 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v357 = v355;
                  if (v357)
                  {
                    if (v357 >> 61)
                      sub_1BE61F100();
                    v358 = (char *)operator new(8 * v357);
                  }
                  else
                  {
                    v358 = 0;
                  }
                  v359 = (uint64_t *)&v358[8 * v354];
                  v360 = &v358[8 * v357];
                  *v359 = v253;
                  v351 = v359 + 1;
                  if (v350 == v352)
                  {
                    v761 = &v358[8 * v354];
                    *(_QWORD *)&v762 = v359 + 1;
                    *((_QWORD *)&v762 + 1) = v360;
                    v138 = v736;
                  }
                  else
                  {
                    v361 = v350 - v352 - 8;
                    v138 = v736;
                    if (v361 < 0x78
                      || &v350[-(v361 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v359
                      && &v358[v353 - (v361 & 0xFFFFFFFFFFFFFFF8) - 8] < v350)
                    {
                      goto LABEL_533;
                    }
                    v362 = (v361 >> 3) + 1;
                    v363 = 8 * (v362 & 0x3FFFFFFFFFFFFFFCLL);
                    v359 = (uint64_t *)((char *)v359 - v363);
                    v364 = &v350[-v363];
                    v365 = v350 - 16;
                    v366 = &v358[8 * v354 - 16];
                    v367 = v362 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v369 = *((_OWORD *)v365 - 1);
                      v368 = *(_OWORD *)v365;
                      *((_OWORD *)v365 - 1) = 0uLL;
                      *(_OWORD *)v365 = 0uLL;
                      *((_OWORD *)v366 - 1) = v369;
                      *(_OWORD *)v366 = v368;
                      v365 -= 32;
                      v366 -= 32;
                      v367 -= 4;
                    }
                    while (v367);
                    v350 = v364;
                    if (v362 != (v362 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_533:
                      do
                      {
                        v370 = *((_QWORD *)v350 - 1);
                        v350 -= 8;
                        *(_QWORD *)v350 = 0;
                        *--v359 = v370;
                      }
                      while (v350 != v352);
                    }
                    v350 = (char *)v761;
                    v371 = (char *)v762;
                    v761 = v359;
                    *(_QWORD *)&v762 = v351;
                    *((_QWORD *)&v762 + 1) = v360;
                    while (v371 != v350)
                    {
                      v373 = *((_QWORD *)v371 - 1);
                      v371 -= 8;
                      v372 = v373;
                      *(_QWORD *)v371 = 0;
                      if (v373)
                        (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
                    }
                  }
                  if (v350)
                    operator delete(v350);
                }
                else
                {
                  *(_QWORD *)v762 = v253;
                  v351 = v350 + 8;
                  v138 = v736;
                }
                *(_QWORD *)&v762 = v351;
                if (v224)
LABEL_216:
                  CFRelease(v224);
LABEL_217:
                v374 = objc_msgSend_mixedScriptPenalty(*(void **)(*(_QWORD *)(v138 + 32) + 456), v200, v201, v202, v203, v204);
                if (v374 != 1)
                {
                  if (v374 != 2)
                    goto LABEL_309;
                  v380 = v771;
                  p_p = 0;
                  v777 = 0;
                  v778 = 0;
                  v381 = v110 - v771;
                  if (v110 == v771)
                  {
                    v387 = 0;
                    v388 = 0;
                  }
                  else
                  {
                    if (v381 < 0)
                      sub_1BE61F930();
                    p_p = (char *)operator new(v110 - v771);
                    v777 = p_p;
                    v778 = &p_p[4 * (v381 >> 2)];
                    v779[0] = (uint64_t)&p_p;
                    do
                    {
                      v382 = *(unsigned __int16 *)v380;
                      if ((v382 - 48) >= 0xA)
                      {
                        if ((v382 - 1632) >= 0xA)
                        {
                          v383 = 2;
                          if ((v382 - 42) >= 6 && (v382 - 1642) >= 4)
                          {
                            v384 = v382 - 1548;
                            if ((v382 - 151) >= 0x8C && (v382 - 101) >= 0x2C)
                              v386 = 4;
                            else
                              v386 = 3;
                            if (v384 >= 2)
                              v383 = v386;
                            else
                              v383 = 2;
                          }
                        }
                        else
                        {
                          v383 = 1;
                        }
                      }
                      else
                      {
                        v383 = 0;
                      }
                      sub_1BE66E3D8(v779, v383);
                      v380 += 4;
                    }
                    while (v380 != v110);
                    v388 = p_p;
                    v387 = v777;
                  }
                  v740 = xmmword_1BE8D52C0;
                  *(_QWORD *)buf = off_1E77F11A8;
                  v742 = 0;
                  v741 = 0uLL;
                  v394 = v387 - v388;
                  if (v387 == v388)
                  {
                    v396 = 0;
                    v395 = 0;
                    if (v388)
                    {
LABEL_248:
                      v777 = v388;
                      operator delete(v388);
                    }
                  }
                  else
                  {
                    if (v394 < 0)
                      sub_1BE61F930();
                    v395 = (char *)operator new(v387 - v388);
                    v396 = &v395[4 * (v394 >> 2)];
                    memcpy(v395, v388, v394);
                    if (v388)
                      goto LABEL_248;
                  }
                  v397 = operator new();
                  *(_OWORD *)(v397 + 8) = v740;
                  *(_QWORD *)(v397 + 24) = v395;
                  *(_QWORD *)(v397 + 32) = v396;
                  *(_QWORD *)(v397 + 40) = v396;
                  *(_QWORD *)(v397 + 48) = 0xC08F400000000000;
                  *(_QWORD *)v397 = &off_1E77F1250;
                  v398 = (char *)v762;
                  if ((unint64_t)v762 >= *((_QWORD *)&v762 + 1))
                  {
                    v399 = (char *)v761;
                    v400 = v762 - (_QWORD)v761;
                    v401 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                    v402 = v401 + 1;
                    if ((unint64_t)(v401 + 1) >> 61)
                      sub_1BE61F930();
                    v403 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                    if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v402)
                      v402 = v403 >> 2;
                    if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFF8)
                      v404 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v404 = v402;
                    if (v404)
                    {
                      if (v404 >> 61)
                        sub_1BE61F100();
                      v405 = (char *)operator new(8 * v404);
                      v406 = (uint64_t *)&v405[8 * v401];
                      v407 = &v405[8 * v404];
                      *v406 = v397;
                      v408 = (uint64_t)(v406 + 1);
                      v409 = v398 - v399;
                      if (v398 == v399)
                        goto LABEL_305;
LABEL_282:
                      v421 = v409 - 8;
                      if (v421 < 0x78
                        || &v398[-(v421 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v406
                        && &v405[v400 - (v421 & 0xFFFFFFFFFFFFFFF8) - 8] < v398)
                      {
                        goto LABEL_534;
                      }
                      v422 = (v421 >> 3) + 1;
                      v423 = 8 * (v422 & 0x3FFFFFFFFFFFFFFCLL);
                      v406 = (uint64_t *)((char *)v406 - v423);
                      v424 = &v398[-v423];
                      v425 = v398 - 16;
                      v426 = &v405[8 * v401 - 16];
                      v427 = v422 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v429 = *((_OWORD *)v425 - 1);
                        v428 = *(_OWORD *)v425;
                        *((_OWORD *)v425 - 1) = 0uLL;
                        *(_OWORD *)v425 = 0uLL;
                        *((_OWORD *)v426 - 1) = v429;
                        *(_OWORD *)v426 = v428;
                        v425 -= 32;
                        v426 -= 32;
                        v427 -= 4;
                      }
                      while (v427);
                      v398 = v424;
                      if (v422 != (v422 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_534:
                        do
                        {
                          v430 = *((_QWORD *)v398 - 1);
                          v398 -= 8;
                          *(_QWORD *)v398 = 0;
                          *--v406 = v430;
                        }
                        while (v398 != v399);
                      }
                      v398 = (char *)v761;
                      v431 = (char *)v762;
                      v761 = v406;
                      *(_QWORD *)&v762 = v408;
                      *((_QWORD *)&v762 + 1) = v407;
                      while (v431 != v398)
                      {
                        v433 = *((_QWORD *)v431 - 1);
                        v431 -= 8;
                        v432 = v433;
                        *(_QWORD *)v431 = 0;
                        if (v433)
                          (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
                      }
                      goto LABEL_306;
                    }
                    v405 = 0;
                    v406 = (uint64_t *)(8 * v401);
                    v407 = 0;
                    *(_QWORD *)(8 * v401) = v397;
                    v408 = 8 * v401 + 8;
                    v409 = v398 - v399;
                    if (v398 != v399)
                      goto LABEL_282;
LABEL_305:
                    v761 = v406;
                    *(_QWORD *)&v762 = v408;
                    *((_QWORD *)&v762 + 1) = v407;
LABEL_306:
                    if (v398)
                      operator delete(v398);
                    goto LABEL_308;
                  }
                  goto LABEL_266;
                }
                v389 = v771;
                p_p = 0;
                v777 = 0;
                v778 = 0;
                v390 = v110 - v771;
                if (v110 == v771)
                {
                  v392 = 0;
                  v393 = 0;
                }
                else
                {
                  if (v390 < 0)
                    sub_1BE61F930();
                  p_p = (char *)operator new(v110 - v771);
                  v777 = p_p;
                  v778 = &p_p[4 * (v390 >> 2)];
                  v779[0] = (uint64_t)&p_p;
                  do
                  {
                    v391 = CVNLPCodepointToScriptCode();
                    sub_1BE66E3D8(v779, v391);
                    v389 += 4;
                  }
                  while (v389 != v110);
                  v393 = p_p;
                  v392 = v777;
                }
                v740 = xmmword_1BE8D52C0;
                *(_QWORD *)buf = off_1E77F11A8;
                v742 = 0;
                v741 = 0uLL;
                v410 = v392 - v393;
                if (v392 == v393)
                {
                  v412 = 0;
                  v411 = 0;
                  if (v393)
                  {
LABEL_264:
                    v777 = v393;
                    operator delete(v393);
                  }
                }
                else
                {
                  if (v410 < 0)
                    sub_1BE61F930();
                  v411 = (char *)operator new(v392 - v393);
                  v412 = &v411[4 * (v410 >> 2)];
                  memcpy(v411, v393, v410);
                  if (v393)
                    goto LABEL_264;
                }
                v397 = operator new();
                *(_OWORD *)(v397 + 8) = v740;
                *(_QWORD *)(v397 + 24) = v411;
                *(_QWORD *)(v397 + 32) = v412;
                *(_QWORD *)(v397 + 40) = v412;
                *(_QWORD *)(v397 + 48) = 0xC08F400000000000;
                *(_QWORD *)v397 = &off_1E77F12B0;
                v398 = (char *)v762;
                if ((unint64_t)v762 >= *((_QWORD *)&v762 + 1))
                {
                  v413 = (char *)v761;
                  v414 = v762 - (_QWORD)v761;
                  v415 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                  v416 = v415 + 1;
                  if ((unint64_t)(v415 + 1) >> 61)
                    sub_1BE61F930();
                  v417 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                  if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v416)
                    v416 = v417 >> 2;
                  if ((unint64_t)v417 >= 0x7FFFFFFFFFFFFFF8)
                    v418 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v418 = v416;
                  if (v418)
                  {
                    if (v418 >> 61)
                      sub_1BE61F100();
                    v419 = (char *)operator new(8 * v418);
                    v406 = (uint64_t *)&v419[8 * v415];
                    v407 = &v419[8 * v418];
                    *v406 = v397;
                    v408 = (uint64_t)(v406 + 1);
                    v420 = v398 - v413;
                    if (v398 == v413)
                      goto LABEL_305;
                  }
                  else
                  {
                    v419 = 0;
                    v406 = (uint64_t *)(8 * v415);
                    v407 = 0;
                    *(_QWORD *)(8 * v415) = v397;
                    v408 = 8 * v415 + 8;
                    v420 = v398 - v413;
                    if (v398 == v413)
                      goto LABEL_305;
                  }
                  v434 = v420 - 8;
                  if (v434 < 0x78
                    || &v398[-(v434 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v406
                    && &v419[v414 - (v434 & 0xFFFFFFFFFFFFFFF8) - 8] < v398)
                  {
                    goto LABEL_535;
                  }
                  v435 = (v434 >> 3) + 1;
                  v436 = 8 * (v435 & 0x3FFFFFFFFFFFFFFCLL);
                  v406 = (uint64_t *)((char *)v406 - v436);
                  v437 = &v398[-v436];
                  v438 = v398 - 16;
                  v439 = &v419[8 * v415 - 16];
                  v440 = v435 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v442 = *((_OWORD *)v438 - 1);
                    v441 = *(_OWORD *)v438;
                    *((_OWORD *)v438 - 1) = 0uLL;
                    *(_OWORD *)v438 = 0uLL;
                    *((_OWORD *)v439 - 1) = v442;
                    *(_OWORD *)v439 = v441;
                    v438 -= 32;
                    v439 -= 32;
                    v440 -= 4;
                  }
                  while (v440);
                  v398 = v437;
                  if (v435 != (v435 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_535:
                    do
                    {
                      v443 = *((_QWORD *)v398 - 1);
                      v398 -= 8;
                      *(_QWORD *)v398 = 0;
                      *--v406 = v443;
                    }
                    while (v398 != v413);
                  }
                  v398 = (char *)v761;
                  v444 = (char *)v762;
                  v761 = v406;
                  *(_QWORD *)&v762 = v408;
                  *((_QWORD *)&v762 + 1) = v407;
                  while (v444 != v398)
                  {
                    v446 = *((_QWORD *)v444 - 1);
                    v444 -= 8;
                    v445 = v446;
                    *(_QWORD *)v444 = 0;
                    if (v446)
                      (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
                  }
                  goto LABEL_306;
                }
LABEL_266:
                *(_QWORD *)v398 = v397;
                v408 = (uint64_t)(v398 + 8);
LABEL_308:
                *(_QWORD *)&v762 = v408;
LABEL_309:
                if (objc_msgSend_mode(*(void **)(*(_QWORD *)(v138 + 32) + 456), v375, v376, v377, v378, v379) != 1)
                {
LABEL_337:
                  objc_msgSend_lexicons(v193, v447, v448, v449, v450, v451);
                  v484 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v484)
                    goto LABEL_407;
                  objc_msgSend_lexicons(v193, v479, v480, v481, v482, v483);
                  v485 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_decodingWeight(v485, v486, v487, v488, v489, v490);
                  v491 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_floatValue(v491, v492, v493, v494, v495, v496);
                  v498 = v497;

                  if (v498 <= 0.0)
                    goto LABEL_407;
                  *(_QWORD *)buf = 0;
                  v740 = 0uLL;
                  v499 = *(_QWORD *)(v138 + 32);
                  v500 = *(char **)(v499 + 472);
                  if (v500)
                  {
                    CFRetain(*(CFTypeRef *)(v499 + 472));
                    p_p = v500;
                    v501 = sub_1BE66E6EC((char **)buf, &p_p);
                    *(_QWORD *)&v740 = v501;
                    if (p_p)
                      CFRelease(p_p);
                    v502 = *(char **)(*(_QWORD *)(v138 + 32) + 352);
                    if (!v502)
                    {
LABEL_349:
                      v503 = operator new();
                      __p = 0;
                      v755 = 0;
                      v756 = 0;
                      v504 = *(char **)buf;
                      p_p = (char *)&__p;
                      LOBYTE(v777) = 0;
                      v505 = (uint64_t)&v501[-*(_QWORD *)buf];
                      v506 = v735;
                      if (v501 != *(char **)buf)
                      {
                        if (v505 < 0)
                          sub_1BE61F930();
                        v507 = (char *)operator new((size_t)&v501[-*(_QWORD *)buf]);
                        v508 = 0;
                        __p = v507;
                        v755 = v507;
                        v756 = &v507[8 * (v505 >> 3)];
                        do
                        {
                          v509 = *(_QWORD *)&v504[v508];
                          if (v509)
                            CFRetain(*(CFTypeRef *)&v504[v508]);
                          *(_QWORD *)&v507[v508] = v509;
                          v508 += 8;
                        }
                        while (&v504[v508] != v501);
                        v755 = &v507[v508];
                      }
                      v510 = *(_QWORD **)(v138 + 32);
                      if (v510)
                        v510 = (_QWORD *)v510[31];
                      v727 = v510;
                      v516 = objc_msgSend_spaceIndex(v727, v511, v512, v513, v514, v515);
                      *(_OWORD *)(v503 + 8) = xmmword_1BE8D52C0;
                      *(_QWORD *)v503 = &off_1E77F0FF0;
                      *(_QWORD *)(v503 + 24) = 0;
                      *(_QWORD *)(v503 + 32) = 0;
                      *(_QWORD *)(v503 + 40) = 0;
                      v517 = (char *)__p;
                      v518 = v755;
                      p_p = (char *)(v503 + 24);
                      LOBYTE(v777) = 0;
                      v519 = v755 - (_BYTE *)__p;
                      if (v755 != __p)
                      {
                        if (v519 < 0)
                          sub_1BE61F930();
                        v520 = (char *)operator new(v755 - (_BYTE *)__p);
                        v521 = 0;
                        *(_QWORD *)(v503 + 24) = v520;
                        *(_QWORD *)(v503 + 32) = v520;
                        *(_QWORD *)(v503 + 40) = &v520[8 * (v519 >> 3)];
                        do
                        {
                          v522 = *(_QWORD *)&v517[v521];
                          if (v522)
                            CFRetain(*(CFTypeRef *)&v517[v521]);
                          *(_QWORD *)&v520[v521] = v522;
                          v521 += 8;
                        }
                        while (&v517[v521] != v518);
                        *(_QWORD *)(v503 + 32) = &v520[v521];
                        v506 = v735;
                      }
                      *(_QWORD *)(v503 + 48) = 0;
                      *(_QWORD *)(v503 + 56) = 0;
                      *(_QWORD *)(v503 + 64) = 0;
                      v523 = v771;
                      v524 = v772 - v771;
                      if (v772 != v771)
                      {
                        if (v524 < 0)
                          sub_1BE61F930();
                        v525 = (char *)operator new(v772 - v771);
                        *(_QWORD *)(v503 + 48) = v525;
                        *(_QWORD *)(v503 + 56) = v525;
                        v526 = &v525[4 * (v524 >> 2)];
                        *(_QWORD *)(v503 + 64) = v526;
                        memcpy(v525, v523, v524);
                        *(_QWORD *)(v503 + 56) = v526;
                      }
                      *(_QWORD *)(v503 + 72) = v516;
                      *(_QWORD *)(v503 + 80) = v737;
                      *(_BYTE *)(v503 + 88) = 0;
                      *(_QWORD *)(v503 + 96) = 0;

                      v532 = (char *)__p;
                      v138 = v736;
                      if (__p)
                      {
                        v533 = v755;
                        v534 = __p;
                        if (v755 != __p)
                        {
                          do
                          {
                            v536 = (const void *)*((_QWORD *)v533 - 1);
                            v533 -= 8;
                            v535 = v536;
                            if (v536)
                              CFRelease(v535);
                          }
                          while (v533 != v532);
                          v534 = __p;
                        }
                        v755 = v532;
                        operator delete(v534);
                      }
                      objc_msgSend_lexicons(v506, v527, v528, v529, v530, v531);
                      v537 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_decodingWeight(v537, v538, v539, v540, v541, v542);
                      v543 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_floatValue(v543, v544, v545, v546, v547, v548);
                      *(double *)(v503 + 8) = v549;

                      objc_msgSend_lexicons(v735, v550, v551, v552, v553, v554);
                      v555 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_lowerBoundLogProbability(v555, v556, v557, v558, v559, v560);
                      v561 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_floatValue(v561, v562, v563, v564, v565, v566);
                      *(double *)(v503 + 16) = v567;

                      *(_BYTE *)(v503 + 88) = 1;
                      *(_QWORD *)(v503 + 96) = objc_msgSend_lexiconStringNormalizationFunction(*(void **)(*(_QWORD *)(v736 + 32) + 456), v568, v569, v570, v571, v572);
                      v573 = (char *)v762;
                      if ((unint64_t)v762 < *((_QWORD *)&v762 + 1))
                      {
                        *(_QWORD *)v762 = v503;
                        v574 = (uint64_t)(v573 + 8);
LABEL_402:
                        *(_QWORD *)&v762 = v574;
                        v193 = v735;
                        if (v504)
                        {
                          while (v501 != v504)
                          {
                            v599 = (const void *)*((_QWORD *)v501 - 1);
                            v501 -= 8;
                            v598 = v599;
                            if (v599)
                              CFRelease(v598);
                          }
                          operator delete(v504);
                        }
LABEL_407:
                        objc_msgSend_wordLanguageModel(v193, v479, v480, v481, v482, v483);
                        v600 = (void *)objc_claimAutoreleasedReturnValue();

                        if (!v600)
                        {
LABEL_457:
                          *(_QWORD *)buf = &off_1E77F1038;
                          *(_QWORD *)&v740 = v734;
                          v741 = v760;
                          *((_QWORD *)&v740 + 1) = &off_1E77F1160;
                          v695 = v761;
                          v742 = v761;
                          v738 = v762;
                          v743 = v762;
                          v762 = 0uLL;
                          v761 = 0;
                          v745 = 1;
                          v744 = &off_1E77F1118;
                          v747 = 0;
                          v746 = 0uLL;
                          v696 = v729 - __src;
                          if (v729 != __src)
                          {
                            if (v696 < 0)
                              sub_1BE61F930();
                            v697 = (char *)operator new(v729 - __src);
                            v698 = &v697[8 * (v696 >> 3)];
                            *(_QWORD *)&v746 = v697;
                            v747 = v698;
                            memcpy(v697, __src, v696);
                            *((_QWORD *)&v746 + 1) = v698;
                          }
                          *(_QWORD *)&v748 = v734;
                          *((_QWORD *)&v748 + 1) = __PAIR64__(v731, v732);
                          *(double *)&v749 = v72;
                          DWORD2(v749) = v62;
                          *(_QWORD *)&v750 = v728;
                          BYTE8(v750) = 1;
                          *(_DWORD *)((char *)&v750 + 9) = *(_DWORD *)v775;
                          HIDWORD(v750) = *(_DWORD *)&v775[3];
                          LOBYTE(v751) = v730;
                          *(_DWORD *)((char *)&v751 + 1) = *(_DWORD *)v774;
                          HIDWORD(v751) = *(_DWORD *)&v774[3];
                          v699 = *(_QWORD *)(v138 + 32);
                          if (*(_BYTE *)(v699 + 192))
                          {
                            v700 = (void **)(v699 + 72);
                            v701 = *(_QWORD **)(v699 + 72);
                            *(_QWORD *)(v699 + 40) = v734;
                            *(_OWORD *)(v699 + 56) = v760;
                            if (v701)
                            {
                              v702 = *(_QWORD **)(v699 + 80);
                              v703 = v701;
                              if (v702 != v701)
                              {
                                do
                                {
                                  v705 = *--v702;
                                  v704 = v705;
                                  *v702 = 0;
                                  if (v705)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v704 + 8))(v704);
                                }
                                while (v702 != v701);
                                v703 = *v700;
                              }
                              *(_QWORD *)(v699 + 80) = v701;
                              operator delete(v703);
                              *v700 = 0;
                              *(_QWORD *)(v699 + 80) = 0;
                              *(_QWORD *)(v699 + 88) = 0;
                              v695 = v742;
                              v711 = v743;
                            }
                            else
                            {
                              v711 = v738;
                            }
                            v712 = *(void **)(v699 + 112);
                            *(_QWORD *)(v699 + 72) = v695;
                            *(_QWORD *)(v699 + 80) = v711;
                            *(_QWORD *)(v699 + 88) = *((_QWORD *)&v743 + 1);
                            v743 = 0uLL;
                            v742 = 0;
                            *(_BYTE *)(v699 + 104) = v745;
                            v710 = v735;
                            if (v712)
                            {
                              *(_QWORD *)(v699 + 120) = v712;
                              operator delete(v712);
                              *(_QWORD *)(v699 + 112) = 0;
                              *(_QWORD *)(v699 + 120) = 0;
                              *(_QWORD *)(v699 + 128) = 0;
                              v713 = v742;
                            }
                            else
                            {
                              v713 = 0;
                            }
                            *(_OWORD *)(v699 + 112) = v746;
                            *(_QWORD *)(v699 + 128) = v747;
                            v714 = v751;
                            v716 = v749;
                            v715 = v750;
                            *(_OWORD *)(v699 + 136) = v748;
                            v747 = 0;
                            v746 = 0uLL;
                            *(_OWORD *)(v699 + 152) = v716;
                            *(_OWORD *)(v699 + 168) = v715;
                            *(_QWORD *)(v699 + 184) = v714;
                            v744 = &off_1E77F1118;
                            *(_QWORD *)buf = &off_1E77F1038;
                            *((_QWORD *)&v740 + 1) = &off_1E77F1160;
                            if (v713)
                            {
                              v717 = (_QWORD *)v743;
                              v718 = v713;
                              if ((_QWORD *)v743 != v713)
                              {
                                do
                                {
                                  v720 = *--v717;
                                  v719 = v720;
                                  *v717 = 0;
                                  if (v720)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v719 + 8))(v719);
                                }
                                while (v717 != v713);
                                v718 = v742;
                              }
                              *(_QWORD *)&v743 = v713;
                              operator delete(v718);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v699 + 32) = &off_1E77F1038;
                            *(_QWORD *)(v699 + 40) = v734;
                            *(_OWORD *)(v699 + 56) = v741;
                            *(_QWORD *)(v699 + 48) = &off_1E77F1160;
                            *(_QWORD *)(v699 + 72) = v695;
                            *(_QWORD *)(v699 + 80) = v738;
                            v706 = *((_QWORD *)&v743 + 1);
                            v742 = 0;
                            v743 = 0uLL;
                            *(_BYTE *)(v699 + 104) = v745;
                            *(_QWORD *)(v699 + 88) = v706;
                            *(_QWORD *)(v699 + 96) = &off_1E77F1118;
                            *(_OWORD *)(v699 + 112) = v746;
                            *(_QWORD *)(v699 + 128) = v747;
                            v747 = 0;
                            v746 = 0uLL;
                            v707 = v748;
                            v708 = v749;
                            v709 = v750;
                            *(_QWORD *)(v699 + 184) = v751;
                            *(_OWORD *)(v699 + 168) = v709;
                            *(_OWORD *)(v699 + 152) = v708;
                            *(_OWORD *)(v699 + 136) = v707;
                            *(_BYTE *)(v699 + 192) = 1;
                            v710 = v735;
                          }

                          v759 = &off_1E77F1160;
                          v721 = v761;
                          if (v761)
                          {
                            v722 = (_QWORD *)v762;
                            v723 = v761;
                            if ((void *)v762 != v761)
                            {
                              do
                              {
                                v725 = *--v722;
                                v724 = v725;
                                *v722 = 0;
                                if (v725)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v724 + 8))(v724);
                              }
                              while (v722 != v721);
                              v723 = v761;
                            }
                            *(_QWORD *)&v762 = v721;
                            operator delete(v723);
                          }
                          if (v765)
                            operator delete(v765);
                          if (v768)
                          {
                            v769 = (char *)v768;
                            operator delete(v768);
                          }
                          if (v771)
                            operator delete(v771);
                          return;
                        }
                        objc_msgSend_wordLanguageModel(v193, v601, v602, v603, v604, v605);
                        v606 = (void *)objc_claimAutoreleasedReturnValue();
                        v612 = (const void *)objc_msgSend_languageModel(v606, v607, v608, v609, v610, v611);
                        v613 = v612;
                        if (v612)
                          CFRetain(v612);
                        *(_QWORD *)buf = v613;

                        objc_msgSend_locale(*(void **)(*(_QWORD *)(v138 + 32) + 456), v614, v615, v616, v617, v618);
                        v619 = (void *)objc_claimAutoreleasedReturnValue();
                        v620 = (char *)LMStreamTokenizerCreate();
                        p_p = v620;

                        v621 = operator new();
                        if (v613)
                          CFRetain(v613);
                        v753 = v613;
                        if (v620)
                          CFRetain(v620);
                        v752 = v620;
                        v622 = *(_QWORD **)(v138 + 32);
                        if (v622)
                          v622 = (_QWORD *)v622[31];
                        v623 = v622;
                        v629 = objc_msgSend_spaceIndex(v623, v624, v625, v626, v627, v628);
                        *(_OWORD *)(v621 + 8) = xmmword_1BE8D52C0;
                        *(_QWORD *)v621 = &off_1E77F0F80;
                        if (v613)
                          CFRetain(v613);
                        *(_QWORD *)(v621 + 24) = v613;
                        if (v620)
                          CFRetain(v620);
                        *(_QWORD *)(v621 + 40) = 0;
                        *(_QWORD *)(v621 + 32) = v620;
                        *(_QWORD *)(v621 + 48) = 0;
                        *(_QWORD *)(v621 + 56) = 0;
                        v630 = v771;
                        v631 = v772 - v771;
                        if (v772 != v771)
                        {
                          if (v631 < 0)
                            sub_1BE61F930();
                          v632 = (char *)operator new(v772 - v771);
                          *(_QWORD *)(v621 + 40) = v632;
                          *(_QWORD *)(v621 + 48) = v632;
                          v633 = &v632[4 * (v631 >> 2)];
                          *(_QWORD *)(v621 + 56) = v633;
                          memcpy(v632, v630, v631);
                          *(_QWORD *)(v621 + 48) = v633;
                        }
                        *(_QWORD *)(v621 + 64) = v629;
                        *(_QWORD *)(v621 + 72) = v737;
                        *(_BYTE *)(v621 + 80) = 0;

                        v138 = v736;
                        if (v620)
                          CFRelease(v620);
                        if (v613)
                          CFRelease(v613);
                        objc_msgSend_wordLanguageModel(v735, v634, v635, v636, v637, v638);
                        v639 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_decodingWeight(v639, v640, v641, v642, v643, v644);
                        v645 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_floatValue(v645, v646, v647, v648, v649, v650);
                        *(double *)(v621 + 8) = v651;

                        objc_msgSend_wordLanguageModel(v735, v652, v653, v654, v655, v656);
                        v657 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_lowerBoundLogProbability(v657, v658, v659, v660, v661, v662);
                        v663 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_floatValue(v663, v664, v665, v666, v667, v668);
                        *(double *)(v621 + 16) = v669;

                        *(_BYTE *)(v621 + 80) = 1;
                        v670 = (char *)v762;
                        if ((unint64_t)v762 < *((_QWORD *)&v762 + 1))
                        {
                          *(_QWORD *)v762 = v621;
                          v671 = (uint64_t)(v670 + 8);
LABEL_453:
                          *(_QWORD *)&v762 = v671;
                          if (v620)
                            CFRelease(v620);
                          if (v613)
                            CFRelease(v613);
                          goto LABEL_457;
                        }
                        v672 = (char *)v761;
                        v673 = v762 - (_QWORD)v761;
                        v674 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                        v675 = v674 + 1;
                        if ((unint64_t)(v674 + 1) >> 61)
                          sub_1BE61F930();
                        v676 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                        if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v675)
                          v675 = v676 >> 2;
                        if ((unint64_t)v676 >= 0x7FFFFFFFFFFFFFF8)
                          v677 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v677 = v675;
                        if (v677)
                        {
                          if (v677 >> 61)
                            sub_1BE61F100();
                          v678 = (char *)operator new(8 * v677);
                          v679 = (uint64_t *)&v678[8 * v674];
                          v680 = &v678[8 * v677];
                          *v679 = v621;
                          v671 = (uint64_t)(v679 + 1);
                          v681 = v670 - v672;
                          if (v670 != v672)
                            goto LABEL_438;
                        }
                        else
                        {
                          v678 = 0;
                          v679 = (uint64_t *)(8 * v674);
                          v680 = 0;
                          *(_QWORD *)(8 * v674) = v621;
                          v671 = 8 * v674 + 8;
                          v681 = v670 - v672;
                          if (v670 != v672)
                          {
LABEL_438:
                            v682 = v681 - 8;
                            if (v682 < 0x78
                              || &v670[-(v682 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v679
                              && &v678[v673 - (v682 & 0xFFFFFFFFFFFFFFF8) - 8] < v670)
                            {
                              goto LABEL_536;
                            }
                            v683 = (v682 >> 3) + 1;
                            v684 = 8 * (v683 & 0x3FFFFFFFFFFFFFFCLL);
                            v679 = (uint64_t *)((char *)v679 - v684);
                            v685 = &v670[-v684];
                            v686 = v670 - 16;
                            v687 = &v678[8 * v674 - 16];
                            v688 = v683 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v690 = *((_OWORD *)v686 - 1);
                              v689 = *(_OWORD *)v686;
                              *((_OWORD *)v686 - 1) = 0uLL;
                              *(_OWORD *)v686 = 0uLL;
                              *((_OWORD *)v687 - 1) = v690;
                              *(_OWORD *)v687 = v689;
                              v686 -= 32;
                              v687 -= 32;
                              v688 -= 4;
                            }
                            while (v688);
                            v670 = v685;
                            if (v683 != (v683 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_536:
                              do
                              {
                                v691 = *((_QWORD *)v670 - 1);
                                v670 -= 8;
                                *(_QWORD *)v670 = 0;
                                *--v679 = v691;
                              }
                              while (v670 != v672);
                            }
                            v670 = (char *)v761;
                            v692 = (char *)v762;
                            v761 = v679;
                            *(_QWORD *)&v762 = v671;
                            *((_QWORD *)&v762 + 1) = v680;
                            while (v692 != v670)
                            {
                              v694 = *((_QWORD *)v692 - 1);
                              v692 -= 8;
                              v693 = v694;
                              *(_QWORD *)v692 = 0;
                              if (v694)
                                (*(void (**)(uint64_t))(*(_QWORD *)v693 + 8))(v693);
                            }
                            goto LABEL_451;
                          }
                        }
                        v761 = v679;
                        *(_QWORD *)&v762 = v671;
                        *((_QWORD *)&v762 + 1) = v680;
LABEL_451:
                        if (v670)
                          operator delete(v670);
                        goto LABEL_453;
                      }
                      v575 = (char *)v761;
                      v576 = v762 - (_QWORD)v761;
                      v577 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                      v578 = v577 + 1;
                      if ((unint64_t)(v577 + 1) >> 61)
                        sub_1BE61F930();
                      v579 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                      if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v578)
                        v578 = v579 >> 2;
                      if ((unint64_t)v579 >= 0x7FFFFFFFFFFFFFF8)
                        v580 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v580 = v578;
                      if (v580)
                      {
                        if (v580 >> 61)
                          sub_1BE61F100();
                        v581 = (char *)operator new(8 * v580);
                        v582 = (uint64_t *)&v581[8 * v577];
                        v583 = &v581[8 * v580];
                        *v582 = v503;
                        v574 = (uint64_t)(v582 + 1);
                        v584 = v573 - v575;
                        if (v573 != v575)
                          goto LABEL_387;
                      }
                      else
                      {
                        v581 = 0;
                        v582 = (uint64_t *)(8 * v577);
                        v583 = 0;
                        *(_QWORD *)(8 * v577) = v503;
                        v574 = 8 * v577 + 8;
                        v584 = v573 - v575;
                        if (v573 != v575)
                        {
LABEL_387:
                          v585 = v584 - 8;
                          if (v585 < 0x78
                            || &v573[-(v585 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v582
                            && &v581[v576 - (v585 & 0xFFFFFFFFFFFFFFF8) - 8] < v573)
                          {
                            goto LABEL_537;
                          }
                          v586 = (v585 >> 3) + 1;
                          v587 = 8 * (v586 & 0x3FFFFFFFFFFFFFFCLL);
                          v582 = (uint64_t *)((char *)v582 - v587);
                          v588 = &v573[-v587];
                          v589 = v573 - 16;
                          v590 = &v581[8 * v577 - 16];
                          v591 = v586 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v593 = *((_OWORD *)v589 - 1);
                            v592 = *(_OWORD *)v589;
                            *((_OWORD *)v589 - 1) = 0uLL;
                            *(_OWORD *)v589 = 0uLL;
                            *((_OWORD *)v590 - 1) = v593;
                            *(_OWORD *)v590 = v592;
                            v589 -= 32;
                            v590 -= 32;
                            v591 -= 4;
                          }
                          while (v591);
                          v573 = v588;
                          if (v586 != (v586 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_537:
                            do
                            {
                              v594 = *((_QWORD *)v573 - 1);
                              v573 -= 8;
                              *(_QWORD *)v573 = 0;
                              *--v582 = v594;
                            }
                            while (v573 != v575);
                          }
                          v573 = (char *)v761;
                          v595 = (char *)v762;
                          v761 = v582;
                          *(_QWORD *)&v762 = v574;
                          *((_QWORD *)&v762 + 1) = v583;
                          while (v595 != v573)
                          {
                            v597 = *((_QWORD *)v595 - 1);
                            v595 -= 8;
                            v596 = v597;
                            *(_QWORD *)v595 = 0;
                            if (v597)
                              (*(void (**)(uint64_t))(*(_QWORD *)v596 + 8))(v596);
                          }
                          goto LABEL_400;
                        }
                      }
                      v761 = v582;
                      *(_QWORD *)&v762 = v574;
                      *((_QWORD *)&v762 + 1) = v583;
LABEL_400:
                      if (v573)
                        operator delete(v573);
                      goto LABEL_402;
                    }
                  }
                  else
                  {
                    v501 = 0;
                    v502 = *(char **)(v499 + 352);
                    if (!v502)
                      goto LABEL_349;
                  }
                  CFRetain(v502);
                  p_p = v502;
                  if ((unint64_t)v501 >= *((_QWORD *)&v740 + 1))
                  {
                    v501 = sub_1BE66E6EC((char **)buf, &p_p);
                    *(_QWORD *)&v740 = v501;
                    if (p_p)
                      CFRelease(p_p);
                  }
                  else
                  {
                    *(_QWORD *)v501 = v502;
                    v501 += 8;
                    *(_QWORD *)&v740 = v501;
                  }
                  goto LABEL_349;
                }
                v452 = operator new();
                v453 = v452;
                *(_OWORD *)(v452 + 8) = xmmword_1BE8D52C0;
                *(_QWORD *)v452 = &off_1E77F1208;
                *(_QWORD *)(v452 + 24) = 0xC08F400000000000;
                v454 = (char *)v762;
                if ((unint64_t)v762 < *((_QWORD *)&v762 + 1))
                {
                  *(_QWORD *)v762 = v452;
                  v455 = (uint64_t)(v454 + 8);
LABEL_336:
                  *(_QWORD *)&v762 = v455;
                  goto LABEL_337;
                }
                v456 = (char *)v761;
                v457 = v762 - (_QWORD)v761;
                v458 = (uint64_t)(v762 - (_QWORD)v761) >> 3;
                v459 = v458 + 1;
                if ((unint64_t)(v458 + 1) >> 61)
                  sub_1BE61F930();
                v460 = *((_QWORD *)&v762 + 1) - (_QWORD)v761;
                if ((uint64_t)(*((_QWORD *)&v762 + 1) - (_QWORD)v761) >> 2 > v459)
                  v459 = v460 >> 2;
                if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
                  v461 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v461 = v459;
                if (v461)
                {
                  if (v461 >> 61)
                    sub_1BE61F100();
                  v462 = (char *)operator new(8 * v461);
                  v463 = &v462[8 * v458];
                  v464 = &v462[8 * v461];
                  *(_QWORD *)v463 = v453;
                  v455 = (uint64_t)(v463 + 8);
                  v465 = v454 - v456;
                  if (v454 != v456)
                    goto LABEL_321;
                }
                else
                {
                  v462 = 0;
                  v463 = (char *)(8 * v458);
                  v464 = 0;
                  *(_QWORD *)(8 * v458) = v453;
                  v455 = 8 * v458 + 8;
                  v465 = v454 - v456;
                  if (v454 != v456)
                  {
LABEL_321:
                    v466 = v465 - 8;
                    if (v466 < 0x78
                      || &v454[-(v466 & 0xFFFFFFFFFFFFFFF8) - 8] < v463
                      && &v462[v457 - (v466 & 0xFFFFFFFFFFFFFFF8) - 8] < v454)
                    {
                      goto LABEL_538;
                    }
                    v467 = (v466 >> 3) + 1;
                    v468 = 8 * (v467 & 0x3FFFFFFFFFFFFFFCLL);
                    v463 -= v468;
                    v469 = &v454[-v468];
                    v470 = v454 - 16;
                    v471 = &v462[8 * v458 - 16];
                    v472 = v467 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v474 = *((_OWORD *)v470 - 1);
                      v473 = *(_OWORD *)v470;
                      *((_OWORD *)v470 - 1) = 0uLL;
                      *(_OWORD *)v470 = 0uLL;
                      *((_OWORD *)v471 - 1) = v474;
                      *(_OWORD *)v471 = v473;
                      v470 -= 32;
                      v471 -= 32;
                      v472 -= 4;
                    }
                    while (v472);
                    v454 = v469;
                    if (v467 != (v467 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_538:
                      do
                      {
                        v475 = *((_QWORD *)v454 - 1);
                        v454 -= 8;
                        *(_QWORD *)v454 = 0;
                        *((_QWORD *)v463 - 1) = v475;
                        v463 -= 8;
                      }
                      while (v454 != v456);
                    }
                    v454 = (char *)v761;
                    v476 = (char *)v762;
                    v761 = v463;
                    *(_QWORD *)&v762 = v455;
                    *((_QWORD *)&v762 + 1) = v464;
                    while (v476 != v454)
                    {
                      v478 = *((_QWORD *)v476 - 1);
                      v476 -= 8;
                      v477 = v478;
                      *(_QWORD *)v476 = 0;
                      if (v478)
                        (*(void (**)(uint64_t))(*(_QWORD *)v477 + 8))(v477);
                    }
                    goto LABEL_334;
                  }
                }
                v761 = v463;
                *(_QWORD *)&v762 = v455;
                *((_QWORD *)&v762 + 1) = v464;
LABEL_334:
                if (v454)
                  operator delete(v454);
                goto LABEL_336;
              }
            }
            v159 = v158 - 8;
            if (v159 < 0x58)
              goto LABEL_539;
            if ((unint64_t)(v150 - v155) < 0x20)
              goto LABEL_539;
            v160 = (v159 >> 3) + 1;
            v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
            v162 = &v148[-v161];
            v156 = (uint64_t *)((char *)v156 - v161);
            v163 = &v155[8 * v151 - 16];
            v164 = v148 - 16;
            v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 4;
            }
            while (v165);
            v148 = v162;
            if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_539:
              do
              {
                v167 = *((_QWORD *)v148 - 1);
                v148 -= 8;
                *--v156 = v167;
              }
              while (v148 != v150);
            }
            goto LABEL_106;
          }
        }
        else
        {
          v53 = *(_QWORD *)(a1 + 32);
        }
      }
      if (v53)
      {
        v73 = *(id *)(v53 + 248);
        if (v73)
        {
          v79 = v73;
          objc_msgSend_decodingPruningPolicy(v73, v74, v75, v76, v77, v78);
          v80 = *(char **)buf;

          if (v80)
          {
            v71 = 0;
            v62 = 0;
            v72 = -INFINITY;
            goto LABEL_46;
          }
        }
      }
      v81 = *(_QWORD *)(a1 + 32);
      if (v81 && (v82 = *(id *)(v81 + 248)) != 0)
      {
        v88 = v82;
        objc_msgSend_decodingPruningPolicy(v82, v83, v84, v85, v86, v87);
        v62 = DWORD1(v740);
        v89 = *(_QWORD *)(a1 + 32);
        if (!v89)
          goto LABEL_44;
      }
      else
      {
        v88 = 0;
        *(_QWORD *)buf = 0;
        v740 = 0uLL;
        v62 = 0;
        v89 = *(_QWORD *)(a1 + 32);
        if (!v89)
          goto LABEL_44;
      }
      v90 = *(id *)(v89 + 248);
      if (v90)
      {
        v96 = v90;
        objc_msgSend_decodingPruningPolicy(v90, v91, v92, v93, v94, v95);
        v97 = DWORD2(v760);

LABEL_45:
        v728 = v97;

        v71 = 1;
        v72 = -INFINITY;
        goto LABEL_46;
      }
LABEL_44:
      v97 = 0;
      goto LABEL_45;
    }
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v36 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_FAULT, "The codemap must be loaded before the text decoder can be initialized", buf, 2u);
  }

  if (objc_msgSend_codeMap(*(void **)(*(_QWORD *)(a1 + 32) + 248), v37, v38, v39, v40, v41))
    goto LABEL_17;
}

void sub_1BE642928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__pa, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  void *v61;
  void *v62;
  void *__p;

  sub_1BE642EEC((const void **)(v59 - 160));
  sub_1BE642F1C(&a23);

  __p = (void *)a58;
  sub_1BE643030(&a50);
  a56 = (uint64_t)&off_1E77F1118;
  if (__p)
  {
    a59 = (uint64_t)__p;
    operator delete(__p);
  }
  v61 = *(void **)(v59 - 224);
  if (v61)
  {
    *(_QWORD *)(v59 - 216) = v61;
    operator delete(v61);
    v62 = *(void **)(v59 - 200);
    if (!v62)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v62 = *(void **)(v59 - 200);
    if (!v62)
      goto LABEL_5;
  }
  *(_QWORD *)(v59 - 192) = v62;
  operator delete(v62);
  _Unwind_Resume(a1);
}

const void **sub_1BE642E14(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_1BE642E44(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_1BE642E74(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E77F11A8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1BE642EB0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E77F11A8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

const void **sub_1BE642EEC(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void **sub_1BE642F1C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_1BE642F88(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E77F1038;
  a1[8] = &off_1E77F1118;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  a1[2] = &off_1E77F1160;
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    v4 = (_QWORD *)a1[6];
    v5 = (void *)a1[5];
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_1BE643030(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E77F1160;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_1BE6430B0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E77F1118;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1BE643144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE643160(uint64_t a1)
{
  _QWORD *v2;
  CHNeuralNetwork *v3;
  CHNeuralNetwork *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (CHNeuralNetwork *)v2[28];
  if (v3)
  {
    CHNeuralNetwork::~CHNeuralNetwork(v3);
    MEMORY[0x1C3B812EC]();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 224) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v4 = (CHNeuralNetwork *)v2[29];
  if (v4)
  {
    CHNeuralNetwork::~CHNeuralNetwork(v4);
    MEMORY[0x1C3B812EC]();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v5 = v2[48];
  if (v5)
  {
    free(*(void **)(v5 + 16));
    MEMORY[0x1C3B812EC](v5, 0x1010C40BF976668);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  if (v2[60])
  {
    LMLanguageModelRelease();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  if (v2[39])
  {
    LMLanguageModelRelease();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 312) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v6 = (const void *)v2[59];
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 472) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v7 = (const void *)v2[42];
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v8 = (const void *)v2[43];
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  if (v2[40])
  {
    LMLexiconRelease();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  if (v2[41])
  {
    LMLexiconRelease();
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v9 = (const void *)v2[44];
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v10 = (const void *)v2[53];
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 424) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v11 = v2[34];
  if (v11)
  {
    v12 = sub_1BE66A0DC(v11);
    MEMORY[0x1C3B812EC](v12, 0x10B2C40ACD43ABBLL);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 272) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v13 = v2[35];
  if (v13)
  {
    v14 = sub_1BE66A0DC(v13);
    MEMORY[0x1C3B812EC](v14, 0x10B2C40ACD43ABBLL);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  v15 = (void *)v2[30];
  v2[30] = 0;

  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 440);
  *(_QWORD *)(v16 + 440) = 0;

  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 256);
  *(_QWORD *)(v18 + 256) = 0;

  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 464);
  *(_QWORD *)(v20 + 464) = 0;

  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(void **)(v22 + 416);
  *(_QWORD *)(v22 + 416) = 0;

  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(void **)(v24 + 488);
  *(_QWORD *)(v24 + 488) = 0;

  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(void **)(v26 + 288);
  *(_QWORD *)(v26 + 288) = 0;

  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(void **)(v28 + 296);
  *(_QWORD *)(v28 + 296) = 0;

  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(void **)(v30 + 24);
  *(_QWORD *)(v30 + 24) = 0;

  v32 = *(_QWORD *)(a1 + 32);
  sub_1BE62033C(v32 + 536, *(_QWORD **)(v32 + 544));
  *(_QWORD *)(v32 + 536) = v32 + 544;
  *(_OWORD *)(v32 + 544) = 0u;
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(void **)(v33 + 248);
  *(_QWORD *)(v33 + 248) = 0;

  v35 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v35 + 192))
  {
    *(_QWORD *)(v35 + 32) = &off_1E77F1038;
    *(_QWORD *)(v35 + 96) = &off_1E77F1118;
    v36 = *(void **)(v35 + 112);
    if (v36)
    {
      *(_QWORD *)(v35 + 120) = v36;
      operator delete(v36);
    }
    *(_QWORD *)(v35 + 48) = &off_1E77F1160;
    v37 = *(_QWORD **)(v35 + 72);
    if (v37)
    {
      v38 = *(_QWORD **)(v35 + 80);
      v39 = *(void **)(v35 + 72);
      if (v38 != v37)
      {
        do
        {
          v41 = *--v38;
          v40 = v41;
          *v38 = 0;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        while (v38 != v37);
        v39 = *(void **)(v35 + 72);
      }
      *(_QWORD *)(v35 + 80) = v37;
      operator delete(v39);
    }
    *(_BYTE *)(v35 + 192) = 0;
  }
}

uint64_t sub_1BE643490(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE643520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE643538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE643548(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  if (objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v13, v14, v15, v16, v17))
  {
    objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v18, v19, v20, v21, v22);
    MecabraSetAddressBookNamePhoneticPairs();
    if (objc_msgSend_shouldLoadCJKLexicons(*(void **)(*(_QWORD *)(a1 + 32) + 456), v23, v24, v25, v26, v27))
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 328))
      {
        LMLexiconRelease();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = 0;
      }
      v30 = *(_QWORD *)(a1 + 40);
      v32 = *MEMORY[0x1E0D43480];
      v33[0] = v30;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v33, (uint64_t)&v32, 1, v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = LMLexiconCreate();

    }
  }
}

void sub_1BE64364C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6436E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE643700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE643710(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  if (objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v13, v14, v15, v16, v17))
  {
    objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v18, v19, v20, v21, v22);
    MecabraSetUserWordKeyPairs();
    if (objc_msgSend_shouldLoadCJKLexicons(*(void **)(*(_QWORD *)(a1 + 32) + 456), v23, v24, v25, v26, v27))
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 328))
      {
        LMLexiconRelease();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = 0;
      }
      v30 = *(_QWORD *)(a1 + 40);
      v32 = *MEMORY[0x1E0D43480];
      v33[0] = v30;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v33, (uint64_t)&v32, 1, v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = LMLexiconCreate();

    }
  }
}

void sub_1BE643814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6438D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6438F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  result = objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v13, v14, v15, v16, v17);
  if (result)
  {
    result = objc_msgSend_shouldForwardMecabraOTAAssetsUpdate(*(void **)(*(_QWORD *)(a1 + 32) + 456), v19, v20, v21, v22, v23);
    if ((_DWORD)result)
    {
      objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v24, v25, v26, v27, v28);
      MecabraSetAssetDataItemsForType();
      objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v29, v30, v31, v32, v33);
      MecabraSetAssetDataItemsForType();
      v39 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v39 + 320))
      {
        LMLexiconRelease();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320) = 0;
        v39 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320) = objc_msgSend_newCJKStaticLexicon(*(void **)(v39 + 456), v34, v35, v36, v37, v38);
      v45 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v45 + 480))
      {
        LMLanguageModelRelease();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = 0;
        v45 = *(_QWORD *)(a1 + 32);
      }
      result = objc_msgSend_newWordLanguageModel(*(void **)(v45 + 456), v40, v41, v42, v43, v44);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = result;
    }
  }
  return result;
}

void sub_1BE643A34(_QWORD *a1)
{
  CFTypeRef v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v3 = a1[4];
  v2 = (CFTypeRef)a1[5];
  v4 = *(CFTypeRef *)(v3 + 352);
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      v2 = (CFTypeRef)a1[5];
    }
    if (v2)
      v2 = CFRetain(v2);
    *(_QWORD *)(a1[4] + 352) = v2;
    v5 = a1[4];
    if (!*(_QWORD *)(v5 + 480)
      || (LMLanguageModelAddTransientVocabulary(), *(_QWORD *)(a1[4] + 304) = a1[6], (v5 = a1[4]) != 0))
    {
      v6 = MEMORY[0x1E0C809B0];
      v8 = MEMORY[0x1E0C809B0];
      v9 = 3221225472;
      v10 = sub_1BE640540;
      v11 = &unk_1E77F1F38;
      v12 = v5;
      sub_1BE63EFDC(v5, &v8);
      v7 = a1[4];
      if (v7)
      {
        v8 = v6;
        v9 = 3221225472;
        v10 = sub_1BE6403AC;
        v11 = &unk_1E77F1F38;
        v12 = v7;
        sub_1BE63EFDC(v7, &v8);
      }
    }
  }
}

void sub_1BE643B80(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  _QWORD v6[5];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(CFTypeRef *)(a1 + 40);
  v4 = *(CFTypeRef *)(v3 + 424);
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      v2 = *(CFTypeRef *)(a1 + 40);
    }
    if (v2)
      v2 = CFRetain(v2);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 424) = v2;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = sub_1BE6403AC;
      v6[3] = &unk_1E77F1F38;
      v6[4] = v5;
      sub_1BE63EFDC(v5, v6);
    }
  }
}

void sub_1BE643C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE643CA8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[5];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  if (*(void **)(v2 + 432) != v1)
  {
    objc_storeStrong((id *)(v2 + 432), v1);
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 360);
    if (!v9)
    {
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(void **)(v11 + 360);
      *(_QWORD *)(v11 + 360) = v10;

      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 360);
    }
    objc_msgSend_removeAllObjects(v9, v4, v5, v6, v7, v8);
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v13 = *(id *)(*(_QWORD *)(a1 + 32) + 432);
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v31, (uint64_t)v36, 16, v15);
    if (v21)
    {
      v22 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v32 != v22)
            objc_enumerationMutation(v13);
          v24 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
          v25 = *(void **)(*(_QWORD *)(a1 + 32) + 360);
          objc_msgSend_lowercaseString(v24, v16, v17, v18, v19, v20, (_QWORD)v31);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v25, v27, (uint64_t)v24, (uint64_t)v26, v28, v29);

        }
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v31, (uint64_t)v36, 16, v20);
      }
      while (v21);
    }

    v30 = *(_QWORD *)(a1 + 32);
    if (v30)
    {
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = sub_1BE6403AC;
      v35[3] = &unk_1E77F1F38;
      v35[4] = v30;
      sub_1BE63EFDC(v30, v35);
    }
  }
}

void sub_1BE643E5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE643EE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480);
  if (*(_QWORD *)(a1 + 40) != v2)
  {
    if (v2)
    {
      LMLanguageModelRelease();
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = 0;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = LMLanguageModelRetain();
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = MEMORY[0x1E0C809B0];
      v6 = MEMORY[0x1E0C809B0];
      v7 = 3221225472;
      v8 = sub_1BE640540;
      v9 = &unk_1E77F1F38;
      v10 = v3;
      sub_1BE63EFDC(v3, &v6);
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v6 = v4;
        v7 = 3221225472;
        v8 = sub_1BE6403AC;
        v9 = &unk_1E77F1F38;
        v10 = v5;
        sub_1BE63EFDC(v5, &v6);
      }
    }
  }
}

uint64_t sub_1BE644010(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int IsPredictionCandidate;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  result = objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v13, v14, v15, v16, v17);
  if (result)
  {
    IsPredictionCandidate = MecabraCandidateIsPredictionCandidate();
    objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v20, v21, v22, v23, v24);
    if (IsPredictionCandidate)
    {
      MecabraPredictionAcceptCandidate();
      result = MecabraCandidateGetSurface();
      if (!result)
        return result;
      goto LABEL_4;
    }
    MecabraAcceptCandidate();
    result = MecabraCandidateGetSurface();
    if (result)
    {
LABEL_4:
      objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v25, v26, v27, v28, v29);
      return MecabraWorkingSetAddString();
    }
  }
  return result;
}

void sub_1BE644250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE644298(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE6442BC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1BE6442D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  result = objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v13, v14, v15, v16, v17);
  if (result)
  {
    objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v19, v20, v21, v22, v23);
    MecabraPredictionAnalyze();
    objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v24, v25, v26, v27, v28);
    result = MecabraPredictionGetNextCandidate();
    if (result)
    {
      v34 = result;
      while (1)
      {
        v36 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
        v38 = (uint64_t *)v36[7];
        v37 = v36[8];
        if ((unint64_t)v38 >= v37)
          break;
        *v38 = v34;
        v35 = (uint64_t)(v38 + 1);
LABEL_5:
        v36[7] = v35;
        objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v29, v30, v31, v32, v33);
        result = MecabraPredictionGetNextCandidate();
        v34 = result;
        if (!result)
          return result;
      }
      v39 = (char *)v36[6];
      v40 = ((char *)v38 - v39) >> 3;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        sub_1BE61F930();
      v42 = v37 - (_QWORD)v39;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 61)
          sub_1BE61F100();
        v44 = (char *)operator new(8 * v43);
        v45 = (uint64_t *)&v44[8 * v40];
        *v45 = v34;
        v35 = (uint64_t)(v45 + 1);
        v46 = (char *)((char *)v38 - v39);
        if (v38 == (uint64_t *)v39)
          goto LABEL_25;
      }
      else
      {
        v44 = 0;
        v45 = (uint64_t *)(8 * v40);
        *(_QWORD *)(8 * v40) = v34;
        v35 = 8 * v40 + 8;
        v46 = (char *)((char *)v38 - v39);
        if (v38 == (uint64_t *)v39)
        {
LABEL_25:
          v36[6] = v45;
          v36[7] = v35;
          v36[8] = &v44[8 * v43];
          if (v38)
            operator delete(v38);
          goto LABEL_5;
        }
      }
      v47 = (unint64_t)(v46 - 8);
      if (v47 < 0x58)
        goto LABEL_32;
      if ((unint64_t)(v39 - v44) < 0x20)
        goto LABEL_32;
      v48 = (v47 >> 3) + 1;
      v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      v50 = &v38[v49 / 0xFFFFFFFFFFFFFFF8];
      v45 = (uint64_t *)((char *)v45 - v49);
      v51 = &v44[8 * v40 - 16];
      v52 = v38 - 2;
      v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *(_OWORD *)v52;
        *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
        *(_OWORD *)v51 = v54;
        v51 -= 32;
        v52 -= 4;
        v53 -= 4;
      }
      while (v53);
      v38 = v50;
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v55 = *--v38;
          *--v45 = v55;
        }
        while (v38 != (uint64_t *)v39);
      }
      v38 = (uint64_t *)v36[6];
      goto LABEL_25;
    }
  }
  return result;
}

void sub_1BE644574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE644598(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = a1[4];
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  result = objc_msgSend_containsObject_(*(void **)(a1[4] + 24), v13, a1[5], v14, v15, v16);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }
  else
  {
    result = objc_msgSend_mecabra(*(void **)(a1[4] + 464), v18, v19, v20, v21, v22);
    if (result)
    {
      objc_msgSend_mecabra(*(void **)(a1[4] + 464), v23, v24, v25, v26, v27);
      result = MecabraWorkingSetContainsString();
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (_DWORD)result == 0;
    }
  }
  return result;
}

id sub_1BE64463C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v14[5];
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BE64476C;
  v14[3] = &unk_1E77F2518;
  v14[4] = a1;
  v8 = v6;
  v15 = v8;
  v9 = v5;
  v16 = v9;
  v10 = v7;
  v17 = v10;
  sub_1BE63EFDC(a1, v14);
  v11 = v17;
  v12 = v10;

  return v12;
}

void sub_1BE644728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE644758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE64476C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 464);
  v9 = objc_msgSend_mecabraInputMethodType(*(void **)(v7 + 456), a2, a3, a4, a5, a6);
  objc_msgSend_initMecabraIfNeededWithType_learningDictURL_(v8, v10, v9, *(_QWORD *)(v7 + 368), v11, v12);
  result = objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v13, v14, v15, v16, v17);
  if (result)
  {
    result = objc_msgSend_count(*(void **)(a1 + 40), v19, v20, v21, v22, v23);
    if (result)
    {
      v28 = 0;
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v24, 0, v25, v26, v27);
      while (1)
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend_rangeValue(v38, v39, v40, v41, v42, v43);
        v46 = v45;

        objc_msgSend_substringWithRange_(*(void **)(a1 + 48), v47, v44, v46, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_mecabra(*(void **)(*(_QWORD *)(a1 + 32) + 464), v51, v52, v53, v54, v55);
        if (!MecabraWorkingSetContainsString())
          objc_msgSend_addIndex_(*(void **)(a1 + 56), v56, v28, v57, v58, v59);

        ++v28;
        result = objc_msgSend_count(*(void **)(a1 + 40), v29, v30, v31, v32, v33);
        if (v28 >= result)
          break;
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v34, v28, v35, v36, v37);
      }
    }
  }
  return result;
}

void sub_1BE644854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE644864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE644914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)CHRecognizer;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

id sub_1BE644944(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[13];
  _QWORD v20[14];

  v20[13] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (int)a2;
    v19[0] = &unk_1E7828130;
    v19[1] = &unk_1E7828148;
    v20[0] = CFSTR("Oval");
    v20[1] = CFSTR("Line");
    v19[2] = &unk_1E7828160;
    v19[3] = &unk_1E7828178;
    v20[2] = CFSTR("Outline Arrow");
    v20[3] = CFSTR("Triangle");
    v19[4] = &unk_1E7828190;
    v19[5] = &unk_1E78281A8;
    v20[4] = CFSTR("Rectangle");
    v20[5] = CFSTR("Pentagon");
    v19[6] = &unk_1E78281C0;
    v19[7] = &unk_1E78281D8;
    v20[6] = CFSTR("Manhattan Line");
    v20[7] = CFSTR("Chat Bubble");
    v19[8] = &unk_1E78281F0;
    v19[9] = &unk_1E7828208;
    v20[8] = CFSTR("Star");
    v20[9] = CFSTR("Heart");
    v19[10] = &unk_1E7828220;
    v19[11] = &unk_1E7828238;
    v20[10] = CFSTR("Cloud");
    v20[11] = CFSTR("ScratchOut");
    v19[12] = &unk_1E7828250;
    v20[12] = CFSTR("Scribble");
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v20, (uint64_t)v19, 13, a6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v8, v6, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v7, v13, (uint64_t)v12, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v17 = 0;
  }
  return v17;
}

void sub_1BE644B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE644BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE644BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE644D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE644D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE644EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE644F44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1BE644F4C(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_1E77F0798;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_1BE644FA4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_1BE644FEC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1BE644FF4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_1BE645044(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }

  return a1;
}

_QWORD *sub_1BE6450A4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

id sub_1BE6450E4(void *a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  CGRect *v49;
  int v50;
  float v51;
  CHDrawing *v52;
  void *v53;
  float v54;
  char v55;
  BOOL v56;
  BOOL v57;
  float *v58;
  BOOL v59;
  CHFreeformRecognitionResult *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  float *v82;
  double v83;
  void *v84;
  double v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  id started;
  CHDrawing *v93;
  const __CFNumber *v94;
  const __CFNumber *v95;
  CFTypeID v96;
  int Value;
  CGFloat v98;
  CGFloat v99;
  double v100;
  double v101;
  double MidX;
  double MidY;
  CHScribbleRecognitionResult *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  CHDrawing *v118;
  const __CFNumber *v119;
  const __CFNumber *v120;
  CFTypeID v121;
  int v122;
  CHDrawing *v123;
  uint64_t v124;
  double *v125;
  CHPentagonRecognitionResult *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  CHDrawing *v136;
  const __CFNumber *v137;
  const __CFNumber *v138;
  CFTypeID v139;
  int v140;
  CHDrawing *v141;
  const __CFNumber *v142;
  const __CFNumber *v143;
  CFTypeID v144;
  int v145;
  CHDrawing *v146;
  uint64_t v147;
  HTMLog *v148;
  id v149;
  CHChatBubbleRecognitionResult *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  double *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float v167;
  float v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  CHFreeformRecognitionResult *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  void *v182;
  CHDrawing *v183;
  const __CFNumber *v184;
  const __CFNumber *v185;
  CFTypeID v186;
  int v187;
  CHDrawing *v188;
  uint64_t v189;
  double *v190;
  CHCloudRecognitionResult *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  float v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  float v213;
  CHFreeformRecognitionResult *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  id v221;
  CHDrawing *v222;
  const __CFNumber *v223;
  const __CFNumber *v224;
  CFTypeID v225;
  int v226;
  CHDrawing *v227;
  uint64_t v228;
  HTMLog *v229;
  double *v230;
  CHHeartRecognitionResult *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  double *v243;
  CHStarRecognitionResult *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  double *v254;
  unsigned int v255;
  const __CFNumber *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  const __CFNumber *v261;
  CFTypeID v262;
  int v263;
  const __CFNumber *v264;
  const __CFNumber *v265;
  CFTypeID v266;
  int v267;
  uint64_t v268;
  HTMLog *v269;
  double *v270;
  float v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  CHOutlinedArrowSketchRecognitionResult *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  const __CFNumber *v289;
  const __CFNumber *v290;
  CFTypeID v291;
  int v292;
  const __CFNumber *v293;
  const __CFNumber *v294;
  CFTypeID v295;
  int v296;
  const __CFNumber *v297;
  const __CFNumber *v298;
  CFTypeID v299;
  int v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  double v316;
  double v317;
  double v318;
  uint64_t v319;
  double *v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  double v327;
  double v328;
  double v329;
  double v330;
  _BYTE *v331;
  _BYTE *v332;
  int64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  HTMLog *v341;
  double *v342;
  double *v343;
  char *v344;
  char *v345;
  char *v346;
  uint64_t v347;
  float v348;
  float v349;
  float v350;
  char *v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  char *v356;
  const __CFNumber *v357;
  const __CFNumber *v358;
  CFTypeID v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  double v365;
  float v366;
  double v367;
  float v368;
  double v369;
  double v370;
  float v371;
  double v372;
  float v373;
  CHEllipseRecognitionResult *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  HTMLog *v385;
  CHTriangle *v386;
  double v387;
  double v388;
  float v389;
  float v390;
  float v391;
  float v392;
  double v393;
  __float2 v394;
  double v395;
  double v396;
  CHRectangleSketchRecognitionResult *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  double v403;
  const char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  double v408;
  double v409;
  uint64_t v410;
  void *v411;
  void *v412;
  void *v413;
  _BOOL8 v414;
  _BOOL8 v415;
  float v416;
  _OWORD *v417;
  _OWORD *v418;
  float64x2_t v419;
  float64x2_t v420;
  uint64_t v421;
  float64x2_t v422;
  float64x2_t v423;
  double v424;
  double v425;
  double v426;
  double v427;
  float v428;
  double v429;
  double v430;
  uint64_t v431;
  HTMLog *v432;
  double *v433;
  CHTriangleRecognitionResult *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void *v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  void *v444;
  void *v445;
  float v446;
  _OWORD *v447;
  _OWORD *v448;
  float64x2_t v449;
  float64x2_t v450;
  uint64_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float v454;
  float v455;
  float v456;
  double *v457;
  char *v458;
  char *v459;
  unint64_t v460;
  double *v461;
  float v462;
  float v463;
  double v464;
  double v465;
  double v466;
  float v467;
  double v468;
  float v469;
  float v470;
  float v471;
  float v472;
  void *v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  CHFreeformRecognitionResult *v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  double *v486;
  _BYTE *v487;
  _BYTE *v488;
  int64_t v489;
  char *v490;
  char *v491;
  char *v492;
  _BYTE *v493;
  void *v494;
  _BYTE *v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  void *v501;
  char *v502;
  uint64_t v503;
  unint64_t v504;
  void *v505;
  const char *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  _BOOL8 v510;
  _BOOL8 v511;
  void *v512;
  CHManhattanLineSketchRecognitionResult *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  const char *v519;
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  CHFreeformRecognitionResult *v530;
  const char *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  id v536;
  CHLineSketchRecognitionResult *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  void *v542;
  const char *v543;
  uint64_t v544;
  void *v545;
  uint64_t v546;
  id v547;
  id *v548;
  uint64_t *v549;
  id *v550;
  char *v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  char *v556;
  uint64_t *v557;
  char *v558;
  char *v559;
  uint64_t *v560;
  uint64_t *v561;
  __int128 v562;
  void *v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  BOOL v567;
  char v568;
  BOOL v569;
  uint64_t v570;
  uint64_t v571;
  double *v572;
  const double *v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t v576;
  void *v577;
  void *v578;
  const char *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unsigned __int16 v584;
  const char *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int IsMember;
  uint64_t v590;
  const char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  uint64_t v601;
  void *v602;
  uint64_t v603;
  void *v604;
  const char *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  id v609;
  const char *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  double v615;
  double v616;
  const char *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  const char *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  const char *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  const char *v632;
  uint64_t v633;
  uint64_t v634;
  const char *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  const char *v645;
  uint64_t v646;
  uint64_t v647;
  void *v648;
  const char *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  void *v654;
  const char *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int isEqualToString;
  const char *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  void *v665;
  const char *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  const char *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  void *v680;
  const char *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  double v686;
  double v687;
  const char *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  double v693;
  BOOL v694;
  const char *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  _BOOL4 v700;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CHScratchOutRecognitionResult *v706;
  const char *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  const char *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  void *v716;
  const char *v717;
  uint64_t v718;
  uint64_t v719;
  const char *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  CGFloat v725;
  CGFloat v726;
  CGFloat v727;
  CGFloat v728;
  CHScratchOutRecognitionResult *v729;
  const char *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  const char *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  void *v739;
  const char *v740;
  uint64_t v741;
  uint64_t v742;
  const char *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  id v748;
  uint64_t *j;
  void *v750;
  CHDrawing *v752;
  id v753;
  float *v754;
  float *v755;
  unsigned int *v756;
  uint64_t *i;
  unint64_t v758;
  id v759;
  void *v760;
  uint64_t v761;
  uint64_t *v762;
  uint64_t *v763;
  uint64_t *v764;
  void *v765;
  unsigned int *v766;
  uint64_t v767;
  void *valuePtr;
  void *v769;
  uint64_t v770;
  id v771;
  id v772;
  id v773;
  id v774;
  void *v775;
  void *v776;
  void *v777;
  void *v778;
  void *v779;
  void *v780;
  char *v781;
  char *v782;
  void *__p;
  int v784[2];
  uint64_t v785;
  CHTriangle *v786;
  void *v787;
  id v788;
  void *v789;
  void *v790;
  void *v791;
  void *v792;
  id v793;
  void *v794;
  void *v795;
  void *v796;
  void *v797;
  int v798;
  void *v799;
  void *v800;
  void *lpsrc;
  float v802;
  float v803;
  float v804[3];
  float64x2x2_t v805;
  CGRect v806;
  CGRect v807;
  CGRect v808;
  CGRect v809;
  CGRect v810;
  CGRect v811;

  v759 = a2;
  v753 = a3;
  if (!a1)
  {
    v748 = 0;
    goto LABEL_378;
  }
  v758 = objc_msgSend__effectiveMaxRecognitionResultCount(a1, v5, v6, v7, v8, v9);
  v765 = 0;
  v766 = 0;
  v767 = 0;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v761 = (uint64_t)a1;
  if (objc_msgSend_strokeCount(v759, v16, v17, v18, v19, v20) <= 10)
    v26 = objc_msgSend_strokeCount(v759, v21, v22, v23, v24, v25);
  else
    v26 = 10;
  objc_msgSend_objectForKeyedSubscript_(v753, v21, CHRecognitionOptionShouldConsumeAllStrokes, v23, v24, v25);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend_BOOLValue(v27, v28, v29, v30, v31, v32);

  if (!v33)
  {
    v39 = 1;
    if (v26 >= 1)
      goto LABEL_7;
LABEL_32:
    objc_msgSend_drawingWithLastStrokes_(v759, v34, 0x7FFFFFFFFFFFFFFFLL, v36, v37, v38);
    goto LABEL_36;
  }
  v39 = objc_msgSend_strokeCount(v759, v34, v35, v36, v37, v38);
  v26 = objc_msgSend_strokeCount(v759, v40, v41, v42, v43, v44);
  if (v39 > v26)
    goto LABEL_32;
LABEL_7:
  v45 = 0;
  v46 = v26 + 1;
  v47 = -1.0;
  v48 = 0x7FFFFFFFFFFFFFFFLL;
  v49 = (CGRect *)MEMORY[0x1E0C9D648];
  v50 = 0xFFFF;
  do
  {
    objc_msgSend_drawingWithLastStrokes_(v759, v34, v39, v36, v37, v38);
    v52 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
    CHNeuralNetwork::ClassifyCHDrawing((uint64_t *)&__p, *(CHNeuralNetwork **)(v761 + 224), v52, *(NSCharacterSet **)(v761 + 216), v758, *v49, 1);
    v53 = __p;
    v51 = *((float *)__p + 1);
    v54 = 0.2;
    if (*(_DWORD *)__p == v50)
      v54 = 0.0;
    if (v51 > (float)(v47 - v54))
      v55 = 1;
    else
      v55 = v33;
    if ((v55 & 1) == 0)
    {
      v51 = v47;
LABEL_9:
      *(_QWORD *)v784 = v53;
      operator delete(v53);
      goto LABEL_10;
    }
    sub_1BE62037C(&v765, (char *)__p, *(char **)v784, (uint64_t)(*(_QWORD *)v784 - (_QWORD)__p) >> 3);
    v50 = *(_DWORD *)v765;
    CHNeuralNetwork::ClassifyCHDrawing((uint64_t *)&valuePtr, *(CHNeuralNetwork **)(v761 + 232), v52, 0, 2uLL, *v49, 1);
    if (*(_DWORD *)valuePtr)
    {
      if (*(_DWORD *)valuePtr != 0xFFFF)
        goto LABEL_24;
      v56 = 0;
      v57 = (float)(*((float *)valuePtr + 1) - *((float *)valuePtr + 3)) > 0.2;
      v58 = (float *)__p;
      if (*(void **)v784 == __p)
        goto LABEL_28;
    }
    else
    {
      if (*((float *)valuePtr + 1) >= 0.85)
      {
LABEL_24:
        v57 = 0;
        v56 = 0;
        v58 = (float *)__p;
        if (*(void **)v784 == __p)
          goto LABEL_28;
        goto LABEL_25;
      }
      v57 = 0;
      v56 = *(_DWORD *)__p == 4098;
      v58 = (float *)__p;
      if (*(void **)v784 == __p)
        goto LABEL_28;
    }
LABEL_25:
    if (*(_DWORD *)v58 == 4106 && v58[1] > 0.98)
    {
      v59 = *((float *)valuePtr + 1) < 0.9;
      goto LABEL_29;
    }
LABEL_28:
    v59 = 0;
LABEL_29:
    v45 = v57 && !v59 || v56;
    v769 = valuePtr;
    operator delete(valuePtr);
    v53 = __p;
    v48 = v39;
    if (__p)
      goto LABEL_9;
LABEL_10:

    ++v39;
    v47 = v51;
  }
  while (v46 != v39);
  if (v45)
  {
    v60 = [CHFreeformRecognitionResult alloc];
    v66 = (void *)objc_msgSend_initWithScore_(v60, v61, v62, v63, v64, v65, 0.0);
    objc_msgSend_insertObject_atIndex_(v15, v67, (uint64_t)v66, 0, v68, v69);

  }
  objc_msgSend_drawingWithLastStrokes_(v759, v34, v48, v36, v37, v38);
LABEL_36:
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_singleStrokeDrawing(v70, v71, v72, v73, v74, v75);
  v760 = (void *)objc_claimAutoreleasedReturnValue();

  v762 = 0;
  v763 = 0;
  v764 = 0;
  v82 = (float *)v765;
  v81 = v766;
  if (v765 == v766)
  {
    i = 0;
    v576 = v761;
    v577 = *(void **)(v761 + 216);
    if (v577)
      goto LABEL_337;
    goto LABEL_354;
  }
  v83 = 0.5;
  v756 = v766;
  while (2)
  {
    v85 = v82[1];
    if (v85 < 2.22507386e-308)
      v85 = 2.22507386e-308;
    v84 = 0;
    v91 = log10(v85);
    v82[1] = v91;
    started = 0;
    switch(*(_DWORD *)v82)
    {
      case 0x1000:
        v93 = v760;
        LODWORD(valuePtr) = 1048576000;
        LODWORD(v780) = 1097859072;
        v94 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWROvalFitToCircleRadiiRatioThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v95 = v94;
        if (!v94
          || ((v96 = CFGetTypeID(v94), v96 != CFNumberGetTypeID())
            ? (Value = 0)
            : (Value = CFNumberGetValue(v95, kCFNumberFloatType, &valuePtr)),
              (CFRelease(v95), !Value) || *(float *)&valuePtr < 0.0 || *(float *)&valuePtr > 0.5))
        {
          LODWORD(valuePtr) = 1048576000;
        }
        v289 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWROvalAlignToIncrementsOf"), CFSTR("com.apple.CoreHandwriting"));
        v290 = v289;
        if (!v289
          || ((v291 = CFGetTypeID(v289), v291 != CFNumberGetTypeID())
            ? (v292 = 0)
            : (v292 = CFNumberGetValue(v290, kCFNumberFloatType, &v780)),
              (CFRelease(v290), !v292) || *(float *)&v780 < 1.0 || *(float *)&v780 > 90.1))
        {
          LODWORD(v780) = 1097859072;
        }
        v361 = operator new();
        *(_QWORD *)(v361 + 88) = 0;
        *(_QWORD *)(v361 + 96) = 0;
        *(_QWORD *)(v361 + 104) = 0;
        *(_QWORD *)(v361 + 216) = 0;
        *(_QWORD *)(v361 + 224) = 0;
        *(_QWORD *)(v361 + 208) = 0;
        *(_QWORD *)(v361 + 120) = 0;
        *(_OWORD *)(v361 + 32) = 0u;
        *(_OWORD *)(v361 + 48) = 0u;
        *(_OWORD *)(v361 + 64) = 0u;
        EllipseRegressor::EllipseRegressor((EllipseRegressor *)&__p, v93, (HTMLog *)v361);
        LODWORD(v793) = fmodf(*(float *)&v793 + 360.0, 360.0);
        v362 = operator new();
        v363 = v362;
        v364 = v787;
        v365 = *(double *)&v788;
        v366 = *(float *)&v792 + *(float *)&v792;
        v367 = (float)(*(float *)&v792 + *(float *)&v792);
        v368 = *((float *)&v792 + 1) + *((float *)&v792 + 1);
        v369 = (float)(*((float *)&v792 + 1) + *((float *)&v792 + 1));
        v370 = *(float *)&v793;
        *(_QWORD *)v362 = &unk_1E77F08B0;
        *(_QWORD *)(v362 + 16) = v364;
        *(double *)(v362 + 24) = v365;
        *(double *)(v362 + 32) = v367;
        *(double *)(v362 + 40) = v369;
        *(double *)(v362 + 48) = v370;
        v371 = fminf(v366, v368) / (fmaxf(v366, v368) + 0.1);
        if ((float)(1.0 - *(float *)&valuePtr) >= v371)
        {
          v373 = round(v370 / *(float *)&v780) * *(float *)&v780;
          v372 = fmodf(v373, 360.0);
        }
        else
        {
          v369 = (v367 + v369) * v83;
          *(double *)(v362 + 32) = v369;
          *(double *)(v362 + 40) = v369;
          v372 = 0.0;
          v367 = v369;
        }
        *(double *)(v363 + 48) = v372;
        v374 = [CHEllipseRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v375, v376, v377, v378);
        v379 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_(v374, v380, (uint64_t)v379, v381, v382, v383, v82[1], v372, *(double *)&v364, v365, v367, v369);

        HTMLog::~HTMLog((HTMLog *)v361);
        MEMORY[0x1C3B812EC]();
        MEMORY[0x1C3B812EC](v363, 0x1081C406FCD2653);

        v84 = 0;
        if (!started)
          goto LABEL_40;
        goto LABEL_39;
      case 0x1001:
        v222 = v760;
        LODWORD(valuePtr) = 1084227584;
        LODWORD(v780) = 1048576000;
        v223 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRLineAlignToAxisThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v224 = v223;
        if (!v223
          || ((v225 = CFGetTypeID(v223), v225 != CFNumberGetTypeID())
            ? (v226 = 0)
            : (v226 = CFNumberGetValue(v224, kCFNumberFloatType, &valuePtr)),
              (CFRelease(v224), !v226) || *(float *)&valuePtr < 0.0 || *(float *)&valuePtr > 40.0))
        {
          LODWORD(valuePtr) = 1084227584;
        }
        v297 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRLineLengthRatioThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v298 = v297;
        if (!v297
          || ((v299 = CFGetTypeID(v297), v299 != CFNumberGetTypeID())
            ? (v300 = 0)
            : (v300 = CFNumberGetValue(v298, kCFNumberFloatType, &v780)),
              (CFRelease(v298), !v300) || *(float *)&v780 < 0.0 || *(float *)&v780 > 0.5))
        {
          LODWORD(v780) = 1048576000;
        }
        v408 = *MEMORY[0x1E0C9D538];
        v409 = *(double *)(MEMORY[0x1E0C9D538] + 8);
        v410 = operator new();
        *(_QWORD *)(v410 + 88) = 0;
        *(_QWORD *)(v410 + 96) = 0;
        *(_QWORD *)(v410 + 104) = 0;
        *(_QWORD *)(v410 + 216) = 0;
        *(_QWORD *)(v410 + 224) = 0;
        *(_QWORD *)(v410 + 208) = 0;
        *(_QWORD *)(v410 + 120) = 0;
        *(_OWORD *)(v410 + 32) = 0u;
        *(_OWORD *)(v410 + 48) = 0u;
        *(_OWORD *)(v410 + 64) = 0u;
        LineRegressor::LineRegressor((LineRegressor *)&__p, v222, (HTMLog *)v410);
        v411 = v794;
        if (!v794)
          goto LABEL_290;
        if (v412)
        {
          v413 = v412;
          (*(void (**)(void *, float, float))(*(_QWORD *)v412 + 8))(v412, *(float *)&valuePtr, *(float *)&v780);
          v414 = (*((_DWORD *)v413 + 8) - 1) < 2;
          v415 = (*((_DWORD *)v413 + 14) - 1) < 2;
          v416 = 0.0;
          if ((int)v800 < v798)
          {
            v417 = (char *)v796 + 40 * (int)v800;
            v419 = *(float64x2_t *)v417;
            v418 = (_OWORD *)((char *)v417 + 40);
            v420 = v419;
            v421 = v798 - (uint64_t)(int)v800;
            do
            {
              v422 = *(float64x2_t *)v418;
              v418 = (_OWORD *)((char *)v418 + 40);
              v423 = vsubq_f64(v420, v422);
              *(float *)v423.f64 = vaddvq_f64(vmulq_f64(v423, v423));
              v416 = v416 + sqrtf(*(float *)v423.f64);
              v420 = v422;
              --v421;
            }
            while (v421);
          }
          v424 = *((double *)v413 + 2);
          v425 = *((double *)v413 + 3);
          v426 = *((double *)v413 + 5);
          v427 = *((double *)v413 + 6);
          v408 = v424 + (v426 - v424) * v83;
          v409 = v425 + (v427 - v425) * v83;
          v428 = (v424 - v426) * (v424 - v426) + (v425 - v427) * (v425 - v427);
          LODWORD(v411) = v416 > (float)(sqrtf(v428) * 1.75);
          MEMORY[0x1C3B812EC](v413, 0x1081C4095753B69);
          v429 = v408;
          v430 = v409;
        }
        else
        {
          if (v444)
          {
            v445 = v444;
            (*(void (**)(void *, float, float))(*(_QWORD *)v444 + 8))(v444, *(float *)&valuePtr, *(float *)&v780);
            v414 = (*((_DWORD *)v445 + 8) - 1) < 2;
            v415 = (*((_DWORD *)v445 + 14) - 1) < 2;
            v446 = 0.0;
            if ((int)v800 < v798)
            {
              v447 = (char *)v796 + 40 * (int)v800;
              v449 = *(float64x2_t *)v447;
              v448 = (_OWORD *)((char *)v447 + 40);
              v450 = v449;
              v451 = v798 - (uint64_t)(int)v800;
              do
              {
                v452 = *(float64x2_t *)v448;
                v448 = (_OWORD *)((char *)v448 + 40);
                v453 = vsubq_f64(v450, v452);
                *(float *)v453.f64 = vaddvq_f64(vmulq_f64(v453, v453));
                v446 = v446 + sqrtf(*(float *)v453.f64);
                v450 = v452;
                --v451;
              }
              while (v451);
            }
            v424 = *((double *)v445 + 2);
            v425 = *((double *)v445 + 3);
            v426 = *((double *)v445 + 5);
            v427 = *((double *)v445 + 6);
            v408 = *((double *)v445 + 8);
            v409 = *((double *)v445 + 9);
            v429 = *((double *)v445 + 10);
            v430 = *((double *)v445 + 11);
            v454 = (v424 - v429) * (v424 - v429) + (v425 - v430) * (v425 - v430);
            v455 = sqrtf(v454) + 0.0;
            v456 = (v426 - v429) * (v426 - v429) + (v427 - v430) * (v427 - v430);
            LODWORD(v411) = v446 > (float)((float)(sqrtf(v456) + v455) * 1.75);
            MEMORY[0x1C3B812EC](v445, 0x1081C404124EDEBLL);
          }
          else
          {
            LODWORD(v411) = 0;
LABEL_290:
            v415 = 0;
            v414 = 0;
            v429 = v408;
            v430 = v409;
            v426 = v408;
            v427 = v409;
            v424 = v408;
            v425 = v409;
          }
        }
        HTMLog::~HTMLog((HTMLog *)v410);
        MEMORY[0x1C3B812EC]();
        if ((_DWORD)v411)
        {
          objc_msgSend_objectForKey_(&unk_1E7827240, v520, (uint64_t)CFSTR("Scribble"), v521, v522, v523);
          v524 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_integerValue(v524, v525, v526, v527, v528, v529);

          v530 = [CHFreeformRecognitionResult alloc];
          v536 = (id)objc_msgSend_initWithScore_(v530, v531, v532, v533, v534, v535, 0.0);
        }
        else
        {
          v536 = 0;
        }
        v537 = [CHLineSketchRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v538, v539, v540, v541);
        v542 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_startLocation_startEndpointType_endLocation_endEndpointType_midPointLocation_controlPointLocation_(v537, v543, (uint64_t)v542, v414, v415, v544, v82[1], 0.0, v424, v425, v426, v427, v429, v430, *(_QWORD *)&v408, *(_QWORD *)&v409);

        v81 = v756;
        if (v796)
        {
          v797 = v796;
          operator delete(v796);
        }

        v83 = 0.5;
        v221 = v536;
        if (v221)
          goto LABEL_297;
        goto LABEL_38;
      case 0x1002:
        v141 = v760;
        LODWORD(valuePtr) = 1097859072;
        v142 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWROutlinedArrowAlignToIncrementsOf"), CFSTR("com.apple.CoreHandwriting"));
        v143 = v142;
        if (!v142
          || ((v144 = CFGetTypeID(v142), v144 != CFNumberGetTypeID())
            ? (v145 = 0)
            : (v145 = CFNumberGetValue(v143, kCFNumberFloatType, &valuePtr)),
              (CFRelease(v143), !v145) || *(float *)&valuePtr < 1.0 || *(float *)&valuePtr > 90.1))
        {
          LODWORD(valuePtr) = 1097859072;
        }
        v268 = operator new();
        *(_QWORD *)(v268 + 88) = 0;
        *(_QWORD *)(v268 + 96) = 0;
        *(_QWORD *)(v268 + 104) = 0;
        *(_QWORD *)(v268 + 216) = 0;
        *(_QWORD *)(v268 + 224) = 0;
        *(_QWORD *)(v268 + 208) = 0;
        *(_QWORD *)(v268 + 120) = 0;
        *(_OWORD *)(v268 + 32) = 0u;
        *(_OWORD *)(v268 + 48) = 0u;
        *(_OWORD *)(v268 + 64) = 0u;
        OutlinedArrowRegressor::OutlinedArrowRegressor((OutlinedArrowRegressor *)&__p, v141, v269);
        v270 = (double *)__p;
        v271 = round(*((double *)__p + 6) / *(float *)&valuePtr) * *(float *)&valuePtr;
        v272 = fmodf(v271, 360.0);
        v270[6] = v272;
        v273 = v270[2];
        v274 = v270[3];
        v275 = v270[4];
        v276 = v270[5];
        v277 = v270[7];
        v278 = v270[8];
        v279 = [CHOutlinedArrowSketchRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v280, v281, v282, v283);
        v284 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_controlPointLocation_(v279, v285, (uint64_t)v284, v286, v287, v288, v82[1], -v272, v273, v274, v275, v276, v277, v278);

        HTMLog::~HTMLog((HTMLog *)v268);
        MEMORY[0x1C3B812EC]();
        MEMORY[0x1C3B812EC](v270, 0x1081C40A676C7A5);
        v84 = 0;
        v83 = 0.5;

        if (!started)
          goto LABEL_40;
        goto LABEL_39;
      case 0x1003:
        v136 = v760;
        LODWORD(valuePtr) = 1084227584;
        LODWORD(v780) = 1048576000;
        v804[0] = 0.1;
        v137 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRTriangleAlignToAxisThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v138 = v137;
        if (!v137
          || ((v139 = CFGetTypeID(v137), v139 != CFNumberGetTypeID())
            ? (v140 = 0)
            : (v140 = CFNumberGetValue(v138, kCFNumberFloatType, &valuePtr)),
              (CFRelease(v138), !v140) || *(float *)&valuePtr < 0.0 || *(float *)&valuePtr > 40.0))
        {
          LODWORD(valuePtr) = 1084227584;
        }
        v264 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRTriangleIsoscelesLengthRatioThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v265 = v264;
        if (!v264
          || ((v266 = CFGetTypeID(v264), v266 != CFNumberGetTypeID())
            ? (v267 = 0)
            : (v267 = CFNumberGetValue(v265, kCFNumberFloatType, &v780)),
              (CFRelease(v265), !v267) || *(float *)&v780 < 0.0 || *(float *)&v780 > 0.5))
        {
          LODWORD(v780) = 1048576000;
        }
        v357 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRTriangleEquilateralLengthRatioThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v358 = v357;
        if (!v357
          || ((v359 = CFGetTypeID(v357), v359 != CFNumberGetTypeID())
            ? (v360 = 0)
            : (v360 = CFNumberGetValue(v358, kCFNumberFloatType, v804)),
              (CFRelease(v358), !v360) || v804[0] < 0.0 || v804[0] > 0.3))
        {
          v804[0] = 0.1;
        }
        v431 = operator new();
        *(_QWORD *)(v431 + 88) = 0;
        *(_QWORD *)(v431 + 96) = 0;
        *(_QWORD *)(v431 + 104) = 0;
        *(_QWORD *)(v431 + 216) = 0;
        *(_QWORD *)(v431 + 224) = 0;
        *(_QWORD *)(v431 + 208) = 0;
        *(_QWORD *)(v431 + 120) = 0;
        *(_OWORD *)(v431 + 32) = 0u;
        *(_OWORD *)(v431 + 48) = 0u;
        *(_OWORD *)(v431 + 64) = 0u;
        TriangleRegressor::TriangleRegressor((TriangleRegressor *)&__p, v136, v432, *(float *)&valuePtr, *(float *)&valuePtr, *(float *)&v780, v804[0]);
        v433 = (double *)v786;
        CHTriangle::alignToAxis(v786);
        v434 = [CHTriangleRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v435, v436, v437, v438);
        v439 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_vertex1_vertex2_vertex3_(v434, v440, (uint64_t)v439, v441, v442, v443, v82[1], 0.0, v433[10], v433[11], v433[12], v433[13], v433[14], v433[15]);

        HTMLog::~HTMLog((HTMLog *)v431);
        MEMORY[0x1C3B812EC]();
        v254 = v433;
        v255 = -2070539221;
        goto LABEL_223;
      case 0x1004:
        v183 = v760;
        LODWORD(valuePtr) = 1048576000;
        LODWORD(v780) = 1097859072;
        v184 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRRectangleFitToSquareLengthRatioThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v185 = v184;
        if (!v184
          || ((v186 = CFGetTypeID(v184), v186 != CFNumberGetTypeID())
            ? (v187 = 0)
            : (v187 = CFNumberGetValue(v185, kCFNumberFloatType, &valuePtr)),
              (CFRelease(v185), !v187) || *(float *)&valuePtr < 0.0 || *(float *)&valuePtr > 0.5))
        {
          LODWORD(valuePtr) = 1048576000;
        }
        v293 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRRectangleAlignToIncrementsOf"), CFSTR("com.apple.CoreHandwriting"));
        v294 = v293;
        if (!v293
          || ((v295 = CFGetTypeID(v293), v295 != CFNumberGetTypeID())
            ? (v296 = 0)
            : (v296 = CFNumberGetValue(v294, kCFNumberFloatType, &v780)),
              (CFRelease(v294), !v296) || *(float *)&v780 < 1.0 || *(float *)&v780 > 90.1))
        {
          LODWORD(v780) = 1097859072;
        }
        v384 = operator new();
        *(_QWORD *)(v384 + 88) = 0;
        *(_QWORD *)(v384 + 96) = 0;
        *(_QWORD *)(v384 + 104) = 0;
        *(_QWORD *)(v384 + 216) = 0;
        *(_QWORD *)(v384 + 224) = 0;
        *(_QWORD *)(v384 + 208) = 0;
        *(_QWORD *)(v384 + 120) = 0;
        *(_OWORD *)(v384 + 32) = 0u;
        *(_OWORD *)(v384 + 48) = 0u;
        *(_OWORD *)(v384 + 64) = 0u;
        RectangleRegressor::RectangleRegressor((RectangleRegressor *)&__p, v183, v385);
        v386 = v786;
        v388 = *((double *)v786 + 4);
        v387 = *((double *)v786 + 5);
        v389 = v388;
        v390 = v387;
        v391 = fminf(v389, v390) / (fmaxf(v389, v390) + 0.1);
        if ((float)(1.0 - *(float *)&valuePtr) < v391)
        {
          v387 = (v388 + v387) * v83;
          *((double *)v786 + 4) = v387;
          *((double *)v386 + 5) = v387;
          v388 = v387;
        }
        v392 = round(*((double *)v386 + 6) / *(float *)&v780) * *(float *)&v780;
        v393 = fmodf(v392, 360.0);
        *((double *)v386 + 6) = v393;
        *(float *)&v393 = v393 * 3.14159265 / 180.0;
        v394 = __sincosf_stret(*(float *)&v393);
        v396 = *((double *)v386 + 2);
        v395 = *((double *)v386 + 3);
        v397 = [CHRectangleSketchRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v398, v399, v400, v401);
        v402 = (void *)objc_claimAutoreleasedReturnValue();
        v403 = v396 - v388 * v83 * v394.__cosval;
        started = (id)objc_msgSend_initWithString_score_rotation_upperLeftPoint_upperRightPoint_lowerLeftPoint_lowerRightPoint_size_(v397, v404, (uint64_t)v402, v405, v406, v407, v82[1], *((double *)v386 + 6), v403 - v387 * v83 * v394.__sinval, v395 - v388 * v83 * v394.__sinval + v387 * v83 * v394.__cosval, v396 + v388 * v83 * v394.__cosval - v387 * v83 * v394.__sinval, v395 + v388 * v83 * v394.__sinval + v387 * v83 * v394.__cosval, v403 + v387 * v83 * v394.__sinval, v395 - v388 * v83 * v394.__sinval - v387 * v83 * v394.__cosval, v396 + v388 * v83 * v394.__cosval + v387 * v83 * v394.__sinval, v395 + v388 * v83 * v394.__sinval - v387 * v83 * v394.__cosval, *((_QWORD *)v386 + 4), *((_QWORD *)v386 + 5));

        HTMLog::~HTMLog((HTMLog *)v384);
        MEMORY[0x1C3B812EC]();
        MEMORY[0x1C3B812EC](v386, 0x1081C406FCD2653);
        __p = &off_1E77F0778;
        if (v785)
          MEMORY[0x1C3B812C8](v785, 0x1000C8052888210);
        v84 = 0;

        if (!started)
          goto LABEL_40;
        goto LABEL_39;
      case 0x1005:
        v123 = v760;
        v124 = operator new();
        *(_QWORD *)(v124 + 88) = 0;
        *(_QWORD *)(v124 + 96) = 0;
        *(_QWORD *)(v124 + 104) = 0;
        *(_QWORD *)(v124 + 216) = 0;
        *(_QWORD *)(v124 + 224) = 0;
        *(_QWORD *)(v124 + 208) = 0;
        *(_QWORD *)(v124 + 120) = 0;
        *(_OWORD *)(v124 + 32) = 0u;
        *(_OWORD *)(v124 + 48) = 0u;
        *(_OWORD *)(v124 + 64) = 0u;
        PentagonRegressor::PentagonRegressor((PentagonRegressor *)&__p, v123, (HTMLog *)v124);
        v125 = *(double **)v784;
        v126 = [CHPentagonRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v127, v128, v129, v130);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_(v126, v132, (uint64_t)v131, v133, v134, v135, v82[1], v125[6], v125[2], v125[3], v125[4], v125[5]);

        HTMLog::~HTMLog((HTMLog *)v124);
        MEMORY[0x1C3B812EC]();
        MEMORY[0x1C3B812EC](v125, 0x1081C406FCD2653);
        if (v790)
        {
          v791 = v790;
          operator delete(v790);
        }
        if (v787)
        {
          v788 = v787;
          operator delete(v787);
        }

        v84 = 0;
        if (!started)
          goto LABEL_40;
        goto LABEL_39;
      case 0x1006:
      case 0x1008:
        goto LABEL_40;
      case 0x1007:
        v118 = v760;
        v803 = 0.25;
        v804[0] = 5.0;
        v752 = v118;
        v119 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRLineAlignToAxisThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v120 = v119;
        if (!v119
          || ((v121 = CFGetTypeID(v119), v121 != CFNumberGetTypeID())
            ? (v122 = 0)
            : (v122 = CFNumberGetValue(v120, kCFNumberFloatType, v804)),
              (CFRelease(v120), !v122) || v804[0] < 0.0 || v804[0] > 40.0))
        {
          v804[0] = 5.0;
        }
        v256 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("HWRLineLengthRatioThreshold"), CFSTR("com.apple.CoreHandwriting"));
        v261 = v256;
        if (!v256
          || ((v262 = CFGetTypeID(v256), v262 != CFNumberGetTypeID())
            ? (v263 = 0)
            : (v263 = CFNumberGetValue(v261, kCFNumberFloatType, &v803)),
              (CFRelease(v261), !v263) || (*(float *)&v260 = v803, v803 < 0.0) || v803 > 0.5))
        {
          v803 = 0.25;
        }
        objc_msgSend_pointForStrokeIndex_pointIndex_(v118, v257, 0, 0, v258, v259, v260);
        v306 = objc_msgSend_pointCount(v118, v301, v302, v303, v304, v305);
        objc_msgSend_pointForStrokeIndex_pointIndex_(v118, v307, 0, v306 - 1, v308, v309);
        objc_msgSend_bounds(v118, v310, v311, v312, v313, v314);
        v316 = v315;
        v318 = v317;
        v319 = operator new();
        *(_QWORD *)(v319 + 88) = 0;
        *(_QWORD *)(v319 + 96) = 0;
        *(_QWORD *)(v319 + 104) = 0;
        *(_QWORD *)(v319 + 216) = 0;
        *(_QWORD *)(v319 + 224) = 0;
        *(_QWORD *)(v319 + 208) = 0;
        *(_QWORD *)(v319 + 120) = 0;
        *(_OWORD *)(v319 + 32) = 0u;
        *(_OWORD *)(v319 + 48) = 0u;
        *(_OWORD *)(v319 + 64) = 0u;
        ManhattanLineRegressor::ManhattanLineRegressor((ManhattanLineRegressor *)&__p, v118, (HTMLog *)v319, 1);
        if (lpsrc)
          v320 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E77F0058, (const struct __class_type_info *)&unk_1E77EFFE0, 0);
        else
          v320 = 0;
        (*(void (**)(double *, float, float))(*(_QWORD *)v320 + 8))(v320, v804[0], v803);
        v327 = v320[2];
        v328 = v320[3];
        v329 = v320[5];
        v330 = v320[6];
        v780 = 0;
        v781 = 0;
        v782 = 0;
        v332 = (_BYTE *)*((_QWORD *)v320 + 8);
        v331 = (_BYTE *)*((_QWORD *)v320 + 9);
        v333 = v331 - v332;
        v754 = v82;
        if (v331 == v332)
        {
          v334 = 0;
          v335 = 0;
          v336 = 0;
          v337 = 0;
          v338 = 1;
        }
        else
        {
          if (v333 < 0)
            sub_1BE61F930();
          v334 = (char *)operator new(v331 - v332);
          v335 = &v334[16 * (v333 >> 4)];
          v780 = v334;
          v782 = v335;
          memcpy(v334, v332, v333);
          v781 = v335;
          v336 = 16 * (v333 >> 4);
          v337 = v336 >> 4;
          v338 = (v336 >> 4) + 1;
          if (v338 >> 60)
LABEL_379:
            sub_1BE61F930();
        }
        if (v336 >> 3 > v338)
          v338 = v336 >> 3;
        if ((unint64_t)v336 >= 0x7FFFFFFFFFFFFFF0)
          v339 = 0xFFFFFFFFFFFFFFFLL;
        else
          v339 = v338;
        if (v339)
        {
          if (v339 >> 60)
            goto LABEL_382;
          v340 = (char *)operator new(16 * v339);
          v341 = (HTMLog *)v319;
          v342 = (double *)&v340[16 * v337];
          *v342 = v327;
          v342[1] = v328;
          v343 = v342;
          if (v335 != v334)
          {
LABEL_160:
            v343 = (double *)&v340[v336 & 0xF];
            memcpy(v343, &v335[-(v336 & 0xFFFFFFFFFFFFFFF0)], v336 & 0xFFFFFFFFFFFFFFF0);
          }
        }
        else
        {
          v341 = (HTMLog *)v319;
          v340 = 0;
          v342 = (double *)(16 * v337);
          *v342 = v327;
          v342[1] = v328;
          v343 = v342;
          if (v335 != v334)
            goto LABEL_160;
        }
        v344 = &v340[16 * v339];
        v345 = (char *)(v342 + 2);
        v780 = v343;
        v781 = (char *)(v342 + 2);
        v782 = v344;
        if (v334)
        {
          operator delete(v334);
          v344 = v782;
        }
        v781 = (char *)(v342 + 2);
        if (v345 < v344)
        {
          v342[2] = v329;
          v342[3] = v330;
          v781 = (char *)(v342 + 4);
          v346 = (char *)v780;
          v347 = (char *)(v342 + 4) - (_BYTE *)v780;
          if (v342 + 4 == v780)
            goto LABEL_165;
          goto LABEL_235;
        }
        v351 = (char *)v780;
        v352 = (v345 - (_BYTE *)v780) >> 4;
        v353 = v352 + 1;
        if ((unint64_t)(v352 + 1) >> 60)
          goto LABEL_379;
        v354 = v344 - (_BYTE *)v780;
        if (v354 >> 3 > v353)
          v353 = v354 >> 3;
        if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFF0)
          v355 = 0xFFFFFFFFFFFFFFFLL;
        else
          v355 = v353;
        if (v355)
        {
          if (v355 >> 60)
LABEL_382:
            sub_1BE61F100();
          v356 = (char *)operator new(16 * v355);
        }
        else
        {
          v356 = 0;
        }
        v457 = (double *)&v356[16 * v352];
        v458 = &v356[16 * v355];
        *v457 = v329;
        v457[1] = v330;
        v459 = (char *)(v457 + 2);
        if (v345 == v351)
        {
          v780 = &v356[16 * v352];
          v781 = (char *)(v457 + 2);
          v782 = v458;
        }
        else
        {
          do
          {
            v326 = *((_OWORD *)v345 - 1);
            *((_OWORD *)v457 - 1) = v326;
            v457 -= 2;
            v345 -= 16;
          }
          while (v345 != v351);
          v345 = (char *)v780;
          v780 = v457;
          v781 = v459;
          v782 = v458;
          if (!v345)
          {
            v781 = v459;
            v346 = (char *)v780;
            v347 = v459 - (_BYTE *)v780;
            if (v459 == v780)
              goto LABEL_165;
            goto LABEL_235;
          }
        }
        operator delete(v345);
        v781 = v459;
        v346 = (char *)v780;
        v347 = v459 - (_BYTE *)v780;
        if (v459 == v780)
        {
LABEL_165:
          v348 = 0.0;
          v349 = -3.4028e38;
          v350 = 3.4028e38;
          goto LABEL_248;
        }
LABEL_235:
        v460 = v347 >> 4;
        if (v460 <= 1)
          v460 = 1;
        v461 = (double *)(v346 + 8);
        v348 = 0.0;
        v462 = 3.4028e38;
        v463 = 0.0;
        v350 = 3.4028e38;
        do
        {
          v464 = *(v461 - 1);
          if (v464 > v463)
            v463 = v464;
          if (v464 < v462)
            v462 = v464;
          v465 = *v461;
          v461 += 2;
          v466 = v465;
          v467 = v465;
          if (v465 > v348)
            v348 = v467;
          if (v466 < v350)
            v350 = v467;
          --v460;
        }
        while (v460);
        v349 = v463 - v462;
LABEL_248:
        v468 = v349;
        v469 = v316 - v468;
        v470 = v348 - v350;
        v471 = v318 - v470;
        v472 = fabsf(v471);
        if (v468 * v83 < fabsf(v469) || v470 < v472)
        {
          *(float *)&v326 = v802;
          if (v802 >= 0.0)
          {
            ManhattanLineRegressor::ManhattanLineRegressor((ManhattanLineRegressor *)&valuePtr, v752, v341, 0);
            if (v779)
              v486 = (double *)__dynamic_cast(v779, (const struct __class_type_info *)&unk_1E77F0058, (const struct __class_type_info *)&unk_1E77EFFE0, 0);
            else
              v486 = 0;
            (*(void (**)(double *, float, float))(*(_QWORD *)v486 + 8))(v486, v804[0], v803);
            v327 = v486[2];
            v328 = v486[3];
            v329 = v486[5];
            v330 = v486[6];
            *(_QWORD *)v320 = &unk_1E77F0720;
            v494 = (void *)*((_QWORD *)v320 + 8);
            if (v494)
            {
              *((_QWORD *)v320 + 9) = v494;
              operator delete(v494);
            }
            MEMORY[0x1C3B812EC](v320, 0x10A1C4053507AA1);
            if (v777)
            {
              v778 = v777;
              operator delete(v777);
            }
            if (v775)
            {
              v776 = v775;
              operator delete(v775);
            }

            v181 = 0;
            valuePtr = 0;
            v769 = 0;
            v770 = 0;
            v488 = (_BYTE *)*((_QWORD *)v486 + 8);
            v495 = (_BYTE *)*((_QWORD *)v486 + 9);
            v489 = v495 - v488;
            if (v495 == v488)
            {
LABEL_255:
              v490 = 0;
              v491 = 0;
              v492 = (char *)v780;
              if (!v780)
                goto LABEL_275;
LABEL_274:
              v781 = v492;
              operator delete(v492);
              goto LABEL_275;
            }
          }
          else
          {
            objc_msgSend_objectForKey_(&unk_1E7827240, v321, (uint64_t)CFSTR("Scribble"), v323, v324, v325, *(double *)&v326);
            v474 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_integerValue(v474, v475, v476, v477, v478, v479);

            v480 = [CHFreeformRecognitionResult alloc];
            v181 = (id)objc_msgSend_initWithScore_(v480, v481, v482, v483, v484, v485, 0.0);
            v486 = v320;
            valuePtr = 0;
            v769 = 0;
            v770 = 0;
            v488 = (_BYTE *)*((_QWORD *)v320 + 8);
            v487 = (_BYTE *)*((_QWORD *)v320 + 9);
            v489 = v487 - v488;
            if (v487 == v488)
              goto LABEL_255;
          }
        }
        else
        {
          v181 = 0;
          v486 = v320;
          valuePtr = 0;
          v769 = 0;
          v770 = 0;
          v488 = (_BYTE *)*((_QWORD *)v320 + 8);
          v493 = (_BYTE *)*((_QWORD *)v320 + 9);
          v489 = v493 - v488;
          if (v493 == v488)
            goto LABEL_255;
        }
        if (v489 < 0)
          sub_1BE61F930();
        v491 = (char *)operator new(v489);
        v490 = &v491[16 * (v489 >> 4)];
        memcpy(v491, v488, v489);
        v492 = (char *)v780;
        if (v780)
          goto LABEL_274;
LABEL_275:
        v780 = v491;
        v781 = v490;
        v782 = v490;
        objc_msgSend_array(MEMORY[0x1E0C99DE8], v321, v322, v323, v324, v325);
        v501 = (void *)objc_claimAutoreleasedReturnValue();
        v502 = (char *)v780;
        if (v781 != v780)
        {
          v503 = 0;
          v504 = 0;
          do
          {
            objc_msgSend_valueWithPoint_(MEMORY[0x1E0CB3B18], v496, v497, v498, v499, v500, *(double *)&v502[v503], *(double *)&v502[v503 + 8]);
            v505 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v501, v506, (uint64_t)v505, v507, v508, v509);

            ++v504;
            v502 = (char *)v780;
            v503 += 16;
          }
          while (v504 < (v781 - (_BYTE *)v780) >> 4);
        }
        v510 = (*((_DWORD *)v486 + 8) - 1) < 2;
        v511 = (*((_DWORD *)v486 + 14) - 1) < 2;
        HTMLog::~HTMLog(v341);
        MEMORY[0x1C3B812EC]();
        *(_QWORD *)v486 = &unk_1E77F0720;
        v512 = (void *)*((_QWORD *)v486 + 8);
        if (v512)
        {
          *((_QWORD *)v486 + 9) = v512;
          operator delete(v512);
        }
        MEMORY[0x1C3B812EC](v486, 0x10A1C4053507AA1);
        v82 = v754;
        v513 = [CHManhattanLineSketchRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v754, v514, v515, v516, v517);
        v518 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_startLocation_startEndpointType_endLocation_endEndpointType_midPointLocation_controlPointLocation_pathPoints_(v513, v519, (uint64_t)v518, v510, v511, (uint64_t)v501, v754[1], 0.0, v327, v328, v329, v330, v327 + (v329 - v327) * v83, v328 + (v330 - v328) * v83);

        v81 = v756;
        if (v780)
        {
          v781 = (char *)v780;
          operator delete(v780);
        }
        if (v799)
        {
          v800 = v799;
          operator delete(v799);
        }
        if (v795)
        {
          v796 = v795;
          operator delete(v795);
        }

LABEL_287:
        v221 = v181;
        if (!v221)
        {
LABEL_38:
          v84 = 0;
          if (!started)
            goto LABEL_40;
LABEL_39:
          objc_msgSend_addObject_(v15, v114, (uint64_t)started, v115, v116, v117);
          goto LABEL_40;
        }
LABEL_297:
        v545 = v221;
        objc_opt_class();
        v546 = objc_claimAutoreleasedReturnValue();
        v547 = v545;
        v84 = v547;
        v548 = (id *)v763;
        if (v763 < v764)
        {
          *v763 = v546;
          v763[1] = (uint64_t)v547;
          v549 = v763 + 2;
          goto LABEL_315;
        }
        v755 = v82;
        v550 = (id *)v762;
        v551 = (char *)((char *)v763 - (char *)v762);
        v552 = ((char *)v763 - (char *)v762) >> 4;
        v553 = v552 + 1;
        if ((unint64_t)(v552 + 1) >> 60)
          sub_1BE61F930();
        v554 = (char *)v764 - (char *)v762;
        if (v764 - v762 > v553)
          v553 = v554 >> 3;
        if ((unint64_t)v554 >= 0x7FFFFFFFFFFFFFF0)
          v555 = 0xFFFFFFFFFFFFFFFLL;
        else
          v555 = v553;
        if (v555 >> 60)
          sub_1BE61F100();
        v556 = (char *)operator new(16 * v555);
        v557 = (uint64_t *)&v556[16 * v552];
        *v557 = v546;
        v557[1] = (uint64_t)v84;
        v549 = v557 + 2;
        v558 = (char *)((char *)v763 - (char *)v762);
        if (v763 == v762)
        {
          v762 = v557;
          v764 = (uint64_t *)&v556[16 * v555];
          v82 = v755;
          if (v763)
            goto LABEL_314;
          goto LABEL_315;
        }
        v559 = v558 - 16;
        if ((unint64_t)(v558 - 16) < 0xB0
          || ((v564 = ((char *)(v763 - 2) - (char *)v762) & 0xFFFFFFFFFFFFFFF0,
               v565 = (unint64_t)v763 - v564 - 16,
               v566 = (unint64_t)&v551[(_QWORD)v556 - v564 - 16],
               (uint64_t *)((char *)v763 - v564 - 8) < v557)
            ? (v567 = &v551[(_QWORD)(v556 - 8) - v564] >= (char *)v763)
            : (v567 = 1),
              v567 ? (v568 = 0) : (v568 = 1),
              v566 < (unint64_t)(v763 - 1) ? (v569 = (char *)v565 >= &v551[(_QWORD)(v556 - 8)]) : (v569 = 1),
              !v569))
        {
          v560 = v763;
          v82 = v755;
LABEL_309:
          v561 = v557;
          do
          {
            v562 = *((_OWORD *)v560 - 1);
            v560 -= 2;
            *v560 = 0;
            v560[1] = 0;
            *((_OWORD *)v561 - 1) = v562;
            v561 -= 2;
          }
          while (v560 != v762);
          goto LABEL_311;
        }
        v560 = v763;
        v82 = v755;
        if ((v568 & 1) != 0)
          goto LABEL_309;
        v570 = ((unint64_t)v559 >> 4) + 1;
        v571 = 16 * (v570 & 0x1FFFFFFFFFFFFFFELL);
        v561 = &v557[v571 / 0xFFFFFFFFFFFFFFF8];
        v560 = &v763[v571 / 0xFFFFFFFFFFFFFFF8];
        v572 = (double *)(v557 - 4);
        v573 = (const double *)(v763 - 4);
        v574 = v570 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v805 = vld2q_f64(v573);
          *(_OWORD *)v573 = 0uLL;
          *((_OWORD *)v573 + 1) = 0uLL;
          v573 -= 4;
          vst2q_f64(v572, v805);
          v572 -= 4;
          v574 -= 2;
        }
        while (v574);
        v557 = v561;
        if (v570 != (v570 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_309;
LABEL_311:
        v762 = v561;
        v764 = (uint64_t *)&v556[16 * v555];
        do
        {

          v563 = *(v548 - 2);
          v548 -= 2;

        }
        while (v548 != v550);
        v548 = v550;
        if (v550)
LABEL_314:
          operator delete(v548);
LABEL_315:
        v763 = v549;
        v81 = v756;

        if (started)
          goto LABEL_39;
LABEL_40:

        v82 += 2;
        if (v82 != (float *)v81)
          continue;
        v575 = v762;
        for (i = v762; v575 != v763; v575 += 2)
        {
          v590 = *v575;
          v596 = objc_opt_class();
          v597 = 0;
          v598 = -1;
          v599 = -1;
          while (objc_msgSend_count(v15, v591, v592, v593, v594, v595) > v597)
          {
            objc_msgSend_objectAtIndex_(v15, v76, v597, v78, v79, v80);
            v600 = (void *)objc_claimAutoreleasedReturnValue();
            v601 = objc_opt_class();

            if (v590 == v601)
            {
              v599 = v597++;
            }
            else
            {
              objc_msgSend_objectAtIndex_(v15, v591, v597, v593, v594, v595);
              v602 = (void *)objc_claimAutoreleasedReturnValue();
              v603 = objc_opt_class();

              if (v596 == v603)
                v598 = v597;
              ++v597;
            }
          }
          if (v599 < 0 || v599 >= v598)
          {
            if (v599 || v598 != -1)
              continue;
            objc_msgSend_objectAtIndex_(v15, v76, 0, v78, v79, v80);
            v604 = (void *)objc_claimAutoreleasedReturnValue();
            v609 = (id)v575[1];
            objc_msgSend_score(v604, v635, v636, v637, v638, v639);
            objc_msgSend_setScore_(v609, v640, v641, v642, v643, v644);
            objc_msgSend_insertObject_atIndex_(v15, v645, (uint64_t)v609, 0, v646, v647);
          }
          else
          {
            objc_msgSend_objectAtIndex_(v15, v76, v599, v78, v79, v80);
            v604 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectAtIndex_(v15, v605, v598, v606, v607, v608);
            v609 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend_score(v609, v610, v611, v612, v613, v614);
            v616 = v615;
            objc_msgSend_score(v604, v617, v618, v619, v620, v621);
            objc_msgSend_setScore_(v609, v622, v623, v624, v625, v626);
            objc_msgSend_setScore_(v604, v627, v628, v629, v630, v631, v616);
            objc_msgSend_exchangeObjectAtIndex_withObjectAtIndex_(v15, v632, v599, v598, v633, v634);
          }

        }
        v576 = v761;
        v577 = *(void **)(v761 + 216);
        if (v577)
        {
LABEL_337:
          objc_msgSend_objectForKey_(&unk_1E7827240, v76, (uint64_t)CFSTR("ScratchOut"), v78, v79, v80);
          v578 = (void *)objc_claimAutoreleasedReturnValue();
          v584 = objc_msgSend_integerValue(v578, v579, v580, v581, v582, v583);
          IsMember = objc_msgSend_characterIsMember_(v577, v585, v584, v586, v587, v588);

          goto LABEL_355;
        }
LABEL_354:
        IsMember = 1;
LABEL_355:
        objc_msgSend_firstObject(v15, v76, v77, v78, v79, v80);
        v648 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(v648, v649, v650, v651, v652, v653);
        v654 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v654, v655, (uint64_t)CFSTR("Freeform"), v656, v657, v658);

        objc_msgSend_string(v648, v660, v661, v662, v663, v664);
        v665 = (void *)objc_claimAutoreleasedReturnValue();
        v670 = objc_msgSend_isEqualToString_(v665, v666, (uint64_t)CFSTR("Manhattan Line"), v667, v668, v669);

        if ((IsMember & isEqualToString) == 1)
        {
          if ((unint64_t)objc_msgSend_count(v15, v671, v672, v673, v674, v675) < 2)
          {
            v694 = 1;
          }
          else
          {
            objc_msgSend_objectAtIndexedSubscript_(v15, v676, 1, v677, v678, v679);
            v680 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_score(v680, v681, v682, v683, v684, v685);
            v687 = v686;
            objc_msgSend_score(v648, v688, v689, v690, v691, v692);
            v694 = vabdd_f64(v687, v693) > 0.4;

          }
          objc_msgSend_setDrawing_(*(void **)(v576 + 240), v676, (uint64_t)v760, v677, v678, v679);
          v700 = v694
              || (unint64_t)objc_msgSend_directionChangeCount(*(void **)(v576 + 240), v695, v696, v697, v698, v699) > 1;
          if (objc_msgSend_indexOfObjectPassingTest_(v15, v695, (uint64_t)&unk_1E77F14D0, v697, v698, v699) && v700)
          {
            objc_msgSend_bounds(v760, v671, v672, v673, v674, v675);
            x = v808.origin.x;
            y = v808.origin.y;
            width = v808.size.width;
            height = v808.size.height;
            CGRectGetMidX(v808);
            v809.origin.x = x;
            v809.origin.y = y;
            v809.size.width = width;
            v809.size.height = height;
            CGRectGetMidY(v809);
            v706 = [CHScratchOutRecognitionResult alloc];
            objc_msgSend_score(v648, v707, v708, v709, v710, v711);
            v716 = (void *)objc_msgSend_initWithString_score_rotation_center_size_(v706, v712, (uint64_t)CFSTR("ScratchOut"), v713, v714, v715);
            objc_msgSend_insertObject_atIndex_(v15, v717, (uint64_t)v716, 0, v718, v719);

          }
        }
        if ((IsMember & v670) == 1)
        {
          objc_msgSend_setDrawing_(*(void **)(v576 + 240), v671, (uint64_t)v760, v673, v674, v675);
          if ((unint64_t)objc_msgSend_directionChangeCount(*(void **)(v576 + 240), v720, v721, v722, v723, v724) >= 5)
          {
            objc_msgSend_bounds(v760, v671, v672, v673, v674, v675);
            v725 = v810.origin.x;
            v726 = v810.origin.y;
            v727 = v810.size.width;
            v728 = v810.size.height;
            CGRectGetMidX(v810);
            v811.origin.x = v725;
            v811.origin.y = v726;
            v811.size.width = v727;
            v811.size.height = v728;
            CGRectGetMidY(v811);
            v729 = [CHScratchOutRecognitionResult alloc];
            objc_msgSend_score(v648, v730, v731, v732, v733, v734);
            v739 = (void *)objc_msgSend_initWithString_score_rotation_center_size_(v729, v735, (uint64_t)CFSTR("ScratchOut"), v736, v737, v738);
            objc_msgSend_insertObject_atIndex_(v15, v740, (uint64_t)v739, 0, v741, v742);

          }
        }
        if (objc_msgSend_count(v15, v671, v672, v673, v674, v675) > v758)
          objc_msgSend_removeLastObject(v15, v743, v744, v745, v746, v747);
        v748 = v15;

        if (i)
        {
          for (j = v763; j != i; j -= 2)
          {

            v750 = (void *)*(j - 2);
          }
          operator delete(i);
        }

        if (v765)
        {
          v766 = (unsigned int *)v765;
          operator delete(v765);
        }
LABEL_378:

        return v748;
      case 0x1009:
        v146 = v760;
        v147 = operator new();
        *(_QWORD *)(v147 + 88) = 0;
        *(_QWORD *)(v147 + 96) = 0;
        *(_QWORD *)(v147 + 104) = 0;
        *(_QWORD *)(v147 + 216) = 0;
        *(_QWORD *)(v147 + 224) = 0;
        *(_QWORD *)(v147 + 208) = 0;
        *(_QWORD *)(v147 + 120) = 0;
        *(_OWORD *)(v147 + 32) = 0u;
        *(_OWORD *)(v147 + 48) = 0u;
        *(_OWORD *)(v147 + 64) = 0u;
        ChatBubbleRegressor::ChatBubbleRegressor((ChatBubbleRegressor *)&__p, v146, v148);
        v149 = v788;
        v150 = [CHChatBubbleRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v151, v152, v153, v154);
        v155 = (void *)objc_claimAutoreleasedReturnValue();
        v156 = (double *)*((_QWORD *)v149 + 5);
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_stemLocation_stemWidth_(v150, v157, (uint64_t)v155, v158, v159, v160, v82[1], v156[6], v156[2], v156[3], v156[4], v156[5], *((double *)v149 + 2), *((double *)v149 + 3), *((_QWORD *)v149 + 4));

        HTMLog::~HTMLog((HTMLog *)v147);
        MEMORY[0x1C3B812EC]();
        *(_QWORD *)v149 = &unk_1E77F06E8;
        v161 = *((_QWORD *)v149 + 5);
        if (v161)
          MEMORY[0x1C3B812EC](v161, 0x1081C406FCD2653);
        MEMORY[0x1C3B812EC](v149, 0x10A1C40547AA8FDLL);
        objc_msgSend_cumulativePointToPointDistance(v146, v162, v163, v164, v165, v166);
        v168 = v167;
        objc_msgSend_distanceBetweenFirstAndLastPoint(v146, v169, v170, v171, v172, v173);
        if (v168 >= (float)(v174 * 1.3))
        {
          v181 = 0;
          __p = &unk_1E77F0798;
          v182 = v792;
          if (!v792)
            goto LABEL_88;
        }
        else
        {
          v175 = [CHFreeformRecognitionResult alloc];
          v181 = (id)objc_msgSend_initWithScore_(v175, v176, v177, v178, v179, v180, 0.0);
          __p = &unk_1E77F0798;
          v182 = v792;
          if (!v792)
            goto LABEL_88;
        }
        v793 = v182;
        operator delete(v182);
LABEL_88:
        if (v789)
        {
          v790 = v789;
          operator delete(v789);
        }
        goto LABEL_287;
      case 0x100A:
        v136 = v760;
        v242 = operator new();
        *(_QWORD *)(v242 + 88) = 0;
        *(_QWORD *)(v242 + 96) = 0;
        *(_QWORD *)(v242 + 104) = 0;
        *(_QWORD *)(v242 + 216) = 0;
        *(_QWORD *)(v242 + 224) = 0;
        *(_QWORD *)(v242 + 208) = 0;
        *(_QWORD *)(v242 + 120) = 0;
        *(_OWORD *)(v242 + 32) = 0u;
        *(_OWORD *)(v242 + 48) = 0u;
        *(_OWORD *)(v242 + 64) = 0u;
        StarRegressor::StarRegressor((StarRegressor *)&__p, v136, (HTMLog *)v242);
        v243 = (double *)__p;
        v244 = [CHStarRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v245, v246, v247, v248);
        v249 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_(v244, v250, (uint64_t)v249, v251, v252, v253, v82[1], v243[6], v243[2], v243[3], v243[4], v243[5]);

        HTMLog::~HTMLog((HTMLog *)v242);
        MEMORY[0x1C3B812EC]();
        v254 = v243;
        v255 = 1875715667;
LABEL_223:
        MEMORY[0x1C3B812EC](v254, v255 | 0x1081C4000000000);
        v84 = 0;

        if (!started)
          goto LABEL_40;
        goto LABEL_39;
      case 0x100B:
        v227 = v760;
        v228 = operator new();
        *(_QWORD *)(v228 + 88) = 0;
        *(_QWORD *)(v228 + 96) = 0;
        *(_QWORD *)(v228 + 104) = 0;
        *(_QWORD *)(v228 + 216) = 0;
        *(_QWORD *)(v228 + 224) = 0;
        *(_QWORD *)(v228 + 208) = 0;
        *(_QWORD *)(v228 + 120) = 0;
        *(_OWORD *)(v228 + 32) = 0u;
        *(_OWORD *)(v228 + 48) = 0u;
        *(_OWORD *)(v228 + 64) = 0u;
        HeartRegressor::HeartRegressor((HeartRegressor *)&__p, v227, v229);
        v230 = (double *)__p;
        v231 = [CHHeartRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v232, v233, v234, v235);
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        v241 = (void *)objc_msgSend_initWithString_score_rotation_center_size_(v231, v237, (uint64_t)v236, v238, v239, v240, v82[1], v230[6], v230[2], v230[3], v230[4], v230[5]);

        HTMLog::~HTMLog((HTMLog *)v228);
        MEMORY[0x1C3B812EC]();
        MEMORY[0x1C3B812EC](v230, 0x1081C406FCD2653);
        started = v241;
        if (v789)
        {
          v790 = v789;
          operator delete(v789);
        }
        v81 = v756;
        if (v786)
        {
          v787 = v786;
          operator delete(v786);
        }

        v84 = 0;
        if (!started)
          goto LABEL_40;
        goto LABEL_39;
      case 0x100C:
        v188 = v760;
        v189 = operator new();
        *(_QWORD *)(v189 + 88) = 0;
        *(_QWORD *)(v189 + 96) = 0;
        *(_QWORD *)(v189 + 104) = 0;
        *(_QWORD *)(v189 + 216) = 0;
        *(_QWORD *)(v189 + 224) = 0;
        *(_QWORD *)(v189 + 208) = 0;
        *(_QWORD *)(v189 + 120) = 0;
        *(_OWORD *)(v189 + 32) = 0u;
        *(_OWORD *)(v189 + 48) = 0u;
        *(_OWORD *)(v189 + 64) = 0u;
        CloudRegressor::CloudRegressor((CloudRegressor *)&__p, v188, (HTMLog *)v189);
        v190 = (double *)__p;
        v191 = [CHCloudRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v192, v193, v194, v195);
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_(v191, v197, (uint64_t)v196, v198, v199, v200, v82[1], v190[6], v190[2], v190[3], v190[4], v190[5]);

        HTMLog::~HTMLog((HTMLog *)v189);
        MEMORY[0x1C3B812EC]();
        MEMORY[0x1C3B812EC](v190, 0x1081C406FCD2653);
        objc_msgSend_cumulativePointToPointDistance(v188, v201, v202, v203, v204, v205);
        v207 = v206;
        objc_msgSend_distanceBetweenFirstAndLastPoint(v188, v208, v209, v210, v211, v212);
        if (v207 >= (float)(v213 * 1.75))
        {

          v221 = 0;
          if (v221)
            goto LABEL_297;
        }
        else
        {
          v214 = [CHFreeformRecognitionResult alloc];
          v220 = (id)objc_msgSend_initWithScore_(v214, v215, v216, v217, v218, v219, 0.0);

          v221 = v220;
          if (v221)
            goto LABEL_297;
        }
        goto LABEL_38;
      default:
        started = 0;
        if (*(_DWORD *)v82 != 0xFFFF)
          goto LABEL_40;
        objc_msgSend_bounds(v760, v86, v87, v88, v89, v90);
        v98 = v806.origin.x;
        v99 = v806.origin.y;
        v100 = v806.size.width;
        v101 = v806.size.height;
        MidX = CGRectGetMidX(v806);
        v807.origin.x = v98;
        v807.origin.y = v99;
        v807.size.width = v100;
        v807.size.height = v101;
        MidY = CGRectGetMidY(v807);
        v104 = [CHScribbleRecognitionResult alloc];
        sub_1BE644944(v761, (const char *)*(unsigned int *)v82, v105, v106, v107, v108);
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        started = (id)objc_msgSend_initWithString_score_rotation_center_size_(v104, v110, (uint64_t)v109, v111, v112, v113, v82[1], 0.0, MidX, MidY, v100, v101);
        v84 = 0;

        if (!started)
          goto LABEL_40;
        goto LABEL_39;
    }
  }
}

void sub_1BE647A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  void *v32;
  void *v33;
  void *v34;

  sub_1BE648080(&a28);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1BE647FC8(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isEqualToString;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a2;
  objc_msgSend_string(v2, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("Line"), v10, v11, v12) & 1) != 0)
  {
    isEqualToString = 1;
  }
  else
  {
    objc_msgSend_string(v2, v13, v14, v15, v16, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v19, v20, (uint64_t)CFSTR("Manhattan Line"), v21, v22, v23);

  }
  return isEqualToString;
}

void sub_1BE648044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE64805C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64806C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void **sub_1BE648080(void **a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {

        v5 = *(v3 - 2);
        v3 -= 2;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE6480E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  const char *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  _QWORD v41[4];
  _QWORD v42[4];
  id v43;

  v5 = a2;
  v6 = a3;
  objc_msgSend_firstObject(v5, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0CB3880];
  v14 = MEMORY[0x1E0C809B0];
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BE6482D0;
  v42[3] = &unk_1E77F2560;
  v15 = v12;
  v43 = v15;
  objc_msgSend_predicateWithBlock_(v13, v16, (uint64_t)v42, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_filterUsingPredicate_(v5, v21, (uint64_t)v20, v22, v23, v24);

  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x2020000000;
  v41[3] = 0;
  v30 = objc_msgSend_length(v6, v25, v26, v27, v28, v29);
  v35[0] = v14;
  v35[1] = 3221225472;
  v35[2] = sub_1BE648370;
  v35[3] = &unk_1E77F25B0;
  v31 = v5;
  v36 = v31;
  v32 = v15;
  v37 = v32;
  v38 = a1;
  v33 = v6;
  v39 = v33;
  v40 = v41;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v33, v34, 0, v30, 258, (uint64_t)v35);

  _Block_object_dispose(v41, 8);
}

void sub_1BE64825C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6482BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6482D0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;

  v3 = a2;
  v9 = v3;
  if (*(id *)(a1 + 32) == v3)
  {

    return 1;
  }
  else
  {
    objc_msgSend_inappropriateWordIndexes(v3, v4, v5, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15) == 0;

    return v16;
  }
}

void sub_1BE64834C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE648360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE648370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v11 = (void *)MEMORY[0x1E0CB3880];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1BE6484B8;
  v31[3] = &unk_1E77F2588;
  v12 = *(void **)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(void **)(a1 + 56);
  v32 = v13;
  v33 = v14;
  v34 = v15;
  v35 = a3;
  v36 = a4;
  objc_msgSend_predicateWithBlock_(v11, v16, (uint64_t)v31, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_filterUsingPredicate_(v12, v21, (uint64_t)v20, v22, v23, v24);

  v30 = (unint64_t)objc_msgSend_count(*(void **)(a1 + 32), v25, v26, v27, v28, v29) < 2
     || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) > 4uLL;
  *a7 = v30;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);

}

void sub_1BE648478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6484B8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = a2;
  if (*(id *)(a1 + 32) == v7)
  {
    v25 = 1;
  }
  else
  {
    v8 = *(void **)(*(_QWORD *)(a1 + 40) + 488);
    objc_msgSend_substringFromIndex_(*(void **)(a1 + 48), v3, *(_QWORD *)(a1 + 56), v4, v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v7, v10, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingString_(v9, v16, (uint64_t)v15, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_isInappropriateString_(v8, v21, (uint64_t)v20, v22, v23, v24) ^ 1;

  }
  return v25;
}

void sub_1BE648560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE64858C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1BE64859C(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];

  v1 = a1;
  v6 = v1;
  v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v14[0] = *MEMORY[0x1E0C9D628];
  v14[1] = v7;
  if (v1)
  {
    objc_msgSend_objectForKey_(v1, v2, (uint64_t)CHRecognitionOptionFrameContext[0], v3, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend_getValue_(v8, v9, (uint64_t)v14, v10, v11, v12);

  }
  return *(double *)v14;
}

void sub_1BE648630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE648640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE648654(double *a1, unsigned int **a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unsigned int *v48;
  char *v49;
  char *v50;

  v47 = a3;
  objc_msgSend_indexesOfStrokesSmallerThanSize_(v47, v5, v6, v7, v8, v9, a1[62], a1[63]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
  if (v16 == objc_msgSend_strokeCount(v47, v17, v18, v19, v20, v21))
  {
    if (objc_msgSend_strokeCount(v47, v22, v23, v24, v25, v26) == 1)
    {
      v32 = (unsigned int *)operator new(4uLL);
      *v32 = 46;
      v49 = (char *)(v32 + 1);
      v50 = (char *)(v32 + 1);
      v48 = v32;
      sub_1BE65D370(a1, a2, &v48, v33, v34, v35);
LABEL_8:
      operator delete(v32);
      goto LABEL_9;
    }
    if (objc_msgSend_strokeCount(v47, v27, v28, v29, v30, v31) == 2)
    {
      v32 = (unsigned int *)operator new(0x18uLL);
      v49 = (char *)(v32 + 6);
      v50 = (char *)(v32 + 6);
      *((_QWORD *)v32 + 2) = 0x22EF00002026;
      *(_OWORD *)v32 = xmmword_1BE8D5434;
      v48 = v32;
      sub_1BE65D370(a1, a2, &v48, v41, v42, v43);
      goto LABEL_8;
    }
    if (objc_msgSend_strokeCount(v47, v36, v37, v38, v39, v40) == 3)
    {
      v32 = (unsigned int *)operator new(0x14uLL);
      v49 = (char *)(v32 + 5);
      v50 = (char *)(v32 + 5);
      v32[4] = 59;
      *(_OWORD *)v32 = xmmword_1BE8D544C;
      v48 = v32;
      sub_1BE65D370(a1, a2, &v48, v44, v45, v46);
      goto LABEL_8;
    }
  }
LABEL_9:

}

void sub_1BE6487B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  operator delete(v10);

  _Unwind_Resume(a1);
}

void sub_1BE648808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE648820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE648834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

id sub_1BE64884C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  CHTextRecognitionResult *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  void *isTextReplacement;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  void *v142;
  _BYTE v143[128];
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  _QWORD v149[3];

  v149[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = v3;
  if (*(_QWORD *)(a1 + 432))
  {
    v10 = *(void **)(a1 + 360);
    objc_msgSend_string(v3, v4, v5, v6, v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseString(v11, v12, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v10, v18, (uint64_t)v17, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      objc_msgSend_objectForKey_(*(void **)(a1 + 432), v23, (uint64_t)v22, v24, v25, v26);
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend_score(v9, v28, v29, v30, v31, v32);
      objc_msgSend_numberWithDouble_(v27, v33, v34, v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v149[0] = v38;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v39, (uint64_t)v149, 1, v40, v41);
      v133 = (void *)objc_claimAutoreleasedReturnValue();

      v42 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend_score(v9, v43, v44, v45, v46, v47);
      objc_msgSend_numberWithDouble_(v42, v48, v49, v50, v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v148 = v53;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v54, (uint64_t)&v148, 1, v55, v56);
      v134 = (void *)objc_claimAutoreleasedReturnValue();

      v57 = (void *)MEMORY[0x1E0CB3B18];
      v63 = objc_msgSend_length(v137, v58, v59, v60, v61, v62);
      objc_msgSend_valueWithRange_(v57, v64, 0, v63, v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v147 = v67;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v68, (uint64_t)&v147, 1, v69, v70);
      v135 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v71, 1, v72, v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v146 = v75;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v76, (uint64_t)&v146, 1, v77, v78);
      v136 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v79, 1, v80, v81, v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v145 = v83;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v84, (uint64_t)&v145, 1, v85, v86);
      v87 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v88, 0, v89, v90, v91);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      v144 = v92;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v93, (uint64_t)&v144, 1, v94, v95);
      v96 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v97, v98, v99, v100, v101);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      objc_msgSend_wordStrokeSets(v9, v103, v104, v105, v106, v107);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      v115 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v109, (uint64_t)&v138, (uint64_t)v143, 16, v110);
      if (v115)
      {
        v116 = *(_QWORD *)v139;
        do
        {
          v117 = 0;
          do
          {
            if (*(_QWORD *)v139 != v116)
              objc_enumerationMutation(v108);
            objc_msgSend_addIndexes_(v102, v111, *(_QWORD *)(*((_QWORD *)&v138 + 1) + 8 * v117++), v112, v113, v114);
          }
          while (v115 != v117);
          v115 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v111, (uint64_t)&v138, (uint64_t)v143, 16, v114);
        }
        while (v115);
      }

      v118 = [CHTextRecognitionResult alloc];
      objc_msgSend_score(v9, v119, v120, v121, v122, v123);
      v125 = v124;
      v142 = v102;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v126, (uint64_t)&v142, 1, v127, v128);
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      isTextReplacement = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v118, v130, (uint64_t)v137, (uint64_t)v135, (uint64_t)v96, (uint64_t)v133, v134, v129, v125, v136, v87, 0, 0, 1);

    }
    else
    {
      isTextReplacement = 0;
    }

  }
  else
  {
    isTextReplacement = 0;
  }

  return isTextReplacement;
}

void sub_1BE648BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE648D18(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;

  v63 = a2;
  v9 = (void *)a1[4];
  objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v10, a5, a6, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v9, v14, (uint64_t)v13, v15, v16, v17);

  v18 = (void *)a1[5];
  v19 = (void *)MEMORY[0x1E0CB37E8];
  v25 = objc_msgSend_wordID(v63, v20, v21, v22, v23, v24);
  objc_msgSend_numberWithUnsignedInt_(v19, v26, v25, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v18, v31, (uint64_t)v30, v32, v33, v34);

  v35 = (void *)a1[6];
  v36 = (void *)MEMORY[0x1E0CB37E8];
  v42 = objc_msgSend_properties(v63, v37, v38, v39, v40, v41);
  objc_msgSend_numberWithBool_(v36, v43, (v42 >> 3) & 1, v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v35, v48, (uint64_t)v47, v49, v50, v51);

  objc_msgSend_string(v63, v52, v53, v54, v55, v56);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) += objc_msgSend_length(v57, v58, v59, v60, v61, v62);

}

void sub_1BE648E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE648E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE64919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BE649264(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;

  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v60 = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_mutableCopy(v60, v6, v7, v8, v9, v10);
  v12 = (void *)qword_1EF567F38;
  qword_1EF567F38 = v11;

  v13 = (void *)qword_1EF567F38;
  objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v14, v15, v16, v17, v18);
  v61 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v13, v19, (uint64_t)v61, v20, v21, v22);

  v23 = (void *)qword_1EF567F38;
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v24, v25, v26, v27, v28);
  v62 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v23, v29, (uint64_t)v62, v30, v31, v32);

  objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], v33, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = (id)objc_msgSend_mutableCopy(v38, v39, v40, v41, v42, v43);

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v44, (uint64_t)CFSTR("'.-/"), v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v63, v49, (uint64_t)v48, v50, v51, v52);

  objc_msgSend_invertedSet(v63, v53, v54, v55, v56, v57);
  v58 = objc_claimAutoreleasedReturnValue();
  v59 = (void *)qword_1EF567F40;
  qword_1EF567F40 = v58;

}

void sub_1BE649370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE64938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE6493A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6493BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6493D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6493E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unint64_t sub_1BE6493F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t result;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  BOOL v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 96);
  v8 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v100 = v7;
  MEMORY[0x1E0C80A78](v8);
  v9 = *(const void **)(a1 + 104);
  v10 = 4 * *(_QWORD *)(a1 + 96);
  v99 = (char *)&v97 - v11;
  memcpy((char *)&v97 - v11, v9, v10);
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v12, 0, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_rangeValue(v16, v17, v18, v19, v20, v21);
  v101 = v23;
  v24 = v22;

  result = objc_msgSend_count(*(void **)(a1 + 32), v25, v26, v27, v28, v29);
  if (result)
  {
    v35 = 0;
    v36 = 0;
    v98 = &v99[4 * v100];
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v31, v36, v32, v33, v34);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend_rangeValue(v37, v38, v39, v40, v41, v42);
      v45 = v44;

      v47 = objc_msgSend_rangeOfCharacterFromSet_options_range_(*(void **)(a1 + 48), v46, qword_1EF567F40, 2, v43, v45) == 0x7FFFFFFFFFFFFFFFLL;
      v53 = objc_msgSend_rangeOfCharacterFromSet_options_range_(*(void **)(a1 + 48), v48, qword_1EF567F38, 2, v43, v45);
      if (v47)
      {
        v54 = 0;
      }
      else
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 56), v49, v35, v50, v51, v52);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = objc_msgSend_BOOLValue(v55, v56, v57, v58, v59, v60);

      }
      v61 = 0;
      if (v45 == 1 && v53 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 56), v49, v35, v50, v51, v52);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = objc_msgSend_BOOLValue(v62, v63, v64, v65, v66, v67);

      }
      if (v43 != v24
        || v45 != v101
        || (objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 64), v49, v35, v50, v51, v52),
            v68 = (void *)objc_claimAutoreleasedReturnValue(),
            v74 = objc_msgSend_unsignedIntegerValue(v68, v69, v70, v71, v72, v73),
            v68,
            !v74))
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 72), v49, v36, v50, v51, v52);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v81 = objc_msgSend_unsignedIntegerValue(v75, v76, v77, v78, v79, v80);

        v74 = v81;
      }
      LMLanguageModelConditionalProbability();
      *(_DWORD *)&v98[4 * v36] = v74;
      if (v87 > 0.0)
        v87 = -5.0;
      if (v54 | v61)
        v88 = v87;
      else
        v88 = -15.654;
      if (!v74)
        v87 = v88;
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8)
                                                                              + 24)
                                                                  + v87;
      if (v43 + v45 == v101 + v24 && v35 < objc_msgSend_count(*(void **)(a1 + 40), v82, v83, v84, v85, v86) - 1)
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v82, ++v35, v84, v85, v86);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        v95 = objc_msgSend_rangeValue(v89, v90, v91, v92, v93, v94);
        v101 = v96;
        v24 = v95;

      }
      result = objc_msgSend_count(*(void **)(a1 + 32), v82, v83, v84, v85, v86);
      ++v36;
    }
    while (v36 < result);
  }
  return result;
}

void sub_1BE6496EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6496FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE649904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE649964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE649980(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("-/._@"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568C18;
  qword_1EF568C18 = v6;

}

void sub_1BE6499B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v27;
  id v28;
  id v29;
  int8x16_t v30;
  id v31;
  id v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_maximumLengthOfBytesUsingEncoding_(*(void **)(a1 + 32), a2, 4, a4, a5, a6);
  v13 = objc_msgSend_length(*(void **)(a1 + 32), v8, v9, v10, v11, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v37[0] = 0;
  objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(*(void **)(a1 + 32), v16, (uint64_t)v23.i64 - v15, v7, (uint64_t)v37, 4, 0, 0, v14, 0);
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2020000000;
  v36[3] = 0;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v35[3] = 0;
  objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 40) + 456), v17, v18, v19, v20, v21);

  LMStreamTokenizerCreate();
  v24 = MEMORY[0x1E0C809B0];
  v25 = 3221225472;
  v26 = sub_1BE649C44;
  v27 = &unk_1E77F2668;
  v28 = *(id *)(a1 + 48);
  v33 = v35;
  v29 = *(id *)(a1 + 56);
  v34 = v36;
  v23 = *(int8x16_t *)(a1 + 32);
  v22 = (id)v23.i64[0];
  v30 = vextq_s8(v23, v23, 8uLL);
  v31 = *(id *)(a1 + 64);
  v32 = *(id *)(a1 + 72);
  LMStreamTokenizerPushBytes();
  LMStreamTokenizerRelease();

  _Block_object_dispose(v35, 8);
  _Block_object_dispose(v36, 8);
}

void sub_1BE649BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1BE649C44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL4 v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  const char *v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t i;
  void *v176;
  void *v177;
  const char *v178;
  unsigned int v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  const char *v200;
  const char *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BOOL4 v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  const char *v269;
  uint64_t v270;
  const char *v271;
  const char *v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  _BYTE v306[128];
  uint64_t v307;

  v307 = *MEMORY[0x1E0C80C00];
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), a4, a5, a6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_rangeValue(v10, v11, v12, v13, v14, v15);
  v297 = v17;
  v298 = v16;

  v18 = objc_alloc(MEMORY[0x1E0CB3940]);
  v21 = (void *)objc_msgSend_initWithBytes_length_encoding_(v18, v19, (uint64_t)a2, a3, 4, v20);
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v22, v23, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByTrimmingCharactersInSet_(v21, v28, (uint64_t)v27, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v299 = v32;
  if (objc_msgSend_length(v32, v33, v34, v35, v36, v37))
  {
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v38, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_BOOLValue(v42, v43, v44, v45, v46, v47);

    v305 = 0;
    v49 = (void *)objc_opt_class();
    v55 = objc_msgSend_normalizeLMTokenIDForWord_tokenID_isFromPattern_score_wordLanguageModel_(v49, v50, (uint64_t)v32, a4, v48, (uint64_t)&v305, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 480));
    if ((_DWORD)v48
      && (objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v51, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v52, v53, v54), v56 = (void *)objc_claimAutoreleasedReturnValue(), v62 = objc_msgSend_rangeValue(v56, v57, v58, v59, v60, v61), v56, v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), v64 > v62))
    {
      v65 = *(void **)(a1 + 56);
      v66 = objc_msgSend_length(v65, v51, v63, v52, v53, v54);
      v68 = objc_msgSend_rangeOfString_options_range_(v65, v67, (uint64_t)v32, 0, v64, v66 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = &v69[v68];
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) >= (unint64_t)(v298 + v297))
      {
        do
        {
          v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
          if (v74 >= objc_msgSend_count(*(void **)(a1 + 32), v69, v70, v71, v72, v73) - 1)
            break;
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v75, ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v76, v77, v78);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v85 = objc_msgSend_rangeValue(v79, v80, v81, v82, v83, v84);
          v87 = v86;

        }
        while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) >= (unint64_t)(v85 + v87));
      }
    }
    else
    {
      if (v55)
      {
        v88 = *(void **)(a1 + 64);
        objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v51, v55, v52, v53, v54);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v88, v90, (uint64_t)v89, v91, v92, v93);

        v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
        v95 = *(void **)(a1 + 56);
        v101 = objc_msgSend_length(v95, v96, v97, v98, v99, v100);
        v103 = objc_msgSend_rangeOfString_options_range_(v95, v102, (uint64_t)v32, 0, v94, v101 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
        v107 = v103;
        v108 = v104;
        if ((_DWORD)v48)
          v109 = v298;
        else
          v109 = v103;
        if ((_DWORD)v48)
          v110 = v297;
        else
          v110 = (uint64_t)v104;
        v111 = *(void **)(a1 + 72);
        objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v104, v109, v110, v105, v106);
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v111, v113, (uint64_t)v112, v114, v115, v116);

        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = &v108[v107];
      }
      else
      {
        objc_msgSend_componentsSeparatedByCharactersInSet_(v32, v51, qword_1EF568C18, v52, v53, v54);
        v296 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend_count(v296, v122, v123, v124, v125, v126) < 2)
        {
          v255 = *(void **)(a1 + 64);
          objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v127, 0, v128, v129, v130);
          v256 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v255, v257, (uint64_t)v256, v258, v259, v260);

          v261 = *(void **)(a1 + 56);
          v262 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
          v268 = objc_msgSend_length(v261, v263, v264, v265, v266, v267);
          v270 = objc_msgSend_rangeOfString_options_range_(v261, v269, (uint64_t)v32, 0, v262, v268 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
          v272 = v271;
          v273 = *(void **)(a1 + 72);
          objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v271, v270, (uint64_t)v271, v274, v275);
          v276 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v273, v277, (uint64_t)v276, v278, v279, v280);

          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = &v272[v270];
        }
        else
        {
          v131 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v32, v127, 0, v128, v129, v130);
          objc_msgSend_substringWithRange_(v32, v132, v131, (uint64_t)v132, v133, v134);
          v295 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringByTrimmingCharactersInSet_(v295, v135, qword_1EF568C18, v136, v137, v138);
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          v145 = objc_msgSend_length(v139, v140, v141, v142, v143, v144) == 0;

          if (v145)
          {
            v150 = *(void **)(a1 + 64);
            objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v146, 24, v147, v148, v149);
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v150, v152, (uint64_t)v151, v153, v154, v155);

            v156 = *(void **)(a1 + 72);
            objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v157, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), 1, v158, v159);
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v156, v161, (uint64_t)v160, v162, v163, v164);

            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
          }
          v303 = 0u;
          v304 = 0u;
          v301 = 0u;
          v302 = 0u;
          v165 = v296;
          v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v166, (uint64_t)&v301, (uint64_t)v306, 16, v167);
          if (v173)
          {
            v174 = *(_QWORD *)v302;
            do
            {
              for (i = 0; i != v173; ++i)
              {
                if (*(_QWORD *)v302 != v174)
                  objc_enumerationMutation(v165);
                v176 = *(void **)(*((_QWORD *)&v301 + 1) + 8 * i);
                if (objc_msgSend_length(v176, v168, v169, v170, v171, v172))
                {
                  v300 = 0;
                  v177 = (void *)objc_opt_class();
                  v179 = objc_msgSend_normalizeLMTokenIDForWord_tokenID_isFromPattern_score_wordLanguageModel_(v177, v178, (uint64_t)v176, 0, 0, (uint64_t)&v300, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 480));
                  v180 = *(void **)(a1 + 64);
                  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v181, v179, v182, v183, v184);
                  v185 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_addObject_(v180, v186, (uint64_t)v185, v187, v188, v189);

                  v190 = *(void **)(a1 + 56);
                  v191 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
                  v197 = objc_msgSend_length(v190, v192, v193, v194, v195, v196);
                  v199 = objc_msgSend_rangeOfString_options_range_(v190, v198, (uint64_t)v176, 0, v191, v197 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
                  v201 = v200;
                  v202 = *(void **)(a1 + 72);
                  objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v200, v199, (uint64_t)v200, v203, v204);
                  v205 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_addObject_(v202, v206, (uint64_t)v205, v207, v208, v209);

                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = &v201[v199];
                }
              }
              v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v168, (uint64_t)&v301, (uint64_t)v306, 16, v172);
            }
            while (v173);
          }

          v215 = objc_msgSend_length(v299, v210, v211, v212, v213, v214);
          v220 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v299, v216, v215 - 1, v217, v218, v219);
          objc_msgSend_substringWithRange_(v299, v221, v220, (uint64_t)v221, v222, v223);
          v224 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringByTrimmingCharactersInSet_(v224, v225, qword_1EF568C18, v226, v227, v228);
          v229 = (void *)objc_claimAutoreleasedReturnValue();
          v235 = objc_msgSend_length(v229, v230, v231, v232, v233, v234) == 0;

          if (v235)
          {
            v240 = *(void **)(a1 + 64);
            objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v236, 24, v237, v238, v239);
            v241 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v240, v242, (uint64_t)v241, v243, v244, v245);

            v246 = *(void **)(a1 + 72);
            objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v247, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), 1, v248, v249);
            v250 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v246, v251, (uint64_t)v250, v252, v253, v254);

            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
          }

        }
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) >= (unint64_t)(v298 + v297))
      {
        do
        {
          v281 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
          if (v281 >= objc_msgSend_count(*(void **)(a1 + 32), v117, v118, v119, v120, v121) - 1)
            break;
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v282, ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v283, v284, v285);
          v286 = (void *)objc_claimAutoreleasedReturnValue();
          v292 = objc_msgSend_rangeValue(v286, v287, v288, v289, v290, v291);
          v294 = v293;

        }
        while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) >= (unint64_t)(v292 + v294));
      }
    }
  }

}

void sub_1BE64A418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1BE64A5C4(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4, const void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, void *a12, int a13)
{
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int shouldPerformGlobalBestSearch;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int shouldPenalizeLetterInsertion;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int shouldApplyLexicalPenalty;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int shouldPerformIntegratedLexiconExpansion;
  void *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char shouldComputeStrokePenalties;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char shouldExpandCodePoints;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char shouldPenalizePrefixes;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t shouldAutoCapitalize;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void (*v116)(void *, char *, double);
  char v117;
  uint64_t *TotalNumberOfSegments;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const char *v124;
  NSUInteger v125;
  NSUInteger v126;
  NSUInteger v127;
  _NSRange v128;
  NSUInteger v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  _BOOL4 v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  double v165;
  BOOL v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  double v182;
  char isInappropriateString;
  id v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  double v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  double v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  double v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  double v245;
  void *v246;
  id v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  id v267;
  const char *v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  double v277;
  uint64_t i;
  double v279;
  void *v280;
  double v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  id v301;
  char *v302;
  uint64_t v303;
  void *v304;
  id v306;
  id v307;
  id v308;
  id v309;
  void (*v310)(void *, char *, double);
  id v311;
  void *v312;
  char *v313;
  int shouldAutoCapitalizeSetting_locale;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  void *v318;
  char v319;
  void **v320;
  void *v321;
  void *v322;
  const void *v323;
  void *v324;
  uint64_t v325;
  void *v326;
  void *__p;
  char *v328;
  uint64_t *v329;
  uint64_t v330;
  void (*v331)(uint64_t, uint64_t);
  void *v332;
  void **v333;
  id v334;
  id v335;
  id v336;
  id v337;
  id v338;
  id v339;
  id v340;
  id v341;
  id v342;
  _QWORD *v343;
  uint64_t *v344;
  uint64_t *v345;
  _QWORD *v346;
  uint64_t *v347;
  uint64_t *v348;
  __int128 *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  unint64_t v354;
  char v355;
  BOOL v356;
  _QWORD v357[4];
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  char v365;
  _QWORD v366[3];
  char v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  char v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  char v379;
  uint64_t v380;
  _NSRange v381;
  _NSRange v382;

  v380 = *MEMORY[0x1E0C80C00];
  v309 = a6;
  v307 = a7;
  v308 = a12;
  shouldPerformGlobalBestSearch = objc_msgSend_shouldPerformGlobalBestSearch(*(void **)(a1 + 456), v19, v20, v21, v22, v23);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3) - 1 <= 9)
    shouldPerformGlobalBestSearch = objc_msgSend_shouldPerformGlobalBestSearchWithSmallLattice(*(void **)(a1 + 456), v24, v25, v26, v27, v28);
  if (objc_msgSend_shouldPerformIntegratedLexiconExpansion(*(void **)(a1 + 456), v24, v25, v26, v27, v28))
  {
    shouldPenalizeLetterInsertion = objc_msgSend_shouldPenalizeLetterInsertion(*(void **)(a1 + 456), v30, v31, v32, v33, v34);
    shouldApplyLexicalPenalty = objc_msgSend_shouldApplyLexicalPenalty(*(void **)(a1 + 456), v36, v37, v38, v39, v40);
    if (shouldPenalizeLetterInsertion)
      v42 = &unk_1E77F26D0;
    else
      v42 = &unk_1E77EFCB8;
    if (shouldApplyLexicalPenalty)
      v43 = &unk_1E77EFCD8;
    else
      v43 = &unk_1E77F1C90;
  }
  else
  {
    v43 = &unk_1E77EF408;
    v42 = &unk_1E77EFCF8;
  }
  if (((objc_msgSend_shouldPerformIntegratedLexiconExpansion(*(void **)(a1 + 456), v30, v31, v32, v33, v34) ^ 1 | shouldPerformGlobalBestSearch) & 1) != 0)
  {
    v49 = a3;
    if (a3 >= 5)
      goto LABEL_17;
  }
  else
  {
    v49 = a3;
    if (a3 > 0x13)
      goto LABEL_17;
  }
  shouldPerformIntegratedLexiconExpansion = objc_msgSend_shouldPerformIntegratedLexiconExpansion(*(void **)(a1 + 456), v44, v45, v46, v47, v48);
  v49 = 20;
  if (shouldPerformIntegratedLexiconExpansion ^ 1 | shouldPerformGlobalBestSearch)
    v49 = 5;
LABEL_17:
  v315 = a3;
  v317 = v49;
  v319 = shouldPerformGlobalBestSearch;
  v323 = a5;
  v330 = 0;
  v331 = 0;
  v329 = &v330;
  sub_1BE66AAE8(&v329, *(_QWORD **)(a2 + 56), (_QWORD *)(a2 + 64));
  v325 = v329[4];
  sub_1BE62033C((uint64_t)&v329, (_QWORD *)v330);
  v51 = *(void **)(a1 + 288);
  v52 = *(_QWORD *)(a1 + 312);
  shouldComputeStrokePenalties = objc_msgSend_shouldComputeStrokePenalties(*(void **)(a1 + 456), v53, v54, v55, v56, v57);
  shouldExpandCodePoints = objc_msgSend_shouldExpandCodePoints(*(void **)(a1 + 456), v59, v60, v61, v62, v63);
  shouldPenalizePrefixes = objc_msgSend_shouldPenalizePrefixes(*(void **)(a1 + 456), v65, v66, v67, v68, v69);
  Network::kBestPaths(a2, 0, v325, v317, a4, v323, &__p, v51, v309, a13, v52, v319, v42, v43, 0, shouldComputeStrokePenalties, shouldExpandCodePoints, shouldPenalizePrefixes);
  if (objc_msgSend_shouldApplyRomanPostProcessing(*(void **)(a1 + 456), v71, v72, v73, v74, v75))
  {
    v81 = v307;
    v320 = (void **)a1;
    v82 = v308;
    v311 = v81;
    v83 = v82;
    v84 = a1;
    v306 = v83;
    v95 = objc_msgSend_shouldApplyLexicalPenalty(*(void **)(a1 + 456), v85, v86, v87, v88, v89);
    v96 = &unk_1E77EF448;
    if (v95)
      v96 = &unk_1E77EFD18;
    v316 = v96;
    if (qword_1EF567F60 != -1)
      dispatch_once(&qword_1EF567F60, &unk_1E77EFD38);
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v90, v91, v92, v93, v94);
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    shouldAutoCapitalize = objc_msgSend_shouldAutoCapitalize(*(void **)(a1 + 456), v97, v98, v99, v100, v101);
    objc_msgSend_locale(*(void **)(v84 + 456), v103, v104, v105, v106, v107);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    shouldAutoCapitalizeSetting_locale = objc_msgSend_shouldCapitalizeGivenHistory_shouldAutoCapitalizeSetting_locale_(CHLanguageUtilities, v109, (uint64_t)v311, shouldAutoCapitalize, (uint64_t)v108, v110);

    v115 = (char *)__p;
    v313 = v328;
    if (__p != v328)
    {
      v321 = 0;
      v116 = (void (*)(void *, char *, double))sub_1BE64DE78;
      if (v95)
        v116 = (void (*)(void *, char *, double))sub_1BE64DE14;
      v310 = v116;
      v117 = 1;
      while (1)
      {
        if ((v117 & 1) != 0)
        {
          TotalNumberOfSegments = Network::getTotalNumberOfSegments(*((Network **)v115 + 6), **((_QWORD **)v115 + 7), *(uint64_t **)(*((_QWORD *)v115 + 8) - 8));
          objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v119, 0, (uint64_t)TotalNumberOfSegments, v120, v121);
          v122 = objc_claimAutoreleasedReturnValue();

          v321 = (void *)v122;
        }
        v376 = 0;
        v377 = &v376;
        v378 = 0x2020000000;
        v379 = 0;
        v123 = v115[40] ? shouldAutoCapitalizeSetting_locale : 0;
        v124 = (const char *)*((_QWORD *)v115 + 1);
        v125 = *((_QWORD *)v115 + 30);
        if (v125 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v126 = 0;
          v127 = 0;
          v128.location = 0;
          v125 = 0;
          v129 = *((_QWORD *)v115 + 1);
        }
        else
        {
          v128.location = 0;
          v129 = *((_QWORD *)v115 + 31);
          v126 = v129 + v125;
          v127 = (NSUInteger)&v124[-*((_QWORD *)v115 + 4) - v129 - v125];
        }
        v128.length = v125;
        NSStringFromUInt32Ptr(*(unsigned int **)v115, v124, v128, v113, v114);
        v326 = (void *)objc_claimAutoreleasedReturnValue();
        v381.location = v125;
        v381.length = v129;
        NSStringFromUInt32Ptr(*(unsigned int **)v115, *((const char **)v115 + 1), v381, v130, v131);
        v132 = (id)objc_claimAutoreleasedReturnValue();
        v382.location = v126;
        v382.length = v127;
        NSStringFromUInt32Ptr(*(unsigned int **)v115, *((const char **)v115 + 1), v382, v133, v134);
        v324 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_componentsSeparatedByCharactersInSet_(v132, v135, qword_1EF567F48, v136, v137, v138);
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_componentsJoinedByString_(v139, v140, (uint64_t)&stru_1E77F6F28, v141, v142, v143);
        v322 = (void *)objc_claimAutoreleasedReturnValue();

        v149 = *((_QWORD *)v115 + 28);
        v150 = *((_QWORD *)v115 + 1) != 6 || v115[40] == 0;
        v151 = !v150;
        if (objc_msgSend_length(v326, v144, v145, v146, v147, v148))
        {
          v157 = objc_msgSend_characterAtIndex_(v326, v152, 0, v154, v155, v156);
          v162 = objc_msgSend_characterType_(CHCharacterSetRules, v158, v157, v159, v160, v161);
          v163 = (v162 & 0x10000uLL) >> 16;
          if ((v162 & 0x10000) != 0)
            v123 = 0;
          if (*((_QWORD *)v115 + 26))
            v164 = v151;
          else
            v164 = 1;
          if ((v164 & 1) != 0)
          {
LABEL_63:
            if ((v164 & 1) == 0)
            {
              isInappropriateString = objc_msgSend_isInappropriateString_(v320[61], v152, (uint64_t)v132, v154, v155, v156);
              *((_BYTE *)v377 + 24) = isInappropriateString;
            }
            if (v123)
            {
              uppercaseFirstLetter((NSString *)v132);
              v184 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v184 = v132;
            }
            v189 = v184;
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v185, (uint64_t)CFSTR("%@%@%@"), v186, v187, v188, v326, v184, v324);
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_substringFromIndex_(v190, v191, a10, v192, v193, v194);
            v195 = (void *)objc_claimAutoreleasedReturnValue();
            v310(v316, v115, 0.0);
            sub_1BE64D2D4(v320, v318, v195, 0, v149 != 0, *((unsigned __int8 *)v377 + 24), 0, v321, v196, **((double **)v115 + 38));

            if (v151 && (objc_msgSend_isEqualToString_(v132, v197, (uint64_t)v189, v198, v199, v200) & 1) == 0)
            {
              objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v201, (uint64_t)CFSTR("%@%@%@"), v202, v203, v204, v326, v132, v324);
              v205 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_substringFromIndex_(v205, v206, a10, v207, v208, v209);
              v210 = (void *)objc_claimAutoreleasedReturnValue();
              v310(v316, v115, 0.1);
              sub_1BE64D2D4(v320, v318, v210, 0, v149 != 0, *((unsigned __int8 *)v377 + 24), 0, v321, v211, **((double **)v115 + 38));

            }
            goto LABEL_81;
          }
        }
        else
        {
          LOBYTE(v163) = 0;
          if (*((_QWORD *)v115 + 26))
            v164 = v151;
          else
            v164 = 1;
          if ((v164 & 1) != 0)
            goto LABEL_63;
        }
        if ((v163 & 1) != 0)
          goto LABEL_63;
        *(_QWORD *)&v372 = 0;
        *((_QWORD *)&v372 + 1) = &v372;
        *(_QWORD *)&v373 = 0x2020000000;
        BYTE8(v373) = 0;
        v368 = 0;
        v369 = &v368;
        v370 = 0x2020000000;
        v371 = 0;
        v366[0] = 0;
        v366[1] = v366;
        v366[2] = 0x2020000000;
        v367 = 0;
        v362 = 0;
        v363 = &v362;
        v364 = 0x2020000000;
        v365 = 0;
        v358 = 0;
        v359 = &v358;
        v360 = 0x2020000000;
        v361 = 0;
        v357[0] = 0;
        v357[1] = v357;
        v357[2] = 0x2020000000;
        v357[3] = 0xFFEFFFFFFFFFFFFFLL;
        objc_msgSend_array(MEMORY[0x1E0C99DE8], v152, v153, v154, v155, v156);
        v312 = (void *)objc_claimAutoreleasedReturnValue();
        LXCursorTerminationProbability();
        v166 = v165 < -2.0;
        v329 = (uint64_t *)MEMORY[0x1E0C809B0];
        v330 = 3221225472;
        v331 = sub_1BE64DF40;
        v332 = &unk_1E77F2760;
        v333 = v320;
        v132 = v132;
        v334 = v132;
        v343 = v357;
        v344 = &v358;
        v345 = &v376;
        v335 = v322;
        v346 = v366;
        v355 = v123;
        v350 = a9;
        v351 = a10;
        v336 = v311;
        v167 = v326;
        v337 = v167;
        v168 = v324;
        v338 = v168;
        v352 = 0xBFF0000000000000;
        v169 = v318;
        v339 = v169;
        v342 = v316;
        v353 = v115;
        v170 = v321;
        v340 = v170;
        v347 = &v368;
        v356 = v166;
        v354 = 0xBFD34413509F79FFLL;
        v348 = &v362;
        v171 = v312;
        v341 = v171;
        v349 = &v372;
        LXLexiconEnumerateEntriesForString();
        if (!*((_BYTE *)v369 + 24)
          && (!objc_msgSend_count(v169, v172, v173, v174, v175, v176) || (isMixedCaseString((NSString *)v132) & 1) == 0))
        {
          break;
        }
LABEL_80:

        _Block_object_dispose(v357, 8);
        _Block_object_dispose(&v358, 8);
        _Block_object_dispose(&v362, 8);
        _Block_object_dispose(v366, 8);
        _Block_object_dispose(&v368, 8);
        _Block_object_dispose(&v372, 8);
LABEL_81:

        _Block_object_dispose(&v376, 8);
        v117 = 0;
        v115 += 416;
        if (v115 == v313)
          goto LABEL_87;
      }
      if (*((_QWORD *)v115 + 26))
      {
        v181 = LXCursorHasChildren() != 0;
        if (*(_BYTE *)(*((_QWORD *)&v372 + 1) + 24))
          goto LABEL_58;
      }
      else
      {
        v181 = 0;
        if (*(_BYTE *)(*((_QWORD *)&v372 + 1) + 24))
        {
LABEL_58:
          if (*((_BYTE *)v363 + 24) != 0 && v181)
            v182 = 0.0;
          else
            v182 = 0.002;
          if (!v123)
            goto LABEL_75;
          goto LABEL_74;
        }
      }
      v182 = 0.0;
      if (!v123)
      {
LABEL_75:
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v177, (uint64_t)CFSTR("%@%@%@"), v178, v179, v180, v167, v132, v168);
        v213 = (void *)objc_claimAutoreleasedReturnValue();
        v219 = v213;
        if (*((_BYTE *)v377 + 24))
        {
          if (!objc_msgSend_count(v169, v214, v215, v216, v217, v218))
          {
            objc_msgSend_substringFromIndex_(v219, v220, a10, v221, v222, v223);
            v224 = (void *)objc_claimAutoreleasedReturnValue();
            v310(v316, v115, v182);
            sub_1BE64D2D4(v320, v171, v224, *((_DWORD *)v359 + 6) != 0, v149 != 0, *((unsigned __int8 *)v377 + 24), *((unsigned int *)v359 + 6), v170, v225, **((double **)v115 + 38));

            objc_msgSend_sortUsingComparator_(v171, v226, (uint64_t)&unk_1E77EFD58, v227, v228, v229);
            objc_msgSend_objectAtIndex_(v171, v230, 0, v231, v232, v233);
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v169, v235, (uint64_t)v234, v236, v237, v238);

            objc_msgSend_removeAllObjects(v171, v239, v240, v241, v242, v243);
          }
        }
        else
        {
          objc_msgSend_substringFromIndex_(v213, v214, a10, v216, v217, v218);
          v244 = (void *)objc_claimAutoreleasedReturnValue();
          v310(v316, v115, v182);
          sub_1BE64D2D4(v320, v169, v244, *((_DWORD *)v359 + 6) != 0, v149 != 0, *((unsigned __int8 *)v377 + 24), *((unsigned int *)v359 + 6), v170, v245, **((double **)v115 + 38));

        }
        goto LABEL_80;
      }
LABEL_74:
      uppercaseFirstLetter((NSString *)v132);
      v212 = objc_claimAutoreleasedReturnValue();

      v132 = (id)v212;
      goto LABEL_75;
    }
    v321 = 0;
LABEL_87:
    objc_msgSend_sortUsingComparator_(v318, v111, (uint64_t)&unk_1E77F2780, v112, v113, v114);
    v247 = v318;
    objc_msgSend_firstObject(v247, v248, v249, v250, v251, v252);
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_predicateWithBlock_(MEMORY[0x1E0CB3880], v254, (uint64_t)&unk_1E77EFD78, v255, v256, v257);
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_filterUsingPredicate_(v247, v259, (uint64_t)v258, v260, v261, v262);

    if (objc_msgSend_indexOfObject_(v247, v263, (uint64_t)v253, v264, v265, v266) == 0x7FFFFFFFFFFFFFFFLL)
    {
      v374 = 0u;
      v375 = 0u;
      v372 = 0u;
      v373 = 0u;
      v267 = v247;
      v275 = objc_msgSend_countByEnumeratingWithState_objects_count_(v267, v268, (uint64_t)&v372, (uint64_t)&v376, 16, v269);
      if (v275)
      {
        v276 = *(_QWORD *)v373;
        v277 = 0.0;
        do
        {
          for (i = 0; i != v275; ++i)
          {
            if (*(_QWORD *)v373 != v276)
              objc_enumerationMutation(v267);
            v280 = *(void **)(*((_QWORD *)&v372 + 1) + 8 * i);
            objc_msgSend_score(v280, v270, v271, v272, v273, v274);
            if (v281 > v277)
            {
              objc_msgSend_score(v280, v270, v271, v272, v273, v274);
              v277 = v279;
            }
          }
          v275 = objc_msgSend_countByEnumeratingWithState_objects_count_(v267, v270, (uint64_t)&v372, (uint64_t)&v376, 16, v274);
        }
        while (v275);
      }
      else
      {
        v277 = 0.0;
      }

      objc_msgSend_setScore_(v253, v282, v283, v284, v285, v286, v277 + 0.0001);
      objc_msgSend_addObject_(v267, v287, (uint64_t)v253, v288, v289, v290);
    }

    sub_1BE6480E4((uint64_t)v320, v247, v311);
    objc_msgSend__adjustResultsForConfusableCharacters_(v320, v291, (uint64_t)v247, v292, v293, v294);
    objc_msgSend__tokenizedTextResultFromResults_segmentGroup_offsetSegment_decodedStrokeSets_spaceBehavior_(v320, v295, (uint64_t)v247, (uint64_t)v306, 0, 0, 1);
    v246 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_adjustColumns(v246, v296, v297, v298, v299, v300);

  }
  else if (objc_msgSend_shouldApplyChinesePostProcessing(*(void **)(a1 + 456), v76, v77, v78, v79, v80))
  {
    sub_1BE64B834((void **)a1, (uint64_t *)&__p, v315, a2, a11, v325, v308);
    v246 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v246 = 0;
  }
  v301 = v246;
  v302 = (char *)__p;
  if (__p)
  {
    v303 = (uint64_t)v328;
    v304 = __p;
    if (v328 != __p)
    {
      do
        v303 = sub_1BE670A58(v303 - 416);
      while ((char *)v303 != v302);
      v304 = __p;
    }
    v328 = v302;
    operator delete(v304);
  }

  return v301;
}

void sub_1BE64B368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  void *v35;
  void *v36;
  void *v37;

  sub_1BE64D27C(&a35);
  _Unwind_Resume(a1);
}

double sub_1BE64B660(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32) * (double)*(unint64_t *)(a2 + 64) + 0.2;
}

double sub_1BE64B67C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32) * (double)*(unint64_t *)(a2 + 64);
}

double sub_1BE64B690(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;

  v2 = a2[17];
  if (v2 <= 15.654)
  {
    v3 = a2[15];
    if (v3 <= 15.654)
      goto LABEL_3;
LABEL_7:
    a2[15] = 15.654;
    v3 = 15.654;
    v4 = a2[21];
    if (v4 <= 15.654)
      return v2
           + a2[16]
           + (v3 + a2[14] + 0.0) * 0.15
           + (v4 + a2[20]) * 0.2
           + (a2[18] + a2[19]) * 2.0
           + (a2[22] + a2[23]) * 0.2
           + a2[24] * 8.0;
    goto LABEL_4;
  }
  a2[17] = 15.654;
  v2 = 15.654;
  v3 = a2[15];
  if (v3 > 15.654)
    goto LABEL_7;
LABEL_3:
  v4 = a2[21];
  if (v4 > 15.654)
  {
LABEL_4:
    a2[21] = 15.654;
    v4 = 15.654;
  }
  return v2
       + a2[16]
       + (v3 + a2[14] + 0.0) * 0.15
       + (v4 + a2[20]) * 0.2
       + (a2[18] + a2[19]) * 2.0
       + (a2[22] + a2[23]) * 0.2
       + a2[24] * 8.0;
}

double sub_1BE64B788(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = a2[17];
  if (v2 > 15.654)
  {
    a2[17] = 15.654;
    v2 = 15.654;
  }
  v3 = a2[21];
  if (v3 > 15.654)
  {
    a2[21] = 15.654;
    v3 = 15.654;
  }
  return v2 + a2[16] + (v3 + a2[20]) * 0.2 + (a2[18] + a2[19]) * 2.0 + (a2[22] + a2[23]) * 0.2 + a2[24] * 8.0;
}

double sub_1BE64B820(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32);
}

double sub_1BE64B828(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 128) + *(double *)(a2 + 136);
}

id sub_1BE64B834(void **a1, uint64_t *a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, void *a7)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  char *v37;
  _BYTE *v38;
  _BYTE *v39;
  int64_t v40;
  char *v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t size;
  BOOL v108;
  unint64_t v109;
  std::string::size_type v110;
  unsigned __int8 v111;
  std::string::value_type *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  std::string *v116;
  std::string *v117;
  __int128 v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  __int16 v142;
  _WORD *v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  int8x16_t *v208;
  uint64_t v209;
  unsigned __int8 *v210;
  unint64_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int8x16_t *v214;
  int64x2_t v215;
  unint64_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int8x16_t v230;
  int8x16_t v231;
  uint8x16_t v232;
  uint16x8_t v233;
  uint32x4_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int64x2_t v237;
  uint32x4_t v238;
  int64x2_t v239;
  uint16x8_t v240;
  uint32x4_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  uint32x4_t v245;
  int64x2_t v246;
  int64x2_t v247;
  uint8x16_t v248;
  uint16x8_t v249;
  uint32x4_t v250;
  int64x2_t v251;
  int64x2_t v252;
  uint32x4_t v253;
  int64x2_t v254;
  uint16x8_t v255;
  uint32x4_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  uint32x4_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int8x8_t *v264;
  unint64_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int8x8_t v268;
  uint16x8_t v269;
  uint32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int64x2_t v273;
  int64x2_t v274;
  uint32x4_t v275;
  int64x2_t v276;
  unsigned __int8 *v277;
  int v278;
  std::string *v279;
  std::string::size_type v280;
  unint64_t v281;
  __int128 v282;
  BOOL v283;
  int v284;
  size_t v285;
  unint64_t v286;
  unsigned __int8 v287;
  std::string::value_type *v288;
  uint64_t v289;
  uint64_t v290;
  _BYTE *v291;
  std::string *v292;
  std::string *v293;
  std::string::size_type v294;
  std::string *v295;
  __int128 v296;
  void *v297;
  std::string *v298;
  __int128 v299;
  const std::string::value_type *v300;
  std::string::size_type v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  int shouldTransliterateSentencesSCTC;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  void *v312;
  const char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  const char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  const char *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  const char *v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  CHTextRecognitionResult *v396;
  const char *v397;
  void *isTextReplacement;
  const char *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _BOOL4 v414;
  const char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  CHTextRecognitionResult *v420;
  const char *v421;
  void *v422;
  const char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _BOOL4 v438;
  _BOOL4 v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  void *v444;
  CHTextRecognitionResult *v445;
  const char *v446;
  void *v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  void *v452;
  uint64_t v453;
  void *v454;
  const char *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _BOOL4 v460;
  const char *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  const char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _BOOL4 v472;
  int shouldPromoteCJKCommonCharacters;
  const char *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  id v480;
  BOOL v481;
  uint64_t v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  const char *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t i;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  void *v501;
  const char *v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t j;
  float v512;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  const char *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  id v523;
  uint64_t v525;
  uint64_t v526;
  id v527;
  uint64_t v528;
  uint64_t *v529;
  void *v530;
  uint64_t v531;
  unint64_t v532;
  void *v533;
  uint64_t v534;
  id v535;
  _BYTE *v536;
  void *v537;
  uint64_t v538;
  _QWORD *v539;
  void *v540;
  void *v541;
  unint64_t v542;
  void **v543;
  void *v544;
  void *v545;
  void *v546;
  void *v547;
  void *v548;
  void *v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  void *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int64x2_t v560;
  uint64_t v561;
  std::string::value_type *v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  std::string v567;
  std::string v568;
  std::string v569;
  std::string v570;
  __int128 v571;
  int64_t v572;
  std::string v573;
  __int128 v574;
  int64_t v575;
  std::string v576;
  std::string v577;
  char *v578;
  char *v579;
  char *v580;
  char *v581;
  char *v582;
  char *v583;
  std::string v584;
  _QWORD v585[18];

  v539 = a5;
  v532 = a3;
  v543 = a1;
  v585[16] = *MEMORY[0x1E0C80C00];
  v527 = a7;
  objc_msgSend_set(MEMORY[0x1E0C99E20], v10, v11, v12, v13, v14);
  v530 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v15, v16, v17, v18, v19);
  v541 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = a2[1];
  v559 = *a2;
  v531 = v25;
  if (v559 == v25)
  {
LABEL_203:
    v535 = 0;
    goto LABEL_204;
  }
  v538 = a6;
  v535 = 0;
  v26 = 0;
  v562 = &v584.__r_.__value_.__s.__data_[1];
  v553 = a4;
  do
  {
    v27 = objc_msgSend_count(v541, v20, v21, v22, v23, v24);
    if (v27 >= v532)
    {
      if (v535)
        break;
      if ((objc_msgSend_shouldPromoteCJKCommonCharacters(v543[57], v20, v21, v22, v23, v24) & 1) == 0)
        goto LABEL_203;
    }
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v20, v21, v22, v23, v24);
    v555 = (void *)objc_claimAutoreleasedReturnValue();
    v582 = 0;
    v581 = 0;
    v583 = 0;
    v34 = *(_BYTE **)(v559 + 56);
    v33 = *(_BYTE **)(v559 + 64);
    v35 = v33 - v34;
    v534 = v26;
    if (v33 == v34)
    {
      v536 = 0;
      v37 = 0;
    }
    else
    {
      if (v35 < 0)
        sub_1BE61F930();
      v36 = (char *)operator new(v33 - v34);
      v37 = &v36[8 * (v35 >> 3)];
      v581 = v36;
      v583 = v37;
      v536 = v36;
      memcpy(v36, v34, v35);
      v582 = v37;
    }
    v579 = 0;
    v578 = 0;
    v580 = 0;
    v39 = *(_BYTE **)(v559 + 80);
    v38 = *(_BYTE **)(v559 + 88);
    v40 = v38 - v39;
    if (v38 == v39)
    {
      v533 = 0;
    }
    else
    {
      if (v40 < 0)
        sub_1BE61F930();
      v41 = (char *)operator new(v38 - v39);
      v42 = &v41[8 * (v40 >> 3)];
      v578 = v41;
      v580 = v42;
      v533 = v41;
      memcpy(v41, v39, v40);
      v579 = v42;
    }
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v28, v29, v30, v31, v32);
    v550 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v43, v44, v45, v46, v47);
    v547 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v48, v49, v50, v51, v52);
    v545 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v53, v54, v55, v56, v57);
    v544 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v58, v59, v60, v61, v62);
    v546 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v63, v64, v65, v66, v67);
    v548 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v68, v69, v70, v71, v72);
    v549 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v73, v74, v75, v76, v77);
    v537 = (void *)objc_claimAutoreleasedReturnValue();
    memset(&v577, 0, sizeof(v577));
    memset(&v576, 0, sizeof(v576));
    v78 = v37 - v536;
    if ((unint64_t)(v37 - v536) < 9)
    {
LABEL_159:
      v26 = v534;
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_201;
      goto LABEL_160;
    }
    v79 = 0;
    v80 = 0;
    v81 = v78 >> 3;
    if (v81 <= 2)
      v81 = 2;
    v542 = v81;
    v82 = v81 - 1;
    do
    {
      v83 = *(_QWORD *)(*(_QWORD *)(a4 + 80)
                      + 72
                      * (*(_QWORD *)(*(_QWORD *)(a4 + 32) + 40 * *(_QWORD *)(*(_QWORD *)(v559 + 56) + 8 * v79) + 16)
                       + *(_QWORD *)(*(_QWORD *)(v559 + 80) + 8 * v79 + 8))
                      + 24);
      if (*(_BYTE *)(a4 + 184))
      {
        if (v83)
        {
          ul2sh(v83, (uint64_t)&v584);
          goto LABEL_26;
        }
        v84 = *(_QWORD *)(a4 + 136);
        if ((*(char *)(v84 + 23) & 0x80000000) == 0)
        {
LABEL_23:
          v85 = *(_OWORD *)v84;
          v584.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 16);
          *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v85;
          goto LABEL_26;
        }
      }
      else
      {
        v84 = *(_QWORD *)(a4 + 136) + 24 * v83;
        if ((*(char *)(v84 + 23) & 0x80000000) == 0)
          goto LABEL_23;
      }
      sub_1BE61F128(&v584, *(void **)v84, *(_QWORD *)(v84 + 8));
LABEL_26:
      sub_1BE7DC93C((uint64_t *)&v584, (int **)&v574);
      v87 = *((_QWORD *)&v574 + 1);
      v88 = v574;
      if ((_QWORD)v574)
      {
        *((_QWORD *)&v574 + 1) = v574;
        operator delete((void *)v574);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v584.__r_.__value_.__l.__data_);
      v80 += (unint64_t)(v87 - v88) >> 2;
      ++v79;
    }
    while (v82 != v79);
    if (!v80)
      goto LABEL_159;
    v529 = &v526;
    v528 = (2 * v80);
    MEMORY[0x1E0C80A78](v86);
    v561 = (uint64_t)&v526 - v92;
    v93 = 0;
    v558 = 0;
    v554 = 0;
    v94 = 1;
    while (2)
    {
      v95 = v94 - 1;
      v96 = *(_QWORD *)(*(_QWORD *)(v559 + 56) + 8 * (v94 - 1));
      v97 = *(_QWORD *)(v559 + 80);
      v552 = v94;
      v98 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 40 * v96 + 16) + *(_QWORD *)(v97 + 8 * v94);
      v99 = *(_QWORD *)(a4 + 80);
      v100 = (int)v554;
      v557 = v98;
      v560.i64[0] = v99;
      v101 = v99 + 72 * v98;
      objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v89, (int)v554, *(_QWORD *)(v101 + 48), v90, v91);
      v102 = objc_claimAutoreleasedReturnValue();
      v551 = v95;
      v556 = (void *)v102;
      objc_msgSend_addObject_(v549, v103, v102, v104, v105, v106);
      size = 0;
      v108 = 0;
      v109 = *(_QWORD *)(v101 + 48);
      v540 = *(void **)(v560.i64[0] + 72 * v557 + 56);
      v554 = v109 + v100;
      *((_BYTE *)&v573.__r_.__value_.__s + 23) = 0;
      v573.__r_.__value_.__s.__data_[0] = 0;
      v110 = 1;
      while (2)
      {
        v111 = (v109 % 0xA) | 0x30;
        if (v110 >= 0x17)
        {
          v113 = (v110 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v110 | 7) != 0x17)
            v113 = v110 | 7;
          v114 = v113 + 1;
          v115 = operator new(v113 + 1);
          v584.__r_.__value_.__r.__words[2] = v114 | 0x8000000000000000;
          v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
          v584.__r_.__value_.__l.__size_ = v110;
          *v115 = v111;
          v112 = v115 + 1;
        }
        else
        {
          v584.__r_.__value_.__r.__words[2] = 0;
          *((_BYTE *)&v584.__r_.__value_.__s + 23) = v110;
          v112 = v562;
          *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v111;
          if (!size)
          {
            *v562 = 0;
            if (v108)
              goto LABEL_36;
            goto LABEL_37;
          }
        }
        if (v108)
          v116 = (std::string *)v573.__r_.__value_.__r.__words[0];
        else
          v116 = &v573;
        memmove(v112, v116, size);
        v112[size] = 0;
        if (v108)
LABEL_36:
          operator delete(v573.__r_.__value_.__l.__data_);
LABEL_37:
        v573 = v584;
        if (v109 >= 0xA)
        {
          v108 = (v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          if ((v573.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v573.__r_.__value_.__r.__words[2]);
          else
            size = v573.__r_.__value_.__l.__size_;
          v110 = size + 1;
          v109 /= 0xAuLL;
          if (size + 1 > 0x7FFFFFFFFFFFFFF7)
            sub_1BE61F1B4();
          continue;
        }
        break;
      }
      v117 = std::string::append(&v573, " ");
      v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      v575 = v117->__r_.__value_.__r.__words[2];
      v574 = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      if (v575 >= 0)
        v119 = (const std::string::value_type *)&v574;
      else
        v119 = (const std::string::value_type *)v574;
      if (v575 >= 0)
        v120 = HIBYTE(v575);
      else
        v120 = *((_QWORD *)&v574 + 1);
      std::string::append(&v576, v119, v120);
      v121 = v538;
      v122 = v553;
      v123 = v557;
      if (SHIBYTE(v575) < 0)
      {
        operator delete((void *)v574);
        if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_63;
      }
      else
      {
        if ((SHIBYTE(v573.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_59;
LABEL_63:
        operator delete(v573.__r_.__value_.__l.__data_);
      }
LABEL_59:
      v124 = *(unsigned int *)(*v539 + 4 * v123);
      v125 = *(_QWORD *)(v560.i64[0] + 72 * v123 + 24);
      if (!*(_BYTE *)(v122 + 184))
      {
        v126 = *(_QWORD *)(v122 + 136) + 24 * v125;
        if (*(char *)(v126 + 23) < 0)
          goto LABEL_67;
LABEL_65:
        v127 = *(_OWORD *)v126;
        v575 = *(_QWORD *)(v126 + 16);
        v574 = v127;
        goto LABEL_68;
      }
      if (v125)
      {
        ul2sh(v125, (uint64_t)&v574);
        goto LABEL_68;
      }
      v126 = *(_QWORD *)(v122 + 136);
      if ((*(char *)(v126 + 23) & 0x80000000) == 0)
        goto LABEL_65;
LABEL_67:
      sub_1BE61F128(&v574, *(void **)v126, *(_QWORD *)(v126 + 8));
LABEL_68:
      sub_1BE7DC93C((uint64_t *)&v574, (int **)&v573);
      v131 = (int *)v573.__r_.__value_.__r.__words[0];
      if (v573.__r_.__value_.__l.__size_ == v573.__r_.__value_.__r.__words[0])
      {
        v132 = 0;
      }
      else
      {
        v132 = 0;
        v133 = *(_QWORD *)(v560.i64[0] + 72 * v123 + 8);
        v134 = (uint64_t)(v573.__r_.__value_.__l.__size_ - v573.__r_.__value_.__r.__words[0]) >> 2;
        if (v134 <= 1)
          v134 = 1;
        do
        {
          while (1)
          {
            v137 = *v131++;
            v136 = v137;
            if (v133 == v121)
            {
              if ((v136 - 33) < 0xF
                || ((v136 - 91) <= 0x23
                  ? (v138 = ((1 << (v136 - 91)) & 0xF0000003FLL) == 0)
                  : (v138 = 1),
                    !v138 || (v136 - 58) < 6))
              {
                if (v136 == 46)
                  v136 = 12290;
                else
                  v136 += 65248;
              }
            }
            v139 = (int)v93;
            if (!((v136 - 0x10000) >> 20))
              break;
            v135 = v561;
            *(_WORD *)(v561 + 2 * (int)v93) = v136;
            v93 = (int)v93 + 1;
            *(_WORD *)(v135 + 2 * (v139 + 1)) = v136;
            ++v132;
            if (!--v134)
              goto LABEL_88;
          }
          v140 = v561;
          v141 = ((v136 + 67043328) >> 10) - 10240;
          *(_WORD *)(v561 + 2 * (int)v93) = ((v136 + 67043328) >> 10) - 10240;
          v142 = v136 & 0x3FF | 0xDC00;
          *(_WORD *)(v140 + 2 * (int)v93 + 2) = v142;
          v93 = (int)v93 + 2;
          v143 = (_WORD *)(v140 + 2 * (v139 + 2));
          *v143 = v141;
          v143[1] = v142;
          v132 += 2;
          --v134;
        }
        while (v134);
      }
LABEL_88:
      v144 = v132;
      objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v128, v558, v132, v129, v130);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v550, v146, (uint64_t)v145, v147, v148, v149);

      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v150, v124, v151, v152, v153);
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v547, v155, (uint64_t)v154, v156, v157, v158);

      objc_msgSend_addObject_(v545, v159, (uint64_t)&unk_1E7828280, v160, v161, v162);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v163, v164, v165, v166, v167, *(double *)(v560.i64[0] + 72 * v123 + 32));
      v168 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v544, v169, (uint64_t)v168, v170, v171, v172);

      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v173, v124 > 0x1F3, v174, v175, v176);
      v177 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v546, v178, (uint64_t)v177, v179, v180, v181);

      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v182, (_DWORD)v124 != 0, v183, v184, v185);
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v548, v187, (uint64_t)v186, v188, v189, v190);

      objc_msgSend_stringWithCharacters_length_(MEMORY[0x1E0CB3940], v191, v561 + 2 * ((int)v93 - (int)v144), v144, v192, v193);
      v194 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendString_(v555, v195, (uint64_t)v194, v196, v197, v198);

      if (objc_msgSend_isInappropriateString_(v543[61], v199, (uint64_t)v555, v200, v201, v202))
        objc_msgSend_addIndex_(v537, v203, v551, v204, v205, v206);
      v207 = HIBYTE(v575);
      v208 = (int8x16_t *)&v574;
      if (v575 < 0)
      {
        v207 = *((_QWORD *)&v574 + 1);
        v208 = (int8x16_t *)v574;
      }
      if (!v207)
      {
        v209 = 0;
        goto LABEL_111;
      }
      if (v207 >= 8)
      {
        if (v207 >= 0x20)
        {
          v212 = 0uLL;
          v211 = v207 & 0xFFFFFFFFFFFFFFE0;
          v213 = 0uLL;
          v214 = v208 + 1;
          v215 = 0uLL;
          v216 = v207 & 0xFFFFFFFFFFFFFFE0;
          v217 = 0uLL;
          v218 = 0uLL;
          v219 = 0uLL;
          v220 = 0uLL;
          v221 = 0uLL;
          v222 = 0uLL;
          v223 = 0uLL;
          v224 = 0uLL;
          v225 = 0uLL;
          v226 = 0uLL;
          v227 = 0uLL;
          v228 = 0uLL;
          v229 = 0uLL;
          do
          {
            v230 = *v214;
            v231.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
            v231.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
            v232 = (uint8x16_t)vceqq_s8(v214[-1], v231);
            v233 = vmovl_u8(*(uint8x8_t *)v232.i8);
            v234 = vmovl_u16(*(uint16x4_t *)v233.i8);
            v235.i64[0] = v234.u32[0];
            v235.i64[1] = v234.u32[1];
            v236 = (int8x16_t)vdupq_n_s64(1uLL);
            v560 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v234.u32[2];
            v235.i64[1] = v234.u32[3];
            v237 = (int64x2_t)vandq_s8(v235, v236);
            v238 = vmovl_high_u16(v233);
            v235.i64[0] = v238.u32[0];
            v235.i64[1] = v238.u32[1];
            v239 = (int64x2_t)vandq_s8(v235, v236);
            v240 = vmovl_high_u8(v232);
            v241 = vmovl_u16(*(uint16x4_t *)v240.i8);
            v235.i64[0] = v241.u32[0];
            v235.i64[1] = v241.u32[1];
            v242 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v238.u32[2];
            v235.i64[1] = v238.u32[3];
            v243 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v241.u32[2];
            v235.i64[1] = v241.u32[3];
            v244 = (int64x2_t)vandq_s8(v235, v236);
            v245 = vmovl_high_u16(v240);
            v235.i64[0] = v245.u32[0];
            v235.i64[1] = v245.u32[1];
            v246 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v245.u32[2];
            v235.i64[1] = v245.u32[3];
            v247 = (int64x2_t)vandq_s8(v235, v236);
            v248 = (uint8x16_t)vceqq_s8(v230, v231);
            v249 = vmovl_u8(*(uint8x8_t *)v248.i8);
            v250 = vmovl_u16(*(uint16x4_t *)v249.i8);
            v235.i64[0] = v250.u32[0];
            v235.i64[1] = v250.u32[1];
            v251 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v250.u32[2];
            v235.i64[1] = v250.u32[3];
            v252 = (int64x2_t)vandq_s8(v235, v236);
            v253 = vmovl_high_u16(v249);
            v235.i64[0] = v253.u32[0];
            v235.i64[1] = v253.u32[1];
            v254 = (int64x2_t)vandq_s8(v235, v236);
            v255 = vmovl_high_u8(v248);
            v256 = vmovl_u16(*(uint16x4_t *)v255.i8);
            v235.i64[0] = v256.u32[0];
            v235.i64[1] = v256.u32[1];
            v257 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v253.u32[2];
            v235.i64[1] = v253.u32[3];
            v258 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v256.u32[2];
            v235.i64[1] = v256.u32[3];
            v259 = (int64x2_t)vandq_s8(v235, v236);
            v260 = vmovl_high_u16(v255);
            v235.i64[0] = v260.u32[0];
            v235.i64[1] = v260.u32[1];
            v261 = (int64x2_t)vandq_s8(v235, v236);
            v235.i64[0] = v260.u32[2];
            v235.i64[1] = v260.u32[3];
            v221 = vaddq_s64(v221, v247);
            v220 = vaddq_s64(v220, v246);
            v219 = vaddq_s64(v219, v244);
            v217 = vaddq_s64(v217, v243);
            v218 = vaddq_s64(v218, v242);
            v215 = vaddq_s64(v215, v239);
            v213 = vaddq_s64(v213, v237);
            v212 = vaddq_s64(v212, v560);
            v229 = vaddq_s64(v229, (int64x2_t)vandq_s8(v235, v236));
            v228 = vaddq_s64(v228, v261);
            v227 = vaddq_s64(v227, v259);
            v225 = vaddq_s64(v225, v258);
            v226 = vaddq_s64(v226, v257);
            v224 = vaddq_s64(v224, v254);
            v223 = vaddq_s64(v223, v252);
            v222 = vaddq_s64(v222, v251);
            v214 += 2;
            v216 -= 32;
          }
          while (v216);
          v209 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v222, v212), vaddq_s64(v226, v218)), vaddq_s64(vaddq_s64(v224, v215), vaddq_s64(v228, v220))), vaddq_s64(vaddq_s64(vaddq_s64(v223, v213), vaddq_s64(v227, v219)), vaddq_s64(vaddq_s64(v225, v217), vaddq_s64(v229, v221)))));
          if (v207 == v211)
            goto LABEL_111;
          if ((v207 & 0x18) == 0)
          {
            v210 = &v208->u8[v211];
            goto LABEL_107;
          }
        }
        else
        {
          v209 = 0;
          v211 = 0;
        }
        v210 = &v208->u8[v207 & 0xFFFFFFFFFFFFFFF8];
        v262 = 0uLL;
        v263 = (int64x2_t)(unint64_t)v209;
        v264 = (int8x8_t *)&v208->i8[v211];
        v265 = v211 - (v207 & 0xFFFFFFFFFFFFFFF8);
        v266 = 0uLL;
        v267 = 0uLL;
        do
        {
          v268 = *v264++;
          v269 = vmovl_u8((uint8x8_t)vceq_s8(v268, (int8x8_t)0x5F5F5F5F5F5F5F5FLL));
          v270 = vmovl_u16(*(uint16x4_t *)v269.i8);
          v271.i64[0] = v270.u32[0];
          v271.i64[1] = v270.u32[1];
          v272 = (int8x16_t)vdupq_n_s64(1uLL);
          v273 = (int64x2_t)vandq_s8(v271, v272);
          v271.i64[0] = v270.u32[2];
          v271.i64[1] = v270.u32[3];
          v274 = (int64x2_t)vandq_s8(v271, v272);
          v275 = vmovl_high_u16(v269);
          v271.i64[0] = v275.u32[0];
          v271.i64[1] = v275.u32[1];
          v276 = (int64x2_t)vandq_s8(v271, v272);
          v271.i64[0] = v275.u32[2];
          v271.i64[1] = v275.u32[3];
          v267 = vaddq_s64(v267, (int64x2_t)vandq_s8(v271, v272));
          v266 = vaddq_s64(v266, v276);
          v262 = vaddq_s64(v262, v274);
          v263 = vaddq_s64(v263, v273);
          v265 += 8;
        }
        while (v265);
        v209 = vaddvq_s64(vaddq_s64(vaddq_s64(v263, v266), vaddq_s64(v262, v267)));
        if (v207 != (v207 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_107;
      }
      else
      {
        v209 = 0;
        v210 = (unsigned __int8 *)v208;
LABEL_107:
        v277 = &v208->u8[v207];
        do
        {
          v278 = *v210++;
          if (v278 == 95)
            ++v209;
        }
        while (v210 != v277);
      }
LABEL_111:
      i2s(v124, (uint64_t)&v568);
      v279 = std::string::append(&v568, "/");
      v280 = 0;
      v558 += v144;
      v281 = v209 + 1;
      v282 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
      v569.__r_.__value_.__r.__words[2] = v279->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v569.__r_.__value_.__l.__data_ = v282;
      v279->__r_.__value_.__l.__size_ = 0;
      v279->__r_.__value_.__r.__words[2] = 0;
      v279->__r_.__value_.__r.__words[0] = 0;
      *((_BYTE *)&v567.__r_.__value_.__s + 23) = 0;
      v567.__r_.__value_.__s.__data_[0] = 0;
      while (2)
      {
        v284 = (char)v280;
        if ((v280 & 0x80u) == 0)
          v285 = v280;
        else
          v285 = v567.__r_.__value_.__l.__size_;
        v286 = v285 + 1;
        if (v285 + 1 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        v287 = (v281 % 0xA) | 0x30;
        if (v286 >= 0x17)
        {
          v289 = (v286 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v286 | 7) != 0x17)
            v289 = v286 | 7;
          v290 = v289 + 1;
          v291 = operator new(v289 + 1);
          v584.__r_.__value_.__r.__words[2] = v290 | 0x8000000000000000;
          v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v291;
          v584.__r_.__value_.__l.__size_ = v285 + 1;
          *v291 = v287;
          v288 = v291 + 1;
LABEL_125:
          if (v284 >= 0)
            v292 = &v567;
          else
            v292 = (std::string *)v567.__r_.__value_.__r.__words[0];
          memmove(v288, v292, v285);
          v288[v285] = 0;
          if (v284 < 0)
            goto LABEL_129;
          goto LABEL_113;
        }
        v584.__r_.__value_.__r.__words[2] = 0;
        *((_BYTE *)&v584.__r_.__value_.__s + 23) = v285 + 1;
        v288 = v562;
        *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v287;
        if (v285)
          goto LABEL_125;
        *v562 = 0;
        if (((char)v280 & 0x80000000) == 0)
          goto LABEL_113;
LABEL_129:
        operator delete(v567.__r_.__value_.__l.__data_);
LABEL_113:
        v567 = v584;
        v280 = HIBYTE(v584.__r_.__value_.__r.__words[2]);
        v283 = v281 >= 0xA;
        v281 /= 0xAuLL;
        if (v283)
          continue;
        break;
      }
      if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v293 = &v567;
      else
        v293 = (std::string *)v567.__r_.__value_.__r.__words[0];
      if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v294 = HIBYTE(v584.__r_.__value_.__r.__words[2]);
      else
        v294 = v567.__r_.__value_.__l.__size_;
      v295 = std::string::append(&v569, (const std::string::value_type *)v293, v294);
      v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
      v570.__r_.__value_.__r.__words[2] = v295->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v570.__r_.__value_.__l.__data_ = v296;
      v295->__r_.__value_.__l.__size_ = 0;
      v295->__r_.__value_.__r.__words[2] = 0;
      v295->__r_.__value_.__r.__words[0] = 0;
      v297 = v556;
      v298 = std::string::append(&v570, ",");
      v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
      v572 = v298->__r_.__value_.__r.__words[2];
      v571 = v299;
      v298->__r_.__value_.__l.__size_ = 0;
      v298->__r_.__value_.__r.__words[2] = 0;
      v298->__r_.__value_.__r.__words[0] = 0;
      if (v572 >= 0)
        v300 = (const std::string::value_type *)&v571;
      else
        v300 = (const std::string::value_type *)v571;
      if (v572 >= 0)
        v301 = HIBYTE(v572);
      else
        v301 = *((_QWORD *)&v571 + 1);
      std::string::append(&v577, v300, v301);
      a4 = v553;
      if (SHIBYTE(v572) < 0)
      {
        operator delete((void *)v571);
        if (SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_154;
LABEL_144:
        if ((SHIBYTE(v567.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_145;
LABEL_155:
        operator delete(v567.__r_.__value_.__l.__data_);
        if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_156;
LABEL_146:
        if ((SHIBYTE(v568.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_147;
LABEL_157:
        operator delete(v568.__r_.__value_.__l.__data_);
        v302 = (void *)v573.__r_.__value_.__r.__words[0];
        if (v573.__r_.__value_.__r.__words[0])
        {
LABEL_148:
          v573.__r_.__value_.__l.__size_ = (std::string::size_type)v302;
          operator delete(v302);
        }
      }
      else
      {
        if ((SHIBYTE(v570.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_144;
LABEL_154:
        operator delete(v570.__r_.__value_.__l.__data_);
        if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_155;
LABEL_145:
        if ((SHIBYTE(v569.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_146;
LABEL_156:
        operator delete(v569.__r_.__value_.__l.__data_);
        if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_157;
LABEL_147:
        v302 = (void *)v573.__r_.__value_.__r.__words[0];
        if (v573.__r_.__value_.__r.__words[0])
          goto LABEL_148;
      }
      if (SHIBYTE(v575) < 0)
        operator delete((void *)v574);

      v94 = v552 + 1;
      if (v552 + 1 != v542)
        continue;
      break;
    }
    shouldTransliterateSentencesSCTC = objc_msgSend_shouldTransliterateSentencesSCTC(v543[57], v89, v303, v304, v90, v91);
    v310 = v534;
    if ((int)v93 > 0)
      v311 = shouldTransliterateSentencesSCTC;
    else
      v311 = 0;
    if (v311 != 1)
      goto LABEL_186;
    objc_msgSend__applySentenceTransliterationCandidates_codesLen_codesMax_(v543, v306, v561, v93, v528, v309);
    v312 = (void *)objc_claimAutoreleasedReturnValue();
    v561 = objc_msgSend_countCharacters(v555, v313, v314, v315, v316, v317);
    if (v561 >= 2)
    {
      objc_msgSend_stringWithString_(MEMORY[0x1E0CB3940], v318, (uint64_t)v312, v319, v320, v321);
      v322 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(26348, v323, v324, v325, v326, v327);
      v328 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(26194, v329, v330, v331, v332, v333);
      v334 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v322, v335, (uint64_t)v328, (uint64_t)v334, v336, v337);
      v338 = (void *)objc_claimAutoreleasedReturnValue();

      unicodeToNSString(39221, v339, v340, v341, v342, v343);
      v344 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(21890, v345, v346, v347, v348, v349);
      v350 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v338, v351, (uint64_t)v344, (uint64_t)v350, v352, v353);
      v354 = (void *)objc_claimAutoreleasedReturnValue();

      unicodeToNSString(33879, v355, v356, v357, v358, v359);
      v360 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(30528, v361, v362, v363, v364, v365);
      v366 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v354, v367, (uint64_t)v360, (uint64_t)v366, v368, v369);
      v370 = (void *)objc_claimAutoreleasedReturnValue();

      unicodeToNSString(22151, v371, v372, v373, v374, v375);
      v376 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(21523, v377, v378, v379, v380, v381);
      v382 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v370, v383, (uint64_t)v376, (uint64_t)v382, v384, v385);
      v386 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend_containsObject_(v530, v387, (uint64_t)v386, v388, v389, v390) & 1) == 0)
      {
        objc_msgSend_addObject_(v530, v391, (uint64_t)v386, v392, v393, v394);
        sub_1BE64463C((uint64_t)v543, v386, v550);
        v395 = (void *)objc_claimAutoreleasedReturnValue();
        v396 = [CHTextRecognitionResult alloc];
        LOBYTE(v525) = 0;
        isTextReplacement = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v396, v397, (uint64_t)v386, (uint64_t)v550, (uint64_t)v547, (uint64_t)v545, v544, v549, *(double *)(v559 + 104), v546, v548, v395, v537, v525);
        objc_msgSend_addObject_(v541, v399, (uint64_t)isTextReplacement, v400, v401, v402);
        if (!v535)
        {
          v535 = 0;
          objc_msgSend_rareWordIndexes(isTextReplacement, v403, v404, v405, v406, v407);
          v408 = (void *)objc_claimAutoreleasedReturnValue();
          v414 = objc_msgSend_count(v408, v409, v410, v411, v412, v413) == 0;

          if (v414)
            v535 = isTextReplacement;
          else
            v535 = 0;
        }

      }
    }
    if ((objc_msgSend_containsObject_(v530, v318, (uint64_t)v312, v319, v320, v321) & 1) == 0)
    {
      objc_msgSend_addObject_(v530, v415, (uint64_t)v312, v416, v417, v418);
      sub_1BE64463C((uint64_t)v543, v312, v550);
      v419 = (void *)objc_claimAutoreleasedReturnValue();
      v420 = [CHTextRecognitionResult alloc];
      LOBYTE(v525) = 0;
      v422 = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v420, v421, (uint64_t)v312, (uint64_t)v550, (uint64_t)v547, (uint64_t)v545, v544, v549, *(double *)(v559 + 104), v546, v548, v419, v537, v525);
      objc_msgSend_addObject_(v541, v423, (uint64_t)v422, v424, v425, v426);
      if (!v535)
      {
        v535 = 0;
        objc_msgSend_rareWordIndexes(v422, v427, v428, v429, v430, v431);
        v432 = (void *)objc_claimAutoreleasedReturnValue();
        v438 = objc_msgSend_count(v432, v433, v434, v435, v436, v437) == 0;

        if (v438)
          v535 = v422;
        else
          v535 = 0;
      }

    }
    v439 = v561 < 2;

    v310 = v534;
    if (v439)
    {
LABEL_186:
      if ((objc_msgSend_containsObject_(v530, v306, (uint64_t)v555, v307, v308, v309) & 1) == 0)
      {
        objc_msgSend_addObject_(v530, v440, (uint64_t)v555, v441, v442, v443);
        sub_1BE64463C((uint64_t)v543, v555, v550);
        v444 = (void *)objc_claimAutoreleasedReturnValue();
        v445 = [CHTextRecognitionResult alloc];
        LOBYTE(v525) = 0;
        v447 = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v445, v446, (uint64_t)v555, (uint64_t)v550, (uint64_t)v547, (uint64_t)v545, v544, v549, *(double *)(v559 + 104), v546, v548, v444, v537, v525);
        sub_1BE64884C((uint64_t)v543, v447);
        v452 = (void *)objc_claimAutoreleasedReturnValue();
        if (v452)
        {
          objc_msgSend_addObject_(v541, v448, (uint64_t)v452, v449, v450, v451);
          if (!v535)
          {
            v535 = 0;
            objc_msgSend_rareWordIndexes(v447, v448, v453, v449, v450, v451);
            v454 = (void *)objc_claimAutoreleasedReturnValue();
            v460 = objc_msgSend_count(v454, v455, v456, v457, v458, v459) == 0;

            if (v460)
              v535 = v452;
            else
              v535 = 0;
          }
        }
        objc_msgSend_addObject_(v541, v448, (uint64_t)v447, v449, v450, v451);
        if (!v535)
        {
          v535 = 0;
          objc_msgSend_rareWordIndexes(v447, v461, v462, v463, v464, v465);
          v466 = (void *)objc_claimAutoreleasedReturnValue();
          v472 = objc_msgSend_count(v466, v467, v468, v469, v470, v471) == 0;

          if (v472)
            v535 = v447;
          else
            v535 = 0;
        }

        v310 = v534;
      }
    }
    if (!v310)
    {
      v543[50] = v540;
      v26 = 1;
      if (SHIBYTE(v576.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_201;
LABEL_160:
      if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_202;
      goto LABEL_161;
    }
    v26 = v310 + 1;
    if ((SHIBYTE(v576.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_160;
LABEL_201:
    operator delete(v576.__r_.__value_.__l.__data_);
    if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0)
LABEL_202:
      operator delete(v577.__r_.__value_.__l.__data_);
LABEL_161:

    if (v533)
      operator delete(v533);
    if (v536)
      operator delete(v536);

    v559 += 416;
  }
  while (v559 != v531);
LABEL_204:
  shouldPromoteCJKCommonCharacters = objc_msgSend_shouldPromoteCJKCommonCharacters(v543[57], v20, v21, v22, v23, v24);
  if (v535)
    v479 = shouldPromoteCJKCommonCharacters;
  else
    v479 = 0;
  if (v479 == 1)
  {
    objc_msgSend_firstObject(v541, v474, v475, v476, v477, v478);
    v480 = (id)objc_claimAutoreleasedReturnValue();
    v481 = v535 == v480;

    if (!v481)
    {
      v482 = objc_msgSend_indexOfObject_(v541, v474, (uint64_t)v535, v476, v477, v478);
      objc_msgSend_removeObjectAtIndex_(v541, v483, v482, v484, v485, v486);
      objc_msgSend_insertObject_atIndex_(v541, v487, (uint64_t)v535, 0, v488, v489);
    }
  }
  for (i = 1; i < objc_msgSend_count(v541, v474, v475, v476, v477, v478); ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(v541, v491, i, v492, v493, v494);
    v495 = (void *)objc_claimAutoreleasedReturnValue();
    v565 = 0u;
    v566 = 0u;
    v563 = 0u;
    v564 = 0u;
    objc_msgSend_wordCombinedScores(v495, v496, v497, v498, v499, v500);
    v501 = (void *)objc_claimAutoreleasedReturnValue();
    v509 = objc_msgSend_countByEnumeratingWithState_objects_count_(v501, v502, (uint64_t)&v563, (uint64_t)v585, 16, v503);
    if (v509)
    {
      v510 = *(_QWORD *)v564;
      while (2)
      {
        for (j = 0; j != v509; ++j)
        {
          if (*(_QWORD *)v564 != v510)
            objc_enumerationMutation(v501);
          objc_msgSend_floatValue(*(void **)(*((_QWORD *)&v563 + 1) + 8 * j), v504, v505, v506, v507, v508);
          if (v512 > 50.0)
          {

            objc_msgSend_removeObjectAtIndex_(v541, v513, i--, v514, v515, v516);
            goto LABEL_222;
          }
        }
        v509 = objc_msgSend_countByEnumeratingWithState_objects_count_(v501, v504, (uint64_t)&v563, (uint64_t)v585, 16, v508);
        if (v509)
          continue;
        break;
      }
    }

LABEL_222:
  }
  objc_msgSend__tokenizedTextResultFromResults_segmentGroup_offsetSegment_decodedStrokeSets_spaceBehavior_(v543, v491, (uint64_t)v541, (uint64_t)v527, 0, 0, 1);
  v517 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_adjustColumns(v517, v518, v519, v520, v521, v522);
  v523 = v517;

  return v523;
}

void sub_1BE64CE38(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;

  *(_QWORD *)(v1 + 72) = 0;
  if (*(char *)(v1 + 599) < 0)
    operator delete(*(void **)(v1 + 576));
  if (*(char *)(v1 + 623) < 0)
    operator delete(*(void **)(v1 + 600));

  *(_QWORD *)(v1 + 56) = *(_QWORD *)(v1 + 624);
  if (*(_QWORD *)(v1 + 56))
  {
    v8 = *(void **)(v1 + 56);
    *(_QWORD *)(v1 + 632) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v1 + 648);
  if (v9)
    operator delete(v9);

  _Unwind_Resume(a1);
}

void **sub_1BE64D27C(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_1BE670A58(v3 - 416);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_1BE64D2D4(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, double a9, double a10)
{
  id v19;
  id v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  CHTextRecognitionResult *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  CHTextRecognitionResult *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  void *isTextReplacement;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  _BOOL4 v120;
  void *v121;
  id v122;
  _QWORD v123[4];
  id v124;
  void *v125;
  void *v126;
  id v127;
  void *v128;
  void *v129;
  void *v130;
  _QWORD v131[3];

  v131[1] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  v20 = a3;
  v121 = v19;
  v122 = a8;
  if (!a1)
  {
    v120 = 0;
    goto LABEL_14;
  }
  v123[0] = MEMORY[0x1E0C809B0];
  v123[1] = 3221225472;
  v123[2] = sub_1BE64D7EC;
  v123[3] = &unk_1E77F2718;
  v21 = v20;
  v124 = v21;
  v27 = objc_msgSend_indexOfObjectPassingTest_(v19, v22, (uint64_t)v123, v23, v24, v25);
  v120 = v27 == 0x7FFFFFFFFFFFFFFFLL;
  if (v27 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend_objectAtIndex_(v19, v26, v27, v28, v29, v30);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_score(v36, v37, v38, v39, v40, v41);
    if (v47 > a9)
      v47 = a9;
    objc_msgSend_setScore_(v36, v42, v43, v44, v45, v46, v47);

    goto LABEL_13;
  }
  v115 = (uint64_t)v21;
  if (!objc_msgSend_isRareChineseEntry_(a1, v26, (uint64_t)v21, v28, v29, v30))
  {
    v116 = 0;
    if (a6)
      goto LABEL_6;
LABEL_11:
    v119 = 0;
    goto LABEL_12;
  }
  objc_msgSend_indexSetWithIndex_(MEMORY[0x1E0CB36B8], v31, 0, v33, v34, v35);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a6)
    goto LABEL_11;
LABEL_6:
  objc_msgSend_indexSetWithIndex_(MEMORY[0x1E0CB36B8], v31, 0, v33, v34, v35);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:
  v48 = objc_msgSend_length(v21, v31, v32, v33, v34, v35);
  v49 = [CHTextRecognitionResult alloc];
  objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v50, 0, v48, v51, v52);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  v131[0] = v113;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v53, (uint64_t)v131, 1, v54, v55);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v56, a7, v57, v58, v59);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  v130 = v112;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v60, (uint64_t)&v130, 1, v61, v62);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v63, v64, v65, v66, v67, a10);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v129 = v111;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v68, (uint64_t)&v129, 1, v69, v70);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v71, v72, v73, v74, v75, a9);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v128 = v76;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v77, (uint64_t)&v128, 1, v78, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v127 = v122;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v81, (uint64_t)&v127, 1, v82, v83);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = v49;
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v86, a4, v87, v88, v89);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v126 = v90;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v91, (uint64_t)&v126, 1, v92, v93);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v95, a5, v96, v97, v98);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v125 = v99;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v100, (uint64_t)&v125, 1, v101, v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  isTextReplacement = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v85, v104, v115, (uint64_t)v118, (uint64_t)v117, (uint64_t)v114, v80, v84, a9, v94, v103, v116, v119, 0);

  objc_msgSend_addObject_(v121, v106, (uint64_t)isTextReplacement, v107, v108, v109);
LABEL_13:

LABEL_14:
  return v120;
}

void sub_1BE64D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE64D7EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isEqualToString;

  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1BE64D82C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64DC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

double sub_1BE64DE14(double a1, uint64_t a2, double *a3)
{
  return a3[16]
       + a3[17]
       + (a3[14] + a3[15] + a1) * 0.15
       + (a3[20] + a3[21]) * 0.2
       + (a3[18] + a3[19]) * 2.0
       + (a3[22] + a3[23]) * 0.2
       + a3[24] * 8.0;
}

double sub_1BE64DE78(uint64_t a1, double *a2)
{
  return a2[16] + a2[17] + (a2[20] + a2[21]) * 0.2 + (a2[18] + a2[19]) * 2.0 + (a2[22] + a2[23]) * 0.2 + a2[24] * 8.0;
}

void sub_1BE64DEC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("'\".-"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF567F48;
  qword_1EF567F48 = v6;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v8, (uint64_t)CFSTR("àáâäãçèéêëìíîïñòóôõöùúûü\xFFÀÁÂÄÃÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜŸ"), v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_1EF567F50;
  qword_1EF567F50 = v12;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v14, (uint64_t)CFSTR(".-"), v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)qword_1EF567F58;
  qword_1EF567F58 = v18;

}

void sub_1BE64DF40(uint64_t a1, uint64_t a2)
{
  id v4;
  double v5;
  double v6;
  unsigned int TokenID;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isInappropriateLexiconEntry;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isEqualToString;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t shouldApplyDiacriticSensitivity;
  const char *v110;
  double v111;
  double v112;
  id v113;
  id v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  double v132;
  BOOL v133;
  double v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  double v145;
  void *v146;
  double v147;
  char v148;
  uint64_t v149;
  char v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  void *v166;
  double v167;
  void *v168;
  void *v169;
  void *v170;
  double v171;
  int v172;
  unsigned int v173;
  void *v174;
  uint64_t v175;
  void *v176;
  id v177;
  id v178;
  char v179;

  v4 = (id)LXEntryCopyString();
  LXEntryGetPartialProbability();
  v6 = v5;
  TokenID = LXEntryGetTokenID();
  isInappropriateLexiconEntry = objc_msgSend_isInappropriateLexiconEntry_(*(void **)(*(_QWORD *)(a1 + 32) + 488), v8, a2, v9, v10, v11);
  isEqualToString = objc_msgSend_isEqualToString_(v4, v13, *(_QWORD *)(a1 + 40), v14, v15, v16);
  objc_msgSend_lowercaseString(v4, v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_isEqualToString_(v4, v24, (uint64_t)v23, v25, v26, v27);

  v175 = objc_msgSend_compare_options_(v4, v29, *(_QWORD *)(a1 + 40), 1, v30, v31);
  if (v6 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = TokenID;
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = v6;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  if (*(_BYTE *)(v36 + 24))
    v37 = 1;
  else
    v37 = isInappropriateLexiconEntry;
  *(_BYTE *)(v36 + 24) = v37;
  objc_msgSend_componentsSeparatedByCharactersInSet_(v4, v32, qword_1EF567F48, v33, v34, v35);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v173 = TokenID;
  objc_msgSend_componentsJoinedByString_(v38, v39, (uint64_t)&stru_1E77F6F28, v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend_compare_options_(v43, v44, *(_QWORD *)(a1 + 48), 129, v45, v46))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24) = 1;
    if (*(_BYTE *)(a1 + 208))
      v59 = v28;
    else
      v59 = 0;
    if (v59 == 1)
      goto LABEL_11;
LABEL_17:
    v60 = v4;
    v61 = objc_msgSend_length(v4, v47, v48, v49, v50, v51);
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 208))
    v52 = v28;
  else
    v52 = 0;
  if (v52 != 1)
    goto LABEL_17;
LABEL_11:
  uppercaseFirstLetter((NSString *)v4);
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  if ((isEqualToString & 1) != 0)
    isEqualToString = 1;
  else
    isEqualToString = objc_msgSend_isEqualToString_(v53, v54, *(_QWORD *)(a1 + 40), v56, v57, v58);
  v60 = v53;
  v61 = objc_msgSend_length(v53, v54, v55, v56, v57, v58);
LABEL_20:
  v172 = isInappropriateLexiconEntry;
  v65 = *(_QWORD *)(a1 + 176);
  if (v61 >= v65)
  {
    v174 = v43;
    objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v62, *(_QWORD *)(a1 + 168), v65, v63, v64);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringToIndex_(v60, v67, *(_QWORD *)(a1 + 176), v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = objc_msgSend_isEqualToString_(v66, v72, (uint64_t)v71, v73, v74, v75);

    objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v77, *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v78, v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringToIndex_(v60, v81, *(_QWORD *)(a1 + 176), v82, v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = objc_msgSend_caseInsensitiveCompare_(v80, v86, (uint64_t)v85, v87, v88, v89);
    v91 = v28 ^ 1;

    v96 = v65 ? v76 : 1;
    v97 = v90 ? 1 : v91;
    v43 = v174;
    if (v96 == 1 || (v97 & 1) == 0)
    {
      if (v175 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24))
      {
        if (v6 <= *(double *)(a1 + 200))
          v134 = 0.0004 - v6;
        else
          v134 = 0.0004;
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v92, (uint64_t)CFSTR("%@%@%@"), v93, v94, v95, *(_QWORD *)(a1 + 64), v60, *(_QWORD *)(a1 + 72));
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = v135;
        v141 = *(void **)(a1 + 32);
        v142 = *(_QWORD *)(a1 + 176);
        if (v172)
        {
          v143 = *(void **)(a1 + 96);
          objc_msgSend_substringFromIndex_(v135, v136, v142, v137, v138, v139);
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          v145 = (*(double (**)(double))(*(_QWORD *)(a1 + 104) + 16))(v134);
          sub_1BE64D2D4(v141, v143, v144, 1, 1, 1, v173, *(void **)(a1 + 88), v145, **(double **)(*(_QWORD *)(a1 + 192) + 304));
        }
        else
        {
          v166 = *(void **)(a1 + 80);
          objc_msgSend_substringFromIndex_(v135, v136, v142, v137, v138, v139);
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          v167 = (*(double (**)(double))(*(_QWORD *)(a1 + 104) + 16))(v134);
          sub_1BE64D2D4(v141, v166, v144, 1, 1, 0, v173, *(void **)(a1 + 88), v167, **(double **)(*(_QWORD *)(a1 + 192) + 304));
        }

        goto LABEL_61;
      }
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v92, (uint64_t)CFSTR("%@%@%@"), v93, v94, v95, *(_QWORD *)(a1 + 64), v60, *(_QWORD *)(a1 + 72));
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      if (!isEqualToString || objc_msgSend_length(*(void **)(a1 + 72), v98, v99, v100, v101, v102))
      {
        if (v6 < *(double *)(a1 + 200) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24))
          v104 = 0.0001;
        else
          v104 = 0.0;
        v105 = 0.1;
        if (!*(_BYTE *)(a1 + 209))
          v105 = 0.0;
        v106 = v104 + v105;
        if (v175)
        {
          v176 = v103;
          v179 = 0;
          v107 = *(_QWORD *)(a1 + 72);
          v108 = *(_QWORD *)(a1 + 40);
          shouldApplyDiacriticSensitivity = objc_msgSend_shouldApplyDiacriticSensitivity(*(void **)(*(_QWORD *)(a1 + 32) + 456), v98, v99, v100, v101, v102);
          v177 = 0;
          v178 = 0;
          objc_msgSend_computeEditPenalizationFromString_toReferenceString_withSuffix_withCaseSensitivity_withFirstLetterCaseSensitivity_withDiacriticSensitivity_withDiacriticsCharSet_withConsumableStrokesCharSet_outputSuffix_lexiconExtraCharacters_firstLetterCaseFlipped_(CHLanguageUtilities, v110, v108, (uint64_t)v60, v107, 0, 0, shouldApplyDiacriticSensitivity, qword_1EF567F50, qword_1EF567F48, &v178, &v177, &v179);
          v112 = v111;
          v113 = v178;
          v114 = v177;
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v115, (uint64_t)CFSTR("%@%@%@"), v116, v117, v118, *(_QWORD *)(a1 + 64), v60, v113);
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_rangeOfCharacterFromSet_(v114, v120, qword_1EF567F58, v121, v122, v123) != 0x7FFFFFFFFFFFFFFFLL)
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 24) = 1;
          v106 = v106 + v112 * 3.0 * 0.0001;

          v103 = v176;
          v128 = *(void **)(a1 + 32);
          v129 = *(_QWORD *)(a1 + 176);
          if ((v172 & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v98, (uint64_t)CFSTR("%@%@%@"), v100, v101, v102, *(_QWORD *)(a1 + 64), v60, *(_QWORD *)(a1 + 72));
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          v128 = *(void **)(a1 + 32);
          v129 = *(_QWORD *)(a1 + 176);
          if ((v172 & 1) != 0)
          {
LABEL_42:
            v130 = *(void **)(a1 + 96);
            objc_msgSend_substringFromIndex_(v119, v124, v129, v125, v126, v127);
            v131 = (void *)objc_claimAutoreleasedReturnValue();
            v132 = (*(double (**)(double))(*(_QWORD *)(a1 + 104) + 16))(v106);
            v133 = sub_1BE64D2D4(v128, v130, v131, 1, 1, 1, v173, *(void **)(a1 + 88), v132, **(double **)(*(_QWORD *)(a1 + 192) + 304));
LABEL_50:
            v148 = v133;

            v149 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8);
            if (*(_BYTE *)(v149 + 24))
              v150 = 1;
            else
              v150 = v148;
            *(_BYTE *)(v149 + 24) = v150;

            goto LABEL_54;
          }
        }
        v146 = *(void **)(a1 + 80);
        objc_msgSend_substringFromIndex_(v119, v124, v129, v125, v126, v127);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        v147 = (*(double (**)(double))(*(_QWORD *)(a1 + 104) + 16))(v106);
        v133 = sub_1BE64D2D4(v128, v146, v131, 1, 1, 0, v173, *(void **)(a1 + 88), v147, **(double **)(*(_QWORD *)(a1 + 192) + 304));
        goto LABEL_50;
      }
      if (v6 <= *(double *)(a1 + 184))
      {
        objc_msgSend_componentsSeparatedByCharactersInSet_(v60, v98, qword_1EF567F50, v100, v101, v102);
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_componentsJoinedByString_(v151, v152, (uint64_t)&stru_1E77F6F28, v153, v154, v155);
        v156 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_msgSend_isEqualToString_(v174, v157, (uint64_t)v60, v158, v159, v160) & 1) != 0)
        {
          v165 = objc_msgSend_isEqualToString_(v156, v161, (uint64_t)v60, v162, v163, v164);

          if ((v165 & 1) != 0)
          {
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = v173;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 0;
LABEL_54:

LABEL_61:
            v43 = v174;
            goto LABEL_62;
          }
        }
        else
        {

        }
      }
      v168 = *(void **)(a1 + 32);
      v169 = *(void **)(a1 + 80);
      objc_msgSend_substringFromIndex_(v103, v98, *(_QWORD *)(a1 + 176), v100, v101, v102);
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      v171 = (*(double (**)(double))(*(_QWORD *)(a1 + 104) + 16))(0.0);
      sub_1BE64D2D4(v168, v169, v170, 1, 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24), v173, *(void **)(a1 + 88), v171, **(double **)(*(_QWORD *)(a1 + 192) + 304));

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = 1;
      goto LABEL_54;
    }
  }
LABEL_62:
  CFRelease(v4);

}

void sub_1BE64E6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE64E7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE64E7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE64E7F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE64E824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64E878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE64E894(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_score(v4, v7, v8, v9, v10, v11);
  objc_msgSend_numberWithDouble_(v6, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_score(v5, v19, v20, v21, v22, v23);
  objc_msgSend_numberWithDouble_(v18, v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_compare_(v17, v30, (uint64_t)v29, v31, v32, v33);

  return v34;
}

void sub_1BE64E930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE64E954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE64E968(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_score(v4, v7, v8, v9, v10, v11);
  objc_msgSend_numberWithDouble_(v6, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_score(v5, v19, v20, v21, v22, v23);
  objc_msgSend_numberWithDouble_(v18, v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_compare_(v17, v30, (uint64_t)v29, v31, v32, v33);

  return v34;
}

void sub_1BE64EA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE64EA28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE64EC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE64ED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE64EDAC(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  NSString *v81;

  v2 = a2;
  objc_msgSend_wordLexicalEntries(v2, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v8, v9, v10, v11, v12, v13))
  {
    objc_msgSend_wordLexicalEntries(v2, v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastObject(v19, v20, v21, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_BOOLValue(v25, v26, v27, v28, v29, v30);

  }
  else
  {
    v31 = 0;
  }

  objc_msgSend_wordPatternEntries(v2, v32, v33, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v37, v38, v39, v40, v41, v42))
  {
    objc_msgSend_wordPatternEntries(v2, v43, v44, v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastObject(v48, v49, v50, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = objc_msgSend_BOOLValue(v54, v55, v56, v57, v58, v59);

    v61 = v60 ^ 1;
    if ((v31 & 1) != 0)
    {
LABEL_6:
      v67 = 1;
      goto LABEL_14;
    }
  }
  else
  {
    v61 = 1;

    if ((v31 & 1) != 0)
      goto LABEL_6;
  }
  objc_msgSend_string(v2, v62, v63, v64, v65, v66);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = objc_msgSend_length(v68, v69, v70, v71, v72, v73);
  v67 = v74 == 1;
  if (v74 == 1)
    v80 = 1;
  else
    v80 = v61;
  if ((v80 & 1) == 0)
  {
    objc_msgSend_string(v2, v75, v76, v77, v78, v79);
    v81 = (NSString *)objc_claimAutoreleasedReturnValue();
    v67 = isMixedCaseString(v81) ^ 1;

  }
LABEL_14:

  return v67;
}

void sub_1BE64EED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE64EF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE64EF1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64EF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE64EF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE64EF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE64EF64(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  CHDrawing *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  CGFloat v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  CGFloat v122;
  CGFloat v123;
  CGFloat v124;
  CGFloat v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  CHNeuralNetwork *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  size_t v158;
  unint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  uint64_t *v174;
  _QWORD *v175;
  uint8_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  BOOL v181;
  uint8_t *v182;
  uint8_t *v183;
  uint64_t *v184;
  uint64_t *v185;
  void *v186;
  const char *v187;
  id v188;
  id v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  unint64_t *v203;
  char *v204;
  unint64_t v205;
  unint64_t i;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  int64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  NSObject *v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  size_t v258;
  uint64_t v259;
  const void *v260;
  void *v261;
  void *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint8_t *v266;
  uint64_t **v267;
  unint64_t v268;
  uint64_t *v269;
  uint64_t **v270;
  uint64_t **v271;
  unint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint8_t *v276;
  uint8_t *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  unint64_t v296;
  __int128 *v297;
  __int128 v298;
  unint64_t v299;
  uint8_t *v300;
  _BOOL4 v301;
  unint64_t v302;
  int v303;
  int v304;
  uint8_t *v305;
  int v306;
  int v307;
  int v308;
  BOOL v309;
  BOOL v310;
  unsigned int v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  __int128 v315;
  __int128 *v316;
  unint64_t v317;
  uint8_t *v318;
  _BOOL4 v319;
  unint64_t v320;
  int v321;
  int v322;
  uint8_t *v323;
  int v324;
  int v325;
  int v326;
  BOOL v328;
  unsigned int v329;
  int v330;
  signed int v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  _BYTE *v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _BYTE *v359;
  uint64_t v360;
  _BYTE *v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  _OWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  CHDrawing *v392;
  void *v393;
  const char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  const char *v399;
  uint64_t v400;
  uint64_t v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  double *v407;
  CGFloat v408;
  CGFloat v409;
  CGFloat v410;
  CGFloat v411;
  double *v412;
  double x;
  double y;
  double width;
  double height;
  uint64_t *v417;
  uint64_t **v418;
  uint64_t *v419;
  _QWORD *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t *v424;
  _QWORD *v425;
  _OWORD *v426;
  uint64_t **v427;
  uint64_t **v428;
  uint64_t v429;
  uint64_t *v430;
  _QWORD *v431;
  _QWORD *v432;
  uint64_t *v433;
  uint64_t **v434;
  _BYTE *v435;
  _BYTE *v436;
  int64_t v437;
  float *v438;
  const void *v439;
  float *v440;
  char v441;
  char *v442;
  float v443;
  int v444;
  unsigned __int8 shouldRelaxFinalCandidatesThresholding;
  double v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  double v451;
  uint64_t *v452;
  Class isa;
  uint64_t v454;
  uint64_t v455;
  double v456;
  char *v457;
  char *v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  char *v462;
  int64x2_t *v463;
  uint64_t v464;
  char *v465;
  char *v466;
  uint64_t *v467;
  Class v468;
  uint64_t v469;
  uint64_t v470;
  double v471;
  char *v472;
  char *v473;
  const char *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  double v479;
  double v480;
  double v481;
  double v482;
  CHClassifiableDrawing *v483;
  const char *v484;
  void *v485;
  CHDrawingContext *v486;
  const char *v487;
  void *v488;
  const char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  const char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t **v503;
  uint64_t **v504;
  uint64_t *v505;
  uint64_t *v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t *v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t *v516;
  _QWORD *v517;
  uint64_t *v518;
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t *v523;
  _QWORD *v524;
  _OWORD *v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t *v530;
  uint64_t *v531;
  uint64_t *v532;
  uint64_t v533;
  const char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  NSObject *v545;
  const char *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  _OWORD *v552;
  char *v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  double *v559;
  long double v560;
  void *v561;
  id v562;
  char v563;
  unint64_t v564;
  uint64_t *v565;
  uint64_t *TotalNumberOfSegments;
  const char *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  void *v572;
  const char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  BOOL v578;
  const char *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  NSObject *v584;
  const char *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  void *v590;
  const char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  const char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  id v603;
  NSString *v604;
  Network *v605;
  Network *v606;
  unsigned __int8 v607;
  unsigned __int8 v608;
  unint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  const char *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  void *v625;
  const char *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  const char *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  void *v635;
  const char *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  void *v641;
  const char *v642;
  uint64_t v643;
  uint64_t v644;
  const char *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  const char *v651;
  uint64_t v652;
  void *v653;
  NSString *v654;
  __CFString *v655;
  const char *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  const char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  const void *v666;
  const void *v667;
  const char *v668;
  uint64_t v669;
  id v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  _QWORD *v676;
  char *v677;
  void *v678;
  void *v679;
  uint64_t v680;
  __CFString *v681;
  const char *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  __CFString *v687;
  unint64_t v688;
  void *UInt32PtrWithNSString;
  void *v690;
  uint64_t v691;
  void *v692;
  void *v693;
  void *v694;
  const char *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  const char *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  const char *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  const char *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  void *v719;
  void *v720;
  const char *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  const char *v727;
  uint64_t v728;
  uint64_t v729;
  void *v730;
  id v731;
  id v732;
  const char *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  const char *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  void *v743;
  id v744;
  id v745;
  const char *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  void *v750;
  id v751;
  const char *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  const char *v756;
  uint64_t v757;
  uint64_t v758;
  const char *v759;
  uint64_t v760;
  uint64_t v761;
  const char *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t *v767;
  void *v768;
  const char *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  void *v773;
  const char *v774;
  uint64_t v775;
  uint64_t v776;
  void *v777;
  const char *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  void *v782;
  const char *v783;
  uint64_t v784;
  uint64_t v785;
  void *v786;
  const char *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  const char *v793;
  uint64_t v794;
  uint64_t v795;
  void *v796;
  const char *v797;
  uint64_t v798;
  uint64_t v799;
  void *v800;
  const char *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int shouldTransformCharacterProbabilitiesIntoLogScores;
  const char *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  float v812;
  double v813;
  void *v814;
  const char *v815;
  uint64_t v816;
  uint64_t v817;
  void *v818;
  const char *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  _QWORD **v824;
  const char *v825;
  uint64_t v826;
  uint64_t v827;
  void *v828;
  void *v829;
  const char *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  const char *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  void *v838;
  CHTextRecognitionResult *v839;
  const char *v840;
  void *isTextReplacement;
  const char *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  void *v846;
  const char *v847;
  const char *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  const char *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  const char *v858;
  uint64_t v859;
  uint64_t v860;
  void *v861;
  void *v862;
  const char *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  void *v868;
  const char *v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  _BOOL4 v874;
  const char *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  id v880;
  uint64_t v881;
  const char *v882;
  id v883;
  id v884;
  const char *v885;
  uint64_t v886;
  uint64_t v887;
  const char *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t shouldTransliterateSentencesSCTC;
  const char *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t shouldKeepOutOfPatternCandidates;
  const char *v900;
  const char *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  const char *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v911;
  unint64_t v912;
  char *v913;
  uint64_t v914;
  unsigned int v915;
  uint64_t v916;
  uint64_t v917;
  void *context;
  CFTypeRef RootCursor;
  id v920;
  CFTypeRef cf;
  void *v922;
  __CFString *v923;
  id v924;
  NSString *v925;
  id v926;
  uint64_t v927;
  CHMutableTokenizedTextResult *v928;
  int64x2_t v929;
  float *v930;
  uint64_t v931;
  unsigned int (**v932)(void);
  _QWORD *v933;
  void *v934;
  uint64_t v935;
  id v936;
  _QWORD *v937;
  NSString *size;
  size_t sizea;
  id v940;
  uint64_t v941;
  CHDrawing *v942;
  CHDrawing *v943;
  uint64_t v944;
  uint64_t *v945;
  int v946;
  id v947;
  uint64_t *v948;
  NSString *v949;
  void *v950;
  void *v951;
  id v952;
  uint64_t (**v953)(void);
  uint64_t v954;
  void *v955;
  uint64_t v956;
  id v957;
  void *v958;
  id v959;
  id v960;
  char *v961;
  char *v962;
  char *v963;
  void *v964;
  __int128 v965;
  void *v966;
  _BYTE *v967;
  uint64_t v968;
  _BYTE v969[24];
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  _QWORD *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  __int128 *v977;
  char v978;
  const void *v979;
  uint64_t v980;
  double v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  void *__dst;
  uint64_t *v986;
  uint64_t v987;
  _QWORD **v988;
  _QWORD *v989[2];
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  int v1001;
  void *v1002;
  _QWORD *v1003[2];
  void *__p;
  float *v1005;
  float *v1006;
  void *v1007;
  char *v1008;
  char *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint8_t buf[24];
  uint64_t *v1013;
  double v1014;
  id v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  CGRect v1020;
  CGRect v1021;
  CGRect v1022;
  CGRect v1023;
  CGRect v1024;
  CGRect v1025;
  CGRect v1026;
  CGRect v1027;
  CGRect v1028;
  CGRect v1029;
  CGRect v1030;

  v1019 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v926 = a3;
  v924 = a4;
  v920 = a5;
  v922 = v9;
  v928 = objc_alloc_init(CHMutableTokenizedTextResult);
  objc_msgSend_strokeCount(v9, v10, v11, v12, v13, v14);
  objc_msgSend_totalSegmentCount(v926, v15, v16, v17, v18, v19);
  sub_1BE65280C(a1, v924);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_precomposedStringWithCanonicalMapping(v20, v21, v22, v23, v24, v25);
  v925 = (NSString *)objc_claimAutoreleasedReturnValue();

  v944 = sub_1BE6528B8(a1, v924);
  v981 = sub_1BE64859C(v924);
  v982 = v31;
  v983 = v32;
  v984 = v33;
  if (v944 == 2)
  {
    v923 = &stru_1E77F6F28;
  }
  else
  {
    lastWordInString(v925);
    v923 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v34 = objc_msgSend_length(v925, v26, v27, v28, v29, v30);
  v40 = objc_msgSend_length(v923, v35, v36, v37, v38, v39);
  v914 = objc_msgSend_length(v923, v41, v42, v43, v44, v45);
  v917 = objc_msgSend__effectiveMaxRecognitionResultCount((void *)a1, v46, v47, v48, v49, v50);
  if (objc_msgSend_shouldApplyLexicalPenalty(*(void **)(a1 + 456), v51, v52, v53, v54, v55))
  {
    RootCursor = (CFTypeRef)LXLexiconCreateRootCursor();
    if (*(_QWORD *)(a1 + 352))
      cf = (CFTypeRef)LXLexiconCreateRootCursor();
    else
      cf = 0;
  }
  else
  {
    cf = 0;
    RootCursor = 0;
  }
  context = (void *)MEMORY[0x1C3B818B0]();
  sub_1BE66ADA4((uint64_t)v969);
  v966 = 0;
  v967 = 0;
  v968 = 0;
  v61 = objc_msgSend_supportedSegmentationStrategy(*(void **)(a1 + 456), v56, v57, v58, v59, v60);
  v954 = a1;
  if (v61)
  {
    if (v61 == 1)
    {
      sub_1BE6A1F54(v926, (uint64_t)buf);
      sub_1BE652970((uint64_t)v969, (uint64_t)buf);
      sub_1BE66A0DC((uint64_t)buf);
    }
  }
  else
  {
    objc_msgSend_sortedDrawingUsingMinXCoordinate(v9, v62, v63, v64, v65, v66);
    v67 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
    spatialSegmentationNetworkFromDrawing(v67, (uint64_t)buf);
    sub_1BE652970((uint64_t)v969, (uint64_t)buf);
    sub_1BE66A0DC((uint64_t)buf);

  }
  if (v976 - v975 == 72
    || (objc_msgSend_segments(v926, v62, v63, v64, v65, v66),
        v68 = (void *)objc_claimAutoreleasedReturnValue(),
        v74 = objc_msgSend_count(v68, v69, v70, v71, v72, v73) == 1,
        v68,
        v80 = a1,
        v74))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v81 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_segments(v926, v82, v83, v84, v85, v86);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v93 = objc_msgSend_count(v87, v88, v89, v90, v91, v92);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v93;
      _os_log_impl(&dword_1BE607000, v81, OS_LOG_TYPE_DEBUG, "Processing input as single character drawing with %lu segments\n", buf, 0xCu);

    }
    v94 = 1;
    v80 = a1;
  }
  else
  {
    v94 = 0;
  }
  v916 = v34 - v40;
  v915 = v94;
  if ((v94 & objc_msgSend_shouldFallbackOnSingleCharacterExpansion(*(void **)(v80 + 456), v75, v76, v77, v78, v79)) != 1)
  {
    v165 = objc_msgSend_matchingStrokePrefixRangeForDrawing_(*(void **)(v80 + 376), v95, (uint64_t)v922, v96, v97, v98);
    v167 = v166;
    v173 = v922;
    if (v167)
    {
      v174 = *(uint64_t **)(v80 + 512);
      if (v174 != (uint64_t *)(v80 + 520))
      {
        do
        {
          v175 = (_QWORD *)v174[4];
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          *(_QWORD *)buf = &buf[8];
          sub_1BE670B3C(buf, v175, v174 + 5);
          v176 = *(uint8_t **)buf;
          if (*(uint8_t **)buf == &buf[8])
          {
LABEL_43:
            v177 = (uint64_t *)v174[1];
            if (v177)
            {
              do
              {
                v178 = v177;
                v177 = (uint64_t *)*v177;
              }
              while (v177);
            }
            else
            {
              do
              {
                v178 = (uint64_t *)v174[2];
                v310 = *v178 == (_QWORD)v174;
                v174 = v178;
              }
              while (!v310);
            }
          }
          else
          {
            while (1)
            {
              v179 = *((_QWORD *)v176 + 4);
              v181 = v179 >= v165;
              v180 = v179 - v165;
              v181 = !v181 || v180 >= v167;
              if (v181)
                break;
              v182 = (uint8_t *)*((_QWORD *)v176 + 1);
              if (v182)
              {
                do
                {
                  v183 = v182;
                  v182 = *(uint8_t **)v182;
                }
                while (v182);
              }
              else
              {
                do
                {
                  v183 = (uint8_t *)*((_QWORD *)v176 + 2);
                  v310 = *(_QWORD *)v183 == (_QWORD)v176;
                  v176 = v183;
                }
                while (!v310);
              }
              v176 = v183;
              if (v183 == &buf[8])
                goto LABEL_43;
            }
            v184 = (uint64_t *)v174[1];
            v185 = v174;
            if (v184)
            {
              do
              {
                v178 = v184;
                v184 = (uint64_t *)*v184;
              }
              while (v184);
            }
            else
            {
              do
              {
                v178 = (uint64_t *)v185[2];
                v310 = *v178 == (_QWORD)v185;
                v185 = v178;
              }
              while (!v310);
            }
            if (*(uint64_t **)(v80 + 512) == v174)
              *(_QWORD *)(v80 + 512) = v178;
            --*(_QWORD *)(v80 + 528);
            sub_1BE670DF8(*(uint64_t **)(v80 + 520), v174);
            v186 = (void *)v174[7];
            if (v186)
            {
              v174[8] = (uint64_t)v186;
              operator delete(v186);
            }
            sub_1BE62033C((uint64_t)(v174 + 4), (_QWORD *)v174[5]);
            operator delete(v174);
          }
          sub_1BE62033C((uint64_t)buf, *(_QWORD **)&buf[8]);
          v174 = v178;
        }
        while (v178 != (uint64_t *)(v80 + 520));
      }
    }
    else
    {
      sub_1BE66D224(*(_QWORD **)(v80 + 520));
      *(_QWORD *)(v80 + 512) = v80 + 520;
      *(_OWORD *)(v80 + 520) = 0u;
    }
    v912 = v167;
    if (objc_msgSend_shouldUseCaching(*(void **)(v80 + 456), v168, v169, v170, v171, v172))
      objc_setProperty_nonatomic_copy((id)v80, v187, v173, 376);

    v188 = v926;
    v189 = v173;
    v965 = 0uLL;
    v964 = 0;
    v955 = v189;
    v195 = objc_msgSend_supportedSegmentationStrategy(*(void **)(a1 + 456), v190, v191, v192, v193, v194);
    if (v195)
    {
      if (v195 != 1)
      {
        v203 = 0;
        v202 = 0;
        goto LABEL_112;
      }
      v201 = 0;
      v202 = 0;
      v203 = 0;
      v204 = 0;
      v205 = 0;
      for (i = 0; ; ++i)
      {
        objc_msgSend_segments(v188, v196, v197, v198, v199, v200);
        v208 = (void *)objc_claimAutoreleasedReturnValue();
        v214 = i < objc_msgSend_count(v208, v209, v210, v211, v212, v213);

        if (!v214)
        {
          v964 = v203;
          *(_QWORD *)&v965 = v202;
          *((_QWORD *)&v965 + 1) = v201;
          goto LABEL_112;
        }
        if ((unint64_t)v202 < v205)
        {
          *(_QWORD *)v202 = i;
          v207 = (uint64_t)(v202 + 8);
          goto LABEL_76;
        }
        v215 = (v202 - v204) >> 3;
        v216 = v215 + 1;
        if ((unint64_t)(v215 + 1) >> 61)
        {
          v964 = v203;
          *(_QWORD *)&v965 = v202;
          *((_QWORD *)&v965 + 1) = v201;
          sub_1BE61F930();
        }
        if ((uint64_t)(v205 - (_QWORD)v204) >> 2 > v216)
          v216 = (uint64_t)(v205 - (_QWORD)v204) >> 2;
        if (v205 - (unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
          v217 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v217 = v216;
        if (v217)
        {
          if (v217 >> 61)
          {
            v964 = v203;
            *(_QWORD *)&v965 = v202;
            *((_QWORD *)&v965 + 1) = v201;
            sub_1BE61F100();
          }
          v218 = operator new(8 * v217);
          v203 = (unint64_t *)&v218[8 * v215];
          *v203 = i;
          v207 = (uint64_t)(v203 + 1);
          v219 = v202 - v204;
          if (v202 == v204)
            goto LABEL_93;
        }
        else
        {
          v218 = 0;
          v203 = (unint64_t *)(8 * v215);
          *(_QWORD *)(8 * v215) = i;
          v207 = 8 * v215 + 8;
          v219 = v202 - v204;
          if (v202 == v204)
            goto LABEL_93;
        }
        v220 = v219 - 8;
        if (v220 >= 0x168)
        {
          v223 = (v202 - 8 - v204) & 0xFFFFFFFFFFFFFFF8;
          if (&v218[v202 - v204 - 8 - v223] > &v218[v202 - v204 - 8])
          {
            v221 = v202;
          }
          else if (&v202[-v223 - 8] > v202 - 8)
          {
            v221 = v202;
          }
          else if ((unint64_t)(v204 - v218) >= 0x20)
          {
            v224 = (v220 >> 3) + 1;
            v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
            v221 = &v202[-v225];
            v203 = (unint64_t *)((char *)v203 - v225);
            v226 = &v218[8 * v215 - 16];
            v227 = v202 - 16;
            v228 = v224 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v229 = *(_OWORD *)v227;
              *(v226 - 1) = *((_OWORD *)v227 - 1);
              *v226 = v229;
              v226 -= 2;
              v227 -= 32;
              v228 -= 4;
            }
            while (v228);
            if (v224 == (v224 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_93;
          }
          else
          {
            v221 = v202;
          }
        }
        else
        {
          v221 = v202;
        }
        do
        {
          v222 = *((_QWORD *)v221 - 1);
          v221 -= 8;
          *--v203 = v222;
        }
        while (v221 != v204);
LABEL_93:
        v201 = &v218[8 * v217];
        if (v204)
          operator delete(v204);
        v204 = (char *)v203;
        v205 = (unint64_t)v201;
LABEL_76:
        v202 = (char *)v207;
      }
    }
    if (v189)
    {
      objc_msgSend_strokeIndicesSortedByMinXCoordinate(v189, v196, v197, v198, v199, v200);
      v230 = *(_OWORD *)&buf[8];
      v203 = *(unint64_t **)buf;
    }
    else
    {
      v203 = 0;
      v230 = 0uLL;
    }
    v964 = v203;
    v965 = v230;
    v202 = (char *)v230;
LABEL_112:

    objc_msgSend_segments(v188, v231, v232, v233, v234, v235);
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    v242 = (v202 - (char *)v203) >> 3;
    v243 = v242 == objc_msgSend_count(v236, v237, v238, v239, v240, v241);

    if (!v243)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v244 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v244, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend_segments(v188, v245, v246, v247, v248, v249);
        v250 = (void *)objc_claimAutoreleasedReturnValue();
        v256 = objc_msgSend_count(v250, v251, v252, v253, v254, v255);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v256;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = (v202 - (char *)v203) >> 3;
        _os_log_impl(&dword_1BE607000, v244, OS_LOG_TYPE_FAULT, "The number of segments (%lu) must be the same as the number of sorted segment indexes (%lu)", buf, 0x16u);

      }
    }
    v961 = 0;
    v962 = 0;
    v963 = 0;
    v257 = v954;
    if (v202 == (char *)v203)
    {
      v913 = 0;
    }
    else
    {
      if (v202 - (char *)v203 < 0)
        sub_1BE61F930();
      v961 = (char *)operator new(v202 - (char *)v203);
      v963 = &v961[8 * v242];
      v913 = v961;
      memcpy(v961, v203, v202 - (char *)v203);
      v962 = v963;
    }
    v952 = v188;
    v947 = v955;
    v932 = (unsigned int (**)(void))v920;
    sizea = operator new();
    v258 = sizea;
    sub_1BE66ADA4(sizea);
    *(_QWORD *)(sizea + 24) = v970;
    *(_BYTE *)(sizea + 184) = v978;
    v259 = v980;
    if (v980)
    {
      v260 = v979;
      v261 = *(void **)(sizea + 240);
      if (v261)
      {
        free(v261);
        *(_QWORD *)(sizea + 240) = 0;
        *(_QWORD *)(sizea + 248) = 0;
      }
      v262 = malloc_type_malloc(4 * v259, 0x100004052888210uLL);
      memcpy(v262, v260, 4 * v259);
      v258 = sizea;
      *(_QWORD *)(sizea + 240) = v262;
      *(_QWORD *)(sizea + 248) = v259;
    }
    v263 = *(_QWORD *)(v258 + 32);
    v264 = 0xCCCCCCCCCCCCCCCDLL * ((v972 - v971) >> 3);
    v265 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v258 + 40) - v263) >> 3);
    if (v264 <= v265)
    {
      if (v264 < v265)
        *(_QWORD *)(sizea + 40) = v263 + 8 * ((v972 - v971) >> 3);
    }
    else
    {
      sub_1BE66CE80((void **)(v258 + 32), v264 - v265);
    }
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = &buf[8];
    sub_1BE66AAE8(buf, v973, &v974);
    v266 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      v267 = (uint64_t **)(sizea + 64);
      do
      {
        v268 = *((_QWORD *)v266 + 4);
        v269 = *v267;
        v270 = (uint64_t **)(sizea + 64);
        v271 = (uint64_t **)(sizea + 64);
        if (*v267)
        {
          while (1)
          {
            while (1)
            {
              v271 = (uint64_t **)v269;
              v272 = v269[4];
              if (v272 <= v268)
                break;
              v269 = *v271;
              v270 = v271;
              if (!*v271)
                goto LABEL_140;
            }
            if (v272 >= v268)
              break;
            v269 = v271[1];
            if (!v269)
            {
              v270 = v271 + 1;
              goto LABEL_140;
            }
          }
        }
        else
        {
LABEL_140:
          v273 = (uint64_t *)operator new(0x28uLL);
          v273[4] = v268;
          *v273 = 0;
          v273[1] = 0;
          v273[2] = (uint64_t)v271;
          *v270 = v273;
          v274 = **(_QWORD **)(sizea + 56);
          if (v274)
          {
            *(_QWORD *)(sizea + 56) = v274;
            v273 = *v270;
          }
          sub_1BE61F5C0(*(uint64_t **)(sizea + 64), v273);
          ++*(_QWORD *)(sizea + 72);
        }
        v275 = *(_QWORD *)(sizea + 32);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(sizea + 40) - v275) >> 3) >= v268)
          *(_BYTE *)(v275 + 40 * v268 + 32) = 1;
        v276 = (uint8_t *)*((_QWORD *)v266 + 1);
        if (v276)
        {
          do
          {
            v277 = v276;
            v276 = *(uint8_t **)v276;
          }
          while (v276);
        }
        else
        {
          do
          {
            v277 = (uint8_t *)*((_QWORD *)v266 + 2);
            v310 = *(_QWORD *)v277 == (_QWORD)v266;
            v266 = v277;
          }
          while (!v310);
        }
        v266 = v277;
      }
      while (v277 != &buf[8]);
    }
    sub_1BE62033C((uint64_t)buf, *(_QWORD **)&buf[8]);
    v987 = 0;
    v986 = 0;
    __dst = &v986;
    v1008 = 0;
    v1007 = 0;
    v1009 = 0;
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v278, v279, v280, v281, v282);
    v934 = (void *)objc_claimAutoreleasedReturnValue();
    v927 = objc_msgSend_engineCandidateCount(*(void **)(v954 + 456), v283, v284, v285, v286, v287);
    v293 = v975;
    if (v976 != v975)
    {
      v294 = (_QWORD *)&v990 + 1;
      v933 = (_QWORD *)(v954 + 520);
      v937 = (_QWORD *)(sizea + 128);
      v295 = 0;
      do
      {
        v941 = v295;
        v935 = v293;
        v943 = (CHDrawing *)(v293 + 72 * v295);
        v296 = *(_QWORD *)&v943->_anon_8[8];
        if (v978)
        {
          if (v296)
          {
            ul2sh(v296, (uint64_t)buf);
            goto LABEL_161;
          }
          v297 = v977;
          if ((*((char *)v977 + 23) & 0x80000000) == 0)
          {
LABEL_158:
            v298 = *v297;
            *(_QWORD *)&buf[16] = *((_QWORD *)v297 + 2);
            *(_OWORD *)buf = v298;
            goto LABEL_161;
          }
        }
        else
        {
          v297 = (__int128 *)((char *)v977 + 24 * v296);
          if ((*((char *)v297 + 23) & 0x80000000) == 0)
            goto LABEL_158;
        }
        sub_1BE61F128(buf, *(void **)v297, *((_QWORD *)v297 + 1));
LABEL_161:
        v299 = *(_QWORD *)&buf[8];
        v300 = buf;
        if ((buf[23] & 0x80u) == 0)
          v299 = buf[23];
        else
          v300 = *(uint8_t **)buf;
        if (!v299)
        {
          v301 = 0;
LABEL_175:
          v304 = 0;
          v306 = 0;
          goto LABEL_177;
        }
        v301 = *v300 == 45;
        v309 = v299 > (*v300 == 45);
        v302 = v299 - (*v300 == 45);
        if (!v309)
          goto LABEL_175;
        v303 = 0;
        v304 = 0;
        v305 = &v300[*v300 == 45];
        while (1)
        {
          v306 = v304;
          v308 = *v305++;
          v307 = v308;
          v309 = (v308 - 58) < 0xFFFFFFF6 || v306 < v303;
          if (v309)
            break;
          v304 = v307 + 10 * v306 - 48;
          v303 = v306;
          if (!--v302)
            goto LABEL_177;
        }
        v304 = v306;
        v306 = v303;
LABEL_177:
        v310 = !v301;
        if (v301)
          v311 = 0x80000000;
        else
          v311 = 0x7FFFFFFF;
        if (v310)
          v312 = v304;
        else
          v312 = -v304;
        if (v304 >= v306)
          LODWORD(v313) = v312;
        else
          LODWORD(v313) = v311;
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        v314 = *(_QWORD *)(v935 + 72 * v941 + 24);
        if (v978)
        {
          if (v314)
          {
            *(double *)&v315 = ul2sh(v314, (uint64_t)buf);
            goto LABEL_195;
          }
          v316 = v977;
          if ((*((char *)v977 + 23) & 0x80000000) == 0)
          {
LABEL_192:
            v315 = *v316;
            *(_QWORD *)&buf[16] = *((_QWORD *)v316 + 2);
            *(_OWORD *)buf = v315;
            goto LABEL_195;
          }
        }
        else
        {
          v316 = (__int128 *)((char *)v977 + 24 * v314);
          if ((*((char *)v316 + 23) & 0x80000000) == 0)
            goto LABEL_192;
        }
        sub_1BE61F128(buf, *(void **)v316, *((_QWORD *)v316 + 1));
LABEL_195:
        v317 = *(_QWORD *)&buf[8];
        v318 = buf;
        if ((buf[23] & 0x80u) == 0)
          v317 = buf[23];
        else
          v318 = *(uint8_t **)buf;
        if (!v317)
        {
          v319 = 0;
LABEL_209:
          v322 = 0;
          v324 = 0;
          goto LABEL_211;
        }
        v319 = *v318 == 45;
        v309 = v317 > (*v318 == 45);
        v320 = v317 - (*v318 == 45);
        if (!v309)
          goto LABEL_209;
        v321 = 0;
        v322 = 0;
        v323 = &v318[*v318 == 45];
        while (1)
        {
          v324 = v322;
          v326 = *v323++;
          v325 = v326;
          if ((v326 - 58) < 0xFFFFFFF6 || v324 < v321)
            break;
          v322 = v325 + 10 * v324 - 48;
          v321 = v324;
          if (!--v320)
            goto LABEL_211;
        }
        v322 = v324;
        v324 = v321;
LABEL_211:
        v328 = !v319;
        if (v319)
          v329 = 0x80000000;
        else
          v329 = 0x7FFFFFFF;
        if (v328)
          v330 = v322;
        else
          v330 = -v322;
        if (v322 >= v324)
          v331 = v330;
        else
          v331 = v329;
        if ((char)buf[23] < 0)
        {
          operator delete(*(void **)buf);
          v313 = (int)v313;
          v332 = v331;
          v333 = v331 + 1;
          if (v333 <= (int)v313)
          {
LABEL_227:
            v956 = 0;
            *((_QWORD *)&v990 + 1) = 0;
            *(_QWORD *)&v991 = 0;
            *(_QWORD *)&v990 = (char *)&v990 + 8;
            if (v313 > v332)
              goto LABEL_269;
            goto LABEL_228;
          }
        }
        else
        {
          v313 = (int)v313;
          v332 = v331;
          v333 = v331 + 1;
          if (v333 <= (int)v313)
            goto LABEL_227;
        }
        v956 = 0;
        v334 = v313;
        do
        {
          objc_msgSend_segments(v952, v288, v289, v290, v291, v292, *(double *)&v315);
          v335 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v335, v336, v334, v337, v338, v339);
          v340 = (void *)objc_claimAutoreleasedReturnValue();
          v346 = objc_msgSend_strokeCount(v340, v341, v342, v343, v344, v345);

          v257 = v954;
          v956 += v346;
          ++v334;
        }
        while (v333 != v334);
        *((_QWORD *)&v990 + 1) = 0;
        *(_QWORD *)&v991 = 0;
        *(_QWORD *)&v990 = (char *)&v990 + 8;
        if (v313 > v332)
          goto LABEL_269;
LABEL_228:
        v347 = 0;
        v348 = v313;
        v349 = *(_QWORD *)&v961[8 * v313];
        v350 = (_QWORD *)&v990 + 1;
        while (1)
        {
LABEL_244:
          v358 = operator new(0x28uLL);
          v358[4] = v349;
          *v358 = 0;
          v358[1] = 0;
          v358[2] = v350;
          *v294 = v358;
          if (*(_QWORD *)v990)
          {
            *(_QWORD *)&v990 = *(_QWORD *)v990;
            v358 = (_QWORD *)*v294;
          }
          v359 = (_BYTE *)*((_QWORD *)&v990 + 1);
          v310 = v358 == *((_QWORD **)&v990 + 1);
          *((_BYTE *)v358 + 24) = v358 == *((_QWORD **)&v990 + 1);
          v294 = (_QWORD *)&v990 + 1;
          if (!v310)
          {
            do
            {
              v354 = v358[2];
              if (*(_BYTE *)(v354 + 24))
                break;
              v353 = *(_BYTE **)(v354 + 16);
              v360 = *(_QWORD *)v353;
              if (*(_QWORD *)v353 == v354)
              {
                v363 = *((_QWORD *)v353 + 1);
                if (!v363 || (v364 = *(unsigned __int8 *)(v363 + 24), v361 = (_BYTE *)(v363 + 24), v364))
                {
                  if (*(_QWORD **)v354 == v358)
                  {
                    *(_BYTE *)(v354 + 24) = 1;
                    v353[24] = 0;
                    v356 = *(_QWORD *)(v354 + 8);
                    *(_QWORD *)v353 = v356;
                    if (v356)
                      goto LABEL_261;
                  }
                  else
                  {
                    v365 = *(uint64_t **)(v354 + 8);
                    v366 = *v365;
                    *(_QWORD *)(v354 + 8) = *v365;
                    if (v366)
                    {
                      *(_QWORD *)(v366 + 16) = v354;
                      v353 = *(_BYTE **)(v354 + 16);
                    }
                    v365[2] = (uint64_t)v353;
                    *(_QWORD *)(*(_QWORD *)(v354 + 16) + 8 * (**(_QWORD **)(v354 + 16) != v354)) = v365;
                    *v365 = v354;
                    *(_QWORD *)(v354 + 16) = v365;
                    v353 = (_BYTE *)v365[2];
                    v354 = *(_QWORD *)v353;
                    *((_BYTE *)v365 + 24) = 1;
                    v353[24] = 0;
                    v356 = *(_QWORD *)(v354 + 8);
                    *(_QWORD *)v353 = v356;
                    if (v356)
LABEL_261:
                      *(_QWORD *)(v356 + 16) = v353;
                  }
                  *(_QWORD *)(v354 + 16) = *((_QWORD *)v353 + 2);
                  *(_QWORD *)(*((_QWORD *)v353 + 2) + 8 * (**((_QWORD **)v353 + 2) != (_QWORD)v353)) = v354;
                  *(_QWORD *)(v354 + 8) = v353;
LABEL_267:
                  *((_QWORD *)v353 + 2) = v354;
                  break;
                }
              }
              else if (!v360 || (v362 = *(unsigned __int8 *)(v360 + 24), v361 = (_BYTE *)(v360 + 24), v362))
              {
                if (*(_QWORD **)v354 == v358)
                {
                  v352 = v358[1];
                  *(_QWORD *)v354 = v352;
                  if (v352)
                  {
                    *(_QWORD *)(v352 + 16) = v354;
                    v353 = *(_BYTE **)(v354 + 16);
                  }
                  v358[2] = v353;
                  *(_QWORD *)(*(_QWORD *)(v354 + 16) + 8 * (**(_QWORD **)(v354 + 16) != v354)) = v358;
                  v358[1] = v354;
                  *(_QWORD *)(v354 + 16) = v358;
                  v353 = (_BYTE *)v358[2];
                  *((_BYTE *)v358 + 24) = 1;
                  v353[24] = 0;
                  v354 = *((_QWORD *)v353 + 1);
                  v355 = *(_QWORD **)v354;
                  *((_QWORD *)v353 + 1) = *(_QWORD *)v354;
                  if (v355)
LABEL_265:
                    v355[2] = v353;
                }
                else
                {
                  *(_BYTE *)(v354 + 24) = 1;
                  v353[24] = 0;
                  v354 = *((_QWORD *)v353 + 1);
                  v355 = *(_QWORD **)v354;
                  *((_QWORD *)v353 + 1) = *(_QWORD *)v354;
                  if (v355)
                    goto LABEL_265;
                }
                *(_QWORD *)(v354 + 16) = *((_QWORD *)v353 + 2);
                *(_QWORD *)(*((_QWORD *)v353 + 2) + 8 * (**((_QWORD **)v353 + 2) != (_QWORD)v353)) = v354;
                *(_QWORD *)v354 = v353;
                goto LABEL_267;
              }
              *(_BYTE *)(v354 + 24) = 1;
              v358 = v353;
              v353[24] = v353 == v359;
              *v361 = 1;
            }
            while (v353 != v359);
          }
          *(_QWORD *)&v991 = ++v347;
          if (++v348 > v332)
            break;
          while (1)
          {
            v351 = (_QWORD *)*((_QWORD *)&v990 + 1);
            v349 = *(_QWORD *)&v961[8 * v348];
            v350 = (_QWORD *)&v990 + 1;
            if (!*((_QWORD *)&v990 + 1))
              break;
            while (1)
            {
              while (1)
              {
                v350 = v351;
                v357 = v351[4];
                if (v349 >= v357)
                  break;
                v351 = (_QWORD *)*v350;
                v294 = v350;
                if (!*v350)
                  goto LABEL_244;
              }
              if (v357 >= v349)
                break;
              v351 = (_QWORD *)v350[1];
              if (!v351)
              {
                v294 = v350 + 1;
                goto LABEL_244;
              }
            }
            v294 = (_QWORD *)&v990 + 1;
            if (++v348 > v332)
              goto LABEL_269;
          }
        }
LABEL_269:
        v367 = v332 - v313 + 1;
        v368 = (_QWORD *)*v933;
        if (!*v933)
          goto LABEL_310;
        v369 = (_QWORD *)v990;
        if ((__int128 *)v990 == (__int128 *)((char *)&v990 + 8))
        {
          do
          {
            v370 = v368;
            v368 = (_QWORD *)*v368;
          }
          while (v368);
        }
        else
        {
          v370 = (_QWORD *)(v954 + 520);
          do
          {
LABEL_275:
            v371 = (_QWORD *)v368[4];
            v372 = (_QWORD *)v990;
            do
            {
              if (v371 != v368 + 5)
              {
                v373 = v371[4];
                v374 = v372[4];
                if (v373 >= v374)
                  goto LABEL_279;
              }
              v368 = (_QWORD *)v368[1];
              if (!v368)
                goto LABEL_292;
              goto LABEL_275;
LABEL_279:
              if (v374 < v373)
                break;
              v375 = (_QWORD *)v371[1];
              v376 = v371;
              if (v375)
              {
                do
                {
                  v371 = v375;
                  v375 = (_QWORD *)*v375;
                }
                while (v375);
              }
              else
              {
                do
                {
                  v371 = (_QWORD *)v376[2];
                  v310 = *v371 == (_QWORD)v376;
                  v376 = v371;
                }
                while (!v310);
              }
              v377 = (_QWORD *)v372[1];
              if (v377)
              {
                do
                {
                  v378 = v377;
                  v377 = (_QWORD *)*v377;
                }
                while (v377);
              }
              else
              {
                do
                {
                  v378 = (_OWORD *)v372[2];
                  v310 = *(_QWORD *)v378 == (_QWORD)v372;
                  v372 = v378;
                }
                while (!v310);
              }
              v372 = v378;
            }
            while (v378 != (__int128 *)((char *)&v990 + 8));
            v370 = v368;
            v368 = (_QWORD *)*v368;
          }
          while (v368);
        }
LABEL_292:
        if (v370 == v933)
          goto LABEL_310;
        v379 = (_QWORD *)v370[4];
        if (v379 != v370 + 5)
        {
          v380 = (_QWORD *)v990;
          while (v380 != (_QWORD *)((char *)&v990 + 8))
          {
            v381 = v380[4];
            v382 = v379[4];
            if (v381 < v382)
              break;
            if (v382 >= v381)
            {
              v383 = (_QWORD *)v380[1];
              v384 = v380;
              if (v383)
              {
                do
                {
                  v380 = v383;
                  v383 = (_QWORD *)*v383;
                }
                while (v383);
              }
              else
              {
                do
                {
                  v380 = (_QWORD *)v384[2];
                  v310 = *v380 == (_QWORD)v384;
                  v384 = v380;
                }
                while (!v310);
              }
              v385 = (_QWORD *)v379[1];
              if (v385)
              {
                do
                {
                  v386 = v385;
                  v385 = (_QWORD *)*v385;
                }
                while (v385);
              }
              else
              {
                do
                {
                  v386 = (_QWORD *)v379[2];
                  v310 = *v386 == (_QWORD)v379;
                  v379 = v386;
                }
                while (!v310);
              }
              v379 = v386;
              if (v386 != v370 + 5)
                continue;
            }
            goto LABEL_319;
          }
LABEL_310:
          v392 = objc_alloc_init(CHDrawing);
          if (v313 <= v332)
          {
            do
            {
              objc_msgSend_segments(v952, v387, v388, v389, v390, v391);
              v393 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectAtIndex_(v393, v394, *(_QWORD *)&v961[8 * v313], v395, v396, v397);
              v398 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_appendSegment_fromDrawing_(v392, v399, (uint64_t)v398, (uint64_t)v947, v400, v401);
              ++v313;
              v257 = v954;
            }
            while (v313 <= v332);
          }
          if (v932 && v932[2]())
          {
            *(_QWORD *)(v257 + 400) = objc_msgSend_strokeCount(v947, v402, v403, v404, v405, v406) - v912;

            sub_1BE62033C((uint64_t)&v990, *((_QWORD **)&v990 + 1));
            goto LABEL_499;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v972 - v971) >> 3) == (v967 - (_BYTE *)v966) >> 5)
          {
            v407 = (double *)((char *)v966 + 32 * (uint64_t)v943->super.isa);
            v409 = *v407;
            v408 = v407[1];
            v411 = v407[2];
            v410 = v407[3];
            v412 = (double *)((char *)v966 + 32 * *(_QWORD *)(v935 + 72 * v941 + 8));
            x = *v412;
            y = v412[1];
            width = v412[2];
            height = v412[3];
            v1024.origin.x = *v407;
            v1024.origin.y = v408;
            v1024.size.width = v411;
            v1024.size.height = v410;
            if (CGRectGetWidth(v1024) != 0.0)
            {
              v1025.origin.x = x;
              v1025.origin.y = y;
              v1025.size.width = width;
              v1025.size.height = height;
              if (CGRectGetWidth(v1025) == 0.0)
              {
                x = v409;
                y = v408;
                width = v411;
                height = v410;
              }
              else
              {
                v1026.origin.x = v409;
                v1026.origin.y = v408;
                v1026.size.width = v411;
                v1026.size.height = v410;
                v1030.origin.x = x;
                v1030.origin.y = y;
                v1030.size.width = width;
                v1030.size.height = height;
                v1027 = CGRectUnion(v1026, v1030);
                x = v1027.origin.x;
                y = v1027.origin.y;
                width = v1027.size.width;
                height = v1027.size.height;
              }
            }
            v1028.origin.x = x;
            v1028.origin.y = y;
            v1028.size.width = width;
            v1028.size.height = height;
            if (CGRectIsEmpty(v1028))
            {
              objc_msgSend_bounds(v947, v474, v475, v476, v477, v478);
              x = v479;
              y = v480;
              width = v481;
              height = v482;
            }
          }
          else
          {
            x = *MEMORY[0x1E0C9D648];
            y = *(double *)(MEMORY[0x1E0C9D648] + 8);
            width = *(double *)(MEMORY[0x1E0C9D648] + 16);
            height = *(double *)(MEMORY[0x1E0C9D648] + 24);
          }
          v483 = [CHClassifiableDrawing alloc];
          v485 = (void *)objc_msgSend_initWithDrawing_characterSet_expandCodePoints_normalizationContext_maxCandidateCount_(v483, v484, (uint64_t)v392, *(_QWORD *)(v257 + 216), 1, v927, x, y, width, height);

          v486 = [CHDrawingContext alloc];
          v1003[0] = 0;
          v1003[1] = 0;
          v1002 = v1003;
          sub_1BE670B3C(&v1002, (_QWORD *)v990, (_QWORD *)&v990 + 1);
          v488 = (void *)objc_msgSend_initWithEdgeIndex_numberOfSubstrokes_numberOfSegments_classifiableDrawing_strokeGroup_(v486, v487, v941, v956, v367, (uint64_t)v485, &v1002);
          sub_1BE62033C((uint64_t)&v1002, v1003[0]);

          objc_msgSend_addObject_(v934, v489, (uint64_t)v488, v490, v491, v492);
          v257 = v954;
          if (objc_msgSend_count(v934, v493, v494, v495, v496, v497) >= (unint64_t)*(unsigned int *)(*(_QWORD *)(v954 + 224) + 36))
          {
            v498 = sub_1BE652A9C(v954, v934, (uint64_t)&v1007, (uint64_t)v969, sizea, (uint64_t **)&__dst, v947, 0, v932);
            objc_msgSend_removeObjectsInRange_(v934, v499, 0, v498, v500, v501);
          }
          goto LABEL_153;
        }
LABEL_319:
        v417 = v986;
        if (!v986)
          goto LABEL_360;
        if ((__int128 *)v990 == (__int128 *)((char *)&v990 + 8))
        {
          do
          {
            v418 = (uint64_t **)v417;
            v417 = (uint64_t *)*v417;
          }
          while (v417);
        }
        else
        {
          v418 = &v986;
          do
          {
LABEL_325:
            v419 = (uint64_t *)v417[4];
            v420 = (_QWORD *)v990;
            do
            {
              if (v419 != v417 + 5)
              {
                v421 = v419[4];
                v422 = v420[4];
                if (v421 >= v422)
                  goto LABEL_329;
              }
              v417 = (uint64_t *)v417[1];
              if (!v417)
                goto LABEL_342;
              goto LABEL_325;
LABEL_329:
              if (v422 < v421)
                break;
              v423 = (uint64_t *)v419[1];
              v424 = v419;
              if (v423)
              {
                do
                {
                  v419 = v423;
                  v423 = (uint64_t *)*v423;
                }
                while (v423);
              }
              else
              {
                do
                {
                  v419 = (uint64_t *)v424[2];
                  v310 = *v419 == (_QWORD)v424;
                  v424 = v419;
                }
                while (!v310);
              }
              v425 = (_QWORD *)v420[1];
              if (v425)
              {
                do
                {
                  v426 = v425;
                  v425 = (_QWORD *)*v425;
                }
                while (v425);
              }
              else
              {
                do
                {
                  v426 = (_OWORD *)v420[2];
                  v310 = *(_QWORD *)v426 == (_QWORD)v420;
                  v420 = v426;
                }
                while (!v310);
              }
              v420 = v426;
            }
            while (v426 != (__int128 *)((char *)&v990 + 8));
            v418 = (uint64_t **)v417;
            v417 = (uint64_t *)*v417;
          }
          while (v417);
        }
LABEL_342:
        if (v418 == &v986)
          goto LABEL_360;
        v427 = (uint64_t **)v418[4];
        v428 = v418 + 5;
        if (v427 != v418 + 5)
        {
          while (v369 != (_QWORD *)((char *)&v990 + 8))
          {
            v429 = v369[4];
            v430 = v427[4];
            if (v429 < (uint64_t)v430)
              break;
            if ((uint64_t)v430 >= v429)
            {
              v431 = (_QWORD *)v369[1];
              v432 = v369;
              if (v431)
              {
                do
                {
                  v369 = v431;
                  v431 = (_QWORD *)*v431;
                }
                while (v431);
              }
              else
              {
                do
                {
                  v369 = (_QWORD *)v432[2];
                  v310 = *v369 == (_QWORD)v432;
                  v432 = v369;
                }
                while (!v310);
              }
              v433 = v427[1];
              if (v433)
              {
                do
                {
                  v434 = (uint64_t **)v433;
                  v433 = (uint64_t *)*v433;
                }
                while (v433);
              }
              else
              {
                do
                {
                  v434 = (uint64_t **)v427[2];
                  v310 = *v434 == (uint64_t *)v427;
                  v427 = v434;
                }
                while (!v310);
              }
              v427 = v434;
              if (v434 != v428)
                continue;
            }
            goto LABEL_153;
          }
LABEL_360:
          v1005 = 0;
          __p = 0;
          v1006 = 0;
          v436 = (_BYTE *)v370[7];
          v435 = (_BYTE *)v370[8];
          v437 = v435 - v436;
          if (v435 == v436)
          {
            v441 = 0;
          }
          else
          {
            if (v437 < 0)
              sub_1BE61F930();
            v438 = (float *)operator new(v435 - v436);
            __p = v438;
            v1005 = v438;
            v1006 = &v438[2 * (v437 >> 3)];
            v439 = v436;
            v440 = v1006;
            memcpy(v438, v439, v437);
            v441 = 0;
            v1005 = &v438[2 * (v437 >> 3)];
            v945 = (uint64_t *)(v935 + 72 * v941 + 8);
            v929 = vdupq_n_s64(v367);
            v930 = v1005;
            v931 = v332 - v313 + 1;
            do
            {
              if (!objc_msgSend_shouldApplyCandidatesThresholding(*(void **)(v257 + 456), v288, v289, v290, v291, v292))goto LABEL_370;
              v443 = v438[1];
              v444 = *(unsigned __int8 *)(v971 + 40 * *v945 + 32);
              shouldRelaxFinalCandidatesThresholding = objc_msgSend_shouldRelaxFinalCandidatesThresholding(*(void **)(v257 + 456), v288, v289, v290, v291, v292);
              v446 = 0.01;
              if (((v444 != 0) & shouldRelaxFinalCandidatesThresholding) != 0)
                v446 = 0.001;
              if (v446 < v443)
              {
LABEL_370:
                v451 = 0.0;
                if (objc_msgSend_shouldApplyRomanPostProcessing(*(void **)(v257 + 456), v288, v289, v290, v291, v292))v451 = sub_1BE705F60((uint64_t)v438, (const char *)&__p, v447, v448, v449, v450);
                i2sh(*(_DWORD *)v438, (uint64_t)buf);
                v452 = sub_1BE66A2C4(v937, (uint64_t)buf);
                if ((char)buf[23] < 0)
                  operator delete(*(void **)buf);
                isa = v943->super.isa;
                v454 = *v945;
                v455 = *(unsigned int *)v438;
                v456 = v438[1];
                v457 = v1008;
                if (v1008 < v1009)
                {
                  *(_QWORD *)v1008 = isa;
                  *((_QWORD *)v457 + 1) = v454;
                  *((_QWORD *)v457 + 2) = v455;
                  *((_QWORD *)v457 + 3) = v452;
                  *((double *)v457 + 4) = v456;
                  *((double *)v457 + 5) = v451;
                  *((_QWORD *)v457 + 6) = v367;
                  *((_QWORD *)v457 + 7) = v367;
                  v442 = v457 + 72;
                  *((_QWORD *)v457 + 8) = v956;
                  v294 = (_QWORD *)&v990 + 1;
                }
                else
                {
                  v458 = (char *)v1007;
                  v459 = 0x8E38E38E38E38E39 * ((v1008 - (_BYTE *)v1007) >> 3);
                  v460 = v459 + 1;
                  if (v459 + 1 > 0x38E38E38E38E38ELL)
                    sub_1BE61F930();
                  if (0x1C71C71C71C71C72 * ((v1009 - (_BYTE *)v1007) >> 3) > v460)
                    v460 = 0x1C71C71C71C71C72 * ((v1009 - (_BYTE *)v1007) >> 3);
                  if (0x8E38E38E38E38E39 * ((v1009 - (_BYTE *)v1007) >> 3) >= 0x1C71C71C71C71C7)
                    v461 = 0x38E38E38E38E38ELL;
                  else
                    v461 = v460;
                  if (v461 > 0x38E38E38E38E38ELL)
                    sub_1BE61F100();
                  v462 = (char *)operator new(72 * v461);
                  v463 = (int64x2_t *)&v462[72 * v459];
                  v463->i64[0] = (uint64_t)isa;
                  v463->i64[1] = v454;
                  v463[1].i64[0] = v455;
                  v463[1].i64[1] = (uint64_t)v452;
                  *(double *)v463[2].i64 = v456;
                  *(double *)&v463[2].i64[1] = v451;
                  v463[3] = v929;
                  v463[4].i64[0] = v956;
                  if (v457 == v458)
                  {
                    v466 = &v462[72 * v459];
                    v257 = v954;
                    v294 = (_QWORD *)&v990 + 1;
                  }
                  else
                  {
                    v464 = 0;
                    v257 = v954;
                    v294 = (_QWORD *)&v990 + 1;
                    do
                    {
                      v465 = &v463->i8[v464];
                      *(_OWORD *)(v465 - 72) = *(_OWORD *)&v457[v464 - 72];
                      *(_OWORD *)(v465 - 56) = *(_OWORD *)&v457[v464 - 56];
                      *(_OWORD *)(v465 - 40) = *(_OWORD *)&v457[v464 - 40];
                      *(_OWORD *)(v465 - 24) = *(_OWORD *)&v457[v464 - 24];
                      *((_QWORD *)v465 - 1) = *(_QWORD *)&v457[v464 - 8];
                      v464 -= 72;
                    }
                    while (&v457[v464] != v458);
                    v466 = &v463->i8[v464];
                  }
                  v442 = &v463[4].i8[8];
                  v1007 = v466;
                  v1008 = &v463[4].i8[8];
                  v1009 = &v462[72 * v461];
                  if (v458)
                    operator delete(v458);
                  v440 = v930;
                  v367 = v931;
                }
                v1008 = v442;
                v441 = 1;
              }
              v438 += 2;
            }
            while (v438 != v440);
          }
          if (!(v441 & 1 | ((objc_msgSend_shouldApplyCandidatesThresholding(*(void **)(v257 + 456), v288, v289, v290, v291, v292) & 1) == 0)))
          {
            i2sh(*(_DWORD *)__p, (uint64_t)buf);
            v467 = sub_1BE66A2C4(v937, (uint64_t)buf);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
            v468 = v943->super.isa;
            v469 = *(_QWORD *)(v935 + 72 * v941 + 8);
            v470 = *(unsigned int *)__p;
            v471 = *((float *)__p + 1);
            *(_QWORD *)buf = v943->super.isa;
            *(_QWORD *)&buf[8] = v469;
            *(_QWORD *)&buf[16] = v470;
            v1013 = v467;
            v1014 = v471;
            v1015 = 0;
            v1016 = v367;
            v1017 = v367;
            v1018 = v956;
            v472 = v1008;
            if (v1008 >= v1009)
            {
              v473 = sub_1BE66D0D0((char **)&v1007, (uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v1008 = v468;
              *((_QWORD *)v472 + 1) = v469;
              *((_QWORD *)v472 + 2) = v470;
              *((_QWORD *)v472 + 3) = v467;
              *((double *)v472 + 4) = v471;
              *((_QWORD *)v472 + 5) = 0;
              *((_QWORD *)v472 + 6) = v367;
              v473 = v472 + 72;
              *((_QWORD *)v472 + 7) = v367;
              *((_QWORD *)v472 + 8) = v956;
            }
            v1008 = v473;
          }
          v502 = v986;
          v503 = &v986;
          v504 = &v986;
          if (v986)
          {
            if ((__int128 *)v990 == (__int128 *)((char *)&v990 + 8))
            {
              v505 = (uint64_t *)v986[4];
              v506 = v986 + 5;
              if (v505 != v986 + 5)
              {
                v504 = &v986;
                while (2)
                {
                  v507 = (_QWORD *)v990;
                  while (v507 != (_QWORD *)((char *)&v990 + 8))
                  {
                    v508 = v507[4];
                    v509 = v505[4];
                    if (v508 < v509)
                      break;
                    if (v509 < v508)
                    {
                      v503 = (uint64_t **)v502;
                      goto LABEL_464;
                    }
                    v510 = (_QWORD *)v507[1];
                    v511 = v507;
                    if (v510)
                    {
                      do
                      {
                        v507 = v510;
                        v510 = (_QWORD *)*v510;
                      }
                      while (v510);
                    }
                    else
                    {
                      do
                      {
                        v507 = (_QWORD *)v511[2];
                        v310 = *v507 == (_QWORD)v511;
                        v511 = v507;
                      }
                      while (!v310);
                    }
                    v512 = (uint64_t *)v505[1];
                    if (v512)
                    {
                      do
                      {
                        v513 = v512;
                        v512 = (uint64_t *)*v512;
                      }
                      while (v512);
                    }
                    else
                    {
                      do
                      {
                        v513 = (uint64_t *)v505[2];
                        v310 = *v513 == (_QWORD)v505;
                        v505 = v513;
                      }
                      while (!v310);
                    }
                    v505 = v513;
                    if (v513 == v506)
                    {
                      v503 = (uint64_t **)v502;
                      if (v502)
                        goto LABEL_468;
                      goto LABEL_465;
                    }
                  }
                  v514 = *v502;
                  if (!*v502)
                  {
                    v504 = (uint64_t **)v502;
                    v503 = (uint64_t **)v502;
                    goto LABEL_465;
                  }
                  v505 = *(uint64_t **)(v514 + 32);
                  v506 = (uint64_t *)(v514 + 40);
                  v504 = (uint64_t **)v502;
                  v502 = (uint64_t *)*v502;
                  if (v505 != (uint64_t *)(v514 + 40))
                    continue;
                  break;
                }
              }
              goto LABEL_468;
            }
            v504 = &v986;
LABEL_427:
            while (1)
            {
              v503 = (uint64_t **)v502;
              v515 = (uint64_t *)v502[4];
              v516 = v502 + 5;
              v517 = (_QWORD *)v990;
              v518 = v515;
              if (v515 == v516)
                break;
              while (v517 != (_QWORD *)((char *)&v990 + 8))
              {
                v526 = v517[4];
                v527 = v518[4];
                if (v526 < v527)
                  break;
                if (v527 >= v526)
                {
                  v528 = (_QWORD *)v517[1];
                  v529 = v517;
                  if (v528)
                  {
                    do
                    {
                      v517 = v528;
                      v528 = (_QWORD *)*v528;
                    }
                    while (v528);
                  }
                  else
                  {
                    do
                    {
                      v517 = (_QWORD *)v529[2];
                      v310 = *v517 == (_QWORD)v529;
                      v529 = v517;
                    }
                    while (!v310);
                  }
                  v530 = (uint64_t *)v518[1];
                  if (v530)
                  {
                    do
                    {
                      v531 = v530;
                      v530 = (uint64_t *)*v530;
                    }
                    while (v530);
                  }
                  else
                  {
                    do
                    {
                      v531 = (uint64_t *)v518[2];
                      v310 = *v531 == (_QWORD)v518;
                      v518 = v531;
                    }
                    while (!v310);
                  }
                  v518 = v531;
                  if (v531 != v516)
                    continue;
                }
                goto LABEL_428;
              }
              v502 = *v503;
              v504 = v503;
              if (!*v503)
                goto LABEL_465;
            }
LABEL_428:
            v519 = (_QWORD *)v990;
            do
            {
              if (v515 != v516)
              {
                v520 = v515[4];
                v521 = v519[4];
                if (v520 >= v521)
                  goto LABEL_432;
              }
              v504 = v503 + 1;
              v502 = v503[1];
              if (v502)
                goto LABEL_427;
              goto LABEL_465;
LABEL_432:
              if (v521 < v520)
                break;
              v522 = (uint64_t *)v515[1];
              v523 = v515;
              if (v522)
              {
                do
                {
                  v515 = v522;
                  v522 = (uint64_t *)*v522;
                }
                while (v522);
              }
              else
              {
                do
                {
                  v515 = (uint64_t *)v523[2];
                  v310 = *v515 == (_QWORD)v523;
                  v523 = v515;
                }
                while (!v310);
              }
              v524 = (_QWORD *)v519[1];
              if (v524)
              {
                do
                {
                  v525 = v524;
                  v524 = (_QWORD *)*v524;
                }
                while (v524);
              }
              else
              {
                do
                {
                  v525 = (_OWORD *)v519[2];
                  v310 = *(_QWORD *)v525 == (_QWORD)v519;
                  v519 = v525;
                }
                while (!v310);
              }
              v519 = v525;
            }
            while (v525 != (__int128 *)((char *)&v990 + 8));
LABEL_464:
            if (v503)
              goto LABEL_468;
          }
LABEL_465:
          v532 = (uint64_t *)operator new(0x38uLL);
          v532[5] = 0;
          v532[4] = (uint64_t)(v532 + 5);
          v532[6] = 0;
          sub_1BE670B3C(v532 + 4, (_QWORD *)v990, (_QWORD *)&v990 + 1);
          *v532 = 0;
          v532[1] = 0;
          v532[2] = (uint64_t)v503;
          *v504 = v532;
          if (*(_QWORD *)__dst)
          {
            __dst = *(void **)__dst;
            v532 = *v504;
          }
          sub_1BE61F5C0(v986, v532);
          ++v987;
LABEL_468:
          if (__p)
          {
            v1005 = (float *)__p;
            operator delete(__p);
          }
        }
LABEL_153:
        sub_1BE62033C((uint64_t)&v990, *((_QWORD **)&v990 + 1));
        v293 = v975;
        v295 = v941 + 1;
      }
      while (v941 + 1 < 0x8E38E38E38E38E39 * ((v976 - v975) >> 3));
    }
    v533 = sizea;
    if (objc_msgSend_count(v934, v288, v289, v290, v291, v292))
    {
      v537 = sub_1BE652A9C(v257, v934, (uint64_t)&v1007, (uint64_t)v969, sizea, (uint64_t **)&__dst, v947, 1, v932);
      if (v932 && v932[2]())
      {
        *(_QWORD *)(v257 + 400) = objc_msgSend_strokeCount(v947, v534, v538, v539, v535, v536) - v912;
        goto LABEL_499;
      }
      objc_msgSend_removeObjectsInRange_(v934, v534, 0, v537, v535, v536);
      if (objc_msgSend_count(v934, v540, v541, v542, v543, v544))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v545 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v545, OS_LOG_TYPE_FAULT))
        {
          v551 = objc_msgSend_count(v934, v546, v547, v548, v549, v550);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v551;
          _os_log_impl(&dword_1BE607000, v545, OS_LOG_TYPE_FAULT, "Batch contains %lu non classified drawings", buf, 0xCu);
        }

        v533 = sizea;
      }
    }
    sub_1BE828388(v533, (uint64_t)&v1007);
    v552 = v1007;
    v553 = v1008;
    if (v1007 != v1008)
    {
      v554 = *(char **)(v533 + 88);
      do
      {
        if ((unint64_t)v554 < *(_QWORD *)(v533 + 96))
        {
          *(_OWORD *)v554 = *v552;
          *((_OWORD *)v554 + 1) = v552[1];
          *((_OWORD *)v554 + 2) = v552[2];
          *((_OWORD *)v554 + 3) = v552[3];
          *((_QWORD *)v554 + 8) = *((_QWORD *)v552 + 8);
          v554 += 72;
        }
        else
        {
          v554 = sub_1BE66D0D0((char **)(v533 + 80), (uint64_t)v552);
        }
        *(_QWORD *)(v533 + 88) = v554;
        v552 = (_OWORD *)((char *)v552 + 72);
      }
      while (v552 != (_OWORD *)v553);
    }
    Network::prepareNetwork((Network *)v533);
    v555 = *(_QWORD *)(v533 + 80);
    v556 = *(_QWORD *)(v533 + 88) - v555;
    if (v556)
    {
      v557 = v556 / 72;
      if (v557 <= 1)
        v558 = 1;
      else
        v558 = v557;
      v559 = (double *)(v555 + 32);
      do
      {
        v560 = 2.22044605e-16;
        if (*v559 >= 2.22044605e-16)
        {
          v560 = *v559;
          if (*v559 > 1.0)
            v560 = 1.0;
        }
        *v559 = -log10(v560);
        v559 += 9;
        --v558;
      }
      while (v558);
    }
LABEL_499:

    if (v1007)
    {
      v1008 = (char *)v1007;
      operator delete(v1007);
    }
    sub_1BE671578(v986);

    if (v913)
    {
      v962 = v913;
      operator delete(v913);
    }
    if (v932 && (((uint64_t (*)(void))v932[2])() & 1) != 0)
    {
      v561 = 0;
      v562 = 0;
      v563 = 1;
      goto LABEL_571;
    }
    v564 = *(_QWORD *)(sizea + 24);
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = &buf[8];
    sub_1BE66AAE8(buf, *(_QWORD **)(sizea + 56), (_QWORD *)(sizea + 64));
    v565 = *(uint64_t **)(*(_QWORD *)buf + 32);
    sub_1BE62033C((uint64_t)buf, *(_QWORD **)&buf[8]);
    TotalNumberOfSegments = Network::getTotalNumberOfSegments((Network *)sizea, v564, v565);
    objc_msgSend_segments(v952, v567, v568, v569, v570, v571);
    v572 = (void *)objc_claimAutoreleasedReturnValue();
    v578 = TotalNumberOfSegments == (uint64_t *)objc_msgSend_count(v572, v573, v574, v575, v576, v577);

    if (!v578)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v584 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v584, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend_segments(v952, v585, v586, v587, v588, v589);
        v590 = (void *)objc_claimAutoreleasedReturnValue();
        v596 = objc_msgSend_count(v590, v591, v592, v593, v594, v595);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = TotalNumberOfSegments;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v596;
        _os_log_impl(&dword_1BE607000, v584, OS_LOG_TYPE_FAULT, "The number of nodes in the candidate network (%lu) should match the number of generated segments (%lu)", buf, 0x16u);

      }
    }
    v597 = v954;
    if (objc_msgSend_shouldComposeLexiconWithNetwork(*(void **)(v954 + 456), v579, v580, v581, v582, v583))
    {
      v603 = v952;
      v604 = v925;
      v605 = *(Network **)(v954 + 272);
      v606 = *(Network **)(v954 + 280);
      sub_1BE66ADA4((uint64_t)buf);
      sub_1BE66ADA4((uint64_t)&__dst);
      sub_1BE66ADA4((uint64_t)&v1007);
      Network::composeTrimAndSimplify((Network *)sizea, (const Network *)sizea, v605, (Network *)&v1007, 1, 1);
      v1005 = 0;
      __p = 0;
      v1006 = 0;
      characterCodes(v604, &v1002);
      v607 = atomic_load((unsigned __int8 *)&qword_1EF567F68);
      if ((v607 & 1) == 0 && __cxa_guard_acquire(&qword_1EF567F68))
      {
        LODWORD(v993) = 12293;
        v990 = xmmword_1BE8D534C;
        v991 = unk_1BE8D535C;
        v992 = xmmword_1BE8D536C;
        sub_1BE6711BC((_QWORD **)qword_1EF567F78, (int *)&v990, 13);
        __cxa_atexit((void (*)(void *))sub_1BE652A74, qword_1EF567F78, &dword_1BE607000);
        __cxa_guard_release(&qword_1EF567F68);
        v597 = v954;
      }
      v608 = atomic_load((unsigned __int8 *)&qword_1EF567F70);
      if ((v608 & 1) == 0 && __cxa_guard_acquire(&qword_1EF567F70))
      {
        v1001 = 133917;
        v998 = xmmword_1BE8D5400;
        v999 = unk_1BE8D5410;
        v1000 = xmmword_1BE8D5420;
        v994 = xmmword_1BE8D53C0;
        v995 = unk_1BE8D53D0;
        v996 = xmmword_1BE8D53E0;
        v997 = unk_1BE8D53F0;
        v990 = xmmword_1BE8D5380;
        v991 = unk_1BE8D5390;
        v992 = xmmword_1BE8D53A0;
        v993 = unk_1BE8D53B0;
        sub_1BE6711BC((_QWORD **)qword_1EF567F90, (int *)&v990, 45);
        __cxa_atexit((void (*)(void *))sub_1BE652A74, qword_1EF567F90, &dword_1BE607000);
        __cxa_guard_release(&qword_1EF567F70);
        v597 = v954;
      }
      if (v1011 == v1010)
        v609 = (unint64_t *)sizea;
      else
        v609 = (unint64_t *)&v1007;
      v610 = *(_QWORD *)(v597 + 480);
      v611 = *(_QWORD *)(v597 + 320);
      v612 = *(_QWORD *)(v597 + 328);
      *(_QWORD *)&v991 = 0;
      *((_QWORD *)&v990 + 1) = 0;
      *(_QWORD *)&v990 = (char *)&v990 + 8;
      sub_1BE671470((uint64_t *)&v990, (_QWORD *)qword_1EF567F78[0], qword_1EF567F80);
      v989[1] = 0;
      v989[0] = 0;
      v988 = v989;
      sub_1BE671470((uint64_t *)&v988, (_QWORD *)qword_1EF567F90[0], qword_1EF567F98);
      sub_1BE82C29C(sizea, v609, (uint64_t)&__dst, v610, v611, v612, (uint64_t)v605, v606, (uint64_t)buf, (char **)&__p, (uint64_t)&v1002, (uint64_t)&v990, (uint64_t)&v988);
      sub_1BE671438(v989[0]);
      sub_1BE671438(*((_QWORD **)&v990 + 1));
      v618 = objc_msgSend_contentType(*(void **)(v597 + 456), v613, v614, v615, v616, v617);
      sub_1BE64A5C4(v597, (uint64_t)buf, v917, 0, 0, 0, 0, v619, 0, 0, &__p, v603, v618);
      v561 = (void *)objc_claimAutoreleasedReturnValue();
      if (v1002)
      {
        v1003[0] = v1002;
        operator delete(v1002);
      }
      if (__p)
      {
        v1005 = (float *)__p;
        operator delete(__p);
      }
      sub_1BE66A0DC((uint64_t)&v1007);
      sub_1BE66A0DC((uint64_t)&__dst);
      sub_1BE66A0DC((uint64_t)buf);

      objc_msgSend_tokenColumns(v561, v620, v621, v622, v623, v624);
      v625 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendTokenColumns_(v928, v626, (uint64_t)v625, v627, v628, v629);

      objc_msgSend_transcriptionPaths(v561, v630, v631, v632, v633, v634);
      v635 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_transcriptionPathScores(v561, v636, v637, v638, v639, v640);
      v641 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTranscriptionPaths_scores_(v928, v642, (uint64_t)v635, (uint64_t)v641, v643, v644);

      v562 = 0;
LABEL_569:

      goto LABEL_570;
    }
    if (!objc_msgSend_shouldExpandLexiconInNetwork(*(void **)(v954 + 456), v598, v599, v600, v601, v602))
    {
      v561 = 0;
      v562 = 0;
LABEL_570:
      v563 = 0;
LABEL_571:
      v717 = sub_1BE66A0DC(sizea);
      MEMORY[0x1C3B812EC](v717, 0x10B2C40ACD43ABBLL);
      if (v964)
        operator delete(v964);
      goto LABEL_589;
    }
    v650 = objc_msgSend_contentType(*(void **)(v954 + 456), v645, v646, v647, v648, v649);
    objc_msgSend_rootCursorForContentType_inNetwork_forFirstSegmentGroup_(CHPatternNetwork, v651, v650, *(_QWORD *)(v954 + 288), 1, v652);
    v653 = (void *)objc_claimAutoreleasedReturnValue();
    v654 = v925;
    v655 = v923;
    v562 = v653;
    v957 = v952;
    v949 = v654;
    v953 = v932;
    v946 = objc_msgSend_contentType(*(void **)(v954 + 456), v656, v657, v658, v659, v660);
    if (objc_msgSend_length(v655, v661, v662, v663, v664, v665))
    {
      v666 = (const void *)LXCursorCreateByAdvancing();
      v667 = (const void *)LXCursorCreateByAdvancing();
      v670 = (id)objc_msgSend_newCursorByAdvancingWithString_fromCursor_inNetwork_(CHPatternNetwork, v668, (uint64_t)v655, (uint64_t)v562, *(_QWORD *)(v954 + 288), v669);
    }
    else
    {
      if (RootCursor)
        v666 = CFRetain(RootCursor);
      else
        v666 = 0;
      if (cf)
        v667 = CFRetain(cf);
      else
        v667 = 0;
      v670 = v562;
    }
    v679 = v670;
    __dst = 0;
    LOBYTE(v1007) = 0;
    v680 = objc_msgSend_length(v654, v671, v672, v673, v674, v675);
    v681 = v655;
    v687 = v681;
    __dst = 0;
    if (v680 || objc_msgSend_length(v681, v682, v683, v684, v685, v686))
    {
      v688 = objc_msgSend_length(v687, v682, v683, v684, v685, v686);
      UInt32PtrWithNSString = createUInt32PtrWithNSString(&v687->isa, v688, 258, (unint64_t *)&__dst, (BOOL *)&v1007);
      v690 = UInt32PtrWithNSString;
      if (!v666 && (unint64_t)__dst >= 6)
      {
        if (UInt32PtrWithNSString)
          free(UInt32PtrWithNSString);
        v690 = createUInt32PtrWithNSString(&v687->isa, 5uLL, 258, (unint64_t *)&__dst, (BOOL *)&v1007);
        v691 = v680 - 5;
        v914 = 5;
        goto LABEL_547;
      }
    }
    else
    {
      v690 = 0;
    }
    v691 = v916;
LABEL_547:

    v692 = __dst;
    v693 = *(void **)(sizea + 240);
    if (v693)
    {
      free(v693);
      *(_QWORD *)(sizea + 240) = 0;
      *(_QWORD *)(sizea + 248) = 0;
    }
    if (v692)
    {
      v694 = malloc_type_malloc(4 * (_QWORD)v692, 0x100004052888210uLL);
      memcpy(v694, v690, 4 * (_QWORD)v692);
    }
    else
    {
      v694 = 0;
    }
    *(_QWORD *)(sizea + 240) = v694;
    *(_QWORD *)(sizea + 248) = v692;
    free(v690);
    if (v932 && (v953[2]() & 1) != 0)
    {
      v701 = 1;
    }
    else
    {
      v701 = objc_msgSend__effectiveMaxRecognitionResultCount((void *)v954, v695, v696, v697, v698, v699);
      if (objc_msgSend_shouldApplyLMSorting(*(void **)(v954 + 456), v702, v703, v704, v705, v706))
      {
        v707 = 15;
        if (v701 > 0xF)
          v707 = v701;
        if (*(_QWORD *)(v954 + 480))
          v701 = v707;
      }
    }
    memset(buf, 0, sizeof(buf));
    sub_1BE64A5C4(v954, sizea, v701, v666, v667, v679, v949, v700, v691, v914, buf, v957, v946);
    v561 = (void *)objc_claimAutoreleasedReturnValue();
    if (v679)

    if (v666)
      CFRelease(v666);
    if (v667)
      CFRelease(v667);
    if (*(_QWORD *)buf)
      operator delete(*(void **)buf);

    objc_msgSend_tokenColumns(v561, v708, v709, v710, v711, v712);
    v635 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendTokenColumns_(v928, v713, (uint64_t)v635, v714, v715, v716);
    goto LABEL_569;
  }
  v942 = v922;
  v940 = v926;
  v936 = v924;
  size = v925;
  v104 = objc_msgSend__effectiveMaxRecognitionResultCount((void *)v80, v99, v100, v101, v102, v103);
  v1020.origin.x = sub_1BE64859C(v936);
  v105 = v1020.origin.x;
  v106 = v1020.origin.y;
  v107 = v1020.size.width;
  v108 = v1020.size.height;
  if (CGRectIsNull(v1020))
  {
    objc_msgSend_bounds(v942, v109, v110, v111, v112, v113);
    v105 = v114;
    v106 = v115;
    v107 = v116;
    v108 = v117;
  }
  objc_msgSend_bounds(v942, v109, v110, v111, v112, v113);
  v1029.origin.x = v118;
  v1029.origin.y = v119;
  v1029.size.width = v120;
  v1029.size.height = v121;
  v1021.origin.x = v105;
  v1021.origin.y = v106;
  v1021.size.width = v107;
  v1021.size.height = v108;
  v1022 = CGRectUnion(v1021, v1029);
  v122 = v1022.origin.x;
  v123 = v1022.origin.y;
  v124 = v1022.size.width;
  v125 = v1022.size.height;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v126, v127, v128, v129, v130);
  v951 = (void *)objc_claimAutoreleasedReturnValue();
  v131 = *(CHNeuralNetwork **)(v80 + 224);
  if (v131)
  {
    v1023.origin.x = v122;
    v1023.origin.y = v123;
    v1023.size.width = v124;
    v1023.size.height = v125;
    CHNeuralNetwork::ClassifyCHDrawing((uint64_t *)&__dst, v131, v942, *(NSCharacterSet **)(v80 + 216), v104, v1023, 0);
    if (objc_msgSend_shouldRefineChineseCharacterCandidates(*(void **)(v80 + 456), v132, v133, v134, v135, v136))sub_1BE648654((double *)v80, (unsigned int **)&__dst, v942);
    if (objc_msgSend_shouldApplyLMRescoring(*(void **)(v80 + 456), v137, v138, v139, v140, v141))
      objc_msgSend__rescoreCandidatesWithLanguageModel_history_((void *)v80, v142, (uint64_t)&__dst, (uint64_t)size, v145, v146);
    if (objc_msgSend_shouldTransliterateAndSynthetizeCandidates(*(void **)(v80 + 456), v142, v143, v144, v145, v146))objc_msgSend__applyTransliterationAndSyntheticCandidates_((void *)v80, v147, (uint64_t)&__dst, v149, v150, v151);
    if (objc_msgSend_shouldPromoteCJKCommonCharacters(*(void **)(v80 + 456), v147, v148, v149, v150, v151))
    {
      v157 = (char *)__dst;
      if (v986 != __dst)
      {
        v158 = 0;
        v159 = 0;
        while (1)
        {
          unicodeToNSString(*(_DWORD *)&v157[v158], v152, v153, v154, v155, v156);
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend_isRareChineseEntry_((void *)v80, v161, (uint64_t)v160, v162, v163, v164) & 1) == 0)
            break;

          ++v159;
          v157 = (char *)__dst;
          v158 += 8;
          v80 = a1;
          if (v159 >= ((char *)v986 - (_BYTE *)__dst) >> 3)
            goto LABEL_574;
        }
        if (v159)
        {
          v676 = __dst;
          v677 = (char *)__dst + v158;
          if (v159 == 1)
          {
            v678 = *(void **)__dst;
            memmove(__dst, v677, 8uLL);
            v676[1] = v678;
          }
          else
          {
            v718 = *(_QWORD *)((char *)__dst + v158);
            memmove((char *)__dst + 8, __dst, v158);
            *v676 = v718;
          }
        }

      }
    }
LABEL_574:
    v719 = (void *)MEMORY[0x1E0CB36B8];
    if (v940)
    {
      objc_msgSend_segments(v940, v152, v153, v154, v155, v156);
      v720 = (void *)objc_claimAutoreleasedReturnValue();
      v726 = objc_msgSend_count(v720, v721, v722, v723, v724, v725);
      objc_msgSend_indexSetWithIndexesInRange_(v719, v727, 0, v726, v728, v729);
      v730 = (void *)objc_claimAutoreleasedReturnValue();

      v731 = v730;
      v732 = v940;
      objc_msgSend_count(v731, v733, v734, v735, v736, v737);
      objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v738, v739, v740, v741, v742);
      v743 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1BE656F58;
      v1013 = (uint64_t *)&unk_1E77F27C8;
      v1016 = 0;
      v744 = v732;
      v1014 = *(double *)&v744;
      v745 = v743;
      v1015 = v745;
      objc_msgSend_enumerateIndexesUsingBlock_(v731, v746, (uint64_t)buf, v747, v748, v749);
      v750 = v1015;
      v751 = v745;

      *(_QWORD *)buf = v751;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v752, (uint64_t)buf, 1, v753, v754);
      v950 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v755 = objc_msgSend_strokeCount(v942, v152, v153, v154, v155, v156);
      objc_msgSend_indexSetWithIndexesInRange_(v719, v756, 0, v755, v757, v758);
      v731 = (id)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = v731;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v759, (uint64_t)buf, 1, v760, v761);
      v950 = (void *)objc_claimAutoreleasedReturnValue();
    }

    v767 = (uint64_t *)__dst;
    v948 = v986;
    if (__dst != v986)
    {
      do
      {
        unicodeToNSString(*(_DWORD *)v767, v762, v763, v764, v765, v766);
        v768 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v769, 1, v770, v771, v772);
        v773 = (void *)objc_claimAutoreleasedReturnValue();
        v1007 = v773;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v774, (uint64_t)&v1007, 1, v775, v776);
        v777 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v778, 0, v779, v780, v781);
        v782 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v990 = v782;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v783, (uint64_t)&v990, 1, v784, v785);
        v958 = (void *)objc_claimAutoreleasedReturnValue();

        v786 = (void *)MEMORY[0x1E0CB3B18];
        v792 = objc_msgSend_length(v768, v787, v788, v789, v790, v791);
        objc_msgSend_valueWithRange_(v786, v793, 0, v792, v794, v795);
        v796 = (void *)objc_claimAutoreleasedReturnValue();
        __p = v796;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v797, (uint64_t)&__p, 1, v798, v799);
        v800 = (void *)objc_claimAutoreleasedReturnValue();

        shouldTransformCharacterProbabilitiesIntoLogScores = objc_msgSend_shouldTransformCharacterProbabilitiesIntoLogScores(*(void **)(v954 + 456), v801, v802, v803, v804, v805);
        v812 = *((float *)v767 + 1);
        if (shouldTransformCharacterProbabilitiesIntoLogScores)
          v812 = -log10f(v812);
        v813 = v812;
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v807, v808, v809, v810, v811, v812);
        v814 = (void *)objc_claimAutoreleasedReturnValue();
        v1002 = v814;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v815, (uint64_t)&v1002, 1, v816, v817);
        v818 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v819, v820, v821, v822, v823, v813);
        v824 = (_QWORD **)objc_claimAutoreleasedReturnValue();
        v988 = v824;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v825, (uint64_t)&v988, 1, v826, v827);
        v828 = (void *)objc_claimAutoreleasedReturnValue();

        sub_1BE64463C(v954, v768, v800);
        v829 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isInappropriateString_(*(void **)(v954 + 488), v830, (uint64_t)v768, v831, v832, v833))
        {
          objc_msgSend_indexSetWithIndex_(MEMORY[0x1E0CB36B8], v834, 0, v835, v836, v837);
          v838 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v838 = 0;
        }
        v839 = [CHTextRecognitionResult alloc];
        LOBYTE(v911) = 0;
        isTextReplacement = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v839, v840, (uint64_t)v768, (uint64_t)v800, (uint64_t)v958, (uint64_t)v818, v828, v950, *((float *)v767 + 1), v777, v777, v829, v838, v911);
        sub_1BE64884C(v954, isTextReplacement);
        v846 = (void *)objc_claimAutoreleasedReturnValue();
        if (v846)
          objc_msgSend_addObject_(v951, v842, (uint64_t)v846, v843, v844, v845);
        objc_msgSend_addObject_(v951, v842, (uint64_t)isTextReplacement, v843, v844, v845);

        ++v767;
      }
      while (v767 != v948);
    }
    sub_1BE6480E4(v954, v951, size);

    if (__dst)
    {
      v986 = (uint64_t *)__dst;
      operator delete(__dst);
    }
  }

  objc_msgSend__tokenizedTextResultFromResults_segmentGroup_offsetSegment_decodedStrokeSets_spaceBehavior_((void *)v954, v847, (uint64_t)v951, (uint64_t)v940, 0, 1, v944);
  v561 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_tokenColumns(v561, v848, v849, v850, v851, v852);
  v853 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendTokenColumns_(v928, v854, (uint64_t)v853, v855, v856, v857);

  v562 = 0;
  v563 = 0;
LABEL_589:

  if (v966)
  {
    v967 = v966;
    operator delete(v966);
  }
  sub_1BE66A0DC((uint64_t)v969);
  objc_autoreleasePoolPop(context);
  if (RootCursor)
    CFRelease(RootCursor);
  if (cf)
    CFRelease(cf);
  if ((v563 & 1) != 0)
  {
    v861 = 0;
    v862 = v928;
  }
  else
  {
    objc_msgSend_substringWithRange_(v925, v858, 0, v916, v859, v860);
    v862 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_transcriptionPaths(v928, v863, v864, v865, v866, v867);
    v868 = (void *)objc_claimAutoreleasedReturnValue();
    v874 = objc_msgSend_count(v868, v869, v870, v871, v872, v873) == 0;

    if (v874)
    {
      if ((v915 & 1) != 0)
        v880 = 0;
      else
        v880 = v862;
      v959 = 0;
      v960 = 0;
      v881 = objc_msgSend__effectiveMaxRecognitionResultCount((void *)v954, v875, v876, v877, v878, v879);
      objc_msgSend__calculateBestTranscriptionPaths_scores_fromTokenizedResult_pathCount_history_skipLMRescoring_((void *)v954, v882, (uint64_t)&v960, (uint64_t)&v959, (uint64_t)v928, v881, v880, v915);
      v883 = v960;
      v884 = v959;
      objc_msgSend_setTranscriptionPaths_scores_(v928, v885, (uint64_t)v883, (uint64_t)v884, v886, v887);

    }
    if ((objc_msgSend_shouldKeepDuplicateTokenIDs(*(void **)(v954 + 456), v875, v876, v877, v878, v879) & 1) != 0)
      shouldTransliterateSentencesSCTC = 1;
    else
      shouldTransliterateSentencesSCTC = objc_msgSend_shouldTransliterateSentencesSCTC(*(void **)(v954 + 456), v888, v889, v890, v891, v892);
    objc_msgSend_trimTokensToTranscriptionPathCount_(v928, v888, v917, v890, v891, v892);
    shouldKeepOutOfPatternCandidates = objc_msgSend_shouldKeepOutOfPatternCandidates(*(void **)(v954 + 456), v894, v895, v896, v897, v898);
    objc_msgSend_filterCandidatesWithOutOfPattern_duplicateTokenIDs_keepOutOfLexiconAlternatives_keepAlternativeLengths_keepSubstrings_shouldKeepOriginalSpelling_(v928, v900, shouldKeepOutOfPatternCandidates, shouldTransliterateSentencesSCTC, 0, 0, 0, 0);
    objc_msgSend__addAlternativeCandidatesForTokenizedResult_((void *)v954, v901, (uint64_t)v928, v902, v903, v904);
    v861 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_adjustColumns(v861, v905, v906, v907, v908, v909);
  }

  return v861;
}

void sub_1BE651FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,_Unwind_Exception *exception_objecta,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v65;
  void *v66;

  __cxa_guard_abort(&qword_1EF567F70);
  v65 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v65;
    operator delete(v65);
  }
  v66 = (void *)STACK[0x4C8];
  if (STACK[0x4C8])
  {
    STACK[0x4D0] = (unint64_t)v66;
    operator delete(v66);
  }
  sub_1BE66A0DC((uint64_t)&STACK[0x4E0]);
  sub_1BE66A0DC((uint64_t)&STACK[0x2D8]);
  sub_1BE66A0DC((uint64_t)&STACK[0x5E0]);

  if (a57)
    operator delete(a57);

  if (a60)
    operator delete(a60);
  sub_1BE66A0DC((uint64_t)&a63);

  _Unwind_Resume(a1);
}

id sub_1BE65280C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;

  v3 = a2;
  v8 = v3;
  v9 = 0;
  if (a1 && v3)
  {
    objc_msgSend_objectForKey_(v3, v4, (uint64_t)CHRecognitionOptionTextBefore[0], v5, v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v10;
    else
      v9 = 0;

  }
  return v9;
}

void sub_1BE652894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6528A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6528B8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v8 = v3;
  v9 = 0;
  if (a1 && v3)
  {
    objc_msgSend_objectForKey_(v3, v4, (uint64_t)CHRecognitionOptionPrecedingSpaceBehavior[0], v5, v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || (v9 = objc_msgSend_integerValue(v10, v11, v12, v13, v14, v15)) == 0)
      v9 = objc_msgSend_precedingSpaceDefaultBehavior(*(void **)(a1 + 456), v11, v12, v13, v14, v15);

  }
  return v9;
}

void sub_1BE65294C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE65295C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE652970(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (a1 != a2)
  {
    sub_1BE66B164((_QWORD *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    sub_1BE66B2E4(a1 + 56, *(_QWORD **)(a2 + 56), (_QWORD *)(a2 + 64));
    sub_1BE66B600(a1 + 80, *(char **)(a2 + 80), *(char **)(a2 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
    sub_1BE62037C((_QWORD *)(a1 + 104), *(char **)(a2 + 104), *(char **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_1BE66B898(a1 + 136, *(std::string **)(a2 + 136), *(std::string **)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 3));
    sub_1BE66BB9C((uint64_t **)(a1 + 160), *(_QWORD **)(a2 + 160), (_QWORD *)(a2 + 168));
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    sub_1BE66C08C((uint64_t **)(a1 + 192), *(uint64_t **)(a2 + 192), (uint64_t *)(a2 + 200));
    sub_1BE66C968(a1 + 216, *(uint64_t **)(a2 + 216), (uint64_t *)(a2 + 224));
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  return a1;
}

uint64_t sub_1BE652A74(uint64_t a1)
{
  sub_1BE671438(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1BE652A9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, void *a7, char a8, void *a9)
{
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  void *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BOOL4 v148;
  unsigned int *v149;
  unsigned int *v150;
  BOOL v151;
  float v152;
  int v153;
  double v154;
  double v155;
  double v156;
  double v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  char *v167;
  unsigned int *v168;
  unsigned int **v169;
  unint64_t v170;
  unsigned int **v171;
  uint64_t v172;
  unsigned int *v173;
  char *v174;
  unsigned int *v175;
  unsigned int **v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int v179;
  char *v180;
  unint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int *v186;
  unsigned int *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int shouldTreatAllSmallStrokesAsPunctuation;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  unsigned int **v239;
  unsigned int *v240;
  uint64_t v241;
  unint64_t v242;
  float *v243;
  double v244;
  float v245;
  float v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int *v269;
  unint64_t v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  float *v275;
  unsigned int *v276;
  void *v277;
  uint64_t v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  _BYTE *v297;
  int64_t v298;
  char *v299;
  char *v300;
  id v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  const void **v306;
  char *v307;
  const void **v308;
  unsigned int *v309;
  NSObject *v310;
  _BYTE *v311;
  int64_t v312;
  char *v313;
  void **v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  float *v326;
  float *v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  double v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  void (*v337)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  double v338;
  unint64_t v339;
  char *v340;
  unint64_t v341;
  float v342;
  int v343;
  unsigned __int8 shouldRelaxFinalCandidatesThresholding;
  double v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  float *v350;
  double v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  void (*v355)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  double v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  void *v360;
  char *v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  char *v366;
  int64x2_t *v367;
  uint64_t v368;
  char *v369;
  char *v370;
  char *v371;
  int shouldUseCaching;
  char **v373;
  int v374;
  uint64_t **v375;
  uint64_t *v376;
  uint64_t **v377;
  unsigned int **v378;
  uint64_t *v379;
  uint64_t *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t *v388;
  _QWORD *v389;
  _QWORD *v390;
  _QWORD *v391;
  _QWORD *v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  _QWORD **v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  _QWORD *v405;
  uint64_t v406;
  char *v407;
  unint64_t v408;
  unsigned int **v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  unint64_t v414;
  unsigned int *v415;
  char *v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t *v419;
  uint64_t *v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  _QWORD *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  _QWORD **v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned int *v455;
  unsigned int *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  char *v464;
  char *v465;
  char *v466;
  void *v467;
  void *v468;
  uint64_t v470;
  unint64_t v471;
  uint64_t (**v473)(void);
  uint64_t v474;
  uint64_t v475;
  uint64_t **v476;
  _QWORD *v477;
  uint64_t **v478;
  id v479;
  unint64_t v481;
  void *v482;
  uint64_t v483;
  void *v484;
  char **v485;
  void *v487;
  int64x2_t v488;
  void **v489;
  uint64_t v490;
  unsigned int **v491;
  _BYTE *v492;
  uint64_t *v493;
  _QWORD *v494;
  void *v495;
  double v496;
  void *v497;
  uint64_t *v498;
  uint64_t v500;
  float *v501;
  float *v502;
  char *v503;
  _QWORD *v504;
  _QWORD *v505;
  uint64_t v506;
  void *__p;
  char *v508;
  uint8_t buf[8];
  uint64_t v510;
  void (*v511)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v512;
  double v513;
  double v514;
  void **v515;
  void *v516;
  void *v517;
  char *v518;
  _BYTE *v519;
  __int128 v520;
  void *v521;
  __int128 v522;
  void *v523;
  void **v524;
  uint64_t v525;
  uint64_t v526;

  v12 = a2;
  v479 = a7;
  v473 = a9;
  v484 = v12;
  v18 = objc_msgSend_count(v12, v13, v14, v15, v16, v17);
  LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 36);
  v471 = vcvtpd_u64_f64((double)(unint64_t)v18 / (double)v24);
  v25 = 0;
  if (v471)
  {
    v26 = 0;
    v477 = (_QWORD *)(a1 + 520);
    v478 = a6 + 1;
    v494 = (_QWORD *)(a5 + 128);
    v470 = 0x3F7FBE7700003001;
    v27 = 0.5;
    v476 = a6;
    v500 = a1;
    do
    {
      v29 = *(unsigned int *)(*(_QWORD *)(a1 + 224) + 36);
      v481 = v26 * v29;
      if (objc_msgSend_count(v484, v19, v20, v21, v22, v23, v470) - v26 * v29 <= v29)
      {
        v35 = objc_msgSend_count(v484, v30, v31, v32, v33, v34) - v481;
        if ((a8 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        v35 = *(unsigned int *)(*(_QWORD *)(a1 + 224) + 36);
        if ((a8 & 1) != 0)
          goto LABEL_11;
      }
      if (v35 < *(unsigned int *)(*(_QWORD *)(a1 + 224) + 36))
        break;
LABEL_11:
      if (v473 && (v473[2]() & 1) != 0)
        break;
      v475 = v26;
      objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v30, v35, v32, v33, v34);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v483 = v35;
      if (v35 >= 1)
      {
        v41 = v481;
        v42 = v483;
        do
        {
          objc_msgSend_objectAtIndexedSubscript_(v484, v36, v41, v37, v38, v39);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_classifiableDrawing(v43, v44, v45, v46, v47, v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v40, v50, (uint64_t)v49, v51, v52, v53);

          ++v41;
          --v42;
        }
        while (v42);
      }
      CHNeuralNetwork::ClassifyCHDrawingFromBatches(&__p, *(_QWORD *)(a1 + 224), v40);
      v474 = v25;
      objc_msgSend_removeAllObjects(v40, v54, v55, v56, v57, v58);
      if (v483 >= 1)
      {
        v63 = 0;
        v482 = v40;
        while (1)
        {
          v64 = __p;
          objc_msgSend_objectAtIndexedSubscript_(v484, v59, v63 + v481, v60, v61, v62);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_classifiableDrawing(v65, v66, v67, v68, v69, v70);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_drawing(v71, v72, v73, v74, v75, v76);
          v487 = (void *)objc_claimAutoreleasedReturnValue();
          v490 = v63;

          v87 = objc_msgSend_edgeIndex(v65, v77, v78, v79, v80, v81);
          v88 = *(_QWORD *)(a4 + 80);
          if (v65)
          {
            objc_msgSend_strokeGroup(v65, v82, v83, v84, v85, v86);
          }
          else
          {
            v504 = 0;
            v505 = 0;
            v506 = 0;
          }
          v491 = (unsigned int **)&v64[3 * v63];
          objc_msgSend__adjustCandidatesForConfusableCharacters_((void *)v500, v82, (uint64_t)v491, v84, v85, v86);
          if (objc_msgSend_shouldRefineChineseCharacterCandidates(*(void **)(v500 + 456), v89, v90, v91, v92, v93))sub_1BE648654((double *)v500, v491, v487);
          v495 = v65;
          if (objc_msgSend_shouldDetectChinesePunctuation(*(void **)(v500 + 456), v94, v95, v96, v97, v98))break;
LABEL_89:
          if (!objc_msgSend_shouldDetectRomanPunctuation(*(void **)(v500 + 456), v99, v100, v101, v102, v103))goto LABEL_138;
          v197 = v487;
          shouldTreatAllSmallStrokesAsPunctuation = objc_msgSend_shouldTreatAllSmallStrokesAsPunctuation(*(void **)(v500 + 456), v198, v199, v200, v201, v202);
          v209 = *(double *)(v500 + 496);
          if (shouldTreatAllSmallStrokesAsPunctuation)
            objc_msgSend_indexesOfStrokesSmallerThanSize_(v197, v204, v205, v206, v207, v208, v209, *(double *)(v500 + 504));
          else
            objc_msgSend_indexesOfStrokesSmallerThanSize_(v197, v204, v205, v206, v207, v208, v209 + v209, *(double *)(v500 + 504) + *(double *)(v500 + 504));
          v210 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_count(v210, v211, v212, v213, v214, v215))
          {
            if ((unint64_t)objc_msgSend_strokeCount(v197, v216, v217, v218, v219, v220) <= 1)
            {
              v238 = (char *)&v64[3 * v490];
              v240 = (unsigned int *)*((_QWORD *)v238 + 1);
              v239 = (unsigned int **)(v238 + 8);
              v241 = (char *)v240 - (char *)*v491;
              if (v240 == *v491)
              {
                v246 = 0.0;
              }
              else
              {
                v242 = v241 >> 3;
                if (v242 <= 1)
                  v242 = 1;
                v243 = (float *)(*v491 + 1);
                v244 = 0.0;
                do
                {
                  v245 = *v243;
                  v243 += 2;
                  v244 = v244 + v245;
                  --v242;
                }
                while (v242);
                v246 = v244 * 0.5;
              }
              objc_msgSend__defaultPunctuationStringsOutputScores_maxCandidateCount_((void *)v500, v221, 0, 1, v224, v225);
              v253 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend_count(v253, v254, v255, v256, v257, v258))
              {
                objc_msgSend_firstObject(v253, v259, v260, v261, v262, v263);
                v264 = (void *)objc_claimAutoreleasedReturnValue();
                v268 = objc_msgSend_codepointAtIndex_outRange_(v264, v265, 0, 0, v266, v267);
                v269 = *v491;
                v270 = ((char *)*v239 - (char *)*v491) >> 3;
                if (*v239 != *v491)
                {
                  v271 = 0;
                  v272 = 0;
                  if (v270 <= 1)
                    v273 = 1;
                  else
                    v273 = ((char *)*v239 - (char *)*v491) >> 3;
                  v274 = -v273;
LABEL_112:
                  v275 = (float *)&v269[2 * v271++ + 1];
                  do
                  {
                    if (*((_DWORD *)v275 - 1) == v268)
                    {
                      *v275 = v246;
                      v272 = 1;
                      if (v274 + v271)
                        goto LABEL_112;
                      goto LABEL_120;
                    }
                    *v275 = *v275 * v27;
                    v275 += 2;
                    ++v271;
                  }
                  while (v274 + v271 != 1);
                  if ((v272 & 1) != 0)
                    goto LABEL_120;
                }
                v276 = &v269[2 * v270];
                *(v276 - 2) = v268;
                *((float *)v276 - 1) = v246;
LABEL_120:

              }
              goto LABEL_137;
            }
            v226 = objc_msgSend_count(v210, v221, v222, v223, v224, v225);
            if (v226 != objc_msgSend_strokeCount(v197, v227, v228, v229, v230, v231))
            {
              v523 = 0;
              v524 = &v523;
              v525 = 0x2020000000;
              v526 = 0;
              if (objc_msgSend_shouldTreatAllSmallStrokesAsPunctuation(*(void **)(v500 + 456), v232, v233, v234, v235, v236))
              {
                v252 = objc_msgSend_count(v210, v247, v248, v249, v250, v251);
                v524[3] = (void *)v252;
LABEL_136:
                sub_1BE65DBD0(v500, (uint64_t *)v491, v252);
                _Block_object_dispose(&v523, 8);
                goto LABEL_137;
              }
              v277 = (void *)MEMORY[0x1E0CB3788];
              v278 = objc_msgSend_strokeCount(v197, v247, v248, v249, v250, v251);
              objc_msgSend_indexSetWithIndexesInRange_(v277, v279, 0, v278, v280, v281);
              v282 = (void *)objc_claimAutoreleasedReturnValue();
              v497 = v282;
              objc_msgSend_removeIndexes_(v282, v283, (uint64_t)v210, v284, v285, v286);
              v287 = (void *)objc_opt_class();
              if (v287)
              {
                objc_msgSend_convexHullForStrokes_inDrawing_(v287, v288, (uint64_t)v282, (uint64_t)v197, v289, v290);
              }
              else
              {
                v521 = 0;
                v522 = 0uLL;
              }
              v291 = (void *)objc_opt_class();
              if (v291)
              {
                objc_msgSend_enlargedConvexHull_withMargin_(v291, v292, (uint64_t)&v521, v293, v294, v295, 10.0);
                v296 = v521;
                if (v521)
                  goto LABEL_127;
              }
              else
              {
                v519 = 0;
                v520 = 0uLL;
                v296 = v521;
                if (v521)
                {
LABEL_127:
                  *(_QWORD *)&v522 = v296;
                  operator delete(v296);
                }
              }
              v297 = v519;
              v521 = v519;
              v492 = (_BYTE *)v520;
              v522 = v520;
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              v510 = 3321888768;
              v511 = sub_1BE65DE70;
              v512 = (uint64_t *)&unk_1E77F1440;
              v513 = COERCE_DOUBLE(v197);
              v517 = 0;
              v518 = 0;
              v516 = 0;
              v298 = v492 - v297;
              if (v492 != v297)
              {
                if (v298 < 0)
                  sub_1BE61F930();
                v299 = (char *)operator new(v492 - v297);
                v300 = &v299[16 * (v298 >> 4)];
                v516 = v299;
                v518 = v300;
                memcpy(v299, v297, v298);
                v517 = v300;
              }
              v301 = v497;
              v514 = *(double *)&v301;
              v515 = &v523;
              objc_msgSend_enumerateIndexesUsingBlock_(v210, v302, (uint64_t)buf, v303, v304, v305);

              if (v516)
              {
                v517 = v516;
                operator delete(v516);
              }

              if (v521)
              {
                *(_QWORD *)&v522 = v521;
                operator delete(v521);
              }

              v252 = (uint64_t)v524[3];
              goto LABEL_136;
            }
            v237 = objc_msgSend_strokeCount(v197, v232, v233, v234, v235, v236);
            sub_1BE65DBD0(v500, (uint64_t *)v491, v237);
          }
LABEL_137:

LABEL_138:
          v306 = (const void **)v491;
          v307 = (char *)&v64[3 * v490];
          v309 = (unsigned int *)*((_QWORD *)v307 + 1);
          v308 = (const void **)(v307 + 8);
          if (v309 == *v491)
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v310 = (id)qword_1EF568E18[0];
            if (os_log_type_enabled(v310, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BE607000, v310, OS_LOG_TYPE_FAULT, "We must add at least one candidate for each edge", buf, 2u);
            }

            v306 = (const void **)v491;
          }
          v501 = 0;
          v502 = 0;
          v503 = 0;
          v311 = *v306;
          v485 = (char **)v308;
          v312 = (_BYTE *)*v308 - (_BYTE *)*v306;
          if (*v308 != *v306)
          {
            if (v312 < 0)
              sub_1BE61F930();
            v501 = (float *)operator new((_BYTE *)*v308 - v311);
            v502 = v501;
            v313 = (char *)&v501[2 * (v312 >> 3)];
            v503 = v313;
            memcpy(v501, v311, v312);
            v502 = (float *)v313;
          }
          v314 = (void **)objc_msgSend_numberOfSegments(v65, v192, v193, v194, v195, v196);
          v320 = objc_msgSend_numberOfSubstrokes(v65, v315, v316, v317, v318, v319);
          v327 = v501;
          v326 = v502;
          if (v502 != v501)
          {
            v328 = (void *)v320;
            v333 = 0.0;
            if (objc_msgSend_shouldApplyRomanPostProcessing(*(void **)(v500 + 456), v321, v322, v323, v324, v325))v333 = sub_1BE705F60((uint64_t)v327, (const char *)&v501, v329, v330, v331, v332);
            sub_1BE6544CC(&v523, v500, *(unsigned int *)v327, v330, v331, v332);
            v334 = sub_1BE66A2C4(v494, (uint64_t)&v523);
            v493 = (uint64_t *)(v88 + 72 * v87);
            v335 = *v493;
            v498 = v493 + 1;
            v336 = v493[1];
            v337 = (void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))*(unsigned int *)v327;
            v338 = v327[1];
            *(_QWORD *)buf = *v493;
            v510 = v336;
            v511 = v337;
            v512 = v334;
            v513 = v338;
            v514 = v333;
            v515 = v314;
            v516 = v314;
            v517 = v328;
            v339 = *(_QWORD *)(a3 + 8);
            if (v339 >= *(_QWORD *)(a3 + 16))
            {
              v340 = sub_1BE66D0D0((char **)a3, (uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v339 = v335;
              *(_QWORD *)(v339 + 8) = v336;
              *(_QWORD *)(v339 + 16) = v337;
              *(_QWORD *)(v339 + 24) = v334;
              *(double *)(v339 + 32) = v338;
              *(double *)(v339 + 40) = v333;
              *(_QWORD *)(v339 + 48) = v314;
              *(_QWORD *)(v339 + 56) = v314;
              v340 = (char *)(v339 + 72);
              *(_QWORD *)(v339 + 64) = v328;
            }
            *(_QWORD *)(a3 + 8) = v340;
            if (SHIBYTE(v525) < 0)
            {
              operator delete(v523);
              v326 = v501;
              if ((unint64_t)((char *)v502 - (char *)v501) < 9)
                goto LABEL_184;
            }
            else
            {
              v326 = v501;
              if ((unint64_t)((char *)v502 - (char *)v501) < 9)
                goto LABEL_184;
            }
            v488 = vdupq_n_s64((unint64_t)v314);
            v341 = 1;
            v489 = v314;
            while (1)
            {
              if (objc_msgSend_shouldRelaxFinalCandidatesThresholding(*(void **)(v500 + 456), v321, v322, v323, v324, v325))
              {
                v342 = v326[2 * v341 + 1];
                v343 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 32) + 40 * *v498 + 32);
                shouldRelaxFinalCandidatesThresholding = objc_msgSend_shouldRelaxFinalCandidatesThresholding(*(void **)(v500 + 456), v321, v322, v323, v324, v325);
                v345 = 0.01;
                if (((v343 != 0) & shouldRelaxFinalCandidatesThresholding) != 0)
                  v345 = 0.001;
                if (v345 >= v342)
                  break;
              }
              v350 = &v326[2 * v341];
              v351 = 0.0;
              if (objc_msgSend_shouldApplyRomanPostProcessing(*(void **)(v500 + 456), v321, v322, v323, v324, v325))v351 = sub_1BE705F60((uint64_t)&v326[2 * v341], (const char *)&v501, v346, v347, v348, v349);
              sub_1BE6544CC(&v523, v500, *(unsigned int *)v350, v347, v348, v349);
              v352 = sub_1BE66A2C4(v494, (uint64_t)&v523);
              v353 = *v493;
              v354 = *v498;
              v355 = (void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))*(unsigned int *)v350;
              v356 = v326[2 * v341 + 1];
              *(_QWORD *)buf = *v493;
              v510 = v354;
              v511 = v355;
              v512 = v352;
              v513 = v356;
              v514 = v351;
              v515 = v314;
              v516 = v314;
              v517 = v328;
              v358 = *(_QWORD *)(a3 + 8);
              v357 = *(_QWORD *)(a3 + 16);
              if (v358 >= v357)
              {
                v360 = v328;
                v361 = *(char **)a3;
                v362 = 0x8E38E38E38E38E39 * ((uint64_t)(v358 - *(_QWORD *)a3) >> 3);
                v363 = v362 + 1;
                if (v362 + 1 > 0x38E38E38E38E38ELL)
                  sub_1BE61F930();
                v364 = 0x8E38E38E38E38E39 * ((uint64_t)(v357 - (_QWORD)v361) >> 3);
                if (2 * v364 > v363)
                  v363 = 2 * v364;
                if (v364 >= 0x1C71C71C71C71C7)
                  v365 = 0x38E38E38E38E38ELL;
                else
                  v365 = v363;
                if (v365 > 0x38E38E38E38E38ELL)
                  sub_1BE61F100();
                v366 = (char *)operator new(72 * v365);
                v367 = (int64x2_t *)&v366[72 * v362];
                v367->i64[0] = v353;
                v367->i64[1] = v354;
                v367[1].i64[0] = (uint64_t)v355;
                v367[1].i64[1] = (uint64_t)v352;
                *(double *)v367[2].i64 = v356;
                *(double *)&v367[2].i64[1] = v351;
                v367[3] = v488;
                v328 = v360;
                v367[4].i64[0] = (uint64_t)v360;
                if ((char *)v358 == v361)
                {
                  v370 = (char *)v367;
                  v65 = v495;
                  v314 = v489;
                }
                else
                {
                  v368 = 0;
                  v314 = v489;
                  do
                  {
                    v369 = &v367->i8[v368];
                    *(_OWORD *)(v369 - 72) = *(_OWORD *)(v358 + v368 - 72);
                    *(_OWORD *)(v369 - 56) = *(_OWORD *)(v358 + v368 - 56);
                    *(_OWORD *)(v369 - 40) = *(_OWORD *)(v358 + v368 - 40);
                    *(_OWORD *)(v369 - 24) = *(_OWORD *)(v358 + v368 - 24);
                    *((_QWORD *)v369 - 1) = *(_QWORD *)(v358 + v368 - 8);
                    v368 -= 72;
                  }
                  while ((char *)(v358 + v368) != v361);
                  v370 = &v367->i8[v368];
                  v65 = v495;
                }
                v371 = &v366[72 * v365];
                v359 = &v367[4].i8[8];
                *(_QWORD *)a3 = v370;
                *(_QWORD *)(a3 + 8) = (char *)v367 + 72;
                *(_QWORD *)(a3 + 16) = v371;
                if (v361)
                  operator delete(v361);
              }
              else
              {
                *(_QWORD *)v358 = v353;
                *(_QWORD *)(v358 + 8) = v354;
                *(_QWORD *)(v358 + 16) = v355;
                *(_QWORD *)(v358 + 24) = v352;
                *(double *)(v358 + 32) = v356;
                *(double *)(v358 + 40) = v351;
                *(_QWORD *)(v358 + 48) = v314;
                *(_QWORD *)(v358 + 56) = v314;
                v359 = (char *)(v358 + 72);
                *(_QWORD *)(v358 + 64) = v328;
                v65 = v495;
              }
              *(_QWORD *)(a3 + 8) = v359;
              if (SHIBYTE(v525) < 0)
                operator delete(v523);
              ++v341;
              v326 = v501;
              if (v341 >= ((char *)v502 - (char *)v501) >> 3)
                goto LABEL_184;
            }
            v326 = v501;
          }
LABEL_184:
          if (v326)
          {
            v502 = v326;
            operator delete(v326);
          }
          v40 = v482;
          shouldUseCaching = objc_msgSend_shouldUseCaching(*(void **)(v500 + 456), v321, v322, v323, v324, v325);
          v373 = v485;
          if (v506)
            v374 = shouldUseCaching;
          else
            v374 = 0;
          if (v374 != 1)
            goto LABEL_18;
          v375 = v478;
          v376 = *v478;
          v377 = v478;
          v378 = v491;
          if (*v478)
          {
            if (v504 == &v505)
            {
              v379 = (uint64_t *)v376[4];
              v380 = v376 + 5;
              if (v379 == v376 + 5)
                goto LABEL_261;
              v377 = (uint64_t **)*v478;
              while (1)
              {
                v381 = v504;
                while (v381 != &v505)
                {
                  v382 = v381[4];
                  v383 = v379[4];
                  if (v382 < v383)
                    break;
                  if (v383 >= v382)
                  {
                    v384 = (_QWORD *)v381[1];
                    v385 = v381;
                    if (v384)
                    {
                      do
                      {
                        v381 = v384;
                        v384 = (_QWORD *)*v384;
                      }
                      while (v384);
                    }
                    else
                    {
                      do
                      {
                        v381 = (_QWORD *)v385[2];
                        v151 = *v381 == (_QWORD)v385;
                        v385 = v381;
                      }
                      while (!v151);
                    }
                    v386 = (uint64_t *)v379[1];
                    if (v386)
                    {
                      do
                      {
                        v387 = v386;
                        v386 = (uint64_t *)*v386;
                      }
                      while (v386);
                    }
                    else
                    {
                      do
                      {
                        v387 = (uint64_t *)v379[2];
                        v151 = *v387 == (_QWORD)v379;
                        v379 = v387;
                      }
                      while (!v151);
                    }
                    v379 = v387;
                    if (v387 != v380)
                      continue;
                  }
                  goto LABEL_261;
                }
                v388 = *v377;
                v375 = v377;
                if (!*v377)
                  break;
                v379 = (uint64_t *)v388[4];
                v380 = v388 + 5;
                v377 = (uint64_t **)*v377;
                if (v379 == v388 + 5)
                  goto LABEL_261;
              }
            }
            else
            {
              do
              {
                while (1)
                {
                  v375 = (uint64_t **)v376;
                  v389 = (_QWORD *)v376[4];
                  v390 = v376 + 5;
                  v391 = v504;
                  v392 = v389;
                  if (v389 == v390)
                    break;
                  while (v391 != &v505)
                  {
                    v400 = v391[4];
                    v401 = v392[4];
                    if (v400 < v401)
                      break;
                    if (v401 >= v400)
                    {
                      v402 = (_QWORD *)v391[1];
                      v403 = v391;
                      if (v402)
                      {
                        do
                        {
                          v391 = v402;
                          v402 = (_QWORD *)*v402;
                        }
                        while (v402);
                      }
                      else
                      {
                        do
                        {
                          v391 = (_QWORD *)v403[2];
                          v151 = *v391 == (_QWORD)v403;
                          v403 = v391;
                        }
                        while (!v151);
                      }
                      v404 = (_QWORD *)v392[1];
                      if (v404)
                      {
                        do
                        {
                          v405 = v404;
                          v404 = (_QWORD *)*v404;
                        }
                        while (v404);
                      }
                      else
                      {
                        do
                        {
                          v405 = (_QWORD *)v392[2];
                          v151 = *v405 == (_QWORD)v392;
                          v392 = v405;
                        }
                        while (!v151);
                      }
                      v392 = v405;
                      if (v405 != v390)
                        continue;
                    }
                    goto LABEL_214;
                  }
                  v376 = *v375;
                  v377 = v375;
                  if (!*v375)
                    goto LABEL_258;
                }
LABEL_214:
                v393 = v504;
                while (v389 != v390)
                {
                  v394 = v389[4];
                  v395 = v393[4];
                  if (v394 < v395)
                    break;
                  if (v395 >= v394)
                  {
                    v396 = (_QWORD *)v389[1];
                    v397 = v389;
                    if (v396)
                    {
                      do
                      {
                        v389 = v396;
                        v396 = (_QWORD *)*v396;
                      }
                      while (v396);
                    }
                    else
                    {
                      do
                      {
                        v389 = (_QWORD *)v397[2];
                        v151 = *v389 == (_QWORD)v397;
                        v397 = v389;
                      }
                      while (!v151);
                    }
                    v398 = (_QWORD *)v393[1];
                    if (v398)
                    {
                      do
                      {
                        v399 = (_QWORD **)v398;
                        v398 = (_QWORD *)*v398;
                      }
                      while (v398);
                    }
                    else
                    {
                      do
                      {
                        v399 = (_QWORD **)v393[2];
                        v151 = *v399 == v393;
                        v393 = v399;
                      }
                      while (!v151);
                    }
                    v393 = v399;
                    if (v399 != &v505)
                      continue;
                  }
                  goto LABEL_261;
                }
                v376 = v375[1];
              }
              while (v376);
              v377 = v375 + 1;
            }
          }
LABEL_258:
          v419 = (uint64_t *)operator new(0x38uLL);
          v419[5] = 0;
          v419[4] = (uint64_t)(v419 + 5);
          v419[6] = 0;
          sub_1BE670B3C(v419 + 4, v504, &v505);
          *v419 = 0;
          v419[1] = 0;
          v419[2] = (uint64_t)v375;
          *v377 = v419;
          v420 = (uint64_t *)**v476;
          v378 = v491;
          if (v420)
          {
            *v476 = v420;
            v419 = *v377;
          }
          sub_1BE61F5C0(v476[1], v419);
          v476[2] = (uint64_t *)((char *)v476[2] + 1);
          v373 = v485;
LABEL_261:
          v421 = v477;
          v422 = (_QWORD *)*v477;
          v423 = v477;
          if (*v477)
          {
            if (v504 == &v505)
            {
              v424 = (_QWORD *)v422[4];
              v425 = v422 + 5;
              if (v424 != v422 + 5)
              {
                v423 = (_QWORD *)*v477;
                do
                {
                  v426 = v504;
                  while (v426 != &v505)
                  {
                    v427 = v426[4];
                    v428 = v424[4];
                    if (v427 < v428)
                      break;
                    if (v428 >= v427)
                    {
                      v429 = (_QWORD *)v426[1];
                      v430 = v426;
                      if (v429)
                      {
                        do
                        {
                          v426 = v429;
                          v429 = (_QWORD *)*v429;
                        }
                        while (v429);
                      }
                      else
                      {
                        do
                        {
                          v426 = (_QWORD *)v430[2];
                          v151 = *v426 == (_QWORD)v430;
                          v430 = v426;
                        }
                        while (!v151);
                      }
                      v431 = (_QWORD *)v424[1];
                      if (v431)
                      {
                        do
                        {
                          v432 = v431;
                          v431 = (_QWORD *)*v431;
                        }
                        while (v431);
                      }
                      else
                      {
                        do
                        {
                          v432 = (_QWORD *)v424[2];
                          v151 = *v432 == (_QWORD)v424;
                          v424 = v432;
                        }
                        while (!v151);
                      }
                      v424 = v432;
                      if (v432 != v425)
                        continue;
                    }
                    v422 = v423;
                    goto LABEL_325;
                  }
                  v422 = (_QWORD *)*v423;
                  v421 = v423;
                  if (!*v423)
                    goto LABEL_322;
                  v424 = (_QWORD *)v422[4];
                  v425 = v422 + 5;
                  v423 = (_QWORD *)*v423;
                }
                while (v424 != v422 + 5);
              }
              goto LABEL_325;
            }
            do
            {
              while (1)
              {
                v421 = v422;
                v433 = (_QWORD *)v422[4];
                v434 = v422 + 5;
                v435 = v504;
                v436 = v433;
                if (v433 == v422 + 5)
                  break;
                while (v435 != &v505)
                {
                  v444 = v435[4];
                  v445 = v436[4];
                  if (v444 < v445)
                    break;
                  if (v445 >= v444)
                  {
                    v446 = (_QWORD *)v435[1];
                    v447 = v435;
                    if (v446)
                    {
                      do
                      {
                        v435 = v446;
                        v446 = (_QWORD *)*v446;
                      }
                      while (v446);
                    }
                    else
                    {
                      do
                      {
                        v435 = (_QWORD *)v447[2];
                        v151 = *v435 == (_QWORD)v447;
                        v447 = v435;
                      }
                      while (!v151);
                    }
                    v448 = (_QWORD *)v436[1];
                    if (v448)
                    {
                      do
                      {
                        v449 = v448;
                        v448 = (_QWORD *)*v448;
                      }
                      while (v448);
                    }
                    else
                    {
                      do
                      {
                        v449 = (_QWORD *)v436[2];
                        v151 = *v449 == (_QWORD)v436;
                        v436 = v449;
                      }
                      while (!v151);
                    }
                    v436 = v449;
                    if (v449 != v434)
                      continue;
                  }
                  goto LABEL_285;
                }
                v422 = (_QWORD *)*v422;
                v423 = v421;
                if (!*v421)
                  goto LABEL_322;
              }
LABEL_285:
              v437 = v504;
              while (v433 != v434)
              {
                v438 = v433[4];
                v439 = v437[4];
                if (v438 < v439)
                  break;
                if (v439 >= v438)
                {
                  v440 = (_QWORD *)v433[1];
                  v441 = v433;
                  if (v440)
                  {
                    do
                    {
                      v433 = v440;
                      v440 = (_QWORD *)*v440;
                    }
                    while (v440);
                  }
                  else
                  {
                    do
                    {
                      v433 = (_QWORD *)v441[2];
                      v151 = *v433 == (_QWORD)v441;
                      v441 = v433;
                    }
                    while (!v151);
                  }
                  v442 = (_QWORD *)v437[1];
                  if (v442)
                  {
                    do
                    {
                      v443 = (_QWORD **)v442;
                      v442 = (_QWORD *)*v442;
                    }
                    while (v442);
                  }
                  else
                  {
                    do
                    {
                      v443 = (_QWORD **)v437[2];
                      v151 = *v443 == v437;
                      v437 = v443;
                    }
                    while (!v151);
                  }
                  v437 = v443;
                  if (v443 != &v505)
                    continue;
                }
                goto LABEL_325;
              }
              v422 = (_QWORD *)v422[1];
            }
            while (v422);
            v423 = v421 + 1;
          }
LABEL_322:
          v422 = operator new(0x50uLL);
          v422[5] = 0;
          v422[4] = v422 + 5;
          v422[6] = 0;
          sub_1BE670B3C(v422 + 4, v504, &v505);
          v422[7] = 0;
          v422[8] = 0;
          v422[9] = 0;
          *v422 = 0;
          v422[1] = 0;
          v422[2] = v421;
          *v423 = v422;
          v450 = **(_QWORD **)(v500 + 512);
          v451 = v422;
          v378 = v491;
          if (v450)
          {
            *(_QWORD *)(v500 + 512) = v450;
            v451 = (uint64_t *)*v423;
          }
          sub_1BE61F5C0(*(uint64_t **)(v500 + 520), v451);
          ++*(_QWORD *)(v500 + 528);
          v373 = v485;
LABEL_325:
          if (v422 + 7 != v378)
            sub_1BE62037C(v422 + 7, (char *)*v491, *v373, (*v373 - (char *)*v491) >> 3);
LABEL_18:
          sub_1BE62033C((uint64_t)&v504, v505);

          v63 = v490 + 1;
          if (v490 + 1 == v483)
            goto LABEL_351;
        }
        v104 = v487;
        v105 = v479;
        objc_msgSend_bounds(v105, v106, v107, v108, v109, v110);
        v112 = v111;
        v114 = v113;
        v116 = v115;
        objc_msgSend_bounds(v104, v117, v118, v119, v120, v121);
        v123 = v122;
        v125 = v124;
        v127 = v126;
        v129 = v128;
        if ((unint64_t)objc_msgSend_strokeCount(v104, v130, v131, v132, v133, v134) > 2)
          goto LABEL_88;
        v140 = v125 - v114;
        v141 = v114 + v116 - (v125 + v129);
        v142 = v116 * 0.6;
        if (v140 >= v116 * 0.4 && v141 <= v142)
        {
LABEL_28:
          v496 = v127 / (v129 + 0.000000001);
          if (objc_msgSend_strokeCount(v104, v135, v136, v137, v138, v139) == 1)
          {
            if (v129 < v116 * 0.1 && v127 < v116 * 0.1)
            {
              v148 = 0;
              if (v127 < *(double *)(v500 + 496) && v129 < *(double *)(v500 + 504) && v123 > v112)
                v148 = v140 > v116 * 0.75;
            }
            else
            {
              v148 = 0;
            }
            if (v141 < v140 && v140 > v142 && v496 < 1.5 && v123 > v112)
            {
              v173 = *v491;
              v174 = (char *)&v64[3 * v63];
              v177 = (unsigned int *)*((_QWORD *)v174 + 1);
              v176 = (unsigned int **)(v174 + 8);
              v175 = v177;
              v178 = *v491;
              if (*v491 != v177)
              {
                while (1)
                {
                  v179 = *v178;
                  if (*v178 == 44)
                    break;
                  if (v179 == 12290)
                  {
                    v406 = v88;
                    *v176 = v173;
                    v412 = (char *)&v64[3 * v490];
                    v414 = *((_QWORD *)v412 + 2);
                    v409 = (unsigned int **)(v412 + 16);
                    v413 = v414;
                    v27 = 0.5;
                    if ((unint64_t)v173 < v414)
                    {
                      *(_QWORD *)v173 = 0x3F7FBE7700003002;
                      v415 = v173 + 2;
                      goto LABEL_350;
                    }
                    v458 = v413 - (_QWORD)v173;
                    v459 = v458 >> 2;
                    if ((unint64_t)(v458 >> 2) <= 1)
                      v459 = 1;
                    if ((unint64_t)v458 >= 0x7FFFFFFFFFFFFFF8)
                      v460 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v460 = v459;
                    if (v460 >> 61)
                      sub_1BE61F100();
                    v455 = (unsigned int *)operator new(8 * v460);
                    v456 = &v455[2 * v460];
                    v457 = 0x3F7FBE7700003002;
                    goto LABEL_348;
                  }
                  if (v179 == 20022)
                  {
                    v406 = v88;
                    *v176 = v173;
                    v416 = (char *)&v64[3 * v490];
                    v418 = *((_QWORD *)v416 + 2);
                    v409 = (unsigned int **)(v416 + 16);
                    v417 = v418;
                    if ((unint64_t)v173 < v418)
                    {
                      v411 = v470;
                      goto LABEL_257;
                    }
                    v461 = v417 - (_QWORD)v173;
                    v462 = v461 >> 2;
                    if ((unint64_t)(v461 >> 2) <= 1)
                      v462 = 1;
                    if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFF8)
                      v463 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v463 = v462;
                    v27 = 0.5;
                    if (v463 >> 61)
                      sub_1BE61F100();
                    v455 = (unsigned int *)operator new(8 * v463);
                    v456 = &v455[2 * v463];
                    v457 = v470;
                    goto LABEL_348;
                  }
                  v178 += 2;
                  if (v178 == v175)
                    goto LABEL_67;
                }
                v406 = v88;
                *v176 = v173;
                v407 = (char *)&v64[3 * v490];
                v410 = *((_QWORD *)v407 + 2);
                v409 = (unsigned int **)(v407 + 16);
                v408 = v410;
                if ((unint64_t)v173 < v410)
                {
                  v411 = 0x3F7FBE770000002CLL;
LABEL_257:
                  *(_QWORD *)v173 = v411;
                  v415 = v173 + 2;
                  v27 = 0.5;
                  goto LABEL_350;
                }
                v452 = v408 - (_QWORD)v173;
                v453 = v452 >> 2;
                if ((unint64_t)(v452 >> 2) <= 1)
                  v453 = 1;
                if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFF8)
                  v454 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v454 = v453;
                v27 = 0.5;
                if (v454 >> 61)
                  sub_1BE61F100();
                v455 = (unsigned int *)operator new(8 * v454);
                v456 = &v455[2 * v454];
                v457 = 0x3F7FBE770000002CLL;
LABEL_348:
                *(_QWORD *)v455 = v457;
                *v491 = v455;
                v415 = v455 + 2;
                *v176 = v455 + 2;
                *v409 = v456;
                if (v173)
                  operator delete(v173);
LABEL_350:
                *v176 = v415;
                v88 = v406;
                goto LABEL_88;
              }
            }
LABEL_67:
            v27 = 0.5;
            if (!v148)
              goto LABEL_88;
            v166 = v88;
            v180 = (char *)&v64[3 * v490];
            v168 = *v491;
            *((_QWORD *)v180 + 1) = *v491;
            v169 = (unsigned int **)(v180 + 8);
            v171 = v169 + 1;
            v181 = (unint64_t)v169[1];
            if ((unint64_t)v168 < v181)
            {
              v172 = 0x3F7FBE770000002ELL;
LABEL_70:
              *(_QWORD *)v168 = v172;
              v182 = v168 + 2;
LABEL_87:
              *v169 = v182;
              v88 = v166;
LABEL_88:

              goto LABEL_89;
            }
            v183 = v181 - (_QWORD)v168;
            v184 = v183 >> 2;
            if ((unint64_t)(v183 >> 2) <= 1)
              v184 = 1;
            if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
              v185 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v185 = v184;
            if (v185 >> 61)
              sub_1BE61F100();
            v186 = (unsigned int *)operator new(8 * v185);
            v187 = &v186[2 * v185];
            v188 = 0x3F7FBE770000002ELL;
          }
          else
          {
            objc_msgSend_boundsForStrokeIndex_(v104, v143, 0, v144, v145, v146);
            v155 = v154;
            v157 = v156;
            objc_msgSend_boundsForStrokeIndex_(v104, v158, 1, v159, v160, v161);
            v27 = 0.5;
            v164 = *(double *)(v500 + 504);
            if (v157 >= v164)
              goto LABEL_88;
            v165 = *(double *)(v500 + 496);
            if (v155 >= v165 || v163 >= v164 || v162 >= v165 || v496 >= 0.25)
              goto LABEL_88;
            v166 = v88;
            v167 = (char *)&v64[3 * v63];
            v168 = *v491;
            *((_QWORD *)v167 + 1) = *v491;
            v169 = (unsigned int **)(v167 + 8);
            v171 = v169 + 1;
            v170 = (unint64_t)v169[1];
            if ((unint64_t)v168 < v170)
            {
              v172 = 0x3F7FBE770000003ALL;
              goto LABEL_70;
            }
            v189 = v170 - (_QWORD)v168;
            v190 = v189 >> 2;
            if ((unint64_t)(v189 >> 2) <= 1)
              v190 = 1;
            if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
              v191 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v191 = v190;
            if (v191 >> 61)
              sub_1BE61F100();
            v186 = (unsigned int *)operator new(8 * v191);
            v187 = &v186[2 * v191];
            v188 = 0x3F7FBE770000003ALL;
          }
          *(_QWORD *)v186 = v188;
          *v491 = v186;
          v182 = v186 + 2;
          *v169 = v186 + 2;
          *v171 = v187;
          if (v168)
            operator delete(v168);
          goto LABEL_87;
        }
        v149 = *v491;
        v150 = (unsigned int *)v64[3 * v63 + 1];
        while (2)
        {
          if (v149 == v150)
            goto LABEL_28;
          v153 = *v149;
          if ((int)*v149 > 12288)
          {
            v151 = (v153 - 12289) < 2 || v153 == 20022;
            if (!v151)
              goto LABEL_41;
          }
          else if (v153 != 44 && v153 != 46)
          {
            goto LABEL_41;
          }
          v152 = *((float *)v149 + 1) * 0.1;
          *((float *)v149 + 1) = v152;
LABEL_41:
          v149 += 2;
          continue;
        }
      }
LABEL_351:
      v464 = (char *)__p;
      a1 = v500;
      if (__p)
      {
        v465 = v508;
        v28 = __p;
        if (v508 != __p)
        {
          v466 = v508;
          do
          {
            v468 = (void *)*((_QWORD *)v466 - 3);
            v466 -= 24;
            v467 = v468;
            if (v468)
            {
              *((_QWORD *)v465 - 2) = v467;
              operator delete(v467);
            }
            v465 = v466;
          }
          while (v466 != v464);
          v28 = __p;
        }
        v508 = v464;
        operator delete(v28);
      }
      v25 = v483 + v474;

      v26 = v475 + 1;
    }
    while (v475 + 1 != v471);
  }

  return v25;
}

void sub_1BE65424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,void *a58)
{
  void *v58;
  void *v59;

  sub_1BE62033C((uint64_t)&a55, (_QWORD *)a56);
  sub_1BE63CEBC(&a58);

  _Unwind_Resume(a1);
}

double sub_1BE6544CC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  int v38;
  int v39;
  char *v40;
  _BYTE *v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _DWORD *v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  double result;
  void **v60;
  id obj;
  __int128 v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *__p[2];
  _BYTE *v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = *(void **)(*(_QWORD *)(a2 + 224) + 48);
  if (!v8
    || (objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], (const char *)a2, a3, a4, a5, a6),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v8, v11, (uint64_t)v10, v12, v13, v14),
        v15 = (void *)objc_claimAutoreleasedReturnValue(),
        v15,
        v10,
        !v15))
  {
    i2sh(a3, (uint64_t)__p);
    result = *(double *)__p;
    *(_OWORD *)a1 = *(_OWORD *)__p;
    a1[2] = v69;
    return result;
  }
  __p[0] = 0;
  __p[1] = 0;
  v69 = 0;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v20 = *(void **)(*(_QWORD *)(a2 + 224) + 48);
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v16, a3, v17, v18, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v20, v22, (uint64_t)v21, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = a1;

  v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v64, (uint64_t)v70, 16, v28);
  if (!v34)
    goto LABEL_31;
  v35 = *(_QWORD *)v65;
  obj = v26;
  do
  {
    for (i = 0; i != v34; ++i)
    {
      if (*(_QWORD *)v65 != v35)
        objc_enumerationMutation(obj);
      v38 = objc_msgSend_unsignedIntValue(*(void **)(*((_QWORD *)&v64 + 1) + 8 * i), v29, v30, v31, v32, v33);
      v39 = v38;
      v40 = (char *)__p[1];
      if (__p[1] < v69)
      {
        *(_DWORD *)__p[1] = v38;
        v37 = v40 + 4;
        goto LABEL_7;
      }
      v41 = __p[0];
      v42 = (char *)__p[1] - (char *)__p[0];
      v43 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62)
        sub_1BE61F930();
      v45 = v69 - (char *)__p[0];
      if ((v69 - (char *)__p[0]) >> 1 > v44)
        v44 = v45 >> 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
        v46 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        if (v46 >> 62)
          sub_1BE61F100();
        v47 = operator new(4 * v46);
        v48 = &v47[4 * v43];
        *v48 = v39;
        v37 = v48 + 1;
        v49 = v40 - v41;
        if (v40 == v41)
          goto LABEL_28;
LABEL_22:
        v50 = v49 - 4;
        if (v50 < 0x2C)
          goto LABEL_41;
        if ((unint64_t)(v40 - v47 - v42) < 0x20)
          goto LABEL_41;
        v51 = (v50 >> 2) + 1;
        v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        v53 = &v40[-v52];
        v48 = (_DWORD *)((char *)v48 - v52);
        v54 = &v47[4 * v43 - 16];
        v55 = v40 - 16;
        v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        v40 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_41:
          do
          {
            v58 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *--v48 = v58;
          }
          while (v40 != v41);
        }
        goto LABEL_28;
      }
      v47 = 0;
      v48 = (_DWORD *)(4 * v43);
      *(_DWORD *)(4 * v43) = v39;
      v37 = (void *)(4 * v43 + 4);
      v49 = v40 - v41;
      if (v40 != v41)
        goto LABEL_22;
LABEL_28:
      __p[0] = v48;
      __p[1] = v37;
      v69 = &v47[4 * v46];
      if (v41)
        operator delete(v41);
LABEL_7:
      __p[1] = v37;
    }
    v26 = obj;
    v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v29, (uint64_t)&v64, (uint64_t)v70, 16, v33);
  }
  while (v34);
LABEL_31:

  sub_1BE7DD028((uint64_t)__p, 0, (uint64_t)&v62);
  if (*((char *)v60 + 23) < 0)
    operator delete(*v60);
  result = *(double *)&v62;
  *(_OWORD *)v60 = v62;
  v60[2] = v63;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return result;
}

void sub_1BE65480C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (*(char *)(v25 + 23) < 0)
  {
    operator delete(*(void **)v25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operator==(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(double *)(a1 + 8) == *(double *)(a2 + 8))
    return objc_msgSend_isEqual_(*(void **)a1, (const char *)a2, *(_QWORD *)a2, a4, a5, a6);
  else
    return 0;
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) < *(double *)(a2 + 104);
}

void sub_1BE654BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE654BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE654C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE654E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE656730(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1BE6715BC(*(char **)(v1 + 504));
  v5 = *(_QWORD *)(v1 + 544);
  if (v5)
  {
    v6 = v5 - 16;
    v7 = *(_QWORD *)(v5 - 8);
    if (v7)
    {
      v8 = 24 * v7;
      do
      {

        v8 -= 24;
      }
      while (v8);
    }
    MEMORY[0x1C3B812C8](v6, 0x1080C801842DC26);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1BE656ABC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t *v9;
  BOOL v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char isEqual;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  double *v35;

  v9 = (unint64_t *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 1))
    v10 = v8 - 1 > 0xFFFFFFFFFFFFFFFDLL;
  else
    v10 = 1;
  if (!v10)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = *(_QWORD *)(a1 + 24) + v12;
      if (*(double *)(v14 + 24) == a4)
      {
        v15 = *(id *)(v14 + 32);
        v20 = v15;
        if (*(double *)(v14 + 40) == *(double *)&a3)
        {
          isEqual = objc_msgSend_isEqual_(v15, v16, (uint64_t)a2, v17, v18, v19);

          if ((isEqual & 1) != 0)
            goto LABEL_26;
        }
        else
        {

        }
      }
      ++v13;
      v8 = *v9;
      v12 += 24;
    }
    while (v13 < *v9 + 1);
  }
  if (v8 == *(_QWORD *)(a1 + 8))
  {
    v9 = (unint64_t *)(a1 + 32);
    v11 = *(double *)(*(_QWORD *)(a1 + 24) + 24 * *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)a1)
    {
      if (v11 <= a4)
        goto LABEL_26;
    }
    else if (v11 >= a4)
    {
LABEL_26:
      v34 = 0;
      goto LABEL_32;
    }
    v25 = a2;
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v22 = a2;
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 16) = v24;
  }
  v26 = v23 + 24 * v24;
  *(double *)v26 = a4;
  v27 = *(void **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = a2;
  v28 = a2;

  *(double *)(v26 + 16) = *(double *)&a3;
  sub_1BE67161C(a1, *v9);
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 32) = v29;
  if (v29)
  {
    v30 = v29 >> 1;
    v31 = v29 - 1;
    if (v29 - 1 > v29 >> 1)
    {
      v32 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)a1)
      {
        v33 = (double *)(v32 + 24 * v29 - 24);
        do
        {
          if (*v33 > *(double *)(v32 + 24 * v29))
          {
            *(_QWORD *)(a1 + 32) = v31;
            v29 = v31;
          }
          --v31;
          v33 -= 3;
        }
        while (v31 > v30);
      }
      else
      {
        v35 = (double *)(v32 + 24 * v29 - 24);
        do
        {
          if (*v35 < *(double *)(v32 + 24 * v29))
          {
            *(_QWORD *)(a1 + 32) = v31;
            v29 = v31;
          }
          --v31;
          v35 -= 3;
        }
        while (v31 > v30);
      }
    }
  }
  v34 = 1;
LABEL_32:

  return v34;
}

void sub_1BE656CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE656CF0(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE656EC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE656ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE656F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE656F58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 48);
  objc_msgSend_segments(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);
  v16 = (unint64_t)&a2[v8];

  if (v16 >= v15)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v22 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      v28 = *(_QWORD *)(a1 + 48);
      objc_msgSend_segments(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = 134218752;
      v53 = v16;
      v54 = 2048;
      v55 = a2;
      v56 = 2048;
      v57 = v28;
      v58 = 2048;
      v59 = objc_msgSend_count(v29, v30, v31, v32, v33, v34);
      _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_FAULT, "Incorrect index in segment decoding: index %ld (idx %ld + offset %ld) should be smaller than %ld, the number of segments on the group.", (uint8_t *)&v52, 0x2Au);

    }
  }
  objc_msgSend_segments(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndex_(v35, v36, v16, v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
  {
    v46 = *(void **)(a1 + 40);
    objc_msgSend_strokeIndexSet(v40, v41, v42, v43, v44, v45);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v46, v48, (uint64_t)v47, v49, v50, v51);

  }
}

void sub_1BE6570F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE657108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE657118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE657508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE659E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57)
{
  void *v57;
  void *v58;

  if (__p)
    operator delete(__p);
  if (a57)
    operator delete(a57);

  _Unwind_Resume(a1);
}

const void **sub_1BE65A5FC(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

id sub_1BE65A62C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  objc_msgSend_activations(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterObservations(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v13, v14, (uint64_t)a2, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

void sub_1BE65A688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE65A69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ***sub_1BE65A6AC(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (char *)*(v5 - 5);
        v5 -= 5;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 4);
          v6 = v7;
          if (v9 != v7)
          {
            v10 = (char *)*(v3 - 4);
            do
            {
              v12 = (void *)*((_QWORD *)v10 - 8);
              v10 -= 64;
              v11 = v12;
              if (v12)
              {
                *((_QWORD *)v9 - 7) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v7);
            v6 = *v5;
          }
          *(v3 - 4) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **sub_1BE65A760(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_1BE65A790(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1BE65AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Unwind_Resume(a1);
}

id sub_1BE65AD20(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int shouldRunNextGenRecognizer;
  NSObject *v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  NSObject *v22;
  unint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_signpost_id_t v37;
  NSObject *v38;
  NSObject *v39;
  unint64_t v40;
  NSObject *v41;
  void *v42;
  CHResultWithContext *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CHDrawingSegmentGroup *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  NSObject *v129;
  NSObject *v130;
  NSObject *v131;
  os_signpost_id_t v132;
  NSObject *v133;
  NSObject *v134;
  unint64_t v135;
  NSObject *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  NSObject *v149;
  unint64_t v150;
  os_signpost_id_t spid;
  id v152;
  id v153;
  id v154;
  uint8_t buf[8];
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v154 = a3;
  v153 = a4;
  if (!a1)
  {
    v28 = 0;
    goto LABEL_77;
  }
  v152 = *(id *)(a1 + 16);
  objc_msgSend_recordInputDrawing_(v152, v8, (uint64_t)v7, v9, v10, v11);
  shouldRunNextGenRecognizer = objc_msgSend_shouldRunNextGenRecognizer(*(void **)(a1 + 456), v12, v13, v14, v15, v16);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v18 = (id)qword_1EF568E20;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = shouldRunNextGenRecognizer;
    _os_log_impl(&dword_1BE607000, v18, OS_LOG_TYPE_DEBUG, "CHRecognizer is running RNN recognition pipeline: %d", buf, 8u);
  }

  if (shouldRunNextGenRecognizer)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v19 = (id)qword_1EF568E50;
    v20 = os_signpost_id_generate(v19);

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v21 = (id)qword_1EF568E50;
    v22 = v21;
    v23 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE607000, v22, OS_SIGNPOST_INTERVAL_BEGIN, v20, "CHRecognizerNextGenRecognition", "", buf, 2u);
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v24 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerNextGenRecognition\"", buf, 2u);
    }

    objc_msgSend__resultUsingNextGenerationPipelineWithDrawing_options_((void *)a1, v25, (uint64_t)v7, (uint64_t)v154, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (qword_1EF568E88 == -1)
    {
      v29 = (id)qword_1EF568E50;
      if (v23 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_22;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v29 = (id)qword_1EF568E50;
      if (v23 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_22;
    }
    if (os_signpost_enabled(v29))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE607000, v29, OS_SIGNPOST_INTERVAL_END, v20, "CHRecognizerNextGenRecognition", "", buf, 2u);
    }
LABEL_22:

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v30 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerNextGenRecognition\"", buf, 2u);
    }

    if (!*(_QWORD *)(a1 + 440) || !v28)
      goto LABEL_48;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v36 = (id)qword_1EF568E50;
    v37 = os_signpost_id_generate(v36);

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v38 = (id)qword_1EF568E50;
    v39 = v38;
    v40 = v37 - 1;
    if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE607000, v39, OS_SIGNPOST_INTERVAL_BEGIN, v37, "CHRecognizerPostProcessingBlock", "", buf, 2u);
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v41 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v41, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerPostProcessingBlock\"", buf, 2u);
    }

    sub_1BE65280C(a1, v154);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = [CHResultWithContext alloc];
    v49 = objc_msgSend_contentType(*(void **)(a1 + 456), v44, v45, v46, v47, v48);
    v52 = (void *)objc_msgSend_initWithResult_leftContext_contentType_(v43, v50, (uint64_t)v28, (uint64_t)v42, v49, v51);
    objc_msgSend_process_options_(*(void **)(a1 + 440), v53, (uint64_t)v52, (uint64_t)v154, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_result(v56, v57, v58, v59, v60, v61);
    v62 = objc_claimAutoreleasedReturnValue();

    if (qword_1EF568E88 == -1)
    {
      v63 = (id)qword_1EF568E50;
      if (v40 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_41;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v63 = (id)qword_1EF568E50;
      if (v40 <= 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_41:
        if (os_signpost_enabled(v63))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1BE607000, v63, OS_SIGNPOST_INTERVAL_END, v37, "CHRecognizerPostProcessingBlock", "", buf, 2u);
        }
      }
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v64 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v64, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerPostProcessingBlock\"", buf, 2u);
    }

    v28 = (void *)v62;
LABEL_48:
    objc_msgSend_lastTokenStrokeIndexes(v28, v31, v32, v33, v34, v35);
    v65 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a1 + 400) = objc_msgSend_count(v65, v66, v67, v68, v69, v70);
    objc_msgSend_removeAllIndexes(*(void **)(a1 + 408), v71, v72, v73, v74, v75);
    objc_msgSend_addIndexes_(*(void **)(a1 + 408), v76, (uint64_t)v65, v77, v78, v79);
    goto LABEL_87;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v80 = (id)qword_1EF568E50;
  spid = os_signpost_id_generate(v80);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v81 = (id)qword_1EF568E50;
  v82 = v81;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v82, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHRecognizerSegmentAndDecodeBlock", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v83 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v83, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerSegmentAndDecodeBlock\"", buf, 2u);
  }

  v84 = v7;
  v85 = v154;
  v86 = v153;
  v87 = (void *)objc_opt_class();
  objc_msgSend_generateSegmentsFromDrawing_(v87, v88, (uint64_t)v84, v89, v90, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 400) = 0;
  objc_msgSend_removeAllIndexes(*(void **)(a1 + 408), v93, v94, v95, v96, v97);
  v98 = [CHDrawingSegmentGroup alloc];
  v102 = (void *)objc_msgSend_initWithSegmentGroupIndex_segments_(v98, v99, 0, (uint64_t)v92, v100, v101);
  sub_1BE64EF64(a1, v84, v102, v85, v86);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = objc_msgSend_strokeCount(v84, v103, v104, v105, v106, v107) - *(_QWORD *)(a1 + 400);
  if (v113 < 0)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v114 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v114, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v114, OS_LOG_TYPE_FAULT, "The first stroke index must be non-negative", buf, 2u);
    }

  }
  v115 = objc_msgSend_supportedSegmentationStrategy(*(void **)(a1 + 456), v108, v109, v110, v111, v112, spid - 1);
  if (v115)
  {
    if (v115 == 1)
    {
      v121 = *(void **)(a1 + 408);
      v122 = objc_msgSend_strokeCount(v84, v116, v117, v118, v119, v120);
      objc_msgSend_addIndexesInRange_(v121, v123, 0, v122, v124, v125);
    }
  }
  else
  {
    if (!v84)
    {
      v126 = 0;
      v127 = 0;
      *(_QWORD *)buf = 0;
      v156 = 0;
      v157 = 0;
      goto LABEL_112;
    }
    objc_msgSend_strokeIndicesSortedByMinXCoordinate(v84, v116, v117, v118, v119, v120);
    while (1)
    {
      v126 = *(_QWORD **)buf;
      v127 = v156;
LABEL_112:
      if (v113 >= (unint64_t)(v127 - v126))
        break;
      objc_msgSend_addIndex_(*(void **)(a1 + 408), v116, v126[v113++], v118, v119, v120);
    }
    if (v126)
    {
      v156 = v126;
      operator delete(v126);
    }
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v129 = (id)qword_1EF568E50;
  v130 = v129;
  if (v150 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v129))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v130, OS_SIGNPOST_INTERVAL_END, spid, "CHRecognizerSegmentAndDecodeBlock", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v65 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v65, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerSegmentAndDecodeBlock\"", buf, 2u);
  }
LABEL_87:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v131 = (id)qword_1EF568E50;
  v132 = os_signpost_id_generate(v131);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v133 = (id)qword_1EF568E50;
  v134 = v133;
  v135 = v132 - 1;
  if (v132 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v133))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v134, OS_SIGNPOST_INTERVAL_BEGIN, v132, "CHRecognizerFilterLowProbabilityBlock", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v136 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v136, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognizerFilterLowProbabilityBlock\"", buf, 2u);
  }

  if (objc_msgSend_shouldFilterLowProbabilityTranscriptionPaths(*(void **)(a1 + 456), v137, v138, v139, v140, v141))
  {
    objc_msgSend_tokenizedResultWithFilteredPaths_(v28, v142, v143, v144, v145, v146, 0.5);
    v147 = objc_claimAutoreleasedReturnValue();

    v28 = (void *)v147;
  }
  if (qword_1EF568E88 == -1)
  {
    v148 = (id)qword_1EF568E50;
    if (v135 <= 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_102;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v148 = (id)qword_1EF568E50;
    if (v135 <= 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_102:
      if (os_signpost_enabled(v148))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1BE607000, v148, OS_SIGNPOST_INTERVAL_END, v132, "CHRecognizerFilterLowProbabilityBlock", "", buf, 2u);
      }
    }
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v149 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v149, OS_LOG_TYPE_DEFAULT, "END \"CHRecognizerFilterLowProbabilityBlock\"", buf, 2u);
  }

LABEL_77:
  return v28;
}

void sub_1BE65BA90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (__p)
    operator delete(__p);

  JUMPOUT(0x1BE65BA30);
}

void sub_1BE65BBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE65BBFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE65BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_1BE65BE70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 3)
  {
    objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    *a7 = 1;
  }
}

void sub_1BE65C0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BE65C13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE65C158(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  CHTokenizedTextResultToken *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  CHTokenizedResultColumn *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  CHTokenizedTextResult *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  uint64_t isMinimalDrawingResult_baseWritingDirection;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  id obj;
  void **v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  id v149;
  void *v150;
  void *v151;
  _BYTE v152[128];
  uint64_t v153;

  v6 = a1;
  v153 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_pointCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v13 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    objc_msgSend_removeAllIndexes(*(void **)(v13 + 408), v8, v9, v10, v11, v12);
    return;
  }
  v14 = *(id *)(v6 + 32);
  v20 = v14;
  if (!v13)
  {

LABEL_21:
    sub_1BE65AD20(*(_QWORD *)(v6 + 40), *(void **)(v6 + 32), *(void **)(v6 + 56), *(void **)(v6 + 64));
    v133 = objc_claimAutoreleasedReturnValue();
    v134 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8);
    v135 = *(void **)(v134 + 40);
    *(_QWORD *)(v134 + 40) = v133;

    return;
  }
  objc_msgSend_bounds(v14, v15, v16, v17, v18, v19);
  v28 = v27 < *(double *)(v13 + 496) && v26 < *(double *)(v13 + 504);
  if (objc_msgSend_strokeCount(v20, v21, v22, v23, v24, v25) != 1)
    v28 = 0;

  if (!v28)
    goto LABEL_21;
  v34 = *(void ***)(v6 + 40);
  v140 = objc_msgSend_strokeCount(*(void **)(v6 + 32), v29, v30, v31, v32, v33);
  if (v34)
  {
    v149 = 0;
    v138 = v34;
    objc_msgSend__defaultPunctuationStringsOutputScores_maxCandidateCount_(v34, v35, (uint64_t)&v149, -1, v36, v37);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v144 = v149;
    v38 = (void *)MEMORY[0x1E0C99DE8];
    v44 = objc_msgSend_count(v136, v39, v40, v41, v42, v43);
    objc_msgSend_arrayWithCapacity_(v38, v45, v44, v46, v47, v48);
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v49, 0, v140, v50, v51);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v52, v53, v54, v55, v56);
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v57, v58, v59, v60, v61);
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    obj = v136;
    v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v62, (uint64_t)&v145, (uint64_t)v152, 16, v63);
    if (v68)
    {
      v69 = 0;
      v70 = *(_QWORD *)v146;
      v71 = (double *)MEMORY[0x1E0C9D628];
      do
      {
        v72 = 0;
        do
        {
          if (*(_QWORD *)v146 != v70)
            objc_enumerationMutation(obj);
          v73 = *(_QWORD *)(*((_QWORD *)&v145 + 1) + 8 * v72);
          objc_msgSend_objectAtIndex_(v144, v64, v69 + v72, v65, v66, v67);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_doubleValue(v74, v75, v76, v77, v78, v79);
          v81 = v80;

          v82 = v6;
          v83 = [CHTokenizedTextResultToken alloc];
          objc_msgSend_locale(v138[57], v84, v85, v86, v87, v88);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v83, v90, v73, (uint64_t)v139, 0, 8, v89, 4, v81, v81, v81, 1.0, *v71, v71[1], v71[2], v71[3], v140);

          v6 = v82;
          v151 = v91;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v92, (uint64_t)&v151, 1, v93, v94);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v143, v96, (uint64_t)v95, v97, v98, v99);

          objc_msgSend_indexPathWithIndex_(MEMORY[0x1E0CB36B0], v100, v69 + v72, v101, v102, v103);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v142, v105, (uint64_t)v104, v106, v107, v108);

          objc_msgSend_objectAtIndex_(v144, v109, v69 + v72, v110, v111, v112);
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v141, v114, (uint64_t)v113, v115, v116, v117);

          ++v72;
        }
        while (v68 != v72);
        v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v64, (uint64_t)&v145, (uint64_t)v152, 16, v67);
        v69 += v72;
      }
      while (v68);
    }

    v118 = [CHTokenizedResultColumn alloc];
    v123 = (void *)objc_msgSend_initWithTokenRows_(v118, v119, (uint64_t)v143, v120, v121, v122);
    v124 = [CHTokenizedTextResult alloc];
    v150 = v123;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v125, (uint64_t)&v150, 1, v126, v127);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    isMinimalDrawingResult_baseWritingDirection = objc_msgSend_initWithTokenColumns_transcriptionPaths_scores_recognizerGenerationIdentifier_isMinimalDrawingResult_baseWritingDirection_(v124, v129, (uint64_t)v128, (uint64_t)v142, (uint64_t)v141, 1, 1, 0);

  }
  else
  {
    isMinimalDrawingResult_baseWritingDirection = 0;
  }
  v131 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8);
  v132 = *(void **)(v131 + 40);
  *(_QWORD *)(v131 + 40) = isMinimalDrawingResult_baseWritingDirection;

}

void sub_1BE65C5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE65C82C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE65C844(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  void *v71;
  void *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  CHTextRecognitionResult *v136;
  const char *v137;
  void *isTextReplacement;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_signpost_id_t v172;
  NSObject *v173;
  unint64_t v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  NSObject *v179;
  NSObject *v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  id obj;
  uint64_t v195;
  void *v196;
  void *v197;
  void *v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  id v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  uint8_t buf[136];
  _QWORD v214[3];

  v214[1] = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_pointCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v13 = *(_QWORD *)(a1 + 40);
  if (!v7)
  {
    objc_msgSend_removeAllIndexes(*(void **)(v13 + 408), v8, v9, v10, v11, v12);
    return;
  }
  v14 = *(id *)(a1 + 32);
  v20 = v14;
  if (!v13)
  {

LABEL_21:
    switch(objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 40) + 456), v29, v30, v31, v32, v33))
    {
      case 1u:
        v165 = *(void **)(a1 + 48);
        if (v165)
        {
          objc_msgSend_objectForKeyedSubscript_(v165, v158, (uint64_t)CHRecognitionOptionDrawingAnchorPoint[0], v159, v160, v161);
          v166 = (void *)objc_claimAutoreleasedReturnValue();

          if (v166)
            goto LABEL_22;
          objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99E08], v167, *(_QWORD *)(a1 + 48), v168, v169, v170);
        }
        else
        {
          objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99E08], v158, 0, v159, v160, v161);
        }
        v181 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_valueWithPoint_(MEMORY[0x1E0CB3B18], v182, v183, v184, v185, v186, 0.0, -8.0);
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v181, v188, (uint64_t)v187, (uint64_t)CHRecognitionOptionDrawingAnchorPoint[0], v189, v190);

        goto LABEL_22;
      case 2u:
      case 4u:
      case 5u:
      case 6u:
LABEL_22:
        sub_1BE65D244(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
        v162 = objc_claimAutoreleasedReturnValue();
        v163 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v164 = *(void **)(v163 + 40);
        *(_QWORD *)(v163 + 40) = v162;

        return;
      case 3u:
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v171 = (id)qword_1EF568E50;
        v172 = os_signpost_id_generate(v171);

        if (qword_1EF568E88 == -1)
        {
          v173 = (id)qword_1EF568E50;
          v174 = v172 - 1;
          if (v172 - 1 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_32;
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v173 = (id)qword_1EF568E50;
          v174 = v172 - 1;
          if (v172 - 1 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_32;
        }
        if (os_signpost_enabled(v173))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1BE607000, v173, OS_SIGNPOST_INTERVAL_BEGIN, v172, "CHSketchRecognition", "", buf, 2u);
        }
LABEL_32:

        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v175 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v175, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHSketchRecognition\"", buf, 2u);
        }

        sub_1BE6450E4(*(void **)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48));
        v176 = objc_claimAutoreleasedReturnValue();
        v177 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v178 = *(void **)(v177 + 40);
        *(_QWORD *)(v177 + 40) = v176;

        if (qword_1EF568E88 == -1)
        {
          v179 = (id)qword_1EF568E50;
          if (v174 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_40;
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v179 = (id)qword_1EF568E50;
          if (v174 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_40;
        }
        if (os_signpost_enabled(v179))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1BE607000, v179, OS_SIGNPOST_INTERVAL_END, v172, "CHSketchRecognition", "", buf, 2u);
        }
LABEL_40:

        if (qword_1EF568E88 == -1)
        {
          v180 = (id)qword_1EF568E18[0];
          if (!os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
            goto LABEL_43;
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v180 = (id)qword_1EF568E18[0];
          if (!os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
          {
LABEL_43:

            return;
          }
        }
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v180, OS_LOG_TYPE_DEFAULT, "END \"CHSketchRecognition\"", buf, 2u);
        goto LABEL_43;
      default:
        return;
    }
  }
  objc_msgSend_bounds(v14, v15, v16, v17, v18, v19);
  v28 = v27 < *(double *)(v13 + 496) && v26 < *(double *)(v13 + 504);
  if (objc_msgSend_strokeCount(v20, v21, v22, v23, v24, v25) != 1)
    v28 = 0;

  if (!v28)
    goto LABEL_21;
  v34 = *(void **)(a1 + 40);
  v192 = a1;
  v35 = objc_msgSend_strokeCount(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  if (v34)
  {
    v39 = v35;
    v206 = 0;
    objc_msgSend__defaultPunctuationStringsOutputScores_maxCandidateCount_(v34, v36, (uint64_t)&v206, -1, v37, v38);
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    v199 = v206;
    v40 = (void *)MEMORY[0x1E0C99DE8];
    v46 = objc_msgSend_count(v193, v41, v42, v43, v44, v45);
    objc_msgSend_arrayWithCapacity_(v40, v47, v46, v48, v49, v50);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v51, 0, v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v214[0] = v55;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v56, (uint64_t)v214, 1, v57, v58);
    v197 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v59, 0, v39, v60, v61);
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    v203 = 0u;
    obj = v193;
    v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v62, (uint64_t)&v202, (uint64_t)buf, 16, v63);
    if (v64)
    {
      v201 = 0;
      v195 = *(_QWORD *)v203;
      do
      {
        v200 = v64;
        for (i = 0; i != v200; ++i)
        {
          if (*(_QWORD *)v203 != v195)
            objc_enumerationMutation(obj);
          v71 = *(void **)(*((_QWORD *)&v202 + 1) + 8 * i);
          v72 = (void *)MEMORY[0x1E0CB3B18];
          v73 = objc_msgSend_length(v71, v65, v66, v67, v68, v69);
          objc_msgSend_valueWithRange_(v72, v74, 0, v73, v75, v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          v212 = v77;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v78, (uint64_t)&v212, 1, v79, v80);
          v81 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_objectAtIndex_(v199, v82, v201 + i, v83, v84, v85);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_doubleValue(v86, v87, v88, v89, v90, v91);
          v93 = v92;

          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v94, v95, v96, v97, v98, v93);
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          v211 = v99;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v100, (uint64_t)&v211, 1, v101, v102);
          v103 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v104, v105, v106, v107, v108, v93);
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          v210 = v109;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v110, (uint64_t)&v210, 1, v111, v112);
          v113 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v114, 0, v115, v116, v117);
          v118 = (void *)objc_claimAutoreleasedReturnValue();
          v209 = v118;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v119, (uint64_t)&v209, 1, v120, v121);
          v122 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v123, 1, v124, v125, v126);
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          v208 = v127;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v128, (uint64_t)&v208, 1, v129, v130);
          v131 = (void *)objc_claimAutoreleasedReturnValue();

          v207 = v198;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v132, (uint64_t)&v207, 1, v133, v134);
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          v136 = [CHTextRecognitionResult alloc];
          LOBYTE(v191) = 0;
          isTextReplacement = (void *)objc_msgSend_initWithString_score_wordRanges_wordIDs_wordRecognitionScores_wordCombinedScores_wordStrokeSets_wordLexicalEntries_wordPatternEntries_rareWordIndexes_inappropriateWordIndexes_isTextReplacement_(v136, v137, (uint64_t)v71, (uint64_t)v81, (uint64_t)v197, (uint64_t)v103, v113, v135, v93, v122, v131, 0, 0, v191);
          objc_msgSend_addObject_(v196, v139, (uint64_t)isTextReplacement, v140, v141, v142);

        }
        v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v65, (uint64_t)&v202, (uint64_t)buf, 16, v69);
        v201 += i;
      }
      while (v64);
    }

  }
  else
  {
    v196 = 0;
  }
  v143 = *(_QWORD *)(*(_QWORD *)(v192 + 64) + 8);
  v144 = *(void **)(v143 + 40);
  *(_QWORD *)(v143 + 40) = v196;

  *(_QWORD *)(*(_QWORD *)(v192 + 40) + 400) = objc_msgSend_strokeCount(*(void **)(v192 + 32), v145, v146, v147, v148, v149);
  objc_msgSend_removeAllIndexes(*(void **)(*(_QWORD *)(v192 + 40) + 408), v150, v151, v152, v153, v154);
  objc_msgSend_addIndexesInRange_(*(void **)(*(_QWORD *)(v192 + 40) + 408), v155, 0, *(_QWORD *)(*(_QWORD *)(v192 + 40) + 400), v156, v157);
}

void sub_1BE65D0D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE65D0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE65D0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

id sub_1BE65D244(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    sub_1BE65AD20(a1, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_textRecognitionResultArrayGivenHistory_(v13, v14, (uint64_t)&stru_1E77F6F28, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_1BE65D310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE65D32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE65D370(void *a1, unsigned int **a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  int8x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  float *v42;
  double v43;
  unsigned int *v44;
  unsigned int *v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  float v53;
  char *v54;
  float *v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  float *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  float *v72;
  uint64_t v73;
  __int128 v74;
  void *v75;
  unint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  int64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  void *v100;
  unsigned int **v101;
  void *v102[2];
  void *v103[2];
  int v104;
  void *__p;
  _QWORD *v106;
  float *v107;
  void *v108[2];
  void *v109[2];
  int i;

  v10 = *a3;
  v9 = a3[1];
  *(_OWORD *)v108 = 0u;
  *(_OWORD *)v109 = 0u;
  for (i = 1065353216; v10 != v9; ++v10)
    sub_1BE6719D8((uint64_t)v108, v10, v10);
  v100 = a1;
  v101 = a2;
  __p = 0;
  v106 = 0;
  v107 = 0;
  *(_OWORD *)v102 = 0u;
  *(_OWORD *)v103 = 0u;
  v104 = 1065353216;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 == v12 || (v13 = (int8x8_t)v108[1], !v108[1]))
  {
    v42 = 0;
    v43 = 1.0;
    v45 = *a3;
    v44 = a3[1];
    if (v45 == v44)
      goto LABEL_106;
    while (1)
    {
LABEL_57:
      v46 = *v45;
      if (v102[1])
      {
        v47 = (uint8x8_t)vcnt_s8((int8x8_t)v102[1]);
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.u32[0] > 1uLL)
        {
          v48 = *v45;
          if (v102[1] <= (void *)v46)
            v48 = v46 % (unint64_t)v102[1];
        }
        else
        {
          v48 = (LODWORD(v102[1]) - 1) & v46;
        }
        v49 = (uint64_t **)*((_QWORD *)v102[0] + v48);
        if (v49)
        {
          v50 = *v49;
          if (v50)
          {
            if (v47.u32[0] < 2uLL)
            {
              while (1)
              {
                v52 = v50[1];
                if (v52 == v46)
                {
                  if (*((_DWORD *)v50 + 4) == (_DWORD)v46)
                    goto LABEL_94;
                }
                else if ((v52 & ((unint64_t)v102[1] - 1)) != v48)
                {
                  goto LABEL_77;
                }
                v50 = (uint64_t *)*v50;
                if (!v50)
                  goto LABEL_77;
              }
            }
            do
            {
              v51 = v50[1];
              if (v51 == v46)
              {
                if (*((_DWORD *)v50 + 4) == (_DWORD)v46)
                  goto LABEL_94;
              }
              else
              {
                if ((void *)v51 >= v102[1])
                  v51 %= (unint64_t)v102[1];
                if (v51 != v48)
                  break;
              }
              v50 = (uint64_t *)*v50;
            }
            while (v50);
          }
        }
      }
LABEL_77:
      v53 = v43;
      if (v42 < v107)
      {
        *(_DWORD *)v42 = v46;
        v42[1] = v53;
        v54 = (char *)(v42 + 2);
        goto LABEL_93;
      }
      v55 = (float *)__p;
      v56 = (char *)v42 - (_BYTE *)__p;
      v57 = ((char *)v42 - (_BYTE *)__p) >> 3;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61)
        sub_1BE61F930();
      v59 = (char *)v107 - (_BYTE *)__p;
      if (((char *)v107 - (_BYTE *)__p) >> 2 > v58)
        v58 = v59 >> 2;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 >> 61)
          sub_1BE61F100();
        v61 = operator new(8 * v60);
        v62 = &v61[8 * v57];
        *(_DWORD *)v62 = v46;
        *((float *)v62 + 1) = v53;
        v63 = (char *)v42 - (char *)v55;
        if (v42 != v55)
        {
LABEL_88:
          v64 = v63 - 8;
          if (v64 < 0x168
            || (v68 = ((char *)(v42 - 2) - (char *)v55) & 0xFFFFFFFFFFFFFFF8, &v61[v56 - 8 - v68] > &v61[v56 - 8])
            || (float *)((char *)v42 - v68 - 8) > v42 - 2
            || (unint64_t)((char *)v42 - v61 - v56) < 0x20)
          {
            v65 = v42;
            v66 = v62;
          }
          else
          {
            v69 = (v64 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v65 = &v42[v70 / 0xFFFFFFFFFFFFFFFCLL];
            v66 = &v62[-v70];
            v71 = &v61[8 * v57 - 16];
            v72 = v42 - 4;
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *(_OWORD *)v72;
              *(v71 - 1) = *((_OWORD *)v72 - 1);
              *v71 = v74;
              v71 -= 2;
              v72 -= 8;
              v73 -= 4;
            }
            while (v73);
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              v42 = (float *)__p;
              v54 = v62 + 8;
              __p = v66;
              v106 = v62 + 8;
              v107 = (float *)&v61[8 * v60];
              if (!v42)
                goto LABEL_93;
LABEL_92:
              operator delete(v42);
              goto LABEL_93;
            }
          }
          do
          {
            v67 = *((_QWORD *)v65 - 1);
            v65 -= 2;
            *((_QWORD *)v66 - 1) = v67;
            v66 -= 8;
          }
          while (v65 != v55);
          goto LABEL_91;
        }
      }
      else
      {
        v61 = 0;
        v62 = (char *)(8 * v57);
        *(_DWORD *)v62 = v46;
        *((float *)v62 + 1) = v53;
        v63 = (char *)v42 - (char *)v55;
        if (v42 != v55)
          goto LABEL_88;
      }
      v54 = v62 + 8;
      __p = v62;
      v106 = v62 + 8;
      v107 = (float *)&v61[8 * v60];
      if (v42)
        goto LABEL_92;
LABEL_93:
      v106 = v54;
      v43 = v43 * 0.9;
      v42 = (float *)v54;
LABEL_94:
      if (++v45 == v44)
        goto LABEL_106;
    }
  }
LABEL_5:
  v14 = *v11;
  v15 = (uint8x8_t)vcnt_s8(v13);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = *v11;
    if (*(_QWORD *)&v13 <= v14)
      v16 = v14 % *(_QWORD *)&v13;
  }
  else
  {
    v16 = (v13.i32[0] - 1) & v14;
  }
  v17 = (uint64_t **)*((_QWORD *)v108[0] + v16);
  if (v17)
  {
    v18 = *v17;
    if (v18)
    {
      if (v15.u32[0] < 2uLL)
      {
        v19 = *(_QWORD *)&v13 - 1;
        while (1)
        {
          v21 = v18[1];
          if (v21 == v14)
          {
            if (*((_DWORD *)v18 + 4) == (_DWORD)v14)
              goto LABEL_25;
          }
          else if ((v21 & v19) != v16)
          {
            goto LABEL_39;
          }
          v18 = (uint64_t *)*v18;
          if (!v18)
            goto LABEL_39;
        }
      }
      do
      {
        v20 = v18[1];
        if (v20 == v14)
        {
          if (*((_DWORD *)v18 + 4) == (_DWORD)v14)
          {
LABEL_25:
            v22 = v106;
            if (v106 < (_QWORD *)v107)
            {
              *v106 = *(_QWORD *)v11;
              v23 = (uint64_t)(v22 + 8);
LABEL_38:
              v106 = (_QWORD *)v23;
              sub_1BE6719D8((uint64_t)v102, v11, v11);
              break;
            }
            v24 = __p;
            v25 = (char *)v106 - (_BYTE *)__p;
            v26 = ((char *)v106 - (_BYTE *)__p) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              sub_1BE61F930();
            v28 = (char *)v107 - (_BYTE *)__p;
            if (((char *)v107 - (_BYTE *)__p) >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              if (v29 >> 61)
                sub_1BE61F100();
              v30 = operator new(8 * v29);
              v31 = &v30[8 * v26];
              *v31 = *(_QWORD *)v11;
              v23 = (uint64_t)(v31 + 1);
              v32 = v22 - v24;
              if (v22 == v24)
                goto LABEL_36;
LABEL_43:
              v33 = v32 - 8;
              if (v33 < 0x58)
                goto LABEL_147;
              if ((unint64_t)(v22 - v30 - v25) < 0x20)
                goto LABEL_147;
              v34 = (v33 >> 3) + 1;
              v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
              v36 = &v22[-v35];
              v31 = (_QWORD *)((char *)v31 - v35);
              v37 = &v30[8 * v26 - 16];
              v38 = (__int128 *)(v22 - 16);
              v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v40 = *v38;
                *(v37 - 1) = *(v38 - 1);
                *v37 = v40;
                v37 -= 2;
                v38 -= 2;
                v39 -= 4;
              }
              while (v39);
              v22 = v36;
              if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_147:
                do
                {
                  v41 = *((_QWORD *)v22 - 1);
                  v22 -= 8;
                  *--v31 = v41;
                }
                while (v22 != v24);
              }
              v22 = __p;
              __p = v31;
              v106 = (_QWORD *)v23;
              v107 = (float *)&v30[8 * v29];
              if (!v22)
                goto LABEL_38;
            }
            else
            {
              v30 = 0;
              v31 = (_QWORD *)(8 * v26);
              *(_QWORD *)(8 * v26) = *(_QWORD *)v11;
              v23 = 8 * v26 + 8;
              v32 = v22 - v24;
              if (v22 != v24)
                goto LABEL_43;
LABEL_36:
              __p = v31;
              v106 = (_QWORD *)v23;
              v107 = (float *)&v30[8 * v29];
              if (!v22)
                goto LABEL_38;
            }
            operator delete(v22);
            goto LABEL_38;
          }
        }
        else
        {
          if (v20 >= *(_QWORD *)&v13)
            v20 %= *(_QWORD *)&v13;
          if (v20 != v16)
            break;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18);
    }
  }
LABEL_39:
  while (1)
  {
    v11 += 2;
    if (v11 == v12)
      break;
    v13 = (int8x8_t)v108[1];
    if (v108[1])
      goto LABEL_5;
  }
  v42 = (float *)v106;
  if (v106 == __p)
  {
    v43 = 1.0;
    v45 = *a3;
    v44 = a3[1];
    if (v45 != v44)
      goto LABEL_57;
  }
  else
  {
    v43 = *((float *)v106 - 1);
    v45 = *a3;
    v44 = a3[1];
    if (v45 != v44)
      goto LABEL_57;
  }
LABEL_106:
  v75 = v100;
  v76 = objc_msgSend__effectiveMaxRecognitionResultCount(v100, (const char *)a2, (uint64_t)a3, a4, a5, a6, v100);
  v82 = (char *)__p;
  v83 = ((char *)v106 - (_BYTE *)__p) >> 3;
  if (v76 < v83)
  {
    v83 = objc_msgSend__effectiveMaxRecognitionResultCount(v75, v77, v78, v79, v80, v81);
    v82 = (char *)__p;
  }
  v84 = &v82[8 * v83];
  v85 = (uint64_t)v101[2];
  v86 = (char *)*v101;
  if (v83 <= (v85 - (uint64_t)*v101) >> 3)
  {
    v89 = (char *)v101[1];
    v90 = (v89 - v86) >> 3;
    if (v90 < v83)
    {
      v91 = &v82[8 * v90];
      if (v89 != v86)
      {
        memmove(v86, v82, 8 * v90);
        v86 = (char *)v101[1];
      }
      v92 = v84 - v91;
      if (v84 == v91)
      {
        v101[1] = (unsigned int *)&v86[v92];
        v93 = v103[0];
        if (!v103[0])
          goto LABEL_129;
      }
      else
      {
        memmove(v86, v91, v84 - v91);
        v101[1] = (unsigned int *)&v86[v92];
        v93 = v103[0];
        if (!v103[0])
          goto LABEL_129;
      }
      goto LABEL_128;
    }
  }
  else
  {
    if (v86)
    {
      v101[1] = (unsigned int *)v86;
      operator delete(v86);
      v85 = 0;
      *v101 = 0;
      v101[1] = 0;
      v101[2] = 0;
    }
    if (v83 >> 61)
      goto LABEL_142;
    v87 = v85 >> 2;
    if (v85 >> 2 <= v83)
      v87 = v83;
    v88 = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v87;
    if (v88 >> 61)
LABEL_142:
      sub_1BE61F930();
    v86 = (char *)operator new(8 * v88);
    *v101 = (unsigned int *)v86;
    v101[1] = (unsigned int *)v86;
    v101[2] = (unsigned int *)&v86[8 * v88];
  }
  v94 = 8 * v83;
  if (v84 != v82)
    memmove(v86, v82, v84 - v82);
  v101[1] = (unsigned int *)&v86[v94];
  v93 = v103[0];
  if (v103[0])
  {
    do
    {
LABEL_128:
      v95 = (_QWORD *)*v93;
      operator delete(v93);
      v93 = v95;
    }
    while (v95);
  }
LABEL_129:
  v96 = v102[0];
  v102[0] = 0;
  if (v96)
    operator delete(v96);
  if (__p)
  {
    v106 = __p;
    operator delete(__p);
  }
  v97 = v109[0];
  if (v109[0])
  {
    do
    {
      v98 = (_QWORD *)*v97;
      operator delete(v97);
      v97 = v98;
    }
    while (v98);
  }
  v99 = v108[0];
  v108[0] = 0;
  if (v99)
    operator delete(v99);
}

void sub_1BE65DB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  sub_1BE65DB88((uint64_t)&a11);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1BE65DB88((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1BE65DB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *__p)
{
  _QWORD *v22;
  _QWORD *v23;

  v22 = __p;
  if (__p)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE65DB88(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1BE65DBD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  double v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (a3 >= 1)
  {
    v4 = *a2;
    if (a2[1] != *a2)
    {
      v5 = a1;
      v6 = 0;
      v54 = a1;
      while (1)
      {
        v7 = *(unsigned int *)(v4 + 8 * v6);
        v12 = *(id *)(*(_QWORD *)(v5 + 224) + 48);
        if (!v12
          || (objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v8, v7, v9, v10, v11),
              v13 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend_objectForKeyedSubscript_(v12, v14, (uint64_t)v13, v15, v16, v17),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v19 = v18 == 0,
              v18,
              v13,
              v19))
        {
          v28 = objc_msgSend_expectedMaxDotCount_(CHCharacterSetRules, v8, v7, v9, v10, v11, v54);
        }
        else
        {
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v8, v7, v9, v10, v11);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v12, v21, (uint64_t)v20, v22, v23, v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          v28 = 0;
          v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v56, (uint64_t)v60, 16, v27);
          if (v34)
          {
            v35 = *(_QWORD *)v57;
            do
            {
              v36 = 0;
              do
              {
                if (*(_QWORD *)v57 != v35)
                  objc_enumerationMutation(v25);
                v37 = objc_msgSend_unsignedIntValue(*(void **)(*((_QWORD *)&v56 + 1) + 8 * v36), v29, v30, v31, v32, v33, v54);
                v28 += objc_msgSend_expectedMaxDotCount_(CHCharacterSetRules, v38, v37, v39, v40, v41);
                ++v36;
              }
              while (v34 != v36);
              v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v29, (uint64_t)&v56, (uint64_t)v60, 16, v33);
            }
            while (v34);
          }

          v5 = v54;
        }
        if (!objc_msgSend_shouldTreatAllSmallStrokesAsPunctuation(*(void **)(v5 + 456), v42, v43, v44, v45, v46, v54))break;
        if (!v28)
        {
          v47 = *a2 + 8 * v6;
          v49 = *(float *)(v47 + 4);
          v48 = (float *)(v47 + 4);
          v50 = v49 * 0.1;
LABEL_19:
          v53 = v50;
          *v48 = v53;
        }

        ++v6;
        v4 = *a2;
        if (v6 >= (a2[1] - *a2) >> 3)
          return;
      }
      v51 = *a2 + 8 * v6;
      v52 = *(float *)(v51 + 4);
      v48 = (float *)(v51 + 4);
      v50 = pow(0.1, (double)((a3 - v28) & ~((a3 - v28) >> 63))) * v52;
      goto LABEL_19;
    }
  }
}

void sub_1BE65DE28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE65DE70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  float64x2_t *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float32x2_t v26;
  float v27;
  void *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  _QWORD v36[4];
  id v37;
  uint64_t *v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  CGRect v46;
  CGRect v47;

  v42 = 0;
  v43 = &v42;
  v44 = 0x2020000000;
  v45 = 0;
  objc_msgSend_boundsForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  x = v46.origin.x;
  y = v46.origin.y;
  width = v46.size.width;
  height = v46.size.height;
  MidX = CGRectGetMidX(v46);
  v47.origin.x = x;
  v47.origin.y = y;
  v47.size.width = width;
  v47.size.height = height;
  MidY = CGRectGetMidY(v47);
  v13 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)(*(_QWORD *)(a1 + 64) - v13) >= 0x11)
  {
    v14 = 0;
    v15 = 3.40282347e38;
    while (1)
    {
      v18 = (float64x2_t *)(v13 + 16 * v14);
      v34 = *v18;
      v35 = v18[1];
      v19 = (void *)objc_opt_class();
      objc_msgSend_threePointsOrientationWithOrigin_pointA_pointB_(v19, v20, v21, v22, v23, v24, MidX, MidY, *(_OWORD *)&v35, *(_OWORD *)&v34);
      if (v25 > 0.0)
        break;
      v26 = vsub_f32(vcvt_f32_f64(v35), vcvt_f32_f64(v34));
      v27 = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
      if (v27 > 0.0)
        v25 = v25 / v27;
      v16 = -v25;
      if (v15 >= v16)
        v15 = v16;
      v13 = *(_QWORD *)(a1 + 56);
      v17 = v14 + 2;
      ++v14;
      if (v17 >= (*(_QWORD *)(a1 + 64) - v13) >> 4)
        goto LABEL_10;
    }
    *((_BYTE *)v43 + 24) = 1;
LABEL_13:
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    goto LABEL_14;
  }
  v15 = 3.40282347e38;
LABEL_10:
  *((_BYTE *)v43 + 24) = 1;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = sub_1BE65E0CC;
  v36[3] = &unk_1E77F2890;
  v28 = *(void **)(a1 + 40);
  v29 = *(id *)(a1 + 32);
  v39 = MidX;
  v40 = MidY;
  v41 = v15;
  v37 = v29;
  v38 = &v42;
  objc_msgSend_enumerateIndexesUsingBlock_(v28, v30, (uint64_t)v36, v31, v32, v33);

  if (*((_BYTE *)v43 + 24))
    goto LABEL_13;
LABEL_14:
  _Block_object_dispose(&v42, 8);
}

void sub_1BE65E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE65E084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE65E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE65E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t sub_1BE65E0CC(uint64_t a1, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t result;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;

  objc_msgSend_boundsForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = (void *)objc_opt_class();
  result = objc_msgSend_distanceFromPoint_toRectangle_(v17, v18, v19, v20, v21, v22, *(double *)(a1 + 48), *(double *)(a1 + 56), v10, v12, v14, v16);
  if (v28 < *(double *)(a1 + 64))
  {
    result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v24, (uint64_t)a2, v25, v26, v27);
    if (result >= 2)
    {
      v32 = 1;
      while (1)
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v29, (uint64_t)a2, v32 - 1, v30, v31);
        v34 = v33;
        v36 = v35;
        objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v37, (uint64_t)a2, v32, v38, v39);
        v41 = v40;
        v43 = v42;
        v44 = (void *)objc_opt_class();
        result = objc_msgSend_distanceFromPoint_toSegmentFromPoint_toPoint_(v44, v45, v46, v47, v48, v49, *(double *)(a1 + 48), *(double *)(a1 + 56), v34, v36, v41, v43);
        if (v54 < *(double *)(a1 + 64))
          break;
        ++v32;
        result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v50, (uint64_t)a2, v51, v52, v53);
        if (v32 >= result)
          return result;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      *a3 = 1;
    }
  }
  return result;
}

_QWORD *sub_1BE65E200(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if (v4 < 0)
      sub_1BE61F930();
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[16 * (v4 >> 4)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void sub_1BE65E274(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE65E290(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1BE65F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  sub_1BE671438(a25);
  sub_1BE63CEBC(&a27);
  sub_1BE63CEBC(&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE65F4D4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v8 = a2;
  if (a1)
  {
    objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v3, v4, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v10, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseLetterCharacterSet(MEMORY[0x1E0CB3500], v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_uppercaseLetterCharacterSet(MEMORY[0x1E0CB3500], v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_rangeOfCharacterFromSet_(v8, v28, (uint64_t)v9, v29, v30, v31) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend_rangeOfCharacterFromSet_(v8, v32, (uint64_t)v15, v33, v34, v35) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend_rangeOfCharacterFromSet_(v8, v36, (uint64_t)v21, v37, v38, v39) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend_rangeOfCharacterFromSet_(v8, v40, (uint64_t)v27, v41, v42, v43) == 0x7FFFFFFFFFFFFFFFLL)
            v44 = 0;
          else
            v44 = 502;
        }
        else
        {
          v44 = 502;
        }
      }
      else
      {
        v44 = 2;
      }
    }
    else
    {
      v44 = 501;
    }

  }
  else
  {
    v44 = 0;
  }

  return v44;
}

void sub_1BE65F5EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE65F628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE65F63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL candidateResultSortingCriterion(uint64_t a1, uint64_t a2)
{
  return *((float *)&a1 + 1) > *((float *)&a2 + 1);
}

void sub_1BE65F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE65F700(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int shouldApplyLMRescoring;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _DWORD *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  int shouldReplaceInvalidTokenIDs;
  void *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  unsigned int v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t **v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  _DWORD *v97;
  unint64_t v98;
  void *v99;
  float64x2_t *v100;
  unint64_t v101;
  float64x2_t *v102;
  unint64_t v108;
  float64x2_t v109;
  unint64_t v110;
  double *v111;
  uint64_t v112;
  double v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  float64x2_t v118;
  float *v119;
  float64x2_t *v120;
  unint64_t v121;
  const float *v122;
  float32x2_t v123;
  float32x2_t v124;
  _DWORD *v125;
  float32x2_t v126;
  float32x2_t v127;
  unint64_t v128;
  uint64_t v129;
  double *v130;
  float *v131;
  double v132;
  float v133;
  int8x16_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float64x2_t *v138;
  uint64_t v139;
  _QWORD v140[6];
  BOOL v141;
  char v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  __n128 (*v146)(__n128 *, __n128 *);
  void (*v147)(uint64_t);
  void *v148;
  _BYTE *v149;
  char *v150;
  uint64_t v151;
  unsigned int (*v152[3])(uint64_t);

  v152[1] = *(unsigned int (**)(uint64_t))MEMORY[0x1E0C80C00];
  shouldApplyLMRescoring = objc_msgSend_shouldApplyLMRescoring(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  v13 = *(_QWORD **)(a1 + 32);
  if (shouldApplyLMRescoring)
    v14 = v13[60];
  else
    v14 = 0;
  v15 = objc_msgSend__effectiveMaxRecognitionResultCount(v13, v7, v8, v9, v10, v11);
  v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 3;
  if (v15 < v21)
    v21 = objc_msgSend__effectiveMaxRecognitionResultCount(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  if (!v14)
    return;
  v143 = 0;
  v144 = &v143;
  v146 = sub_1BE63E7F0;
  v147 = sub_1BE63E814;
  v145 = 0x4812000000;
  v148 = &unk_1BE94989A;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v22 = objc_msgSend_length(*(void **)(a1 + 40), v16, v17, v18, v19, v20);
  v23 = v22 + 1;
  v24 = v149;
  if (v22 + 1 <= (unint64_t)((v151 - (uint64_t)v149) >> 2))
    goto LABEL_19;
  if (v23 >> 62)
    sub_1BE61F930();
  v25 = v150;
  v22 = (uint64_t)operator new(4 * v23);
  v26 = v25 - v24;
  v27 = (char *)(v22 + ((v25 - v24) & 0xFFFFFFFFFFFFFFFCLL));
  v28 = v27;
  if (v25 != v24)
  {
    if ((unint64_t)(v26 - 4) < 0x2C)
    {
      v28 = (char *)(v22 + ((v25 - v24) & 0xFFFFFFFFFFFFFFFCLL));
      do
      {
LABEL_16:
        v37 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *((_DWORD *)v28 - 1) = v37;
        v28 -= 4;
      }
      while (v25 != v24);
      goto LABEL_17;
    }
    v28 = (char *)(v22 + ((v25 - v24) & 0xFFFFFFFFFFFFFFFCLL));
    if ((unint64_t)&v25[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - v22] < 0x20)
      goto LABEL_16;
    v29 = v26 >> 2;
    v30 = ((unint64_t)(v26 - 4) >> 2) + 1;
    v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
    v32 = &v25[-v31];
    v28 = &v27[-v31];
    v33 = (_OWORD *)(v22 + 4 * v29 - 16);
    v34 = (__int128 *)(v25 - 16);
    v35 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 2;
      v35 -= 8;
    }
    while (v35);
    v25 = v32;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_16;
  }
LABEL_17:
  v149 = v28;
  v150 = v27;
  v151 = v22 + 4 * v23;
  if (v24)
    operator delete(v24);
LABEL_19:
  v139 = v14;
  v137 = (uint64_t)&v137;
  v38 = MEMORY[0x1E0C80A78](v22);
  v138 = (float64x2_t *)((char *)&v137 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = 4 * v21;
  MEMORY[0x1E0C80A78](v38);
  v46 = v144;
  v48 = (char *)v144[7];
  v47 = v144[8];
  if ((unint64_t)v48 >= v47)
  {
    v50 = (char *)v144[6];
    v51 = (v48 - v50) >> 2;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62)
      sub_1BE61F930();
    v53 = v47 - (_QWORD)v50;
    if (v53 >> 1 > v52)
      v52 = v53 >> 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 >> 62)
        sub_1BE61F100();
      v55 = operator new(4 * v54);
    }
    else
    {
      v55 = 0;
    }
    v56 = &v55[4 * v51];
    v57 = &v55[4 * v54];
    *v56 = 1;
    v49 = v56 + 1;
    if (v48 != v50)
    {
      v58 = v48 - v50 - 4;
      if (v58 < 0x2C)
        goto LABEL_101;
      if ((unint64_t)(v50 - v55) < 0x20)
        goto LABEL_101;
      v59 = (v58 >> 2) + 1;
      v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
      v61 = &v48[-v60];
      v56 = (_DWORD *)((char *)v56 - v60);
      v62 = &v55[4 * v51 - 16];
      v63 = v48 - 16;
      v64 = v59 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v65 = *(_OWORD *)v63;
        *(v62 - 1) = *((_OWORD *)v63 - 1);
        *v62 = v65;
        v62 -= 2;
        v63 -= 32;
        v64 -= 8;
      }
      while (v64);
      v48 = v61;
      if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_101:
        do
        {
          v66 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *--v56 = v66;
        }
        while (v48 != v50);
      }
    }
    v46[6] = (uint64_t)v56;
    v46[7] = (uint64_t)v49;
    v46[8] = (uint64_t)v57;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *(_DWORD *)v48 = 1;
    v49 = v48 + 4;
  }
  v46[7] = (uint64_t)v49;
  shouldReplaceInvalidTokenIDs = objc_msgSend_shouldReplaceInvalidTokenIDs(*(void **)(*(_QWORD *)(a1 + 32) + 456), v41, v42, v43, v44, v45);
  v68 = *(void **)(a1 + 40);
  v69 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 552);
  v75 = objc_msgSend_length(v68, v70, v71, v72, v73, v74);
  v140[0] = MEMORY[0x1E0C809B0];
  v140[1] = 3221225472;
  v140[2] = sub_1BE65FEBC;
  v140[3] = &unk_1E77F28B8;
  v141 = v69 != 0;
  v140[4] = *(_QWORD *)(a1 + 32);
  v140[5] = &v143;
  v142 = shouldReplaceInvalidTokenIDs;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v68, v76, 0, v75, (uint64_t)v140, v77);
  if (!v21)
    goto LABEL_69;
  if (!v69)
  {
    v95 = 0;
    v96 = shouldReplaceInvalidTokenIDs ^ 1;
    v97 = (_DWORD *)((char *)&v137 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
    v98 = v21;
    do
    {
      unicodeToNSString(*(_DWORD *)(**(_QWORD **)(a1 + 48) + v95), v78, v79, v80, v81, v82);
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      if (((v96 | LMLexiconGetFirstTokenIDForString()) & 1) == 0)
        *v97 = sub_1BE65F4D4(*(_QWORD *)(a1 + 32), v99);

      ++v97;
      v95 += 8;
      --v98;
    }
    while (v98);
    goto LABEL_69;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 544))
  {
    bzero((char *)&v137 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v21);
    goto LABEL_69;
  }
  v83 = 0;
  while (2)
  {
    v85 = *(_QWORD *)(a1 + 32);
    v84 = *(uint64_t **)(v85 + 544);
    if (!v84)
      goto LABEL_45;
    v86 = *(_DWORD *)(**(_QWORD **)(a1 + 48) + 8 * v83);
    v87 = *(uint64_t **)(v85 + 544);
    while (1)
    {
      v88 = *((_DWORD *)v87 + 7);
      if (v86 < v88)
        goto LABEL_49;
      if (v88 >= v86)
        break;
      ++v87;
LABEL_49:
      v87 = (uint64_t *)*v87;
      if (!v87)
      {
        LODWORD(v84) = 0;
        goto LABEL_45;
      }
    }
    do
    {
      while (1)
      {
        v89 = v84;
        v90 = *((_DWORD *)v84 + 7);
        if (v86 < v90)
          break;
        if (v90 >= v86)
        {
          LODWORD(v84) = *((_DWORD *)v89 + 8);
          goto LABEL_45;
        }
        v84 = (uint64_t *)v89[1];
        if (!v84)
        {
          v91 = (uint64_t **)(v89 + 1);
          goto LABEL_59;
        }
      }
      v84 = (uint64_t *)*v89;
    }
    while (*v89);
    v91 = (uint64_t **)v89;
LABEL_59:
    v92 = operator new(0x28uLL);
    v92[7] = v86;
    v92[8] = 0;
    *(_QWORD *)v92 = 0;
    *((_QWORD *)v92 + 1) = 0;
    *((_QWORD *)v92 + 2) = v89;
    *v91 = (uint64_t *)v92;
    v93 = **(_QWORD **)(v85 + 536);
    v94 = (uint64_t *)v92;
    if (v93)
    {
      *(_QWORD *)(v85 + 536) = v93;
      v94 = *v91;
    }
    sub_1BE61F5C0(*(uint64_t **)(v85 + 544), v94);
    ++*(_QWORD *)(v85 + 552);
    LODWORD(v84) = v92[8];
LABEL_45:
    *(_DWORD *)((char *)&v137 + 4 * v83++ - ((4 * v21 + 15) & 0xFFFFFFFFFFFFFFF0)) = (_DWORD)v84;
    if (v83 != v21)
      continue;
    break;
  }
LABEL_69:
  v100 = v138;
  LMLanguageModelConditionalProbabilityVector();
  if (v21)
  {
    if (v21 < 4)
    {
      v101 = 0;
      goto LABEL_75;
    }
    v101 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    v102 = v100 + 1;
    __asm { FMOV            V0.2D, #20.0 }
    v108 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v109 = vdivq_f64(vaddq_f64(*v102, _Q0), _Q0);
      v102[-1] = vdivq_f64(vaddq_f64(v102[-1], _Q0), _Q0);
      *v102 = v109;
      v102 += 2;
      v108 -= 4;
    }
    while (v108);
    if (v21 != v101)
    {
LABEL_75:
      v110 = v21 - v101;
      v111 = &v100->f64[v101];
      do
      {
        *v111 = (*v111 + 20.0) / 20.0;
        ++v111;
        --v110;
      }
      while (v110);
    }
  }
  v112 = v144[7] - v144[6];
  v113 = 0.8;
  if (v112 != 8)
    v113 = 2.0;
  if (v112 == 4)
    v113 = 0.0;
  v114 = *(uint64_t **)(a1 + 48);
  v115 = *v114;
  if (v21)
  {
    if (v21 > 4)
    {
      v117 = v21 & 3;
      if ((v21 & 3) == 0)
        v117 = 4;
      v116 = v21 - v117;
      v118 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v113, 0);
      v119 = (float *)(v115 + 20);
      v120 = v100 + 1;
      v121 = v116;
      do
      {
        v122 = v119 - 4;
        v123 = (float32x2_t)*(_OWORD *)vld2_f32(v122).val;
        v124 = (float32x2_t)*(_OWORD *)vld2_f32(v119).val;
        v125 = v119 + 2;
        v126 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v123), v120[-1], v118));
        v127 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v124), *v120, v118));
        *(v119 - 4) = v126.f32[0];
        *(v119 - 2) = v126.f32[1];
        *v119 = v127.f32[0];
        v119 += 8;
        *v125 = v127.i32[1];
        v120 += 2;
        v121 -= 4;
      }
      while (v121);
    }
    else
    {
      v116 = 0;
    }
    v128 = v21 - v116;
    v129 = 8 * v116;
    v130 = &v100->f64[v116];
    v131 = (float *)(v129 + v115 + 4);
    do
    {
      v132 = *v130++;
      v133 = *v131 + v113 * v132;
      *v131 = v133;
      v131 += 2;
      --v128;
    }
    while (v128);
  }
  v134 = (int8x16_t *)v114[1];
  v135 = 126 - 2 * __clz(((uint64_t)v134->i64 - v115) >> 3);
  v152[0] = (unsigned int (*)(uint64_t))candidateResultSortingCriterion;
  if (v134 == (int8x16_t *)v115)
    v136 = 0;
  else
    v136 = v135;
  sub_1BE671ED4(v115, v134, v152, v136, 1);
  _Block_object_dispose(&v143, 8);
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
}

void sub_1BE65FE5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BE65FEBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  _QWORD *v12;
  void **v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t **v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  void *v20;
  char FirstTokenIDForString;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  int64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _DWORD *v80;
  char *v81;
  int64_t v82;
  _DWORD *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  int v111;

  v6 = (int)a2;
  if (!*(_BYTE *)(a1 + 48))
  {
    unicodeToNSString((int)a2, a2, a3, a4, a5, a6);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    FirstTokenIDForString = LMLexiconGetFirstTokenIDForString();
    if (*(_BYTE *)(a1 + 49))
      v22 = FirstTokenIDForString;
    else
      v22 = 1;
    v23 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    if ((v22 & 1) != 0)
    {
      v25 = (char *)v23[7];
      v24 = v23[8];
      if ((unint64_t)v25 >= v24)
      {
        v41 = (char *)v23[6];
        v42 = (v25 - v41) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          sub_1BE61F930();
        v44 = v24 - (_QWORD)v41;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 62)
            sub_1BE61F100();
          v46 = operator new(4 * v45);
        }
        else
        {
          v46 = 0;
        }
        v83 = &v46[4 * v42];
        v84 = &v46[4 * v45];
        *v83 = 0;
        v26 = v83 + 1;
        if (v25 != v41)
        {
          v85 = v25 - v41 - 4;
          if (v85 < 0x2C)
            goto LABEL_120;
          if ((unint64_t)(v41 - v46) < 0x20)
            goto LABEL_120;
          v86 = (v85 >> 2) + 1;
          v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
          v88 = &v25[-v87];
          v83 = (_DWORD *)((char *)v83 - v87);
          v89 = &v46[4 * v42 - 16];
          v90 = v25 - 16;
          v91 = v86 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v92 = *(_OWORD *)v90;
            *(v89 - 1) = *((_OWORD *)v90 - 1);
            *v89 = v92;
            v89 -= 2;
            v90 -= 32;
            v91 -= 8;
          }
          while (v91);
          v25 = v88;
          if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_120:
            do
            {
              v93 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *--v83 = v93;
            }
            while (v25 != v41);
          }
        }
        v23[6] = v83;
        v23[7] = v26;
        v23[8] = v84;
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_DWORD *)v25 = 0;
        v26 = v25 + 4;
      }
      v23[7] = v26;

      return;
    }
    v37 = sub_1BE65F4D4(*(_QWORD *)(a1 + 32), v20);
    v38 = v37;
    v40 = (char *)v23[7];
    v39 = v23[8];
    if ((unint64_t)v40 < v39)
    {
      *(_DWORD *)v40 = v37;
      v23[7] = v40 + 4;

      return;
    }
    v47 = (char *)v23[6];
    v48 = (v40 - v47) >> 2;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62)
      sub_1BE61F930();
    v50 = v39 - (_QWORD)v47;
    if (v50 >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 62)
        sub_1BE61F100();
      v52 = operator new(4 * v51);
      v53 = &v52[4 * v48];
      v54 = &v52[4 * v51];
      *v53 = v38;
      v55 = (uint64_t)(v53 + 1);
      v56 = v40 - v47;
      if (v40 == v47)
        goto LABEL_97;
    }
    else
    {
      v52 = 0;
      v53 = (_DWORD *)(4 * v48);
      v54 = 0;
      *(_DWORD *)(4 * v48) = v38;
      v55 = 4 * v48 + 4;
      v56 = v40 - v47;
      if (v40 == v47)
      {
LABEL_97:
        v23[6] = v53;
        v23[7] = v55;
        v23[8] = v54;
        if (v47)
          operator delete(v47);
        v23[7] = v55;

        return;
      }
    }
    v94 = v56 - 4;
    if (v94 < 0x2C)
      goto LABEL_121;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_121;
    v95 = (v94 >> 2) + 1;
    v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
    v97 = &v40[-v96];
    v53 = (_DWORD *)((char *)v53 - v96);
    v98 = &v52[4 * v48 - 16];
    v99 = v40 - 16;
    v100 = v95 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v101 = *(_OWORD *)v99;
      *(v98 - 1) = *((_OWORD *)v99 - 1);
      *v98 = v101;
      v98 -= 2;
      v99 -= 32;
      v100 -= 8;
    }
    while (v100);
    v40 = v97;
    if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_121:
      do
      {
        v102 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *--v53 = v102;
      }
      while (v40 != v47);
    }
    goto LABEL_97;
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(uint64_t **)(v8 + 544);
  if (!v9)
  {
LABEL_14:
    v17 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v19 = (char *)v17[7];
    v18 = v17[8];
    if ((unint64_t)v19 < v18)
    {
      *(_DWORD *)v19 = 0;
      v17[7] = v19 + 4;
      return;
    }
    v27 = (char *)v17[6];
    v28 = (v19 - v27) >> 2;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62)
      sub_1BE61F930();
    v30 = v18 - (_QWORD)v27;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 62)
        goto LABEL_112;
      v32 = operator new(4 * v31);
      v33 = &v32[4 * v28];
      v34 = &v32[4 * v31];
      *v33 = 0;
      v35 = (uint64_t)(v33 + 1);
      v36 = v19 - v27;
      if (v19 == v27)
      {
LABEL_60:
        v17[6] = v33;
        v17[7] = v35;
        v17[8] = v34;
        if (v27)
          operator delete(v27);
        v17[7] = v35;
        return;
      }
    }
    else
    {
      v32 = 0;
      v33 = (_DWORD *)(4 * v28);
      v34 = 0;
      *(_DWORD *)(4 * v28) = 0;
      v35 = 4 * v28 + 4;
      v36 = v19 - v27;
      if (v19 == v27)
        goto LABEL_60;
    }
    v57 = v36 - 4;
    if (v57 < 0x2C)
      goto LABEL_122;
    if ((unint64_t)(v27 - v32) < 0x20)
      goto LABEL_122;
    v58 = (v57 >> 2) + 1;
    v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
    v60 = &v19[-v59];
    v33 = (_DWORD *)((char *)v33 - v59);
    v61 = &v32[4 * v28 - 16];
    v62 = v19 - 16;
    v63 = v58 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 8;
    }
    while (v63);
    v19 = v60;
    if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_122:
      do
      {
        v65 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v33 = v65;
      }
      while (v19 != v27);
    }
    goto LABEL_60;
  }
  v10 = *(uint64_t **)(v8 + 544);
  while (1)
  {
    v11 = *((_DWORD *)v10 + 7);
    if (v11 <= a2)
      break;
LABEL_4:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_14;
  }
  if (v11 < a2)
  {
    ++v10;
    goto LABEL_4;
  }
  v12 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v13 = (void **)(v12 + 6);
  while (1)
  {
    while (1)
    {
      v14 = v9;
      v15 = *((_DWORD *)v9 + 7);
      if (v15 <= a2)
        break;
      v9 = (uint64_t *)*v14;
      if (!*v14)
      {
        v16 = (uint64_t **)v14;
LABEL_64:
        v66 = operator new(0x28uLL);
        v66[7] = v6;
        v66[8] = 0;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
        *((_QWORD *)v66 + 2) = v14;
        *v16 = (uint64_t *)v66;
        v67 = **(_QWORD **)(v8 + 536);
        v68 = (uint64_t *)v66;
        if (v67)
        {
          *(_QWORD *)(v8 + 536) = v67;
          v68 = *v16;
        }
        sub_1BE61F5C0(*(uint64_t **)(v8 + 544), v68);
        ++*(_QWORD *)(v8 + 552);
        v69 = v66[8];
        v71 = (char *)v12[7];
        v70 = v12[8];
        if ((unint64_t)v71 < v70)
          goto LABEL_67;
LABEL_69:
        v73 = (char *)*v13;
        v74 = v71 - (_BYTE *)*v13;
        v75 = v74 >> 2;
        v76 = (v74 >> 2) + 1;
        if (v76 >> 62)
          sub_1BE61F930();
        v77 = v70 - (_QWORD)v73;
        if (v77 >> 1 > v76)
          v76 = v77 >> 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
          v78 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (!v78)
        {
          v79 = 0;
          v80 = (_DWORD *)(4 * v75);
          v81 = 0;
          *(_DWORD *)(4 * v75) = v69;
          v72 = 4 * v75 + 4;
          v82 = v71 - v73;
          if (v71 == v73)
            goto LABEL_107;
          goto LABEL_101;
        }
        if (!(v78 >> 62))
        {
          v79 = operator new(4 * v78);
          v80 = &v79[4 * v75];
          v81 = &v79[4 * v78];
          *v80 = v69;
          v72 = (uint64_t)(v80 + 1);
          v82 = v71 - v73;
          if (v71 == v73)
          {
LABEL_107:
            v12[6] = v80;
            v12[7] = v72;
            v12[8] = v81;
            if (v73)
              operator delete(v73);
            goto LABEL_109;
          }
LABEL_101:
          v103 = v82 - 4;
          if (v103 < 0x2C)
            goto LABEL_123;
          if ((unint64_t)(v71 - v79 - v74) < 0x20)
            goto LABEL_123;
          v104 = (v103 >> 2) + 1;
          v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
          v106 = &v71[-v105];
          v80 = (_DWORD *)((char *)v80 - v105);
          v107 = &v79[4 * v75 - 16];
          v108 = v71 - 16;
          v109 = v104 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v110 = *(_OWORD *)v108;
            *(v107 - 1) = *((_OWORD *)v108 - 1);
            *v107 = v110;
            v107 -= 2;
            v108 -= 32;
            v109 -= 8;
          }
          while (v109);
          v71 = v106;
          if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_123:
            do
            {
              v111 = *((_DWORD *)v71 - 1);
              v71 -= 4;
              *--v80 = v111;
            }
            while (v71 != v73);
          }
          goto LABEL_107;
        }
LABEL_112:
        sub_1BE61F100();
      }
    }
    if (v15 >= a2)
      break;
    v9 = (uint64_t *)v14[1];
    if (!v9)
    {
      v16 = (uint64_t **)(v14 + 1);
      goto LABEL_64;
    }
  }
  v69 = *((_DWORD *)v14 + 8);
  v71 = (char *)v12[7];
  v70 = v12[8];
  if ((unint64_t)v71 >= v70)
    goto LABEL_69;
LABEL_67:
  *(_DWORD *)v71 = v69;
  v72 = (uint64_t)(v71 + 4);
LABEL_109:
  v12[7] = v72;
}

void sub_1BE660528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE66059C(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 208) = *(_QWORD *)(result + 40);
  return result;
}

void sub_1BE660670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1BE660688(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_1BE660698(uint64_t a1)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a1 + 32) + 496);
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = result;
  return result;
}

__n128 sub_1BE660704(uint64_t a1)
{
  __n128 result;

  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(*(_QWORD *)(a1 + 32) + 496) = result;
  return result;
}

void sub_1BE66076C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  CHRecognizerConfiguration *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  int v95;
  uint8_t buf[4];
  void *v97;
  __int16 v98;
  void *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(unsigned int *)(a1 + 40);
  if (*(_DWORD *)(v6 + 200) != (_DWORD)v7)
  {
    v9 = objc_msgSend_mode(*(void **)(v6 + 456), a2, a3, a4, a5, a6);
    objc_msgSend_defaultLocaleForRecognitionType_withMode_(CHRecognizerConfiguration, v10, v7, v9, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    if (objc_msgSend_isLocaleSupported_withMode_(CHRecognizerConfiguration, v20, (uint64_t)v13, v19, v21, v22))
    {
      v23 = [CHRecognizerConfiguration alloc];
      v29 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v24, v25, v26, v27, v28);
      v35 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v30, v31, v32, v33, v34);
      v41 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v36, v37, v38, v39, v40);
      v47 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v42, v43, v44, v45, v46);
      v53 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v48, v49, v50, v51, v52);
      v59 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v54, v55, v56, v57, v58);
      v65 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v60, v61, v62, v63, v64);
      BYTE2(v95) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v66, v67, v68, v69, v70);
      BYTE1(v95) = v65;
      LOBYTE(v95) = v59;
      v72 = (void *)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v23, v71, v29, (uint64_t)v13, v35, v41, v47, v53, v95);
      objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v73, (uint64_t)v72, v74, v75, v76);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 200) = *(_DWORD *)(a1 + 40);

    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v77 = (id)qword_1EF568E20;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        v83 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v78, v79, v80, v81, v82);
        objc_msgSend_stringForRecognitionMode_(CHRecognizerConfiguration, v84, v83, v85, v86, v87);
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_localeIdentifier(v13, v89, v90, v91, v92, v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v97 = v88;
        v98 = 2112;
        v99 = v94;
        _os_log_impl(&dword_1BE607000, v77, OS_LOG_TYPE_ERROR, "Configuration for recognizer with mode=%@ and locale=%@ is not supported.", buf, 0x16u);

      }
    }

  }
}

void sub_1BE6609DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6609F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE660A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE660A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE660AE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE660B6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int isLocaleSupported_withMode;
  CHRecognizerConfiguration *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  int v90;
  id v91;
  uint8_t buf[4];
  id v93;
  __int16 v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 != objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6))
  {
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    isLocaleSupported_withMode = objc_msgSend_isLocaleSupported_withMode_(CHRecognizerConfiguration, v14, (uint64_t)v13, *(unsigned int *)(a1 + 40), v15, v16);

    if (isLocaleSupported_withMode)
    {
      v18 = [CHRecognizerConfiguration alloc];
      v19 = *(unsigned int *)(a1 + 40);
      objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v26, v27, v28, v29, v30);
      v37 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v32, v33, v34, v35, v36);
      v43 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v38, v39, v40, v41, v42);
      v49 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v44, v45, v46, v47, v48);
      v55 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v50, v51, v52, v53, v54);
      v61 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v56, v57, v58, v59, v60);
      BYTE2(v90) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v62, v63, v64, v65, v66);
      BYTE1(v90) = v61;
      LOBYTE(v90) = v55;
      v91 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v18, v67, v19, (uint64_t)v25, v31, v37, v43, v49, v90);

      objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v68, (uint64_t)v91, v69, v70, v71);
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v72 = (id)qword_1EF568E20;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_stringForRecognitionMode_(CHRecognizerConfiguration, v73, *(unsigned int *)(a1 + 40), v74, v75, v76);
        v77 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v78, v79, v80, v81, v82);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_localeIdentifier(v83, v84, v85, v86, v87, v88);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v93 = v77;
        v94 = 2112;
        v95 = v89;
        _os_log_impl(&dword_1BE607000, v72, OS_LOG_TYPE_ERROR, "Configuration for recognizer with mode=%@ and locale=%@ is not supported.", buf, 0x16u);

      }
    }
  }
}

void sub_1BE660E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE660E28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE660E40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE660E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660E78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660FAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE660FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6610A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE6610C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1BE66117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE661194(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isEqual;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  CHRecognizerConfiguration *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  int v93;
  id v94;
  id v95;
  NSObject *v96;
  uint8_t buf[4];
  void *v98;
  __int16 v99;
  void *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  v94 = (id)objc_claimAutoreleasedReturnValue();
  isEqual = objc_msgSend_isEqual_(v94, v7, *(_QWORD *)(a1 + 40), v8, v9, v10);

  if ((isEqual & 1) == 0)
  {
    v17 = *(_QWORD *)(a1 + 40);
    v18 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v12, v13, v14, v15, v16);
    if (objc_msgSend_isLocaleSupported_withMode_(CHRecognizerConfiguration, v19, v17, v18, v20, v21))
    {
      v22 = [CHRecognizerConfiguration alloc];
      v28 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v23, v24, v25, v26, v27);
      v29 = *(_QWORD *)(a1 + 40);
      v35 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v30, v31, v32, v33, v34);
      v41 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v36, v37, v38, v39, v40);
      v47 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v42, v43, v44, v45, v46);
      v53 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v48, v49, v50, v51, v52);
      v59 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v54, v55, v56, v57, v58);
      v65 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v60, v61, v62, v63, v64);
      BYTE2(v93) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v66, v67, v68, v69, v70);
      BYTE1(v93) = v65;
      LOBYTE(v93) = v59;
      v95 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v22, v71, v28, v29, v35, v41, v47, v53, v93);
      objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v72, (uint64_t)v95, v73, v74, v75);

    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v96 = (id)qword_1EF568E20;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        v81 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v76, v77, v78, v79, v80);
        objc_msgSend_stringForRecognitionMode_(CHRecognizerConfiguration, v82, v81, v83, v84, v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_localeIdentifier(*(void **)(a1 + 40), v87, v88, v89, v90, v91);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v98 = v86;
        v99 = 2112;
        v100 = v92;
        _os_log_impl(&dword_1BE607000, v96, OS_LOG_TYPE_ERROR, "Configuration for recognizer with mode=%@ and locale=%@ is not supported.", buf, 0x16u);

      }
    }
  }
}

void sub_1BE661420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE661438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE66144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE661460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6614F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE661508(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v5 = *(void **)(v2 + 216);
  v4 = (id *)(v2 + 216);
  if (v5 != v3)
    objc_storeStrong(v4, v3);
}

void sub_1BE6615B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6615C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE661654(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6) != *(_DWORD *)(a1 + 40))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(unsigned int *)(a1 + 40);
    v26 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v21, v22, v23, v24, v25);
    v32 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v27, v28, v29, v30, v31);
    v38 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v33, v34, v35, v36, v37);
    v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v39, v40, v41, v42, v43);
    v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v20, v26, v32, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE6617A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6617BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE661854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE66186C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE6618F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6) != *(_DWORD *)(a1 + 40))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
    v26 = *(unsigned int *)(a1 + 40);
    v32 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v27, v28, v29, v30, v31);
    v38 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v33, v34, v35, v36, v37);
    v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v39, v40, v41, v42, v43);
    v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v26, v32, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE661A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE661A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE661AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE661B10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE661B9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6) != *(_DWORD *)(a1 + 40))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
    v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v26, v27, v28, v29, v30);
    v32 = *(unsigned int *)(a1 + 40);
    v38 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v33, v34, v35, v36, v37);
    v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v39, v40, v41, v42, v43);
    v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v32, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE661CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE661D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE661D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE661DB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE661E3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6) != *(_QWORD *)(a1 + 40))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
    v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v26, v27, v28, v29, v30);
    v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v32, v33, v34, v35, v36);
    v38 = *(_QWORD *)(a1 + 40);
    v44 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v39, v40, v41, v42, v43);
    v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v38, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE661F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE661FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE662038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE662050(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE6620DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (*(unsigned __int8 *)(a1 + 40) != objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
    v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v26, v27, v28, v29, v30);
    v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v32, v33, v34, v35, v36);
    v43 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v38, v39, v40, v41, v42);
    v44 = *(unsigned __int8 *)(a1 + 40);
    v50 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v45, v46, v47, v48, v49);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50;
    LOBYTE(v61) = v44 != 0;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v43, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE662238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE66224C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6622E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6622FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE662388(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (*(unsigned __int8 *)(a1 + 40) != objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
    v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v26, v27, v28, v29, v30);
    v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v32, v33, v34, v35, v36);
    v43 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v38, v39, v40, v41, v42);
    v49 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v44, v45, v46, v47, v48);
    v50 = *(unsigned __int8 *)(a1 + 40);
    BYTE2(v61) = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v51, v52, v53, v54, v55);
    BYTE1(v61) = v50 != 0;
    LOBYTE(v61) = v49;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v43, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE6624E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6624F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE662590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6625A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE662634(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHRecognizerConfiguration *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;

  if (*(unsigned __int8 *)(a1 + 40) != objc_msgSend_enableGen2CharacterLMIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), a2, a3, a4, a5, a6))
  {
    v7 = [CHRecognizerConfiguration alloc];
    v13 = objc_msgSend_mode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v9, v10, v11, v12);
    objc_msgSend_locale(*(void **)(*(_QWORD *)(a1 + 32) + 456), v14, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_contentType(*(void **)(*(_QWORD *)(a1 + 32) + 456), v20, v21, v22, v23, v24);
    v31 = objc_msgSend_autoCapitalizationMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v26, v27, v28, v29, v30);
    v37 = objc_msgSend_autoCorrectionMode(*(void **)(*(_QWORD *)(a1 + 32) + 456), v32, v33, v34, v35, v36);
    v43 = objc_msgSend_baseWritingDirection(*(void **)(*(_QWORD *)(a1 + 32) + 456), v38, v39, v40, v41, v42);
    v49 = objc_msgSend_enableCachingIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v44, v45, v46, v47, v48);
    v55 = objc_msgSend_enableGen2ModelIfAvailable(*(void **)(*(_QWORD *)(a1 + 32) + 456), v50, v51, v52, v53, v54);
    BYTE2(v61) = *(_BYTE *)(a1 + 40);
    BYTE1(v61) = v55;
    LOBYTE(v61) = v49;
    v62 = (id)objc_msgSend_initWithMode_locale_contentType_autoCapitalizationMode_autoCorrectionMode_baseWritingDirection_enableCachingIfAvailable_enableGen2ModelIfAvailable_enableGen2CharacterLMIfAvailable_(v7, v56, v13, (uint64_t)v19, v25, v31, v37, v43, v61);

    objc_msgSend__setConfiguration_(*(void **)(a1 + 32), v57, (uint64_t)v62, v58, v59, v60);
  }
}

void sub_1BE662788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE66279C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE662AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE662AD0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id *v3;
  void *v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(v2 + 8);
  v3 = (id *)(v2 + 8);
  if (v1 != v4)
    objc_storeStrong(v3, v1);
}

void sub_1BE662B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE662BB4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1BE662BC8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E77F1160;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE662C58()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0FC8;
  result[1] = 0;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_1BE662C94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;

  v3 = *(uint64_t **)(result + 24);
  v4 = *(uint64_t **)(result + 32);
  if (v3 != v4)
  {
    v7 = (char **)(a2 + 16);
    do
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v3 + 16))(*v3);
      v11 = v10;
      v12 = *(uint64_t **)(a2 + 24);
      if ((unint64_t)v12 >= *(_QWORD *)(a2 + 32))
      {
        v8 = sub_1BE663188(v7, v10);
      }
      else
      {
        *v12 = v10;
        v13 = (_QWORD *)operator new();
        *v13 = &off_1E77F1410;
        v13[1] = 0;
        v13[2] = 0;
        v13[3] = v11;
        v12[1] = (uint64_t)v13;
        v8 = (char *)(v12 + 2);
        *(_QWORD *)(a2 + 24) = v12 + 2;
      }
      *(_QWORD *)(a2 + 24) = v8;
      v9 = *v3++;
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, *((_QWORD *)v8 - 2), a3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1BE662D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(v1 + 24) = v3;
  _Unwind_Resume(exception_object);
}

double sub_1BE662D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  double v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  double v20;
  double result;
  char **v23;

  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 == v7)
  {
    v11 = 0.0;
  }
  else
  {
    v23 = (char **)(a4 + 16);
    v11 = 0.0;
    do
    {
      v15 = *(_QWORD *)(a4 + 16);
      v14 = *(_QWORD *)(a4 + 24);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 16))(*v6);
      v17 = v16;
      v18 = *(uint64_t **)(a4 + 24);
      if ((unint64_t)v18 >= *(_QWORD *)(a4 + 32))
      {
        v12 = sub_1BE663188(v23, v16);
      }
      else
      {
        *v18 = v16;
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E77F1410;
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = v17;
        v18[1] = (uint64_t)v19;
        v12 = (char *)(v18 + 2);
        *(_QWORD *)(a4 + 24) = v18 + 2;
      }
      *(_QWORD *)(a4 + 24) = v12;
      v13 = *v6++;
      v11 = v11
          + (*(double (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 32))(v13, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * ((v14 - v15) >> 4)), a3, *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16 * ((v14 - v15) >> 4)), a5);
    }
    while (v6 != v7);
  }
  v20 = *(double *)(a1 + 16);
  if (v20 <= v11)
    v20 = v11;
  result = *(double *)(a1 + 8) * v20;
  *(double *)(a4 + 8) = result;
  return result;
}

void sub_1BE662ED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(exception_object);
}

double sub_1BE662EFC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 8);
}

double sub_1BE662F04(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;

  v4 = *(double *)(a2 + 8);
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(uint64_t **)(a1 + 32);
  if (v5 == v6)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      v9 = *v5++;
      v8 = v8
         + (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v7));
      v7 += 16;
    }
    while (v5 != v6);
  }
  v10 = *(double *)(a1 + 8);
  v11 = *(double *)(a1 + 16);
  if (v11 <= v8 + v4 / v10)
    v11 = v8 + v4 / v10;
  *(double *)(a2 + 8) = v10 * v11;
  return v8;
}

double sub_1BE662FA8()
{
  return 0.0;
}

uint64_t sub_1BE662FB0(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_1BE662FB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E77F0FC8;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE66305C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E77F0FC8;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE663110(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *(_QWORD *)(a1 + 24) = v2;
}

char *sub_1BE663188(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  char *v22;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    sub_1BE61F930();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 60)
      sub_1BE61F100();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v7];
  *(_QWORD *)v9 = a2;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E77F1410;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = a2;
  *((_QWORD *)v9 + 1) = v11;
  v12 = v9 + 16;
  v21 = v9 + 16;
  v14 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    v16 = a1[1];
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v15;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v14);
    v16 = *a1;
    v13 = a1[1];
    v12 = v21;
  }
  *a1 = v9;
  a1[1] = v12;
  a1[2] = v10;
  if (v13 == v16)
  {
    if (v13)
LABEL_17:
      operator delete(v13);
  }
  else
  {
    do
    {
      v22 = v13 - 16;
      v18 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v13 = v22;
    }
    while (v22 != v16);
    v13 = v16;
    if (v16)
      goto LABEL_17;
  }
  return v12;
}

void sub_1BE663324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1BE66340C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE663350(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE663374(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1BE66338C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BE8D55C8)
    return a1 + 24;
  if (((v3 & 0x80000001BE8D55C8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BE8D55C8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BE8D55C8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t sub_1BE66340C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1BE6634A0()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E77F0F58;
  return result;
}

double sub_1BE6634D8(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  double result;
  double v11;

  v9 = (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a5);
  *(_DWORD *)(a4 + 20) = v9;
  if (a3 == -1)
  {
    *(_BYTE *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return 0.0;
  }
  else if ((*(unsigned int (**)(double *, uint64_t))(*(_QWORD *)a1 + 64))(a1, v9))
  {
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a4 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    return 0.0;
  }
  else if (*(_BYTE *)(a2 + 16)
         || ((*(uint64_t (**)(double *, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a4 + 20)) & 1) != 0)
  {
    *(_BYTE *)(a4 + 16) = 1;
    v11 = a1[6];
    if (a1[2] > v11)
      v11 = a1[2];
    result = a1[1] * v11;
    *(double *)(a4 + 8) = result;
  }
  else
  {
    return *(double *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1BE6635D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  void *v9;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = (*(_QWORD *)(a1 + 32) - v6) >> 2;
  if (v7 > (unint64_t)a2)
    return *(unsigned int *)(v6 + 4 * (_QWORD)a2);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Label=%lu is out-of-bounds for labelToScriptMap of size=%lu"), a4, a5, a6, a2, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  CVNLPLogGeneralFault();

  return 0;
}

void sub_1BE66364C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE663660()
{
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE663674(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E77F1038;
  a1[8] = &off_1E77F1118;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  a1[2] = &off_1E77F1160;
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    v4 = (_QWORD *)a1[6];
    v5 = (void *)a1[5];
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE66372C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void ***a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char **v12;
  uint64_t v13;
  void *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  int64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  unint64_t v70;
  float v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  BOOL v77;
  float v78;
  float *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t v88;
  float *i;
  float v90;
  float v91;
  float *v92;
  float *v93;
  float v94;
  uint64_t **v95;
  double v96;
  __int128 *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  __int128 *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  double v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  void **v137;
  uint64_t v138;
  void *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  unint64_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  char *v188;
  unint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  double v211;
  char *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  float *v217;
  float v218;
  _QWORD *v219;
  _QWORD *v220;
  double v221;
  unint64_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  unint64_t v225;
  char *v226;
  char *v227;
  uint64_t *v228;
  uint64_t *v229;
  unint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  _BYTE *v235;
  unint64_t *v236;
  int64_t v237;
  unint64_t v238;
  char *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _OWORD *v244;
  __int128 *v245;
  uint64_t v246;
  __int128 v247;
  uint64_t *v248;
  uint64_t **v249;
  unint64_t *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v261;
  uint64_t *v262;
  unint64_t *v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  double v270;
  double v271;
  double v272;
  double v273;
  long double v274;
  _QWORD *v275;
  _QWORD *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  long double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  long double v293;
  __int128 v294;
  unint64_t v295;
  double v296;
  double v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  void **v307;
  uint64_t v308;
  void *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t *v318;
  uint64_t **v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  float *v323;
  unint64_t v324;
  float *v325;
  float *v326;
  float *v327;
  float *v328;
  uint64_t v329;
  float *v330;
  float *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t **v335;
  void *v336;
  char *v337;
  unint64_t v338;
  char *v339;
  char *v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t **v345;
  uint64_t *v346;
  uint64_t *v347;
  _QWORD *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  _BYTE *v354;
  uint64_t v355;
  int64_t v356;
  unint64_t v357;
  char *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _OWORD *v363;
  char *v364;
  uint64_t v365;
  __int128 v366;
  float v367;
  float *v368;
  float *v369;
  float *v370;
  uint64_t **v371;
  uint64_t *v372;
  uint64_t **v373;
  BOOL v374;
  float v375;
  float v376;
  double v377;
  unint64_t *v378;
  uint64_t *v379;
  uint64_t **v380;
  unint64_t *v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  char *v392;
  char *v393;
  uint64_t v394;
  __int128 v395;
  uint64_t **v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  char *v414;
  __int128 *v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  uint64_t v419;
  unint64_t v420;
  double v421;
  double v422;
  __int128 v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  void **v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  char *v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  char *v450;
  char *v451;
  uint64_t v452;
  char *v453;
  char *v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  char *v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  uint64_t v465;
  double *v466;
  double v467;
  uint64_t v468;
  double v469;
  double v470;
  _QWORD *v471;
  _QWORD *v472;
  double v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  _QWORD *v479;
  char *v480;
  double v481;
  double v482;
  double v483;
  double v484;
  double v485;
  long double v486;
  _QWORD *v487;
  _QWORD *v488;
  __int128 v489;
  unint64_t v490;
  double v491;
  double v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  void **v501;
  uint64_t v502;
  uint64_t v503;
  void *v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  _QWORD *v510;
  uint64_t v511;
  float *v512;
  uint64_t v513;
  float *v514;
  float v515;
  float v516;
  float v517;
  float v518;
  uint64_t v519;
  uint64_t v520;
  float v521;
  float v522;
  float v523;
  float v524;
  float v525;
  unint64_t v526;
  float *v527;
  uint64_t v528;
  float v529;
  float v530;
  float v531;
  float *v532;
  float *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  BOOL v537;
  uint64_t v538;
  uint64_t v539;
  float v540;
  float *v541;
  float *v542;
  uint64_t v543;
  uint64_t v544;
  float *v545;
  uint64_t v546;
  unint64_t v547;
  float v548;
  float *v549;
  float v550;
  float v551;
  float v552;
  uint64_t v553;
  float v554;
  float *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int64_t v559;
  int64_t v560;
  uint64_t v561;
  uint64_t v562;
  float *v563;
  float v564;
  float v565;
  float *v566;
  uint64_t v567;
  float *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t **v573;
  void *v574;
  char *v575;
  unint64_t v576;
  char *v577;
  char *v578;
  unint64_t v579;
  unint64_t v580;
  char *v581;
  uint64_t v582;
  float *v583;
  uint64_t *v584;
  uint64_t *v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  _BYTE *v591;
  char *v592;
  uint64_t v593;
  int64_t v594;
  unint64_t v595;
  char *v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _OWORD *v601;
  char *v602;
  uint64_t v603;
  __int128 v604;
  float *v605;
  uint64_t **v606;
  uint64_t *v607;
  uint64_t **v608;
  double v609;
  __int128 v610;
  unint64_t *v611;
  uint64_t *v612;
  uint64_t **v613;
  unint64_t *v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t *v619;
  uint64_t *v620;
  uint64_t *v621;
  unint64_t v622;
  unint64_t v623;
  __int128 *v625;
  __int128 *v626;
  uint64_t v627;
  char *v628;
  uint64_t **j;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  __int128 *v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  double *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  unint64_t v645;
  char *v646;
  __int128 *v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  uint64_t v651;
  unint64_t v652;
  double v653;
  double v654;
  __int128 v655;
  uint64_t v656;
  uint64_t v657;
  __int128 *v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  void **v662;
  uint64_t v663;
  uint64_t v664;
  void *v665;
  std::__shared_weak_count *v666;
  unint64_t *v667;
  unint64_t v668;
  uint64_t v669;
  _QWORD *v670;
  _QWORD *v671;
  uint64_t v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  uint64_t v676;
  uint64_t v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  char *v681;
  char *v682;
  uint64_t v683;
  char *v684;
  char *v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 *v689;
  void *v690;
  uint64_t v691;
  uint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  uint64_t v696;
  double *v697;
  double v698;
  uint64_t v699;
  double v700;
  double v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  double v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t *v710;
  _QWORD *v711;
  char *v712;
  double v713;
  double v714;
  double v715;
  double v716;
  double v717;
  long double v718;
  _QWORD *v719;
  _QWORD *v720;
  __int128 v721;
  unint64_t v722;
  double v723;
  double v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  void **v732;
  uint64_t v733;
  uint64_t v734;
  void *v735;
  std::__shared_weak_count *v736;
  unint64_t *v737;
  unint64_t v738;
  uint64_t v739;
  _QWORD *v740;
  _QWORD *v741;
  uint64_t v742;
  __int128 *v743;
  __int128 *v744;
  int64_t v745;
  _QWORD *v746;
  uint64_t v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  __int128 *v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 *v761;
  uint64_t v762;
  uint64_t v763;
  int64_t v764;
  __int128 *v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  uint64_t v769;
  unint64_t v770;
  double v771;
  double v772;
  __int128 v773;
  uint64_t v774;
  uint64_t v775;
  __int128 *v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  uint64_t v780;
  void **v781;
  uint64_t v782;
  void *v783;
  std::__shared_weak_count *v784;
  unint64_t *v785;
  unint64_t v786;
  double *v787;
  _QWORD *v788;
  _QWORD *v789;
  uint64_t v790;
  uint64_t v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  char *v795;
  char *v796;
  uint64_t v797;
  _QWORD *v798;
  uint64_t v799;
  unint64_t *v800;
  unint64_t v801;
  char *v802;
  uint64_t v803;
  __int128 *v804;
  char *v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  unint64_t v809;
  char *v810;
  uint64_t *v811;
  _QWORD *v812;
  char *v813;
  char *v814;
  char *v815;
  _QWORD *v816;
  int64x2_t v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char *v821;
  char *v822;
  char *v823;
  uint64_t v824;
  __int128 v825;
  __int128 v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  void *v830;
  std::__shared_weak_count *v831;
  unint64_t *v832;
  unint64_t v833;
  char *v834;
  char *v835;
  __int128 *v836;
  char *v837;
  _QWORD *v838;
  char *v839;
  char *v840;
  uint64_t v841;
  unint64_t v842;
  unint64_t v843;
  _BYTE *v844;
  uint64_t v845;
  int64_t v846;
  unint64_t v847;
  char *v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  uint64_t v852;
  _OWORD *v853;
  char *v854;
  uint64_t v855;
  __int128 v856;
  uint64_t *v857;
  uint64_t v858;
  uint64_t **v859;
  uint64_t **v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  unint64_t v865;
  uint64_t *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  char *v871;
  unint64_t v872;
  unint64_t v873;
  BOOL v874;
  uint64_t v875;
  unint64_t v876;
  unint64_t v877;
  uint64_t *v879;
  uint64_t *v880;
  uint64_t v881;
  void **v882;
  unint64_t v883;
  char *v884;
  char *v885;
  uint64_t *v886;
  char *v887;
  uint64_t *v888;
  uint64_t v889;
  unint64_t v890;
  unint64_t v891;
  _BYTE *v892;
  char *v893;
  uint64_t v894;
  int64_t v895;
  unint64_t v896;
  char *v897;
  uint64_t v898;
  uint64_t **v899;
  unint64_t v900;
  uint64_t v901;
  uint64_t v902;
  _OWORD *v903;
  char *v904;
  uint64_t v905;
  __int128 v906;
  uint64_t v907;
  double v908;
  _QWORD *v909;
  _QWORD *v910;
  uint64_t v911;
  double v912;
  uint64_t v913;
  double v914;
  double v915;
  uint64_t *v916;
  uint64_t **v917;
  unint64_t v918;
  char *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  char *v923;
  uint64_t v924;
  char *v925;
  char *v926;
  char *v927;
  uint64_t v928;
  double v929;
  char *v930;
  uint64_t v931;
  uint64_t v932;
  char *v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  char *v937;
  uint64_t v938;
  uint64_t v939;
  char *v940;
  char *v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  char *v946;
  uint64_t v947;
  uint64_t v948;
  double v949;
  char *v950;
  uint64_t *v951;
  unint64_t v952;
  void **v953;
  void **v954;
  unint64_t v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  char *v959;
  char *v960;
  void **v961;
  void **v962;
  char *v963;
  char *v964;
  __int128 v965;
  void **v966;
  void **v967;
  void *v968;
  char *v969;
  char *v970;
  char *v971;
  char *v972;
  void *v973;
  void *v974;
  char *v975;
  char *v976;
  char *v977;
  char *v978;
  void *v979;
  void *v980;
  uint64_t v981;
  uint64_t v982;
  void *v983;
  void *v984;
  uint64_t v985;
  uint64_t v986;
  std::__shared_weak_count *v987;
  unint64_t *v988;
  unint64_t v989;
  int64_t v990;
  int64_t v991;
  uint64_t v992;
  char *v993;
  char *v994;
  uint64_t v995;
  uint64_t v996;
  double v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  unint64_t v1007;
  float *v1008;
  __int128 v1009;
  __int128 v1010;
  uint64_t v1011;
  float *v1012;
  __int128 v1013;
  uint64_t v1014;
  float *v1015;
  uint64_t v1016;
  __int128 v1017;
  uint64_t v1018;
  __int128 v1019;
  unint64_t *v1020;
  float *v1021;
  uint64_t **v1022;
  uint64_t v1023;
  float *v1024;
  uint64_t **v1025;
  float *v1026;
  uint64_t v1027;
  uint64_t v1028;
  char *v1029;
  __int128 v1030;
  float *v1031;
  float *v1032;
  __int128 v1033;
  uint64_t v1034;
  uint64_t **v1035;
  float *v1036;
  float *v1037;
  uint64_t v1038;
  char *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  double *v1045;
  __int128 *v1046;
  uint64_t *v1047;
  uint64_t *v1048;
  unint64_t v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  unint64_t v1053;
  unint64_t v1054;
  void *__p;
  unint64_t *v1056;
  unint64_t v1057;
  _BYTE v1058[48];
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;

  v7 = operator new();
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = &off_1E77F0FC8;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_OWORD *)v7 = xmmword_1BE8D52F0;
  *(_OWORD *)(v7 + 16) = xmmword_1BE8D5300;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_QWORD *)(v7 + 48) = 0;
  v1034 = a1;
  v8 = *(int *)(a1 + 112);
  v1048 = 0;
  v1049 = 0;
  v1047 = (uint64_t *)&v1048;
  v1050 = 0u;
  v1051 = 0u;
  v1052 = 0u;
  v9 = v8 + 1;
  v1053 = 0;
  v1054 = v8 + 1;
  if (v8 != -1)
  {
    if (v9 > 0x276276276276276)
      sub_1BE61F930();
    *(_QWORD *)&v1052 = operator new(104 * v9);
    *((_QWORD *)&v1052 + 1) = v1052;
    v1053 = v1052 + 104 * v9;
  }
  *(_QWORD *)&v1058[32] = &v1051;
  v10 = operator new(8uLL);
  *v10 = v7;
  v11 = v10 + 1;
  *(_QWORD *)&v1050 = v10;
  *((_QWORD *)&v1050 + 1) = v10 + 1;
  *(_QWORD *)&v1051 = v10 + 1;
  memset(v1058, 0, 32);
  v12 = (char **)sub_1BE669A78((uint64_t)v1058);
  *((_QWORD *)&v1050 + 1) = v11;
  sub_1BE6695F0(v12, (_QWORD *)v7);
  v13 = *(_QWORD *)&v1058[8];
  v14 = *(void **)v1058;
  v15 = &v1048;
  v16 = &v1048;
  v17 = v1048;
  if (v1048)
  {
    if (*(_QWORD *)v1058 == *(_QWORD *)&v1058[8])
    {
      v18 = v1048[4];
      v19 = v1048[5];
      if (v18 == v19)
        goto LABEL_44;
      v16 = (uint64_t **)v1048;
      while (1)
      {
        v20 = 0;
        while (*(_QWORD *)v1058 + v20 != *(_QWORD *)&v1058[8])
        {
          v21 = *(_QWORD *)(*(_QWORD *)v1058 + v20);
          v22 = *(_QWORD *)(v18 + v20);
          if (v21 < v22)
            break;
          v20 += 8;
          v23 = v22 < v21 || v20 + v18 == v19;
          if (v23)
            goto LABEL_44;
        }
        v24 = *v16;
        v15 = v16;
        if (!*v16)
          break;
        v18 = v24[4];
        v19 = v24[5];
        v16 = (uint64_t **)*v16;
        if (v18 == v19)
          goto LABEL_44;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          v15 = (uint64_t **)v17;
          v25 = v17[4];
          v26 = v17[5];
          if (v25 == v26)
            break;
          v27 = v25 + 8;
          v28 = *(unint64_t **)v1058;
          while (v28 != *(unint64_t **)&v1058[8])
          {
            v29 = *v28;
            v30 = *(_QWORD *)(v27 - 8);
            if (*v28 < v30)
              break;
            ++v28;
            v31 = v30 < v29 || v27 == v26;
            v27 += 8;
            if (v31)
              goto LABEL_30;
          }
          v17 = *v15;
          v16 = v15;
          if (!*v15)
            goto LABEL_41;
        }
LABEL_30:
        v32 = 0;
        while (v25 + v32 != v26)
        {
          v33 = *(_QWORD *)(v25 + v32);
          v34 = *(_QWORD *)(*(_QWORD *)v1058 + v32);
          if (v33 < v34)
            break;
          v32 += 8;
          if (v34 < v33 || v32 + *(_QWORD *)v1058 == *(_QWORD *)&v1058[8])
            goto LABEL_44;
        }
        v17 = v15[1];
      }
      while (v17);
      v16 = v15 + 1;
    }
  }
LABEL_41:
  v36 = (uint64_t *)operator new(0x40uLL);
  v36[4] = (uint64_t)v14;
  v36[5] = v13;
  v37 = *(_QWORD *)&v1058[16];
  memset(v1058, 0, 24);
  v36[6] = v37;
  v36[7] = v7;
  *v36 = 0;
  v36[1] = 0;
  v36[2] = (uint64_t)v15;
  *v16 = v36;
  if (v1048)
  {
    v1047 = v1048;
    v36 = *v16;
  }
  sub_1BE61F5C0(v1048, v36);
  ++v1049;
  v14 = *(void **)v1058;
LABEL_44:
  if (v14)
  {
    *(_QWORD *)&v1058[8] = v14;
    operator delete(v14);
  }
  v38 = *a2 * *(int *)(v1034 + 112);
  v39 = v1051;
  v40 = v1050;
  if (v38 <= (uint64_t)(v1051 - v1050) >> 3)
    goto LABEL_60;
  if (v38 >> 61)
    sub_1BE61F930();
  v41 = (char *)*((_QWORD *)&v1050 + 1);
  *(_QWORD *)&v1058[32] = &v1051;
  v42 = (char *)operator new(8 * v38);
  v43 = (uint64_t)&v41[-v40];
  v44 = (unint64_t)&v42[(unint64_t)&v41[-v40] & 0xFFFFFFFFFFFFFFF8];
  if (v41 != (char *)v40)
  {
    v45 = v43 - 8;
    if ((unint64_t)(v43 - 8) >= 0x78)
    {
      if ((unint64_t)&v41[-(v45 & 0xFFFFFFFFFFFFFFF8) - 8] >= v44
        || (v46 = &v42[(unint64_t)&v41[-v40] & 0xFFFFFFFFFFFFFFF8],
            &v42[(v43 & 0xFFFFFFFFFFFFFFF8) - (v45 & 0xFFFFFFFFFFFFFFF8) - 8] >= v41))
      {
        v48 = v43 >> 3;
        v49 = (v45 >> 3) + 1;
        v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        v46 = (char *)(v44 - v50);
        v51 = &v41[-v50];
        v52 = v41 - 16;
        v53 = &v42[8 * v48 - 16];
        v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v56 = *((_OWORD *)v52 - 1);
          v55 = *(_OWORD *)v52;
          *((_OWORD *)v52 - 1) = 0uLL;
          *(_OWORD *)v52 = 0uLL;
          *((_OWORD *)v53 - 1) = v56;
          *(_OWORD *)v53 = v55;
          v52 -= 32;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        v41 = v51;
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_58;
      }
    }
    else
    {
      v46 = &v42[(unint64_t)&v41[-v40] & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v57 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v46 - 1) = v57;
      v46 -= 8;
    }
    while (v41 != (char *)v40);
LABEL_58:
    v47 = (int64x2_t)v1050;
    v39 = v1051;
    goto LABEL_59;
  }
  v47 = vdupq_n_s64(v40);
  v46 = &v42[(unint64_t)&v41[-v40] & 0xFFFFFFFFFFFFFFF8];
LABEL_59:
  *(_QWORD *)&v1050 = v46;
  *((_QWORD *)&v1050 + 1) = v44;
  *(int64x2_t *)&v1058[8] = v47;
  *(_QWORD *)&v1051 = &v42[8 * v38];
  *(_QWORD *)&v1058[24] = v39;
  *(_QWORD *)v1058 = v47.i64[0];
  sub_1BE669A78((uint64_t)v1058);
LABEL_60:
  v1002 = a2;
  v58 = v1047;
  if (v1047 != (uint64_t *)&v1048)
  {
    do
    {
      v59 = *(_QWORD **)(v1034 + 40);
      v60 = *(_QWORD **)(v1034 + 48);
      if (v59 != v60)
      {
        v61 = v58[7];
        do
        {
          v62 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v59 + 16))(*v59);
          v63 = v62;
          v64 = *(uint64_t **)(v61 + 88);
          if ((unint64_t)v64 >= *(_QWORD *)(v61 + 96))
          {
            v66 = sub_1BE663188((char **)(v61 + 80), v62);
          }
          else
          {
            *v64 = v62;
            v65 = (_QWORD *)operator new();
            *v65 = &off_1E77F1410;
            v65[1] = 0;
            v65[2] = 0;
            v65[3] = v63;
            v64[1] = (uint64_t)v65;
            v66 = (char *)(v64 + 2);
            *(_QWORD *)(v61 + 88) = v64 + 2;
          }
          *(_QWORD *)(v61 + 88) = v66;
          (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*v59 + 24))(*v59, *((_QWORD *)v66 - 2), a3);
          ++v59;
        }
        while (v59 != v60);
      }
      v67 = (uint64_t *)v58[1];
      if (v67)
      {
        do
        {
          v68 = (uint64_t **)v67;
          v67 = (uint64_t *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (uint64_t **)v58[2];
          v23 = *v68 == v58;
          v58 = (uint64_t *)v68;
        }
        while (!v23);
      }
      v58 = (uint64_t *)v68;
    }
    while (v68 != &v1048);
  }
  *((_QWORD *)&v1051 + 1) = 0;
  v69 = v1002;
  if (!*v1002)
    goto LABEL_1112;
  v70 = 0;
  v1018 = v1034 + 64;
  v71 = 1.0;
  do
  {
    v72 = v69[1];
    v73 = v72 * v70;
    v74 = 4 * v72 * v70;
    v75 = v69[9];
    v1004 = v69[8];
    v76 = (float *)(v75 + v74);
    v77 = v75 == 0;
    v1007 = v73;
    v1008 = (float *)(v75 + v74);
    if (!v75)
      v76 = 0;
    v1015 = v76;
    if (v75)
      v78 = -1.0;
    else
      v78 = 0.0;
    v1000 = v69[1];
    v1006 = v72 + v73;
    v1003 = 4 * (v72 + v73);
    v79 = (float *)(v75 + v1003);
    if (v77)
      v79 = 0;
    v1024 = v79;
    v81 = *((_QWORD *)&v1052 + 1);
    v80 = v1052;
    while (v81 != v80)
    {
      *(_QWORD *)(v81 - 40) = &off_1E77F0FC8;
      v83 = *(_QWORD *)(v81 - 24);
      if (v83)
      {
        v84 = *(_QWORD *)(v81 - 16);
        v82 = *(void **)(v81 - 24);
        if (v84 != v83)
        {
          do
          {
            v85 = *(std::__shared_weak_count **)(v84 - 8);
            if (v85)
            {
              p_shared_owners = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(p_shared_owners);
              while (__stlxr(v87 - 1, p_shared_owners));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v84 -= 16;
          }
          while (v84 != v83);
          v82 = *(void **)(v81 - 24);
        }
        *(_QWORD *)(v81 - 16) = v83;
        operator delete(v82);
      }
      v81 -= 104;
    }
    *((_QWORD *)&v1052 + 1) = v80;
    __p = 0;
    v1056 = 0;
    v1057 = 0;
    v88 = *(_QWORD *)(v1034 + 8);
    if (v1015)
    {
      i = v1024;
      if (v1015 == v1024)
      {
        v91 = -0.0010005;
        v1012 = (float *)(v1004 + v74);
        v95 = (uint64_t **)v1047;
        if (v1047 != (uint64_t *)&v1048)
          goto LABEL_117;
      }
      else
      {
        v90 = (float)v88;
        v91 = -0.0010005;
        v92 = v1008;
        v93 = (float *)(v1004 + v74);
        while (1)
        {
          v94 = *v93;
          if (*v92 == v90)
            break;
          if (v91 > v94)
            v91 = *v93;
          ++v92;
          ++v93;
          if (v92 == v1024)
          {
            v1012 = (float *)(v1004 + v74);
            v95 = (uint64_t **)v1047;
            if (v1047 == (uint64_t *)&v1048)
              goto LABEL_431;
LABEL_117:
            v96 = v91;
            while (2)
            {
              v1035 = v95;
              v1039 = (char *)v95[7];
              v98 = (__int128 *)*((_QWORD *)&v1052 + 1);
              v97 = (__int128 *)v1052;
              v99 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >> 3);
              if (v99 >= v1054)
              {
                if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >= 105)
                {
                  v103 = 0;
                  *(_OWORD *)v1058 = *(_OWORD *)v1052;
                  *(_OWORD *)&v1058[16] = *(_OWORD *)(v1052 + 16);
                  *(_OWORD *)&v1058[32] = *(_OWORD *)(v1052 + 32);
                  v1059 = *(_OWORD *)(v1052 + 48);
                  v104 = *(_QWORD *)(v1052 + 72);
                  v105 = *(_QWORD *)(v1052 + 80);
                  v106 = *(_QWORD *)(v1052 + 88);
                  v107 = *(_QWORD *)(v1052 + 96);
                  *(_QWORD *)(v1052 + 80) = 0;
                  *((_QWORD *)v97 + 11) = 0;
                  *((_QWORD *)v97 + 12) = 0;
                  v108 = v97;
                  do
                  {
                    v113 = (double *)v108;
                    v114 = v103 + 1;
                    v108 = (__int128 *)((char *)v108 + 104 * v103 + 104);
                    v115 = 2 * v103;
                    v103 = (2 * v103) | 1;
                    v116 = v115 + 2;
                    if (v116 < v99
                      && v113[13 * v114 + 4] + v113[13 * v114 + 6] > *((double *)v108 + 17) + *((double *)v108 + 19))
                    {
                      v108 = (__int128 *)((char *)v108 + 104);
                      v103 = v116;
                    }
                    v109 = *v108;
                    v110 = v108[1];
                    v111 = v108[3];
                    *((_OWORD *)v113 + 2) = v108[2];
                    *((_OWORD *)v113 + 3) = v111;
                    *(_OWORD *)v113 = v109;
                    *((_OWORD *)v113 + 1) = v110;
                    v112 = v108[5];
                    v113[9] = *((double *)v108 + 9);
                    *((_OWORD *)v113 + 5) = v112;
                    v113[12] = *((double *)v108 + 12);
                    *((_QWORD *)v108 + 10) = 0;
                    *((_QWORD *)v108 + 11) = 0;
                    *((_QWORD *)v108 + 12) = 0;
                  }
                  while (v103 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                  v120 = (__int128 *)((char *)v98 - 104);
                  if ((__int128 *)((char *)v98 - 104) == v108)
                  {
                    v147 = *(_OWORD *)v1058;
                    v148 = *(_OWORD *)&v1058[16];
                    v149 = v1059;
                    v108[2] = *(_OWORD *)&v1058[32];
                    v108[3] = v149;
                    *v108 = v147;
                    v108[1] = v148;
                    *((_QWORD *)v108 + 9) = v104;
                    *((_QWORD *)v108 + 10) = v105;
                    *((_QWORD *)v108 + 11) = v106;
                    *((_QWORD *)v108 + 12) = v107;
                  }
                  else
                  {
                    v121 = *v120;
                    v122 = *(__int128 *)((char *)v98 - 88);
                    v123 = *(__int128 *)((char *)v98 - 56);
                    v108[2] = *(__int128 *)((char *)v98 - 72);
                    v108[3] = v123;
                    *v108 = v121;
                    v108[1] = v122;
                    *((_QWORD *)v108 + 9) = *((_QWORD *)v98 - 4);
                    v108[5] = *(__int128 *)((char *)v98 - 24);
                    *((_QWORD *)v108 + 12) = *((_QWORD *)v98 - 1);
                    *v120 = *(_OWORD *)v1058;
                    *(__int128 *)((char *)v98 - 88) = *(_OWORD *)&v1058[16];
                    *(__int128 *)((char *)v98 - 72) = *(_OWORD *)&v1058[32];
                    *(__int128 *)((char *)v98 - 56) = v1059;
                    *((_QWORD *)v98 - 4) = v104;
                    *((_QWORD *)v98 - 3) = v105;
                    *((_QWORD *)v98 - 2) = v106;
                    *((_QWORD *)v98 - 1) = v107;
                    v124 = (char *)v108 - (char *)v97 + 104;
                    if (v124 >= 105)
                    {
                      v125 = (v124 / 0x68uLL - 2) >> 1;
                      v126 = *((double *)v108 + 4);
                      v127 = *((double *)v108 + 6);
                      if (*((double *)v97 + 13 * v125 + 4) + *((double *)v97 + 13 * v125 + 6) > v126 + v127)
                      {
                        v128 = v108[1];
                        v1060 = *v108;
                        v1061 = v128;
                        v129 = *((_QWORD *)v108 + 5);
                        v1028 = *((_QWORD *)v108 + 7);
                        v130 = *((_QWORD *)v108 + 9);
                        v1019 = v108[5];
                        v131 = *((_QWORD *)v108 + 12);
                        *((_QWORD *)v108 + 11) = 0;
                        *((_QWORD *)v108 + 12) = 0;
                        *((_QWORD *)v108 + 10) = 0;
                        do
                        {
                          v132 = (__int128 *)((char *)v97 + 104 * v125);
                          v133 = *v132;
                          v134 = v132[1];
                          v135 = v132[3];
                          v108[2] = v132[2];
                          v108[3] = v135;
                          *v108 = v133;
                          v108[1] = v134;
                          *((_QWORD *)v108 + 9) = *((_QWORD *)v132 + 9);
                          v137 = (void **)(v108 + 5);
                          v136 = *((_QWORD *)v108 + 10);
                          if (v136)
                          {
                            v138 = *((_QWORD *)v108 + 11);
                            v139 = (void *)*((_QWORD *)v108 + 10);
                            if (v138 != v136)
                            {
                              do
                              {
                                v140 = *(std::__shared_weak_count **)(v138 - 8);
                                if (v140)
                                {
                                  v141 = (unint64_t *)&v140->__shared_owners_;
                                  do
                                    v142 = __ldaxr(v141);
                                  while (__stlxr(v142 - 1, v141));
                                  if (!v142)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                                    std::__shared_weak_count::__release_weak(v140);
                                  }
                                }
                                v138 -= 16;
                              }
                              while (v138 != v136);
                              v139 = *v137;
                            }
                            *((_QWORD *)v108 + 11) = v136;
                            operator delete(v139);
                            *v137 = 0;
                            *((_QWORD *)v108 + 11) = 0;
                            *((_QWORD *)v108 + 12) = 0;
                          }
                          v143 = (uint64_t)v97 + 104 * v125;
                          v144 = (_QWORD *)(v143 + 80);
                          v108[5] = *(_OWORD *)(v143 + 80);
                          v146 = *(_QWORD *)(v143 + 96);
                          v145 = (_QWORD *)(v143 + 96);
                          *((_QWORD *)v108 + 12) = v146;
                          *(v145 - 1) = 0;
                          *v145 = 0;
                          *v144 = 0;
                          if (!v125)
                            break;
                          v125 = (v125 - 1) >> 1;
                          v108 = v132;
                        }
                        while (*((double *)v97 + 13 * v125 + 4) + *((double *)v97 + 13 * v125 + 6) > v126 + v127);
                        *v132 = v1060;
                        v132[1] = v1061;
                        *((double *)v132 + 4) = v126;
                        *((_QWORD *)v132 + 5) = v129;
                        *((double *)v132 + 6) = v127;
                        *((_QWORD *)v132 + 7) = v1028;
                        *((_QWORD *)v132 + 9) = v130;
                        *(_OWORD *)v144 = v1019;
                        *v145 = v131;
                        i = v1024;
                      }
                    }
                  }
                  v98 = (__int128 *)*((_QWORD *)&v1052 + 1);
                }
                v150 = *((_QWORD *)v98 - 3);
                v151 = *((_QWORD *)v98 - 2);
                v101 = (char *)v98;
                if (v151 != v150)
                {
                  do
                  {
                    v152 = *(std::__shared_weak_count **)(v151 - 8);
                    if (v152)
                    {
                      v153 = (unint64_t *)&v152->__shared_owners_;
                      do
                        v154 = __ldaxr(v153);
                      while (__stlxr(v154 - 1, v153));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                        std::__shared_weak_count::__release_weak(v152);
                      }
                    }
                    v151 -= 16;
                  }
                  while (v151 != v150);
                  v101 = (char *)*((_QWORD *)&v1052 + 1);
                }
                *((_QWORD *)v98 - 2) = v150;
                v102 = v1034;
              }
              else
              {
                v100 = 0uLL;
                if (*((_QWORD *)&v1052 + 1) >= v1053)
                {
                  v117 = v99 + 1;
                  if ((unint64_t)(v99 + 1) > 0x276276276276276)
                    sub_1BE61F930();
                  if (0x9D89D89D89D89D8ALL * ((uint64_t)(v1053 - v1052) >> 3) > v117)
                    v117 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v1053 - v1052) >> 3);
                  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v1053 - v1052) >> 3)) >= 0x13B13B13B13B13BLL)
                    v118 = 0x276276276276276;
                  else
                    v118 = v117;
                  if (v118)
                  {
                    if (v118 > 0x276276276276276)
                      sub_1BE61F100();
                    v119 = (char *)operator new(104 * v118);
                    v100 = 0uLL;
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v155 = &v119[104 * v99];
                  *((_OWORD *)v155 + 3) = v100;
                  *((_OWORD *)v155 + 4) = v100;
                  *((_OWORD *)v155 + 1) = v100;
                  *((_OWORD *)v155 + 2) = v100;
                  *(_OWORD *)v155 = v100;
                  *((_QWORD *)v155 + 8) = &off_1E77F0FC8;
                  *((_QWORD *)v155 + 11) = 0;
                  *((_QWORD *)v155 + 12) = 0;
                  *((_QWORD *)v155 + 10) = 0;
                  v101 = v155 + 104;
                  if (v98 == v97)
                  {
                    *(_QWORD *)&v1052 = &v119[104 * v99];
                    *((_QWORD *)&v1052 + 1) = v155 + 104;
                    v1053 = (unint64_t)&v119[104 * v118];
                    i = v1024;
                  }
                  else
                  {
                    v156 = 0;
                    do
                    {
                      v157 = &v155[v156];
                      v158 = (char *)v98 + v156;
                      v159 = *(__int128 *)((char *)v98 + v156 - 104);
                      v160 = *(__int128 *)((char *)v98 + v156 - 88);
                      v161 = *(__int128 *)((char *)v98 + v156 - 72);
                      *(_OWORD *)(v157 - 56) = *(__int128 *)((char *)v98 + v156 - 56);
                      *(_OWORD *)(v157 - 72) = v161;
                      *(_OWORD *)(v157 - 88) = v160;
                      *(_OWORD *)(v157 - 104) = v159;
                      *((_QWORD *)v157 - 4) = *(_QWORD *)((char *)v98 + v156 - 32);
                      *((_QWORD *)v157 - 5) = &off_1E77F0FC8;
                      *((_QWORD *)v157 - 2) = 0;
                      *((_QWORD *)v157 - 1) = 0;
                      *(_OWORD *)(v157 - 24) = *(__int128 *)((char *)v98 + v156 - 24);
                      *((_QWORD *)v157 - 1) = *(_QWORD *)((char *)v98 + v156 - 8);
                      *((_QWORD *)v158 - 3) = 0;
                      *((_QWORD *)v158 - 2) = 0;
                      *((_QWORD *)v158 - 1) = 0;
                      v156 -= 104;
                    }
                    while ((__int128 *)((char *)v98 + v156) != v97);
                    v162 = (__int128 *)*((_QWORD *)&v1052 + 1);
                    v98 = (__int128 *)v1052;
                    *(_QWORD *)&v1052 = &v155[v156];
                    *((_QWORD *)&v1052 + 1) = v155 + 104;
                    v1053 = (unint64_t)&v119[104 * v118];
                    for (i = v1024; v162 != v98; v162 = (__int128 *)((char *)v162 - 104))
                    {
                      *((_QWORD *)v162 - 5) = &off_1E77F0FC8;
                      v164 = *((_QWORD *)v162 - 3);
                      if (v164)
                      {
                        v165 = *((_QWORD *)v162 - 2);
                        v163 = (void *)*((_QWORD *)v162 - 3);
                        if (v165 != v164)
                        {
                          do
                          {
                            v166 = *(std::__shared_weak_count **)(v165 - 8);
                            if (v166)
                            {
                              v167 = (unint64_t *)&v166->__shared_owners_;
                              do
                                v168 = __ldaxr(v167);
                              while (__stlxr(v168 - 1, v167));
                              if (!v168)
                              {
                                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                std::__shared_weak_count::__release_weak(v166);
                              }
                            }
                            v165 -= 16;
                          }
                          while (v165 != v164);
                          v163 = (void *)*((_QWORD *)v162 - 3);
                        }
                        *((_QWORD *)v162 - 2) = v164;
                        operator delete(v163);
                      }
                    }
                  }
                  v102 = v1034;
                  if (v98)
                    operator delete(v98);
                }
                else
                {
                  *(_OWORD *)(*((_QWORD *)&v1052 + 1) + 48) = 0uLL;
                  v98[4] = 0uLL;
                  v98[1] = 0uLL;
                  v98[2] = 0uLL;
                  *v98 = 0uLL;
                  *((_QWORD *)v98 + 8) = &off_1E77F0FC8;
                  *((_QWORD *)v98 + 11) = 0;
                  *((_QWORD *)v98 + 12) = 0;
                  v101 = (char *)v98 + 104;
                  *((_QWORD *)v98 + 10) = 0;
                  v102 = v1034;
                }
                *((_QWORD *)&v1052 + 1) = v101;
              }
              v169 = (unint64_t *)(v101 - 104);
              v170 = *(_OWORD *)v1039;
              v171 = *((_OWORD *)v1039 + 1);
              v172 = *((_OWORD *)v1039 + 2);
              *(_OWORD *)(v101 - 56) = *((_OWORD *)v1039 + 3);
              *(_OWORD *)(v101 - 72) = v172;
              *(_OWORD *)(v101 - 88) = v171;
              *(_OWORD *)(v101 - 104) = v170;
              *((_QWORD *)v101 - 4) = *((_QWORD *)v1039 + 9);
              v1029 = v101;
              if (v101 - 104 == v1039)
                goto LABEL_251;
              v173 = v101;
              v174 = v101 - 24;
              v175 = (char *)*((_QWORD *)v101 - 3);
              v177 = (char *)*((_QWORD *)v1039 + 10);
              v176 = (char *)*((_QWORD *)v1039 + 11);
              v178 = (v176 - v177) >> 4;
              v179 = *((_QWORD *)v174 + 2);
              if (v178 > (v179 - (uint64_t)v175) >> 4)
              {
                if (v175)
                {
                  v180 = (char *)*((_QWORD *)v1029 - 2);
                  v181 = v175;
                  if (v180 != v175)
                  {
                    v182 = v169;
                    do
                    {
                      v183 = (std::__shared_weak_count *)*((_QWORD *)v180 - 1);
                      if (v183)
                      {
                        v184 = (unint64_t *)&v183->__shared_owners_;
                        do
                          v185 = __ldaxr(v184);
                        while (__stlxr(v185 - 1, v184));
                        if (!v185)
                        {
                          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                          std::__shared_weak_count::__release_weak(v183);
                        }
                      }
                      v180 -= 16;
                    }
                    while (v180 != v175);
                    v181 = *(char **)v174;
                    v169 = v182;
                  }
                  *((_QWORD *)v1029 - 2) = v175;
                  operator delete(v181);
                  v179 = 0;
                  *(_QWORD *)v174 = 0;
                  *((_QWORD *)v174 + 1) = 0;
                  *((_QWORD *)v174 + 2) = 0;
                }
                if (v176 - v177 < 0)
                  goto LABEL_1303;
                v205 = v179 >> 3;
                if (v179 >> 3 <= v178)
                  v205 = (v176 - v177) >> 4;
                v206 = (unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v205;
                if (v206 >> 60)
LABEL_1303:
                  sub_1BE61F930();
                v207 = operator new(16 * v206);
                v101 = v1029;
                *((_QWORD *)v1029 - 3) = v207;
                *((_QWORD *)v1029 - 2) = v207;
                *((_QWORD *)v1029 - 1) = &v207[2 * v206];
                if (v177 == v176)
                {
                  v102 = v1034;
                  i = v1024;
                }
                else
                {
                  v102 = v1034;
                  i = v1024;
                  do
                  {
                    *v207 = *(_QWORD *)v177;
                    v208 = *((_QWORD *)v177 + 1);
                    v207[1] = v208;
                    if (v208)
                    {
                      v209 = (unint64_t *)(v208 + 8);
                      do
                        v210 = __ldxr(v209);
                      while (__stxr(v210 + 1, v209));
                    }
                    v177 += 16;
                    v207 += 2;
                  }
                  while (v177 != v176);
                }
                *((_QWORD *)v1029 - 2) = v207;
                if (!*((_QWORD *)v1029 - 6))
                {
LABEL_241:
                  v211 = *((double *)v101 - 11);
                  goto LABEL_393;
                }
LABEL_252:
                v216 = *v169;
                v217 = v1015;
                if (!v1015)
                {
                  v218 = v1012[v216];
                  goto LABEL_261;
                }
                if (v1015 != i)
                {
                  v217 = v1008;
                  while (*v217 != (float)v216)
                  {
                    if (++v217 == i)
                    {
                      v217 = i;
                      break;
                    }
                  }
                }
                if (v217 == i)
                {
                  v218 = -INFINITY;
                  v219 = *(_QWORD **)(v102 + 80);
                  v220 = *(_QWORD **)(v102 + 88);
                  if (v219 != v220)
                    goto LABEL_266;
                }
                else
                {
                  v218 = v1012[v217 - v1015];
LABEL_261:
                  if (v218 > -0.0010005)
                    v218 = -0.0010005;
                  v219 = *(_QWORD **)(v102 + 80);
                  v220 = *(_QWORD **)(v102 + 88);
                  if (v219 != v220)
                  {
LABEL_266:
                    while (*v219 != v216)
                    {
                      if (++v219 == v220)
                      {
                        v219 = v220;
                        break;
                      }
                    }
                  }
                }
                v221 = v218;
                if (v219 != v220 && *(_BYTE *)(v102 + 72) && *((double *)v101 - 8) < v221)
                {
                  *((_QWORD *)v101 - 12) = *((_QWORD *)&v1051 + 1);
                  *((double *)v101 - 8) = v221;
                }
                v222 = (unint64_t *)__p;
                v1056 = (unint64_t *)__p;
                v223 = v1035[4];
                v224 = v1035[5];
                v1020 = v169;
                if (v223 == v224)
                {
                  v230 = (unint64_t *)__p;
                  v248 = v1048;
                  if (v1048)
                    goto LABEL_314;
                  goto LABEL_392;
                }
                v225 = v224 - v223 - 1;
                v226 = (char *)v1057;
                if (v225 <= (uint64_t)(v1057 - (_QWORD)__p) >> 3)
                {
                  v227 = (char *)__p;
                  v228 = v1035[5];
                  v229 = v1035[4] + 1;
                  if (v229 == v228)
                    goto LABEL_313;
                }
                else
                {
                  if (v225 >> 61)
                    goto LABEL_1293;
                  v227 = (char *)operator new(8 * v225);
                  v226 = &v227[8 * v225];
                  __p = v227;
                  v1056 = (unint64_t *)v227;
                  v1057 = (unint64_t)v226;
                  if (v222)
                    operator delete(v222);
                  v228 = v1035[5];
                  v229 = v1035[4] + 1;
                  if (v229 == v228)
                  {
LABEL_313:
                    v222 = (unint64_t *)v227;
                    v230 = (unint64_t *)v227;
                    v101 = v1029;
                    v248 = v1048;
                    if (!v1048)
                      goto LABEL_392;
                    goto LABEL_314;
                  }
                }
                v222 = v1056;
                v230 = (unint64_t *)v227;
LABEL_281:
                while (v227 < v226)
                {
                  v231 = *v229++;
                  *(_QWORD *)v227 = v231;
                  v227 += 8;
                  v222 = (unint64_t *)v227;
                  if (v229 == v228)
                    goto LABEL_308;
                }
                v232 = (v227 - (char *)v230) >> 3;
                v233 = v232 + 1;
                if ((unint64_t)(v232 + 1) >> 61)
                {
                  v1056 = v222;
                  v1057 = (unint64_t)v226;
                  __p = v230;
LABEL_1293:
                  sub_1BE61F930();
                }
                if ((v226 - (char *)v230) >> 2 > v233)
                  v233 = (v226 - (char *)v230) >> 2;
                if ((unint64_t)(v226 - (char *)v230) >= 0x7FFFFFFFFFFFFFF8)
                  v234 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v234 = v233;
                if (v234)
                {
                  if (v234 >> 61)
                  {
                    v1056 = v222;
                    v1057 = (unint64_t)v226;
                    __p = v230;
                    sub_1BE61F100();
                  }
                  v235 = operator new(8 * v234);
                  v236 = (unint64_t *)&v235[8 * v232];
                  *v236 = *v229;
                  v222 = v236 + 1;
                  v237 = v227 - (char *)v230;
                  if (v227 != (char *)v230)
                  {
LABEL_291:
                    v238 = v237 - 8;
                    if (v238 < 0x168
                      || (v241 = (v227 - 8 - (char *)v230) & 0xFFFFFFFFFFFFFFF8,
                          &v235[v227 - (char *)v230 - 8 - v241] > &v235[v227 - (char *)v230 - 8])
                      || &v227[-v241 - 8] > v227 - 8
                      || (unint64_t)((char *)v230 - v235) < 0x20)
                    {
                      v239 = v227;
                    }
                    else
                    {
                      v242 = (v238 >> 3) + 1;
                      v243 = 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
                      v239 = &v227[-v243];
                      v236 = (unint64_t *)((char *)v236 - v243);
                      v244 = &v235[8 * v232 - 16];
                      v245 = (__int128 *)(v227 - 16);
                      v246 = v242 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v247 = *v245;
                        *(v244 - 1) = *(v245 - 1);
                        *v244 = v247;
                        v244 -= 2;
                        v245 -= 2;
                        v246 -= 4;
                      }
                      while (v246);
                      if (v242 == (v242 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_294:
                        v226 = &v235[8 * v234];
                        if (v230)
                          goto LABEL_295;
                        goto LABEL_296;
                      }
                    }
                    do
                    {
                      v240 = *((_QWORD *)v239 - 1);
                      v239 -= 8;
                      *--v236 = v240;
                    }
                    while (v239 != (char *)v230);
                    goto LABEL_294;
                  }
                }
                else
                {
                  v235 = 0;
                  v236 = (unint64_t *)(8 * v232);
                  *(_QWORD *)(8 * v232) = *v229;
                  v222 = (unint64_t *)(8 * v232 + 8);
                  v237 = v227 - (char *)v230;
                  if (v227 != (char *)v230)
                    goto LABEL_291;
                }
                v226 = &v235[8 * v234];
                if (v230)
LABEL_295:
                  operator delete(v230);
LABEL_296:
                v230 = v236;
                ++v229;
                v227 = (char *)v222;
                if (v229 == v228)
                {
LABEL_308:
                  v1056 = v222;
                  v1057 = (unint64_t)v226;
                  __p = v230;
                  v101 = v1029;
                  v248 = v1048;
                  if (!v1048)
                    goto LABEL_392;
LABEL_314:
                  if (v230 == v222)
                  {
                    do
                    {
                      v249 = (uint64_t **)v248;
                      v248 = (uint64_t *)*v248;
                    }
                    while (v248);
                  }
                  else
                  {
                    v249 = &v1048;
                    do
                    {
LABEL_317:
                      v250 = (unint64_t *)v248[4];
                      v251 = v230 + 1;
                      do
                      {
                        if (v250 == (unint64_t *)v248[5] || (v252 = *v250, v253 = *(v251 - 1), *v250 < v253))
                        {
                          v248 = (uint64_t *)v248[1];
                          if (!v248)
                            goto LABEL_328;
                          goto LABEL_317;
                        }
                        ++v250;
                      }
                      while (v253 >= v252 && v251++ != v222);
                      v249 = (uint64_t **)v248;
                      v248 = (uint64_t *)*v248;
                    }
                    while (v248);
                  }
LABEL_328:
                  if (v249 == &v1048)
                    goto LABEL_392;
                  v256 = v249[4];
                  v255 = v249[5];
                  if (v256 != v255)
                  {
                    v257 = v256 + 1;
                    while (v230 != v222)
                    {
                      v258 = *v230;
                      v259 = *(v257 - 1);
                      if (*v230 < v259)
                        break;
                      ++v230;
                      if (v259 < v258 || v257++ == v255)
                        goto LABEL_338;
                    }
                    goto LABEL_392;
                  }
LABEL_338:
                  v261 = v249[7];
                  v262 = (uint64_t *)*((_QWORD *)v101 - 6);
                  if (v262 == v261 || v261 == 0 || v262 == 0)
                  {
LABEL_352:
                    v268 = *((_QWORD *)v101 - 13);
                    v269 = 4;
                    if (v268 == *v262)
                      v269 = 3;
                    v270 = *(double *)&v261[v269];
                    v271 = *((double *)v101 - 11);
                    if (v271 <= v270)
                      v272 = *((double *)v101 - 11);
                    else
                      v272 = *(double *)&v261[v269];
                    if (v271 <= v270)
                      v273 = *(double *)&v261[v269];
                    else
                      v273 = *((double *)v101 - 11);
                    if (v272 > -INFINITY)
                    {
                      v274 = exp(v272 - v273);
                      v273 = v273 + log1p(v274);
                    }
                    *((double *)v101 - 11) = v273;
                    if (*((double *)v261 + 4) > *((double *)v262 + 4))
                    {
                      *((_QWORD *)v101 - 6) = v261;
                      if (*((_QWORD *)v101 - 12) <= (unint64_t)v261[1])
                      {
                        v275 = *(_QWORD **)(v1034 + 80);
                        v276 = *(_QWORD **)(v1034 + 88);
                        if (v275 != v276)
                        {
                          while (*v275 != v268)
                          {
                            if (++v275 == v276)
                            {
                              v275 = *(_QWORD **)(v1034 + 88);
                              break;
                            }
                          }
                        }
                        if (v275 != v276)
                        {
                          *((_QWORD *)v101 - 12) = *((_QWORD *)&v1051 + 1);
                          *((double *)v101 - 8) = v221;
                        }
                      }
                    }
                    goto LABEL_392;
                  }
                  v265 = v1020;
                  while (1)
                  {
                    v266 = *v265;
                    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v1018 + 48))(v1018, *v262) == 2
                      || (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v1018 + 48))(v1018, v266) == 1)
                    {
                      break;
                    }
                    v267 = (uint64_t *)v262[7];
                    if (v267)
                    {
                      v261 = (uint64_t *)v261[7];
                      if (v261)
                      {
                        v265 = (unint64_t *)v262;
                        v262 = (uint64_t *)v262[7];
                        if (v267 != v261)
                          continue;
                      }
                    }
                    v262 = (uint64_t *)*((_QWORD *)v101 - 6);
                    v261 = v249[7];
                    goto LABEL_352;
                  }
                  v280 = *((_QWORD *)v101 - 13);
                  v281 = v249[7];
                  v282 = 4;
                  if (v280 == **((_QWORD **)v101 - 6))
                    v282 = 3;
                  v283 = *(double *)&v281[v282];
                  v284 = *((double *)v101 - 11) + v221;
                  v285 = *((double *)v1039 + 4) + v96;
                  if (v284 <= v285)
                    v286 = *((double *)v101 - 11) + v221;
                  else
                    v286 = *((double *)v1039 + 4) + v96;
                  if (v284 <= v285)
                    v287 = *((double *)v1039 + 4) + v96;
                  else
                    v287 = *((double *)v101 - 11) + v221;
                  if (v286 > -INFINITY)
                  {
                    v288 = exp(v286 - v287);
                    v287 = v287 + log1p(v288);
                  }
                  v289 = v283 + v221;
                  if (v283 + v221 <= v287)
                  {
LABEL_392:
                    v211 = *((double *)v101 - 11) + v221;
                    *((double *)v101 - 11) = v211;
                    i = v1024;
LABEL_393:
                    v290 = *((double *)v1039 + 4) + v96;
                    *((double *)v101 - 10) = v290;
                    if (v290 <= v211)
                      v291 = v290;
                    else
                      v291 = v211;
                    if (v290 <= v211)
                      v292 = v211;
                    else
                      v292 = v290;
                    if (v291 > -INFINITY)
                    {
                      v293 = exp(v291 - v292);
                      v292 = v292 + log1p(v293);
                    }
                    *((double *)v101 - 9) = v292;
                  }
                  else
                  {
                    v320 = *((_QWORD *)&v1051 + 1);
                    *((_QWORD *)v101 - 12) = *((_QWORD *)&v1051 + 1);
                    *((_QWORD *)v101 - 6) = v281;
                    *((_QWORD *)v101 - 10) = 0xFFF0000000000000;
                    *((double *)v101 - 11) = v289;
                    *((double *)v101 - 9) = v289;
                    v321 = *(_QWORD **)(v1034 + 80);
                    v322 = *(_QWORD **)(v1034 + 88);
                    if (v321 != v322)
                    {
                      while (*v321 != v280)
                      {
                        if (++v321 == v322)
                        {
                          v321 = *(_QWORD **)(v1034 + 88);
                          break;
                        }
                      }
                    }
                    i = v1024;
                    if (v321 != v322)
                    {
                      *((_QWORD *)v101 - 12) = v320;
                      *((double *)v101 - 8) = v221;
                    }
                  }
                  v294 = v1052;
                  if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >= 105)
                  {
                    v295 = ((*((_QWORD *)&v1052 + 1) - (_QWORD)v1052) / 0x68uLL - 2) >> 1;
                    v296 = *(double *)(*((_QWORD *)&v1052 + 1) - 72);
                    v297 = *(double *)(*((_QWORD *)&v1052 + 1) - 56);
                    if (*(double *)(v1052 + 104 * v295 + 32) + *(double *)(v1052 + 104 * v295 + 48) > v296 + v297)
                    {
                      v298 = *((_QWORD *)&v1052 + 1) - 104;
                      *(_OWORD *)v1058 = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 104);
                      *(_OWORD *)&v1058[16] = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 88);
                      v299 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 64);
                      v1040 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 48);
                      v300 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 32);
                      v1030 = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 24);
                      v301 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 8);
                      *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 24) = 0;
                      *(_OWORD *)(*((_QWORD *)&v294 + 1) - 16) = 0uLL;
                      do
                      {
                        v302 = v294 + 104 * v295;
                        v303 = *(_OWORD *)v302;
                        v304 = *(_OWORD *)(v302 + 16);
                        v305 = *(_OWORD *)(v302 + 48);
                        *(_OWORD *)(v298 + 32) = *(_OWORD *)(v302 + 32);
                        *(_OWORD *)(v298 + 48) = v305;
                        *(_OWORD *)v298 = v303;
                        *(_OWORD *)(v298 + 16) = v304;
                        *(_QWORD *)(v298 + 72) = *(_QWORD *)(v302 + 72);
                        v307 = (void **)(v298 + 80);
                        v306 = *(_QWORD *)(v298 + 80);
                        if (v306)
                        {
                          v308 = *(_QWORD *)(v298 + 88);
                          v309 = *(void **)(v298 + 80);
                          if (v308 != v306)
                          {
                            do
                            {
                              v310 = *(std::__shared_weak_count **)(v308 - 8);
                              if (v310)
                              {
                                v311 = (unint64_t *)&v310->__shared_owners_;
                                do
                                  v312 = __ldaxr(v311);
                                while (__stlxr(v312 - 1, v311));
                                if (!v312)
                                {
                                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                                  std::__shared_weak_count::__release_weak(v310);
                                }
                              }
                              v308 -= 16;
                            }
                            while (v308 != v306);
                            v309 = *v307;
                          }
                          *(_QWORD *)(v298 + 88) = v306;
                          operator delete(v309);
                          *v307 = 0;
                          *(_QWORD *)(v298 + 88) = 0;
                          *(_QWORD *)(v298 + 96) = 0;
                        }
                        v313 = v294 + 104 * v295;
                        v314 = (_QWORD *)(v313 + 80);
                        *(_OWORD *)(v298 + 80) = *(_OWORD *)(v313 + 80);
                        v316 = *(_QWORD *)(v313 + 96);
                        v315 = (_QWORD *)(v313 + 96);
                        *(_QWORD *)(v298 + 96) = v316;
                        *(v315 - 1) = 0;
                        *v315 = 0;
                        *v314 = 0;
                        if (!v295)
                          break;
                        v295 = (v295 - 1) >> 1;
                        v298 = v302;
                      }
                      while (*(double *)(v294 + 104 * v295 + 32) + *(double *)(v294 + 104 * v295 + 48) > v296 + v297);
                      *(_OWORD *)v302 = *(_OWORD *)v1058;
                      *(_OWORD *)(v302 + 16) = *(_OWORD *)&v1058[16];
                      *(double *)(v302 + 32) = v296;
                      *(_QWORD *)(v302 + 40) = v299;
                      *(double *)(v302 + 48) = v297;
                      *(_QWORD *)(v302 + 56) = v1040;
                      *(_QWORD *)(v302 + 72) = v300;
                      *(_OWORD *)v314 = v1030;
                      *v315 = v301;
                      i = v1024;
                    }
                  }
                  v317 = v1035;
                  v318 = v1035[1];
                  if (v318)
                  {
                    do
                    {
                      v319 = (uint64_t **)v318;
                      v318 = (uint64_t *)*v318;
                    }
                    while (v318);
                  }
                  else
                  {
                    do
                    {
                      v319 = (uint64_t **)v317[2];
                      v23 = *v319 == (uint64_t *)v317;
                      v317 = v319;
                    }
                    while (!v23);
                  }
                  v95 = v319;
                  if (v319 == &v1048)
                    goto LABEL_431;
                  continue;
                }
                goto LABEL_281;
              }
              break;
            }
            v186 = (char *)*((_QWORD *)v173 - 2);
            v187 = (v186 - v175) >> 4;
            if (v187 < v178)
            {
              v188 = &v177[16 * v187];
              if (v186 != v175)
              {
                v189 = v169;
                do
                {
                  v191 = *(_QWORD *)v177;
                  v190 = *((_QWORD *)v177 + 1);
                  if (v190)
                  {
                    v192 = (unint64_t *)(v190 + 8);
                    do
                      v193 = __ldxr(v192);
                    while (__stxr(v193 + 1, v192));
                  }
                  v194 = (std::__shared_weak_count *)*((_QWORD *)v175 + 1);
                  *(_QWORD *)v175 = v191;
                  *((_QWORD *)v175 + 1) = v190;
                  if (v194)
                  {
                    v195 = (unint64_t *)&v194->__shared_owners_;
                    do
                      v196 = __ldaxr(v195);
                    while (__stlxr(v196 - 1, v195));
                    if (!v196)
                    {
                      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                      std::__shared_weak_count::__release_weak(v194);
                    }
                  }
                  v177 += 16;
                  v175 += 16;
                }
                while (v177 != v188);
                v175 = (char *)*((_QWORD *)v1029 - 2);
                v169 = v189;
              }
              v212 = v175;
              if (v188 != v176)
              {
                v212 = v175;
                do
                {
                  *(_QWORD *)v212 = *(_QWORD *)v188;
                  v213 = *((_QWORD *)v188 + 1);
                  *((_QWORD *)v212 + 1) = v213;
                  if (v213)
                  {
                    v214 = (unint64_t *)(v213 + 8);
                    do
                      v215 = __ldxr(v214);
                    while (__stxr(v215 + 1, v214));
                  }
                  v188 += 16;
                  v212 += 16;
                }
                while (v188 != v176);
              }
              v101 = v1029;
              *((_QWORD *)v1029 - 2) = v212;
              v102 = v1034;
LABEL_251:
              if (!*((_QWORD *)v101 - 6))
                goto LABEL_241;
              goto LABEL_252;
            }
            v197 = v169;
            if (v177 == v176)
            {
              v102 = v1034;
              if (v186 == v175)
                goto LABEL_373;
            }
            else
            {
              v102 = v1034;
              do
              {
                v199 = *(_QWORD *)v177;
                v198 = *((_QWORD *)v177 + 1);
                if (v198)
                {
                  v200 = (unint64_t *)(v198 + 8);
                  do
                    v201 = __ldxr(v200);
                  while (__stxr(v201 + 1, v200));
                }
                v202 = (std::__shared_weak_count *)*((_QWORD *)v175 + 1);
                *(_QWORD *)v175 = v199;
                *((_QWORD *)v175 + 1) = v198;
                if (v202)
                {
                  v203 = (unint64_t *)&v202->__shared_owners_;
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 - 1, v203));
                  if (!v204)
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
                v177 += 16;
                v175 += 16;
              }
              while (v177 != v176);
              v186 = (char *)*((_QWORD *)v1029 - 2);
              if (v186 == v175)
              {
LABEL_373:
                *((_QWORD *)v1029 - 2) = v175;
                v101 = v1029;
                v169 = v197;
                if (!*((_QWORD *)v1029 - 6))
                  goto LABEL_241;
                goto LABEL_252;
              }
            }
            do
            {
              v277 = (std::__shared_weak_count *)*((_QWORD *)v186 - 1);
              if (v277)
              {
                v278 = (unint64_t *)&v277->__shared_owners_;
                do
                  v279 = __ldaxr(v278);
                while (__stlxr(v279 - 1, v278));
                if (!v279)
                {
                  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                  std::__shared_weak_count::__release_weak(v277);
                }
              }
              v186 -= 16;
            }
            while (v186 != v175);
            goto LABEL_373;
          }
        }
        v91 = -0.0010005;
        if (v94 <= -0.0010005)
          v91 = *v93;
        v1012 = (float *)(v1004 + v74);
        v95 = (uint64_t **)v1047;
        if (v1047 != (uint64_t *)&v1048)
          goto LABEL_117;
      }
    }
    else
    {
      v91 = *(float *)(v1004 + v74 + 4 * v88);
      if (v91 > -0.0010005)
        v91 = -0.0010005;
      i = v1024;
      v1012 = (float *)(v1004 + v74);
      v95 = (uint64_t **)v1047;
      if (v1047 != (uint64_t *)&v1048)
        goto LABEL_117;
    }
LABEL_431:
    v323 = (float *)(v1004 + v1003);
    if (*(_BYTE *)(v1034 + 152))
    {
      v324 = *(_QWORD *)(v1034 + 136);
      if (!v324)
      {
        v327 = 0;
        v326 = 0;
        v329 = v1034;
        goto LABEL_720;
      }
      if (v324 >> 60)
        sub_1BE61F930();
      v325 = (float *)operator new(16 * v324);
      v326 = v325;
      v327 = &v325[4 * v324];
      v328 = v325;
      v329 = v1034;
      v330 = v1015;
      v331 = v1012;
      if (((v324 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_1324;
      v332 = ((v324 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v328 = &v325[4 * (v332 & 0x1FFFFFFFFFFFFFFELL)];
      v333 = (char *)(v325 + 4);
      v334 = v332 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_QWORD *)v333 - 2) = 0;
        *(_QWORD *)v333 = 0;
        *((_DWORD *)v333 - 2) = 0;
        *((_DWORD *)v333 + 2) = 0;
        v333 += 32;
        v334 -= 2;
      }
      while (v334);
      if (v332 != (v332 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_1324:
        do
        {
          *(_QWORD *)v328 = 0;
          v328[2] = 0.0;
          v328 += 4;
        }
        while (v328 != v327);
      }
      if (v327 == v325)
      {
LABEL_720:
        v550 = *(float *)(v329 + 128);
        if (*(_BYTE *)(v329 + 144))
        {
          v551 = expf(v550);
          if (v326 == v327)
            goto LABEL_755;
          v552 = v551;
          v553 = 0;
          v554 = 0.0;
          while (1)
          {
            v555 = &v326[v553];
            if (v554 > v552)
              break;
            v554 = v554 + expf(v555[2]);
            v553 += 4;
            if (&v326[v553] == v327)
              goto LABEL_755;
          }
          if (v555 == v327)
            goto LABEL_755;
          v557 = (char *)v327 - (char *)v326 - v553 * 4;
          if ((float *)((char *)v555 + v557) != v327)
          {
            v558 = 4 * (v557 >> 4);
            do
            {
              *(_QWORD *)v555 = *(_QWORD *)&v555[v558];
              v555[2] = v555[v558 + 2];
              v555 += 4;
            }
            while (&v555[v558] != v327);
          }
        }
        else
        {
          if (v326 == v327)
            goto LABEL_755;
          v556 = 0;
          while (1)
          {
            v555 = &v326[v556];
            if (v326[v556 + 2] < v550)
              break;
            v556 += 4;
            if (&v326[v556] == v327)
              goto LABEL_755;
          }
          if (v555 == v327)
            goto LABEL_755;
          v571 = (char *)v327 - (char *)v326 - v556 * 4;
          if ((float *)((char *)v555 + v571) != v327)
          {
            v572 = 4 * (v571 >> 4);
            do
            {
              *(_QWORD *)v555 = *(_QWORD *)&v555[v572];
              v555[2] = v555[v572 + 2];
              v555 += 4;
            }
            while (&v555[v572] != v327);
          }
        }
        v327 = v555;
LABEL_755:
        v573 = (uint64_t **)v1047;
        if (v1047 != (uint64_t *)&v1048)
        {
          v1037 = v326;
          v1032 = v327;
          do
          {
            v574 = __p;
            v575 = (char *)v1057;
            v1056 = (unint64_t *)__p;
            v576 = v573[5] - v573[4] + 1;
            if (v576 <= (uint64_t)(v1057 - (_QWORD)__p) >> 3)
            {
              v577 = (char *)__p;
              if ((unint64_t)__p >= v1057)
                goto LABEL_765;
            }
            else
            {
              if (v576 >> 61)
                goto LABEL_1291;
              v577 = (char *)operator new(8 * v576);
              v575 = &v577[8 * v576];
              __p = v577;
              v1056 = (unint64_t *)v577;
              v1057 = (unint64_t)v575;
              if (v574)
                operator delete(v574);
              if (v577 >= v575)
              {
LABEL_765:
                v579 = (v575 - v577) >> 2;
                if (v579 <= 1)
                  v579 = 1;
                if ((unint64_t)(v575 - v577) >= 0x7FFFFFFFFFFFFFF8)
                  v580 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v580 = v579;
                if (v580 >> 61)
                  goto LABEL_1295;
                v581 = (char *)operator new(8 * v580);
                *(_QWORD *)v581 = 0;
                v578 = v581 + 8;
                v575 = &v581[8 * v580];
                __p = v581;
                v1057 = (unint64_t)v575;
                if (v577)
                  operator delete(v577);
                goto LABEL_773;
              }
            }
            *(_QWORD *)v577 = 0;
            v578 = v577 + 8;
LABEL_773:
            v582 = v1034;
            v583 = v1032;
            v1056 = (unint64_t *)v578;
            v584 = v573[4];
            v585 = v573[5];
            v1022 = v573;
            if (v584 == v585)
              goto LABEL_804;
            v586 = (char *)__p;
            do
            {
              while (v578 < v575)
              {
                v587 = *v584++;
                *(_QWORD *)v578 = v587;
                v578 += 8;
                if (v584 == v585)
                  goto LABEL_803;
              }
              v588 = (v578 - v586) >> 3;
              v589 = v588 + 1;
              if ((unint64_t)(v588 + 1) >> 61)
              {
                v1056 = (unint64_t *)v578;
                v1057 = (unint64_t)v575;
                __p = v586;
LABEL_1291:
                sub_1BE61F930();
              }
              if ((v575 - v586) >> 2 > v589)
                v589 = (v575 - v586) >> 2;
              if ((unint64_t)(v575 - v586) >= 0x7FFFFFFFFFFFFFF8)
                v590 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v590 = v589;
              if (v590)
              {
                if (v590 >> 61)
                {
                  v1056 = (unint64_t *)v578;
                  v1057 = (unint64_t)v575;
                  __p = v586;
LABEL_1295:
                  sub_1BE61F100();
                }
                v591 = operator new(8 * v590);
                v592 = &v591[8 * v588];
                *(_QWORD *)v592 = *v584;
                v593 = (uint64_t)(v592 + 8);
                v594 = v578 - v586;
                if (v578 != v586)
                {
LABEL_786:
                  v595 = v594 - 8;
                  if (v595 < 0x168
                    || (v598 = (v578 - 8 - v586) & 0xFFFFFFFFFFFFFFF8,
                        &v591[v578 - v586 - 8 - v598] > &v591[v578 - v586 - 8])
                    || &v578[-v598 - 8] > v578 - 8
                    || (unint64_t)(v586 - v591) < 0x20)
                  {
                    v596 = v578;
                    v582 = v1034;
                  }
                  else
                  {
                    v599 = (v595 >> 3) + 1;
                    v600 = 8 * (v599 & 0x3FFFFFFFFFFFFFFCLL);
                    v596 = &v578[-v600];
                    v592 -= v600;
                    v601 = &v591[8 * v588 - 16];
                    v602 = v578 - 16;
                    v603 = v599 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v604 = *(_OWORD *)v602;
                      *(v601 - 1) = *((_OWORD *)v602 - 1);
                      *v601 = v604;
                      v601 -= 2;
                      v602 -= 32;
                      v603 -= 4;
                    }
                    while (v603);
                    v582 = v1034;
                    if (v599 == (v599 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_789:
                      v575 = &v591[8 * v590];
                      if (!v586)
                        goto LABEL_791;
LABEL_790:
                      operator delete(v586);
                      goto LABEL_791;
                    }
                  }
                  do
                  {
                    v597 = *((_QWORD *)v596 - 1);
                    v596 -= 8;
                    *((_QWORD *)v592 - 1) = v597;
                    v592 -= 8;
                  }
                  while (v596 != v586);
                  goto LABEL_789;
                }
              }
              else
              {
                v591 = 0;
                v592 = (char *)(8 * v588);
                *(_QWORD *)(8 * v588) = *v584;
                v593 = 8 * v588 + 8;
                v594 = v578 - v586;
                if (v578 != v586)
                  goto LABEL_786;
              }
              v582 = v1034;
              v575 = &v591[8 * v590];
              if (v586)
                goto LABEL_790;
LABEL_791:
              v586 = v592;
              v578 = (char *)v593;
              ++v584;
            }
            while (v584 != v585);
LABEL_803:
            v1056 = (unint64_t *)v578;
            v1057 = (unint64_t)v575;
            __p = v586;
            v583 = v1032;
LABEL_804:
            v326 = v1037;
            v605 = v1037;
            if (v1037 != v583)
            {
              while (1)
              {
                v1043 = *(_QWORD *)v605;
                if (*(_QWORD *)v605 != *(_QWORD *)(v582 + 8))
                {
                  v609 = v605[2];
                  v610 = 0uLL;
                  if (*(double *)(v582 + 120) <= v609)
                  {
                    v611 = (unint64_t *)__p;
                    *(_QWORD *)__p = v1043;
                    v612 = v1048;
                    if (!v1048)
                      goto LABEL_841;
                    if (v611 == v1056)
                    {
                      do
                      {
                        v613 = (uint64_t **)v612;
                        v612 = (uint64_t *)*v612;
                      }
                      while (v612);
                    }
                    else
                    {
                      v613 = &v1048;
                      do
                      {
LABEL_819:
                        v614 = (unint64_t *)v612[4];
                        v615 = v611 + 1;
                        do
                        {
                          if (v614 == (unint64_t *)v612[5] || (v616 = *v614, v617 = *(v615 - 1), *v614 < v617))
                          {
                            v612 = (uint64_t *)v612[1];
                            if (!v612)
                              goto LABEL_830;
                            goto LABEL_819;
                          }
                          ++v614;
                        }
                        while (v617 >= v616 && v615++ != v1056);
                        v613 = (uint64_t **)v612;
                        v612 = (uint64_t *)*v612;
                      }
                      while (v612);
                    }
LABEL_830:
                    if (v613 == &v1048)
                      goto LABEL_841;
                    v620 = v613[4];
                    v619 = v613[5];
                    if (v620 != v619)
                      break;
                  }
                }
LABEL_812:
                v605 += 4;
                if (v605 == v583)
                  goto LABEL_805;
              }
              v621 = v620 + 1;
              while (v611 != v1056)
              {
                v622 = *v611;
                v623 = *(v621 - 1);
                if (*v611 < v623)
                  break;
                ++v611;
                if (v623 < v622 || v621++ == v619)
                  goto LABEL_812;
              }
LABEL_841:
              v626 = (__int128 *)*((_QWORD *)&v1052 + 1);
              v625 = (__int128 *)v1052;
              v627 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >> 3);
              v1026 = v605;
              if (v627 >= v1054)
              {
                if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >= 105)
                {
                  v630 = 0;
                  *(_OWORD *)v1058 = *(_OWORD *)v1052;
                  *(_OWORD *)&v1058[16] = *(_OWORD *)(v1052 + 16);
                  *(_OWORD *)&v1058[32] = *(_OWORD *)(v1052 + 32);
                  v1059 = *(_OWORD *)(v1052 + 48);
                  v631 = *(_QWORD *)(v1052 + 72);
                  v632 = *(_QWORD *)(v1052 + 80);
                  v633 = *(_QWORD *)(v1052 + 88);
                  v634 = *(_QWORD *)(v1052 + 96);
                  *(_QWORD *)(v1052 + 80) = 0;
                  *((_QWORD *)v625 + 11) = 0;
                  *((_QWORD *)v625 + 12) = 0;
                  v635 = v625;
                  do
                  {
                    v640 = (double *)v635;
                    v641 = v630 + 1;
                    v635 = (__int128 *)((char *)v635 + 104 * v630 + 104);
                    v642 = 2 * v630;
                    v630 = (2 * v630) | 1;
                    v643 = v642 + 2;
                    if (v643 < v627
                      && v640[13 * v641 + 4] + v640[13 * v641 + 6] > *((double *)v635 + 17) + *((double *)v635 + 19))
                    {
                      v635 = (__int128 *)((char *)v635 + 104);
                      v630 = v643;
                    }
                    v636 = *v635;
                    v637 = v635[1];
                    v638 = v635[3];
                    *((_OWORD *)v640 + 2) = v635[2];
                    *((_OWORD *)v640 + 3) = v638;
                    *(_OWORD *)v640 = v636;
                    *((_OWORD *)v640 + 1) = v637;
                    v639 = v635[5];
                    v640[9] = *((double *)v635 + 9);
                    *((_OWORD *)v640 + 5) = v639;
                    v640[12] = *((double *)v635 + 12);
                    *((_QWORD *)v635 + 10) = 0;
                    *((_QWORD *)v635 + 11) = 0;
                    *((_QWORD *)v635 + 12) = 0;
                  }
                  while (v630 <= (uint64_t)((unint64_t)(v627 - 2) >> 1));
                  v647 = (__int128 *)((char *)v626 - 104);
                  if ((__int128 *)((char *)v626 - 104) == v635)
                  {
                    v673 = *(_OWORD *)v1058;
                    v674 = *(_OWORD *)&v1058[16];
                    v675 = v1059;
                    v635[2] = *(_OWORD *)&v1058[32];
                    v635[3] = v675;
                    *v635 = v673;
                    v635[1] = v674;
                    *((_QWORD *)v635 + 9) = v631;
                    *((_QWORD *)v635 + 10) = v632;
                    *((_QWORD *)v635 + 11) = v633;
                    *((_QWORD *)v635 + 12) = v634;
                  }
                  else
                  {
                    v648 = *v647;
                    v649 = *(__int128 *)((char *)v626 - 88);
                    v650 = *(__int128 *)((char *)v626 - 56);
                    v635[2] = *(__int128 *)((char *)v626 - 72);
                    v635[3] = v650;
                    *v635 = v648;
                    v635[1] = v649;
                    *((_QWORD *)v635 + 9) = *((_QWORD *)v626 - 4);
                    v635[5] = *(__int128 *)((char *)v626 - 24);
                    *((_QWORD *)v635 + 12) = *((_QWORD *)v626 - 1);
                    *v647 = *(_OWORD *)v1058;
                    *(__int128 *)((char *)v626 - 88) = *(_OWORD *)&v1058[16];
                    *(__int128 *)((char *)v626 - 72) = *(_OWORD *)&v1058[32];
                    *(__int128 *)((char *)v626 - 56) = v1059;
                    *((_QWORD *)v626 - 4) = v631;
                    *((_QWORD *)v626 - 3) = v632;
                    *((_QWORD *)v626 - 2) = v633;
                    *((_QWORD *)v626 - 1) = v634;
                    v651 = (char *)v635 - (char *)v625 + 104;
                    if (v651 >= 105)
                    {
                      v652 = (v651 / 0x68uLL - 2) >> 1;
                      v653 = *((double *)v635 + 4);
                      v654 = *((double *)v635 + 6);
                      if (*((double *)v625 + 13 * v652 + 4) + *((double *)v625 + 13 * v652 + 6) > v653 + v654)
                      {
                        v655 = v635[1];
                        v1060 = *v635;
                        v1061 = v655;
                        v656 = *((_QWORD *)v635 + 5);
                        v1016 = *((_QWORD *)v635 + 7);
                        v657 = *((_QWORD *)v635 + 9);
                        v1013 = v635[5];
                        v1011 = *((_QWORD *)v635 + 12);
                        *((_QWORD *)v635 + 11) = 0;
                        *((_QWORD *)v635 + 12) = 0;
                        *((_QWORD *)v635 + 10) = 0;
                        do
                        {
                          v658 = (__int128 *)((char *)v625 + 104 * v652);
                          v659 = *v658;
                          v660 = v658[1];
                          v661 = v658[3];
                          v635[2] = v658[2];
                          v635[3] = v661;
                          *v635 = v659;
                          v635[1] = v660;
                          *((_QWORD *)v635 + 9) = *((_QWORD *)v658 + 9);
                          v662 = (void **)(v635 + 5);
                          v663 = *((_QWORD *)v635 + 10);
                          if (v663)
                          {
                            v664 = *((_QWORD *)v635 + 11);
                            v665 = (void *)*((_QWORD *)v635 + 10);
                            if (v664 != v663)
                            {
                              do
                              {
                                v666 = *(std::__shared_weak_count **)(v664 - 8);
                                if (v666)
                                {
                                  v667 = (unint64_t *)&v666->__shared_owners_;
                                  do
                                    v668 = __ldaxr(v667);
                                  while (__stlxr(v668 - 1, v667));
                                  if (!v668)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
                                    std::__shared_weak_count::__release_weak(v666);
                                  }
                                }
                                v664 -= 16;
                              }
                              while (v664 != v663);
                              v665 = *v662;
                            }
                            *((_QWORD *)v635 + 11) = v663;
                            operator delete(v665);
                            *v662 = 0;
                            *((_QWORD *)v635 + 11) = 0;
                            *((_QWORD *)v635 + 12) = 0;
                          }
                          v669 = (uint64_t)v625 + 104 * v652;
                          v670 = (_QWORD *)(v669 + 80);
                          v635[5] = *(_OWORD *)(v669 + 80);
                          v672 = *(_QWORD *)(v669 + 96);
                          v671 = (_QWORD *)(v669 + 96);
                          *((_QWORD *)v635 + 12) = v672;
                          *(v671 - 1) = 0;
                          *v671 = 0;
                          *v670 = 0;
                          if (!v652)
                            break;
                          v652 = (v652 - 1) >> 1;
                          v635 = v658;
                        }
                        while (*((double *)v625 + 13 * v652 + 4) + *((double *)v625 + 13 * v652 + 6) > v653 + v654);
                        *v658 = v1060;
                        v658[1] = v1061;
                        *((double *)v658 + 4) = v653;
                        *((_QWORD *)v658 + 5) = v656;
                        *((double *)v658 + 6) = v654;
                        *((_QWORD *)v658 + 7) = v1016;
                        *((_QWORD *)v658 + 9) = v657;
                        *(_OWORD *)v670 = v1013;
                        *v671 = v1011;
                        v583 = v1032;
                      }
                    }
                  }
                  v626 = (__int128 *)*((_QWORD *)&v1052 + 1);
                }
                v676 = *((_QWORD *)v626 - 3);
                v677 = *((_QWORD *)v626 - 2);
                v628 = (char *)v626;
                j = v1022;
                if (v677 != v676)
                {
                  do
                  {
                    v678 = *(std::__shared_weak_count **)(v677 - 8);
                    if (v678)
                    {
                      v679 = (unint64_t *)&v678->__shared_owners_;
                      do
                        v680 = __ldaxr(v679);
                      while (__stlxr(v680 - 1, v679));
                      if (!v680)
                      {
                        ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
                        std::__shared_weak_count::__release_weak(v678);
                      }
                    }
                    v677 -= 16;
                  }
                  while (v677 != v676);
                  v628 = (char *)*((_QWORD *)&v1052 + 1);
                }
                *((_QWORD *)v626 - 2) = v676;
                v582 = v1034;
              }
              else
              {
                if (*((_QWORD *)&v1052 + 1) >= v1053)
                {
                  v644 = v627 + 1;
                  if ((unint64_t)(v627 + 1) > 0x276276276276276)
                    sub_1BE61F930();
                  if (0x9D89D89D89D89D8ALL * ((uint64_t)(v1053 - v1052) >> 3) > v644)
                    v644 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v1053 - v1052) >> 3);
                  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v1053 - v1052) >> 3)) >= 0x13B13B13B13B13BLL)
                    v645 = 0x276276276276276;
                  else
                    v645 = v644;
                  if (v645)
                  {
                    if (v645 > 0x276276276276276)
                      sub_1BE61F100();
                    v646 = (char *)operator new(104 * v645);
                    v610 = 0uLL;
                  }
                  else
                  {
                    v646 = 0;
                  }
                  v681 = &v646[104 * v627];
                  *((_OWORD *)v681 + 3) = v610;
                  *((_OWORD *)v681 + 4) = v610;
                  *((_OWORD *)v681 + 1) = v610;
                  *((_OWORD *)v681 + 2) = v610;
                  v682 = &v646[104 * v645];
                  *(_OWORD *)v681 = v610;
                  *((_QWORD *)v681 + 8) = &off_1E77F0FC8;
                  *((_QWORD *)v681 + 11) = 0;
                  *((_QWORD *)v681 + 12) = 0;
                  *((_QWORD *)v681 + 10) = 0;
                  v628 = v681 + 104;
                  if (v626 == v625)
                  {
                    *(_QWORD *)&v1052 = v681;
                    *((_QWORD *)&v1052 + 1) = v681 + 104;
                    v1053 = (unint64_t)&v646[104 * v645];
                    j = v1022;
                  }
                  else
                  {
                    v683 = 0;
                    do
                    {
                      v684 = &v681[v683];
                      v685 = (char *)v626 + v683;
                      v686 = *(__int128 *)((char *)v626 + v683 - 104);
                      v687 = *(__int128 *)((char *)v626 + v683 - 88);
                      v688 = *(__int128 *)((char *)v626 + v683 - 72);
                      *(_OWORD *)(v684 - 56) = *(__int128 *)((char *)v626 + v683 - 56);
                      *(_OWORD *)(v684 - 72) = v688;
                      *(_OWORD *)(v684 - 88) = v687;
                      *(_OWORD *)(v684 - 104) = v686;
                      *((_QWORD *)v684 - 4) = *(_QWORD *)((char *)v626 + v683 - 32);
                      *((_QWORD *)v684 - 5) = &off_1E77F0FC8;
                      *((_QWORD *)v684 - 2) = 0;
                      *((_QWORD *)v684 - 1) = 0;
                      *(_OWORD *)(v684 - 24) = *(__int128 *)((char *)v626 + v683 - 24);
                      *((_QWORD *)v684 - 1) = *(_QWORD *)((char *)v626 + v683 - 8);
                      *((_QWORD *)v685 - 3) = 0;
                      *((_QWORD *)v685 - 2) = 0;
                      *((_QWORD *)v685 - 1) = 0;
                      v683 -= 104;
                    }
                    while ((__int128 *)((char *)v626 + v683) != v625);
                    v689 = (__int128 *)*((_QWORD *)&v1052 + 1);
                    v626 = (__int128 *)v1052;
                    *(_QWORD *)&v1052 = &v681[v683];
                    *((_QWORD *)&v1052 + 1) = v681 + 104;
                    v1053 = (unint64_t)v682;
                    for (j = v1022; v689 != v626; v689 = (__int128 *)((char *)v689 - 104))
                    {
                      *((_QWORD *)v689 - 5) = &off_1E77F0FC8;
                      v691 = *((_QWORD *)v689 - 3);
                      if (v691)
                      {
                        v692 = *((_QWORD *)v689 - 2);
                        v690 = (void *)*((_QWORD *)v689 - 3);
                        if (v692 != v691)
                        {
                          do
                          {
                            v693 = *(std::__shared_weak_count **)(v692 - 8);
                            if (v693)
                            {
                              v694 = (unint64_t *)&v693->__shared_owners_;
                              do
                                v695 = __ldaxr(v694);
                              while (__stlxr(v695 - 1, v694));
                              if (!v695)
                              {
                                ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
                                std::__shared_weak_count::__release_weak(v693);
                              }
                            }
                            v692 -= 16;
                          }
                          while (v692 != v691);
                          v690 = (void *)*((_QWORD *)v689 - 3);
                        }
                        *((_QWORD *)v689 - 2) = v691;
                        operator delete(v690);
                      }
                    }
                  }
                  v582 = v1034;
                  if (v626)
                    operator delete(v626);
                }
                else
                {
                  *(_OWORD *)(*((_QWORD *)&v1052 + 1) + 48) = 0uLL;
                  v626[4] = 0uLL;
                  v626[1] = 0uLL;
                  v626[2] = 0uLL;
                  *v626 = 0uLL;
                  *((_QWORD *)v626 + 8) = &off_1E77F0FC8;
                  *((_QWORD *)v626 + 11) = 0;
                  *((_QWORD *)v626 + 12) = 0;
                  v628 = (char *)v626 + 104;
                  *((_QWORD *)v626 + 10) = 0;
                  j = v1022;
                }
                *((_QWORD *)&v1052 + 1) = v628;
              }
              v696 = *((_QWORD *)&v1051 + 1);
              *((_QWORD *)v628 - 13) = v1043;
              *((_QWORD *)v628 - 12) = v696;
              *((_QWORD *)v628 - 6) = j[7];
              *((_QWORD *)v628 - 10) = 0xFFF0000000000000;
              v697 = (double *)j[7];
              v698 = *v697;
              v699 = 4;
              if (v1043 == *(_QWORD *)v697)
                v699 = 3;
              v700 = v697[v699] + v609;
              *((double *)v628 - 11) = v700;
              v701 = v697[6];
              v702 = v582;
              v703 = *(_QWORD **)(v582 + 40);
              v704 = *(_QWORD **)(v702 + 48);
              if (v703 == v704)
              {
                v705 = 0.0;
                v713 = -INFINITY;
              }
              else
              {
                v705 = 0.0;
                do
                {
                  v706 = *((_QWORD *)v628 - 3);
                  v707 = *((_QWORD *)v628 - 2);
                  v708 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v703 + 16))(*v703);
                  v709 = v708;
                  v710 = (uint64_t *)*((_QWORD *)v628 - 2);
                  if ((unint64_t)v710 >= *((_QWORD *)v628 - 1))
                  {
                    v326 = v1037;
                    v712 = sub_1BE663188((char **)v628 - 3, v708);
                  }
                  else
                  {
                    *v710 = v708;
                    v711 = (_QWORD *)operator new();
                    *v711 = &off_1E77F1410;
                    v711[1] = 0;
                    v711[2] = 0;
                    v711[3] = v709;
                    v710[1] = (uint64_t)v711;
                    v712 = (char *)(v710 + 2);
                    *((_QWORD *)v628 - 2) = v710 + 2;
                    v326 = v1037;
                  }
                  *((_QWORD *)v628 - 2) = v712;
                  v705 = v705
                       + (*(double (**)(_QWORD, _QWORD, double, _QWORD, uint64_t))(*(_QWORD *)*v703 + 32))(*v703, *(_QWORD *)(*((_QWORD *)v697 + 10) + 16 * ((v707 - v706) >> 4)), COERCE_DOUBLE(*(_QWORD *)&v698), *(_QWORD *)(*((_QWORD *)v628 - 3) + 16 * ((v707 - v706) >> 4)), v1043);
                  ++v703;
                }
                while (v703 != v704);
                v700 = *((double *)v628 - 11);
                v713 = *((double *)v628 - 10);
                v583 = v1032;
              }
              v582 = v1034;
              v714 = *(double *)(v1034 + 32);
              if (v714 <= v705)
                v714 = v705;
              v715 = *(double *)(v1034 + 24) * v714;
              *((double *)v628 - 4) = v715;
              *((double *)v628 - 7) = v701 + v715;
              if (v713 <= v700)
                v716 = v713;
              else
                v716 = v700;
              if (v713 <= v700)
                v717 = v700;
              else
                v717 = v713;
              v605 = v1026;
              if (v716 > -INFINITY)
              {
                v718 = exp(v716 - v717);
                v717 = v717 + log1p(v718);
              }
              *((double *)v628 - 9) = v717;
              v719 = *(_QWORD **)(v1034 + 80);
              v720 = *(_QWORD **)(v1034 + 88);
              if (v719 != v720)
              {
                while (*v719 != *((_QWORD *)v628 - 13))
                {
                  if (++v719 == v720)
                  {
                    v719 = *(_QWORD **)(v1034 + 88);
                    break;
                  }
                }
              }
              if (v719 != v720)
              {
                *((_QWORD *)v628 - 12) = *((_QWORD *)&v1051 + 1);
                *((double *)v628 - 8) = v609;
              }
              v721 = v1052;
              if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >= 105)
              {
                v722 = ((*((_QWORD *)&v1052 + 1) - (_QWORD)v1052) / 0x68uLL - 2) >> 1;
                v723 = *(double *)(*((_QWORD *)&v1052 + 1) - 72);
                v724 = *(double *)(*((_QWORD *)&v1052 + 1) - 56);
                if (*(double *)(v1052 + 104 * v722 + 32) + *(double *)(v1052 + 104 * v722 + 48) > v723 + v724)
                {
                  v725 = *((_QWORD *)&v1052 + 1) - 104;
                  *(_OWORD *)v1058 = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 104);
                  *(_OWORD *)&v1058[16] = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 88);
                  v726 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 64);
                  v1044 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 48);
                  v727 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 32);
                  v1017 = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 24);
                  v1014 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 8);
                  *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 24) = 0;
                  *(_OWORD *)(*((_QWORD *)&v721 + 1) - 16) = 0uLL;
                  do
                  {
                    v728 = v721 + 104 * v722;
                    v729 = *(_OWORD *)v728;
                    v730 = *(_OWORD *)(v728 + 16);
                    v731 = *(_OWORD *)(v728 + 48);
                    *(_OWORD *)(v725 + 32) = *(_OWORD *)(v728 + 32);
                    *(_OWORD *)(v725 + 48) = v731;
                    *(_OWORD *)v725 = v729;
                    *(_OWORD *)(v725 + 16) = v730;
                    *(_QWORD *)(v725 + 72) = *(_QWORD *)(v728 + 72);
                    v732 = (void **)(v725 + 80);
                    v733 = *(_QWORD *)(v725 + 80);
                    if (v733)
                    {
                      v734 = *(_QWORD *)(v725 + 88);
                      v735 = *(void **)(v725 + 80);
                      if (v734 != v733)
                      {
                        do
                        {
                          v736 = *(std::__shared_weak_count **)(v734 - 8);
                          if (v736)
                          {
                            v737 = (unint64_t *)&v736->__shared_owners_;
                            do
                              v738 = __ldaxr(v737);
                            while (__stlxr(v738 - 1, v737));
                            if (!v738)
                            {
                              ((void (*)(std::__shared_weak_count *))v736->__on_zero_shared)(v736);
                              std::__shared_weak_count::__release_weak(v736);
                            }
                          }
                          v734 -= 16;
                        }
                        while (v734 != v733);
                        v735 = *v732;
                        v583 = v1032;
                      }
                      *(_QWORD *)(v725 + 88) = v733;
                      operator delete(v735);
                      *v732 = 0;
                      *(_QWORD *)(v725 + 88) = 0;
                      *(_QWORD *)(v725 + 96) = 0;
                    }
                    v739 = v721 + 104 * v722;
                    v740 = (_QWORD *)(v739 + 80);
                    *(_OWORD *)(v725 + 80) = *(_OWORD *)(v739 + 80);
                    v742 = *(_QWORD *)(v739 + 96);
                    v741 = (_QWORD *)(v739 + 96);
                    *(_QWORD *)(v725 + 96) = v742;
                    *(v741 - 1) = 0;
                    *v741 = 0;
                    *v740 = 0;
                    if (!v722)
                      break;
                    v722 = (v722 - 1) >> 1;
                    v725 = v728;
                  }
                  while (*(double *)(v721 + 104 * v722 + 32) + *(double *)(v721 + 104 * v722 + 48) > v723 + v724);
                  *(_OWORD *)v728 = *(_OWORD *)v1058;
                  *(_OWORD *)(v728 + 16) = *(_OWORD *)&v1058[16];
                  *(double *)(v728 + 32) = v723;
                  *(_QWORD *)(v728 + 40) = v726;
                  *(double *)(v728 + 48) = v724;
                  *(_QWORD *)(v728 + 56) = v1044;
                  *(_QWORD *)(v728 + 72) = v727;
                  *(_OWORD *)v740 = v1017;
                  *v741 = v1014;
                  v582 = v1034;
                  v605 = v1026;
                }
              }
              goto LABEL_812;
            }
LABEL_805:
            v606 = v1022;
            v607 = v1022[1];
            if (v607)
            {
              do
              {
                v608 = (uint64_t **)v607;
                v607 = (uint64_t *)*v607;
              }
              while (v607);
            }
            else
            {
              do
              {
                v608 = (uint64_t **)v606[2];
                v23 = *v608 == (uint64_t *)v606;
                v606 = v608;
              }
              while (!v23);
            }
            v573 = v608;
          }
          while (v608 != &v1048);
        }
        if (v326)
          operator delete(v326);
        goto LABEL_956;
      }
      if (v1007 != v1006)
      {
        v513 = 4 * v1000 - 4;
        v514 = v1015;
        v512 = v325;
        while (1)
        {
          v515 = *v331;
          if (v514)
          {
            v517 = *v514++;
            v518 = v517;
            if (v515 > -0.0010005)
              v515 = -0.0010005;
            v330 = v514;
            *(_QWORD *)v512 = (unint64_t)v518;
            v512[2] = v515;
            ++v331;
            v512 += 4;
            if (!v513)
              goto LABEL_663;
          }
          else
          {
            if (v515 > -0.0010005)
              v515 = -0.0010005;
            v516 = v78;
            v78 = v78 + v71;
            *(_QWORD *)v512 = (unint64_t)v516;
            v512[2] = v515;
            ++v331;
            v512 += 4;
            if (!v513)
              goto LABEL_663;
          }
          v513 -= 4;
          if (v512 == v327)
            goto LABEL_663;
        }
      }
      v512 = v325;
LABEL_663:
      v519 = (char *)v512 - (char *)v325;
      v520 = ((char *)v512 - (char *)v325) >> 4;
      if ((char *)v512 - (char *)v325 >= 17 && (unint64_t)v519 >= 0x20)
      {
        v559 = (unint64_t)(v520 - 2) >> 1;
        v560 = v559;
        do
        {
          v561 = 16 * v560;
          if (v559 >= (16 * v560) >> 4)
          {
            v562 = (v561 >> 3) | 1;
            v563 = &v325[4 * v562];
            if ((v561 >> 3) + 2 < v520 && v563[2] > v563[6])
            {
              v563 += 4;
              v562 = (v561 >> 3) + 2;
            }
            v564 = v563[2];
            v565 = v325[4 * v560 + 2];
            if (v564 <= v565)
            {
              v566 = &v325[(unint64_t)v561 / 4];
              v567 = *(_QWORD *)v566;
              do
              {
                v568 = v566;
                v566 = v563;
                *(_QWORD *)v568 = *(_QWORD *)v563;
                v568[2] = v564;
                if (v559 < v562)
                  break;
                v569 = 2 * v562;
                v562 = (2 * v562) | 1;
                v563 = &v325[4 * v562];
                v570 = v569 + 2;
                if (v570 < v520 && v563[2] > v563[6])
                {
                  v563 += 4;
                  v562 = v570;
                }
                v564 = v563[2];
              }
              while (v564 <= v565);
              *(_QWORD *)v566 = v567;
              v566[2] = v565;
            }
          }
          v537 = v560-- <= 0;
        }
        while (!v537);
      }
      if (v331 == v323)
        goto LABEL_704;
      if (v519 < 32)
      {
        v521 = v325[2];
        do
        {
          v522 = *v331;
          if (*v331 > -0.0010005)
            v522 = -0.0010005;
          if (v522 > v521)
          {
            v523 = v78;
            if (v330)
              v523 = *v330;
            *(_QWORD *)v325 = (unint64_t)v523;
            v325[2] = v522;
            v521 = v522;
          }
          ++v331;
          if (v330)
          {
            ++v330;
          }
          else
          {
            v78 = v78 + v71;
            v330 = 0;
          }
        }
        while (v331 != v323);
LABEL_704:
        if (v519 < 17)
          goto LABEL_720;
        v536 = (unint64_t)v519 >> 4;
        while (1)
        {
          v538 = 0;
          v539 = *(_QWORD *)v326;
          v540 = v326[2];
          v541 = v326;
          do
          {
            v542 = v541;
            v541 += 4 * v538 + 4;
            v543 = 2 * v538;
            v538 = (2 * v538) | 1;
            v544 = v543 + 2;
            if (v544 < v536 && v541[2] > v541[6])
            {
              v541 += 4;
              v538 = v544;
            }
            *(_QWORD *)v542 = *(_QWORD *)v541;
            v542[2] = v541[2];
          }
          while (v538 <= (uint64_t)((unint64_t)(v536 - 2) >> 1));
          v545 = v512 - 4;
          if (v541 != v512 - 4)
          {
            *(_QWORD *)v541 = *((_QWORD *)v512 - 2);
            v541[2] = *(v512 - 2);
            *((_QWORD *)v512 - 2) = v539;
            *(v512 - 2) = v540;
            v546 = (char *)v541 - (char *)v326 + 16;
            if (v546 < 17)
              goto LABEL_707;
            v547 = (((unint64_t)v546 >> 4) - 2) >> 1;
            v548 = v326[4 * v547 + 2];
            v540 = v541[2];
            if (v548 <= v540)
              goto LABEL_707;
            v539 = *(_QWORD *)v541;
            do
            {
              v549 = v541;
              v541 = &v326[4 * v547];
              *(_QWORD *)v549 = *(_QWORD *)v541;
              v549[2] = v548;
              if (!v547)
                break;
              v547 = (v547 - 1) >> 1;
              v548 = v326[4 * v547 + 2];
            }
            while (v548 > v540);
          }
          *(_QWORD *)v541 = v539;
          v541[2] = v540;
LABEL_707:
          v512 = v545;
          v537 = v536-- <= 2;
          if (v537)
            goto LABEL_720;
        }
      }
      while (1)
      {
        v524 = v78;
        if (v330)
          v524 = *v330;
        v525 = *v331;
        if (*v331 > -0.0010005)
          v525 = -0.0010005;
        if (v525 <= v326[2])
          goto LABEL_680;
        v526 = (unint64_t)v524;
        *(_QWORD *)v326 = (unint64_t)v524;
        v326[2] = v525;
        if (v519 != 32)
          break;
        v527 = v326 + 4;
        v528 = 1;
        v529 = v326[6];
        if (v529 <= v525)
          goto LABEL_698;
LABEL_680:
        ++v331;
        if (v330)
        {
          ++v330;
        }
        else
        {
          v78 = v78 + v71;
          v330 = 0;
        }
        if (v331 == v323)
          goto LABEL_704;
      }
      v530 = v326[6];
      v531 = v326[10];
      if (v530 > v531)
        v527 = v326 + 8;
      else
        v527 = v326 + 4;
      v528 = 1;
      if (v530 > v531)
        v528 = 2;
      v529 = v527[2];
      if (v529 > v525)
        goto LABEL_680;
LABEL_698:
      v532 = v326;
      do
      {
        v533 = v532;
        v532 = v527;
        *(_QWORD *)v533 = *(_QWORD *)v527;
        v533[2] = v529;
        if ((uint64_t)((unint64_t)(v520 - 2) >> 1) < v528)
          break;
        v534 = 2 * v528;
        v528 = (2 * v528) | 1;
        v527 = &v326[4 * v528];
        v535 = v534 + 2;
        if (v535 < v520 && v527[2] > v527[6])
        {
          v527 += 4;
          v528 = v535;
        }
        v529 = v527[2];
      }
      while (v529 <= v525);
      *(_QWORD *)v532 = v526;
      v532[2] = v525;
      goto LABEL_680;
    }
    v335 = (uint64_t **)v1047;
    if (v1047 != (uint64_t *)&v1048)
    {
      v1021 = (float *)(v1004 + v1003);
      do
      {
        v336 = __p;
        v337 = (char *)v1057;
        v1056 = (unint64_t *)__p;
        v338 = v335[5] - v335[4] + 1;
        if (v338 <= (uint64_t)(v1057 - (_QWORD)__p) >> 3)
        {
          v339 = (char *)__p;
          if ((unint64_t)__p >= v1057)
            goto LABEL_451;
        }
        else
        {
          if (v338 >> 61)
            goto LABEL_1297;
          v339 = (char *)operator new(8 * v338);
          v337 = &v339[8 * v338];
          __p = v339;
          v1056 = (unint64_t *)v339;
          v1057 = (unint64_t)v337;
          if (v336)
            operator delete(v336);
          if (v339 >= v337)
          {
LABEL_451:
            v341 = (v337 - v339) >> 2;
            if (v341 <= 1)
              v341 = 1;
            if ((unint64_t)(v337 - v339) >= 0x7FFFFFFFFFFFFFF8)
              v342 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v342 = v341;
            if (v342 >> 61)
              goto LABEL_1301;
            v343 = (char *)operator new(8 * v342);
            *(_QWORD *)v343 = 0;
            v340 = v343 + 8;
            v337 = &v343[8 * v342];
            __p = v343;
            v1057 = (unint64_t)v337;
            if (v339)
              operator delete(v339);
            goto LABEL_459;
          }
        }
        *(_QWORD *)v339 = 0;
        v340 = v339 + 8;
LABEL_459:
        v344 = v1034;
        v1056 = (unint64_t *)v340;
        v345 = v335;
        v346 = v335[4];
        v1025 = v345;
        v347 = v345[5];
        if (v346 == v347)
          goto LABEL_490;
        v348 = __p;
        v349 = (char *)__p;
        do
        {
          while (v340 < v337)
          {
            v350 = *v346++;
            *(_QWORD *)v340 = v350;
            v340 += 8;
            if (v346 == v347)
              goto LABEL_489;
          }
          v351 = (v340 - v349) >> 3;
          v352 = v351 + 1;
          if ((unint64_t)(v351 + 1) >> 61)
          {
            __p = v348;
            v1056 = (unint64_t *)v340;
            v1057 = (unint64_t)v337;
LABEL_1297:
            sub_1BE61F930();
          }
          if ((v337 - v349) >> 2 > v352)
            v352 = (v337 - v349) >> 2;
          if ((unint64_t)(v337 - v349) >= 0x7FFFFFFFFFFFFFF8)
            v353 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v353 = v352;
          if (v353)
          {
            if (v353 >> 61)
            {
              __p = v348;
              v1056 = (unint64_t *)v340;
              v1057 = (unint64_t)v337;
LABEL_1301:
              sub_1BE61F100();
            }
            v354 = operator new(8 * v353);
            v348 = &v354[8 * v351];
            *v348 = *v346;
            v355 = (uint64_t)(v348 + 1);
            v356 = v340 - v349;
            if (v340 != v349)
            {
LABEL_472:
              v357 = v356 - 8;
              if (v357 < 0x168
                || (v360 = (v340 - 8 - v349) & 0xFFFFFFFFFFFFFFF8,
                    &v354[v340 - v349 - 8 - v360] > &v354[v340 - v349 - 8])
                || &v340[-v360 - 8] > v340 - 8
                || (unint64_t)(v349 - v354) < 0x20)
              {
                v358 = v340;
                v344 = v1034;
              }
              else
              {
                v361 = (v357 >> 3) + 1;
                v362 = 8 * (v361 & 0x3FFFFFFFFFFFFFFCLL);
                v358 = &v340[-v362];
                v348 = (_QWORD *)((char *)v348 - v362);
                v363 = &v354[8 * v351 - 16];
                v364 = v340 - 16;
                v365 = v361 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v366 = *(_OWORD *)v364;
                  *(v363 - 1) = *((_OWORD *)v364 - 1);
                  *v363 = v366;
                  v363 -= 2;
                  v364 -= 32;
                  v365 -= 4;
                }
                while (v365);
                v344 = v1034;
                if (v361 == (v361 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_475:
                  v337 = &v354[8 * v353];
                  if (!v349)
                    goto LABEL_477;
LABEL_476:
                  operator delete(v349);
                  goto LABEL_477;
                }
              }
              do
              {
                v359 = *((_QWORD *)v358 - 1);
                v358 -= 8;
                *--v348 = v359;
              }
              while (v358 != v349);
              goto LABEL_475;
            }
          }
          else
          {
            v354 = 0;
            v348 = (_QWORD *)(8 * v351);
            *(_QWORD *)(8 * v351) = *v346;
            v355 = 8 * v351 + 8;
            v356 = v340 - v349;
            if (v340 != v349)
              goto LABEL_472;
          }
          v344 = v1034;
          v337 = &v354[8 * v353];
          if (v349)
            goto LABEL_476;
LABEL_477:
          v349 = (char *)v348;
          v340 = (char *)v355;
          ++v346;
        }
        while (v346 != v347);
LABEL_489:
        __p = v348;
        v1056 = (unint64_t *)v340;
        v1057 = (unint64_t)v337;
LABEL_490:
        v367 = v78;
        v368 = v1012;
        v369 = v1015;
        v370 = v1021;
        if (v1007 != v1006)
        {
          while (1)
          {
            v375 = v367;
            if (v369)
              v375 = *v369;
            v1041 = (unint64_t)v375;
            if (*(_QWORD *)(v344 + 8) != (unint64_t)v375)
            {
              v376 = *v368;
              if (*v368 > -0.0010005)
                v376 = -0.0010005;
              v377 = v376;
              if (*(double *)(v344 + 120) <= v376)
              {
                v378 = (unint64_t *)__p;
                *(_QWORD *)__p = v1041;
                v379 = v1048;
                if (!v1048)
                  goto LABEL_536;
                if (v378 == v1056)
                {
                  do
                  {
                    v380 = (uint64_t **)v379;
                    v379 = (uint64_t *)*v379;
                  }
                  while (v379);
                }
                else
                {
                  v380 = &v1048;
                  do
                  {
LABEL_514:
                    v381 = (unint64_t *)v379[4];
                    v382 = v378 + 1;
                    do
                    {
                      if (v381 == (unint64_t *)v379[5] || (v383 = *v381, v384 = *(v382 - 1), *v381 < v384))
                      {
                        v379 = (uint64_t *)v379[1];
                        if (!v379)
                          goto LABEL_525;
                        goto LABEL_514;
                      }
                      ++v381;
                    }
                    while (v384 >= v383 && v382++ != v1056);
                    v380 = (uint64_t **)v379;
                    v379 = (uint64_t *)*v379;
                  }
                  while (v379);
                }
LABEL_525:
                if (v380 == &v1048)
                  goto LABEL_536;
                v387 = v380[4];
                v386 = v380[5];
                if (v387 != v386)
                  break;
              }
            }
LABEL_498:
            ++v368;
            v374 = v369 == 0;
            if (v369)
              ++v369;
            else
              v369 = 0;
            if (v374)
              v367 = v367 + v71;
            if (v368 == v370)
              goto LABEL_491;
          }
          v388 = v387 + 1;
          while (v378 != v1056)
          {
            v389 = *v378;
            v390 = *(v388 - 1);
            if (*v378 < v390)
              break;
            ++v378;
            if (v390 < v389 || v388++ == v386)
              goto LABEL_498;
          }
LABEL_536:
          v393 = (char *)*((_QWORD *)&v1052 + 1);
          v392 = (char *)v1052;
          v394 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >> 3);
          v1036 = v368;
          v1031 = v369;
          if (v394 >= v1054)
          {
            if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >= 105)
            {
              v398 = 0;
              *(_OWORD *)v1058 = *(_OWORD *)v1052;
              *(_OWORD *)&v1058[16] = *(_OWORD *)(v1052 + 16);
              *(_OWORD *)&v1058[32] = *(_OWORD *)(v1052 + 32);
              v1059 = *(_OWORD *)(v1052 + 48);
              v399 = *(_QWORD *)(v1052 + 72);
              v400 = *(_QWORD *)(v1052 + 80);
              v401 = *(_QWORD *)(v1052 + 88);
              v402 = *(_QWORD *)(v1052 + 96);
              *(_QWORD *)(v1052 + 80) = 0;
              *((_QWORD *)v392 + 11) = 0;
              *((_QWORD *)v392 + 12) = 0;
              v403 = v392;
              do
              {
                v408 = v403;
                v409 = v398 + 1;
                v403 += 104 * v398 + 104;
                v410 = 2 * v398;
                v398 = (2 * v398) | 1;
                v411 = v410 + 2;
                if (v411 < v394
                  && *(double *)&v408[104 * v409 + 32] + *(double *)&v408[104 * v409 + 48] > *((double *)v403 + 17)
                                                                                           + *((double *)v403 + 19))
                {
                  v403 += 104;
                  v398 = v411;
                }
                v404 = *(_OWORD *)v403;
                v405 = *((_OWORD *)v403 + 1);
                v406 = *((_OWORD *)v403 + 3);
                *((_OWORD *)v408 + 2) = *((_OWORD *)v403 + 2);
                *((_OWORD *)v408 + 3) = v406;
                *(_OWORD *)v408 = v404;
                *((_OWORD *)v408 + 1) = v405;
                v407 = *((_OWORD *)v403 + 5);
                *((_QWORD *)v408 + 9) = *((_QWORD *)v403 + 9);
                *((_OWORD *)v408 + 5) = v407;
                *((_QWORD *)v408 + 12) = *((_QWORD *)v403 + 12);
                *((_QWORD *)v403 + 10) = 0;
                *((_QWORD *)v403 + 11) = 0;
                *((_QWORD *)v403 + 12) = 0;
              }
              while (v398 <= (uint64_t)((unint64_t)(v394 - 2) >> 1));
              v415 = (__int128 *)(v393 - 104);
              if (v393 - 104 == v403)
              {
                v442 = *(_OWORD *)v1058;
                v443 = *(_OWORD *)&v1058[16];
                v444 = v1059;
                *((_OWORD *)v403 + 2) = *(_OWORD *)&v1058[32];
                *((_OWORD *)v403 + 3) = v444;
                *(_OWORD *)v403 = v442;
                *((_OWORD *)v403 + 1) = v443;
                *((_QWORD *)v403 + 9) = v399;
                *((_QWORD *)v403 + 10) = v400;
                *((_QWORD *)v403 + 11) = v401;
                *((_QWORD *)v403 + 12) = v402;
              }
              else
              {
                v416 = *v415;
                v417 = *(_OWORD *)(v393 - 88);
                v418 = *(_OWORD *)(v393 - 56);
                *((_OWORD *)v403 + 2) = *(_OWORD *)(v393 - 72);
                *((_OWORD *)v403 + 3) = v418;
                *(_OWORD *)v403 = v416;
                *((_OWORD *)v403 + 1) = v417;
                *((_QWORD *)v403 + 9) = *((_QWORD *)v393 - 4);
                *((_OWORD *)v403 + 5) = *(_OWORD *)(v393 - 24);
                *((_QWORD *)v403 + 12) = *((_QWORD *)v393 - 1);
                *v415 = *(_OWORD *)v1058;
                *(_OWORD *)(v393 - 88) = *(_OWORD *)&v1058[16];
                *(_OWORD *)(v393 - 72) = *(_OWORD *)&v1058[32];
                *(_OWORD *)(v393 - 56) = v1059;
                *((_QWORD *)v393 - 4) = v399;
                *((_QWORD *)v393 - 3) = v400;
                *((_QWORD *)v393 - 2) = v401;
                *((_QWORD *)v393 - 1) = v402;
                v419 = v403 - v392 + 104;
                if (v419 >= 105)
                {
                  v420 = (v419 / 0x68uLL - 2) >> 1;
                  v421 = *((double *)v403 + 4);
                  v422 = *((double *)v403 + 6);
                  if (*(double *)&v392[104 * v420 + 32] + *(double *)&v392[104 * v420 + 48] > v421 + v422)
                  {
                    v423 = *((_OWORD *)v403 + 1);
                    v1060 = *(_OWORD *)v403;
                    v1061 = v423;
                    v424 = *((_QWORD *)v403 + 5);
                    v425 = *((_QWORD *)v403 + 7);
                    v426 = *((_QWORD *)v403 + 9);
                    v1009 = *((_OWORD *)v403 + 5);
                    v1005 = *((_QWORD *)v403 + 12);
                    *((_QWORD *)v403 + 11) = 0;
                    *((_QWORD *)v403 + 12) = 0;
                    *((_QWORD *)v403 + 10) = 0;
                    do
                    {
                      v427 = &v392[104 * v420];
                      v428 = *(_OWORD *)v427;
                      v429 = *((_OWORD *)v427 + 1);
                      v430 = *((_OWORD *)v427 + 3);
                      *((_OWORD *)v403 + 2) = *((_OWORD *)v427 + 2);
                      *((_OWORD *)v403 + 3) = v430;
                      *(_OWORD *)v403 = v428;
                      *((_OWORD *)v403 + 1) = v429;
                      *((_QWORD *)v403 + 9) = *((_QWORD *)v427 + 9);
                      v431 = (void **)(v403 + 80);
                      v432 = *((_QWORD *)v403 + 10);
                      if (v432)
                      {
                        v433 = *((_QWORD *)v403 + 11);
                        v434 = (void *)*((_QWORD *)v403 + 10);
                        if (v433 != v432)
                        {
                          do
                          {
                            v435 = *(std::__shared_weak_count **)(v433 - 8);
                            if (v435)
                            {
                              v436 = (unint64_t *)&v435->__shared_owners_;
                              do
                                v437 = __ldaxr(v436);
                              while (__stlxr(v437 - 1, v436));
                              if (!v437)
                              {
                                ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
                                std::__shared_weak_count::__release_weak(v435);
                              }
                            }
                            v433 -= 16;
                          }
                          while (v433 != v432);
                          v434 = *v431;
                        }
                        *((_QWORD *)v403 + 11) = v432;
                        operator delete(v434);
                        *v431 = 0;
                        *((_QWORD *)v403 + 11) = 0;
                        *((_QWORD *)v403 + 12) = 0;
                      }
                      v438 = &v392[104 * v420];
                      v439 = v438 + 80;
                      *((_OWORD *)v403 + 5) = *((_OWORD *)v438 + 5);
                      v441 = *((_QWORD *)v438 + 12);
                      v440 = v438 + 96;
                      *((_QWORD *)v403 + 12) = v441;
                      *(v440 - 1) = 0;
                      *v440 = 0;
                      *v439 = 0;
                      if (!v420)
                        break;
                      v420 = (v420 - 1) >> 1;
                      v403 = v427;
                    }
                    while (*(double *)&v392[104 * v420 + 32] + *(double *)&v392[104 * v420 + 48] > v421 + v422);
                    *(_OWORD *)v427 = v1060;
                    *((_OWORD *)v427 + 1) = v1061;
                    *((double *)v427 + 4) = v421;
                    *((_QWORD *)v427 + 5) = v424;
                    *((double *)v427 + 6) = v422;
                    *((_QWORD *)v427 + 7) = v425;
                    *((_QWORD *)v427 + 9) = v426;
                    *(_OWORD *)v439 = v1009;
                    *v440 = v1005;
                    v71 = 1.0;
                  }
                }
              }
              v393 = (char *)*((_QWORD *)&v1052 + 1);
            }
            v445 = *((_QWORD *)v393 - 3);
            v446 = *((_QWORD *)v393 - 2);
            v397 = v393;
            if (v446 != v445)
            {
              do
              {
                v447 = *(std::__shared_weak_count **)(v446 - 8);
                if (v447)
                {
                  v448 = (unint64_t *)&v447->__shared_owners_;
                  do
                    v449 = __ldaxr(v448);
                  while (__stlxr(v449 - 1, v448));
                  if (!v449)
                  {
                    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                    std::__shared_weak_count::__release_weak(v447);
                  }
                }
                v446 -= 16;
              }
              while (v446 != v445);
              v397 = (char *)*((_QWORD *)&v1052 + 1);
            }
            *((_QWORD *)v393 - 2) = v445;
            v344 = v1034;
            v396 = v1025;
          }
          else
          {
            v395 = 0uLL;
            v396 = v1025;
            if (*((_QWORD *)&v1052 + 1) < v1053)
            {
              *(_OWORD *)(*((_QWORD *)&v1052 + 1) + 48) = 0uLL;
              *((_OWORD *)v393 + 4) = 0uLL;
              *((_OWORD *)v393 + 1) = 0uLL;
              *((_OWORD *)v393 + 2) = 0uLL;
              *(_OWORD *)v393 = 0uLL;
              *((_QWORD *)v393 + 8) = &off_1E77F0FC8;
              *((_QWORD *)v393 + 11) = 0;
              *((_QWORD *)v393 + 12) = 0;
              v397 = v393 + 104;
              *((_QWORD *)v393 + 10) = 0;
              goto LABEL_605;
            }
            v412 = v394 + 1;
            if ((unint64_t)(v394 + 1) > 0x276276276276276)
              sub_1BE61F930();
            if (0x9D89D89D89D89D8ALL * ((uint64_t)(v1053 - v1052) >> 3) > v412)
              v412 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v1053 - v1052) >> 3);
            if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v1053 - v1052) >> 3)) >= 0x13B13B13B13B13BLL)
              v413 = 0x276276276276276;
            else
              v413 = v412;
            if (v413)
            {
              if (v413 > 0x276276276276276)
                sub_1BE61F100();
              v414 = (char *)operator new(104 * v413);
              v395 = 0uLL;
            }
            else
            {
              v414 = 0;
            }
            v450 = &v414[104 * v394];
            *((_OWORD *)v450 + 3) = v395;
            *((_OWORD *)v450 + 4) = v395;
            *((_OWORD *)v450 + 1) = v395;
            *((_OWORD *)v450 + 2) = v395;
            v451 = &v414[104 * v413];
            *(_OWORD *)v450 = v395;
            *((_QWORD *)v450 + 8) = &off_1E77F0FC8;
            *((_QWORD *)v450 + 11) = 0;
            *((_QWORD *)v450 + 12) = 0;
            *((_QWORD *)v450 + 10) = 0;
            v397 = v450 + 104;
            if (v393 == v392)
            {
              *(_QWORD *)&v1052 = v450;
              *((_QWORD *)&v1052 + 1) = v450 + 104;
              v1053 = (unint64_t)&v414[104 * v413];
              v344 = v1034;
              if (v393)
                goto LABEL_604;
            }
            else
            {
              v452 = 0;
              do
              {
                v453 = &v450[v452];
                v454 = &v393[v452];
                v455 = *(_OWORD *)&v393[v452 - 104];
                v456 = *(_OWORD *)&v393[v452 - 88];
                v457 = *(_OWORD *)&v393[v452 - 72];
                *(_OWORD *)(v453 - 56) = *(_OWORD *)&v393[v452 - 56];
                *(_OWORD *)(v453 - 72) = v457;
                *(_OWORD *)(v453 - 88) = v456;
                *(_OWORD *)(v453 - 104) = v455;
                *((_QWORD *)v453 - 4) = *(_QWORD *)&v393[v452 - 32];
                *((_QWORD *)v453 - 5) = &off_1E77F0FC8;
                *((_QWORD *)v453 - 2) = 0;
                *((_QWORD *)v453 - 1) = 0;
                *(_OWORD *)(v453 - 24) = *(_OWORD *)&v393[v452 - 24];
                *((_QWORD *)v453 - 1) = *(_QWORD *)&v393[v452 - 8];
                *((_QWORD *)v454 - 3) = 0;
                *((_QWORD *)v454 - 2) = 0;
                *((_QWORD *)v454 - 1) = 0;
                v452 -= 104;
              }
              while (&v393[v452] != v392);
              v458 = (char *)*((_QWORD *)&v1052 + 1);
              v393 = (char *)v1052;
              *(_QWORD *)&v1052 = &v450[v452];
              *((_QWORD *)&v1052 + 1) = v450 + 104;
              v1053 = (unint64_t)v451;
              if (v458 != v393)
              {
                do
                {
                  *((_QWORD *)v458 - 5) = &off_1E77F0FC8;
                  v460 = *((_QWORD *)v458 - 3);
                  if (v460)
                  {
                    v461 = *((_QWORD *)v458 - 2);
                    v459 = (void *)*((_QWORD *)v458 - 3);
                    if (v461 != v460)
                    {
                      do
                      {
                        v462 = *(std::__shared_weak_count **)(v461 - 8);
                        if (v462)
                        {
                          v463 = (unint64_t *)&v462->__shared_owners_;
                          do
                            v464 = __ldaxr(v463);
                          while (__stlxr(v464 - 1, v463));
                          if (!v464)
                          {
                            ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
                            std::__shared_weak_count::__release_weak(v462);
                          }
                        }
                        v461 -= 16;
                      }
                      while (v461 != v460);
                      v459 = (void *)*((_QWORD *)v458 - 3);
                    }
                    *((_QWORD *)v458 - 2) = v460;
                    operator delete(v459);
                  }
                  v458 -= 104;
                }
                while (v458 != v393);
                v396 = v1025;
              }
              v344 = v1034;
              if (v393)
LABEL_604:
                operator delete(v393);
            }
LABEL_605:
            *((_QWORD *)&v1052 + 1) = v397;
          }
          v465 = *((_QWORD *)&v1051 + 1);
          *((_QWORD *)v397 - 13) = v1041;
          *((_QWORD *)v397 - 12) = v465;
          *((_QWORD *)v397 - 6) = v396[7];
          *((_QWORD *)v397 - 10) = 0xFFF0000000000000;
          v466 = (double *)v396[7];
          v467 = *v466;
          v468 = 4;
          if (*(_QWORD *)v466 == v1041)
            v468 = 3;
          v469 = v466[v468] + v377;
          *((double *)v397 - 11) = v469;
          v470 = v466[6];
          v472 = *(_QWORD **)(v344 + 40);
          v471 = *(_QWORD **)(v344 + 48);
          if (v472 == v471)
          {
            v473 = 0.0;
            v481 = -INFINITY;
          }
          else
          {
            v473 = 0.0;
            do
            {
              v475 = *((_QWORD *)v397 - 3);
              v474 = *((_QWORD *)v397 - 2);
              v476 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v472 + 16))(*v472);
              v477 = v476;
              v478 = (uint64_t *)*((_QWORD *)v397 - 2);
              if ((unint64_t)v478 >= *((_QWORD *)v397 - 1))
              {
                v480 = sub_1BE663188((char **)v397 - 3, v476);
              }
              else
              {
                *v478 = v476;
                v479 = (_QWORD *)operator new();
                *v479 = &off_1E77F1410;
                v479[1] = 0;
                v479[2] = 0;
                v479[3] = v477;
                v478[1] = (uint64_t)v479;
                v480 = (char *)(v478 + 2);
                *((_QWORD *)v397 - 2) = v478 + 2;
              }
              *((_QWORD *)v397 - 2) = v480;
              v473 = v473
                   + (*(double (**)(_QWORD, _QWORD, double, _QWORD, unint64_t))(*(_QWORD *)*v472 + 32))(*v472, *(_QWORD *)(*((_QWORD *)v466 + 10) + 16 * ((v474 - v475) >> 4)), COERCE_DOUBLE(*(_QWORD *)&v467), *(_QWORD *)(*((_QWORD *)v397 - 3) + 16 * ((v474 - v475) >> 4)), v1041);
              ++v472;
            }
            while (v472 != v471);
            v469 = *((double *)v397 - 11);
            v481 = *((double *)v397 - 10);
          }
          v344 = v1034;
          v368 = v1036;
          v482 = *(double *)(v1034 + 32);
          if (v482 <= v473)
            v482 = v473;
          v483 = *(double *)(v1034 + 24) * v482;
          *((double *)v397 - 4) = v483;
          *((double *)v397 - 7) = v470 + v483;
          if (v481 <= v469)
            v484 = v481;
          else
            v484 = v469;
          if (v481 <= v469)
            v485 = v469;
          else
            v485 = v481;
          v370 = v1021;
          v369 = v1031;
          if (v484 > -INFINITY)
          {
            v486 = exp(v484 - v485);
            v485 = v485 + log1p(v486);
          }
          *((double *)v397 - 9) = v485;
          v487 = *(_QWORD **)(v1034 + 80);
          v488 = *(_QWORD **)(v1034 + 88);
          if (v487 != v488)
          {
            while (*v487 != *((_QWORD *)v397 - 13))
            {
              if (++v487 == v488)
              {
                v487 = *(_QWORD **)(v1034 + 88);
                break;
              }
            }
          }
          if (v487 != v488)
          {
            *((_QWORD *)v397 - 12) = *((_QWORD *)&v1051 + 1);
            *((double *)v397 - 8) = v377;
          }
          v489 = v1052;
          if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) >= 105)
          {
            v490 = ((*((_QWORD *)&v1052 + 1) - (_QWORD)v1052) / 0x68uLL - 2) >> 1;
            v491 = *(double *)(*((_QWORD *)&v1052 + 1) - 72);
            v492 = *(double *)(*((_QWORD *)&v1052 + 1) - 56);
            if (*(double *)(v1052 + 104 * v490 + 32) + *(double *)(v1052 + 104 * v490 + 48) > v491 + v492)
            {
              v493 = *((_QWORD *)&v1052 + 1) - 104;
              *(_OWORD *)v1058 = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 104);
              *(_OWORD *)&v1058[16] = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 88);
              v494 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 64);
              v1042 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 48);
              v495 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 32);
              v1010 = *(_OWORD *)(*((_QWORD *)&v1052 + 1) - 24);
              v496 = *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 8);
              *(_QWORD *)(*((_QWORD *)&v1052 + 1) - 24) = 0;
              *(_OWORD *)(*((_QWORD *)&v489 + 1) - 16) = 0uLL;
              do
              {
                v497 = v489 + 104 * v490;
                v498 = *(_OWORD *)v497;
                v499 = *(_OWORD *)(v497 + 16);
                v500 = *(_OWORD *)(v497 + 48);
                *(_OWORD *)(v493 + 32) = *(_OWORD *)(v497 + 32);
                *(_OWORD *)(v493 + 48) = v500;
                *(_OWORD *)v493 = v498;
                *(_OWORD *)(v493 + 16) = v499;
                *(_QWORD *)(v493 + 72) = *(_QWORD *)(v497 + 72);
                v501 = (void **)(v493 + 80);
                v502 = *(_QWORD *)(v493 + 80);
                if (v502)
                {
                  v503 = *(_QWORD *)(v493 + 88);
                  v504 = *(void **)(v493 + 80);
                  if (v503 != v502)
                  {
                    do
                    {
                      v505 = *(std::__shared_weak_count **)(v503 - 8);
                      if (v505)
                      {
                        v506 = (unint64_t *)&v505->__shared_owners_;
                        do
                          v507 = __ldaxr(v506);
                        while (__stlxr(v507 - 1, v506));
                        if (!v507)
                        {
                          ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                          std::__shared_weak_count::__release_weak(v505);
                        }
                      }
                      v503 -= 16;
                    }
                    while (v503 != v502);
                    v504 = *v501;
                  }
                  *(_QWORD *)(v493 + 88) = v502;
                  operator delete(v504);
                  *v501 = 0;
                  *(_QWORD *)(v493 + 88) = 0;
                  *(_QWORD *)(v493 + 96) = 0;
                }
                v508 = v489 + 104 * v490;
                v509 = (_QWORD *)(v508 + 80);
                *(_OWORD *)(v493 + 80) = *(_OWORD *)(v508 + 80);
                v511 = *(_QWORD *)(v508 + 96);
                v510 = (_QWORD *)(v508 + 96);
                *(_QWORD *)(v493 + 96) = v511;
                *(v510 - 1) = 0;
                *v510 = 0;
                *v509 = 0;
                if (!v490)
                  break;
                v490 = (v490 - 1) >> 1;
                v493 = v497;
              }
              while (*(double *)(v489 + 104 * v490 + 32) + *(double *)(v489 + 104 * v490 + 48) > v491 + v492);
              *(_OWORD *)v497 = *(_OWORD *)v1058;
              *(_OWORD *)(v497 + 16) = *(_OWORD *)&v1058[16];
              *(double *)(v497 + 32) = v491;
              *(_QWORD *)(v497 + 40) = v494;
              *(double *)(v497 + 48) = v492;
              *(_QWORD *)(v497 + 56) = v1042;
              *(_QWORD *)(v497 + 72) = v495;
              *(_OWORD *)v509 = v1010;
              *v510 = v496;
              v344 = v1034;
              v368 = v1036;
              v370 = v1021;
              v369 = v1031;
            }
          }
          goto LABEL_498;
        }
LABEL_491:
        v371 = v1025;
        v372 = v1025[1];
        if (v372)
        {
          do
          {
            v373 = (uint64_t **)v372;
            v372 = (uint64_t *)*v372;
          }
          while (v372);
        }
        else
        {
          do
          {
            v373 = (uint64_t **)v371[2];
            v23 = *v373 == (uint64_t *)v371;
            v371 = v373;
          }
          while (!v23);
        }
        v335 = v373;
      }
      while (v373 != &v1048);
    }
LABEL_956:
    sub_1BE669A30(v1048);
    v1048 = 0;
    v1049 = 0;
    v1047 = (uint64_t *)&v1048;
    v743 = (__int128 *)*((_QWORD *)&v1052 + 1);
    v744 = (__int128 *)v1052;
    if ((uint64_t)(*((_QWORD *)&v1052 + 1) - v1052) < 105)
    {
      v747 = v1034;
    }
    else
    {
      v745 = (*((_QWORD *)&v1052 + 1) - (_QWORD)v1052) / 0x68uLL;
      v746 = (_QWORD *)(v1052 + 80);
      v747 = v1034;
      v1045 = (double *)v1052;
      v1023 = v1052 + 80;
      do
      {
        if (v745 >= 2)
        {
          v751 = 0;
          *(_OWORD *)v1058 = *v744;
          *(_OWORD *)&v1058[16] = v744[1];
          *(_OWORD *)&v1058[32] = v744[2];
          v1059 = v744[3];
          v752 = *((_QWORD *)v744 + 9);
          v753 = *((_QWORD *)v744 + 10);
          v754 = *((_QWORD *)v744 + 11);
          v755 = *((_QWORD *)v744 + 12);
          v746[1] = 0;
          v746[2] = 0;
          *v746 = 0;
          v756 = v744;
          do
          {
            v761 = v756;
            v762 = v751 + 1;
            v756 = (__int128 *)((char *)v756 + 104 * v751 + 104);
            v763 = 2 * v751;
            v751 = (2 * v751) | 1;
            v764 = v763 + 2;
            if (v764 < v745
              && *((double *)v761 + 13 * v762 + 4) + *((double *)v761 + 13 * v762 + 6) > *((double *)v756 + 17)
                                                                                       + *((double *)v756 + 19))
            {
              v756 = (__int128 *)((char *)v756 + 104);
              v751 = v764;
            }
            v757 = *v756;
            v758 = v756[1];
            v759 = v756[3];
            v761[2] = v756[2];
            v761[3] = v759;
            *v761 = v757;
            v761[1] = v758;
            v760 = v756[5];
            *((_QWORD *)v761 + 9) = *((_QWORD *)v756 + 9);
            v761[5] = v760;
            *((_QWORD *)v761 + 12) = *((_QWORD *)v756 + 12);
            *((_QWORD *)v756 + 10) = 0;
            *((_QWORD *)v756 + 11) = 0;
            *((_QWORD *)v756 + 12) = 0;
          }
          while (v751 <= (uint64_t)((unint64_t)(v745 - 2) >> 1));
          v765 = (__int128 *)((char *)v743 - 104);
          if ((__int128 *)((char *)v743 - 104) == v756)
          {
            v748 = *(_OWORD *)v1058;
            v749 = *(_OWORD *)&v1058[16];
            v750 = v1059;
            v756[2] = *(_OWORD *)&v1058[32];
            v756[3] = v750;
            *v756 = v748;
            v756[1] = v749;
            *((_QWORD *)v756 + 9) = v752;
            *((_QWORD *)v756 + 10) = v753;
            *((_QWORD *)v756 + 11) = v754;
            *((_QWORD *)v756 + 12) = v755;
          }
          else
          {
            v766 = *v765;
            v767 = *(__int128 *)((char *)v743 - 88);
            v768 = *(__int128 *)((char *)v743 - 56);
            v756[2] = *(__int128 *)((char *)v743 - 72);
            v756[3] = v768;
            *v756 = v766;
            v756[1] = v767;
            *((_QWORD *)v756 + 9) = *((_QWORD *)v743 - 4);
            v756[5] = *(__int128 *)((char *)v743 - 24);
            *((_QWORD *)v756 + 12) = *((_QWORD *)v743 - 1);
            *v765 = *(_OWORD *)v1058;
            *(__int128 *)((char *)v743 - 88) = *(_OWORD *)&v1058[16];
            *(__int128 *)((char *)v743 - 72) = *(_OWORD *)&v1058[32];
            *(__int128 *)((char *)v743 - 56) = v1059;
            *((_QWORD *)v743 - 4) = v752;
            *((_QWORD *)v743 - 3) = v753;
            *((_QWORD *)v743 - 2) = v754;
            *((_QWORD *)v743 - 1) = v755;
            v769 = (char *)v756 - (char *)v744 + 104;
            if (v769 >= 105)
            {
              v770 = (v769 / 0x68uLL - 2) >> 1;
              v771 = *((double *)v756 + 4);
              v772 = *((double *)v756 + 6);
              if (*((double *)v744 + 13 * v770 + 4) + *((double *)v744 + 13 * v770 + 6) > v771 + v772)
              {
                v773 = v756[1];
                v1060 = *v756;
                v1061 = v773;
                v774 = *((_QWORD *)v756 + 5);
                v1038 = *((_QWORD *)v756 + 7);
                v775 = *((_QWORD *)v756 + 9);
                v1033 = v756[5];
                v1027 = *((_QWORD *)v756 + 12);
                *((_QWORD *)v756 + 11) = 0;
                *((_QWORD *)v756 + 12) = 0;
                *((_QWORD *)v756 + 10) = 0;
                do
                {
                  v776 = (__int128 *)((char *)v744 + 104 * v770);
                  v777 = *v776;
                  v778 = v776[1];
                  v779 = v776[3];
                  v756[2] = v776[2];
                  v756[3] = v779;
                  *v756 = v777;
                  v756[1] = v778;
                  *((_QWORD *)v756 + 9) = *((_QWORD *)v776 + 9);
                  v781 = (void **)(v756 + 5);
                  v780 = *((_QWORD *)v756 + 10);
                  if (v780)
                  {
                    v782 = *((_QWORD *)v756 + 11);
                    v783 = (void *)*((_QWORD *)v756 + 10);
                    if (v782 != v780)
                    {
                      do
                      {
                        v784 = *(std::__shared_weak_count **)(v782 - 8);
                        if (v784)
                        {
                          v785 = (unint64_t *)&v784->__shared_owners_;
                          do
                            v786 = __ldaxr(v785);
                          while (__stlxr(v786 - 1, v785));
                          if (!v786)
                          {
                            ((void (*)(std::__shared_weak_count *))v784->__on_zero_shared)(v784);
                            std::__shared_weak_count::__release_weak(v784);
                          }
                        }
                        v782 -= 16;
                      }
                      while (v782 != v780);
                      v783 = *v781;
                    }
                    *((_QWORD *)v756 + 11) = v780;
                    operator delete(v783);
                    *v781 = 0;
                    *((_QWORD *)v756 + 11) = 0;
                    *((_QWORD *)v756 + 12) = 0;
                    v747 = v1034;
                  }
                  v744 = (__int128 *)v1045;
                  v787 = &v1045[13 * v770];
                  v788 = v787 + 10;
                  v756[5] = *((_OWORD *)v787 + 5);
                  v790 = *((_QWORD *)v787 + 12);
                  v789 = v787 + 12;
                  *((_QWORD *)v756 + 12) = v790;
                  *(v789 - 1) = 0;
                  *v789 = 0;
                  *v788 = 0;
                  if (!v770)
                    break;
                  v770 = (v770 - 1) >> 1;
                  v756 = v776;
                }
                while (v1045[13 * v770 + 4] + v1045[13 * v770 + 6] > v771 + v772);
                *v776 = v1060;
                v776[1] = v1061;
                *((double *)v776 + 4) = v771;
                *((_QWORD *)v776 + 5) = v774;
                *((double *)v776 + 6) = v772;
                *((_QWORD *)v776 + 7) = v1038;
                *((_QWORD *)v776 + 9) = v775;
                *(_OWORD *)v788 = v1033;
                *v789 = v1027;
                v71 = 1.0;
                v746 = (_QWORD *)v1023;
              }
            }
          }
        }
        v743 = (__int128 *)((char *)v743 - 104);
        v537 = (unint64_t)v745-- > 2;
      }
      while (v537);
      v743 = (__int128 *)*((_QWORD *)&v1052 + 1);
      v744 = (__int128 *)v1052;
    }
    while (v744 != v743 && v1049 < *(int *)(v747 + 112))
    {
      if (*((double *)v744 + 4) <= -INFINITY)
        goto LABEL_987;
      v791 = operator new();
      v792 = *v744;
      v793 = v744[1];
      v794 = v744[3];
      *(_OWORD *)(v791 + 32) = v744[2];
      *(_OWORD *)(v791 + 48) = v794;
      *(_OWORD *)v791 = v792;
      *(_OWORD *)(v791 + 16) = v793;
      *(_QWORD *)&v792 = *((_QWORD *)v744 + 9);
      *(_QWORD *)(v791 + 80) = 0;
      *(_QWORD *)(v791 + 72) = v792;
      *(_QWORD *)(v791 + 64) = &off_1E77F0FC8;
      *(_QWORD *)(v791 + 88) = 0;
      *(_QWORD *)(v791 + 96) = 0;
      v795 = (char *)*((_QWORD *)v744 + 10);
      v796 = (char *)*((_QWORD *)v744 + 11);
      v797 = v796 - v795;
      if (v796 != v795)
      {
        if (v797 < 0)
          sub_1BE61F930();
        v798 = operator new(v796 - v795);
        *(_QWORD *)(v791 + 80) = v798;
        *(_QWORD *)(v791 + 88) = v798;
        *(_QWORD *)(v791 + 96) = &v798[2 * (v797 >> 4)];
        do
        {
          *v798 = *(_QWORD *)v795;
          v799 = *((_QWORD *)v795 + 1);
          v798[1] = v799;
          if (v799)
          {
            v800 = (unint64_t *)(v799 + 8);
            do
              v801 = __ldxr(v800);
            while (__stxr(v801 + 1, v800));
          }
          v795 += 16;
          v798 += 2;
        }
        while (v795 != v796);
        *(_QWORD *)(v791 + 88) = v798;
      }
      *(_QWORD *)&v1060 = v791;
      v802 = (char *)*((_QWORD *)&v1050 + 1);
      v803 = v1051;
      if (*((_QWORD *)&v1050 + 1) < (unint64_t)v1051)
      {
        **((_QWORD **)&v1050 + 1) = v791;
        *((_QWORD *)&v1050 + 1) = v802 + 8;
        goto LABEL_1036;
      }
      v804 = v744;
      v805 = (char *)v1050;
      v806 = *((_QWORD *)&v1050 + 1) - v1050;
      v807 = (uint64_t)(*((_QWORD *)&v1050 + 1) - v1050) >> 3;
      v808 = v807 + 1;
      if ((unint64_t)(v807 + 1) >> 61)
        sub_1BE61F930();
      if ((uint64_t)(v1051 - v1050) >> 2 > v808)
        v808 = (uint64_t)(v1051 - v1050) >> 2;
      if ((_QWORD)v1051 - (_QWORD)v1050 >= 0x7FFFFFFFFFFFFFF8uLL)
        v809 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v809 = v808;
      *(_QWORD *)&v1058[32] = &v1051;
      if (v809)
      {
        if (v809 >> 61)
          sub_1BE61F100();
        v810 = (char *)operator new(8 * v809);
      }
      else
      {
        v810 = 0;
      }
      v811 = (uint64_t *)&v810[8 * v807];
      *(_QWORD *)&v1060 = 0;
      *v811 = v791;
      v812 = v811 + 1;
      v813 = &v810[8 * v809];
      *(_QWORD *)&v1058[16] = v811 + 1;
      *(_QWORD *)&v1058[24] = v813;
      v814 = (char *)(v802 - v805);
      if (v802 == v805)
      {
        v816 = 0;
        v817 = vdupq_n_s64((unint64_t)v802);
        v747 = v1034;
        goto LABEL_1023;
      }
      v815 = v814 - 8;
      if ((unint64_t)(v814 - 8) >= 0x78)
      {
        v818 = (v802 - 8 - v805) & 0xFFFFFFFFFFFFFFF8;
        v747 = v1034;
        if (&v802[-v818 - 8] >= (char *)v811 || &v810[v806 - v818 - 8] >= v802)
        {
          v819 = ((unint64_t)v815 >> 3) + 1;
          v820 = 8 * (v819 & 0x3FFFFFFFFFFFFFFCLL);
          v811 = (uint64_t *)((char *)v811 - v820);
          v821 = &v802[-v820];
          v822 = v802 - 16;
          v823 = &v810[8 * v807 - 16];
          v824 = v819 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v826 = *((_OWORD *)v822 - 1);
            v825 = *(_OWORD *)v822;
            *((_OWORD *)v822 - 1) = 0uLL;
            *(_OWORD *)v822 = 0uLL;
            *((_OWORD *)v823 - 1) = v826;
            *(_OWORD *)v823 = v825;
            v822 -= 32;
            v823 -= 32;
            v824 -= 4;
          }
          while (v824);
          v802 = v821;
          if (v819 == (v819 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_1022;
        }
      }
      else
      {
        v747 = v1034;
      }
      do
      {
        v827 = *((_QWORD *)v802 - 1);
        v802 -= 8;
        *(_QWORD *)v802 = 0;
        *--v811 = v827;
      }
      while (v802 != v805);
LABEL_1022:
      v817 = (int64x2_t)v1050;
      v813 = *(char **)&v1058[24];
      v812 = *(_QWORD **)&v1058[16];
      v816 = (_QWORD *)v1060;
      v803 = v1051;
LABEL_1023:
      *(_QWORD *)&v1050 = v811;
      *((_QWORD *)&v1050 + 1) = v812;
      *(int64x2_t *)&v1058[8] = v817;
      *(_QWORD *)&v1051 = v813;
      *(_QWORD *)&v1058[24] = v803;
      *(_QWORD *)v1058 = v817.i64[0];
      sub_1BE669A78((uint64_t)v1058);
      *((_QWORD *)&v1050 + 1) = v812;
      *(_QWORD *)&v1060 = 0;
      v744 = v804;
      if (v816)
      {
        v816[8] = &off_1E77F0FC8;
        v828 = v816[10];
        if (v828)
        {
          v829 = v816[11];
          v830 = (void *)v816[10];
          if (v829 != v828)
          {
            do
            {
              v831 = *(std::__shared_weak_count **)(v829 - 8);
              if (v831)
              {
                v832 = (unint64_t *)&v831->__shared_owners_;
                do
                  v833 = __ldaxr(v832);
                while (__stlxr(v833 - 1, v832));
                if (!v833)
                {
                  ((void (*)(std::__shared_weak_count *))v831->__on_zero_shared)(v831);
                  std::__shared_weak_count::__release_weak(v831);
                }
              }
              v829 -= 16;
            }
            while (v829 != v828);
            v830 = (void *)v816[10];
          }
          v816[11] = v828;
          operator delete(v830);
          v747 = v1034;
        }
        MEMORY[0x1C3B812EC](v816, 0x10A0C407BC771E5);
      }
LABEL_1036:
      v834 = (char *)operator new(8uLL);
      v835 = v834;
      v836 = v744;
      *(_QWORD *)v834 = *(_QWORD *)v744;
      v837 = v834 + 8;
      *(_QWORD *)&v1058[8] = v834 + 8;
      *(_QWORD *)&v1058[16] = v834 + 8;
      *(_QWORD *)v1058 = v834;
      v1046 = v836;
      v838 = (_QWORD *)*((_QWORD *)v836 + 7);
      if (v838)
      {
        v839 = v834 + 8;
        v840 = v834;
        while (1)
        {
          while (v839 < v837)
          {
            *(_QWORD *)v839 = *v838;
            v839 += 8;
            v838 = (_QWORD *)v838[7];
            if (!v838)
              goto LABEL_1066;
          }
          v841 = (v839 - v840) >> 3;
          v842 = v841 + 1;
          if ((unint64_t)(v841 + 1) >> 61)
          {
            *(_QWORD *)v1058 = v835;
            *(_QWORD *)&v1058[8] = v839;
            *(_QWORD *)&v1058[16] = v837;
            sub_1BE61F930();
          }
          if ((v837 - v840) >> 2 > v842)
            v842 = (v837 - v840) >> 2;
          v843 = (unint64_t)(v837 - v840) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v842;
          if (v843)
          {
            if (v843 >> 61)
            {
              *(_QWORD *)v1058 = v835;
              *(_QWORD *)&v1058[16] = v837;
              sub_1BE61F100();
            }
            v844 = operator new(8 * v843);
            v835 = &v844[8 * v841];
            *(_QWORD *)v835 = *v838;
            v845 = (uint64_t)(v835 + 8);
            v846 = v839 - v840;
            if (v839 == v840)
            {
LABEL_1057:
              v837 = &v844[8 * v843];
              if (!v840)
                goto LABEL_1054;
LABEL_1053:
              operator delete(v840);
              goto LABEL_1054;
            }
          }
          else
          {
            v844 = 0;
            v835 = (char *)(8 * v841);
            *(_QWORD *)(8 * v841) = *v838;
            v845 = 8 * v841 + 8;
            v846 = v839 - v840;
            if (v839 == v840)
              goto LABEL_1057;
          }
          v847 = v846 - 8;
          if (v847 < 0x168)
            break;
          v850 = (v839 - 8 - v840) & 0xFFFFFFFFFFFFFFF8;
          if (&v844[v839 - v840 - 8 - v850] > &v844[v839 - v840 - 8]
            || &v839[-v850 - 8] > v839 - 8
            || (unint64_t)(v840 - v844) < 0x20)
          {
            break;
          }
          v851 = (v847 >> 3) + 1;
          v852 = 8 * (v851 & 0x3FFFFFFFFFFFFFFCLL);
          v848 = &v839[-v852];
          v835 -= v852;
          v853 = &v844[8 * v841 - 16];
          v854 = v839 - 16;
          v855 = v851 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v856 = *(_OWORD *)v854;
            *(v853 - 1) = *((_OWORD *)v854 - 1);
            *v853 = v856;
            v853 -= 2;
            v854 -= 32;
            v855 -= 4;
          }
          while (v855);
          if (v851 != (v851 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_1051;
LABEL_1052:
          v837 = &v844[8 * v843];
          if (v840)
            goto LABEL_1053;
LABEL_1054:
          v840 = v835;
          v839 = (char *)v845;
          v838 = (_QWORD *)v838[7];
          if (!v838)
          {
LABEL_1066:
            *(_QWORD *)v1058 = v835;
            *(_QWORD *)&v1058[8] = v839;
            *(_QWORD *)&v1058[16] = v837;
            goto LABEL_1068;
          }
        }
        v848 = v839;
        do
        {
LABEL_1051:
          v849 = *((_QWORD *)v848 - 1);
          v848 -= 8;
          *((_QWORD *)v835 - 1) = v849;
          v835 -= 8;
        }
        while (v848 != v840);
        goto LABEL_1052;
      }
      v839 = v834 + 8;
LABEL_1068:
      v857 = v1048;
      v858 = *(_QWORD *)(*((_QWORD *)&v1050 + 1) - 8);
      v859 = &v1048;
      v860 = &v1048;
      if (!v1048)
        goto LABEL_1105;
      if (v835 != v839)
      {
        do
        {
          while (1)
          {
            v859 = (uint64_t **)v857;
            v868 = v857[4];
            v869 = v857[5];
            if (v868 == v869)
              break;
            v870 = v868 + 8;
            v871 = v835;
            while (v871 != v839)
            {
              v872 = *(_QWORD *)v871;
              v873 = *(_QWORD *)(v870 - 8);
              if (*(_QWORD *)v871 < v873)
                break;
              v871 += 8;
              v874 = v873 < v872 || v870 == v869;
              v870 += 8;
              if (v874)
                goto LABEL_1094;
            }
            v857 = *v859;
            v860 = v859;
            if (!*v859)
              goto LABEL_1105;
          }
LABEL_1094:
          v875 = 0;
          while (v868 + v875 != v869)
          {
            v876 = *(_QWORD *)(v868 + v875);
            v877 = *(_QWORD *)&v835[v875];
            if (v876 < v877)
              break;
            v875 += 8;
            if (v877 < v876 || &v835[v875] == v839)
              goto LABEL_1108;
          }
          v857 = v859[1];
        }
        while (v857);
        v860 = v859 + 1;
        goto LABEL_1105;
      }
      v861 = v1048[4];
      v862 = v1048[5];
      if (v861 != v862)
      {
        v860 = (uint64_t **)v1048;
        while (1)
        {
          v863 = 0;
          while (&v835[v863] != v839)
          {
            v864 = *(_QWORD *)&v835[v863];
            v865 = *(_QWORD *)(v861 + v863);
            if (v864 < v865)
              break;
            v863 += 8;
            if (v865 < v864 || v863 + v861 == v862)
              goto LABEL_1108;
          }
          v867 = *v860;
          v859 = v860;
          if (!*v860)
            break;
          v861 = v867[4];
          v862 = v867[5];
          v860 = (uint64_t **)*v860;
          if (v861 == v862)
            goto LABEL_1108;
        }
LABEL_1105:
        v879 = (uint64_t *)operator new(0x40uLL);
        v879[4] = (uint64_t)v835;
        v879[5] = (uint64_t)v839;
        memset(v1058, 0, 24);
        v879[6] = (uint64_t)v837;
        v879[7] = v858;
        *v879 = 0;
        v879[1] = 0;
        v879[2] = (uint64_t)v859;
        *v860 = v879;
        if (*v1047)
        {
          v1047 = (uint64_t *)*v1047;
          v879 = *v860;
        }
        sub_1BE61F5C0(v1048, v879);
        ++v1049;
        v835 = *(char **)v1058;
      }
LABEL_1108:
      v744 = v1046;
      if (v835)
      {
        *(_QWORD *)&v1058[8] = v835;
        operator delete(v835);
      }
      v743 = (__int128 *)*((_QWORD *)&v1052 + 1);
LABEL_987:
      v744 = (__int128 *)((char *)v744 + 104);
    }
    if (__p)
    {
      v1056 = (unint64_t *)__p;
      operator delete(__p);
    }
    v70 = *((_QWORD *)&v1051 + 1) + 1;
    *((_QWORD *)&v1051 + 1) = v70;
    v69 = v1002;
  }
  while (v70 < *v1002);
LABEL_1112:
  v880 = v1047;
  if (v1047 != (uint64_t *)&v1048)
  {
    do
    {
      v907 = v880[7];
      v908 = *(double *)(v907 + 72);
      v909 = *(_QWORD **)(v1034 + 40);
      v910 = *(_QWORD **)(v1034 + 48);
      if (v909 == v910)
      {
        v912 = 0.0;
        v913 = v880[7];
      }
      else
      {
        v911 = 0;
        v912 = 0.0;
        do
        {
          v912 = v912
               + (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)*v909 + 48))(*v909, *(_QWORD *)(*(_QWORD *)(v907 + 80) + v911));
          ++v909;
          v911 += 16;
        }
        while (v909 != v910);
        v913 = v880[7];
      }
      v914 = *(double *)(v1034 + 24);
      v915 = *(double *)(v1034 + 32);
      if (v915 <= v912 + v908 / v914)
        v915 = v912 + v908 / v914;
      *(double *)(v907 + 72) = v914 * v915;
      *(double *)(v913 + 48) = v912 + *(double *)(v913 + 48);
      v916 = (uint64_t *)v880[1];
      if (v916)
      {
        do
        {
          v917 = (uint64_t **)v916;
          v916 = (uint64_t *)*v916;
        }
        while (v916);
      }
      else
      {
        do
        {
          v917 = (uint64_t **)v880[2];
          v23 = *v917 == v880;
          v880 = (uint64_t *)v917;
        }
        while (!v23);
      }
      v880 = (uint64_t *)v917;
    }
    while (v917 != &v1048);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v881 = *(int *)(v1034 + 116);
  if ((_DWORD)v881)
  {
    if ((v881 & 0x80000000) != 0)
      sub_1BE61F930();
    v882 = (void **)operator new(40 * v881);
    *a4 = v882;
    a4[1] = v882;
    a4[2] = &v882[5 * (int)v881];
  }
  v883 = v1049;
  if (!v1049)
  {
    v884 = 0;
    v885 = 0;
    v886 = v1047;
    if (v1047 == (uint64_t *)&v1048)
      goto LABEL_1256;
    goto LABEL_1119;
  }
  if (v1049 >> 61)
    sub_1BE61F930();
  v884 = (char *)operator new(8 * v1049);
  v885 = &v884[8 * v883];
  v886 = v1047;
  if (v1047 != (uint64_t *)&v1048)
  {
LABEL_1119:
    v887 = v884;
    while (1)
    {
      if (v887 < v885)
      {
        *(_QWORD *)v887 = v886[7];
        v887 += 8;
        v888 = (uint64_t *)v886[1];
        if (v888)
          goto LABEL_1141;
        goto LABEL_1143;
      }
      v889 = (v887 - v884) >> 3;
      v890 = v889 + 1;
      if ((unint64_t)(v889 + 1) >> 61)
        sub_1BE61F930();
      if ((v885 - v884) >> 2 > v890)
        v890 = (v885 - v884) >> 2;
      if ((unint64_t)(v885 - v884) >= 0x7FFFFFFFFFFFFFF8)
        v891 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v891 = v890;
      if (v891)
      {
        if (v891 >> 61)
          sub_1BE61F100();
        v892 = operator new(8 * v891);
        v893 = &v892[8 * v889];
        *(_QWORD *)v893 = v886[7];
        v894 = (uint64_t)(v893 + 8);
        v895 = v887 - v884;
        if (v887 == v884)
          goto LABEL_1138;
      }
      else
      {
        v892 = 0;
        v893 = (char *)(8 * v889);
        *(_QWORD *)(8 * v889) = v886[7];
        v894 = 8 * v889 + 8;
        v895 = v887 - v884;
        if (v887 == v884)
          goto LABEL_1138;
      }
      v896 = v895 - 8;
      if (v896 < 0x168)
      {
        v897 = v887;
        goto LABEL_1137;
      }
      v900 = (v887 - 8 - v884) & 0xFFFFFFFFFFFFFFF8;
      if (&v892[v887 - v884 - 8 - v900] > &v892[v887 - v884 - 8])
      {
        v897 = v887;
        do
        {
LABEL_1137:
          v898 = *((_QWORD *)v897 - 1);
          v897 -= 8;
          *((_QWORD *)v893 - 1) = v898;
          v893 -= 8;
        }
        while (v897 != v884);
        goto LABEL_1138;
      }
      if (&v887[-v900 - 8] > v887 - 8)
      {
        v897 = v887;
        goto LABEL_1137;
      }
      if ((unint64_t)(v884 - v892) < 0x20)
      {
        v897 = v887;
        goto LABEL_1137;
      }
      v901 = (v896 >> 3) + 1;
      v902 = 8 * (v901 & 0x3FFFFFFFFFFFFFFCLL);
      v897 = &v887[-v902];
      v893 -= v902;
      v903 = &v892[8 * v889 - 16];
      v904 = v887 - 16;
      v905 = v901 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v906 = *(_OWORD *)v904;
        *(v903 - 1) = *((_OWORD *)v904 - 1);
        *v903 = v906;
        v903 -= 2;
        v904 -= 32;
        v905 -= 4;
      }
      while (v905);
      if (v901 != (v901 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1137;
LABEL_1138:
      v885 = &v892[8 * v891];
      if (v884)
        operator delete(v884);
      v884 = v893;
      v887 = (char *)v894;
      v888 = (uint64_t *)v886[1];
      if (v888)
      {
        do
        {
LABEL_1141:
          v899 = (uint64_t **)v888;
          v888 = (uint64_t *)*v888;
        }
        while (v888);
        goto LABEL_1120;
      }
      do
      {
LABEL_1143:
        v899 = (uint64_t **)v886[2];
        v23 = *v899 == v886;
        v886 = (uint64_t *)v899;
      }
      while (!v23);
LABEL_1120:
      v886 = (uint64_t *)v899;
      if (v899 == &v1048)
      {
        v918 = *(int *)(v1034 + 116);
        if (v918 >= (v887 - v884) >> 3)
          v919 = v887;
        else
          v919 = &v884[8 * v918];
        if (v884 == v919)
          break;
        v920 = v919 - v884;
        v921 = (v919 - v884) >> 3;
        if (v919 - v884 >= 9 && (unint64_t)v920 >= 0x10)
        {
          v990 = (unint64_t)(v921 - 2) >> 1;
          v991 = v990;
          do
          {
            if (v990 >= v991)
            {
              v992 = (2 * v991) | 1;
              v993 = &v884[8 * v992];
              if (2 * v991 + 2 < v921
                && *(double *)(*(_QWORD *)v993 + 32) + *(double *)(*(_QWORD *)v993 + 48) > *(double *)(*((_QWORD *)v993 + 1) + 32)
                                                                                             + *(double *)(*((_QWORD *)v993 + 1) + 48))
              {
                v993 += 8;
                v992 = 2 * v991 + 2;
              }
              v994 = &v884[8 * v991];
              v995 = *(_QWORD *)v993;
              v996 = *(_QWORD *)v994;
              v997 = *(double *)(*(_QWORD *)v994 + 32) + *(double *)(*(_QWORD *)v994 + 48);
              if (*(double *)(*(_QWORD *)v993 + 32) + *(double *)(*(_QWORD *)v993 + 48) <= v997)
              {
                do
                {
                  *(_QWORD *)v994 = v995;
                  v994 = v993;
                  if (v990 < v992)
                    break;
                  v998 = 2 * v992;
                  v992 = (2 * v992) | 1;
                  v993 = &v884[8 * v992];
                  v999 = v998 + 2;
                  if (v999 < v921
                    && *(double *)(*(_QWORD *)v993 + 32) + *(double *)(*(_QWORD *)v993 + 48) > *(double *)(*((_QWORD *)v993 + 1) + 32)
                                                                                                 + *(double *)(*((_QWORD *)v993 + 1) + 48))
                  {
                    v993 += 8;
                    v992 = v999;
                  }
                  v995 = *(_QWORD *)v993;
                }
                while (*(double *)(*(_QWORD *)v993 + 32) + *(double *)(*(_QWORD *)v993 + 48) <= v997);
                *(_QWORD *)v994 = v996;
              }
            }
            v537 = v991-- <= 0;
          }
          while (!v537);
        }
        if (v887 != v919)
        {
          if (v920 < 16)
          {
            v922 = *(_QWORD *)v884;
            v923 = v919;
            do
            {
              v924 = *(_QWORD *)v923;
              if (*(double *)(*(_QWORD *)v923 + 32) + *(double *)(*(_QWORD *)v923 + 48) > *(double *)(v922 + 32)
                                                                                             + *(double *)(v922 + 48))
              {
                *(_QWORD *)v923 = v922;
                *(_QWORD *)v884 = v924;
                v922 = v924;
              }
              v923 += 8;
            }
            while (v923 != v887);
            goto LABEL_1200;
          }
          v925 = v884 + 8;
          v926 = v884 + 16;
          v927 = v919;
          while (2)
          {
            v928 = *(_QWORD *)v927;
            v929 = *(double *)(*(_QWORD *)v927 + 32) + *(double *)(*(_QWORD *)v927 + 48);
            if (v929 > *(double *)(*(_QWORD *)v884 + 32) + *(double *)(*(_QWORD *)v884 + 48))
            {
              *(_QWORD *)v927 = *(_QWORD *)v884;
              *(_QWORD *)v884 = v928;
              if (v920 == 16
                || *(double *)(*(_QWORD *)v925 + 32) + *(double *)(*(_QWORD *)v925 + 48) <= *(double *)(*(_QWORD *)v926 + 32)
                                                                                              + *(double *)(*(_QWORD *)v926 + 48))
              {
                v930 = v884 + 8;
                v931 = 1;
                v932 = *(_QWORD *)v925;
                if (*(double *)(*(_QWORD *)v925 + 32) + *(double *)(*(_QWORD *)v925 + 48) <= v929)
                {
LABEL_1194:
                  v933 = v884;
                  do
                  {
                    *(_QWORD *)v933 = v932;
                    v933 = v930;
                    if ((uint64_t)((unint64_t)(v921 - 2) >> 1) < v931)
                      break;
                    v934 = 2 * v931;
                    v931 = (2 * v931) | 1;
                    v930 = &v884[8 * v931];
                    v935 = v934 + 2;
                    if (v935 < v921
                      && *(double *)(*(_QWORD *)v930 + 32) + *(double *)(*(_QWORD *)v930 + 48) > *(double *)(*((_QWORD *)v930 + 1) + 32) + *(double *)(*((_QWORD *)v930 + 1) + 48))
                    {
                      v930 += 8;
                      v931 = v935;
                    }
                    v932 = *(_QWORD *)v930;
                  }
                  while (*(double *)(*(_QWORD *)v930 + 32) + *(double *)(*(_QWORD *)v930 + 48) <= v929);
                  *(_QWORD *)v933 = v928;
                }
              }
              else
              {
                v930 = v884 + 16;
                v931 = 2;
                v932 = *(_QWORD *)v926;
                if (*(double *)(*(_QWORD *)v926 + 32) + *(double *)(*(_QWORD *)v926 + 48) <= v929)
                  goto LABEL_1194;
              }
            }
            v927 += 8;
            if (v927 == v887)
              break;
            continue;
          }
        }
LABEL_1200:
        if (v920 >= 9)
        {
          v936 = (unint64_t)v920 >> 3;
          v937 = v919;
          do
          {
            v938 = 0;
            v939 = *(_QWORD *)v884;
            v940 = v884;
            do
            {
              v941 = v940;
              v940 += 8 * v938 + 8;
              v942 = 2 * v938;
              v938 = (2 * v938) | 1;
              v943 = v942 + 2;
              if (v943 < v936
                && *(double *)(*(_QWORD *)v940 + 32) + *(double *)(*(_QWORD *)v940 + 48) > *(double *)(*((_QWORD *)v940 + 1) + 32)
                                                                                             + *(double *)(*((_QWORD *)v940 + 1) + 48))
              {
                v940 += 8;
                v938 = v943;
              }
              *(_QWORD *)v941 = *(_QWORD *)v940;
            }
            while (v938 <= (uint64_t)((unint64_t)(v936 - 2) >> 1));
            v937 -= 8;
            if (v940 == v937)
            {
              *(_QWORD *)v940 = v939;
            }
            else
            {
              *(_QWORD *)v940 = *(_QWORD *)v937;
              *(_QWORD *)v937 = v939;
              v944 = v940 - v884 + 8;
              if (v944 >= 9)
              {
                v945 = (((unint64_t)v944 >> 3) - 2) >> 1;
                v946 = &v884[8 * v945];
                v947 = *(_QWORD *)v946;
                v948 = *(_QWORD *)v940;
                v949 = *(double *)(*(_QWORD *)v940 + 32) + *(double *)(*(_QWORD *)v940 + 48);
                if (*(double *)(*(_QWORD *)v946 + 32) + *(double *)(*(_QWORD *)v946 + 48) > v949)
                {
                  do
                  {
                    v950 = v946;
                    *(_QWORD *)v940 = v947;
                    if (!v945)
                      break;
                    v945 = (v945 - 1) >> 1;
                    v946 = &v884[8 * v945];
                    v947 = *(_QWORD *)v946;
                    v940 = v950;
                  }
                  while (*(double *)(*(_QWORD *)v946 + 32) + *(double *)(*(_QWORD *)v946 + 48) > v949);
                  *(_QWORD *)v950 = v948;
                }
              }
            }
            v537 = v936-- <= 2;
          }
          while (!v537);
        }
        v951 = (uint64_t *)v884;
LABEL_1218:
        if (*(_QWORD *)(*v951 + 56))
        {
          sub_1BE668BCC(v1034 + 64, *v951, *v1002, (uint64_t)v1058);
          v953 = a4[1];
          v952 = (unint64_t)a4[2];
          if ((unint64_t)v953 < v952)
          {
            *v953 = 0;
            v953[1] = 0;
            v953[2] = 0;
            *(_OWORD *)v953 = *(_OWORD *)v1058;
            v953[2] = *(void **)&v1058[16];
            memset(v1058, 0, 24);
            *(_OWORD *)(v953 + 3) = *(_OWORD *)&v1058[24];
            a4[1] = v953 + 5;
          }
          else
          {
            v954 = *a4;
            v955 = 0xCCCCCCCCCCCCCCCDLL * (v953 - *a4);
            v956 = v955 + 1;
            if (v955 + 1 > 0x666666666666666)
              sub_1BE61F930();
            v957 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v952 - (_QWORD)v954) >> 3);
            if (2 * v957 > v956)
              v956 = 2 * v957;
            if (v957 >= 0x333333333333333)
              v958 = 0x666666666666666;
            else
              v958 = v956;
            if (v958)
            {
              if (v958 > 0x666666666666666)
                sub_1BE61F100();
              v959 = (char *)operator new(40 * v958);
            }
            else
            {
              v959 = 0;
            }
            v960 = &v959[40 * v955];
            v961 = (void **)&v959[40 * v958];
            *(_OWORD *)v960 = *(_OWORD *)v1058;
            *((_QWORD *)v960 + 2) = *(_QWORD *)&v1058[16];
            memset(v1058, 0, 24);
            *(_OWORD *)(v960 + 24) = *(_OWORD *)&v1058[24];
            v962 = (void **)(v960 + 40);
            if (v953 == v954)
            {
              *a4 = (void **)v960;
              a4[1] = v962;
              a4[2] = v961;
              if (v953)
                goto LABEL_1245;
            }
            else
            {
              v963 = v919;
              do
              {
                v964 = v960;
                *((_QWORD *)v960 - 4) = 0;
                *((_QWORD *)v960 - 3) = 0;
                v965 = *(_OWORD *)(v953 - 5);
                v953 -= 5;
                *(_OWORD *)(v960 - 40) = v965;
                v960 -= 40;
                *((_QWORD *)v964 - 3) = v953[2];
                *v953 = 0;
                v953[1] = 0;
                v953[2] = 0;
                *(_OWORD *)(v960 + 24) = *(_OWORD *)(v953 + 3);
              }
              while (v953 != v954);
              v953 = *a4;
              v966 = a4[1];
              *a4 = (void **)v960;
              a4[1] = v962;
              a4[2] = v961;
              if (v966 != v953)
              {
                v967 = v966;
                do
                {
                  v970 = (char *)*(v967 - 5);
                  v967 -= 5;
                  v969 = v970;
                  if (v970)
                  {
                    v971 = (char *)*(v966 - 4);
                    v968 = v969;
                    if (v971 != v969)
                    {
                      v972 = (char *)*(v966 - 4);
                      do
                      {
                        v974 = (void *)*((_QWORD *)v972 - 8);
                        v972 -= 64;
                        v973 = v974;
                        if (v974)
                        {
                          *((_QWORD *)v971 - 7) = v973;
                          operator delete(v973);
                        }
                        v971 = v972;
                      }
                      while (v972 != v969);
                      v968 = *v967;
                    }
                    *(v966 - 4) = v969;
                    operator delete(v968);
                  }
                  v966 = v967;
                }
                while (v967 != v953);
              }
              v919 = v963;
              if (v953)
LABEL_1245:
                operator delete(v953);
            }
            v975 = *(char **)v1058;
            a4[1] = v962;
            if (v975)
            {
              v976 = *(char **)&v1058[8];
              v977 = v975;
              if (*(char **)&v1058[8] != v975)
              {
                v978 = *(char **)&v1058[8];
                do
                {
                  v980 = (void *)*((_QWORD *)v978 - 8);
                  v978 -= 64;
                  v979 = v980;
                  if (v980)
                  {
                    *((_QWORD *)v976 - 7) = v979;
                    operator delete(v979);
                  }
                  v976 = v978;
                }
                while (v978 != v975);
                v977 = *(char **)v1058;
              }
              *(_QWORD *)&v1058[8] = v975;
              operator delete(v977);
            }
          }
        }
        if (++v951 == (uint64_t *)v919)
          break;
        goto LABEL_1218;
      }
    }
  }
LABEL_1256:
  if (v884)
    operator delete(v884);
  v981 = v1052;
  if ((_QWORD)v1052)
  {
    v982 = *((_QWORD *)&v1052 + 1);
    v983 = (void *)v1052;
    if (*((_QWORD *)&v1052 + 1) != (_QWORD)v1052)
    {
      do
      {
        *(_QWORD *)(v982 - 40) = &off_1E77F0FC8;
        v985 = *(_QWORD *)(v982 - 24);
        if (v985)
        {
          v986 = *(_QWORD *)(v982 - 16);
          v984 = *(void **)(v982 - 24);
          if (v986 != v985)
          {
            do
            {
              v987 = *(std::__shared_weak_count **)(v986 - 8);
              if (v987)
              {
                v988 = (unint64_t *)&v987->__shared_owners_;
                do
                  v989 = __ldaxr(v988);
                while (__stlxr(v989 - 1, v988));
                if (!v989)
                {
                  ((void (*)(std::__shared_weak_count *))v987->__on_zero_shared)(v987);
                  std::__shared_weak_count::__release_weak(v987);
                }
              }
              v986 -= 16;
            }
            while (v986 != v985);
            v984 = *(void **)(v982 - 24);
          }
          *(_QWORD *)(v982 - 16) = v985;
          operator delete(v984);
        }
        v982 -= 104;
      }
      while (v982 != v981);
      v983 = (void *)v1052;
    }
    *((_QWORD *)&v1052 + 1) = v981;
    operator delete(v983);
  }
  *(_QWORD *)v1058 = &v1050;
  sub_1BE669834((void ***)v1058);
  sub_1BE669A30(v1048);
}

void sub_1BE6687CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  void *v50;
  uint64_t v51;

  if (v50)
  {
    *(_QWORD *)(v51 - 248) = v50;
    operator delete(v50);
  }
  sub_1BE6694E8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1BE668BCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v4;
  _QWORD *v5;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  int64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  uint64_t v79;
  double v80;
  double *v81;
  char *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  unint64_t v96;
  __int128 v98;
  __int128 v100;
  void *__p[2];
  char *v102;
  _BYTE v103[40];
  __int128 v104;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *(double *)(a2 + 32);
  *(double *)(a4 + 24) = v4 + *(double *)(a2 + 48);
  *(double *)(a4 + 32) = v4;
  memset(&v103[8], 0, 32);
  *(_OWORD *)__p = 0u;
  v102 = 0;
  *(double *)v103 = v4;
  v5 = (_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a2 + 56))
    goto LABEL_123;
  v7 = (_QWORD *)a2;
  v96 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v95 = 0;
  do
  {
    ++*(_QWORD *)&v103[32];
    v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *v7);
    v16 = v15;
    if (v15 == 2)
    {
      if (v11 == v10)
      {
        v11 = v10;
        v12 = v10;
        goto LABEL_3;
      }
LABEL_11:
      v18 = v7[1] + 1;
      v17 = (_QWORD *)a4;
      *(_QWORD *)&v103[16] = v18;
      *(_QWORD *)&v103[24] = a3;
      v19 = *(_QWORD *)(a4 + 8);
      if (v19 < *(_QWORD *)(a4 + 16))
        goto LABEL_12;
      goto LABEL_38;
    }
    if (v15)
    {
      if (v15 != 1)
        goto LABEL_11;
      if ((unint64_t)v10 < v96)
      {
        *(_QWORD *)v10 = *v7;
        v9 = v10 + 8;
        v17 = (_QWORD *)a4;
        goto LABEL_37;
      }
      v28 = (v10 - v12) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_128;
      if ((uint64_t)(v96 - (_QWORD)v12) >> 2 > v29)
        v29 = (uint64_t)(v96 - (_QWORD)v12) >> 2;
      if (v96 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 >> 61)
          goto LABEL_126;
        v31 = v30;
        v32 = operator new(8 * v30);
        v30 = v31;
        v33 = &v32[8 * v28];
        *(_QWORD *)v33 = *v7;
        v9 = v33 + 8;
        v34 = v10 - v12;
        if (v10 != v12)
        {
LABEL_30:
          v35 = v34 - 8;
          if (v35 >= 0x58 && (unint64_t)(v12 - v32) >= 0x20)
          {
            v52 = (v35 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v36 = &v10[-v53];
            v33 -= v53;
            v54 = &v32[8 * v28 - 16];
            v55 = (__int128 *)(v10 - 16);
            v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *v55;
              *(v54 - 1) = *(v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 2;
              v56 -= 4;
            }
            while (v56);
            v17 = (_QWORD *)a4;
            if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_34:
              v8 = &v32[8 * v30];
              __p[0] = v33;
              v102 = v8;
              if (!v12)
              {
LABEL_36:
                v95 = (unint64_t)v8;
                v96 = (unint64_t)v8;
LABEL_37:
                __p[1] = v9;
                v18 = v7[1];
                *(_QWORD *)&v103[16] = v18;
                *(_QWORD *)&v103[24] = a3;
                v19 = v17[1];
                if (v19 < v17[2])
                {
LABEL_12:
                  *(_QWORD *)v19 = 0;
                  *(_QWORD *)(v19 + 8) = 0;
                  *(_QWORD *)(v19 + 16) = 0;
                  v11 = (char *)__p[0];
                  v20 = v9 - (char *)__p[0];
                  if (v9 != __p[0])
                  {
                    if (v20 < 0)
                      sub_1BE61F930();
                    v21 = (char *)operator new(v9 - (char *)__p[0]);
                    *(_QWORD *)v19 = v21;
                    *(_QWORD *)(v19 + 8) = v21;
                    v22 = &v21[8 * (v20 >> 3)];
                    *(_QWORD *)(v19 + 16) = v22;
                    memcpy(v21, v11, v20);
                    *(_QWORD *)(v19 + 8) = v22;
                  }
                  v23 = *(_OWORD *)v103;
                  v24 = *(_OWORD *)&v103[16];
                  *(_QWORD *)(v19 + 56) = *(_QWORD *)&v103[32];
                  *(_OWORD *)(v19 + 40) = v24;
                  *(_OWORD *)(v19 + 24) = v23;
                  v17[1] = v19 + 64;
                  v17[1] = v19 + 64;
                  __p[1] = v11;
                  *(_QWORD *)&v103[32] = 0;
                  if (v16 != 2)
                    goto LABEL_16;
                  goto LABEL_39;
                }
LABEL_38:
                v38 = sub_1BE669DE4(v17, (uint64_t)__p);
                v11 = (char *)__p[0];
                *(_QWORD *)(a4 + 8) = v38;
                __p[1] = v11;
                *(_QWORD *)&v103[32] = 0;
                if (v16 != 2)
                {
LABEL_16:
                  v25 = (_QWORD *)*v5;
                  if (!*v5)
                  {
                    v27 = 0;
                    v9 = v11;
LABEL_52:
                    v42 = v7[5];
                    *(_QWORD *)v103 = v27;
                    *(_QWORD *)&v103[8] = v42;
                    v10 = v9;
                    v12 = v11;
                    a3 = v18;
                    goto LABEL_3;
                  }
                  v9 = v11;
LABEL_51:
                  v27 = v25[4];
                  goto LABEL_52;
                }
LABEL_39:
                if (v11 >= v8)
                {
                  v39 = (v8 - v11) >> 2;
                  if (v39 <= 1)
                    v39 = 1;
                  if ((unint64_t)(v8 - v11) >= 0x7FFFFFFFFFFFFFF8)
                    v40 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v40 = v39;
                  if (v40 >> 61)
LABEL_126:
                    sub_1BE61F100();
                  v41 = (char *)operator new(8 * v40);
                  *(_QWORD *)v41 = *v7;
                  v9 = v41 + 8;
                  v8 = &v41[8 * v40];
                  __p[0] = v41;
                  v102 = v8;
                  if (v11)
                    operator delete(v11);
                  v11 = v41;
                }
                else
                {
                  *(_QWORD *)v11 = *v7;
                  v9 = v11 + 8;
                }
                __p[1] = v9;
                v95 = (unint64_t)v8;
                v96 = (unint64_t)v8;
                v25 = v7;
                goto LABEL_51;
              }
LABEL_35:
              operator delete(v12);
              goto LABEL_36;
            }
          }
          else
          {
            v36 = v10;
            v17 = (_QWORD *)a4;
          }
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v33 - 1) = v37;
            v33 -= 8;
          }
          while (v36 != v12);
          goto LABEL_34;
        }
      }
      else
      {
        v32 = 0;
        v33 = (char *)(8 * v28);
        *(_QWORD *)(8 * v28) = *v7;
        v9 = (char *)(8 * v28 + 8);
        v34 = v10 - v12;
        if (v10 != v12)
          goto LABEL_30;
      }
      v17 = (_QWORD *)a4;
      v8 = &v32[8 * v30];
      __p[0] = v33;
      v102 = v8;
      if (!v12)
        goto LABEL_36;
      goto LABEL_35;
    }
    if ((unint64_t)v10 >= v95)
    {
      v43 = (v10 - v12) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
LABEL_128:
        sub_1BE61F930();
      if ((uint64_t)(v95 - (_QWORD)v12) >> 2 > v44)
        v44 = (uint64_t)(v95 - (_QWORD)v12) >> 2;
      if (v95 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        if (v45 >> 61)
          goto LABEL_126;
        v46 = operator new(8 * v45);
        v11 = &v46[8 * v43];
        *(_QWORD *)v11 = *v7;
        v9 = v11 + 8;
        v47 = v10 - v12;
        if (v10 == v12)
          goto LABEL_70;
      }
      else
      {
        v46 = 0;
        v11 = (char *)(8 * v43);
        *(_QWORD *)(8 * v43) = *v7;
        v9 = (char *)(8 * v43 + 8);
        v47 = v10 - v12;
        if (v10 == v12)
          goto LABEL_70;
      }
      v48 = v47 - 8;
      if (v48 >= 0x168)
      {
        v51 = (v10 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
        if (&v46[v10 - v12 - 8 - v51] > &v46[v10 - v12 - 8])
        {
          v49 = v10;
        }
        else if (&v10[-v51 - 8] > v10 - 8)
        {
          v49 = v10;
        }
        else if ((unint64_t)(v12 - v46) >= 0x20)
        {
          v58 = (v48 >> 3) + 1;
          v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = &v10[-v59];
          v11 -= v59;
          v60 = &v46[8 * v43 - 16];
          v61 = (__int128 *)(v10 - 16);
          v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *v61;
            *(v60 - 1) = *(v61 - 1);
            *v60 = v63;
            v60 -= 2;
            v61 -= 2;
            v62 -= 4;
          }
          while (v62);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_70;
        }
        else
        {
          v49 = v10;
        }
      }
      else
      {
        v49 = v10;
      }
      do
      {
        v50 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *((_QWORD *)v11 - 1) = v50;
        v11 -= 8;
      }
      while (v49 != v12);
LABEL_70:
      v8 = &v46[8 * v45];
      __p[0] = v11;
      v102 = v8;
      if (v12)
        operator delete(v12);
      v26 = v8;
      v12 = v11;
      goto LABEL_73;
    }
    *(_QWORD *)v10 = *v7;
    v26 = (char *)v95;
    v9 = v10 + 8;
LABEL_73:
    __p[1] = v9;
    v10 = v9;
    v95 = (unint64_t)v26;
    v96 = (unint64_t)v26;
LABEL_3:
    v7 = (_QWORD *)*v5;
    v13 = (_QWORD *)*v5;
    v14 = v13[7];
    v5 = v13 + 7;
  }
  while (v14);
  if (v11 == v10)
  {
    v64 = (unint64_t *)a4;
    v72 = *(_QWORD *)a4;
    v71 = *(char **)(a4 + 8);
    if (*(char **)a4 != v71)
    {
      *((_QWORD *)v71 - 3) = 0;
      goto LABEL_98;
    }
  }
  else
  {
    *(_QWORD *)&v103[16] = 0;
    *(_QWORD *)&v103[24] = a3;
    v64 = (unint64_t *)a4;
    v65 = *(_QWORD *)(a4 + 8);
    if (v65 >= *(_QWORD *)(a4 + 16))
    {
      v71 = sub_1BE669DE4((_QWORD *)a4, (uint64_t)__p);
    }
    else
    {
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = 0;
      *(_QWORD *)(v65 + 16) = 0;
      v66 = v9 - v11;
      if (v9 != v11)
      {
        if (v66 < 0)
          sub_1BE61F930();
        v67 = (char *)operator new(v9 - v11);
        *(_QWORD *)v65 = v67;
        *(_QWORD *)(v65 + 8) = v67;
        v68 = &v67[8 * (v66 >> 3)];
        *(_QWORD *)(v65 + 16) = v68;
        memcpy(v67, v11, v66);
        *(_QWORD *)(v65 + 8) = v68;
      }
      v69 = *(_OWORD *)v103;
      v70 = *(_OWORD *)&v103[16];
      *(_QWORD *)(v65 + 56) = *(_QWORD *)&v103[32];
      *(_OWORD *)(v65 + 40) = v70;
      *(_OWORD *)(v65 + 24) = v69;
      v71 = (char *)(v65 + 64);
      *(_QWORD *)(a4 + 8) = v65 + 64;
    }
    *(_QWORD *)(a4 + 8) = v71;
    v72 = *(_QWORD *)a4;
    if (*(char **)a4 != v71)
    {
LABEL_98:
      v73 = (char *)(v72 + 64);
      if ((char *)(v72 + 64) != v71)
      {
        v74 = (unint64_t)&v71[-v72 - 128];
        v75 = v72;
        if (v74 < 0x40)
          goto LABEL_103;
        v76 = (v74 >> 6) + 1;
        v77 = (v76 & 0x7FFFFFFFFFFFFFELL) << 6;
        v73 += v77;
        v75 = v72 + v77;
        v78 = (double *)(v72 + 88);
        v79 = v76 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v80 = *v78 - v78[8];
          *(v78 - 8) = *(v78 - 8) - *v78;
          *v78 = v80;
          v78 += 16;
          v79 -= 2;
        }
        while (v79);
        if (v76 != (v76 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_103:
          v81 = (double *)(v75 + 88);
          do
          {
            *(v81 - 8) = *(v81 - 8) - *v81;
            v73 += 64;
            v81 += 8;
          }
          while (v73 != v71);
        }
      }
    }
    if ((char *)v72 != v71)
    {
      v82 = v71 - 64;
      if ((unint64_t)(v71 - 64) > v72)
      {
        do
        {
          v83 = *(_QWORD *)v72;
          v84 = *(_OWORD *)(v72 + 8);
          *(_QWORD *)(v72 + 8) = 0;
          *(_QWORD *)(v72 + 16) = 0;
          *(_QWORD *)v72 = 0;
          v104 = *(_OWORD *)(v72 + 24);
          v85 = *(_OWORD *)(v72 + 40);
          v86 = *(_QWORD *)(v72 + 56);
          *(_OWORD *)v72 = *(_OWORD *)v82;
          *(_QWORD *)(v72 + 16) = *((_QWORD *)v82 + 2);
          *(_QWORD *)v82 = 0;
          *((_QWORD *)v82 + 1) = 0;
          *((_QWORD *)v82 + 2) = 0;
          *(_OWORD *)(v72 + 24) = *(_OWORD *)(v82 + 24);
          *(_QWORD *)(v72 + 40) = *((_QWORD *)v82 + 5);
          *(_OWORD *)(v72 + 48) = *((_OWORD *)v82 + 3);
          v87 = *(void **)v82;
          if (*(_QWORD *)v82)
          {
            *((_QWORD *)v82 + 1) = v87;
            v98 = v85;
            v100 = v84;
            operator delete(v87);
            v85 = v98;
            v84 = v100;
          }
          *(_QWORD *)v82 = v83;
          *(_OWORD *)(v82 + 8) = v84;
          *(_OWORD *)(v82 + 24) = v104;
          *(_OWORD *)(v82 + 40) = v85;
          *((_QWORD *)v82 + 7) = v86;
          v82 -= 64;
          v72 += 64;
        }
        while (v72 < (unint64_t)v82);
        v72 = *v64;
        v71 = (char *)v64[1];
      }
    }
    while ((char *)v72 != v71)
    {
      v88 = *(_QWORD *)v72;
      v89 = *(_QWORD *)(v72 + 8);
      v90 = (_QWORD *)(v89 - 8);
      if (*(_QWORD *)v72 != v89 && (unint64_t)v90 > v88)
      {
        v92 = v88 + 8;
        do
        {
          v93 = *(_QWORD *)(v92 - 8);
          *(_QWORD *)(v92 - 8) = *v90;
          *v90-- = v93;
          v94 = v92 >= (unint64_t)v90;
          v92 += 8;
        }
        while (!v94);
      }
      v72 += 64;
    }
  }
LABEL_123:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BE6693F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  sub_1BE669474(a13);
  _Unwind_Resume(a1);
}

void **sub_1BE669474(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 8);
        v5 -= 64;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1BE6694E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v12;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        *(_QWORD *)(v3 - 40) = &off_1E77F0FC8;
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(std::__shared_weak_count **)(v7 - 8);
              if (v8)
              {
                p_shared_owners = (unint64_t *)&v8->__shared_owners_;
                do
                  v10 = __ldaxr(p_shared_owners);
                while (__stlxr(v10 - 1, p_shared_owners));
                if (!v10)
                {
                  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                  std::__shared_weak_count::__release_weak(v8);
                }
              }
              v7 -= 16;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 104;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  v12 = (void **)(a1 + 24);
  sub_1BE669834(&v12);
  sub_1BE669A30(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1BE6695F0(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)operator new(8uLL);
  *(_QWORD *)v4 = *a2;
  v5 = v4 + 8;
  a1[1] = v4 + 8;
  a1[2] = v4 + 8;
  *a1 = v4;
  v6 = (_QWORD *)a2[7];
  if (v6)
  {
    v7 = v4;
    v8 = v4 + 8;
    while (1)
    {
      while (v8 < v5)
      {
        *(_QWORD *)v8 = *v6;
        v8 += 8;
        a1[1] = v8;
        v6 = (_QWORD *)v6[7];
        if (!v6)
          return;
      }
      v9 = (v8 - v7) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_1BE61F930();
      if ((v5 - v7) >> 2 > v10)
        v10 = (v5 - v7) >> 2;
      if ((unint64_t)(v5 - v7) >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 61)
          sub_1BE61F100();
        v12 = operator new(8 * v11);
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = *v6;
        v14 = (uint64_t)(v13 + 8);
        v15 = v8 - v7;
        if (v8 == v7)
          goto LABEL_19;
      }
      else
      {
        v12 = 0;
        v13 = (char *)(8 * v9);
        *(_QWORD *)(8 * v9) = *v6;
        v14 = 8 * v9 + 8;
        v15 = v8 - v7;
        if (v8 == v7)
          goto LABEL_19;
      }
      v16 = v15 - 8;
      if (v16 < 0x168)
      {
        v17 = v8;
        goto LABEL_18;
      }
      v19 = (v8 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
      if (&v12[v8 - v7 - 8 - v19] > &v12[v8 - v7 - 8])
        break;
      if (&v8[-v19 - 8] > v8 - 8)
      {
        v17 = v8;
        goto LABEL_18;
      }
      if ((unint64_t)(v7 - v12) < 0x20)
      {
        v17 = v8;
        goto LABEL_18;
      }
      v20 = (v16 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = &v8[-v21];
      v13 -= v21;
      v22 = &v12[8 * v9 - 16];
      v23 = v8 - 16;
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
LABEL_19:
      v5 = &v12[8 * v11];
      *a1 = v13;
      a1[1] = (char *)v14;
      a1[2] = v5;
      if (v7)
        operator delete(v7);
      v7 = v13;
      a1[1] = (char *)v14;
      v6 = (_QWORD *)v6[7];
      v8 = (char *)v14;
      if (!v6)
        return;
    }
    v17 = v8;
    do
    {
LABEL_18:
      v18 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v18;
      v13 -= 8;
    }
    while (v17 != v7);
    goto LABEL_19;
  }
}

void sub_1BE66980C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE669834(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v8 = (_QWORD *)*--v4;
        v7 = v8;
        *v4 = 0;
        if (v8)
        {
          v7[8] = &off_1E77F0FC8;
          v9 = v7[10];
          if (v9)
          {
            v10 = v7[11];
            v6 = (void *)v7[10];
            if (v10 != v9)
            {
              do
              {
                v11 = *(std::__shared_weak_count **)(v10 - 8);
                if (v11)
                {
                  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
                  do
                    v13 = __ldaxr(p_shared_owners);
                  while (__stlxr(v13 - 1, p_shared_owners));
                  if (!v13)
                  {
                    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                    std::__shared_weak_count::__release_weak(v11);
                  }
                }
                v10 -= 16;
              }
              while (v10 != v9);
              v6 = (void *)v7[10];
            }
            v7[11] = v9;
            operator delete(v6);
          }
          MEMORY[0x1C3B812EC](v7, 0x10A0C407BC771E5);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1BE669960(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v2[8] = &off_1E77F0FC8;
    v3 = v2[10];
    if (v3)
    {
      v4 = v2[11];
      v5 = (void *)v2[10];
      if (v4 != v3)
      {
        do
        {
          v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = (void *)v2[10];
      }
      v2[11] = v3;
      operator delete(v5);
    }
    MEMORY[0x1C3B812EC](v2, 0x10A0C407BC771E5);
  }
  return a1;
}

void sub_1BE669A30(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1BE669A30(*a1);
    sub_1BE669A30(a1[1]);
    v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_1BE669A78(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
    {
      v5[8] = &off_1E77F0FC8;
      v6 = v5[10];
      if (v6)
      {
        v7 = v5[11];
        v4 = (void *)v5[10];
        if (v7 != v6)
        {
          do
          {
            v8 = *(std::__shared_weak_count **)(v7 - 8);
            if (v8)
            {
              p_shared_owners = (unint64_t *)&v8->__shared_owners_;
              do
                v10 = __ldaxr(p_shared_owners);
              while (__stlxr(v10 - 1, p_shared_owners));
              if (!v10)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            v7 -= 16;
          }
          while (v7 != v6);
          v4 = (void *)v5[10];
        }
        v5[11] = v6;
        operator delete(v4);
      }
      MEMORY[0x1C3B812EC](v5, 0x10A0C407BC771E5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1BE669B80(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 16);
  v5 = *(_QWORD **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2)
    {
      if (++v4 == v5)
      {
        v4 = *(_QWORD **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5 && *(_BYTE *)(result + 8) && *(double *)(a2 + 40) < a4)
  {
    *(_QWORD *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t sub_1BE669BD4(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 16);
  v5 = *(_QWORD **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2)
    {
      if (++v4 == v5)
      {
        v4 = *(_QWORD **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    *(_QWORD *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t *sub_1BE669C14(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_1BE61F930();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1BE61F100();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

BOOL sub_1BE669D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2
      || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a3) == 1;
}

char *sub_1BE669DE4(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  __int128 v29;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (uint64_t)&v2[-*a1] >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    sub_1BE61F930();
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 58)
      sub_1BE61F100();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v4];
  v12 = &v10[64 * v9];
  *((_QWORD *)&v29 + 1) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  v14 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v15 = v13 - *(_QWORD *)a2;
  if (v13 != *(_QWORD *)a2)
  {
    if (v15 < 0)
      sub_1BE61F930();
    v16 = (char *)operator new(v13 - *(_QWORD *)a2);
    *(_QWORD *)v11 = v16;
    *((_QWORD *)v11 + 1) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *((_QWORD *)v11 + 2) = v17;
    memcpy(v16, v14, v15);
    *((_QWORD *)v11 + 1) = v17;
  }
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  v18 = v11 + 64;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v11[v19];
      v21 = &v2[v19];
      *((_QWORD *)v20 - 7) = 0;
      *((_QWORD *)v20 - 6) = 0;
      *((_OWORD *)v20 - 4) = *(_OWORD *)&v2[v19 - 64];
      *((_QWORD *)v20 - 6) = *(_QWORD *)&v2[v19 - 48];
      *((_QWORD *)v21 - 8) = 0;
      *((_QWORD *)v21 - 7) = 0;
      *((_QWORD *)v21 - 6) = 0;
      v22 = *(_OWORD *)&v2[v19 - 40];
      v23 = *(_OWORD *)&v2[v19 - 24];
      *((_QWORD *)v20 - 1) = *(_QWORD *)&v2[v19 - 8];
      *(_OWORD *)(v20 - 24) = v23;
      *(_OWORD *)(v20 - 40) = v22;
      v19 -= 64;
    }
    while (&v2[v19] != v3);
    v2 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = &v11[v19];
    *(_QWORD *)&v29 = v11 + 64;
    *(_OWORD *)(a1 + 1) = v29;
    v18 = v11 + 64;
    if (v24 != v2)
    {
      v25 = v24;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 8);
        v25 -= 64;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v24 - 7) = v26;
          operator delete(v26);
        }
        v24 = v25;
      }
      while (v25 != v2);
    }
  }
  if (v2)
    operator delete(v2);
  return v18;
}

void sub_1BE669FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_1BE669FEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE669FEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 64;
        v4 = *(void **)(v2 - 64);
        *(_QWORD *)(a1 + 16) = v2 - 64;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 56) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 64;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE66A058(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E77F1118;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE66A0A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 24);
        return 2 * (v2 != v3);
      }
    }
  }
  return 2 * (v2 != v3);
}

uint64_t sub_1BE66A0DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 240) = 0;
  }
  sub_1BE62033C(a1 + 216, *(_QWORD **)(a1 + 224));
  sub_1BE66A278(a1 + 192, *(_QWORD **)(a1 + 200));
  *(_QWORD *)(a1 + 128) = &unk_1E77F08C8;
  sub_1BE61F3E8(a1 + 160, *(char **)(a1 + 168));
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(void **)(a1 + 136);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(_QWORD *)(a1 + 112) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 80);
  if (v7)
  {
    *(_QWORD *)(a1 + 88) = v7;
    operator delete(v7);
  }
  sub_1BE62033C(a1 + 56, *(_QWORD **)(a1 + 64));
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1BE66A1F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &unk_1E77F08C8;
  sub_1BE61F3E8(a1 + 32, *(char **)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE66A278(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1BE66A278(a1, *a2);
    sub_1BE66A278(a1, a2[1]);
    sub_1BE62033C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *sub_1BE66A2C4(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  int v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t *v21;
  const void *v22;
  _QWORD *v23;
  const void *v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;

  v5 = a1[1];
  v4 = (char **)(a1 + 1);
  v36 = a1[2];
  v6 = (uint64_t **)(a1 + 4);
  v8 = a1 + 5;
  v7 = a1[5];
  if (!v7)
    goto LABEL_40;
  v35 = a1[1];
  v9 = (uint64_t **)(a1 + 4);
  v10 = *(char *)(a2 + 23);
  v11 = v10 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v12 = v10 >= 0 ? (const void *)a2 : *(const void **)a2;
  v13 = a1 + 5;
  do
  {
    v14 = *(char *)(v7 + 55);
    if (v14 >= 0)
      v15 = *(unsigned __int8 *)(v7 + 55);
    else
      v15 = *(_QWORD *)(v7 + 40);
    if (v14 >= 0)
      v16 = (const void *)(v7 + 32);
    else
      v16 = *(const void **)(v7 + 32);
    if (v11 >= v15)
      v17 = v15;
    else
      v17 = v11;
    v18 = memcmp(v16, v12, v17);
    v19 = v15 < v11;
    if (v18)
      v19 = v18 < 0;
    v20 = !v19;
    if (v19)
      v21 = (uint64_t *)(v7 + 8);
    else
      v21 = (uint64_t *)v7;
    if (v20)
      v13 = (_QWORD *)v7;
    v7 = *v21;
  }
  while (*v21);
  v6 = v9;
  v5 = v35;
  if (v13 == v8)
    goto LABEL_40;
  v24 = (const void *)v13[4];
  v23 = v13 + 4;
  v22 = v24;
  v25 = *((char *)v23 + 23);
  if (v25 >= 0)
    v26 = *((unsigned __int8 *)v23 + 23);
  else
    v26 = v23[1];
  if (v25 >= 0)
    v27 = v23;
  else
    v27 = v22;
  if (v26 >= v11)
    v28 = v11;
  else
    v28 = v26;
  v29 = memcmp(v12, v27, v28);
  v30 = v11 < v26;
  if (v29)
    v30 = v29 < 0;
  if (v30)
  {
LABEL_40:
    v31 = (uint64_t *)(0xAAAAAAAAAAAAAAABLL * ((v36 - v5) >> 3));
    v37 = (__int128 *)a2;
    sub_1BE66A694(v6, (const void **)a2, (uint64_t)&unk_1BE8D50A2, &v37)[7] = v31;
    v32 = a1[2];
    if (v32 >= a1[3])
    {
      a1[2] = sub_1BE66A830(v4, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1BE61F128((_BYTE *)a1[2], *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v33 = *(_OWORD *)a2;
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v32 = v33;
      }
      a1[2] = v32 + 24;
      a1[2] = v32 + 24;
    }
  }
  else
  {
    v37 = (__int128 *)a2;
    return sub_1BE66A694(v6, (const void **)a2, (uint64_t)&unk_1BE8D50A2, &v37)[7];
  }
  return v31;
}

void sub_1BE66A4BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE66A4C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  BOOL v19;
  uint64_t *v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  int v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  unint64_t v30;
  __int128 v31;
  __int128 *v33;

  v6 = a1 + 40;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (uint64_t **)(a1 + 32);
  if (!v7)
    goto LABEL_40;
  v9 = *(char *)(a2 + 23);
  v10 = v9 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v11 = v9 >= 0 ? (const void *)a2 : *(const void **)a2;
  v12 = a1 + 40;
  do
  {
    v13 = *(char *)(v7 + 55);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(v7 + 55);
    else
      v14 = *(_QWORD *)(v7 + 40);
    if (v13 >= 0)
      v15 = (const void *)(v7 + 32);
    else
      v15 = *(const void **)(v7 + 32);
    if (v10 >= v14)
      v16 = v14;
    else
      v16 = v10;
    v17 = memcmp(v15, v11, v16);
    v18 = v14 < v10;
    if (v17)
      v18 = v17 < 0;
    v19 = !v18;
    if (v18)
      v20 = (uint64_t *)(v7 + 8);
    else
      v20 = (uint64_t *)v7;
    if (v19)
      v12 = v7;
    v7 = *v20;
  }
  while (*v20);
  if (v12 == v6)
    goto LABEL_40;
  v23 = *(const void **)(v12 + 32);
  v22 = v12 + 32;
  v21 = v23;
  v24 = *(char *)(v22 + 23);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v22 + 23);
  else
    v25 = *(_QWORD *)(v22 + 8);
  if (v24 >= 0)
    v26 = (const void *)v22;
  else
    v26 = v21;
  if (v25 >= v10)
    v27 = v10;
  else
    v27 = v25;
  v28 = memcmp(v11, v26, v27);
  v29 = v10 < v25;
  if (v28)
    v29 = v28 < 0;
  if (v29)
  {
LABEL_40:
    v33 = (__int128 *)a2;
    sub_1BE66A694(v8, (const void **)a2, (uint64_t)&unk_1BE8D50A2, &v33)[7] = a3;
    v30 = *(_QWORD *)(a1 + 16);
    if (v30 >= *(_QWORD *)(a1 + 24))
    {
      *(_QWORD *)(a1 + 16) = sub_1BE66A830((char **)(a1 + 8), a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1BE61F128(*(_BYTE **)(a1 + 16), *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v31 = *(_OWORD *)a2;
        *(_QWORD *)(v30 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v30 = v31;
      }
      *(_QWORD *)(a1 + 16) = v30 + 24;
      *(_QWORD *)(a1 + 16) = v30 + 24;
    }
  }
  else
  {
    v33 = (__int128 *)a2;
    return sub_1BE66A694(v8, (const void **)a2, (uint64_t)&unk_1BE8D50A2, &v33)[7];
  }
  return a3;
}

void sub_1BE66A68C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t **sub_1BE66A694(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x40uLL);
    v24 = v23 + 4;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1BE61F128(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    v23[7] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_1BE61F5C0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1BE66A81C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1BE66A830(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1BE61F128(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1BE66A9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE66AA04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE66AA04(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE66AA68(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "CHChatBubble");
}

void sub_1BE66AA98(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "CHEllipse");
}

void sub_1BE66AABC(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "CHManhattanLine");
}

_QWORD *sub_1BE66AAE8(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_1BE66ABF4(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_1BE61F5C0(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_QWORD *sub_1BE66ABF4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t sub_1BE66ADA4(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _OWORD *v4;
  char *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  _OWORD **v16;

  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_1BE66B04C((_QWORD *)(a1 + 128));
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v4 = *(_OWORD **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v4 >= v3)
  {
    v16 = (_OWORD **)v2;
    v6 = (_OWORD *)*v2;
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *v2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0x666666666666666)
      sub_1BE61F930();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - (_QWORD)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x666666666666666)
        sub_1BE61F100();
      v11 = (char *)operator new(40 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[40 * v7];
    v12[32] = 0;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v5 = v12 + 40;
    if (v4 != v6)
    {
      do
      {
        v13 = *(_OWORD *)((char *)v4 - 40);
        v14 = *(_OWORD *)((char *)v4 - 24);
        *(v12 - 8) = *((_BYTE *)v4 - 8);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v4 = (_OWORD *)((char *)v4 - 40);
      }
      while (v4 != v6);
      v4 = *v16;
    }
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = &v11[40 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0u;
    v4[1] = 0u;
    v5 = (char *)v4 + 40;
  }
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 1;
  return a1;
}

void sub_1BE66AF88(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v7 = *(void **)(v1 + 104);
  if (v7)
  {
    *(_QWORD *)(v1 + 112) = v7;
    operator delete(v7);
    v8 = *v5;
    if (!*v5)
    {
LABEL_3:
      sub_1BE62033C(v3, *v4);
      v9 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *v5;
    if (!*v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 88) = v8;
  operator delete(v8);
  sub_1BE62033C(v3, *v4);
  v9 = *v2;
  if (!*v2)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v1 + 40) = v9;
  operator delete(v9);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE66B04C(_QWORD *a1)
{
  void *__p;
  char v4;
  void *v5;
  char v6;

  *a1 = &unk_1E77F08C8;
  a1[1] = 0;
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 5;
  a1[6] = 0;
  v6 = 1;
  LOWORD(v5) = 44;
  v4 = 1;
  LOWORD(__p) = 35;
  sub_1BE66A2C4(a1, (uint64_t)&v5);
  (*(void (**)(_QWORD *, void **))*a1)(a1, &__p);
  if (v4 < 0)
  {
    operator delete(__p);
    if ((v6 & 0x80000000) == 0)
      return a1;
  }
  else if ((v6 & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v5);
  return a1;
}

void sub_1BE66B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void **v20;
  uint64_t v21;
  char **v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  sub_1BE61F3E8(v21, *v22);
  sub_1BE61081C(v20);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE66B164(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_23:
      sub_1BE61F930();
    v13 = 5 * v12;
    result = operator new(40 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 7;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 7;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_1BE66B2E4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (uint64_t *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = v13[4];
          v12[4] = v14;
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= v15[4])
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1BE62033C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_1BE62033C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = v4[4];
      v25[4] = v27;
      v28 = *v24;
      v29 = (uint64_t **)(a1 + 8);
      v30 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_50:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = **(_QWORD **)a1;
      if (v31)
        goto LABEL_51;
LABEL_52:
      sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = (uint64_t **)v28;
        if (v27 >= v28[4])
          break;
        v28 = (uint64_t *)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_50;
      }
      v28 = (uint64_t *)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = **(_QWORD **)a1;
    if (!v31)
      goto LABEL_52;
LABEL_51:
    *(_QWORD *)a1 = v31;
    v26 = *v30;
    goto LABEL_52;
  }
}

char *sub_1BE66B600(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (0x8E38E38E38E38E39 * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v18 = (_QWORD *)(a1 + 8);
    result = *(char **)(a1 + 8);
    if (0x8E38E38E38E38E39 * ((result - v9) >> 3) >= __sz)
    {
      if (a2 == a3)
      {
        v29 = v9;
      }
      else
      {
        v23 = 0;
        do
        {
          if (a2 != v9)
          {
            v24 = &v9[v23];
            *(_OWORD *)v24 = *(_OWORD *)&a2[v23];
            v25 = *(_OWORD *)&a2[v23 + 32];
            *((_OWORD *)v24 + 1) = *(_OWORD *)&a2[v23 + 16];
            *((_OWORD *)v24 + 2) = v25;
            *((_OWORD *)v24 + 3) = *(_OWORD *)&a2[v23 + 48];
            *((_QWORD *)v24 + 8) = *(_QWORD *)&a2[v23 + 64];
          }
          v23 += 72;
        }
        while (&a2[v23] != a3);
        v29 = &v9[v23];
      }
      *v18 = v29;
    }
    else
    {
      v19 = &a2[8 * ((result - v9) >> 3)];
      if (result != v9)
      {
        v20 = 0;
        do
        {
          if (a2 != v9)
          {
            v21 = &v9[v20];
            *(_OWORD *)v21 = *(_OWORD *)&a2[v20];
            v22 = *(_OWORD *)&a2[v20 + 32];
            *((_OWORD *)v21 + 1) = *(_OWORD *)&a2[v20 + 16];
            *((_OWORD *)v21 + 2) = v22;
            *((_OWORD *)v21 + 3) = *(_OWORD *)&a2[v20 + 48];
            *((_QWORD *)v21 + 8) = *(_QWORD *)&a2[v20 + 64];
          }
          v20 += 72;
        }
        while (8 * ((result - v9) >> 3) != v20);
      }
      v26 = result;
      if (v19 != a3)
      {
        v27 = (uint64_t)result;
        do
        {
          *(_OWORD *)v27 = *(_OWORD *)v19;
          v28 = *((_OWORD *)v19 + 2);
          *(_OWORD *)(v27 + 16) = *((_OWORD *)v19 + 1);
          *(_OWORD *)(v27 + 32) = v28;
          *(_OWORD *)(v27 + 48) = *((_OWORD *)v19 + 3);
          *(_QWORD *)(v27 + 64) = *((_QWORD *)v19 + 8);
          v26 += 72;
          v19 += 72;
          v27 += 72;
        }
        while (v19 != a3);
      }
      *v18 = v26;
    }
  }
  else
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v9);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL)
      goto LABEL_33;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v11;
    if (v12 > 0x38E38E38E38E38ELL)
LABEL_33:
      sub_1BE61F930();
    v13 = 72 * v12;
    result = (char *)operator new(72 * v12);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v15 = (uint64_t)result;
    if (v6 != a3)
    {
      v15 = (uint64_t)result;
      do
      {
        v16 = *((_OWORD *)v6 + 1);
        *(_OWORD *)v15 = *(_OWORD *)v6;
        *(_OWORD *)(v15 + 16) = v16;
        v17 = *((_OWORD *)v6 + 3);
        *(_OWORD *)(v15 + 32) = *((_OWORD *)v6 + 2);
        *(_OWORD *)(v15 + 48) = v17;
        *(_QWORD *)(v15 + 64) = *((_QWORD *)v6 + 8);
        v15 += 72;
        v6 += 72;
      }
      while (v6 != a3);
    }
    *(_QWORD *)(a1 + 8) = v15;
  }
  return result;
}

void sub_1BE66B898(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  const std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const std::string *v28;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v20 = *(std::string **)a1;
      }
      else
      {
        v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v16 = 0;
        do
        {
          v18 = &v9[v16];
          v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1BE61F128(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        v15 = &v9[v16];
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_48;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= __sz)
      v22 = __sz;
    v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      sub_1BE61F930();
    v24 = 24 * v23;
    v25 = (char *)operator new(24 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        v27 = &v25[v26 * 24];
        v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1BE61F128(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((_QWORD *)v27 + 2) = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
  }
}

void sub_1BE66BB9C(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  size_t v18;
  const void *v19;
  _QWORD *v20;
  const void *v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v30;
  _QWORD *v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  char *i;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v40;
  uint64_t *v41;

  v4 = a2;
  if (!a1[2])
    goto LABEL_64;
  v6 = *a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  v41 = v9;
  if (!v9)
    goto LABEL_64;
  v10 = (char *)v9[2];
  if (v10)
  {
    v11 = *(char **)v10;
    if (*(uint64_t **)v10 == v9)
    {
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v38 = (char *)*((_QWORD *)v10 + 1);
        if (!v38)
          break;
        do
        {
          v10 = v38;
          v38 = *(char **)v38;
        }
        while (v38);
      }
    }
    else
    {
      for (*((_QWORD *)v10 + 1) = 0; v11; v11 = (char *)*((_QWORD *)v10 + 1))
      {
        do
        {
          v10 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v40 = v10;
  if (a2 == a3)
  {
    v34 = (uint64_t)a1;
    sub_1BE61F3E8((uint64_t)a1, (char *)v9);
    if (!v10)
      goto LABEL_64;
    goto LABEL_61;
  }
  v12 = a2;
  do
  {
    std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
    v9[7] = v12[7];
    v13 = v41;
    v14 = *v8;
    v15 = a1 + 1;
    v16 = a1 + 1;
    if (!*v8)
    {
LABEL_34:
      *v41 = 0;
      v41[1] = 0;
      v41[2] = (uint64_t)v15;
      *v16 = v41;
      v29 = (uint64_t *)**a1;
      if (!v29)
        goto LABEL_36;
LABEL_35:
      *a1 = v29;
      v13 = *v16;
      goto LABEL_36;
    }
    v17 = *((char *)v41 + 55);
    if (v17 >= 0)
      v18 = *((unsigned __int8 *)v41 + 55);
    else
      v18 = v41[5];
    if (v17 >= 0)
      v19 = v41 + 4;
    else
      v19 = (const void *)v41[4];
    do
    {
      while (1)
      {
        v15 = (uint64_t **)v14;
        v22 = (const void *)v14[4];
        v20 = v14 + 4;
        v21 = v22;
        v23 = *((char *)v20 + 23);
        if (v23 >= 0)
          v24 = *((unsigned __int8 *)v20 + 23);
        else
          v24 = v20[1];
        if (v23 >= 0)
          v25 = v20;
        else
          v25 = v21;
        if (v24 >= v18)
          v26 = v18;
        else
          v26 = v24;
        v27 = memcmp(v19, v25, v26);
        v28 = v18 < v24;
        if (v27)
          v28 = v27 < 0;
        if (!v28)
          break;
        v14 = *v15;
        v16 = v15;
        if (!*v15)
          goto LABEL_34;
      }
      v14 = v15[1];
    }
    while (v14);
    v16 = v15 + 1;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    v15[1] = v41;
    v29 = (uint64_t *)**a1;
    if (v29)
      goto LABEL_35;
LABEL_36:
    sub_1BE61F5C0(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = (uint64_t *)v40;
    v41 = (uint64_t *)v40;
    if (v40)
    {
      v10 = (char *)*((_QWORD *)v40 + 2);
      if (v10)
      {
        v30 = *(char **)v10;
        if (*(char **)v10 == v40)
        {
          *(_QWORD *)v10 = 0;
          while (1)
          {
            v33 = (char *)*((_QWORD *)v10 + 1);
            if (!v33)
              break;
            do
            {
              v10 = v33;
              v33 = *(char **)v33;
            }
            while (v33);
          }
        }
        else
        {
          for (*((_QWORD *)v10 + 1) = 0; v30; v30 = (char *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v30;
              v30 = *(char **)v30;
            }
            while (v30);
          }
        }
      }
      v40 = v10;
      v31 = (_QWORD *)v12[1];
      if (!v31)
      {
        do
        {
LABEL_47:
          v4 = (_QWORD *)v12[2];
          v32 = *v4 == (_QWORD)v12;
          v12 = v4;
        }
        while (!v32);
        goto LABEL_49;
      }
    }
    else
    {
      v10 = 0;
      v31 = (_QWORD *)v12[1];
      if (!v31)
        goto LABEL_47;
    }
    do
    {
      v4 = v31;
      v31 = (_QWORD *)*v31;
    }
    while (v31);
LABEL_49:
    if (!v9)
      break;
    v12 = v4;
  }
  while (v4 != a3);
  v34 = (uint64_t)a1;
  sub_1BE61F3E8((uint64_t)a1, (char *)v9);
  if (!v10)
    goto LABEL_64;
LABEL_61:
  for (i = (char *)*((_QWORD *)v10 + 2); i; i = (char *)*((_QWORD *)i + 2))
    v10 = i;
  sub_1BE61F3E8(v34, v10);
LABEL_64:
  if (v4 != a3)
  {
    do
    {
      sub_1BE66BF34(a1, (uint64_t)(v4 + 4));
      v36 = (_QWORD *)v4[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v4[2];
          v32 = *v37 == (_QWORD)v4;
          v4 = v37;
        }
        while (!v32);
      }
      v4 = v37;
    }
    while (v37 != a3);
  }
}

void sub_1BE66BECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE66BEE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE66BEE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1BE61F3E8(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1BE61F3E8(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

char *sub_1BE66BF34(uint64_t **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;

  v4 = (char *)operator new(0x40uLL);
  v5 = v4;
  v6 = v4 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1BE61F128(v4 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v6 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v5 + 7) = *(_QWORD *)(a2 + 24);
  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = v5[55];
    if (v9 >= 0)
      v10 = v5[55];
    else
      v10 = *((_QWORD *)v5 + 5);
    if (v9 < 0)
      v6 = (_OWORD *)*((_QWORD *)v5 + 4);
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v7;
        v13 = (const void *)v7[4];
        v11 = v7 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v10)
          v17 = v10;
        else
          v17 = v15;
        v18 = memcmp(v6, v16, v17);
        v19 = v10 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v7 = *v8;
        v20 = v8;
        if (!*v8)
          goto LABEL_28;
      }
      v7 = v8[1];
    }
    while (v7);
    v20 = v8 + 1;
  }
  else
  {
    v20 = a1 + 1;
  }
LABEL_28:
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v8;
  *v20 = (uint64_t *)v5;
  v21 = (uint64_t *)**a1;
  v22 = (uint64_t *)v5;
  if (v21)
  {
    *a1 = v21;
    v22 = *v20;
  }
  sub_1BE61F5C0(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1BE66C078(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE66C08C(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *i;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v27;
  uint64_t *v28;

  if (!a1[2])
    goto LABEL_50;
  v6 = *a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  v28 = v9;
  if (!v9)
    goto LABEL_50;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v25 = (uint64_t *)v10[1];
        if (!v25)
          break;
        do
        {
          v10 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  v27 = v10;
  if (a2 == a3)
  {
    v21 = (uint64_t)a1;
    sub_1BE66A278((uint64_t)a1, v9);
    if (!v10)
      goto LABEL_50;
    goto LABEL_47;
  }
  v12 = a2;
  do
  {
    v9[4] = v12[4];
    if (v9 != v12)
    {
      sub_1BE66C3BC((uint64_t)(v9 + 5), (_QWORD *)v12[5], v12 + 6);
      v9 = v28;
    }
    v13 = *v8;
    v14 = a1 + 1;
    v15 = a1 + 1;
    if (!*v8)
    {
LABEL_20:
      *v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v14;
      *v15 = v9;
      v16 = (uint64_t *)**a1;
      if (!v16)
        goto LABEL_22;
LABEL_21:
      *a1 = v16;
      v9 = *v15;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        v14 = (uint64_t **)v13;
        if (v9[4] >= (unint64_t)v13[4])
          break;
        v13 = (uint64_t *)*v13;
        v15 = v14;
        if (!*v14)
          goto LABEL_20;
      }
      v13 = (uint64_t *)v13[1];
    }
    while (v13);
    v15 = v14 + 1;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v14;
    v14[1] = v9;
    v16 = (uint64_t *)**a1;
    if (v16)
      goto LABEL_21;
LABEL_22:
    sub_1BE61F5C0(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = v27;
    v28 = v27;
    if (v27)
    {
      v10 = (uint64_t *)v27[2];
      if (v10)
      {
        v17 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v27)
        {
          *v10 = 0;
          while (1)
          {
            v20 = (uint64_t *)v10[1];
            if (!v20)
              break;
            do
            {
              v10 = v20;
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
        else
        {
          for (v10[1] = 0; v17; v17 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v17;
              v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
      }
      v27 = v10;
      v18 = (uint64_t *)v12[1];
      if (!v18)
      {
        do
        {
LABEL_33:
          a2 = (uint64_t *)v12[2];
          v19 = *a2 == (_QWORD)v12;
          v12 = a2;
        }
        while (!v19);
        goto LABEL_35;
      }
    }
    else
    {
      v10 = 0;
      v18 = (uint64_t *)v12[1];
      if (!v18)
        goto LABEL_33;
    }
    do
    {
      a2 = v18;
      v18 = (uint64_t *)*v18;
    }
    while (v18);
LABEL_35:
    if (!v9)
      break;
    v12 = a2;
  }
  while (a2 != a3);
  v21 = (uint64_t)a1;
  sub_1BE66A278((uint64_t)a1, v9);
  if (!v10)
    goto LABEL_50;
LABEL_47:
  for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
    v10 = i;
  sub_1BE66A278(v21, v10);
LABEL_50:
  if (a2 != a3)
  {
    do
    {
      sub_1BE66C6E8(a1, a2 + 4);
      v23 = (uint64_t *)a2[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (uint64_t *)a2[2];
          v19 = *v24 == (_QWORD)a2;
          a2 = v24;
        }
        while (!v19);
      }
      a2 = v24;
    }
    while (v24 != a3);
  }
}

void sub_1BE66C354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE66C368((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE66C368(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1BE66A278(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1BE66A278(*(_QWORD *)a1, v2);
  }
  return a1;
}

void sub_1BE66C3BC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v33 = (uint64_t *)v10[1];
            if (!v33)
              break;
            do
            {
              v10 = v33;
              v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = v13[4];
          v12[4] = v14;
          v12[5] = v13[5];
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= v15[4])
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1BE62033C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_1BE62033C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x30uLL);
      v26 = v25;
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      v27 = *v24;
      v28 = (uint64_t **)(a1 + 8);
      v29 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_54:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v28;
      *v29 = v25;
      v30 = **(_QWORD **)a1;
      if (v30)
        goto LABEL_55;
LABEL_56:
      sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v31 = (_QWORD *)v4[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v4[2];
          v20 = *v32 == (_QWORD)v4;
          v4 = v32;
        }
        while (!v20);
      }
      v4 = v32;
      if (v32 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v28 = (uint64_t **)v27;
        if (v25[4] >= (unint64_t)v27[4])
          break;
        v27 = (uint64_t *)*v27;
        v29 = v28;
        if (!*v28)
          goto LABEL_54;
      }
      v27 = (uint64_t *)v27[1];
    }
    while (v27);
    v29 = v28 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v28;
    v28[1] = v25;
    v30 = **(_QWORD **)a1;
    if (!v30)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v30;
    v26 = *v29;
    goto LABEL_56;
  }
}

uint64_t *sub_1BE66C6E8(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v11;

  v4 = a1 + 1;
  v5 = (uint64_t *)operator new(0x40uLL);
  v11 = v5;
  v5[6] = 0;
  v6 = (_QWORD *)a2[1];
  v5[4] = *a2;
  v5[5] = (uint64_t)(v5 + 6);
  v5[7] = 0;
  sub_1BE66C85C(v5 + 5, v6, a2 + 2);
  v7 = *v4;
  v8 = v4;
  if (!*v4)
  {
LABEL_6:
    *v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t)v4;
    *v8 = v5;
    v9 = (uint64_t *)**a1;
    if (!v9)
      goto LABEL_8;
LABEL_7:
    *a1 = v9;
    v5 = *v8;
    goto LABEL_8;
  }
  do
  {
    while (1)
    {
      v4 = (uint64_t **)v7;
      if (v5[4] >= (unint64_t)v7[4])
        break;
      v7 = (uint64_t *)*v7;
      v8 = v4;
      if (!*v4)
        goto LABEL_6;
    }
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
  v8 = v4 + 1;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = (uint64_t)v4;
  v4[1] = v5;
  v9 = (uint64_t *)**a1;
  if (v9)
    goto LABEL_7;
LABEL_8:
  sub_1BE61F5C0(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_1BE66C7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD **v3;
  va_list va;

  va_start(va, a2);
  sub_1BE62033C(v2, *v3);
  sub_1BE66C814((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE66C814(uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1BE62033C((uint64_t)(v2 + 5), v2[6]);
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1BE66C85C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_1BE66ABF4(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t *)v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_1BE61F5C0(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void sub_1BE66C968(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *i;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_41;
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v6[1] ? (uint64_t *)v6[1] : v6;
  if (!v8)
    goto LABEL_41;
  v9 = (uint64_t *)v8[2];
  if (v9)
  {
    v10 = (uint64_t *)*v9;
    if ((uint64_t *)*v9 == v8)
    {
      *v9 = 0;
      while (1)
      {
        v23 = (uint64_t *)v9[1];
        if (!v23)
          break;
        do
        {
          v9 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
    }
    else
    {
      for (v9[1] = 0; v10; v10 = (uint64_t *)v9[1])
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  if (a2 == a3)
  {
    v19 = a1;
    sub_1BE62033C(a1, v8);
    if (!v9)
      goto LABEL_41;
    goto LABEL_38;
  }
  v11 = v9;
  v12 = v8;
  v13 = v4;
  do
  {
    v14 = v11;
    if (v13 != v12)
    {
      *((_DWORD *)v12 + 7) = *((_DWORD *)v13 + 7);
      *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
      *((_DWORD *)v12 + 9) = *((_DWORD *)v13 + 9);
      *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
      *((_DWORD *)v12 + 11) = *((_DWORD *)v13 + 11);
    }
    sub_1BE66CBE0((uint64_t **)a1, (uint64_t)v12);
    if (v14)
    {
      v9 = (uint64_t *)v14[2];
      if (v9)
      {
        v16 = (uint64_t *)*v9;
        if ((uint64_t *)*v9 == v14)
        {
          *v9 = 0;
          while (1)
          {
            v18 = (uint64_t *)v9[1];
            if (!v18)
              break;
            do
            {
              v9 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v9[1] = 0; v16; v16 = (uint64_t *)v9[1])
          {
            do
            {
              v9 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
      v11 = v9;
      v15 = (uint64_t *)v13[1];
      if (!v15)
      {
        do
        {
LABEL_26:
          v4 = (uint64_t *)v13[2];
          v17 = *v4 == (_QWORD)v13;
          v13 = v4;
        }
        while (!v17);
        goto LABEL_28;
      }
    }
    else
    {
      v11 = 0;
      v15 = (uint64_t *)v13[1];
      if (!v15)
        goto LABEL_26;
    }
    do
    {
      v4 = v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
LABEL_28:
    if (!v14)
      break;
    v12 = v14;
    v13 = v4;
  }
  while (v4 != a3);
  v19 = a1;
  sub_1BE62033C(a1, v14);
  if (!v9)
    goto LABEL_41;
LABEL_38:
  for (i = (uint64_t *)v9[2]; i; i = (uint64_t *)i[2])
    v9 = i;
  sub_1BE62033C(v19, v9);
LABEL_41:
  if (v4 != a3)
  {
    do
    {
      sub_1BE66CD48((uint64_t **)a1, (uint64_t)v4 + 28);
      v21 = (uint64_t *)v4[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v4[2];
          v17 = *v22 == (_QWORD)v4;
          v4 = v22;
        }
        while (!v17);
      }
      v4 = v22;
    }
    while (v22 != a3);
  }
}

void sub_1BE66CBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE66CCF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE66CBE0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t *v22;

  v2 = a2;
  v4 = (uint64_t *)(a1 + 1);
  v5 = a1[1];
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 40);
    v8 = *(_DWORD *)(a2 + 28);
    v9 = *(_DWORD *)(a2 + 32);
    do
    {
      while (1)
      {
        v4 = v5;
        v11 = *((_DWORD *)v5 + 7);
        v12 = v8 >= v11;
        v13 = v8 > v11;
        if (v12)
          v14 = v13;
        else
          v14 = -1;
        v15 = *((_DWORD *)v5 + 9);
        v16 = *((_DWORD *)v5 + 10);
        v12 = v6 >= v15;
        v17 = v6 > v15;
        if (v12)
          v18 = v17;
        else
          v18 = -1;
        v19 = v7 > v16;
        if (v7 < v16)
          v19 = -1;
        if (v14 != -1)
        {
          if (v14)
            break;
          v20 = *((_DWORD *)v4 + 8);
          v12 = v9 >= v20;
          v21 = v9 > v20;
          if (!v12)
            v21 = -1;
          if (v21 != -1
            && (v21 || v18 != -1 && (v18 || v19 != -1 && (v19 || *(_DWORD *)(a2 + 44) >= *((_DWORD *)v4 + 11)))))
          {
            break;
          }
        }
        v5 = (uint64_t *)*v4;
        v10 = v4;
        if (!*v4)
          goto LABEL_26;
      }
      v5 = (uint64_t *)v4[1];
    }
    while (v5);
    v10 = v4 + 1;
  }
  else
  {
    v10 = (uint64_t *)(a1 + 1);
  }
LABEL_26:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *v10 = a2;
  v22 = (uint64_t *)**a1;
  if (v22)
  {
    *a1 = v22;
    a2 = *v10;
  }
  sub_1BE61F5C0(a1[1], (uint64_t *)a2);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v2;
}

uint64_t sub_1BE66CCF4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1BE62033C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1BE62033C(*(_QWORD *)a1, v2);
  }
  return a1;
}

char *sub_1BE66CD48(uint64_t **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t **v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t **v12;
  unsigned int v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = (char *)operator new(0x30uLL);
  v5 = v4;
  *(_OWORD *)(v4 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v4 + 11) = *(_DWORD *)(a2 + 16);
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v8 = *((_DWORD *)v4 + 9);
    v9 = *((_DWORD *)v4 + 10);
    v10 = *((_DWORD *)v4 + 7);
    v11 = *((_DWORD *)v4 + 8);
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        v13 = *((_DWORD *)v7 + 7);
        v14 = v10 >= v13;
        v15 = v10 > v13;
        if (v14)
          v16 = v15;
        else
          v16 = -1;
        v17 = *((_DWORD *)v7 + 9);
        v18 = *((_DWORD *)v7 + 10);
        v14 = v8 >= v17;
        v19 = v8 > v17;
        if (v14)
          v20 = v19;
        else
          v20 = -1;
        v21 = v9 > v18;
        if (v9 < v18)
          v21 = -1;
        if (v16 != -1)
        {
          if (v16)
            break;
          v22 = *((_DWORD *)v6 + 8);
          v14 = v11 >= v22;
          v23 = v11 > v22;
          if (!v14)
            v23 = -1;
          if (v23 != -1
            && (v23 || v20 != -1 && (v20 || v21 != -1 && (v21 || *((_DWORD *)v4 + 11) >= *((_DWORD *)v6 + 11)))))
          {
            break;
          }
        }
        v7 = *v6;
        v12 = v6;
        if (!*v6)
          goto LABEL_26;
      }
      v7 = v6[1];
    }
    while (v7);
    v12 = v6 + 1;
  }
  else
  {
    v12 = a1 + 1;
  }
LABEL_26:
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  *v12 = (uint64_t *)v4;
  v24 = (uint64_t *)**a1;
  v25 = (uint64_t *)v4;
  if (v24)
  {
    *a1 = v24;
    v25 = *v12;
  }
  sub_1BE61F5C0(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1BE66CE80(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[40 * a2];
      v12 = 40 * a2;
      do
      {
        v5[32] = 0;
        *(_OWORD *)v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        v5 += 40;
        v12 -= 40;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666)
      sub_1BE61F930();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x333333333333333)
      v9 = 0x666666666666666;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x666666666666666)
        sub_1BE61F100();
      v10 = (char *)operator new(40 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[40 * v6];
    v14 = 40 * a2;
    v15 = &v13[40 * a2];
    v16 = v13;
    do
    {
      v16[32] = 0;
      *(_OWORD *)v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      v16 += 40;
      v14 -= 40;
    }
    while (v14);
    v17 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v18 = *(_OWORD *)(v5 - 40);
        v19 = *(_OWORD *)(v5 - 24);
        *(v13 - 8) = *(v5 - 8);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v17);
      v5 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[40 * v9];
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_1BE66D024(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1C3B81130](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1BE66D0A0(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

char *sub_1BE66D0D0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x38E38E38E38E38ELL)
    sub_1BE61F930();
  if (0x1C71C71C71C71C72 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x1C71C71C71C71C72 * ((a1[2] - v3) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  if (v6 > 0x38E38E38E38E38ELL)
    sub_1BE61F100();
  v8 = 72 * v6;
  v9 = (char *)operator new(72 * v6);
  v10 = &v9[72 * v5];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v10 + 3) = v12;
  *((_QWORD *)v10 + 8) = *(_QWORD *)(a2 + 64);
  v13 = v10 + 72;
  if (v4 != v3)
  {
    v14 = 0;
    do
    {
      v15 = &v10[v14];
      *(_OWORD *)(v15 - 72) = *(_OWORD *)&v4[v14 - 72];
      *(_OWORD *)(v15 - 56) = *(_OWORD *)&v4[v14 - 56];
      *(_OWORD *)(v15 - 40) = *(_OWORD *)&v4[v14 - 40];
      *(_OWORD *)(v15 - 24) = *(_OWORD *)&v4[v14 - 24];
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v4[v14 - 8];
      v14 -= 72;
    }
    while (&v4[v14] != v3);
    v10 += v14;
  }
  *a1 = v10;
  a1[1] = v13;
  a1[2] = &v9[v8];
  if (v3)
    operator delete(v3);
  return v13;
}

void sub_1BE66D224(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1BE66D224(*a1);
    sub_1BE66D224(a1[1]);
    v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = v2;
      operator delete(v2);
    }
    sub_1BE62033C((uint64_t)(a1 + 4), (_QWORD *)a1[5]);
    operator delete(a1);
  }
}

void sub_1BE66D27C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (uint64_t *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = v13[4];
          v12[4] = v14;
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= v15[4])
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1BE62033C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_1BE62033C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = v4[4];
      v25[4] = v27;
      v28 = *v24;
      v29 = (uint64_t **)(a1 + 8);
      v30 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_50:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = **(_QWORD **)a1;
      if (v31)
        goto LABEL_51;
LABEL_52:
      sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = (uint64_t **)v28;
        if (v27 >= v28[4])
          break;
        v28 = (uint64_t *)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_50;
      }
      v28 = (uint64_t *)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = **(_QWORD **)a1;
    if (!v31)
      goto LABEL_52;
LABEL_51:
    *(_QWORD *)a1 = v31;
    v26 = *v30;
    goto LABEL_52;
  }
}

_QWORD *sub_1BE66D598(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E77F1060;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_1BE66D5E4(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E77F1060;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE66D640()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E77F0F30;
  return result;
}

void sub_1BE66D678(uint64_t a1, uint64_t a2, CFStringRef *a3)
{
  const void *v5;
  const void *v6;

  v5 = (const void *)CVNLPLanguageModelWithStateCreate();
  if (*a3 && CFStringGetLength(*a3))
    CVNLPLanguageModelWithStateUpdateWithContext();
  v6 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  if (v5)
    CFRetain(v5);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_1BE66D704(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

double sub_1BE66D720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Copy;
  const void *v9;
  double v10;
  int v11;
  unsigned int v12;
  CFIndex v13;
  CFStringRef v14;
  float v15;
  float v16;
  double v17;
  double v18;
  CFTypeRef cf;
  UniChar chars[2];

  *(_QWORD *)(a4 + 8) = 0;
  Copy = CVNLPLanguageModelWithStateCreateCopy();
  v9 = *(const void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = Copy;
  if (v9)
    CFRelease(v9);
  if (*(_QWORD *)(a1 + 56) == a5)
    return *(double *)(a4 + 8);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a5);
  if ((v11 - 0x10000) >> 20)
  {
    v13 = 1;
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a5);
  }
  else
  {
    v12 = ((v11 + 67043328) >> 10) - 10240;
    chars[1] = v11 & 0x3FF | 0xDC00;
    v13 = 2;
  }
  chars[0] = v12;
  v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], chars, v13);
  sub_1BE66D024(&cf, v14);
  CVNLPLanguageModelWithStateConditionalProbability();
  v16 = v15;
  CVNLPLanguageModelWithStateUpdateWithContext();
  v17 = logf(v16);
  v18 = *(double *)(a1 + 8);
  if (*(double *)(a1 + 16) > v17)
    v17 = *(double *)(a1 + 16);
  v10 = v18 * v17;
  *(double *)(a4 + 8) = v18 * v17;
  if (cf)
    CFRelease(cf);
  return v10;
}

void sub_1BE66D848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1BE66D864(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E77F0F30;
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1BE66D8A0(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E77F0F30;
  v1 = (const void *)a1[2];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE66D8EC(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E77F10A8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_1BE66D938(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E77F10A8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  JUMPOUT(0x1C3B812ECLL);
}

double sub_1BE66D994()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E77F0EB8;
  *(_QWORD *)(v0 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  return result;
}

uint64_t sub_1BE66D9D4(uint64_t a1, _QWORD *a2, CFStringRef *a3)
{
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31;
  CFIndex v32;
  int v33;
  CFIndex v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(int *)(a1 + 56);
  v7 = (_BYTE *)a2[2];
  v8 = (_BYTE *)a2[3];
  v6 = a2 + 2;
  v9 = (v8 - v7) >> 2;
  v10 = v5 - v9;
  if (v5 > v9)
  {
    v11 = a2[4];
    if (v10 <= (v11 - (uint64_t)v8) >> 2)
    {
      memset_pattern16(v8, &unk_1BE8D5310, 4 * v10);
      a2[3] = &v8[4 * v10];
      v19 = a2;
      goto LABEL_23;
    }
    if ((v5 & 0x80000000) != 0)
      sub_1BE61F930();
    v12 = v11 - (_QWORD)v7;
    v13 = v12 >> 1;
    if (v12 >> 1 <= v5)
      v13 = *(int *)(a1 + 56);
    v14 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    v15 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v13;
    if (v15 >> 62)
      sub_1BE61F100();
    v36 = 4 * v15;
    v16 = operator new(4 * v15);
    v17 = &v16[4 * v9];
    memset_pattern16(v17, &unk_1BE8D5310, 4 * v10);
    if (v8 == v7)
    {
      v19 = a2;
      goto LABEL_21;
    }
    v18 = v8 - v7 - 4;
    if (v18 >= 0x2C)
    {
      v19 = a2;
      if ((unint64_t)(v7 - v16) >= 0x20)
      {
        v20 = (v18 >> 2) + 1;
        v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v8[-v21];
        v17 -= v21;
        v23 = &v16[4 * v9 - 16];
        v24 = (__int128 *)(v8 - 16);
        v25 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 8;
        }
        while (v25);
        v8 = v22;
        if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_21:
          v19[2] = v17;
          v19[3] = &v16[4 * v5];
          v19[4] = &v16[v36];
          if (v7)
            operator delete(v7);
          goto LABEL_23;
        }
      }
    }
    else
    {
      v19 = a2;
    }
    do
    {
      v27 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v27;
      v17 -= 4;
    }
    while (v8 != v7);
    goto LABEL_21;
  }
  v19 = a2;
  if (v5 < v9)
    a2[3] = &v7[4 * v5];
LABEL_23:
  result = (uint64_t)*a3;
  if (*a3)
  {
    result = CFStringGetLength((CFStringRef)result);
    if (result)
    {
      result = CFStringGetLength(*a3);
      if (result >= 1)
      {
        v29 = result;
        v30 = 0;
        v31 = v19[3];
        while (1)
        {
          if (v31 == *v6)
            return result;
          v32 = v29 - 1;
          result = CFStringGetCharacterAtIndex(*a3, v29 - 1);
          v33 = result;
          v34 = v29 - 2;
          if ((unint64_t)v29 < 2)
          {
            --v29;
            if ((v30 & 1) == 0)
              goto LABEL_39;
LABEL_27:
            v30 = 1;
            *(_DWORD *)(v31 - 4) = v33;
            v31 -= 4;
            if (v29 <= 0)
              return result;
          }
          else
          {
            --v29;
            if ((result & 0xFC00) == 0xDC00)
            {
              result = CFStringGetCharacterAtIndex(*a3, v34);
              v29 = (result & 0xFC00) == 0xD800 ? v34 : v32;
              if ((result & 0xFC00) == 0xD800)
                v33 = v33 + ((_DWORD)result << 10) - 56613888;
            }
            if ((v30 & 1) != 0)
              goto LABEL_27;
LABEL_39:
            result = CVNLPIsWhitespaceCharLMCodepoint();
            if ((result & 1) != 0)
              goto LABEL_27;
            result = CVNLPIsDigitCharLMCodepoint();
            v30 = 0;
            v35 = 6;
            if ((_DWORD)result)
              v35 = 5;
            ++v19[v35];
            *(_DWORD *)(v31 - 4) = v33;
            v31 -= 4;
            if (v29 <= 0)
              return result;
          }
        }
      }
    }
  }
  return result;
}

double sub_1BE66DC94(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _BYTE *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  int *v28;
  int *v29;
  char *v30;
  int v31;
  unint64_t v32;
  void **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _DWORD *v74;
  char *v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  uint64_t v87;
  uint64_t v88;
  int *v90;

  a4[1] = 0;
  if (*(_QWORD *)(a1 + 64) != a5)
  {
    v9 = (void **)(a4 + 2);
    v8 = (_BYTE *)a4[2];
    v10 = *(int *)(a1 + 56);
    v11 = v10 + 1;
    if (v10 + 1 <= (unint64_t)((uint64_t)(a4[4] - (_QWORD)v8) >> 2))
      goto LABEL_17;
    if ((int)v10 <= -2)
      goto LABEL_88;
    v12 = (_BYTE *)a4[3];
    v13 = 4 * v11;
    v14 = (char *)operator new(4 * v11);
    v15 = v12 - v8;
    v16 = &v14[(v12 - v8) & 0xFFFFFFFFFFFFFFFCLL];
    v17 = v16;
    if (v12 != v8)
    {
      if ((unint64_t)(v15 - 4) < 0x2C)
      {
        v17 = &v14[(v12 - v8) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_14:
          v26 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v17 - 1) = v26;
          v17 -= 4;
        }
        while (v12 != v8);
        goto LABEL_15;
      }
      v17 = &v14[(v12 - v8) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v12[-(v15 & 0xFFFFFFFFFFFFFFFCLL)] - v14) < 0x20)
        goto LABEL_14;
      v18 = v15 >> 2;
      v19 = ((unint64_t)(v15 - 4) >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v21 = &v12[-v20];
      v17 = &v16[-v20];
      v22 = &v14[4 * v18 - 16];
      v23 = (__int128 *)(v12 - 16);
      v24 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *v23;
        *((_OWORD *)v22 - 1) = *(v23 - 1);
        *(_OWORD *)v22 = v25;
        v22 -= 32;
        v23 -= 2;
        v24 -= 8;
      }
      while (v24);
      v12 = v21;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_14;
    }
LABEL_15:
    a4[2] = v17;
    a4[3] = v16;
    a4[4] = &v14[v13];
    if (v8)
    {
      operator delete(v8);
      LODWORD(v10) = *(_DWORD *)(a1 + 56);
    }
LABEL_17:
    v87 = a2;
    v88 = a1;
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(int **)(a2 + 24);
    if ((int)v10 >= (unint64_t)(((uint64_t)v28 - v27) >> 2))
      v29 = *(int **)(a2 + 16);
    else
      v29 = (int *)(v27 + 4);
    if (v28 != v29)
    {
      v30 = (char *)a4[3];
      v90 = *(int **)(a2 + 24);
      while (1)
      {
        while (1)
        {
          v31 = *v29;
          v32 = a4[4];
          if ((unint64_t)v30 >= v32)
            break;
          *(_DWORD *)v30 = v31;
          v30 += 4;
          a4[3] = v30;
          if (++v29 == v28)
            goto LABEL_50;
        }
        v33 = v9;
        v34 = (char *)*v9;
        v35 = v30 - (_BYTE *)*v9;
        v36 = v35 >> 2;
        v37 = (v35 >> 2) + 1;
        if (v37 >> 62)
          sub_1BE61F930();
        v38 = v32 - (_QWORD)v34;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v37;
        if (v39)
        {
          if (v39 >> 62)
            goto LABEL_87;
          v40 = operator new(4 * v39);
          v41 = &v40[4 * v36];
          *v41 = v31;
          v42 = (uint64_t)(v41 + 1);
          v43 = v30 - v34;
          if (v30 == v34)
          {
LABEL_41:
            v9 = v33;
            a4[2] = v41;
            a4[3] = v42;
            a4[4] = &v40[4 * v39];
            if (!v34)
              goto LABEL_38;
LABEL_37:
            operator delete(v34);
            goto LABEL_38;
          }
        }
        else
        {
          v40 = 0;
          v41 = (_DWORD *)(4 * v36);
          *(_DWORD *)(4 * v36) = v31;
          v42 = 4 * v36 + 4;
          v43 = v30 - v34;
          if (v30 == v34)
            goto LABEL_41;
        }
        v44 = v43 - 4;
        if (v44 < 0xBC)
          break;
        v47 = (v30 - 4 - v34) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v40[v35 - 4 - v47] > &v40[v35 - 4]
          || &v30[-v47 - 4] > v30 - 4
          || (unint64_t)(v30 - v40 - v35) < 0x20)
        {
          break;
        }
        v48 = (v44 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v45 = &v30[-v49];
        v41 = (_DWORD *)((char *)v41 - v49);
        v50 = &v40[4 * v36 - 16];
        v51 = v30 - 16;
        v52 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        v9 = v33;
        if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_35;
LABEL_36:
        a4[2] = v41;
        a4[3] = v42;
        a4[4] = &v40[4 * v39];
        if (v34)
          goto LABEL_37;
LABEL_38:
        v28 = v90;
        a4[3] = v42;
        ++v29;
        v30 = (char *)v42;
        if (v29 == v90)
          goto LABEL_50;
      }
      v45 = v30;
      v9 = v33;
      do
      {
LABEL_35:
        v46 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v41 = v46;
      }
      while (v45 != v34);
      goto LABEL_36;
    }
LABEL_50:
    v54 = *(_DWORD *)(*(_QWORD *)(v88 + 32) + 4 * a5);
    if (CVNLPIsWhitespaceCharLMCodepoint())
    {
      a4[5] = 0;
      a4[6] = 0;
      v55 = *(_QWORD *)(v87 + 40);
      v56 = *(_QWORD *)(v87 + 48) + v55;
      if (v56)
        goto LABEL_52;
LABEL_58:
      if (*(float *)(v88 + 72) < 0.0)
        goto LABEL_63;
LABEL_59:
      if ((uint64_t)(a4[3] - a4[2]) >> 2 >= (unint64_t)*(int *)(v88 + 56))
      {
        LMLanguageModelConditionalProbability();
        v63 = v62 * 2.30258509;
        if (*(double *)(v88 + 16) > v63)
          v63 = *(double *)(v88 + 16);
        *((double *)a4 + 1) = *(double *)(v88 + 8) * v63;
      }
LABEL_63:
      v65 = (char *)a4[3];
      v64 = a4[4];
      if ((unint64_t)v65 < v64)
      {
        *(_DWORD *)v65 = v54;
        v66 = (uint64_t)(v65 + 4);
LABEL_84:
        a4[3] = v66;
        return *((double *)a4 + 1);
      }
      v67 = (char *)*v9;
      v68 = v65 - (_BYTE *)*v9;
      v69 = v68 >> 2;
      v70 = (v68 >> 2) + 1;
      if (!(v70 >> 62))
      {
        v71 = v64 - (_QWORD)v67;
        if (v71 >> 1 > v70)
          v70 = v71 >> 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
          v72 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          if (v72 >> 62)
LABEL_87:
            sub_1BE61F100();
          v73 = operator new(4 * v72);
          v74 = &v73[4 * v69];
          v75 = &v73[4 * v72];
          *v74 = v54;
          v66 = (uint64_t)(v74 + 1);
          v76 = v65 - v67;
          if (v65 == v67)
            goto LABEL_82;
        }
        else
        {
          v73 = 0;
          v74 = (_DWORD *)(4 * v69);
          v75 = 0;
          *(_DWORD *)(4 * v69) = v54;
          v66 = 4 * v69 + 4;
          v76 = v65 - v67;
          if (v65 == v67)
          {
LABEL_82:
            a4[2] = v74;
            a4[3] = v66;
            a4[4] = v75;
            if (v67)
              operator delete(v67);
            goto LABEL_84;
          }
        }
        v77 = v76 - 4;
        if (v77 < 0x2C)
          goto LABEL_91;
        if ((unint64_t)(v65 - v73 - v68) < 0x20)
          goto LABEL_91;
        v78 = (v77 >> 2) + 1;
        v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
        v80 = &v65[-v79];
        v74 = (_DWORD *)((char *)v74 - v79);
        v81 = &v73[4 * v69 - 16];
        v82 = v65 - 16;
        v83 = v78 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 8;
        }
        while (v83);
        v65 = v80;
        if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_91:
          do
          {
            v85 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--v74 = v85;
          }
          while (v65 != v67);
        }
        goto LABEL_82;
      }
LABEL_88:
      sub_1BE61F930();
    }
    v58 = CVNLPIsDigitCharLMCodepoint();
    v59 = *(_QWORD *)(v87 + 40);
    if (v58)
    {
      v60 = *(_QWORD *)(v87 + 48);
      a4[5] = v59 + 1;
      a4[6] = v60;
      v55 = *(_QWORD *)(v87 + 40);
      v56 = *(_QWORD *)(v87 + 48) + v55;
      if (!v56)
        goto LABEL_58;
    }
    else
    {
      v61 = *(_QWORD *)(v87 + 48) + 1;
      a4[5] = v59;
      a4[6] = v61;
      v55 = *(_QWORD *)(v87 + 40);
      v56 = *(_QWORD *)(v87 + 48) + v55;
      if (!v56)
        goto LABEL_58;
    }
LABEL_52:
    v57 = (float)(v55 / v56);
    if (v57 > *(float *)(v88 + 72))
      goto LABEL_63;
    goto LABEL_59;
  }
  if (a4 != (_QWORD *)a2)
    sub_1BE66E294(a4 + 2, *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_OWORD *)(a4 + 5) = *(_OWORD *)(a2 + 40);
  return *((double *)a4 + 1);
}

_QWORD *sub_1BE66E20C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E77F0EB8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1BE66E248(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E77F0EB8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE66E294(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_1BE61F930();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t *sub_1BE66E3D8(uint64_t *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  v9 = *(char **)v4;
  v10 = (uint64_t)&v6[-*(_QWORD *)v4];
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + 1;
  if (v12 >> 62)
    sub_1BE61F930();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      sub_1BE61F100();
    v15 = operator new(4 * v14);
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = v6 - v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_DWORD *)(4 * v11);
  v17 = 0;
  *(_DWORD *)(4 * v11) = a2;
  v8 = 4 * v11 + 4;
  v18 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[-v21];
    v16 = (_DWORD *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v26 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v16;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = v17;
  if (v9)
    operator delete(v9);
LABEL_22:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_1BE66E558(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E77F11A8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE66E5A4()
{
  return CVNLPIsLatinCyrillicMixedScript();
}

uint64_t sub_1BE66E5B0()
{
  return CVNLPShouldIgnoreScriptForLatinCyrillic();
}

void sub_1BE66E5B8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E77F11A8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B812ECLL);
}

BOOL sub_1BE66E604(uint64_t a1, int a2, int a3)
{
  BOOL v4;
  char v5;

  if (!a2 && a3 == 1)
    return 1;
  if (a3)
    v4 = a3 == 3;
  else
    v4 = 1;
  v5 = v4;
  if (a2 == 1 && (v5 & 1) != 0)
    return 1;
  return a2 == 3 && a3 == 1;
}

BOOL sub_1BE66E648(uint64_t a1, int a2)
{
  return a2 == 2;
}

void sub_1BE66E658()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE66E66C()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E77F10F0;
  return result;
}

double sub_1BE66E6A4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  double v5;
  double result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = a1[3] * (double)v4;
  if (a1[2] > v5)
    v5 = a1[2];
  result = a1[1] * v5;
  *(double *)(a4 + 8) = result;
  *(_QWORD *)(a4 + 16) = v4 + 1;
  return result;
}

void sub_1BE66E6D8()
{
  JUMPOUT(0x1C3B812ECLL);
}

char *sub_1BE66E6EC(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const void *v26;
  const void *v27;

  v2 = *a1;
  v3 = a1[1];
  v4 = v3 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_1BE61F930();
  v9 = a1[2] - v2;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_1BE61F100();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  *a2 = 0;
  if (v3 != v2)
  {
    v15 = v3 - v2 - 8;
    if (v15 < 0x78 || &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3 && &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      goto LABEL_30;
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v17;
    v18 = &v3[-v17];
    v19 = v3 - 16;
    v20 = &v11[8 * v5 - 16];
    v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      v19 -= 32;
      v20 -= 32;
      v21 -= 4;
    }
    while (v21);
    v3 = v18;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v23 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v12 - 1) = v23;
        v12 -= 8;
        *(_QWORD *)v3 = 0;
      }
      while (v3 != v2);
    }
  }
  v24 = *a1;
  v25 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v25 != v24)
  {
    v27 = (const void *)*((_QWORD *)v25 - 1);
    v25 -= 8;
    v26 = v27;
    if (v27)
      CFRelease(v26);
  }
  if (v24)
    operator delete(v24);
  return v14;
}

void ***sub_1BE66E878(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  const void *v6;
  const void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v7 = (const void *)*((_QWORD *)v4 - 1);
          v4 -= 8;
          v6 = v7;
          if (v7)
            CFRelease(v6);
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_1BE66E908(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  const void *v7;

  *a1 = &off_1E77F0FF0;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v3)
    {
      do
      {
        v7 = *(const void **)(v4 - 8);
        v4 -= 8;
        v6 = v7;
        if (v7)
          CFRelease(v6);
      }
      while (v4 != v3);
      v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_1BE66E990(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  const void *v7;

  *a1 = &off_1E77F0FF0;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v3)
    {
      do
      {
        v7 = *(const void **)(v4 - 8);
        v4 -= 8;
        v6 = v7;
        if (v7)
          CFRelease(v6);
      }
      while (v4 != v3);
      v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1C3B812ECLL);
}

double sub_1BE66EA28()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)v0 = &off_1E77F0F08;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  return result;
}

void sub_1BE66EA70(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFRange v6;
  CFStringRef v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  uint64_t RootCursor;
  const void *v12;
  const void *v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  const void *v38;
  const void *v39;
  CFTypeRef *v40;
  CFTypeRef cf;

  if (!*(_QWORD *)a3 || !CFStringGetLength(*(CFStringRef *)a3) || (v6.length = *(_QWORD *)(a3 + 16)) == 0)
  {
    cf = 0;
    v9 = *(CFTypeRef **)(a1 + 24);
    v8 = *(CFTypeRef **)(a1 + 32);
    if (v9 == v8)
      goto LABEL_51;
    goto LABEL_7;
  }
  v6.location = *(_QWORD *)(a3 + 8);
  v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a3, v6);
  sub_1BE66D024(&cf, v7);
  v9 = *(CFTypeRef **)(a1 + 24);
  v8 = *(CFTypeRef **)(a1 + 32);
  if (v9 != v8)
  {
LABEL_7:
    v40 = v8;
    do
    {
      v10 = *v9;
      if (*v9)
        CFRetain(*v9);
      RootCursor = LXLexiconCreateRootCursor();
      v12 = (const void *)RootCursor;
      if (cf)
      {
        v13 = (const void *)LXCursorCreateByAdvancing();
        if (v12)
          CFRelease(v12);
        v15 = (char *)a2[3];
        v14 = a2[4];
        if ((unint64_t)v15 >= v14)
        {
LABEL_19:
          v17 = (char *)a2[2];
          v18 = v15 - v17;
          v19 = (v15 - v17) >> 3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            sub_1BE61F930();
          v21 = v14 - (_QWORD)v17;
          if (v21 >> 2 > v20)
            v20 = v21 >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 61)
              sub_1BE61F100();
            v23 = (char *)operator new(8 * v22);
            if (!v13)
            {
LABEL_28:
              v24 = &v23[8 * v19];
              v25 = &v23[8 * v22];
              *(_QWORD *)v24 = v13;
              v16 = v24 + 8;
              v26 = v15 - v17;
              if (v15 != v17)
                goto LABEL_29;
LABEL_33:
              a2[2] = v24;
              a2[3] = v16;
              a2[4] = v25;
LABEL_34:
              v8 = v40;
              if (v17)
                operator delete(v17);
              goto LABEL_36;
            }
          }
          else
          {
            v23 = 0;
            if (!v13)
              goto LABEL_28;
          }
          CFRetain(v13);
          v17 = (char *)a2[2];
          v15 = (char *)a2[3];
          v24 = &v23[8 * v19];
          v25 = &v23[8 * v22];
          *(_QWORD *)v24 = v13;
          v16 = v24 + 8;
          v26 = v15 - v17;
          if (v15 == v17)
            goto LABEL_33;
LABEL_29:
          v27 = v26 - 8;
          if (v27 < 0x78)
          {
            v28 = v15;
            goto LABEL_46;
          }
          v29 = (v15 - 8 - v17) & 0xFFFFFFFFFFFFFFF8;
          if (&v23[v18 - v29 - 8] < v15 && &v15[-v29 - 8] < v24)
          {
            v28 = v15;
            goto LABEL_46;
          }
          v30 = (v27 >> 3) + 1;
          v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v24 -= v31;
          v28 = &v15[-v31];
          v32 = v15 - 16;
          v33 = &v23[8 * v19 - 16];
          v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *(_OWORD *)v32;
            *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
            *(_OWORD *)v33 = v35;
            *((_OWORD *)v32 - 1) = 0uLL;
            *(_OWORD *)v32 = 0uLL;
            v32 -= 32;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_46:
              v36 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v24 - 1) = v36;
              v24 -= 8;
              *(_QWORD *)v28 = 0;
            }
            while (v28 != v17);
          }
          v17 = (char *)a2[2];
          v37 = (char *)a2[3];
          a2[2] = v24;
          a2[3] = v16;
          a2[4] = v25;
          while (v37 != v17)
          {
            v39 = (const void *)*((_QWORD *)v37 - 1);
            v37 -= 8;
            v38 = v39;
            if (v39)
              CFRelease(v38);
          }
          goto LABEL_34;
        }
      }
      else
      {
        v13 = (const void *)RootCursor;
        v15 = (char *)a2[3];
        v14 = a2[4];
        if ((unint64_t)v15 >= v14)
          goto LABEL_19;
      }
      if (v13)
        CFRetain(v13);
      *(_QWORD *)v15 = v13;
      v16 = v15 + 8;
LABEL_36:
      a2[3] = v16;
      if (v13)
        CFRelease(v13);
      if (v10)
        CFRelease(v10);
      ++v9;
    }
    while (v9 != v8);
  }
LABEL_51:
  if (cf)
    CFRelease(cf);
}

void sub_1BE66ED60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

double sub_1BE66EDC8(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  const void **v7;
  void **v8;
  CFTypeRef *v9;
  CFTypeRef *v10;
  unint64_t v11;
  uint64_t v12;
  const void **v13;
  void *v14;
  const void *v15;
  const void *v16;
  int v19;
  unsigned int v20;
  CFIndex v21;
  CFStringRef v22;
  void (*v23)(void);
  void *v24;
  id v25;
  void *v26;
  CFTypeRef v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t RootCursor;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  const void *v56;
  const void *v57;
  double v58;
  CFTypeRef v59;
  const void **v60;
  unint64_t v61;
  uint64_t v62;
  const void **v63;
  const void *v64;
  const void *v65;
  CFTypeRef *v66;
  CFTypeRef *v67;
  CFTypeRef v68;
  const void *v69;
  const void *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  const void *v96;
  const void *v97;
  unsigned __int8 v98;
  uint64_t *v99;
  __guard *v100;
  const void **v101;
  const void *v102;
  CFTypeRef v103;
  CFTypeRef *v104;
  CFTypeRef *v105;
  double v106;
  double v107;
  double v108;
  CFTypeRef v109;
  double v110;
  double v111;
  double v112;
  long double v113;
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  CFTypeRef v119;
  CFTypeRef *v120;
  const void **v121;
  const void **v122;
  CFTypeRef v123;
  const void *v124;
  const void *v125;
  unsigned __int8 v126;
  double v127;
  double v128;
  double v129;
  _QWORD *v131;
  UniChar chars[4];
  CFTypeRef cf;

  a4[1] = 0;
  a4[5] = a2[5];
  if (a1[10] == a5)
  {
    if (a4 == a2)
      return 0.0;
    v8 = (void **)(a4 + 2);
    v7 = (const void **)a4[2];
    v10 = (CFTypeRef *)a2[2];
    v9 = (CFTypeRef *)a2[3];
    v11 = v9 - v10;
    v12 = a4[4];
    if (v11 <= (v12 - (uint64_t)v7) >> 3)
    {
      v60 = (const void **)a4[3];
      v61 = v60 - v7;
      if (v61 >= v11)
      {
        if (v10 == v9)
        {
          v101 = (const void **)a4[2];
        }
        else
        {
          v101 = (const void **)a4[2];
          do
          {
            v102 = *v7;
            v103 = *v10;
            *v7 = *v10;
            if (v103)
              CFRetain(v103);
            if (v102)
              CFRelease(v102);
            ++v10;
            ++v7;
            ++v101;
          }
          while (v10 != v9);
          v60 = (const void **)a4[3];
        }
        while (v60 != v101)
        {
          v125 = *--v60;
          v124 = v125;
          if (v125)
            CFRelease(v124);
        }
        a4[3] = v101;
      }
      else
      {
        if (v60 != v7)
        {
          v62 = 8 * v61;
          v63 = (const void **)a2[2];
          do
          {
            v64 = *v7;
            v65 = *v63;
            *v7 = *v63;
            if (v65)
              CFRetain(v65);
            if (v64)
              CFRelease(v64);
            ++v63;
            ++v7;
            v62 -= 8;
          }
          while (v62);
          v7 = (const void **)a4[3];
        }
        v120 = &v10[v61];
        v121 = v7;
        if (v120 != v9)
        {
          v121 = v7;
          v122 = v7;
          do
          {
            v123 = *v120;
            if (*v120)
              CFRetain(*v120);
            *v122++ = v123;
            ++v120;
            ++v121;
          }
          while (v120 != v9);
        }
        a4[3] = v121;
      }
    }
    else
    {
      if (v7)
      {
        v13 = (const void **)a4[3];
        v14 = (void *)a4[2];
        if (v13 != v7)
        {
          do
          {
            v16 = *--v13;
            v15 = v16;
            if (v16)
              CFRelease(v15);
          }
          while (v13 != v7);
          v14 = *v8;
        }
        a4[3] = v7;
        operator delete(v14);
        v12 = 0;
        *v8 = 0;
        a4[3] = 0;
        a4[4] = 0;
      }
      if ((char *)v9 - (char *)v10 < 0)
        goto LABEL_166;
      v114 = v12 >> 2;
      if (v12 >> 2 <= v11)
        v114 = v9 - v10;
      v115 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
      v116 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v115)
        v116 = v114;
      if (v116 >> 61)
LABEL_166:
        sub_1BE61F930();
      v117 = v116;
      v118 = operator new(8 * v116);
      a4[2] = v118;
      a4[3] = v118;
      a4[4] = &v118[v117];
      while (v10 != v9)
      {
        v119 = *v10;
        if (*v10)
          CFRetain(*v10);
        *v118++ = v119;
        ++v10;
      }
      a4[3] = v118;
    }
    return *((double *)a4 + 1);
  }
  v19 = *(_DWORD *)(a1[6] + 4 * a5);
  if ((v19 - 0x10000) >> 20)
  {
    v21 = 1;
    v20 = *(_DWORD *)(a1[6] + 4 * a5);
  }
  else
  {
    v20 = ((v19 + 67043328) >> 10) - 10240;
    chars[1] = v19 & 0x3FF | 0xDC00;
    v21 = 2;
  }
  chars[0] = v20;
  v22 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], chars, v21);
  sub_1BE66D024(&cf, v22);
  v23 = (void (*)(void))a1[12];
  if (v23)
  {
    v24 = (id)cf;
    v23();
    v25 = (id)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    if (v25)
      CFRetain(v25);
    sub_1BE66D024(chars, v26);

    v28 = *(const void **)chars;
    v27 = cf;
    *(_QWORD *)chars = cf;
    cf = v28;
    if (*(_QWORD *)chars)
      CFRelease(v27);

  }
  if (a1[9] == a5 || MEMORY[0x1C3B80B9C](cf))
  {
    v29 = a1[3];
    v30 = a1[4];
    if (v29 != v30)
    {
      while (1)
      {
        RootCursor = LXLexiconCreateRootCursor();
        v33 = RootCursor;
        v35 = (uint64_t *)a4[3];
        v34 = a4[4];
        if ((unint64_t)v35 >= v34)
          break;
        *v35 = RootCursor;
        v31 = (uint64_t)(v35 + 1);
LABEL_24:
        a4[3] = v31;
        v29 += 8;
        if (v29 == v30)
          goto LABEL_50;
      }
      v36 = (char *)a4[2];
      v37 = ((char *)v35 - v36) >> 3;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61)
        sub_1BE61F930();
      v39 = v34 - (_QWORD)v36;
      if (v39 >> 2 > v38)
        v38 = v39 >> 2;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
      {
        if (v40 >> 61)
          sub_1BE61F100();
        v41 = (char *)operator new(8 * v40);
        v42 = (uint64_t *)&v41[8 * v37];
        v43 = &v41[8 * v40];
        *v42 = v33;
        v31 = (uint64_t)(v42 + 1);
        v44 = (char *)((char *)v35 - v36);
        if (v35 != (uint64_t *)v36)
          goto LABEL_35;
      }
      else
      {
        v41 = 0;
        v42 = (uint64_t *)(8 * v37);
        v43 = 0;
        *(_QWORD *)(8 * v37) = v33;
        v31 = 8 * v37 + 8;
        v44 = (char *)((char *)v35 - v36);
        if (v35 != (uint64_t *)v36)
        {
LABEL_35:
          v45 = (unint64_t)(v44 - 8);
          if (v45 < 0x78)
            goto LABEL_172;
          v46 = ((char *)(v35 - 1) - v36) & 0xFFFFFFFFFFFFFFF8;
          if (&v41[(char *)v35 - v36 - v46 - 8] < (char *)v35 && (uint64_t *)((char *)v35 - v46 - 8) < v42)
            goto LABEL_172;
          v47 = (v45 >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = (uint64_t *)((char *)v42 - v48);
          v49 = &v35[v48 / 0xFFFFFFFFFFFFFFF8];
          v50 = v35 - 2;
          v51 = &v41[8 * v37 - 16];
          v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53 = *(_OWORD *)v50;
            *((_OWORD *)v51 - 1) = *((_OWORD *)v50 - 1);
            *(_OWORD *)v51 = v53;
            *((_OWORD *)v50 - 1) = 0uLL;
            *(_OWORD *)v50 = 0uLL;
            v50 -= 4;
            v51 -= 32;
            v52 -= 4;
          }
          while (v52);
          v35 = v49;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_172:
            do
            {
              v54 = *--v35;
              *--v42 = v54;
              *v35 = 0;
            }
            while (v35 != (uint64_t *)v36);
          }
          v35 = (uint64_t *)a4[2];
          v55 = (uint64_t *)a4[3];
          a4[2] = v42;
          a4[3] = v31;
          a4[4] = v43;
          while (v55 != v35)
          {
            v57 = (const void *)*--v55;
            v56 = v57;
            if (v57)
              CFRelease(v56);
          }
          goto LABEL_48;
        }
      }
      a4[2] = v42;
      a4[3] = v31;
      a4[4] = v43;
LABEL_48:
      if (v35)
        operator delete(v35);
      goto LABEL_24;
    }
LABEL_50:
    a4[5] = 0;
    v58 = *((double *)a4 + 1);
    v59 = cf;
    if (!cf)
      return v58;
LABEL_160:
    CFRelease(v59);
    return v58;
  }
  v131 = a1;
  v66 = (CFTypeRef *)a2[2];
  v67 = (CFTypeRef *)a2[3];
  while (v66 != v67)
  {
    v68 = *v66;
    if (*v66)
      CFRetain(*v66);
    v69 = (const void *)LXCursorCreateByAdvancing();
    v70 = v69;
    if (v69)
    {
      v72 = (_QWORD *)a4[3];
      v71 = a4[4];
      if ((unint64_t)v72 >= v71)
      {
        v74 = a4[2];
        v75 = (char *)v72 - v74;
        v76 = ((uint64_t)v72 - v74) >> 3;
        if ((unint64_t)(v76 + 1) >> 61)
          sub_1BE61F930();
        v77 = v71 - v74;
        v78 = v77 >> 2;
        if (v77 >> 2 <= (unint64_t)(v76 + 1))
          v78 = v76 + 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
          v79 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v79 = v78;
        if (v79)
        {
          if (v79 >> 61)
            sub_1BE61F100();
          v80 = (char *)operator new(8 * v79);
        }
        else
        {
          v80 = 0;
        }
        CFRetain(v70);
        v81 = &v80[8 * v76];
        v82 = &v80[8 * v79];
        v83 = (char *)a4[2];
        v84 = (char *)a4[3];
        *(_QWORD *)v81 = v70;
        v73 = v81 + 8;
        if (v84 == v83)
        {
          a4[2] = v81;
          a4[3] = v73;
          a4[4] = v82;
        }
        else
        {
          v85 = v84 - v83 - 8;
          if (v85 < 0x78)
            goto LABEL_173;
          v86 = (v84 - 8 - v83) & 0xFFFFFFFFFFFFFFF8;
          if (&v75[(_QWORD)v80 - v86 - 8] < v84 && &v84[-v86 - 8] < v81)
            goto LABEL_173;
          v87 = (v85 >> 3) + 1;
          v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v81 -= v88;
          v89 = &v84[-v88];
          v90 = v84 - 16;
          v91 = &v80[8 * v76 - 16];
          v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v93 = *(_OWORD *)v90;
            *((_OWORD *)v91 - 1) = *((_OWORD *)v90 - 1);
            *(_OWORD *)v91 = v93;
            *((_OWORD *)v90 - 1) = 0uLL;
            *(_OWORD *)v90 = 0uLL;
            v90 -= 32;
            v91 -= 32;
            v92 -= 4;
          }
          while (v92);
          v84 = v89;
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_173:
            do
            {
              v94 = *((_QWORD *)v84 - 1);
              v84 -= 8;
              *((_QWORD *)v81 - 1) = v94;
              v81 -= 8;
              *(_QWORD *)v84 = 0;
            }
            while (v84 != v83);
          }
          v84 = (char *)a4[2];
          v95 = (char *)a4[3];
          a4[2] = v81;
          a4[3] = v73;
          a4[4] = v82;
          while (v95 != v84)
          {
            v97 = (const void *)*((_QWORD *)v95 - 1);
            v95 -= 8;
            v96 = v97;
            if (v97)
              CFRelease(v96);
          }
        }
        if (v84)
          operator delete(v84);
      }
      else
      {
        CFRetain(v69);
        *v72 = v70;
        v73 = v72 + 1;
      }
      a4[3] = v73;
      CFRelease(v70);
    }
    if (v68)
      CFRelease(v68);
    ++v66;
  }
  if (CVNLPShouldUseLexiconContextLogProb())
  {
    v99 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB;
    if ((v98 & 1) != 0
    {
      goto LABEL_154;
    }
    CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB = 0xC007F7427B73E391;
LABEL_169:
    __cxa_guard_release(v100);
LABEL_154:
    v107 = *(double *)v99;
    goto LABEL_155;
  }
  v104 = (CFTypeRef *)a4[2];
  v105 = (CFTypeRef *)a4[3];
  if (v104 == v105)
  {
    v99 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB;
    if ((v126 & 1) != 0
    {
      goto LABEL_154;
    }
    CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB = 0xC04205966F2B4F12;
    goto LABEL_169;
  }
  v106 = log((double)(unint64_t)((uint64_t)(v131[4] - v131[3]) >> 3));
  if (*((_BYTE *)v131 + 88))
    v107 = 0.0;
  else
    v107 = -INFINITY;
  v108 = -v106;
  do
  {
    v109 = *v104;
    if (*v104)
      CFRetain(*v104);
    LXCursorConditionalProbability();
    v111 = v108 + v110 * 2.30258509;
    if (v107 <= v111)
      v112 = v107;
    else
      v112 = v108 + v110 * 2.30258509;
    if (v107 <= v111)
      v107 = v111;
    if (v112 > -INFINITY)
    {
      v113 = exp(v112 - v107);
      v107 = v107 + log1p(v113);
    }
    if (v109)
      CFRelease(v109);
    ++v104;
  }
  while (v104 != v105);
LABEL_155:
  v127 = *((double *)v131 + 2);
  v128 = *((double *)a4 + 5);
  v129 = v127 - v128;
  if (v107 >= v127 - v128)
    v129 = v107;
  *((double *)a4 + 5) = v128 + v129;
  if (v127 <= v129)
    v127 = v129;
  v58 = *((double *)v131 + 1) * v127;
  *((double *)a4 + 1) = v58;
  v59 = cf;
  if (cf)
    goto LABEL_160;
  return v58;
}

void sub_1BE66F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1BE66F754(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  const void *v6;

  *a1 = &off_1E77F0F08;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(const void **)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE66F7CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  const void *v6;

  *a1 = &off_1E77F0F08;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(const void **)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE66F854(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E77F0F80;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
  return a1;
}

void sub_1BE66F8B0(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E77F0F80;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
  JUMPOUT(0x1C3B812ECLL);
}

double sub_1BE66F91C()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E77F0EE0;
  *(_QWORD *)(v0 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  return result;
}

void sub_1BE66F95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRange v4;
  CFStringRef v5;
  CFTypeRef v6;

  if (*(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3))
  {
    if (*(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3) && (v4.length = *(_QWORD *)(a3 + 8)) != 0)
    {
      v4.location = 0;
      v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a3, v4);
      sub_1BE66D024(&v6, v5);
    }
    else
    {
      v6 = 0;
    }
    CVNLPWordTokenIDsForString();
    if (v6)
      CFRelease(v6);
  }
}

void sub_1BE66FA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 - 40);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

double sub_1BE66FA54(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  void **v9;
  double result;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  a4[1] = 0;
  if (a4 == (_QWORD *)a2)
  {
    v9 = (void **)(a4 + 5);
    if (*(_QWORD *)(a1 + 72) == a5)
      goto LABEL_3;
  }
  else
  {
    sub_1BE66E294(a4 + 2, *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v9 = (void **)(a4 + 5);
    sub_1BE62037C(a4 + 5, *(char **)(a2 + 40), *(char **)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
    if (*(_QWORD *)(a1 + 72) == a5)
    {
LABEL_3:
      result = *(double *)(a2 + 8);
      *((double *)a4 + 1) = result;
      return result;
    }
  }
  if (*(_QWORD *)(a1 + 64) != a5)
  {
    v12 = (uint64_t *)a4[6];
    v11 = a4[7];
    if ((unint64_t)v12 < v11)
    {
      *v12 = a5;
      v13 = (uint64_t)(v12 + 1);
LABEL_28:
      a4[6] = v13;
      return *((double *)a4 + 1);
    }
    v14 = (uint64_t *)*v9;
    v15 = (char *)v12 - (_BYTE *)*v9;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      sub_1BE61F930();
    v18 = v11 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_1BE61F100();
      v20 = operator new(8 * v19);
      v21 = (uint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = a5;
      v13 = (uint64_t)(v21 + 1);
      v23 = (char *)v12 - (char *)v14;
      if (v12 == v14)
        goto LABEL_26;
    }
    else
    {
      v20 = 0;
      v21 = (uint64_t *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = a5;
      v13 = 8 * v16 + 8;
      v23 = (char *)v12 - (char *)v14;
      if (v12 == v14)
      {
LABEL_26:
        a4[5] = v21;
        a4[6] = v13;
        a4[7] = v22;
        if (v14)
          operator delete(v14);
        goto LABEL_28;
      }
    }
    v24 = v23 - 8;
    if (v24 < 0x58)
      goto LABEL_34;
    if ((unint64_t)((char *)v12 - v20 - v15) < 0x20)
      goto LABEL_34;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v12[v26 / 0xFFFFFFFFFFFFFFF8];
    v21 = (uint64_t *)((char *)v21 - v26);
    v28 = &v20[8 * v16 - 16];
    v29 = v12 - 2;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 4;
      v30 -= 4;
    }
    while (v30);
    v12 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v32 = *--v12;
        *--v21 = v32;
      }
      while (v12 != v14);
    }
    goto LABEL_26;
  }
  sub_1BE66FF70(a1, a4, a5);
  return *((double *)a4 + 1);
}

double sub_1BE66FC64(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  if (!*(_BYTE *)(a1 + 80) && *(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 48))
  {
    sub_1BE66FF70(a1, (_QWORD *)a2, *(_QWORD *)(a1 + 64));
    return *(double *)(a2 + 8);
  }
  return result;
}

_QWORD *sub_1BE66FCB4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E77F0EE0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1BE66FD00(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E77F0EE0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE66FD5C(uint64_t a1, void *a2, int TokenIDForString)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  id v34;
  id v35;

  v5 = a2;
  if (TokenIDForString)
  {
    v11 = *(_QWORD **)(a1 + 40);
    v13 = (char *)v11[3];
    v12 = v11[4];
    if ((unint64_t)v13 < v12)
    {
LABEL_3:
      *(_DWORD *)v13 = TokenIDForString;
      v14 = (uint64_t)(v13 + 4);
      goto LABEL_25;
    }
  }
  else
  {
    v34 = v5;
    objc_msgSend_lowercaseString(v5, v6, v7, v8, v9, v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    TokenIDForString = LMLanguageModelGetTokenIDForString();

    v5 = v34;
    v11 = *(_QWORD **)(a1 + 40);
    v13 = (char *)v11[3];
    v12 = v11[4];
    if ((unint64_t)v13 < v12)
      goto LABEL_3;
  }
  v35 = v5;
  v16 = (char *)v11[2];
  v17 = (v13 - v16) >> 2;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 62)
    sub_1BE61F930();
  v19 = v12 - (_QWORD)v16;
  if (v19 >> 1 > v18)
    v18 = v19 >> 1;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
    v20 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 62)
      sub_1BE61F100();
    v21 = operator new(4 * v20);
    v22 = &v21[4 * v17];
    v23 = &v21[4 * v20];
    *v22 = TokenIDForString;
    v14 = (uint64_t)(v22 + 1);
    v24 = v13 - v16;
    if (v13 == v16)
      goto LABEL_22;
    goto LABEL_16;
  }
  v21 = 0;
  v22 = (_DWORD *)(4 * v17);
  v23 = 0;
  *(_DWORD *)(4 * v17) = TokenIDForString;
  v14 = 4 * v17 + 4;
  v24 = v13 - v16;
  if (v13 != v16)
  {
LABEL_16:
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_30;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_30;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (_DWORD *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_30:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
  }
LABEL_22:
  v11[2] = v22;
  v11[3] = v14;
  v11[4] = v23;
  if (v16)
    operator delete(v16);
  v5 = v35;
LABEL_25:
  v11[3] = v14;

}

void sub_1BE66FF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE66FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE66FF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE66FF70(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  char **v5;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  unsigned int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  __int16 v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _BYTE *v58;
  char *v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _OWORD *v64;
  char *v65;
  unint64_t v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  __int16 v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  __int128 *v76;
  unint64_t v77;
  __int128 v78;
  CFStringRef v79;
  double v80;
  int TokenIDForString;
  void **v82;
  double v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  _DWORD *v93;
  char *v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  int v105;
  _QWORD *v106;
  char *v108;
  void *__p;
  void **p_p;
  uint64_t v111;
  uint64_t v112;
  CFTypeRef v113;

  v4 = (char *)a2[5];
  v3 = (char *)a2[6];
  v5 = (char **)(a2 + 5);
  if (v4 != v3)
  {
    v8 = a1;
    if (*(_QWORD *)(a1 + 64) == a3)
      goto LABEL_25;
    v9 = a2[7];
    if ((unint64_t)v3 < v9)
    {
      *(_QWORD *)v3 = a3;
      v3 += 8;
LABEL_24:
      a2[6] = v3;
LABEL_25:
      __p = 0;
      p_p = 0;
      v111 = 0;
      v30 = v3 - v4;
      v106 = a2;
      if (v3 != v4)
      {
        v108 = v3;
        if (v30 < 0)
          sub_1BE61F930();
        v32 = (char *)operator new((unint64_t)v30 >> 2);
        v33 = &v32[2 * (v30 >> 3)];
        v34 = v32;
        v35 = v108;
        while (1)
        {
          v37 = *(_DWORD *)(*(_QWORD *)(v8 + 40) + 4 * *(_QWORD *)v4);
          v38 = v37 - 1114112;
          if ((v37 - 1114112) >= 0xFFF00000)
            v39 = ((v37 + 67043328) >> 10) - 10240;
          else
            v39 = *(_DWORD *)(*(_QWORD *)(v8 + 40) + 4 * *(_QWORD *)v4);
          if (v38 >= 0xFFF00000)
            v31 = *(_DWORD *)(*(_QWORD *)(v8 + 40) + 4 * *(_QWORD *)v4) & 0x3FF | 0xFFFFDC00;
          if (v32 < v33)
          {
            *(_WORD *)v32 = v39;
            v36 = v32 + 2;
            if (v38 < 0xFFF00000)
              goto LABEL_29;
            goto LABEL_54;
          }
          v40 = v32 - v34;
          if (v32 - v34 <= -3)
            goto LABEL_131;
          v41 = v40 >> 1;
          if (v33 - v34 <= (unint64_t)((v40 >> 1) + 1))
            v42 = v41 + 1;
          else
            v42 = v33 - v34;
          if ((unint64_t)(v33 - v34) >= 0x7FFFFFFFFFFFFFFELL)
            v43 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
          {
            if (v43 < 0)
              goto LABEL_133;
            v44 = v31;
            v45 = v43;
            v46 = operator new(2 * v43);
            v35 = v108;
            v31 = v44;
            v43 = v45;
            v47 = &v46[2 * v41];
            *(_WORD *)v47 = v39;
            v36 = v47 + 2;
            v48 = v32 - v34;
            if (v32 != v34)
            {
LABEL_48:
              v49 = v48 - 2;
              if (v49 < 0x5E
                || (v61 = (v32 - 2 - v34) & 0xFFFFFFFFFFFFFFFELL,
                    &v46[(v40 & 0xFFFFFFFFFFFFFFFELL) - 2 - v61] > &v46[(v40 & 0xFFFFFFFFFFFFFFFELL) - 2])
                || &v32[-v61 - 2] > v32 - 2
                || v32 - v46 - (v40 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              {
                v50 = v32;
                v8 = a1;
              }
              else
              {
                v62 = (v49 >> 1) + 1;
                v63 = 2 * (v62 & 0xFFFFFFFFFFFFFFF0);
                v50 = &v32[-v63];
                v47 -= v63;
                v64 = &v46[2 * v41 - 16];
                v65 = v32 - 16;
                v66 = v62 & 0xFFFFFFFFFFFFFFF0;
                v8 = a1;
                do
                {
                  v67 = *(_OWORD *)v65;
                  *(v64 - 1) = *((_OWORD *)v65 - 1);
                  *v64 = v67;
                  v64 -= 2;
                  v65 -= 32;
                  v66 -= 16;
                }
                while (v66);
                if (v62 == (v62 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_51:
                  v33 = &v46[2 * v43];
                  if (!v34)
                    goto LABEL_53;
LABEL_52:
                  v52 = v31;
                  operator delete(v34);
                  v31 = v52;
                  v35 = v108;
                  goto LABEL_53;
                }
              }
              do
              {
                v51 = *((_WORD *)v50 - 1);
                v50 -= 2;
                *((_WORD *)v47 - 1) = v51;
                v47 -= 2;
              }
              while (v50 != v34);
              goto LABEL_51;
            }
          }
          else
          {
            v46 = 0;
            v47 = (char *)(2 * v41);
            *(_WORD *)(2 * v41) = v39;
            v36 = (char *)(2 * v41 + 2);
            v48 = v32 - v34;
            if (v32 != v34)
              goto LABEL_48;
          }
          v8 = a1;
          v33 = &v46[2 * v43];
          if (v34)
            goto LABEL_52;
LABEL_53:
          v34 = v47;
          if (v38 < 0xFFF00000)
            goto LABEL_29;
LABEL_54:
          if (v36 < v33)
          {
            *(_WORD *)v36 = v31;
            v36 += 2;
LABEL_29:
            v32 = v36;
            v4 += 8;
            if (v4 == v35)
              goto LABEL_94;
          }
          else
          {
            v53 = v36 - v34;
            if (v36 - v34 < -2)
            {
              v32 = v36;
LABEL_131:
              p_p = (void **)v32;
              v111 = (uint64_t)v33;
              __p = v34;
              sub_1BE61F930();
            }
            v54 = v53 >> 1;
            if (v33 - v34 <= (unint64_t)((v53 >> 1) + 1))
              v55 = v54 + 1;
            else
              v55 = v33 - v34;
            if ((unint64_t)(v33 - v34) >= 0x7FFFFFFFFFFFFFFELL)
              v56 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
            {
              if (v56 < 0)
              {
                v32 = v36;
LABEL_133:
                p_p = (void **)v32;
                v111 = (uint64_t)v33;
                __p = v34;
                sub_1BE61F100();
              }
              v57 = v31;
              v58 = operator new(2 * v56);
              v8 = a1;
              v35 = v108;
              v31 = v57;
              v59 = &v58[2 * v54];
              *(_WORD *)v59 = v57;
              v32 = v59 + 2;
              v60 = v36 - v34;
              if (v36 == v34)
                goto LABEL_80;
            }
            else
            {
              v58 = 0;
              v59 = (char *)(2 * v54);
              *(_WORD *)(2 * v54) = v31;
              v32 = (char *)(2 * v54 + 2);
              v60 = v36 - v34;
              if (v36 == v34)
                goto LABEL_80;
            }
            v68 = v60 - 2;
            if (v68 >= 0x5E)
            {
              v72 = (v36 - 2 - v34) & 0xFFFFFFFFFFFFFFFELL;
              if (&v58[(v53 & 0xFFFFFFFFFFFFFFFELL) - 2 - v72] > &v58[(v53 & 0xFFFFFFFFFFFFFFFELL) - 2])
              {
                v69 = v36;
              }
              else if (&v36[-v72 - 2] > v36 - 2)
              {
                v69 = v36;
              }
              else if (v36 - v58 - (v53 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
              {
                v73 = (v68 >> 1) + 1;
                v74 = 2 * (v73 & 0xFFFFFFFFFFFFFFF0);
                v69 = &v36[-v74];
                v59 -= v74;
                v75 = &v58[2 * v54 - 16];
                v76 = (__int128 *)(v36 - 16);
                v77 = v73 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  v78 = *v76;
                  *(v75 - 1) = *(v76 - 1);
                  *v75 = v78;
                  v75 -= 2;
                  v76 -= 2;
                  v77 -= 16;
                }
                while (v77);
                if (v73 == (v73 & 0xFFFFFFFFFFFFFFF0))
                  goto LABEL_80;
              }
              else
              {
                v69 = v36;
              }
            }
            else
            {
              v69 = v36;
            }
            do
            {
              v70 = *((_WORD *)v69 - 1);
              v69 -= 2;
              *((_WORD *)v59 - 1) = v70;
              v59 -= 2;
            }
            while (v69 != v34);
LABEL_80:
            v33 = &v58[2 * v56];
            if (v34)
            {
              v71 = v31;
              operator delete(v34);
              v31 = v71;
              v35 = v108;
            }
            v34 = v59;
            v4 += 8;
            if (v4 == v35)
            {
LABEL_94:
              p_p = (void **)v32;
              goto LABEL_96;
            }
          }
        }
      }
      v32 = 0;
      v34 = 0;
      v33 = 0;
LABEL_96:
      v111 = (uint64_t)v33;
      __p = v34;
      v79 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UniChar *)v34, (v32 - v34) >> 1);
      sub_1BE66D024(&v113, v79);
      if (v34)
        operator delete(v34);
      __p = 0;
      p_p = &__p;
      v111 = 0x2020000000;
      v112 = 0;
      if (*(double *)(v8 + 16) / 2.30258509 >= -15.654)
        v80 = *(double *)(v8 + 16) / 2.30258509;
      else
        v80 = -15.654;
      TokenIDForString = LMLanguageModelGetTokenIDForString();
      if (!TokenIDForString)
      {
        CVNLPWordTokenIDsForString();
LABEL_127:
        v106[6] = v106[5];
        *((double *)v106 + 1) = *(double *)(a1 + 8) * *((double *)p_p + 3) * 2.30258509;
        _Block_object_dispose(&__p, 8);
        if (v113)
          CFRelease(v113);
        return;
      }
      v82 = (void **)(v106 + 2);
      LMLanguageModelConditionalProbability();
      if (v83 < v80)
        v83 = v80;
      *((double *)p_p + 3) = v83;
      v85 = (char *)v106[3];
      v84 = v106[4];
      if ((unint64_t)v85 < v84)
      {
        *(_DWORD *)v85 = TokenIDForString;
        v106[3] = v85 + 4;
        goto LABEL_127;
      }
      v86 = (char *)*v82;
      v87 = v85 - (_BYTE *)*v82;
      v88 = v87 >> 2;
      v89 = (v87 >> 2) + 1;
      if (v89 >> 62)
        sub_1BE61F930();
      v90 = v84 - (_QWORD)v86;
      if (v90 >> 1 > v89)
        v89 = v90 >> 1;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
        v91 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
      {
        if (v91 >> 62)
          sub_1BE61F100();
        v92 = operator new(4 * v91);
        v93 = &v92[4 * v88];
        v94 = &v92[4 * v91];
        *v93 = TokenIDForString;
        v95 = (uint64_t)(v93 + 1);
        v96 = v85 - v86;
        if (v85 == v86)
          goto LABEL_124;
      }
      else
      {
        v92 = 0;
        v93 = (_DWORD *)(4 * v88);
        v94 = 0;
        *(_DWORD *)(4 * v88) = TokenIDForString;
        v95 = 4 * v88 + 4;
        v96 = v85 - v86;
        if (v85 == v86)
        {
LABEL_124:
          v106[2] = v93;
          v106[3] = v95;
          v106[4] = v94;
          if (v86)
            operator delete(v86);
          v106[3] = v95;
          goto LABEL_127;
        }
      }
      v97 = v96 - 4;
      if (v97 < 0x2C)
        goto LABEL_141;
      if ((unint64_t)(v85 - v92 - v87) < 0x20)
        goto LABEL_141;
      v98 = (v97 >> 2) + 1;
      v99 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
      v100 = &v85[-v99];
      v93 = (_DWORD *)((char *)v93 - v99);
      v101 = &v92[4 * v88 - 16];
      v102 = v85 - 16;
      v103 = v98 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v104 = *(_OWORD *)v102;
        *(v101 - 1) = *((_OWORD *)v102 - 1);
        *v101 = v104;
        v101 -= 2;
        v102 -= 32;
        v103 -= 8;
      }
      while (v103);
      v85 = v100;
      if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_141:
        do
        {
          v105 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *--v93 = v105;
        }
        while (v85 != v86);
      }
      goto LABEL_124;
    }
    v10 = v3 - v4;
    v11 = (v3 - v4) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_1BE61F930();
    v13 = v9 - (_QWORD)v4;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1BE61F100();
      v15 = (char *)a2[6];
      v16 = operator new(8 * v14);
      v3 = v15;
      v17 = &v16[8 * v11];
      *(_QWORD *)v17 = a3;
      v18 = v10 - 8;
      if ((unint64_t)(v10 - 8) < 0x58)
        goto LABEL_14;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(8 * v11);
      *(_QWORD *)(8 * v11) = a3;
      v18 = v10 - 8;
      if ((unint64_t)(v10 - 8) < 0x58)
      {
LABEL_14:
        v19 = v17;
        v8 = a1;
        do
        {
LABEL_20:
          v28 = *((_QWORD *)v3 - 1);
          v3 -= 8;
          *((_QWORD *)v19 - 1) = v28;
          v19 -= 8;
        }
        while (v3 != v4);
LABEL_21:
        v3 = v17 + 8;
        a2[5] = v19;
        a2[6] = v17 + 8;
        a2[7] = &v16[8 * v14];
        if (v4)
        {
          v29 = v17 + 8;
          operator delete(v4);
          v3 = v29;
          v4 = *v5;
        }
        else
        {
          v4 = v19;
        }
        goto LABEL_24;
      }
    }
    v20 = v3 - v16 - v10;
    v19 = v17;
    v8 = a1;
    if (v20 >= 0x20)
    {
      v21 = (v18 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v3[-v22];
      v19 = &v17[-v22];
      v24 = &v16[8 * v11 - 16];
      v25 = v3 - 16;
      v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v3 = v23;
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
    }
    goto LABEL_20;
  }
}

void sub_1BE6707A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE6707FC(uint64_t a1, void *a2, int TokenIDForString)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  id v34;

  v34 = a2;
  if (TokenIDForString
    || (objc_msgSend_lowercaseString(v34, v5, v6, v7, v8, v9),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        TokenIDForString = LMLanguageModelGetTokenIDForString(),
        v10,
        TokenIDForString))
  {
    LMLanguageModelConditionalProbability();
    if (v11 < *(double *)(a1 + 56))
      v11 = *(double *)(a1 + 56);
  }
  else
  {
    v11 = *(double *)(a1 + 56);
  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11
                                                              + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);
  v12 = *(_QWORD **)(a1 + 48);
  v14 = (char *)v12[3];
  v13 = v12[4];
  if ((unint64_t)v14 < v13)
  {
    *(_DWORD *)v14 = TokenIDForString;
    v15 = (uint64_t)(v14 + 4);
    goto LABEL_26;
  }
  v16 = (char *)v12[2];
  v17 = (v14 - v16) >> 2;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 62)
    sub_1BE61F930();
  v19 = v13 - (_QWORD)v16;
  if (v19 >> 1 > v18)
    v18 = v19 >> 1;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
    v20 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 62)
      sub_1BE61F100();
    v21 = operator new(4 * v20);
    v22 = &v21[4 * v17];
    v23 = &v21[4 * v20];
    *v22 = TokenIDForString;
    v15 = (uint64_t)(v22 + 1);
    v24 = v14 - v16;
    if (v14 == v16)
      goto LABEL_24;
    goto LABEL_18;
  }
  v21 = 0;
  v22 = (_DWORD *)(4 * v17);
  v23 = 0;
  *(_DWORD *)(4 * v17) = TokenIDForString;
  v15 = 4 * v17 + 4;
  v24 = v14 - v16;
  if (v14 != v16)
  {
LABEL_18:
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_32;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_32;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v14[-v27];
    v22 = (_DWORD *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v14 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        v33 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v22 = v33;
      }
      while (v14 != v16);
    }
  }
LABEL_24:
  v12[2] = v22;
  v12[3] = v15;
  v12[4] = v23;
  if (v16)
    operator delete(v16);
LABEL_26:
  v12[3] = v15;

}

void sub_1BE670A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE670A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE670A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE670A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE670A58(uint64_t a1)
{
  void *v2;
  const void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 216);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v4 = *(const void **)(a1 + 208);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(_QWORD *)(a1 + 224) = 0;

  }
  v6 = *(void **)(a1 + 376);
  if (v6)
    operator delete(v6);
  v7 = *(void **)(a1 + 352);
  if (v7)
    operator delete(v7);
  v8 = *(void **)(a1 + 328);
  if (v8)
  {
    *(_QWORD *)(a1 + 336) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 304);
  if (v9)
  {
    *(_QWORD *)(a1 + 312) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 256);
  if (v11)
  {
    *(_QWORD *)(a1 + 264) = v11;
    operator delete(v11);
  }

  v12 = *(void **)(a1 + 80);
  if (v12)
  {
    *(_QWORD *)(a1 + 88) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 56);
  if (v13)
  {
    *(_QWORD *)(a1 + 64) = v13;
    operator delete(v13);
  }
  return a1;
}

_QWORD *sub_1BE670B3C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_1BE670C48(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_1BE61F5C0(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_QWORD *sub_1BE670C48(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t *sub_1BE670DF8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

_QWORD **sub_1BE6711BC(_QWORD **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t *v14;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      v7 = sub_1BE6712A8(a1, v4, &v14, &v13, *a2);
      if (!*v7)
      {
        v8 = v7;
        v9 = operator new(0x20uLL);
        v9[7] = *a2;
        v10 = v14;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v10;
        *v8 = (uint64_t)v9;
        v11 = (_QWORD *)**a1;
        if (v11)
        {
          *a1 = v11;
          v9 = (_DWORD *)*v8;
        }
        sub_1BE61F5C0(a1[1], (uint64_t *)v9);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1BE671294(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_1BE671438(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE6712A8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int a5)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_18:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (uint64_t *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (*((_DWORD *)v9 + 7) < a5)
      goto LABEL_18;
    v15 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v16 = (uint64_t *)v15;
          v17 = *(_DWORD *)(v15 + 28);
          if (v17 <= a5)
            break;
          v15 = *v16;
          v5 = v16;
          if (!*v16)
            goto LABEL_22;
        }
        if (v17 >= a5)
          break;
        v5 = v16 + 1;
        v15 = v16[1];
      }
      while (v15);
    }
    else
    {
      v16 = a1 + 1;
    }
LABEL_22:
    *a3 = v16;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      v12 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (uint64_t *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && *((_DWORD *)v12 + 7) <= a5)
  {
    v20 = *v5;
    if (!*v5)
    {
      *a3 = v5;
      return a1 + 1;
    }
    do
    {
      while (1)
      {
        v16 = (uint64_t *)v20;
        v21 = *(_DWORD *)(v20 + 28);
        if (v21 <= a5)
          break;
        v20 = *v16;
        v5 = v16;
        if (!*v16)
          goto LABEL_22;
      }
      if (v21 >= a5)
        break;
      v5 = v16 + 1;
      v20 = v16[1];
    }
    while (v20);
    goto LABEL_22;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void sub_1BE671438(_QWORD *a1)
{
  if (a1)
  {
    sub_1BE671438(*a1);
    sub_1BE671438(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_1BE671470(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_1BE6712A8(v7, v8, v18, &v17, *((_DWORD *)v6 + 7));
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x20uLL);
        v11[7] = *((_DWORD *)v6 + 7);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_1BE61F5C0((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void sub_1BE671578(_QWORD *a1)
{
  if (a1)
  {
    sub_1BE671578(*a1);
    sub_1BE671578(a1[1]);
    sub_1BE62033C((uint64_t)(a1 + 4), (_QWORD *)a1[5]);
    operator delete(a1);
  }
}

void sub_1BE6715BC(char *a1)
{
  if (a1)
  {
    sub_1BE6715BC(*(_QWORD *)a1);
    sub_1BE6715BC(*((_QWORD *)a1 + 1));

    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_1BE67161C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  double v5;
  id v6;
  uint64_t v7;
  double v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24) + 24 * a2;
  v5 = *(double *)v4;
  v6 = *(id *)(v4 + 8);
  v7 = *(_QWORD *)(v4 + 16);
  if (*(_BYTE *)a1)
    v8 = -2147483650.0;
  else
    v8 = 2147483650.0;
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 24);
  *(double *)v10 = v8;
  v11 = *(void **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v9;
  v12 = v9;

  *(_QWORD *)(v10 + 16) = v7;
  while (1)
  {
    v13 = v2;
    v14 = *(_QWORD *)(a1 + 24);
    v2 >>= 1;
    v15 = v14 + 24 * v2;
    if (!*(_BYTE *)a1)
      break;
    if (v5 > *(double *)v15)
      goto LABEL_11;
LABEL_9:
    if (v13 != v2)
    {
      v16 = v14 + 24 * v13;
      *(_QWORD *)v16 = *(_QWORD *)v15;
      objc_storeStrong((id *)(v16 + 8), *(id *)(v15 + 8));
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
    }
  }
  if (v5 >= *(double *)v15)
    goto LABEL_9;
LABEL_11:
  v17 = v14 + 24 * v13;
  *(double *)v17 = v5;
  v18 = *(void **)(v17 + 8);
  *(_QWORD *)(v17 + 8) = v12;
  v19 = v12;

  *(_QWORD *)(v17 + 16) = v7;
}

void sub_1BE671744(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  double v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (!v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = *(_QWORD *)v4;
    if (v4 != a1)
    {
      objc_storeStrong((id *)(a1 + 8), *(id *)(v4 + 8));
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 16);
    }
    return;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)(v4 + 24);
  if (v4 + 24 != a1)
  {
    objc_storeStrong((id *)(a1 + 8), *(id *)(v4 + 32));
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 40);
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)(a2 + 16) = v3 - 1;
  if (v3 != 1)
  {
    v6 = v4 + 24 * v3;
    *(_QWORD *)(v4 + 24) = *(_QWORD *)v6;
    objc_storeStrong((id *)(v4 + 32), *(id *)(v6 + 8));
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v6 + 16);
    v4 = *(_QWORD *)(a2 + 24);
  }
  v7 = *(double *)(v4 + 24);
  v8 = *(id *)(v4 + 32);
  v9 = *(_QWORD *)(v4 + 40);
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 < 2)
  {
    v11 = 1;
    goto LABEL_25;
  }
  v12 = 1;
  while (1)
  {
    v11 = 2 * v12;
    v13 = *(_QWORD *)(a2 + 24);
    if (2 * v12 < v10)
      break;
    if (!*(_BYTE *)a2)
      goto LABEL_21;
LABEL_17:
    v16 = *(double *)(v13 + 24 * v11);
    if (v16 >= v7)
      goto LABEL_24;
LABEL_22:
    if (v12 != v11)
    {
      v17 = v13 + 24 * v11;
      v18 = v13 + 24 * v12;
      *(double *)v18 = v16;
      objc_storeStrong((id *)(v18 + 8), *(id *)(v17 + 8));
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
      v10 = *(_QWORD *)(a2 + 16);
    }
    v12 = v11;
    if (v11 > v10 >> 1)
      goto LABEL_25;
  }
  v14 = *(double *)(v13 + 24 * (v11 | 1));
  v15 = *(double *)(v13 + 48 * v12);
  if (*(_BYTE *)a2)
  {
    if (v14 < v15)
      v11 |= 1uLL;
    goto LABEL_17;
  }
  if (v14 > v15)
    v11 |= 1uLL;
LABEL_21:
  v16 = *(double *)(v13 + 24 * v11);
  if (v16 > v7)
    goto LABEL_22;
LABEL_24:
  v11 = v12;
LABEL_25:
  v19 = *(_QWORD *)(a2 + 24) + 24 * v11;
  *(double *)v19 = v7;
  v20 = *(void **)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v8;
  v21 = v8;

  *(_QWORD *)(v19 + 16) = v9;
  v22 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 32) == v22 + 1)
  {
    *(_QWORD *)(a2 + 32) = v22;
    if (v22)
    {
      v23 = v22 >> 1;
      v24 = v22 - 1;
      if (v22 - 1 > v22 >> 1)
      {
        v25 = *(_QWORD *)(a2 + 24);
        if (*(_BYTE *)a2)
        {
          v26 = (double *)(v25 + 24 * v22 - 24);
          do
          {
            if (*v26 > *(double *)(v25 + 24 * v22))
            {
              *(_QWORD *)(a2 + 32) = v24;
              v22 = v24;
            }
            --v24;
            v26 -= 3;
          }
          while (v24 > v23);
        }
        else
        {
          v27 = (double *)(v25 + 24 * v22 - 24);
          do
          {
            if (*v27 < *(double *)(v25 + 24 * v22))
            {
              *(_QWORD *)(a2 + 32) = v24;
              v22 = v24;
            }
            --v24;
            v27 -= 3;
          }
          while (v24 > v23);
        }
      }
    }
  }
}

uint64_t *sub_1BE6719D8(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_1BE61F23C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BE671CC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1BE671CD8(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)&v25 + 1) = v11;
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_1BE61F930();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  *(_QWORD *)&v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_1BE671EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE671ED4(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, int a5)
{
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char *v57;
  int8x16_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int8x16_t *v76;
  char v77;
  uint64_t v78;
  int8x16_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x16_t *v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int64_t v127;

  v8 = (int8x16_t *)result;
LABEL_2:
  v9 = v8;
  while (2)
  {
    v10 = a2;
LABEL_4:
    v124 = a5;
LABEL_5:
    v8 = v9;
    v11 = (char *)v10 - (char *)v9;
    v12 = ((char *)v10 - (char *)v9) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[0]);
        if ((_DWORD)result)
        {
          v75 = v8->i64[0];
          v76 = a2;
          v8->i64[0] = a2[-1].i64[1];
          goto LABEL_171;
        }
        return result;
      case 3:
        v77 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[1], v8->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[1]);
        if ((v77 & 1) != 0)
        {
          v78 = v8->i64[0];
          if ((_DWORD)result)
          {
            v8->i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v78;
          }
          else
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v78;
            result = ((uint64_t (*)(uint64_t))*a3)(a2[-1].i64[1]);
            if ((_DWORD)result)
            {
              v75 = v8->i64[1];
              v76 = a2;
              v8->i64[1] = a2[-1].i64[1];
LABEL_171:
              v76[-1].i64[1] = v75;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v117 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v117;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[1], v8->i64[0]);
          goto LABEL_160;
        }
        return result;
      case 4:
        return sub_1BE672D98(v8, &v8->i64[1], (int8x16_t *)v8[1].i64, &a2[-1].i64[1], a3);
      case 5:
        v79 = v8 + 1;
        v80 = &v8[1].i64[1];
        sub_1BE672D98(v8, &v8->i64[1], (int8x16_t *)v8[1].i64, &v8[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8[1].i64[1]);
        if ((_DWORD)result)
        {
          v81 = *v80;
          *v80 = a2[-1].i64[1];
          a2[-1].i64[1] = v81;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v80, v79->i64[0]);
          if ((_DWORD)result)
          {
            v82 = v79->i64[0];
            v79->i64[0] = *v80;
            *v80 = v82;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v84 = v8->i64[1];
              v83 = v8[1].i64[0];
              v85 = v8->i64[0];
              v8->i64[1] = v83;
              v8[1].i64[0] = v84;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v83, v85);
LABEL_160:
              if ((_DWORD)result)
                *v8 = vextq_s8(*v8, *v8, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v86 = (int8x16_t *)&v8->u64[1];
          v87 = v8 == v10 || v86 == v10;
          v88 = v87;
          if ((a5 & 1) != 0)
          {
            if ((v88 & 1) == 0)
            {
              v89 = 0;
              v90 = (uint64_t *)v8;
              do
              {
                v93 = *v90;
                v92 = v90[1];
                v90 = (uint64_t *)v86;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v92, v93);
                if ((_DWORD)result)
                {
                  v94 = *v90;
                  v95 = v89;
                  do
                  {
                    *(uint64_t *)((char *)&v8->i64[1] + v95) = *(uint64_t *)((char *)v8->i64 + v95);
                    if (!v95)
                    {
                      v91 = (uint64_t *)v8;
                      goto LABEL_119;
                    }
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v94, *(uint64_t *)((char *)&v8->i64[-1] + v95));
                    v95 -= 8;
                  }
                  while ((result & 1) != 0);
                  v91 = (uint64_t *)((char *)&v8->i64[1] + v95);
LABEL_119:
                  *v91 = v94;
                }
                v86 = (int8x16_t *)(v90 + 1);
                v89 += 8;
              }
              while (v90 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v88 & 1) == 0)
          {
            do
            {
              v119 = v8->i64[0];
              v118 = v8->i64[1];
              v8 = v86;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v118, v119);
              if ((_DWORD)result)
              {
                v120 = v8->i64[0];
                v121 = (uint64_t *)v8;
                do
                {
                  v122 = v121;
                  v123 = *--v121;
                  *v122 = v123;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v120, *(v122 - 2));
                }
                while ((result & 1) != 0);
                *v121 = v120;
              }
              v86 = (int8x16_t *)&v8->u64[1];
            }
            while (&v8->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v10)
          {
            v96 = (unint64_t)(v12 - 2) >> 1;
            v127 = v96;
            do
            {
              if (v127 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = &v8->i64[v98];
                if (2 * v96 + 2 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v99, v99[1]))
                {
                  ++v99;
                  v98 = 2 * v96 + 2;
                }
                v100 = &v8->i64[v96];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v99, *v100);
                if ((result & 1) == 0)
                {
                  v125 = *v100;
                  do
                  {
                    v101 = v99;
                    *v100 = *v99;
                    if (v127 < v98)
                      break;
                    v102 = (2 * v98) | 1;
                    v99 = &v8->i64[v102];
                    v103 = 2 * v98 + 2;
                    if (v103 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v99, v99[1]))
                    {
                      ++v99;
                      v102 = v103;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v99, v125);
                    v100 = v101;
                    v98 = v102;
                  }
                  while (!(_DWORD)result);
                  *v101 = v125;
                }
              }
              v97 = v96-- <= 0;
            }
            while (!v97);
            v104 = (unint64_t)v11 >> 3;
            do
            {
              v105 = 0;
              v106 = v8->i64[0];
              v107 = (uint64_t *)v8;
              do
              {
                v108 = &v107[v105 + 1];
                v109 = (2 * v105) | 1;
                v110 = 2 * v105 + 2;
                if (v110 < v104)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v107[v105 + 1], v107[v105 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v108;
                    v109 = v110;
                  }
                }
                *v107 = *v108;
                v107 = v108;
                v105 = v109;
              }
              while (v109 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
              v111 = &a2[-1].i64[1];
              v87 = v108 == (uint64_t *)&a2[-1].u64[1];
              a2 = (int8x16_t *)((char *)a2 - 8);
              if (v87)
              {
                *v108 = v106;
              }
              else
              {
                *v108 = *v111;
                *v111 = v106;
                v112 = (char *)v108 - (char *)v8 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v8->i64[v113];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v114, *v108);
                  if ((_DWORD)result)
                  {
                    v115 = *v108;
                    do
                    {
                      v116 = v114;
                      *v108 = *v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v8->i64[v113];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v114, v115);
                      v108 = v116;
                    }
                    while ((result & 1) != 0);
                    *v116 = v115;
                  }
                }
              }
              v97 = v104-- <= 2;
            }
            while (!v97);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v8->i64[0], v8->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v8->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v8->i64[v13];
            if (v19)
            {
              v8->i64[v13] = v10[-1].i64[1];
              v10[-1].i64[1] = v20;
              --a4;
              v21 = v8->i64[0];
              if ((a5 & 1) != 0)
                goto LABEL_56;
              goto LABEL_55;
            }
            v8->i64[v13] = v8->i64[0];
            v8->i64[0] = v20;
            if ((*a3)(v10[-1].i64[1]))
            {
              v34 = v8->i64[0];
              v8->i64[0] = v10[-1].i64[1];
              v10[-1].i64[1] = v34;
            }
          }
          else if (v19)
          {
            v24 = v8->i64[0];
            v8->i64[0] = v10[-1].i64[1];
            v10[-1].i64[1] = v24;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[0], v8->i64[v13]))
            {
              v25 = v8->i64[v13];
              v8->i64[v13] = v8->i64[0];
              v8->i64[0] = v25;
              --a4;
              v21 = v25;
              if ((a5 & 1) != 0)
                goto LABEL_56;
              goto LABEL_55;
            }
          }
          --a4;
          v21 = v8->i64[0];
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          v54 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-1].i64[1], v21);
          v21 = v8->i64[0];
          if ((v54 & 1) != 0)
            goto LABEL_56;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[0], v10[-1].i64[1]);
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v68 = v9->i64[1];
              v9 = (int8x16_t *)((char *)v9 + 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v68);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v69 = &v8->i64[1];
            do
            {
              v9 = (int8x16_t *)v69;
              if (v69 >= (uint64_t *)v10)
                break;
              ++v69;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v9->i64[0]);
            }
            while (!(_DWORD)result);
          }
          if (v9 < v10)
          {
            v10 = a2;
            do
            {
              v70 = v10[-1].i64[1];
              v10 = (int8x16_t *)((char *)v10 - 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v70);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v10)
          {
            v71 = v9->i64[0];
            v9->i64[0] = v10->i64[0];
            v10->i64[0] = v71;
            do
            {
              v72 = v9->i64[1];
              v9 = (int8x16_t *)((char *)v9 + 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v72));
            do
            {
              v73 = v10[-1].i64[1];
              v10 = (int8x16_t *)((char *)v10 - 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v73);
            }
            while ((result & 1) != 0);
          }
          v74 = &v9[-1].i64[1];
          if (&v9[-1].u64[1] != (unint64_t *)v8)
            v8->i64[0] = *v74;
          a5 = 0;
          *v74 = v21;
          continue;
        }
        v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v8->i64[v13], v8->i64[0]);
        v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v8->i64[v13]);
        v126 = a4;
        if ((v15 & 1) != 0)
        {
          v17 = v8->i64[0];
          if (v16)
          {
            v8->i64[0] = v10[-1].i64[1];
            v10[-1].i64[1] = v17;
          }
          else
          {
            v8->i64[0] = v8->i64[v13];
            v8->i64[v13] = v17;
            if ((*a3)(v10[-1].i64[1]))
            {
              v26 = v8->i64[v13];
              v8->i64[v13] = v10[-1].i64[1];
              v10[-1].i64[1] = v26;
            }
          }
        }
        else if (v16)
        {
          v22 = v8->i64[v13];
          v8->i64[v13] = v10[-1].i64[1];
          v10[-1].i64[1] = v22;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v13], v8->i64[0]))
          {
            v23 = v8->i64[0];
            v8->i64[0] = v8->i64[v13];
            v8->i64[v13] = v23;
          }
        }
        v27 = v13 - 1;
        v28 = v13 - 1;
        v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v28], v8->i64[1]);
        v30 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[0], v8->i64[v28]);
        if ((v29 & 1) != 0)
        {
          v31 = v8->i64[1];
          if (v30)
          {
            v8->i64[1] = v10[-1].i64[0];
            v10[-1].i64[0] = v31;
          }
          else
          {
            v8->i64[1] = v8->i64[v28];
            v8->i64[v28] = v31;
            if ((*a3)(v10[-1].i64[0]))
            {
              v35 = v8->i64[v28];
              v8->i64[v28] = v10[-1].i64[0];
              v10[-1].i64[0] = v35;
            }
          }
        }
        else if (v30)
        {
          v32 = v8->i64[v28];
          v8->i64[v28] = v10[-1].i64[0];
          v10[-1].i64[0] = v32;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v28], v8->i64[1]))
          {
            v33 = v8->i64[1];
            v8->i64[1] = v8->i64[v28];
            v8->i64[v28] = v33;
          }
        }
        v36 = v10;
        v37 = v13 + 1;
        v38 = v13 + 1;
        v39 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v38], v8[1].i64[0]);
        v40 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v36[-2].i64[1], v8->i64[v38]);
        if ((v39 & 1) != 0)
        {
          v41 = v8[1].i64[0];
          if (v40)
          {
            v8[1].i64[0] = a2[-2].i64[1];
            a2[-2].i64[1] = v41;
          }
          else
          {
            v8[1].i64[0] = v8->i64[v38];
            v8->i64[v38] = v41;
            if ((*a3)(a2[-2].i64[1]))
            {
              v44 = v8->i64[v38];
              v8->i64[v38] = a2[-2].i64[1];
              a2[-2].i64[1] = v44;
            }
          }
        }
        else if (v40)
        {
          v42 = v8->i64[v38];
          v8->i64[v38] = a2[-2].i64[1];
          a2[-2].i64[1] = v42;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v38], v8[1].i64[0]))
          {
            v43 = v8[1].i64[0];
            v8[1].i64[0] = v8->i64[v38];
            v8->i64[v38] = v43;
          }
        }
        v45 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v13], v8->i64[v27]);
        v46 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v37], v8->i64[v13]);
        if ((v45 & 1) != 0)
        {
          v47 = v8->i64[v27];
          if (v46)
          {
            v8->i64[v27] = v8->i64[v38];
            v8->i64[v38] = v47;
            v48 = v8->i64[v13];
          }
          else
          {
            v8->i64[v27] = v8->i64[v13];
            v8->i64[v13] = v47;
            v51 = (*a3)(v8->i64[v37]);
            v48 = v8->i64[v13];
            if (v51)
            {
              v52 = v8->i64[v38];
              v8->i64[v13] = v52;
              v8->i64[v38] = v48;
              v48 = v52;
            }
          }
          v10 = a2;
        }
        else
        {
          v48 = v8->i64[v13];
          v10 = a2;
          if (v46)
          {
            v8->i64[v13] = v8->i64[v38];
            v8->i64[v38] = v48;
            v49 = ((uint64_t (*)(void))*a3)();
            v48 = v8->i64[v13];
            if (v49)
            {
              v50 = v8->i64[v28];
              v8->i64[v28] = v48;
              v8->i64[v13] = v50;
              v48 = v50;
            }
          }
        }
        a5 = v124;
        v53 = v8->i64[0];
        v8->i64[0] = v48;
        v8->i64[v13] = v53;
        a4 = v126 - 1;
        v21 = v8->i64[0];
        if ((v124 & 1) == 0)
          goto LABEL_55;
LABEL_56:
        v55 = 0;
        do
          v56 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[++v55], v21);
        while ((v56 & 1) != 0);
        v57 = &v8->i8[v55 * 8];
        v58 = v10;
        if (v55 == 1)
        {
          v58 = v10;
          do
          {
            if (v57 >= (char *)v58)
              break;
            v60 = v58[-1].i64[1];
            v58 = (int8x16_t *)((char *)v58 - 8);
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v60, v21) & 1) == 0);
        }
        else
        {
          do
          {
            v59 = v58[-1].i64[1];
            v58 = (int8x16_t *)((char *)v58 - 8);
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v21));
        }
        if (v57 >= (char *)v58)
        {
          v66 = (uint64_t *)(v57 - 8);
          if (v57 - 8 == (char *)v8)
            goto LABEL_74;
LABEL_73:
          v8->i64[0] = *v66;
          goto LABEL_74;
        }
        v61 = &v8->i64[v55];
        v62 = (uint64_t *)v58;
        do
        {
          v63 = *v61;
          *v61 = *v62;
          *v62 = v63;
          do
          {
            v64 = v61[1];
            ++v61;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v64, v21) & 1) != 0);
          do
            v65 = *--v62;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v65, v21));
        }
        while (v61 < v62);
        v66 = v61 - 1;
        v10 = a2;
        if (v61 - 1 != (uint64_t *)v8)
          goto LABEL_73;
LABEL_74:
        *v66 = v21;
        if (v57 < (char *)v58)
        {
LABEL_77:
          result = sub_1BE671ED4(v8, v66, a3, a4, a5 & 1);
          a5 = 0;
          v9 = (int8x16_t *)(v66 + 1);
          goto LABEL_4;
        }
        v67 = sub_1BE672A50(v8, v66, a3);
        v9 = (int8x16_t *)(v66 + 1);
        result = sub_1BE672A50(v66 + 1, v10, a3);
        if (!(_DWORD)result)
        {
          if (v67)
            goto LABEL_5;
          goto LABEL_77;
        }
        a2 = (int8x16_t *)v66;
        if (!v67)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1BE672A50(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      sub_1BE672D98(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      sub_1BE672D98(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
  {
LABEL_35:
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
  v31 = *v28;
  v32 = v29;
  do
  {
    v33 = (char *)a1 + v32;
    *(_QWORD *)((char *)a1 + v32 + 24) = *(_QWORD *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8)
        goto LABEL_35;
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *((_QWORD *)v33 + 1)) & 1) != 0);
  *(_QWORD *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8)
    goto LABEL_35;
  return v28 + 1 == a2;
}

uint64_t sub_1BE672D98(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
  v11 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(_QWORD, _QWORD))*a5)(*a2, *a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

void sub_1BE672FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67300C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE62033C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void StarRegressor::StarRegressor(StarRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  id v8[4];
  void *v9;
  void *v10;
  void *__p;
  void *v12;

  PentagonRegressor::PentagonRegressor((PentagonRegressor *)v8, a2, a3);
  v4 = v8[1];
  v5 = operator new();
  v6 = v4[6];
  *(_QWORD *)v5 = &off_1E77F07B8;
  v7 = *((_OWORD *)v4 + 2);
  *(_OWORD *)(v5 + 16) = *((_OWORD *)v4 + 1);
  *(_OWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 48) = v6;
  *(_QWORD *)this = v5;
  MEMORY[0x1C3B812EC](v4, 0x1081C406FCD2653);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }

}

void sub_1BE673114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE644FA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE67312C(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "CHStar");
}

void sub_1BE67374C()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.CoreHandwriting.CHClientStroke", v2);
  v1 = (void *)qword_1EF567FB0;
  qword_1EF567FB0 = (uint64_t)v0;

}

uint64_t sub_1BE67379C(uint64_t result)
{
  uint64_t v1;

  v1 = qword_1EF568C28;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 32) = qword_1EF568C28;
  qword_1EF568C28 = v1 + 1;
  return result;
}

uint64_t sub_1BE675264(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend_strokeIdentifier(a2, v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v5, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v4, v18, (uint64_t)v11, (uint64_t)v17, v19, v20);
  return v21;
}

void sub_1BE67532C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(_QWORD *)(a1 + 40);
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setStrokeAttributes_(v11, v7, v6, v8, v9, v10);

}

void sub_1BE67597C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  int v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v6, a3, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13, v14, v15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a1 + 40) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v23 = v5;
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v82, (uint64_t)v87, 16, v25);
    if (v26)
    {
      v32 = v26;
      v33 = *(_QWORD *)v83;
      do
      {
        v34 = 0;
        do
        {
          if (*(_QWORD *)v83 != v33)
            objc_enumerationMutation(v23);
          v35 = *(void **)(a1 + 40);
          v36 = objc_msgSend_intValue(*(void **)(*((_QWORD *)&v82 + 1) + 8 * v34), v27, v28, v29, v30, v31);
          objc_msgSend_objectAtIndexedSubscript_(v35, v37, v36, v38, v39, v40);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v41, v42, 0, v43, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend_containsObject_(v21, v47, (uint64_t)v46, v48, v49, v50) & 1) == 0)
            objc_msgSend_addObject_(v21, v51, (uint64_t)v46, v52, v53, v54);

          ++v34;
        }
        while (v32 != v34);
        v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v82, (uint64_t)v87, 16, v31);
      }
      while (v32);
    }

  }
  else
  {
    v22 = objc_msgSend_mutableCopy(v5, v16, v17, v18, v19, v20);

    v21 = (void *)v22;
  }
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v55 = v21;
  v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v56, (uint64_t)&v78, (uint64_t)v86, 16, v57);
  if (v58)
  {
    v64 = v58;
    v65 = *(_QWORD *)v79;
    do
    {
      v66 = 0;
      do
      {
        if (*(_QWORD *)v79 != v65)
          objc_enumerationMutation(v55);
        v67 = *(void **)(a1 + 48);
        v68 = objc_msgSend_intValue(*(void **)(*((_QWORD *)&v78 + 1) + 8 * v66), v59, v60, v61, v62, v63, (_QWORD)v78);
        objc_msgSend_objectAtIndexedSubscript_(v67, v69, v68, v70, v71, v72);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObjectsFromArray_(v73, v74, (uint64_t)v10, v75, v76, v77);

        ++v66;
      }
      while (v64 != v66);
      v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v59, (uint64_t)&v78, (uint64_t)v86, 16, v63);
    }
    while (v64);
  }

}

void sub_1BE675C00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithLong_(MEMORY[0x1E0CB37E8], a2, 1, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

uint64_t sub_1BE6765BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1BE676BBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE676BD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE676CE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::createDrawingFromDeltaFeatures(CoreHandwriting::synthesis *this, MLMultiArray *a2, MLMultiArray *a3)
{
  CoreHandwriting::synthesis *v5;
  MLMultiArray *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  NSObject *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  CoreHandwriting::synthesis *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  MLMultiArray *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  double v131;
  double v132;
  float v133;
  id v134;
  int v136;
  MLMultiArray *v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v5 = this;
  v6 = a2;
  objc_msgSend_shape(v6, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v12, v13, 1, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_unsignedLongValue(v17, v18, v19, v20, v21, v22);
  objc_msgSend_shape(v5, v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v29, v30, 1, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend_unsignedLongValue(v34, v35, v36, v37, v38, v39);

  if (v23 != v40)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v46 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_shape(v5, v47, v48, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v52, v53, 1, v54, v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = objc_msgSend_unsignedLongValue(v57, v58, v59, v60, v61, v62);
      objc_msgSend_shape(v6, v64, v65, v66, v67, v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v69, v70, 1, v71, v72, v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v136 = 134218240;
      v137 = (MLMultiArray *)v63;
      v138 = 2048;
      v139 = objc_msgSend_unsignedLongValue(v74, v75, v76, v77, v78, v79);
      _os_log_impl(&dword_1BE607000, v46, OS_LOG_TYPE_FAULT, "Expected dxdy.shape[1]=%lu to match eos.shape[1]=%lu", (uint8_t *)&v136, 0x16u);

    }
  }
  objc_msgSend_shape(v6, v41, v42, v43, v44, v45);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v80, v81, 1, v82, v83, v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = objc_msgSend_unsignedIntValue(v85, v86, v87, v88, v89, v90) < (unint64_t)a3;

  if (v91)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v92 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v92, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_shape(v6, v93, v94, v95, v96, v97);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v98, v99, 1, v100, v101, v102);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      v109 = objc_msgSend_unsignedLongValue(v103, v104, v105, v106, v107, v108);
      v136 = 134218240;
      v137 = a3;
      v138 = 2048;
      v139 = v109;
      _os_log_impl(&dword_1BE607000, v92, OS_LOG_TYPE_FAULT, "Expected length=%lu to match eos.shape[1]=%lu", (uint8_t *)&v136, 0x16u);

    }
  }
  v110 = (void *)objc_opt_new();
  v111 = objc_retainAutorelease(v5);
  v117 = (float *)objc_msgSend_dataPointer(v111, v112, v113, v114, v115, v116);
  v118 = objc_retainAutorelease(v6);
  v124 = objc_msgSend_dataPointer(v118, v119, v120, v121, v122, v123);
  if (a3)
  {
    v130 = (float *)v124;
    v131 = 0.0;
    v132 = 0.0;
    do
    {
      v133 = *v130++;
      v131 = v131 + *v117;
      v132 = v132 + v117[1];
      objc_msgSend_addPoint_(v110, v125, v126, v127, v128, v129, v131, v132);
      if (v133 > 0.0)
        objc_msgSend_endStroke(v110, v125, v126, v127, v128, v129);
      v117 += 2;
      a3 = (MLMultiArray *)((char *)a3 - 1);
    }
    while (a3);
  }
  if (objc_msgSend_pointCount(v110, v125, v126, v127, v128, v129))
    v134 = v110;
  else
    v134 = 0;

  return v134;
}

void sub_1BE677318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::multiArrayWithContent(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[4];
  id v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_alloc(MEMORY[0x1E0C9E970]);
  v8 = (void *)objc_msgSend_initWithShape_dataType_error_(v5, v6, (uint64_t)v4, 65568, 0, v7);
  v14 = objc_msgSend_count(v8, v9, v10, v11, v12, v13);
  if (v14 != objc_msgSend_count(v3, v15, v16, v17, v18, v19))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v20 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v40 = objc_msgSend_count(v8, v21, v22, v23, v24, v25);
      v41 = 2048;
      v42 = objc_msgSend_count(v3, v26, v27, v28, v29, v30);
      _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_FAULT, "Size mismatch! shape elements: %ld, vector elements: %ld", buf, 0x16u);
    }

  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = sub_1BE6775D4;
  v37[3] = &unk_1E77F2A90;
  v31 = v3;
  v38 = v31;
  objc_msgSend_getBytesWithHandler_(v8, v32, (uint64_t)v37, v33, v34, v35);

  return v8;
}

void sub_1BE677590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6775D4(uint64_t a1, _DWORD *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = *(id *)(a1 + 32);
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v15, (uint64_t)v19, 16, v5);
  if (v11)
  {
    v12 = *(_QWORD *)v16;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v16 != v12)
          objc_enumerationMutation(v3);
        objc_msgSend_floatValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v13), v6, v7, v8, v9, v10, (_QWORD)v15);
        *a2++ = v14;
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v15, (uint64_t)v19, 16, v10);
    }
    while (v11);
  }

}

void sub_1BE6776C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::multiArrayWithContent(void *a1, void *a2, float a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  _QWORD v42[4];
  id v43;
  id v44;
  float v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = objc_alloc(MEMORY[0x1E0C9E970]);
  v10 = (void *)objc_msgSend_initWithShape_dataType_error_(v7, v8, (uint64_t)v6, 65568, 0, v9);
  v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
  if (v16 < objc_msgSend_count(v5, v17, v18, v19, v20, v21))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v22 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v47 = objc_msgSend_count(v10, v23, v24, v25, v26, v27);
      v48 = 2048;
      v49 = objc_msgSend_count(v5, v28, v29, v30, v31, v32);
      _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_FAULT, "Size mismatch! shape elements: %ld, vector elements: %ld", buf, 0x16u);
    }

  }
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BE677908;
  v42[3] = &unk_1E77F2AB8;
  v33 = v10;
  v43 = v33;
  v34 = v5;
  v44 = v34;
  v45 = a3;
  objc_msgSend_getBytesWithHandler_(v33, v35, (uint64_t)v42, v36, v37, v38);
  v39 = v44;
  v40 = v33;

  return v40;
}

void sub_1BE6778B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE677908(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      while (i >= objc_msgSend_count(*(void **)(a1 + 40), v9, v10, v11, v12, v13))
      {
        *(_DWORD *)&a2[4 * i++] = *(_DWORD *)(a1 + 48);
        result = objc_msgSend_count(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
        if (i >= result)
          return result;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v15, i, v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_floatValue(v20, v21, v22, v23, v24, v25);
      *(_DWORD *)&a2[4 * i] = v26;

      result = objc_msgSend_count(*(void **)(a1 + 32), v27, v28, v29, v30, v31);
    }
  }
  return result;
}

void sub_1BE6779A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::multiArrayWithFixedValue(void *a1, float a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  float v16;

  v3 = a1;
  v4 = objc_alloc(MEMORY[0x1E0C9E970]);
  v7 = (void *)objc_msgSend_initWithShape_dataType_error_(v4, v5, (uint64_t)v3, 65568, 0, v6);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BE677A90;
  v14[3] = &unk_1E77F2AE0;
  v8 = v7;
  v15 = v8;
  v16 = a2;
  objc_msgSend_getBytesWithHandler_(v8, v9, (uint64_t)v14, v10, v11, v12);

  return v8;
}

void sub_1BE677A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE677A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE677A90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  result = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (result)
  {
    v14 = (char *)a2;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)(a1 + 40);
      v14 += 4;
      result = objc_msgSend_count(*(void **)(a1 + 32), v9, v10, v11, v12, v13);
    }
    while (v14 != &a2[4 * result]);
  }
  return result;
}

float pointDistance(int a1, float64x2_t a2, double a3, float64x2_t a4, double a5)
{
  float v5;
  float v6;

  switch(a1)
  {
    case 0:
      a2.f64[1] = a3;
      a4.f64[1] = a5;
      *(float32x2_t *)&a2.f64[0] = vsub_f32(vcvt_f32_f64(a2), vcvt_f32_f64(a4));
      *(float *)a2.f64 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a2.f64[0], *(float32x2_t *)&a2.f64[0])));
      break;
    case 1:
      *(float *)a2.f64 = vabdd_f64(a2.f64[0], a4.f64[0]) + vabdd_f64(a3, a5);
      break;
    case 2:
      v5 = a2.f64[0] - a4.f64[0];
      *(float *)a2.f64 = fabsf(v5);
      break;
    case 3:
      v6 = a3 - a5;
      *(float *)a2.f64 = fabsf(v6);
      break;
    default:
      LODWORD(a2.f64[0]) = 0;
      break;
  }
  return *(float *)a2.f64;
}

void CHFastGroupingCluster::CHFastGroupingCluster(CHFastGroupingCluster *this)
{
  _QWORD *v2;
  _QWORD v3[2];

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  sub_1BE67AC7C((uint64_t)&v2, 0);
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0C9D538];
  *((_QWORD *)this + 8) = 0;
}

{
  _OWORD *v1;

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  v1 = (_OWORD *)MEMORY[0x1E0C9D538];
  *(_QWORD *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = *v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

uint64_t sub_1BE677C14(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  int32x2_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  uint64_t *v15;
  float32x2_t v16;
  float64x2_t *v17;
  float64x2_t *i;
  float64x2_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_28;
  do
  {
    v6 = (_BYTE *)v5[5];
    v23 = v5[4];
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v7 = (_BYTE *)v5[6];
    v8 = v7 - v6;
    if (v7 == v6)
    {
      v9 = 0;
    }
    else
    {
      if (v8 < 0)
        sub_1BE61F930();
      v9 = (char *)operator new(v7 - v6);
      v24 = v9;
      v26 = &v9[16 * (v8 >> 4)];
      memcpy(v9, v6, v8);
      v25 = &v9[16 * (v8 >> 4)];
    }
    sub_1BE678038((uint64_t **)a1, &v23);
    if (v9)
      operator delete(v9);
    v11 = (_QWORD *)v5[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v5[2];
        v13 = *v12 == (_QWORD)v5;
        v5 = v12;
      }
      while (!v13);
    }
    v5 = v12;
  }
  while (v12 != v4);
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
LABEL_28:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    v15 = *(uint64_t **)a1;
    v16 = 0;
    if (*(uint64_t **)a1 != v3)
    {
      do
      {
        v17 = (float64x2_t *)v15[5];
        for (i = (float64x2_t *)v15[6]; v17 != i; v16 = vcvt_f32_f64(vaddq_f64(v19, vcvtq_f64_f32(v16))))
        {
          v19 = *v17++;
          v10.i32[1] = HIDWORD(v19.f64[0]);
        }
        v20 = (uint64_t *)v15[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v15[2];
            v13 = *v21 == (_QWORD)v15;
            v15 = v21;
          }
          while (!v13);
        }
        v15 = v21;
      }
      while (v21 != v3);
    }
    *(float *)v10.i32 = (float)v14;
    *(float64x2_t *)(a1 + 24) = vcvtq_f64_f32(vdiv_f32(v16, (float32x2_t)vdup_lane_s32(v10, 0)));
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1BE677DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_1BE62033C(v12, *(_QWORD **)(v11 + 48));
  sub_1BE67AC7C(v11, *(_QWORD **)(v11 + 8));
  _Unwind_Resume(a1);
}

CHFastGroupingCluster *CHFastGroupingCluster::computeGlobalAnchorPoint(CHFastGroupingCluster *this, double a2, double a3)
{
  unint64_t v3;
  CHFastGroupingCluster *v4;
  float32x2_t v5;
  float64x2_t *v6;
  float64x2_t *i;
  float64x2_t v8;
  CHFastGroupingCluster *v9;
  CHFastGroupingCluster *v10;
  BOOL v11;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(CHFastGroupingCluster **)this;
    v5 = 0;
    if (*(CHFastGroupingCluster **)this != (CHFastGroupingCluster *)((char *)this + 8))
    {
      do
      {
        v6 = (float64x2_t *)*((_QWORD *)v4 + 5);
        for (i = (float64x2_t *)*((_QWORD *)v4 + 6); v6 != i; v5 = vcvt_f32_f64(vaddq_f64(v8, vcvtq_f64_f32(v5))))
        {
          v8 = *v6++;
          HIDWORD(a3) = HIDWORD(v8.f64[0]);
        }
        v9 = (CHFastGroupingCluster *)*((_QWORD *)v4 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(CHFastGroupingCluster **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (CHFastGroupingCluster *)*((_QWORD *)v4 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v4;
            v4 = v10;
          }
          while (!v11);
        }
        v4 = v10;
      }
      while (v10 != (CHFastGroupingCluster *)((char *)this + 8));
    }
    *(float *)&a3 = (float)v3;
    *(float64x2_t *)((char *)this + 24) = vcvtq_f64_f32(vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)));
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  return this;
}

uint64_t *sub_1BE677ED0(uint64_t *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = result;
    v5 = (uint64_t **)(result + 6);
    do
    {
      v6 = *v5;
      v7 = v3[4];
      v8 = v5;
      v9 = v5;
      if (*v5)
      {
        while (1)
        {
          while (1)
          {
            v9 = (uint64_t **)v6;
            v10 = v6[4];
            if (v7 >= v10)
              break;
            v6 = *v9;
            v8 = v9;
            if (!*v9)
              goto LABEL_11;
          }
          if (v10 >= v7)
            break;
          v6 = v9[1];
          if (!v6)
          {
            v8 = v9 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v7;
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v9;
        *v8 = v11;
        v12 = *(_QWORD *)v4[5];
        if (v12)
        {
          v4[5] = v12;
          v13 = *v8;
        }
        else
        {
          v13 = v11;
        }
        result = sub_1BE61F5C0((uint64_t *)v4[6], v13);
        ++v4[7];
      }
      v14 = (_QWORD *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v3[2];
          v16 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v16);
      }
      v3 = v15;
    }
    while (v15 != v2);
  }
  return result;
}

_QWORD *CHFastGroupingCluster::getAnchorPoints@<X0>(CHFastGroupingCluster *this@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return sub_1BE67ACCC(a2, *(_QWORD **)this, (_QWORD *)this + 1);
}

void sub_1BE678020(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE67AC7C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

float64x2_t sub_1BE678038(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float32x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t result;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  v6 = a1 + 1;
  v7 = (_BYTE *)a2[1];
  v8 = (_BYTE *)a2[2];
  v9 = *a2;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v4;
        v11 = v4[4];
        if (v9 >= v11)
          break;
        v4 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= v9)
        break;
      v4 = v10[1];
      if (!v4)
      {
        v6 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_8:
    v12 = (uint64_t *)operator new(0x40uLL);
    v12[4] = v9;
    v12[5] = 0;
    v12[6] = 0;
    v12[7] = 0;
    v13 = v8 - v7;
    if (v8 != v7)
    {
      if (v13 < 0)
        sub_1BE61F930();
      v14 = (char *)operator new(v8 - v7);
      v12[5] = (uint64_t)v14;
      v15 = &v14[16 * (v13 >> 4)];
      v12[7] = (uint64_t)v15;
      memcpy(v14, v7, v8 - v7);
      v12[6] = (uint64_t)v15;
    }
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v6 = v12;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v12 = *v6;
    }
    sub_1BE61F5C0(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = *a2;
  }
  v18 = a1 + 6;
  v17 = a1[6];
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t **)v17;
        v20 = v17[4];
        if (v9 >= v20)
          break;
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_21;
      }
      if (v20 >= v9)
        break;
      v17 = v19[1];
      if (!v17)
      {
        v18 = v19 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    v19 = a1 + 6;
LABEL_21:
    v21 = (uint64_t *)operator new(0x28uLL);
    v21[4] = v9;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    *v18 = v21;
    v22 = (uint64_t *)*a1[5];
    if (v22)
    {
      a1[5] = v22;
      v23 = *v18;
    }
    else
    {
      v23 = v21;
    }
    sub_1BE61F5C0(a1[6], v23);
    a1[7] = (uint64_t *)((char *)a1[7] + 1);
  }
  v24 = (float64x2_t *)a2[1];
  v25 = (float64x2_t *)a2[2];
  if (v24 == v25)
  {
    v28 = 0uLL;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = *v24++;
      v26 = vcvt_f32_f64(vaddq_f64(v27, vcvtq_f64_f32(v26)));
    }
    while (v24 != v25);
    v28 = vcvtq_f64_f32(v26);
  }
  result = vdivq_f64(vmlaq_n_f64(v28, *(float64x2_t *)(a1 + 3), (double)v5), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v5 + ((v8 - v7) >> 4))), 0));
  *(float64x2_t *)(a1 + 3) = result;
  return result;
}

void sub_1BE678240(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

double CHFastGroupingCluster::getGlobalAnchorPoint(CHFastGroupingCluster *this)
{
  return *((double *)this + 3);
}

float CHFastGroupingCluster::getDistanceToCluster(_QWORD *a1, _QWORD *a2, unsigned int a3, int a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  BOOL v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  _QWORD *v40;
  char *v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  float *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  float *v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;
  float *v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  float *v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  float v77;
  float *v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  float v82;
  float *v83;
  char *v84;
  int v86;
  char *v87;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v93;
  char *v94;

  v4 = a4;
  if (!a4)
  {
    v86 = 0;
    v13 = (_QWORD *)*a1;
    v90 = a1 + 1;
    if ((_QWORD *)*a1 == a1 + 1)
    {
      v8 = 0;
      v15 = 0;
      v40 = (_QWORD *)*a2;
      v93 = a2 + 1;
      if ((_QWORD *)*a2 != a2 + 1)
        goto LABEL_45;
      goto LABEL_115;
    }
    v8 = 0;
    v14 = 0;
    v15 = 0;
LABEL_7:
    v17 = (uint64_t *)v13[5];
    v16 = (uint64_t *)v13[6];
    if (v17 == v16)
    {
      v18 = (_QWORD *)v13[1];
      if (!v18)
        goto LABEL_33;
      do
      {
LABEL_31:
        v29 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
      goto LABEL_6;
    }
    while (1)
    {
      while (1)
      {
        v21 = *v17;
        v20 = v17[1];
        if (v8 >= v14)
          break;
        *(_QWORD *)v8 = v21;
        *((_QWORD *)v8 + 1) = v20;
        v19 = v8 + 16;
        v17 += 2;
        v8 += 16;
        if (v17 == v16)
          goto LABEL_30;
      }
      v22 = (v8 - v15) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        sub_1BE61F930();
      if ((v14 - v15) >> 3 > v23)
        v23 = (v14 - v15) >> 3;
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 60)
          sub_1BE61F100();
        v25 = (char *)operator new(16 * v24);
        v26 = &v25[16 * v22];
        *(_QWORD *)v26 = v21;
        *((_QWORD *)v26 + 1) = v20;
        if (v8 == v15)
        {
LABEL_28:
          v28 = v26;
          v14 = &v25[16 * v24];
          v19 = v26 + 16;
          if (!v15)
            goto LABEL_25;
          goto LABEL_24;
        }
      }
      else
      {
        v25 = 0;
        v26 = (char *)(16 * v22);
        *(_QWORD *)v26 = v21;
        *((_QWORD *)v26 + 1) = v20;
        if (v8 == v15)
          goto LABEL_28;
      }
      v27 = v26;
      do
      {
        v28 = v27 - 16;
        *((_OWORD *)v27 - 1) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v27 -= 16;
      }
      while (v8 != v15);
      v14 = &v25[16 * v24];
      v19 = v26 + 16;
      if (!v15)
        goto LABEL_25;
LABEL_24:
      operator delete(v15);
LABEL_25:
      v15 = v28;
      v17 += 2;
      v8 = v19;
      if (v17 == v16)
      {
LABEL_30:
        v8 = v19;
        v18 = (_QWORD *)v13[1];
        if (v18)
          goto LABEL_31;
        do
        {
LABEL_33:
          v29 = (_QWORD *)v13[2];
          v30 = *v29 == (_QWORD)v13;
          v13 = v29;
        }
        while (!v30);
LABEL_6:
        v13 = v29;
        if (v29 != v90)
          goto LABEL_7;
        v40 = (_QWORD *)*a2;
        v93 = a2 + 1;
        if (v40 != v93)
        {
LABEL_45:
          v12 = 0;
          v41 = 0;
          v11 = 0;
LABEL_47:
          v43 = (uint64_t *)v40[5];
          v42 = (uint64_t *)v40[6];
          if (v43 == v42)
          {
            v44 = (_QWORD *)v40[1];
            if (!v44)
              goto LABEL_73;
            do
            {
LABEL_71:
              v56 = v44;
              v44 = (_QWORD *)*v44;
            }
            while (v44);
            goto LABEL_46;
          }
          while (1)
          {
            while (1)
            {
              v47 = *v43;
              v46 = v43[1];
              if (v12 >= v41)
                break;
              *(_QWORD *)v12 = v47;
              *((_QWORD *)v12 + 1) = v46;
              v45 = v12 + 16;
              v43 += 2;
              v12 += 16;
              if (v43 == v42)
                goto LABEL_70;
            }
            v48 = (v12 - v11) >> 4;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60)
              sub_1BE61F930();
            if ((v41 - v11) >> 3 > v49)
              v49 = (v41 - v11) >> 3;
            if ((unint64_t)(v41 - v11) >= 0x7FFFFFFFFFFFFFF0)
              v50 = 0xFFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
            {
              v51 = v11;
              if (v50 >> 60)
                sub_1BE61F100();
              v52 = (char *)operator new(16 * v50);
              v11 = v51;
              v53 = &v52[16 * v48];
              *(_QWORD *)v53 = v47;
              *((_QWORD *)v53 + 1) = v46;
              if (v12 == v51)
              {
LABEL_68:
                v55 = v53;
                v41 = &v52[16 * v50];
                v45 = v53 + 16;
                if (!v11)
                  goto LABEL_65;
                goto LABEL_64;
              }
            }
            else
            {
              v52 = 0;
              v53 = (char *)(16 * v48);
              *(_QWORD *)v53 = v47;
              *((_QWORD *)v53 + 1) = v46;
              if (v12 == v11)
                goto LABEL_68;
            }
            v54 = v53;
            do
            {
              v55 = v54 - 16;
              *((_OWORD *)v54 - 1) = *((_OWORD *)v12 - 1);
              v12 -= 16;
              v54 -= 16;
            }
            while (v12 != v11);
            v41 = &v52[16 * v50];
            v45 = v53 + 16;
            if (!v11)
              goto LABEL_65;
LABEL_64:
            operator delete(v11);
LABEL_65:
            v11 = v55;
            v43 += 2;
            v12 = v45;
            if (v43 == v42)
            {
LABEL_70:
              v12 = v45;
              v44 = (_QWORD *)v40[1];
              if (v44)
                goto LABEL_71;
              do
              {
LABEL_73:
                v56 = (_QWORD *)v40[2];
                v30 = *v56 == (_QWORD)v40;
                v40 = v56;
              }
              while (!v30);
LABEL_46:
              v40 = v56;
              if (v56 != v93)
                goto LABEL_47;
              if (v15 != v8)
              {
LABEL_77:
                if (v11 != v12)
                {
                  v87 = v8;
                  v8 = v15;
                  v5 = a3;
                  goto LABEL_79;
                }
                v31 = 0;
                v32 = 0;
                v8 = v15;
LABEL_37:
                v33 = v32;
                if (v32 != v31)
                {
                  v34 = v32 + 1;
                  v33 = v32;
                  if (v32 + 1 != v31)
                  {
                    v35 = *v32;
                    v33 = v32;
                    v36 = v32 + 1;
                    do
                    {
                      v37 = *v36++;
                      v38 = v37;
                      if (v37 < v35)
                      {
                        v35 = v38;
                        v33 = v34;
                      }
                      v34 = v36;
                    }
                    while (v36 != v31);
                  }
                }
                v39 = *v33;
                goto LABEL_128;
              }
LABEL_116:
              v31 = 0;
              v32 = 0;
              goto LABEL_37;
            }
          }
        }
LABEL_115:
        v11 = 0;
        v12 = 0;
        if (v15 != v8)
          goto LABEL_77;
        goto LABEL_116;
      }
    }
  }
  if (a4 != 1)
  {
    v11 = 0;
    v8 = 0;
    v31 = 0;
    v32 = 0;
    goto LABEL_118;
  }
  v5 = a3;
  v6 = a1[3];
  v7 = a1[4];
  v8 = (char *)operator new(0x10uLL);
  v86 = 1;
  *(_QWORD *)v8 = v6;
  *((_QWORD *)v8 + 1) = v7;
  v87 = v8 + 16;
  v9 = a2[3];
  v10 = a2[4];
  v11 = (char *)operator new(0x10uLL);
  v12 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
LABEL_79:
  v31 = 0;
  v57 = 0;
  v32 = 0;
  v91 = v5;
  v94 = v8;
  v89 = v11;
  while (2)
  {
    v58 = v11;
    do
    {
      while (1)
      {
        if (v5 <= 3)
          __asm { BR              X8 }
        if (v31 >= v57)
          break;
        *v31++ = 0.0;
        v58 += 16;
        if (v58 == v12)
          goto LABEL_80;
      }
      v59 = v31 - v32;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62)
        sub_1BE61F930();
      if (((char *)v57 - (char *)v32) >> 1 > v60)
        v60 = ((char *)v57 - (char *)v32) >> 1;
      if ((unint64_t)((char *)v57 - (char *)v32) >= 0x7FFFFFFFFFFFFFFCLL)
        v61 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
      {
        if (v61 >> 62)
          sub_1BE61F100();
        v62 = operator new(4 * v61);
        v11 = v89;
        v63 = (float *)&v62[4 * v59];
        *v63 = 0.0;
        v64 = (uint64_t)(v63 + 1);
        v65 = (char *)v31 - (char *)v32;
        if (v31 != v32)
        {
LABEL_95:
          v66 = v65 - 4;
          if (v66 < 0xBC
            || (v69 = ((char *)(v31 - 1) - (char *)v32) & 0xFFFFFFFFFFFFFFFCLL,
                &v62[(char *)v31 - (char *)v32 - 4 - v69] > &v62[(char *)v31 - (char *)v32 - 4])
            || (float *)((char *)v31 - v69 - 4) > v31 - 1
            || (unint64_t)((char *)v32 - v62) < 0x20)
          {
            v67 = v31;
            v5 = a3;
          }
          else
          {
            v70 = (v66 >> 2) + 1;
            v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
            v67 = &v31[v71 / 0xFFFFFFFFFFFFFFFCLL];
            v63 = (float *)((char *)v63 - v71);
            v72 = &v62[4 * v59 - 16];
            v73 = v31 - 4;
            v74 = v70 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v75 = *(_OWORD *)v73;
              *(v72 - 1) = *((_OWORD *)v73 - 1);
              *v72 = v75;
              v72 -= 2;
              v73 -= 8;
              v74 -= 8;
            }
            while (v74);
            v5 = a3;
            if (v70 == (v70 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_98:
              v57 = (float *)&v62[4 * v61];
              if (!v32)
                goto LABEL_100;
LABEL_99:
              operator delete(v32);
              v11 = v89;
              goto LABEL_100;
            }
          }
          do
          {
            v68 = *((_DWORD *)v67-- - 1);
            *((_DWORD *)v63-- - 1) = v68;
          }
          while (v67 != v32);
          goto LABEL_98;
        }
      }
      else
      {
        v62 = 0;
        v63 = (float *)(4 * v59);
        *(_DWORD *)(4 * v59) = 0;
        v64 = 4 * v59 + 4;
        v65 = (char *)v31 - (char *)v32;
        if (v31 != v32)
          goto LABEL_95;
      }
      v5 = a3;
      v57 = (float *)&v62[4 * v61];
      if (v32)
        goto LABEL_99;
LABEL_100:
      v32 = v63;
      v31 = (float *)v64;
      v58 += 16;
    }
    while (v58 != v12);
LABEL_80:
    v94 += 16;
    if (v94 != v87)
      continue;
    break;
  }
  v4 = v86;
  if (!v86)
    goto LABEL_37;
LABEL_118:
  v39 = 0.0;
  if (v4 == 1)
  {
    if (v32 == v31)
    {
      v77 = 0.0;
    }
    else
    {
      v76 = (char *)v31 - (char *)v32 - 4;
      v77 = 0.0;
      v78 = v32;
      if (v76 < 4)
        goto LABEL_143;
      v79 = (v76 >> 2) + 1;
      v78 = &v32[v79 & 0x7FFFFFFFFFFFFFFELL];
      v80 = v32 + 1;
      v81 = v79 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v77 = (float)(v77 + *(v80 - 1)) + *v80;
        v80 += 2;
        v81 -= 2;
      }
      while (v81);
      if (v79 != (v79 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_143:
        do
        {
          v82 = *v78++;
          v77 = v77 + v82;
        }
        while (v78 != v31);
      }
    }
    v39 = v77 / (float)(unint64_t)(v31 - v32);
  }
LABEL_128:
  if (v32)
  {
    v83 = v32;
    v84 = v11;
    operator delete(v83);
    v11 = v84;
  }
  if (v11)
    operator delete(v11);
  if (v8)
    operator delete(v8);
  return v39;
}

void sub_1BE678AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  void *v25;

  if (__p)
  {
    operator delete(__p);
    v25 = a22;
    if (!a22)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void CHFastGroupingCluster::mergeCluster(CHFastGroupingCluster *this, const CHFastGroupingCluster *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD **v15;
  _QWORD *v16[2];

  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  sub_1BE67ACCC(&v15, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  v3 = v15;
  if (v15 != v16)
  {
    do
    {
      v4 = (_BYTE *)v3[5];
      v11 = v3[4];
      v13 = 0;
      v14 = 0;
      v12 = 0;
      v5 = (_BYTE *)v3[6];
      v6 = v5 - v4;
      if (v5 == v4)
      {
        v7 = 0;
      }
      else
      {
        if (v6 < 0)
          sub_1BE61F930();
        v7 = (char *)operator new(v5 - v4);
        v12 = v7;
        v14 = &v7[16 * (v6 >> 4)];
        memcpy(v7, v4, v6);
        v13 = &v7[16 * (v6 >> 4)];
      }
      sub_1BE678038((uint64_t **)this, &v11);
      if (v7)
        operator delete(v7);
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v3[2];
          v10 = *v9 == v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v16);
  }
  sub_1BE67AC7C((uint64_t)&v15, v16[0]);
}

void sub_1BE678CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_1BE67AC7C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1BE678CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_1BE67AC7C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1BE678CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  if (__p)
    operator delete(__p);
  sub_1BE67AC7C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t CHFastGroupingCluster::containsStrokeIndex(CHFastGroupingCluster *this, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v2)
    return 0;
  while (1)
  {
    v4 = v2[4];
    if (v4 <= a2)
      break;
LABEL_3:
    v2 = (_QWORD *)*v2;
    if (!v2)
      return 0;
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

uint64_t CHFastGroupingCluster::getStrokeIndexes(CHFastGroupingCluster *this)
{
  return (uint64_t)this + 40;
}

void CHFastGroupingCluster::explode(CHFastGroupingCluster *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26[3];
  _QWORD **v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (char *)this + 8;
  v3 = *(char **)this;
  if (*(CHFastGroupingCluster **)this != (CHFastGroupingCluster *)((char *)this + 8))
  {
    do
    {
      v5 = *((_QWORD *)v3 + 4);
      v6 = (_BYTE *)*((_QWORD *)v3 + 5);
      v30 = v5;
      v32 = 0;
      v33 = 0;
      v31 = 0;
      v7 = (_BYTE *)*((_QWORD *)v3 + 6);
      v8 = v7 - v6;
      if (v7 == v6)
      {
        v10 = 0;
        v9 = 0;
      }
      else
      {
        if (v8 < 0)
          sub_1BE61F930();
        v9 = (char *)operator new(v7 - v6);
        v10 = &v9[16 * (v8 >> 4)];
        v31 = v9;
        v33 = v10;
        memcpy(v9, v6, v8);
        v32 = v10;
      }
      v28 = 0;
      v29 = 0;
      v27 = &v28;
      v11 = operator new(0x40uLL);
      v21 = v11;
      v22 = &v28;
      v23 = 0;
      v11[4] = v5;
      v11[5] = 0;
      v11[6] = 0;
      v11[7] = 0;
      v12 = v10 - v9;
      if (v10 != v9)
      {
        if (v12 < 0)
          sub_1BE61F930();
        v13 = (char *)operator new(v10 - v9);
        v11[5] = v13;
        v14 = &v13[16 * (v12 >> 4)];
        v11[7] = v14;
        memcpy(v13, v9, v10 - v9);
        v11[6] = v14;
      }
      *v11 = 0;
      v11[1] = 0;
      v11[2] = &v28;
      v27 = (_QWORD **)v11;
      v28 = v11;
      *((_BYTE *)v11 + 24) = 1;
      v29 = 1;
      sub_1BE677C14((uint64_t)&v21, &v27);
      v15 = *(_QWORD *)(a2 + 8);
      if (v15 >= *(_QWORD *)(a2 + 16))
      {
        v17 = sub_1BE67AEEC((void **)a2, (uint64_t)&v21);
      }
      else
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)v15 = v15 + 8;
        sub_1BE67ACCC((_QWORD *)v15, v21, &v22);
        v16 = v24;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 40) = v15 + 48;
        *(_OWORD *)(v15 + 24) = v16;
        *(_QWORD *)(v15 + 56) = 0;
        sub_1BE66AAE8((_QWORD *)(v15 + 40), v25, v26);
        *(_QWORD **)(v15 + 64) = v26[2];
        v17 = (char *)(v15 + 72);
        *(_QWORD *)(a2 + 8) = v15 + 72;
      }
      *(_QWORD *)(a2 + 8) = v17;
      v18 = (char *)*((_QWORD *)v3 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)*((_QWORD *)v3 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v3;
          v3 = v19;
        }
        while (!v20);
      }
      sub_1BE62033C((uint64_t)&v25, v26[0]);
      sub_1BE67AC7C((uint64_t)&v21, v22);
      sub_1BE67AC7C((uint64_t)&v27, v28);
      if (v9)
        operator delete(v9);
      v3 = v19;
    }
    while (v19 != v2);
  }
}

void sub_1BE678FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;
  void *v25;
  uint64_t v26;

  sub_1BE67AC7C(v26, *(_QWORD **)(v26 + 8));
  *(_QWORD *)(v24 + 8) = v26;
  sub_1BE679090((uint64_t)&a14);
  sub_1BE67AC7C((uint64_t)&a23, a24);
  if (v25)
    operator delete(v25);
  sub_1BE6790C8((void **)v24);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE679090(uint64_t a1)
{
  sub_1BE62033C(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_1BE67AC7C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void **sub_1BE6790C8(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 32;
      do
      {
        v6 = v5 - 40;
        sub_1BE62033C(v5, *(_QWORD **)(v5 + 8));
        sub_1BE67AC7C(v5 - 40, *(_QWORD **)(v5 - 32));
        v5 -= 72;
      }
      while ((void *)v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

CHFastGroupingCluster *CHFastGroupingCluster::findRoot(CHFastGroupingCluster *this)
{
  CHFastGroupingCluster *v1;

  do
  {
    v1 = this;
    this = (CHFastGroupingCluster *)*((_QWORD *)this + 8);
  }
  while (this);
  return v1;
}

uint64_t *CHFastGroupingCluster::unionWithCluster(CHFastGroupingCluster *this, CHFastGroupingCluster *a2)
{
  *((_QWORD *)a2 + 8) = this;
  return sub_1BE677ED0((uint64_t *)this, (_QWORD *)a2 + 5);
}

BOOL CHFastGroupingCluster::isRoot(CHFastGroupingCluster *this)
{
  return *((_QWORD *)this + 8) == 0;
}

uint64_t **sub_1BE679170(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void **v24;
  __int128 v27;
  _QWORD *v28[2];
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31[2];
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char v35;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  a1[3] = 0;
  v24 = (void **)(a1 + 3);
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v6 = 0;
    do
    {
      v28[0] = 0;
      v28[1] = 0;
      *(_QWORD *)&v27 = v6;
      *((_QWORD *)&v27 + 1) = v28;
      sub_1BE67ACCC((_QWORD *)&v27 + 1, *(_QWORD **)(v5 + 72 * v6), (_QWORD *)(v5 + 72 * v6 + 8));
      v7 = v5 + 72 * v6;
      v29 = *(_OWORD *)(v7 + 24);
      v31[0] = 0;
      v31[1] = 0;
      v30 = v31;
      sub_1BE66AAE8(&v30, *(_QWORD **)(v7 + 40), (_QWORD *)(v7 + 48));
      v32 = *(_QWORD *)(v5 + 72 * v6 + 64);
      v8 = (_QWORD *)*v4;
      v9 = v4;
      v10 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            v10 = v8;
            v11 = v8[4];
            if ((unint64_t)v27 >= v11)
              break;
            v8 = (_QWORD *)*v10;
            v9 = v10;
            if (!*v10)
              goto LABEL_12;
          }
          if (v11 >= (unint64_t)v27)
            break;
          v8 = (_QWORD *)v10[1];
          if (!v8)
          {
            v9 = v10 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v12 = operator new(0x70uLL);
        v33 = v12;
        v34 = v4;
        v35 = 0;
        v13 = (_QWORD *)*((_QWORD *)&v27 + 1);
        v12[4] = v27;
        v12[6] = 0;
        v12[5] = v12 + 6;
        v12[7] = 0;
        sub_1BE67ACCC(v12 + 5, v13, v28);
        v12[11] = 0;
        *((_OWORD *)v12 + 4) = v29;
        v12[12] = 0;
        v12[10] = v12 + 11;
        sub_1BE66AAE8(v12 + 10, v30, v31);
        v12[13] = v32;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v10;
        *v9 = v12;
        v14 = (uint64_t *)**a1;
        if (v14)
        {
          *a1 = v14;
          v12 = (_QWORD *)*v9;
        }
        sub_1BE61F5C0(a1[1], v12);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      sub_1BE62033C((uint64_t)&v30, v31[0]);
      sub_1BE67AC7C((uint64_t)&v27 + 8, v28[0]);
      ++v6;
      v5 = *a2;
    }
    while (v6 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  }
  *((_DWORD *)a1 + 12) = a3;
  *((_DWORD *)a1 + 13) = a4;
  CHFastGroupingClusters::computeDistanceMatrix(a1, (char **)&v27);
  v15 = (uint64_t *)*v24;
  if (*v24)
  {
    v16 = a1[4];
    v17 = *v24;
    if (v16 != v15)
    {
      v18 = a1[4];
      do
      {
        v20 = (void *)*(v18 - 3);
        v18 -= 3;
        v19 = v20;
        if (v20)
        {
          *(v16 - 2) = (uint64_t)v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *v24;
    }
    a1[4] = v15;
    operator delete(v17);
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
  }
  *(_OWORD *)(a1 + 3) = v27;
  a1[5] = v28[0];
  return a1;
}

void sub_1BE679458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v16;
  void *v17;

  v16 = *(void **)(a15 + 80);
  if (v16)
  {
    *(_QWORD *)(a15 + 88) = v16;
    operator delete(v16);
  }
  v17 = *a10;
  if (*a10)
  {
    *(_QWORD *)(a15 + 64) = v17;
    operator delete(v17);
  }
  sub_1BE63CEBC(a12);
  sub_1BE67B218(a15, *(_QWORD **)(a15 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1BE679508(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  sub_1BE62033C(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_1BE67AC7C(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

void CHFastGroupingClusters::computeDistanceMatrix(uint64_t **this@<X0>, char **a2@<X8>)
{
  char **v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t **v17;
  float v18;
  char *v19;
  float *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  float DistanceToCluster;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  int64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  int64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  void *v88;
  void *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  char *v99;
  char *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  char *v104;
  char **v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char **v109;
  float *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  __int128 v114;
  _QWORD *v115;

  v2 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = this + 7;
  this[8] = this[7];
  v106 = this + 10;
  this[11] = this[10];
  v4 = (unint64_t)this[2];
  LODWORD(v112) = 2139095039;
  if (!v4)
    return;
  sub_1BE67B2D4((uint64_t)(this + 7), v4, (const float *)&v112);
  v6 = (unint64_t)this[2];
  v7 = this[10];
  v8 = this[11];
  v112 = -1;
  v9 = v8 - v7;
  if (v6 <= v9)
  {
    if (v6 < v9)
      this[11] = &v7[v6];
  }
  else
  {
    sub_1BE67B534((uint64_t)v106, v6 - v9, &v112);
    v6 = (unint64_t)this[2];
  }
  v109 = v2;
  if (v6 >= 2)
  {
    v16 = 0;
    v17 = this + 1;
    v103 = v2 + 2;
    v18 = 3.4028e38;
    v107 = -1;
    v108 = -1;
    while (1)
    {
      if (v6 >> 62)
        sub_1BE61F930();
      v20 = (float *)operator new(4 * v6);
      v110 = v20;
      memset_pattern16(v20, &unk_1BE8D5C00, 4 * v6);
      v111 = (char *)&v20[v6];
      if (v16)
      {
        v21 = 0;
        v22 = -1;
        v23 = 3.4028e38;
        while (1)
        {
          v24 = *v17;
          v25 = this + 1;
          v26 = this + 1;
          if (*v17)
          {
            v27 = *v17;
            while (1)
            {
              while (1)
              {
                v26 = (uint64_t **)v27;
                v28 = v27[4];
                if (v16 >= v28)
                  break;
                v27 = *v26;
                v25 = v26;
                if (!*v26)
                  goto LABEL_26;
              }
              if (v28 >= v16)
                break;
              v27 = v26[1];
              if (!v27)
              {
                v25 = v26 + 1;
                goto LABEL_26;
              }
            }
            v29 = v26;
            v44 = this + 1;
            v45 = (uint64_t *)(this + 1);
            if (v24)
              goto LABEL_55;
          }
          else
          {
LABEL_26:
            v29 = operator new(0x70uLL);
            v29[12] = 0;
            v29[13] = 0;
            v29[11] = 0;
            v29[10] = v29 + 11;
            v29[6] = 0;
            v29[7] = 0;
            v29[4] = v16;
            v29[5] = v29 + 6;
            *((_OWORD *)v29 + 4) = *MEMORY[0x1E0C9D538];
            *v29 = 0;
            v29[1] = 0;
            v29[2] = v26;
            *v25 = v29;
            v30 = (uint64_t *)**this;
            v31 = v29;
            if (v30)
            {
              *this = v30;
              v31 = *v25;
            }
            v32 = *v17;
            v33 = v31 == *v17;
            *((_BYTE *)v31 + 24) = v33;
            if (!v33)
            {
              do
              {
                v34 = v31[2];
                if (*(_BYTE *)(v34 + 24))
                  break;
                v35 = *(uint64_t **)(v34 + 16);
                v36 = *v35;
                if (*v35 == v34)
                {
                  v39 = v35[1];
                  if (!v39 || (v40 = *(unsigned __int8 *)(v39 + 24), v37 = (_BYTE *)(v39 + 24), v40))
                  {
                    if (*(uint64_t **)v34 == v31)
                    {
                      *(_BYTE *)(v34 + 24) = 1;
                      *((_BYTE *)v35 + 24) = 0;
                      v43 = *(_QWORD *)(v34 + 8);
                      *v35 = v43;
                      if (v43)
                        goto LABEL_43;
                    }
                    else
                    {
                      v41 = *(uint64_t **)(v34 + 8);
                      v42 = *v41;
                      *(_QWORD *)(v34 + 8) = *v41;
                      if (v42)
                      {
                        *(_QWORD *)(v42 + 16) = v34;
                        v35 = *(uint64_t **)(v34 + 16);
                      }
                      v41[2] = (uint64_t)v35;
                      *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v41;
                      *v41 = v34;
                      *(_QWORD *)(v34 + 16) = v41;
                      v35 = (uint64_t *)v41[2];
                      v34 = *v35;
                      *((_BYTE *)v41 + 24) = 1;
                      *((_BYTE *)v35 + 24) = 0;
                      v43 = *(_QWORD *)(v34 + 8);
                      *v35 = v43;
                      if (v43)
LABEL_43:
                        *(_QWORD *)(v43 + 16) = v35;
                    }
                    *(_QWORD *)(v34 + 16) = v35[2];
                    *(_QWORD *)(v35[2] + 8 * (*(_QWORD *)v35[2] != (_QWORD)v35)) = v34;
                    *(_QWORD *)(v34 + 8) = v35;
LABEL_51:
                    v35[2] = v34;
                    break;
                  }
                }
                else if (!v36 || (v38 = *(unsigned __int8 *)(v36 + 24), v37 = (_BYTE *)(v36 + 24), v38))
                {
                  if (*(uint64_t **)v34 == v31)
                  {
                    v64 = v31[1];
                    *(_QWORD *)v34 = v64;
                    if (v64)
                    {
                      *(_QWORD *)(v64 + 16) = v34;
                      v35 = *(uint64_t **)(v34 + 16);
                    }
                    v31[2] = (uint64_t)v35;
                    *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v31;
                    v31[1] = v34;
                    *(_QWORD *)(v34 + 16) = v31;
                    v35 = (uint64_t *)v31[2];
                    *((_BYTE *)v31 + 24) = 1;
                    *((_BYTE *)v35 + 24) = 0;
                    v34 = v35[1];
                    v46 = *(uint64_t **)v34;
                    v35[1] = *(_QWORD *)v34;
                    if (v46)
LABEL_49:
                      v46[2] = (uint64_t)v35;
                  }
                  else
                  {
                    *(_BYTE *)(v34 + 24) = 1;
                    *((_BYTE *)v35 + 24) = 0;
                    v34 = v35[1];
                    v46 = *(uint64_t **)v34;
                    v35[1] = *(_QWORD *)v34;
                    if (v46)
                      goto LABEL_49;
                  }
                  *(_QWORD *)(v34 + 16) = v35[2];
                  *(_QWORD *)(v35[2] + 8 * (*(_QWORD *)v35[2] != (_QWORD)v35)) = v34;
                  *(_QWORD *)v34 = v35;
                  goto LABEL_51;
                }
                *(_BYTE *)(v34 + 24) = 1;
                v31 = v35;
                *((_BYTE *)v35 + 24) = v35 == v32;
                *v37 = 1;
              }
              while (v35 != v32);
            }
            v24 = this[1];
            this[2] = (uint64_t *)((char *)this[2] + 1);
            v44 = this + 1;
            v45 = (uint64_t *)(this + 1);
            if (v24)
            {
              while (1)
              {
LABEL_55:
                while (1)
                {
                  v45 = v24;
                  v47 = v24[4];
                  if (v21 >= v47)
                    break;
                  v24 = (uint64_t *)*v45;
                  v44 = (uint64_t **)v45;
                  if (!*v45)
                    goto LABEL_59;
                }
                if (v47 >= v21)
                  break;
                v24 = (uint64_t *)v45[1];
                if (!v24)
                {
                  v44 = (uint64_t **)(v45 + 1);
                  goto LABEL_59;
                }
              }
              v48 = v45;
              goto LABEL_85;
            }
          }
LABEL_59:
          v48 = operator new(0x70uLL);
          v48[12] = 0;
          v48[13] = 0;
          v48[11] = 0;
          v48[10] = v48 + 11;
          v48[6] = 0;
          v48[7] = 0;
          v48[4] = v21;
          v48[5] = v48 + 6;
          *((_OWORD *)v48 + 4) = *MEMORY[0x1E0C9D538];
          *v48 = 0;
          v48[1] = 0;
          v48[2] = v45;
          *v44 = v48;
          v49 = (uint64_t *)**this;
          v50 = v48;
          if (v49)
          {
            *this = v49;
            v50 = *v44;
          }
          v51 = *v17;
          v33 = v50 == *v17;
          *((_BYTE *)v50 + 24) = v33;
          if (!v33)
          {
            do
            {
              v52 = v50[2];
              if (*(_BYTE *)(v52 + 24))
                break;
              v53 = *(uint64_t **)(v52 + 16);
              v54 = *v53;
              if (*v53 == v52)
              {
                v57 = v53[1];
                if (!v57 || (v58 = *(unsigned __int8 *)(v57 + 24), v55 = (_BYTE *)(v57 + 24), v58))
                {
                  if (*(uint64_t **)v52 == v50)
                  {
                    *(_BYTE *)(v52 + 24) = 1;
                    *((_BYTE *)v53 + 24) = 0;
                    v61 = *(_QWORD *)(v52 + 8);
                    *v53 = v61;
                    if (v61)
                      goto LABEL_76;
                  }
                  else
                  {
                    v59 = *(uint64_t **)(v52 + 8);
                    v60 = *v59;
                    *(_QWORD *)(v52 + 8) = *v59;
                    if (v60)
                    {
                      *(_QWORD *)(v60 + 16) = v52;
                      v53 = *(uint64_t **)(v52 + 16);
                    }
                    v59[2] = (uint64_t)v53;
                    *(_QWORD *)(*(_QWORD *)(v52 + 16) + 8 * (**(_QWORD **)(v52 + 16) != v52)) = v59;
                    *v59 = v52;
                    *(_QWORD *)(v52 + 16) = v59;
                    v53 = (uint64_t *)v59[2];
                    v52 = *v53;
                    *((_BYTE *)v59 + 24) = 1;
                    *((_BYTE *)v53 + 24) = 0;
                    v61 = *(_QWORD *)(v52 + 8);
                    *v53 = v61;
                    if (v61)
LABEL_76:
                      *(_QWORD *)(v61 + 16) = v53;
                  }
                  *(_QWORD *)(v52 + 16) = v53[2];
                  *(_QWORD *)(v53[2] + 8 * (*(_QWORD *)v53[2] != (_QWORD)v53)) = v52;
                  *(_QWORD *)(v52 + 8) = v53;
LABEL_83:
                  v53[2] = v52;
                  break;
                }
              }
              else if (!v54 || (v56 = *(unsigned __int8 *)(v54 + 24), v55 = (_BYTE *)(v54 + 24), v56))
              {
                if (*(uint64_t **)v52 == v50)
                {
                  v65 = v50[1];
                  *(_QWORD *)v52 = v65;
                  if (v65)
                  {
                    *(_QWORD *)(v65 + 16) = v52;
                    v53 = *(uint64_t **)(v52 + 16);
                  }
                  v50[2] = (uint64_t)v53;
                  *(_QWORD *)(*(_QWORD *)(v52 + 16) + 8 * (**(_QWORD **)(v52 + 16) != v52)) = v50;
                  v50[1] = v52;
                  *(_QWORD *)(v52 + 16) = v50;
                  v53 = (uint64_t *)v50[2];
                  *((_BYTE *)v50 + 24) = 1;
                  *((_BYTE *)v53 + 24) = 0;
                  v52 = v53[1];
                  v62 = *(uint64_t **)v52;
                  v53[1] = *(_QWORD *)v52;
                  if (v62)
LABEL_81:
                    v62[2] = (uint64_t)v53;
                }
                else
                {
                  *(_BYTE *)(v52 + 24) = 1;
                  *((_BYTE *)v53 + 24) = 0;
                  v52 = v53[1];
                  v62 = *(uint64_t **)v52;
                  v53[1] = *(_QWORD *)v52;
                  if (v62)
                    goto LABEL_81;
                }
                *(_QWORD *)(v52 + 16) = v53[2];
                *(_QWORD *)(v53[2] + 8 * (*(_QWORD *)v53[2] != (_QWORD)v53)) = v52;
                *(_QWORD *)v52 = v53;
                goto LABEL_83;
              }
              *(_BYTE *)(v52 + 24) = 1;
              v50 = v53;
              *((_BYTE *)v53 + 24) = v53 == v51;
              *v55 = 1;
            }
            while (v53 != v51);
          }
          this[2] = (uint64_t *)((char *)this[2] + 1);
LABEL_85:
          DistanceToCluster = CHFastGroupingCluster::getDistanceToCluster(v29 + 5, v48 + 5, *((_DWORD *)this + 12), *((_DWORD *)this + 13));
          v20 = v110;
          v110[v21] = DistanceToCluster;
          if (DistanceToCluster < v23)
          {
            if (DistanceToCluster < v18)
            {
              v107 = v21;
              v108 = v16;
              v18 = DistanceToCluster;
            }
            v23 = DistanceToCluster;
            v22 = v21;
          }
          if (++v21 == v16)
            goto LABEL_102;
        }
      }
      v22 = -1;
      v23 = 3.4028e38;
LABEL_102:
      *(float *)(*v3 + 4 * v16) = v23;
      *(_QWORD *)(*v106 + 8 * v16) = v22;
      v67 = v109[1];
      v66 = (unint64_t)v109[2];
      if ((unint64_t)v67 >= v66)
      {
        v70 = *v109;
        v71 = 0xAAAAAAAAAAAAAAABLL * ((v67 - *v109) >> 3);
        v72 = v71 + 1;
        if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F930();
        v73 = v111;
        v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)v70) >> 3);
        if (2 * v74 > v72)
          v72 = 2 * v74;
        if (v74 >= 0x555555555555555)
          v75 = 0xAAAAAAAAAAAAAAALL;
        else
          v75 = v72;
        v115 = v103;
        if (v75)
        {
          if (v75 > 0xAAAAAAAAAAAAAAALL)
            sub_1BE61F100();
          v76 = (char *)operator new(24 * v75);
          v73 = v111;
        }
        else
        {
          v76 = 0;
        }
        v112 = (uint64_t)v76;
        v113 = &v76[24 * v71];
        v78 = v113;
        *((_QWORD *)v113 + 1) = 0;
        v104 = &v76[24 * v75];
        v105 = (char **)(v78 + 8);
        *(_QWORD *)&v114 = &v76[24 * v71];
        *((_QWORD *)&v114 + 1) = v104;
        v77 = (char *)v114;
        *(_QWORD *)(v114 + 16) = 0;
        *(_QWORD *)v77 = 0;
        v79 = v73 - (char *)v20;
        if (v73 != (char *)v20)
        {
          if (v79 < 0)
            sub_1BE61F930();
          v80 = (char *)operator new(v73 - (char *)v20);
          *(_QWORD *)v77 = v80;
          *((_QWORD *)v77 + 2) = &v80[4 * (v79 >> 2)];
          v81 = &v80[4 * (v79 >> 2)];
          memcpy(v80, v20, v79);
          *v105 = v81;
        }
        v82 = v77 + 24;
        *(_QWORD *)&v114 = v77 + 24;
        if (v67 == v70)
        {
          *v109 = v77;
          v109[1] = v82;
          v109[2] = v104;
        }
        else
        {
          do
          {
            v83 = v77;
            *((_QWORD *)v77 - 2) = 0;
            *((_QWORD *)v77 - 1) = 0;
            v84 = *(_OWORD *)(v67 - 24);
            v67 -= 24;
            *(_OWORD *)(v77 - 24) = v84;
            v77 -= 24;
            *((_QWORD *)v83 - 1) = *((_QWORD *)v67 + 2);
            *(_QWORD *)v67 = 0;
            *((_QWORD *)v67 + 1) = 0;
            *((_QWORD *)v67 + 2) = 0;
          }
          while (v67 != v70);
          v67 = *v109;
          v85 = v109[1];
          *v109 = v77;
          v86 = (char *)v114;
          *(_OWORD *)(v109 + 1) = v114;
          v82 = v86;
          if (v85 != v67)
          {
            v87 = v85;
            do
            {
              v89 = (void *)*((_QWORD *)v87 - 3);
              v87 -= 24;
              v88 = v89;
              if (v89)
              {
                *((_QWORD *)v85 - 2) = v88;
                operator delete(v88);
              }
              v85 = v87;
            }
            while (v87 != v67);
          }
        }
        if (v67)
          operator delete(v67);
        v20 = v110;
        v109[1] = v82;
        if (!v110)
          goto LABEL_13;
      }
      else
      {
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
        *((_QWORD *)v67 + 2) = 0;
        v68 = v111 - (char *)v20;
        if (v111 != (char *)v20)
        {
          if (v68 < 0)
            sub_1BE61F930();
          v69 = (char *)operator new(v111 - (char *)v20);
          *(_QWORD *)v67 = v69;
          *((_QWORD *)v67 + 1) = v69;
          v19 = &v69[4 * (v68 >> 2)];
          *((_QWORD *)v67 + 2) = v19;
          memcpy(v69, v20, v68);
          *((_QWORD *)v67 + 1) = v19;
        }
        v109[1] = v67 + 24;
      }
      operator delete(v20);
LABEL_13:
      ++v16;
      v6 = (unint64_t)this[2];
      if (v16 >= v6)
      {
        this[13] = (uint64_t *)v108;
        this[14] = (uint64_t *)v107;
        *((float *)this + 30) = v18;
        return;
      }
    }
  }
  if (v6)
  {
    v10 = operator new(4uLL);
    v11 = v10;
    *v10 = 0;
    v12 = (unint64_t)(v10 + 1);
    v14 = v2[1];
    v13 = (unint64_t)v2[2];
    if ((unint64_t)v14 >= v13)
    {
      v90 = *v2;
      v91 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *v2) >> 3);
      v92 = v91 + 1;
      if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F930();
      v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v90) >> 3);
      if (2 * v93 > v92)
        v92 = 2 * v93;
      if (v93 >= 0x555555555555555)
        v94 = 0xAAAAAAAAAAAAAAALL;
      else
        v94 = v92;
      if (v94 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F100();
      v95 = (char *)operator new(24 * v94);
      v96 = &v95[24 * v91];
      v97 = &v95[24 * v94];
      *((_QWORD *)v96 + 1) = 0;
      *((_QWORD *)v96 + 2) = 0;
      *(_QWORD *)v96 = v11;
      *(int64x2_t *)(v96 + 8) = vdupq_n_s64(v12);
      v15 = v96 + 24;
      if (v14 == v90)
      {
        v2 = v109;
        *v109 = v96;
        v109[1] = v15;
        v109[2] = v97;
      }
      else
      {
        v2 = v109;
        do
        {
          v98 = *(_OWORD *)(v14 - 24);
          v14 -= 24;
          *(_OWORD *)(v96 - 24) = v98;
          v96 -= 24;
          *((_QWORD *)v96 + 2) = *((_QWORD *)v14 + 2);
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = 0;
        }
        while (v14 != v90);
        v14 = *v109;
        v99 = v109[1];
        *v109 = v96;
        v109[1] = v15;
        v109[2] = v97;
        if (v99 != v14)
        {
          v100 = v99;
          do
          {
            v102 = (void *)*((_QWORD *)v100 - 3);
            v100 -= 24;
            v101 = v102;
            if (v102)
            {
              *((_QWORD *)v99 - 2) = v101;
              operator delete(v101);
            }
            v99 = v100;
          }
          while (v100 != v14);
        }
      }
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = v10;
      *((_QWORD *)v14 + 1) = v12;
      v15 = v14 + 24;
      *((_QWORD *)v14 + 2) = v12;
    }
    v2[1] = v15;
    this[13] = 0;
    this[14] = 0;
    *((_DWORD *)this + 30) = 0;
    *this[10] = 0;
    *(_DWORD *)this[7] = 0;
  }
}

void sub_1BE679FF4(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE67A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  operator delete(v16);
  sub_1BE63CEBC(a16);
  _Unwind_Resume(a1);
}

void sub_1BE67A028(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE67A03C(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE67A050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  void **v20;
  void *v22;

  v22 = *v20;
  if (*v20)
  {
    *a11 = v22;
    operator delete(v22);
  }
  sub_1BE63E4E4((uint64_t)&a20);
  if (__p)
    operator delete(__p);
  sub_1BE63CEBC(a16);
  _Unwind_Resume(a1);
}

uint64_t CHFastGroupingClusters::getClosestClusterIndexes(CHFastGroupingClusters *this)
{
  return *((_QWORD *)this + 13);
}

float CHFastGroupingClusters::getClosestClusterDistance(CHFastGroupingClusters *this)
{
  return *((float *)this + 30);
}

uint64_t CHFastGroupingClusters::getClusterCount(CHFastGroupingClusters *this)
{
  return *((_QWORD *)this + 2);
}

void CHFastGroupingClusters::getClusters(CHFastGroupingClusters **this@<X0>, uint64_t a2@<X8>)
{
  CHFastGroupingClusters **v2;
  CHFastGroupingClusters *v3;
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  CHFastGroupingClusters *v9;
  CHFastGroupingClusters **v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13[2];
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16[2];
  uint64_t v17;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (CHFastGroupingClusters *)(this + 1))
  {
    do
    {
      v13[0] = 0;
      v13[1] = 0;
      v5 = (_QWORD *)*((_QWORD *)v3 + 5);
      v12 = v13;
      sub_1BE67ACCC(&v12, v5, (_QWORD *)v3 + 6);
      v14 = *((_OWORD *)v3 + 4);
      v16[0] = 0;
      v16[1] = 0;
      v15 = v16;
      sub_1BE66AAE8(&v15, *((_QWORD **)v3 + 10), (_QWORD *)v3 + 11);
      v17 = *((_QWORD *)v3 + 13);
      v6 = *(_QWORD *)(a2 + 8);
      if (v6 >= *(_QWORD *)(a2 + 16))
      {
        v8 = sub_1BE67AEEC((void **)a2, (uint64_t)&v12);
      }
      else
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_QWORD *)v6 = v6 + 8;
        sub_1BE67ACCC((_QWORD *)v6, v12, v13);
        v7 = v14;
        *(_QWORD *)(v6 + 48) = 0;
        *(_QWORD *)(v6 + 40) = v6 + 48;
        *(_OWORD *)(v6 + 24) = v7;
        *(_QWORD *)(v6 + 56) = 0;
        sub_1BE66AAE8((_QWORD *)(v6 + 40), v15, v16);
        *(_QWORD *)(v6 + 64) = v17;
        v8 = (char *)(v6 + 72);
        *(_QWORD *)(a2 + 8) = v6 + 72;
      }
      *(_QWORD *)(a2 + 8) = v8;
      sub_1BE62033C((uint64_t)&v15, v16[0]);
      sub_1BE67AC7C((uint64_t)&v12, v13[0]);
      v9 = (CHFastGroupingClusters *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        do
        {
          v10 = (CHFastGroupingClusters **)v9;
          v9 = *(CHFastGroupingClusters **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (CHFastGroupingClusters **)*((_QWORD *)v3 + 2);
          v11 = *v10 == v3;
          v3 = (CHFastGroupingClusters *)v10;
        }
        while (!v11);
      }
      v3 = (CHFastGroupingClusters *)v10;
    }
    while (v10 != v2);
  }
}

void sub_1BE67A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  sub_1BE679508((uint64_t)va);
  sub_1BE6790C8(v3);
  _Unwind_Resume(a1);
}

void sub_1BE67A324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  void **v18;
  uint64_t v19;

  sub_1BE62033C(v19, a18);
  sub_1BE67AC7C(a10, a13);
  sub_1BE6790C8(v18);
  _Unwind_Resume(a1);
}

float CHFastGroupingClusters::updateClosestClusters(CHFastGroupingClusters *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_QWORD *)this + 2) == 1)
  {
    v1 = *(_QWORD *)(*(_QWORD *)this + 32);
    result = 0.0;
    *((_QWORD *)this + 13) = v1;
    *((_QWORD *)this + 14) = v1;
    *((_DWORD *)this + 30) = 0;
  }
  else
  {
    v3 = *((_QWORD *)this + 7);
    v4 = *((_QWORD *)this + 8) - v3;
    if (v4)
    {
      v5 = 0;
      v6 = v4 >> 2;
      if (v6 <= 1)
        v7 = 1;
      else
        v7 = v6;
      v8 = -1;
      result = 3.4028e38;
      do
      {
        if (*(float *)(v3 + 4 * v5) < result)
        {
          v8 = v5;
          result = *(float *)(v3 + 4 * v5);
        }
        ++v5;
      }
      while (v7 != v5);
      v9 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v8);
      *((_QWORD *)this + 13) = v8;
      *((_QWORD *)this + 14) = v9;
      *((float *)this + 30) = result;
    }
    else
    {
      result = 3.4028e38;
      v10 = *(_QWORD *)(*((_QWORD *)this + 10) - 8);
      *((_QWORD *)this + 13) = -1;
      *((_QWORD *)this + 14) = v10;
      *((_DWORD *)this + 30) = 2139095039;
    }
  }
  return result;
}

void CHFastGroupingClusters::mergeClusters(uint64_t **this, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  CHFastGroupingCluster *v16;
  uint64_t **v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  unint64_t v58;
  BOOL v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t **v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t **v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  float DistanceToCluster;
  float *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  float v83;
  float v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;

  v7 = this + 1;
  v6 = (char *)this[1];
  v8 = (_OWORD *)MEMORY[0x1E0C9D538];
  v9 = this + 1;
  v10 = (char *)(this + 1);
  if (v6)
  {
    v11 = (char *)this[1];
    while (1)
    {
      while (1)
      {
        v10 = v11;
        v12 = *((_QWORD *)v11 + 4);
        if (v12 <= a2)
          break;
        v11 = *(char **)v10;
        v9 = (uint64_t **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_8;
      }
      if (v12 >= a2)
        break;
      v11 = (char *)*((_QWORD *)v10 + 1);
      if (!v11)
      {
        v9 = (uint64_t **)(v10 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v13 = v10;
    v10 = (char *)operator new(0x70uLL);
    *((_QWORD *)v10 + 12) = 0;
    *((_QWORD *)v10 + 13) = 0;
    *((_QWORD *)v10 + 11) = 0;
    *((_QWORD *)v10 + 10) = v10 + 88;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 4) = a2;
    *((_QWORD *)v10 + 5) = v10 + 48;
    *((_OWORD *)v10 + 4) = *v8;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v13;
    *v9 = (uint64_t *)v10;
    v14 = (uint64_t *)**this;
    v15 = (uint64_t *)v10;
    if (v14)
    {
      *this = v14;
      v15 = *v9;
    }
    sub_1BE61F5C0(this[1], v15);
    v6 = (char *)this[1];
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  v16 = (CHFastGroupingCluster *)(v10 + 40);
  v17 = v7;
  v18 = (char *)v7;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v18 = v6;
        v19 = *((_QWORD *)v6 + 4);
        if (v19 <= a3)
          break;
        v6 = *(char **)v18;
        v17 = (uint64_t **)v18;
        if (!*(_QWORD *)v18)
          goto LABEL_18;
      }
      if (v19 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v18 + 1);
      if (!v6)
      {
        v17 = (uint64_t **)(v18 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v20 = v18;
    v18 = (char *)operator new(0x70uLL);
    *((_QWORD *)v18 + 12) = 0;
    *((_QWORD *)v18 + 13) = 0;
    *((_QWORD *)v18 + 11) = 0;
    *((_QWORD *)v18 + 10) = v18 + 88;
    *((_QWORD *)v18 + 6) = 0;
    *((_QWORD *)v18 + 7) = 0;
    *((_QWORD *)v18 + 4) = a3;
    *((_QWORD *)v18 + 5) = v18 + 48;
    *((_OWORD *)v18 + 4) = *v8;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v20;
    *v17 = (uint64_t *)v18;
    v21 = (uint64_t *)**this;
    v22 = (uint64_t *)v18;
    if (v21)
    {
      *this = v21;
      v22 = *v17;
    }
    sub_1BE61F5C0(this[1], v22);
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  CHFastGroupingCluster::mergeCluster(v16, (const CHFastGroupingCluster *)(v18 + 40));
  v23 = *v7;
  if (!*v7)
    goto LABEL_32;
  v24 = v7;
  v25 = *v7;
  do
  {
    v26 = v25[4];
    v27 = v26 >= a3;
    if (v26 >= a3)
      v28 = (uint64_t **)v25;
    else
      v28 = (uint64_t **)(v25 + 1);
    if (v27)
      v24 = (uint64_t **)v25;
    v25 = *v28;
  }
  while (*v28);
  if (v24 == v7 || (unint64_t)v24[4] > a3)
LABEL_32:
    v24 = v7;
  v29 = v24[1];
  if (v29)
  {
    do
    {
      v30 = v29;
      v29 = (uint64_t *)*v29;
    }
    while (v29);
  }
  else
  {
    v31 = v24;
    do
    {
      v30 = v31[2];
      v37 = *v30 == (_QWORD)v31;
      v31 = (uint64_t **)v30;
    }
    while (!v37);
  }
  if (*this == (uint64_t *)v24)
    *this = v30;
  this[2] = (uint64_t *)((char *)this[2] - 1);
  sub_1BE670DF8(v23, (uint64_t *)v24);
  sub_1BE62033C((uint64_t)(v24 + 10), v24[11]);
  sub_1BE67AC7C((uint64_t)(v24 + 5), v24[6]);
  operator delete(v24);
  v97 = 0;
  v98 = 0;
  v96 = &v97;
  v32 = this[7];
  v33 = this[8];
  if (v33 == v32)
  {
    v32 = this[8];
  }
  else
  {
    v34 = 0;
    do
    {
      if (v34 != a2 && v34 != a3)
      {
        v35 = this[10];
        v36 = v35[v34];
        v37 = v36 == a2 || v36 == a3;
        if (v37)
        {
          *((_DWORD *)v32 + v34) = 2139095039;
          v35[v34] = -1;
          v38 = v97;
          v39 = &v97;
          v40 = &v97;
          if (v97)
          {
            while (1)
            {
              while (1)
              {
                v40 = (uint64_t **)v38;
                v41 = v38[4];
                if (v34 >= v41)
                  break;
                v38 = *v40;
                v39 = v40;
                if (!*v40)
                  goto LABEL_59;
              }
              if (v41 >= v34)
                break;
              v38 = v40[1];
              if (!v38)
              {
                v39 = v40 + 1;
                goto LABEL_59;
              }
            }
          }
          else
          {
LABEL_59:
            v42 = (uint64_t *)operator new(0x28uLL);
            v42[4] = v34;
            *v42 = 0;
            v42[1] = 0;
            v42[2] = (uint64_t)v40;
            *v39 = v42;
            if (*v96)
            {
              v96 = (uint64_t **)*v96;
              v42 = *v39;
            }
            sub_1BE61F5C0(v97, v42);
            ++v98;
            v32 = this[7];
            v33 = this[8];
          }
        }
      }
      ++v34;
    }
    while (v34 < ((char *)v33 - (char *)v32) >> 2);
  }
  *((_DWORD *)v32 + a2) = 2139095039;
  v43 = this[10];
  v43[a2] = -1;
  *((_DWORD *)v32 + a3) = 2139095039;
  v43[a3] = -1;
  v44 = this[3];
  v45 = &v44[3 * a2];
  v45[1] = *v45;
  v46 = this[4];
  v95 = 2139095039;
  if (v46 == v44)
  {
    v44[3 * a3 + 1] = v44[3 * a3];
LABEL_112:
    v78 = (uint64_t *)v96;
    if (v96 == &v97)
      goto LABEL_127;
    goto LABEL_115;
  }
  sub_1BE67B2D4((uint64_t)v45, 0xAAAAAAAAAAAAAAABLL * (v46 - v44), (const float *)&v95);
  v44 = this[3];
  v47 = this[4];
  v48 = &v44[3 * a3];
  v48[1] = *v48;
  v95 = 2139095039;
  v49 = (char *)v47 - (char *)v44;
  if (!v49)
    goto LABEL_112;
  sub_1BE67B2D4((uint64_t)v48, 0xAAAAAAAAAAAAAAABLL * (v49 >> 3), (const float *)&v95);
  v44 = this[3];
  v50 = this[4];
  if (v50 != v44)
  {
    v51 = ((char *)v50 - (char *)v44) / 24;
    if (v51 <= 1)
      v51 = 1;
    v52 = this[3];
    do
    {
      v53 = *v52;
      v52 += 3;
      *(_DWORD *)(v53 + 4 * a3) = 2139095039;
      *(_DWORD *)(v53 + 4 * a2) = 2139095039;
      --v51;
    }
    while (v51);
    v54 = 0;
    while (1)
    {
      if (v54 == a2)
        goto LABEL_71;
      v55 = *v7;
      if (!*v7)
        goto LABEL_71;
      v56 = v7;
      v57 = *v7;
      do
      {
        v58 = v57[4];
        v59 = v58 >= v54;
        if (v58 >= v54)
          v60 = (uint64_t **)v57;
        else
          v60 = (uint64_t **)(v57 + 1);
        if (v59)
          v56 = (uint64_t **)v57;
        v57 = *v60;
      }
      while (*v60);
      if (v56 == v7 || v54 < (unint64_t)v56[4])
        goto LABEL_71;
      v61 = *v7;
      do
      {
        while (1)
        {
          v62 = v61;
          v63 = v61[4];
          if (v63 > a2)
            break;
          if (v63 >= a2)
          {
            v65 = v62;
            v68 = v7;
            v69 = v7;
            if (v55)
              goto LABEL_98;
            goto LABEL_102;
          }
          v61 = (uint64_t *)v62[1];
          if (!v61)
          {
            v64 = (uint64_t **)(v62 + 1);
            goto LABEL_91;
          }
        }
        v61 = (uint64_t *)*v62;
      }
      while (*v62);
      v64 = (uint64_t **)v62;
LABEL_91:
      v65 = operator new(0x70uLL);
      v65[12] = 0;
      v65[13] = 0;
      v65[11] = 0;
      v65[10] = v65 + 11;
      v65[6] = 0;
      v65[7] = 0;
      v65[4] = a2;
      v65[5] = v65 + 6;
      *((_OWORD *)v65 + 4) = *MEMORY[0x1E0C9D538];
      *v65 = 0;
      v65[1] = 0;
      v65[2] = v62;
      *v64 = v65;
      v66 = (uint64_t *)**this;
      v67 = v65;
      if (v66)
      {
        *this = v66;
        v67 = *v64;
      }
      sub_1BE61F5C0(this[1], v67);
      v55 = this[1];
      this[2] = (uint64_t *)((char *)this[2] + 1);
      v68 = v7;
      v69 = v7;
      if (!v55)
      {
LABEL_102:
        v71 = operator new(0x70uLL);
        v71[12] = 0;
        v71[13] = 0;
        v71[11] = 0;
        v71[10] = v71 + 11;
        v71[6] = 0;
        v71[7] = 0;
        v71[4] = v54;
        v71[5] = v71 + 6;
        *((_OWORD *)v71 + 4) = *MEMORY[0x1E0C9D538];
        *v71 = 0;
        v71[1] = 0;
        v71[2] = v69;
        *v68 = v71;
        v72 = (uint64_t *)**this;
        v73 = v71;
        if (v72)
        {
          *this = v72;
          v73 = *v68;
        }
        sub_1BE61F5C0(this[1], v73);
        this[2] = (uint64_t *)((char *)this[2] + 1);
        goto LABEL_106;
      }
      while (1)
      {
LABEL_98:
        while (1)
        {
          v69 = (uint64_t **)v55;
          v70 = v55[4];
          if (v54 >= v70)
            break;
          v55 = (uint64_t *)*v55;
          v68 = v69;
          if (!*v69)
            goto LABEL_102;
        }
        if (v70 >= v54)
          break;
        v55 = (uint64_t *)v55[1];
        if (!v55)
        {
          v68 = v69 + 1;
          goto LABEL_102;
        }
      }
      v71 = v55;
LABEL_106:
      DistanceToCluster = CHFastGroupingCluster::getDistanceToCluster(v65 + 5, v71 + 5, *((_DWORD *)this + 12), *((_DWORD *)this + 13));
      v44 = this[3];
      if (v54 >= a2)
      {
        *(float *)(v44[3 * v54] + 4 * a2) = DistanceToCluster;
        v75 = (float *)this[7] + v54;
        v76 = v54;
        v77 = a2;
        if (DistanceToCluster >= *v75)
          goto LABEL_71;
      }
      else
      {
        *(float *)(v44[3 * a2] + 4 * v54) = DistanceToCluster;
        v75 = (float *)this[7] + a2;
        v76 = a2;
        v77 = v54;
        if (DistanceToCluster >= *v75)
          goto LABEL_71;
      }
      *v75 = DistanceToCluster;
      this[10][v76] = v77;
LABEL_71:
      if (++v54 >= 0xAAAAAAAAAAAAAAABLL * (this[4] - v44))
        goto LABEL_112;
    }
  }
  v44 = this[4];
  v78 = (uint64_t *)v96;
  if (v96 != &v97)
  {
    do
    {
LABEL_115:
      v79 = v78[4];
      if (v79)
      {
        v80 = 0;
        v81 = v44[3 * v79];
        v82 = this[7];
        v83 = *((float *)v82 + v79);
        do
        {
          v84 = *(float *)(v81 + 4 * v80);
          if (v84 < v83)
          {
            *((float *)v82 + v79) = v84;
            this[10][v79] = v80;
            v83 = v84;
          }
          ++v80;
        }
        while (v79 != v80);
      }
      v85 = (uint64_t *)v78[1];
      if (v85)
      {
        do
        {
          v86 = (uint64_t **)v85;
          v85 = (uint64_t *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (uint64_t **)v78[2];
          v37 = *v86 == v78;
          v78 = (uint64_t *)v86;
        }
        while (!v37);
      }
      v78 = (uint64_t *)v86;
    }
    while (v86 != &v97);
  }
LABEL_127:
  if (this[2] == (uint64_t *)1)
  {
    v87 = (*this)[4];
    v88 = 0.0;
    v89 = v87;
  }
  else
  {
    v90 = this[7];
    v91 = (char *)this[8] - (char *)v90;
    if (v91)
    {
      v92 = 0;
      v93 = v91 >> 2;
      if (v93 <= 1)
        v94 = 1;
      else
        v94 = v93;
      v87 = -1;
      v88 = 3.4028e38;
      do
      {
        if (*((float *)v90 + v92) < v88)
        {
          v87 = v92;
          v88 = *((float *)v90 + v92);
        }
        ++v92;
      }
      while (v94 != v92);
    }
    else
    {
      v87 = -1;
      v88 = 3.4028e38;
    }
    v89 = this[10][v87];
  }
  this[13] = (uint64_t *)v87;
  this[14] = (uint64_t *)v89;
  *((float *)this + 30) = v88;
  sub_1BE62033C((uint64_t)&v96, v97);
}

void sub_1BE67AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_1BE62033C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_1BE67AC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_1BE62033C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_1BE67AC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_1BE62033C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_1BE67AC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_1BE62033C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_1BE67AC7C(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1BE67AC7C(a1, *a2);
    sub_1BE67AC7C(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *sub_1BE67ACCC(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_1BE66ABF4(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        sub_1BE67ADD4((uint64_t)v7, v6 + 4, (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = v11;
        *v10 = v12;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v12 = *v10;
        }
        result = sub_1BE61F5C0(v7[1], v12);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (_QWORD *)v6[2];
        v15 = *v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

_QWORD *sub_1BE67ADD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (_BYTE *)a2[1];
  result[4] = *a2;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  v8 = (_BYTE *)a2[2];
  v9 = v8 - v7;
  if (v8 != v7)
  {
    v10 = result;
    if (v9 < 0)
      sub_1BE61F930();
    v11 = (char *)operator new(v8 - v7);
    v10[5] = v11;
    v10[6] = v11;
    v12 = &v11[16 * (v9 >> 4)];
    v10[7] = v12;
    result = memcpy(v11, v7, v9);
    v10[6] = v12;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1BE67AE7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_1BE67AEA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE67AEA0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_1BE67AEEC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v27;
  char *v28;

  v3 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    sub_1BE61F930();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      sub_1BE61F100();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v27 = &v7[72 * v3];
  v28 = &v7[72 * v6];
  *((_QWORD *)v27 + 2) = 0;
  *((_QWORD *)v27 + 1) = 0;
  *(_QWORD *)v27 = v27 + 8;
  sub_1BE67ACCC(v27, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v8 = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v27 + 6) = 0;
  *((_QWORD *)v27 + 5) = v27 + 48;
  *(_OWORD *)(v27 + 24) = v8;
  *((_QWORD *)v27 + 7) = 0;
  sub_1BE66AAE8((_QWORD *)v27 + 5, *(_QWORD **)(a2 + 40), (_QWORD *)(a2 + 48));
  *((_QWORD *)v27 + 8) = *(_QWORD *)(a2 + 64);
  v9 = v27 + 72;
  v10 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v27;
    a1[1] = v9;
    a1[2] = v28;
    if (!v11)
      return v27 + 72;
    goto LABEL_24;
  }
  v12 = 0;
  do
  {
    v13 = &v27[v12];
    *((_QWORD *)v13 - 9) = *(_QWORD *)&v11[v12 - 72];
    v14 = &v11[v12 - 64];
    v15 = *(_QWORD *)v14;
    *(_QWORD *)&v27[v12 - 64] = *(_QWORD *)v14;
    v16 = (uint64_t)&v27[v12 - 64];
    v17 = *(_QWORD *)&v11[v12 - 56];
    *((_QWORD *)v13 - 7) = v17;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = v16;
      *(_QWORD *)&v11[v12 - 72] = v14;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)&v11[v12 - 56] = 0;
    }
    else
    {
      *((_QWORD *)v13 - 9) = v16;
    }
    v18 = &v27[v12];
    *((_OWORD *)v18 - 3) = *(_OWORD *)&v11[v12 - 48];
    *((_QWORD *)v18 - 4) = *(_QWORD *)&v11[v12 - 32];
    v19 = &v11[v12 - 24];
    v20 = *(_QWORD *)v19;
    *(_QWORD *)&v27[v12 - 24] = *(_QWORD *)v19;
    v21 = (uint64_t)&v27[v12 - 24];
    v22 = *(_QWORD *)&v11[v12 - 16];
    *((_QWORD *)v18 - 2) = v22;
    if (v22)
    {
      *(_QWORD *)(v20 + 16) = v21;
      *(_QWORD *)&v11[v12 - 32] = v19;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)&v11[v12 - 16] = 0;
    }
    else
    {
      *((_QWORD *)v18 - 4) = v21;
    }
    *(_QWORD *)&v27[v12 - 8] = *(_QWORD *)&v11[v12 - 8];
    v12 -= 72;
  }
  while (&v11[v12] != v10);
  v11 = (char *)*a1;
  v23 = (char *)a1[1];
  *a1 = &v27[v12];
  a1[1] = v9;
  a1[2] = v28;
  if (v23 != v11)
  {
    v24 = (uint64_t)(v23 - 32);
    do
    {
      v25 = (char *)(v24 - 40);
      sub_1BE62033C(v24, *(_QWORD **)(v24 + 8));
      sub_1BE67AC7C(v24 - 40, *(_QWORD **)(v24 - 32));
      v24 -= 72;
    }
    while (v25 != v11);
  }
  if (v11)
LABEL_24:
    operator delete(v11);
  return v27 + 72;
}

void sub_1BE67B178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  va_list va;

  va_start(va, a2);
  sub_1BE62033C(v3, *v4);
  sub_1BE67AC7C(v2, *(_QWORD **)(v2 + 8));
  sub_1BE67B1AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE67B1AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    sub_1BE62033C(i - 32, *(_QWORD **)(i - 24));
    sub_1BE67AC7C(i - 72, *(_QWORD **)(i - 64));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE67B218(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1BE67B218(a1, *a2);
    sub_1BE67B218(a1, a2[1]);
    sub_1BE62033C((uint64_t)(a2 + 10), (_QWORD *)a2[11]);
    sub_1BE67AC7C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_1BE67B274(uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      sub_1BE62033C((uint64_t)(v2 + 10), v2[11]);
      sub_1BE67AC7C((uint64_t)(v2 + 5), v2[6]);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1BE67B2D4(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_1BE61F930();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_1BE61F100();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_1BE67B534(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = (int64x2_t *)(v7 + 16);
      v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = vdupq_lane_s64(*a3, 0);
        v18[-1] = v20;
        *v18 = v20;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_1BE61F930();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1BE61F100();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_1BE67C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE67C6E4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = a2;
  if (__ROR8__(0x8F5C28F5C28F5C29 * a3, 2) <= 0x28F5C28F5C28F5CuLL)
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      if ((*(unsigned int (**)(void))(v15 + 16))())
        *a4 = 1;
    }
  }
  v8 = (void *)objc_opt_class();
  v13 = objc_msgSend_isPointEnumerationSupportedForStroke_(v8, v9, (uint64_t)v7, v10, v11, v12) ^ 1;

  return v13;
}

void sub_1BE67C788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE67C798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE67CAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE67CD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE67CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE67CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE67CEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE67CED4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a3;
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1BE67CF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE67CF70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE67D1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE67D368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE67D44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67D460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE67D470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE67D488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE67D5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67D8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE67D8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE67D908(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1BE67D914(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE67D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE67D9F0(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a2 = 1;
  return result;
}

void sub_1BE67DB40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE67DB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE67DBA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67DDE0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 104), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE67DE24(_QWORD *result, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;

  v4 = *(uint64_t *)(*(_QWORD *)(result[4] + 8) + 24) % result[5];
  v5 = result[7];
  v6 = (double *)(result[6] + 16 * v4);
  *v6 = a2;
  v6[1] = a3;
  *(double *)(v5 + 8 * v4) = a4;
  ++*(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24);
  return result;
}

uint64_t sub_1BE67DE60(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(a1 + 32) + a2) % *(_QWORD *)(a1 + 40);
}

void sub_1BE67DFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1BE67DFDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

_QWORD *sub_1BE67DFEC(_QWORD *result, double a2, double a3)
{
  uint64_t v3;
  float64x2_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result[4] + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    v4.f64[0] = a2;
    v4.f64[1] = a3;
    *(float32x2_t *)&v4.f64[0] = vsub_f32(vcvt_f32_f64(v4), vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)(result[6] + 8) + 48)));
    *(double *)(*(_QWORD *)(result[5] + 8) + 24) = *(double *)(*(_QWORD *)(result[5] + 8) + 24)
                                                     + sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v4.f64[0], *(float32x2_t *)&v4.f64[0])));
  }
  else
  {
    *(_BYTE *)(v3 + 24) = 1;
  }
  v5 = *(_QWORD *)(result[6] + 8);
  *(double *)(v5 + 48) = a2;
  *(double *)(v5 + 56) = a3;
  return result;
}

void sub_1BE67E1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE67E62C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE67E750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE67EA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67EAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE67ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE67EDB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1BE67EE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE67F0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;

  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE67F118(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE67F13C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE67F154(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void sub_1BE67F42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

unint64_t sub_1BE67F46C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if (result)
  {
    v12 = 0;
    while (1)
    {
      v14 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
      objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v9, (uint64_t)a2, v12, v10, v11);
      v21 = v19;
      v22 = v20;
      v24 = (char *)v14[7];
      v23 = v14[8];
      if ((unint64_t)v24 >= v23)
        break;
      *(_QWORD *)v24 = v19;
      *((_QWORD *)v24 + 1) = v20;
      v13 = v24 + 16;
LABEL_4:
      v14[7] = v13;
      ++v12;
      result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17, v18);
      if (v12 >= result)
        return result;
    }
    v25 = (char *)v14[6];
    v26 = (v24 - v25) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      sub_1BE61F930();
    v28 = v23 - (_QWORD)v25;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 60)
        sub_1BE61F100();
      v30 = (char *)operator new(16 * v29);
      v31 = &v30[16 * v26];
      *(_QWORD *)v31 = v21;
      *((_QWORD *)v31 + 1) = v22;
      v32 = (uint64_t)v31;
      if (v24 == v25)
        goto LABEL_19;
    }
    else
    {
      v30 = 0;
      v31 = (char *)(16 * v26);
      *(_QWORD *)v31 = v19;
      *((_QWORD *)v31 + 1) = v20;
      v32 = 16 * v26;
      if (v24 == v25)
      {
LABEL_19:
        v13 = v31 + 16;
        v14[6] = v32;
        v14[7] = v31 + 16;
        v14[8] = &v30[16 * v29];
        if (v24)
          operator delete(v24);
        goto LABEL_4;
      }
    }
    do
    {
      *(_OWORD *)(v32 - 16) = *((_OWORD *)v24 - 1);
      v32 -= 16;
      v24 -= 16;
    }
    while (v24 != v25);
    v24 = (char *)v14[6];
    goto LABEL_19;
  }
  return result;
}

void sub_1BE67FAB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (!*(_QWORD *)v1)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_1BE67FDE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE67FED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE681144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE6812E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  objc_msgSend_scriptClassificationClasses(CHStrokeUtilities, v7, v8, v9, v10, v11, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v34, (uint64_t)v38, 16, v14);
  if (v20)
  {
    v21 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v35 != v21)
          objc_enumerationMutation(v12);
        v23 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        if (objc_msgSend_integerValue(v23, v15, v16, v17, v18, v19) == 8)
          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v24, v25, v26, v27, v28, 1.0);
        else
          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v24, v25, v26, v27, v28, 0.0);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKey_(v6, v30, (uint64_t)v29, (uint64_t)v23, v31, v32);

      }
      v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v15, (uint64_t)&v34, (uint64_t)v38, 16, v19);
    }
    while (v20);
  }

  v33 = (void *)qword_1EF567FB8;
  qword_1EF567FB8 = (uint64_t)v6;

}

void sub_1BE68144C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6815D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6815FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE681610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE681628(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_containsPoint_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a2 = 1;
  }
  return result;
}

double sigmoidFunction(double a1)
{
  return a1 / sqrt(a1 * a1 + 1.0);
}

double sub_1BE68167C(double *a1, double *a2, uint64_t a3, char a4, double result)
{
  double *v9;
  double *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *j;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  __int128 *v44;
  double *v45;
  double *v46;
  double v47;
  __int128 v48;
  __int128 v49;
  double *v50;
  BOOL v52;
  uint64_t v53;
  double *v54;
  double *v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  int64_t v60;
  int64_t v61;
  double *v62;
  int64_t v63;
  uint64_t v64;
  double *v65;
  double v66;
  double *v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v75;
  double *v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double *v85;
  double v86;
  double *v87;
  unint64_t v88;
  double *v89;
  double v90;
  double *v91;
  double v92;
  double v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

double sub_1BE68209C(double *a1, double *a2, __int128 *a3)
{
  __int128 v3;

  *(double *)&v3 = *a2;
  if (*a2 >= *a1 && (*a1 < *(double *)&v3 || a2[1] >= a1[1]))
  {
    if (*(double *)a3 < *(double *)&v3
      || *(double *)&v3 >= *(double *)a3 && (*(_QWORD *)&v3 = *((_QWORD *)a3 + 1), *(double *)&v3 < a2[1]))
    {
      v3 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
      *a3 = v3;
      *(double *)&v3 = *a2;
      if (*a2 < *a1 || *a1 >= *(double *)&v3 && (*(double *)&v3 = a2[1], *(double *)&v3 < a1[1]))
      {
        v3 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v3;
      }
    }
  }
  else
  {
    if (*(double *)a3 < *(double *)&v3 || *(double *)&v3 >= *(double *)a3 && *((double *)a3 + 1) < a2[1])
    {
      v3 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
LABEL_17:
      *a3 = v3;
      return *(double *)&v3;
    }
    v3 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)a3;
    if (*(double *)a3 < *a2 || *a2 >= *(double *)&v3 && (*(_QWORD *)&v3 = *((_QWORD *)a3 + 1), *(double *)&v3 < a2[1]))
    {
      v3 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
      goto LABEL_17;
    }
  }
  return *(double *)&v3;
}

BOOL sub_1BE6821C4(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double *v6;
  double *v7;
  uint64_t v8;
  int v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double *v15;
  double v16;
  __int128 v17;
  double *v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  __int128 v23;
  __int128 v24;
  double v25;
  __int128 v26;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v15 = a2 - 2;
      v16 = *(a2 - 2);
      if (v16 < *a1 || *a1 >= v16 && *(a2 - 1) < a1[1])
      {
        v17 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v15;
        *(_OWORD *)v15 = v17;
      }
      return result;
    case 3:
      sub_1BE68209C(a1, a1 + 2, (__int128 *)a2 - 1);
      return 1;
    case 4:
      v18 = a1 + 2;
      v19 = a1 + 4;
      sub_1BE68209C(a1, a1 + 2, (__int128 *)a1 + 2);
      v20 = a2 - 2;
      v21 = *(a2 - 2);
      v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= a1[5]))
        return 1;
      v23 = *(_OWORD *)v19;
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *(_OWORD *)v20 = v23;
      if (*v19 >= *v18 && (*v18 < *v19 || a1[5] >= a1[3]))
        return 1;
      v24 = *(_OWORD *)v18;
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_OWORD *)v19 = v24;
      v25 = a1[2];
      if (v25 >= *a1 && (*a1 < v25 || a1[3] >= a1[1]))
        return 1;
      v26 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)v18 = v26;
      return 1;
    case 5:
      sub_1BE6824CC(a1, a1 + 2, (uint64_t)(a1 + 4), (uint64_t)(a1 + 6), (_QWORD *)a2 - 2);
      return 1;
    default:
      v6 = a1 + 4;
      sub_1BE68209C(a1, a1 + 2, (__int128 *)a1 + 2);
      v7 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *v7;
    if (*v7 >= *v6)
    {
      if (*v6 < v11)
        goto LABEL_7;
      v12 = v7[1];
      if (v12 >= v6[1])
        goto LABEL_7;
    }
    else
    {
      v12 = v7[1];
    }
    *(_OWORD *)v7 = *(_OWORD *)v6;
    v10 = a1;
    if (v6 == a1)
      goto LABEL_6;
    v13 = v8;
    while (1)
    {
      v14 = *(double *)((char *)a1 + v13 + 16);
      if (v11 < v14)
        goto LABEL_12;
      if (v14 < v11)
        break;
      if (v12 >= *(double *)((char *)a1 + v13 + 24))
      {
        v10 = v6;
        goto LABEL_6;
      }
LABEL_12:
      v6 -= 2;
      *(_OWORD *)((char *)a1 + v13 + 32) = *(_OWORD *)((char *)a1 + v13 + 16);
      v13 -= 16;
      if (v13 == -32)
      {
        v10 = a1;
        goto LABEL_6;
      }
    }
    v10 = (double *)((char *)a1 + v13 + 32);
LABEL_6:
    *v10 = v11;
    v10[1] = v12;
    if (++v9 == 8)
      return v7 + 2 == a2;
LABEL_7:
    v6 = v7;
    v8 += 16;
    v7 += 2;
    if (v7 != a2)
      continue;
    return 1;
  }
}

double sub_1BE6824CC(double *a1, double *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  sub_1BE68209C(a1, a2, (__int128 *)a3);
  if (*(double *)a4 < *(double *)a3 || *(double *)a3 >= *(double *)a4 && *(double *)(a4 + 8) < *(double *)(a3 + 8))
  {
    v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    if (*(double *)a3 < *a2 || *a2 >= *(double *)a3 && *(double *)(a3 + 8) < a2[1])
    {
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      if (*a2 < *a1 || *a1 >= *a2 && a2[1] < a1[1])
      {
        v12 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v12;
      }
    }
  }
  *(_QWORD *)&v13 = *a5;
  if (*(double *)a5 < *(double *)a4
    || *(double *)a4 >= *(double *)&v13 && (*(_QWORD *)&v13 = a5[1], *(double *)&v13 < *(double *)(a4 + 8)))
  {
    v13 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v13;
    *(_QWORD *)&v13 = *(_QWORD *)a4;
    if (*(double *)a4 < *(double *)a3
      || *(double *)a3 >= *(double *)&v13
      && (*(_QWORD *)&v13 = *(_QWORD *)(a4 + 8), *(double *)&v13 < *(double *)(a3 + 8)))
    {
      v13 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v13;
      *(_QWORD *)&v13 = *(_QWORD *)a3;
      if (*(double *)a3 < *a2
        || *a2 >= *(double *)&v13 && (*(_QWORD *)&v13 = *(_QWORD *)(a3 + 8), *(double *)&v13 < a2[1]))
      {
        v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        *(double *)&v13 = *a2;
        if (*a2 < *a1 || *a1 >= *(double *)&v13 && (*(double *)&v13 = a2[1], *(double *)&v13 < a1[1]))
        {
          v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v13;
        }
      }
    }
  }
  return *(double *)&v13;
}

void sub_1BE682B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE682DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE682DC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, (uint64_t)CFSTR("    %@: %@,\n"), a4, a5, a6, a2, a3);
}

void sub_1BE683114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE683134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6831C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6831E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6831F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE683208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE683280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6832DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t CHDrawingStrokes::cleanup(CHDrawingStrokes *this, CHDrawingStrokes *a2, double a3)
{
  _BYTE *end;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _BYTE *begin;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  int v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  NSObject *v35;
  unint64_t v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  sub_1BE683638((uint64_t *)a2);
  end = this->strokes.__end_;
  v7 = end - (char *)this->strokes.__begin_;
  if (!v7)
    return 0;
  v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3));
  if ((uint64_t)v8 < 1)
    return 0;
  begin = a2->strokes.__begin_;
  v9 = (char *)a2->strokes.__end_;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - begin) >> 3);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v13 = &begin[24 * v8];
      if (v9 != v13)
      {
        v14 = (char *)a2->strokes.__end_;
        do
        {
          v16 = (void *)*((_QWORD *)v14 - 3);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *((_QWORD *)v9 - 2) = v15;
            operator delete(v15);
          }
          v9 = v14;
        }
        while (v14 != v13);
      }
      a2->strokes.__end_ = v13;
    }
  }
  else
  {
    sub_1BE6942B0((uint64_t)&a2->strokes, v8 - v11);
  }
  v17 = (char *)a2->strokeBounds.__end_;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (char *)a2->strokeBounds.__begin_) >> 3);
  if (v8 <= v18)
  {
    if (v8 < v18)
    {
      v19 = (char *)a2->strokeBounds.__begin_ + 24 * v8;
      if (v17 != v19)
      {
        v20 = (char *)a2->strokeBounds.__end_;
        do
        {
          v22 = (void *)*((_QWORD *)v20 - 3);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *((_QWORD *)v17 - 2) = v21;
            operator delete(v21);
          }
          v17 = v20;
        }
        while (v20 != v19);
      }
      a2->strokeBounds.__end_ = v19;
    }
  }
  else
  {
    sub_1BE6942B0((uint64_t)a2, v8 - v18);
  }
  sub_1BE6837E8((uint64_t)&a2->strokeBoundsValidity, v8, 0);
  v23 = 0;
  LODWORD(v12) = 0;
  v24 = 0;
  v37 = v8;
  do
  {
    v25 = (double *)*((_QWORD *)this->strokes.__begin_ + 3 * v24);
    v26 = *((_QWORD *)this->strokes.__begin_ + 3 * v24 + 1) - (_QWORD)v25;
    v27 = (unint64_t)(v26 >> 3) >> 1;
    sub_1BE683A60((uint64_t)a2, v24, *v25, v25[1]);
    v12 = (v12 + 1);
    if ((unint64_t)v26 >= 0x19)
    {
      v28 = 0;
      v29 = 0;
      if (v27 <= 2)
        v30 = 2;
      else
        v30 = (unint64_t)(v26 >> 3) >> 1;
      v31 = 1;
      do
      {
        v32 = *((_QWORD *)this->strokes.__begin_ + 3 * v24);
        v33 = *(double *)(v32 + v28 + 16);
        v34 = *(double *)(v32 + v28 + 24);
        if (vabdd_f64(v33, *(double *)(v32 + 16 * v29)) > a3
          || vabdd_f64(v34, *(double *)(v32 + ((16 * v29) | 8))) > a3)
        {
          sub_1BE683A60((uint64_t)a2, v24, v33, v34);
          v12 = (v12 + 1);
          v29 = v31;
        }
        ++v31;
        v28 += 16;
      }
      while (v30 != v31);
    }
    v23 += v27;
    ++v24;
  }
  while (v24 != v37);
  if ((double)v23 * 0.1 > (double)(int)v12)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v35 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      v39 = 0x4024000000000000;
      v40 = 1024;
      v41 = v23;
      v42 = 1024;
      v43 = v12;
      _os_log_impl(&dword_1BE607000, v35, OS_LOG_TYPE_DEBUG, "Warning: Less than %2.1f%% of the original points remain in the drawing after cleanup (before: %d, after: %d)", buf, 0x18u);
    }

  }
  return v12;
}

void sub_1BE683638(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v2 = a1 + 12;
  v3 = a1[12];
  a1[15] = 0;
  v4 = a1[13];
  if (v4 != v3)
  {
    v5 = a1[13];
    do
    {
      v7 = *(void **)(v5 - 24);
      v5 -= 24;
      v6 = v7;
      if (v7)
      {
        *(_QWORD *)(v4 - 16) = v6;
        operator delete(v6);
      }
      v4 = v5;
    }
    while (v5 != v3);
    v4 = *v2;
  }
  a1[13] = v3;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
  if (v3 == v4)
  {
    sub_1BE6942B0((uint64_t)v2, 1 - v8);
LABEL_15:
    v14 = *a1;
    v13 = a1[1];
    if (v13 == *a1)
      goto LABEL_23;
    goto LABEL_18;
  }
  if (v8 < 2)
    goto LABEL_15;
  v9 = v4 + 24;
  if (v3 != v4 + 24)
  {
    v10 = v3;
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v3 - 16) = v11;
        operator delete(v11);
      }
      v3 = v10;
    }
    while (v10 != v9);
  }
  a1[13] = v9;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
LABEL_18:
    v15 = v13;
    do
    {
      v17 = *(void **)(v15 - 24);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *(_QWORD *)(v13 - 16) = v16;
        operator delete(v16);
      }
      v13 = v15;
    }
    while (v15 != v14);
    v13 = *a1;
  }
LABEL_23:
  a1[1] = v14;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3);
  if (v14 == v13)
  {
    sub_1BE6942B0((uint64_t)a1, 1 - v18);
  }
  else if (v18 >= 2)
  {
    v19 = v13 + 24;
    if (v14 != v13 + 24)
    {
      v20 = v14;
      do
      {
        v22 = *(void **)(v20 - 24);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *(_QWORD *)(v14 - 16) = v21;
          operator delete(v21);
        }
        v14 = v20;
      }
      while (v20 != v19);
    }
    a1[1] = v19;
  }
  a1[4] = 0;
  sub_1BE6837E8((uint64_t)(a1 + 3), 1uLL, 0);
  a1[7] = a1[6];
  a1[10] = a1[9];
}

void sub_1BE6837E8(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_1BE694488((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_1BE683A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE683A60(uint64_t a1, unint64_t a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double *v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  double *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  double *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  double *v34;
  unint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  double *v44;
  char *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  _OWORD *v51;
  double *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 96) + 24 * a2;
  v9 = (uint64_t *)(v8 + 8);
  v10 = *(double **)(v8 + 8);
  v11 = v10;
  v12 = *(_QWORD *)(v8 + 16);
  if ((unint64_t)v10 < v12)
  {
    *v10 = a3;
    v13 = (uint64_t)(v10 + 1);
    goto LABEL_23;
  }
  v14 = *(double **)v8;
  v15 = (uint64_t)v10 - *(_QWORD *)v8;
  v16 = v15 >> 3;
  v17 = (v15 >> 3) + 1;
  if (v17 >> 61)
    goto LABEL_45;
  v18 = v12 - (_QWORD)v14;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 61)
      goto LABEL_46;
    v20 = operator new(8 * v19);
    v21 = (double *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = a3;
    v13 = (uint64_t)(v21 + 1);
    v23 = (char *)v10 - (char *)v14;
    if (v10 == v14)
      goto LABEL_20;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (double *)(8 * v16);
  v22 = 0;
  *(double *)(8 * v16) = a3;
  v13 = 8 * v16 + 8;
  v23 = (char *)v10 - (char *)v14;
  if (v10 != v14)
  {
LABEL_14:
    v24 = v23 - 8;
    if (v24 < 0x58)
      goto LABEL_49;
    if ((unint64_t)((char *)v10 - v20 - v15) < 0x20)
      goto LABEL_49;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v11 = &v10[v26 / 0xFFFFFFFFFFFFFFF8];
    v21 = (double *)((char *)v21 - v26);
    v27 = &v20[8 * v16 - 16];
    v28 = v10 - 2;
    v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 4;
      v29 -= 4;
    }
    while (v29);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v31 = *((_QWORD *)v11-- - 1);
        *((_QWORD *)v21-- - 1) = v31;
      }
      while (v11 != v14);
    }
  }
LABEL_20:
  *(_QWORD *)v8 = v21;
  *v9 = v13;
  *(_QWORD *)(v8 + 16) = v22;
  if (v14)
    operator delete(v14);
  v7 = a1;
LABEL_23:
  *v9 = v13;
  v32 = *(_QWORD *)(v7 + 96) + 24 * a2;
  v33 = (uint64_t *)(v32 + 8);
  v34 = *(double **)(v32 + 8);
  v35 = *(_QWORD *)(v32 + 16);
  if ((unint64_t)v34 < v35)
  {
    *v34 = a4;
    v36 = (uint64_t)(v34 + 1);
    goto LABEL_44;
  }
  v37 = *(double **)v32;
  v38 = (uint64_t)v34 - *(_QWORD *)v32;
  v39 = v38 >> 3;
  v40 = (v38 >> 3) + 1;
  if (v40 >> 61)
LABEL_45:
    sub_1BE61F930();
  v41 = v35 - (_QWORD)v37;
  if (v41 >> 2 > v40)
    v40 = v41 >> 2;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
    v42 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (!v42)
  {
    v43 = 0;
    v44 = (double *)(8 * v39);
    v45 = 0;
    *(double *)(8 * v39) = a4;
    v36 = 8 * v39 + 8;
    v46 = (char *)v34 - (char *)v37;
    if (v34 == v37)
      goto LABEL_42;
LABEL_36:
    v47 = v46 - 8;
    if (v47 < 0x58)
      goto LABEL_50;
    if ((unint64_t)((char *)v34 - v43 - v38) < 0x20)
      goto LABEL_50;
    v48 = (v47 >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v50 = &v34[v49 / 0xFFFFFFFFFFFFFFF8];
    v44 = (double *)((char *)v44 - v49);
    v51 = &v43[8 * v39 - 16];
    v52 = v34 - 2;
    v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 4;
      v53 -= 4;
    }
    while (v53);
    v34 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        v55 = *((_QWORD *)v34-- - 1);
        *((_QWORD *)v44-- - 1) = v55;
      }
      while (v34 != v37);
    }
    goto LABEL_42;
  }
  if (v42 >> 61)
LABEL_46:
    sub_1BE61F100();
  v43 = operator new(8 * v42);
  v44 = (double *)&v43[8 * v39];
  v45 = &v43[8 * v42];
  *v44 = a4;
  v36 = (uint64_t)(v44 + 1);
  v46 = (char *)v34 - (char *)v37;
  if (v34 != v37)
    goto LABEL_36;
LABEL_42:
  *(_QWORD *)v32 = v44;
  *v33 = v36;
  *(_QWORD *)(v32 + 16) = v45;
  if (v37)
    operator delete(v37);
LABEL_44:
  *v33 = v36;
  *(_QWORD *)(*(_QWORD *)(v7 + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
}

void **CHDrawingStrokes::generateBitmap@<X0>(CHDrawingStrokes *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,unsigned int a48)
{
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  float64x2_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  float64x2_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  float v68;
  void *v70;

  STACK[0xA98] = *MEMORY[0x1E0C80C00];
  sub_1BE68F7D8((uint64_t)&STACK[0x7D0]);
  sub_1BE68F7D8((uint64_t)&v70);
  CHDrawingStrokes::cleanup(a1, (CHDrawingStrokes *)&STACK[0x7D0], 0.5);
  CHDrawingStrokes::center((CHDrawingStrokes *)&STACK[0x7D0]);
  CHDrawingStrokes::scaleTo((CHDrawingStrokes *)&STACK[0x7D0], 65536.0);
  CHDrawingStrokes::computeSparseBitmapBresenham((CHDrawingStrokes *)&STACK[0x7D0], 256);
  v51 = CHDrawingStrokes::computeSpatialFeaturesWithNoOverlapFromSparseBitmap((CHDrawingStrokes *)&STACK[0x7D0], (CHDrawingStrokes *)&v70, a2);
  *(_QWORD *)a3 = &unk_1E77F0828;
  *(_DWORD *)(a3 + 136) = a47;
  *(_DWORD *)(a3 + 140) = a48;
  v52 = operator new[]();
  *(_QWORD *)(a3 + 128) = v52;
  if (a47 && a48)
  {
    v53 = 0;
    v54 = 0;
    v55 = a48 - 1;
    v56 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v51), 0);
    do
    {
      if (a48 >= 0xC)
      {
        v57 = 0;
        v58 = __CFADD__(v54, v55);
        if (!__CFADD__(a47 * v54, v55) && a47 == 1 && !v58 && !(((unint64_t)a48 - 1) >> 32))
        {
          v59 = 0;
          v60 = a48 & 0xFFFFFFF8;
          do
          {
            v61 = (float64x2_t *)(a46 + 8 * (v54 + v59));
            v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(*v61, v56)), vdivq_f64(v61[1], v56));
            v63 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v61[2], v56)), vdivq_f64(v61[3], v56));
            v64 = (float32x4_t *)(v52 + 4 * (v53 + v59));
            *v64 = v62;
            v64[1] = v63;
            v59 += 8;
            v60 -= 8;
          }
          while (v60);
          v57 = a48 & 0xFFFFFFF8;
          if (v57 == a48)
            goto LABEL_4;
        }
      }
      else
      {
        v57 = 0;
      }
      v65 = a48 - v57;
      v66 = v53 + v57;
      v67 = v54 + a47 * v57;
      do
      {
        v68 = *(double *)(a46 + 8 * v67) / (double)v51;
        *(float *)(v52 + 4 * v66++) = v68;
        v67 += a47;
        --v65;
      }
      while (v65);
LABEL_4:
      ++v54;
      v53 += a47;
    }
    while (v54 != a47);
  }
  sub_1BE690148(&v70);
  return sub_1BE690148((void **)&STACK[0x7D0]);
}

void sub_1BE683F8C(_Unwind_Exception *a1)
{
  sub_1BE690148((void **)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_1BE683FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1BE690148(&a9);
  sub_1BE690148((void **)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void CHDrawingStrokes::center(CHDrawingStrokes *this)
{
  void *v2;
  _BYTE *begin;
  _BYTE *end;
  int64_t v5;
  unint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  double *v19;
  unint64_t v20;
  float64x2_t *v21;
  void *__p;
  float64x2x2_t v23;
  float64x2x2_t v24;
  float64x2x2_t v25;

  CHDrawingStrokes::computeCenter(this, (double **)&__p);
  v2 = __p;
  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  if (end != begin)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3));
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = *(float64x2_t *)__p;
      v8 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)__p, 0);
      v9 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)__p, 1);
      do
      {
        v10 = (uint64_t *)&begin[24 * v6];
        v11 = *v10;
        v12 = v10[1] - *v10;
        if ((unint64_t)v12 < 0x10)
          goto LABEL_5;
        v13 = (unint64_t)(v12 >> 3) >> 1;
        v14 = this->strokeBoundsValidity.__begin_;
        v15 = v14[v6 >> 6];
        if (v13 <= 1)
          v13 = 1;
        if (v13 >= 4)
        {
          v16 = v13 & 0x7FFFFFFFFFFFFFFCLL;
          v17 = (double *)(v11 + 32);
          v18 = v13 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            v19 = v17 - 4;
            v23 = vld2q_f64(v19);
            v24 = vld2q_f64(v17);
            v25.val[0] = vsubq_f64(v23.val[0], v8);
            v25.val[1] = vsubq_f64(v23.val[1], v9);
            v23.val[0] = vsubq_f64(v24.val[0], v8);
            v23.val[1] = vsubq_f64(v24.val[1], v9);
            vst2q_f64(v19, v25);
            vst2q_f64(v17, v23);
            v17 += 8;
            v18 -= 4;
          }
          while (v18);
          if (v13 == v16)
            goto LABEL_4;
        }
        else
        {
          v16 = 0;
        }
        v20 = v13 - v16;
        v21 = (float64x2_t *)(v11 + 16 * v16);
        do
        {
          *v21 = vsubq_f64(*v21, v7);
          ++v21;
          --v20;
        }
        while (v20);
LABEL_4:
        v14[v6 >> 6] = v15 & ~(1 << v6);
LABEL_5:
        ++v6;
      }
      while (v6 != v5);
    }
  }
  operator delete(v2);
}

void CHDrawingStrokes::scaleTo(CHDrawingStrokes *this, double a2)
{
  void *v4;
  double v5;
  _BYTE *begin;
  _BYTE *end;
  int64_t v8;
  unint64_t v9;
  double v10;
  double **v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  unint64_t v20;
  float64x2_t *v21;
  void *__p[3];
  float64x2x2_t v23;
  float64x2x2_t v24;

  CHDrawingStrokes::getBoundingBox(this, (double **)__p);
  v4 = __p[0];
  v5 = *((double *)__p[0] + 3) - *((double *)__p[0] + 1);
  if (v5 <= *((double *)__p[0] + 2) - *(double *)__p[0])
    v5 = *((double *)__p[0] + 2) - *(double *)__p[0];
  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  if (end != begin)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3));
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = a2 / v5;
      do
      {
        v11 = (double **)&begin[24 * v9];
        v12 = *v11;
        v13 = (char *)v11[1] - (char *)*v11;
        if ((unint64_t)v13 < 0x10)
          goto LABEL_7;
        v14 = (unint64_t)(v13 >> 3) >> 1;
        v15 = this->strokeBoundsValidity.__begin_;
        v16 = v15[v9 >> 6];
        if (v14 <= 1)
          v14 = 1;
        if (v14 >= 2)
        {
          v17 = v14 & 0x7FFFFFFFFFFFFFFELL;
          v18 = v14 & 0x7FFFFFFFFFFFFFFELL;
          v19 = v12;
          do
          {
            v23 = vld2q_f64(v19);
            v24.val[0] = vmulq_n_f64(v23.val[0], v10);
            v24.val[1] = vmulq_n_f64(v23.val[1], v10);
            vst2q_f64(v19, v24);
            v19 += 4;
            v18 -= 2;
          }
          while (v18);
          if (v14 == v17)
            goto LABEL_6;
        }
        else
        {
          v17 = 0;
        }
        v20 = v14 - v17;
        v21 = (float64x2_t *)&v12[2 * v17];
        do
        {
          *v21 = vmulq_n_f64(*v21, v10);
          ++v21;
          --v20;
        }
        while (v20);
LABEL_6:
        v15[v9 >> 6] = v16 & ~(1 << (v9 & 0x3F));
LABEL_7:
        ++v9;
      }
      while (v9 != v8);
    }
  }
  __p[1] = v4;
  operator delete(v4);
}

void CHDrawingStrokes::computeSparseBitmapBresenham(CHDrawingStrokes *this, signed int a2)
{
  uint64_t v4;
  double v5;
  double v6;
  int v7;
  int v8;
  BOOL v9;
  double v10;
  double v11;
  unsigned int v12;
  double *v13;
  unsigned int v14;
  unsigned int v15;
  double *v16;
  char *begin;
  char *end;
  double *v19;
  char *v20;
  int64_t v21;
  unsigned int mSize;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  unsigned __int32 v26;
  unsigned __int32 v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned __int32 v42;
  unint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double *v50;
  _BYTE *v51;
  void **v52;
  double *v53;
  int64_t v54;
  unint64_t v55;
  double *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  double *v62;
  uint64_t v63;
  __int128 v64;
  unsigned int v65;
  unint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double *v73;
  _BYTE *v74;
  void **v75;
  int64_t v76;
  unint64_t v77;
  double *v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  double *v84;
  uint64_t v85;
  __int128 v86;
  void **v87;
  double *data;
  double *v89;
  int v90;
  int v91;
  double *v92;
  int v93;
  void *v94;
  double *v95;
  char *v96;
  double v97;
  float64x2_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int64_t v102;
  void **v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned __int32 v109;
  unsigned int v110;
  unsigned __int32 v111;
  void *__p[3];

  CHDrawingStrokes::getBoundingBox(this, (double **)__p);
  v4 = 0;
  v5 = *((double *)__p[0] + 3) - *((double *)__p[0] + 1);
  v6 = *((double *)__p[0] + 2) - *(double *)__p[0];
  v7 = a2 / 10;
  v8 = a2 - 2 * (a2 / 10);
  v9 = v5 <= v6;
  if (v5 <= v6)
    v10 = *((double *)__p[0] + 2) - *(double *)__p[0];
  else
    v10 = *((double *)__p[0] + 3) - *((double *)__p[0] + 1);
  if (v5 > v6)
    v5 = *((double *)__p[0] + 2) - *(double *)__p[0];
  v11 = v10 / (double)v8 + 0.001;
  v12 = vcvtmd_s64_f64((1.0 - v5 / v10) * (double)v8 * 0.5);
  this->mSize = a2;
  v103 = (void **)&this[2].bitmap._vptr$Matrix;
  v13 = (double *)this[2].bitmap._vptr$Matrix;
  this[2].bitmap._data = v13;
  if (v9)
    v14 = 0;
  else
    v14 = v12;
  v15 = v14 + v7;
  if (!v9)
    v12 = 0;
  v100 = v12 + v7;
  v101 = v15;
  v97 = v11;
  v98 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0);
  while (1)
  {
    begin = (char *)this->strokes.__begin_;
    end = (char *)this->strokes.__end_;
    if (end == begin)
      break;
    if (v4 >= -(uint64_t)(*((_QWORD *)end - 2) == *((_QWORD *)end - 3)) - 0x5555555555555555 * ((end - begin) >> 3))
      goto LABEL_109;
LABEL_19:
    v20 = &begin[24 * v4];
    v19 = *(double **)v20;
    if (*((_QWORD *)v20 + 1) - *(_QWORD *)v20 >= 0x19uLL)
    {
      v21 = 0;
      v99 = v4;
      while (1)
      {
        mSize = this->mSize;
        v102 = v21 + 1;
        v23 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vdivq_f64(vsubq_f64(*(float64x2_t *)&v19[2 * v21], *(float64x2_t *)__p[0]), v98))));
        v24 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vdivq_f64(vsubq_f64(*(float64x2_t *)&v19[2 * v21 + 2], *(float64x2_t *)__p[0]), v98))));
        v25 = vcgt_s32(v24, v23);
        v26 = v101 + v23.i32[0];
        v27 = v100 + v23.i32[1];
        v28 = v101 + v24.i32[0];
        v29 = v100 + v24.i32[1];
        if (v24.i32[0] - v23.i32[0] >= 0)
          v30 = v24.i32[0] - v23.i32[0];
        else
          v30 = v23.i32[0] - v24.i32[0];
        if ((v25.i8[0] & 1) != 0)
          v31 = 1;
        else
          v31 = -1;
        v110 = this->mSize;
        v111 = v100 + v24.i32[1];
        if ((int)(v29 - v27) >= 0)
          v32 = v29 - v27;
        else
          v32 = v27 - v29;
        if ((v25.i8[4] & 1) != 0)
          v33 = 1;
        else
          v33 = -1;
        if (v30 <= v32)
          v34 = -v32;
        else
          v34 = v30;
        v35 = v34 / 2;
        v36 = -v30;
        v108 = v30;
        v109 = v101 + v24.i32[0];
        v106 = v32;
        v107 = v31;
        v104 = -v30;
        v105 = v33;
        while (1)
        {
          v42 = v27 + v26 * mSize;
          v43 = *(_QWORD *)&this[2].bitmap._w;
          if ((unint64_t)v13 < v43)
            break;
          v44 = (double *)*v103;
          v45 = (char *)v13 - (_BYTE *)*v103;
          v46 = v45 >> 2;
          v47 = (v45 >> 2) + 1;
          if (v47 >> 62)
            sub_1BE61F930();
          v48 = v43 - (_QWORD)v44;
          if (v48 >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            if (v49 >> 62)
              sub_1BE61F100();
            v50 = v13;
            v51 = operator new(4 * v49);
            v13 = v50;
            v52 = (void **)&v51[4 * v46];
            *(_DWORD *)v52 = v42;
            v53 = (double *)((char *)v52 + 4);
            v54 = (char *)v13 - (char *)v44;
            if (v13 == v44)
              goto LABEL_68;
          }
          else
          {
            v51 = 0;
            v52 = (void **)(4 * v46);
            *(_DWORD *)(4 * v46) = v42;
            v53 = (double *)(4 * v46 + 4);
            v54 = (char *)v13 - (char *)v44;
            if (v13 == v44)
              goto LABEL_68;
          }
          v55 = v54 - 4;
          if (v55 < 0xBC)
          {
            v56 = v13;
            goto LABEL_67;
          }
          v58 = ((char *)v13 - 4 - (char *)v44) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v51[v45 - 4 - v58] > &v51[v45 - 4])
          {
            v56 = v13;
            do
            {
LABEL_67:
              v57 = *((_DWORD *)v56 - 1);
              v56 = (double *)((char *)v56 - 4);
              *((_DWORD *)v52 - 1) = v57;
              v52 = (void **)((char *)v52 - 4);
            }
            while (v56 != v44);
            goto LABEL_68;
          }
          if ((char *)v13 - v58 - 4 > (char *)v13 - 4)
          {
            v56 = v13;
            goto LABEL_67;
          }
          if ((unint64_t)((char *)v13 - &v51[v45]) < 0x20)
          {
            v56 = v13;
            goto LABEL_67;
          }
          v59 = (v55 >> 2) + 1;
          v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
          v56 = (double *)((char *)v13 - v60);
          v52 = (void **)((char *)v52 - v60);
          v61 = &v51[4 * v46 - 16];
          v62 = v13 - 2;
          v63 = v59 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v64 = *(_OWORD *)v62;
            *(v61 - 1) = *((_OWORD *)v62 - 1);
            *v61 = v64;
            v61 -= 2;
            v62 -= 4;
            v63 -= 8;
          }
          while (v63);
          if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_67;
LABEL_68:
          this[2].bitmap._vptr$Matrix = v52;
          this[2].bitmap._data = v53;
          *(_QWORD *)&this[2].bitmap._w = &v51[4 * v49];
          if (v44)
            operator delete(v44);
          v13 = v53;
          v28 = v109;
          mSize = v110;
          v31 = v107;
          v30 = v108;
          v33 = v105;
          v32 = v106;
          v36 = v104;
          this[2].bitmap._data = v53;
          if (v26 == v109)
            goto LABEL_39;
LABEL_40:
          if (v35 <= v36)
            v37 = 0;
          else
            v37 = v31;
          v26 += v37;
          if (v35 <= v36)
            v38 = 0;
          else
            v38 = v32;
          v39 = v35 - v38;
          if (v35 >= v32)
            v40 = 0;
          else
            v40 = v33;
          v27 += v40;
          if (v35 >= v32)
            v41 = 0;
          else
            v41 = v30;
          v35 = v39 + v41;
        }
        *(_DWORD *)v13 = v42;
        v13 = (double *)((char *)v13 + 4);
        this[2].bitmap._data = v13;
        if (v26 != v28)
          goto LABEL_40;
LABEL_39:
        if (v27 != v111)
          goto LABEL_40;
        v4 = v99;
        v19 = (double *)*((_QWORD *)this->strokes.__begin_ + 3 * v99);
        v21 = v102;
        if (v102 >= (uint64_t)(((unint64_t)((uint64_t)(*((_QWORD *)this->strokes.__begin_ + 3 * v99 + 1)
                                                           - (_QWORD)v19) >> 3) >> 1)
                             - 1))
          goto LABEL_14;
      }
    }
    v65 = v100
        + vcvtmd_s64_f64((v19[1] - *((double *)__p[0] + 1)) / v97)
        + (v101 + vcvtmd_s64_f64((*v19 - *(double *)__p[0]) / v97)) * this->mSize;
    v66 = *(_QWORD *)&this[2].bitmap._w;
    if ((unint64_t)v13 >= v66)
    {
      v67 = (double *)*v103;
      v68 = (char *)v13 - (_BYTE *)*v103;
      v69 = v68 >> 2;
      v70 = (v68 >> 2) + 1;
      if (v70 >> 62)
        sub_1BE61F930();
      v71 = v66 - (_QWORD)v67;
      if (v71 >> 1 > v70)
        v70 = v71 >> 1;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
        v72 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 >> 62)
          sub_1BE61F100();
        v73 = v13;
        v74 = operator new(4 * v72);
        v13 = v73;
        v75 = (void **)&v74[4 * v69];
        *(_DWORD *)v75 = v65;
        v16 = (double *)((char *)v75 + 4);
        v76 = (char *)v13 - (char *)v67;
        if (v13 == v67)
          goto LABEL_97;
LABEL_94:
        v77 = v76 - 4;
        if (v77 < 0xBC)
        {
          v78 = v13;
          goto LABEL_96;
        }
        v80 = ((char *)v13 - 4 - (char *)v67) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v74[v68 - 4 - v80] > &v74[v68 - 4])
        {
          v78 = v13;
          goto LABEL_96;
        }
        if ((char *)v13 - v80 - 4 > (char *)v13 - 4)
        {
          v78 = v13;
          goto LABEL_96;
        }
        if ((unint64_t)((char *)v13 - v74 - v68) < 0x20)
        {
          v78 = v13;
          goto LABEL_96;
        }
        v81 = (v77 >> 2) + 1;
        v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
        v78 = (double *)((char *)v13 - v82);
        v75 = (void **)((char *)v75 - v82);
        v83 = &v74[4 * v69 - 16];
        v84 = v13 - 2;
        v85 = v81 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v86 = *(_OWORD *)v84;
          *(v83 - 1) = *((_OWORD *)v84 - 1);
          *v83 = v86;
          v83 -= 2;
          v84 -= 4;
          v85 -= 8;
        }
        while (v85);
        if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_96:
            v79 = *((_DWORD *)v78 - 1);
            v78 = (double *)((char *)v78 - 4);
            *((_DWORD *)v75 - 1) = v79;
            v75 = (void **)((char *)v75 - 4);
          }
          while (v78 != v67);
        }
      }
      else
      {
        v74 = 0;
        v75 = (void **)(4 * v69);
        *(_DWORD *)(4 * v69) = v65;
        v16 = (double *)(4 * v69 + 4);
        v76 = (char *)v13 - (char *)v67;
        if (v13 != v67)
          goto LABEL_94;
      }
LABEL_97:
      this[2].bitmap._vptr$Matrix = v75;
      this[2].bitmap._data = v16;
      *(_QWORD *)&this[2].bitmap._w = &v74[4 * v72];
      if (v67)
        operator delete(v67);
      goto LABEL_13;
    }
    *(_DWORD *)v13 = v65;
    v16 = (double *)((char *)v13 + 4);
LABEL_13:
    this[2].bitmap._data = v16;
    v13 = v16;
LABEL_14:
    ++v4;
  }
  if (v4 < 0)
    goto LABEL_19;
LABEL_109:
  std::__sort<std::__less<int,int> &,int *>();
  v87 = this[2].bitmap._vptr$Matrix;
  data = this[2].bitmap._data;
  if (v87 != (void **)data)
  {
    v89 = (double *)((char *)v87 + 4);
    while (v89 != data)
    {
      v90 = *((_DWORD *)v89 - 1);
      v91 = *(_DWORD *)v89;
      v89 = (double *)((char *)v89 + 4);
      if (v90 == v91)
      {
        v92 = v89 - 1;
        while (v89 != data)
        {
          v93 = v90;
          v90 = *(_DWORD *)v89;
          if (v93 != *(_DWORD *)v89)
          {
            *((_DWORD *)v92 + 1) = v90;
            v92 = (double *)((char *)v92 + 4);
          }
          v89 = (double *)((char *)v89 + 4);
        }
        v95 = (double *)((char *)v92 + 4);
        v96 = (char *)((char *)data - ((char *)v92 + 4));
        if (data == (double *)((char *)v92 + 4))
          break;
        if (data != (double *)&v96[(_QWORD)v95])
          memmove((char *)v92 + 4, &v96[(_QWORD)v95], 0);
        this[2].bitmap._data = v95;
        v94 = __p[0];
        if (__p[0])
          goto LABEL_119;
        return;
      }
    }
  }
  v94 = __p[0];
  if (__p[0])
  {
LABEL_119:
    __p[1] = v94;
    operator delete(v94);
  }
}

void sub_1BE684924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CHDrawingStrokes::computeSpatialFeaturesWithNoOverlapFromSparseBitmap(CHDrawingStrokes *this, CHDrawingStrokes *a2, unsigned int a3)
{
  unsigned int mSize;
  void *begin;
  void **v8;
  double *data;
  uint64_t result;
  signed int v11;
  int v12;
  char *v13;
  int end;
  int v15;
  int v16;
  uint64_t v20;
  double v21;
  NSObject *v22;
  unsigned int v23;
  NSObject *v24;
  int v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  mSize = this->mSize;
  if (mSize < a3)
  {
    CHOSLogForCategory(1);
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = this->mSize;
      v25 = 67109376;
      v26 = a3;
      v27 = 1024;
      v28 = v23;
      _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_ERROR, "Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is larger than the original size (%u)\n", (uint8_t *)&v25, 0xEu);
    }

    exit(1);
  }
  if (!a3)
  {
    CHOSLogForCategory(1);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = 67109120;
      v26 = 0;
      _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_ERROR, "Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is equal to 0\n", (uint8_t *)&v25, 8u);
    }

    exit(1);
  }
  a2->mSize = a3;
  begin = a2[2].strokeBounds.__begin_;
  if (a3 * a3 != HIDWORD(a2[2].strokeBounds.__end_) * LODWORD(a2[2].strokeBounds.__end_))
  {
    if (begin)
      MEMORY[0x1C3B812C8](begin, 0x1000C8000313F17);
    begin = (void *)operator new[]();
    a2[2].strokeBounds.__begin_ = begin;
  }
  HIDWORD(a2[2].strokeBounds.__end_) = a3;
  LODWORD(a2[2].strokeBounds.__end_) = a3;
  bzero(begin, 8 * a3 * (unint64_t)a3);
  v8 = this[2].bitmap._vptr$Matrix;
  data = this[2].bitmap._data;
  if (v8 == (void **)data)
    return 0;
  result = 0;
  v11 = (mSize % a3) >> 1;
  v12 = mSize / a3 * a3 + v11 - 1;
  v13 = (char *)a2[2].strokeBounds.__begin_;
  end = (int)a2[2].strokeBounds.__end_;
  do
  {
    v15 = *(_DWORD *)v8 / mSize;
    v16 = *(_DWORD *)v8 % mSize;
    if (v16 <= v12 && v15 >= v11 && v15 <= v12 && v16 >= v11)
    {
      v20 = 8 * ((v15 - v11) / (int)(mSize / a3) + (v16 - v11) / (int)(mSize / a3) * end);
      v21 = *(double *)&v13[v20] + 1.0;
      *(double *)&v13[v20] = v21;
      if (v21 <= (double)(int)result)
        result = result;
      else
        result = (int)v21;
    }
    v8 = (void **)((char *)v8 + 4);
  }
  while (v8 != (void **)data);
  return result;
}

uint64_t previousOrientationIndex(int a1, int a2, int a3)
{
  float v4;
  float v5;

  if (a2 == a1)
    return 1;
  v4 = (float)((a2 - a1 + a3) % a3);
  v5 = (float)a3;
  if ((float)((float)((float)((float)a3 * 20.0) / 360.0) + 1.0) > v4)
    return 2;
  if ((float)((float)((float)(v5 * 70.0) / 360.0) + 1.0) > v4)
    return 3;
  if ((float)((float)((float)(v5 * 110.0) / 360.0) + 1.0) > v4)
    return 4;
  if ((float)((float)((float)(v5 * 160.0) / 360.0) + 1.0) > v4)
    return 5;
  if ((float)((float)((float)(v5 * 200.0) / 360.0) + 1.0) > v4)
    return 6;
  if ((float)((float)((float)(v5 * 250.0) / 360.0) + 1.0) > v4)
    return 7;
  if ((float)((float)((float)(v5 * 290.0) / 360.0) + 1.0) > v4)
    return 8;
  if ((float)((float)((float)(v5 * 340.0) / 360.0) + 1.0) <= v4)
    return 10;
  return 9;
}

void CHDrawingStrokes::generateOrientation(CHDrawingStrokes *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *begin;
  _BYTE *end;
  vector<std::vector<double>, std::allocator<std::vector<double>>> *p_strokes;
  double v48;
  double v49;
  double v50;
  char *v51;
  double *v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  double *v57;
  double v58;
  double v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  double v64;
  double v65;
  long double v66;
  long double v67;
  double v68;
  int v69;
  uint64_t v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t i;
  uint64_t v161;
  float v162;
  float *v163;
  float v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  float v172;
  uint64_t v173;
  float v174;
  uint64_t v175;
  float v176;
  uint64_t v177;
  float v178;
  uint64_t v179;
  float v180;
  uint64_t v181;
  float v182;
  uint64_t v183;
  float v184;
  uint64_t v185;
  float v186;
  uint64_t v187;
  float v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  float v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  float v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  float v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  float v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  float v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  float v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  float v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  unsigned int v292;

  v290 = 11 * a2;
  v7 = operator new[]();
  v8 = v7;
  v292 = a2 - 1;
  if ((int)a2 < 1)
    goto LABEL_49;
  if (a2 == 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = a2 & 0xFFFFFFFE;
    v10 = 11;
    v11 = v9;
    do
    {
      *(_DWORD *)(v7 + 4 * (((_DWORD)v10 - 11) & 0xFFFFFFFE)) = 0;
      *(_DWORD *)(v7 + 4 * v10) = 0;
      v10 += 22;
      v11 -= 2;
    }
    while (v11);
    if (v9 == a2)
    {
LABEL_9:
      if (a2 >= 2)
      {
        v14 = 0;
        v76 = 11 * (a2 - 1);
        if ((_DWORD)v76 != -1 && (v76 & 0xFFFFFFFF00000000) == 0)
        {
          v77 = ((unint64_t)a2 - 1) >> 32;
          if (!v77)
          {
            v14 = a2 & 0xFFFFFFFE;
            do
            {
              *(_DWORD *)(v7 + 4 * (v77 & 0xFFFFFFFE) + 4) = 0;
              *(_DWORD *)(v7 + 4 * (((_DWORD)v77 + 12) & 0xFFFFFFFE)) = 0;
              v77 += 22;
            }
            while (22 * (a2 >> 1) != v77);
            if (v14 == a2)
            {
LABEL_13:
              if (a2 >= 2)
              {
                v17 = 0;
                v78 = 11 * (a2 - 1);
                if (v78 <= 0xFFFFFFFD && (v78 & 0xFFFFFFFF00000000) == 0)
                {
                  v79 = ((unint64_t)a2 - 1) >> 32;
                  if (!v79)
                  {
                    v17 = a2 & 0xFFFFFFFE;
                    do
                    {
                      *(_DWORD *)(v7 + 4 * (((_DWORD)v79 + 2) & 0xFFFFFFFE)) = 0;
                      *(_DWORD *)(v7 + 4 * (v79 + 13)) = 0;
                      v79 += 22;
                    }
                    while (22 * (a2 >> 1) != v79);
                    if (v17 == a2)
                    {
LABEL_17:
                      if (a2 >= 2)
                      {
                        v20 = 0;
                        v80 = 11 * (a2 - 1);
                        if (v80 <= 0xFFFFFFFC && (v80 & 0xFFFFFFFF00000000) == 0)
                        {
                          v81 = ((unint64_t)a2 - 1) >> 32;
                          if (!v81)
                          {
                            v20 = a2 & 0xFFFFFFFE;
                            do
                            {
                              *(_DWORD *)(v7 + 4 * (v81 + 3)) = 0;
                              *(_DWORD *)(v7 + 4 * (((_DWORD)v81 + 14) & 0xFFFFFFFE)) = 0;
                              v81 += 22;
                            }
                            while (22 * (a2 >> 1) != v81);
                            if (v20 == a2)
                            {
LABEL_21:
                              if (a2 >= 2)
                              {
                                v23 = 0;
                                v82 = 11 * (a2 - 1);
                                if (v82 <= 0xFFFFFFFB && (v82 & 0xFFFFFFFF00000000) == 0)
                                {
                                  v83 = ((unint64_t)a2 - 1) >> 32;
                                  if (!v83)
                                  {
                                    v23 = a2 & 0xFFFFFFFE;
                                    do
                                    {
                                      *(_DWORD *)(v7 + 4 * (((_DWORD)v83 + 4) & 0xFFFFFFFE)) = 0;
                                      *(_DWORD *)(v7 + 4 * (v83 + 15)) = 0;
                                      v83 += 22;
                                    }
                                    while (22 * (a2 >> 1) != v83);
                                    if (v23 == a2)
                                    {
LABEL_25:
                                      if (a2 >= 2)
                                      {
                                        v26 = 0;
                                        v84 = 11 * (a2 - 1);
                                        if (v84 <= 0xFFFFFFFA && (v84 & 0xFFFFFFFF00000000) == 0)
                                        {
                                          v85 = ((unint64_t)a2 - 1) >> 32;
                                          if (!v85)
                                          {
                                            v26 = a2 & 0xFFFFFFFE;
                                            do
                                            {
                                              *(_DWORD *)(v7 + 4 * (v85 + 5)) = 0;
                                              *(_DWORD *)(v7 + 4 * (((_DWORD)v85 + 16) & 0xFFFFFFFE)) = 0;
                                              v85 += 22;
                                            }
                                            while (22 * (a2 >> 1) != v85);
                                            if (v26 == a2)
                                            {
LABEL_29:
                                              if (a2 >= 2)
                                              {
                                                v29 = 0;
                                                v86 = 11 * (a2 - 1);
                                                if (v86 <= 0xFFFFFFF9
                                                  && (v86 & 0xFFFFFFFF00000000) == 0)
                                                {
                                                  v87 = ((unint64_t)a2 - 1) >> 32;
                                                  if (!v87)
                                                  {
                                                    v29 = a2 & 0xFFFFFFFE;
                                                    do
                                                    {
                                                      *(_DWORD *)(v7 + 4 * (((_DWORD)v87 + 6) & 0xFFFFFFFE)) = 0;
                                                      *(_DWORD *)(v7 + 4 * (v87 + 17)) = 0;
                                                      v87 += 22;
                                                    }
                                                    while (22 * (a2 >> 1) != v87);
                                                    if (v29 == a2)
                                                    {
LABEL_33:
                                                      if (a2 >= 2)
                                                      {
                                                        v32 = 0;
                                                        v88 = 11 * (a2 - 1);
                                                        if (v88 <= 0xFFFFFFF8
                                                          && (v88 & 0xFFFFFFFF00000000) == 0)
                                                        {
                                                          v89 = ((unint64_t)a2 - 1) >> 32;
                                                          if (!v89)
                                                          {
                                                            v32 = a2 & 0xFFFFFFFE;
                                                            do
                                                            {
                                                              *(_DWORD *)(v7 + 4 * (v89 + 7)) = 0;
                                                              *(_DWORD *)(v7 + 4 * (((_DWORD)v89 + 18) & 0xFFFFFFFE)) = 0;
                                                              v89 += 22;
                                                            }
                                                            while (22 * (a2 >> 1) != v89);
                                                            if (v32 == a2)
                                                            {
LABEL_37:
                                                              if (a2 >= 2)
                                                              {
                                                                v35 = 0;
                                                                v90 = 11 * (a2 - 1);
                                                                if (v90 <= 0xFFFFFFF7
                                                                  && (v90 & 0xFFFFFFFF00000000) == 0)
                                                                {
                                                                  v91 = ((unint64_t)a2 - 1) >> 32;
                                                                  if (!v91)
                                                                  {
                                                                    v35 = a2 & 0xFFFFFFFE;
                                                                    do
                                                                    {
                                                                      *(_DWORD *)(v7
                                                                                + 4 * (((_DWORD)v91 + 8) & 0xFFFFFFFE)) = 0;
                                                                      *(_DWORD *)(v7 + 4 * (v91 + 19)) = 0;
                                                                      v91 += 22;
                                                                    }
                                                                    while (22 * (a2 >> 1) != v91);
                                                                    if (v35 == a2)
                                                                    {
LABEL_41:
                                                                      if (a2 >= 2)
                                                                      {
                                                                        v38 = 0;
                                                                        v92 = 11 * (a2 - 1);
                                                                        if (v92 <= 0xFFFFFFF6
                                                                          && (v92 & 0xFFFFFFFF00000000) == 0)
                                                                        {
                                                                          v93 = ((unint64_t)a2 - 1) >> 32;
                                                                          if (!v93)
                                                                          {
                                                                            v38 = a2 & 0xFFFFFFFE;
                                                                            do
                                                                            {
                                                                              *(_DWORD *)(v7
                                                                                        + 4 * (v93 + 9)) = 0;
                                                                              *(_DWORD *)(v7
                                                                                        + 4
                                                                                        * (((_DWORD)v93 + 20) & 0xFFFFFFFE)) = 0;
                                                                              v93 += 22;
                                                                            }
                                                                            while (22 * (a2 >> 1) != v93);
                                                                            if (v38 == a2)
                                                                            {
LABEL_45:
                                                                              if (a2 >= 2)
                                                                              {
                                                                                v41 = 0;
                                                                                v94 = 11 * (a2 - 1);
                                                                                if (v94 <= 0xFFFFFFF5
                                                                                  && (v94 & 0xFFFFFFFF00000000) == 0)
                                                                                {
                                                                                  v95 = ((unint64_t)a2 - 1) >> 32;
                                                                                  if (!v95)
                                                                                  {
                                                                                    v41 = a2 & 0xFFFFFFFE;
                                                                                    do
                                                                                    {
                                                                                      *(_DWORD *)(v7
                                                                                                + 4
                                                                                                * (((_DWORD)v95 + 10) & 0xFFFFFFFE)) = 0;
                                                                                      *(_DWORD *)(v7
                                                                                                + 4
                                                                                                * (v95 + 21)) = 0;
                                                                                      v95 += 22;
                                                                                    }
                                                                                    while (22 * (a2 >> 1) != v95);
                                                                                    if (v41 == a2)
                                                                                      goto LABEL_49;
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                v41 = 0;
                                                                              }
                                                                              v42 = a2 - v41;
                                                                              v43 = 11 * v41 + 10;
                                                                              do
                                                                              {
                                                                                *(_DWORD *)(v7 + 4 * v43) = 0;
                                                                                v43 += 11;
                                                                                --v42;
                                                                              }
                                                                              while (v42);
LABEL_49:
                                                                              v44 = 0;
                                                                              p_strokes = &this->strokes;
                                                                              begin = (char *)this->strokes.__begin_;
                                                                              end = p_strokes->__end_;
                                                                              v48 = 0.0;
                                                                              v49 = (float)(int)a2 * 0.5 / 3.14159265;
                                                                              v50 = 0.0;
                                                                              while (1)
                                                                              {
                                                                                if (end == begin)
                                                                                {
                                                                                  if (v44 >= 0)
                                                                                  {
LABEL_79:
                                                                                    v73 = v292 + a3;
                                                                                    *(_QWORD *)a4 = &unk_1E77F0828;
                                                                                    *(_DWORD *)(a4 + 136) = 11;
                                                                                    *(_DWORD *)(a4 + 140) = v73;
                                                                                    v74 = operator new[]();
                                                                                    *(_QWORD *)(a4 + 128) = v74;
                                                                                    if ((int)v73 >= 1)
                                                                                    {
                                                                                      if ((_DWORD)v73 == 1)
                                                                                      {
                                                                                        v75 = 0;
                                                                                        goto LABEL_155;
                                                                                      }
                                                                                      v75 = v73 & 0xFFFFFFFE;
                                                                                      v96 = 11;
                                                                                      v97 = v75;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v96 - 11) & 0xFFFFFFFE)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * v96) = 0;
                                                                                        v96 += 22;
                                                                                        v97 -= 2;
                                                                                      }
                                                                                      while (v97);
                                                                                      if (v75 != v73)
                                                                                      {
LABEL_155:
                                                                                        v98 = v73 - v75;
                                                                                        v99 = 11 * v75;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v99) = 0;
                                                                                          v99 += 11;
                                                                                          --v98;
                                                                                        }
                                                                                        while (v98);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v100 = 0;
                                                                                        goto LABEL_165;
                                                                                      }
                                                                                      v100 = 0;
                                                                                      v101 = 11
                                                                                           * (v73 - 1);
                                                                                      if ((_DWORD)v101 == -1)
                                                                                        goto LABEL_165;
                                                                                      if ((v101 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_165;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_165;
                                                                                      v100 = v73 & 0xFFFFFFFE;
                                                                                      v102 = 12;
                                                                                      v103 = v100;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v102 - 12) & 0xFFFFFFFE)
                                                                                                  + 4) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v102 & 0xFFFFFFFE)) = 0;
                                                                                        v102 += 22;
                                                                                        v103 -= 2;
                                                                                      }
                                                                                      while (v103);
                                                                                      if (v100 != v73)
                                                                                      {
LABEL_165:
                                                                                        v104 = v73 - v100;
                                                                                        v105 = 11 * v100
                                                                                             + 1;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v105) = 0;
                                                                                          v105 += 11;
                                                                                          --v104;
                                                                                        }
                                                                                        while (v104);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v106 = 0;
                                                                                        goto LABEL_175;
                                                                                      }
                                                                                      v106 = 0;
                                                                                      v107 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v107 > 0xFFFFFFFD)
                                                                                        goto LABEL_175;
                                                                                      if ((v107 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_175;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_175;
                                                                                      v106 = v73 & 0xFFFFFFFE;
                                                                                      v108 = 13;
                                                                                      v109 = v106;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v108 - 11) & 0xFFFFFFFE)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * v108) = 0;
                                                                                        v108 += 22;
                                                                                        v109 -= 2;
                                                                                      }
                                                                                      while (v109);
                                                                                      if (v106 != v73)
                                                                                      {
LABEL_175:
                                                                                        v110 = v73 - v106;
                                                                                        v111 = 11 * v106
                                                                                             + 2;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v111) = 0;
                                                                                          v111 += 11;
                                                                                          --v110;
                                                                                        }
                                                                                        while (v110);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v112 = 0;
                                                                                        goto LABEL_185;
                                                                                      }
                                                                                      v112 = 0;
                                                                                      v113 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v113 > 0xFFFFFFFC)
                                                                                        goto LABEL_185;
                                                                                      if ((v113 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_185;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_185;
                                                                                      v112 = v73 & 0xFFFFFFFE;
                                                                                      v114 = 14;
                                                                                      v115 = v112;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v114 - 11)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v114 & 0xFFFFFFFE)) = 0;
                                                                                        v114 += 22;
                                                                                        v115 -= 2;
                                                                                      }
                                                                                      while (v115);
                                                                                      if (v112 != v73)
                                                                                      {
LABEL_185:
                                                                                        v116 = v73 - v112;
                                                                                        v117 = 11 * v112
                                                                                             + 3;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v117) = 0;
                                                                                          v117 += 11;
                                                                                          --v116;
                                                                                        }
                                                                                        while (v116);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v118 = 0;
                                                                                        goto LABEL_195;
                                                                                      }
                                                                                      v118 = 0;
                                                                                      v119 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v119 > 0xFFFFFFFB)
                                                                                        goto LABEL_195;
                                                                                      if ((v119 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_195;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_195;
                                                                                      v118 = v73 & 0xFFFFFFFE;
                                                                                      v120 = 15;
                                                                                      v121 = v118;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v120 - 11) & 0xFFFFFFFE)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * v120) = 0;
                                                                                        v120 += 22;
                                                                                        v121 -= 2;
                                                                                      }
                                                                                      while (v121);
                                                                                      if (v118 != v73)
                                                                                      {
LABEL_195:
                                                                                        v122 = v73 - v118;
                                                                                        v123 = 11 * v118
                                                                                             + 4;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v123) = 0;
                                                                                          v123 += 11;
                                                                                          --v122;
                                                                                        }
                                                                                        while (v122);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v124 = 0;
                                                                                        goto LABEL_205;
                                                                                      }
                                                                                      v124 = 0;
                                                                                      v125 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v125 > 0xFFFFFFFA)
                                                                                        goto LABEL_205;
                                                                                      if ((v125 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_205;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_205;
                                                                                      v124 = v73 & 0xFFFFFFFE;
                                                                                      v126 = 16;
                                                                                      v127 = v124;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v126 - 11)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v126 & 0xFFFFFFFE)) = 0;
                                                                                        v126 += 22;
                                                                                        v127 -= 2;
                                                                                      }
                                                                                      while (v127);
                                                                                      if (v124 != v73)
                                                                                      {
LABEL_205:
                                                                                        v128 = v73 - v124;
                                                                                        v129 = 11 * v124
                                                                                             + 5;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v129) = 0;
                                                                                          v129 += 11;
                                                                                          --v128;
                                                                                        }
                                                                                        while (v128);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v130 = 0;
                                                                                        goto LABEL_215;
                                                                                      }
                                                                                      v130 = 0;
                                                                                      v131 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v131 > 0xFFFFFFF9)
                                                                                        goto LABEL_215;
                                                                                      if ((v131 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_215;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_215;
                                                                                      v130 = v73 & 0xFFFFFFFE;
                                                                                      v132 = 17;
                                                                                      v133 = v130;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v132 - 11) & 0xFFFFFFFE)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * v132) = 0;
                                                                                        v132 += 22;
                                                                                        v133 -= 2;
                                                                                      }
                                                                                      while (v133);
                                                                                      if (v130 != v73)
                                                                                      {
LABEL_215:
                                                                                        v134 = v73 - v130;
                                                                                        v135 = 11 * v130
                                                                                             + 6;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v135) = 0;
                                                                                          v135 += 11;
                                                                                          --v134;
                                                                                        }
                                                                                        while (v134);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v136 = 0;
                                                                                        goto LABEL_225;
                                                                                      }
                                                                                      v136 = 0;
                                                                                      v137 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v137 > 0xFFFFFFF8)
                                                                                        goto LABEL_225;
                                                                                      if ((v137 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_225;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_225;
                                                                                      v136 = v73 & 0xFFFFFFFE;
                                                                                      v138 = 18;
                                                                                      v139 = v136;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v138 - 11)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v138 & 0xFFFFFFFE)) = 0;
                                                                                        v138 += 22;
                                                                                        v139 -= 2;
                                                                                      }
                                                                                      while (v139);
                                                                                      if (v136 != v73)
                                                                                      {
LABEL_225:
                                                                                        v140 = v73 - v136;
                                                                                        v141 = 11 * v136
                                                                                             + 7;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v141) = 0;
                                                                                          v141 += 11;
                                                                                          --v140;
                                                                                        }
                                                                                        while (v140);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v142 = 0;
                                                                                        goto LABEL_235;
                                                                                      }
                                                                                      v142 = 0;
                                                                                      v143 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v143 > 0xFFFFFFF7)
                                                                                        goto LABEL_235;
                                                                                      if ((v143 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_235;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_235;
                                                                                      v142 = v73 & 0xFFFFFFFE;
                                                                                      v144 = 19;
                                                                                      v145 = v142;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v144 - 11) & 0xFFFFFFFE)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * v144) = 0;
                                                                                        v144 += 22;
                                                                                        v145 -= 2;
                                                                                      }
                                                                                      while (v145);
                                                                                      if (v142 != v73)
                                                                                      {
LABEL_235:
                                                                                        v146 = v73 - v142;
                                                                                        v147 = 11 * v142
                                                                                             + 8;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v147) = 0;
                                                                                          v147 += 11;
                                                                                          --v146;
                                                                                        }
                                                                                        while (v146);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v148 = 0;
                                                                                        goto LABEL_245;
                                                                                      }
                                                                                      v148 = 0;
                                                                                      v149 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v149 > 0xFFFFFFF6)
                                                                                        goto LABEL_245;
                                                                                      if ((v149 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_245;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_245;
                                                                                      v148 = v73 & 0xFFFFFFFE;
                                                                                      v150 = 20;
                                                                                      v151 = v148;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v150 - 11)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (v150 & 0xFFFFFFFE)) = 0;
                                                                                        v150 += 22;
                                                                                        v151 -= 2;
                                                                                      }
                                                                                      while (v151);
                                                                                      if (v148 != v73)
                                                                                      {
LABEL_245:
                                                                                        v152 = v73 - v148;
                                                                                        v153 = 11 * v148
                                                                                             + 9;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v153) = 0;
                                                                                          v153 += 11;
                                                                                          --v152;
                                                                                        }
                                                                                        while (v152);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v154 = 0;
                                                                                        goto LABEL_255;
                                                                                      }
                                                                                      v154 = 0;
                                                                                      v155 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v155 > 0xFFFFFFF5)
                                                                                        goto LABEL_255;
                                                                                      if ((v155 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_255;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_255;
                                                                                      v154 = v73 & 0xFFFFFFFE;
                                                                                      v156 = 21;
                                                                                      v157 = v154;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (((_DWORD)v156 - 11) & 0xFFFFFFFE)) = 0;
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * v156) = 0;
                                                                                        v156 += 22;
                                                                                        v157 -= 2;
                                                                                      }
                                                                                      while (v157);
                                                                                      if (v154 != v73)
                                                                                      {
LABEL_255:
                                                                                        v158 = v73 - v154;
                                                                                        v159 = 11 * v154
                                                                                             + 10;
                                                                                        do
                                                                                        {
                                                                                          *(_DWORD *)(v74 + 4 * v159) = 0;
                                                                                          v159 += 11;
                                                                                          --v158;
                                                                                        }
                                                                                        while (v158);
                                                                                      }
                                                                                    }
                                                                                    for (i = 0; i != 11; ++i)
                                                                                    {
                                                                                      v161 = 11 * v292 + i;
                                                                                      v162 = *(float *)(v8 + 4 * v161);
                                                                                      v163 = (float *)(v8 + 4 * i);
                                                                                      v164 = *v163;
                                                                                      *(float *)(v74 + 4 * i) = (float)((float)(v162 + *v163) + v163[11]) / 3.0;
                                                                                      if ((int)a2 >= 3)
                                                                                      {
                                                                                        v165 = 0;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * (i + v165 + 11)) = (float)((float)(*(float *)(v8 + 4 * (i + v165)) + *(float *)(v8 + 4 * (i + v165 + 11))) + *(float *)(v8 + 4 * (i + v165 + 22))) / 3.0;
                                                                                          v165 += 11;
                                                                                        }
                                                                                        while (11 * v292 - 11 != v165);
                                                                                      }
                                                                                      *(float *)(v74 + 4 * v161) = (float)(v164 + (float)(v162 + *(float *)(v8 + 4 * (v290 - 22 + i)))) / 3.0;
                                                                                    }
                                                                                    if ((int)a2 >= 1)
                                                                                    {
                                                                                      v166 = 0;
                                                                                      do
                                                                                      {
                                                                                        v167 = 4 * v166;
                                                                                        v168 = fmax(fmin((float)(*(float *)(v74 + v167) * 255.0)/ v48, 255.0), 0.0);
                                                                                        *(float *)(v74 + v167) = v168;
                                                                                        v169 = 4
                                                                                             * (v166 + 1);
                                                                                        v170 = fmax(fmin((float)(*(float *)(v74 + v169) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v171 = 4
                                                                                             * (v166 + 2);
                                                                                        *(float *)(v74 + v169) = v170;
                                                                                        v172 = fmax(fmin((float)(*(float *)(v74 + v171) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v173 = 4
                                                                                             * (v166 + 3);
                                                                                        *(float *)(v74 + v171) = v172;
                                                                                        v174 = fmax(fmin((float)(*(float *)(v74 + v173) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v175 = 4
                                                                                             * (v166 + 4);
                                                                                        *(float *)(v74 + v173) = v174;
                                                                                        v176 = fmax(fmin((float)(*(float *)(v74 + v175) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v177 = 4
                                                                                             * (v166 + 5);
                                                                                        *(float *)(v74 + v175) = v176;
                                                                                        v178 = fmax(fmin((float)(*(float *)(v74 + v177) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v179 = 4
                                                                                             * (v166 + 6);
                                                                                        *(float *)(v74 + v177) = v178;
                                                                                        v180 = fmax(fmin((float)(*(float *)(v74 + v179) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v181 = 4
                                                                                             * (v166 + 7);
                                                                                        *(float *)(v74 + v179) = v180;
                                                                                        v182 = fmax(fmin((float)(*(float *)(v74 + v181) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v183 = 4
                                                                                             * (v166 + 8);
                                                                                        *(float *)(v74 + v181) = v182;
                                                                                        v184 = fmax(fmin((float)(*(float *)(v74 + v183) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v185 = 4
                                                                                             * (v166 + 9);
                                                                                        *(float *)(v74 + v183) = v184;
                                                                                        v186 = fmax(fmin((float)(*(float *)(v74 + v185) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        v187 = 4
                                                                                             * (v166 + 10);
                                                                                        *(float *)(v74 + v185) = v186;
                                                                                        v188 = fmax(fmin((float)(*(float *)(v74 + v187) * 2550.0)/ v50, 255.0), 0.0);
                                                                                        *(float *)(v74 + v187) = v188;
                                                                                        v166 += 11;
                                                                                      }
                                                                                      while (11 * a2 != v166);
                                                                                    }
                                                                                    v189 = a3 - 1;
                                                                                    if (a3 > 1)
                                                                                    {
                                                                                      v190 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + v190)) = *(_DWORD *)(v74 + 4 * v190);
                                                                                        v190 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v190);
                                                                                      v191 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 1 + v191)) = *(_DWORD *)(v74 + 4 * (v191 + 1));
                                                                                        v191 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v191);
                                                                                      v192 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 2 + v192)) = *(_DWORD *)(v74 + 4 * (v192 + 2));
                                                                                        v192 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v192);
                                                                                      v193 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 3 + v193)) = *(_DWORD *)(v74 + 4 * (v193 + 3));
                                                                                        v193 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v193);
                                                                                      v194 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 4 + v194)) = *(_DWORD *)(v74 + 4 * (v194 + 4));
                                                                                        v194 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v194);
                                                                                      v195 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 5 + v195)) = *(_DWORD *)(v74 + 4 * (v195 + 5));
                                                                                        v195 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v195);
                                                                                      v196 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 6 + v196)) = *(_DWORD *)(v74 + 4 * (v196 + 6));
                                                                                        v196 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v196);
                                                                                      v197 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 7 + v197)) = *(_DWORD *)(v74 + 4 * (v197 + 7));
                                                                                        v197 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v197);
                                                                                      v198 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 8 + v198)) = *(_DWORD *)(v74 + 4 * (v198 + 8));
                                                                                        v198 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v198);
                                                                                      v199 = 0;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 9 + v199)) = *(_DWORD *)(v74 + 4 * (v199 + 9));
                                                                                        v199 += 11;
                                                                                      }
                                                                                      while (11 * v189 != v199);
                                                                                      v200 = 0;
                                                                                      v201 = 11 * v189;
                                                                                      do
                                                                                      {
                                                                                        *(_DWORD *)(v74
                                                                                                  + 4 * (11 * a2 + 10 + v200)) = *(_DWORD *)(v74 + 4 * (v200 + 10));
                                                                                        v200 += 11;
                                                                                      }
                                                                                      while (v201 != v200);
                                                                                    }
                                                                                    if ((int)v73 >= 1)
                                                                                    {
                                                                                      if ((_DWORD)v73 == 1)
                                                                                      {
                                                                                        v202 = 0;
                                                                                        goto LABEL_295;
                                                                                      }
                                                                                      v202 = v73 & 0xFFFFFFFE;
                                                                                      v203 = 11;
                                                                                      v204 = v202;
                                                                                      do
                                                                                      {
                                                                                        v205 = 4 * v203;
                                                                                        v206 = *(float *)(v74 + v205)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (((_DWORD)v203 - 11) & 0xFFFFFFFE)) = *(float *)(v74 + 4 * (((_DWORD)v203 - 11) & 0xFFFFFFFE)) / 255.0;
                                                                                        *(float *)(v74 + v205) = v206;
                                                                                        v203 += 22;
                                                                                        v204 -= 2;
                                                                                      }
                                                                                      while (v204);
                                                                                      if (v202 != v73)
                                                                                      {
LABEL_295:
                                                                                        v207 = v73 - v202;
                                                                                        v208 = 11 * v202;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v208) = *(float *)(v74 + 4 * v208) / 255.0;
                                                                                          v208 += 11;
                                                                                          --v207;
                                                                                        }
                                                                                        while (v207);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v209 = 0;
                                                                                        goto LABEL_305;
                                                                                      }
                                                                                      v209 = 0;
                                                                                      v210 = 11
                                                                                           * (v73 - 1);
                                                                                      if ((_DWORD)v210 == -1)
                                                                                        goto LABEL_305;
                                                                                      if ((v210 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_305;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_305;
                                                                                      v209 = v73 & 0xFFFFFFFE;
                                                                                      v211 = 12;
                                                                                      v212 = v209;
                                                                                      do
                                                                                      {
                                                                                        v213 = v74
                                                                                             + 4
                                                                                             * (((_DWORD)v211 - 12) & 0xFFFFFFFE);
                                                                                        v214 = 4
                                                                                             * (v211 & 0xFFFFFFFE);
                                                                                        v215 = *(float *)(v74 + v214)
                                                                                             / 255.0;
                                                                                        *(float *)(v213 + 4) = *(float *)(v213 + 4) / 255.0;
                                                                                        *(float *)(v74 + v214) = v215;
                                                                                        v211 += 22;
                                                                                        v212 -= 2;
                                                                                      }
                                                                                      while (v212);
                                                                                      if (v209 != v73)
                                                                                      {
LABEL_305:
                                                                                        v216 = v73 - v209;
                                                                                        v217 = 11 * v209
                                                                                             + 1;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v217) = *(float *)(v74 + 4 * v217) / 255.0;
                                                                                          v217 += 11;
                                                                                          --v216;
                                                                                        }
                                                                                        while (v216);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v218 = 0;
                                                                                        goto LABEL_315;
                                                                                      }
                                                                                      v218 = 0;
                                                                                      v219 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v219 > 0xFFFFFFFD)
                                                                                        goto LABEL_315;
                                                                                      if ((v219 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_315;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_315;
                                                                                      v218 = v73 & 0xFFFFFFFE;
                                                                                      v220 = 13;
                                                                                      v221 = v218;
                                                                                      do
                                                                                      {
                                                                                        v222 = 4 * v220;
                                                                                        v223 = *(float *)(v74 + v222)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (((_DWORD)v220 - 11) & 0xFFFFFFFE)) = *(float *)(v74 + 4 * (((_DWORD)v220 - 11) & 0xFFFFFFFE)) / 255.0;
                                                                                        *(float *)(v74 + v222) = v223;
                                                                                        v220 += 22;
                                                                                        v221 -= 2;
                                                                                      }
                                                                                      while (v221);
                                                                                      if (v218 != v73)
                                                                                      {
LABEL_315:
                                                                                        v224 = v73 - v218;
                                                                                        v225 = 11 * v218
                                                                                             + 2;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v225) = *(float *)(v74 + 4 * v225) / 255.0;
                                                                                          v225 += 11;
                                                                                          --v224;
                                                                                        }
                                                                                        while (v224);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v226 = 0;
                                                                                        goto LABEL_325;
                                                                                      }
                                                                                      v226 = 0;
                                                                                      v227 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v227 > 0xFFFFFFFC)
                                                                                        goto LABEL_325;
                                                                                      if ((v227 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_325;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_325;
                                                                                      v226 = v73 & 0xFFFFFFFE;
                                                                                      v228 = 14;
                                                                                      v229 = v226;
                                                                                      do
                                                                                      {
                                                                                        v230 = 4
                                                                                             * (v228 & 0xFFFFFFFE);
                                                                                        v231 = *(float *)(v74 + v230)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (v228 - 11)) = *(float *)(v74 + 4 * (v228 - 11)) / 255.0;
                                                                                        *(float *)(v74 + v230) = v231;
                                                                                        v228 += 22;
                                                                                        v229 -= 2;
                                                                                      }
                                                                                      while (v229);
                                                                                      if (v226 != v73)
                                                                                      {
LABEL_325:
                                                                                        v232 = v73 - v226;
                                                                                        v233 = 11 * v226
                                                                                             + 3;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v233) = *(float *)(v74 + 4 * v233) / 255.0;
                                                                                          v233 += 11;
                                                                                          --v232;
                                                                                        }
                                                                                        while (v232);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v234 = 0;
                                                                                        goto LABEL_335;
                                                                                      }
                                                                                      v234 = 0;
                                                                                      v235 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v235 > 0xFFFFFFFB)
                                                                                        goto LABEL_335;
                                                                                      if ((v235 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_335;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_335;
                                                                                      v234 = v73 & 0xFFFFFFFE;
                                                                                      v236 = 15;
                                                                                      v237 = v234;
                                                                                      do
                                                                                      {
                                                                                        v238 = 4 * v236;
                                                                                        v239 = *(float *)(v74 + v238)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (((_DWORD)v236 - 11) & 0xFFFFFFFE)) = *(float *)(v74 + 4 * (((_DWORD)v236 - 11) & 0xFFFFFFFE)) / 255.0;
                                                                                        *(float *)(v74 + v238) = v239;
                                                                                        v236 += 22;
                                                                                        v237 -= 2;
                                                                                      }
                                                                                      while (v237);
                                                                                      if (v234 != v73)
                                                                                      {
LABEL_335:
                                                                                        v240 = v73 - v234;
                                                                                        v241 = 11 * v234
                                                                                             + 4;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v241) = *(float *)(v74 + 4 * v241) / 255.0;
                                                                                          v241 += 11;
                                                                                          --v240;
                                                                                        }
                                                                                        while (v240);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v242 = 0;
                                                                                        goto LABEL_345;
                                                                                      }
                                                                                      v242 = 0;
                                                                                      v243 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v243 > 0xFFFFFFFA)
                                                                                        goto LABEL_345;
                                                                                      if ((v243 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_345;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_345;
                                                                                      v242 = v73 & 0xFFFFFFFE;
                                                                                      v244 = 16;
                                                                                      v245 = v242;
                                                                                      do
                                                                                      {
                                                                                        v246 = 4
                                                                                             * (v244 & 0xFFFFFFFE);
                                                                                        v247 = *(float *)(v74 + v246)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (v244 - 11)) = *(float *)(v74 + 4 * (v244 - 11)) / 255.0;
                                                                                        *(float *)(v74 + v246) = v247;
                                                                                        v244 += 22;
                                                                                        v245 -= 2;
                                                                                      }
                                                                                      while (v245);
                                                                                      if (v242 != v73)
                                                                                      {
LABEL_345:
                                                                                        v248 = v73 - v242;
                                                                                        v249 = 11 * v242
                                                                                             + 5;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v249) = *(float *)(v74 + 4 * v249) / 255.0;
                                                                                          v249 += 11;
                                                                                          --v248;
                                                                                        }
                                                                                        while (v248);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v250 = 0;
                                                                                        goto LABEL_355;
                                                                                      }
                                                                                      v250 = 0;
                                                                                      v251 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v251 > 0xFFFFFFF9)
                                                                                        goto LABEL_355;
                                                                                      if ((v251 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_355;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_355;
                                                                                      v250 = v73 & 0xFFFFFFFE;
                                                                                      v252 = 17;
                                                                                      v253 = v250;
                                                                                      do
                                                                                      {
                                                                                        v254 = 4 * v252;
                                                                                        v255 = *(float *)(v74 + v254)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (((_DWORD)v252 - 11) & 0xFFFFFFFE)) = *(float *)(v74 + 4 * (((_DWORD)v252 - 11) & 0xFFFFFFFE)) / 255.0;
                                                                                        *(float *)(v74 + v254) = v255;
                                                                                        v252 += 22;
                                                                                        v253 -= 2;
                                                                                      }
                                                                                      while (v253);
                                                                                      if (v250 != v73)
                                                                                      {
LABEL_355:
                                                                                        v256 = v73 - v250;
                                                                                        v257 = 11 * v250
                                                                                             + 6;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v257) = *(float *)(v74 + 4 * v257) / 255.0;
                                                                                          v257 += 11;
                                                                                          --v256;
                                                                                        }
                                                                                        while (v256);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v258 = 0;
                                                                                        goto LABEL_365;
                                                                                      }
                                                                                      v258 = 0;
                                                                                      v259 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v259 > 0xFFFFFFF8)
                                                                                        goto LABEL_365;
                                                                                      if ((v259 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_365;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_365;
                                                                                      v258 = v73 & 0xFFFFFFFE;
                                                                                      v260 = 18;
                                                                                      v261 = v258;
                                                                                      do
                                                                                      {
                                                                                        v262 = 4
                                                                                             * (v260 & 0xFFFFFFFE);
                                                                                        v263 = *(float *)(v74 + v262)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (v260 - 11)) = *(float *)(v74 + 4 * (v260 - 11)) / 255.0;
                                                                                        *(float *)(v74 + v262) = v263;
                                                                                        v260 += 22;
                                                                                        v261 -= 2;
                                                                                      }
                                                                                      while (v261);
                                                                                      if (v258 != v73)
                                                                                      {
LABEL_365:
                                                                                        v264 = v73 - v258;
                                                                                        v265 = 11 * v258
                                                                                             + 7;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v265) = *(float *)(v74 + 4 * v265) / 255.0;
                                                                                          v265 += 11;
                                                                                          --v264;
                                                                                        }
                                                                                        while (v264);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v266 = 0;
                                                                                        goto LABEL_375;
                                                                                      }
                                                                                      v266 = 0;
                                                                                      v267 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v267 > 0xFFFFFFF7)
                                                                                        goto LABEL_375;
                                                                                      if ((v267 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_375;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_375;
                                                                                      v266 = v73 & 0xFFFFFFFE;
                                                                                      v268 = 19;
                                                                                      v269 = v266;
                                                                                      do
                                                                                      {
                                                                                        v270 = 4 * v268;
                                                                                        v271 = *(float *)(v74 + v270)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (((_DWORD)v268 - 11) & 0xFFFFFFFE)) = *(float *)(v74 + 4 * (((_DWORD)v268 - 11) & 0xFFFFFFFE)) / 255.0;
                                                                                        *(float *)(v74 + v270) = v271;
                                                                                        v268 += 22;
                                                                                        v269 -= 2;
                                                                                      }
                                                                                      while (v269);
                                                                                      if (v266 != v73)
                                                                                      {
LABEL_375:
                                                                                        v272 = v73 - v266;
                                                                                        v273 = 11 * v266
                                                                                             + 8;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v273) = *(float *)(v74 + 4 * v273) / 255.0;
                                                                                          v273 += 11;
                                                                                          --v272;
                                                                                        }
                                                                                        while (v272);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v274 = 0;
                                                                                        goto LABEL_385;
                                                                                      }
                                                                                      v274 = 0;
                                                                                      v275 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v275 > 0xFFFFFFF6)
                                                                                        goto LABEL_385;
                                                                                      if ((v275 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_385;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_385;
                                                                                      v274 = v73 & 0xFFFFFFFE;
                                                                                      v276 = 20;
                                                                                      v277 = v274;
                                                                                      do
                                                                                      {
                                                                                        v278 = 4
                                                                                             * (v276 & 0xFFFFFFFE);
                                                                                        v279 = *(float *)(v74 + v278)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (v276 - 11)) = *(float *)(v74 + 4 * (v276 - 11)) / 255.0;
                                                                                        *(float *)(v74 + v278) = v279;
                                                                                        v276 += 22;
                                                                                        v277 -= 2;
                                                                                      }
                                                                                      while (v277);
                                                                                      if (v274 != v73)
                                                                                      {
LABEL_385:
                                                                                        v280 = v73 - v274;
                                                                                        v281 = 11 * v274
                                                                                             + 9;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v281) = *(float *)(v74 + 4 * v281) / 255.0;
                                                                                          v281 += 11;
                                                                                          --v280;
                                                                                        }
                                                                                        while (v280);
                                                                                      }
                                                                                      if (v73 < 2)
                                                                                      {
                                                                                        v282 = 0;
                                                                                        goto LABEL_395;
                                                                                      }
                                                                                      v282 = 0;
                                                                                      v283 = 11
                                                                                           * (v73 - 1);
                                                                                      if (v283 > 0xFFFFFFF5)
                                                                                        goto LABEL_395;
                                                                                      if ((v283 & 0xFFFFFFFF00000000) != 0)
                                                                                        goto LABEL_395;
                                                                                      if ((unint64_t)(v73 - 1) >> 32)
                                                                                        goto LABEL_395;
                                                                                      v282 = v73 & 0xFFFFFFFE;
                                                                                      v284 = 21;
                                                                                      v285 = v282;
                                                                                      do
                                                                                      {
                                                                                        v286 = 4 * v284;
                                                                                        v287 = *(float *)(v74 + v286)
                                                                                             / 255.0;
                                                                                        *(float *)(v74
                                                                                                 + 4
                                                                                                 * (((_DWORD)v284 - 11) & 0xFFFFFFFE)) = *(float *)(v74 + 4 * (((_DWORD)v284 - 11) & 0xFFFFFFFE)) / 255.0;
                                                                                        *(float *)(v74 + v286) = v287;
                                                                                        v284 += 22;
                                                                                        v285 -= 2;
                                                                                      }
                                                                                      while (v285);
                                                                                      if (v282 != v73)
                                                                                      {
LABEL_395:
                                                                                        v288 = v73 - v282;
                                                                                        v289 = 11 * v282
                                                                                             + 10;
                                                                                        do
                                                                                        {
                                                                                          *(float *)(v74 + 4 * v289) = *(float *)(v74 + 4 * v289) / 255.0;
                                                                                          v289 += 11;
                                                                                          --v288;
                                                                                        }
                                                                                        while (v288);
                                                                                      }
                                                                                    }
                                                                                    JUMPOUT(0x1C3B812C8);
                                                                                  }
                                                                                }
                                                                                else if (v44 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3))))
                                                                                {
                                                                                  goto LABEL_79;
                                                                                }
                                                                                v51 = &begin[24 * v44];
                                                                                v52 = *(double **)v51;
                                                                                v53 = *((_QWORD *)v51 + 1)
                                                                                    - *(_QWORD *)v51;
                                                                                if ((unint64_t)v53 >= 0x50)
                                                                                {
                                                                                  v54 = (unint64_t)(v53 >> 3) >> 1;
                                                                                  v55 = v52[2];
                                                                                  v56 = v52[3];
                                                                                  v59 = *v52;
                                                                                  v58 = v52[1];
                                                                                  v57 = v52 + 5;
                                                                                  v60 = (int)vcvtmd_s64_f64(v49* (atan2(v56 - v58, v55 - v59)+ 6.28318531))% (int)a2;
                                                                                  v61 = 3;
                                                                                  if (v54 > 3)
                                                                                    v61 = v54;
                                                                                  v62 = v61 - 2;
                                                                                  do
                                                                                  {
                                                                                    v64 = v55;
                                                                                    v65 = v56;
                                                                                    v55 = *(v57 - 1);
                                                                                    v56 = *v57;
                                                                                    v66 = v55 - v64;
                                                                                    v67 = *v57 - v65;
                                                                                    v68 = sqrt(v67 * v67 + v66 * v66);
                                                                                    v69 = (int)vcvtmd_s64_f64(v49* (atan2(v67, v66)+ 6.28318531))% (int)a2;
                                                                                    v70 = 4 * (11 * v69);
                                                                                    v71 = v68 + *(float *)(v8 + v70);
                                                                                    *(float *)(v8 + v70) = v71;
                                                                                    if (v60 == v69)
                                                                                    {
                                                                                      v63 = 1;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v72 = (float)((int)(a2 - v60 + v69)
                                                                                                  % (int)a2);
                                                                                      if ((float)((float)((float)((float)(int)a2 * 20.0) / 360.0)
                                                                                                 + 1.0) <= v72)
                                                                                      {
                                                                                        if ((float)((float)((float)((float)(int)a2 * 70.0) / 360.0) + 1.0) <= v72)
                                                                                        {
                                                                                          if ((float)((float)((float)((float)(int)a2 * 110.0) / 360.0) + 1.0) <= v72)
                                                                                          {
                                                                                            if ((float)((float)((float)((float)(int)a2 * 160.0) / 360.0) + 1.0) <= v72)
                                                                                            {
                                                                                              if ((float)((float)((float)((float)(int)a2 * 200.0) / 360.0) + 1.0) <= v72)
                                                                                              {
                                                                                                if ((float)((float)((float)((float)(int)a2 * 250.0) / 360.0) + 1.0) <= v72)
                                                                                                {
                                                                                                  if ((float)((float)((float)((float)(int)a2 * 290.0) / 360.0) + 1.0) <= v72)
                                                                                                  {
                                                                                                    if ((float)((float)((float)((float)(int)a2 * 340.0) / 360.0) + 1.0) <= v72)
                                                                                                      v63 = 10;
                                                                                                    else
                                                                                                      v63 = 9;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v63 = 8;
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v63 = 7;
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v63 = 6;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v63 = 5;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v63 = 4;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v63 = 3;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v63 = 2;
                                                                                      }
                                                                                    }
                                                                                    v48 = v48 + v68;
                                                                                    *(float *)(v8
                                                                                             + 4
                                                                                             * (v63 + 11 * v69)) = *(float *)(v8 + 4 * (v63 + 11 * v69)) + 1.0;
                                                                                    v50 = v50 + 1.0;
                                                                                    v57 += 2;
                                                                                    v60 = v69;
                                                                                    --v62;
                                                                                  }
                                                                                  while (v62);
                                                                                }
                                                                                ++v44;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v38 = 0;
                                                                      }
                                                                      v39 = a2 - v38;
                                                                      v40 = 11 * v38 + 9;
                                                                      do
                                                                      {
                                                                        *(_DWORD *)(v7 + 4 * v40) = 0;
                                                                        v40 += 11;
                                                                        --v39;
                                                                      }
                                                                      while (v39);
                                                                      goto LABEL_45;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              else
                                                              {
                                                                v35 = 0;
                                                              }
                                                              v36 = a2 - v35;
                                                              v37 = 11 * v35 + 8;
                                                              do
                                                              {
                                                                *(_DWORD *)(v7 + 4 * v37) = 0;
                                                                v37 += 11;
                                                                --v36;
                                                              }
                                                              while (v36);
                                                              goto LABEL_41;
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v32 = 0;
                                                      }
                                                      v33 = a2 - v32;
                                                      v34 = 11 * v32 + 7;
                                                      do
                                                      {
                                                        *(_DWORD *)(v7 + 4 * v34) = 0;
                                                        v34 += 11;
                                                        --v33;
                                                      }
                                                      while (v33);
                                                      goto LABEL_37;
                                                    }
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                v29 = 0;
                                              }
                                              v30 = a2 - v29;
                                              v31 = 11 * v29 + 6;
                                              do
                                              {
                                                *(_DWORD *)(v7 + 4 * v31) = 0;
                                                v31 += 11;
                                                --v30;
                                              }
                                              while (v30);
                                              goto LABEL_33;
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        v26 = 0;
                                      }
                                      v27 = a2 - v26;
                                      v28 = 11 * v26 + 5;
                                      do
                                      {
                                        *(_DWORD *)(v7 + 4 * v28) = 0;
                                        v28 += 11;
                                        --v27;
                                      }
                                      while (v27);
                                      goto LABEL_29;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                v23 = 0;
                              }
                              v24 = a2 - v23;
                              v25 = 11 * v23 + 4;
                              do
                              {
                                *(_DWORD *)(v7 + 4 * v25) = 0;
                                v25 += 11;
                                --v24;
                              }
                              while (v24);
                              goto LABEL_25;
                            }
                          }
                        }
                      }
                      else
                      {
                        v20 = 0;
                      }
                      v21 = a2 - v20;
                      v22 = 11 * v20 + 3;
                      do
                      {
                        *(_DWORD *)(v7 + 4 * v22) = 0;
                        v22 += 11;
                        --v21;
                      }
                      while (v21);
                      goto LABEL_21;
                    }
                  }
                }
              }
              else
              {
                v17 = 0;
              }
              v18 = a2 - v17;
              v19 = 11 * v17 + 2;
              do
              {
                *(_DWORD *)(v7 + 4 * v19) = 0;
                v19 += 11;
                --v18;
              }
              while (v18);
              goto LABEL_17;
            }
          }
        }
      }
      else
      {
        v14 = 0;
      }
      v15 = a2 - v14;
      v16 = 11 * v14 + 1;
      do
      {
        *(_DWORD *)(v7 + 4 * v16) = 0;
        v16 += 11;
        --v15;
      }
      while (v15);
      goto LABEL_13;
    }
  }
  v12 = a2 - v9;
  v13 = 11 * v9;
  do
  {
    *(_DWORD *)(v7 + 4 * v13) = 0;
    v13 += 11;
    --v12;
  }
  while (v12);
  goto LABEL_9;
}

