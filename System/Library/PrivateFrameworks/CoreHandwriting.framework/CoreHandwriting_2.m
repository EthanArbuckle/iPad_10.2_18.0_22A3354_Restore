void sub_1BE72675C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isEqualToString;
  id v34;

  v34 = a2;
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_8;
  objc_msgSend_string(v34, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("\\begin{array}{lr}"), v10, v11, v12) & 1) == 0)
  {
    objc_msgSend_string(v34, v13, v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v18, v19, (uint64_t)CFSTR("\\end{array}"), v20, v21, v22))
    {

      goto LABEL_5;
    }
    objc_msgSend_string(v34, v23, v24, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v28, v29, (uint64_t)CFSTR("&"), v30, v31, v32);

    if ((isEqualToString & 1) != 0)
      goto LABEL_6;
LABEL_8:
    objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v34, v5, v6, v7);
    goto LABEL_9;
  }
LABEL_5:

LABEL_6:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_9:

}

void sub_1BE72683C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE726864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE72687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE726D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1BE726EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE726EF4(uint64_t a1, void *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isEqualToString;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  void **v34;
  CHTokenizedMathResultToken *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  void *v50;
  CHTokenizedMathResultToken *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  CHTokenizedMathResultToken *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  CHTokenizedMathResultToken *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;

  v3 = a2;
  v8 = v3;
  v104 = v3;
  if (!*(_BYTE *)(a1 + 56)
    || (objc_msgSend_string(v3, v3, v4, v5, v6, v7),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        isEqualToString = objc_msgSend_isEqualToString_(v9, v10, (uint64_t)CFSTR("\\hline"), v11, v12, v13),
        v9,
        v8 = v104,
        isEqualToString))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v8, (uint64_t)v8, v5, v6, v7);
    goto LABEL_4;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v34 = (void **)(a1 + 32);
LABEL_18:
    objc_msgSend_addObject_(*v34, v8, (uint64_t)v8, v5, v6, v7);
    goto LABEL_20;
  }
  objc_msgSend_string(v104, v104, v15, v5, v6, v7);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  if (qword_1EF568C88 != -1)
    dispatch_once(&qword_1EF568C88, &unk_1E77F4260);
  v21 = objc_msgSend_containsObject_((void *)qword_1EF568C90, v16, (uint64_t)v20, v17, v18, v19);

  if (!v21)
  {
    v49 = (double *)MEMORY[0x1E0C9D628];
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) && *(_BYTE *)(a1 + 57))
    {
      v50 = *(void **)(a1 + 32);
      v51 = [CHTokenizedMathResultToken alloc];
      objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v52, v53, v54, v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v51, v58, (uint64_t)CFSTR("\\color{orange}{+}"), (uint64_t)v57, 8, v59, 1.0, *v49, v49[1], v49[2], v49[3]);
      objc_msgSend_addObject_(v50, v61, (uint64_t)v60, v62, v63, v64);

    }
    v34 = (void **)(a1 + 32);
    v65 = *(void **)(a1 + 32);
    v66 = [CHTokenizedMathResultToken alloc];
    objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v67, v68, v69, v70, v71);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v66, v72, (uint64_t)CFSTR("&"), (uint64_t)v41, 1, v73, 1.0, *v49, v49[1], v49[2], v49[3]);
    objc_msgSend_addObject_(v65, v74, (uint64_t)v44, v75, v76, v77);
    goto LABEL_17;
  }
  v26 = v104;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    objc_msgSend_string(v104, v104, v22, v23, v24, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend_isEqualToString_(v27, v28, (uint64_t)CFSTR("-"), v29, v30, v31);

    v26 = v104;
    if (v32)
    {
      v34 = (void **)(a1 + 32);
      v33 = *(void **)(a1 + 32);
      v35 = [CHTokenizedMathResultToken alloc];
      objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v36, v37, v38, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v35, v42, (uint64_t)CFSTR("&"), (uint64_t)v41, 1, v43, 1.0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
      objc_msgSend_addObject_(v33, v45, (uint64_t)v44, v46, v47, v48);
LABEL_17:

      v8 = v104;
      goto LABEL_18;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v26, (uint64_t)v26, v23, v24, v25);
  v83 = *(void **)(a1 + 32);
  v84 = [CHTokenizedMathResultToken alloc];
  objc_msgSend_indexSet(MEMORY[0x1E0CB36B8], v85, v86, v87, v88, v89);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v84, v91, (uint64_t)CFSTR("&"), (uint64_t)v90, 1, v92, 1.0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
  objc_msgSend_addObject_(v83, v94, (uint64_t)v93, v95, v96, v97);

LABEL_20:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  objc_msgSend_string(v104, v78, v79, v80, v81, v82);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  v103 = objc_msgSend_isEqualToString_(v98, v99, (uint64_t)CFSTR("\\\\"), v100, v101, v102);

  if (v103)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
LABEL_4:

}

void sub_1BE727258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7272E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7272F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE727314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE72732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE727344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE727578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE72761C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;

  v41 = a2;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v41, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BE7277E0;
  v42[3] = &unk_1E77F4450;
  v43 = *(id *)(a1 + 32);
  v15 = v8;
  v44 = v15;
  v45 = *(id *)(a1 + 40);
  objc_msgSend_enumerateIndexesUsingBlock_(v14, v16, (uint64_t)v42, v17, v18, v19);

  v25 = (void *)objc_msgSend_mutableCopy(v41, v20, v21, v22, v23, v24);
  objc_msgSend_setStrokeIndexes_(v25, v26, (uint64_t)v15, v27, v28, v29);
  v30 = *(void **)(a1 + 48);
  v36 = (void *)objc_msgSend_copy(v25, v31, v32, v33, v34, v35);
  objc_msgSend_addObject_(v30, v37, (uint64_t)v36, v38, v39, v40);

}

void sub_1BE727734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v17;

  _Unwind_Resume(a1);
}

void sub_1BE7277E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(a1 + 40);
  v18 = (id)v7;
  v13 = objc_msgSend_indexOfObject_(*(void **)(a1 + 48), v9, v7, v10, v11, v12);
  objc_msgSend_addIndex_(v8, v14, v13, v15, v16, v17);

}

void sub_1BE727834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE727B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE727C4C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;

  v41 = a2;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v41, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BE727DEC;
  v42[3] = &unk_1E77F3DD0;
  v43 = *(id *)(a1 + 32);
  v15 = v8;
  v44 = v15;
  objc_msgSend_enumerateIndexesUsingBlock_(v14, v16, (uint64_t)v42, v17, v18, v19);

  v25 = (void *)objc_msgSend_mutableCopy(v41, v20, v21, v22, v23, v24);
  objc_msgSend_setStrokeIndexes_(v25, v26, (uint64_t)v15, v27, v28, v29);
  v30 = *(void **)(a1 + 40);
  v36 = (void *)objc_msgSend_copy(v25, v31, v32, v33, v34, v35);
  objc_msgSend_addObject_(v30, v37, (uint64_t)v36, v38, v39, v40);

}

void sub_1BE727D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE727DEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];

  v8 = *(void **)(a1 + 32);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BE727E84;
  v21[3] = &unk_1E77F42A8;
  v21[4] = a2;
  objc_msgSend_indexesPassingTest_(v8, a2, (uint64_t)v21, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);

  return objc_msgSend_addIndex_(*(void **)(a1 + 40), v16, (uint64_t)&a2[-v15], v17, v18, v19);
}

void sub_1BE727E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE727E84(uint64_t a1, unint64_t a2)
{
  return *(_QWORD *)(a1 + 32) > a2;
}

void sub_1BE728100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE728118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE72812C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72813C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE728150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE728248(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE728254(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD v42[4];
  id v43;
  uint64_t v44;

  v41 = a2;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v41, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BE7283D8;
  v42[3] = &unk_1E77F44A0;
  v44 = *(_QWORD *)(a1 + 40);
  v15 = v8;
  v43 = v15;
  objc_msgSend_enumerateIndexesUsingBlock_(v14, v16, (uint64_t)v42, v17, v18, v19);

  v25 = (void *)objc_msgSend_mutableCopy(v41, v20, v21, v22, v23, v24);
  objc_msgSend_setStrokeIndexes_(v25, v26, (uint64_t)v15, v27, v28, v29);
  v30 = *(void **)(a1 + 32);
  v36 = (void *)objc_msgSend_copy(v25, v31, v32, v33, v34, v35);
  objc_msgSend_addObject_(v30, v37, (uint64_t)v36, v38, v39, v40);

}

void sub_1BE72834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7283D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)&a2[*(_QWORD *)(a1 + 40)], a4, a5, a6);
}

uint64_t sub_1BE7284AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE728684(a1, a2) + 40;
  sub_1BE728684(v4, a2 + 40);
  sub_1BE728684(a1 + 80, a2 + 80);
  sub_1BE728684(a1 + 120, a2 + 120);
  sub_1BE728684(a1 + 160, a2 + 160);
  sub_1BE728684(a1 + 200, a2 + 200);
  sub_1BE728684(a1 + 240, a2 + 240);
  sub_1BE728684(a1 + 280, a2 + 280);
  sub_1BE728684(a1 + 320, a2 + 320);
  sub_1BE728684(a1 + 360, a2 + 360);
  sub_1BE728684(a1 + 400, a2 + 400);
  sub_1BE728684(a1 + 440, a2 + 440);
  return a1;
}

void sub_1BE7285B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1BE61CB14(v12);
  sub_1BE61CB14(v11);
  sub_1BE61CB14(v18);
  sub_1BE61CB14(v17);
  sub_1BE61CB14(v16);
  sub_1BE61CB14(v15);
  sub_1BE61CB14(v14);
  sub_1BE61CB14(v13);
  sub_1BE61CB14(a9);
  sub_1BE61CB14(a10);
  sub_1BE61CB14(v10);
  _Unwind_Resume(a1);
}

void sub_1BE728634()
{
  JUMPOUT(0x1BE7285FCLL);
}

void sub_1BE72863C()
{
  JUMPOUT(0x1BE728604);
}

void sub_1BE728644()
{
  JUMPOUT(0x1BE72860CLL);
}

void sub_1BE72864C()
{
  JUMPOUT(0x1BE728614);
}

void sub_1BE728654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_1BE61CB14(a10);
  sub_1BE61CB14(v10);
  _Unwind_Resume(a1);
}

void sub_1BE728670(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE61CB14(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE728684(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1BE61F23C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1BE61EC50(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1BE72879C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE61CB14(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7287B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE61CB14(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7287C4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE728E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE728E48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE728E5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE728E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE728E8C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE7294F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE729510(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE729524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE72953C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7297D0(uint64_t a1, CGFloat a2, CGFloat a3)
{
  _BOOL4 IsEmpty;
  CGPath *v7;

  IsEmpty = CGPathIsEmpty(*(CGPathRef *)(a1 + 32));
  v7 = *(CGPath **)(a1 + 32);
  if (IsEmpty)
    CGPathMoveToPoint(v7, 0, a2, a3);
  else
    CGPathAddLineToPoint(v7, 0, a2, a3);
}

double sub_1BE72982C(uint64_t a1, double a2, double a3)
{
  double result;
  CGRect v4;

  v4.origin.x = a2 + -1.0;
  v4.origin.y = a3 + -1.0;
  v4.size.width = *(CGFloat *)(a1 + 32);
  v4.size.height = v4.size.width;
  CGContextFillEllipseInRect(*(CGContextRef *)(a1 + 40), v4);
  return result;
}

uint64_t sub_1BE729B14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend__updateSettings(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

char *CoreHandwriting::synthesis::CHDiffusionPipeline::getPreprocessor@<X0>(CoreHandwriting::synthesis::CHDiffusionPipeline *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *result;
  _QWORD *v19;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E77F0B88;
  *(_OWORD *)(v5 + 8) = xmmword_1BE8D68F0;
  v19 = (_QWORD *)v5;
  v6 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
  {
    v7 = sub_1BE6FEE3C((char **)a3, &v19);
  }
  else
  {
    *v6 = v5;
    v7 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a3 + 8) = v7;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E77F0D60;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)(v8 + 8) = _Q0;
  v19 = (_QWORD *)v8;
  v14 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v14 >= *(_QWORD *)(a3 + 16))
  {
    v15 = sub_1BE6FEE3C((char **)a3, &v19);
  }
  else
  {
    *v14 = v8;
    v15 = (char *)(v14 + 1);
  }
  *(_QWORD *)(a3 + 8) = v15;
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E77F0C70;
  v16[1] = a2;
  v19 = v16;
  v17 = *(_QWORD **)(a3 + 8);
  if ((unint64_t)v17 >= *(_QWORD *)(a3 + 16))
  {
    result = sub_1BE6FEE3C((char **)a3, &v19);
  }
  else
  {
    *v17 = v16;
    result = (char *)(v17 + 1);
  }
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

void sub_1BE729C74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1BE6FA44C(v1);
  _Unwind_Resume(a1);
}

char *CoreHandwriting::synthesis::CHDiffusionPipeline::getFeatureExtractor@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *result;
  _QWORD *v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E77F0A00;
  v9 = v3;
  v4 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 16))
  {
    v5 = sub_1BE8835E4((char **)a1, &v9);
  }
  else
  {
    *v4 = v3;
    v5 = (char *)(v4 + 1);
  }
  *(_QWORD *)(a1 + 8) = v5;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E77F0AA8;
  v9 = v6;
  v7 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_1BE8835E4((char **)a1, &v9);
  }
  else
  {
    *v7 = v6;
    result = (char *)(v7 + 1);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1BE729D6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1BE6FA44C(v1);
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::calculateFeatures(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **this, CHDrawing *a2, NSString *a3, uint64_t a4, int a5)
{
  CHDrawing *v9;
  NSString *v10;
  void *v11;
  void *v12;
  const void *v13;
  int64_t v14;
  char *v15;
  id v16;
  CoreHandwriting::synthesis::CHDiffusionPipeline *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const double *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const double *v30;
  int64x2_t v31;
  int64x2_t v32;
  const double *v33;
  const double *v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  const char *v64;
  uint64_t v65;
  id v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t i;
  uint64_t v90;
  _DWORD *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int *v99;
  char *v100;
  unint64_t v101;
  int v102;
  int *v103;
  char *v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  int *v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  void *v135;
  _BYTE *v136;
  void *v137;
  void *v138;
  id v139;
  void *v141;
  NSString *v142;
  void *v143;
  char *v144;
  unint64_t v145;
  void *__p;
  _QWORD *v147;
  void *v148;
  char *v149;
  void *v150;
  void *v151;
  void *v152;
  _BYTE *v153;
  void *v154;
  char *v155;
  char *v156;
  char *v157;
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  _QWORD *v161;
  void *v162;
  _QWORD v163[5];
  float64x2x3_t v164;
  float64x2x3_t v165;

  v163[3] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v142 = v10;
  v11 = (void *)objc_opt_new();
  v12 = v11;
  if (v9 && v10)
  {
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*this, v10, &v158);
    v13 = v158;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v14 = v159 - v158;
    if (v159 == v158)
    {
      v15 = 0;
    }
    else
    {
      if (v14 < 0)
        sub_1BE61F930();
      v15 = (char *)operator new(v159 - v158);
      v155 = v15;
      v157 = &v15[8 * (v14 >> 3)];
      memcpy(v15, v13, v14);
      v156 = v157;
    }
    CoreHandwriting::drawingToInk((CoreHandwriting *)v9, MEMORY[0x1E0C9D538], (uint64_t *)&v152);
    v141 = v15;
    CoreHandwriting::synthesis::CHDiffusionPipeline::getPreprocessor(v17, v160, (uint64_t)&__p);
    v18 = __p;
    v19 = v147;
    if (__p != v147)
    {
      do
      {
        (*(void (**)(_QWORD, void **, _QWORD))(*(_QWORD *)*v18 + 24))(*v18, &v152, 0);
        ++v18;
      }
      while (v18 != v19);
      v18 = __p;
    }
    if (v18)
    {
      v20 = v147;
      v21 = v18;
      if (v147 != v18)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        while (v20 != v18);
        v21 = __p;
      }
      v147 = v18;
      operator delete(v21);
    }
    v24 = (const double *)v152;
    if (v152 == v153)
    {
      v26 = 0;
    }
    else
    {
      v25 = v153 - (_BYTE *)v152 - 24;
      if (v25 >= 0x60)
      {
        v27 = v25 / 0x18 + 1;
        v28 = v27 & 3;
        if ((v27 & 3) == 0)
          v28 = 4;
        v29 = v27 - v28;
        v30 = (const double *)((char *)v152 + 24 * v29);
        v31 = 0uLL;
        v32 = 0uLL;
        do
        {
          v33 = v24 + 12;
          v164 = vld3q_f64(v24);
          v34 = v24 + 6;
          v31 = vsraq_n_s64(v31, vsubq_s64((int64x2_t)v164.val[1], (int64x2_t)v164.val[0]), 5uLL);
          v165 = vld3q_f64(v34);
          v32 = vsraq_n_s64(v32, vsubq_s64((int64x2_t)v165.val[1], (int64x2_t)v165.val[0]), 5uLL);
          v24 = v33;
          v29 -= 4;
        }
        while (v29);
        v26 = vaddvq_s64(vaddq_s64(v32, v31));
        v24 = v30;
      }
      else
      {
        v26 = 0;
      }
      do
      {
        v35 = *v24;
        v36 = *((_QWORD *)v24 + 1);
        v24 += 3;
        v26 += (v36 - *(_QWORD *)&v35) >> 5;
      }
      while (v24 != (const double *)v153);
    }
    __p = &off_1E77F08E8;
    if ((int)a4 < 1)
      LODWORD(v147) = 16;
    else
      LODWORD(v147) = a4;
    CoreHandwriting::InkPadding::processInplace((CoreHandwriting::InkPadding *)&__p, (CoreHandwriting::Ink *)&v152, 0);
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v37 = (_QWORD *)operator new();
    *v37 = &off_1E77F0A00;
    v161 = v37;
    v38 = v144;
    if ((unint64_t)v144 >= v145)
    {
      v39 = sub_1BE8835E4((char **)&v143, &v161);
    }
    else
    {
      *(_QWORD *)v144 = v37;
      v39 = v38 + 8;
    }
    v144 = v39;
    v40 = (_QWORD *)operator new();
    *v40 = &off_1E77F0AA8;
    v161 = v40;
    v41 = v144;
    if ((unint64_t)v144 >= v145)
    {
      v42 = sub_1BE8835E4((char **)&v143, &v161);
    }
    else
    {
      *(_QWORD *)v144 = v40;
      v42 = v41 + 8;
    }
    v144 = v42;
    CoreHandwriting::FeatureExtractionProcessor::process((CoreHandwriting::FeatureExtractionProcessor *)&v143, (const CoreHandwriting::Ink *)&v152, (char **)&__p);
    v43 = (char *)v143;
    if (v143)
    {
      v44 = v144;
      v45 = v143;
      if (v144 != v143)
      {
        do
        {
          v47 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          v46 = v47;
          *(_QWORD *)v44 = 0;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        }
        while (v44 != v43);
        v45 = v143;
      }
      v144 = v43;
      operator delete(v45);
    }
    v48 = (void *)objc_opt_new();
    v163[0] = &unk_1E7828808;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v49, a4, v50, v51, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v163[1] = v53;
    v163[2] = &unk_1E7828820;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v54, (uint64_t)v163, 3, v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v48, v58, (uint64_t)v57, v59, v60, v61);

    if (a5 >= v26 / 3)
      v62 = v26;
    else
      v62 = 3 * a5;
    v63 = objc_alloc(MEMORY[0x1E0C9E970]);
    v66 = objc_retainAutorelease((id)objc_msgSend_initWithShape_dataType_error_(v63, v64, (uint64_t)v48, 65568, 0, v65));
    v76 = (_DWORD *)objc_msgSend_dataPointer(v66, v67, v68, v69, v70, v71);
    v77 = 0;
LABEL_51:
    objc_msgSend_objectAtIndexedSubscript_(v48, v72, 1, v73, v74, v75, v141, v142);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = v77 < objc_msgSend_integerValue(v78, v79, v80, v81, v82, v83);

    if (v84)
    {
      for (i = 0; ; ++i)
      {
        objc_msgSend_objectAtIndexedSubscript_(v48, v85, 2, v86, v87, v88);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v98 = i < objc_msgSend_integerValue(v92, v93, v94, v95, v96, v97);

        if (!v98)
        {
          ++v77;
          goto LABEL_51;
        }
        v99 = (int *)operator new(0x10uLL);
        *(_QWORD *)v99 = v77;
        *((_QWORD *)v99 + 1) = i;
        v100 = v149;
        if ((unint64_t)(v149 - (_BYTE *)v148) > 0x10)
          v100 = (char *)v148 + 16;
        if (v148 == v100)
        {
          v90 = 0;
          goto LABEL_54;
        }
        v101 = v100 - (_BYTE *)v148 - 8;
        if (v101 >= 8)
        {
          v105 = 0;
          v106 = 0;
          v107 = (v101 >> 3) + 1;
          v108 = 2 * (v107 & 0x3FFFFFFFFFFFFFFELL);
          v103 = &v99[v108];
          v104 = (char *)v148 + v108 * 4;
          v109 = (int *)((char *)v148 + 8);
          v110 = v99 + 2;
          v111 = v107 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v112 = *(v109 - 2);
            v114 = *v109;
            v109 += 4;
            v113 = v114;
            v115 = *(v110 - 2);
            v116 = *v110;
            v110 += 4;
            v105 += v115 * v112;
            v106 += v116 * v113;
            v111 -= 2;
          }
          while (v111);
          v102 = v106 + v105;
          if (v107 == (v107 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_65;
        }
        else
        {
          v102 = 0;
          v103 = v99;
          v104 = (char *)v148;
        }
        do
        {
          v118 = *(_DWORD *)v104;
          v104 += 8;
          v117 = v118;
          v119 = *v103;
          v103 += 2;
          v102 += v119 * v117;
        }
        while (v104 != v100);
LABEL_65:
        v90 = v102;
LABEL_54:
        v91 = v150;
        operator delete(v99);
        *v76++ = v91[v90];
      }
    }
    objc_msgSend_setObject_forKeyedSubscript_(v12, v85, (uint64_t)v66, (uint64_t)CFSTR("curFeature"), v87, v88);
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v120, v62, v121, v122, v123);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v162 = v124;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v125, (uint64_t)&v162, 1, v126, v127);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    CoreHandwriting::synthesis::multiArrayWithContent(v128, &unk_1E7827D58);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v12, v130, (uint64_t)v129, (uint64_t)CFSTR("curFeatureLength"), v131, v132);

    if (v150)
    {
      v151 = v150;
      operator delete(v150);
    }
    if (v148)
    {
      v149 = (char *)v148;
      operator delete(v148);
    }
    if (__p)
    {
      v147 = __p;
      operator delete(__p);
    }
    if (v154)
      operator delete(v154);
    v133 = v152;
    if (v152)
    {
      v134 = v153;
      v135 = v152;
      if (v153 != v152)
      {
        v136 = v153;
        do
        {
          v138 = (void *)*((_QWORD *)v136 - 3);
          v136 -= 24;
          v137 = v138;
          if (v138)
          {
            *((_QWORD *)v134 - 2) = v137;
            operator delete(v137);
          }
          v134 = v136;
        }
        while (v136 != v133);
        v135 = v152;
      }
      v153 = v133;
      operator delete(v135);
    }
    v139 = v12;
    if (v141)
      operator delete(v141);
    if (v158)
    {
      v159 = v158;
      operator delete(v158);
    }
  }
  else
  {
    v16 = v11;
  }

  return v12;
}

void sub_1BE72A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  uint64_t v36;
  void *v38;

  sub_1BE6FA2E4(&a23);
  if (a9)
  {
    a34 = a9;
    operator delete(a9);
  }
  v38 = *(void **)(v36 - 168);
  if (v38)
  {
    *(_QWORD *)(v36 - 160) = v38;
    operator delete(v38);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1BE72A5B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::createModelInputData(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **a1, void *a2, void *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString *v21;
  void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _BYTE *v89;
  char *v90;
  _BYTE *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  id v145;
  const char *v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t i;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel *v311;
  uint64_t v312;
  _QWORD *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  void *v323;
  const char *v324;
  uint64_t v325;
  uint64_t v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  const char *v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  void *v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  BOOL v341;
  const char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  CHDrawing *v351;
  NSObject *v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  id v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  id v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *j;
  void *v385;
  const char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  const char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  const char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  const char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  const char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  const char *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  const char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  void *v451;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  void *v456;
  const char *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void *v468;
  const char *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void *v473;
  const char *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  const char *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  void *v485;
  const char *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  const char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  id v514;
  id v516;
  id v517;
  void *v518;
  NSString *v519;
  NSString *v520;
  id v521;
  CHDrawing *v522;
  void *v523;
  void *v524;
  id v525;
  id v526;
  id v527;
  _DWORD *v528;
  uint64_t v529;
  uint64_t v530;
  id v531;
  id v532;
  void *__p;
  char *v534;
  char *v535;
  void *v536;
  _BYTE *v537;
  char *v538;
  void *v539;
  _BYTE *v540;
  unint64_t v541;
  void *v542[2];
  __int128 v543;
  _QWORD v544[3];
  _QWORD v545[3];
  _QWORD v546[3];
  _QWORD v547[2];
  uint8_t buf[8];
  void *v549;
  _QWORD *v550;
  _QWORD v551[2];
  void *v552;
  void *v553;
  void *v554;
  _QWORD v555[4];

  v555[2] = *MEMORY[0x1E0C80C00];
  v520 = a2;
  v521 = a3;
  v524 = (void *)objc_opt_new();
  objc_msgSend_styleDrawing(v521, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortedDrawingUsingStrokeMidPointHorizontalOverlapAware_shouldSortRTL_(v12, v13, 0, 0, v14, v15);
  v522 = (CHDrawing *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_styleContent(v521, v16, v17, v18, v19, v20);
  v21 = (NSString *)objc_claimAutoreleasedReturnValue();
  v519 = v21;
  if (v522 && v21)
  {
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*a1, v21, v542);
  }
  else
  {
    *(_OWORD *)v542 = 0u;
    v543 = 0u;
  }
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*a1, v520, &v539);
  v536 = 0;
  v537 = 0;
  v538 = 0;
  v22 = v539;
  v23 = v540 - (_BYTE *)v539;
  if (v540 != v539)
  {
    if (v23 < 0)
      sub_1BE61F930();
    v24 = (char *)operator new(v540 - (_BYTE *)v539);
    v536 = v24;
    v25 = &v24[8 * (v23 >> 3)];
    v538 = v25;
    memcpy(v24, v22, v23);
    v537 = v25;
    __p = 0;
    v534 = 0;
    v535 = 0;
    v26 = v542[0];
    v27 = (char *)v542[1] - (char *)v542[0];
    if (v542[1] != v542[0])
      goto LABEL_8;
LABEL_11:
    v28 = 0;
    v29 = 0;
    goto LABEL_12;
  }
  v24 = 0;
  v25 = 0;
  __p = 0;
  v534 = 0;
  v535 = 0;
  v26 = v542[0];
  v27 = (char *)v542[1] - (char *)v542[0];
  if (v542[1] == v542[0])
    goto LABEL_11;
LABEL_8:
  if (v27 < 0)
    sub_1BE61F930();
  v28 = (char *)operator new(v27);
  __p = v28;
  v29 = &v28[8 * (v27 >> 3)];
  v535 = v29;
  memcpy(v28, v26, v27);
  v534 = v29;
LABEL_12:
  v30 = (v25 - v24) >> 3;
  v31 = (v29 - v28) >> 3;
  v32 = v541;
  if (v30 > v31)
    v31 = (v25 - v24) >> 3;
  if (v541 <= *((_QWORD *)&v543 + 1))
    v32 = *((_QWORD *)&v543 + 1);
  v33 = v31 < 9;
  v34 = v32 < 0xC1;
  v35 = !v34 || !v33;
  if (v34 && v33)
    v36 = 192;
  else
    v36 = 1152;
  v525 = (id)v36;
  if (v35)
    v37 = 48;
  else
    v37 = 8;
  sub_1BE72B784(&v536, v37, *((_QWORD *)*a1 + 15));
  v555[0] = &unk_1E7828808;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v38, (v537 - (_BYTE *)v536) >> 3, v39, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v555[1] = v42;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v43, (uint64_t)v555, 2, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE72B890(&v536, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v524, v48, (uint64_t)v47, (uint64_t)CFSTR("input_labels"), v49, v50);

  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v51, v30, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v554 = v55;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v56, (uint64_t)&v554, 1, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  CoreHandwriting::synthesis::multiArrayWithContent(v59, &unk_1E7827D70);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v524, v61, (uint64_t)v60, (uint64_t)CFSTR("input_labels_length"), v62, v63);

  v64 = v541;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v65, v541, v66, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v553 = v69;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v70, (uint64_t)&v553, 1, v71, v72);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  CoreHandwriting::synthesis::multiArrayWithContent(v73, &unk_1E7827D88);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v524, v75, (uint64_t)v74, (uint64_t)CFSTR("input_length"), v76, v77);

  if (objc_msgSend_pointCount(v522, v78, v79, v80, v81, v82) && objc_msgSend_length(v519, v83, v84, v85, v86, v87))
  {
    v89 = __p;
    v88 = v534;
    if (v37 < (v534 - (_BYTE *)__p) >> 3)
    {
      v88 = (char *)__p + 8 * v37;
      v534 = v88;
    }
    sub_1BE72B784(&__p, v37, *((_QWORD *)*a1 + 15));
    v91 = __p;
    v90 = v534;
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v92, (v88 - v89) >> 3, v93, v94, v95);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v552 = v96;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v97, (uint64_t)&v552, 1, v98, v99);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    CoreHandwriting::synthesis::multiArrayWithContent(v100, &unk_1E7827DA0);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v102, (uint64_t)v101, (uint64_t)CFSTR("input_style_labels_len"), v103, v104);

    v551[0] = &unk_1E7828808;
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v105, (v90 - v91) >> 3, v106, v107, v108);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v551[1] = v109;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v110, (uint64_t)v551, 2, v111, v112);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE72B890(&__p, v113);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v115, (uint64_t)v114, (uint64_t)CFSTR("input_style_labels"), v116, v117);

    CoreHandwriting::synthesis::CHDiffusionPipeline::calculateFeatures(a1, v522, v519, (uint64_t)v525, v64);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v118, v119, (uint64_t)CFSTR("curFeature"), v120, v121, v122);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v124, (uint64_t)v123, (uint64_t)CFSTR("input_style_features"), v125, v126);

    objc_msgSend_objectForKeyedSubscript_(v118, v127, (uint64_t)CFSTR("curFeatureLength"), v128, v129, v130);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v132, (uint64_t)v131, (uint64_t)CFSTR("input_style_features_len"), v133, v134);

    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v135, (uint64_t)v525, v136, v137, v138);
    v523 = (void *)objc_claimAutoreleasedReturnValue();

    v144 = *(_DWORD *)(a4 + 16);
    if (v144 == 1 && v523)
    {
      v545[0] = &unk_1E7828808;
      v545[1] = v523;
      v545[2] = &unk_1E7828850;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v139, (uint64_t)v545, 3, v142, v143);
      v518 = (void *)objc_claimAutoreleasedReturnValue();
      v145 = objc_alloc(MEMORY[0x1E0C9E970]);
      v526 = (id)objc_msgSend_initWithShape_dataType_error_(v145, v146, (uint64_t)v518, 65568, 0, v147);
      objc_msgSend_objectForKeyedSubscript_(v524, v148, (uint64_t)CFSTR("input_style_features"), v149, v150, v151);
      v527 = (id)objc_claimAutoreleasedReturnValue();
      v531 = objc_retainAutorelease(v526);
      v157 = objc_msgSend_dataPointer(v531, v152, v153, v154, v155, v156);
      v532 = objc_retainAutorelease(v527);
      v529 = objc_msgSend_dataPointer(v532, v158, v159, v160, v161, v162);
      for (i = 0; i < objc_msgSend_unsignedLongValue(v523, v163, v164, v165, v166, v167); ++i)
      {
        objc_msgSend_strides(v531, v169, v170, v171, v172, v173);
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v174, v175, 1, v176, v177, v178);
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        v185 = objc_msgSend_unsignedLongValue(v179, v180, v181, v182, v183, v184);
        objc_msgSend_strides(v531, v186, v187, v188, v189, v190);
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v191, v192, 2, v193, v194, v195);
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_unsignedLongValue(v196, v197, v198, v199, v200, v201);

        objc_msgSend_strides(v532, v202, v203, v204, v205, v206);
        v207 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v207, v208, 1, v209, v210, v211);
        v212 = (void *)objc_claimAutoreleasedReturnValue();
        v218 = objc_msgSend_unsignedLongValue(v212, v213, v214, v215, v216, v217);
        objc_msgSend_strides(v532, v219, v220, v221, v222, v223);
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v224, v225, 2, v226, v227, v228);
        v229 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_unsignedLongValue(v229, v230, v231, v232, v233, v234);

        *(_DWORD *)(v157 + 4 * v185 * i) = *(_DWORD *)(v529 + 4 * v218 * i);
        objc_msgSend_strides(v531, v235, v236, v237, v238, v239);
        v240 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v240, v241, 1, v242, v243, v244);
        v245 = (void *)objc_claimAutoreleasedReturnValue();
        v251 = objc_msgSend_unsignedLongValue(v245, v246, v247, v248, v249, v250);
        objc_msgSend_strides(v531, v252, v253, v254, v255, v256);
        v257 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v257, v258, 2, v259, v260, v261);
        v262 = (void *)objc_claimAutoreleasedReturnValue();
        v268 = objc_msgSend_unsignedLongValue(v262, v263, v264, v265, v266, v267);

        objc_msgSend_strides(v532, v269, v270, v271, v272, v273);
        v274 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v274, v275, 1, v276, v277, v278);
        v279 = (void *)objc_claimAutoreleasedReturnValue();
        v285 = objc_msgSend_unsignedLongValue(v279, v280, v281, v282, v283, v284);
        objc_msgSend_strides(v532, v286, v287, v288, v289, v290);
        v291 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v291, v292, 2, v293, v294, v295);
        v296 = (void *)objc_claimAutoreleasedReturnValue();
        v302 = objc_msgSend_unsignedLongValue(v296, v297, v298, v299, v300, v301);

        *(_DWORD *)(v157 + 4 * (v268 + v251 * i)) = *(_DWORD *)(v529 + 4 * (v302 + v285 * i));
      }
      objc_msgSend_setObject_forKeyedSubscript_(v524, v169, (uint64_t)v531, (uint64_t)CFSTR("input_diffusion_x_timestep"), v172, v173);
LABEL_44:

      goto LABEL_45;
    }
  }
  else
  {
    CoreHandwriting::synthesis::multiArrayWithFixedValue(&unk_1E7827DB8, 1.0);
    v303 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v304, (uint64_t)v303, (uint64_t)CFSTR("input_style_labels_len"), v305, v306);

    CoreHandwriting::synthesis::multiArrayWithFixedValue(&unk_1E7827DD0, 1.0);
    v307 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v308, (uint64_t)v307, (uint64_t)CFSTR("input_style_features_len"), v309, v310);

    v311 = *a1;
    v312 = *((_QWORD *)*a1 + 15);
    v313 = operator new(8uLL);
    *(_QWORD *)buf = v313;
    *v313 = v312;
    v549 = v313 + 1;
    v550 = v313 + 1;
    sub_1BE72B784(buf, v37, *((_QWORD *)v311 + 15));
    v547[0] = &unk_1E7828808;
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v314, ((uint64_t)v549 - *(_QWORD *)buf) >> 3, v315, v316, v317);
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    v547[1] = v318;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v319, (uint64_t)v547, 2, v320, v321);
    v322 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE72B890(buf, v322);
    v323 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v324, (uint64_t)v323, (uint64_t)CFSTR("input_style_labels"), v325, v326);

    v546[0] = &unk_1E7828808;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v327, (uint64_t)v525, v328, v329, v330);
    v331 = (void *)objc_claimAutoreleasedReturnValue();
    v546[1] = v331;
    v546[2] = &unk_1E7828838;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v332, (uint64_t)v546, 3, v333, v334);
    v335 = (void *)objc_claimAutoreleasedReturnValue();
    CoreHandwriting::synthesis::multiArrayWithFixedValue(v335, 0.0);
    v336 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v524, v337, (uint64_t)v336, (uint64_t)CFSTR("input_style_features"), v338, v339);

    if (*(_QWORD *)buf)
    {
      v549 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    v523 = 0;
    v144 = *(_DWORD *)(a4 + 16);
  }
  if (v144 == 2)
  {
    objc_msgSend_xZeroDrawing(v521, v139, v140, v141, v142, v143);
    v340 = (void *)objc_claimAutoreleasedReturnValue();
    v341 = v340 == 0;

    if (!v341)
    {
      objc_msgSend_xZeroDrawing(v521, v342, v343, v344, v345, v346);
      v347 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sortedDrawingUsingStrokeMidPointHorizontalOverlapAware_shouldSortRTL_(v347, v348, 0, 0, v349, v350);
      v351 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
      CoreHandwriting::synthesis::CHDiffusionPipeline::calculateFeatures(a1, v351, v520, (uint64_t)v525, v64);
      v518 = (void *)objc_claimAutoreleasedReturnValue();

      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v352 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v352, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = (_DWORD)v525;
        _os_log_impl(&dword_1BE607000, v352, OS_LOG_TYPE_DEBUG, "Synthesizer: Init with seed x_0 features length %d", buf, 8u);
      }

      v544[0] = &unk_1E7828808;
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v353, (uint64_t)v525, v354, v355, v356);
      v357 = (void *)objc_claimAutoreleasedReturnValue();
      v544[1] = v357;
      v544[2] = &unk_1E7828850;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v358, (uint64_t)v544, 3, v359, v360);
      v531 = (id)objc_claimAutoreleasedReturnValue();

      v361 = objc_alloc(MEMORY[0x1E0C9E970]);
      v516 = (id)objc_msgSend_initWithShape_dataType_error_(v361, v362, (uint64_t)v531, 65568, 0, v363);
      objc_msgSend_objectForKeyedSubscript_(v518, v364, (uint64_t)CFSTR("curFeature"), v365, v366, v367);
      v517 = (id)objc_claimAutoreleasedReturnValue();
      v532 = objc_retainAutorelease(v516);
      v530 = objc_msgSend_dataPointer(v532, v368, v369, v370, v371, v372);
      v373 = objc_retainAutorelease(v517);
      v528 = (_DWORD *)objc_msgSend_dataPointer(v373, v374, v375, v376, v377, v378);
      for (j = 0; j != v525; j = (char *)j + 1)
      {
        objc_msgSend_strides(v532, v379, v380, v381, v382, v383);
        v385 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v385, v386, 1, v387, v388, v389);
        v390 = (void *)objc_claimAutoreleasedReturnValue();
        v396 = objc_msgSend_unsignedLongValue(v390, v391, v392, v393, v394, v395);
        objc_msgSend_strides(v532, v397, v398, v399, v400, v401);
        v402 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v402, v403, 2, v404, v405, v406);
        v407 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_unsignedLongValue(v407, v408, v409, v410, v411, v412);

        objc_msgSend_strides(v373, v413, v414, v415, v416, v417);
        v418 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v418, v419, 1, v420, v421, v422);
        v423 = (void *)objc_claimAutoreleasedReturnValue();
        v429 = objc_msgSend_unsignedLongValue(v423, v424, v425, v426, v427, v428);
        objc_msgSend_strides(v373, v430, v431, v432, v433, v434);
        v435 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v435, v436, 2, v437, v438, v439);
        v440 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_unsignedLongValue(v440, v441, v442, v443, v444, v445);

        *(_DWORD *)(v530 + 4 * v396 * (_QWORD)j) = v528[v429 * (_QWORD)j];
        objc_msgSend_strides(v532, v446, v447, v448, v449, v450);
        v451 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v451, v452, 1, v453, v454, v455);
        v456 = (void *)objc_claimAutoreleasedReturnValue();
        v462 = objc_msgSend_unsignedLongValue(v456, v457, v458, v459, v460, v461);
        objc_msgSend_strides(v532, v463, v464, v465, v466, v467);
        v468 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v468, v469, 2, v470, v471, v472);
        v473 = (void *)objc_claimAutoreleasedReturnValue();
        v479 = objc_msgSend_unsignedLongValue(v473, v474, v475, v476, v477, v478);

        objc_msgSend_strides(v373, v480, v481, v482, v483, v484);
        v485 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v485, v486, 1, v487, v488, v489);
        v490 = (void *)objc_claimAutoreleasedReturnValue();
        v496 = objc_msgSend_unsignedLongValue(v490, v491, v492, v493, v494, v495);
        objc_msgSend_strides(v373, v497, v498, v499, v500, v501);
        v502 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v502, v503, 2, v504, v505, v506);
        v507 = (void *)objc_claimAutoreleasedReturnValue();
        v513 = objc_msgSend_unsignedLongValue(v507, v508, v509, v510, v511, v512);

        *(_DWORD *)(v530 + 4 * (v479 + v462 * (_QWORD)j)) = v528[v513 + v496 * (_QWORD)j];
      }
      objc_msgSend_setObject_forKeyedSubscript_(v524, v379, (uint64_t)v532, (uint64_t)CFSTR("input_diffusion_x_timestep"), v382, v383);

      goto LABEL_44;
    }
  }
LABEL_45:
  v514 = v524;

  if (__p)
  {
    v534 = (char *)__p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  if (v539)
  {
    v540 = v539;
    operator delete(v539);
  }
  if (v542[0])
  {
    v542[1] = v542[0];
    operator delete(v542[0]);
  }

  return v514;
}

void sub_1BE72B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  void *v35;
  void *v36;
  void *v37;

  if (a23)
  {
    operator delete(a23);
    v35 = a26;
    if (!a26)
    {
LABEL_3:
      v36 = a29;
      if (!a29)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v35 = a26;
    if (!a26)
      goto LABEL_3;
  }
  operator delete(v35);
  v36 = a29;
  if (!a29)
  {
LABEL_4:
    v37 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v36);
  v37 = __p;
  if (!__p)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v37);
  goto LABEL_6;
}

void sub_1BE72B784(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v4 = (uint64_t)(a1[1] - *a1) >> 3;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6)
  {
    if (v6 != 0 && v5)
    {
      sub_1BE67B534((uint64_t)a1, v6, &v8);
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v7 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        v10 = v4;
        v11 = 2048;
        v12 = a2;
        _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_FAULT, "Synthesizer: Cannot pad sequence of length %zu that's longer than target length %zu.", buf, 0x16u);
      }

    }
  }
}

id sub_1BE72B890(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[5];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc(MEMORY[0x1E0C9E970]);
  v7 = (void *)objc_msgSend_initWithShape_dataType_error_(v4, v5, (uint64_t)v3, 65568, 0, v6);
  if (objc_msgSend_count(v7, v8, v9, v10, v11, v12) != (uint64_t)(a1[1] - *a1) >> 3)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v17 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      v23 = objc_msgSend_count(v7, v18, v19, v20, v21, v22);
      v24 = (uint64_t)(a1[1] - *a1) >> 3;
      *(_DWORD *)buf = 134218240;
      v28 = v23;
      v29 = 2048;
      v30 = v24;
      _os_log_impl(&dword_1BE607000, v17, OS_LOG_TYPE_FAULT, "Size mismatch! shape elements: %ld, vector elements: %zu", buf, 0x16u);
    }

  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1BE72E010;
  v26[3] = &unk_1E77F4508;
  v26[4] = a1;
  objc_msgSend_getBytesWithHandler_(v7, v13, (uint64_t)v26, v14, v15, v16);

  return v7;
}

void sub_1BE72BA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::run(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  float v21;
  float v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  BOOL v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  BOOL v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  NSObject *v98;
  unsigned int v104;
  uint64_t v105;
  std::string::size_type v106;
  unint64_t v107;
  int v108;
  float64x2_t v109;
  CHDrawing *v110;
  NSObject *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  NSObject *v137;
  NSObject *v138;
  unint64_t v140;
  os_signpost_id_t spid;
  double v142;
  double v143;
  void *v144;
  int v145;
  int v146;
  int8x8_t v147;
  char v148;
  std::random_device v149;
  std::string buf[52];
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  if (!objc_msgSend_length(v9, v12, v13, v14, v15, v16)
    || (CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(*(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, (NSString *)v9) & 1) == 0)
  {
    v46 = 0;
    goto LABEL_48;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v17 = (id)qword_1EF568E50;
  spid = os_signpost_id_generate(v17);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v18 = (id)qword_1EF568E50;
  v19 = v18;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v19, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHDiffusionPipelineRun", "", (uint8_t *)buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v20 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionPipelineRun\"", (uint8_t *)buf, 2u);
  }

  CoreHandwriting::synthesis::CHDiffusionPipeline::createModelInputData((CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, v9, v10, a5);
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = *(float *)(a5 + 4);
  v21 = *(float *)(a5 + 8);
  objc_msgSend_forwardProcessRatio(v10, v23, v24, v25, v26, v27);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v143 = v22;
  if (v33)
  {
    objc_msgSend_forwardProcessRatio(v10, v28, v29, v30, v31, v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v34, v35, v36, v37, v38, v39);
    if (v45 >= 0.0)
    {
      objc_msgSend_forwardProcessRatio(v10, v40, v41, v42, v43, v44);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_floatValue(v47, v48, v49, v50, v51, v52);
      v54 = v53 > 1.0;

      if (v54)
        goto LABEL_21;
      objc_msgSend_forwardProcessRatio(v10, v28, v29, v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v33, v55, v56, v57, v58, v59);
      v143 = v60;
    }
    else
    {

    }
  }
LABEL_21:
  objc_msgSend_backwardProcessRatio(v10, v28, v29, v30, v31, v32, spid - 1);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = v21;
  if (!v66)
    goto LABEL_27;
  objc_msgSend_backwardProcessRatio(v10, v61, v62, v63, v64, v65);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_floatValue(v67, v68, v69, v70, v71, v72);
  if (v78 >= 0.0)
  {
    objc_msgSend_backwardProcessRatio(v10, v73, v74, v75, v76, v77);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_floatValue(v79, v80, v81, v82, v83, v84);
    v86 = v85 > 1.0;

    if (v86)
      goto LABEL_27;
    objc_msgSend_backwardProcessRatio(v10, v87, v88, v89, v90, v91);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v66, v92, v93, v94, v95, v96);
    v142 = v97;
  }
  else
  {

  }
LABEL_27:
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v98 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v143;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v142;
    _os_log_impl(&dword_1BE607000, v98, OS_LOG_TYPE_DEBUG, "Synthesizer: Diffusion pipeline is running with forward ratio = %.2f, backward ratio = %.2f", (uint8_t *)buf, 0x16u);
  }

  v145 = *(_DWORD *)a5;
  v146 = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v147 = (int8x8_t)_D8;
  v148 = 0;
  *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)buf, "/dev/urandom");
  std::random_device::random_device(&v149, buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  v104 = MEMORY[0x1C3B811FC](&v149);
  v105 = 1;
  v106 = v104;
  do
  {
    v106 = v105 + 0x5851F42D4C957F2DLL * (v106 ^ (v106 >> 62));
    buf[0].__r_.__value_.__r.__words[v105++] = v106;
  }
  while (v105 != 312);
  v107 = v151 ^ ((buf[0].__r_.__value_.__r.__words[1] & 0x7FFFFFFE | (unint64_t)(v104 & 0x80000000)) >> 1) ^ ((uint64_t)(buf[0].__r_.__value_.__l.__size_ << 63) >> 63) & 0xB5026F5AA96619E9;
  v108 = ((((((v107 >> 29) & 0x5555555555555555 ^ v107) << 37) & 0x280000000000 ^ (((v107 >> 29) & 0x5555555555555555 ^ v107) << 17) ^ v107) >> 43) ^ (v107 >> 29) & 0x55555555 ^ v107) & 7;
  std::random_device::~random_device(&v149);
  v146 = v108;
  v109.f64[0] = v143;
  v109.f64[1] = v142;
  *(float32x2_t *)&v109.f64[0] = vcvt_f32_f64(v109);
  v147 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v109.f64[0], _D8), (int8x8_t)_D8, *(int8x8_t *)&v109.f64[0]), (int8x8_t)vcltz_f32(*(float32x2_t *)&v109.f64[0]));
  v148 = *(_BYTE *)(a5 + 12);
  CoreHandwriting::synthesis::CHDiffusionSampler::sample((uint64_t)&v145, v144, *(_QWORD *)(a1 + 8), *(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, v11);
  v110 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
  CoreHandwriting::synthesis::CHDiffusionPipeline::getSegmentedResult((CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, v110, (NSString *)v9);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v111 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    goto LABEL_37;
  }
  v111 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
LABEL_37:
    objc_msgSend_drawing(v46, v112, v113, v114, v115, v116);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = objc_msgSend_strokeCount(v117, v118, v119, v120, v121, v122);
    objc_msgSend_segmentContents(v46, v124, v125, v126, v127, v128);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    v135 = objc_msgSend_count(v129, v130, v131, v132, v133, v134);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v123;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v135;
    _os_log_impl(&dword_1BE607000, v111, OS_LOG_TYPE_DEFAULT, "Synthesizer: Diffusion pipeline result with %lu strokes and %lu segments", (uint8_t *)buf, 0x16u);

  }
LABEL_38:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v136 = (id)qword_1EF568E50;
  v137 = v136;
  if (v140 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v136))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v137, OS_SIGNPOST_INTERVAL_END, spid, "CHDiffusionPipelineRun", "", (uint8_t *)buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v138 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BE607000, v138, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionPipelineRun\"", (uint8_t *)buf, 2u);
  }

LABEL_48:
  return v46;
}

void sub_1BE72C130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, std::random_device a19, std::random_device __p,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::CHDiffusionPipeline::isSupported(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **this, NSString *a2)
{
  return CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(*this, a2);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::getSegmentedResult(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **this, CHDrawing *a2, NSString *a3)
{
  CHDrawing *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  CHSynthesisResult *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CHSynthesisResult *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  CHSynthesisContractViolation *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  id v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  void *v89;
  const char *v90;
  uint64_t v91;
  double *v92;
  double *v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  double *v100;
  double *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  char *v106;
  double *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  double *v117;
  double v118;
  unint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t j;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  int64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  double *v144;
  int64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  _BYTE *v155;
  double *v156;
  double *v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  CGFloat v161;
  CGFloat v162;
  CGFloat v163;
  CGFloat v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  CGFloat v172;
  double v173;
  double v174;
  double v175;
  CGFloat v176;
  double v177;
  double v178;
  double v179;
  double MaxX;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  double *v186;
  double *v187;
  int64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  double *v194;
  int64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  double *v199;
  char *v200;
  double *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  double *v205;
  double *v206;
  double *v207;
  int64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  double *v214;
  double *v215;
  int64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  double *v220;
  char *v221;
  double *v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  double *v232;
  double *v233;
  BOOL v234;
  double *v235;
  double v236;
  double *v237;
  double v238;
  double v239;
  uint64_t v240;
  double v241;
  unint64_t v242;
  uint64_t v243;
  double *v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t *v247;
  uint64_t v248;
  float64x2_t v249;
  float64x2_t v250;
  char **v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  __int128 *v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  double *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  double v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  BOOL v279;
  double v280;
  void *v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  BOOL v291;
  double v292;
  double v293;
  char *v294;
  _BYTE *v295;
  _BYTE *v296;
  int64_t v297;
  char *v298;
  char *v299;
  unint64_t *v300;
  double v301;
  _BYTE *v302;
  _BYTE *v303;
  int64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  __int128 *v310;
  unint64_t v311;
  char *v312;
  unint64_t *v313;
  unint64_t *v314;
  unint64_t v315;
  int64_t v316;
  uint64_t v317;
  unint64_t *v318;
  char **v319;
  int64_t v320;
  unint64_t v321;
  uint64_t v322;
  char **v323;
  char **v324;
  void *v325;
  char *v326;
  char *v327;
  unint64_t v328;
  uint64_t v329;
  char **v330;
  char *v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  double *v335;
  double *k;
  void *v337;
  void *v338;
  _BYTE *v339;
  _BYTE *v340;
  int64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  uint64_t v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  CHSynthesisResult *v362;
  const char *v363;
  char **v364;
  char **v365;
  void *v366;
  char *v367;
  void *v369;
  NSString *v370;
  void *v371;
  void *v372;
  unint64_t v373;
  double v374;
  unint64_t v375;
  id v376;
  uint64_t v377;
  double *v378;
  unint64_t *v379;
  void *v380;
  double *v381;
  double *v382;
  void *v383;
  char **v384;
  char *v385;
  void *v386;
  double *v387;
  double *v388;
  void *v389;
  unint64_t v390;
  char *v391;
  void *__p;
  __int128 v393;
  unint64_t v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  void *v399;
  double *v400;
  char *v401;
  _BYTE v402[128];
  _QWORD v403[4];
  CGRect v404;
  CGRect v405;

  v403[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v370 = a3;
  if (!v5)
  {
    v42 = 0;
    goto LABEL_262;
  }
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByCharactersInSet_(v370, v12, (uint64_t)v11, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_indexesOfObjectsPassingTest_(v16, v17, (uint64_t)&unk_1E77F17D0, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v16, v22, (uint64_t)v21, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v369 = v26;
  if ((unint64_t)objc_msgSend_count(v26, v27, v28, v29, v30, v31) <= 1)
  {
    v37 = v26;
    v38 = [CHSynthesisResult alloc];
    v42 = (void *)objc_msgSend_initWithContent_drawing_(v38, v39, (uint64_t)v370, (uint64_t)v5, v40, v41);
    v372 = v5;
    goto LABEL_261;
  }
  v43 = objc_msgSend_count(v26, v32, v33, v34, v35, v36);
  if (v43 > objc_msgSend_strokeCount(v5, v44, v45, v46, v47, v48))
  {
    v54 = [CHSynthesisResult alloc];
    v42 = (void *)objc_msgSend_initWithContent_drawing_(v54, v55, (uint64_t)v370, (uint64_t)v5, v56, v57);
    v58 = [CHSynthesisContractViolation alloc];
    v64 = objc_msgSend_count(v26, v59, v60, v61, v62, v63);
    v66 = (void *)objc_msgSend_initWithLocationRange_comment_kind_(v58, v65, 0, v64, 0, 2);
    v403[0] = v66;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v67, (uint64_t)v403, 1, v68, v69);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setContractViolations_(v42, v71, (uint64_t)v70, v72, v73, v74);

    v372 = v5;
    v37 = v26;
    goto LABEL_261;
  }
  objc_msgSend_sortedDrawingUsingMinXCoordinate(v5, v49, v50, v51, v52, v53);
  v372 = (void *)objc_claimAutoreleasedReturnValue();

  v399 = 0;
  v400 = 0;
  v401 = 0;
  v80 = objc_msgSend_count(v26, v75, v76, v77, v78, v79);
  v81 = v80;
  if (v80)
  {
    if (v80 >> 61)
      sub_1BE61F930();
    v82 = (char *)operator new(8 * v80);
    v399 = &v82[(unint64_t)v400 & 0xFFFFFFFFFFFFFFF8];
    v400 = (double *)v399;
    v401 = &v82[8 * v81];
  }
  v397 = 0u;
  v398 = 0u;
  v395 = 0u;
  v396 = 0u;
  v83 = v26;
  v86 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v395, (uint64_t)v402, 16, v85);
  v376 = v83;
  if (v86)
  {
    v87 = *(_QWORD *)v396;
    do
    {
      for (i = 0; i != v86; ++i)
      {
        if (*(_QWORD *)v396 != v87)
          objc_enumerationMutation(v83);
        CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*this, *(NSString **)(*((_QWORD *)&v395 + 1) + 8 * i), &__p);
        v92 = v400;
        if (v400 < (double *)v401)
        {
          *v400 = (double)v394;
          v400 = v92 + 1;
          v89 = __p;
          if (!__p)
            continue;
LABEL_14:
          *(_QWORD *)&v393 = v89;
          operator delete(v89);
          continue;
        }
        v93 = (double *)v399;
        v94 = (char *)v400 - (_BYTE *)v399;
        v95 = ((char *)v400 - (_BYTE *)v399) >> 3;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61)
          sub_1BE61F930();
        v97 = v401 - (_BYTE *)v399;
        if ((v401 - (_BYTE *)v399) >> 2 > v96)
          v96 = v97 >> 2;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v96;
        if (v98)
        {
          if (v98 >> 61)
            sub_1BE61F100();
          v99 = (char *)operator new(8 * v98);
        }
        else
        {
          v99 = 0;
        }
        v100 = (double *)&v99[8 * v95];
        *v100 = (double)v394;
        v101 = v100 + 1;
        if (v92 != v93)
        {
          v102 = (char *)v92 - (char *)v93 - 8;
          if (v102 < 0x58)
            goto LABEL_282;
          if ((unint64_t)((char *)v92 - &v99[v94]) < 0x20)
            goto LABEL_282;
          v103 = (v102 >> 3) + 1;
          v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
          v105 = &v92[v104 / 0xFFFFFFFFFFFFFFF8];
          v100 = (double *)((char *)v100 - v104);
          v106 = &v99[8 * v95 - 16];
          v107 = v92 - 2;
          v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v109 = *(_OWORD *)v107;
            *((_OWORD *)v106 - 1) = *((_OWORD *)v107 - 1);
            *(_OWORD *)v106 = v109;
            v106 -= 32;
            v107 -= 4;
            v108 -= 4;
          }
          while (v108);
          v92 = v105;
          if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_282:
            do
            {
              v110 = *((_QWORD *)v92-- - 1);
              *((_QWORD *)v100-- - 1) = v110;
            }
            while (v92 != v93);
          }
        }
        v399 = v100;
        v400 = v101;
        v401 = &v99[8 * v98];
        if (v93)
          operator delete(v93);
        v83 = v376;
        v400 = v101;
        v89 = __p;
        if (__p)
          goto LABEL_14;
      }
      v86 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v90, (uint64_t)&v395, (uint64_t)v402, 16, v91);
    }
    while (v86);
  }

  v116 = v400;
  if (v399 != v400)
  {
    v117 = (double *)((char *)v399 + 8);
    if ((char *)v399 + 8 != (char *)v400)
    {
      v118 = *(double *)v399;
      do
      {
        v118 = v118 + *v117;
        *v117++ = v118;
      }
      while (v117 != v116);
    }
  }
  v389 = 0;
  v390 = 0;
  v391 = 0;
  v119 = objc_msgSend_strokeCount(v372, v111, v112, v113, v114, v115);
  v125 = v119;
  if (v119)
  {
    if (v119 >> 61)
      sub_1BE61F930();
    v126 = (char *)operator new(8 * v119);
    v389 = &v126[v390 & 0xFFFFFFFFFFFFFFF8];
    v390 = (unint64_t)v389;
    v391 = &v126[8 * v125];
  }
  for (j = 0; j < objc_msgSend_strokeCount(v372, v120, v121, v122, v123, v124); ++j)
  {
    v134 = objc_msgSend_pointCountForStrokeIndex_(v372, v129, j, v131, v132, v133);
    v135 = v134;
    v136 = (_BYTE *)v390;
    if (v390 < (unint64_t)v391)
    {
      *(double *)v390 = (double)(unint64_t)v134;
      v128 = (uint64_t)(v136 + 8);
      goto LABEL_50;
    }
    v137 = v389;
    v138 = v390 - (_QWORD)v389;
    v139 = (uint64_t)(v390 - (_QWORD)v389) >> 3;
    v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 61)
      sub_1BE61F930();
    v141 = v391 - (_BYTE *)v389;
    if ((v391 - (_BYTE *)v389) >> 2 > v140)
      v140 = v141 >> 2;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
      v142 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 61)
        sub_1BE61F100();
      v143 = (char *)operator new(8 * v142);
      v144 = (double *)&v143[8 * v139];
      *v144 = (double)v135;
      v128 = (uint64_t)(v144 + 1);
      v145 = v136 - v137;
      if (v136 == v137)
        goto LABEL_70;
LABEL_64:
      v146 = v145 - 8;
      if (v146 < 0x58)
        goto LABEL_283;
      if ((unint64_t)(v136 - &v143[v138]) < 0x20)
        goto LABEL_283;
      v147 = (v146 >> 3) + 1;
      v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
      v149 = &v136[-v148];
      v144 = (double *)((char *)v144 - v148);
      v150 = &v143[8 * v139 - 16];
      v151 = (__int128 *)(v136 - 16);
      v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v153 = *v151;
        *((_OWORD *)v150 - 1) = *(v151 - 1);
        *(_OWORD *)v150 = v153;
        v150 -= 32;
        v151 -= 2;
        v152 -= 4;
      }
      while (v152);
      v136 = v149;
      if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_283:
        do
        {
          v154 = *((_QWORD *)v136 - 1);
          v136 -= 8;
          *((_QWORD *)v144-- - 1) = v154;
        }
        while (v136 != v137);
      }
      goto LABEL_70;
    }
    v143 = 0;
    v144 = (double *)(8 * v139);
    *(double *)(8 * v139) = (double)v135;
    v128 = 8 * v139 + 8;
    v145 = v136 - v137;
    if (v136 != v137)
      goto LABEL_64;
LABEL_70:
    v389 = v144;
    v390 = v128;
    v391 = &v143[8 * v142];
    if (v137)
      operator delete(v137);
LABEL_50:
    v83 = v376;
    v390 = v128;
  }
  v155 = v389;
  v156 = (double *)v390;
  if (v389 == (void *)v390)
  {
    v386 = 0;
    v387 = 0;
    v388 = 0;
  }
  else
  {
    v157 = (double *)((char *)v389 + 8);
    if ((char *)v389 + 8 != (void *)v390)
    {
      v158 = *(double *)v389;
      do
      {
        v158 = v158 + *v157;
        *v157++ = v158;
      }
      while (v157 != v156);
    }
    v386 = 0;
    v387 = 0;
    v388 = 0;
    v159 = (char *)v156 - v155;
    if ((char *)v156 - v155 < 0)
      sub_1BE61F930();
    v386 = operator new((char *)v156 - v155);
    v387 = (double *)v386;
    v388 = (double *)((char *)v386 + 8 * (v159 >> 3));
  }
  v160 = 0;
  v161 = *MEMORY[0x1E0C9D648];
  v162 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v163 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v164 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  while (2)
  {
    v171 = v160 + 1;
    if (v160 + 1 < (unint64_t)objc_msgSend_strokeCount(v372, v129, v130, v131, v132, v133))
    {
      objc_msgSend_boundsForStrokeIndex_(v372, v166, v160, v168, v169, v170);
      v176 = v172;
      v177 = v173;
      v178 = v174;
      v179 = v175;
      if (v160)
      {
        v404.origin.x = v161;
        v404.origin.y = v162;
        v404.size.width = v163;
        v404.size.height = v164;
        *(CGRect *)&v172 = CGRectUnion(v404, *(CGRect *)&v176);
      }
      v161 = v172;
      v162 = v173;
      v163 = v174;
      v164 = v175;
      MaxX = CGRectGetMaxX(*(CGRect *)&v172);
      ++v160;
      objc_msgSend_boundsForStrokeIndex_(v372, v181, v171, v182, v183, v184);
      v185 = CGRectGetMinX(v405) - MaxX;
      v186 = v387;
      if (v387 >= v388)
      {
        v187 = (double *)v386;
        v188 = (char *)v387 - (_BYTE *)v386;
        v189 = ((char *)v387 - (_BYTE *)v386) >> 3;
        v190 = v189 + 1;
        if ((unint64_t)(v189 + 1) >> 61)
          sub_1BE61F930();
        v191 = (char *)v388 - (_BYTE *)v386;
        if (((char *)v388 - (_BYTE *)v386) >> 2 > v190)
          v190 = v191 >> 2;
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
          v192 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v192 = v190;
        if (v192)
        {
          if (v192 >> 61)
            sub_1BE61F100();
          v193 = (char *)operator new(8 * v192);
          v194 = (double *)&v193[8 * v189];
          *v194 = v185;
          v165 = (uint64_t)(v194 + 1);
          v195 = (char *)v186 - (char *)v187;
          if (v186 == v187)
          {
LABEL_103:
            v386 = v194;
            v387 = (double *)v165;
            v388 = (double *)&v193[8 * v192];
            if (v187)
              operator delete(v187);
            goto LABEL_81;
          }
        }
        else
        {
          v193 = 0;
          v194 = (double *)(8 * v189);
          *(double *)(8 * v189) = v185;
          v165 = 8 * v189 + 8;
          v195 = (char *)v186 - (char *)v187;
          if (v186 == v187)
            goto LABEL_103;
        }
        v196 = v195 - 8;
        if (v196 < 0x58)
          goto LABEL_284;
        if ((unint64_t)((char *)v186 - v193 - v188) < 0x20)
          goto LABEL_284;
        v197 = (v196 >> 3) + 1;
        v198 = 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
        v199 = &v186[v198 / 0xFFFFFFFFFFFFFFF8];
        v194 = (double *)((char *)v194 - v198);
        v200 = &v193[8 * v189 - 16];
        v201 = v186 - 2;
        v202 = v197 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v203 = *(_OWORD *)v201;
          *((_OWORD *)v200 - 1) = *((_OWORD *)v201 - 1);
          *(_OWORD *)v200 = v203;
          v200 -= 32;
          v201 -= 4;
          v202 -= 4;
        }
        while (v202);
        v186 = v199;
        if (v197 != (v197 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_284:
          do
          {
            v204 = *((_QWORD *)v186-- - 1);
            *((_QWORD *)v194-- - 1) = v204;
          }
          while (v186 != v187);
        }
        goto LABEL_103;
      }
      *v387 = v185;
      v165 = (uint64_t)(v186 + 1);
LABEL_81:
      v387 = (double *)v165;
      v83 = v376;
      continue;
    }
    break;
  }
  v205 = v387;
  if (v387 < v388)
  {
    *v387 = 0.0;
    v206 = v205 + 1;
    goto LABEL_126;
  }
  v207 = (double *)v386;
  v208 = (char *)v387 - (_BYTE *)v386;
  v209 = ((char *)v387 - (_BYTE *)v386) >> 3;
  v210 = v209 + 1;
  if ((unint64_t)(v209 + 1) >> 61)
    sub_1BE61F930();
  v211 = (char *)v388 - (_BYTE *)v386;
  if (((char *)v388 - (_BYTE *)v386) >> 2 > v210)
    v210 = v211 >> 2;
  if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
    v212 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v212 = v210;
  if (!v212)
  {
    v213 = 0;
    v214 = (double *)(8 * v209);
    v215 = 0;
    *(_QWORD *)(8 * v209) = 0;
    v206 = (double *)(8 * v209 + 8);
    v216 = (char *)v205 - (char *)v207;
    if (v205 == v207)
      goto LABEL_124;
    goto LABEL_118;
  }
  if (v212 >> 61)
    sub_1BE61F100();
  v213 = (char *)operator new(8 * v212);
  v214 = (double *)&v213[8 * v209];
  v215 = (double *)&v213[8 * v212];
  *v214 = 0.0;
  v206 = v214 + 1;
  v216 = (char *)v205 - (char *)v207;
  if (v205 != v207)
  {
LABEL_118:
    v217 = v216 - 8;
    if (v217 < 0x58)
      goto LABEL_285;
    if ((unint64_t)((char *)v205 - v213 - v208) < 0x20)
      goto LABEL_285;
    v218 = (v217 >> 3) + 1;
    v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
    v220 = &v205[v219 / 0xFFFFFFFFFFFFFFF8];
    v214 = (double *)((char *)v214 - v219);
    v221 = &v213[8 * v209 - 16];
    v222 = v205 - 2;
    v223 = v218 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v224 = *(_OWORD *)v222;
      *((_OWORD *)v221 - 1) = *((_OWORD *)v222 - 1);
      *(_OWORD *)v221 = v224;
      v221 -= 32;
      v222 -= 4;
      v223 -= 4;
    }
    while (v223);
    v205 = v220;
    if (v218 != (v218 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_285:
      do
      {
        v225 = *((_QWORD *)v205-- - 1);
        *((_QWORD *)v214-- - 1) = v225;
      }
      while (v205 != v207);
    }
  }
LABEL_124:
  v386 = v214;
  v387 = v206;
  v388 = v215;
  if (v207)
    operator delete(v207);
LABEL_126:
  v387 = v206;
  objc_msgSend_bounds(v372, v166, v167, v168, v169, v170);
  v377 = v231;
  v232 = (double *)v386;
  v233 = (double *)((char *)v386 + 8);
  v234 = v386 == v206 || v233 == v387;
  v235 = (double *)v386;
  if (!v234)
  {
    v236 = *(double *)v386;
    v235 = (double *)v386;
    v237 = (double *)((char *)v386 + 8);
    do
    {
      v238 = *v237++;
      v239 = v238;
      if (v236 < v238)
      {
        v236 = v239;
        v235 = v233;
      }
      v233 = v237;
    }
    while (v237 != v387);
  }
  v240 = *(uint64_t *)v235;
  v241 = *(double *)&v377;
  v374 = *v235;
  if (v386 != v387)
  {
    v242 = (char *)v387 - (_BYTE *)v386 - 8;
    if (v242 < 0x18)
      goto LABEL_286;
    v243 = (v242 >> 3) + 1;
    v244 = (double *)((char *)v386 + 8 * (v243 & 0x3FFFFFFFFFFFFFFCLL));
    v245 = (float64x2_t)vdupq_lane_s64(v240, 0);
    v246 = (float64x2_t)vdupq_lane_s64(v377, 0);
    v247 = (float64x2_t *)((char *)v386 + 16);
    v248 = v243 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v249 = vdivq_f64(vsubq_f64(v247[-1], v245), v246);
      v250 = vdivq_f64(vsubq_f64(*v247, v245), v246);
      v247[-1] = vmulq_f64(v249, v249);
      *v247 = vmulq_f64(v250, v250);
      v247 += 2;
      v248 -= 4;
    }
    while (v248);
    v232 = v244;
    v241 = *(double *)&v377;
    *(double *)&v240 = v374;
    if (v243 != (v243 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_286:
      do
      {
        *v232 = (*v232 - *(double *)&v240) / v241 * ((*v232 - *(double *)&v240) / v241);
        ++v232;
      }
      while (v232 != v206);
    }
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v226, v227, v228, v229, v230);
  v371 = (void *)objc_claimAutoreleasedReturnValue();
  v251 = (char **)operator new(0x20uLL);
  v384 = v251 + 4;
  v385 = (char *)(v251 + 4);
  *(_OWORD *)v251 = 0u;
  *((_OWORD *)v251 + 1) = 0u;
  v383 = v251;
  v257 = v374 / *(double *)&v377 * (v374 / *(double *)&v377);
  v258 = &v393;
  v373 = 1;
  while (2)
  {
    if (v373 < objc_msgSend_strokeCount(v372, v252, v253, v254, v255, v256))
    {
      v380 = 0;
      v381 = 0;
      v382 = 0;
      v264 = objc_msgSend_count(v83, v259, v260, v261, v262, v263);
      v265 = v264;
      if (v264)
      {
        if (v264 >> 59)
          goto LABEL_269;
        v266 = (double *)operator new(32 * v264);
        v380 = v266;
        v381 = v266;
        v382 = &v266[4 * v265];
      }
      else
      {
        v266 = 0;
      }
      v267 = 0;
      v268 = v373 + 1;
      v375 = v373 - 1;
      v269 = -32;
LABEL_151:
      v270 = objc_msgSend_count(v83, v252, v253, v254, v255, v256);
      if (v268 >= v270)
        v271 = v270;
      else
        v271 = v268;
      v378 = v266;
      if (v267 >= v271)
      {
        v319 = (char **)v380;
        v320 = (char *)v266 - (_BYTE *)v380;
        v321 = ((char *)v266 - (_BYTE *)v380) >> 5;
        v322 = (uint64_t)v385;
        v323 = (char **)v383;
        if (v321 > (v385 - (_BYTE *)v383) >> 5)
        {
          if (v383)
          {
            v324 = v384;
            v325 = v383;
            if (v384 != v383)
            {
              do
              {
                v326 = *(v324 - 3);
                if (v326)
                {
                  *(v324 - 2) = v326;
                  operator delete(v326);
                }
                v324 -= 4;
              }
              while (v324 != v323);
              v325 = v383;
            }
            v384 = v323;
            operator delete(v325);
            v322 = 0;
            v383 = 0;
            v384 = 0;
            v385 = 0;
            v266 = v378;
          }
          if ((v320 & 0x8000000000000000) == 0)
          {
            v332 = v322 >> 4;
            if (v322 >> 4 <= v321)
              v332 = v321;
            v333 = (unint64_t)v322 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v332;
            if (!(v333 >> 59))
            {
              v383 = operator new(32 * v333);
              v384 = (char **)v383;
              v385 = (char *)v383 + 32 * v333;
              v334 = (char *)sub_1BE72E254((uint64_t)&v385, v319, v266, v383);
              goto LABEL_226;
            }
          }
LABEL_269:
          sub_1BE61F930();
        }
        v327 = (char *)v384;
        v328 = ((char *)v384 - (_BYTE *)v383) >> 5;
        if (v328 >= v321)
        {
          if (v380 == v378)
          {
            v331 = (char *)v383;
          }
          else
          {
            v331 = (char *)v383;
            do
            {
              *v323 = *v319;
              if (v319 != v323)
                sub_1BE62037C(v323 + 1, v319[1], v319[2], (v319[2] - v319[1]) >> 3);
              v319 += 4;
              v323 += 4;
              v331 += 32;
            }
            while (v319 != (char **)v378);
            v327 = (char *)v384;
          }
          while (v327 != v331)
          {
            v338 = (void *)*((_QWORD *)v327 - 3);
            if (v338)
            {
              *((_QWORD *)v327 - 2) = v338;
              operator delete(v338);
            }
            v327 -= 32;
          }
        }
        else
        {
          if (v384 != v383)
          {
            v329 = 32 * v328;
            v330 = (char **)v380;
            do
            {
              *v323 = *v330;
              if (v330 != v323)
                sub_1BE62037C(v323 + 1, v330[1], v330[2], (v330[2] - v330[1]) >> 3);
              v330 += 4;
              v323 += 4;
              v329 -= 32;
            }
            while (v329);
            v323 = v384;
          }
          v334 = (char *)sub_1BE72E254((uint64_t)&v385, &v319[4 * v328], v378, v323);
LABEL_226:
          v331 = v334;
        }
        v384 = (char **)v331;
        v335 = (double *)v380;
        if (v380)
        {
          for (k = v381; k != v335; k -= 4)
          {
            v337 = (void *)*((_QWORD *)k - 3);
            if (v337)
            {
              *((_QWORD *)k - 2) = v337;
              operator delete(v337);
            }
          }
          operator delete(v335);
        }
        v373 = v268;
        continue;
      }
      if (v267 >= ((char *)v384 - (_BYTE *)v383) >> 5)
      {
        v292 = 1.79769313e308;
        if (!v267)
          goto LABEL_160;
      }
      else
      {
        v272 = *(double *)((char *)v383 + v269 + 32);
        objc_msgSend_objectAtIndexedSubscript_(v83, v252, v267, v254, v255, v256);
        v273 = (void *)objc_claimAutoreleasedReturnValue();
        v279 = (unint64_t)objc_msgSend_length(v273, v274, v275, v276, v277, v278) > 1;

        v280 = 0.0;
        if (!v279)
        {
          objc_msgSend_objectAtIndexedSubscript_(v83, v252, v267, v254, v255, v256);
          v281 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_ch_mathCharSet(MEMORY[0x1E0CB3500], v282, v283, v284, v285, v286);
          v287 = (void *)objc_claimAutoreleasedReturnValue();
          v291 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v281, v288, (uint64_t)v287, 1, v289, v290) == 0;

          if (!v291)
            v280 = fmax(v257 - *((double *)v386 + v375), 0.0);
        }
        v292 = v272 + v280;
        v266 = v378;
        if (!v267)
        {
LABEL_160:
          v293 = 1.79769313e308;
          if (v292 <= 1.79769313e308)
            goto LABEL_161;
LABEL_169:
          v303 = *(_BYTE **)((char *)v383 + v269 + 8);
          v302 = *(_BYTE **)((char *)v383 + v269 + 16);
          v304 = v302 - v303;
          if (v302 == v303)
          {
            v305 = 0;
            v306 = 0;
            v307 = 0;
            v308 = 0;
            v309 = 1;
          }
          else
          {
            if (v304 < 0)
              sub_1BE61F930();
            v305 = (char *)operator new(v302 - v303);
            v306 = &v305[8 * (v304 >> 3)];
            memcpy(v305, v303, v304);
            v307 = 8 * (v304 >> 3);
            v308 = v307 >> 3;
            v309 = (v307 >> 3) + 1;
            if (v309 >> 61)
              sub_1BE61F930();
          }
          v310 = v258;
          if (v307 >> 2 > v309)
            v309 = v307 >> 2;
          if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
            v311 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v311 = v309;
          if (v311)
          {
            if (v311 >> 61)
              sub_1BE61F100();
            v312 = (char *)operator new(8 * v311);
            v313 = (unint64_t *)&v312[8 * v308];
            *v313 = v373;
            v314 = v313 + 1;
            if (v306 != v305)
            {
LABEL_182:
              v315 = (v306 - 8 - v305) & 0xFFFFFFFFFFFFFFF8;
              v313 = (unint64_t *)&v312[v307 - v315 - 8];
              memcpy(v313, &v306[-v315 - 8], v315 + 8);
            }
          }
          else
          {
            v312 = 0;
            v313 = (unint64_t *)(8 * v308);
            v318 = (unint64_t *)(8 * v308);
            *v318 = v373;
            v314 = v318 + 1;
            if (v306 != v305)
              goto LABEL_182;
          }
          v83 = v376;
          v379 = v313;
          if (v305)
            operator delete(v305);
          __p = *(void **)&v293;
          v258 = v310;
          *((_QWORD *)v310 + 1) = 0;
          *((_QWORD *)v310 + 2) = 0;
          *(_QWORD *)v310 = 0;
          v316 = (char *)v314 - (char *)v313;
          v268 = v373 + 1;
          if (v314 != v313)
          {
            if (v316 < 0)
              sub_1BE61F930();
            *(_QWORD *)&v393 = operator new((char *)v314 - (char *)v313);
            *((_QWORD *)&v393 + 1) = v393;
            v317 = v393 + 8 * (v316 >> 3);
            v394 = v317;
            memcpy((void *)v393, v313, v316);
            *((_QWORD *)&v393 + 1) = v317;
          }
          if (v378 >= v382)
          {
            v266 = (double *)sub_1BE72E114(&v380, (uint64_t)&__p);
            v381 = v266;
            if ((_QWORD)v393)
              operator delete((void *)v393);
          }
          else
          {
            *v378 = v293;
            v378[2] = 0.0;
            v378[3] = 0.0;
            v378[1] = 0.0;
            *(_OWORD *)(v378 + 1) = v393;
            *((_QWORD *)v378 + 3) = v394;
            v266 = v378 + 4;
            v381 = v378 + 4;
          }
          v300 = v379;
          if (v379)
LABEL_193:
            operator delete(v300);
          goto LABEL_150;
        }
      }
      v301 = (*((double *)v389 + v375) - *((double *)v399 + v267 - 1)) / *(double *)(v390 - 8);
      v293 = *(double *)((char *)v383 + v269) + *((double *)v386 + v375) + v301 * v301 * 0.1;
      if (v293 < v292)
        goto LABEL_169;
LABEL_161:
      v294 = (char *)v383 + v269;
      __p = *(void **)&v292;
      *((_QWORD *)v258 + 1) = 0;
      *((_QWORD *)v258 + 2) = 0;
      *(_QWORD *)v258 = 0;
      v296 = (_BYTE *)*((_QWORD *)v294 + 5);
      v295 = (_BYTE *)*((_QWORD *)v294 + 6);
      v297 = v295 - v296;
      if (v295 != v296)
      {
        if (v297 < 0)
          sub_1BE61F930();
        v298 = (char *)operator new(v295 - v296);
        v299 = &v298[8 * (v297 >> 3)];
        *(_QWORD *)&v393 = v298;
        v394 = (unint64_t)v299;
        memcpy(v298, v296, v297);
        *((_QWORD *)&v393 + 1) = v299;
        v266 = v378;
      }
      if (v266 < v382)
      {
        *v266 = v292;
        v266[2] = 0.0;
        v266[3] = 0.0;
        v266[1] = 0.0;
        *(_OWORD *)(v266 + 1) = v393;
        *((_QWORD *)v266 + 3) = v394;
        v266 += 4;
        v381 = v266;
      }
      else
      {
        v266 = (double *)sub_1BE72E114(&v380, (uint64_t)&__p);
        v300 = (unint64_t *)v393;
        v381 = v266;
        if ((_QWORD)v393)
          goto LABEL_193;
      }
LABEL_150:
      ++v267;
      v269 += 32;
      goto LABEL_151;
    }
    break;
  }
  v393 = 0uLL;
  __p = 0;
  v340 = *(v384 - 3);
  v339 = *(v384 - 2);
  v341 = v339 - v340;
  if (v339 == v340)
  {
    v342 = 0;
    v345 = 0;
  }
  else
  {
    if (v341 < 0)
      sub_1BE61F930();
    v342 = (char *)operator new(v339 - v340);
    __p = v342;
    *(_QWORD *)&v393 = v342;
    v343 = 8 * (v341 >> 3);
    *((_QWORD *)&v393 + 1) = &v342[v343];
    memcpy(v342, v340, v341);
    v344 = 0;
    v345 = 0;
    do
    {
      v346 = v345;
      v345 = *(_QWORD *)&v342[v344];
      objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v259, v346, v345 - v346, v262, v263);
      v347 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v371, v348, (uint64_t)v347, v349, v350, v351);

      v344 += 8;
    }
    while (v343 != v344);
  }
  v352 = (void *)MEMORY[0x1E0CB36B8];
  v353 = objc_msgSend_strokeCount(v372, v259, v260, v261, v262, v263);
  objc_msgSend_indexSetWithIndexesInRange_(v352, v354, v345, v353 - v345, v355, v356);
  v357 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v371, v358, (uint64_t)v357, v359, v360, v361);

  v362 = [CHSynthesisResult alloc];
  v42 = (void *)objc_msgSend_initWithContent_drawing_segmentContents_segmentStrokeIndexes_numberOfNotSynthesizedCharacters_(v362, v363, (uint64_t)v370, (uint64_t)v372, (uint64_t)v83, (uint64_t)v371, 0);
  if (v342)
    operator delete(v342);
  v364 = (char **)v383;
  if (v383)
  {
    v365 = v384;
    v366 = v383;
    if (v384 != v383)
    {
      do
      {
        v367 = *(v365 - 3);
        if (v367)
        {
          *(v365 - 2) = v367;
          operator delete(v367);
        }
        v365 -= 4;
      }
      while (v365 != v364);
      v366 = v383;
    }
    v384 = v364;
    operator delete(v366);
  }

  if (v386)
  {
    v387 = (double *)v386;
    operator delete(v386);
  }
  v37 = v369;
  if (v389)
  {
    v390 = (unint64_t)v389;
    operator delete(v389);
  }
  if (v399)
  {
    v400 = (double *)v399;
    operator delete(v399);
  }
LABEL_261:

LABEL_262:
  return v42;
}

void sub_1BE72D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  void *v53;
  void *v54;

  if (v54)
  {
    a40 = v54;
    operator delete(v54);
  }
  sub_1BE72DFA0(&a30);

  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::predictStyleEmbedding(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  unsigned int (**v9)(_QWORD);
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_signpost_id_t v16;
  NSObject *v17;
  NSObject *v18;
  unint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  os_signpost_id_t spid;
  void *v48;
  void *v49;
  id v50;
  uint8_t buf[4];
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend_length(v7, v10, v11, v12, v13, v14)
    && (CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(*a1, (NSString *)v7) & 1) != 0)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v15 = (id)qword_1EF568E50;
    v16 = os_signpost_id_generate(v15);

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v17 = (id)qword_1EF568E50;
    v18 = v17;
    spid = v16;
    v19 = v16 - 1;
    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE607000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "CHDiffusionPipelineComputeStyleEmbedding", "", buf, 2u);
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v20 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionPipelineComputeStyleEmbedding\"", buf, 2u);
    }

    objc_msgSend_synthesisOptionsWithDrawing_content_(CHSynthesisRequestOptions, v21, (uint64_t)v8, (uint64_t)v7, v22, v23);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    CoreHandwriting::synthesis::CHDiffusionPipeline::createModelInputData(a1, v7, v48, (uint64_t)&CoreHandwriting::synthesis::CHDiffusionPipeline::DEFAULT_CONFIG);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9 && v9[2](v9))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v24 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_DEFAULT, "Synthesizer: predictStyleEmbedding received shouldCancel. Aborting prediction process.", buf, 2u);
      }
      v25 = 0;
      goto LABEL_40;
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v26 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138739971;
      v52 = v7;
      _os_log_impl(&dword_1BE607000, v26, OS_LOG_TYPE_DEBUG, "Synthesizer: Predicting style embedding for transcription %{sensitive}@\n", buf, 0xCu);
    }

    v27 = objc_alloc(MEMORY[0x1E0C9E8F8]);
    v50 = 0;
    v31 = (void *)objc_msgSend_initWithDictionary_error_(v27, v28, (uint64_t)v49, (uint64_t)&v50, v29, v30);
    v24 = v50;
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predictStyle(*a1, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v32;
    if (v32)
    {
      objc_msgSend_featureValueForName_(v32, v33, (uint64_t)CFSTR("diffusion_pooled_style_encoding"), v34, v35, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_multiArrayValue(v38, v39, v40, v41, v42, v43);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (qword_1EF568E88 == -1)
      {
        v44 = (id)qword_1EF568E50;
        if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_29;
      }
      else
      {
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v44 = (id)qword_1EF568E50;
        if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_29:
          if (os_signpost_enabled(v44))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1BE607000, v44, OS_SIGNPOST_INTERVAL_END, spid, "CHDiffusionPipelineComputeStyleEmbedding", "", buf, 2u);
          }
        }
      }

      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v45 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v45, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionPipelineComputeStyleEmbedding\"", buf, 2u);
      }
      goto LABEL_39;
    }
    if (qword_1EF568E88 == -1)
    {
      v45 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
LABEL_38:
        v25 = 0;
LABEL_39:

LABEL_40:
        goto LABEL_41;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v45 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        goto LABEL_38;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v45, OS_LOG_TYPE_ERROR, "Synthesizer: Diffusion model style prediction returned nil. Aborting.", buf, 2u);
    goto LABEL_38;
  }
  v25 = 0;
LABEL_41:

  return v25;
}

void sub_1BE72DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

BOOL sub_1BE72DF80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_length(a2, (const char *)a2, a3, a4, a5, a6) != 0;
}

void **sub_1BE72DFA0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float32_t sub_1BE72E010(uint64_t a1, float32x4_t *a2)
{
  uint64x2_t **v2;
  unint64_t *v3;
  uint64x2_t *v4;
  unint64_t v5;
  float *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64x2_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64x2_t v12;
  uint64x2_t v13;
  uint64x2_t v14;
  uint64x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;

  v2 = *(uint64x2_t ***)(a1 + 32);
  v4 = *v2;
  v3 = (unint64_t *)v2[1];
  if (v4 != (uint64x2_t *)v3)
  {
    v5 = (char *)v3 - (char *)v4 - 8;
    if (v5 < 0x38)
    {
      v6 = (float *)a2;
      v7 = (unint64_t *)v4;
      do
      {
LABEL_7:
        v18 = *v7++;
        v17.f32[0] = (float)v18;
        *v6++ = (float)v18;
      }
      while (v7 != v3);
      return v17.f32[0];
    }
    v8 = (v5 >> 3) + 1;
    v6 = &a2->f32[v8 & 0x3FFFFFFFFFFFFFF8];
    v7 = (unint64_t *)v4 + (v8 & 0x3FFFFFFFFFFFFFF8);
    v9 = v4 + 2;
    v10 = a2 + 1;
    v11 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v13 = v9[-2];
      v12 = v9[-1];
      v15 = *v9;
      v14 = v9[1];
      v9 += 4;
      v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v13)), vcvtq_f64_u64(v12));
      v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v15)), vcvtq_f64_u64(v14));
      v10[-1] = v16;
      *v10 = v17;
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_7;
  }
  return v17.f32[0];
}

uint64_t sub_1BE72E0B4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

char *sub_1BE72E114(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_1BE61F930();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 59)
    sub_1BE61F100();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v2];
  v12 = &v10[v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v13 = v11 + 32;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      v18 = &v15[v16];
      *((_QWORD *)v17 - 4) = *(_QWORD *)&v15[v16 - 32];
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
      *((_QWORD *)v17 - 1) = *(_QWORD *)&v15[v16 - 8];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_QWORD *)v18 - 1) = 0;
      v16 -= 32;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = (void *)*((_QWORD *)v19 - 3);
      if (v20)
      {
        *((_QWORD *)v19 - 2) = v20;
        operator delete(v20);
      }
      v19 -= 32;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

_QWORD *sub_1BE72E254(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = *v6;
      a4[2] = 0;
      a4[3] = 0;
      a4[1] = 0;
      v9 = (_BYTE *)v6[1];
      v8 = (_BYTE *)v6[2];
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          sub_1BE61F930();
        v11 = (char *)operator new(v8 - v9);
        a4[1] = v11;
        a4[2] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[3] = v7;
        memcpy(v11, v9, v10);
        a4[2] = v7;
      }
      a4 += 4;
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1BE72E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v11;
    operator delete(v11);
  }
  sub_1BE72E0B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE72E4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE72E918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE72E92C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72E93C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE72E950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72E960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE72E9A8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    return 0;
  objc_msgSend_targetContentInfo(a1, a2, a3, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_referenceSubstringRangeOfComposedCharacterAtIndex_(v9, v10, (uint64_t)a2, v11, v12, v13);

  objc_msgSend_targetContentInfo(a1, v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_referenceSubstringRangeOfComposedCharacterAtIndex_(v20, v21, (uint64_t)&a2[a3 - 1], v22, v23, v24);

  return v14;
}

void sub_1BE72EA50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72EA60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE72EA70(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[4];
  id v59;
  uint64_t *v60;
  _QWORD v61[4];
  id v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  __n128 (*v67)(__n128 *, __n128 *);
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t v71;

  if (!a1)
    return 0;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 != (const char *)0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend_targetContentInfo(a1, a2, a3, a4, a5, a6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v10, v11, (uint64_t)a2, v12, v13, v14);

    v64 = 0;
    v65 = &v64;
    v67 = sub_1BE72FDB8;
    v68 = nullsub_28;
    v66 = 0x4012000000;
    v69 = &unk_1BE94989A;
    v70 = v15;
    v71 = a3;
    objc_msgSend_newlineCharacterSet(MEMORY[0x1E0CB3500], v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_targetContentInfo(a1, v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_referenceSubstring(v27, v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = MEMORY[0x1E0C809B0];
    v61[0] = MEMORY[0x1E0C809B0];
    v61[1] = 3221225472;
    v61[2] = sub_1BE72FDC8;
    v61[3] = &unk_1E77F4530;
    v35 = v21;
    v62 = v35;
    v63 = &v64;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v33, v36, v15, a3, 2, (uint64_t)v61);

    if (v65[7])
    {
      objc_msgSend_targetContentInfo(a1, v37, v38, v39, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_referenceSubstring(v42, v43, v44, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v58[0] = v34;
      v58[1] = 3221225472;
      v58[2] = sub_1BE72FE80;
      v58[3] = &unk_1E77F4530;
      v59 = v35;
      v60 = &v64;
      objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v48, v49, v15, a3, 258, (uint64_t)v58);

    }
    objc_msgSend_targetContentInfo(a1, v37, v38, v39, v40, v41);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend_absoluteLocationFromRelativeLocation_(v50, v51, v65[6], v52, v53, v54);
    v56 = v65[7];

    if (v56)
      v8 = v55;
    else
      v8 = (uint64_t)a2;

    _Block_object_dispose(&v64, 8);
  }
  return v8;
}

void sub_1BE72EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE72ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE72ED14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE72ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE72ED48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE72ED58(void *a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  NSObject *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int isEqualToString;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t v97[16];

  if (!a1)
    return 0;
  v7 = (uint64_t)a2;
  if (a2 == (const char *)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v97 = 0;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_FAULT, "The affected range to be trimmed must be valid", v97, 2u);
    }

  }
  if (a3 >= 2)
  {
    objc_msgSend_targetContentInfo(a1, a2, a3, a4, a5, a6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v10, v11, v7, v12, v13, v14);

    objc_msgSend_targetContentInfo(a1, v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_referenceSubstring(v21, v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v27, v28, v15, v29, v30, v31);
    v34 = v33;

    objc_msgSend_targetContentInfo(a1, v35, v36, v37, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_referenceSubstring(v40, v41, v42, v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringWithRange_(v46, v47, v32, v34, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v50, v51, (uint64_t)CFSTR(" "), v52, v53, v54);

    if (isEqualToString)
      v61 = v34;
    else
      v61 = 0;
    objc_msgSend_targetContentInfo(a1, v56, v57, v58, v59, v60);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_referenceSubstring(v62, v63, v64, v65, v66, v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v68, v69, a3 + v15 - 1, v70, v71, v72);
    v75 = v74;

    objc_msgSend_targetContentInfo(a1, v76, v77, v78, v79, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_referenceSubstring(v81, v82, v83, v84, v85, v86);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringWithRange_(v87, v88, v73, v75, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_isEqualToString_(v91, v92, (uint64_t)CFSTR(" "), v93, v94, v95);
    v7 += v61;

  }
  return v7;
}

void sub_1BE72EF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE72EFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72EFB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE72F014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72F024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE72F034(void *a1, const char *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  NSUInteger v6;
  uint64_t v7;
  char v8;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  BOOL v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  BOOL v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v107;
  const char *v109;
  NSObject *v110;
  NSObject *v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t active;
  NSUInteger v119;
  NSUInteger v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSUInteger v131;
  const char *length;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSRange v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v144;
  void *v146;
  __int16 v147;
  uint8_t buf[4];
  unint64_t v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  NSRange v153;
  NSRange v154;
  NSRange v155;

  v152 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v6 = a3;
  v7 = (uint64_t)a2;
  if (a3)
  {
    v8 = a4;
    objc_msgSend_targetContentInfo(a1, a2, a3, a4, (uint64_t)a5, a6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v10, v11, v7, v12, v13, v14);

    objc_msgSend_targetContentInfo(a1, v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_referenceSubstring(v21, v22, v23, v24, v25, v26);
    v146 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_locale(a1, v27, v28, v29, v30, v31);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v15 + v6;
    if (v15 + v6 > objc_msgSend_length(v146, v32, v33, v34, v35, v36))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v38 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      {
        v153.location = v15;
        v153.length = v6;
        NSStringFromRange(v153);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v149 = (unint64_t)v39;
        v150 = 2048;
        v151 = objc_msgSend_length(v146, v40, v41, v42, v43, v44);
        _os_log_impl(&dword_1BE607000, v38, OS_LOG_TYPE_FAULT, "Range %@ out of string length %ld", buf, 0x16u);

      }
    }
    v147 = 0;
    sub_1BE730120((uint64_t)CHTextInputGesture, v146, v15, v6, (_BYTE *)&v147 + 1, &v147);
    if (!(HIBYTE(v147) | v147))
    {
      v50 = 0;
LABEL_52:
      objc_msgSend_targetContentInfo(a1, v45, v46, v47, v48, v49);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      active = objc_msgSend_activePreviewRange(v112, v113, v114, v115, v116, v117);
      v120 = v119;

      objc_msgSend_targetContentInfo(a1, v121, v122, v123, v124, v125);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v131 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v126, v127, active, v128, v129, v130);

      if (v131 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v154.location = v131;
        v154.length = v120;
        v155.location = v15;
        v155.length = v6;
        v137 = NSIntersectionRange(v154, v155);
        length = (const char *)v137.length;
        if (v137.length == v6)
        {
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v137.length && v131 <= v15)
        {
          v15 = v131 + v120;
        }
      }
      if (a5)
        *a5 = v50;
      objc_msgSend_targetContentInfo(a1, length, v133, v134, v135, v136);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend_absoluteLocationFromRelativeLocation_(v138, v139, v15, v140, v141, v142);

      return v7;
    }
    v51 = (void *)objc_opt_class();
    v54 = objc_msgSend_rangeOfTokenAtCharacterIndex_inString_locale_(v51, v52, v15, (uint64_t)v146, (uint64_t)v144, v53);
    v56 = v55;
    v57 = (void *)objc_opt_class();
    v60 = objc_msgSend_rangeOfTokenAtCharacterIndex_inString_locale_(v57, v58, v37 - 1, (uint64_t)v146, (uint64_t)v144, v59);
    v61 = v60;
    v62 = v45;
    if ((v8 & 1) != 0 && v54 == v60 && v56 == v45)
    {
      objc_msgSend_lastStroke(a1, v45, v46, v47, v48, v49);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      if (v63)
      {

      }
      else if (!objc_msgSend_preferCharacterLevel(a1, v64, v65, v66, v67, v68))
      {
        goto LABEL_27;
      }
      if ((objc_msgSend_preferCharacterLevel(a1, v45, v46, v47, v48, v49) & 1) != 0)
        goto LABEL_26;
      objc_msgSend_lastStroke(a1, v45, v46, v47, v48, v49);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = v69 == 0;

      if (v70)
        goto LABEL_26;
      objc_msgSend_sharedSettings(CHTextInputProtoSettings, v45, v46, v47, v48, v49);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_subwordGestureEndingSpeedRange(v71, v72, v73, v74, v75, v76);
      v78 = v77;

      objc_msgSend_lastStroke(a1, v79, v80, v81, v82, v83);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_speedForFinalTimeRange_stroke_(CHStrokeUtilities, v85, (uint64_t)v84, v86, v87, v88, v78);
      v90 = v89;

      if (v90 > -1.0)
      {
        objc_msgSend_sharedSettings(CHTextInputProtoSettings, v45, v46, v47, v48, v49);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_subwordGestureSpeedThreshold(v91, v92, v93, v94, v95, v96);
        v98 = v90 < v97;

        if (v98)
        {
LABEL_26:
          objc_msgSend_sharedSettings(CHTextInputProtoSettings, v45, v46, v47, v48, v49);
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          v105 = objc_msgSend_preventLeftoverCharsInSubwordGestures(v99, v100, v101, v102, v103, v104);

          v50 = 0;
          if (!v105 || (uint64_t)(v15 - v54) > 1 || (uint64_t)&v62[v54 - v37] > 1)
            goto LABEL_52;
        }
      }
    }
LABEL_27:
    if (v54 == 0x7FFFFFFFFFFFFFFFLL || HIBYTE(v147) == 0)
      v54 = v15;
    v107 = v15 - v54;
    if (v61 == 0x7FFFFFFFFFFFFFFFLL || v147 == 0)
      v109 = 0;
    else
      v109 = &v62[v61 - v37];
    if ((v107 & 0x8000000000000000) != 0)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v110 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v110, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        v149 = v15 - v54;
        _os_log_impl(&dword_1BE607000, v110, OS_LOG_TYPE_FAULT, "leadingExpansion cannot be negative: %ld", buf, 0xCu);
      }

    }
    if (((unint64_t)v109 & 0x8000000000000000) != 0)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v111 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v111, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        v149 = (unint64_t)v109;
        _os_log_impl(&dword_1BE607000, v111, OS_LOG_TYPE_FAULT, "trailingExpansion cannot be negative: %ld", buf, 0xCu);
      }

    }
    v6 += (NSUInteger)&v109[v107];
    v50 = 1;
    v15 = v54;
    goto LABEL_52;
  }
  if (a5)
    *a5 = 0;
  return v7;
}

void sub_1BE72F5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE72F6CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CHPolygon *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  CHPolygon *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  BOOL v110;
  uint64_t v111;
  double MaxX;
  CGFloat v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  id v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint8_t v132[16];
  uint8_t buf[8];
  void *v134;
  uint64_t v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;

  v124 = a5;
  v10 = a6;
  objc_opt_self();
  objc_opt_self();
  v11 = a4 - 4;
  if ((unint64_t)(a4 - 4) >= 3)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v12 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v12, OS_LOG_TYPE_FAULT, "Refined stroke ranges can only be computed for scribble, circle or polygon result types", buf, 2u);
    }

  }
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_FAULT, "The initial affected text range must be valid", buf, 2u);
    }

  }
  v125 = a2;
  v14 = (void *)objc_opt_class();
  objc_msgSend_indexSetWithIndex_(MEMORY[0x1E0CB36B8], v15, 0, v16, v17, v18);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    objc_msgSend_convexHullForStrokes_inDrawing_(v14, v19, (uint64_t)v22, (uint64_t)v124, v20, v21);
  }
  else
  {
    *(_QWORD *)buf = 0;
    v134 = 0;
    v135 = 0;
  }

  v24 = *(void **)buf;
  v23 = v134;
  v123 = (unint64_t)v134 - *(_QWORD *)buf;
  v131 = ((uint64_t)v134 - *(_QWORD *)buf) >> 4;
  v25 = (char *)malloc_type_calloc(v131, 0x10uLL, 0x1000040451B5BE8uLL);
  v26 = (uint64_t)v25;
  if (v23 != v24)
  {
    v27 = 0;
    v28 = v131;
    if (v131 <= 1)
      v28 = 1;
    do
    {
      *(_OWORD *)&v25[v27] = *(_OWORD *)(*(_QWORD *)buf + v27);
      v27 += 16;
      --v28;
    }
    while (v28);
  }
  v29 = [CHPolygon alloc];
  v30 = v125;
  v34 = objc_msgSend_initWithVertices_vertexCount_(v29, v31, v26, v131, v32, v33);
  v39 = (void *)v34;
  if (v11 >= 3)
  {
    v40 = 100.0;
    v41 = v125 + a3;
    if (v125 >= v125 + a3)
      goto LABEL_22;
    goto LABEL_30;
  }
  v40 = dbl_1BE8D6938[v11];
  v41 = v125 + a3;
  if (v125 < v125 + a3)
  {
LABEL_30:
    v44 = 0;
    v45 = 2;
    if (v131 > 2)
      v45 = v131;
    v130 = v45;
    v128 = (void *)v34;
    v129 = 0x7FFFFFFFFFFFFFFFLL;
    v126 = v41;
    v127 = a4;
    while (1)
    {
      v49 = objc_msgSend_referenceSubstringRangeOfComposedCharacterAtIndex_(v10, v35, v30, v36, v37, v38);
      v50 = (uint64_t)v46;
      if (v49 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v51 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v132 = 0;
          _os_log_impl(&dword_1BE607000, v51, OS_LOG_TYPE_FAULT, "Character range cannot be undefined.", v132, 2u);
        }

      }
      objc_msgSend_referenceSubstringInRange_(v10, v46, v49, v50, v47, v48);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend_singleScriptCodeForString_(CHTextInputScriptSpec, v53, (uint64_t)v52, v54, v55, v56);
      if (a4 == 6)
      {
        if (objc_msgSend_shouldRelaxCharacterBoundsPercentageOverlapForScript_(CHTextInputScriptSpec, v58, v57, v59, v60, v61))v66 = 10.0;
        else
          v66 = v40;
        objc_msgSend_visualCharacterRectForCharacterIndex_(v10, v62, v30, v63, v64, v65);
        v68 = v67;
        v70 = v69;
        v72 = v71;
        v74 = v73;
      }
      else
      {
        objc_msgSend_characterRectForComposedCharacterAtIndex_(v10, v58, v30, v59, v60, v61);
        v68 = v75;
        v70 = v76;
        v72 = v77;
        v74 = v78;
        v66 = v40;
      }
      v136.origin.x = v68;
      v136.origin.y = v70;
      v136.size.width = v72;
      v136.size.height = v74;
      if (CGRectIsNull(v136))
        goto LABEL_35;
      v79 = [CHPolygon alloc];
      v85 = (void *)objc_msgSend_initWithRect_(v79, v80, v81, v82, v83, v84, v68, v70, v72, v74);
      objc_msgSend_polygonByIntersectingWithClipPolygon_(v39, v86, (uint64_t)v85, v87, v88, v89);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_area(v90, v91, v92, v93, v94, v95);
      v97 = v96;
      objc_msgSend_area(v85, v98, v99, v100, v101, v102);
      v109 = v97 / v108 * 100.0;
      ++v44;
      v110 = v109 > v66;
      if (v109 > 0.0)
      {
        if (v109 > v66)
          goto LABEL_51;
        if (a4 == 6)
        {
          v111 = objc_msgSend_edgeCountIntersectingLineSegment_(v39, v103, v104, v105, v106, v107, v68, v70 + v74 * 0.25, v68, v70 + v74 * 0.75);
          v137.origin.x = v68;
          v137.origin.y = v70;
          v137.size.width = v72;
          v137.size.height = v74;
          MaxX = CGRectGetMaxX(v137);
          v138.origin.x = v68;
          v138.origin.y = v70;
          v138.size.width = v72;
          v138.size.height = v74;
          v113 = CGRectGetMaxX(v138);
          v119 = objc_msgSend_edgeCountIntersectingLineSegment_(v39, v114, v115, v116, v117, v118, MaxX, v70 + v74 * 0.25, v113, v70 + v74 * 0.75);
          if (v111 > 0 || v119 >= 1)
          {
LABEL_51:
            if (v129 == 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_62;
            goto LABEL_34;
          }
        }
        if (v123 < 0x11)
          goto LABEL_34;
        v120 = 0;
        v121 = 0;
        v110 = 1;
        v122 = 1;
        do
        {
          v121 += objc_msgSend_edgeCountIntersectingLineSegment_(v85, v103, v104, v105, v106, v107, *(double *)(*(_QWORD *)buf + v120), *(double *)(*(_QWORD *)buf + v120 + 8), *(double *)(*(_QWORD *)buf + v120 + 16), *(double *)(*(_QWORD *)buf + v120 + 24));
          if (v121 >= 3)
            break;
          v110 = ++v122 < v131;
          v120 += 16;
        }
        while (v130 != v122);
      }
      v41 = v126;
      if (v110)
      {
        v39 = v128;
        a4 = v127;
        if (v129 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_62:
          v129 = v30;
          v44 = 1;
        }
      }
      else
      {
        a4 = v127;
        v39 = v128;
      }
LABEL_34:

LABEL_35:
      if (++v30 == v41)
        goto LABEL_23;
    }
  }
LABEL_22:
  v129 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:

  if (*(_QWORD *)buf)
  {
    v134 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v129 == 0x7FFFFFFFFFFFFFFFLL)
    v42 = v125;
  else
    v42 = v129;

  return v42;
}

void sub_1BE72FCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE72FCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE72FDA8()
{
  JUMPOUT(0x1BE72FD80);
}

void sub_1BE72FDB0()
{
  JUMPOUT(0x1BE72FD80);
}

__n128 sub_1BE72FDB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE72FDC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v10 = a2;
  v11 = *(void **)(a1 + 32);
  v21 = v10;
  v16 = objc_msgSend_characterAtIndex_(v10, v12, 0, v13, v14, v15);
  if (objc_msgSend_characterIsMember_(v11, v17, v16, v18, v19, v20))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) += a4;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56) -= a4;
  }
  else
  {
    *a7 = 1;
  }

}

void sub_1BE72FE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE72FE80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v10 = a2;
  v11 = *(void **)(a1 + 32);
  v21 = v10;
  v16 = objc_msgSend_characterAtIndex_(v10, v12, 0, v13, v14, v15);
  if (objc_msgSend_characterIsMember_(v11, v17, v16, v18, v19, v20))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56) -= a4;
  else
    *a7 = 1;

}

void sub_1BE72FF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE730034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE73007C(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result[4] + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 <= a2)
  {
    v4 = *(_QWORD *)(result[5] + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 + v3 > a2)
    {
      if (a2 + 1 == result[8] + result[7])
      {
        *(_QWORD *)(v4 + 24) = v5 - 1;
      }
      else if (v3 == a2)
      {
        *(_QWORD *)(v2 + 24) = a2 + 1;
        --*(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24);
      }
      else
      {
        v6 = *(_QWORD *)(result[6] + 8);
        if (!*(_BYTE *)(v6 + 24))
        {
          *(_BYTE *)(v6 + 24) = 1;
          *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = a2 - *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24);
        }
      }
    }
  }
  return result;
}

void sub_1BE730120(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, _BYTE *a5, _BYTE *a6)
{
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char shouldCorrectionGesturesSnapToTokensForScriptCode;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  _QWORD v43[5];
  uint8_t buf[8];
  uint8_t *v45;
  uint64_t v46;
  int v47;

  v10 = a2;
  objc_opt_self();
  if (a3 == 0x7FFFFFFFFFFFFFFFLL || a3 + a4 > objc_msgSend_length(v10, v11, v12, v13, v14, v15))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v17 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v17, OS_LOG_TYPE_FAULT, "The input string and range must be compatible with each other", buf, 2u);
    }

  }
  *(_QWORD *)buf = 0;
  v45 = buf;
  v46 = 0x2020000000;
  v47 = 0;
  v18 = MEMORY[0x1E0C809B0];
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = sub_1BE730390;
  v43[3] = &unk_1E77F3F08;
  v43[4] = buf;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v10, v16, 0, a3 + 1, 258, (uint64_t)v43);
  v19 = (void *)objc_opt_class();
  shouldCorrectionGesturesSnapToTokensForScriptCode = objc_msgSend_shouldCorrectionGesturesSnapToTokensForScriptCode_(v19, v20, *((unsigned int *)v45 + 6), v21, v22, v23);
  v30 = shouldCorrectionGesturesSnapToTokensForScriptCode;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v42 = *((_DWORD *)v45 + 6);
  if (a4 >= 2)
  {
    v31 = objc_msgSend_length(v10, v25, v26, v27, v28, v29);
    v38[0] = v18;
    v38[1] = 3221225472;
    v38[2] = sub_1BE730424;
    v38[3] = &unk_1E77F3F08;
    v38[4] = &v39;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v10, v32, a3 + a4, v31 - (a3 + a4), 2, (uint64_t)v38);
    v33 = (void *)objc_opt_class();
    shouldCorrectionGesturesSnapToTokensForScriptCode = objc_msgSend_shouldCorrectionGesturesSnapToTokensForScriptCode_(v33, v34, *((unsigned int *)v40 + 6), v35, v36, v37);
  }
  if (a5)
    *a5 = v30;
  if (a6)
    *a6 = shouldCorrectionGesturesSnapToTokensForScriptCode;
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(buf, 8);

}

void sub_1BE730338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE730390(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = a2;
  v9 = (void *)objc_opt_class();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_singleScriptCodeForString_(v9, v10, (uint64_t)v19, v11, v12, v13);
  v14 = (void *)objc_opt_class();
  if ((objc_msgSend_isSkippableScriptCode_(v14, v15, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v16, v17, v18) & 1) == 0)*a7 = 1;

}

void sub_1BE730410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE730424(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = a2;
  v9 = (void *)objc_opt_class();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_singleScriptCodeForString_(v9, v10, (uint64_t)v19, v11, v12, v13);
  v14 = (void *)objc_opt_class();
  if ((objc_msgSend_isSkippableScriptCode_(v14, v15, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v16, v17, v18) & 1) == 0)*a7 = 1;

}

void sub_1BE7304A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7306A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7306E4(__n128 a1, __n128 a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  id v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  __int128 v15;
  float64x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  __int128 v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat MidY;
  float64x2_t v30;
  float32x2_t v31;
  double v32;
  CGFloat *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t Levels;
  NSObject *v69;
  uint64_t v70;
  double MinX;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double MaxX;
  unint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  NSObject *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  NSObject *v95;
  id v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v102[2];
  __n128 v103;
  uint64_t v104;
  __n128 v105;
  __int128 v106;
  _QWORD v107[4];
  id v108;
  uint8_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint8_t buf[8];
  uint8_t *v115;
  uint64_t v116;
  __n128 (*v117)(uint64_t, uint64_t);
  uint64_t (*v118)();
  void *v119;
  __int128 v120;
  __int128 v121;
  uint8_t v122[4];
  uint64_t v123;
  __int16 v124;
  int v125;
  uint64_t v126;
  CGRect v127;

  v104 = a6;
  v103 = a2;
  v105 = a1;
  v126 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  objc_opt_self();
  if (a7 == 0x7FFFFFFFFFFFFFFFLL || !a8)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v14 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v14, OS_LOG_TYPE_FAULT, "The searching range must be valid", buf, 2u);
    }

  }
  *(_QWORD *)buf = 0;
  v115 = buf;
  v116 = 0x5012000000;
  v117 = sub_1BE730E9C;
  v118 = nullsub_29;
  v119 = &unk_1BE94989A;
  v15 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v120 = *MEMORY[0x1E0C9D628];
  v121 = v15;
  if (a7 >= a7 + a8)
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)&v16.f64[0] = v105.n128_u64[0];
    *(_QWORD *)&v16.f64[1] = v103.n128_u64[0];
    v17 = vcvt_f32_f64(v16);
    v18 = v104 + 32 * a7 + 16;
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    v20 = 1.79769313e308;
    do
    {
      v21 = *(double *)(v18 - 16);
      v22 = *(double *)(v18 - 8);
      v23 = *(double *)v18;
      v24 = *(double *)(v18 + 8);
      v127.origin.x = v21;
      v127.origin.y = v22;
      v127.size.width = *(CGFloat *)v18;
      v127.size.height = v24;
      *(double *)&v25 = CGRectGetMidX(v127);
      v106 = v25;
      *(CGFloat *)&v25 = v21;
      v26 = v22;
      v27 = v23;
      v28 = v24;
      MidY = CGRectGetMidY(*(CGRect *)&v25);
      *(_QWORD *)&v30.f64[0] = v106;
      v30.f64[1] = MidY;
      v31 = vsub_f32(v17, vcvt_f32_f64(v30));
      v32 = sqrtf(vaddv_f32(vmul_f32(v31, v31)));
      if (v20 > v32)
      {
        v33 = (CGFloat *)v115;
        *((CGFloat *)v115 + 6) = v21;
        v33[7] = v22;
        v33[8] = v23;
        v33[9] = v24;
        v20 = v32;
        v19 = a7;
      }
      ++a7;
      v18 += 32;
      --a8;
    }
    while (a8);
  }
  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], v12, (uint64_t)CFSTR("[\u200E\u200F\u202A-\u202E]"), 0, 0, v13);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend_length(v11, v35, v36, v37, v38, v39);
  objc_msgSend_firstMatchInString_options_range_(v34, v41, (uint64_t)v11, 0, 0, v40);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], v43, (uint64_t)CFSTR("[؀-ۿ]"), 0, 0, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend_length(v11, v46, v47, v48, v49, v50);
  objc_msgSend_firstMatchInString_options_range_(v45, v52, (uint64_t)v11, 0, 0, v51);
  v53 = objc_claimAutoreleasedReturnValue();
  v54 = (void *)v53;
  if (a5 <= 1 && !v42 && v53)
  {
    *(_QWORD *)&v106 = 0;
    ubidi_open();
    v60 = objc_msgSend_length(v11, v55, v56, v57, v58, v59);
    v102[1] = v102;
    v61 = MEMORY[0x1E0C80A78](v60);
    objc_msgSend_getCharacters_range_(v11, v63, (uint64_t)v102 - ((v62 + 15) & 0x3FFFFFFF0), 0, v61, v64);
    v113 = 0;
    v65 = ubidi_setPara();
    MEMORY[0x1E0C80A78](v65);
    v67 = (char *)v102 - ((v66 + 15) & 0x7FFFFFFF0);
    ubidi_getVisualMap();
    Levels = ubidi_getLevels();
    v42 = (void *)v106;
    if (v113 < 1)
    {
      v70 = Levels;
      MinX = CGRectGetMinX(*(CGRect *)(v115 + 48));
      MaxX = CGRectGetMaxX(*(CGRect *)(v115 + 48));
      v78 = 0;
      v79 = vabdd_f64(MinX, v105.n128_f64[0]);
      v80 = vabdd_f64(MaxX, v105.n128_f64[0]);
      while (v78 < objc_msgSend_length(v11, v72, v73, v74, v75, v76))
      {
        if (v19 == *(_DWORD *)&v67[4 * v78])
          goto LABEL_28;
        ++v78;
      }
      v78 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_28:
      v81 = objc_msgSend_length(v11, v72, v73, v74, v75, v76);
      if (v79 > v80)
        v87 = v78 + 1;
      else
        v87 = v78 - 1;
      if (v81 - 1 < v87)
        v87 = objc_msgSend_length(v11, v82, v83, v84, v85, v86) - 1;
      if (*(unsigned __int8 *)(v70 + *(int *)&v67[4 * v87]) < *(unsigned __int8 *)(v70 + v19))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v88 = (id)qword_1EF568E48;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
        {
          v89 = *(_DWORD *)&v67[4 * v87];
          *(_DWORD *)v122 = 134218240;
          v123 = v19;
          v124 = 1024;
          v125 = v89;
          _os_log_impl(&dword_1BE607000, v88, OS_LOG_TYPE_DEBUG, "CHTextInputGesture _cursorPositionForPoint updated index from %li to %i", v122, 0x12u);
        }

        v19 = *(int *)&v67[4 * v87];
        v90 = *((_QWORD *)v115 + 6);
        v91 = *((_QWORD *)v115 + 7);
        v92 = *((_QWORD *)v115 + 8);
        v93 = *((_QWORD *)v115 + 9);
        if (v79 > v80)
          v94.n128_f64[0] = CGRectGetMinX(*(CGRect *)&v90);
        else
          v94.n128_f64[0] = CGRectGetMaxX(*(CGRect *)&v90);
        v105 = v94;
      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v69 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v122 = 0;
        _os_log_impl(&dword_1BE607000, v69, OS_LOG_TYPE_ERROR, "CHTextInputGesture _cursorPositionForPoint failed in unicode logical to visual transform", v122, 2u);
      }

    }
  }
  if (v19 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v95 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v95, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v122 = 0;
      _os_log_impl(&dword_1BE607000, v95, OS_LOG_TYPE_FAULT, "There must be a valid character closest to the point", v122, 2u);
    }

  }
  v107[0] = MEMORY[0x1E0C809B0];
  v107[1] = 3221225472;
  v107[2] = sub_1BE730EAC;
  v107[3] = &unk_1E77F4580;
  v109 = buf;
  v110 = v104;
  v111 = v105.n128_u64[0];
  v112 = v103.n128_u64[0];
  v96 = v11;
  v108 = v96;
  v100 = objc_msgSend_cursorPositionAtIndex_usingBlockToSelectSide_(v96, v97, v19, (uint64_t)v107, v98, v99);

  _Block_object_dispose(buf, 8);
  return v100;
}

void sub_1BE730DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;

  v7 = *(void **)(v5 - 352);
  _Block_object_dispose((const void *)(v5 - 256), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1BE730E9C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1BE730EAC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  double MinX;
  double v9;
  double MaxX;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int isRightToLeftScriptForCharacter;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int IsMember;
  double v37;
  double v38;
  unsigned int v39;

  if (a3 >= 2 && a2 < a2 + a3)
  {
    v6 = 32 * a2;
    v7 = a3;
    do
    {
      *(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = CGRectUnion(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 48), *(CGRect *)(*(_QWORD *)(a1 + 48) + v6));
      v6 += 32;
      --v7;
    }
    while (v7);
  }
  MinX = CGRectGetMinX(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
  v9 = *(double *)(a1 + 56);
  MaxX = CGRectGetMaxX(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
  v11 = *(double *)(a1 + 56);
  objc_msgSend_substringWithRange_(*(void **)(a1 + 32), v12, a2, a3, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  isRightToLeftScriptForCharacter = objc_msgSend_isRightToLeftScriptForCharacter_(CHTextInputScriptSpec, v16, (uint64_t)v15, v17, v18, v19);

  objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend_characterAtIndex_(*(void **)(a1 + 32), v27, a2, v28, v29, v30);
  IsMember = objc_msgSend_characterIsMember_(v26, v32, v31, v33, v34, v35);
  v37 = vabdd_f64(MinX, v9);
  v38 = vabdd_f64(MaxX, v11);

  v39 = IsMember | isRightToLeftScriptForCharacter ^ 1;
  if ((v39 & 1) == 0 && v37 <= v38)
    return 1;
  if (v38 <= v37)
    return v39;
  return 0;
}

void sub_1BE731014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE731024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE731808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE7321C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE732244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73226C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7322A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE7322CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7324CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE732538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73294C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE732968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73297C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7329A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7329B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7329CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7329E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7329F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE732FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73378C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void VariantMap::VariantMap(VariantMap *this, const char *a2)
{
  uint64_t v2;
  const char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  char *v53;
  int64_t v54;
  unint64_t v55;
  char *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  _BYTE *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  char *v112;
  int v113;
  char *v114;
  __int128 *v115;
  _OWORD *v116;
  unint64_t v117;
  __int128 v118;
  uint64_t v119;
  FILE *v120;
  char *v121;
  char *v122;
  int v123;
  char *v124;
  char *v125;
  char *v126;
  void *__p;
  char *v128;
  char *v129;
  _DWORD *v130;
  uint64_t v131;
  char *v132;
  char __str[4096];
  uint64_t v134;

  v2 = MEMORY[0x1E0C80A78](this);
  v134 = *MEMORY[0x1E0C80C00];
  v130 = 0;
  v131 = 0;
  v132 = 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v120 = fopen(v3, "r");
  if (!fgets(__str, 4096, v120))
  {
    LODWORD(v75) = 0;
    v74 = 0;
    v6 = 0;
    v71 = 0;
    v73 = 0;
    v72 = 0;
    v77 = (char *)__p;
    v78 = -(uint64_t)__p;
    v79 = -(uint64_t)__p >> 2;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 62)
      goto LABEL_99;
    goto LABEL_89;
  }
  v119 = v2;
  v4 = 0;
  v122 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = strtok(__str, " \t\n\r\b");
    if (v8)
    {
      v123 = 0;
      sscanf(v8, "0x%x", &v123);
      v9 = v123;
      if (v4 < v122)
      {
        *(_DWORD *)v4 = v123;
        v10 = (uint64_t)(v4 + 4);
        goto LABEL_29;
      }
      v11 = (v4 - v5) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        sub_1BE61F930();
      if ((v122 - v5) >> 1 > v12)
        v12 = (v122 - v5) >> 1;
      if ((unint64_t)(v122 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        if (v13 >> 62)
          sub_1BE61F100();
        v14 = operator new(4 * v13);
        v15 = &v14[4 * v11];
        *v15 = v9;
        v10 = (uint64_t)(v15 + 1);
        v16 = v4 - v5;
        if (v4 == v5)
          goto LABEL_26;
      }
      else
      {
        v14 = 0;
        v15 = (_DWORD *)(4 * v11);
        *(_DWORD *)(4 * v11) = v123;
        v10 = 4 * v11 + 4;
        v16 = v4 - v5;
        if (v4 == v5)
          goto LABEL_26;
      }
      v17 = v16 - 4;
      if (v17 >= 0xBC)
      {
        v19 = v10;
        v20 = (v4 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v14[v4 - v5 - 4 - v20] <= &v14[v4 - v5 - 4]
          && &v4[-v20 - 4] <= v4 - 4
          && (unint64_t)(v5 - v14) >= 0x20)
        {
          v65 = (v17 >> 2) + 1;
          v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
          v18 = &v4[-v66];
          v15 = (_DWORD *)((char *)v15 - v66);
          v67 = &v14[4 * v11 - 16];
          v68 = v4 - 16;
          v69 = v65 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v70 = *(_OWORD *)v68;
            *(v67 - 1) = *((_OWORD *)v68 - 1);
            *v67 = v70;
            v67 -= 2;
            v68 -= 32;
            v69 -= 8;
          }
          while (v69);
          v10 = v19;
          if (v65 == (v65 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_26;
        }
        else
        {
          v18 = v4;
          v10 = v19;
        }
      }
      else
      {
        v18 = v4;
      }
      do
      {
        v21 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v15 = v21;
      }
      while (v18 != v5);
LABEL_26:
      v130 = v15;
      v131 = v10;
      v122 = &v14[4 * v13];
      v132 = v122;
      if (v5)
      {
        v22 = v10;
        operator delete(v5);
        v10 = v22;
        v7 = v124;
        v6 = v125;
      }
      v5 = (char *)v15;
LABEL_29:
      v121 = (char *)v10;
      v131 = v10;
      v23 = (unint64_t)(v6 - v7) >> 2;
      v24 = v128;
      if (v128 < v129)
      {
        *(_DWORD *)v128 = v23;
        v25 = (uint64_t)(v24 + 4);
        goto LABEL_50;
      }
      v26 = (char *)__p;
      v27 = v128 - (_BYTE *)__p;
      v28 = (v128 - (_BYTE *)__p) >> 2;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62)
        sub_1BE61F930();
      v30 = v129 - (_BYTE *)__p;
      if ((v129 - (_BYTE *)__p) >> 1 > v29)
        v29 = v30 >> 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v31 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 62)
          sub_1BE61F100();
        v32 = v31;
        v33 = (char *)operator new(4 * v31);
        v31 = v32;
        v34 = &v33[4 * v28];
        *(_DWORD *)v34 = v23;
        v25 = (uint64_t)(v34 + 4);
        v35 = v24 - v26;
        if (v24 == v26)
          goto LABEL_48;
      }
      else
      {
        v33 = 0;
        v34 = (char *)(4 * v28);
        *(_DWORD *)(4 * v28) = v23;
        v25 = 4 * v28 + 4;
        v35 = v24 - v26;
        if (v24 == v26)
        {
LABEL_48:
          __p = v34;
          v128 = (char *)v25;
          v129 = &v33[4 * v31];
          if (v26)
            operator delete(v26);
LABEL_50:
          v128 = (char *)v25;
          strtok(0, " \t\n\r\b");
          v45 = strtok(0, " \t\n\r\b");
          if (!v45)
          {
LABEL_3:
            v4 = v121;
            continue;
          }
          while (1)
          {
            sscanf(v45, "0x%x", &v123);
            v47 = v123;
            if (v6 >= v126)
              break;
            *(_DWORD *)v6 = v123;
            v46 = (uint64_t)(v6 + 4);
LABEL_53:
            v125 = (char *)v46;
            strtok(0, " \t\n\r\b");
            v45 = strtok(0, " \t\n\r\b");
            v6 = (char *)v46;
            if (!v45)
              goto LABEL_3;
          }
          v48 = (v6 - v7) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            sub_1BE61F930();
          v50 = v126 - v7;
          if ((v126 - v7) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            if (v51 >> 62)
              sub_1BE61F100();
            v52 = operator new(4 * v51);
            v53 = &v52[4 * v48];
            *(_DWORD *)v53 = v47;
            v46 = (uint64_t)(v53 + 4);
            v54 = v6 - v7;
            if (v6 == v7)
              goto LABEL_69;
          }
          else
          {
            v52 = 0;
            v53 = (char *)(4 * v48);
            *(_DWORD *)(4 * v48) = v123;
            v46 = 4 * v48 + 4;
            v54 = v6 - v7;
            if (v6 == v7)
              goto LABEL_69;
          }
          v55 = v54 - 4;
          if (v55 >= 0xBC)
          {
            v58 = (v6 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v52[v6 - v7 - 4 - v58] > &v52[v6 - v7 - 4])
            {
              v56 = v6;
            }
            else if (&v6[-v58 - 4] > v6 - 4)
            {
              v56 = v6;
            }
            else if ((unint64_t)(v7 - v52) >= 0x20)
            {
              v59 = (v55 >> 2) + 1;
              v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
              v56 = &v6[-v60];
              v53 -= v60;
              v61 = &v52[4 * v48 - 16];
              v62 = v6 - 16;
              v63 = v59 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 8;
              }
              while (v63);
              if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_69;
            }
            else
            {
              v56 = v6;
            }
          }
          else
          {
            v56 = v6;
          }
          do
          {
            v57 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v53 - 1) = v57;
            v53 -= 4;
          }
          while (v56 != v7);
LABEL_69:
          v124 = v53;
          v125 = (char *)v46;
          v126 = &v52[4 * v51];
          if (v7)
            operator delete(v7);
          v7 = v53;
          goto LABEL_53;
        }
      }
      v36 = v35 - 4;
      if (v36 < 0x2C)
        goto LABEL_146;
      if ((unint64_t)(v24 - v33 - v27) < 0x20)
        goto LABEL_146;
      v37 = (v36 >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v39 = &v24[-v38];
      v34 -= v38;
      v40 = &v33[4 * v28 - 16];
      v41 = v24 - 16;
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *(_OWORD *)v41;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      v24 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_146:
        do
        {
          v44 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v34 - 1) = v44;
          v34 -= 4;
        }
        while (v24 != v26);
      }
      goto LABEL_48;
    }
  }
  while (fgets(__str, 4096, v120));
  v71 = v124;
  v73 = v128;
  v72 = v129;
  v74 = v6 - v124;
  v75 = (unint64_t)(v6 - v124) >> 2;
  if (v128 < v129)
  {
    *(_DWORD *)v128 = v75;
    v76 = (uint64_t)(v73 + 4);
    v2 = v119;
    goto LABEL_111;
  }
  v2 = v119;
  v77 = (char *)__p;
  v78 = v128 - (_BYTE *)__p;
  v79 = (v128 - (_BYTE *)__p) >> 2;
  v80 = v79 + 1;
  if ((unint64_t)(v79 + 1) >> 62)
LABEL_99:
    sub_1BE61F930();
LABEL_89:
  v81 = v72 - v77;
  if (v81 >> 1 > v80)
    v80 = v81 >> 1;
  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
    v82 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v82 = v80;
  if (v82)
  {
    if (v82 >> 62)
      sub_1BE61F100();
    v83 = (char *)operator new(4 * v82);
    v84 = &v83[4 * v79];
    v85 = &v83[4 * v82];
    *(_DWORD *)v84 = v75;
    v76 = (uint64_t)(v84 + 4);
    v86 = v73 - v77;
    if (v73 == v77)
      goto LABEL_109;
  }
  else
  {
    v83 = 0;
    v84 = (char *)(4 * v79);
    v85 = 0;
    *(_DWORD *)(4 * v79) = v75;
    v76 = 4 * v79 + 4;
    v86 = v73 - v77;
    if (v73 == v77)
      goto LABEL_109;
  }
  v87 = v86 - 4;
  if (v87 < 0x2C)
  {
    v88 = v73;
    goto LABEL_108;
  }
  if ((unint64_t)(v73 - v83 - v78) < 0x20)
  {
    v88 = v73;
    do
    {
LABEL_108:
      v95 = *((_DWORD *)v88 - 1);
      v88 -= 4;
      *((_DWORD *)v84 - 1) = v95;
      v84 -= 4;
    }
    while (v88 != v77);
    goto LABEL_109;
  }
  v89 = (v87 >> 2) + 1;
  v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
  v88 = &v73[-v90];
  v84 -= v90;
  v91 = &v83[4 * v79 - 16];
  v92 = v73 - 16;
  v93 = v89 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v94 = *(_OWORD *)v92;
    *((_OWORD *)v91 - 1) = *((_OWORD *)v92 - 1);
    *(_OWORD *)v91 = v94;
    v91 -= 32;
    v92 -= 32;
    v93 -= 8;
  }
  while (v93);
  if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_108;
LABEL_109:
  __p = v84;
  v128 = (char *)v76;
  v129 = v85;
  if (v77)
    operator delete(v77);
LABEL_111:
  v128 = (char *)v76;
  v96 = (v76 - (uint64_t)__p) >> 2;
  *(_DWORD *)(v2 + 24) = v96 - 1;
  v97 = v74 >> 2;
  v98 = v130;
  v99 = malloc_type_calloc(v96 + v97 + ((v131 - (uint64_t)v130) >> 2), 4uLL, 0x100004052888210uLL);
  v100 = *(int *)(v2 + 24);
  v101 = &v99[4 * v100];
  v102 = v100 + 1;
  *(_QWORD *)(v2 + 8) = v101;
  *(_QWORD *)(v2 + 16) = v99;
  *(_QWORD *)v2 = &v101[4 * v100 + 4];
  if ((int)v100 < 1)
  {
    *(_DWORD *)&v101[4 * v100] = *((_DWORD *)__p + v100);
    if (v6 != v71)
    {
LABEL_115:
      if (v97 <= 1)
        v107 = 1;
      else
        v107 = v97;
      if (v107 >= 0xC && (unint64_t)(&v99[4 * v100 + 4 * v102] - v71) >= 0x20)
      {
        v108 = v107 & 0xFFFFFFFFFFFFFFF8;
        v115 = (__int128 *)(v71 + 16);
        v116 = &v99[4 * v100 + 16 + 4 * v102];
        v117 = v107 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v118 = *v115;
          *(v116 - 1) = *(v115 - 1);
          *v116 = v118;
          v115 += 2;
          v116 += 2;
          v117 -= 8;
        }
        while (v117);
        if (v107 == v108)
          goto LABEL_123;
      }
      else
      {
        v108 = 0;
      }
      v109 = v107 - v108;
      v110 = 4 * v108;
      v111 = &v99[4 * v100 + 4 * v102 + v110];
      v112 = &v71[v110];
      do
      {
        v113 = *(_DWORD *)v112;
        v112 += 4;
        *v111++ = v113;
        --v109;
      }
      while (v109);
LABEL_123:
      fclose(v120);
      goto LABEL_126;
    }
  }
  else
  {
    v103 = 0;
    v104 = __p;
    do
    {
      v105 = 4 * v103;
      *(_DWORD *)&v99[v105] = v98[v103];
      *(_DWORD *)&v101[v105] = v104[v103++];
      v106 = *(int *)(v2 + 24);
    }
    while (v103 < v106);
    *(_DWORD *)&v101[4 * v106] = *((_DWORD *)__p + v106);
    if (v6 != v71)
      goto LABEL_115;
  }
  fclose(v120);
  if (!v71)
  {
    v114 = (char *)__p;
    if (!__p)
      goto LABEL_130;
    goto LABEL_129;
  }
LABEL_126:
  operator delete(v71);
  v114 = (char *)__p;
  if (__p)
  {
LABEL_129:
    v128 = v114;
    operator delete(v114);
  }
LABEL_130:
  if (v98)
    operator delete(v98);
}

void sub_1BE734120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;
  void *v25;
  void *v26;

  if (v23)
  {
    operator delete(v23);
    v25 = __p;
    if (!__p)
    {
LABEL_3:
      v26 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v25 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v25);
  v26 = a22;
  if (!a22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

VariantMap *VariantMap::VariantsForCode@<X0>(VariantMap *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  int var3;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int *var0;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  VariantMap *v33;
  int v34;
  uint64_t v35;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  var3 = this->var3;
  if (var3 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v33 = this;
    v31 = a2;
    while (1)
    {
      if (this->var2[v8] != a2)
      {
        v9 = v8 + 1;
        goto LABEL_4;
      }
      v9 = v8 + 1;
      v10 = this->var1[v8 + 1] - this->var1[v8];
      if (v10 >= 1)
        break;
LABEL_4:
      v8 = v9;
      if (v9 >= var3)
        return this;
    }
    v32 = v8 + 1;
    v11 = 0;
    v35 = v8;
    v34 = this->var1[v8 + 1] - this->var1[v8];
    while (1)
    {
      while (1)
      {
        var0 = this->var0;
        v13 = this->var1[v8] + (uint64_t)v11;
        if (v7 >= v6)
          break;
        *(_DWORD *)v7 = var0[v13];
        v7 += 4;
        a3[1] = v7;
        if (++v11 == v10)
          goto LABEL_38;
      }
      v14 = (v7 - v5) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        sub_1BE61F930();
      if ((v6 - v5) >> 1 > v15)
        v15 = (v6 - v5) >> 1;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        if (v16 >> 62)
          sub_1BE61F100();
        v17 = operator new(4 * v16);
        v18 = &v17[4 * v14];
        *(_DWORD *)v18 = var0[v13];
        v19 = (uint64_t)(v18 + 4);
        v20 = v7 - v5;
        if (v7 == v5)
          goto LABEL_24;
      }
      else
      {
        v17 = 0;
        v18 = (char *)(4 * v14);
        *(_DWORD *)(4 * v14) = var0[v13];
        v19 = 4 * v14 + 4;
        v20 = v7 - v5;
        if (v7 == v5)
          goto LABEL_24;
      }
      v21 = v20 - 4;
      if (v21 < 0xBC)
      {
        v22 = v7;
        goto LABEL_23;
      }
      v24 = (v7 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v17[v7 - v5 - 4 - v24] > &v17[v7 - v5 - 4])
        break;
      if (&v7[-v24 - 4] > v7 - 4)
      {
        v22 = v7;
        goto LABEL_23;
      }
      if ((unint64_t)(v5 - v17) < 0x20)
      {
        v22 = v7;
        goto LABEL_23;
      }
      v25 = (v21 >> 2) + 1;
      v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      v22 = &v7[-v26];
      v18 -= v26;
      v27 = &v17[4 * v14 - 16];
      v28 = v7 - 16;
      v29 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 8;
      }
      while (v29);
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_23;
LABEL_24:
      v6 = &v17[4 * v16];
      *a3 = v18;
      a3[1] = (char *)v19;
      a3[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v18;
      v7 = (char *)v19;
      this = v33;
      v8 = v35;
      v10 = v34;
      a3[1] = (char *)v19;
      if (++v11 == v34)
      {
LABEL_38:
        var3 = this->var3;
        a2 = v31;
        v9 = v32;
        goto LABEL_4;
      }
    }
    v22 = v7;
    do
    {
LABEL_23:
      v23 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v18 - 1) = v23;
      v18 -= 4;
    }
    while (v22 != v5);
    goto LABEL_24;
  }
  return this;
}

void sub_1BE734430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VariantMap::SerializeToFilename(VariantMap *this, const char *__filename)
{
  FILE *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;

  v3 = fopen(__filename, "wb");
  fwrite(&this->var3, 4uLL, 1uLL, v3);
  fwrite(this->var2, 4uLL, this->var3, v3);
  fwrite(this->var1, 4uLL, this->var3 + 1, v3);
  if (this->var3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = v4 + 1;
      v6 = &this->var1[v4];
      fwrite(&this->var0[*v6], 4uLL, v6[1] - (uint64_t)*v6, v3);
      v4 = v5;
    }
    while (v5 < this->var3);
  }
  return fclose(v3);
}

void VariantMap::~VariantMap(VariantMap *this)
{
  free(this->var2);
}

{
  free(this->var2);
}

uint64_t StraightLineRegressor::StraightLineRegressor(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float64x2_t *v19;
  float v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t i;
  double v41;
  double v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  float v66;
  float v67;
  float v68;
  double v69;
  double v70;
  double v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t j;
  uint64_t v111;
  double v112;
  double v113;
  float v114;
  float *v115;
  float *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  float *v122;
  int64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  _OWORD *v128;
  float *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  float *v133;
  float *v134;
  float v135;
  float *v136;
  float *v137;
  float v138;
  float v139;
  float *v140;
  float v141;
  float *v142;
  float v143;
  float v144;
  unint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t k;
  uint64_t v151;
  double v152;
  double v153;
  float v154;
  float *v155;
  float *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  float *v162;
  int64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float *v167;
  _OWORD *v168;
  float *v169;
  uint64_t v170;
  __int128 v171;
  int v172;
  float *v173;
  float *v174;
  float v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  uint64_t v185;
  float v186;
  double v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  float v193;
  float v194;
  id v195;
  float *__p;
  float *v197;
  float *v198;
  float *v199;

  v195 = a2;
  v12 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 1117782016;
  objc_storeStrong((id *)(a1 + 8), a2);
  objc_storeStrong((id *)(a1 + 16), a4);
  v18 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v19 = (float64x2_t *)(a1 + 64);
  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v20 = 0.0;
  *(_QWORD *)(a1 + 72) = 0;
  while (objc_msgSend_strokeCount(v12, v13, v14, v15, v16, v17) > v18)
  {
    v26 = 0;
    v20 = v20 + (float)(unint64_t)objc_msgSend_pointCountForStrokeIndex_(v12, v21, v18, v23, v24, v25);
    while (objc_msgSend_pointCountForStrokeIndex_(v12, v27, v18, v28, v29, v30) > v26)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v12, v13, v18, v26, v16, v17);
      v33 = v32 + *(double *)(a1 + 72);
      *(double *)(a1 + 64) = v31 + *(double *)(a1 + 64);
      *(double *)(a1 + 72) = v33;
      ++v26;
    }
    ++v18;
  }
  if (v20 < 2.0)
  {
    *(_DWORD *)(a1 + 36) = 0;
    goto LABEL_128;
  }
  v34 = 0;
  *v19 = vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v20), 0));
  while (objc_msgSend_strokeCount(v12, v21, v22, v23, v24, v25) > v34)
  {
    for (i = 0; objc_msgSend_pointCountForStrokeIndex_(v12, v35, v34, v37, v38, v39) > i; ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v12, v21, v34, i, v24, v25);
      *(float *)&v41 = v41 - *(double *)(a1 + 64);
      *(float *)&v42 = v42 - *(double *)(a1 + 72);
      *(float *)(a1 + 40) = *(float *)(a1 + 40) + (float)(*(float *)&v41 * *(float *)&v41);
      *(float *)(a1 + 48) = *(float *)(a1 + 48) + (float)(*(float *)&v42 * *(float *)&v42);
      *(float *)(a1 + 56) = *(float *)(a1 + 56) + (float)(*(float *)&v41 * *(float *)&v42);
    }
    ++v34;
  }
  v43 = *(float *)(a1 + 40) / (float)(v20 + -1.0);
  *(float *)(a1 + 40) = v43;
  v44 = *(float *)(a1 + 48) / (float)(v20 + -1.0);
  *(float *)(a1 + 48) = v44;
  v45 = v43 / v44;
  v46 = *(float *)(a1 + 32);
  v47 = v44 / v43;
  if ((float)(v43 / v44) <= v46)
  {
    if (v47 <= v46)
    {
      v49 = sqrtf(v43);
      *(float *)(a1 + 44) = v49;
      v50 = sqrtf(v44);
      v51 = *(float *)(a1 + 56) / (float)(v20 + -1.0);
      *(float *)(a1 + 52) = v50;
      *(float *)(a1 + 56) = v51;
      v48 = v51 / (float)(v49 * v50);
    }
    else
    {
      v48 = 1.0 - v45;
    }
  }
  else
  {
    v48 = 1.0 - v47;
  }
  *(float *)(a1 + 36) = v48;
  if (fabsf(v48) < 0.1)
  {
    objc_msgSend_bounds(*(void **)(a1 + 8), v35, v36, v37, v38, v39);
    v53 = v52;
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v60 = operator new();
    *(_QWORD *)v60 = &unk_1E77F0700;
    *(double *)(v60 + 16) = v53;
    *(double *)(v60 + 24) = v55;
    *(_DWORD *)(v60 + 32) = 0;
    *(double *)(v60 + 40) = v53 + v57;
    *(double *)(v60 + 48) = v55 + v59;
    *(_DWORD *)(v60 + 56) = 0;
    *(_DWORD *)(v60 + 8) = 0;
    *(_QWORD *)(a1 + 24) = v60;
    goto LABEL_128;
  }
  if (v47 <= v46)
  {
    if (v45 <= v46)
    {
      v61 = v19->f64[0];
      if (v43 >= v44)
      {
        v64 = v61 + 1.0;
        v62 = *(double *)(a1 + 72);
        v65 = (float)(*(float *)(a1 + 56) / v43);
      }
      else
      {
        v64 = v61 + (float)(*(float *)(a1 + 56) / v44);
        v62 = *(double *)(a1 + 72);
        v65 = 1.0;
      }
      v63 = v62 + v65;
    }
    else
    {
      v61 = *(double *)(a1 + 64);
      v62 = *(double *)(a1 + 72);
      v64 = v61 + 1.0;
      v63 = v62;
    }
  }
  else
  {
    v61 = *(double *)(a1 + 64);
    v62 = *(double *)(a1 + 72);
    v63 = v62 + 1.0;
    v64 = v61;
  }
  v66 = v64 - v61;
  v67 = v63 - v62;
  v68 = (float)(v67 * v67) + (float)(v66 * v66);
  if (v68 > 0.0)
  {
    v66 = v66 / v68;
    v67 = v67 / v68;
  }
  objc_msgSend_pointForStrokeIndex_pointIndex_(v12, v35, 0, 0, v38, v39);
  v70 = v69;
  v72 = v71;
  v78 = objc_msgSend_strokeCount(v12, v73, v74, v75, v76, v77);
  v84 = objc_msgSend_strokeCount(v12, v79, v80, v81, v82, v83);
  v89 = objc_msgSend_pointCountForStrokeIndex_(v12, v85, v84 - 1, v86, v87, v88);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v12, v90, v78 - 1, v89 - 1, v91, v92);
  v98 = 0;
  v99 = v70 - v61;
  v100 = v66;
  v101 = v72 - v62;
  v102 = v67;
  *(float *)&v99 = v101 * v67 + v99 * v66;
  *(float *)&v103 = (v104 - v62) * v67 + (v103 - v61) * v66;
  v193 = *(float *)&v99;
  v194 = *(float *)&v103;
  v192 = *(_DWORD *)(a5 + 16);
  __p = 0;
  v197 = 0;
  v199 = 0;
  v190 = *(_QWORD *)(a3 + 16);
  v191 = *(_QWORD *)(a5 + 16);
LABEL_34:
  if (objc_msgSend_strokeCount(v12, v93, v94, v95, v96, v97) > v98)
  {
    for (j = 0; ; ++j)
    {
      if (objc_msgSend_pointCountForStrokeIndex_(v12, v105, v98, v107, v108, v109) <= j)
      {
        ++v98;
        goto LABEL_34;
      }
      objc_msgSend_pointForStrokeIndex_pointIndex_(v12, v93, v98, j, v96, v97);
      v114 = (v113 - v62) * v102 + (v112 - v61) * v100;
      v115 = v197;
      if (v197 < v199)
      {
        *v197 = v114;
        v111 = (uint64_t)(v197 + 1);
        goto LABEL_37;
      }
      v116 = __p;
      v117 = v197 - __p;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 62)
        sub_1BE61F930();
      v119 = (char *)v199 - (char *)__p;
      if (((char *)v199 - (char *)__p) >> 1 > v118)
        v118 = v119 >> 1;
      v120 = (unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v118;
      if (v120)
        break;
      v121 = 0;
      v122 = (float *)(4 * v117);
      *(float *)(4 * v117) = v114;
      v111 = 4 * v117 + 4;
      v123 = (char *)v197 - (char *)__p;
      if (v197 != __p)
        goto LABEL_51;
LABEL_57:
      __p = v122;
      v199 = (float *)&v121[4 * v120];
      if (v116)
        operator delete(v116);
LABEL_37:
      v197 = (float *)v111;
    }
    if (v120 >> 62)
      sub_1BE61F100();
    v121 = operator new(4 * v120);
    v122 = (float *)&v121[4 * v117];
    *v122 = v114;
    v111 = (uint64_t)(v122 + 1);
    v123 = (char *)v197 - (char *)__p;
    if (v197 == __p)
      goto LABEL_57;
LABEL_51:
    v124 = v123 - 4;
    if (v124 < 0x2C)
      goto LABEL_135;
    if ((unint64_t)((char *)__p - v121) < 0x20)
      goto LABEL_135;
    v125 = (v124 >> 2) + 1;
    v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
    v127 = &v197[v126 / 0xFFFFFFFFFFFFFFFCLL];
    v122 = (float *)((char *)v122 - v126);
    v128 = &v121[4 * v117 - 16];
    v129 = v197 - 4;
    v130 = v125 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v131 = *(_OWORD *)v129;
      *(v128 - 1) = *((_OWORD *)v129 - 1);
      *v128 = v131;
      v128 -= 2;
      v129 -= 8;
      v130 -= 8;
    }
    while (v130);
    v115 = v127;
    if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_135:
      do
      {
        v132 = *((_DWORD *)v115-- - 1);
        *((_DWORD *)v122-- - 1) = v132;
      }
      while (v115 != __p);
    }
    goto LABEL_57;
  }
  if (v193 > 0.0)
  {
    if (v194 <= 0.0 || !v192)
      goto LABEL_65;
LABEL_72:
    v133 = __p;
    if (__p != v197)
    {
      v140 = __p + 1;
      if (__p + 1 != v197)
      {
        v141 = *__p;
        v136 = __p;
        v142 = __p + 1;
        do
        {
          v143 = *v142++;
          v144 = v143;
          if (v143 < v141)
          {
            v141 = v144;
            v136 = v140;
          }
          v140 = v142;
        }
        while (v142 != v197);
        goto LABEL_80;
      }
    }
    goto LABEL_79;
  }
  if (v194 > 0.0 || !v192)
    goto LABEL_72;
LABEL_65:
  v133 = __p;
  if (__p != v197)
  {
    v134 = __p + 1;
    if (__p + 1 != v197)
    {
      v135 = *__p;
      v136 = __p;
      v137 = __p + 1;
      do
      {
        v138 = *v137++;
        v139 = v138;
        if (v135 < v138)
        {
          v135 = v139;
          v136 = v134;
        }
        v134 = v137;
      }
      while (v137 != v197);
      goto LABEL_80;
    }
  }
LABEL_79:
  v136 = v133;
LABEL_80:
  v145 = 0;
  v188 = v61 + (float)(v68 * (float)(v66 * *v136));
  v189 = v62 + (float)(v68 * (float)(v67 * *v136));
  v198 = v133;
  while (objc_msgSend_strokeCount(v12, v105, v106, v107, v108, v109) > v145)
  {
    for (k = 0; objc_msgSend_pointCountForStrokeIndex_(v12, v146, v145, v147, v148, v149) > k; ++k)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v12, v105, v145, k, v108, v109);
      v154 = (v153 - v62) * v102 + (v152 - v61) * v100;
      v155 = v198;
      if (v198 < v199)
      {
        *v198 = v154;
        v151 = (uint64_t)(v198 + 1);
        goto LABEL_85;
      }
      v156 = __p;
      v157 = v198 - __p;
      v158 = v157 + 1;
      if ((unint64_t)(v157 + 1) >> 62)
        sub_1BE61F930();
      v159 = (char *)v199 - (char *)__p;
      if (((char *)v199 - (char *)__p) >> 1 > v158)
        v158 = v159 >> 1;
      if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
        v160 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v160 = v158;
      if (v160)
      {
        if (v160 >> 62)
          sub_1BE61F100();
        v161 = operator new(4 * v160);
        v162 = (float *)&v161[4 * v157];
        *v162 = v154;
        v151 = (uint64_t)(v162 + 1);
        v163 = (char *)v198 - (char *)__p;
        if (v198 == __p)
          goto LABEL_105;
LABEL_99:
        v164 = v163 - 4;
        if (v164 < 0x2C)
          goto LABEL_136;
        if ((unint64_t)((char *)__p - v161) < 0x20)
          goto LABEL_136;
        v165 = (v164 >> 2) + 1;
        v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
        v167 = &v198[v166 / 0xFFFFFFFFFFFFFFFCLL];
        v162 = (float *)((char *)v162 - v166);
        v168 = &v161[4 * v157 - 16];
        v169 = v198 - 4;
        v170 = v165 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v171 = *(_OWORD *)v169;
          *(v168 - 1) = *((_OWORD *)v169 - 1);
          *v168 = v171;
          v168 -= 2;
          v169 -= 8;
          v170 -= 8;
        }
        while (v170);
        v155 = v167;
        if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_136:
          do
          {
            v172 = *((_DWORD *)v155-- - 1);
            *((_DWORD *)v162-- - 1) = v172;
          }
          while (v155 != __p);
        }
        goto LABEL_105;
      }
      v161 = 0;
      v162 = (float *)(4 * v157);
      *(float *)(4 * v157) = v154;
      v151 = 4 * v157 + 4;
      v163 = (char *)v198 - (char *)__p;
      if (v198 != __p)
        goto LABEL_99;
LABEL_105:
      __p = v162;
      v199 = (float *)&v161[4 * v160];
      if (v156)
        operator delete(v156);
LABEL_85:
      v198 = (float *)v151;
    }
    ++v145;
  }
  if (v193 <= 0.0)
  {
    if (v194 <= 0.0 && v192)
      goto LABEL_113;
  }
  else if (v194 <= 0.0 || !v192)
  {
LABEL_113:
    v173 = __p;
    if (__p != v198)
    {
      v174 = __p + 1;
      if (__p + 1 != v198)
      {
        v175 = *__p;
        v176 = __p + 1;
        do
        {
          v177 = *v176++;
          v178 = v177;
          if (v177 < v175)
          {
            v175 = v178;
            v173 = v174;
          }
          v174 = v176;
        }
        while (v176 != v198);
      }
    }
    goto LABEL_126;
  }
  v173 = __p;
  if (__p != v198)
  {
    v179 = __p + 1;
    if (__p + 1 != v198)
    {
      v180 = *__p;
      v181 = __p + 1;
      do
      {
        v182 = *v181++;
        v183 = v182;
        if (v180 < v182)
        {
          v180 = v183;
          v173 = v179;
        }
        v179 = v181;
      }
      while (v181 != v198);
    }
  }
LABEL_126:
  v184 = *v173;
  v185 = operator new();
  v186 = fabsf(*(float *)(a1 + 36));
  *(_QWORD *)v185 = &unk_1E77F0700;
  *(double *)(v185 + 16) = v188;
  *(double *)(v185 + 24) = v189;
  *(_DWORD *)(v185 + 32) = v190;
  *(double *)(v185 + 40) = v61 + (float)(v68 * (float)(v66 * v184));
  *(double *)(v185 + 48) = v62 + (float)(v68 * (float)(v67 * v184));
  *(_DWORD *)(v185 + 56) = v191;
  *(float *)(v185 + 8) = v186;
  *(_QWORD *)(a1 + 24) = v185;
  if (__p)
    operator delete(__p);
LABEL_128:

  return a1;
}

void sub_1BE734EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, id *a17, void *a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t StraightLineRegressor::provideAnAnswer(void **this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;

  objc_msgSend_bounds(this[1], a2, a3, a4, a5, a6);
  v7 = v6;
  v9 = v8;
  v11 = v6 + v10;
  v13 = v8 + v12;
  result = operator new();
  *(_QWORD *)result = &unk_1E77F0700;
  *(double *)(result + 16) = v7;
  *(double *)(result + 24) = v9;
  *(_DWORD *)(result + 32) = 0;
  *(double *)(result + 40) = v11;
  *(double *)(result + 48) = v13;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void sub_1BE73507C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE735090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE735470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE735740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE735B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

char *sub_1BE735C58(char *result)
{
  char *v1;
  char **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;

  if (!result)
    return result;
  v1 = result;
  v2 = (char **)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v3 = (_QWORD *)*((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = v2;
  if (v3)
  {
    v4 = (_QWORD *)*v3;
    if (*v3)
    {
      v5 = (_QWORD *)v3[1];
      v6 = (_QWORD *)*v3;
      if (v5 != v4)
      {
        do
        {
          v8 = *--v5;
          v7 = v8;
          *v5 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        while (v5 != v4);
        v6 = (_QWORD *)*v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x1C3B812EC](v3, 0x20C40960023A9);
    v9 = (char **)*((_QWORD *)v1 + 8);
  }
  else
  {
    v9 = v2;
  }
  v10 = operator new();
  *(_QWORD *)v10 = &off_1E77F0B88;
  *(_OWORD *)(v10 + 8) = xmmword_1BE8D68F0;
  v48 = (_QWORD *)v10;
  v11 = (uint64_t *)v9[1];
  if (v11 >= (uint64_t *)v9[2])
  {
    v12 = sub_1BE6FEE3C(v9, &v48);
  }
  else
  {
    *v11 = v10;
    v12 = (char *)(v11 + 1);
  }
  v9[1] = v12;
  v13 = *((_QWORD *)v1 + 8);
  v14 = (_QWORD *)operator new();
  v20 = *((_QWORD *)v1 + 24);
  *v14 = &off_1E77F0958;
  v14[1] = v20;
  v14[2] = 1;
  v48 = v14;
  v21 = *(_QWORD **)(v13 + 8);
  if ((unint64_t)v21 < *(_QWORD *)(v13 + 16))
  {
    *v21 = v14;
    *(_QWORD *)(v13 + 8) = v21 + 1;
    if (!objc_msgSend_shouldUseArabicVisualOrderFeatureExtraction(v1, v15, v16, v17, v18, v19))
      goto LABEL_27;
LABEL_20:
    v27 = *((_QWORD *)v1 + 8);
    v28 = (_QWORD *)operator new();
    *v28 = &off_1E77F0CE8;
    v48 = v28;
    v29 = *(_QWORD **)(v27 + 8);
    if ((unint64_t)v29 >= *(_QWORD *)(v27 + 16))
    {
      v30 = sub_1BE6FEE3C((char **)v27, &v48);
    }
    else
    {
      *v29 = v28;
      v30 = (char *)(v29 + 1);
    }
    *(_QWORD *)(v27 + 8) = v30;
    v31 = *((_QWORD *)v1 + 8);
    v32 = (_QWORD *)operator new();
    *v32 = &off_1E77F0A70;
    v48 = v32;
    v33 = *(_QWORD **)(v31 + 8);
    if ((unint64_t)v33 >= *(_QWORD *)(v31 + 16))
    {
      v34 = sub_1BE6FEE3C((char **)v31, &v48);
    }
    else
    {
      *v33 = v32;
      v34 = (char *)(v33 + 1);
    }
    *(_QWORD *)(v31 + 8) = v34;
    goto LABEL_27;
  }
  *(_QWORD *)(v13 + 8) = sub_1BE6FEE3C((char **)v13, &v48);
  if (objc_msgSend_shouldUseArabicVisualOrderFeatureExtraction(v1, v22, v23, v24, v25, v26))
    goto LABEL_20;
LABEL_27:
  v35 = *((_QWORD *)v1 + 8);
  v36 = operator new();
  v42 = objc_msgSend_sequenceCompression(v1, v37, v38, v39, v40, v41);
  *(_QWORD *)v36 = &off_1E77F0990;
  *(_DWORD *)(v36 + 8) = v42;
  v48 = (_QWORD *)v36;
  v43 = *(uint64_t **)(v35 + 8);
  if ((unint64_t)v43 >= *(_QWORD *)(v35 + 16))
  {
    v44 = sub_1BE6FEE3C((char **)v35, &v48);
  }
  else
  {
    *v43 = v36;
    v44 = (char *)(v43 + 1);
  }
  *(_QWORD *)(v35 + 8) = v44;
  v45 = *((_QWORD *)v1 + 8);
  v46 = (_QWORD *)operator new();
  *v46 = &off_1E77F0920;
  v46[1] = 0x3FF8000000000000;
  v48 = v46;
  v47 = *(_QWORD **)(v45 + 8);
  if ((unint64_t)v47 >= *(_QWORD *)(v45 + 16))
  {
    result = sub_1BE6FEE3C((char **)v45, &v48);
  }
  else
  {
    *v47 = v46;
    result = (char *)(v47 + 1);
  }
  *(_QWORD *)(v45 + 8) = result;
  return result;
}

void sub_1BE735FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B812EC](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

char *sub_1BE735FCC(char *result)
{
  char *v1;
  char **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;

  if (!result)
    return result;
  v1 = result;
  v2 = (char **)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v3 = (_QWORD *)*((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = v2;
  if (v3)
  {
    v4 = (_QWORD *)*v3;
    if (*v3)
    {
      v5 = (_QWORD *)v3[1];
      v6 = (_QWORD *)*v3;
      if (v5 != v4)
      {
        do
        {
          v8 = *--v5;
          v7 = v8;
          *v5 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        while (v5 != v4);
        v6 = (_QWORD *)*v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x1C3B812EC](v3, 0x20C40960023A9);
    v9 = (char **)*((_QWORD *)v1 + 9);
  }
  else
  {
    v9 = v2;
  }
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E77F0AE0;
  v33 = v10;
  v11 = v9[1];
  if (v11 >= v9[2])
  {
    v12 = sub_1BE8835E4(v9, &v33);
  }
  else
  {
    *(_QWORD *)v11 = v10;
    v12 = v11 + 8;
  }
  v9[1] = v12;
  v13 = *((_QWORD *)v1 + 9);
  v19 = (_QWORD *)operator new();
  *v19 = &off_1E77F0B50;
  v33 = v19;
  v20 = *(_QWORD **)(v13 + 8);
  if ((unint64_t)v20 < *(_QWORD *)(v13 + 16))
  {
    *v20 = v19;
    *(_QWORD *)(v13 + 8) = v20 + 1;
    if (!objc_msgSend_shouldUseStrokeDirectionFeature(v1, v14, v15, v16, v17, v18))
      goto LABEL_24;
LABEL_20:
    v26 = *((_QWORD *)v1 + 9);
    v27 = (_QWORD *)operator new();
    *v27 = &off_1E77F0BC0;
    v33 = v27;
    v28 = *(_QWORD **)(v26 + 8);
    if ((unint64_t)v28 >= *(_QWORD *)(v26 + 16))
    {
      v29 = sub_1BE8835E4((char **)v26, &v33);
    }
    else
    {
      *v28 = v27;
      v29 = (char *)(v28 + 1);
    }
    *(_QWORD *)(v26 + 8) = v29;
    goto LABEL_24;
  }
  *(_QWORD *)(v13 + 8) = sub_1BE8835E4((char **)v13, &v33);
  if (objc_msgSend_shouldUseStrokeDirectionFeature(v1, v21, v22, v23, v24, v25))
    goto LABEL_20;
LABEL_24:
  v30 = *((_QWORD *)v1 + 9);
  v31 = (_QWORD *)operator new();
  *v31 = &off_1E77F0A38;
  v33 = v31;
  v32 = *(_QWORD **)(v30 + 8);
  if ((unint64_t)v32 >= *(_QWORD *)(v30 + 16))
  {
    result = sub_1BE8835E4((char **)v30, &v33);
  }
  else
  {
    *v32 = v31;
    result = (char *)(v32 + 1);
  }
  *(_QWORD *)(v30 + 8) = result;
  return result;
}

void sub_1BE736978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1BE736A20(void *a1, void *a2, void *a3, char a4, char a5, _QWORD *a6, double a7, double a8)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  id v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  id v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSIndexSet *v92;
  uint64_t v93;
  unint64_t j;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  long double v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  id v173;
  NSObject *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  unint64_t i;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  int64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  id v234;
  id v236;
  id v237;
  char *v238;
  id v239;
  id v240;
  void *__p;
  char *v242;
  char *v243;
  uint8_t buf[4];
  void *v245;
  __int16 v246;
  void *v247;
  _QWORD v248[5];

  v248[3] = *MEMORY[0x1E0C80C00];
  v239 = a2;
  v234 = a3;
  if (a1)
  {
    objc_msgSend_featureCounts(a1, v12, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v234, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_integerValue(v22, v23, v24, v25, v26, v27);

    v232 = objc_msgSend_pointCount(v239, v29, v30, v31, v32, v33);
    __p = 0;
    v242 = 0;
    v243 = 0;
    if (objc_msgSend_strokeCount(v239, v34, v35, v36, v37, v38))
    {
      v49 = objc_msgSend_strokeCount(v239, v39, v40, v41, v42, v43) - 1;
      if (v49 > (v243 - (_BYTE *)__p) >> 3)
      {
        if (v49 >> 61)
          sub_1BE61F930();
        v50 = (char *)operator new(8 * v49);
        __p = &v50[(v242 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF8];
        v242 = (char *)__p;
        v243 = &v50[8 * v49];
      }
      v51 = 0;
      for (i = 0; ; ++i)
      {
        if (i >= objc_msgSend_strokeCount(v239, v44, v45, v46, v47, v48) - 1)
          goto LABEL_7;
        v194 = objc_msgSend_pointCountForStrokeIndex_(v239, v190, i, v191, v192, v193);
        if (i)
          v200 = v194;
        else
          v200 = v194 + 1;
        if ((a5 & 1) != 0)
        {
          v201 = objc_msgSend_sequenceCompression(a1, v195, v196, v197, v198, v199);
          v207 = objc_msgSend_sequenceCompression(a1, v202, v203, v204, v205, v206);
          v208 = v201 + v200 / v207 * v207 - v200;
        }
        else
        {
          v208 = 0;
        }
        if (v208 == objc_msgSend_sequenceCompression(a1, v195, v196, v197, v198, v199))
          v209 = 0;
        else
          v209 = v208;
        v210 = v242;
        v238 = v51;
        if (v242 < v243)
        {
          *(_QWORD *)v242 = v209;
          v189 = (uint64_t)(v210 + 8);
          goto LABEL_37;
        }
        v211 = (char *)__p;
        v212 = v242 - (_BYTE *)__p;
        v213 = (v242 - (_BYTE *)__p) >> 3;
        v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 61)
          sub_1BE61F930();
        v215 = v243 - (_BYTE *)__p;
        if ((v243 - (_BYTE *)__p) >> 2 > v214)
          v214 = v215 >> 2;
        v216 = (unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v214;
        if (v216)
          break;
        v217 = 0;
        v218 = (char *)(8 * v213);
        *(_QWORD *)(8 * v213) = v209;
        v189 = 8 * v213 + 8;
        v219 = v210 - v211;
        if (v210 != v211)
          goto LABEL_60;
LABEL_66:
        __p = v218;
        v243 = &v217[8 * v216];
        if (v211)
          operator delete(v211);
LABEL_37:
        v242 = (char *)v189;
        v51 = &v238[v209];
      }
      if (v216 >> 61)
        sub_1BE61F100();
      v217 = (char *)operator new(8 * v216);
      v218 = &v217[8 * v213];
      *(_QWORD *)v218 = v209;
      v189 = (uint64_t)(v218 + 8);
      v219 = v210 - v211;
      if (v210 == v211)
        goto LABEL_66;
LABEL_60:
      v220 = v219 - 8;
      if (v220 < 0x58)
        goto LABEL_74;
      if ((unint64_t)(v210 - v217 - v212) < 0x20)
        goto LABEL_74;
      v221 = (v220 >> 3) + 1;
      v222 = 8 * (v221 & 0x3FFFFFFFFFFFFFFCLL);
      v223 = &v210[-v222];
      v218 -= v222;
      v224 = &v217[8 * v213 - 16];
      v225 = v210 - 16;
      v226 = v221 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v227 = *(_OWORD *)v225;
        *((_OWORD *)v224 - 1) = *((_OWORD *)v225 - 1);
        *(_OWORD *)v224 = v227;
        v224 -= 32;
        v225 -= 32;
        v226 -= 4;
      }
      while (v226);
      v210 = v223;
      if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_74:
        do
        {
          v228 = *((_QWORD *)v210 - 1);
          v210 -= 8;
          *((_QWORD *)v218 - 1) = v228;
          v218 -= 8;
        }
        while (v210 != v211);
      }
      goto LABEL_66;
    }
    v51 = 0;
LABEL_7:
    v52 = objc_alloc(MEMORY[0x1E0C9E970]);
    v248[0] = &unk_1E7828868;
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v53, (uint64_t)&v51[v232], v54, v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v248[1] = v57;
    objc_msgSend_featureCounts(a1, v58, v59, v60, v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v233 = (uint64_t)&v51[v232];
    objc_msgSend_objectForKeyedSubscript_(v63, v64, (uint64_t)v234, v65, v66, v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v248[2] = v68;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v69, (uint64_t)v248, 3, v70, v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v240 = 0;
    v237 = (id)objc_msgSend_initWithShape_dataType_error_(v52, v73, (uint64_t)v72, 65568, (uint64_t)&v240, v74);
    v236 = v240;

    if (v237)
    {
      v75 = objc_retainAutorelease(v237);
      v81 = (float *)objc_msgSend_dataPointer(v75, v76, v77, v78, v79, v80);
      v231 = v75;
      objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v82, v83, v84, v85, v86);
      v92 = (NSIndexSet *)objc_claimAutoreleasedReturnValue();
      v93 = 0;
      for (j = 0; j < objc_msgSend_strokeCount(v239, v87, v88, v89, v90, v91); ++j)
      {
        v100 = 0;
        v101 = j - 1;
        while (v100 < objc_msgSend_pointCountForStrokeIndex_(v239, v95, j, v97, v98, v99))
        {
          objc_msgSend_pointForStrokeIndex_pointIndex_(v239, v87, j, v100, v90, v91);
          v103 = v102;
          v105 = v104;
          v106 = v102 - a7;
          v107 = v104 - a8;
          v113 = atan2(v104 - a8, v106);
          if (j && !v100 && *((uint64_t *)__p + v101) >= 1)
          {
            v114 = 0;
            v115 = v28 * v93;
            do
            {
              v81[v115 + objc_msgSend_distanceFeatureIndex(a1, v108, v109, v110, v111, v112)] = 0.0;
              v81[v115 + objc_msgSend_sinAlphaFeatureIndex(a1, v116, v117, v118, v119, v120)] = 0.0;
              v81[v115 + objc_msgSend_cosAlphaFeatureIndex(a1, v121, v122, v123, v124, v125)] = 0.0;
              v81[v115 + objc_msgSend_gapFeatureIndex(a1, v126, v127, v128, v129, v130)] = 0.0;
              objc_msgSend_addIndex_(v92, v131, v93 + v114++, v132, v133, v134);
              v115 += v28;
            }
            while (v114 < *((_QWORD *)__p + v101));
            v93 += v114;
          }
          v135 = objc_msgSend_distanceFeatureIndex(a1, v108, v109, v110, v111, v112);
          v136 = v93 * v28;
          v137 = sqrt(v107 * v107 + v106 * v106);
          v81[v93 * v28 + v135] = v137;
          v143 = objc_msgSend_sinAlphaFeatureIndex(a1, v138, v139, v140, v141, v142);
          v144 = sin(v113);
          v81[v143 + v136] = v144;
          v150 = objc_msgSend_cosAlphaFeatureIndex(a1, v145, v146, v147, v148, v149);
          v151 = cos(v113);
          v81[v150 + v136] = v151;
          v157 = objc_msgSend_gapFeatureIndex(a1, v152, v153, v154, v155, v156);
          if (v100)
            v158 = 0.0;
          else
            v158 = 1.0;
          v81[v157 + v136] = v158;
          ++v93;
          ++v100;
          a8 = v105;
          a7 = v103;
        }
      }
      if ((a4 & 1) != 0)
      {
        v159 = objc_msgSend_distanceFeatureIndex(a1, v95, v96, v97, v98, v99);
        objc_msgSend_distMean(a1, v160, v161, v162, v163, v164);
        v166 = v165;
        objc_msgSend_distStd(a1, v167, v168, v169, v170, v171);
        normalizeFeature(v81, v233, v28, v159, v166, v172, v92);
      }
      v173 = v231;

    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v174 = (id)qword_1EF568E20;
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_modelName(a1, v175, v176, v177, v178, v179);
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_localizedDescription(v236, v181, v182, v183, v184, v185);
        v186 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v245 = v180;
        v246 = 2112;
        v247 = v186;
        _os_log_impl(&dword_1BE607000, v174, OS_LOG_TYPE_ERROR, "An error occurred when trying to allocate feature array for the %@ model: %@", buf, 0x16u);

      }
      if (a6)
        *a6 = objc_retainAutorelease(v236);
    }

    if (__p)
    {
      v242 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v237 = 0;
  }

  return v237;
}

void sub_1BE7371C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1BE7372D4(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  void *v44;
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc(MEMORY[0x1E0C9E8F8]);
    objc_msgSend_inputNames(a1, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v10, v11, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = v16;
    v45[0] = v3;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v17, (uint64_t)v45, (uint64_t)&v44, 1, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 0;
    v23 = (void *)objc_msgSend_initWithDictionary_error_(v4, v20, (uint64_t)v19, (uint64_t)&v39, v21, v22);
    v24 = v39;

    if (!v23)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v25 = (id)qword_1EF568E20;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_modelName(a1, v26, v27, v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_localizedDescription(v24, v32, v33, v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v41 = v31;
        v42 = 2112;
        v43 = v37;
        _os_log_impl(&dword_1BE607000, v25, OS_LOG_TYPE_ERROR, "An error occurred when trying to create feature provider for the %@ model: %@", buf, 0x16u);

      }
    }

  }
  else
  {
    v23 = 0;
  }

  return v23;
}

void sub_1BE737490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE739800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_objecta,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  void *v62;
  void *v63;

  _Unwind_Resume(a1);
}

void sub_1BE739E58(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD v50[4];

  v50[3] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C9E970]);
  v50[0] = &unk_1E7828868;
  v50[1] = &unk_1E7828868;
  objc_msgSend_featureCounts(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_directionalFeaturesInputName(*(void **)(a1 + 32), v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v15, (uint64_t)v14, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v50[2] = v19;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v20, (uint64_t)v50, 3, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (void *)objc_msgSend_initWithShape_dataType_error_(v2, v24, (uint64_t)v23, 65568, 0, v25);

  v27 = objc_alloc(MEMORY[0x1E0C9E8F8]);
  objc_msgSend_inputNames(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v33, v34, v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = v39;
  v49 = v26;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v40, (uint64_t)&v49, (uint64_t)&v48, 1, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = objc_msgSend_initWithDictionary_error_(v27, v43, (uint64_t)v42, 0, v44, v45);
  v47 = (void *)qword_1EF568D80;
  qword_1EF568D80 = v46;

}

void sub_1BE739FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE73A27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE73A2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE73A428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE73A458(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5, BOOL *a6, _BYTE *a7)
{
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  double v24;

  if (!a3)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  v11 = expf(*a4);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                          + 24)
                                                              + v11;
  v17 = objc_msgSend_codeMap(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
  v18 = (unsigned int *)CHCodeMap::operator[](v17, a5);
  result = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 40), v19, *v18, v20, v21, v22);
  if ((_DWORD)result)
  {
    v24 = *(double *)(a1 + 64);
    if (v24 <= v11)
    {
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v24;
      *a7 = 1;
    }
  }
  *a6 = 1.0 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) < *(double *)(a1 + 64);
  return result;
}

void sub_1BE73A618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

int *sub_1BE73A64C(uint64_t a1, const char *a2, uint64_t a3, float *a4, unint64_t a5, BOOL *a6)
{
  int *result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  int v31;

  result = (int *)objc_msgSend_blankIndex(*(void **)(a1 + 32), a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
  if (result != (int *)a5)
  {
    result = (int *)objc_msgSend_spaceIndex(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    if (result != (int *)a5)
    {
      result = (int *)objc_msgSend_pseudospaceIndex(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
      if (result != (int *)a5)
      {
        if (!a3)
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        v22 = expf(*a4);
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                + 24)
                                                                    + v22;
        v28 = objc_msgSend_codeMap(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
        result = (int *)CHCodeMap::operator[](v28, a5);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v30 = *(double *)(v29 + 24);
        if (v30 <= v22)
        {
          v31 = *result;
          *(double *)(v29 + 24) = v22;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v31;
          v30 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        }
        *a6 = 1.0 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < v30;
      }
    }
  }
  return result;
}

void sub_1BE73A930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v36 - 160), 8);
  _Block_object_dispose((const void *)(v36 - 128), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1BE73A9AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE73A9D0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE73A9E8(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5)
{
  float v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char IsMember;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  _QWORD *v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  double *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  _OWORD *v49;
  double *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  if (!a3)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }
  v9 = expf(*a4);
  v15 = objc_msgSend_codeMap(*(void **)(a1 + 32), v10, v11, v12, v13, v14);
  v16 = (unsigned int *)CHCodeMap::operator[](v15, a5);
  IsMember = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 40), v17, *v16, v18, v19, v20);
  v22 = *(_QWORD **)(a1 + 32);
  v23 = v22[21];
  v24 = v22[19];
  v25 = v22[20];
  v27 = v24 == a5 || v25 == a5 || v23 == a5;
  if (!v27 && (IsMember & 1) == 0)
    *a4 = -126.0;
  if (v24 == a5)
  {
    v28 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    if (v25 == a5)
      v29 = 1;
    else
      v29 = IsMember;
    if ((v29 & 1) == 0 && v23 != a5)
    {
      if (*(_QWORD *)(a1 + 72) - 1 == a3)
        goto LABEL_23;
      return;
    }
    v28 = *(_QWORD *)(a1 + 48);
  }
  *(double *)(*(_QWORD *)(v28 + 8) + 24) = *(double *)(*(_QWORD *)(v28 + 8) + 24) + v9;
  if (*(_QWORD *)(a1 + 72) - 1 == a3)
  {
LABEL_23:
    v30 = log(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)/ (1.0 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)));
    v31 = v30;
    v32 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
    v34 = (double *)v32[7];
    v33 = v32[8];
    if ((unint64_t)v34 < v33)
    {
      *v34 = v30;
      v35 = (uint64_t)(v34 + 1);
LABEL_44:
      v32[7] = v35;
      return;
    }
    v36 = (double *)v32[6];
    v37 = v34 - v36;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      sub_1BE61F930();
    v39 = v33 - (_QWORD)v36;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 61)
        sub_1BE61F100();
      v41 = operator new(8 * v40);
      v42 = (double *)&v41[8 * v37];
      v43 = &v41[8 * v40];
      *v42 = v31;
      v35 = (uint64_t)(v42 + 1);
      v44 = (char *)v34 - (char *)v36;
      if (v34 == v36)
        goto LABEL_42;
    }
    else
    {
      v41 = 0;
      v42 = (double *)(8 * v37);
      v43 = 0;
      *(double *)(8 * v37) = v30;
      v35 = 8 * v37 + 8;
      v44 = (char *)v34 - (char *)v36;
      if (v34 == v36)
      {
LABEL_42:
        v32[6] = v42;
        v32[7] = v35;
        v32[8] = v43;
        if (v36)
          operator delete(v36);
        goto LABEL_44;
      }
    }
    v45 = v44 - 8;
    if (v45 < 0x58)
      goto LABEL_49;
    if ((unint64_t)((char *)v36 - v41) < 0x20)
      goto LABEL_49;
    v46 = (v45 >> 3) + 1;
    v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    v48 = &v34[v47 / 0xFFFFFFFFFFFFFFF8];
    v42 = (double *)((char *)v42 - v47);
    v49 = &v41[8 * v37 - 16];
    v50 = v34 - 2;
    v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 4;
      v51 -= 4;
    }
    while (v51);
    v34 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v53 = *((_QWORD *)v34-- - 1);
        *((_QWORD *)v42-- - 1) = v53;
      }
      while (v34 != v36);
    }
    goto LABEL_42;
  }
}

float sub_1BE73AC84(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5)
{
  float result;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) != a5)
  {
    result = *a4 - *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) + 8 * a2);
    *a4 = result;
  }
  return result;
}

void sub_1BE73B280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE73B37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE73B464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE73B5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE73B600(uint64_t a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t i;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t j;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t k;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  uint64_t v267;
  const char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  CHTokenizedResultColumn *v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t m;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  NSObject *v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  void *v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  void *v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  const char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t n;
  const char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  const char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char v414;
  void *v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  const char *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  const char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  const char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  const char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  const char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  unint64_t jj;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  void *v460;
  const char *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  const char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  void *v476;
  id v477;
  const char *v478;
  uint64_t v479;
  const char *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t kk;
  void *v488;
  const char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void *v494;
  const char *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  NSObject *v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  const char *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  const char *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  unint64_t mm;
  const char *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  void *v545;
  unint64_t nn;
  void *v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  BOOL v553;
  unint64_t v554;
  const char *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  void *v559;
  const char *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  BOOL v564;
  unint64_t i1;
  const char *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  void *v571;
  const char *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  const char *v577;
  uint64_t v578;
  uint64_t v579;
  const char *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  const char *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  void *v590;
  const char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  void *v595;
  const char *v596;
  uint64_t v597;
  uint64_t v598;
  const char *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  void *v608;
  const char *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  void *v614;
  const char *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  CHTokenizedResultColumn *v619;
  const char *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  void *v624;
  const char *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  const char *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  void *v636;
  void *v637;
  id v638;
  id v639;
  void *v640;
  unint64_t ii;
  void *v642;
  void *v643;
  void *v644;
  void *v645;
  void *v646;
  void *v647;
  id v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  uint8_t v653[128];
  uint8_t v654[4];
  uint64_t v655;
  __int16 v656;
  uint64_t v657;
  uint8_t buf[24];
  uint64_t v659;

  v659 = *MEMORY[0x1E0C80C00];
  v648 = a2;
  v638 = a3;
  objc_opt_self();
  v12 = objc_msgSend_count(v648, v7, v8, v9, v10, v11);
  if (v12 != objc_msgSend_count(v638, v13, v14, v15, v16, v17))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v23 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = objc_msgSend_count(v648, v24, v25, v26, v27, v28);
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = objc_msgSend_count(v638, v29, v30, v31, v32, v33);
      _os_log_impl(&dword_1BE607000, v23, OS_LOG_TYPE_FAULT, "transcriptionPaths count (%ld) != probabilities count (%ld)", buf, 0x16u);
    }

  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21, v22);
  v644 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v34, v35, v36, v37, v38);
  v642 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend_count(v648, v39, v40, v41, v42, v43);
  v50 = v44;
  memset(buf, 0, sizeof(buf));
  if (v44)
  {
    if (v44 >> 61)
      sub_1BE61F930();
    v51 = (char *)operator new(8 * v44);
    v52 = &v51[8 * v50];
    *(_QWORD *)buf = v51;
    *(_QWORD *)&buf[16] = v52;
    bzero(v51, 8 * v50);
    *(_QWORD *)&buf[8] = v52;
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v45, v46, v47, v48, v49);
  v643 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v53, v54, v55, v56, v57);
  v647 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i < objc_msgSend_count(v648, v58, v59, v60, v61, v62); ++i)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v64, v65, v66, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v647, v70, (uint64_t)v69, v71, v72, v73);

    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v74, v75, v76, v77, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v643, v80, (uint64_t)v79, v81, v82, v83);

  }
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v64, v65, v66, v67, v68);
  v646 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v84, v85, v86, v87, v88);
  v645 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
  v640 = (void *)objc_msgSend_copy(v646, v89, v90, v91, v92, v93);
  for (j = 0; j < objc_msgSend_count(v648, v94, v95, v96, v97, v98); ++j)
  {
    objc_msgSend_objectAtIndexedSubscript_(v643, v100, j, v102, v103, v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v111 = (void *)objc_msgSend_mutableCopy(v645, v106, v107, v108, v109, v110);
    objc_msgSend_removeIndexes_(v111, v112, (uint64_t)v105, v113, v114, v115);
    v116 = *(_QWORD *)buf;
    v117 = *(_QWORD *)(*(_QWORD *)buf + 8 * j);
    objc_msgSend_objectAtIndexedSubscript_(v648, v118, j, v119, v120, v121);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    if (v117 < objc_msgSend_count(v122, v123, v124, v125, v126, v127))
    {
      objc_msgSend_objectAtIndexedSubscript_(v648, v128, j, v129, v130, v131);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v132, v133, v117, v134, v135, v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v137)
        goto LABEL_26;
      while (1)
      {
        if (objc_msgSend_count(v105, v138, v139, v140, v141, v142))
        {
          if (!objc_msgSend_count(v111, v143, v144, v145, v146, v147))
          {
            objc_msgSend_strokeIndexes(v137, v143, v148, v145, v146, v147);
            v149 = (void *)objc_claimAutoreleasedReturnValue();
            v154 = objc_msgSend_ch_intersectsIndexSet_(v149, v150, (uint64_t)v646, v151, v152, v153);

            if (!v154)
              break;
          }
        }
        objc_msgSend_objectAtIndexedSubscript_(v647, v143, j, v145, v146, v147);
        v155 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v155, v156, (uint64_t)v137, v157, v158, v159);

        objc_msgSend_strokeIndexes(v137, v160, v161, v162, v163, v164);
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addIndexes_(v105, v166, (uint64_t)v165, v167, v168, v169);

        objc_msgSend_strokeIndexes(v137, v170, v171, v172, v173, v174);
        v175 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addIndexes_(v645, v176, (uint64_t)v175, v177, v178, v179);

        objc_msgSend_strokeIndexes(v137, v180, v181, v182, v183, v184);
        v185 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addIndexes_(v646, v186, (uint64_t)v185, v187, v188, v189);

        objc_msgSend_strokeIndexes(v137, v190, v191, v192, v193, v194);
        v195 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeIndexes_(v111, v196, (uint64_t)v195, v197, v198, v199);

        v200 = *(_QWORD *)(v116 + 8 * j) + 1;
        *(_QWORD *)(v116 + 8 * j) = v200;
        objc_msgSend_objectAtIndexedSubscript_(v648, v201, j, v202, v203, v204);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        if (v200 >= objc_msgSend_count(v122, v205, v206, v207, v208, v209))
        {

          goto LABEL_25;
        }
        objc_msgSend_objectAtIndexedSubscript_(v648, v210, j, v211, v212, v213);
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v214, v215, v200, v216, v217, v218);
        v219 = objc_claimAutoreleasedReturnValue();

        v137 = (void *)v219;
        if (!v219)
        {
          v122 = 0;
          goto LABEL_25;
        }
      }
      v122 = v137;
    }
LABEL_25:

LABEL_26:
  }
  v220 = 0;
  while (v220 < objc_msgSend_count(v648, v100, v101, v102, v103, v104))
  {
    objc_msgSend_objectAtIndexedSubscript_(v643, v221, v220, v222, v223, v224);
    v225 = objc_claimAutoreleasedReturnValue();
    v231 = (void *)objc_msgSend_mutableCopy((void *)v225, v226, v227, v228, v229, v230);

    objc_msgSend_addIndexes_(v231, v232, (uint64_t)v640, v233, v234, v235);
    LOBYTE(v225) = objc_msgSend_isEqualToIndexSet_(v231, v236, (uint64_t)v646, v237, v238, v239);

    ++v220;
    if ((v225 & 1) == 0)
    {
LABEL_53:

      goto LABEL_14;
    }
  }

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v240, v241, v242, v243, v244);
  v640 = (void *)objc_claimAutoreleasedReturnValue();
  for (k = 0; k < objc_msgSend_count(v647, v245, v246, v247, v248, v249); ++k)
  {
    objc_msgSend_objectAtIndexedSubscript_(v647, v251, k, v252, v253, v254);
    v255 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_count(v255, v256, v257, v258, v259, v260))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v266 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v266, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v654 = 0;
        _os_log_impl(&dword_1BE607000, v266, OS_LOG_TYPE_FAULT, "Found empty row when creating result with best path tokens. It indicates that the given paths don't cover the same strokes.", v654, 2u);
      }

    }
    v267 = objc_msgSend_count(v640, v261, v262, v263, v264, v265);
    if (objc_msgSend_count(v255, v268, v269, v270, v271, v272))
    {
      v278 = (void *)objc_opt_class();
      v267 = objc_msgSend_mergeTokenRow_intoUniqueRows_(v278, v279, (uint64_t)v255, (uint64_t)v640, v280, v281);
    }
    if (objc_msgSend_count(v642, v273, v274, v275, v276, v277) <= k)
    {
      objc_msgSend_indexPathWithIndex_(MEMORY[0x1E0CB36B0], v282, v267, v283, v284, v285);
      v286 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v642, v295, (uint64_t)v286, v296, v297, v298);
    }
    else
    {
      objc_msgSend_objectAtIndexedSubscript_(v642, v282, k, v283, v284, v285);
      v286 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_indexPathByAddingIndex_(v286, v287, v267, v288, v289, v290);
      v291 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_atIndexedSubscript_(v642, v292, (uint64_t)v291, k, v293, v294);

    }
  }
  v299 = [CHTokenizedResultColumn alloc];
  v304 = (void *)objc_msgSend_initWithTokenRows_(v299, v300, (uint64_t)v640, v301, v302, v303);
  objc_msgSend_addObject_(v644, v305, (uint64_t)v304, v306, v307, v308);
  objc_msgSend_removeAllIndexes(v645, v309, v310, v311, v312, v313);
  for (m = 0; m < objc_msgSend_count(v648, v314, v315, v316, v317, v318); ++m)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v320, v321, v322, v323, v324);
    v325 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_atIndexedSubscript_(v647, v326, (uint64_t)v325, m, v327, v328);

    objc_msgSend_objectAtIndexedSubscript_(v643, v329, m, v330, v331, v332);
    v333 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllIndexes(v333, v334, v335, v336, v337, v338);

  }
  v339 = 0;
  while (v339 < objc_msgSend_count(v648, v320, v321, v322, v323, v324))
  {
    v344 = *(_QWORD *)(*(_QWORD *)buf + 8 * v339);
    objc_msgSend_objectAtIndexedSubscript_(v648, v340, v339, v341, v342, v343);
    v345 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v344) = v344 == objc_msgSend_count(v345, v346, v347, v348, v349, v350);

    ++v339;
    if ((v344 & 1) == 0)
    {

      goto LABEL_53;
    }
  }

  v356 = objc_msgSend_count(v642, v351, v352, v353, v354, v355);
  if (v356 != objc_msgSend_count(v638, v357, v358, v359, v360, v361))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v367 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v367, OS_LOG_TYPE_FAULT))
    {
      v373 = objc_msgSend_count(v642, v368, v369, v370, v371, v372);
      v379 = objc_msgSend_count(v638, v374, v375, v376, v377, v378);
      *(_DWORD *)v654 = 134218240;
      v655 = v373;
      v656 = 2048;
      v657 = v379;
      _os_log_impl(&dword_1BE607000, v367, OS_LOG_TYPE_FAULT, "transcriptionPaths count (%ld) != probabilities count (%ld) after tokenized result is built", v654, 0x16u);
    }

  }
  v380 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend_firstObject(v642, v362, v363, v364, v365, v366);
  v381 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_arrayWithObject_(v380, v382, (uint64_t)v381, v383, v384, v385);
  v386 = (void *)objc_claimAutoreleasedReturnValue();

  v387 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend_firstObject(v638, v388, v389, v390, v391, v392);
  v393 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_arrayWithObject_(v387, v394, (uint64_t)v393, v395, v396, v397);
  v639 = (id)objc_claimAutoreleasedReturnValue();

  for (n = 1; n < objc_msgSend_count(v642, v398, v399, v400, v401, v402); ++n)
  {
    objc_msgSend_objectAtIndexedSubscript_(v642, v404, n, v406, v407, v408);
    v409 = (void *)objc_claimAutoreleasedReturnValue();
    v414 = objc_msgSend_containsObject_(v386, v410, (uint64_t)v409, v411, v412, v413);

    if ((v414 & 1) == 0)
    {
      objc_msgSend_objectAtIndexedSubscript_(v642, v398, n, v400, v401, v402);
      v415 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v386, v416, (uint64_t)v415, v417, v418, v419);

      objc_msgSend_objectAtIndexedSubscript_(v638, v420, n, v421, v422, v423);
      v424 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v639, v425, (uint64_t)v424, v426, v427, v428);

    }
  }
  objc_msgSend_set(MEMORY[0x1E0C99E20], v404, v405, v406, v407, v408);
  v637 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v429, v430, v431, v432, v433);
  v636 = (void *)objc_claimAutoreleasedReturnValue();
  for (ii = 0; ii < objc_msgSend_count(v386, v434, v435, v436, v437, v438); ++ii)
  {
    objc_msgSend_objectAtIndexedSubscript_(v386, v439, ii, v440, v441, v442);
    v443 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v444, v445, v446, v447, v448);
    v454 = (void *)objc_claimAutoreleasedReturnValue();
    for (jj = 0; jj < objc_msgSend_count(v644, v449, v450, v451, v452, v453); ++jj)
    {
      objc_msgSend_objectAtIndexedSubscript_(v644, v456, jj, v457, v458, v459);
      v460 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_textTokenRows(v460, v461, v462, v463, v464, v465);
      v466 = (void *)objc_claimAutoreleasedReturnValue();
      v471 = objc_msgSend_indexAtPosition_(v443, v467, jj, v468, v469, v470);
      objc_msgSend_objectAtIndexedSubscript_(v466, v472, v471, v473, v474, v475);
      v476 = (void *)objc_claimAutoreleasedReturnValue();

      v651 = 0u;
      v652 = 0u;
      v649 = 0u;
      v650 = 0u;
      v477 = v476;
      v485 = objc_msgSend_countByEnumeratingWithState_objects_count_(v477, v478, (uint64_t)&v649, (uint64_t)v653, 16, v479);
      if (v485)
      {
        v486 = *(_QWORD *)v650;
        do
        {
          for (kk = 0; kk != v485; ++kk)
          {
            if (*(_QWORD *)v650 != v486)
              objc_enumerationMutation(v477);
            v488 = *(void **)(*((_QWORD *)&v649 + 1) + 8 * kk);
            if ((objc_msgSend_properties(v488, v480, v481, v482, v483, v484) & 0x20) != 0)
              objc_msgSend_appendString_(v454, v489, (uint64_t)CFSTR(" "), v491, v492, v493);
            objc_msgSend_string(v488, v489, v490, v491, v492, v493);
            v494 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_appendString_(v454, v495, (uint64_t)v494, v496, v497, v498);

          }
          v485 = objc_msgSend_countByEnumeratingWithState_objects_count_(v477, v480, (uint64_t)&v649, (uint64_t)v653, 16, v484);
        }
        while (v485);
      }

    }
    if (objc_msgSend_containsObject_(v637, v456, (uint64_t)v454, v457, v458, v459))
      objc_msgSend_addIndex_(v636, v499, ii, v500, v501, v502);
    else
      objc_msgSend_addObject_(v637, v499, (uint64_t)v454, v500, v501, v502);

  }
  if (objc_msgSend_count(v636, v439, ii, v440, v441, v442))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v503 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v503, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v654 = 0;
      _os_log_impl(&dword_1BE607000, v503, OS_LOG_TYPE_DEBUG, "Found different segmentation leading to the same transcription. Deduping keeping the transcription path closer to the top.", v654, 2u);
    }

    objc_msgSend_removeObjectsAtIndexes_(v386, v504, (uint64_t)v636, v505, v506, v507);
    objc_msgSend_removeObjectsAtIndexes_(v639, v508, (uint64_t)v636, v509, v510, v511);
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v512, v513, v514, v515, v516);
    v517 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v518, v519, v520, v521, v522);
    v528 = (void *)objc_claimAutoreleasedReturnValue();
    for (mm = 0; mm < objc_msgSend_count(v644, v523, v524, v525, v526, v527); ++mm)
    {
      objc_msgSend_objectAtIndexedSubscript_(v644, v530, mm, v531, v532, v533);
      v534 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v535, v536, v537, v538, v539);
      v545 = (void *)objc_claimAutoreleasedReturnValue();
      for (nn = 0; ; ++nn)
      {
        objc_msgSend_textTokenRows(v534, v540, v541, v542, v543, v544);
        v547 = (void *)objc_claimAutoreleasedReturnValue();
        v553 = nn < objc_msgSend_count(v547, v548, v549, v550, v551, v552);

        if (!v553)
          break;
        v554 = 0;
        while (v554 < objc_msgSend_count(v386, v540, v541, v542, v543, v544))
        {
          objc_msgSend_objectAtIndexedSubscript_(v386, v555, v554, v556, v557, v558);
          v559 = (void *)objc_claimAutoreleasedReturnValue();
          v564 = objc_msgSend_indexAtPosition_(v559, v560, mm, v561, v562, v563) == nn;

          ++v554;
          if (v564)
            goto LABEL_92;
        }
        objc_msgSend_addIndex_(v545, v555, nn, v556, v557, v558);
LABEL_92:
        ;
      }
      for (i1 = 0; i1 < objc_msgSend_count(v386, v540, v541, v542, v543, v544); ++i1)
      {
        objc_msgSend_objectAtIndexedSubscript_(v386, v566, i1, v568, v569, v570);
        v571 = (void *)objc_claimAutoreleasedReturnValue();
        v576 = objc_msgSend_indexAtPosition_(v571, v572, mm, v573, v574, v575);

        v589 = v576 - objc_msgSend_countOfIndexesInRange_(v545, v577, 0, v576, v578, v579);
        if (objc_msgSend_count(v528, v580, v581, v582, v583, v584) <= i1)
        {
          objc_msgSend_indexPathWithIndex_(MEMORY[0x1E0CB36B0], v585, v589, v586, v587, v588);
          v590 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v528, v599, (uint64_t)v590, v600, v601, v602);
        }
        else
        {
          objc_msgSend_objectAtIndexedSubscript_(v528, v585, i1, v586, v587, v588);
          v590 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_indexPathByAddingIndex_(v590, v591, v589, v592, v593, v594);
          v595 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_atIndexedSubscript_(v528, v596, (uint64_t)v595, i1, v597, v598);

        }
      }
      if (objc_msgSend_count(v545, v566, v567, v568, v569, v570))
      {
        objc_msgSend_textTokenRows(v534, v603, v604, v605, v606, v607);
        v608 = (void *)objc_claimAutoreleasedReturnValue();
        v614 = (void *)objc_msgSend_mutableCopy(v608, v609, v610, v611, v612, v613);

        objc_msgSend_removeObjectsAtIndexes_(v614, v615, (uint64_t)v545, v616, v617, v618);
        v619 = [CHTokenizedResultColumn alloc];
        v624 = (void *)objc_msgSend_initWithTokenRows_(v619, v620, (uint64_t)v614, v621, v622, v623);
        objc_msgSend_addObject_(v517, v625, (uint64_t)v624, v626, v627, v628);

      }
      else
      {
        objc_msgSend_objectAtIndexedSubscript_(v644, v603, mm, v605, v606, v607);
        v614 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v517, v629, (uint64_t)v614, v630, v631, v632);
      }

    }
    if (a4)
    {
LABEL_109:
      *a4 = objc_retainAutorelease(v517);
      if (!a5)
        goto LABEL_110;
LABEL_114:
      *a5 = objc_retainAutorelease(v528);
      if (a6)
        goto LABEL_115;
      goto LABEL_116;
    }
  }
  else
  {
    v528 = v386;
    v517 = v644;
    if (a4)
      goto LABEL_109;
  }
  if (a5)
    goto LABEL_114;
LABEL_110:
  if (a6)
LABEL_115:
    *a6 = objc_retainAutorelease(v639);
LABEL_116:

  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);

}

void sub_1BE73C480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }

  _Unwind_Resume(a1);
}

void sub_1BE73CA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE73CA38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73CA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73CA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE73CFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE73D190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE73D57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE73D598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE73D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id sub_1BE73D664(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  v2 = a2;
  objc_msgSend_textTokenRows(v2, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_count(v8, v9, v10, v11, v12, v13);

  if (v14 == 1)
    v20 = CFSTR("row");
  else
    v20 = CFSTR("rows");
  v21 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_textTokenRows(v2, v15, v16, v17, v18, v19);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_count(v22, v23, v24, v25, v26, v27);
  objc_msgSend_stringWithFormat_(v21, v29, (uint64_t)CFSTR("%ld %@"), v30, v31, v32, v28, v20);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  return v33;
}

void sub_1BE73D708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73D72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D73C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE73D750(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_description(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1BE73D76C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v7 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_description(a2, (const char *)a2, a3, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v7, v9, (uint64_t)CFSTR("Column %ld %@"), v10, v11, v12, a3, v8);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_1BE73D7D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73D9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE73D9E8(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

void sub_1BE73DA58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73DB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73DC20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73DC34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73DCCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73DCEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73DDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73DE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73DEB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73DED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73DFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE73DFE4(_QWORD *a1, void *a2, uint64_t a3, unint64_t *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v14;
  id v15;

  v6 = a2;
  v12 = a1[5];
  if (*a4 >= v12 && *a4 - v12 < a1[6])
  {
    v15 = v6;
    objc_msgSend_heuristicTextScore(v6, v7, v8, v9, v10, v11);
    *(double *)(*(_QWORD *)(a1[4] + 8) + 24) = v14 + *(double *)(*(_QWORD *)(a1[4] + 8) + 24);
    v6 = v15;
  }

}

void sub_1BE73E044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE73E2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE73E3C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1BE73E3E0(_QWORD *a1, void *a2, uint64_t a3, unint64_t *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v14;

  v6 = a2;
  v12 = a1[5];
  if (*a4 >= v12 && *a4 - v12 < a1[6])
  {
    v14 = v6;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) |= (objc_msgSend_inputSources(v6, v7, v8, v9, v10, v11) & 0x10) != 0;
    v6 = v14;
  }

}

void sub_1BE73E444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE73E4F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73E504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73E7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE73E8B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE73ECF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73EFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_1BE73F030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 sub_1BE73F044(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE73F054(uint64_t a1, void *a2, uint64_t a3, __int128 *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int isGibberish;
  __CFString *v20;
  __CFString *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;

  v7 = a2;
  objc_msgSend_string(v7, v8, v9, v10, v11, v12);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v62 = 0;
  if (*(_BYTE *)(a1 + 88) || *(_BYTE *)(a1 + 89))
  {
    isGibberish = objc_msgSend_shouldFilterOutStringForToken_isGibberish_(*(void **)(a1 + 32), v13, (uint64_t)v7, (uint64_t)&v62, v16, v17);
    if (a3 > 0)
      goto LABEL_7;
  }
  else
  {
    isGibberish = 0;
    if (a3 > 0)
      goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 90))
  {
    v20 = &stru_1E77F6F28;
    goto LABEL_11;
  }
LABEL_7:
  objc_msgSend_precedingSeparatorForToken_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15, v16, v17);
  v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v20 = v21;
  if (isGibberish
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)
    && objc_msgSend_length(v21, v13, v14, v15, v16, v17))
  {

    v20 = CFSTR("_");
  }
LABEL_11:
  v22 = objc_msgSend_length(*(void **)(a1 + 40), v13, v14, v15, v16, v17);
  v33 = objc_msgSend_length(v20, v23, v24, v25, v26, v27);
  if (isGibberish)
  {
    v34 = objc_msgSend_countCharacters(v18, v28, v29, v30, v31, v32);
    objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(&stru_1E77F6F28, v35, v34, (uint64_t)CFSTR("_"), 0, v36);
    v37 = objc_claimAutoreleasedReturnValue();

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    v18 = (void *)v37;
  }
  v43 = objc_msgSend_length(*(void **)(a1 + 40), v28, v29, v30, v31, v32);
  if (!*(_BYTE *)(a1 + 90))
    v43 += objc_msgSend_length(v20, v38, v39, v40, v41, v42);
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v38, (uint64_t)CFSTR("%@%@"), v40, v41, v42, v20, v18);
  v54 = objc_msgSend_length(*(void **)(a1 + 40), v44, v45, v46, v47, v48);
  v55 = *(_QWORD *)(a1 + 48);
  if (v55)
  {
    v56 = v54 - (v33 + v22);
    if (*(_BYTE *)(a1 + 89))
      v57 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v57 = v33 + v22;
    if (*(_BYTE *)(a1 + 89))
      v58 = 0;
    else
      v58 = v56;
    v61 = *((_QWORD *)a4 + 2);
    v60 = *a4;
    (*(void (**)(uint64_t, id, uint64_t, __int128 *, uint64_t, uint64_t))(v55 + 16))(v55, v7, a3, &v60, v57, v58);
  }
  if (!v62 || !*(_BYTE *)(a1 + 89))
  {
    v59 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    if (*(_QWORD *)(v59 + 48) == 0x7FFFFFFFFFFFFFFFLL)
      *(_QWORD *)(v59 + 48) = v43;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 56) = objc_msgSend_length(*(void **)(a1 + 40), v49, v50, v51, v52, v53)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)+ 48);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = isGibberish;

}

void sub_1BE73F2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F5E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F6A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568160;
  qword_1EF568160 = v6;

  objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v8, v9, v10, v11, v12);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invertedSet(v20, v13, v14, v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)qword_1EF568170;
  qword_1EF568170 = v18;

}

void sub_1BE73F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1BE73F724(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;

  v3 = a2;
  v9 = v3;
  if (!a1)
  {
    v45 = 0;
    goto LABEL_18;
  }
  v10 = objc_msgSend_properties(v3, v4, v5, v6, v7, v8);
  objc_msgSend_string(v9, v11, v12, v13, v14, v15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v10 & 4) == 0)
  {
    if (qword_1EF5681A8 != -1)
      dispatch_once(&qword_1EF5681A8, &unk_1E77EF348);
    v22 = objc_msgSend_properties(v9, v16, v17, v18, v19, v20);
    objc_msgSend_stringByTrimmingCharactersInSet_(v21, v23, qword_1EF568188, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend_length(v27, v28, v29, v30, v31, v32);

    if ((v22 & 8) == 0)
    {
      v39 = objc_msgSend_length(v21, v34, v35, v36, v37, v38);
      v45 = v39 > 0x14;
      if (v39 > 0x14 || !v33)
        goto LABEL_17;
      if ((unint64_t)objc_msgSend_length(v21, v40, v41, v42, v43, v44) >= 5)
      {
        v49 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v21, v46, qword_1EF568190, 3, v47, v48);
        v53 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v21, v50, qword_1EF5681A0, 3, v51, v52);
        if (objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v21, v54, qword_1EF568198, 1, v55, v56) == 1)
        {
          v45 = v53 > 0 || v49 > 1;
          goto LABEL_17;
        }
      }
    }
  }
  v45 = 0;
LABEL_17:

LABEL_18:
  return v45;
}

void sub_1BE73F874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F8B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73F8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73F8F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73F9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE73F9E8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isTopOriginal;
  uint64_t v9;
  char v10;
  id v11;

  v11 = a2;
  isTopOriginal = objc_msgSend_isTopOriginal(v11, v3, v4, v5, v6, v7);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v9 + 24))
    v10 = isTopOriginal;
  else
    v10 = 0;
  *(_BYTE *)(v9 + 24) = v10;

}

void sub_1BE73FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE73FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE73FB20(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char hasValidPrincipalLines;
  uint64_t v9;
  char v10;
  id v11;

  v11 = a2;
  hasValidPrincipalLines = objc_msgSend_hasValidPrincipalLines(v11, v3, v4, v5, v6, v7);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v9 + 24))
    v10 = hasValidPrincipalLines;
  else
    v10 = 0;
  *(_BYTE *)(v9 + 24) = v10;

}

void sub_1BE73FB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE73FD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE73FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE73FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE73FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE73FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE73FE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE73FF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE73FFA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE73FFC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73FFD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE73FFE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE73FFF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7400F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE740118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE740130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE74026C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE740374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE740384(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  objc_opt_self();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v9 = v2;
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v59, (uint64_t)v63, 16, v11);
  if (v17)
  {
    v18 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v60 != v18)
          objc_enumerationMutation(v9);
        v20 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
        if (objc_msgSend_count(v8, v12, v13, v14, v15, v16, (_QWORD)v59)
          && (objc_msgSend_lastObject(v8, v21, v22, v23, v24, v25),
              v26 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend_strokeIndexes(v20, v27, v28, v29, v30, v31),
              v32 = (void *)objc_claimAutoreleasedReturnValue(),
              v37 = objc_msgSend_ch_intersectsIndexSet_(v26, v33, (uint64_t)v32, v34, v35, v36),
              v32,
              v26,
              v37))
        {
          objc_msgSend_lastObject(v8, v21, v22, v23, v24, v25);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIndexes(v20, v39, v40, v41, v42, v43);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v38, v45, (uint64_t)v44, v46, v47, v48);
        }
        else
        {
          objc_msgSend_strokeIndexes(v20, v21, v22, v23, v24, v25);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = (void *)objc_msgSend_mutableCopy(v38, v49, v50, v51, v52, v53);
          objc_msgSend_addObject_(v8, v54, (uint64_t)v44, v55, v56, v57);
        }

      }
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v59, (uint64_t)v63, 16, v16);
    }
    while (v17);
  }

  return v8;
}

void sub_1BE740570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7406C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7406D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7406F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7408A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7408B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7408C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7408D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7408E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7408FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7409F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE740C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE740C2C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSRange v29;
  void *v30;
  id v31;
  NSRange v32;

  v31 = a2;
  if ((objc_msgSend_properties(v31, v3, v4, v5, v6, v7) & 0x20) != 0)
  {
    objc_msgSend_string(v31, v8, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_length(v13, v20, v21, v22, v23, v24) + 1;
  }
  else
  {
    objc_msgSend_string(v31, v8, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_length(v13, v14, v15, v16, v17, v18);
  }

  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v32.location = *(_QWORD *)(v25 + 24);
  *(_QWORD *)(v25 + 24) = v32.location + v19;
  v32.length = v19;
  v29 = NSIntersectionRange(v32, *(NSRange *)(a1 + 48));
  v30 = v31;
  if (v29.length)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), (const char *)v29.length, (uint64_t)v31, v26, v27, v28);
    v30 = v31;
  }

}

void sub_1BE740CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE740D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE740D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE740D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE740D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE740F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE740FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE740FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE740FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE741008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE741430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1BE741570(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend_textTokenRows(a2, (const char *)a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_indexOfObjectPassingTest_(v6, v7, (uint64_t)&unk_1E77F47C8, v8, v9, v10);

  return v11 == 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1BE7415B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7415C8(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = a2;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v15, (uint64_t)v19, 16, v4);
  if (v10)
  {
    v11 = *(_QWORD *)v16;
    while (2)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v2);
        if ((objc_msgSend_isTopOriginal(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), v5, v6, v7, v8, v9, (_QWORD)v15) & 1) == 0)
        {
          v13 = 0;
          goto LABEL_11;
        }
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v15, (uint64_t)v19, 16, v9);
      if (v10)
        continue;
      break;
    }
  }
  v13 = 1;
LABEL_11:

  return v13;
}

void sub_1BE7416C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7416EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  CHMutableTokenizedResultColumn *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t i;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t OriginalToken;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint8_t v149[128];
  uint8_t buf[4];
  uint64_t v151;
  __int16 v152;
  const char *v153;
  __int16 v154;
  void *v155;
  __int16 v156;
  unint64_t v157;
  __int16 v158;
  void *v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  objc_msgSend_tokenColumns(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v6, v7, (uint64_t)a2, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_transcriptionPaths(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v17, v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_indexAtPosition_(v23, v24, (uint64_t)a2, v25, v26, v27);

  v29 = [CHMutableTokenizedResultColumn alloc];
  objc_msgSend_textTokenRows(v11, v30, v31, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = (void *)objc_msgSend_initWithTokenRows_(v29, v36, (uint64_t)v35, v37, v38, v39);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v40, v41, v42, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textTokenRows(v11, v46, v47, v48, v49, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend_count(v51, v52, v53, v54, v55, v56);

  if (v28 >= v57)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v63 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v63, OS_LOG_TYPE_FAULT))
    {
      v69 = objc_msgSend_tokenColumnCount(*(void **)(a1 + 32), v64, v65, v66, v67, v68);
      objc_msgSend_textTokenRows(v11, v70, v71, v72, v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_transcriptionPaths(*(void **)(a1 + 32), v76, v77, v78, v79, v80);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_firstObject(v81, v82, v83, v84, v85, v86);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134219010;
      v151 = v69;
      v152 = 2048;
      v153 = a2;
      v154 = 2112;
      v155 = v75;
      v156 = 2048;
      v157 = v28;
      v158 = 2112;
      v159 = v87;
      _os_log_impl(&dword_1BE607000, v63, OS_LOG_TYPE_FAULT, "Column does not have a row at the top path row index. Column Count: %ld Column Index: %ld Column Rows: %@ Top Row Index: %ld Top Path: %@", buf, 0x34u);

    }
  }
  objc_msgSend_textTokenRows(v11, v58, v59, v60, v61, v62);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = v28 < objc_msgSend_count(v88, v89, v90, v91, v92, v93);

  if (v94)
  {
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    objc_msgSend_textTokenRows(v11, v95, v96, v97, v98, v99);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v100, v101, v28, v102, v103, v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();

    v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v105, v106, (uint64_t)&v145, (uint64_t)v149, 16, v107);
    if (v113)
    {
      v114 = *(_QWORD *)v146;
      do
      {
        for (i = 0; i != v113; ++i)
        {
          if (*(_QWORD *)v146 != v114)
            objc_enumerationMutation(v105);
          v116 = (void *)objc_msgSend_mutableCopy(*(void **)(*((_QWORD *)&v145 + 1) + 8 * i), v108, v109, v110, v111, v112);
          v122 = objc_msgSend_inputSources(v116, v117, v118, v119, v120, v121);
          OriginalToken = objc_msgSend_makeOriginalToken_(CHTokenizedTextResultToken, v123, v122, v124, v125, v126);
          objc_msgSend_setInputSources_(v116, v128, OriginalToken, v129, v130, v131);
          objc_msgSend_addObject_(v45, v132, (uint64_t)v116, v133, v134, v135);

        }
        v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v105, v108, (uint64_t)&v145, (uint64_t)v149, 16, v112);
      }
      while (v113);
    }

    objc_msgSend_setTokenRowWithTokens_atIndex_(v142, v136, (uint64_t)v45, v28, v137, v138);
    objc_msgSend_replaceObjectAtIndex_withObject_(*(void **)(a1 + 40), v139, (uint64_t)a2, (uint64_t)v142, v140, v141);
  }

}

void sub_1BE741A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE741B44(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  id v9;

  v9 = a2;
  objc_msgSend_combinedScore(v9, v3, v4, v5, v6, v7);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8
                                                              * *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);

}

void sub_1BE741B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE741BA0(uint64_t a1)
{
  sub_1BE671438(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1BE741BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *i;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t *v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  int64x2_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  int64x2_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int64x2_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v35 = xmmword_1BE8D5080;
  v36 = 0;
  v37[0] = xmmword_1BE8D6980;
  v37[1] = xmmword_1BE8D6990;
  v38 = 0;
  v39 = xmmword_1BE8D69A0;
  v40 = xmmword_1BE8D69B0;
  v41 = 0;
  v42 = xmmword_1BE8D69C0;
  v43 = xmmword_1BE8D69D0;
  v44 = 0;
  v45 = xmmword_1BE8D69E0;
  v46 = xmmword_1BE8D69F0;
  v48 = xmmword_1BE8D6A00;
  v49 = xmmword_1BE8D6A10;
  v47 = 0;
  v50 = 0;
  v51 = xmmword_1BE8D6A20;
  v52 = xmmword_1BE8D6A30;
  v53 = 0;
  v54 = 0x4014000000000000;
  v55 = 0x3FFCCCCCCCCCCCCDLL;
  v56 = 0;
  v57 = xmmword_1BE8D6A40;
  v58 = xmmword_1BE8D6A50;
  v59 = xmmword_1BE8D5080;
  v60 = 1;
  v61 = 0x400999999999999ALL;
  v62 = 0x4000000000000000;
  v63 = 0;
  v64 = xmmword_1BE8D6A60;
  v65 = xmmword_1BE8D6A70;
  v66 = xmmword_1BE8D69B0;
  v67 = 1;
  v68 = 0x4010000000000000;
  v69 = 0x400199999999999ALL;
  v70 = 0;
  v71 = xmmword_1BE8D6A80;
  v72 = xmmword_1BE8D6A90;
  v73 = xmmword_1BE8D69F0;
  v74 = 1;
  v75 = 0x4014CCCCCCCCCCCDLL;
  v76 = 0x4002666666666666;
  v77 = 0;
  v78 = xmmword_1BE8D6AA0;
  v79 = xmmword_1BE8D6AB0;
  v80 = xmmword_1BE8D6A30;
  v81 = 1;
  v82 = 0x401999999999999ALL;
  v83 = 0x4003333333333333;
  v84 = 0;
  v85 = xmmword_1BE8D6AC0;
  v86 = xmmword_1BE8D6AD0;
  v87 = xmmword_1BE8D5080;
  v88 = 2;
  v89 = 0x400199999999999ALL;
  v90 = 0x3FF6666666666666;
  v91 = 0;
  v92 = vdupq_n_s64(2uLL);
  v93 = xmmword_1BE8D6AE0;
  v94 = xmmword_1BE8D69B0;
  v95 = 2;
  v96 = 0x4014000000000000;
  v97 = 0x3FFCCCCCCCCCCCCDLL;
  v98 = 0;
  v99 = xmmword_1BE8D6AF0;
  v100 = xmmword_1BE8D6B00;
  v101 = xmmword_1BE8D69F0;
  v102 = 2;
  v103 = 0x401599999999999ALL;
  v104 = 0x4000CCCCCCCCCCCDLL;
  v105 = 0;
  v106 = xmmword_1BE8D6B10;
  v107 = xmmword_1BE8D6B20;
  v108 = xmmword_1BE8D6A30;
  v109 = 2;
  v110 = 0x4018000000000000;
  v111 = 0x4002666666666666;
  v112 = 0;
  v113 = xmmword_1BE8D6B30;
  v114 = xmmword_1BE8D6B40;
  v115 = vdupq_n_s64(1uLL);
  v116 = 0;
  v117 = 0x3FD851EB851EB852;
  v118 = 0x3FDEB851EB851EB8;
  v119 = 1;
  v120 = xmmword_1BE8D6B50;
  v121 = xmmword_1BE8D6B60;
  v122 = xmmword_1BE8D6B70;
  v123 = 0;
  v124 = 0x3FDD70A3D70A3D71;
  v125 = 0x3FE0A3D70A3D70A4;
  v126 = 1;
  v127 = xmmword_1BE8D6B80;
  v128 = xmmword_1BE8D6B90;
  v129 = xmmword_1BE8D6BA0;
  v130 = 0;
  v131 = 0x3FE147AE147AE148;
  v132 = 0x3FE1EB851EB851ECLL;
  v133 = 1;
  v134 = xmmword_1BE8D6BB0;
  v135 = xmmword_1BE8D6BC0;
  v136 = xmmword_1BE8D6BD0;
  v137 = 0;
  v138 = 0x3FE28F5C28F5C28FLL;
  v139 = 0x3FE3D70A3D70A3D7;
  v140 = 1;
  v141 = xmmword_1BE8D6A40;
  v142 = xmmword_1BE8D6BE0;
  v143 = xmmword_1BE8D6BF0;
  v144 = 0;
  v145 = 0x3FE47AE147AE147BLL;
  v146 = 0x3FE47AE147AE147BLL;
  v147 = 1;
  v148 = xmmword_1BE8D6C00;
  v149 = xmmword_1BE8D6C10;
  v150 = v115;
  v151 = 2;
  v152 = 0x3FC999999999999ALL;
  v153 = 0x3FE147AE147AE148;
  v154 = 1;
  v155 = v92;
  v156 = xmmword_1BE8D6C20;
  v157 = xmmword_1BE8D6B70;
  v158 = 2;
  v159 = 0x3FCC28F5C28F5C29;
  v160 = 0x3FE47AE147AE147BLL;
  v161 = 1;
  v162 = xmmword_1BE8D6AF0;
  v163 = xmmword_1BE8D6C30;
  v164 = xmmword_1BE8D6BA0;
  v165 = 2;
  v166 = 0x3FD0A3D70A3D70A4;
  v167 = 0x3FE999999999999ALL;
  v168 = 1;
  v169 = xmmword_1BE8D6B10;
  v170 = xmmword_1BE8D6C40;
  v171 = xmmword_1BE8D6BD0;
  v172 = 2;
  v173 = 0x3FD1EB851EB851ECLL;
  v174 = 0x3FEAE147AE147AE1;
  v175 = 1;
  v176 = xmmword_1BE8D6B30;
  v177 = xmmword_1BE8D6C50;
  v178 = xmmword_1BE8D6BF0;
  v179 = 2;
  v180 = 0x3FD3333333333333;
  v181 = 0x3FECCCCCCCCCCCCDLL;
  v182 = 1;
  v183 = xmmword_1BE8D6C60;
  v184 = xmmword_1BE8D6C70;
  v0 = qword_1EF5681F0;
  if (!qword_1EF5681F8)
    goto LABEL_49;
  v1 = qword_1EF5681E8;
  qword_1EF5681E8 = (uint64_t)&qword_1EF5681F0;
  *(_QWORD *)(qword_1EF5681F0 + 16) = 0;
  qword_1EF5681F0 = 0;
  qword_1EF5681F8 = 0;
  if (*(_QWORD *)(v1 + 8))
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = v1;
  if (!v2)
  {
    v0 = 0;
LABEL_49:
    v6 = 0;
    goto LABEL_50;
  }
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
  {
    v4 = (_QWORD *)*v3;
    if (*v3 == v2)
    {
      *v3 = 0;
      while (1)
      {
        v34 = (_QWORD *)v3[1];
        if (!v34)
          break;
        do
        {
          v3 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
    }
    else
    {
      for (v3[1] = 0; v4; v4 = (_QWORD *)v3[1])
      {
        do
        {
          v3 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
  }
  v5 = 0;
  v6 = 44;
  v7 = v3;
  while (1)
  {
    v8 = (uint64_t *)&v35 + 5 * v5;
    v9 = (uint64_t *)qword_1EF5681F0;
    v10 = *v8;
    if (qword_1EF5681F0)
    {
      v11 = v8[1];
      v12 = v8[2];
      while (1)
      {
        v14 = v9;
        v15 = v9[4];
        if (v10 < v15)
          goto LABEL_16;
        if (v15 >= v10)
        {
          v16 = v9[5];
          if (v11 >= v16)
          {
            if (v16 < v11)
              goto LABEL_19;
            v17 = v9[6];
            if (v12 >= v17)
            {
              if (v17 >= v12)
                goto LABEL_13;
              goto LABEL_19;
            }
          }
LABEL_16:
          v9 = (uint64_t *)*v9;
          v13 = v14;
          if (!*v14)
            goto LABEL_27;
        }
        else
        {
LABEL_19:
          v9 = (uint64_t *)v9[1];
          if (!v9)
          {
            v13 = v14 + 1;
            goto LABEL_27;
          }
        }
      }
    }
    v13 = &qword_1EF5681F0;
    v14 = &qword_1EF5681F0;
LABEL_27:
    *(_QWORD *)(v2 + 32) = v10;
    *(_QWORD *)(v2 + 40) = v8[1];
    *(_QWORD *)(v2 + 48) = v8[2];
    *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)v37 + 40 * v5);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = v14;
    *v13 = v2;
    if (*(_QWORD *)qword_1EF5681E8)
    {
      qword_1EF5681E8 = *(_QWORD *)qword_1EF5681E8;
      v2 = *v13;
    }
    sub_1BE61F5C0((uint64_t *)qword_1EF5681F0, (uint64_t *)v2);
    ++qword_1EF5681F8;
    if (!v7)
      break;
    v3 = (_QWORD *)v7[2];
    if (v3)
    {
      v18 = (_QWORD *)*v3;
      if ((_QWORD *)*v3 == v7)
      {
        *v3 = 0;
        while (1)
        {
          v19 = (_QWORD *)v3[1];
          if (!v19)
            break;
          do
          {
            v3 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
      }
      else
      {
        for (v3[1] = 0; v18; v18 = (_QWORD *)v3[1])
        {
          do
          {
            v3 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
      }
      v2 = (uint64_t)v7;
      v7 = v3;
    }
    else
    {
      v2 = (uint64_t)v7;
      v7 = 0;
    }
LABEL_13:
    if (++v5 == 44)
      goto LABEL_42;
  }
  v2 = 0;
  v6 = v5 + 1;
LABEL_42:
  sub_1BE671438((_QWORD *)v2);
  if (v3)
  {
    for (i = (_QWORD *)v3[2]; i; i = (_QWORD *)i[2])
      v3 = i;
    sub_1BE671438(v3);
  }
  if (v6 == 44)
    return;
  v0 = qword_1EF5681F0;
LABEL_50:
  while (2)
  {
    v21 = (uint64_t *)&v35 + 5 * v6;
    if (!v0)
    {
      v26 = &qword_1EF5681F0;
      v27 = &qword_1EF5681F0;
      goto LABEL_62;
    }
    v22 = *v21;
    v23 = v21[1];
    v24 = (uint64_t *)v0;
    v25 = v21[2];
    while (2)
    {
      while (1)
      {
        v27 = v24;
        v28 = v24[4];
        if (v22 >= v28)
        {
          if (v28 < v22)
            goto LABEL_59;
          v29 = v27[5];
          if (v23 >= v29)
          {
            if (v29 < v23)
              goto LABEL_59;
            v30 = v27[6];
            if (v25 >= v30)
              break;
          }
        }
        v24 = (uint64_t *)*v27;
        v26 = v27;
        if (!*v27)
          goto LABEL_62;
      }
      if (v30 >= v25)
        goto LABEL_66;
LABEL_59:
      v24 = (uint64_t *)v27[1];
      if (v24)
        continue;
      break;
    }
    v26 = v27 + 1;
LABEL_62:
    v31 = operator new(0x48uLL);
    v32 = *((_OWORD *)v21 + 1);
    v31[2] = *(_OWORD *)v21;
    v31[3] = v32;
    *((_QWORD *)v31 + 8) = v21[4];
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = v27;
    *v26 = (uint64_t)v31;
    if (*(_QWORD *)qword_1EF5681E8)
    {
      qword_1EF5681E8 = *(_QWORD *)qword_1EF5681E8;
      v33 = (uint64_t *)*v26;
    }
    else
    {
      v33 = (uint64_t *)v31;
    }
    sub_1BE61F5C0((uint64_t *)qword_1EF5681F0, v33);
    v0 = qword_1EF5681F0;
    ++qword_1EF5681F8;
LABEL_66:
    if (++v6 != 44)
      continue;
    break;
  }
}

void sub_1BE742470(_QWORD *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v8 = a1[4];
  if (v8)
  {
    v16 = v3;
    objc_msgSend_stringByTrimmingCharactersInSet_(v3, v4, v8, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_length(v9, v10, v11, v12, v13, v14);

    v3 = v16;
    if (!v15)
      ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  }

}

void sub_1BE742508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE742520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE742938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 168), 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);

  _Unwind_Resume(a1);
}

double sub_1BE742A90(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  double v12;
  double v13;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a2;
  v9 = v3;
  if (a1)
  {
    v20 = 0;
    v21 = (double *)&v20;
    v22 = 0x2020000000;
    v23 = 0;
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v10 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1BE742BC0;
    v15[3] = &unk_1E77F4838;
    v15[4] = &v20;
    v15[5] = &v16;
    objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(a1, v11, (uint64_t)v9, 0, v10, (uint64_t)v15);
    v12 = v21[3] / (double)v17[3];
    v21[3] = v12;
    if (v12 <= 1.0)
      v13 = v12;
    else
      v13 = 1.0;
    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v20, 8);
  }
  else
  {
    v13 = 0.0;
  }

  return v13;
}

void sub_1BE742B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1BE742BC0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  id v9;

  v9 = a2;
  objc_msgSend_recognitionScore(v9, v3, v4, v5, v6, v7);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8
                                                              + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

}

void sub_1BE742C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE742C30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int hasPrefix;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  double v101;
  double v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  void *v110;
  id v111;
  id v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  _QWORD v143[4];
  id v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = v3;
  v6 = v4;
  v142 = v6;
  objc_opt_self();
  v12 = atomic_load((unsigned __int8 *)&qword_1EF568178);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1EF568178))
  {
    qword_1EF5681F8 = 0;
    qword_1EF5681F0 = 0;
    qword_1EF5681E8 = (uint64_t)&qword_1EF5681F0;
    __cxa_atexit((void (*)(void *))sub_1BE741BA0, &qword_1EF5681E8, &dword_1BE607000);
    __cxa_guard_release(&qword_1EF568178);
  }
  if (qword_1EF568180 != -1)
    dispatch_once(&qword_1EF568180, &unk_1E77F47E8);
  objc_msgSend_languageCode(v6, v7, v8, v9, v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v13, v14, (uint64_t)CFSTR("zh"), v15, v16, v17))
  {

LABEL_7:
    v39 = ~(objc_msgSend_properties(v5, v23, v24, v25, v26, v27) >> 1) & 2;
    v40 = 10;
    v41 = 1;
    goto LABEL_14;
  }
  objc_msgSend_languageCode(v6, v18, v19, v20, v21, v22);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  hasPrefix = objc_msgSend_hasPrefix_(v28, v29, (uint64_t)CFSTR("yue"), v30, v31, v32);

  if (hasPrefix)
    goto LABEL_7;
  if ((objc_msgSend_properties(v5, v23, v24, v25, v26, v27) & 4) != 0)
  {
    v39 = 0;
    v41 = 0;
  }
  else
  {
    v41 = 0;
    if ((objc_msgSend_properties(v5, v34, v35, v36, v37, v38) & 8) != 0)
      v39 = 1;
    else
      v39 = 2;
  }
  v40 = 8;
LABEL_14:
  objc_msgSend_strokeIndexes(v5, v34, v35, v36, v37, v38);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend_count(v42, v43, v44, v45, v46, v47);
  v59 = objc_msgSend_substrokeCount(v5, v49, v50, v51, v52, v53);
  if (v48 > v59)
  {
    objc_msgSend_strokeIndexes(v5, v54, v55, v56, v57, v58);
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v141, v60, v61, v62, v63, v64) < (unint64_t)v40)
      goto LABEL_16;
LABEL_20:
    if (v48 > v59)
      goto LABEL_21;
    goto LABEL_24;
  }
  if (objc_msgSend_substrokeCount(v5, v54, v55, v56, v57, v58) >= (unint64_t)v40)
    goto LABEL_20;
LABEL_16:
  objc_msgSend_strokeIndexes(v5, v65, v66, v67, v68, v69);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = objc_msgSend_count(v70, v71, v72, v73, v74, v75);
  if (v76 <= objc_msgSend_substrokeCount(v5, v77, v78, v79, v80, v81))
  {
    v40 = objc_msgSend_substrokeCount(v5, v82, v83, v84, v85, v86);

    if (v48 > v59)
      goto LABEL_21;
    goto LABEL_24;
  }
  objc_msgSend_strokeIndexes(v5, v82, v83, v84, v85, v86);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend_count(v87, v88, v89, v90, v91, v92);

  if (v48 <= v59)
  {
LABEL_24:

    v93 = qword_1EF5681F0;
    if (!qword_1EF5681F0)
      goto LABEL_25;
    while (1)
    {
LABEL_27:
      v95 = (uint64_t *)v93;
      v96 = *(_QWORD *)(v93 + 32);
      if (v41 < v96)
        goto LABEL_26;
      if (v96 < v41)
        goto LABEL_33;
      v97 = v95[5];
      if (v40 < v97)
        goto LABEL_26;
      if (v97 < v40)
        goto LABEL_33;
      v98 = v95[6];
      if (v39 < v98)
      {
LABEL_26:
        v93 = *v95;
        v94 = v95;
        if (!*v95)
          goto LABEL_35;
      }
      else
      {
        if (v98 >= v39)
        {
          v99 = v95;
          goto LABEL_38;
        }
LABEL_33:
        v93 = v95[1];
        if (!v93)
        {
          v94 = v95 + 1;
          goto LABEL_35;
        }
      }
    }
  }
LABEL_21:

  v93 = qword_1EF5681F0;
  if (qword_1EF5681F0)
    goto LABEL_27;
LABEL_25:
  v94 = &qword_1EF5681F0;
  v95 = &qword_1EF5681F0;
LABEL_35:
  v99 = operator new(0x48uLL);
  v99[4] = v41;
  v99[5] = v40;
  v99[7] = 0;
  v99[8] = 0;
  v99[6] = v39;
  *v99 = 0;
  v99[1] = 0;
  v99[2] = v95;
  *v94 = (uint64_t)v99;
  v100 = v99;
  if (*(_QWORD *)qword_1EF5681E8)
  {
    qword_1EF5681E8 = *(_QWORD *)qword_1EF5681E8;
    v100 = (uint64_t *)*v94;
  }
  sub_1BE61F5C0((uint64_t *)qword_1EF5681F0, v100);
  ++qword_1EF5681F8;
LABEL_38:
  v101 = *((double *)v99 + 7);
  v102 = *((double *)v99 + 8);

  objc_msgSend_combinedScore(v5, v103, v104, v105, v106, v107);
  v109 = v108;
  v110 = *(void **)(a1 + 40);
  v111 = v5;
  v112 = v110;
  objc_opt_self();
  v151 = 0;
  v152 = &v151;
  v153 = 0x2020000000;
  v154 = 0;
  v147 = 0;
  v148 = &v147;
  v149 = 0x2020000000;
  v150 = 0;
  objc_msgSend_string(v111, v113, v114, v115, v116, v117);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(v111, v119, v120, v121, v122, v123);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v130 = objc_msgSend_length(v124, v125, v126, v127, v128, v129);
  v143[0] = MEMORY[0x1E0C809B0];
  v143[1] = 3221225472;
  v143[2] = sub_1BE742470;
  v143[3] = &unk_1E77F4810;
  v145 = &v151;
  v131 = v112;
  v144 = v131;
  v146 = &v147;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v118, v132, 0, v130, 2, (uint64_t)v143);

  v133 = v148[3];
  v134 = v152[3];

  _Block_object_dispose(&v147, 8);
  _Block_object_dispose(&v151, 8);

  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                          + 24)
                                                              - ((v109 - v101) / v102
                                                               + (double)v134 * -0.2);
  if (*(_BYTE *)(a1 + 96))
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (double)v133 * 0.2
                                                                + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                            + 24);
    v140 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (v133 < 1)
    {
      *(_BYTE *)(v140 + 24) = 0;
    }
    else
    {
      if (!*(_BYTE *)(v140 + 24))
      {
        ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
        v140 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      }
      *(_BYTE *)(v140 + 24) = 1;
    }
  }
  if ((objc_msgSend_properties(v111, v135, v136, v137, v138, v139) & 4) == 0)
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);

}

void sub_1BE74319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;

  if (v12 > v13)
  _Unwind_Resume(a1);
}

void sub_1BE7432C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568188;
  qword_1EF568188 = v6;

  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v8, v9, v10, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)qword_1EF568190;
  qword_1EF568190 = v13;

  objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E0CB3500], v15, v16, v17, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)qword_1EF568198;
  qword_1EF568198 = v20;

  objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v22, v23, v24, v25, v26);
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = (void *)qword_1EF5681A0;
  qword_1EF5681A0 = v27;

}

void sub_1BE7434C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE74350C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE74351C(uint64_t a1)
{

}

void sub_1BE743524(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;

  v50 = a2;
  objc_msgSend_tokenColumns(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v12, v13, *a4, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textTokenRows(v17, v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v23, v24, a4[1], v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v28, v29, v30, v31, v32, v33) - 1 == a3)
  {
    objc_msgSend_removeAllIndexes(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v34, v35, v36, v37, v38);
    v39 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    objc_msgSend_strokeIndexes(v50, v40, v41, v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIndexes_(v39, v46, (uint64_t)v45, v47, v48, v49);

  }
}

void sub_1BE743608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE743624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE74364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE743664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE743678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE743704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE743CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40)
{
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

void sub_1BE743E28(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;

  v27 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend_formUnionWithCharacterSet_(v27, v2, *(_QWORD *)(a1 + 32), v3, v4, v5);
  objc_msgSend_formUnionWithCharacterSet_(v27, v6, *(_QWORD *)(a1 + 40), v7, v8, v9);
  objc_msgSend_ch_mathCharSet(MEMORY[0x1E0CB3500], v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v27, v16, (uint64_t)v15, v17, v18, v19);

  v25 = objc_msgSend_copy(v27, v20, v21, v22, v23, v24);
  v26 = (void *)qword_1EF5681B0;
  qword_1EF5681B0 = v25;

}

void sub_1BE743EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE743EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE744658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1BE74466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE744688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);

  _Block_object_dispose((const void *)(v54 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1BE7449B8(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;

  v6 = a2;
  if (a4[2])
    v12 = 0;
  else
    v12 = *a4 == 0;
  v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v14 = (void *)MEMORY[0x1E0CB37E8];
  v35 = v6;
  objc_msgSend_combinedScore(v6, v7, v8, v9, v10, v11);
  *(float *)&v15 = v15;
  objc_msgSend_numberWithFloat_(v14, v16, v17, v18, v19, v20, v15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v13, v22, (uint64_t)v21, v23, v24, v25);

  objc_msgSend_precedingSeparatorForToken_(*(void **)(a1 + 32), v26, (uint64_t)v35, v27, v28, v29);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v34);
  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v30, (uint64_t)v34, v31, v32, v33);

}

void sub_1BE744A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE744AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE744ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE744AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE744AF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;

  v10 = a2;
  v11 = *(void **)(a1 + 32);
  v12 = (void *)MEMORY[0x1E0CB37E8];
  v132 = v10;
  v18 = objc_msgSend_wordID(v10, v13, v14, v15, v16, v17);
  objc_msgSend_numberWithUnsignedInt_(v12, v19, v18, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v11, v24, (uint64_t)v23, v25, v26, v27);

  v28 = *(void **)(a1 + 40);
  objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v29, a5, a6, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v28, v33, (uint64_t)v32, v34, v35, v36);

  v37 = *(void **)(a1 + 48);
  v38 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_recognitionScore(v132, v39, v40, v41, v42, v43);
  *(float *)&v44 = v44;
  objc_msgSend_numberWithFloat_(v38, v45, v46, v47, v48, v49, v44);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v37, v51, (uint64_t)v50, v52, v53, v54);

  v55 = *(void **)(a1 + 56);
  v56 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_combinedScore(v132, v57, v58, v59, v60, v61);
  *(float *)&v62 = v62;
  objc_msgSend_numberWithFloat_(v56, v63, v64, v65, v66, v67, v62);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v55, v69, (uint64_t)v68, v70, v71, v72);

  v73 = *(void **)(a1 + 64);
  objc_msgSend_strokeIndexes(v132, v74, v75, v76, v77, v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v73, v80, (uint64_t)v79, v81, v82, v83);

  v84 = *(void **)(a1 + 72);
  v85 = (void *)MEMORY[0x1E0CB37E8];
  v91 = objc_msgSend_properties(v132, v86, v87, v88, v89, v90);
  objc_msgSend_numberWithBool_(v85, v92, (v91 >> 2) & 1, v93, v94, v95);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v84, v97, (uint64_t)v96, v98, v99, v100);

  v101 = *(void **)(a1 + 80);
  v102 = (void *)MEMORY[0x1E0CB37E8];
  v108 = objc_msgSend_properties(v132, v103, v104, v105, v106, v107);
  objc_msgSend_numberWithBool_(v102, v109, (v108 >> 3) & 1, v110, v111, v112);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v101, v114, (uint64_t)v113, v115, v116, v117);

  if ((objc_msgSend_properties(v132, v118, v119, v120, v121, v122) & 2) != 0)
    objc_msgSend_addIndex_(*(void **)(a1 + 88), v123, a3, v125, v126, v127);
  if ((objc_msgSend_properties(v132, v123, v124, v125, v126, v127) & 0x10) != 0)
    objc_msgSend_addIndex_(*(void **)(a1 + 96), v128, a3, v129, v130, v131);

}

void sub_1BE744CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE744D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE744D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE744DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE744DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE745150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE745340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE745370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE745384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE745400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7454D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE745604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7458D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE745CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1BE745D84(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OriginalToken;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v129;
  id obj;
  double v131;
  double v132;
  double v133;
  double v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  _OWORD v138[8];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v129 = a2;
  objc_opt_self();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4, v5, v6);
  v136 = (id)objc_claimAutoreleasedReturnValue();
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  obj = v129;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v139, (uint64_t)v143, 16, v8);
  if (v9)
  {
    v135 = *(_QWORD *)v140;
    do
    {
      v137 = v9;
      for (i = 0; i != v137; ++i)
      {
        if (*(_QWORD *)v140 != v135)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * i);
        if ((objc_msgSend_isTopOriginal(v16, v10, v11, v12, v13, v14) & 1) != 0)
        {
          objc_msgSend_addObject_(v136, v17, (uint64_t)v16, v19, v20, v21);
        }
        else
        {
          v22 = objc_msgSend_inputSources(v16, v17, v18, v19, v20, v21);
          OriginalToken = objc_msgSend_makeOriginalToken_(CHTokenizedTextResultToken, v23, v22, v24, v25, v26);
          objc_msgSend_string(v16, v28, v29, v30, v31, v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIndexes(v16, v34, v35, v36, v37, v38);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend_wordID(v16, v40, v41, v42, v43, v44);
          objc_msgSend_modelScore(v16, v46, v47, v48, v49, v50);
          v52 = v51;
          objc_msgSend_recognitionScore(v16, v53, v54, v55, v56, v57);
          v59 = v58;
          objc_msgSend_combinedScore(v16, v60, v61, v62, v63, v64);
          v66 = v65;
          objc_msgSend_alignmentScore(v16, v67, v68, v69, v70, v71);
          v73 = v72;
          v79 = objc_msgSend_properties(v16, v74, v75, v76, v77, v78);
          objc_msgSend_recognizerSourceLocale(v16, v80, v81, v82, v83, v84);
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          v131 = v73;
          v132 = v66;
          v133 = v59;
          v134 = v52;
          v91 = objc_msgSend_substrokeCount(v16, v86, v87, v88, v89, v90);
          objc_msgSend_bounds(v16, v92, v93, v94, v95, v96);
          v98 = v97;
          v100 = v99;
          v102 = v101;
          v104 = v103;
          objc_msgSend_originalBounds(v16, v105, v106, v107, v108, v109);
          v116 = v115;
          v118 = v117;
          v120 = v119;
          v122 = v121;
          if (v16)
            objc_msgSend_principalLines(v16, v110, v111, v112, v113, v114);
          else
            memset(v138, 0, sizeof(v138));
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v110, (uint64_t)v33, (uint64_t)v39, v45, v79, v85, OriginalToken, v134, v133, v132, v131, v98, v100, v102, v104, v91, v116, v118,
            v120,
            v122,
            v138);
          v123 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_addObject_(v136, v124, (uint64_t)v123, v125, v126, v127);
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v139, (uint64_t)v143, 16, v14);
    }
    while (v9);
  }

  return v136;
}

void sub_1BE746074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1BE7467E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE746B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE746B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE746B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE746B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE746B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE746BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE747614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a68;
  char a69;
  void *v69;
  void *v71;

  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);

  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);

  _Block_object_dispose(&STACK[0x220], 8);
  v71 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v71;
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE747960(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE747984(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE74799C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  CHTokenizedTextResultToken *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  unint64_t i;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  void *v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  double v317;
  double v318;
  double v319;
  double v320;
  unsigned int v321;
  void *v322;
  void *v323;
  _OWORD v324[9];

  v6 = a2;
  if ((objc_msgSend_properties(v6, v7, v8, v9, v10, v11) & 0x20) != 0)
  {
    objc_msgSend_string(v6, v12, v13, v14, v15, v16);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_length(v30, v31, v32, v33, v34, v35) + 1;

    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) + 1;
  }
  else
  {
    objc_msgSend_string(v6, v12, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_length(v17, v18, v19, v20, v21, v22);

    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  }
  if (objc_msgSend_length(*(void **)(a1 + 32), v24, v25, v26, v27, v28) + v29 == *(_QWORD *)(a1 + 112))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = *a4;
  if (*(_BYTE *)(a1 + 120) && v29 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    v41 = objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v36, v37, v38, v39, v40);
    objc_msgSend_string(v6, v42, v43, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    if (v41 >= objc_msgSend_length(v47, v48, v49, v50, v51, v52))
    {
      objc_msgSend_string(v6, v53, v54, v55, v56, v57);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = objc_msgSend_length(v59, v60, v61, v62, v63, v64);

    }
    else
    {
      v58 = objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v53, v54, v55, v56, v57);
    }

    objc_msgSend_substringToIndex_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v65, v58, v66, v67, v68);
    v69 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v6, v70, v71, v72, v73, v74);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringFromIndex_(v75, v76, v58, v77, v78, v79);
    v80 = objc_claimAutoreleasedReturnValue();

    v322 = (void *)v80;
    objc_msgSend_stringByAppendingString_((void *)v69, v81, v80, v82, v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_string(v6, v86, v87, v88, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v323 = v85;
    LOBYTE(v69) = objc_msgSend_isEqualToString_(v85, v92, (uint64_t)v91, v93, v94, v95);

    if ((v69 & 1) == 0)
    {
      v101 = [CHTokenizedTextResultToken alloc];
      objc_msgSend_strokeIndexes(v6, v102, v103, v104, v105, v106);
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      v321 = objc_msgSend_wordID(v6, v108, v109, v110, v111, v112);
      objc_msgSend_modelScore(v6, v113, v114, v115, v116, v117);
      v320 = v118;
      objc_msgSend_recognitionScore(v6, v119, v120, v121, v122, v123);
      v319 = v124;
      objc_msgSend_combinedScore(v6, v125, v126, v127, v128, v129);
      v318 = v130;
      objc_msgSend_alignmentScore(v6, v131, v132, v133, v134, v135);
      v317 = v136;
      v142 = objc_msgSend_properties(v6, v137, v138, v139, v140, v141);
      objc_msgSend_recognizerSourceLocale(v6, v143, v144, v145, v146, v147);
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      v154 = objc_msgSend_inputSources(v6, v149, v150, v151, v152, v153);
      v160 = objc_msgSend_substrokeCount(v6, v155, v156, v157, v158, v159);
      objc_msgSend_bounds(v6, v161, v162, v163, v164, v165);
      v167 = v166;
      v169 = v168;
      v171 = v170;
      v173 = v172;
      objc_msgSend_originalBounds(v6, v174, v175, v176, v177, v178);
      v185 = v184;
      v187 = v186;
      v189 = v188;
      v191 = v190;
      if (v6)
        objc_msgSend_principalLines(v6, v179, v180, v181, v182, v183);
      else
        memset(v324, 0, 128);
      v192 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v101, v179, (uint64_t)v323, (uint64_t)v107, v321, v142, v148, v154 | 0x100, v320, v319, v318, v317, v167, v169, v171, v173, v160, v185, v187,
                       v189,
                       v191,
                       v324);

      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v193, *a4, v194, v195, v196);
      v197 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_textTokenRows(v197, v198, v199, v200, v201, v202);
      v203 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v203, v204, a4[1], v205, v206, v207);
      v208 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_array(MEMORY[0x1E0C99DE8], v209, v210, v211, v212, v213);
      v219 = (void *)objc_claimAutoreleasedReturnValue();
      for (i = 0; i < objc_msgSend_count(v208, v214, v215, v216, v217, v218); ++i)
      {
        if (i == a4[2])
        {
          objc_msgSend_addObject_(v219, v221, (uint64_t)v192, v222, v223, v224);
        }
        else
        {
          objc_msgSend_objectAtIndex_(v208, v221, i, v222, v223, v224);
          v225 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v219, v226, (uint64_t)v225, v227, v228, v229);

        }
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v221, *a4, v222, v223, v224);
      v230 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTokenRowWithTokens_atIndex_(v230, v231, (uint64_t)v219, a4[1], v232, v233);

      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v234, *a4, v235, v236, v237);
      v238 = (void *)objc_claimAutoreleasedReturnValue();
      v243 = objc_msgSend_addTokenRowWithTokens_(v238, v239, (uint64_t)v208, v240, v241, v242);

      v244 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 48);
      if (*(_QWORD *)(v244 + 8 * *a4) == a4[1])
        *(_QWORD *)(v244 + 8 * *a4) = v243;

    }
    objc_msgSend_string(v6, v96, v97, v98, v99, v100);
    v245 = (void *)objc_claimAutoreleasedReturnValue();
    v251 = objc_msgSend_length(v245, v246, v247, v248, v249, v250);

    if (objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v252, v253, v254, v255, v256) <= v251)
    {
      v288 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
      if (v288 != objc_msgSend_count(*(void **)(a1 + 48), v257, v258, v259, v260, v261) - 1)
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v289, ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), v290, v291, v292);
        v295 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = objc_msgSend_integerValue(v295, v296, v297, v298, v299, v300);

        v301 = *(void **)(a1 + 56);
        objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v302, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v303, v304, v305);
        v306 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKey_(v301, v307, (uint64_t)v306, v308, v309, v310);
        v311 = objc_claimAutoreleasedReturnValue();
        v312 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v313 = *(void **)(v312 + 40);
        *(_QWORD *)(v312 + 40) = v311;

LABEL_36:
        goto LABEL_37;
      }
      v293 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v294 = -1;
LABEL_35:
      *(_QWORD *)(v293 + 24) = v294;
      goto LABEL_36;
    }
    v262 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    objc_msgSend_string(v6, v257, v258, v259, v260, v261);
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    v269 = objc_msgSend_length(v263, v264, v265, v266, v267, v268);
    objc_msgSend_substringWithRange_(v262, v270, v269, 1, v271, v272);
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v273, v274, (uint64_t)CFSTR(" "), v275, v276, v277))
    {
      v283 = objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v278, v279, v280, v281, v282);

      if (v283 > v251 + 1)
      {
        objc_msgSend_substringFromIndex_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v284, ++v251, v285, v286, v287);
LABEL_34:
        v314 = objc_claimAutoreleasedReturnValue();
        v315 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v316 = *(void **)(v315 + 40);
        *(_QWORD *)(v315 + 40) = v314;

        v293 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v294 = *(_QWORD *)(v293 + 24) + v251;
        goto LABEL_35;
      }
    }
    else
    {

    }
    objc_msgSend_substringFromIndex_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v284, v251, v285, v286, v287);
    goto LABEL_34;
  }
LABEL_37:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += v23;

}

void sub_1BE747FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7481A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE7484D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  va_list va;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v17 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7485C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7485D8(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v35 = a2;
  if ((objc_msgSend_properties(v35, v6, v7, v8, v9, v10) & 0x20) != 0)
  {
    objc_msgSend_string(v35, v11, v12, v13, v14, v15);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_length(v29, v30, v31, v32, v33, v34) + 1;

    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 1;
  }
  else
  {
    objc_msgSend_string(v35, v11, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_length(v16, v17, v18, v19, v20, v21);

    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  if (objc_msgSend_length(*(void **)(a1 + 32), v23, v24, v25, v26, v27) + v28 == *(_QWORD *)(a1 + 56))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v22;

}

void sub_1BE7486B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7486E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7486F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE748708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE748EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  void *v42;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7491D4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isEqualToIndexSet;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v9, v10, *(_QWORD *)(a1 + 32), v11, v12, v13);

  if ((isEqualToIndexSet & 1) == 0)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v15 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_description(v3, v16, v17, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *(_QWORD *)(a1 + 32);
      objc_msgSend_strokeIndexes(v3, v23, v24, v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138412802;
      v31 = v21;
      v32 = 2112;
      v33 = v22;
      v34 = 2112;
      v35 = v28;
      _os_log_impl(&dword_1BE607000, v15, OS_LOG_TYPE_ERROR, "Unexpected mismatched stroke indexes in result %@. Top result stroke index set contains %@. This alternative result stroke index set contains %@.", (uint8_t *)&v30, 0x20u);

    }
  }

  return isEqualToIndexSet;
}

void sub_1BE749320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE749338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE74934C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE749360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE74A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1BE74A72C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id obj;

  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  obj = (id)objc_msgSend_mutableCopy(v6, v7, v8, v9, v10, v11);

  objc_msgSend_ch_englishCharacterSet(MEMORY[0x1E0CB3500], v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(obj, v18, (uint64_t)v17, v19, v20, v21);

  objc_storeStrong((id *)&qword_1EF5681C0, obj);
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v22, v23, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = (void *)objc_msgSend_mutableCopy(v27, v28, v29, v30, v31, v32);

  objc_msgSend_ch_latinCharacterSet(MEMORY[0x1E0CB3500], v34, v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v33, v40, (uint64_t)v39, v41, v42, v43);

  v44 = (void *)qword_1EF5681C8;
  qword_1EF5681C8 = (uint64_t)v33;

}

void sub_1BE74A7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE74A814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE74A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE74A848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74A85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE74A874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74A888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE74A8A0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) &= objc_msgSend_properties(v8, v3, v4, v5, v6, v7) >> 2;

}

void sub_1BE74A8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74A8FC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) &= (unsigned __int16)objc_msgSend_properties(v8, v3, v4, v5, v6, v7) >> 8;

}

void sub_1BE74A944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE74B2F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE74B304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE74B318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE74B328(_NSRange *a1, NSIndexPath *a2)
{
  trimIndexPath(a2, a1[2]);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE74BB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);

  _Unwind_Resume(a1);
}

void sub_1BE74CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  void *v49;
  void *v50;

  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

void sub_1BE74D4BC(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;

  v6 = a2;
  v66 = v6;
  if (*a4 == *(_QWORD *)(a1 + 56) && !a4[2])
  {
    v28 = objc_msgSend_properties(v6, v7, v8, v9, v10, v11);
    v39 = objc_msgSend_inputSources(v66, v29, v30, v31, v32, v33) & 0xFFFFFFFFFFFFFFFBLL;
    if (*(_BYTE *)(a1 + 72) && (objc_msgSend_properties(v66, v34, v35, v36, v37, v38) & 0x20) == 0)
    {
      v39 |= 0x200uLL;
      v28 |= 0x20uLL;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    objc_msgSend_string(v66, v34, v35, v36, v37, v38);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstComposedCharacter(v41, v42, v43, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend_shouldRemoveSpaceBetweenPreviousChar_andNextChar_inLocale_(CHRecognizerConfiguration, v48, v40, (uint64_t)v47, *(_QWORD *)(a1 + 32), v49);

    if (v50)
      v56 = v39 | 0x200;
    else
      v56 = v39;
    v57 = (void *)objc_msgSend_mutableCopy(v66, v51, v52, v53, v54, v55);
    v17 = v57;
    if (v50)
      objc_msgSend_setProperties_(v57, v58, v28 & 0xFFFFFFFFFFFFFFDFLL, v59, v60, v61);
    else
      objc_msgSend_setProperties_(v57, v58, v28, v59, v60, v61);
    objc_msgSend_setInputSources_(v17, v62, v56, v63, v64, v65);
    goto LABEL_15;
  }
  v17 = v6;
  if (objc_msgSend_isTopOriginal(v6, v7, v8, v9, v10, v11))
  {
    v18 = objc_msgSend_inputSources(v66, v12, v13, v14, v15, v16);
    v17 = (void *)objc_msgSend_mutableCopy(v66, v19, v20, v21, v22, v23);
    objc_msgSend_setInputSources_(v17, v24, v18 & 0xFFFFFFFFFFFFFFFBLL, v25, v26, v27);
LABEL_15:

  }
  objc_msgSend_addObject_(*(void **)(a1 + 40), v12, (uint64_t)v17, v14, v15, v16);

}

void sub_1BE74D62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74D68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE74D6A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3780], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5681D8;
  qword_1EF5681D8 = v6;

  v8 = (void *)qword_1EF5681D8;
  objc_msgSend_ch_basicAlphabeticCharacterSet(MEMORY[0x1E0CB3500], v9, v10, v11, v12, v13);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v8, v14, (uint64_t)v18, v15, v16, v17);

}

void sub_1BE74D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE74D720(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE74DA24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE74DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE74DFD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE74DFDC(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  _QWORD v83[4];
  id v84;
  uint64_t v85;

  v82 = a2;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v82, v11, v12, v13, v14, v15, v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v83[0] = MEMORY[0x1E0C809B0];
  v83[1] = 3221225472;
  v83[2] = sub_1BE74E278;
  v83[3] = &unk_1E77F44A0;
  v85 = *(_QWORD *)(a1 + 48);
  v17 = v10;
  v84 = v17;
  objc_msgSend_enumerateIndexesUsingBlock_(v16, v18, (uint64_t)v83, v19, v20, v21);

  v27 = (void *)objc_msgSend_mutableCopy(v82, v22, v23, v24, v25, v26);
  objc_msgSend_setStrokeIndexes_(v27, v28, (uint64_t)v17, v29, v30, v31);
  if (!a3)
  {
    objc_msgSend_lastObject(*(void **)(a1 + 32), v32, v33, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v37, v38, v39, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastComposedCharacter(v43, v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v27, v50, v51, v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstComposedCharacter(v55, v56, v57, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_locale(*(void **)(a1 + 40), v62, v63, v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_shouldRemoveSpaceBetweenPreviousChar_andNextChar_inLocale_(CHRecognizerConfiguration, v68, (uint64_t)v49, (uint64_t)v61, (uint64_t)v67, v69);

    if ((v70 & 1) == 0)
    {
      v71 = objc_msgSend_properties(v27, v32, v33, v34, v35, v36);
      objc_msgSend_setProperties_(v27, v72, v71 | 0x20, v73, v74, v75);
    }
  }
  v76 = *(void **)(a1 + 32);
  v77 = (void *)objc_msgSend_copy(v27, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v76, v78, (uint64_t)v77, v79, v80, v81);

}

void sub_1BE74E194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE74E278(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)&a2[*(_QWORD *)(a1 + 40)], a4, a5, a6);
}

void sub_1BE74E464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE74E4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74E660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE74E700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74E714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE74E728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE74F5A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(v1 - 152);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 - 144);
    v5 = *(void **)(v1 - 152);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(v1 - 144);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(v1 - 152);
    }
    *(_QWORD *)(v1 - 144) = v3;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1BE74F89C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

BOOL sub_1BE74F8A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4, a5, a6) == 0;
}

void sub_1BE74FA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE75180C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v2 - 208);
  if (v4)
  {
    *(_QWORD *)(v2 - 200) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 184);
  if (v5)
  {
    *(_QWORD *)(v2 - 176) = v5;
    operator delete(v5);
  }
  sub_1BE63CEBC((void **)(v2 - 160));
  sub_1BE63CEBC((void **)(v2 - 136));

  _Unwind_Resume(a1);
}

void sub_1BE7523CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

void sub_1BE752924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE752E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void sub_1BE752F8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v8 = (void *)MEMORY[0x1E0CB37E8];
  v9 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  objc_msgSend_numberWithUnsignedInteger_(v8, v10, v9, v11, v12, v13);
  v23 = (id)objc_claimAutoreleasedReturnValue();
  v14 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v15, (uint64_t)a2, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v14, v20, (uint64_t)v23, (uint64_t)v19, v21, v22);

}

void sub_1BE753010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE753028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE75303C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v23 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)v23, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_intValue(v12, v13, v14, v15, v16, v17);
  objc_msgSend_addIndex_(v6, v19, v18, v20, v21, v22);

}

void sub_1BE7530A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7530B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE753454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE753594(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (int)objc_msgSend_intValue(v7, v8, v9, v10, v11, v12);

  return objc_msgSend_addIndex_(*(void **)(a1 + 40), v14, v13, v15, v16, v17);
}

void sub_1BE7535E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7535F0(char ***a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  char **v6;
  char **v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char **v12;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char **v20;
  char **v21;
  char **v22;
  char **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int64_t v34;
  char *v35;
  char *v36;
  char **v37;
  uint64_t v38;
  char *v39;
  char **v40;
  char **v41;
  char **v42;
  char **v43;
  char *v44;
  char *v45;
  char *v46;
  char ***v47;
  uint64_t v48;
  char *v49;

  if (a5 >= 1)
  {
    v6 = a3;
    v8 = *a1;
    v9 = (a2 - (uint64_t)*a1) / 24;
    v10 = &(*a1)[3 * v9];
    v13 = a1[2];
    v11 = (uint64_t)(a1 + 2);
    v12 = v13;
    v14 = *(_QWORD *)(v11 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v14) >> 3)) >= a5)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v10) >> 3)) >= a5)
      {
        v19 = (uint64_t)&a3[3 * a5];
        v20 = *(char ***)(v11 - 8);
      }
      else
      {
        v19 = (uint64_t)&a3[(uint64_t)(v14 - (_QWORD)v10) >> 3];
        v20 = (char **)sub_1BE753A30(v11, v19, a4, *(_QWORD **)(v11 - 8));
        a1[1] = v20;
        if ((uint64_t)(v14 - (_QWORD)v10) < 1)
          return;
      }
      v21 = &v10[3 * a5];
      v22 = &v20[-3 * a5];
      v23 = v20;
      if ((unint64_t)v22 < v14)
      {
        v23 = v20;
        do
        {
          *v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          *(_OWORD *)v23 = *(_OWORD *)v22;
          v23[2] = v22[2];
          *v22 = 0;
          v22[1] = 0;
          v22[2] = 0;
          v23 += 3;
          v22 += 3;
        }
        while ((unint64_t)v22 < v14);
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        v24 = (void **)(v20 - 3);
        v25 = v20 - v21;
        do
        {
          v27 = *v24;
          if (*v24)
          {
            v24[1] = v27;
            operator delete(v27);
            *v24 = 0;
            v24[1] = 0;
            v24[2] = 0;
          }
          v26 = (uint64_t)&v10[v25 - 3];
          *(_OWORD *)v24 = *(_OWORD *)v26;
          v24[2] = v10[v25 - 1];
          *(_QWORD *)v26 = 0;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 16) = 0;
          v24 -= 3;
          v25 -= 3;
        }
        while (v25 * 8);
      }
      if ((char **)v19 != v6)
      {
        do
        {
          if (v6 != v10)
            sub_1BE62037C(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
          v6 += 3;
          v10 += 3;
        }
        while (v6 != (char **)v19);
      }
    }
    else
    {
      v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (_QWORD)v8) >> 3);
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F930();
      v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v8);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v47 = a1;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F100();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v48 = v9;
      v49 = &v18[24 * v17];
      v28 = 24 * a5;
      v29 = &v18[24 * v9 + 24 * a5];
      v46 = &v18[24 * v9];
      v30 = v46;
      do
      {
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = 0;
        v33 = *v6;
        v32 = v6[1];
        v34 = v32 - *v6;
        if (v32 != *v6)
        {
          if (v34 < 0)
            sub_1BE61F930();
          v35 = (char *)operator new(v32 - *v6);
          *(_QWORD *)v30 = v35;
          *((_QWORD *)v30 + 1) = v35;
          v31 = &v35[8 * (v34 >> 3)];
          *((_QWORD *)v30 + 2) = v31;
          memcpy(v35, v33, v34);
          *((_QWORD *)v30 + 1) = v31;
        }
        v30 += 24;
        v6 += 3;
        v28 -= 24;
      }
      while (v28);
      v36 = v46;
      v37 = *v47;
      if (*v47 != v10)
      {
        v38 = 3 * v48;
        do
        {
          v39 = &v18[v38 * 8];
          v40 = &v8[v38];
          *(_OWORD *)(v39 - 24) = *(_OWORD *)&v8[v38 - 3];
          *((_QWORD *)v39 - 1) = v8[v38 - 1];
          *(v40 - 3) = 0;
          *(v40 - 2) = 0;
          *(v40 - 1) = 0;
          v18 -= 24;
          v8 -= 3;
        }
        while (&v8[v38] != v37);
        v36 = &v18[24 * v48];
      }
      v41 = v47[1];
      if (v41 != v10)
      {
        do
        {
          *(_QWORD *)v29 = 0;
          *((_QWORD *)v29 + 1) = 0;
          *((_QWORD *)v29 + 2) = 0;
          *(_OWORD *)v29 = *(_OWORD *)v10;
          *((_QWORD *)v29 + 2) = v10[2];
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          v29 += 24;
          v10 += 3;
        }
        while (v10 != v41);
        v10 = v47[1];
      }
      v42 = *v47;
      *v47 = (char **)v36;
      v47[1] = (char **)v29;
      v47[2] = (char **)v49;
      if (v10 != v42)
      {
        v43 = v10;
        do
        {
          v45 = *(v43 - 3);
          v43 -= 3;
          v44 = v45;
          if (v45)
          {
            *(v10 - 2) = v44;
            operator delete(v44);
          }
          v10 = v43;
        }
        while (v43 != v42);
      }
      if (v42)
        operator delete(v42);
    }
  }
}

void sub_1BE7539E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1BE7539F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE753A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_1BE63E4E4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE753A30(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1BE61F930();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1BE753AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE753B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1BE753B30(char **a1, const void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v5];
  v13 = &v11[24 * v10];
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 2) = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_1BE61F930();
    v15 = operator new(v14);
    *(_QWORD *)v12 = v15;
    v16 = (unint64_t)v15 + 8 * (v14 >> 3);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_1BE753CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE753D20(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_1BE61F930();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_1BE753A30(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_1BE62037C(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_1BE753A30(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_1BE62037C(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_1BE753F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE753F88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1BE753F90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    return 0;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%C"), a4, a5, a6, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(&unk_1E78273F8, v7, (uint64_t)v6, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_unsignedIntegerValue(v11, v12, v13, v14, v15, v16);

  return v17;
}

void sub_1BE754028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE75403C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7541AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7541BC()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0D82600]);
  v1 = (void *)qword_1EF568200;
  qword_1EF568200 = (uint64_t)v0;

  return MEMORY[0x1E0DE7D20](qword_1EF568200, sel_spellServer_findMisspelledWordInString_language_wordCount_countOnly_correction_, 0, CFSTR("abcxyz"), CFSTR("en_US"), 0);
}

void sub_1BE75449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE7546A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE754754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE754AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE754FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE755140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE755C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE755DC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE755DD4(uint64_t a1)
{

}

void sub_1BE755DDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isEqual;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  NSObject *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint8_t buf[4];
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend_pointCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
    return;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  if (!v7)
    goto LABEL_7;
  if (qword_1EF568218 == -1)
  {
    v13 = (id)qword_1EF568210;
    if (!v8)
      goto LABEL_26;
  }
  else
  {
    dispatch_once(&qword_1EF568218, &unk_1E77F4AB0);
    v13 = (id)qword_1EF568210;
    if (!v8)
      goto LABEL_26;
  }
  objc_msgSend_objectForKey_(v8, v9, CHMathRecognitionOptionActiveAlphabetMode, v10, v11, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  isEqual = objc_msgSend_isEqual_(v14, v15, (uint64_t)CFSTR("scientific"), v16, v17, v18);

  if (isEqual)
  {

LABEL_7:
    v24 = 0;
    goto LABEL_27;
  }
  objc_msgSend_objectForKey_(v8, v20, CHMathRecognitionOptionActiveAlphabetMode, v21, v22, v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend_isEqual_(v25, v26, (uint64_t)CFSTR("custom"), v27, v28, v29);

  if (v30)
  {
    objc_msgSend_objectForKey_(v8, v31, CHMathRecognitionOptionActiveAlphabet, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v40 = v35;
      if (!v40)
        goto LABEL_16;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v41, v42, v43, v44, v45),
            v46 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend_componentsSeparatedByCharactersInSet_(v35, v47, (uint64_t)v46, v48, v49, v50),
            v40 = (id)objc_claimAutoreleasedReturnValue(),
            v46,
            !v40))
      {
LABEL_16:
        if (qword_1EF568E88 == -1)
        {
          v56 = (id)qword_1EF568E20;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
LABEL_23:
            v24 = v13;
            goto LABEL_24;
          }
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v56 = (id)qword_1EF568E20;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
            goto LABEL_23;
        }
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v56, OS_LOG_TYPE_ERROR, "Active math alphabet (CHMathRecognitionOptionActiveAlphabet) must be defined in \"custom\" alphabet mode.", buf, 2u);
        goto LABEL_23;
      }
    }
    objc_msgSend_indexesOfObjectsPassingTest_(v40, v36, (uint64_t)&unk_1E77EFE18, v37, v38, v39);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectsAtIndexes_(v40, v52, (uint64_t)v51, v53, v54, v55);
    v56 = objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_count(v56, v57, v58, v59, v60, v61))
    {
      objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E20], v62, (uint64_t)CFSTR("<BOS>"), v63, v64, v65, CFSTR("<EOS>"), CFSTR("<PAD>"), 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObjectsFromArray_(v24, v66, (uint64_t)v56, v67, v68, v69);

LABEL_24:
      goto LABEL_27;
    }
    if (qword_1EF568E88 == -1)
    {
      v70 = (id)qword_1EF568E20;
      if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
LABEL_22:

        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v70 = (id)qword_1EF568E20;
      if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v70, OS_LOG_TYPE_ERROR, "Custom math alphabet can't be empty.", buf, 2u);
    goto LABEL_22;
  }
LABEL_26:
  v24 = v13;
LABEL_27:

  v75 = *(_QWORD *)(a1 + 40);
  if (v75)
    objc_msgSend_setActiveAlphabet_(*(void **)(v75 + 56), v71, (uint64_t)v24, v72, v73, v74);
  else
    objc_msgSend_setActiveAlphabet_(0, v71, (uint64_t)v24, v72, v73, v74);

  objc_msgSend_declaredVariables(*(void **)(a1 + 40), v76, v77, v78, v79, v80);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = *(_QWORD *)(a1 + 40);
  if (v86)
    objc_msgSend_setDeclaredVariables_(*(void **)(v86 + 56), v81, (uint64_t)v85, v82, v83, v84);
  else
    objc_msgSend_setDeclaredVariables_(0, v81, (uint64_t)v85, v82, v83, v84);

  objc_msgSend_locales(*(void **)(a1 + 40), v87, v88, v89, v90, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();

  v98 = *(_QWORD **)(a1 + 40);
  if (v92)
  {
    objc_msgSend_locales(v98, v93, v94, v95, v96, v97);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = *(_QWORD *)(a1 + 40);
    if (v104)
      objc_msgSend_setRecognitionLocales_(*(void **)(v104 + 56), v99, (uint64_t)v103, v100, v101, v102);
    else
      objc_msgSend_setRecognitionLocales_(0, v99, (uint64_t)v103, v100, v101, v102);

  }
  else
  {
    if (v98)
      v98 = (_QWORD *)v98[7];
    objc_msgSend_setRecognitionLocales_(v98, v93, MEMORY[0x1E0C9AA60], v95, v96, v97);
  }
  if (qword_1EF568E88 == -1)
  {
    v105 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
LABEL_40:
      v111 = objc_msgSend_strokeCount(*(void **)(a1 + 32), v106, v107, v108, v109, v110);
      v112 = *(_QWORD **)(a1 + 40);
      if (v112)
        v112 = (_QWORD *)v112[7];
      v113 = v112;
      objc_msgSend_activeAlphabet(v113, v114, v115, v116, v117, v118);
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      v125 = objc_msgSend_count(v119, v120, v121, v122, v123, v124);
      v126 = *(_QWORD **)(a1 + 40);
      if (v126)
        v126 = (_QWORD *)v126[7];
      v127 = v126;
      objc_msgSend_declaredVariables(v127, v128, v129, v130, v131, v132);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      v139 = objc_msgSend_count(v133, v134, v135, v136, v137, v138);
      *(_DWORD *)buf = 134218496;
      v148 = v111;
      v149 = 2048;
      v150 = v125;
      v151 = 2048;
      v152 = v139;
      _os_log_impl(&dword_1BE607000, v105, OS_LOG_TYPE_DEFAULT, "Running math recognizer on a drawing with %lu strokes. Active alphabet size: %lu, Declared variables count: %lu", buf, 0x20u);

    }
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v105 = (id)qword_1EF568E20;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
      goto LABEL_40;
  }

  v140 = *(_QWORD **)(a1 + 40);
  if (v140)
    v140 = (_QWORD *)v140[7];
  v141 = v140;
  objc_msgSend_recognizeDrawing_beamSize_shouldCancel_(v141, v142, *(_QWORD *)(a1 + 32), 2, *(_QWORD *)(a1 + 56), v143);
  v144 = objc_claimAutoreleasedReturnValue();
  v145 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v146 = *(void **)(v145 + 40);
  *(_QWORD *)(v145 + 40) = v144;

}

void sub_1BE756368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE756384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7563A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7563C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7564A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7564B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7564F0(void *a1, void *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, void *a6)
{
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _BYTE *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isEqualToString;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  id v72;
  _BYTE *v73;
  id obj;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[128];
  uint64_t v80;

  v71 = a5;
  v80 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v72 = a2;
  v11 = a6;
  *a3 = 0;
  v73 = a4;
  *a4 = 0;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  obj = v10;
  v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v75, (uint64_t)v79, 16, v13);
  if (v19)
  {
    v20 = *(_QWORD *)v76;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v76 != v20)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * i);
        objc_msgSend_strokeIndexes(v23, v14, v15, v16, v17, v18, v71);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addIndexes_(v11, v25, (uint64_t)v24, v26, v27, v28);

        objc_msgSend_string(v23, v29, v30, v31, v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v34, v35, (uint64_t)CFSTR("\\hline"), v36, v37, v38);

        v22 = a3;
        if ((isEqualToString & 1) != 0)
          goto LABEL_5;
        objc_msgSend_string(v23, v14, v15, v16, v17, v18);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v40, v41, (uint64_t)CFSTR("\\begin{array}{lr}"), v42, v43, v44))
        {

          v22 = v73;
LABEL_5:
          *v22 = 1;
          continue;
        }
        objc_msgSend_string(v23, v45, v46, v47, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend_isEqualToString_(v50, v51, (uint64_t)CFSTR("\\\\"), v52, v53, v54);

        v22 = v73;
        if ((v55 & 1) != 0)
          goto LABEL_5;
      }
      v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v75, (uint64_t)v79, 16, v18);
    }
    while (v19);
  }

  v56 = (void *)MEMORY[0x1E0CB36B8];
  v62 = objc_msgSend_strokeCount(v72, v57, v58, v59, v60, v61);
  objc_msgSend_indexSetWithIndexesInRange_(v56, v63, 0, v62, v64, v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  *v71 = objc_msgSend_isEqualToIndexSet_(v11, v67, (uint64_t)v66, v68, v69, v70);

}

void sub_1BE756728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE7567A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  objc_msgSend_componentsSeparatedByString_(CFSTR("! &() + , - . / 0 1 2 3 4 5 6 7 8 9 : = [ \\\\ \\ \\$ \\% \\ast \\cdot \\circ \\div \\frac \\hline \\lceil \\lfloor \\pi \\prime \\rceil \\rfloor \\sqrt \\times ] ^ _ a A b B c C d D e E f F g G H h i I j J k K L l m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z { | } \\begin{array}{lr} \\end{array} ¢ £ ¥ ₩ € ₴ ₺ ₽"), a2, (uint64_t)CFSTR(" "), a4, a5, a6);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E20], v6, (uint64_t)CFSTR("<BOS>"), v7, v8, v9, CFSTR("<EOS>"), CFSTR("<PAD>"), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v10, v11, (uint64_t)v16, v12, v13, v14);
  v15 = (void *)qword_1EF568210;
  qword_1EF568210 = (uint64_t)v10;

}

void sub_1BE756830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE756848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

BOOL sub_1BE75685C(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = objc_msgSend_length(v2, v3, v4, v5, v6, v7) != 0;

    return v8;
  }
  else
  {

    return 0;
  }
}

void sub_1BE7568C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7568D8(uint64_t a1, void *a2)
{
  const char *label;
  NSObject *v4;
  void (**v5)(void);
  _QWORD block[4];
  void (**v7)(void);

  v5 = a2;
  if (!a1)
    goto LABEL_7;
  label = dispatch_queue_get_label(0);
  if (!strcmp(label, "com.apple.CoreHandwriting.mathRecognizerQueue") || (v4 = *(NSObject **)(a1 + 64)) == 0)
  {
    v5[2]();
LABEL_7:

    return;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE7569AC;
  block[3] = &unk_1E77F2400;
  v7 = v5;
  dispatch_sync(v4, block);

}

void sub_1BE756998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7569AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE756A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE756A84(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
}

void sub_1BE756B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE756B28(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v5 = *(void **)(v2 + 40);
  v4 = (id *)(v2 + 40);
  if (v5 != v3)
    objc_storeStrong(v4, v3);
}

void sub_1BE756C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE756C90(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id *v3;
  void *v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(v2 + 8);
  v3 = (id *)(v2 + 8);
  if (v1 != v4)
    objc_storeStrong(v3, v1);
}

void sub_1BE756D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE756D74(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1BE756E94(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;

  v7 = (_QWORD *)v2[19];
  if (v7)
  {
    do
    {
      v17 = (_QWORD *)*v7;
      v18 = (_QWORD *)v7[5];
      if (v18)
      {
        do
        {
          v19 = (_QWORD *)*v18;
          operator delete(v18);
          v18 = v19;
        }
        while (v19);
      }
      v20 = (void *)v7[3];
      v7[3] = 0;
      if (v20)
        operator delete(v20);
      operator delete(v7);
      v7 = v17;
    }
    while (v17);
  }
  v8 = (void *)v2[17];
  v2[17] = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)v2[13];
  if (v9)
  {
    do
    {
      v21 = (_QWORD *)*v9;
      v22 = (_QWORD *)v9[6];
      if (v22)
      {
        do
        {
          v23 = (_QWORD *)*v22;
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
      v24 = (void *)v9[4];
      v9[4] = 0;
      if (v24)
        operator delete(v24);
      operator delete(v9);
      v9 = v21;
    }
    while (v21);
  }
  v10 = *v5;
  *v5 = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)v2[8];
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *v4;
  *v4 = 0;
  if (v13)
    operator delete(v13);
  v14 = (_QWORD *)v2[3];
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *v3;
  *v3 = 0;
  if (v16)
    operator delete(v16);
  MEMORY[0x1C3B812EC](v2, 0x10A0C402E9B2A30);

  _Unwind_Resume(a1);
}

void sub_1BE756FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE756FD0(_QWORD *a1, const CHCanvasHeatmap *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  CHCanvasHeatmap *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  objc_super v25;

  v7 = a3;
  v8 = a4;
  if (a1)
  {
    v25.receiver = a1;
    v25.super_class = (Class)CHStrokeClutterFilter;
    a1 = objc_msgSendSuper2(&v25, sel_init);
    if (a1)
    {
      v9 = (CHCanvasHeatmap *)operator new();
      CHCanvasHeatmap::CHCanvasHeatmap(v9, a2);
      a1[1] = v9;
      v15 = objc_msgSend_copy(v7, v10, v11, v12, v13, v14);
      v16 = (void *)a1[2];
      a1[2] = v15;

      v22 = objc_msgSend_copy(v8, v17, v18, v19, v20, v21);
      v23 = (void *)a1[3];
      a1[3] = v22;

    }
  }

  return a1;
}

void sub_1BE7570B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1C3B812EC](v4, 0x10A0C402E9B2A30);

  _Unwind_Resume(a1);
}

void sub_1BE7570E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE757FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  sub_1BE75831C((uint64_t)&a41);
  sub_1BE65DB88((uint64_t)&a55);

  _Unwind_Resume(a1);
}

__n128 sub_1BE7581BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE7581E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE7581F8(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

uint64_t sub_1BE75831C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_1BE7584B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75880C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75881C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE758894(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;

  v2 = (_QWORD *)a1[19];
  if (v2)
  {
    do
    {
      v13 = (_QWORD *)*v2;
      v14 = (_QWORD *)v2[5];
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v16 = (void *)v2[3];
      v2[3] = 0;
      if (v16)
        operator delete(v16);
      operator delete(v2);
      v2 = v13;
    }
    while (v13);
  }
  v3 = (void *)a1[17];
  a1[17] = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)a1[13];
  if (v4)
  {
    do
    {
      v17 = (_QWORD *)*v4;
      v18 = (_QWORD *)v4[6];
      if (v18)
      {
        do
        {
          v19 = (_QWORD *)*v18;
          operator delete(v18);
          v18 = v19;
        }
        while (v19);
      }
      v20 = (void *)v4[4];
      v4[4] = 0;
      if (v20)
        operator delete(v20);
      operator delete(v4);
      v4 = v17;
    }
    while (v17);
  }
  v5 = (void *)a1[11];
  a1[11] = 0;
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)a1[8];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[6];
  a1[6] = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)a1[3];
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = (void *)a1[1];
  a1[1] = 0;
  if (v11)
    operator delete(v11);
  return a1;
}

_QWORD *sub_1BE7589BC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_1BE61F23C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BE758CC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE758CDC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1BE758F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE759174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);
  sub_1BE6F2154((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BE759194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE759554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  sub_1BE63CEBC(&a27);
  sub_1BE63CEBC(&__p);
  sub_1BE6F2154(v31 - 144);
  _Unwind_Resume(a1);
}

void sub_1BE75970C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7598C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7598D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE75A064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1BE75A248(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE75A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__n128 sub_1BE75A2A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE75A2CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

__n128 sub_1BE75A348(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE75A36C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE75A384(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *__p;
  char *v45;
  void *v46;
  char *v47;
  char *v48;

  v7 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_indexOfObject_(v7, v9, (uint64_t)v8, v10, v11, v12);

  objc_msgSend_objectAtIndex_(*(void **)(*(_QWORD *)(a1 + 40) + 184), v14, v13, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(*(void **)(a1 + 48), v19, (uint64_t)v18, v20, v21, v22);
  objc_msgSend_strokePoints(*(void **)(a1 + 40), v23, v24, v25, v26, v27);
  v28 = &__p[24 * v13];
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v30 = *(_BYTE **)v28;
  v29 = (_BYTE *)*((_QWORD *)v28 + 1);
  v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0)
      sub_1BE61F930();
    v46 = operator new(v29 - v30);
    v48 = (char *)v46 + 16 * (v31 >> 4);
    memcpy(v46, v30, v31);
    v47 = v48;
  }
  v32 = v45;
  v33 = __p;
  if (v45 != __p)
  {
    v34 = v45;
    do
    {
      v36 = (void *)*((_QWORD *)v34 - 3);
      v34 -= 24;
      v35 = v36;
      if (v36)
      {
        *((_QWORD *)v32 - 2) = v35;
        operator delete(v35);
      }
      v32 = v34;
    }
    while (v34 != __p);
    v33 = __p;
  }
  operator delete(v33);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v38 = *(_QWORD **)(v37 + 56);
  if ((unint64_t)v38 >= *(_QWORD *)(v37 + 64))
  {
    v43 = sub_1BE761A3C((char **)(v37 + 48), (uint64_t)&v46);
  }
  else
  {
    *v38 = 0;
    v38[1] = 0;
    v38[2] = 0;
    v39 = v46;
    v40 = v47 - (_BYTE *)v46;
    if (v47 != v46)
    {
      if (v40 < 0)
        sub_1BE61F930();
      v41 = (char *)operator new(v47 - (_BYTE *)v46);
      *v38 = v41;
      v38[1] = v41;
      v42 = &v41[16 * (v40 >> 4)];
      v38[2] = v42;
      memcpy(v41, v39, v40);
      v38[1] = v42;
    }
    v43 = (char *)(v38 + 3);
    *(_QWORD *)(v37 + 56) = v38 + 3;
  }
  *(_QWORD *)(v37 + 56) = v43;
  sub_1BE761C38(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 56), (char *)v46, v47, (v47 - (_BYTE *)v46) >> 4);
  if (v46)
  {
    v47 = (char *)v46;
    operator delete(v46);
  }

}

void sub_1BE75A56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1BE75ACD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  void *v45;

  sub_1BE6F2154((uint64_t)&a11);
  sub_1BE63CEBC(&a35);
  sub_1BE63CEBC(&a38);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }

  _Unwind_Resume(a1);
}

void sub_1BE75B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE75B81C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75BA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1BE6F2154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE75BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1BE6F2154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE75BDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  objc_sync_exit(v13);

  _Unwind_Resume(a1);
}

void sub_1BE75BE38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (!*(_QWORD *)v1)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_1BE75C110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_1BE75C3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;

  _Block_object_dispose(&a15, 8);
  if (!__p)
  {

    _Unwind_Resume(a1);
  }
  a22 = (uint64_t)__p;
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE75C428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE75C438(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v16;
  _BOOL8 v17;

  v3 = a2;
  objc_msgSend_bounds(v3, v4, v5, v6, v7, v8);
  if (v14 * *(double *)(*(_QWORD *)(a1 + 32) + 232) <= *(double *)(a1 + 40))
  {
    objc_msgSend_bounds(v3, v9, v10, v11, v12, v13);
    v17 = v16 * *(double *)(*(_QWORD *)(a1 + 32) + 256) > *(double *)(a1 + 48);

    return v17;
  }
  else
  {

    return 1;
  }
}

void sub_1BE75C4B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75C4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75C4D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  char **v18;
  char **v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  char **__p;
  char **v28;
  _QWORD *v29;
  _QWORD *v30;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(_QWORD *)(v8 + 56);
  objc_msgSend_strokePoints(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v10 = *(void **)(a1 + 32);
  v11 = (char *)v29[3 * (_QWORD)a2];
  objc_msgSend_strokePoints(v10, v12, v13, v14, v15, v16);
  sub_1BE761C38(v8 + 48, v9, v11, __p[3 * (_QWORD)a2 + 1], (__p[3 * (_QWORD)a2 + 1] - v11) >> 4);
  if (__p)
  {
    v17 = v28;
    v18 = __p;
    if (v28 != __p)
    {
      v19 = v28;
      do
      {
        v21 = *(v19 - 3);
        v19 -= 3;
        v20 = v21;
        if (v21)
        {
          *(v17 - 2) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != __p);
      v18 = __p;
    }
    operator delete(v18);
  }
  if (v29)
  {
    v22 = v30;
    v23 = v29;
    if (v30 != v29)
    {
      v24 = v30;
      do
      {
        v26 = (void *)*(v24 - 3);
        v24 -= 3;
        v25 = v26;
        if (v26)
        {
          *(v22 - 2) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != v29);
      v23 = v29;
    }
    operator delete(v23);
  }
}

void sub_1BE75C5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_1BE63CEBC(&a9);
  sub_1BE63CEBC(&a12);
  _Unwind_Resume(a1);
}

void sub_1BE75C614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE63CEBC((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE75CA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v18;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);

  v20 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BE75CBF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE75CEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE75CEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);
  sub_1BE6F2154((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BE75CF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE75CF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE75D174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE75D4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE75D678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75DAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE75DD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE75DD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE75DD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE75DD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE75DD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE75DDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE75DF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE75E0DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75E3F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE75E42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE6F2154((uint64_t)&a9);
  JUMPOUT(0x1BE75E460);
}

void sub_1BE75E47C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75E48C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE75F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v50;
  void *v51;
  void *v52;

  v48 = v43;
  operator delete(v48);
  operator delete(v46);
  operator delete(v45);
  operator delete(v44);
  sub_1BE6F2154(a10);
  if (a33)
  {
    operator delete(a33);
    v50 = a36;
    if (!a36)
    {
LABEL_3:
      v51 = a39;
      if (!a39)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v50 = a36;
    if (!a36)
      goto LABEL_3;
  }
  operator delete(v50);
  v51 = a39;
  if (!a39)
  {
LABEL_4:
    v52 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v51);
  v52 = __p;
  if (!__p)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v52);
  goto LABEL_6;
}

void sub_1BE75FE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7601D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1BE6F2154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE7601E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE760590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BE76078C(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE760A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BE760D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BE760F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE761078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7611D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE761270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE76136C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_1BE61F930();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[16 * (v6 >> 4)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_1BE61F930();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[16 * (v11 >> 4)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_1BE61F930();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[16 * (v16 >> 4)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v20 = *(_BYTE **)(a2 + 72);
  v19 = *(_BYTE **)(a2 + 80);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      sub_1BE61F930();
    v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    v23 = &v22[16 * (v21 >> 4)];
    a1[11] = v23;
    memcpy(v22, v20, v21);
    a1[10] = v23;
  }
  return a1;
}

void sub_1BE7614E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 56) = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
  {
LABEL_4:
    v9 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  *(_QWORD *)(v1 + 32) = v8;
  operator delete(v8);
  v9 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  *(_QWORD *)(v1 + 8) = v9;
  operator delete(v9);
  goto LABEL_6;
}

void sub_1BE76156C()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x1BE761510);
  JUMPOUT(0x1BE761508);
}

void sub_1BE76157C(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_1BE61F930();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_1BE7617F0(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_1BE6F5A88(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_1BE7617F0(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_1BE6F5A88(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_1BE7617E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE7617E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE7617F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1BE61F930();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1BE7618B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE7618CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1BE7618F0(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F100();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

char *sub_1BE761A3C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)&v25 + 1) = v11;
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_1BE61F930();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[16 * (v14 >> 4)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  *(_QWORD *)&v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_1BE761C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1BE761C38(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  size_t v36;
  char *v37;

  v5 = *(char **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(__int128 **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60)
      sub_1BE61F930();
    v14 = v11 - (_QWORD)v5;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        sub_1BE61F100();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[16 * (v6 >> 4)];
    v27 = 16 * a5;
    v28 = &v26[16 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      v33 = v26;
      v35 = &v17[16 * v16];
      v36 = (char *)v12 - v7;
      if (v12 == (__int128 *)v7)
        goto LABEL_33;
    }
    else
    {
      v32 = v7;
      v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      v34 = *(_BYTE **)(a1 + 8);
      v35 = &v17[16 * v16];
      v36 = v34 - v7;
      if (v34 == v7)
        goto LABEL_33;
    }
    memmove(v28, v7, v36);
LABEL_33:
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = &v28[v36];
    *(_QWORD *)(a1 + 16) = v35;
    if (v37)
      operator delete(v37);
    return v26;
  }
  v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &__src[16 * a5];
    v21 = *(char **)(a1 + 8);
    v22 = &v7[16 * a5];
    v23 = &v12[-a5];
    v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      if (v19 != v9)
        memmove(v7, v9, v19 - v9);
      return v7;
    }
LABEL_19:
    v24 = v21;
    do
    {
      v25 = *v23++;
      *(_OWORD *)v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  v19 = &__src[16 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  v21 = (char *)v12 + v20;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    v22 = &v7[16 * a5];
    v23 = (__int128 *)&v21[-16 * a5];
    v24 = (char *)v12 + v20;
    if (v23 >= v12)
      goto LABEL_21;
    goto LABEL_19;
  }
  return v7;
}

void sub_1BE761E68(char ***a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  char **v6;
  char **v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char **v12;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char **v20;
  char **v21;
  char **v22;
  char **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int64_t v34;
  char *v35;
  char *v36;
  char **v37;
  uint64_t v38;
  char *v39;
  char **v40;
  char **v41;
  char **v42;
  char **v43;
  char *v44;
  char *v45;
  char *v46;
  char ***v47;
  uint64_t v48;
  char *v49;

  if (a5 >= 1)
  {
    v6 = a3;
    v8 = *a1;
    v9 = (a2 - (uint64_t)*a1) / 24;
    v10 = &(*a1)[3 * v9];
    v13 = a1[2];
    v11 = (uint64_t)(a1 + 2);
    v12 = v13;
    v14 = *(_QWORD *)(v11 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v14) >> 3)) >= a5)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v10) >> 3)) >= a5)
      {
        v19 = (uint64_t)&a3[3 * a5];
        v20 = *(char ***)(v11 - 8);
      }
      else
      {
        v19 = (uint64_t)&a3[(uint64_t)(v14 - (_QWORD)v10) >> 3];
        v20 = (char **)sub_1BE7617F0(v11, v19, a4, *(_QWORD **)(v11 - 8));
        a1[1] = v20;
        if ((uint64_t)(v14 - (_QWORD)v10) < 1)
          return;
      }
      v21 = &v10[3 * a5];
      v22 = &v20[-3 * a5];
      v23 = v20;
      if ((unint64_t)v22 < v14)
      {
        v23 = v20;
        do
        {
          *v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          *(_OWORD *)v23 = *(_OWORD *)v22;
          v23[2] = v22[2];
          *v22 = 0;
          v22[1] = 0;
          v22[2] = 0;
          v23 += 3;
          v22 += 3;
        }
        while ((unint64_t)v22 < v14);
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        v24 = (void **)(v20 - 3);
        v25 = v20 - v21;
        do
        {
          v27 = *v24;
          if (*v24)
          {
            v24[1] = v27;
            operator delete(v27);
            *v24 = 0;
            v24[1] = 0;
            v24[2] = 0;
          }
          v26 = (uint64_t)&v10[v25 - 3];
          *(_OWORD *)v24 = *(_OWORD *)v26;
          v24[2] = v10[v25 - 1];
          *(_QWORD *)v26 = 0;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 16) = 0;
          v24 -= 3;
          v25 -= 3;
        }
        while (v25 * 8);
      }
      if ((char **)v19 != v6)
      {
        do
        {
          if (v6 != v10)
            sub_1BE6F5A88(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
          v6 += 3;
          v10 += 3;
        }
        while (v6 != (char **)v19);
      }
    }
    else
    {
      v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (_QWORD)v8) >> 3);
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F930();
      v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v8);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v47 = a1;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F100();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v48 = v9;
      v49 = &v18[24 * v17];
      v28 = 24 * a5;
      v29 = &v18[24 * v9 + 24 * a5];
      v46 = &v18[24 * v9];
      v30 = v46;
      do
      {
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = 0;
        v33 = *v6;
        v32 = v6[1];
        v34 = v32 - *v6;
        if (v32 != *v6)
        {
          if (v34 < 0)
            sub_1BE61F930();
          v35 = (char *)operator new(v32 - *v6);
          *(_QWORD *)v30 = v35;
          *((_QWORD *)v30 + 1) = v35;
          v31 = &v35[16 * (v34 >> 4)];
          *((_QWORD *)v30 + 2) = v31;
          memcpy(v35, v33, v34);
          *((_QWORD *)v30 + 1) = v31;
        }
        v30 += 24;
        v6 += 3;
        v28 -= 24;
      }
      while (v28);
      v36 = v46;
      v37 = *v47;
      if (*v47 != v10)
      {
        v38 = 3 * v48;
        do
        {
          v39 = &v18[v38 * 8];
          v40 = &v8[v38];
          *(_OWORD *)(v39 - 24) = *(_OWORD *)&v8[v38 - 3];
          *((_QWORD *)v39 - 1) = v8[v38 - 1];
          *(v40 - 3) = 0;
          *(v40 - 2) = 0;
          *(v40 - 1) = 0;
          v18 -= 24;
          v8 -= 3;
        }
        while (&v8[v38] != v37);
        v36 = &v18[24 * v48];
      }
      v41 = v47[1];
      if (v41 != v10)
      {
        do
        {
          *(_QWORD *)v29 = 0;
          *((_QWORD *)v29 + 1) = 0;
          *((_QWORD *)v29 + 2) = 0;
          *(_OWORD *)v29 = *(_OWORD *)v10;
          *((_QWORD *)v29 + 2) = v10[2];
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          v29 += 24;
          v10 += 3;
        }
        while (v10 != v41);
        v10 = v47[1];
      }
      v42 = *v47;
      *v47 = (char **)v36;
      v47[1] = (char **)v29;
      v47[2] = (char **)v49;
      if (v10 != v42)
      {
        v43 = v10;
        do
        {
          v45 = *(v43 - 3);
          v43 -= 3;
          v44 = v45;
          if (v45)
          {
            *(v10 - 2) = v44;
            operator delete(v44);
          }
          v10 = v43;
        }
        while (v43 != v42);
      }
      if (v42)
        operator delete(v42);
    }
  }
}

void sub_1BE762264(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1BE76226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE762284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_1BE63E4E4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void OutlinedArrowRegressor::OutlinedArrowRegressor(OutlinedArrowRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v4;
  OutlinedArrowRegressor *v5;
  char *v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  OutlinedArrowRegressor *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  float v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  float v35;
  float v36;
  float v37;
  float v38;
  double v39;
  double v40;
  double v41;
  float v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  float v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  double v66;
  double v67;
  float v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  float v75;
  float v76;
  float v77;
  float v78;
  double v79;
  double v80;
  double v81;
  float v82;
  float v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  double v96;
  float v97;
  float v98;
  int v99;
  double *v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  double v112;
  double v113;
  float v114;
  float v115;
  float v116;
  float v117;
  int v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  double v122;
  double v123;
  float v124;
  float v125;
  float v126;
  int v127;
  float v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  float v133;
  float v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  char *v143;
  float v144;
  __int128 *v145;
  __int128 v146;
  __int128 v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  float v159;
  __int128 *v160;
  __int128 v161;
  __int128 v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  int v173;
  __int128 *v174;
  __int128 v175;
  __int128 v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  float64x2_t v190;
  float64x2_t v191;
  float32x2_t v192;
  int32x2_t v193;
  unint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  BOOL v197;
  _QWORD *v198;
  char *v199;
  unint64_t v200;
  _OWORD *v201;
  _OWORD *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  _OWORD *v212;
  _QWORD *v213;
  char *v214;
  unint64_t v215;
  _OWORD *v216;
  _OWORD *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  _OWORD *v226;
  _QWORD *v227;
  char *v228;
  unint64_t v229;
  _OWORD *v230;
  _OWORD *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  int *v241;
  int v242;
  unint64_t v243;
  int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  _OWORD *v254;
  _QWORD *v255;
  char *v256;
  unint64_t v257;
  _OWORD *v258;
  _OWORD **v259;
  _OWORD *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  unint64_t v269;
  _OWORD *v271;
  _QWORD *v272;
  char *v273;
  unint64_t v274;
  _OWORD *v275;
  _OWORD **v276;
  _OWORD *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  _OWORD *v286;
  _QWORD *v287;
  char *v288;
  unint64_t v289;
  _OWORD *v290;
  _OWORD **v291;
  _OWORD *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  int *v302;
  int v303;
  unint64_t v304;
  int *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  unint64_t v312;
  unint64_t v313;
  int v314;
  _OWORD *v315;
  _QWORD *v316;
  char *v317;
  unint64_t v318;
  _OWORD *v319;
  _OWORD **v320;
  _OWORD *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  char *v329;
  unint64_t v330;
  _OWORD *v332;
  _QWORD *v333;
  char *v334;
  unint64_t v335;
  _OWORD *v336;
  _OWORD **v337;
  _OWORD *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  _OWORD *v347;
  _QWORD *v348;
  char *v349;
  unint64_t v350;
  _OWORD *v351;
  _OWORD **v352;
  _OWORD *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  float *v361;
  int *v362;
  float *v363;
  int *v364;
  int *v365;
  float v366;
  float v368;
  float v369;
  int v370;
  char *v371;
  double *v372;
  double *v373;
  float v375;
  float v376;
  int v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  int *v383;
  double *v384;
  float *v385;
  float *v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  char v393;
  int v394;
  unsigned int v395;
  int v396;
  int v397;
  _QWORD *v398;
  char *v399;
  unint64_t v400;
  _OWORD *v401;
  _OWORD **v402;
  _OWORD *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  uint64_t v410;
  _OWORD *v411;
  float *v412;
  float *v413;
  uint64_t v414;
  _QWORD *v415;
  char *v416;
  unint64_t v417;
  _OWORD *v418;
  _OWORD **v419;
  _OWORD *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  _OWORD *v428;
  int v429;
  char *v430;
  double *v431;
  double *v432;
  float v433;
  float v434;
  int v435;
  int *v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  int *v441;
  double *v442;
  float *v443;
  float *v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  char v451;
  _QWORD *v452;
  char *v453;
  unint64_t v454;
  _OWORD *v455;
  _OWORD *v456;
  _OWORD **v457;
  _OWORD *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  char *v463;
  char *v464;
  unsigned int v465;
  int v466;
  int v467;
  _QWORD *v468;
  char *v469;
  unint64_t v470;
  _OWORD *v471;
  _OWORD **v472;
  _OWORD *v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  char *v478;
  char *v479;
  uint64_t v480;
  _OWORD *v481;
  unsigned int v482;
  uint64_t v483;
  _QWORD *v484;
  char *v485;
  unint64_t v486;
  _OWORD *v487;
  _OWORD **v488;
  _OWORD *v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  char *v494;
  char *v495;
  uint64_t v496;
  _OWORD *v497;
  OutlinedArrowRegressor *v498;
  float64x2_t v499;
  double v500;
  double v501;
  double v502;
  float v503;
  float v504;
  float v505;
  float v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  double *v513;
  double *v514;
  float v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float v520;
  double v521;
  double v522;
  float v523;
  float v524;
  float v525;
  float v526;
  float v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  BOOL v533;
  double v534;
  double v535;
  double v536;
  uint64_t v539;
  float v540;
  char *v541;
  unint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  char *v546;
  void *v547;
  char *v548;
  void *v549;
  void *v550;
  _QWORD *v551;
  float64x2_t *v552;
  char *v553;
  uint64_t v554;
  char *v555;
  _BYTE *v556;
  _BYTE *v557;
  int64_t v558;
  char *v559;
  __int128 v560;
  __int128 v561;
  unint64_t v562;
  unint64_t v563;
  char *v564;
  char *v565;
  __int128 v566;
  char *v567;
  __int128 v568;
  __int128 v569;
  char *v570;
  char *v571;
  _BYTE *v572;
  _BYTE *v573;
  int64_t v574;
  double *v575;
  float v576;
  float v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float32x2_t v591;
  int32x2_t v592;
  int v593;
  unsigned int v594;
  int v595;
  float *v596;
  float64x2_t v597;
  unsigned int v598;
  int *v599;
  float64x2_t v600;
  int v601;
  float64x2_t v602;
  unsigned int v603;
  int *v604;
  int *v605;
  float *v606;
  float v607;
  float *v608;
  float32x2_t v609;
  int *v610;
  int *v611;
  float v612;
  unsigned int v613;
  float v614;
  unsigned int v615;
  float v616;
  unsigned int v617;
  float32x2_t *i;
  __int128 *v619;
  float v620;
  uint64_t v621;
  double *v622;
  double *v623;
  double *v624;
  char *v625;
  char *v626;
  char *v627;
  _BYTE __p[32];
  uint64_t v629;
  void *v630;
  char *v631;
  char *v632;
  void *v633;
  char *v634;
  char *v635;
  char *v636;
  char *v637;
  char v638[16];
  float64x2_t v639;
  char *v640;
  __int128 v641;
  char *v642;
  _BYTE *v643;
  uint64_t v644;

  v4 = a2;
  v642 = 0;
  v643 = 0;
  v644 = 0;
  v640 = 0;
  v641 = 0uLL;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((float *)this + 9) = sub_1BE631E24(v4, (uint64_t)&v642, (uint64_t)v638, 1, 30.0);
  v6 = v642;
  v7 = v643 - v642;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3);
  if (v8 <= 6)
  {
    *(_QWORD *)this = OutlinedArrowRegressor::provideAnAnswer(v5, v4);
    goto LABEL_43;
  }
  v636 = 0;
  v637 = 0;
  v635 = 0;
  if (v643 != v642)
  {
    if (v8 > 0x666666666666666)
      sub_1BE61F930();
    v635 = (char *)operator new(v7);
    v637 = &v635[40 * v8];
    memcpy(v635, v6, v7 - 3);
    v636 = v637;
  }
  sub_1BE629CD4((uint64_t *)&v635, (uint64_t)__p);
  v9 = *(_QWORD *)__p;
  v640 = *(char **)__p;
  v10 = *(__int128 **)&__p[8];
  v641 = *(_OWORD *)&__p[8];
  memset(__p, 0, 24);
  if (v635)
  {
    v636 = v635;
    v619 = v10;
    operator delete(v635);
    v10 = v619;
  }
  v11 = v10;
  v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - v9) >> 3);
  v13 = 126 - 2 * __clz(v12);
  v14 = (uint64_t)v10 - v9;
  *(_QWORD *)__p = sub_1BE765504;
  if (v10 == (__int128 *)v9)
    v15 = 0;
  else
    v15 = v13;
  sub_1BE62A6E0(v9, v10, (uint64_t (**)(__int128 *, __int128 *))__p, v15, 1);
  if (v12 < 5)
  {
    *(_QWORD *)this = OutlinedArrowRegressor::provideAnAnswer(v16, v4);
    goto LABEL_13;
  }
  for (i = (float32x2_t *)this; v14 != 200; v14 = (uint64_t)&v120[v119 - v9])
  {
    v90 = *((double *)v11 - 5);
    v89 = *((double *)v11 - 4);
    v91 = *(double *)(v9 + 40) - v90;
    v92 = *(double *)(v9 + 48) - v89;
    v93 = (float)(v92 * v92) + (float)(v91 * v91);
    if (v93 > 0.0)
    {
      v91 = v91 / v93;
      v92 = v92 / v93;
    }
    v94 = v14 / 40;
    v95 = sqrtf(v93);
    v96 = *(double *)(v9 + 8);
    v97 = ((*(double *)v9 - v90) * v92 - (v96 - v89) * v91) * v95;
    v98 = fabsf(v97);
    if ((unint64_t)(v14 / 40 - 1) < 2)
    {
      v99 = 0;
    }
    else
    {
      v99 = 0;
      v100 = (double *)(v9 + 48);
      v101 = 2;
      v102 = *(double *)(v9 + 8);
      v103 = *(double *)v9;
      do
      {
        v108 = v100[4] - v103;
        v109 = v100[5] - v102;
        v110 = (float)(v109 * v109) + (float)(v108 * v108);
        if (v110 > 0.0)
        {
          v108 = v108 / v110;
          v109 = v109 / v110;
        }
        v104 = *(v100 - 1);
        v105 = *v100;
        v106 = ((v104 - v103) * v109 - (*v100 - v102) * v108) * sqrtf(v110);
        v107 = fabsf(v106);
        if (v107 < v98)
          v99 = v101 - 1;
        ++v101;
        if (v107 < v98)
          v98 = v107;
        v100 += 5;
        v102 = v105;
        v103 = v104;
      }
      while (v94 != v101);
    }
    v111 = v9 + 40 * v94;
    v113 = *(double *)(v111 - 80);
    v112 = *(double *)(v111 - 72);
    v114 = *(double *)v9 - v113;
    v115 = v96 - v112;
    v116 = (float)(v115 * v115) + (float)(v114 * v114);
    if (v116 > 0.0)
    {
      v114 = v114 / v116;
      v115 = v115 / v116;
    }
    v117 = ((v90 - v113) * v115 - (v89 - v112) * v114) * sqrtf(v116);
    v118 = v94 - 1;
    if (fabsf(v117) >= v98)
      v118 = v99;
    v119 = v9 + 40 * v118;
    v17 = (const void *)(v119 + 40);
    v120 = (char *)v11 - v119 - 40;
    if (v11 != (__int128 *)(v119 + 40))
    {
      v16 = (OutlinedArrowRegressor *)memmove((void *)(v9 + 40 * v118), v17, (size_t)(v120 - 3));
      v9 = (uint64_t)v640;
    }
    v11 = (__int128 *)((char *)v11 - 40);
    *(_QWORD *)&v641 = &v120[v119];
  }
  v20 = *(double *)v9;
  v21 = *(double *)(v9 + 8);
  v22 = *(double *)(v9 + 40) - *(double *)v9;
  v23 = *(double *)(v9 + 48) - v21;
  v24 = (float)(v23 * v23) + (float)(v22 * v22);
  if (v24 > 0.0)
  {
    v22 = v22 / v24;
    v23 = v23 / v24;
  }
  v25 = *(int *)(v9 + 20);
  if (*(_DWORD *)(v9 + 60) <= (int)v25)
    goto LABEL_41;
  v26 = v23;
  v27 = v22;
  v28 = sqrtf(v24);
  v29 = 0.0;
  do
  {
    v16 = (OutlinedArrowRegressor *)objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v25, v18, v19);
    *(float *)&v30 = ((v30 - v20) * v26 - (v31 - v21) * v27) * v28;
    v29 = v29 + (float)(*(float *)&v30 * *(float *)&v30);
    ++v25;
    v32 = *(int *)(v9 + 60);
  }
  while (v25 < v32);
  v33 = *(double *)(v9 + 40);
  v34 = *(double *)(v9 + 48);
  v35 = *(double *)(v9 + 80) - v33;
  v36 = *(double *)(v9 + 88) - v34;
  v37 = (float)(v36 * v36) + (float)(v35 * v35);
  if (v37 > 0.0)
  {
    v35 = v35 / v37;
    v36 = v36 / v37;
  }
  if (*(_DWORD *)(v9 + 100) <= (int)v32)
    goto LABEL_41;
  v38 = v29 / (float)(v32 - *(_DWORD *)(v9 + 20));
  v39 = v36;
  v40 = v35;
  v41 = sqrtf(v37);
  v42 = 0.0;
  do
  {
    v16 = (OutlinedArrowRegressor *)objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v32, v18, v19);
    *(float *)&v43 = ((v43 - v33) * v39 - (v44 - v34) * v40) * v41;
    v42 = v42 + (float)(*(float *)&v43 * *(float *)&v43);
    ++v32;
    v45 = *(int *)(v9 + 100);
  }
  while (v32 < v45);
  v46 = *(double *)(v9 + 80);
  v47 = *(double *)(v9 + 88);
  v48 = *(double *)(v9 + 120) - v46;
  v49 = *(double *)(v9 + 128) - v47;
  v50 = (float)(v49 * v49) + (float)(v48 * v48);
  if (v50 > 0.0)
  {
    v48 = v48 / v50;
    v49 = v49 / v50;
  }
  if (*(_DWORD *)(v9 + 140) <= (int)v45)
    goto LABEL_41;
  v51 = v42 / (float)(v45 - *(_DWORD *)(v9 + 60));
  v52 = v49;
  v53 = v48;
  v54 = sqrtf(v50);
  v55 = 0.0;
  do
  {
    v16 = (OutlinedArrowRegressor *)objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v45, v18, v19);
    *(float *)&v56 = ((v56 - v46) * v52 - (v57 - v47) * v53) * v54;
    v55 = v55 + (float)(*(float *)&v56 * *(float *)&v56);
    ++v45;
    v58 = *(int *)(v9 + 140);
  }
  while (v45 < v58);
  v59 = *(double *)(v9 + 120);
  v60 = *(double *)(v9 + 128);
  v61 = *(double *)(v9 + 160) - v59;
  v62 = *(double *)(v9 + 168) - v60;
  v63 = (float)(v62 * v62) + (float)(v61 * v61);
  if (v63 > 0.0)
  {
    v61 = v61 / v63;
    v62 = v62 / v63;
  }
  if (*(_DWORD *)(v9 + 180) <= (int)v58)
  {
LABEL_41:
    *i = (float32x2_t)OutlinedArrowRegressor::provideAnAnswer(v16, v4);
    goto LABEL_42;
  }
  v620 = v38;
  v64 = v55 / (float)(v58 - *(_DWORD *)(v9 + 100));
  v65 = v62;
  v66 = v61;
  v67 = sqrtf(v63);
  v68 = 0.0;
  do
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v58, v18, v19);
    *(float *)&v70 = ((v70 - v59) * v65 - (v71 - v60) * v66) * v67;
    v68 = v68 + (float)(*(float *)&v70 * *(float *)&v70);
    ++v58;
    v72 = *(int *)(v9 + 180);
  }
  while (v58 < v72);
  v73 = *(double *)(v9 + 160);
  v74 = *(double *)(v9 + 168);
  v75 = *(double *)v9 - v73;
  v76 = *(double *)(v9 + 8) - v74;
  v77 = (float)(v76 * v76) + (float)(v75 * v75);
  v78 = sqrtf(v77);
  v614 = v64;
  v612 = v51;
  if (v77 > 0.0)
  {
    v75 = v75 / v77;
    v76 = v76 / v77;
  }
  v79 = v76;
  v80 = v75;
  v81 = v78;
  v82 = 0.0;
  v83 = 0.0;
  v616 = v68 / (float)(v72 - *(_DWORD *)(v9 + 140));
  while (objc_msgSend_pointCountForStrokeIndex_(v4, (const char *)v17, 0, v69, v18, v19) > (unint64_t)v72)
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v4, v84, 0, v72, v85, v86);
    *(float *)&v87 = ((v87 - v73) * v79 - (v88 - v74) * v80) * v81;
    v82 = v82 + (float)(*(float *)&v87 * *(float *)&v87);
    v83 = v83 + 1.0;
    ++v72;
  }
  if (*(int *)(v9 + 20) >= 1)
  {
    v121 = 0;
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v4, v84, 0, v121, v85, v86);
      *(float *)&v122 = ((v122 - v73) * v79 - (v123 - v74) * v80) * v81;
      v82 = v82 + (float)(*(float *)&v122 * *(float *)&v122);
      v83 = v83 + 1.0;
      ++v121;
    }
    while (v121 < *(int *)(v9 + 20));
  }
  v124 = 1.0;
  if (v83 > 0.0)
    v124 = v83;
  v125 = v82 / v124;
  v126 = v620 + (float)(v82 / v124);
  v127 = (float)(v620 + v612) < v126;
  if ((float)(v620 + v612) >= v126)
    v128 = v126;
  else
    v128 = v620 + v612;
  v129 = (char *)*((_QWORD *)&v641 + 1);
  if ((unint64_t)v11 >= *((_QWORD *)&v641 + 1))
  {
    v135 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v11 - v9) >> 3) + 1;
    v133 = v616;
    v134 = v614;
    if (v135 > 0x666666666666666)
      goto LABEL_638;
    if (0x999999999999999ALL * ((*((_QWORD *)&v641 + 1) - v9) >> 3) > v135)
      v135 = 0x999999999999999ALL * ((*((_QWORD *)&v641 + 1) - v9) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)&v641 + 1) - v9) >> 3) >= 0x333333333333333)
      v136 = 0x666666666666666;
    else
      v136 = v135;
    if (v136)
    {
      if (v136 > 0x666666666666666)
        goto LABEL_639;
      v137 = (char *)operator new(40 * v136);
    }
    else
    {
      v137 = 0;
    }
    v138 = &v137[8 * (((uint64_t)v11 - v9) >> 3)];
    v139 = *(_OWORD *)v9;
    v140 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)v138 + 4) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)v138 = v139;
    *((_OWORD *)v138 + 1) = v140;
    v132 = v138 + 40;
    if (v11 == (__int128 *)v9)
    {
      v143 = &v137[8 * (((uint64_t)v11 - v9) >> 3)];
    }
    else
    {
      do
      {
        v141 = *(__int128 *)((char *)v11 - 40);
        v142 = *(__int128 *)((char *)v11 - 24);
        v143 = v138 - 40;
        *(_QWORD *)(v138 - 11) = *(_QWORD *)((char *)v11 - 11);
        *(_OWORD *)(v138 - 24) = v142;
        *(_OWORD *)(v138 - 40) = v141;
        v11 = (__int128 *)((char *)v11 - 40);
        v138 -= 40;
      }
      while (v11 != (__int128 *)v9);
    }
    v640 = v143;
    *(_QWORD *)&v641 = v132;
    *((_QWORD *)&v641 + 1) = &v137[40 * v136];
    operator delete((void *)v9);
    v9 = (uint64_t)v640;
    v129 = (char *)*((_QWORD *)&v641 + 1);
  }
  else
  {
    v130 = *(_OWORD *)v9;
    v131 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)v11 + 4) = *(_QWORD *)(v9 + 32);
    *v11 = v130;
    v11[1] = v131;
    v132 = (char *)v11 + 40;
    v133 = v616;
    v134 = v614;
  }
  *(_QWORD *)&v641 = v132;
  if ((float)(v612 + v134) >= v128)
    v144 = v128;
  else
    v144 = v612 + v134;
  if ((float)(v612 + v134) < v128)
    v127 = 2;
  v145 = (__int128 *)(v9 + 40);
  if (v132 < v129)
  {
    v146 = *v145;
    v147 = *(_OWORD *)(v9 + 56);
    *((_QWORD *)v132 + 4) = *(_QWORD *)(v9 + 72);
    *(_OWORD *)v132 = v146;
    *((_OWORD *)v132 + 1) = v147;
    v148 = v132 + 40;
    goto LABEL_114;
  }
  v149 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v132[-v9] >> 3) + 1;
  if (v149 > 0x666666666666666)
    goto LABEL_638;
  v150 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v129[-v9] >> 3);
  if (2 * v150 > v149)
    v149 = 2 * v150;
  if (v150 >= 0x333333333333333)
    v151 = 0x666666666666666;
  else
    v151 = v149;
  if (v151)
  {
    if (v151 > 0x666666666666666)
      goto LABEL_639;
    v152 = (char *)operator new(40 * v151);
  }
  else
  {
    v152 = 0;
  }
  v153 = &v152[8 * ((uint64_t)&v132[-v9] >> 3)];
  v154 = *v145;
  v155 = *(_OWORD *)(v9 + 56);
  *((_QWORD *)v153 + 4) = *(_QWORD *)(v9 + 72);
  v129 = &v152[40 * v151];
  *(_OWORD *)v153 = v154;
  *((_OWORD *)v153 + 1) = v155;
  v148 = v153 + 40;
  if (v132 == (char *)v9)
  {
    v640 = &v152[8 * ((uint64_t)&v132[-v9] >> 3)];
    *(_QWORD *)&v641 = v153 + 40;
    *((_QWORD *)&v641 + 1) = &v152[40 * v151];
  }
  else
  {
    do
    {
      v156 = *(_OWORD *)(v132 - 40);
      v157 = *(_OWORD *)(v132 - 24);
      *(_QWORD *)(v153 - 11) = *(_QWORD *)(v132 - 11);
      *(_OWORD *)(v153 - 24) = v157;
      *(_OWORD *)(v153 - 40) = v156;
      v153 -= 40;
      v132 -= 40;
    }
    while (v132 != (char *)v9);
    v640 = v153;
    *(_QWORD *)&v641 = v148;
    *((_QWORD *)&v641 + 1) = &v152[40 * v151];
    if (!v9)
    {
      v9 = (uint64_t)v153;
      goto LABEL_114;
    }
  }
  operator delete((void *)v9);
  v9 = (uint64_t)v640;
  v129 = (char *)*((_QWORD *)&v641 + 1);
LABEL_114:
  *(_QWORD *)&v641 = v148;
  _NF = (float)(v134 + v133) < v144;
  if ((float)(v134 + v133) >= v144)
    v159 = v144;
  else
    v159 = v134 + v133;
  if (_NF)
    v127 = 3;
  v160 = (__int128 *)(v9 + 80);
  if (v148 < v129)
  {
    v161 = *v160;
    v162 = *(_OWORD *)(v9 + 96);
    *((_QWORD *)v148 + 4) = *(_QWORD *)(v9 + 112);
    *(_OWORD *)v148 = v161;
    *((_OWORD *)v148 + 1) = v162;
    v163 = v148 + 40;
    goto LABEL_137;
  }
  v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v148[-v9] >> 3) + 1;
  if (v164 > 0x666666666666666)
    goto LABEL_638;
  v165 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v129[-v9] >> 3);
  if (2 * v165 > v164)
    v164 = 2 * v165;
  if (v165 >= 0x333333333333333)
    v166 = 0x666666666666666;
  else
    v166 = v164;
  if (v166)
  {
    if (v166 > 0x666666666666666)
      goto LABEL_639;
    v167 = (char *)operator new(40 * v166);
  }
  else
  {
    v167 = 0;
  }
  v168 = &v167[8 * ((uint64_t)&v148[-v9] >> 3)];
  v169 = *v160;
  v170 = *(_OWORD *)(v9 + 96);
  *((_QWORD *)v168 + 4) = *(_QWORD *)(v9 + 112);
  v129 = &v167[40 * v166];
  *(_OWORD *)v168 = v169;
  *((_OWORD *)v168 + 1) = v170;
  v163 = v168 + 40;
  if (v148 == (char *)v9)
  {
    v640 = &v167[8 * ((uint64_t)&v148[-v9] >> 3)];
    *(_QWORD *)&v641 = v168 + 40;
    *((_QWORD *)&v641 + 1) = &v167[40 * v166];
  }
  else
  {
    do
    {
      v171 = *(_OWORD *)(v148 - 40);
      v172 = *(_OWORD *)(v148 - 24);
      *(_QWORD *)(v168 - 11) = *(_QWORD *)(v148 - 11);
      *(_OWORD *)(v168 - 24) = v172;
      *(_OWORD *)(v168 - 40) = v171;
      v168 -= 40;
      v148 -= 40;
    }
    while (v148 != (char *)v9);
    v640 = v168;
    *(_QWORD *)&v641 = v163;
    *((_QWORD *)&v641 + 1) = &v167[40 * v166];
    if (!v9)
    {
      v9 = (uint64_t)v168;
      goto LABEL_137;
    }
  }
  operator delete((void *)v9);
  v9 = (uint64_t)v640;
  v129 = (char *)*((_QWORD *)&v641 + 1);
LABEL_137:
  *(_QWORD *)&v641 = v163;
  if ((float)(v133 + v125) >= v159)
    v173 = v127;
  else
    v173 = 4;
  v617 = v173;
  v174 = (__int128 *)(v9 + 120);
  if (v163 < v129)
  {
    v175 = *v174;
    v176 = *(_OWORD *)(v9 + 136);
    *((_QWORD *)v163 + 4) = *(_QWORD *)(v9 + 152);
    *(_OWORD *)v163 = v175;
    *((_OWORD *)v163 + 1) = v176;
    v177 = v163 + 40;
    goto LABEL_158;
  }
  v178 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v163[-v9] >> 3) + 1;
  if (v178 > 0x666666666666666)
LABEL_638:
    sub_1BE61F930();
  v179 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v129[-v9] >> 3);
  if (2 * v179 > v178)
    v178 = 2 * v179;
  if (v179 >= 0x333333333333333)
    v180 = 0x666666666666666;
  else
    v180 = v178;
  if (v180)
  {
    if (v180 <= 0x666666666666666)
    {
      v181 = (char *)operator new(40 * v180);
      goto LABEL_152;
    }
LABEL_639:
    sub_1BE61F100();
  }
  v181 = 0;
LABEL_152:
  v182 = &v181[8 * ((uint64_t)&v163[-v9] >> 3)];
  v183 = *v174;
  v184 = *(_OWORD *)(v9 + 136);
  *((_QWORD *)v182 + 4) = *(_QWORD *)(v9 + 152);
  *(_OWORD *)v182 = v183;
  *((_OWORD *)v182 + 1) = v184;
  v177 = v182 + 40;
  if (v163 == (char *)v9)
  {
    v640 = &v181[8 * ((uint64_t)&v163[-v9] >> 3)];
    *(_QWORD *)&v641 = v182 + 40;
    *((_QWORD *)&v641 + 1) = &v181[40 * v180];
  }
  else
  {
    do
    {
      v185 = *(_OWORD *)(v163 - 40);
      v186 = *(_OWORD *)(v163 - 24);
      *(_QWORD *)(v182 - 11) = *(_QWORD *)(v163 - 11);
      *(_OWORD *)(v182 - 24) = v186;
      *(_OWORD *)(v182 - 40) = v185;
      v182 -= 40;
      v163 -= 40;
    }
    while (v163 != (char *)v9);
    v640 = v182;
    *(_QWORD *)&v641 = v177;
    *((_QWORD *)&v641 + 1) = &v181[40 * v180];
    if (!v9)
    {
      v9 = (uint64_t)v182;
      goto LABEL_158;
    }
  }
  operator delete((void *)v9);
  v9 = (uint64_t)v640;
LABEL_158:
  *(_QWORD *)&v641 = v177;
  v598 = v617 + 2;
  v613 = v617 + 3;
  v615 = v617 + 1;
  v603 = v617 + 4;
  __asm { FMOV            V1.2D, #0.5 }
  v190 = vmulq_f64(vaddq_f64(*(float64x2_t *)(v9 + 40 * (v617 + 2)), *(float64x2_t *)(v9 + 40 * (v617 + 3))), _Q1);
  v191 = vmulq_f64(vaddq_f64(*(float64x2_t *)(v9 + 40 * (v617 + 1)), *(float64x2_t *)(v9 + 40 * (v617 + 4))), _Q1);
  v192 = vcvt_f32_f64(vsubq_f64(v191, v190));
  v193 = (int32x2_t)vmul_f32(v192, v192);
  *(float *)v193.i32 = vmlas_n_f32(*(float *)&v193.i32[1], v192.f32[0], v192.f32[0]);
  v597 = v191;
  v602 = v190;
  v607 = *(float *)v193.i32;
  if (*(float *)v193.i32 > 0.0)
    v192 = vdiv_f32(v192, (float32x2_t)vdup_lane_s32(v193, 0));
  v609 = v192;
  memset(__p, 0, 24);
  sub_1BE76568C(&v633, 7uLL, (uint64_t)__p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  v194 = *(int *)(v9 + 40 * v617 + 16);
  LODWORD(v195) = *(_DWORD *)(v9 + 40 * v615 + 16);
  if ((int)v194 < (int)v195)
  {
    while (1)
    {
      v198 = v633;
      v199 = &v642[40 * v194];
      v201 = (_OWORD *)*((_QWORD *)v633 + 1);
      v200 = *((_QWORD *)v633 + 2);
      if ((unint64_t)v201 >= v200)
        break;
      *v201 = *(_OWORD *)v199;
      v196 = v201 + 1;
LABEL_165:
      v198[1] = v196;
      v9 = (uint64_t)v640;
      v195 = *(int *)&v640[40 * v615 + 16];
      v197 = (uint64_t)v194++ < v195;
      if (!v197)
        goto LABEL_227;
    }
    v202 = *(_OWORD **)v633;
    v203 = ((uint64_t)v201 - *(_QWORD *)v633) >> 4;
    v204 = v203 + 1;
    if ((unint64_t)(v203 + 1) >> 60)
      goto LABEL_635;
    v205 = v200 - (_QWORD)v202;
    if (v205 >> 3 > v204)
      v204 = v205 >> 3;
    if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF0)
      v206 = 0xFFFFFFFFFFFFFFFLL;
    else
      v206 = v204;
    if (v206)
    {
      if (v206 >> 60)
        goto LABEL_637;
      v207 = (char *)operator new(16 * v206);
      v208 = &v207[16 * v203];
      *(_OWORD *)v208 = *(_OWORD *)v199;
      v209 = (uint64_t)v208;
      if (v201 == v202)
        goto LABEL_181;
    }
    else
    {
      v207 = 0;
      v208 = (char *)(16 * v203);
      *(_OWORD *)(16 * v203) = *(_OWORD *)v199;
      v209 = 16 * v203;
      if (v201 == v202)
        goto LABEL_181;
    }
    do
    {
      *(_OWORD *)(v209 - 16) = *(v201 - 1);
      v209 -= 16;
      --v201;
    }
    while (v201 != v202);
    v201 = (_OWORD *)*v198;
LABEL_181:
    v196 = v208 + 16;
    *v198 = v209;
    v198[1] = v208 + 16;
    v198[2] = &v207[16 * v206];
    if (v201)
      operator delete(v201);
    goto LABEL_165;
  }
  v210 = v642;
  v211 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3);
  if (v211 > v194 && v211 - 1 != v194)
  {
    while (1)
    {
      v213 = v633;
      v214 = &v210[40 * v194];
      v216 = (_OWORD *)*((_QWORD *)v633 + 1);
      v215 = *((_QWORD *)v633 + 2);
      if ((unint64_t)v216 >= v215)
        break;
      *v216 = *(_OWORD *)v214;
      v212 = v216 + 1;
LABEL_187:
      v213[1] = v212;
      ++v194;
      v210 = v642;
      if (0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3) <= v194)
      {
        v9 = (uint64_t)v640;
        LODWORD(v195) = *(_DWORD *)&v640[40 * v615 + 16];
        goto LABEL_205;
      }
    }
    v217 = *(_OWORD **)v633;
    v218 = ((uint64_t)v216 - *(_QWORD *)v633) >> 4;
    v219 = v218 + 1;
    if ((unint64_t)(v218 + 1) >> 60)
LABEL_635:
      sub_1BE61F930();
    v220 = v215 - (_QWORD)v217;
    if (v220 >> 3 > v219)
      v219 = v220 >> 3;
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0)
      v221 = 0xFFFFFFFFFFFFFFFLL;
    else
      v221 = v219;
    if (v221)
    {
      if (v221 >> 60)
LABEL_637:
        sub_1BE61F100();
      v222 = (char *)operator new(16 * v221);
      v223 = &v222[16 * v218];
      *(_OWORD *)v223 = *(_OWORD *)v214;
      v224 = (uint64_t)v223;
      if (v216 == v217)
        goto LABEL_202;
    }
    else
    {
      v222 = 0;
      v223 = (char *)(16 * v218);
      *(_OWORD *)(16 * v218) = *(_OWORD *)v214;
      v224 = 16 * v218;
      if (v216 == v217)
        goto LABEL_202;
    }
    do
    {
      *(_OWORD *)(v224 - 16) = *(v216 - 1);
      v224 -= 16;
      --v216;
    }
    while (v216 != v217);
    v216 = (_OWORD *)*v213;
LABEL_202:
    v212 = v223 + 16;
    *v213 = v224;
    v213[1] = v223 + 16;
    v213[2] = &v222[16 * v221];
    if (v216)
      operator delete(v216);
    goto LABEL_187;
  }
LABEL_205:
  if ((_DWORD)v195 && (v195 & 0x80000000) == 0)
  {
    v225 = 0;
    do
    {
      v227 = v633;
      v228 = &v642[40 * v225];
      v230 = (_OWORD *)*((_QWORD *)v633 + 1);
      v229 = *((_QWORD *)v633 + 2);
      if ((unint64_t)v230 < v229)
      {
        *v230 = *(_OWORD *)v228;
        v226 = v230 + 1;
      }
      else
      {
        v231 = *(_OWORD **)v633;
        v232 = ((uint64_t)v230 - *(_QWORD *)v633) >> 4;
        v233 = v232 + 1;
        if ((unint64_t)(v232 + 1) >> 60)
          goto LABEL_635;
        v234 = v229 - (_QWORD)v231;
        if (v234 >> 3 > v233)
          v233 = v234 >> 3;
        if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF0)
          v235 = 0xFFFFFFFFFFFFFFFLL;
        else
          v235 = v233;
        if (v235)
        {
          if (v235 >> 60)
            goto LABEL_637;
          v236 = (char *)operator new(16 * v235);
        }
        else
        {
          v236 = 0;
        }
        v237 = &v236[16 * v232];
        *(_OWORD *)v237 = *(_OWORD *)v228;
        v238 = v237;
        if (v230 != v231)
        {
          do
          {
            *((_OWORD *)v238 - 1) = *(v230 - 1);
            v238 -= 16;
            --v230;
          }
          while (v230 != v231);
          v230 = (_OWORD *)*v227;
        }
        v226 = v237 + 16;
        *v227 = v238;
        v227[1] = v237 + 16;
        v227[2] = &v236[16 * v235];
        if (v230)
          operator delete(v230);
      }
      v227[1] = v226;
      v9 = (uint64_t)v640;
      v195 = *(int *)&v640[40 * v615 + 16];
      v197 = v225++ < v195;
    }
    while (v197);
  }
LABEL_227:
  v239 = v9 + 40 * v598;
  v242 = *(_DWORD *)(v239 + 16);
  v241 = (int *)(v239 + 16);
  v240 = v242;
  if ((int)v195 < v242)
  {
    v604 = (int *)operator new(8uLL);
    *(_QWORD *)v604 = v195 | (unint64_t)(v240 << 32);
    v610 = v604 + 2;
    goto LABEL_247;
  }
  v243 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3) - 1;
  if (v243 == (int)v195)
  {
    v604 = 0;
    v244 = 0;
    v610 = 0;
    v245 = v240;
    if (!(_DWORD)v240)
      goto LABEL_247;
  }
  else
  {
    v604 = (int *)operator new(8uLL);
    *(_QWORD *)v604 = v195 | (v243 << 32);
    v244 = v604 + 2;
    v245 = *v241;
    v610 = v604 + 2;
    if (!(_DWORD)v245)
      goto LABEL_247;
  }
  v246 = (char *)v244 - (char *)v604;
  v247 = ((char *)v244 - (char *)v604) >> 3;
  v248 = v247 + 1;
  if ((unint64_t)(v247 + 1) >> 61)
    sub_1BE61F930();
  if (v246 >> 2 > v248)
    v248 = v246 >> 2;
  if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8)
    v248 = 0x1FFFFFFFFFFFFFFFLL;
  if (v248)
  {
    if (v248 >> 61)
      sub_1BE61F100();
    v249 = (char *)operator new(8 * v248);
  }
  else
  {
    v249 = 0;
  }
  v250 = &v249[8 * v247];
  *(_QWORD *)v250 = v245 << 32;
  v610 = (int *)(v250 + 8);
  if (v244 != v604)
  {
    v251 = ((char *)v244 - (char *)v604 - 8) & 0xFFFFFFFFFFFFFFF8;
    v250 = &v249[v246 - v251 - 8];
    memcpy(v250, (char *)v244 - v251 - 8, v251 + 8);
  }
  if (v604)
    operator delete(v604);
  v604 = (int *)v250;
LABEL_247:
  v252 = *v241;
  LODWORD(v253) = *(_DWORD *)(v9 + 40 * v613 + 16);
  if ((int)v252 < (int)v253)
  {
    while (1)
    {
      v255 = v633;
      v256 = &v642[40 * v252];
      v258 = (_OWORD *)*((_QWORD *)v633 + 10);
      v257 = *((_QWORD *)v633 + 11);
      if ((unint64_t)v258 >= v257)
        break;
      *v258 = *(_OWORD *)v256;
      v254 = v258 + 1;
LABEL_250:
      v255[10] = v254;
      v9 = (uint64_t)v640;
      v253 = *(int *)&v640[40 * v613 + 16];
      v197 = (uint64_t)v252++ < v253;
      if (!v197)
        goto LABEL_315;
    }
    v259 = (_OWORD **)((char *)v633 + 72);
    v260 = (_OWORD *)*((_QWORD *)v633 + 9);
    v261 = v258 - v260;
    v262 = v261 + 1;
    if ((unint64_t)(v261 + 1) >> 60)
      goto LABEL_635;
    v263 = v257 - (_QWORD)v260;
    if (v263 >> 3 > v262)
      v262 = v263 >> 3;
    if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF0)
      v264 = 0xFFFFFFFFFFFFFFFLL;
    else
      v264 = v262;
    if (v264)
    {
      if (v264 >> 60)
        goto LABEL_637;
      v265 = (char *)operator new(16 * v264);
      v266 = &v265[16 * v261];
      *(_OWORD *)v266 = *(_OWORD *)v256;
      v267 = (uint64_t)v266;
      if (v258 == v260)
        goto LABEL_266;
    }
    else
    {
      v265 = 0;
      v266 = (char *)(16 * v261);
      *(_OWORD *)(16 * v261) = *(_OWORD *)v256;
      v267 = 16 * v261;
      if (v258 == v260)
        goto LABEL_266;
    }
    do
    {
      *(_OWORD *)(v267 - 16) = *(v258 - 1);
      v267 -= 16;
      --v258;
    }
    while (v258 != v260);
    v258 = *v259;
LABEL_266:
    v254 = v266 + 16;
    v255[9] = v267;
    v255[10] = v266 + 16;
    v255[11] = &v265[16 * v264];
    if (v258)
      operator delete(v258);
    goto LABEL_250;
  }
  v268 = v642;
  v269 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3);
  if (v269 > v252 && v269 - 1 != v252)
  {
    while (1)
    {
      v272 = v633;
      v273 = &v268[40 * v252];
      v275 = (_OWORD *)*((_QWORD *)v633 + 10);
      v274 = *((_QWORD *)v633 + 11);
      if ((unint64_t)v275 >= v274)
        break;
      *v275 = *(_OWORD *)v273;
      v271 = v275 + 1;
LABEL_274:
      v272[10] = v271;
      ++v252;
      v268 = v642;
      if (0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3) <= v252)
      {
        v9 = (uint64_t)v640;
        LODWORD(v253) = *(_DWORD *)&v640[40 * v613 + 16];
        goto LABEL_293;
      }
    }
    v276 = (_OWORD **)((char *)v633 + 72);
    v277 = (_OWORD *)*((_QWORD *)v633 + 9);
    v278 = v275 - v277;
    v279 = v278 + 1;
    if ((unint64_t)(v278 + 1) >> 60)
      goto LABEL_635;
    v280 = v274 - (_QWORD)v277;
    if (v280 >> 3 > v279)
      v279 = v280 >> 3;
    if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF0)
      v281 = 0xFFFFFFFFFFFFFFFLL;
    else
      v281 = v279;
    if (v281)
    {
      if (v281 >> 60)
        goto LABEL_637;
      v282 = (char *)operator new(16 * v281);
      v283 = &v282[16 * v278];
      *(_OWORD *)v283 = *(_OWORD *)v273;
      v284 = (uint64_t)v283;
      if (v275 == v277)
        goto LABEL_289;
    }
    else
    {
      v282 = 0;
      v283 = (char *)(16 * v278);
      *(_OWORD *)(16 * v278) = *(_OWORD *)v273;
      v284 = 16 * v278;
      if (v275 == v277)
        goto LABEL_289;
    }
    do
    {
      *(_OWORD *)(v284 - 16) = *(v275 - 1);
      v284 -= 16;
      --v275;
    }
    while (v275 != v277);
    v275 = *v276;
LABEL_289:
    v271 = v283 + 16;
    v272[9] = v284;
    v272[10] = v283 + 16;
    v272[11] = &v282[16 * v281];
    if (v275)
      operator delete(v275);
    goto LABEL_274;
  }
LABEL_293:
  if ((_DWORD)v253 && (v253 & 0x80000000) == 0)
  {
    v285 = 0;
    do
    {
      v287 = v633;
      v288 = &v642[40 * v285];
      v290 = (_OWORD *)*((_QWORD *)v633 + 10);
      v289 = *((_QWORD *)v633 + 11);
      if ((unint64_t)v290 < v289)
      {
        *v290 = *(_OWORD *)v288;
        v286 = v290 + 1;
      }
      else
      {
        v291 = (_OWORD **)((char *)v633 + 72);
        v292 = (_OWORD *)*((_QWORD *)v633 + 9);
        v293 = v290 - v292;
        v294 = v293 + 1;
        if ((unint64_t)(v293 + 1) >> 60)
          goto LABEL_635;
        v295 = v289 - (_QWORD)v292;
        if (v295 >> 3 > v294)
          v294 = v295 >> 3;
        if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF0)
          v296 = 0xFFFFFFFFFFFFFFFLL;
        else
          v296 = v294;
        if (v296)
        {
          if (v296 >> 60)
            goto LABEL_637;
          v297 = (char *)operator new(16 * v296);
        }
        else
        {
          v297 = 0;
        }
        v298 = &v297[16 * v293];
        *(_OWORD *)v298 = *(_OWORD *)v288;
        v299 = v298;
        if (v290 != v292)
        {
          do
          {
            *((_OWORD *)v299 - 1) = *(v290 - 1);
            v299 -= 16;
            --v290;
          }
          while (v290 != v292);
          v290 = *v291;
        }
        v286 = v298 + 16;
        v287[9] = v299;
        v287[10] = v298 + 16;
        v287[11] = &v297[16 * v296];
        if (v290)
          operator delete(v290);
      }
      v287[10] = v286;
      v9 = (uint64_t)v640;
      v253 = *(int *)&v640[40 * v613 + 16];
      v197 = v285++ < v253;
    }
    while (v197);
  }
LABEL_315:
  v300 = v9 + 40 * v603;
  v303 = *(_DWORD *)(v300 + 16);
  v302 = (int *)(v300 + 16);
  v301 = v303;
  if ((int)v253 < v303)
  {
    v605 = (int *)operator new(8uLL);
    *(_QWORD *)v605 = v253 | (unint64_t)(v301 << 32);
    v599 = v605 + 2;
    goto LABEL_335;
  }
  v304 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3) - 1;
  if (v304 == (int)v253)
  {
    v605 = 0;
    v305 = 0;
    v599 = 0;
    v306 = v301;
    if (!(_DWORD)v301)
      goto LABEL_335;
  }
  else
  {
    v605 = (int *)operator new(8uLL);
    *(_QWORD *)v605 = v253 | (v304 << 32);
    v305 = v605 + 2;
    v306 = *v302;
    v599 = v605 + 2;
    if (!(_DWORD)v306)
      goto LABEL_335;
  }
  v307 = (char *)v305 - (char *)v605;
  v308 = ((char *)v305 - (char *)v605) >> 3;
  v309 = v308 + 1;
  if ((unint64_t)(v308 + 1) >> 61)
    sub_1BE61F930();
  if (v307 >> 2 > v309)
    v309 = v307 >> 2;
  if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
    v309 = 0x1FFFFFFFFFFFFFFFLL;
  if (v309)
  {
    if (v309 >> 61)
      sub_1BE61F100();
    v310 = (char *)operator new(8 * v309);
  }
  else
  {
    v310 = 0;
  }
  v311 = &v310[8 * v308];
  *(_QWORD *)v311 = v306 << 32;
  v599 = (int *)(v311 + 8);
  if (v305 != v605)
  {
    v312 = ((char *)v305 - (char *)v605 - 8) & 0xFFFFFFFFFFFFFFF8;
    v311 = &v310[v307 - v312 - 8];
    memcpy(v311, (char *)v305 - v312 - 8, v312 + 8);
  }
  if (v605)
    operator delete(v605);
  v605 = (int *)v311;
LABEL_335:
  v313 = *v302;
  v314 = *(_DWORD *)(v9 + 40 * v617 + 16);
  if ((int)v313 < v314)
  {
    while (1)
    {
      v316 = v633;
      v317 = &v642[40 * v313];
      v319 = (_OWORD *)*((_QWORD *)v633 + 19);
      v318 = *((_QWORD *)v633 + 20);
      if ((unint64_t)v319 >= v318)
        break;
      *v319 = *(_OWORD *)v317;
      v315 = v319 + 1;
LABEL_338:
      v316[19] = v315;
      v9 = (uint64_t)v640;
      v197 = (uint64_t)v313++ < *(int *)&v640[40 * v617 + 16];
      if (!v197)
        goto LABEL_402;
    }
    v320 = (_OWORD **)((char *)v633 + 144);
    v321 = (_OWORD *)*((_QWORD *)v633 + 18);
    v322 = v319 - v321;
    v323 = v322 + 1;
    if ((unint64_t)(v322 + 1) >> 60)
      goto LABEL_635;
    v324 = v318 - (_QWORD)v321;
    if (v324 >> 3 > v323)
      v323 = v324 >> 3;
    if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF0)
      v325 = 0xFFFFFFFFFFFFFFFLL;
    else
      v325 = v323;
    if (v325)
    {
      if (v325 >> 60)
        goto LABEL_637;
      v326 = (char *)operator new(16 * v325);
      v327 = &v326[16 * v322];
      *(_OWORD *)v327 = *(_OWORD *)v317;
      v328 = (uint64_t)v327;
      if (v319 == v321)
        goto LABEL_354;
    }
    else
    {
      v326 = 0;
      v327 = (char *)(16 * v322);
      *(_OWORD *)(16 * v322) = *(_OWORD *)v317;
      v328 = 16 * v322;
      if (v319 == v321)
        goto LABEL_354;
    }
    do
    {
      *(_OWORD *)(v328 - 16) = *(v319 - 1);
      v328 -= 16;
      --v319;
    }
    while (v319 != v321);
    v319 = *v320;
LABEL_354:
    v315 = v327 + 16;
    v316[18] = v328;
    v316[19] = v327 + 16;
    v316[20] = &v326[16 * v325];
    if (v319)
      operator delete(v319);
    goto LABEL_338;
  }
  v329 = v642;
  v330 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3);
  if (v330 > v313 && v330 - 1 != v313)
  {
    while (1)
    {
      v333 = v633;
      v334 = &v329[40 * v313];
      v336 = (_OWORD *)*((_QWORD *)v633 + 19);
      v335 = *((_QWORD *)v633 + 20);
      if ((unint64_t)v336 >= v335)
        break;
      *v336 = *(_OWORD *)v334;
      v332 = v336 + 1;
LABEL_362:
      v333[19] = v332;
      ++v313;
      v329 = v642;
      if (0xCCCCCCCCCCCCCCCDLL * ((v643 - v642) >> 3) <= v313)
      {
        v9 = (uint64_t)v640;
        v314 = *(_DWORD *)&v640[40 * v617 + 16];
        goto LABEL_381;
      }
    }
    v337 = (_OWORD **)((char *)v633 + 144);
    v338 = (_OWORD *)*((_QWORD *)v633 + 18);
    v339 = v336 - v338;
    v340 = v339 + 1;
    if ((unint64_t)(v339 + 1) >> 60)
      goto LABEL_635;
    v341 = v335 - (_QWORD)v338;
    if (v341 >> 3 > v340)
      v340 = v341 >> 3;
    if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF0)
      v342 = 0xFFFFFFFFFFFFFFFLL;
    else
      v342 = v340;
    if (v342)
    {
      if (v342 >> 60)
        goto LABEL_637;
      v343 = (char *)operator new(16 * v342);
      v344 = &v343[16 * v339];
      *(_OWORD *)v344 = *(_OWORD *)v334;
      v345 = (uint64_t)v344;
      if (v336 == v338)
        goto LABEL_377;
    }
    else
    {
      v343 = 0;
      v344 = (char *)(16 * v339);
      *(_OWORD *)(16 * v339) = *(_OWORD *)v334;
      v345 = 16 * v339;
      if (v336 == v338)
        goto LABEL_377;
    }
    do
    {
      *(_OWORD *)(v345 - 16) = *(v336 - 1);
      v345 -= 16;
      --v336;
    }
    while (v336 != v338);
    v336 = *v337;
LABEL_377:
    v332 = v344 + 16;
    v333[18] = v345;
    v333[19] = v344 + 16;
    v333[20] = &v343[16 * v342];
    if (v336)
      operator delete(v336);
    goto LABEL_362;
  }
LABEL_381:
  if (v314 >= 1)
  {
    v346 = 0;
    while (1)
    {
      v348 = v633;
      v349 = &v642[40 * v346];
      v351 = (_OWORD *)*((_QWORD *)v633 + 19);
      v350 = *((_QWORD *)v633 + 20);
      if ((unint64_t)v351 >= v350)
        break;
      *v351 = *(_OWORD *)v349;
      v347 = v351 + 1;
LABEL_384:
      v348[19] = v347;
      v9 = (uint64_t)v640;
      v197 = v346++ < *(int *)&v640[40 * v617 + 16];
      if (!v197)
        goto LABEL_402;
    }
    v352 = (_OWORD **)((char *)v633 + 144);
    v353 = (_OWORD *)*((_QWORD *)v633 + 18);
    v354 = v351 - v353;
    v355 = v354 + 1;
    if ((unint64_t)(v354 + 1) >> 60)
      goto LABEL_635;
    v356 = v350 - (_QWORD)v353;
    if (v356 >> 3 > v355)
      v355 = v356 >> 3;
    if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF0)
      v357 = 0xFFFFFFFFFFFFFFFLL;
    else
      v357 = v355;
    if (v357)
    {
      if (v357 >> 60)
        goto LABEL_637;
      v358 = (char *)operator new(16 * v357);
      v359 = &v358[16 * v354];
      *(_OWORD *)v359 = *(_OWORD *)v349;
      v360 = (uint64_t)v359;
      if (v351 == v353)
        goto LABEL_400;
    }
    else
    {
      v358 = 0;
      v359 = (char *)(16 * v354);
      *(_OWORD *)(16 * v354) = *(_OWORD *)v349;
      v360 = 16 * v354;
      if (v351 == v353)
        goto LABEL_400;
    }
    do
    {
      *(_OWORD *)(v360 - 16) = *(v351 - 1);
      v360 -= 16;
      --v351;
    }
    while (v351 != v353);
    v351 = *v352;
LABEL_400:
    v347 = v359 + 16;
    v348[18] = v360;
    v348[19] = v359 + 16;
    v348[20] = &v358[16 * v357];
    if (v351)
      operator delete(v351);
    goto LABEL_384;
  }
LABEL_402:
  v361 = (float *)operator new[]();
  v362 = v604;
  v363 = (float *)operator new[]();
  v621 = operator new[]();
  v364 = (int *)operator new[]();
  v365 = v364;
  v366 = sqrtf(v607);
  if (v610 == v604 || v599 == v605)
  {
    v630 = 0;
    v631 = 0;
    v394 = 1;
    v600 = v602;
    v632 = 0;
  }
  else
  {
    _D4 = v609;
    v368 = (*(double *)(v9 + 40 * v615) - v602.f64[0]) * v609.f32[1]
         - (*(double *)(v9 + 40 * v615 + 8) - v602.f64[1]) * v609.f32[0];
    if (v368 <= 0.0)
      v369 = 1.0;
    else
      v369 = -1.0;
    v370 = *v604;
    v371 = v642;
    v372 = (double *)&v642[40 * *v604 + 40];
    v373 = (double *)&v642[40 * *v604];
    _S0 = *v372 - *v373;
    v375 = v372[1] - v373[1];
    *v363 = -(float)(vmuls_lane_f32(v375, v609, 1) + (float)(_S0 * v609.f32[0]));
    v376 = -v609.f32[0];
    __asm { FMLA            S1, S0, V4.S[1] }
    *v361 = v369 * _S1;
    *v364 = v370;
    v378 = 1;
    do
    {
      v379 = *v362;
      if (v378 == 1)
        v380 = v379 + 1;
      else
        v380 = *v362;
      if (v380 < v362[1])
      {
        v381 = 0;
        if (v378 == 1)
          ++v379;
        v382 = v378;
        v383 = &v365[v382];
        v384 = (double *)&v371[40 * v379 + 40];
        v385 = &v363[v382];
        v386 = &v361[v382];
        do
        {
          v387 = *v384 - *(v384 - 5);
          v388 = v384[1] - *(v384 - 4);
          v389 = *(v386 - 1);
          *v386++ = v389 + (float)(v369 * (float)((float)(v376 * v388) + (float)(v387 * v609.f32[1])));
          v390 = *(v385 - 1);
          v391 = (float)(v609.f32[1] * v388) + (float)(v387 * v609.f32[0]);
          if (v389 <= v390)
            v392 = *(v385 - 1);
          else
            v392 = v389;
          if (v389 <= v390)
            v393 = 67;
          else
            v393 = 79;
          *v385++ = v392 - v391;
          *(_BYTE *)(v621 + v378 + v381) = v393;
          v383[v381] = v379 + v381;
          ++v381;
          v384 += 5;
        }
        while (v379 + v381 < v362[1]);
        v378 += v381;
      }
      v362 += 2;
    }
    while (v362 != v610);
    v606 = v363;
    v608 = v361;
    v395 = v378;
    if (v378 >= 1)
      v396 = 1;
    else
      v396 = v378;
    v593 = v396;
    v594 = v396 - 1;
    v611 = v365;
    while ((int)v395 > 1)
    {
      v397 = v395--;
      v398 = v633;
      v399 = &v642[40 * v365[v395]];
      v401 = (_OWORD *)*((_QWORD *)v633 + 7);
      v400 = *((_QWORD *)v633 + 8);
      if ((unint64_t)v401 < v400)
      {
        *v401 = *(_OWORD *)v399;
        v398[7] = v401 + 1;
        if (*(_BYTE *)(v621 + v395) == 79)
          goto LABEL_448;
      }
      else
      {
        v402 = (_OWORD **)((char *)v633 + 48);
        v403 = (_OWORD *)*((_QWORD *)v633 + 6);
        v404 = v401 - v403;
        v405 = v404 + 1;
        if ((unint64_t)(v404 + 1) >> 60)
          goto LABEL_634;
        v406 = v400 - (_QWORD)v403;
        if (v406 >> 3 > v405)
          v405 = v406 >> 3;
        if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFF0)
          v407 = 0xFFFFFFFFFFFFFFFLL;
        else
          v407 = v405;
        if (v407)
        {
          if (v407 >> 60)
            goto LABEL_636;
          v408 = (char *)operator new(16 * v407);
          _D4.i32[0] = v609.i32[0];
          v409 = &v408[16 * v404];
          *(_OWORD *)v409 = *(_OWORD *)v399;
          v410 = (uint64_t)v409;
          if (v401 == v403)
            goto LABEL_445;
          do
          {
LABEL_443:
            *(_OWORD *)(v410 - 16) = *(v401 - 1);
            v410 -= 16;
            --v401;
          }
          while (v401 != v403);
          v401 = *v402;
          goto LABEL_445;
        }
        v408 = 0;
        v409 = (char *)(16 * v404);
        *(_OWORD *)(16 * v404) = *(_OWORD *)v399;
        v410 = 16 * v404;
        if (v401 != v403)
          goto LABEL_443;
LABEL_445:
        v411 = v409 + 16;
        v398[6] = v410;
        v398[7] = v409 + 16;
        v398[8] = &v408[16 * v407];
        if (v401)
        {
          operator delete(v401);
          _D4.i32[0] = v609.i32[0];
        }
        v365 = v611;
        v398[7] = v411;
        if (*(_BYTE *)(v621 + v395) == 79)
        {
LABEL_448:
          v594 = v395;
          goto LABEL_450;
        }
      }
    }
    v397 = v593;
LABEL_450:
    v197 = v397 < 1;
    v413 = v606;
    v412 = v608;
    if (!v197)
    {
      v414 = v594;
      while (1)
      {
        while (1)
        {
          v415 = v633;
          v416 = &v642[40 * v365[v414]];
          v418 = (_OWORD *)*((_QWORD *)v633 + 4);
          v417 = *((_QWORD *)v633 + 5);
          if ((unint64_t)v418 >= v417)
            break;
          *v418 = *(_OWORD *)v416;
          v415[4] = v418 + 1;
          v197 = (int)v414-- <= 0;
          if (v197)
            goto LABEL_471;
        }
        v419 = (_OWORD **)((char *)v633 + 24);
        v420 = (_OWORD *)*((_QWORD *)v633 + 3);
        v421 = v418 - v420;
        v422 = v421 + 1;
        if ((unint64_t)(v421 + 1) >> 60)
          goto LABEL_634;
        v423 = v417 - (_QWORD)v420;
        if (v423 >> 3 > v422)
          v422 = v423 >> 3;
        v424 = (unint64_t)v423 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v422;
        if (v424)
          break;
        v425 = 0;
        v426 = (char *)(16 * v421);
        *(_OWORD *)(16 * v421) = *(_OWORD *)v416;
        v427 = 16 * v421;
        if (v418 != v420)
          goto LABEL_465;
LABEL_467:
        v428 = v426 + 16;
        v415[3] = v427;
        v415[4] = v426 + 16;
        v415[5] = &v425[16 * v424];
        v413 = v606;
        v412 = v608;
        if (v418)
        {
          operator delete(v418);
          _D4.i32[0] = v609.i32[0];
        }
        v365 = v611;
        v415[4] = v428;
        v197 = (int)v414-- <= 0;
        if (v197)
          goto LABEL_471;
      }
      if (v424 >> 60)
        goto LABEL_636;
      v425 = (char *)operator new(16 * v424);
      _D4.i32[0] = v609.i32[0];
      v426 = &v425[16 * v421];
      *(_OWORD *)v426 = *(_OWORD *)v416;
      v427 = (uint64_t)v426;
      if (v418 == v420)
        goto LABEL_467;
      do
      {
LABEL_465:
        *(_OWORD *)(v427 - 16) = *(v418 - 1);
        v427 -= 16;
        --v418;
      }
      while (v418 != v420);
      v418 = *v419;
      goto LABEL_467;
    }
LABEL_471:
    v429 = *v605;
    v430 = v642;
    v431 = (double *)&v642[40 * *v605 + 40];
    v432 = (double *)&v642[40 * *v605];
    v433 = *v431 - *v432;
    v434 = v431[1] - v432[1];
    *v413 = (float)(v609.f32[1] * v434) + (float)(v433 * _D4.f32[0]);
    *v412 = v369 * (float)((float)(v376 * v434) + (float)(v433 * v609.f32[1]));
    *v365 = v429;
    v435 = 1;
    v436 = v605;
    do
    {
      v437 = *v436;
      if (v435 == 1)
        v438 = v437 + 1;
      else
        v438 = *v436;
      if (v438 < v436[1])
      {
        v439 = 0;
        if (v435 == 1)
          ++v437;
        v440 = v435;
        v441 = &v365[v440];
        v442 = (double *)&v430[40 * v437 + 40];
        v443 = &v412[v440];
        v444 = &v413[v440];
        do
        {
          v445 = *v442 - *(v442 - 5);
          v446 = v442[1] - *(v442 - 4);
          v447 = *(v444 - 1);
          *v444++ = v447 + (float)((float)(v609.f32[1] * v446) + (float)(v445 * _D4.f32[0]));
          v448 = *(v443 - 1);
          v449 = (float)(v376 * v446) + (float)(v445 * v609.f32[1]);
          if (v448 <= v447)
            v450 = v447;
          else
            v450 = *(v443 - 1);
          if (v448 <= v447)
            v451 = 67;
          else
            v451 = 79;
          *v443++ = v450 + (float)(v369 * v449);
          *(_BYTE *)(v621 + v435 + v439) = v451;
          v441[v439] = v437 + v439;
          ++v439;
          v442 += 5;
        }
        while (v437 + v439 < v436[1]);
        v435 += v439;
      }
      v436 += 2;
    }
    while (v436 != v599);
    v452 = v633;
    v453 = &v640[40 * v603];
    v455 = (_OWORD *)*((_QWORD *)v633 + 16);
    v454 = *((_QWORD *)v633 + 17);
    if ((unint64_t)v455 >= v454)
    {
      v457 = (_OWORD **)((char *)v633 + 120);
      v458 = (_OWORD *)*((_QWORD *)v633 + 15);
      v459 = v455 - v458;
      v460 = v459 + 1;
      if ((unint64_t)(v459 + 1) >> 60)
LABEL_634:
        sub_1BE61F930();
      v461 = v454 - (_QWORD)v458;
      if (v461 >> 3 > v460)
        v460 = v461 >> 3;
      if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFF0)
        v462 = 0xFFFFFFFFFFFFFFFLL;
      else
        v462 = v460;
      if (v462)
      {
        if (v462 >> 60)
LABEL_636:
          sub_1BE61F100();
        v463 = (char *)operator new(16 * v462);
      }
      else
      {
        v463 = 0;
      }
      v464 = &v463[16 * v459];
      *(_OWORD *)v464 = *(_OWORD *)v453;
      v456 = v464 + 16;
      if (v455 == v458)
      {
        v365 = v611;
      }
      else
      {
        v365 = v611;
        do
        {
          *((_OWORD *)v464 - 1) = *(v455 - 1);
          v464 -= 16;
          --v455;
        }
        while (v455 != v458);
        v455 = *v457;
      }
      v452[15] = v464;
      v452[16] = v456;
      v452[17] = &v463[16 * v462];
      if (v455)
        operator delete(v455);
    }
    else
    {
      *v455 = *(_OWORD *)v453;
      v456 = v455 + 1;
    }
    v452[16] = v456;
    v465 = v435;
    if (v435 >= 1)
      v466 = 1;
    else
      v466 = v435;
    v595 = v466;
    v601 = v466 - 1;
    while ((int)v465 > 1)
    {
      v467 = v465--;
      v468 = v633;
      v469 = &v642[40 * v365[v465]];
      v471 = (_OWORD *)*((_QWORD *)v633 + 16);
      v470 = *((_QWORD *)v633 + 17);
      if ((unint64_t)v471 < v470)
      {
        *v471 = *(_OWORD *)v469;
        v468[16] = v471 + 1;
        if (*(_BYTE *)(v621 + v465) == 67)
          goto LABEL_530;
      }
      else
      {
        v472 = (_OWORD **)((char *)v633 + 120);
        v473 = (_OWORD *)*((_QWORD *)v633 + 15);
        v474 = v471 - v473;
        v475 = v474 + 1;
        if ((unint64_t)(v474 + 1) >> 60)
          goto LABEL_634;
        v476 = v470 - (_QWORD)v473;
        if (v476 >> 3 > v475)
          v475 = v476 >> 3;
        if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFF0)
          v477 = 0xFFFFFFFFFFFFFFFLL;
        else
          v477 = v475;
        if (v477)
        {
          if (v477 >> 60)
            goto LABEL_636;
          v478 = (char *)operator new(16 * v477);
          v479 = &v478[16 * v474];
          *(_OWORD *)v479 = *(_OWORD *)v469;
          v480 = (uint64_t)v479;
          if (v471 == v473)
            goto LABEL_527;
          do
          {
LABEL_525:
            *(_OWORD *)(v480 - 16) = *(v471 - 1);
            v480 -= 16;
            --v471;
          }
          while (v471 != v473);
          v471 = *v472;
          goto LABEL_527;
        }
        v478 = 0;
        v479 = (char *)(16 * v474);
        *(_OWORD *)(16 * v474) = *(_OWORD *)v469;
        v480 = 16 * v474;
        if (v471 != v473)
          goto LABEL_525;
LABEL_527:
        v481 = v479 + 16;
        v468[15] = v480;
        v468[16] = v479 + 16;
        v468[17] = &v478[16 * v477];
        if (v471)
          operator delete(v471);
        v365 = v611;
        v468[16] = v481;
        if (*(_BYTE *)(v621 + v465) == 67)
        {
LABEL_530:
          v482 = v465;
          goto LABEL_532;
        }
      }
    }
    v467 = v595;
    v482 = v601;
LABEL_532:
    if (v467 >= 1)
    {
      v483 = v482;
      while (1)
      {
        while (1)
        {
          v484 = v633;
          v485 = &v642[40 * v365[v483]];
          v487 = (_OWORD *)*((_QWORD *)v633 + 13);
          v486 = *((_QWORD *)v633 + 14);
          if ((unint64_t)v487 >= v486)
            break;
          *v487 = *(_OWORD *)v485;
          v484[13] = v487 + 1;
          v197 = (int)v483-- <= 0;
          if (v197)
            goto LABEL_553;
        }
        v488 = (_OWORD **)((char *)v633 + 96);
        v489 = (_OWORD *)*((_QWORD *)v633 + 12);
        v490 = v487 - v489;
        v491 = v490 + 1;
        if ((unint64_t)(v490 + 1) >> 60)
          goto LABEL_634;
        v492 = v486 - (_QWORD)v489;
        if (v492 >> 3 > v491)
          v491 = v492 >> 3;
        v493 = (unint64_t)v492 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v491;
        if (v493)
          break;
        v494 = 0;
        v495 = (char *)(16 * v490);
        *(_OWORD *)(16 * v490) = *(_OWORD *)v485;
        v496 = 16 * v490;
        if (v487 != v489)
          goto LABEL_547;
LABEL_549:
        v497 = v495 + 16;
        v484[12] = v496;
        v484[13] = v495 + 16;
        v484[14] = &v494[16 * v493];
        if (v487)
          operator delete(v487);
        v365 = v611;
        v484[13] = v497;
        v197 = (int)v483-- <= 0;
        if (v197)
          goto LABEL_553;
      }
      if (v493 >> 60)
        goto LABEL_636;
      v494 = (char *)operator new(16 * v493);
      v495 = &v494[16 * v490];
      *(_OWORD *)v495 = *(_OWORD *)v485;
      v496 = (uint64_t)v495;
      if (v487 == v489)
        goto LABEL_549;
      do
      {
LABEL_547:
        *(_OWORD *)(v496 - 16) = *(v487 - 1);
        v496 -= 16;
        --v487;
      }
      while (v487 != v489);
      v487 = *v488;
      goto LABEL_549;
    }
LABEL_553:
    v631 = 0;
    v632 = 0;
    v630 = 0;
    if (*((_QWORD *)v633 + 1) - *(_QWORD *)v633 >= 0x20uLL)
    {
      v362 = v604;
      v363 = v606;
      v361 = v608;
      if (*((_QWORD *)v633 + 4) - *((_QWORD *)v633 + 3) >= 0x20uLL
        && *((_QWORD *)v633 + 7) - *((_QWORD *)v633 + 6) >= 0x20uLL
        && *((_QWORD *)v633 + 13) - *((_QWORD *)v633 + 12) >= 0x20uLL
        && *((_QWORD *)v633 + 16) - *((_QWORD *)v633 + 15) >= 0x20uLL
        && *((_QWORD *)v633 + 19) - *((_QWORD *)v633 + 18) >= 0x20uLL)
      {
        v551 = operator new(0x1CuLL);
        v552 = 0;
        v553 = 0;
        v554 = 0;
        *v551 = 0;
        v551[1] = 0;
        *((_DWORD *)v551 + 6) = 0;
        v596 = (float *)v551;
        v551[2] = 0;
        do
        {
          while (1)
          {
            v555 = (char *)v633 + 24 * v554;
            v626 = 0;
            v627 = 0;
            v625 = 0;
            v557 = *(_BYTE **)v555;
            v556 = (_BYTE *)*((_QWORD *)v555 + 1);
            v558 = v556 - v557;
            if (v556 == v557)
            {
              v559 = 0;
            }
            else
            {
              if (v558 < 0)
                sub_1BE61F930();
              v559 = (char *)operator new(v556 - v557);
              v625 = v559;
              v627 = &v559[16 * (v558 >> 4)];
              memcpy(v559, v557, v558);
              v626 = &v559[16 * (v558 >> 4)];
            }
            sub_1BE8C4570((uint64_t)__p, (uint64_t)&v625, 0);
            if (v553 >= v632)
            {
              v562 = 0xCCCCCCCCCCCCCCCDLL * ((v553 - (char *)v552) >> 3) + 1;
              if (v562 > 0x666666666666666)
                sub_1BE61F930();
              if (0x999999999999999ALL * ((v632 - (char *)v552) >> 3) > v562)
                v562 = 0x999999999999999ALL * ((v632 - (char *)v552) >> 3);
              v563 = 0xCCCCCCCCCCCCCCCDLL * ((v632 - (char *)v552) >> 3) >= 0x333333333333333
                   ? 0x666666666666666
                   : v562;
              if (v563)
              {
                if (v563 > 0x666666666666666)
                  sub_1BE61F100();
                v564 = (char *)operator new(40 * v563);
              }
              else
              {
                v564 = 0;
              }
              v565 = &v564[8 * ((v553 - (char *)v552) >> 3)];
              v566 = *(_OWORD *)&__p[16];
              *(_OWORD *)v565 = *(_OWORD *)__p;
              *((_OWORD *)v565 + 1) = v566;
              *((_QWORD *)v565 + 4) = v629;
              if (v553 == (char *)v552)
              {
                v570 = &v564[8 * ((v553 - (char *)v552) >> 3)];
              }
              else
              {
                v567 = &v564[8 * ((v553 - (char *)v552) >> 3)];
                do
                {
                  v568 = *(_OWORD *)(v553 - 40);
                  v569 = *(_OWORD *)(v553 - 24);
                  v570 = v567 - 40;
                  *((_DWORD *)v567 - 2) = *((_DWORD *)v553 - 2);
                  *(_OWORD *)(v567 - 24) = v569;
                  *(_OWORD *)(v567 - 40) = v568;
                  v553 -= 40;
                  v567 -= 40;
                }
                while (v553 != (char *)v552);
              }
              v553 = v565 + 40;
              v630 = v570;
              v631 = v565 + 40;
              v632 = &v564[40 * v563];
              if (v552)
              {
                operator delete(v552);
                v559 = v625;
              }
              v552 = (float64x2_t *)v570;
            }
            else
            {
              v560 = *(_OWORD *)__p;
              v561 = *(_OWORD *)&__p[16];
              *((_QWORD *)v553 + 4) = v629;
              *(_OWORD *)v553 = v560;
              *((_OWORD *)v553 + 1) = v561;
              v553 += 40;
            }
            v631 = v553;
            if (v559)
            {
              v626 = v559;
              operator delete(v559);
            }
            v571 = (char *)v633 + 24 * v554;
            v623 = 0;
            v624 = 0;
            v622 = 0;
            v573 = *(_BYTE **)v571;
            v572 = (_BYTE *)*((_QWORD *)v571 + 1);
            v574 = v572 - v573;
            if (v572 != v573)
              break;
            v596[v554] = sub_1BE8C49E8((uint64_t)v552 + 40 * v554, &v622);
            if (++v554 == 7)
              goto LABEL_627;
          }
          if (v574 < 0)
            sub_1BE61F930();
          v575 = (double *)operator new(v572 - v573);
          v622 = v575;
          v624 = &v575[2 * (v574 >> 4)];
          memcpy(v575, v573, v574);
          v623 = &v575[2 * (v574 >> 4)];
          v596[v554] = sub_1BE8C49E8((uint64_t)v552 + 40 * v554, &v622);
          v623 = v575;
          operator delete(v575);
          ++v554;
        }
        while (v554 != 7);
LABEL_627:
        *(float32x2_t *)((char *)v552[1].f64 + 4) = vneg_f32(*(float32x2_t *)((char *)v552[1].f64 + 4));
        *(float32x2_t *)((char *)v552[11].f64 + 4) = vneg_f32(*(float32x2_t *)((char *)v552[11].f64 + 4));
        v576 = *((float *)&v552[3].f64[1] + 1);
        v577 = *(float *)v552[4].f64;
        *((float *)&v552[3].f64[1] + 1) = v577;
        *(float *)v552[4].f64 = -v576;
        v578 = *((float *)&v552[8].f64[1] + 1);
        v579 = *(float *)v552[9].f64;
        *((float *)&v552[8].f64[1] + 1) = v579;
        *(float *)v552[9].f64 = -v578;
        v580 = *((float *)&v552[13].f64[1] + 1);
        v581 = *(float *)v552[14].f64;
        *((float *)&v552[13].f64[1] + 1) = v581;
        *(float *)v552[14].f64 = -v580;
        if (v369 <= 0.0)
        {
          *((float *)&v552[3].f64[1] + 1) = -v577;
          *(float *)v552[4].f64 = v576;
          *((float *)&v552[13].f64[1] + 1) = -v581;
          *(float *)v552[14].f64 = v580;
        }
        else
        {
          *((float *)&v552[8].f64[1] + 1) = -v579;
          *(float *)v552[9].f64 = v578;
        }
        v582 = v596[5];
        v583 = v596[1];
        v584 = (float)(*v596 + v596[6]) * 0.25;
        v596[6] = v584;
        *v596 = v584;
        v586 = v596[2];
        v585 = v596[3];
        v587 = v596[4];
        v588 = vmulq_n_f64(*(float64x2_t *)((char *)v552 + 200), v582);
        v589 = vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*v552, v584), (float64x2_t)0), vmulq_n_f64(*(float64x2_t *)((char *)v552 + 40), v583)), vmulq_n_f64(v552[5], v586)), vmulq_n_f64(*(float64x2_t *)((char *)v552 + 120), v585)), vmulq_n_f64(v552[10], v587)), v588), vmulq_n_f64(v552[15], v584));
        *(float *)v588.f64 = v584 + 0.0 + v583 + v586 + v585 + v587 + v582 + v584;
        v590 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)v588.f64), 0);
        v591 = vdiv_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(0, vmul_n_f32(*(float32x2_t *)((char *)v552[1].f64 + 4), v584), *(float *)v552[2].f64), vmul_n_f32(*(float32x2_t *)((char *)&v552[3].f64[1] + 4), v583), *(float *)&v552[4].f64[1]), vmul_n_f32(*(float32x2_t *)((char *)v552[6].f64 + 4), v586), *(float *)v552[7].f64), vmul_n_f32(*(float32x2_t *)((char *)&v552[8].f64[1] + 4), v585), *(float *)&v552[9].f64[1]), vmul_n_f32(*(float32x2_t *)((char *)v552[11].f64 + 4), v587), *(float *)v552[12].f64), vmul_n_f32(*(float32x2_t *)((char *)&v552[13].f64[1] + 4), v582),
                     *(float *)&v552[14].f64[1]),
                   vmul_n_f32(*(float32x2_t *)((char *)v552[16].f64 + 4), v584),
                   *(float *)v552[17].f64),
                 (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v588.f64[0], 0));
        v592 = (int32x2_t)vmul_f32(v591, v591);
        *(float *)v592.i32 = vmlas_n_f32(*(float *)&v592.i32[1], v591.f32[0], v591.f32[0]);
        if (*(float *)v592.i32 > 0.0)
          v591 = vdiv_f32(v591, (float32x2_t)vdup_lane_s32(v592, 0));
        v609 = v591;
        v600 = vdivq_f64(v589, v590);
        v366 = sqrtf(*(float *)v592.i32);
        operator delete(v596);
        v394 = 0;
        v362 = v604;
        v363 = v606;
        v361 = v608;
        v365 = v611;
      }
      else
      {
        v394 = 1;
        v600 = v602;
      }
    }
    else
    {
      v394 = 1;
      v600 = v602;
      v362 = v604;
      v363 = v606;
      v361 = v608;
    }
  }
  MEMORY[0x1C3B812C8](v361, 0x1000C8052888210);
  MEMORY[0x1C3B812C8](v363, 0x1000C8052888210);
  MEMORY[0x1C3B812C8](v365, 0x1000C8052888210);
  v498 = (OutlinedArrowRegressor *)MEMORY[0x1C3B812C8](v621, 0x1000C8077774924);
  v499 = vsubq_f64(v602, v600);
  v500 = v609.f32[0];
  v501 = v609.f32[1];
  v502 = v366;
  v503 = vmlad_n_f64(vmuld_lane_f64(v609.f32[1], v499, 1), v609.f32[0], v499.f64[0]) * v366;
  v9 = (uint64_t)v640;
  v504 = ((*(double *)&v640[40 * v617 + 8] - v600.f64[1]) * v609.f32[1]
        + (*(double *)&v640[40 * v617] - v600.f64[0]) * v609.f32[0])
       * v366;
  v505 = fabsf(v503);
  v506 = fabsf(v504);
  v507 = ((*(double *)(v9 + 40 * v615) - v600.f64[0]) * v609.f32[1]
        - (*(double *)(v9 + 40 * v615 + 8) - v600.f64[1]) * v609.f32[0])
       * v366;
  v508 = fabsf(v507);
  v509 = ((*(double *)&v640[40 * v603] - v600.f64[0]) * v609.f32[1]
        - (*(double *)&v640[40 * v603 + 8] - v600.f64[1]) * v609.f32[0])
       * v366;
  v510 = fabsf(v509);
  if (v394)
  {
    v511 = ((*(double *)&v640[40 * v613] - v600.f64[0]) * v501 - (*(double *)&v640[40 * v613 + 8] - v600.f64[1]) * v500)
         * v502;
    v512 = fabsf(v511);
    v513 = (double *)&v640[40 * v598];
    v514 = v513 + 1;
  }
  else
  {
    v515 = ((*((double *)v630 + 10) - v600.f64[0]) * v501 - (*((double *)v630 + 11) - v600.f64[1]) * v500) * v502;
    v512 = fabsf(v515);
    v513 = (double *)((char *)v630 + 160);
    v514 = (double *)((char *)v630 + 168);
  }
  v516 = v505 + v506;
  v517 = v508 + v510;
  v518 = ((*v513 - v600.f64[0]) * v501 - (*v514 - v600.f64[1]) * v500) * v502;
  v519 = v512 + fabsf(v518);
  v520 = (float)(v503 + v504) * 0.5;
  v521 = v600.f64[0] + (float)(v366 * (float)(v609.f32[0] * v520));
  v522 = v600.f64[1] + (float)(v366 * (float)(v609.f32[1] * v520));
  v523 = v600.f64[0] + (float)(v366 * (float)(v609.f32[0] * v504)) - v521;
  v524 = v600.f64[1] + (float)(v366 * (float)(v609.f32[1] * v504)) - v522;
  v525 = (float)(v524 * v524) + (float)(v523 * v523);
  v526 = sqrtf(v525);
  if (v525 > 0.0)
  {
    v523 = v523 / v525;
    v524 = v524 / v525;
  }
  v527 = ((v597.f64[1] - v522) * v524 + (v597.f64[0] - v521) * v523) * v526;
  v528 = v521 + v527;
  v529 = v522 - (float)(v519 * 0.5);
  v530 = (float)(v516 * 0.5);
  v531 = v521 - v530;
  v532 = v521 + v530;
  v533 = v531 < v528 && v528 < v532;
  v534 = (float)(v517 * 0.5);
  v535 = v522 - v534;
  v536 = v522 + v534;
  if (v533 && v535 < v529 && v529 < v536)
  {
    v539 = operator new();
    v540 = atan2f(v524, v523);
    *(_QWORD *)v539 = &off_1E77F0740;
    *(double *)(v539 + 16) = v521;
    *(double *)(v539 + 24) = v522;
    *(double *)(v539 + 32) = v516;
    *(double *)(v539 + 40) = v517;
    *(double *)(v539 + 48) = (float)(v540 * 180.0) / 3.14159265;
    *(double *)(v539 + 56) = v528;
    *(double *)(v539 + 64) = v529;
  }
  else
  {
    v539 = OutlinedArrowRegressor::provideAnAnswer(v498, v4);
  }
  *i = (float32x2_t)v539;
  v541 = (char *)v633;
  v542 = (uint64_t)(*((_QWORD *)v633 + 4) - *((_QWORD *)v633 + 3)) >> 4;
  v543 = *((_QWORD *)v633 + 15);
  v544 = (*((_QWORD *)v633 + 16) - v543) >> 4;
  if (v544 >= v542)
    v545 = (uint64_t)(*((_QWORD *)v633 + 4) - *((_QWORD *)v633 + 3)) >> 4;
  else
    v545 = (*((_QWORD *)v633 + 16) - v543) >> 4;
  if (v542 <= v544)
    v542 = v544;
  i[1].f32[0] = (float)(unint64_t)v545;
  i[1].f32[1] = (float)v542;
  i[2] = vcvt_f32_f64(vdivq_f64(v639, (float64x2_t)vextq_s8((int8x16_t)v639, (int8x16_t)v639, 8uLL)));
  i[3].f32[0] = v516 / v517;
  i[3].f32[1] = v517 / v516;
  i[4].i32[0] = 1065353216;
  if (!v630 || (operator delete(v630), (v541 = (char *)v633) != 0))
  {
    v546 = v634;
    v547 = v541;
    if (v634 != v541)
    {
      v548 = v634;
      do
      {
        v550 = (void *)*((_QWORD *)v548 - 3);
        v548 -= 24;
        v549 = v550;
        if (v550)
        {
          *((_QWORD *)v546 - 2) = v549;
          operator delete(v549);
        }
        v546 = v548;
      }
      while (v548 != v541);
      v547 = v633;
    }
    v634 = v541;
    operator delete(v547);
  }
  if (v605)
    operator delete(v605);
  if (v362)
    operator delete(v362);
LABEL_13:
  if (v9)
  {
LABEL_42:
    *(_QWORD *)&v641 = v9;
    operator delete((void *)v9);
  }
LABEL_43:
  if (v642)
  {
    v643 = v642;
    operator delete(v642);
  }

}

void sub_1BE765058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50)
{
  void *v50;
  uint64_t v51;
  void *v53;
  void *v54;

  if (__p)
  {
    operator delete(__p);
    sub_1BE63CEBC(&a50);
    if (!a21)
    {
LABEL_3:
      if (!a20)
      {
LABEL_8:
        v53 = *(void **)(v51 - 200);
        if (v53)
        {
          *(_QWORD *)(v51 - 192) = v53;
          operator delete(v53);
        }
        v54 = *(void **)(v51 - 176);
        if (v54)
        {
          *(_QWORD *)(v51 - 168) = v54;
          operator delete(v54);
        }

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a20);
      goto LABEL_8;
    }
  }
  else
  {
    sub_1BE63CEBC(&a50);
    if (!a21)
      goto LABEL_3;
  }
  operator delete(a21);
  if (!a20)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t OutlinedArrowRegressor::provideAnAnswer(OutlinedArrowRegressor *this, CHDrawing *a2)
{
  CHDrawing *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t j;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float *v24;
  float v25;
  float *v26;
  float *v27;
  float v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  float **v32;
  float **v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float **v40;
  float *v41;
  float *v42;
  float **v43;
  float **v44;
  float *v45;
  float *v46;
  float **v47;
  float *v49;
  float **v50;
  unint64_t v51;
  float *v52;
  float **v53;
  unint64_t v54;
  char v55;

  v2 = a2;
  v3 = 0;
  v52 = (float *)&v52;
  v53 = &v52;
  v54 = 0;
  v49 = (float *)&v49;
  v50 = &v49;
  v51 = 0;
  for (i = objc_msgSend_strokeCount(v2, v4, v5, v6, v7, v8);
        i > v3;
        i = objc_msgSend_strokeCount(v2, v15, v16, v17, v18, v19))
  {
    for (j = 0; objc_msgSend_pointCountForStrokeIndex_(v2, v10, v3, v11, v12, v13) > j; ++j)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v2, v15, v3, j, v18, v19);
      v21 = v20;
      v23 = v22;
      v24 = (float *)operator new(0x18uLL);
      v25 = v21;
      v24[4] = v25;
      v26 = v52;
      *(_QWORD *)v24 = v52;
      *((_QWORD *)v24 + 1) = &v52;
      *((_QWORD *)v26 + 1) = v24;
      v52 = v24;
      ++v54;
      v27 = (float *)operator new(0x18uLL);
      v28 = v23;
      v27[4] = v28;
      v29 = v49;
      *(_QWORD *)v27 = v49;
      *((_QWORD *)v27 + 1) = &v49;
      *((_QWORD *)v29 + 1) = v27;
      v49 = v27;
      ++v51;
    }
    ++v3;
  }
  sub_1BE765818((uint64_t)v53, (uint64_t)&v52, v54, (uint64_t)&v55);
  sub_1BE765818((uint64_t)v50, (uint64_t)&v49, v51, (uint64_t)&v55);
  v30 = (uint64_t)v50;
  v31 = (uint64_t)v53;
  if (v54 >= 8)
  {
    v34 = v54 >> 3;
    v33 = &v52;
    v32 = &v49;
    do
    {
      v31 = *(_QWORD *)(v31 + 8);
      v30 = *(_QWORD *)(v30 + 8);
      v33 = (float **)*v33;
      v32 = (float **)*v32;
      --v34;
    }
    while (v34);
  }
  else
  {
    v32 = &v49;
    v33 = &v52;
  }
  v35 = *(float *)(v31 + 16);
  v36 = *(float *)(v30 + 16);
  v37 = (*v33)[4];
  v38 = (*v32)[4];
  v39 = operator new();
  *(_QWORD *)v39 = &off_1E77F0740;
  *(double *)(v39 + 16) = (float)((float)(v35 + v37) * 0.5);
  *(double *)(v39 + 24) = (float)((float)(v36 + v38) * 0.5);
  *(double *)(v39 + 32) = (float)(v37 - v35);
  *(double *)(v39 + 40) = (float)(v38 - v36);
  *(_QWORD *)(v39 + 48) = 0;
  *(double *)(v39 + 56) = v35 * 0.25 + v37 * 0.75;
  *(double *)(v39 + 64) = v38 * 0.25 + v36 * 0.75;
  if (v51)
  {
    v41 = v49;
    v40 = v50;
    v42 = *v50;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v49 + 1);
    **((_QWORD **)v41 + 1) = v42;
    v51 = 0;
    if (v40 != &v49)
    {
      do
      {
        v43 = (float **)v40[1];
        operator delete(v40);
        v40 = v43;
      }
      while (v43 != &v49);
    }
  }
  if (v54)
  {
    v45 = v52;
    v44 = v53;
    v46 = *v53;
    *((_QWORD *)v46 + 1) = *((_QWORD *)v52 + 1);
    **((_QWORD **)v45 + 1) = v46;
    v54 = 0;
    if (v44 != &v52)
    {
      do
      {
        v47 = (float **)v44[1];
        operator delete(v44);
        v44 = v47;
      }
      while (v47 != &v52);
    }
  }

  return v39;
}

void sub_1BE7654CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1BE76551C((uint64_t *)va);
  sub_1BE76551C((uint64_t *)va1);

  _Unwind_Resume(a1);
}

BOOL sub_1BE765504(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) < *(_DWORD *)(a2 + 20);
}

uint64_t *sub_1BE76551C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t OutlinedArrowRegressor::confidenceLevelVersusPentagon(OutlinedArrowRegressor *this)
{
  return cblas_sdot_NEWLAPACK();
}

uint64_t OutlinedArrowRegressor::confidenceLevelVersusChatBubble(OutlinedArrowRegressor *this)
{
  return cblas_sdot_NEWLAPACK();
}

void sub_1BE765664(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "CHOutlinedArrow");
}

_QWORD *sub_1BE76568C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v6 = operator new(24 * a2);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = &v6[3 * a2];
    a1[2] = v8;
    v9 = *(const void **)a3;
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_1BE61F930();
      }
      v11 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v12 = (char *)operator new(v10);
        *v7 = v12;
        v7[1] = v12;
        v13 = &v12[16 * (v10 >> 4)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_1BE7657C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1BE7087A0(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE7657EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1BE7087A0(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE765800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1BE7087A0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE765818(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v5 = *(uint64_t **)a2;
    if (*(float *)(*(_QWORD *)a2 + 16) < *(float *)(result + 16))
    {
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = v5[1];
      *(_QWORD *)v5[1] = v6;
      v7 = *(_QWORD *)result;
      *(_QWORD *)(v7 + 8) = v5;
      *v5 = v7;
      *(_QWORD *)result = v5;
      v5[1] = result;
      return (uint64_t)v5;
    }
    return result;
  }
  v10 = a3 >> 1;
  v11 = (a3 >> 1) + 1;
  v12 = result;
  do
  {
    v12 = *(_QWORD *)(v12 + 8);
    --v11;
  }
  while (v11 > 1);
  v13 = sub_1BE765818(result, v12, a3 >> 1, a4);
  result = sub_1BE765818(v12, a2, a3 - v10, a4);
  v14 = *(float *)(v13 + 16);
  if (*(float *)(result + 16) >= v14)
  {
    v18 = *(uint64_t **)(v13 + 8);
    v15 = result;
    result = v13;
    if (v18 == (uint64_t *)v15)
      return result;
    goto LABEL_15;
  }
  v15 = *(_QWORD *)(result + 8);
  if (v15 == a2)
  {
LABEL_11:
    v15 = a2;
  }
  else
  {
    while (*(float *)(v15 + 16) < v14)
    {
      v15 = *(_QWORD *)(v15 + 8);
      if (v15 == a2)
        goto LABEL_11;
    }
  }
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)result;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(*(_QWORD *)v15 + 8);
  **(_QWORD **)(v16 + 8) = v17;
  v19 = *(_QWORD *)v13;
  v18 = *(uint64_t **)(v13 + 8);
  *(_QWORD *)(v19 + 8) = result;
  *(_QWORD *)result = v19;
  *(_QWORD *)v13 = v16;
  *(_QWORD *)(v16 + 8) = v13;
  if (v18 != (uint64_t *)v15)
  {
LABEL_15:
    if (v15 != a2)
    {
      v20 = v15;
      do
      {
        v21 = *((float *)v18 + 4);
        if (*(float *)(v15 + 16) >= v21)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == (uint64_t *)v20)
            return result;
        }
        else
        {
          v22 = *(_QWORD *)(v15 + 8);
          if (v22 == a2)
          {
LABEL_21:
            v22 = a2;
          }
          else
          {
            while (*(float *)(v22 + 16) < v21)
            {
              v22 = *(_QWORD *)(v22 + 8);
              if (v22 == a2)
                goto LABEL_21;
            }
          }
          v23 = *(_QWORD *)v22;
          v24 = *(_QWORD *)v15;
          *(_QWORD *)(v24 + 8) = *(_QWORD *)(*(_QWORD *)v22 + 8);
          **(_QWORD **)(v23 + 8) = v24;
          if (v20 == v15)
            v20 = v22;
          v26 = *v18;
          v25 = (uint64_t *)v18[1];
          *(_QWORD *)(v26 + 8) = v15;
          *(_QWORD *)v15 = v26;
          *v18 = v23;
          *(_QWORD *)(v23 + 8) = v18;
          v18 = v25;
          v15 = v22;
          if (v25 == (uint64_t *)v20)
            return result;
        }
      }
      while (v15 != a2);
    }
  }
  return result;
}

void sub_1BE766378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v33 - 168), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7665EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7665FC(uint64_t a1)
{

}

void sub_1BE766604(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isEqualToString;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;

  v38 = a2;
  objc_msgSend_string(v38, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("{"), v10, v11, v12);

  if ((isEqualToString & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    objc_msgSend_string(v38, v14, v15, v16, v17, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)CFSTR("}"), v22, v23, v24);

    if ((v25 & 1) == 0)
      goto LABEL_6;
    v19 = -1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v19;
LABEL_6:
  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v14, (uint64_t)v38, v16, v17, v18);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v26, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v27, v28, v29);
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v30, v31, v32, v33, v34);
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v37 = *(void **)(v36 + 40);
    *(_QWORD *)(v36 + 40) = v35;

  }
}

void sub_1BE76671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE766738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7669C0(uint64_t a1, const CGFloat *a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  CGPath *Mutable;
  CGFloat v21;
  CGFloat MinY;
  CGFloat v23;
  CGFloat v24;
  CGColor *v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  Mutable = CGPathCreateMutable();
  v26.origin.x = a7;
  v26.origin.y = a8;
  v26.size.width = a9;
  v26.size.height = a10;
  v21 = CGRectGetMinX(v26) + a3 * a9;
  v27.origin.x = a7;
  v27.origin.y = a8;
  v27.size.width = a9;
  v27.size.height = a10;
  MinY = CGRectGetMinY(v27);
  CGPathMoveToPoint(Mutable, 0, v21, MinY + a4 * a10);
  v28.origin.x = a7;
  v28.origin.y = a8;
  v28.size.width = a9;
  v28.size.height = a10;
  v23 = CGRectGetMinX(v28) + a5 * a9;
  v29.origin.x = a7;
  v29.origin.y = a8;
  v29.size.width = a9;
  v29.size.height = a10;
  v24 = CGRectGetMinY(v29);
  CGPathAddLineToPoint(Mutable, 0, v23, v24 + a6 * a10);
  CGPathCloseSubpath(Mutable);
  v25 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), a2);
  CGContextSetStrokeColorWithColor(*(CGContextRef *)(a1 + 40), v25);
  CGContextAddPath(*(CGContextRef *)(a1 + 40), Mutable);
  CGContextStrokePath(*(CGContextRef *)(a1 + 40));
  CGPathRelease(Mutable);
  CGColorRelease(v25);
}

#error "1BE766E80: call analysis failed (funcsize=232)"

void normalizeFeature(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, NSIndexSet *a7)
{
  NSIndexSet *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSIndexSet *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  char i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float32x2_t *v28;
  unint64_t v29;
  float32x4_t v30;
  unint64_t v31;
  float *v32;
  float v33;
  double v35;
  NSIndexSet *v37;

  v11 = a7;
  v16 = v11;
  v37 = v11;
  if (v11)
  {
    v11 = (NSIndexSet *)objc_msgSend_count(v11, (const char *)v11, v12, v13, v14, v15);
    v16 = v37;
  }
  if (a1 && a2 - (uint64_t)v11 >= 1 && a2 >= 1)
  {
    if (v16)
    {
      v17 = 0;
      v18 = 4 * a3;
      v19 = &a1[a4];
      for (i = objc_msgSend_containsIndex_(v16, (const char *)v16, 0, v13, v14, v15, a5, *(_QWORD *)&a6);
            ;
            i = objc_msgSend_containsIndex_(v37, (const char *)v37, v17, v21, v22, v23, v24, *(_QWORD *)&v35))
      {
        if ((i & 1) == 0)
        {
          v24 = (*v19 - a5) / v35;
          *(float *)&v24 = v24;
          *v19 = *(float *)&v24;
        }
        ++v17;
        v19 = (float *)((char *)v19 + v18);
        v16 = v37;
        if (a2 == v17)
          break;
      }
    }
    else
    {
      v25 = 0;
      if ((unint64_t)a2 < 8)
        goto LABEL_17;
      if (a3 != 1)
        goto LABEL_17;
      v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0);
      v25 = a2 & 0xFFFFFFFFFFFFFFF8;
      v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
      v28 = (float32x2_t *)&a1[a4 + 4];
      v29 = a2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(*v28), v26), v27)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v28->f32), v26), v27));
        *(float32x4_t *)v28[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(v28[-2]), v26), v27)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v28[-2].f32), v26), v27));
        *(float32x4_t *)v28->f32 = v30;
        v28 += 4;
        v29 -= 8;
      }
      while (v29);
      if (v25 != a2)
      {
LABEL_17:
        v31 = a2 - v25;
        v32 = &a1[a4 + v25 * a3];
        do
        {
          v33 = (*v32 - a5) / a6;
          *v32 = v33;
          v32 += a3;
          --v31;
        }
        while (v31);
      }
    }
  }

}

void sub_1BE7672E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE7672F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE767308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE76731C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE7673B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE767460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE767470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7674FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE767510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE767520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE767C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  if (a41 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE767EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CHRecurrentNeuralNetworkCoreML;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE767FDC()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  void *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.CHStrokeClassificationModel.queue", v0);
  v2 = (void *)qword_1EF568D88;
  qword_1EF568D88 = (uint64_t)v1;

  v3 = (void *)qword_1EF568D90;
  qword_1EF568D90 = 0;

}

void sub_1BE768120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE768130(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  unint64_t v17;
  __int128 *p_buf;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  BOOL v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  size_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  NSObject *v63;
  CHStrokeClassificationModel *v64;
  _QWORD *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  size_t v133;
  std::string::size_type v134;
  std::string *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  NSObject *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::string::size_type v151;
  void *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  NSObject *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  void *v227;
  void *v228;
  id v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  int64_t i;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  NSObject *v281;
  uint64_t v282;
  void *v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  NSObject *v298;
  void *v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  void *v305;
  void *v306;
  id v307;
  id v308;
  void *__p[2];
  unint64_t v310;
  void **__dst;
  size_t v312;
  int64_t v313;
  objc_super v314;
  char __s[1024];
  uint8_t v316[4];
  void *v317;
  std::string v318;
  void *v319;
  id v320;
  void *v321;
  __int128 buf;
  void *v323;
  void *v324;
  void *v325;
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  if (!qword_1EF568D90)
  {
    v2 = objc_retainAutorelease(*(id *)(a1 + 32));
    v8 = (const char *)objc_msgSend_UTF8String(v2, v3, v4, v5, v6, v7);
    pathForResource(v8, 0, (UInt8 *)__s);
    v9 = strlen(__s);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      sub_1BE61F1B4();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      v312 = v10;
      v313 = v13 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v313) = v9;
      p_dst = (void **)&__dst;
      if (!v9)
      {
LABEL_10:
        *((_BYTE *)p_dst + v10) = 0;
        v14 = operator new();
        *(_QWORD *)(v14 + 48) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
        v15 = SHIBYTE(v313);
        if (v313 >= 0)
          v16 = HIBYTE(v313);
        else
          v16 = v312;
        v17 = v16 + 19;
        if (v16 + 19 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        if (v17 >= 0x17)
        {
          v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v19 = v17 | 7;
          v20 = v19 + 1;
          p_buf = (__int128 *)operator new(v19 + 1);
          *((_QWORD *)&buf + 1) = v16 + 19;
          v323 = (void *)(v20 | 0x8000000000000000);
          *(_QWORD *)&buf = p_buf;
        }
        else
        {
          v323 = 0;
          buf = 0uLL;
          p_buf = &buf;
          HIBYTE(v323) = v16 + 19;
          if (!v16)
            goto LABEL_24;
        }
        if (v15 >= 0)
          v21 = (void **)&__dst;
        else
          v21 = __dst;
        memmove(p_buf, v21, v16);
LABEL_24:
        strcpy((char *)p_buf + v16, "/model.espresso.net");
        v22 = sub_1BE7E77FC((uint64_t *)v14);
        v26 = v22;
        if (SHIBYTE(v323) < 0)
        {
          operator delete((void *)buf);
          if (v26)
            goto LABEL_33;
        }
        else if (v22)
        {
          goto LABEL_33;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v27 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        {
          v28 = *(_QWORD *)(a1 + 32);
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v28;
          _os_log_impl(&dword_1BE607000, v27, OS_LOG_TYPE_FAULT, "Error loading Espresso model %@", (uint8_t *)&buf, 0xCu);
        }

LABEL_33:
        if (v313 >= 0)
          objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v23, (uint64_t)&__dst, 4, v24, v25);
        else
          objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v23, (uint64_t)__dst, 4, v24, v25);
        v306 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByDeletingLastPathComponent(v306, v29, v30, v31, v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByDeletingPathExtension(*(void **)(a1 + 32), v35, v36, v37, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAppendingString_(v40, v41, (uint64_t)CFSTR(".codemap"), v42, v43, v44);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAppendingPathComponent_(v34, v46, (uint64_t)v45, v47, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();

        v308 = objc_retainAutorelease(v50);
        v55 = (const char *)objc_msgSend_cStringUsingEncoding_(v308, v51, 4, v52, v53, v54);
        v56 = strlen(v55);
        if (v56 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        v57 = (void *)v56;
        if (v56 >= 0x17)
        {
          v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v59 = v56 | 7;
          v60 = v59 + 1;
          v58 = operator new(v59 + 1);
          __p[1] = v57;
          v310 = v60 | 0x8000000000000000;
          __p[0] = v58;
        }
        else
        {
          HIBYTE(v310) = v56;
          v58 = __p;
          if (!v56)
          {
LABEL_44:
            *((_BYTE *)v57 + (_QWORD)v58) = 0;
            v61 = sub_1BE7E7FD4((uint64_t *)__p);
            v62 = v61;
            if (SHIBYTE(v310) < 0)
            {
              operator delete(__p[0]);
              if (v62)
                goto LABEL_53;
            }
            else if (v61)
            {
              goto LABEL_53;
            }
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v63 = (id)qword_1EF568E18[0];
            if (os_log_type_enabled(v63, OS_LOG_TYPE_FAULT))
            {
              LODWORD(buf) = 138412290;
              *(_QWORD *)((char *)&buf + 4) = v308;
              _os_log_impl(&dword_1BE607000, v63, OS_LOG_TYPE_FAULT, "Error loading codemap %@", (uint8_t *)&buf, 0xCu);
            }

LABEL_53:
            v64 = [CHStrokeClassificationModel alloc];
            v307 = *(id *)(a1 + 32);
            if (v64)
            {
              objc_opt_self();
              if (qword_1EF568D98 != -1)
                dispatch_once(&qword_1EF568D98, &unk_1E77F1830);
              v314.receiver = v64;
              v314.super_class = (Class)CHStrokeClassificationModel;
              v65 = objc_msgSendSuper2(&v314, sel_initWithModelName_, v307);
              v71 = (uint64_t)v65;
              if (v65)
              {
                v65[3] = v14;
                v65[4] = 0;
                v65[5] = 0;
                v65[10] = 3;
                v65[11] = 0;
                v65[12] = 1;
                v65[13] = 2;
                v65[14] = 80;
                v65[16] = 4;
                v65[17] = 120;
                v65[15] = 1000;
                v65[22] = 0x4000000000000000;
                v65[18] = 300;
                v65[19] = 30;
                v65[20] = 200;
                v72 = objc_msgSend_recognitionMaxStrokes(v65, v66, v67, v68, v69, v70);
                *(_QWORD *)(v71 + 168) = v72 + 2 * objc_msgSend_contextMaxStrokes((void *)v71, v73, v74, v75, v76, v77);
                *(_QWORD *)&buf = &unk_1E7828EF8;
                *((_QWORD *)&buf + 1) = &unk_1E7828F10;
                v323 = &unk_1E7828F28;
                v324 = &unk_1E7828F40;
                objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v78, *(_QWORD *)(v71 + 168), v79, v80, v81);
                v82 = (void *)objc_claimAutoreleasedReturnValue();
                v325 = v82;
                objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v83, (uint64_t)&buf, 5, v84, v85);
                v86 = objc_claimAutoreleasedReturnValue();
                v87 = *(void **)(v71 + 56);
                *(_QWORD *)(v71 + 56) = v86;

                objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v88, *(_QWORD *)(v71 + 136), v89, v90, v91);
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                v321 = v92;
                objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v93, (uint64_t)&v321, 1, v94, v95);
                v96 = objc_claimAutoreleasedReturnValue();
                v97 = *(void **)(v71 + 64);
                *(_QWORD *)(v71 + 64) = v96;

                objc_msgSend_objectAtIndexedSubscript_(*(void **)(v71 + 56), v98, 0, v99, v100, v101);
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                v108 = objc_msgSend_unsignedIntValue(v102, v103, v104, v105, v106, v107);
                objc_msgSend_objectAtIndexedSubscript_(*(void **)(v71 + 64), v109, 0, v110, v111, v112);
                v113 = (void *)objc_claimAutoreleasedReturnValue();
                v119 = objc_msgSend_unsignedIntValue(v113, v114, v115, v116, v117, v118);
                objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v120, (uint64_t)CFSTR("s%d_p%d"), v121, v122, v123, v108, v119);
                v124 = objc_claimAutoreleasedReturnValue();
                v125 = *(void **)(v71 + 72);
                *(_QWORD *)(v71 + 72) = v124;

                v126 = *(_QWORD *)(v71 + 24);
                v132 = (const char *)objc_msgSend_UTF8String(*(void **)(v71 + 72), v127, v128, v129, v130, v131);
                v133 = strlen(v132);
                if (v133 > 0x7FFFFFFFFFFFFFF7)
                  sub_1BE61F1B4();
                v134 = v133;
                if (v133 >= 0x17)
                {
                  v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v133 | 7) != 0x17)
                    v136 = v133 | 7;
                  v137 = v136 + 1;
                  v135 = (std::string *)operator new(v136 + 1);
                  v318.__r_.__value_.__l.__size_ = v134;
                  v318.__r_.__value_.__r.__words[2] = v137 | 0x8000000000000000;
                  v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
                }
                else
                {
                  *((_BYTE *)&v318.__r_.__value_.__s + 23) = v133;
                  v135 = &v318;
                  if (!v133)
                  {
LABEL_65:
                    v135->__r_.__value_.__s.__data_[v134] = 0;
                    v138 = sub_1BE7E7D10(v126, &v318);
                    v144 = v138;
                    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v318.__r_.__value_.__l.__data_);
                      if (v144)
                      {
LABEL_74:
                        v153 = *(_QWORD *)(v71 + 48);
                        *(_QWORD *)(v71 + 48) = v62;
                        if (v153)
                        {
                          if (*(_QWORD *)v153)
                            munmap(*(void **)v153, *(_QWORD *)(v153 + 8));
                          MEMORY[0x1C3B812EC](v153, 0x1010C40A749B91FLL);
                          v62 = *(_QWORD **)(v71 + 48);
                        }
                        *(_QWORD *)(v71 + 184) = *((unsigned int *)v62 + 6);
                        objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v139, v140, v141, v142, v143);
                        v305 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v154, (uint64_t)&unk_1E7828F58, (uint64_t)CFSTR("A"), v155, v156);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v157, (uint64_t)&unk_1E7828F70, (uint64_t)CFSTR("C"), v158, v159);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v160, (uint64_t)&unk_1E7828F88, (uint64_t)CFSTR("D"), v161, v162);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v163, (uint64_t)&unk_1E7828FA0, (uint64_t)CFSTR("H"), v164, v165);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v166, (uint64_t)&unk_1E7828FB8, (uint64_t)CFSTR("J"), v167, v168);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v169, (uint64_t)&unk_1E7828FD0, (uint64_t)CFSTR("K"), v170, v171);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v172, (uint64_t)&unk_1E7828FE8, (uint64_t)CFSTR("L"), v173, v174);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v175, (uint64_t)&unk_1E7829000, (uint64_t)CFSTR("N"), v176, v177);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v178, (uint64_t)&unk_1E7829018, (uint64_t)CFSTR("T"), v179, v180);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v181, (uint64_t)&unk_1E7829030, (uint64_t)CFSTR("V"), v182, v183);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v184, (uint64_t)&unk_1E7829048, (uint64_t)CFSTR("W"), v185, v186);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v187, (uint64_t)&unk_1E7829060, (uint64_t)CFSTR("M"), v188, v189);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v190, (uint64_t)&unk_1E7829078, (uint64_t)CFSTR("U"), v191, v192);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v193, (uint64_t)&unk_1E7829090, (uint64_t)CFSTR("O"), v194, v195);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v196, (uint64_t)&unk_1E78290A8, (uint64_t)CFSTR("Q"), v197, v198);
                        objc_msgSend_setObject_forKeyedSubscript_(v305, v199, (uint64_t)&unk_1E78290C0, (uint64_t)CFSTR("F"), v200, v201);
                        v207 = objc_msgSend_copy(v305, v202, v203, v204, v205, v206);
                        v208 = *(void **)(v71 + 232);
                        *(_QWORD *)(v71 + 232) = v207;

                        if (objc_msgSend_count(*(void **)(v71 + 232), v209, v210, v211, v212, v213) != *(_QWORD *)(v71 + 184))
                        {
                          if (qword_1EF568E88 != -1)
                            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                          v219 = (id)qword_1EF568E18[0];
                          if (os_log_type_enabled(v219, OS_LOG_TYPE_FAULT))
                          {
                            v225 = objc_msgSend_count(*(void **)(v71 + 232), v220, v221, v222, v223, v224);
                            v226 = *(_QWORD *)(v71 + 184);
                            LODWORD(v318.__r_.__value_.__l.__data_) = 67109376;
                            HIDWORD(v318.__r_.__value_.__r.__words[0]) = v225;
                            LOWORD(v318.__r_.__value_.__r.__words[1]) = 1024;
                            *(_DWORD *)((char *)&v318.__r_.__value_.__r.__words[1] + 2) = v226;
                            _os_log_impl(&dword_1BE607000, v219, OS_LOG_TYPE_FAULT, "script count %d should match codemap count %d", (uint8_t *)&v318, 0xEu);
                          }

                        }
                        objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v214, v215, v216, v217, v218);
                        v227 = (void *)objc_claimAutoreleasedReturnValue();
                        v228 = *(void **)(v71 + 232);
                        v318.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
                        v318.__r_.__value_.__l.__size_ = 3221225472;
                        v318.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_1BE7691A4;
                        v319 = &unk_1E77F4B70;
                        v229 = v227;
                        v320 = v229;
                        v304 = v229;
                        objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v228, v230, (uint64_t)&v318, v231, v232, v233);
                        v239 = objc_msgSend_copy(v229, v234, v235, v236, v237, v238);
                        v240 = *(void **)(v71 + 240);
                        *(_QWORD *)(v71 + 240) = v239;

                        *(_QWORD *)(v71 + 192) = 0x7FFFFFFFFFFFFFFFLL;
                        objc_msgSend_array(MEMORY[0x1E0C99DE8], v241, v242, v243, v244, v245);
                        v246 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v247, v248, v249, v250, v251);
                        v252 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v253, v254, v255, v256, v257);
                        v263 = (void *)objc_claimAutoreleasedReturnValue();
                        if (*(uint64_t *)(v71 + 184) >= 1)
                        {
                          for (i = 0; i < *(_QWORD *)(v71 + 184); ++i)
                          {
                            v269 = *(unsigned int *)CHCodeMap::operator[](*(_QWORD *)(v71 + 48), i);
                            v270 = v263;
                            if ((_DWORD)v269 != 65)
                            {
                              if ((_DWORD)v269 == 87)
                              {
                                *(_QWORD *)(v71 + 200) = i;
                                goto LABEL_93;
                              }
                              if ((_DWORD)v269 == 78)
                                *(_QWORD *)(v71 + 192) = i;
                              v270 = v252;
                            }
                            objc_msgSend_addIndex_(v270, v265, i, v266, v267, v268);
LABEL_93:
                            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v265, (uint64_t)CFSTR("%c"), v266, v267, v268, v269);
                            v271 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend_objectForKeyedSubscript_(*(void **)(v71 + 232), v272, (uint64_t)v271, v273, v274, v275);
                            v280 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v280)
                            {
                              if (qword_1EF568E88 != -1)
                                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                              v281 = (id)qword_1EF568E18[0];
                              if (os_log_type_enabled(v281, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)v316 = 138412290;
                                v317 = v271;
                                _os_log_impl(&dword_1BE607000, v281, OS_LOG_TYPE_FAULT, "script code %@ doesn't exist in codeScriptDictionary", v316, 0xCu);
                              }

                            }
                            objc_msgSend_addObject_(v246, v276, (uint64_t)v280, v277, v278, v279);

                          }
                        }
                        v282 = objc_msgSend_copy(v246, v258, v259, v260, v261, v262);
                        v283 = *(void **)(v71 + 224);
                        *(_QWORD *)(v71 + 224) = v282;

                        v289 = objc_msgSend_copy(v252, v284, v285, v286, v287, v288);
                        v290 = *(void **)(v71 + 208);
                        *(_QWORD *)(v71 + 208) = v289;

                        v296 = objc_msgSend_copy(v263, v291, v292, v293, v294, v295);
                        v297 = *(void **)(v71 + 216);
                        *(_QWORD *)(v71 + 216) = v296;

                        if (*(_QWORD *)(v71 + 192) == 0x7FFFFFFFFFFFFFFFLL)
                        {
                          if (qword_1EF568E88 != -1)
                            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                          v298 = (id)qword_1EF568E18[0];
                          if (os_log_type_enabled(v298, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)v316 = 0;
                            _os_log_impl(&dword_1BE607000, v298, OS_LOG_TYPE_FAULT, "Non-text class index not found in stroke classification codemap", v316, 2u);
                          }

                        }
                        goto LABEL_107;
                      }
                    }
                    else if (v138)
                    {
                      goto LABEL_74;
                    }
                    if (qword_1EF568E88 != -1)
                      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                    v145 = (id)qword_1EF568E18[0];
                    if (os_log_type_enabled(v145, OS_LOG_TYPE_FAULT))
                    {
                      v151 = *(_QWORD *)(v71 + 72);
                      objc_msgSend_modelName((void *)v71, v146, v147, v148, v149, v150);
                      v152 = (void *)objc_claimAutoreleasedReturnValue();
                      LODWORD(v318.__r_.__value_.__l.__data_) = 138412546;
                      *(std::string::size_type *)((char *)v318.__r_.__value_.__r.__words + 4) = v151;
                      WORD2(v318.__r_.__value_.__r.__words[1]) = 2112;
                      *(std::string::size_type *)((char *)&v318.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v152;
                      _os_log_impl(&dword_1BE607000, v145, OS_LOG_TYPE_FAULT, "Error selecting configuration %@ for Espresso model %@", (uint8_t *)&v318, 0x16u);

                    }
                    goto LABEL_74;
                  }
                }
                memmove(v135, v132, v134);
                goto LABEL_65;
              }
            }
            else
            {
              v71 = 0;
            }
LABEL_107:

            v299 = (void *)qword_1EF568D90;
            qword_1EF568D90 = v71;

            objc_msgSend_logModelLoaded_(CHPowerLogging, v300, 0, v301, v302, v303);
            if (SHIBYTE(v313) < 0)
              operator delete(__dst);
            return;
          }
        }
        memmove(v58, v55, (size_t)v57);
        goto LABEL_44;
      }
    }
    memcpy(p_dst, __s, v10);
    goto LABEL_10;
  }
}

void sub_1BE768FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;

  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7691A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6);
}

void sub_1BE769274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHStrokeClassificationModel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE769638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE769838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE769860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE769870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE769880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE769890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7698A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7698B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7699D0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a3;
  objc_msgSend_objectAtIndexedSubscript_(a2, v5, 1, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v4, v10, 1, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_intValue(v9, v15, v16, v17, v18, v19);
  if (v20 >= (int)objc_msgSend_intValue(v14, v21, v22, v23, v24, v25))
  {
    v32 = objc_msgSend_intValue(v14, v26, v27, v28, v29, v30);
    v31 = v32 < (int)objc_msgSend_intValue(v9, v33, v34, v35, v36, v37);
  }
  else
  {
    v31 = -1;
  }

  return v31;
}

void sub_1BE769A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE769A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE769A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE769C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  sub_1BE63CEBC((void **)va);

  _Unwind_Resume(a1);
}

void sub_1BE76AB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v71;

  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE76ADAC(uint64_t a1)
{
  uint64_t result;

  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  result = sub_1BE76ADFC(*(uint64_t **)(a1 + 32), *(void **)(a1 + 40), *(char ***)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BE76ADFC(uint64_t *a1, void *a2, char **a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  double v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CoreHandwriting *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const CoreHandwriting::Ink *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  std::string::size_type v88;
  std::string::size_type size;
  void *v90;
  std::string::size_type v91;
  void *v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  unint64_t i;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t j;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t k;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL4 v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  BOOL v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  NSObject *v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  NSObject *v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  id v245;
  id v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  const char *v261;
  uint64_t v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  id v267;
  const char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t m;
  unint64_t n;
  id v281;
  id v282;
  NSObject *v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  NSObject *v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  id v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  void *v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  id v333;
  id v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  float v353;
  uint64_t ii;
  uint64_t v355;
  float v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  id v363;
  id v364;
  NSObject *v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  const char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  NSObject *v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  const char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  const char *v397;
  size_t v398;
  std::string::size_type v399;
  std::string *p_buf;
  uint64_t v401;
  uint64_t v402;
  BOOL v403;
  void *v404;
  BOOL v405;
  uint64_t v406;
  id v407;
  const char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  _BOOL4 v421;
  uint64_t v422;
  id v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  _BOOL4 v431;
  uint64_t v432;
  id v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  BOOL v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  double v453;
  double v454;
  BOOL v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  double v461;
  double v462;
  void *v463;
  const char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  const char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  const char *v475;
  uint64_t v476;
  const char *v477;
  uint64_t v478;
  uint64_t v479;
  const char *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  std::string::size_type v485;
  char *v486;
  char *v487;
  char *v488;
  NSObject *v489;
  const char *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  void *v501;
  uint64_t v502;
  void *v504;
  void *v505;
  const char *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  NSObject *v512;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  unint64_t v519;
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  const void *v531;
  std::string::size_type v532;
  int64_t v533;
  char *v534;
  char *v535;
  char **v536;
  unint64_t v537;
  char *v538;
  uint64_t v539;
  char *v540;
  char *v541;
  unint64_t v542;
  char *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  char *v548;
  char *v549;
  int64_t v550;
  void *v551;
  unint64_t v552;
  char *v553;
  char *v554;
  __int128 v555;
  char *v556;
  char *v557;
  char *v558;
  void *v559;
  void *v560;
  uint64_t v561;
  dispatch_time_t v562;
  NSObject *log;
  std::string::size_type v564;
  id v565;
  char **v566;
  id v567;
  id v568;
  char *v569;
  id v570;
  void *v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  id v575;
  id v576;
  id v577;
  id v578;
  id v579;
  id v580;
  double v581;
  _QWORD block[6];
  id v583;
  id v584[2];
  int v585;
  int v586;
  const __CFString *v587;
  void *v588;
  std::string buf;
  void *__p;
  _BYTE v591[32];
  _QWORD *v592;
  uint64_t v593;

  v593 = *MEMORY[0x1E0C80C00];
  v570 = a2;
  if (!a1)
  {
    v502 = 0;
    goto LABEL_142;
  }
  v566 = a3;
  objc_msgSend_interpointDistance(a1, v5, v6, v7, v8, v9);
  v11 = v10;
  v12 = v570;
  v571 = v12;
  if (objc_msgSend_pointCount(v12, v13, v14, v15, v16, v17))
  {
    objc_msgSend_bounds(v12, v18, v19, v20, v21, v22);
    v24 = v23;
    v26 = v25;
  }
  else
  {
    v24 = *MEMORY[0x1E0C9D538];
    v26 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  objc_msgSend_bounds(v12, v18, v19, v20, v21, v22);
  v37 = 1.0;
  if (v38 > (double)objc_msgSend_maxInputWidth(a1, v27, v28, v29, v30, v31))
  {
    v39 = objc_msgSend_maxInputWidth(a1, v32, v33, v34, v35, v36);
    objc_msgSend_bounds(v12, v40, v41, v42, v43, v44);
    v46 = v45;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v37 = (double)v39 / v46;
    v47 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_bounds(v12, v48, v49, v50, v51, v52);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v37;
      _os_log_impl(&dword_1BE607000, v47, OS_LOG_TYPE_DEBUG, "Input too wide (%f): adjust with scale factor %f", (uint8_t *)&buf, 0x16u);
    }

  }
  objc_msgSend_averageCharacterHeightEstimation_minChunkHeight_(v12, v32, v33, v34, v35, v36, 5.0, 10.0);
  v55 = v54;
  if (v54 > (double)objc_msgSend_maxStrokeHeight(a1, v56, v57, v58, v59, v60)
    && (unint64_t)objc_msgSend_strokeCount(v12, v61, v62, v63, v64, v65) <= 0xA)
  {
    v66 = (double)objc_msgSend_maxStrokeHeight(a1, v61, v62, v63, v64, v65) / v55;
    if (qword_1EF568E88 != -1)
    {
      v581 = v66;
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v66 = v581;
    }
    v37 = fmin(v37, v66);
    v67 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      v73 = objc_msgSend_strokeCount(v12, v68, v69, v70, v71, v72);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218496;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v55;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v73;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      __p = *(void **)&v37;
      _os_log_impl(&dword_1BE607000, v67, OS_LOG_TYPE_DEBUG, "Stroke too big (%f) for sparse drawing (%lu strokes): adjust with scale factor %f", (uint8_t *)&buf, 0x20u);
    }

  }
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v12, v61, v62, v63, v64, v65, -v24, -v26, v37);
  v74 = (CoreHandwriting *)objc_claimAutoreleasedReturnValue();
  v584[0] = &off_1E77F0958;
  v584[1] = v11;
  v585 = 1;
  v586 = objc_msgSend_maxPointsPerStroke(a1, v75, v76, v77, v78, v79);
  CoreHandwriting::drawingToInk(v74, MEMORY[0x1E0C9D538], (uint64_t *)v591);
  sub_1BE6FA6B0((uint64_t)v584, (uint64_t)v591, 0, (uint64_t)&buf);
  if (*(_QWORD *)&v591[24])
    operator delete(*(void **)&v591[24]);
  v81 = *(_QWORD *)v591;
  if (*(_QWORD *)v591)
  {
    v82 = *(_QWORD *)&v591[8];
    v83 = *(void **)v591;
    if (*(_QWORD *)&v591[8] != *(_QWORD *)v591)
    {
      v84 = *(_QWORD *)&v591[8];
      do
      {
        v86 = *(void **)(v84 - 24);
        v84 -= 24;
        v85 = v86;
        if (v86)
        {
          *(_QWORD *)(v82 - 16) = v85;
          operator delete(v85);
        }
        v82 = v84;
      }
      while (v84 != v81);
      v83 = *(void **)v591;
    }
    *(_QWORD *)&v591[8] = v81;
    operator delete(v83);
  }
  CoreHandwriting::inkToDrawing((uint64_t **)&buf, v80);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p)
    operator delete(__p);
  v88 = buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0])
  {
    size = buf.__r_.__value_.__l.__size_;
    v90 = (void *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
    {
      v91 = buf.__r_.__value_.__l.__size_;
      do
      {
        v93 = *(void **)(v91 - 24);
        v91 -= 24;
        v92 = v93;
        if (v93)
        {
          *(_QWORD *)(size - 16) = v92;
          operator delete(v92);
        }
        size = v91;
      }
      while (v91 != v88);
      v90 = (void *)buf.__r_.__value_.__r.__words[0];
    }
    buf.__r_.__value_.__l.__size_ = v88;
    operator delete(v90);
  }

  v99 = v87;
  for (i = 0; ; ++i)
  {
    objc_msgSend_modelConfigurationsNumStrokes(a1, v94, v95, v96, v97, v98);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    if (i >= objc_msgSend_count(v101, v102, v103, v104, v105, v106))
      break;
    v112 = objc_msgSend_strokeCount(v99, v107, v108, v109, v110, v111);
    objc_msgSend_modelConfigurationsNumStrokes(a1, v113, v114, v115, v116, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v118, v119, i, v120, v121, v122);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v112) = v112 > (int)objc_msgSend_intValue(v123, v124, v125, v126, v127, v128);

    if (!(_DWORD)v112)
      goto LABEL_43;
  }

LABEL_43:
  objc_msgSend_modelConfigurationsNumStrokes(a1, v94, v95, v96, v97, v98);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v135 = i < objc_msgSend_count(v129, v130, v131, v132, v133, v134);

  if (!v135)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v141 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v141, OS_LOG_TYPE_FAULT))
    {
      v147 = objc_msgSend_strokeCount(v99, v142, v143, v144, v145, v146);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v147;
      _os_log_impl(&dword_1BE607000, v141, OS_LOG_TYPE_FAULT, "Unexpected number of strokes %lu to select the model configuration", (uint8_t *)&buf, 0xCu);
    }

  }
  v153 = objc_msgSend_minPointsPerStroke(a1, v136, v137, v138, v139, v140);
  for (j = 0; j < objc_msgSend_strokeCount(v99, v148, v149, v150, v151, v152); ++j)
    v153 = (uint64_t)fmax((double)v153, (double)(unint64_t)objc_msgSend_pointCountForStrokeIndex_(v99, v155, j, v157, v158, v159));
  for (k = 0; ; ++k)
  {
    objc_msgSend_modelConfigurationsNumPoints(a1, v155, v156, v157, v158, v159);
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    if (k >= objc_msgSend_count(v161, v162, v163, v164, v165, v166))
      break;
    objc_msgSend_modelConfigurationsNumPoints(a1, v167, v168, v169, v170, v171);
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v172, v173, k, v174, v175, v176);
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    v183 = v153 > (int)objc_msgSend_intValue(v177, v178, v179, v180, v181, v182);

    if (!v183)
      goto LABEL_57;
  }

LABEL_57:
  objc_msgSend_modelConfigurationsNumPoints(a1, v155, v156, v157, v158, v159);
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  v190 = k < objc_msgSend_count(v184, v185, v186, v187, v188, v189);

  if (!v190)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v196 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v196, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v153;
      _os_log_impl(&dword_1BE607000, v196, OS_LOG_TYPE_FAULT, "Unexpected max number of points per stroke %lu to select the model configuration", (uint8_t *)&buf, 0xCu);
    }

  }
  objc_msgSend_modelConfigurationsNumStrokes(a1, v191, v192, v193, v194, v195);
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v197, v198, i, v199, v200, v201);
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  v574 = objc_msgSend_unsignedIntValue(v202, v203, v204, v205, v206, v207);

  objc_msgSend_modelConfigurationsNumPoints(a1, v208, v209, v210, v211, v212);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v213, v214, k, v215, v216, v217);
  v218 = (void *)objc_claimAutoreleasedReturnValue();
  v224 = objc_msgSend_unsignedIntValue(v218, v219, v220, v221, v222, v223);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v225, (uint64_t)CFSTR("s%d_p%d"), v226, v227, v228, v574, v224);
  v565 = (id)objc_claimAutoreleasedReturnValue();

  v229 = v574;
  v583 = 0;
  v572 = v224;
  objc_msgSend__extractFeaturesFromDrawing_numStrokes_numPoints_error_(a1, v230, (uint64_t)v99, v574, v224, (uint64_t)&v583);
  v231 = objc_claimAutoreleasedReturnValue();
  v579 = v583;
  v567 = (id)v231;
  if (!v231)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v232 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v232, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_modelName(a1, v233, v234, v235, v236, v237);
      v238 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedDescription(v579, v239, v240, v241, v242, v243);
      v244 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v238;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v244;
      _os_log_impl(&dword_1BE607000, v232, OS_LOG_TYPE_FAULT, "An error occurred in the %@ model when extracting features: %@", (uint8_t *)&buf, 0x16u);

    }
  }
  v245 = v99;
  v246 = objc_alloc(MEMORY[0x1E0C9E970]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E78290D8;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v247, v574, v248, v249, v250);
  v251 = (void *)objc_claimAutoreleasedReturnValue();
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v251;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v252, v572, v253, v254, v255);
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v256;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v257, (uint64_t)&buf, 3, v258, v259);
  v260 = (void *)objc_claimAutoreleasedReturnValue();
  v584[0] = 0;
  v578 = (id)objc_msgSend_initWithShape_dataType_error_(v246, v261, (uint64_t)v260, 65568, (uint64_t)v584, v262);
  v576 = v584[0];

  if (v578)
  {
    objc_msgSend_fillWithNumber_(v578, v263, (uint64_t)&unk_1E7829750, v264, v265, v266);
    v267 = objc_retainAutorelease(v578);
    v278 = objc_msgSend_dataPointer(v267, v268, v269, v270, v271, v272);
    for (m = 0; m < objc_msgSend_strokeCount(v245, v273, v274, v275, v276, v277); ++m)
    {
      for (n = 0; n < objc_msgSend_pointCountForStrokeIndex_(v245, v273, m, v275, v276, v277); ++n)
        *(_DWORD *)(v278 + 4 * n) = 1065353216;
      v278 += 4 * v572;
    }
    v281 = v267;
    v282 = v579;
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v283 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(a1, v284, v285, v286, v287, v288);
      v289 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedDescription(v576, v290, v291, v292, v293, v294);
      v295 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v591 = 138412546;
      *(_QWORD *)&v591[4] = v289;
      *(_WORD *)&v591[12] = 2112;
      *(_QWORD *)&v591[14] = v295;
      _os_log_impl(&dword_1BE607000, v283, OS_LOG_TYPE_ERROR, "An error occurred when trying to allocate the input mask array for the %@ model: %@", v591, 0x16u);

    }
    v282 = objc_retainAutorelease(v576);
  }

  v568 = v282;
  if (!v578)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v296 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v296, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_modelName(a1, v297, v298, v299, v300, v301);
      v302 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedDescription(v568, v303, v304, v305, v306, v307);
      v308 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v302;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v308;
      _os_log_impl(&dword_1BE607000, v296, OS_LOG_TYPE_FAULT, "An error occurred in the %@ model when creating the input mask array: %@", (uint8_t *)&buf, 0x16u);

    }
  }
  v309 = objc_alloc(MEMORY[0x1E0C9E970]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E78290D8;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v310, v574, v311, v312, v313);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v314;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E78290D8;
  v315 = (void *)MEMORY[0x1E0CB37E8];
  v321 = objc_msgSend_modelDecoderSize(a1, v316, v317, v318, v319, v320);
  objc_msgSend_numberWithInteger_(v315, v322, v321, v323, v324, v325);
  v326 = (void *)objc_claimAutoreleasedReturnValue();
  __p = v326;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v327, (uint64_t)&buf, 4, v328, v329);
  v330 = (void *)objc_claimAutoreleasedReturnValue();
  v584[0] = 0;
  v577 = (id)objc_msgSend_initWithShape_dataType_error_(v309, v331, (uint64_t)v330, 65568, (uint64_t)v584, v332);
  v333 = v584[0];

  if (v577)
  {
    v334 = objc_retainAutorelease(v577);
    v340 = objc_msgSend_dataPointer(v334, v335, v336, v337, v338, v339);
    v346 = objc_msgSend_modelDecoderSize(a1, v341, v342, v343, v344, v345);
    if ((_DWORD)v574)
    {
      v352 = 0;
      v353 = -9.21034037 / (double)v346;
      do
      {
        for (ii = 0; ii < objc_msgSend_modelDecoderSize(a1, v347, v348, v349, v350, v351); ii += 2)
        {
          v355 = objc_msgSend_modelDecoderSize(a1, v347, v348, v349, v350, v351);
          v356 = expf(v353 * (float)ii) * (float)v352;
          *(float *)(v340 + 4 * (ii + v352 * v355)) = sinf(v356);
          v362 = objc_msgSend_modelDecoderSize(a1, v357, v358, v359, v360, v361);
          *(float *)(v340 + 4 * (ii + v352 * v362) + 4) = cosf(v356);
        }
        ++v352;
      }
      while (v352 != v574);
    }
    v363 = v334;
    v364 = v568;
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v365 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v365, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(a1, v366, v367, v368, v369, v370);
      v371 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedDescription(v333, v372, v373, v374, v375, v376);
      v377 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v591 = 138412546;
      *(_QWORD *)&v591[4] = v371;
      *(_WORD *)&v591[12] = 2112;
      *(_QWORD *)&v591[14] = v377;
      _os_log_impl(&dword_1BE607000, v365, OS_LOG_TYPE_ERROR, "An error occurred when trying to allocate the input positional encodings for the %@ model: %@", v591, 0x16u);

    }
    v364 = objc_retainAutorelease(v333);
  }

  v580 = v364;
  if (!v577)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v378 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v378, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_modelName(a1, v379, v380, v381, v382, v383);
      v384 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_localizedDescription(v580, v385, v386, v387, v388, v389);
      v390 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v384;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v390;
      _os_log_impl(&dword_1BE607000, v378, OS_LOG_TYPE_FAULT, "An error occurred in the %@ model when creating the positional encodings array: %@", (uint8_t *)&buf, 0x16u);

    }
  }
  v391 = a1[3];
  v575 = objc_retainAutorelease(v565);
  v397 = (const char *)objc_msgSend_UTF8String(v575, v392, v393, v394, v395, v396);
  v398 = strlen(v397);
  if (v398 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v399 = v398;
  if (v398 >= 0x17)
  {
    v401 = (v398 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v398 | 7) != 0x17)
      v401 = v398 | 7;
    v402 = v401 + 1;
    p_buf = (std::string *)operator new(v401 + 1);
    buf.__r_.__value_.__l.__size_ = v399;
    buf.__r_.__value_.__r.__words[2] = v402 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_114;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v398;
  p_buf = &buf;
  if (v398)
LABEL_114:
    memmove(p_buf, v397, v399);
  p_buf->__r_.__value_.__s.__data_[v399] = 0;
  v403 = sub_1BE7E7D10(v391, &buf);
  v404 = v575;
  v405 = v403;
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v403)
      goto LABEL_117;
LABEL_136:
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v489 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v489, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(a1, v496, v497, v498, v499, v500);
      v501 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v501;
      _os_log_impl(&dword_1BE607000, v489, OS_LOG_TYPE_ERROR, "An error occurred selecting the espresso configuration of the %@ model", (uint8_t *)&buf, 0xCu);

    }
    goto LABEL_140;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (!v405)
    goto LABEL_136;
LABEL_117:
  v406 = a1[3];
  v407 = objc_retainAutorelease(v567);
  v413 = objc_msgSend_dataPointer(v407, v408, v409, v410, v411, v412);
  v419 = objc_msgSend_numInputFeatures(a1, v414, v415, v416, v417, v418);
  v420 = operator new(0x20uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v420 + 4);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v420 + 4);
  *v420 = 1;
  v420[1] = v229;
  v420[2] = v572;
  v420[3] = v419;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v420;
  v421 = sub_1BE7E7A2C(v406, v413);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v421)
    goto LABEL_130;
  v422 = a1[3];
  v423 = objc_retainAutorelease(v578);
  v429 = objc_msgSend_dataPointer(v423, v424, v425, v426, v427, v428);
  v430 = operator new(0x20uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v430 + 4);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v430 + 4);
  *v430 = 1;
  v430[1] = v229;
  v430[2] = v572;
  v430[3] = 1;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v430;
  v431 = sub_1BE7E7A2C(v422, v429);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v431)
    goto LABEL_130;
  v432 = a1[3];
  v433 = objc_retainAutorelease(v577);
  v439 = objc_msgSend_dataPointer(v433, v434, v435, v436, v437, v438);
  v445 = objc_msgSend_modelDecoderSize(a1, v440, v441, v442, v443, v444);
  v446 = operator new(0x20uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v446 + 4);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v446 + 4);
  *v446 = 1;
  v446[1] = v229;
  v446[2] = 1;
  v446[3] = v445;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v446;
  v447 = sub_1BE7E7A2C(v432, v439);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v447)
  {
LABEL_130:
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v489 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v489, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(a1, v490, v491, v492, v493, v494);
      v495 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v495;
      _os_log_impl(&dword_1BE607000, v489, OS_LOG_TYPE_ERROR, "An error occurred setting the input to the %@ model", (uint8_t *)&buf, 0xCu);

    }
LABEL_140:

    v502 = 0;
    goto LABEL_141;
  }
  if (!CoreHandwriting::EspressoModelWrapper::bindOutput(a1[3], (uint64_t)&buf, (uint64_t)"output_predictions", 1))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    log = (id)qword_1EF568E30;
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(a1, v506, v507, v508, v509, v510);
      v511 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v591 = 138412290;
      *(_QWORD *)&v591[4] = v511;
      _os_log_impl(&dword_1BE607000, log, OS_LOG_TYPE_ERROR, "An error occurred binding the output of the %@ model", v591, 0xCu);

    }
    goto LABEL_153;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v448, v449, v450, v451, v452);
  v454 = v453;
  v455 = CoreHandwriting::EspressoModelWrapper::execute((CoreHandwriting::EspressoModelWrapper *)a1[3]);
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v456, v457, v458, v459, v460);
  v462 = v461;
  v587 = CFSTR("inputStrokeCount");
  v463 = (void *)MEMORY[0x1E0CB37E8];
  v469 = objc_msgSend_strokeCount(v571, v464, v465, v466, v467, v468);
  objc_msgSend_numberWithUnsignedInteger_(v463, v470, v469, v471, v472, v473);
  v474 = (void *)objc_claimAutoreleasedReturnValue();
  v588 = v474;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v475, (uint64_t)&v588, (uint64_t)&v587, 1, v476);
  log = objc_claimAutoreleasedReturnValue();

  objc_msgSend_logModelInference_startTimestamp_endTimestamp_data_(CHPowerLogging, v477, 0, (uint64_t)log, v478, v479, v454, v462);
  if (!v455)
  {
    CHOSLogForCategory(3);
    v512 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v512, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(a1, v513, v514, v515, v516, v517);
      v518 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v591 = 138412290;
      *(_QWORD *)&v591[4] = v518;
      _os_log_impl(&dword_1BE607000, v512, OS_LOG_TYPE_ERROR, "An error occurred executing the %@ model", v591, 0xCu);

    }
LABEL_153:
    v502 = 0;
    goto LABEL_192;
  }
  v485 = buf.__r_.__value_.__r.__words[0];
  v487 = *v566;
  v486 = v566[1];
  if (v486 != *v566)
  {
    v488 = v566[1];
    do
    {
      v505 = (void *)*((_QWORD *)v488 - 3);
      v488 -= 24;
      v504 = v505;
      if (v505)
      {
        *((_QWORD *)v486 - 2) = v504;
        operator delete(v504);
      }
      v486 = v488;
    }
    while (v488 != v487);
  }
  v519 = 0;
  v566[1] = v487;
  v564 = v485;
  while (v519 < objc_msgSend_strokeCount(v571, v480, v481, v482, v483, v484))
  {
    v530 = v519 + 1;
    v531 = (const void *)(v485 + 4 * objc_msgSend_numOutputClasses(a1, v520, v521, v522, v523, v524) * v519);
    v532 = v485 + 4 * objc_msgSend_numOutputClasses(a1, v525, v526, v527, v528, v529) * (v519 + 1);
    v533 = v532 - (_QWORD)v531;
    v573 = v530;
    if ((uint64_t)(v532 - (_QWORD)v531) < 1)
    {
      v535 = 0;
      v534 = 0;
      v536 = v566;
      v538 = v566[1];
      v537 = (unint64_t)v566[2];
      if ((unint64_t)v538 < v537)
        goto LABEL_159;
LABEL_165:
      v543 = *v536;
      v544 = 0xAAAAAAAAAAAAAAABLL * ((v538 - *v536) >> 3);
      v545 = v544 + 1;
      if (v544 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F930();
      v546 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v537 - (_QWORD)v543) >> 3);
      if (2 * v546 > v545)
        v545 = 2 * v546;
      if (v546 >= 0x555555555555555)
        v547 = 0xAAAAAAAAAAAAAAALL;
      else
        v547 = v545;
      v592 = v566 + 2;
      if (v547)
      {
        if (v547 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F100();
        v548 = (char *)operator new(24 * v547);
      }
      else
      {
        v548 = 0;
      }
      v549 = &v548[24 * v544];
      *(_QWORD *)v591 = v548;
      *(_QWORD *)&v591[8] = v549;
      *(_QWORD *)&v591[16] = v549;
      *(_QWORD *)&v591[24] = &v548[24 * v547];
      v569 = *(char **)&v591[24];
      *((_QWORD *)v549 + 1) = 0;
      *(_QWORD *)v549 = 0;
      *((_QWORD *)v549 + 2) = 0;
      v550 = v535 - v534;
      if (v535 != v534)
      {
        if (v550 < 0)
          sub_1BE61F930();
        v551 = operator new(v535 - v534);
        *(_QWORD *)v549 = v551;
        v552 = (unint64_t)v551 + 4 * (v550 >> 2);
        memcpy(v551, v534, v550);
        *(int64x2_t *)(v549 + 8) = vdupq_n_s64(v552);
      }
      v553 = v549 + 24;
      *(_QWORD *)&v591[16] = v549 + 24;
      if (v538 == v543)
      {
        *v566 = v549;
        v566[1] = v553;
        v566[2] = v569;
        v404 = v575;
        v485 = v564;
      }
      else
      {
        v485 = v564;
        do
        {
          v554 = v549;
          *((_QWORD *)v549 - 2) = 0;
          *((_QWORD *)v549 - 1) = 0;
          v555 = *(_OWORD *)(v538 - 24);
          v538 -= 24;
          *(_OWORD *)(v549 - 24) = v555;
          v549 -= 24;
          *((_QWORD *)v554 - 1) = *((_QWORD *)v538 + 2);
          *(_QWORD *)v538 = 0;
          *((_QWORD *)v538 + 1) = 0;
          *((_QWORD *)v538 + 2) = 0;
        }
        while (v538 != v543);
        v538 = *v566;
        v556 = v566[1];
        *v566 = v549;
        v557 = *(char **)&v591[16];
        *(_OWORD *)(v566 + 1) = *(_OWORD *)&v591[16];
        v553 = v557;
        v404 = v575;
        if (v556 != v538)
        {
          v558 = v556;
          do
          {
            v560 = (void *)*((_QWORD *)v558 - 3);
            v558 -= 24;
            v559 = v560;
            if (v560)
            {
              *((_QWORD *)v556 - 2) = v559;
              operator delete(v559);
            }
            v556 = v558;
          }
          while (v558 != v538);
        }
      }
      if (v538)
        operator delete(v538);
      v566[1] = v553;
      v542 = v573;
      v519 = v573;
      if (v534)
      {
LABEL_155:
        operator delete(v534);
        v519 = v542;
      }
    }
    else
    {
      v534 = (char *)operator new(v532 - (_QWORD)v531);
      v535 = &v534[4 * (v533 >> 2)];
      memcpy(v534, v531, v533);
      v536 = v566;
      v538 = v566[1];
      v537 = (unint64_t)v566[2];
      if ((unint64_t)v538 >= v537)
        goto LABEL_165;
LABEL_159:
      *(_QWORD *)v538 = 0;
      *((_QWORD *)v538 + 1) = 0;
      *((_QWORD *)v538 + 2) = 0;
      v539 = v535 - v534;
      if (v535 != v534)
      {
        if (v539 < 0)
          sub_1BE61F930();
        v540 = (char *)operator new(v535 - v534);
        *(_QWORD *)v538 = v540;
        *((_QWORD *)v538 + 1) = v540;
        v541 = &v540[4 * (v539 >> 2)];
        *((_QWORD *)v538 + 2) = v541;
        memcpy(v540, v534, v535 - v534);
        *((_QWORD *)v538 + 1) = v541;
      }
      v566[1] = v538 + 24;
      v566[1] = v538 + 24;
      v542 = v573;
      v519 = v573;
      if (v534)
        goto LABEL_155;
    }
  }
  v561 = a1[5];
  v562 = dispatch_time(0, 2000000000);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE76CA28;
  block[3] = &unk_1E77F24A0;
  block[4] = a1;
  block[5] = v561;
  dispatch_after(v562, (dispatch_queue_t)qword_1EF568D88, block);
  v502 = 1;
LABEL_192:

LABEL_141:
LABEL_142:

  return v502;
}

void sub_1BE76C480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE76C844(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double MidY;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  CGRect v29;
  CGRect v30;

  v4 = a3;
  objc_msgSend_objectAtIndexedSubscript_(a2, v5, 0, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v4, v10, 0, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v9, v15, v16, v17, v18, v19);
  MidY = CGRectGetMidY(v29);
  objc_msgSend_bounds(v14, v21, v22, v23, v24, v25);
  v26 = CGRectGetMidY(v30);
  if (MidY < v26)
    v27 = -1;
  else
    v27 = v26 < MidY;

  return v27;
}

void sub_1BE76C8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE76C8F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE76C900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE76C918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 sub_1BE76C930(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE76C954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

uint64_t sub_1BE76C9D0(uint64_t a1)
{
  uint64_t result;

  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  result = sub_1BE76ADFC(*(uint64_t **)(a1 + 32), *(void **)(a1 + 40), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1BE76CA28(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  std::string::size_type v16;
  std::string *p_p;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::string __p;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v6[5])
    return;
  v7 = v6[3];
  objc_msgSend_modelSmallestConfig(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (const char *)objc_msgSend_UTF8String(v8, v9, v10, v11, v12, v13);
  v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    p_p = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v16;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15;
    p_p = &__p;
    if (!v15)
      goto LABEL_10;
  }
  memmove(p_p, v14, v16);
LABEL_10:
  p_p->__r_.__value_.__s.__data_[v16] = 0;
  v20 = sub_1BE7E7D10(v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  if (!v20)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v21 = (id)qword_1EF568E30;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_modelName(v6, v22, v23, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(__p.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      _os_log_impl(&dword_1BE607000, v21, OS_LOG_TYPE_ERROR, "An error occurred selecting the smallest espresso configuration of the %@ model", (uint8_t *)&__p, 0xCu);

    }
  }
}

void sub_1BE76CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE76CD34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE76CD44(uint64_t a1)
{

}

void sub_1BE76CD4C(uint64_t a1)
{
  void *v2;
  char *v3;
  char *v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *__p;
  char *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  char **v38;
  char **v39;
  _QWORD *v40;
  char v41;
  char *v42;
  _QWORD *v43;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (sub_1BE76ADFC(*(uint64_t **)(a1 + 32), *(void **)(a1 + 40), (char **)&v35))
  {
    v2 = (void *)objc_opt_class();
    __p = 0;
    v33 = 0;
    v34 = 0;
    v3 = (char *)v35;
    v4 = v36;
    v5 = v36 - (_BYTE *)v35;
    if (v36 != v35)
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
      if (v6 >= 0xAAAAAAAAAAAAAABLL)
        sub_1BE61F930();
      v31 = v2;
      v7 = (char *)operator new(v5);
      v8 = 0;
      __p = v7;
      v33 = v7;
      v34 = &v7[24 * v6];
      v43 = v7;
      v42 = v7;
      v38 = &v34;
      v39 = &v42;
      v40 = &v43;
      v41 = 0;
      do
      {
        v9 = &v7[v8];
        v10 = &v3[v8];
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        v12 = *(_BYTE **)&v3[v8];
        v11 = *(_BYTE **)&v3[v8 + 8];
        v13 = v11 - v12;
        if (v11 != v12)
        {
          if (v13 < 0)
            sub_1BE61F930();
          v14 = (char *)operator new(v11 - v12);
          *(_QWORD *)v9 = v14;
          *((_QWORD *)v9 + 1) = v14;
          v15 = &v14[4 * (v13 >> 2)];
          *((_QWORD *)v9 + 2) = v15;
          memcpy(v14, v12, v13);
          *((_QWORD *)v9 + 1) = v15;
        }
        v43 = v9 + 24;
        v8 += 24;
      }
      while (v10 + 24 != v4);
      v33 = &v7[v8];
      v2 = v31;
    }
    objc_msgSend_localesFromModelPrediction_maxNumberOfLocales_numberOfOutputClass_scriptCodeMap_(v2, (const char *)v2, (uint64_t)&__p, *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 224));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    v19 = (char *)__p;
    if (__p)
    {
      v20 = v33;
      v21 = __p;
      if (v33 != __p)
      {
        v22 = v33;
        do
        {
          v24 = (void *)*((_QWORD *)v22 - 3);
          v22 -= 24;
          v23 = v24;
          if (v24)
          {
            *((_QWORD *)v20 - 2) = v23;
            operator delete(v23);
          }
          v20 = v22;
        }
        while (v22 != v19);
        v21 = __p;
      }
      v33 = v19;
      operator delete(v21);
    }
  }
  v25 = (char *)v35;
  if (v35)
  {
    v26 = v36;
    v27 = v35;
    if (v36 != v35)
    {
      v28 = v36;
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = v35;
    }
    v36 = v25;
    operator delete(v27);
  }
}

void sub_1BE76CFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1BE63CEBC((void **)va);
  sub_1BE63CEBC((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BE76CFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  _QWORD *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  if (__p)
  {
    v18 = a12;
    v19 = __p;
    if (a12 != __p)
    {
      v20 = a12;
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *(v18 - 2) = v21;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != __p);
      v19 = __p;
    }
    operator delete(v19);
  }
  sub_1BE63CEBC(&a14);
  _Unwind_Resume(a1);
}

void sub_1BE76D580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_1BE76D638((void **)va);
  if (v5)
    operator delete(v5);

  _Unwind_Resume(a1);
}

void **sub_1BE76D638(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 2);
        v3 -= 16;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE76D914(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  BOOL v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int v63;
  _QWORD *v64;
  BOOL v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  int64_t v78;
  int64_t v79;
  void *v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  void *v95;
  uint64_t v97;
  void *v98;
  int v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  _DWORD *v121;
  int v122;
  int v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD *v126;
  uint64_t v127;
  void *v128;
  int v129;
  void *v130;
  uint64_t v131;
  void *v133;

void sub_1BE76E1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;

  sub_1BE76E65C(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 8) > *(_DWORD *)(a4 + 8))
  {
    v10 = *(void **)a4;
    *(_QWORD *)a4 = 0;
    v11 = *(void **)a5;
    *(_QWORD *)a5 = 0;
    v12 = *(void **)a4;
    *(_QWORD *)a4 = v11;

    v13 = *(void **)a5;
    *(_QWORD *)a5 = v10;

    v14 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v14;
    if (*(_DWORD *)(a4 + 8) > *(_DWORD *)(a3 + 8))
    {
      v15 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v16 = *(void **)a4;
      *(_QWORD *)a4 = 0;
      v17 = *(void **)a3;
      *(_QWORD *)a3 = v16;

      v18 = *(void **)a4;
      *(_QWORD *)a4 = v15;

      v19 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v19;
      if (*(_DWORD *)(a3 + 8) > *(_DWORD *)(a2 + 8))
      {
        v20 = *(void **)a2;
        *(_QWORD *)a2 = 0;
        v21 = *(void **)a3;
        *(_QWORD *)a3 = 0;
        v22 = *(void **)a2;
        *(_QWORD *)a2 = v21;

        v23 = *(void **)a3;
        *(_QWORD *)a3 = v20;

        v24 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v24;
        if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 8))
        {
          v25 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          v26 = *(void **)a2;
          *(_QWORD *)a2 = 0;
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;

          v28 = *(void **)a2;
          *(_QWORD *)a2 = v25;

          v29 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v29;
        }
      }
    }
  }
}

void sub_1BE76E308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;

  v7 = (int *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 8);
  v8 = (int *)(a1 + 8);
  v10 = (int *)(a3 + 8);
  v9 = *(_DWORD *)(a3 + 8);
  if (v6 > *(_DWORD *)(a1 + 8))
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v9 <= v6)
    {
      v23 = *(void **)a2;
      *(_QWORD *)a2 = 0;
      v24 = *(void **)a1;
      *(_QWORD *)a1 = v23;

      v25 = *(void **)a2;
      *(_QWORD *)a2 = v11;

      v26 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v26;
      if (*v10 <= v26)
        return;
      v27 = *(void **)a2;
      *(_QWORD *)a2 = 0;
      v28 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v29 = *(void **)a2;
      *(_QWORD *)a2 = v28;

      v14 = *(void **)a3;
      *(_QWORD *)a3 = v27;
      v8 = v7;
    }
    else
    {
      v12 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;

      v14 = *(void **)a3;
      *(_QWORD *)a3 = v11;
    }
    v7 = v10;
    goto LABEL_10;
  }
  if (v9 > v6)
  {
    v15 = *(void **)a2;
    *(_QWORD *)a2 = 0;
    v16 = *(void **)a3;
    *(_QWORD *)a3 = 0;
    v17 = *(void **)a2;
    *(_QWORD *)a2 = v16;

    v18 = *(void **)a3;
    *(_QWORD *)a3 = v15;

    v19 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v19;
    if (*(_DWORD *)(a2 + 8) > *v8)
    {
      v20 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      v21 = *(void **)a2;
      *(_QWORD *)a2 = 0;
      v22 = *(void **)a1;
      *(_QWORD *)a1 = v21;

      v14 = *(void **)a2;
      *(_QWORD *)a2 = v20;
LABEL_10:

      v30 = *v8;
      *v8 = *v7;
      *v7 = v30;
    }
  }
}

BOOL sub_1BE76E488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 8))
      {
        v6 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        v7 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = 0;
        v8 = *(void **)a1;
        *(_QWORD *)a1 = v7;

        v9 = *(void **)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v6;

        v10 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v10;
        return 1;
      }
      return result;
    case 3:
      sub_1BE76E308(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      sub_1BE76E65C(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1BE76E1A8(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v11 = a1 + 32;
      sub_1BE76E308(a1, a1 + 16, a1 + 32);
      v12 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_DWORD *)(v12 + 8);
    if (v17 > *(_DWORD *)(v11 + 8))
    {
      v18 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      v19 = v13;
      do
      {
        v20 = a1 + v19;
        v21 = *(_QWORD *)(a1 + v19 + 32);
        *(_QWORD *)(v20 + 32) = 0;
        v22 = *(void **)(a1 + v19 + 48);
        *(_QWORD *)(v20 + 48) = v21;

        *(_DWORD *)(v20 + 56) = *(_DWORD *)(v20 + 40);
        if (v19 == -32)
        {
          v15 = a1;
          goto LABEL_7;
        }
        v19 -= 16;
      }
      while (v17 > *(_DWORD *)(v20 + 24));
      v15 = a1 + v19 + 48;
LABEL_7:
      v16 = *(void **)v15;
      *(_QWORD *)v15 = v18;

      *(_DWORD *)(v15 + 8) = v17;
      if (++v14 == 8)
        return v12 + 16 == a2;
    }
    v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2)
      return 1;
  }
}

void sub_1BE76E65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;

  sub_1BE76E308(a1, a2, a3);
  if (*(_DWORD *)(a4 + 8) > *(_DWORD *)(a3 + 8))
  {
    v8 = *(void **)a3;
    *(_QWORD *)a3 = 0;
    v9 = *(void **)a4;
    *(_QWORD *)a4 = 0;
    v10 = *(void **)a3;
    *(_QWORD *)a3 = v9;

    v11 = *(void **)a4;
    *(_QWORD *)a4 = v8;

    v12 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v12;
    if (*(_DWORD *)(a3 + 8) > *(_DWORD *)(a2 + 8))
    {
      v13 = *(void **)a2;
      *(_QWORD *)a2 = 0;
      v14 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v15 = *(void **)a2;
      *(_QWORD *)a2 = v14;

      v16 = *(void **)a3;
      *(_QWORD *)a3 = v13;

      v17 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v17;
      if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 8))
      {
        v18 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        v19 = *(void **)a2;
        *(_QWORD *)a2 = 0;
        v20 = *(void **)a1;
        *(_QWORD *)a1 = v19;

        v21 = *(void **)a2;
        *(_QWORD *)a2 = v18;

        v22 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v22;
      }
    }
  }
}

uint64_t sub_1BE76E770(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  _BOOL8 v7;
  int *v9;
  uint64_t v11;
  int v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  int v16;
  int v17;
  BOOL v18;

  v4 = (a2 - a1) >> 2;
  v5 = a4 - a3;
  v6 = (a4 - a3) >> 2;
  if (v4 < v6)
    return 0;
  v9 = (int *)a3;
  if (v4 == v6)
  {
    if (a2 - a1 != v5)
      return 0;
    if (a1 != a2)
    {
      v11 = a1 + 4;
      do
      {
        v12 = *v9++;
        v7 = *(_DWORD *)(v11 - 4) == v12;
        v13 = *(_DWORD *)(v11 - 4) != v12 || v11 == a2;
        v11 += 4;
      }
      while (!v13);
      return v7;
    }
    return 1;
  }
  if (a4 == a3)
    return 1;
  if ((v5 & 0x8000000000000000) != 0)
    sub_1BE61F930();
  v14 = (char *)operator new(a4 - a3);
  memcpy(v14, (const void *)(a2 - 4 * v6), v5);
  v15 = 0;
  do
  {
    v16 = *(_DWORD *)&v14[v15];
    v17 = v9[v15 / 4];
    v7 = v16 == v17;
    v18 = v16 != v17 || 4 * v6 - 4 == v15;
    v15 += 4;
  }
  while (!v18);
  operator delete(v14);
  return v7;
}

void sub_1BE76E874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1BE76E890(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a1;
      if (a1 >= a3)
        v4 = a1 % a3;
    }
    else
    {
      v4 = ((_DWORD)a3 - 1) & a1;
    }
    v5 = *(uint64_t **)(a2 + 8 * v4);
    if (v5)
    {
      v5 = (uint64_t *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v7 = v5[1];
            if (v7 == a1)
            {
              if (*((_DWORD *)v5 + 4) == a1)
                return v5 != 0;
            }
            else if ((v7 & (a3 - 1)) != v4)
            {
              goto LABEL_21;
            }
            v5 = (uint64_t *)*v5;
            if (!v5)
              return v5 != 0;
          }
        }
        do
        {
          v6 = v5[1];
          if (v6 == a1)
          {
            if (*((_DWORD *)v5 + 4) == a1)
              return v5 != 0;
          }
          else
          {
            if (v6 >= a3)
              v6 %= a3;
            if (v6 != v4)
              goto LABEL_21;
          }
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    v5 = 0;
  }
  return v5 != 0;
}

_DWORD *sub_1BE76E968(uint64_t *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v4;
  void *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  int v10;
  void *v11;
  char *v12;
  void *v13;
  _DWORD *v14;
  _DWORD *result;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  unint64_t v20;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  BOOL v44;
  _QWORD *v45;
  _QWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  _DWORD *v52;
  int v53;
  uint64_t v54[5];
  uint64_t v55[2];
  void *v56;
  void *v57[2];
  void *__p[2];
  int v59;
  __int128 __src;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 == a2)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v4 < 0)
      sub_1BE61F930();
    v6 = operator new(a3 - a2);
    *a1 = (uint64_t)v6;
    v7 = (uint64_t)v6 + 4 * (v4 >> 2);
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  v8 = (char *)operator new(0xCuLL);
  *(_QWORD *)v8 = 0x200000000;
  *((_DWORD *)v8 + 2) = 0;
  if ((sub_1BE76E770((uint64_t)v6, v7, v8, v8 + 12) & 1) != 0)
  {
    operator delete(v8);
LABEL_8:
    a1[1] -= 8;
    goto LABEL_18;
  }
  v9 = operator new(0xCuLL);
  *(_QWORD *)v9 = 0x400000000;
  *((_DWORD *)v9 + 2) = 0;
  v10 = sub_1BE76E770(*a1, a1[1], (char *)v9, (char *)v9 + 12);
  operator delete(v9);
  operator delete(v8);
  if (v10)
    goto LABEL_8;
  v11 = operator new(0xCuLL);
  *(_QWORD *)v11 = 0x200000001;
  *((_DWORD *)v11 + 2) = 0;
  if ((sub_1BE76E770(*a1, a1[1], (char *)v11, (char *)v11 + 12) & 1) != 0)
    goto LABEL_12;
  v12 = (char *)operator new(0xCuLL);
  *(_QWORD *)v12 = 0x200000000;
  *((_DWORD *)v12 + 2) = 1;
  if ((sub_1BE76E770(*a1, a1[1], v12, v12 + 12) & 1) != 0)
  {
    operator delete(v12);
LABEL_12:
    operator delete(v11);
LABEL_13:
    v13 = (void *)a1[2];
    v14 = (_DWORD *)*a1;
    if (v13 == (void *)*a1)
    {
      if (v13)
      {
        a1[1] = (uint64_t)v13;
        operator delete(v13);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      v14 = operator new(4uLL);
      *a1 = (uint64_t)v14;
      a1[1] = (uint64_t)v14;
      a1[2] = (uint64_t)(v14 + 1);
    }
    *v14 = 8;
    a1[1] = (uint64_t)(v14 + 1);
    goto LABEL_18;
  }
  v22 = operator new(0xCuLL);
  *(_QWORD *)v22 = 0x200000001;
  *((_DWORD *)v22 + 2) = 1;
  v23 = sub_1BE76E770(*a1, a1[1], (char *)v22, (char *)v22 + 12);
  operator delete(v22);
  operator delete(v12);
  operator delete(v11);
  if ((v23 & 1) != 0)
    goto LABEL_13;
  v24 = *a1;
  v25 = a1[1];
  if (*(_DWORD *)(v25 - 4) == 18)
  {
    v26 = v25 - v24;
    if (v25 == v24)
      goto LABEL_52;
    v27 = (_DWORD *)(v25 - 4);
    while (*v27 != 17)
    {
      a1[1] = (uint64_t)v27;
      v26 -= 4;
      v28 = v27-- == (_DWORD *)v24;
      if (v28)
        goto LABEL_52;
    }
    if (v26 < 5 || *(_DWORD *)(v26 + v24 - 8) != 16)
    {
LABEL_52:
      LODWORD(__src) = 8;
      sub_1BE77E25C((char **)a1, &__src, (_BYTE *)&__src + 4);
    }
    else
    {
      a1[1] = (uint64_t)v27;
    }
    goto LABEL_18;
  }
  v29 = v25 - v24;
  if (v29 >= 5)
  {
    v30 = *(unsigned int *)(v29 + v24 - 8);
    *(_OWORD *)v57 = 0u;
    *(_OWORD *)__p = 0u;
    v59 = 1065353216;
    sub_1BE77E330((float *)v57, 0xEu, 14);
    sub_1BE77E330((float *)v57, 0xCu, 12);
    sub_1BE77E330((float *)v57, 0xDu, 13);
    if (v57[1])
    {
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v57[1]);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        v32 = v30;
        if (v57[1] <= (void *)v30)
          v32 = v30 % (unint64_t)v57[1];
      }
      else
      {
        v32 = (LODWORD(v57[1]) - 1) & v30;
      }
      v33 = (uint64_t **)*((_QWORD *)v57[0] + v32);
      if (v33)
      {
        v34 = *v33;
        if (v34)
        {
          if (v31.u32[0] < 2uLL)
          {
            while (1)
            {
              v36 = v34[1];
              if (v36 == v30)
              {
                if (*((_DWORD *)v34 + 4) == (_DWORD)v30)
                  goto LABEL_97;
              }
              else if ((v36 & ((unint64_t)v57[1] - 1)) != v32)
              {
                goto LABEL_70;
              }
              v34 = (uint64_t *)*v34;
              if (!v34)
                goto LABEL_70;
            }
          }
          do
          {
            v35 = v34[1];
            if (v35 == v30)
            {
              if (*((_DWORD *)v34 + 4) == (_DWORD)v30)
              {
LABEL_97:
                v37 = *(_DWORD *)(a1[1] - 4) != 19;
                v38 = __p[0];
                if (!__p[0])
                  goto LABEL_72;
                goto LABEL_71;
              }
            }
            else
            {
              if ((void *)v35 >= v57[1])
                v35 %= (unint64_t)v57[1];
              if (v35 != v32)
                break;
            }
            v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
      }
    }
LABEL_70:
    v37 = 0;
    v38 = __p[0];
    if (!__p[0])
      goto LABEL_72;
    do
    {
LABEL_71:
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
LABEL_72:
    v40 = v57[0];
    v57[0] = 0;
    if (v40)
    {
      operator delete(v40);
      if (v37)
      {
LABEL_74:
        LODWORD(__src) = 8;
        sub_1BE77E25C((char **)a1, &__src, (_BYTE *)&__src + 4);
        goto LABEL_18;
      }
    }
    else if (v37)
    {
      goto LABEL_74;
    }
  }
  v41 = a1[1];
  if ((unint64_t)(v41 - *a1) >= 5 && *(_DWORD *)(v41 - 8) == 16)
  {
    v42 = *(_DWORD *)(v41 - 4);
    *(_QWORD *)&__src = 0x1100000013;
    sub_1BE76F1DC((uint64_t)v55, (unsigned int *)&__src, 2);
    v43 = (void *)v55[0];
    v44 = sub_1BE76E890(v42, v55[0], v55[1]);
    v45 = v56;
    if (v56)
    {
      do
      {
        v46 = (_QWORD *)*v45;
        operator delete(v45);
        v45 = v46;
      }
      while (v46);
      v43 = (void *)v55[0];
    }
    v55[0] = 0;
    if (v43)
      operator delete(v43);
    if (!v44)
    {
      LODWORD(__src) = 8;
      sub_1BE77E25C((char **)a1, &__src, (_BYTE *)&__src + 4);
      goto LABEL_18;
    }
  }
  v47 = (_DWORD *)a1[1];
  if (*(v47 - 1) != 20)
    goto LABEL_18;
  v48 = *a1;
  v49 = (unint64_t)v47 - *a1;
  if (v47 != (_DWORD *)*a1)
  {
    v50 = v47 - 1;
    while (*v50 != 19)
    {
      a1[1] = (uint64_t)v50;
      v49 -= 4;
      v28 = v50-- == (_DWORD *)v48;
      if (v28)
      {
        v47 = (_DWORD *)v48;
        goto LABEL_100;
      }
    }
    if (v49 < 5)
    {
      v47 = v50 + 1;
    }
    else
    {
      v51 = *(_DWORD *)(v49 + v48 - 8);
      __src = xmmword_1BE8DF264;
      v61 = 16;
      sub_1BE76F1DC((uint64_t)v54, (unsigned int *)&__src, 5);
      LOBYTE(v51) = sub_1BE76E890(v51, v54[0], v54[1]);
      sub_1BE65DB88((uint64_t)v54);
      v47 = (_DWORD *)a1[1];
      if ((v51 & 1) != 0)
      {
        v53 = *(v47 - 2);
        v52 = v47 - 2;
        a1[1] = (uint64_t)(v52 + 1);
        if (v53 == 14)
        {
          *v52 = 15;
        }
        else
        {
          a1[1] = (uint64_t)v52;
          sub_1BE76F270((uint64_t)a1, 7);
        }
        goto LABEL_18;
      }
      v48 = *a1;
    }
  }
LABEL_100:
  if (v47 == (_DWORD *)v48 || *(v47 - 1) != 19)
  {
    LODWORD(__src) = 8;
    sub_1BE77E25C((char **)a1, &__src, (_BYTE *)&__src + 4);
  }
  else
  {
    *(_DWORD *)(v48 + 4 * (((uint64_t)v47 - v48) >> 2) - 4) = 7;
  }
LABEL_18:
  result = (_DWORD *)*a1;
  v16 = a1[1];
  if ((unint64_t)(v16 - *a1) >= 5)
  {
    if (*result)
    {
      v17 = v16 - (_QWORD)result;
      if (*result != 8 || v17 < 5)
        return result;
LABEL_34:
      if ((_DWORD *)a1[2] == result)
      {
        a1[1] = (uint64_t)result;
        operator delete(result);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        result = operator new(4uLL);
        *a1 = (uint64_t)result;
        a1[1] = (uint64_t)result;
        a1[2] = (uint64_t)(result + 1);
      }
      *result++ = 8;
      a1[1] = (uint64_t)result;
      return result;
    }
    if (result[1] == 9)
    {
      if ((_DWORD *)a1[2] == result)
      {
        a1[1] = (uint64_t)result;
        operator delete(result);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        result = operator new(4uLL);
        *a1 = (uint64_t)result;
        a1[1] = (uint64_t)result;
        a1[2] = (uint64_t)(result + 1);
      }
      *result = 8;
      v19 = result + 1;
      a1[1] = (uint64_t)v19;
      v16 = (uint64_t)v19;
      result = (_DWORD *)*a1;
    }
  }
  v20 = v16 - (_QWORD)result;
  if (*result == 8 && v20 >= 5)
    goto LABEL_34;
  return result;
}

void sub_1BE76F070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE76F13C()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x1BE76F134);
  JUMPOUT(0x1BE76F12CLL);
}

_QWORD *sub_1BE76F14C(_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62)
      sub_1BE61F930();
    v5 = 4 * a3;
    v6 = (char *)operator new(4 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BE76F1C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE76F1DC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      sub_1BE77E330((float *)a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1BE76F23C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_1BE76F270(uint64_t a1, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 4);
    goto LABEL_22;
  }
  v8 = *(char **)a1;
  v9 = (uint64_t)&v5[-*(_QWORD *)a1];
  v10 = v9 >> 2;
  v11 = (v9 >> 2) + 1;
  if (v11 >> 62)
    sub_1BE61F930();
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 1 > v11)
    v11 = v12 >> 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
    v13 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 62)
      sub_1BE61F100();
    v14 = operator new(4 * v13);
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = a2;
    v7 = (uint64_t)(v15 + 1);
    v17 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (_DWORD *)(4 * v10);
  v16 = 0;
  *(_DWORD *)(4 * v10) = a2;
  v7 = 4 * v10 + 4;
  v17 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v18 = v17 - 4;
    if (v18 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v6 = &v5[-v20];
    v15 = (_DWORD *)((char *)v15 - v20);
    v21 = &v14[4 * v10 - 16];
    v22 = v5 - 16;
    v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v15 = v25;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v16;
  if (v8)
    operator delete(v8);
LABEL_22:
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t **CoreHandwriting::CHEncoderDecoderBeamState::copyTensors(uint64_t **this, const CoreHandwriting::CHEncoderDecoderBeamState **a2)
{
  const CoreHandwriting::CHEncoderDecoderBeamState **v2;
  const CoreHandwriting::CHEncoderDecoderBeamState *v3;
  uint64_t **v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const CoreHandwriting::CHEncoderDecoderBeamState *v36;
  const CoreHandwriting::CHEncoderDecoderBeamState **v37;
  BOOL v38;

  v2 = a2 + 1;
  v3 = *a2;
  if (*a2 != (const CoreHandwriting::CHEncoderDecoderBeamState *)(a2 + 1))
  {
    v4 = this;
    do
    {
      v5 = objc_alloc(MEMORY[0x1E0C9E970]);
      objc_msgSend_shape(*((void **)v3 + 7), v6, v7, v8, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend_initWithShape_dataType_error_(v5, v12, (uint64_t)v11, 65568, 0, v13);
      v15 = sub_1BE77EAFC(v4, (const void **)v3 + 4, (uint64_t)v3 + 32);
      v16 = (void *)v15[7];
      v15[7] = v14;

      v17 = objc_retainAutorelease((id)sub_1BE77EAFC(v4, (const void **)v3 + 4, (uint64_t)v3 + 32)[7]);
      v23 = (void *)objc_msgSend_dataPointer(v17, v18, v19, v20, v21, v22);
      v29 = (const void *)objc_msgSend_dataPointer(*((void **)v3 + 7), v24, v25, v26, v27, v28);
      v35 = objc_msgSend_count(*((void **)v3 + 7), v30, v31, v32, v33, v34);
      this = (uint64_t **)memcpy(v23, v29, 4 * v35);
      v36 = (const CoreHandwriting::CHEncoderDecoderBeamState *)*((_QWORD *)v3 + 1);
      if (v36)
      {
        do
        {
          v37 = (const CoreHandwriting::CHEncoderDecoderBeamState **)v36;
          v36 = *(const CoreHandwriting::CHEncoderDecoderBeamState **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (const CoreHandwriting::CHEncoderDecoderBeamState **)*((_QWORD *)v3 + 2);
          v38 = *v37 == v3;
          v3 = (const CoreHandwriting::CHEncoderDecoderBeamState *)v37;
        }
        while (!v38);
      }
      v3 = (const CoreHandwriting::CHEncoderDecoderBeamState *)v37;
    }
    while (v37 != v2);
  }
  return this;
}

void sub_1BE76F508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::CHEncoderDecoderBeamState::operator>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;

  v2 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(float *)(a1 + 168) / fabs(sqrt((double)(unint64_t)(v2 >> 2)));
    v4 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v4)
    {
LABEL_3:
      v5 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v4 >> 2)));
      return v3 > v5;
    }
  }
  else
  {
    v3 = *(float *)(a1 + 168);
    v4 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v4)
      goto LABEL_3;
  }
  return v3 > *(float *)(a2 + 168);
}

float CoreHandwriting::CHEncoderDecoderBeamState::getNormalizedProbability(CoreHandwriting::CHEncoderDecoderBeamState *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 10) - *((_QWORD *)this + 9);
  if (v1)
    return *((float *)this + 42) / fabs(sqrt((double)(unint64_t)(v1 >> 2)));
  else
    return *((float *)this + 42);
}

void sub_1BE76F5D4(std::string *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  void **v10;
  std::string::size_type size;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  void *v18;
  std::string __p;
  void *v20;
  void **v21;
  std::string __dst;

  sub_1BE76F7C0(&v20, (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  v6 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a2 + 80) != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      std::string::operator=((std::string *)((char *)v20 + v7), (const std::string *)(*a3 + 24 * *(int *)(v6 + 4 * v8++)));
      v6 = *(_QWORD *)(a2 + 72);
      v7 += 24;
    }
    while (v8 < (*(_QWORD *)(a2 + 80) - v6) >> 2);
  }
  v9 = (void **)v20;
  v10 = v21;
  memset(&__p, 0, sizeof(__p));
  if (v20 != v21)
  {
    do
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
        std::string::append(&__p, " ");
      v12 = *((char *)v9 + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)v9;
      else
        v13 = (const std::string::value_type *)*v9;
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v9 + 23);
      else
        v14 = (std::string::size_type)v9[1];
      v15 = std::string::append(&__p, v13, v14);
      if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1BE61F128(&__dst, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
      }
      else
      {
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v16;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __dst;
      v9 += 3;
    }
    while (v9 != v10);
    v9 = (void **)v20;
  }
  *a1 = __p;
  memset(&__p, 0, sizeof(__p));
  if (v9)
  {
    v17 = v21;
    v18 = v9;
    if (v21 != v9)
    {
      do
      {
        if (*((char *)v17 - 1) < 0)
          operator delete(*(v17 - 3));
        v17 -= 3;
      }
      while (v17 != v9);
      v18 = v20;
    }
    v21 = v9;
    operator delete(v18);
  }
}

void sub_1BE76F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE61081C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE76F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1BE61081C(&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE76F7C0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1BE76F868(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE76F8BC(uint64_t **a1, const void **a2, void *a3, int a4)
{
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t *v55;
  void *v56;
  id v57;

  v7 = a3;
  v8 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend_shape(v7, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_arrayWithArray_(v8, v15, (uint64_t)v14, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setObject_atIndexedSubscript_(v19, v20, (uint64_t)&unk_1E78290F0, 0, v21, v22);
  v57 = objc_retainAutorelease(v7);
  v28 = objc_msgSend_dataPointer(v57, v23, v24, v25, v26, v27);
  objc_msgSend_strides(v57, v29, v30, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v34, v35, 0, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend_integerValue(v39, v40, v41, v42, v43, v44);

  v46 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend_strides(v57, v47, v48, v49, v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v46, v53, v28 + 4 * v45 * a4, (uint64_t)v19, 65568, (uint64_t)v52, 0, 0);
  v55 = sub_1BE77EAFC(a1, a2, (uint64_t)a2);
  v56 = (void *)v55[7];
  v55[7] = v54;

}

void sub_1BE76FA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE76FA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreHandwriting::CHEncoderDecoderBeamState::updatePastAttention(uint64_t **this, CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  size_t v9;
  size_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  size_t v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **__dst;
  size_t v64;
  unint64_t v65;

  v8 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), (const char *)a2, a3, a4, a5, a6);
  v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_34;
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v64 = v10;
    v65 = v13 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v65) = v9;
  p_dst = (void **)&__dst;
  if (v9)
LABEL_8:
    memmove(p_dst, v8, v10);
  *((_BYTE *)p_dst + v10) = 0;
  v14 = objc_retainAutorelease(sub_1BE77ECA0(this, (const void **)&__dst, (uint64_t)&__dst)[7]);
  v25 = objc_msgSend_dataPointer(v14, v15, v16, v17, v18, v19);
  if (SHIBYTE(v65) < 0)
    operator delete(__dst);
  v26 = (const char *)objc_msgSend_UTF8String(CFSTR("attention_weights"), v20, v21, v22, v23, v24);
  v27 = strlen(v26);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
LABEL_34:
    sub_1BE61F1B4();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = (void **)operator new(v30 + 1);
    v64 = v28;
    v65 = v31 | 0x8000000000000000;
    __dst = v29;
    goto LABEL_18;
  }
  HIBYTE(v65) = v27;
  v29 = (void **)&__dst;
  if (v27)
LABEL_18:
    memmove(v29, v26, v28);
  *((_BYTE *)v29 + v28) = 0;
  v32 = objc_retainAutorelease(sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst)[7]);
  v43 = objc_msgSend_dataPointer(v32, v33, v34, v35, v36, v37);
  if (SHIBYTE(v65) < 0)
    operator delete(__dst);
  v44 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v38, v39, v40, v41, v42);
  v45 = strlen(v44);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_34;
  v46 = v45;
  v47 = 0;
  while (1)
  {
    if (v46 >= 0x17)
    {
      v49 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v49 = v46 | 7;
      v50 = v49 + 1;
      v48 = (void **)operator new(v49 + 1);
      v64 = v46;
      v65 = v50 | 0x8000000000000000;
      __dst = v48;
LABEL_29:
      memmove(v48, v44, v46);
      goto LABEL_30;
    }
    HIBYTE(v65) = v46;
    v48 = (void **)&__dst;
    if (v46)
      goto LABEL_29;
LABEL_30:
    *((_BYTE *)v48 + v46) = 0;
    v51 = sub_1BE77ECA0(this, (const void **)&__dst, (uint64_t)&__dst);
    v62 = objc_msgSend_count(v51[7], v52, v53, v54, v55, v56);
    if (SHIBYTE(v65) < 0)
      operator delete(__dst);
    if (v62 <= v47)
      break;
    *(float *)(v25 + 4 * v47) = *(float *)(v43 + 4 * v47) + *(float *)(v25 + 4 * v47);
    ++v47;
    v44 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v57, v58, v59, v60, v61);
    v46 = strlen(v44);
    if (v46 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
}

void sub_1BE76FD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::CHEncoderDecoderBeamState::scorersApplied(CoreHandwriting::CHEncoderDecoderBeamState *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  sub_1BE76E968(&v4, *((_BYTE **)this + 22), *((_BYTE **)this + 23));
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 22) = v4;
  v3 = v5;
  *(_OWORD *)((char *)this + 184) = v5;
  if (*(_DWORD *)(v3 - 4) != 1)
  {
    if (*((char *)this + 223) < 0)
    {
      **((_BYTE **)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    else
    {
      *((_BYTE *)this + 200) = 0;
      *((_BYTE *)this + 223) = 0;
    }
  }
}

float CoreHandwriting::LatexSyntaxBeamScorer::apply(CoreHandwriting::LatexSyntaxBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int *v16;
  float v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  _QWORD **v30;
  _QWORD *v31[2];
  _QWORD **v32;
  _QWORD *v33[2];
  _QWORD **v34;
  _QWORD *v35[2];
  _QWORD **v36;
  _QWORD *v37[2];
  uint64_t *v38;
  int v39[4];

  sub_1BE7C7168((CoreHandwriting::LatexSyntaxBeamScorer *)((char *)this + 8), (uint64_t *)a2 + 9, &v38);
  v37[0] = 0;
  v37[1] = 0;
  v36 = v37;
  sub_1BE77EE04((uint64_t *)&v36, (int *)v38, v39);
  if (!v37[0])
    goto LABEL_59;
  v6 = (int *)v37;
  v7 = (int *)v37[0];
  do
  {
    v8 = v7;
    v9 = v6;
    v10 = v7[7];
    if (v10 >= 1)
      v6 = v7;
    else
      v7 += 2;
    v7 = *(int **)v7;
  }
  while (v7);
  if (v6 == (int *)v37)
    goto LABEL_59;
  if (v10 < 1)
    v8 = v9;
  if (v8[7] > 1)
  {
LABEL_59:
    if (*((_BYTE *)a2 + 172))
    {
      v35[0] = 0;
      v35[1] = 0;
      v34 = v35;
      sub_1BE77EE04((uint64_t *)&v34, (int *)v38, v39);
      if (v35[0])
      {
        v11 = (int *)v35;
        v12 = (int *)v35[0];
        do
        {
          v13 = v12;
          v14 = v11;
          v15 = v12[7];
          if (v15 >= 3)
            v11 = v12;
          else
            v12 += 2;
          v12 = *(int **)v12;
        }
        while (v12);
        v16 = (int *)v35;
        if (v11 != (int *)v35)
        {
          if (v15 < 3)
            v13 = v14;
          if (v13[7] >= 4)
            v16 = (int *)v35;
          else
            v16 = v11;
        }
      }
      else
      {
        v16 = (int *)v35;
      }
      sub_1BE62033C((uint64_t)&v34, v35[0]);
      sub_1BE62033C((uint64_t)&v36, v37[0]);
      if (v16 != (int *)v35)
        goto LABEL_28;
    }
    else
    {
      sub_1BE62033C((uint64_t)&v36, v37[0]);
    }
    if (*(_DWORD *)(*((_QWORD *)a2 + 23) - 4) == 8)
    {
LABEL_30:
      *a3 = 0;
      v17 = *((float *)this + 107);
      goto LABEL_55;
    }
    v33[0] = 0;
    v33[1] = 0;
    v32 = v33;
    sub_1BE77EE04((uint64_t *)&v32, (int *)v38, v39);
    if (v33[0])
    {
      v18 = (int *)v33;
      v19 = (int *)v33[0];
      do
      {
        v20 = v19;
        v21 = v18;
        v22 = v19[7];
        if (v22 >= 5)
          v18 = v19;
        else
          v19 += 2;
        v19 = *(int **)v19;
      }
      while (v19);
      if (v18 != (int *)v33)
      {
        if (v22 < 5)
          v20 = v21;
        if (v20[7] <= 5)
        {
          sub_1BE62033C((uint64_t)&v32, v33[0]);
          goto LABEL_30;
        }
      }
    }
    sub_1BE62033C((uint64_t)&v32, v33[0]);
    v31[0] = 0;
    v31[1] = 0;
    v30 = v31;
    sub_1BE77EE04((uint64_t *)&v30, (int *)v38, v39);
    if (!v31[0])
      goto LABEL_53;
    v23 = (int *)v31;
    v24 = (int *)v31[0];
    do
    {
      v25 = v24;
      v26 = v23;
      v27 = v24[7];
      if (v27 >= 4)
        v23 = v24;
      else
        v24 += 2;
      v24 = *(int **)v24;
    }
    while (v24);
    if (v23 == (int *)v31)
      goto LABEL_53;
    if (v27 < 4)
      v25 = v26;
    if (v25[7] > 4)
    {
LABEL_53:
      sub_1BE62033C((uint64_t)&v30, v31[0]);
    }
    else
    {
      v28 = *((unsigned __int8 *)a2 + 172);
      sub_1BE62033C((uint64_t)&v30, v31[0]);
      if (v28)
        goto LABEL_30;
    }
    *a3 = 1;
    v17 = 0.0;
    goto LABEL_55;
  }
  sub_1BE62033C((uint64_t)&v36, v37[0]);
LABEL_28:
  *a3 = 0;
  v17 = *((float *)this + 106);
LABEL_55:
  sub_1BE62033C((uint64_t)&v38, *(_QWORD **)v39);
  return v17;
}

void sub_1BE7700BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  sub_1BE62033C((uint64_t)&a10, a11);
  sub_1BE62033C(v11 - 88, *(_QWORD **)(v11 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1BE77010C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6)
{
  id v10;
  id v11;
  uint64_t *i;
  void **v13;
  void **v14;
  uint64_t *j;
  void **v16;
  void **v17;
  uint64_t *k;
  void **v19;
  void **v20;
  id v23;
  void *__p[2];
  uint64_t v25;

  v10 = a5;
  *(_QWORD *)a1 = &off_1E77EF800;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  v11 = v10;
  *(_QWORD *)(a1 + 136) = 0;
  v23 = v11;
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_1BE77F0C0((char *)(a1 + 136), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  *(int32x2_t *)(a1 + 160) = vdup_n_s32(0x3F0F42FBu);
  *(_DWORD *)(a1 + 168) = -1064084082;
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_1BE61F128(__p, (void *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)i + 1);
      v25 = i[4];
    }
    if (v25 >= 0)
      v13 = (void **)((char *)__p + HIBYTE(v25));
    else
      v13 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
    if (v25 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    for (; v14 != v13; v14 = (void **)((char *)v14 + 1))
      *(_BYTE *)v14 = __tolower(*(unsigned __int8 *)v14);
    sub_1BE77F1F0(a1 + 8, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }
  for (j = *(uint64_t **)(a3 + 16); j; j = (uint64_t *)*j)
  {
    if (*((char *)j + 39) < 0)
    {
      sub_1BE61F128(__p, (void *)j[2], j[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)j + 1);
      v25 = j[4];
    }
    if (v25 >= 0)
      v16 = (void **)((char *)__p + HIBYTE(v25));
    else
      v16 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
    if (v25 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    for (; v17 != v16; v17 = (void **)((char *)v17 + 1))
      *(_BYTE *)v17 = __tolower(*(unsigned __int8 *)v17);
    sub_1BE77F1F0(a1 + 48, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }
  for (k = *(uint64_t **)(a4 + 16); k; k = (uint64_t *)*k)
  {
    if (*((char *)k + 39) < 0)
    {
      sub_1BE61F128(__p, (void *)k[2], k[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)k + 1);
      v25 = k[4];
    }
    if (v25 >= 0)
      v19 = (void **)((char *)__p + HIBYTE(v25));
    else
      v19 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
    if (v25 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    for (; v20 != v19; v20 = (void **)((char *)v20 + 1))
      *(_BYTE *)v20 = __tolower(*(unsigned __int8 *)v20);
    sub_1BE77F1F0(a1 + 88, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }

  return a1;
}

void sub_1BE7703F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1BE61CB14(v19);
  sub_1BE61CB14(v18);
  sub_1BE61CB14(v17);

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::validStateForFullUnit(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t isCurrency;
  char *v16;
  char v17;
  char *v18;
  char v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *__p;
  char *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 22);
  v8 = (_BYTE *)*((_QWORD *)a2 + 23);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = -4;
    if (MEMORY[0xFFFFFFFFFFFFFFFC])
      goto LABEL_4;
LABEL_7:
    isCurrency = CoreHandwriting::ExpectedStringsBeamScorer::isCurrency(this, a2, a3, a4, a5, a6);
    goto LABEL_14;
  }
  if (v10 < 0)
    sub_1BE61F930();
  v11 = operator new(v8 - v9);
  v12 = (uint64_t)v11 + 4 * (v10 >> 2);
  v41 = (uint64_t)v11;
  v43 = v12;
  memcpy(v11, v9, v10);
  v13 = v12 - 4;
  if (!*(_DWORD *)(v12 - 4))
    goto LABEL_7;
LABEL_4:
  v14 = (char *)operator new(0x10uLL);
  *(_OWORD *)v14 = xmmword_1BE8DF1E0;
  if ((sub_1BE76E770((uint64_t)v11, v12, v14, v14 + 16) & 1) != 0)
  {
    operator delete(v14);
LABEL_13:
    isCurrency = 1;
    goto LABEL_14;
  }
  v16 = (char *)operator new(0x10uLL);
  *(_OWORD *)v16 = xmmword_1BE8DF1F0;
  v17 = sub_1BE76E770((uint64_t)v11, v12, v16, v16 + 16);
  operator delete(v16);
  operator delete(v14);
  if ((v17 & 1) != 0)
    goto LABEL_13;
  v42 = v13;
  v18 = (char *)operator new(8uLL);
  *(_QWORD *)v18 = 0x100000000;
  v19 = sub_1BE76E770((uint64_t)v11, v13, v18, v18 + 8);
  operator delete(v18);
  if ((v19 & 1) != 0)
    goto LABEL_13;
  v20 = (char *)operator new(8uLL);
  *(_QWORD *)v20 = 0x100000005;
  v21 = v41;
  v22 = v42;
  v23 = sub_1BE76E770(v41, v42, v20, v20 + 8);
  operator delete(v20);
  if ((v23 & 1) != 0)
    goto LABEL_13;
  v24 = (char *)operator new(8uLL);
  *(_QWORD *)v24 = 0x10000000ALL;
  v25 = sub_1BE76E770(v21, v22, v24, v24 + 8);
  operator delete(v24);
  if ((v25 & 1) != 0)
    goto LABEL_13;
  v26 = (char *)operator new(8uLL);
  *(_QWORD *)v26 = 0x100000007;
  v27 = sub_1BE76E770(v21, v22, v26, v26 + 8);
  operator delete(v26);
  if ((v27 & 1) != 0)
    goto LABEL_13;
  v29 = *((unsigned __int8 *)a2 + 172) ^ 1;
  v30 = *((_QWORD *)a2 + 15);
  v31 = (*((_QWORD *)a2 + 16) - v30) >> 3;
  if (*((char *)a2 + 223) < 0)
  {
    v32 = *((_QWORD *)a2 + 26);
  }
  else
  {
    v32 = *((unsigned __int8 *)a2 + 223);
    v29 = v29;
  }
  if (v31 > v32 + v29 && *(_QWORD *)(v30 + 8 * (v31 + ~v29 - v32)) == 16)
    goto LABEL_13;
  v46 = 0xB00000001;
  v47 = 1;
  sub_1BE76F14C(&v39, &v46, 3uLL);
  v33 = sub_1BE76E770(v21, v22, (char *)v39, v40);
  if ((v33 & 1) == 0)
  {
    v44 = 0x300000001;
    v45 = 1;
    sub_1BE76F14C(&__p, &v44, 3uLL);
    if (!sub_1BE76E770(v21, v22, (char *)__p, v38))
    {
      isCurrency = 0;
      goto LABEL_33;
    }
  }
  v34 = *((_QWORD *)a2 + 15);
  v35 = (*((_QWORD *)a2 + 16) - v34) >> 3;
  if (*((char *)a2 + 223) < 0)
    v36 = *((_QWORD *)a2 + 26);
  else
    v36 = *((unsigned __int8 *)a2 + 223);
  if (v35 > v29 + v36 + 2)
  {
    isCurrency = *(_QWORD *)(v34 + 8 * (v35 - v29 - v36) - 16) == 64;
    if ((v33 & 1) != 0)
      goto LABEL_35;
LABEL_33:
    if (__p)
    {
      v38 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_35;
  }
  isCurrency = 0;
  if ((v33 & 1) == 0)
    goto LABEL_33;
LABEL_35:
  if (v39)
  {
    v40 = (char *)v39;
    operator delete(v39);
  }
LABEL_14:
  if (v11)
    operator delete(v11);
  return isCurrency;
}

void sub_1BE770830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a12;
    if (!a12)
    {
LABEL_3:
      if (!v16)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v16);
      goto LABEL_8;
    }
  }
  else
  {
    v18 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v18);
  if (!v16)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::isCurrency(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void **v7;
  void **v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v32;

  if (*((char *)a2 + 223) < 0)
  {
    sub_1BE61F128(__p, *((void **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)a2 + 200);
    v32 = *((_QWORD *)a2 + 27);
  }
  if (v32 >= 0)
    v7 = (void **)((char *)__p + HIBYTE(v32));
  else
    v7 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (v32 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  for (; v8 != v7; v8 = (void **)((char *)v8 + 1))
    *(_BYTE *)v8 = __tolower(*(unsigned __int8 *)v8);
  objc_msgSend_root(this[16], (const char *)a2, a3, a4, a5, a6, __p[0]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v32 >= 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v9, (uint64_t)__p, 4, v10, v11);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v9, (uint64_t)__p[0], 4, v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v12, v14, (uint64_t)v13, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18 && objc_msgSend_isMatch(v18, v19, v20, v21, v22, v23))
  {
    v29 = objc_msgSend_containsCurrency(v18, v24, v25, v26, v27, v28);

    if (SHIBYTE(v32) < 0)
    {
LABEL_18:
      operator delete(__p[0]);
      return v29;
    }
  }
  else
  {
    v29 = 0;

    if (SHIBYTE(v32) < 0)
      goto LABEL_18;
  }
  return v29;
}

void sub_1BE770A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::validStateForUnitPrefix(CoreHandwriting::ExpectedStringsBeamScorer *this, const CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  uint64_t v2;
  char *v4;
  char v5;
  _BOOL8 v6;
  char *v8;
  char v9;
  void *v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *__p;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 23);
  if (*(_DWORD *)(v2 - 4) != 1)
    return 0;
  v4 = (char *)operator new(8uLL);
  *(_QWORD *)v4 = 0x100000000;
  v5 = sub_1BE76E770(*((_QWORD *)a2 + 22), v2, v4, v4 + 8);
  operator delete(v4);
  if ((v5 & 1) == 0)
  {
    v8 = (char *)operator new(8uLL);
    *(_QWORD *)v8 = 0x100000005;
    v9 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v8, v8 + 8);
    operator delete(v8);
    v6 = 1;
    if ((v9 & 1) != 0)
      return v6;
    v10 = operator new(0xCuLL);
    *(_QWORD *)v10 = 0x130000000ELL;
    *((_DWORD *)v10 + 2) = 1;
    if ((sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), (char *)v10, (char *)v10 + 12) & 1) != 0)
    {
LABEL_8:
      operator delete(v10);
      return v6;
    }
    v11 = (char *)operator new(0xCuLL);
    *(_QWORD *)v11 = 0x130000000FLL;
    *((_DWORD *)v11 + 2) = 1;
    if ((sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v11, v11 + 12) & 1) != 0)
    {
      operator delete(v11);
      operator delete(v10);
      return 1;
    }
    v12 = (char *)operator new(8uLL);
    *(_QWORD *)v12 = 0x10000000ALL;
    v13 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v12, v12 + 8);
    operator delete(v12);
    operator delete(v11);
    operator delete(v10);
    if ((v13 & 1) != 0)
      return 1;
    v14 = *((_QWORD *)a2 + 15);
    v15 = (*((_QWORD *)a2 + 16) - v14) >> 3;
    v16 = *((char *)a2 + 223) < 0 ? *((_QWORD *)a2 + 26) : *((unsigned __int8 *)a2 + 223);
    if (v15 > v16 && *(_QWORD *)(v14 + 8 * (v15 + ~v16)) == 16)
      return 1;
    v17 = (char *)operator new(8uLL);
    *(_QWORD *)v17 = 0x100000007;
    v18 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v17, v17 + 8);
    operator delete(v17);
    v6 = 1;
    if ((v18 & 1) != 0)
      return v6;
    v10 = operator new(0xCuLL);
    *(_QWORD *)v10 = 0xB00000001;
    *((_DWORD *)v10 + 2) = 1;
    v19 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), (char *)v10, (char *)v10 + 12);
    if ((v19 & 1) != 0
      || (v25 = 0x300000001,
          v26 = 1,
          sub_1BE76F14C(&__p, &v25, 3uLL),
          sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), (char *)__p, v24)))
    {
      v20 = *((_QWORD *)a2 + 15);
      v21 = (*((_QWORD *)a2 + 16) - v20) >> 3;
      if (*((char *)a2 + 223) < 0)
        v22 = *((_QWORD *)a2 + 26);
      else
        v22 = *((unsigned __int8 *)a2 + 223);
      if (v21 <= v22 + 2)
      {
        v6 = 0;
        if ((v19 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        v6 = *(_QWORD *)(v20 + 8 * (v21 - v22) - 16) == 64;
        if ((v19 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      v6 = 0;
    }
    if (__p)
    {
      v24 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_8;
  }
  return 1;
}

void sub_1BE770DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
  {
    operator delete(__p);
    operator delete(v10);
    _Unwind_Resume(a1);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::isFullUnit(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t isCurrency;

  if (!CoreHandwriting::ExpectedStringsBeamScorer::validStateForFullUnit(this, a2, a3, a4, a5, a6))
    return 0;
  objc_msgSend_root(this[16], v8, v9, v10, v11, v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 223) >= 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v13, (uint64_t)a2 + 200, 4, v14, v15);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v13, *((_QWORD *)a2 + 25), 4, v14, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v16, v18, (uint64_t)v17, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22 && (objc_msgSend_isMatch(v22, v23, v24, v25, v26, v27) & 1) != 0)
    isCurrency = 1;
  else
    isCurrency = CoreHandwriting::ExpectedStringsBeamScorer::isCurrency(this, a2, v24, v25, v26, v27);

  return isCurrency;
}

void sub_1BE770F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE770FA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE770FB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::isUnitPrefix(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  if (!CoreHandwriting::ExpectedStringsBeamScorer::validStateForUnitPrefix((CoreHandwriting::ExpectedStringsBeamScorer *)this, a2))return 0;
  objc_msgSend_root(this[16], v4, v5, v6, v7, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = *((_QWORD *)a2 + 25);
  v14 = (char *)a2 + 200;
  v13 = v15;
  if (v14[23] >= 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v9, (uint64_t)v14, 4, v10, v11);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v9, v13, 4, v10, v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v12, v17, (uint64_t)v16, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21 != 0;
}

void sub_1BE771074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE771088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::isCurrencyUnitPrefix(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v35[2];
  void *__p[2];
  int v37;

  v6 = *((_QWORD *)a2 + 23);
  if (*(_DWORD *)(v6 - 4) != 1)
    return 0;
  v9 = *((_QWORD *)a2 + 22);
  v10 = v6 - v9;
  if (v10 != 4)
  {
    if ((unint64_t)v10 < 5)
      return 0;
    v11 = *(unsigned int *)(v9 + 4 * (v10 >> 2) - 8);
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)__p = 0u;
    v37 = 1065353216;
    sub_1BE77E330((float *)v35, 3u, 3);
    sub_1BE77E330((float *)v35, 9u, 9);
    sub_1BE77E330((float *)v35, 0xBu, 11);
    sub_1BE77E330((float *)v35, 6u, 6);
    if (!v35[1])
      goto LABEL_24;
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v35[1]);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v11;
      if (v35[1] <= (void *)v11)
        v13 = v11 % (unint64_t)v35[1];
    }
    else
    {
      v13 = (LODWORD(v35[1]) - 1) & v11;
    }
    v14 = (uint64_t **)*((_QWORD *)v35[0] + v13);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == (_DWORD)v11)
                goto LABEL_25;
            }
            else if ((v17 & ((unint64_t)v35[1] - 1)) != v13)
            {
              goto LABEL_24;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_25;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == (_DWORD)v11)
              break;
          }
          else
          {
            if ((void *)v16 >= v35[1])
              v16 %= (unint64_t)v35[1];
            if (v16 != v13)
              goto LABEL_24;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
    else
    {
LABEL_24:
      v15 = 0;
    }
LABEL_25:
    v18 = __p[0];
    if (__p[0])
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    v20 = v35[0];
    v35[0] = 0;
    if (v20)
      operator delete(v20);
    if (!v15)
      return 0;
  }
  objc_msgSend_root(this[16], (const char *)a2, a3, a4, a5, a6, v35[0]);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = *((_QWORD *)a2 + 25);
  v26 = (char *)a2 + 200;
  v25 = v27;
  if (v26[23] >= 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v21, (uint64_t)v26, 4, v22, v23);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v21, v25, 4, v22, v23);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v24, v29, (uint64_t)v28, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  return v33 != 0;
}

void sub_1BE7712C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1BE7712E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7712F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE771324(_QWORD *a1, const std::string *a2, const CoreHandwriting::CHEncoderDecoderBeamState *a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::string::size_type size;
  std::string __p;

  v6 = a1 + 1;
  if (sub_1BE61C0EC(a1 + 1, (uint64_t)a2))
    return 1;
  if (*((_BYTE *)a3 + 173) && !std::string::compare(a2, "x"))
    return 1;
  CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts((CoreHandwriting::ExpectedStringsBeamScorer *)a1, a3, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size && sub_1BE61C0EC(v6, (uint64_t)&__p))
  {
    v7 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v7;
  }
  else
  {
    v7 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts(CoreHandwriting::ExpectedStringsBeamScorer *this@<X0>, const CoreHandwriting::CHEncoderDecoderBeamState *a2@<X1>, std::string *a3@<X8>)
{
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  char *v19;
  void *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type size;
  const std::string *v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v6 = (char *)operator new(8uLL);
  *(_QWORD *)v6 = 0xC00000001;
  v7 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v6, v6 + 8);
  operator delete(v6);
  if (v7)
  {
    v8 = (*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2;
    if ((int)v8 >= 2)
    {
      v9 = (v8 - 2);
      v10 = MEMORY[0x1E0C80978];
      while (1)
      {
        v11 = (char **)(*((_QWORD *)this + 17) + 24 * *(int *)(*((_QWORD *)a2 + 9) + 4 * v9));
        v12 = *((char *)v11 + 23);
        if (v12 < 0)
        {
          if (v11[1] != (char *)1)
            return;
          v13 = **v11;
          if ((v13 & 0x80000000) == 0)
          {
LABEL_7:
            v14 = *(_DWORD *)(v10 + 4 * v13 + 60) & 0x100;
            goto LABEL_11;
          }
        }
        else
        {
          if (v12 != 1)
            return;
          v13 = *(char *)v11;
          if ((v13 & 0x80000000) == 0)
            goto LABEL_7;
        }
        v14 = __maskrune(v13, 0x100uLL);
LABEL_11:
        if (v14)
        {
          v15 = *((char *)v11 + 23);
          v16 = v15 >= 0 ? (const std::string::value_type *)v11 : *v11;
          v17 = v15 >= 0 ? *((unsigned __int8 *)v11 + 23) : (std::string::size_type)v11[1];
          std::string::insert(a3, 0, v16, v17);
          if (v9-- > 0)
            continue;
        }
        return;
      }
    }
    return;
  }
  v19 = (char *)operator new(0x10uLL);
  *(_OWORD *)v19 = xmmword_1BE8DF200;
  if ((sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v19, v19 + 16) & 1) != 0)
  {
    operator delete(v19);
  }
  else
  {
    v20 = operator new(0x14uLL);
    *((_DWORD *)v20 + 4) = 20;
    *(_OWORD *)v20 = xmmword_1BE8DF278;
    v21 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), (char *)v20, (char *)v20 + 20);
    operator delete(v20);
    operator delete(v19);
    if (!v21)
      return;
  }
  v22 = (*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2;
  if (*(_DWORD *)(*((_QWORD *)a2 + 23) - 4) == 20)
    v23 = -2;
  else
    v23 = -1;
  if (v23 + (int)v22 >= 0)
  {
    v24 = 0;
    v25 = v23 + v22 + 1;
    v26 = 4 * (v23 + v22);
    do
    {
      v30 = (const std::string *)(*((_QWORD *)this + 17) + 24 * *(int *)(*((_QWORD *)a2 + 9) + v26));
      v31 = SHIBYTE(v30->__r_.__value_.__r.__words[2]);
      if (v31 < 0)
      {
        if (v30->__r_.__value_.__l.__size_ != 1)
          goto LABEL_48;
        v32 = *v30->__r_.__value_.__l.__data_;
        if ((v32 & 0x80000000) == 0)
        {
LABEL_40:
          v33 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v32 + 60) & 0x100;
          goto LABEL_44;
        }
      }
      else
      {
        if (v31 != 1)
          goto LABEL_48;
        v32 = v30->__r_.__value_.__s.__data_[0];
        if ((v32 & 0x80000000) == 0)
          goto LABEL_40;
      }
      v33 = __maskrune(v32, 0x100uLL);
LABEL_44:
      if (v33)
        v34 = (v24 & 0xFFFFFFFD) == 0;
      else
        v34 = 0;
      if (v34)
      {
        v27 = SHIBYTE(v30->__r_.__value_.__r.__words[2]);
        if (v27 >= 0)
          v28 = (const std::string::value_type *)v30;
        else
          v28 = (const std::string::value_type *)v30->__r_.__value_.__r.__words[0];
        if (v27 >= 0)
          size = HIBYTE(v30->__r_.__value_.__r.__words[2]);
        else
          size = v30->__r_.__value_.__l.__size_;
        std::string::insert(a3, 0, v28, size);
        goto LABEL_36;
      }
LABEL_48:
      if (v24 == 1)
      {
        if (std::string::compare(v30, "_"))
          return;
        v24 = 2;
      }
      else
      {
        if (v24 || std::string::compare(v30, "{"))
          return;
        v24 = 1;
      }
LABEL_36:
      --v25;
      v26 -= 4;
    }
    while (v25 > 0);
  }
}

void sub_1BE771714(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  operator delete(v3);
  operator delete(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::checkVariablePrefixWithSubscript(CoreHandwriting::ExpectedStringsBeamScorer *this, const CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  std::string *v3;
  std::string *p_dst;
  std::string::size_type v5;
  char v6;
  uint64_t v7;
  char v8;
  std::string::size_type v9;
  void *v10;
  _BOOL4 v11;
  std::string *v12;
  std::string *v13;
  void **v14;
  std::string::size_type size;
  void *__p[2];
  uint64_t v18;
  std::string v19;
  std::string v20;
  std::string __dst;

  CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts(this, a2, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    sub_1BE61F128(&__dst, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __dst = v20;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  else
    v3 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  for (; p_dst != v3; p_dst = (std::string *)((char *)p_dst + 1))
    p_dst->__r_.__value_.__s.__data_[0] = __tolower(p_dst->__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v6 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_16;
  }
  else
  {
    v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v6 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = __dst.__r_.__value_.__l.__size_;
    if (v5)
    {
LABEL_16:
      v7 = (uint64_t)this + 24;
      while (1)
      {
        v7 = *(_QWORD *)v7;
        v6 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (!v7)
          goto LABEL_48;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_1BE61F128(&v19, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v19 = __dst;
        if (*(char *)(v7 + 39) < 0)
        {
          sub_1BE61F128(__p, *(void **)(v7 + 16), *(_QWORD *)(v7 + 24));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v7 + 16);
          v18 = *(_QWORD *)(v7 + 32);
        }
        v8 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        v9 = v19.__r_.__value_.__l.__size_;
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        v10 = (void *)HIBYTE(v18);
        if (v18 < 0)
          v10 = __p[1];
        if (v9 <= (unint64_t)v10)
          break;
        v11 = 0;
        if (SHIBYTE(v18) < 0)
          goto LABEL_41;
LABEL_42:
        if (v8 < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (v11)
        {
          v7 = 1;
          if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
            return v7;
          goto LABEL_51;
        }
      }
      v12 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v19;
      v13 = (std::string *)((char *)v12 + v9);
      if (v9)
      {
        v14 = (void **)__p[0];
        if (v18 >= 0)
          v14 = __p;
        while (v12->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
        {
          v12 = (std::string *)((char *)v12 + 1);
          v14 = (void **)((char *)v14 + 1);
          if (!--v9)
          {
            v12 = v13;
            break;
          }
        }
      }
      v11 = v12 == v13;
      if ((SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_42;
LABEL_41:
      operator delete(__p[0]);
      v8 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      goto LABEL_42;
    }
  }
  v7 = 0;
LABEL_48:
  if ((v6 & 0x80) == 0)
    return v7;
LABEL_51:
  operator delete(__dst.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BE771990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  void **v6;
  unint64_t v7;
  std::string *v8;
  std::string *p_p;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  char *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string::size_type size;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int isCurrency;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  int v45;
  int64x2_t v46;
  int64x2_t *v47;
  unint64_t v48;
  std::string __p;

  v6 = (void **)((char *)a2 + 200);
  if ((*((char *)a2 + 223) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 223))
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 27);
      goto LABEL_6;
    }
LABEL_19:
    *a3 = 1;
    return 0.0;
  }
  v7 = *((_QWORD *)a2 + 26);
  if (!v7)
    goto LABEL_19;
  sub_1BE61F128(&__p, *v6, v7);
LABEL_6:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
  else
    v8 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  for (; p_p != v8; p_p = (std::string *)((char *)p_p + 1))
    p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
  if (sub_1BE771324(this, &__p, a2))
  {
    *a3 = 1;
    v10 = *((unsigned __int8 *)a2 + 223);
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a2 + 26);
    if (v10)
      memset_pattern16((void *)(*((_QWORD *)a2 + 16) - 8 * v10 + 8 * *((unsigned __int8 *)a2 + 172) - 8), &unk_1BE8DF230, 8 * v10);
    goto LABEL_67;
  }
  v12 = operator new(8uLL);
  v13 = v12;
  *v12 = 0x900000001;
  v15 = (char *)*((_QWORD *)a2 + 22);
  v14 = (char *)*((_QWORD *)a2 + 23);
  if (v14 - v15 == 8)
  {
    if (v15 == v14)
    {
LABEL_25:
      operator delete(v12);
      goto LABEL_31;
    }
    v16 = v12;
    while (*(_DWORD *)v15 == *v16)
    {
      v15 += 4;
      ++v16;
      if (v15 == v14)
        goto LABEL_25;
    }
  }
  v17 = sub_1BE61C0EC((_QWORD *)this + 6, (uint64_t)&__p);
  operator delete(v13);
  if (v17)
  {
    *a3 = 1;
    v18 = *((unsigned __int8 *)a2 + 223);
    if ((v18 & 0x80u) != 0)
      v18 = *((_QWORD *)a2 + 26);
    if (v18)
      memset_pattern16((void *)(*((_QWORD *)a2 + 16) - 8 * v18 + 8 * *((unsigned __int8 *)a2 + 172) - 8), &unk_1BE8DF210, 8 * v18);
    goto LABEL_67;
  }
LABEL_31:
  if (sub_1BE61C0EC((_QWORD *)this + 11, (uint64_t)&__p))
  {
    v23 = (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v23 > size + 3)
    {
      v25 = *((_QWORD *)a2 + 15);
      if (*(_QWORD *)(v25 + 8 * v23 - 8) == 0x2000)
      {
        v26 = v25 + 8 * (v23 - size);
        if (*(_QWORD *)(v26 - 16) == 0x2000 && *(_QWORD *)(v26 - 24) == 64)
        {
          v27 = *((unsigned __int8 *)a2 + 223);
          if ((v27 & 0x80u) != 0)
            v27 = *((_QWORD *)a2 + 26);
          if (v27)
            memset_pattern16((void *)(*((_QWORD *)a2 + 16) - 8 * v27 + 8 * *((unsigned __int8 *)a2 + 172) - 8), &unk_1BE8DF220, 8 * v27);
          goto LABEL_67;
        }
      }
    }
  }
  if (!CoreHandwriting::ExpectedStringsBeamScorer::isFullUnit((void **)this, a2, v19, v20, v21, v22))
  {
    if (CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfStrings(this, a2, 1u))
    {
      CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(this, a2, a3);
      if (*a3)
        goto LABEL_67;
    }
    v40 = operator new(8uLL);
    *v40 = 0x900000001;
    v42 = (char *)*((_QWORD *)a2 + 22);
    v41 = (char *)*((_QWORD *)a2 + 23);
    if (v41 - v42 == 8)
    {
      if (v42 == v41)
      {
LABEL_58:
        operator delete(v40);
        goto LABEL_61;
      }
      v43 = v40;
      while (*(_DWORD *)v42 == *v43)
      {
        v42 += 4;
        ++v43;
        if (v42 == v41)
          goto LABEL_58;
      }
    }
    operator delete(v40);
    v44 = (char *)operator new(8uLL);
    *(_QWORD *)v44 = 0xC00000001;
    if (sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v44, v44 + 8))
    {
      v45 = CoreHandwriting::ExpectedStringsBeamScorer::checkVariablePrefixWithSubscript(this, a2);
      operator delete(v44);
      if (v45)
      {
LABEL_61:
        *a3 = 1;
        v11 = 0.0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_68;
        return v11;
      }
    }
    else
    {
      operator delete(v44);
    }
    *a3 = 0;
    v11 = *((float *)this + 42);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v11;
    goto LABEL_68;
  }
  *a3 = 1;
  v32 = *((unsigned __int8 *)a2 + 223);
  v33 = *((_QWORD *)a2 + 26);
  isCurrency = CoreHandwriting::ExpectedStringsBeamScorer::isCurrency((void **)this, a2, v28, v29, v30, v31);
  if ((v32 & 0x80u) == 0)
    v35 = v32;
  else
    v35 = v33;
  v36 = 64;
  if (isCurrency)
    v36 = 128;
  if (v35)
  {
    v37 = *((_QWORD *)a2 + 16) - 8 * v35 + 8 * *((unsigned __int8 *)a2 + 172);
    v38 = (unint64_t *)(v37 - 8);
    if (v35 >= 4)
    {
      v39 = v35 & 3;
      v38 += v35 & 0xFFFFFFFFFFFFFFFCLL;
      v46 = vdupq_n_s64(v36);
      v47 = (int64x2_t *)(v37 + 8);
      v48 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v47[-1] = v46;
        *v47 = v46;
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      if (v35 == (v35 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_67;
    }
    else
    {
      v39 = v35;
    }
    do
    {
      *v38++ = v36;
      --v39;
    }
    while (v39);
  }
LABEL_67:
  v11 = *((float *)this + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_68:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1BE771E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfStrings(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, unsigned int a3)
{
  void **v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *p_p;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  char *v19;
  _DWORD *v20;
  size_t v21;
  char v22;
  size_t v23;
  std::string::size_type v24;
  char v25;
  std::string::size_type size;
  std::string::size_type v27;
  unint64_t v28;
  std::string::size_type v29;
  unint64_t *v30;
  int64x2_t v31;
  int64x2_t *v32;
  unint64_t v33;
  size_t v34;
  size_t v35;
  char *v36;
  __int128 *p_dst;
  uint64_t v38;
  uint64_t v39;
  __int128 __dst;
  unint64_t v42;
  std::string __p;

  v6 = (void **)((char *)a2 + 200);
  if (*((char *)a2 + 223) < 0)
  {
    v7 = *((_QWORD *)a2 + 26);
    if (v7 >= 2)
    {
      sub_1BE61F128(&__p, *v6, v7);
      goto LABEL_7;
    }
    return 0;
  }
  if (*((unsigned __int8 *)a2 + 223) < 2u)
    return 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
  __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 27);
LABEL_7:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
  else
    v9 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  for (; p_p != v9; p_p = (std::string *)((char *)p_p + 1))
    p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
  v11 = 16;
  v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_21:
  if (!__p.__r_.__value_.__l.__size_)
  {
    v8 = 0;
    goto LABEL_67;
  }
  v14 = __p.__r_.__value_.__l.__size_ - 1;
  v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  --__p.__r_.__value_.__l.__size_;
  while (1)
  {
    v15->__r_.__value_.__s.__data_[v14] = 0;
    if ((sub_1BE771324(this, &__p, a2) & 1) != 0)
      break;
    v16 = operator new(8uLL);
    v17 = v16;
    *v16 = 0x900000001;
    v19 = (char *)*((_QWORD *)a2 + 22);
    v18 = (char *)*((_QWORD *)a2 + 23);
    if (v18 - v19 == 8)
    {
      if (v19 == v18)
      {
LABEL_29:
        operator delete(v16);
        v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_21;
        goto LABEL_19;
      }
      v20 = v16;
      while (*(_DWORD *)v19 == *v20)
      {
        v19 += 4;
        ++v20;
        if (v19 == v18)
          goto LABEL_29;
      }
    }
    v13 = sub_1BE61C0EC((_QWORD *)this + 6, (uint64_t)&__p);
    operator delete(v17);
    if (v13)
    {
      v11 = 256;
      break;
    }
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_21;
LABEL_19:
    if (!v12)
      return 0;
    v14 = v12 - 1;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
    v15 = &__p;
  }
  v21 = *((unsigned __int8 *)a2 + 223);
  v22 = *((_BYTE *)a2 + 223);
  v23 = *((_QWORD *)a2 + 26);
  v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v27 = __p.__r_.__value_.__l.__size_;
  if (v27)
  {
    if ((v21 & 0x80u) == 0)
      v23 = *((unsigned __int8 *)a2 + 223);
    v28 = *((_QWORD *)a2 + 16) - 8 * v23 + 8 * (*((unsigned __int8 *)a2 + 172) - (unint64_t)a3);
    if (v27 < 4)
    {
      v29 = v27;
      v30 = (unint64_t *)v28;
      goto LABEL_43;
    }
    v29 = v27 & 3;
    v30 = (unint64_t *)(v28 + 8 * (v27 & 0xFFFFFFFFFFFFFFFCLL));
    v31 = vdupq_n_s64(v11);
    v32 = (int64x2_t *)(v28 + 16);
    v33 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v32[-1] = v31;
      *v32 = v31;
      v32 += 2;
      v33 -= 4;
    }
    while (v33);
    if (v27 != (v27 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_43:
        *v30++ = v11;
        --v29;
      }
      while (v29);
    }
    v21 = *((unsigned __int8 *)a2 + 223);
    v23 = *((_QWORD *)a2 + 26);
    v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v22 = *((_BYTE *)a2 + 223);
  }
  if (v22 >= 0)
    v34 = v21;
  else
    v34 = v23;
  if (v25 < 0)
    v24 = size;
  v35 = v34 - v24;
  if ((v22 & 0x80) == 0)
  {
    v36 = (char *)v6;
    if (v35 <= v21)
    {
      if (v35 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_53;
LABEL_65:
      sub_1BE61F1B4();
    }
LABEL_69:
    sub_1BE61C764();
  }
  if (v23 < v35)
    goto LABEL_69;
  v36 = (char *)*v6;
  v21 = v23;
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_65;
LABEL_53:
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    p_dst = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&__dst + 1) = v35;
    v42 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_61:
    memmove(p_dst, &v36[v21 - v35], v35);
    *((_BYTE *)p_dst + v35) = 0;
    if (*((char *)a2 + 223) < 0)
      goto LABEL_62;
    goto LABEL_56;
  }
  HIBYTE(v42) = v34 - v24;
  p_dst = &__dst;
  if (v34 != v24)
    goto LABEL_61;
  *((_BYTE *)&__dst + v35) = 0;
  if ((*((char *)a2 + 223) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_62:
  operator delete(*v6);
LABEL_56:
  *(_OWORD *)v6 = __dst;
  v6[2] = (void *)v42;
  v8 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_67:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BE77220C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float CoreHandwriting::ExpectedStringsBeamScorer::evaluatePrefixString(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  uint64_t v4;
  float v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *p_dst;
  char *v16;
  char v17;
  unint64_t v18;
  void *v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  void **v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  BOOL v28;
  void **v29;
  void **v30;
  void **v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;
  BOOL v36;
  void **v37;
  void **v38;
  void **v39;
  int *v40;
  int v41;
  char *v43;
  int v44;
  void *v45[2];
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  void *v51[2];
  uint64_t v52;
  void *__p[2];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 __dst;
  uint64_t v58;

  v4 = *((unsigned __int8 *)a2 + 223);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 26);
  if (!v4)
  {
    *a3 = 1;
    return 0.0;
  }
  if (CoreHandwriting::ExpectedStringsBeamScorer::isUnitPrefix((void **)this, a2))
  {
    *a3 = 1;
    return *((float *)this + 41);
  }
  v8 = (char *)operator new(8uLL);
  *(_QWORD *)v8 = 0x100000005;
  v9 = sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v8, v8 + 8);
  operator delete(v8);
  if (*((char *)a2 + 223) < 0)
  {
    sub_1BE61F128(&__dst, *((void **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    __dst = *(_OWORD *)((char *)a2 + 200);
    v58 = *((_QWORD *)a2 + 27);
  }
  if (v58 >= 0)
    v14 = (char *)&__dst + HIBYTE(v58);
  else
    v14 = (char *)(__dst + *((_QWORD *)&__dst + 1));
  if (v58 >= 0)
    p_dst = (char *)&__dst;
  else
    p_dst = (char *)__dst;
  for (; p_dst != v14; ++p_dst)
    *p_dst = __tolower(*p_dst);
  if (v9)
  {
    v16 = (char *)this + 104;
    while (1)
    {
      v16 = *(char **)v16;
      if (!v16)
        goto LABEL_111;
      if (SHIBYTE(v58) < 0)
      {
        sub_1BE61F128(&v55, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        v55 = __dst;
        v56 = v58;
      }
      if (v16[39] < 0)
      {
        sub_1BE61F128(__p, *((void **)v16 + 2), *((_QWORD *)v16 + 3));
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v16 + 1);
        v54 = *((_QWORD *)v16 + 4);
      }
      v17 = HIBYTE(v56);
      v18 = *((_QWORD *)&v55 + 1);
      if (v56 >= 0)
        v18 = HIBYTE(v56);
      v19 = (void *)HIBYTE(v54);
      if (v54 < 0)
        v19 = __p[1];
      if (v18 <= (unint64_t)v19)
        break;
      v20 = 0;
      if (SHIBYTE(v54) < 0)
        goto LABEL_44;
LABEL_45:
      if (v17 < 0)
        operator delete((void *)v55);
      if (v20)
        goto LABEL_103;
    }
    v21 = (unsigned __int8 *)v55;
    if (v56 >= 0)
      v21 = (unsigned __int8 *)&v55;
    v22 = &v21[v18];
    if (v18)
    {
      v23 = (void **)__p[0];
      if (v54 >= 0)
        v23 = __p;
      while (*v21 == *(unsigned __int8 *)v23)
      {
        ++v21;
        v23 = (void **)((char *)v23 + 1);
        if (!--v18)
        {
          v21 = v22;
          break;
        }
      }
    }
    v20 = v21 == v22;
    if ((SHIBYTE(v54) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_44:
    operator delete(__p[0]);
    v17 = HIBYTE(v56);
    goto LABEL_45;
  }
  v24 = (char *)this + 24;
  while (1)
  {
    v24 = *(char **)v24;
    if (!v24)
      break;
    if (SHIBYTE(v58) < 0)
    {
      sub_1BE61F128(v51, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)v51 = __dst;
      v52 = v58;
    }
    if (v24[39] < 0)
    {
      sub_1BE61F128(v49, *((void **)v24 + 2), *((_QWORD *)v24 + 3));
    }
    else
    {
      *(_OWORD *)v49 = *((_OWORD *)v24 + 1);
      v50 = *((_QWORD *)v24 + 4);
    }
    v25 = HIBYTE(v52);
    v26 = (char *)v51[1];
    if (v52 >= 0)
      v26 = (char *)HIBYTE(v52);
    v27 = (char *)HIBYTE(v50);
    if (v50 < 0)
      v27 = (char *)v49[1];
    if (v26 <= v27)
    {
      v29 = (void **)v51[0];
      if (v52 >= 0)
        v29 = v51;
      v30 = (void **)&v26[(_QWORD)v29];
      if (v26)
      {
        v31 = (void **)v49[0];
        if (v50 >= 0)
          v31 = v49;
        while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v31)
        {
          v29 = (void **)((char *)v29 + 1);
          v31 = (void **)((char *)v31 + 1);
          if (!--v26)
          {
            v29 = v30;
            break;
          }
        }
      }
      v28 = v29 == v30;
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_73;
LABEL_72:
      operator delete(v49[0]);
      v25 = HIBYTE(v52);
      goto LABEL_73;
    }
    v28 = 0;
    if (SHIBYTE(v50) < 0)
      goto LABEL_72;
LABEL_73:
    if (v25 < 0)
      operator delete(v51[0]);
    if (v28)
    {
LABEL_103:
      *a3 = 1;
      v7 = *((float *)this + 41);
      if (SHIBYTE(v58) < 0)
        goto LABEL_114;
      return v7;
    }
  }
  v32 = (char *)this + 64;
  while (1)
  {
    v32 = *(char **)v32;
    if (!v32)
      break;
    if (SHIBYTE(v58) < 0)
    {
      sub_1BE61F128(v47, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)v47 = __dst;
      v48 = v58;
    }
    if (v32[39] < 0)
    {
      sub_1BE61F128(v45, *((void **)v32 + 2), *((_QWORD *)v32 + 3));
    }
    else
    {
      *(_OWORD *)v45 = *((_OWORD *)v32 + 1);
      v46 = *((_QWORD *)v32 + 4);
    }
    v33 = HIBYTE(v48);
    v34 = (char *)v47[1];
    if (v48 >= 0)
      v34 = (char *)HIBYTE(v48);
    v35 = (char *)HIBYTE(v46);
    if (v46 < 0)
      v35 = (char *)v45[1];
    if (v34 <= v35)
    {
      v37 = (void **)v47[0];
      if (v48 >= 0)
        v37 = v47;
      v38 = (void **)&v34[(_QWORD)v37];
      if (v34)
      {
        v39 = (void **)v45[0];
        if (v46 >= 0)
          v39 = v45;
        while (*(unsigned __int8 *)v37 == *(unsigned __int8 *)v39)
        {
          v37 = (void **)((char *)v37 + 1);
          v39 = (void **)((char *)v39 + 1);
          if (!--v34)
          {
            v37 = v38;
            break;
          }
        }
      }
      v36 = v37 == v38;
      if ((SHIBYTE(v46) & 0x80000000) == 0)
        goto LABEL_101;
LABEL_100:
      operator delete(v45[0]);
      v33 = HIBYTE(v48);
      goto LABEL_101;
    }
    v36 = 0;
    if (SHIBYTE(v46) < 0)
      goto LABEL_100;
LABEL_101:
    if (v33 < 0)
      operator delete(v47[0]);
    if (v36)
      goto LABEL_103;
  }
  if (CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfStrings(this, a2, 0))
  {
    CoreHandwriting::ExpectedStringsBeamScorer::evaluatePrefixString(this, a2, a3);
    if (*a3)
    {
      v7 = *((float *)this + 41);
      if (SHIBYTE(v58) < 0)
        goto LABEL_114;
      return v7;
    }
  }
  v40 = (int *)*((_QWORD *)a2 + 22);
  if (*((_QWORD *)a2 + 23) - (_QWORD)v40 == 4)
  {
    v41 = *v40;
    if (v41 == 1)
    {
LABEL_113:
      *a3 = v41;
      v7 = 0.0;
      if (SHIBYTE(v58) < 0)
        goto LABEL_114;
      return v7;
    }
  }
LABEL_111:
  if (CoreHandwriting::ExpectedStringsBeamScorer::isCurrencyUnitPrefix((void **)this, a2, v10, v11, v12, v13))
    goto LABEL_112;
  v43 = (char *)operator new(0x10uLL);
  *(_OWORD *)v43 = xmmword_1BE8DF200;
  if (!sub_1BE76E770(*((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), v43, v43 + 16))
  {
    operator delete(v43);
    goto LABEL_120;
  }
  v44 = CoreHandwriting::ExpectedStringsBeamScorer::checkVariablePrefixWithSubscript(this, a2);
  operator delete(v43);
  if (v44)
  {
LABEL_112:
    LOBYTE(v41) = 1;
    goto LABEL_113;
  }
LABEL_120:
  *a3 = 0;
  v7 = *((float *)this + 42);
  if (SHIBYTE(v58) < 0)
LABEL_114:
    operator delete((void *)__dst);
  return v7;
}

void sub_1BE7727B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  _Unwind_Resume(exception_object);
}

float CoreHandwriting::ExpectedStringsBeamScorer::apply(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  int v9;
  float v10;
  float v11;
  void *__p[2];
  uint64_t v14;

  v6 = *((_QWORD *)this + 17) + 24 * *(int *)(*((_QWORD *)a2 + 10) - 4);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_1BE61F128(__p, *(void **)v6, *(_QWORD *)(v6 + 8));
    if (*((_BYTE *)a2 + 172))
      goto LABEL_14;
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v14 = *(_QWORD *)(v6 + 16);
    *(_OWORD *)__p = v7;
    if (*((_BYTE *)a2 + 172))
      goto LABEL_14;
  }
  if (SHIBYTE(v14) < 0)
  {
    if (__p[1] != (void *)1)
      goto LABEL_14;
    v8 = *(char *)__p[0];
    if ((v8 & 0x80000000) == 0)
    {
LABEL_8:
      v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x100;
      goto LABEL_12;
    }
  }
  else
  {
    if (SHIBYTE(v14) != 1)
      goto LABEL_14;
    v8 = SLOBYTE(__p[0]);
    if ((SLOBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v9 = __maskrune(v8, 0x100uLL);
LABEL_12:
  if (v9)
  {
    v10 = CoreHandwriting::ExpectedStringsBeamScorer::evaluatePrefixString(this, a2, a3);
    goto LABEL_15;
  }
LABEL_14:
  v10 = CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(this, a2, a3);
LABEL_15:
  v11 = v10;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1BE772960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE77297C(uint64_t a1, uint64_t **a2, float a3, float a4)
{
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  uint64_t v43;
  _QWORD *v44;
  void *__p;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  *(_QWORD *)a1 = &off_1E77EF7B0;
  *(float *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v44 = (_QWORD *)(a1 + 16);
  *(float *)(a1 + 44) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  v43 = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *a2;
  v6 = a2[1];
  v8 = (char *)v6 - (char *)*a2;
  if (v6 != *a2)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F930();
    v10 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = &v10[24 * v9];
    v7 = *a2;
    v6 = a2[1];
  }
  *(_DWORD *)(a1 + 40) = 0;
  if (v6 != v7)
  {
    v11 = 0;
    while (1)
    {
      v13 = *v7;
      v12 = v7[1];
      __p = 0;
      v46 = 0;
      v47 = 0;
      v14 = v12 - v13;
      if (!v14)
        break;
      if (v14 < 0)
        sub_1BE61F930();
      v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
      v16 = (v15 - 1) >> 6;
      v17 = operator new(8 * (v16 + 1));
      v18 = v17;
      v46 = v15;
      v47 = v16 + 1;
      __p = v17;
      if (v15 >= 0x41)
        v19 = (v15 - 1) >> 6;
      else
        v19 = 0;
      v17[v19] = 0;
      if (v15 >= 0x40)
        bzero(v17, 8 * (v15 >> 6));
      if ((v15 & 0x3F) != 0)
        v18[v15 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v15 & 0x3F));
      v20 = v7[1];
      v21 = v20 - *v7;
      if (v20 != *v7)
        goto LABEL_19;
LABEL_25:
      v28 = *(_QWORD *)(a1 + 24);
      v27 = *(_QWORD *)(a1 + 32);
      if (v28 >= v27)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v44) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F930();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v44) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v52 = v43;
        if (v33)
        {
          if (v33 > 0xAAAAAAAAAAAAAAALL)
            sub_1BE61F100();
          v34 = (char *)operator new(24 * v33);
        }
        else
        {
          v34 = 0;
        }
        v48 = v34;
        v49 = &v34[24 * v30];
        v50 = v49;
        v51 = &v34[24 * v33];
        sub_1BE690978(v49, (uint64_t)&__p);
        v35 = v49;
        v29 = v50 + 24;
        v36 = *(_QWORD **)(a1 + 16);
        v37 = *(_QWORD **)(a1 + 24);
        if (v37 == v36)
        {
          *(_QWORD *)(a1 + 16) = v49;
          *(_QWORD *)(a1 + 24) = v29;
          *(_QWORD *)(a1 + 32) = v51;
          if (!v37)
            goto LABEL_45;
        }
        else
        {
          do
          {
            v38 = *(v37 - 3);
            v37 -= 3;
            *((_QWORD *)v35 - 3) = v38;
            v35 -= 24;
            *((_QWORD *)v35 + 1) = v37[1];
            *((_QWORD *)v35 + 2) = v37[2];
            *v37 = 0;
            v37[1] = 0;
            v37[2] = 0;
          }
          while (v37 != v36);
          v37 = *(_QWORD **)(a1 + 16);
          v39 = *(_QWORD **)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v35;
          *(_QWORD *)(a1 + 24) = v29;
          *(_QWORD *)(a1 + 32) = v51;
          while (v39 != v37)
          {
            v41 = (void *)*(v39 - 3);
            v39 -= 3;
            v40 = v41;
            if (v41)
              operator delete(v40);
          }
          if (!v37)
            goto LABEL_45;
        }
        operator delete(v37);
      }
      else
      {
        sub_1BE690978(*(_QWORD **)(a1 + 24), (uint64_t)&__p);
        v29 = (_QWORD *)(v28 + 24);
        *(_QWORD *)(a1 + 24) = v28 + 24;
      }
LABEL_45:
      *(_QWORD *)(a1 + 24) = v29;
      if (__p)
        operator delete(__p);
      ++v11;
      v7 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) <= v11)
        return a1;
    }
    v18 = 0;
    v22 = v7[1];
    v21 = v22 - *v7;
    if (v22 == *v7)
      goto LABEL_25;
LABEL_19:
    v23 = 0;
    v24 = v21 / 40;
    if (v24 <= 1)
      v24 = 1;
    v25 = (uint64_t *)(v7[3 * v11] + 24);
    do
    {
      v26 = *v25;
      v25 += 5;
      if (v26)
      {
        *(_QWORD *)((char *)v18 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        ++*(_DWORD *)(a1 + 40);
      }
      ++v23;
    }
    while (v24 != v23);
    goto LABEL_25;
  }
  return a1;
}

void sub_1BE772D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_1BE772DA0(a10);
  _Unwind_Resume(a1);
}

void sub_1BE772D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  sub_1BE772DA0(a10);
  _Unwind_Resume(a1);
}

void **sub_1BE772DA0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v3 - 3);
        v3 -= 24;
        v5 = v6;
        if (v6)
          operator delete(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::InputCoverageScorer::apply(CoreHandwriting::InputCoverageScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v9;
  size_t v10;
  size_t v11;
  _QWORD *p_dst;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  void *v17;
  size_t v18;
  _QWORD *v19;
  int v20;
  size_t v21;
  uint64_t *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  size_t v51;
  size_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  int v57;
  void *v58;
  size_t v59;
  _QWORD *v60;
  int v61;
  size_t v62;
  uint64_t *v63;
  size_t v64;
  int v65;
  _BOOL4 v66;
  int v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  size_t v92;
  size_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t **v97;
  int v98;
  void *v99;
  size_t v100;
  _QWORD *v101;
  int v102;
  size_t v103;
  uint64_t *v104;
  size_t v105;
  int v106;
  _BOOL4 v107;
  int v108;
  _BOOL4 v109;
  uint64_t *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  size_t v123;
  size_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t **v128;
  int v129;
  void *v130;
  size_t v131;
  _QWORD *v132;
  int v133;
  size_t v134;
  uint64_t *v135;
  size_t v136;
  int v137;
  _BOOL4 v138;
  int v139;
  _BOOL4 v140;
  uint64_t *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  BOOL *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t i;
  uint64_t v154;
  int v155;
  int v156;
  BOOL *v157;
  _QWORD *__dst;
  size_t v159;
  int64_t v160;

  if (!*((_BYTE *)a2 + 172))
  {
    *a3 = 1;
    return;
  }
  v9 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), (const char *)a2, (uint64_t)a3, a4, a5, a6);
  v10 = strlen(v9);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
LABEL_155:
    sub_1BE61F1B4();
  v11 = v10;
  v157 = a3;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = operator new(v13 + 1);
    v159 = v11;
    v160 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v160) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_10:
    memmove(p_dst, v9, v11);
  *((_BYTE *)p_dst + v11) = 0;
  v15 = (uint64_t **)*((_QWORD *)a2 + 1);
  if (!v15)
LABEL_35:
    sub_1BE61C778("map::at:  key not found");
  v16 = SHIBYTE(v160);
  v17 = __dst;
  if (v160 >= 0)
    v18 = HIBYTE(v160);
  else
    v18 = v159;
  if (v160 >= 0)
    v19 = &__dst;
  else
    v19 = __dst;
  while (1)
  {
    while (1)
    {
      v20 = *((char *)v15 + 55);
      if (v20 >= 0)
        v21 = *((unsigned __int8 *)v15 + 55);
      else
        v21 = (size_t)v15[5];
      if (v20 >= 0)
        v22 = (uint64_t *)(v15 + 4);
      else
        v22 = v15[4];
      if (v21 >= v18)
        v23 = v18;
      else
        v23 = v21;
      v24 = memcmp(v19, v22, v23);
      v25 = v18 < v21;
      if (v24)
        v25 = v24 < 0;
      if (!v25)
        break;
      v15 = (uint64_t **)*v15;
      if (!v15)
        goto LABEL_35;
    }
    v26 = memcmp(v22, v19, v23);
    v32 = v21 < v18;
    if (v26)
      v32 = v26 < 0;
    if (!v32)
      break;
    v15 = (uint64_t **)v15[1];
    if (!v15)
      goto LABEL_35;
  }
  objc_msgSend_shape(v15[7], v27, v28, v29, v30, v31);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v33, v34, 1, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend_intValue(v38, v39, v40, v41, v42, v43);

  if (v16 < 0)
    operator delete(v17);
  v50 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v45, v46, v47, v48, v49);
  v51 = strlen(v50);
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_155;
  v52 = v51;
  v156 = v44;
  if (v51 >= 0x17)
  {
    v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v54 = v51 | 7;
    v55 = v54 + 1;
    v53 = operator new(v54 + 1);
    v159 = v52;
    v160 = v55 | 0x8000000000000000;
    __dst = v53;
    goto LABEL_45;
  }
  HIBYTE(v160) = v51;
  v53 = &__dst;
  if (v51)
LABEL_45:
    memmove(v53, v50, v52);
  *((_BYTE *)v53 + v52) = 0;
  v56 = (uint64_t **)*((_QWORD *)a2 + 1);
  if (!v56)
LABEL_70:
    sub_1BE61C778("map::at:  key not found");
  v57 = SHIBYTE(v160);
  v58 = __dst;
  if (v160 >= 0)
    v59 = HIBYTE(v160);
  else
    v59 = v159;
  if (v160 >= 0)
    v60 = &__dst;
  else
    v60 = __dst;
  while (1)
  {
    while (1)
    {
      v61 = *((char *)v56 + 55);
      if (v61 >= 0)
        v62 = *((unsigned __int8 *)v56 + 55);
      else
        v62 = (size_t)v56[5];
      if (v61 >= 0)
        v63 = (uint64_t *)(v56 + 4);
      else
        v63 = v56[4];
      if (v62 >= v59)
        v64 = v59;
      else
        v64 = v62;
      v65 = memcmp(v60, v63, v64);
      v66 = v59 < v62;
      if (v65)
        v66 = v65 < 0;
      if (!v66)
        break;
      v56 = (uint64_t **)*v56;
      if (!v56)
        goto LABEL_70;
    }
    v67 = memcmp(v63, v60, v64);
    v73 = v62 < v59;
    if (v67)
      v73 = v67 < 0;
    if (!v73)
      break;
    v56 = (uint64_t **)v56[1];
    if (!v56)
      goto LABEL_70;
  }
  objc_msgSend_shape(v56[7], v68, v69, v70, v71, v72);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v74, v75, 2, v76, v77, v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = objc_msgSend_intValue(v79, v80, v81, v82, v83, v84);

  if (v57 < 0)
    operator delete(v58);
  v91 = (const char *)objc_msgSend_UTF8String(CFSTR("attention_weights"), v86, v87, v88, v89, v90);
  v92 = strlen(v91);
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_155;
  v93 = v92;
  v154 = v85;
  if (v92 >= 0x17)
  {
    v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v95 = v92 | 7;
    v96 = v95 + 1;
    v94 = operator new(v95 + 1);
    v159 = v93;
    v160 = v96 | 0x8000000000000000;
    __dst = v94;
    goto LABEL_80;
  }
  HIBYTE(v160) = v92;
  v94 = &__dst;
  if (v92)
LABEL_80:
    memmove(v94, v91, v93);
  *((_BYTE *)v94 + v93) = 0;
  v97 = (uint64_t **)*((_QWORD *)a2 + 1);
  if (!v97)
LABEL_105:
    sub_1BE61C778("map::at:  key not found");
  v98 = SHIBYTE(v160);
  v99 = __dst;
  if (v160 >= 0)
    v100 = HIBYTE(v160);
  else
    v100 = v159;
  if (v160 >= 0)
    v101 = &__dst;
  else
    v101 = __dst;
  while (1)
  {
    while (1)
    {
      v102 = *((char *)v97 + 55);
      if (v102 >= 0)
        v103 = *((unsigned __int8 *)v97 + 55);
      else
        v103 = (size_t)v97[5];
      if (v102 >= 0)
        v104 = (uint64_t *)(v97 + 4);
      else
        v104 = v97[4];
      if (v103 >= v100)
        v105 = v100;
      else
        v105 = v103;
      v106 = memcmp(v101, v104, v105);
      v107 = v100 < v103;
      if (v106)
        v107 = v106 < 0;
      if (!v107)
        break;
      v97 = (uint64_t **)*v97;
      if (!v97)
        goto LABEL_105;
    }
    v108 = memcmp(v104, v101, v105);
    v109 = v103 < v100;
    if (v108)
      v109 = v108 < 0;
    if (!v109)
      break;
    v97 = (uint64_t **)v97[1];
    if (!v97)
      goto LABEL_105;
  }
  v110 = objc_retainAutorelease(v97[7]);
  v121 = objc_msgSend_dataPointer(v110, v111, v112, v113, v114, v115);
  if (v98 < 0)
    operator delete(v99);
  v122 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v116, v117, v118, v119, v120, v154);
  v123 = strlen(v122);
  if (v123 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_155;
  v124 = v123;
  if (v123 >= 0x17)
  {
    v126 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v126 = v123 | 7;
    v127 = v126 + 1;
    v125 = operator new(v126 + 1);
    v159 = v124;
    v160 = v127 | 0x8000000000000000;
    __dst = v125;
    goto LABEL_115;
  }
  HIBYTE(v160) = v123;
  v125 = &__dst;
  if (v123)
LABEL_115:
    memmove(v125, v122, v124);
  *((_BYTE *)v125 + v124) = 0;
  v128 = (uint64_t **)*((_QWORD *)a2 + 1);
  if (!v128)
LABEL_140:
    sub_1BE61C778("map::at:  key not found");
  v129 = SHIBYTE(v160);
  v130 = __dst;
  if (v160 >= 0)
    v131 = HIBYTE(v160);
  else
    v131 = v159;
  if (v160 >= 0)
    v132 = &__dst;
  else
    v132 = __dst;
  while (1)
  {
    while (1)
    {
      v133 = *((char *)v128 + 55);
      if (v133 >= 0)
        v134 = *((unsigned __int8 *)v128 + 55);
      else
        v134 = (size_t)v128[5];
      if (v133 >= 0)
        v135 = (uint64_t *)(v128 + 4);
      else
        v135 = v128[4];
      if (v134 >= v131)
        v136 = v131;
      else
        v136 = v134;
      v137 = memcmp(v132, v135, v136);
      v138 = v131 < v134;
      if (v137)
        v138 = v137 < 0;
      if (!v138)
        break;
      v128 = (uint64_t **)*v128;
      if (!v128)
        goto LABEL_140;
    }
    v139 = memcmp(v135, v132, v136);
    v140 = v134 < v131;
    if (v139)
      v140 = v139 < 0;
    if (!v140)
      break;
    v128 = (uint64_t **)v128[1];
    if (!v128)
      goto LABEL_140;
  }
  v141 = objc_retainAutorelease(v128[7]);
  v147 = objc_msgSend_dataPointer(v141, v142, v143, v144, v145, v146);
  if (v129 < 0)
  {
    operator delete(v130);
    v148 = v156;
    if (v156 >= 1)
    {
LABEL_143:
      v149 = v157;
      if (v155 < 1)
      {
        v151 = 0;
      }
      else
      {
        v150 = 0;
        v151 = 0;
        v152 = 4 * v155;
        do
        {
          for (i = 0; i != v155; ++i)
          {
            if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * v150) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0
              && (float)(*(float *)(v121 + 4 * i) + *(float *)(v147 + 4 * i)) > *((float *)this + 11))
            {
              ++v151;
            }
          }
          ++v150;
          v147 += v152;
          v121 += v152;
        }
        while (v150 != v148);
      }
      goto LABEL_154;
    }
  }
  else
  {
    v148 = v156;
    if (v156 >= 1)
      goto LABEL_143;
  }
  v151 = 0;
  v149 = v157;
LABEL_154:
  *v149 = 1;
  logf((float)v151 / (float)*((int *)this + 10));
}

void sub_1BE77354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  char v19;

  if (v19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BE7735A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80) == 0)
    JUMPOUT(0x1BE77359CLL);
  JUMPOUT(0x1BE773594);
}

void sub_1BE7735B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80) == 0)
    JUMPOUT(0x1BE77359CLL);
  JUMPOUT(0x1BE773594);
}

uint64_t sub_1BE7735C4(uint64_t a1, uint64_t *a2, float a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1BE77F0C0((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  CoreHandwriting::AttentionBasedMathSegmentation::AttentionBasedMathSegmentation((CoreHandwriting::AttentionBasedMathSegmentation *)(a1 + 24), a3);
  sub_1BE61CB7C(a1 + 56);
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 592) = 1065353216;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 632) = 1065353216;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(_QWORD *)(a1 + 680) = 0x300000003;
  *(_QWORD *)(a1 + 688) = 0x3F00000000000005;
  *(int32x2_t *)(a1 + 696) = vdup_n_s32(0x3DCCCCCDu);
  return a1;
}

void sub_1BE773680(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE61F3E8(v1 + 32, *(char **)(v1 + 40));
  sub_1BE61081C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1BE7736A0(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE61081C(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::CHMathBeamDecoder::setLatexSyntaxScorer(CoreHandwriting::CHMathBeamDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  __int128 *v8;
  char **v9;
  char *v10[2];
  __int128 *v11;

  v10[0] = 0;
  v10[1] = 0;
  v9 = v10;
  v2 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v11 = (__int128 *)(v2 + v3);
      *((_DWORD *)sub_1BE61F944((uint64_t **)&v9, (const void **)(v2 + v3), (uint64_t)&unk_1BE8D50A2, &v11) + 14) = v4++;
      v2 = *(_QWORD *)this;
      v3 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) > v4);
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E77EF7D8;
  sub_1BE7C4518((uint64_t **)(v5 + 8), (uint64_t **)&v9);
  *(_QWORD *)(v5 + 424) = 0xC0135D8EC0935D8ELL;
  v11 = (__int128 *)v5;
  v6 = (uint64_t *)*((_QWORD *)this + 68);
  if ((unint64_t)v6 >= *((_QWORD *)this + 69))
  {
    v7 = sub_1BE77F660((_QWORD *)this + 67, (uint64_t *)&v11);
    v8 = v11;
    *((_QWORD *)this + 68) = v7;
    v11 = 0;
    if (v8)
      (*(void (**)(__int128 *))(*(_QWORD *)v8 + 16))(v8);
  }
  else
  {
    *v6 = v5;
    *((_QWORD *)this + 68) = v6 + 1;
  }
  sub_1BE61F3E8((uint64_t)&v9, v10[0]);
}

void sub_1BE7737F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    sub_1BE61F3E8((uint64_t)&a10, a11);
    _Unwind_Resume(a1);
  }
  sub_1BE61F3E8((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE773880(_QWORD *a1, uint64_t **a2, float a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = operator new();
  result = sub_1BE77297C(v6, a2, 0.5, a3);
  v10 = v6;
  v8 = (uint64_t *)a1[68];
  if ((unint64_t)v8 >= a1[69])
  {
    v9 = sub_1BE77F660(a1 + 67, &v10);
    result = v10;
    a1[68] = v9;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  else
  {
    *v8 = v6;
    a1[68] = v8 + 1;
  }
  return result;
}

void sub_1BE773948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE773990(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = a5;
  v10 = operator new();
  sub_1BE77010C(v10, a2, a3, a4, v9, a1);
  v14 = v10;
  v11 = (uint64_t *)a1[68];
  if ((unint64_t)v11 >= a1[69])
  {
    v12 = sub_1BE77F660(a1 + 67, &v14);
    v13 = v14;
    a1[68] = (uint64_t)v12;
    v14 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else
  {
    *v11 = v10;
    a1[68] = (uint64_t)(v11 + 1);
  }

}

void sub_1BE773A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void CoreHandwriting::CHMathBeamDecoder::initialState(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  void **p_dst;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  size_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  size_t v81;
  size_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  size_t v109;
  size_t v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  id v116;
  void **__dst;
  size_t v118;
  unint64_t v119;

  v3 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = a2 + 32;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_QWORD *)(a2 + 144) = a2 + 152;
  *(_DWORD *)(a2 + 168) = 0;
  *(_WORD *)(a2 + 172) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  v116 = v3;
  objc_msgSend_featureValueForName_(v3, v4, (uint64_t)CFSTR("decoder_state_h"), v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v8, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_squeezeDimensions_error_(v14, v15, (uint64_t)&unk_1E7827E00, 0, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v24 = (const char *)objc_msgSend_UTF8String(CFSTR("decoder_state_h"), v19, v20, v21, v22, v23);
  v25 = strlen(v24);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    p_dst = (void **)operator new(v28 + 1);
    v118 = v26;
    v119 = v29 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v119) = v25;
  p_dst = (void **)&__dst;
  if (v25)
LABEL_8:
    memmove(p_dst, v24, v26);
  *((_BYTE *)p_dst + v26) = 0;
  v30 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  v31 = v30[7];
  v30[7] = (uint64_t *)v18;

  if (SHIBYTE(v119) < 0)
    operator delete(__dst);

  objc_msgSend_featureValueForName_(v116, v32, (uint64_t)CFSTR("decoder_state_c"), v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v36, v37, v38, v39, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_squeezeDimensions_error_(v42, v43, (uint64_t)&unk_1E7827E18, 0, v44, v45);
  v46 = objc_claimAutoreleasedReturnValue();
  v52 = (const char *)objc_msgSend_UTF8String(CFSTR("decoder_state_c"), v47, v48, v49, v50, v51);
  v53 = strlen(v52);
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v54 = v53;
  if (v53 >= 0x17)
  {
    v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v56 = v53 | 7;
    v57 = v56 + 1;
    v55 = (void **)operator new(v56 + 1);
    v118 = v54;
    v119 = v57 | 0x8000000000000000;
    __dst = v55;
    goto LABEL_18;
  }
  HIBYTE(v119) = v53;
  v55 = (void **)&__dst;
  if (v53)
LABEL_18:
    memmove(v55, v52, v54);
  *((_BYTE *)v55 + v54) = 0;
  v58 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  v59 = v58[7];
  v58[7] = (uint64_t *)v46;

  if (SHIBYTE(v119) < 0)
    operator delete(__dst);

  objc_msgSend_featureValueForName_(v116, v60, (uint64_t)CFSTR("past_attention_weights"), v61, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v64, v65, v66, v67, v68, v69);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_squeezeDimensions_error_(v70, v71, (uint64_t)&unk_1E7827E30, 0, v72, v73);
  v74 = objc_claimAutoreleasedReturnValue();
  v80 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v75, v76, v77, v78, v79);
  v81 = strlen(v80);
  if (v81 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v82 = v81;
  if (v81 >= 0x17)
  {
    v84 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17)
      v84 = v81 | 7;
    v85 = v84 + 1;
    v83 = (void **)operator new(v84 + 1);
    v118 = v82;
    v119 = v85 | 0x8000000000000000;
    __dst = v83;
    goto LABEL_28;
  }
  HIBYTE(v119) = v81;
  v83 = (void **)&__dst;
  if (v81)
LABEL_28:
    memmove(v83, v80, v82);
  *((_BYTE *)v83 + v82) = 0;
  v86 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  v87 = v86[7];
  v86[7] = (uint64_t *)v74;

  if (SHIBYTE(v119) < 0)
    operator delete(__dst);

  objc_msgSend_featureValueForName_(v116, v88, (uint64_t)CFSTR("y"), v89, v90, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v92, v93, v94, v95, v96, v97);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_squeezeDimensions_error_(v98, v99, (uint64_t)&unk_1E7827E48, 0, v100, v101);
  v102 = objc_claimAutoreleasedReturnValue();
  v108 = (const char *)objc_msgSend_UTF8String(CFSTR("y"), v103, v104, v105, v106, v107);
  v109 = strlen(v108);
  if (v109 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v110 = v109;
  if (v109 >= 0x17)
  {
    v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v112 = v109 | 7;
    v113 = v112 + 1;
    v111 = (void **)operator new(v112 + 1);
    v118 = v110;
    v119 = v113 | 0x8000000000000000;
    __dst = v111;
    goto LABEL_38;
  }
  HIBYTE(v119) = v109;
  v111 = (void **)&__dst;
  if (v109)
LABEL_38:
    memmove(v111, v108, v110);
  *((_BYTE *)v111 + v110) = 0;
  v114 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  v115 = v114[7];
  v114[7] = (uint64_t *)v102;

  if (SHIBYTE(v119) < 0)
    operator delete(__dst);

}

void sub_1BE773F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  sub_1BE77D498(v15);
  _Unwind_Resume(a1);
}

void sub_1BE773FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  uint64_t v9;

  sub_1BE77D498(v9);

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::CHMathBeamDecoder::applyBeamScorers(CoreHandwriting::CHMathBeamDecoder *this, CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  char v8;

  v8 = 0;
  v2 = *((_QWORD *)this + 67);
  if (*((_QWORD *)this + 68) == v2)
    return 1;
  v5 = 0;
  LOBYTE(v6) = 1;
  do
  {
    *((float *)a2 + 42) = (***(float (****)(_QWORD, CoreHandwriting::CHEncoderDecoderBeamState *, char *))(v2 + 8 * v5))(*(_QWORD *)(v2 + 8 * v5), a2, &v8)+ *((float *)a2 + 42);
    v6 = v6 & (v8 != 0);
    ++v5;
    v2 = *((_QWORD *)this + 67);
  }
  while (v5 < (*((_QWORD *)this + 68) - v2) >> 3);
  return v6;
}

void CoreHandwriting::CHMathBeamDecoder::expand(int8x8_t *this@<X0>, CoreHandwriting::CHEncoderDecoderBeamState *a2@<X1>, NSDictionary *a3@<X3>, int a4@<W2>, int a5@<W4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  __int128 *p_dst;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  size_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t **v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  unint64_t v83;
  uint64_t *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *i;
  uint64_t **v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  unint64_t v102;
  int v103;
  uint64_t **v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  int8x8_t v112;
  uint8x8_t v113;
  unint64_t v114;
  int8x8_t v115;
  uint64_t **v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  float *v125;
  int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  float *j;
  uint64_t **v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  float *v146;
  int v147;
  float v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  unsigned int v169;
  unsigned int v170;
  std::string *v171;
  std::string::size_type size;
  unsigned int v173;
  int v174;
  int v175;
  int v176;
  void **v177;
  unint64_t v178;
  int *v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  int *v188;
  int64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  _OWORD *v194;
  int *v195;
  uint64_t v196;
  __int128 v197;
  int v198;
  int v199;
  unint64_t v200;
  uint8x8_t v201;
  unint64_t v202;
  uint64_t **v203;
  uint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  void *v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  _DWORD *v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _BYTE *v225;
  _DWORD *v226;
  int64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  _OWORD *v232;
  char *v233;
  uint64_t v234;
  __int128 v235;
  int v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  _BYTE *v245;
  float *v246;
  int64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  _OWORD *v252;
  char *v253;
  uint64_t v254;
  __int128 v255;
  int v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _BYTE *v267;
  _QWORD *v268;
  int64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  _OWORD *v274;
  char *v275;
  uint64_t v276;
  __int128 v277;
  uint64_t v278;
  BOOL v280;
  uint64_t *v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t **v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int8x8_t v305;
  unint64_t v306;
  char v307;
  void *v308;
  uint64_t v309;
  NSDictionary *v310;
  int **v311;
  std::string *__str;
  unint64_t *v314;
  int v315;
  void **v317;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  void *v324;
  _DWORD *v325;
  char *v326;
  __int128 __dst;
  __int128 v328;
  _QWORD *v329;
  std::string v330;

  v310 = a3;
  v14 = (const char *)objc_msgSend_UTF8String(CFSTR("decoder_state_h"), v9, v10, v11, v12, v13);
  v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v20 = v15;
  if (v15 >= 0x17)
  {
    v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v22 = v15 | 7;
    v23 = v22 + 1;
    p_dst = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&__dst + 1) = v20;
    *(_QWORD *)&v328 = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v328) = v15;
  p_dst = &__dst;
  if (v15)
LABEL_8:
    memmove(p_dst, v14, v20);
  *((_BYTE *)p_dst + v20) = 0;
  objc_msgSend_objectForKeyedSubscript_(v310, v16, (uint64_t)CFSTR("new_decoder_state_h"), v17, v18, v19);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE76F8BC((uint64_t **)a2, (const void **)&__dst, v24, a5);

  if (SBYTE7(v328) < 0)
    operator delete((void *)__dst);
  v30 = (const char *)objc_msgSend_UTF8String(CFSTR("decoder_state_c"), v25, v26, v27, v28, v29);
  v31 = strlen(v30);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v36 = v31;
  if (v31 >= 0x17)
  {
    v38 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v38 = v31 | 7;
    v39 = v38 + 1;
    v37 = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&__dst + 1) = v36;
    *(_QWORD *)&v328 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dst = v37;
    goto LABEL_18;
  }
  BYTE7(v328) = v31;
  v37 = &__dst;
  if (v31)
LABEL_18:
    memmove(v37, v30, v36);
  *((_BYTE *)v37 + v36) = 0;
  objc_msgSend_objectForKeyedSubscript_(v310, v32, (uint64_t)CFSTR("new_decoder_state_c"), v33, v34, v35);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE76F8BC((uint64_t **)a2, (const void **)&__dst, v40, a5);

  if (SBYTE7(v328) < 0)
    operator delete((void *)__dst);
  v46 = (const char *)objc_msgSend_UTF8String(CFSTR("attention_weights"), v41, v42, v43, v44, v45);
  v47 = strlen(v46);
  if (v47 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v52 = v47;
  if (v47 >= 0x17)
  {
    v54 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v54 = v47 | 7;
    v55 = v54 + 1;
    v53 = (__int128 *)operator new(v54 + 1);
    *((_QWORD *)&__dst + 1) = v52;
    *(_QWORD *)&v328 = v55 | 0x8000000000000000;
    *(_QWORD *)&__dst = v53;
    goto LABEL_28;
  }
  BYTE7(v328) = v47;
  v53 = &__dst;
  if (v47)
LABEL_28:
    memmove(v53, v46, v52);
  *((_BYTE *)v53 + v52) = 0;
  objc_msgSend_objectForKeyedSubscript_(v310, v48, (uint64_t)CFSTR("attention_weights"), v49, v50, v51);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE76F8BC((uint64_t **)a2, (const void **)&__dst, v56, a5);

  if (SBYTE7(v328) < 0)
    operator delete((void *)__dst);
  v62 = (const char *)objc_msgSend_UTF8String(CFSTR("y"), v57, v58, v59, v60, v61);
  v63 = strlen(v62);
  if (v63 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v68 = v63;
  if (v63 >= 0x17)
  {
    v70 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v70 = v63 | 7;
    v71 = v70 + 1;
    v69 = (__int128 *)operator new(v70 + 1);
    *((_QWORD *)&__dst + 1) = v68;
    *(_QWORD *)&v328 = v71 | 0x8000000000000000;
    *(_QWORD *)&__dst = v69;
    goto LABEL_38;
  }
  BYTE7(v328) = v63;
  v69 = &__dst;
  if (v63)
LABEL_38:
    memmove(v69, v62, v68);
  *((_BYTE *)v69 + v68) = 0;
  objc_msgSend_objectForKeyedSubscript_(v310, v64, (uint64_t)CFSTR("y"), v65, v66, v67);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE76F8BC((uint64_t **)a2, (const void **)&__dst, v72, a5);

  if (SBYTE7(v328) < 0)
    operator delete((void *)__dst);
  BYTE7(v328) = 1;
  LOWORD(__dst) = 121;
  v73 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  v79 = objc_msgSend_count(v73[7], v74, v75, v76, v77, v78);
  v80 = v79;
  v325 = 0;
  v326 = 0;
  if (v79)
  {
    if (v79 >> 61)
      sub_1BE61F930();
    v81 = 2 * v79;
    v82 = operator new(8 * v79);
    v325 = v82;
    bzero(v82, 8 * v80);
    v83 = (unint64_t)&v82[v81];
    v326 = (char *)&v82[v81];
    if ((SBYTE7(v328) & 0x80000000) == 0)
      goto LABEL_45;
  }
  else
  {
    v82 = 0;
    v83 = 0;
    if ((SBYTE7(v328) & 0x80000000) == 0)
      goto LABEL_45;
  }
  operator delete((void *)__dst);
LABEL_45:
  BYTE7(v328) = 1;
  LOWORD(__dst) = 121;
  v84 = objc_retainAutorelease(sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst)[7]);
  v90 = objc_msgSend_dataPointer(v84, v85, v86, v87, v88, v89);
  if (SBYTE7(v328) < 0)
    operator delete((void *)__dst);
  v91 = 0;
  for (i = v82 + 1; ; i += 2)
  {
    BYTE7(v328) = 1;
    LOWORD(__dst) = 121;
    v93 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
    v99 = objc_msgSend_count(v93[7], v94, v95, v96, v97, v98);
    if (SBYTE7(v328) < 0)
      operator delete((void *)__dst);
    if (v99 <= v91)
      break;
    *(i - 1) = *(_DWORD *)(v90 + 4 * v91);
    *i = v91++;
  }
  v324 = 0;
  v100 = v83 - (_QWORD)v82;
  if ((_DWORD *)v83 == v82)
  {
    v101 = 0;
  }
  else
  {
    if ((v100 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v101 = operator new(v100 >> 1);
    v324 = v101;
    bzero(v101, 4 * ((uint64_t)(v83 - (_QWORD)v82) >> 3));
  }
  v102 = 0;
  v103 = a4;
  while (1)
  {
    BYTE7(v328) = 1;
    LOWORD(__dst) = 121;
    v104 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
    v110 = objc_msgSend_count(v104[7], v105, v106, v107, v108, v109);
    if (SBYTE7(v328) < 0)
      operator delete((void *)__dst);
    if (v110 <= (uint64_t)v102)
      break;
    v111 = *(float *)&v82[2 * v102];
    if (v111 > *(float *)&this[87].i32[1])
    {
      v112 = this[81];
      if (v112)
      {
        v113 = (uint8x8_t)vcnt_s8(v112);
        v113.i16[0] = vaddlv_u8(v113);
        if (v113.u32[0] > 1uLL)
        {
          v114 = v102;
          if (*(_QWORD *)&v112 <= v102)
            v114 = v102 % *(_QWORD *)&v112;
        }
        else
        {
          v114 = (*(_QWORD *)&v112 + 0x7FFFFFFFLL) & v102;
        }
        v115 = this[80];
        v116 = *(uint64_t ***)(*(_QWORD *)&v115 + 8 * v114);
        if (v116)
        {
          v117 = *v116;
          if (*v116)
          {
            v118 = *(_QWORD *)&v112 - 1;
            if (v113.u32[0] < 2uLL)
            {
              while (1)
              {
                v119 = v117[1];
                if (v119 == v102)
                {
                  if (v102 == *((_DWORD *)v117 + 4))
                    goto LABEL_85;
                }
                else if ((v119 & v118) != v114)
                {
                  goto LABEL_59;
                }
                v117 = (uint64_t *)*v117;
                if (!v117)
                  goto LABEL_59;
              }
            }
            do
            {
              v120 = v117[1];
              if (v120 == v102)
              {
                if (v102 == *((_DWORD *)v117 + 4))
                {
LABEL_85:
                  if (v113.u32[0] > 1uLL)
                  {
                    v121 = v102;
                    if (*(_QWORD *)&v112 <= v102)
                      v121 = v102 % *(_QWORD *)&v112;
                  }
                  else
                  {
                    v121 = (*(_QWORD *)&v112 + 0x7FFFFFFFLL) & v102;
                  }
                  v122 = *(uint64_t ***)(*(_QWORD *)&v115 + 8 * v121);
                  if (!v122 || (v123 = *v122) == 0)
LABEL_398:
                    sub_1BE61C778("unordered_map::at: key not found");
                  if (v113.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v124 = v123[1];
                      if (v124 == v102)
                      {
                        if (v102 == *((_DWORD *)v123 + 4))
                          goto LABEL_97;
                      }
                      else if ((v124 & v118) != v121)
                      {
                        goto LABEL_398;
                      }
                      v123 = (uint64_t *)*v123;
                      if (!v123)
                        goto LABEL_398;
                    }
                  }
                  while (1)
                  {
                    v128 = v123[1];
                    if (v128 == v102)
                    {
                      if (v102 == *((_DWORD *)v123 + 4))
                      {
LABEL_97:
                        v125 = (float *)v123[3];
                        v126 = (int *)v123[4];
                        while (v125 != (float *)v126)
                        {
                          v127 = *(int *)v125;
                          if (*(float *)&v82[2 * v127] < v111)
                          {
                            *((float *)v101 + v127) = *((float *)v101 + v127) + (float)(v111 * v125[1]);
                            v103 = (int)fmin((double)(v103 + 1), (double)(this[86].i32[0] + a4));
                          }
                          v125 += 2;
                        }
                        goto LABEL_59;
                      }
                    }
                    else
                    {
                      if (v128 >= *(_QWORD *)&v112)
                        v128 %= *(_QWORD *)&v112;
                      if (v128 != v121)
                        goto LABEL_398;
                    }
                    v123 = (uint64_t *)*v123;
                    if (!v123)
                      goto LABEL_398;
                  }
                }
              }
              else
              {
                if (v120 >= *(_QWORD *)&v112)
                  v120 %= *(_QWORD *)&v112;
                if (v120 != v114)
                  break;
              }
              v117 = (uint64_t *)*v117;
            }
            while (v117);
          }
        }
      }
    }
LABEL_59:
    ++v102;
  }
  v129 = 0;
  for (j = (float *)v82; ; j += 2)
  {
    BYTE7(v328) = 1;
    LOWORD(__dst) = 121;
    v131 = sub_1BE77ECA0((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
    v137 = objc_msgSend_count(v131[7], v132, v133, v134, v135, v136);
    if (SBYTE7(v328) < 0)
      operator delete((void *)__dst);
    if (v137 <= v129)
      break;
    *j = *((float *)v101 + v129++) + *j;
  }
  v138 = 126 - 2 * __clz((uint64_t)(v83 - (_QWORD)v82) >> 3);
  if ((_DWORD *)v83 == v82)
    v139 = 0;
  else
    v139 = v138;
  sub_1BE7805F0((uint64_t)v82, v83, v139, 1);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if ((_DWORD *)v83 != v82)
  {
    v140 = 0;
    v314 = a7 + 2;
    v311 = (int **)((char *)a2 + 24);
    __str = (std::string *)((char *)a2 + 200);
    v315 = (int)fmax((double)v103, (double)this[85].i32[1]);
    v141 = a7;
    do
    {
      v143 = (char *)*v141;
      v144 = v141[1];
      v145 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v144 - *v141) >> 5);
      if (v145 >= v315)
        break;
      v146 = (float *)&v82[2 * v140];
      v147 = *((_DWORD *)v146 + 1);
      v148 = *v146;
      v319 = v140;
      if (v144 < *v314)
      {
        *(_QWORD *)(v144 + 8) = 0;
        *(_QWORD *)v144 = v144 + 8;
        *(_QWORD *)(v144 + 40) = 0;
        *(_QWORD *)(v144 + 32) = 0;
        *(_QWORD *)(v144 + 16) = 0;
        *(_QWORD *)(v144 + 24) = v144 + 32;
        *(_QWORD *)(v144 + 160) = 0;
        *(_QWORD *)(v144 + 152) = 0;
        *(_OWORD *)(v144 + 48) = 0u;
        *(_OWORD *)(v144 + 64) = 0u;
        *(_OWORD *)(v144 + 80) = 0u;
        *(_OWORD *)(v144 + 96) = 0u;
        *(_OWORD *)(v144 + 112) = 0u;
        *(_OWORD *)(v144 + 128) = 0u;
        *(_QWORD *)(v144 + 144) = v144 + 152;
        *(_DWORD *)(v144 + 168) = 0;
        *(_WORD *)(v144 + 172) = 0;
        *(_OWORD *)(v144 + 192) = 0u;
        *(_OWORD *)(v144 + 208) = 0u;
        v149 = v144 + 224;
        *(_OWORD *)(v144 + 176) = 0u;
        goto LABEL_141;
      }
      v150 = v145 + 1;
      if (v145 + 1 > 0x124924924924924)
        sub_1BE61F930();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v314 - (_QWORD)v143) >> 5) > v150)
        v150 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v314 - (_QWORD)v143) >> 5);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v314 - (_QWORD)v143) >> 5)) >= 0x92492492492492)
        v151 = 0x124924924924924;
      else
        v151 = v150;
      v329 = a7 + 2;
      if (v151)
      {
        if (v151 > 0x124924924924924)
          sub_1BE61F100();
        v152 = (char *)operator new(224 * v151);
      }
      else
      {
        v152 = 0;
      }
      v153 = 0;
      v154 = &v152[224 * v145];
      *((_QWORD *)v154 + 1) = 0;
      *(_QWORD *)v154 = v154 + 8;
      *((_QWORD *)v154 + 4) = 0;
      *((_QWORD *)v154 + 2) = 0;
      *((_QWORD *)v154 + 3) = v154 + 32;
      *((_QWORD *)v154 + 19) = 0;
      *((_QWORD *)v154 + 18) = v154 + 152;
      *(_QWORD *)&v328 = v154 + 224;
      *((_QWORD *)&v328 + 1) = &v152[224 * v151];
      *(_QWORD *)&__dst = v152;
      *((_QWORD *)&__dst + 1) = v154;
      *((_QWORD *)v154 + 5) = 0;
      *((_QWORD *)v154 + 20) = 0;
      *((_OWORD *)v154 + 3) = 0u;
      *((_OWORD *)v154 + 4) = 0u;
      *((_OWORD *)v154 + 5) = 0u;
      *((_OWORD *)v154 + 6) = 0u;
      *((_OWORD *)v154 + 7) = 0u;
      *((_OWORD *)v154 + 8) = 0u;
      *((_DWORD *)v154 + 42) = 0;
      *((_WORD *)v154 + 86) = 0;
      *((_OWORD *)v154 + 12) = 0u;
      *((_OWORD *)v154 + 13) = 0u;
      *((_OWORD *)v154 + 11) = 0u;
      while ((char *)(v144 + v153) != v143)
      {
        v153 -= 224;
        sub_1BE77D5F4(&v154[v153], v153 + v144);
      }
      v155 = (char *)*v141;
      v156 = (char *)v141[1];
      *v141 = &v154[v153];
      v321 = v328;
      *(_OWORD *)(v141 + 1) = v328;
      if (v156 != v155)
      {
        while ((*(v156 - 1) & 0x80000000) == 0)
        {
          v160 = (void *)*((_QWORD *)v156 - 6);
          if (v160)
            goto LABEL_150;
LABEL_151:
          sub_1BE62033C((uint64_t)(v156 - 80), *((_QWORD **)v156 - 9));
          v161 = (void *)*((_QWORD *)v156 - 13);
          if (v161)
          {
            *((_QWORD *)v156 - 12) = v161;
            operator delete(v161);
          }
          v162 = (void *)*((_QWORD *)v156 - 16);
          if (v162)
          {
            *((_QWORD *)v156 - 15) = v162;
            operator delete(v162);
          }
          v163 = (void *)*((_QWORD *)v156 - 19);
          if (v163)
          {
            *((_QWORD *)v156 - 18) = v163;
            operator delete(v163);
          }
          v164 = *((_QWORD *)v156 - 22);
          if (v164)
          {
            v165 = *((_QWORD *)v156 - 21);
            v159 = (void *)*((_QWORD *)v156 - 22);
            if (v165 != v164)
            {
              v166 = *((_QWORD *)v156 - 21);
              do
              {
                v168 = *(void **)(v166 - 24);
                v166 -= 24;
                v167 = v168;
                if (v168)
                {
                  *(_QWORD *)(v165 - 16) = v167;
                  operator delete(v167);
                }
                v165 = v166;
              }
              while (v166 != v164);
              v159 = (void *)*((_QWORD *)v156 - 22);
            }
            *((_QWORD *)v156 - 21) = v164;
            operator delete(v159);
          }
          sub_1BE67AC7C((uint64_t)(v156 - 200), *((_QWORD **)v156 - 24));
          sub_1BE77D58C((uint64_t)(v156 - 224), *((char **)v156 - 27));
          v156 -= 224;
          if (v156 == v155)
            goto LABEL_138;
        }
        operator delete(*((void **)v156 - 3));
        v160 = (void *)*((_QWORD *)v156 - 6);
        if (!v160)
          goto LABEL_151;
LABEL_150:
        *((_QWORD *)v156 - 5) = v160;
        operator delete(v160);
        goto LABEL_151;
      }
LABEL_138:
      if (v155)
        operator delete(v155);
      v149 = v321;
LABEL_141:
      v141[1] = v149;
      CoreHandwriting::CHEncoderDecoderBeamState::copyTensors((uint64_t **)(v149 - 224), (const CoreHandwriting::CHEncoderDecoderBeamState **)a2);
      if ((CoreHandwriting::CHEncoderDecoderBeamState *)(v149 - 224) != a2)
      {
        sub_1BE66E294((_QWORD *)(v149 - 152), *((char **)a2 + 9), *((char **)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
        sub_1BE66E294((_QWORD *)(v149 - 128), *((char **)a2 + 12), *((char **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
        sub_1BE62037C((_QWORD *)(v149 - 104), *((char **)a2 + 15), *((char **)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3);
        sub_1BE77E7C0(v149 - 80, *((_QWORD **)a2 + 18), (_QWORD *)a2 + 19);
      }
      *(_BYTE *)(v149 - 51) = *((_BYTE *)a2 + 173);
      v320 = v147;
      v157 = *(_QWORD *)this + 24 * v147;
      if (*(char *)(v157 + 23) < 0)
      {
        sub_1BE61F128(&v330, *(void **)v157, *(_QWORD *)(v157 + 8));
      }
      else
      {
        v158 = *(_OWORD *)v157;
        v330.__r_.__value_.__r.__words[2] = *(_QWORD *)(v157 + 16);
        *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v158;
      }
      std::string::operator=((std::string *)(v149 - 24), __str);
      v169 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
      v322 = v147;
      if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v330.__r_.__value_.__l.__size_ != 1)
          goto LABEL_196;
        v170 = *v330.__r_.__value_.__l.__data_;
        if ((v170 & 0x80000000) == 0)
          goto LABEL_169;
      }
      else
      {
        if (HIBYTE(v330.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_185;
        v170 = v330.__r_.__value_.__s.__data_[0];
        if ((v330.__r_.__value_.__s.__data_[0] & 0x80000000) == 0)
        {
LABEL_169:
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v170 + 60) & 0x100) == 0)
            goto LABEL_184;
          goto LABEL_170;
        }
      }
      v175 = __maskrune(v170, 0x100uLL);
      v169 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
      if (!v175)
      {
LABEL_184:
        if ((v169 & 0x80) == 0)
          goto LABEL_185;
        goto LABEL_177;
      }
LABEL_170:
      if ((v169 & 0x80u) == 0)
        v171 = &v330;
      else
        v171 = (std::string *)v330.__r_.__value_.__r.__words[0];
      if ((v169 & 0x80u) == 0)
        size = v169;
      else
        size = v330.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v149 - 24), (const std::string::value_type *)v171, size);
      v169 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
      if ((*((_BYTE *)&v330.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_185:
        if (v169 != 1)
          goto LABEL_190;
        v173 = v330.__r_.__value_.__s.__data_[0];
        if (v330.__r_.__value_.__s.__data_[0] < 0)
          goto LABEL_179;
        goto LABEL_187;
      }
LABEL_177:
      if (v330.__r_.__value_.__l.__size_ != 1)
        goto LABEL_196;
      v173 = *v330.__r_.__value_.__l.__data_;
      if ((v173 & 0x80000000) != 0)
      {
LABEL_179:
        if (__maskrune(v173, 0x100uLL))
          goto LABEL_180;
        goto LABEL_188;
      }
LABEL_187:
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v173 + 60) & 0x100) != 0)
      {
LABEL_180:
        v174 = 1;
        goto LABEL_227;
      }
LABEL_188:
      if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v169 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
LABEL_190:
        if (v169 != 1)
          goto LABEL_196;
        LOBYTE(v176) = v330.__r_.__value_.__s.__data_[0];
        if (v330.__r_.__value_.__s.__data_[0] < 0)
          goto LABEL_196;
        goto LABEL_192;
      }
      if (v330.__r_.__value_.__l.__size_ != 1)
        goto LABEL_196;
      v176 = *v330.__r_.__value_.__l.__data_;
      if (v176 < 0)
        goto LABEL_196;
LABEL_192:
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v176 + 60) & 0x400) != 0)
      {
        v174 = 0;
        goto LABEL_227;
      }
LABEL_196:
      if (!std::string::compare(&v330, "."))
      {
        v174 = 2;
      }
      else if (!std::string::compare(&v330, "\\cdot"))
      {
        v174 = 3;
      }
      else if (!std::string::compare(&v330, ","))
      {
        v174 = 4;
      }
      else if (!std::string::compare(&v330, "-"))
      {
        v174 = 11;
      }
      else if (!std::string::compare(&v330, "="))
      {
        v174 = 9;
      }
      else if (!std::string::compare(&v330, "/"))
      {
        v174 = 10;
      }
      else if (!std::string::compare(&v330, "^"))
      {
        v174 = 13;
      }
      else if (!std::string::compare(&v330, "_"))
      {
        v174 = 12;
      }
      else if (!std::string::compare(&v330, "\\frac"))
      {
        v174 = 14;
      }
      else if (!std::string::compare(&v330, "\\sqrt"))
      {
        v174 = 16;
      }
      else if (!std::string::compare(&v330, "{"))
      {
        v174 = 19;
      }
      else if (!std::string::compare(&v330, "}"))
      {
        v174 = 20;
      }
      else if (!std::string::compare(&v330, "["))
      {
        v174 = 17;
      }
      else if (!std::string::compare(&v330, "]"))
      {
        v174 = 18;
      }
      else if (!std::string::compare(&v330, "\\"))
      {
        v174 = 5;
      }
      else
      {
        v174 = 6;
      }
LABEL_227:
      v177 = (void **)(v149 - 48);
      if ((CoreHandwriting::CHEncoderDecoderBeamState *)(v149 - 224) != a2)
        sub_1BE66E294((_QWORD *)(v149 - 48), *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
      v179 = *(int **)(v149 - 40);
      v178 = *(_QWORD *)(v149 - 32);
      v317 = (void **)(v149 - 48);
      if ((unint64_t)v179 < v178)
      {
        *v179 = v174;
        v180 = (uint64_t)(v179 + 1);
        goto LABEL_250;
      }
      v181 = (int *)*v177;
      v182 = (char *)v179 - (_BYTE *)*v177;
      v183 = v182 >> 2;
      v184 = (v182 >> 2) + 1;
      if (v184 >> 62)
        sub_1BE61F930();
      v185 = v178 - (_QWORD)v181;
      if (v185 >> 1 > v184)
        v184 = v185 >> 1;
      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
        v186 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v186 = v184;
      if (v186)
      {
        if (v186 >> 62)
          sub_1BE61F100();
        v187 = operator new(4 * v186);
        v188 = (int *)&v187[4 * v183];
        *v188 = v174;
        v180 = (uint64_t)(v188 + 1);
        v189 = (char *)v179 - (char *)v181;
        if (v179 == v181)
          goto LABEL_248;
LABEL_242:
        v190 = v189 - 4;
        if (v190 < 0x2C)
          goto LABEL_416;
        if ((unint64_t)((char *)v179 - v187 - v182) < 0x20)
          goto LABEL_416;
        v191 = (v190 >> 2) + 1;
        v192 = 4 * (v191 & 0x7FFFFFFFFFFFFFF8);
        v193 = &v179[v192 / 0xFFFFFFFFFFFFFFFCLL];
        v188 = (int *)((char *)v188 - v192);
        v194 = &v187[4 * v183 - 16];
        v195 = v179 - 4;
        v196 = v191 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v197 = *(_OWORD *)v195;
          *(v194 - 1) = *((_OWORD *)v195 - 1);
          *v194 = v197;
          v194 -= 2;
          v195 -= 8;
          v196 -= 8;
        }
        while (v196);
        v179 = v193;
        if (v191 != (v191 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_416:
          do
          {
            v198 = *--v179;
            *--v188 = v198;
          }
          while (v179 != v181);
        }
        goto LABEL_248;
      }
      v187 = 0;
      v188 = (int *)(4 * v183);
      *(_DWORD *)(4 * v183) = v174;
      v180 = 4 * v183 + 4;
      v189 = (char *)v179 - (char *)v181;
      if (v179 != v181)
        goto LABEL_242;
LABEL_248:
      *(_QWORD *)(v149 - 48) = v188;
      *(_QWORD *)(v149 - 40) = v180;
      *(_QWORD *)(v149 - 32) = &v187[4 * v186];
      if (v181)
        operator delete(v181);
LABEL_250:
      v199 = v322;
      *(_QWORD *)(v149 - 40) = v180;
      if ((unint64_t)(v180 - *(_QWORD *)(v149 - 48)) >= 5)
      {
        v200 = *(unsigned int *)(v180 - 8);
        if ((_DWORD)v200 == *(_DWORD *)(v180 - 4))
        {
          __dst = 0u;
          v328 = 0u;
          LODWORD(v329) = 1065353216;
          sub_1BE77E330((float *)&__dst, 0, 0);
          sub_1BE77E330((float *)&__dst, 1u, 1);
          sub_1BE77E330((float *)&__dst, 6u, 6);
          sub_1BE77E330((float *)&__dst, 7u, 7);
          if (!*((_QWORD *)&__dst + 1))
            goto LABEL_272;
          v201 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__dst + 8));
          v201.i16[0] = vaddlv_u8(v201);
          if (v201.u32[0] > 1uLL)
          {
            v202 = v200;
            if (*((_QWORD *)&__dst + 1) <= v200)
              v202 = v200 % *((_QWORD *)&__dst + 1);
          }
          else
          {
            v202 = (DWORD2(__dst) - 1) & v200;
          }
          v203 = *(uint64_t ***)(__dst + 8 * v202);
          if (v203)
          {
            v204 = *v203;
            if (*v203)
            {
              if (v201.u32[0] < 2uLL)
              {
                while (1)
                {
                  v206 = v204[1];
                  if (v206 == v200)
                  {
                    if (*((_DWORD *)v204 + 4) == (_DWORD)v200)
                      goto LABEL_273;
                  }
                  else if ((v206 & (*((_QWORD *)&__dst + 1) - 1)) != v202)
                  {
                    goto LABEL_272;
                  }
                  v204 = (uint64_t *)*v204;
                  if (!v204)
                    goto LABEL_273;
                }
              }
              do
              {
                v205 = v204[1];
                if (v205 == v200)
                {
                  if (*((_DWORD *)v204 + 4) == (_DWORD)v200)
                    break;
                }
                else
                {
                  if (v205 >= *((_QWORD *)&__dst + 1))
                    v205 %= *((_QWORD *)&__dst + 1);
                  if (v205 != v202)
                    goto LABEL_272;
                }
                v204 = (uint64_t *)*v204;
              }
              while (v204);
            }
          }
          else
          {
LABEL_272:
            v204 = 0;
          }
LABEL_273:
          v207 = (_QWORD *)v328;
          if ((_QWORD)v328)
          {
            do
            {
              v208 = (_QWORD *)*v207;
              operator delete(v207);
              v207 = v208;
            }
            while (v208);
          }
          v209 = (void *)__dst;
          *(_QWORD *)&__dst = 0;
          if (v209)
            operator delete(v209);
          if (v204)
            *(_QWORD *)(v149 - 40) -= 4;
        }
      }
      v210 = operator new(8uLL);
      *v210 = 0x900000001;
      v212 = *(char **)(v149 - 48);
      v211 = *(char **)(v149 - 40);
      v141 = a7;
      if (v211 - v212 != 8)
      {
LABEL_293:
        operator delete(v210);
        if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_290;
        goto LABEL_294;
      }
      if (v212 != v211)
      {
        v213 = v210;
        while (*(_DWORD *)v212 == *v213)
        {
          v212 += 4;
          ++v213;
          if (v212 == v211)
            goto LABEL_284;
        }
        goto LABEL_293;
      }
LABEL_284:
      operator delete(v210);
      v214 = *((unsigned __int8 *)a2 + 223);
      if ((v214 & 0x80u) != 0)
        v214 = *((_QWORD *)a2 + 26);
      if (v214)
        memset_pattern16((void *)(*(_QWORD *)(v149 - 96) - 8 * v214), &unk_1BE8DF230, 8 * v214);
      if (!std::string::compare(__str, "y"))
      {
        *(_BYTE *)(v149 - 51) = 1;
        if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_290:
          if (v322 != a6)
            goto LABEL_295;
          goto LABEL_291;
        }
      }
      else if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_290;
      }
LABEL_294:
      operator delete(v330.__r_.__value_.__l.__data_);
      if (v322 != a6)
      {
LABEL_295:
        v215 = *(_QWORD *)this + 24 * (int)v320;
        if (*(char *)(v215 + 23) < 0)
        {
          sub_1BE61F128(&__dst, *(void **)v215, *(_QWORD *)(v215 + 8));
        }
        else
        {
          v216 = *(_OWORD *)v215;
          *(_QWORD *)&v328 = *(_QWORD *)(v215 + 16);
          __dst = v216;
        }
        v218 = *(char **)(v149 - 144);
        v217 = *(_QWORD *)(v149 - 136);
        if ((unint64_t)v218 < v217)
        {
          *(_DWORD *)v218 = v322;
          v219 = (uint64_t)(v218 + 4);
          goto LABEL_321;
        }
        v220 = *(char **)(v149 - 152);
        v221 = (v218 - v220) >> 2;
        v222 = v221 + 1;
        if ((unint64_t)(v221 + 1) >> 62)
          sub_1BE61F930();
        v223 = v217 - (_QWORD)v220;
        if (v223 >> 1 > v222)
          v222 = v223 >> 1;
        if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL)
          v224 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v224 = v222;
        if (v224)
        {
          if (v224 >> 62)
            goto LABEL_403;
          v225 = operator new(4 * v224);
          v226 = &v225[4 * v221];
          *v226 = v322;
          v219 = (uint64_t)(v226 + 1);
          v227 = v218 - v220;
          if (v218 == v220)
            goto LABEL_319;
        }
        else
        {
          v225 = 0;
          v226 = (_DWORD *)(4 * v221);
          *(_DWORD *)(4 * v221) = v322;
          v219 = 4 * v221 + 4;
          v227 = v218 - v220;
          if (v218 == v220)
          {
LABEL_319:
            *(_QWORD *)(v149 - 152) = v226;
            *(_QWORD *)(v149 - 144) = v219;
            *(_QWORD *)(v149 - 136) = &v225[4 * v224];
            if (v220)
              operator delete(v220);
LABEL_321:
            *(_QWORD *)(v149 - 144) = v219;
            v238 = *(char **)(v149 - 120);
            v237 = *(_QWORD *)(v149 - 112);
            if ((unint64_t)v238 < v237)
            {
              *(float *)v238 = v148;
              v239 = (uint64_t)(v238 + 4);
              goto LABEL_342;
            }
            v240 = *(char **)(v149 - 128);
            v241 = (v238 - v240) >> 2;
            v242 = v241 + 1;
            if ((unint64_t)(v241 + 1) >> 62)
              sub_1BE61F930();
            v243 = v237 - (_QWORD)v240;
            if (v243 >> 1 > v242)
              v242 = v243 >> 1;
            if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL)
              v244 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v244 = v242;
            if (v244)
            {
              if (v244 >> 62)
LABEL_403:
                sub_1BE61F100();
              v245 = operator new(4 * v244);
              v246 = (float *)&v245[4 * v241];
              *v246 = v148;
              v239 = (uint64_t)(v246 + 1);
              v247 = v238 - v240;
              if (v238 == v240)
                goto LABEL_340;
            }
            else
            {
              v245 = 0;
              v246 = (float *)(4 * v241);
              *(float *)(4 * v241) = v148;
              v239 = 4 * v241 + 4;
              v247 = v238 - v240;
              if (v238 == v240)
              {
LABEL_340:
                *(_QWORD *)(v149 - 128) = v246;
                *(_QWORD *)(v149 - 120) = v239;
                *(_QWORD *)(v149 - 112) = &v245[4 * v244];
                if (v240)
                  operator delete(v240);
LABEL_342:
                *(_QWORD *)(v149 - 120) = v239;
                v257 = sub_1BE61651C(&this[7], &__dst);
                v258 = v257;
                v260 = *(char **)(v149 - 96);
                v259 = *(_QWORD *)(v149 - 88);
                if ((unint64_t)v260 < v259)
                {
                  *(_QWORD *)v260 = v257;
                  v261 = (uint64_t)(v260 + 8);
                  v141 = a7;
LABEL_361:
                  *(_QWORD *)(v149 - 96) = v261;
                  if (SBYTE7(v328) < 0)
                    operator delete((void *)__dst);
                  v199 = v322;
                  goto LABEL_364;
                }
                v262 = *(char **)(v149 - 104);
                v263 = (v260 - v262) >> 3;
                v264 = v263 + 1;
                if ((unint64_t)(v263 + 1) >> 61)
                  sub_1BE61F930();
                v265 = v259 - (_QWORD)v262;
                if (v265 >> 2 > v264)
                  v264 = v265 >> 2;
                if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8)
                  v266 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v266 = v264;
                if (v266)
                {
                  if (v266 >> 61)
                    sub_1BE61F100();
                  v267 = operator new(8 * v266);
                  v268 = &v267[8 * v263];
                  *v268 = v258;
                  v261 = (uint64_t)(v268 + 1);
                  v269 = v260 - v262;
                  if (v260 != v262)
                  {
LABEL_353:
                    v270 = v269 - 8;
                    v141 = a7;
                    if (v270 < 0x58)
                      goto LABEL_417;
                    if ((unint64_t)(v262 - v267) < 0x20)
                      goto LABEL_417;
                    v271 = (v270 >> 3) + 1;
                    v272 = 8 * (v271 & 0x3FFFFFFFFFFFFFFCLL);
                    v273 = &v260[-v272];
                    v268 = (_QWORD *)((char *)v268 - v272);
                    v274 = &v267[8 * v263 - 16];
                    v275 = v260 - 16;
                    v276 = v271 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v277 = *(_OWORD *)v275;
                      *(v274 - 1) = *((_OWORD *)v275 - 1);
                      *v274 = v277;
                      v274 -= 2;
                      v275 -= 32;
                      v276 -= 4;
                    }
                    while (v276);
                    v260 = v273;
                    if (v271 != (v271 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_417:
                      do
                      {
                        v278 = *((_QWORD *)v260 - 1);
                        v260 -= 8;
                        *--v268 = v278;
                      }
                      while (v260 != v262);
                    }
                    *(_QWORD *)(v149 - 104) = v268;
                    *(_QWORD *)(v149 - 96) = v261;
                    *(_QWORD *)(v149 - 88) = &v267[8 * v266];
                    if (!v262)
                      goto LABEL_361;
LABEL_360:
                    operator delete(v262);
                    goto LABEL_361;
                  }
                }
                else
                {
                  v267 = 0;
                  v268 = (_QWORD *)(8 * v263);
                  *(_QWORD *)(8 * v263) = v258;
                  v261 = 8 * v263 + 8;
                  v269 = v260 - v262;
                  if (v260 != v262)
                    goto LABEL_353;
                }
                v141 = a7;
                *(_QWORD *)(v149 - 104) = v268;
                *(_QWORD *)(v149 - 96) = v261;
                *(_QWORD *)(v149 - 88) = &v267[8 * v266];
                if (!v262)
                  goto LABEL_361;
                goto LABEL_360;
              }
            }
            v248 = v247 - 4;
            if (v248 < 0x2C)
              goto LABEL_418;
            if ((unint64_t)(v240 - v245) < 0x20)
              goto LABEL_418;
            v249 = (v248 >> 2) + 1;
            v250 = 4 * (v249 & 0x7FFFFFFFFFFFFFF8);
            v251 = &v238[-v250];
            v246 = (float *)((char *)v246 - v250);
            v252 = &v245[4 * v241 - 16];
            v253 = v238 - 16;
            v254 = v249 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v255 = *(_OWORD *)v253;
              *(v252 - 1) = *((_OWORD *)v253 - 1);
              *v252 = v255;
              v252 -= 2;
              v253 -= 32;
              v254 -= 8;
            }
            while (v254);
            v238 = v251;
            if (v249 != (v249 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_418:
              do
              {
                v256 = *((_DWORD *)v238 - 1);
                v238 -= 4;
                *((_DWORD *)v246-- - 1) = v256;
              }
              while (v238 != v240);
            }
            goto LABEL_340;
          }
        }
        v228 = v227 - 4;
        if (v228 < 0x2C)
          goto LABEL_419;
        if ((unint64_t)(v220 - v225) < 0x20)
          goto LABEL_419;
        v229 = (v228 >> 2) + 1;
        v230 = 4 * (v229 & 0x7FFFFFFFFFFFFFF8);
        v231 = &v218[-v230];
        v226 = (_DWORD *)((char *)v226 - v230);
        v232 = &v225[4 * v221 - 16];
        v233 = v218 - 16;
        v234 = v229 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v235 = *(_OWORD *)v233;
          *(v232 - 1) = *((_OWORD *)v233 - 1);
          *v232 = v235;
          v232 -= 2;
          v233 -= 32;
          v234 -= 8;
        }
        while (v234);
        v218 = v231;
        if (v229 != (v229 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_419:
          do
          {
            v236 = *((_DWORD *)v218 - 1);
            v218 -= 4;
            *--v226 = v236;
          }
          while (v218 != v220);
        }
        goto LABEL_319;
      }
LABEL_291:
      if (*(_QWORD *)(v149 - 144) == *(_QWORD *)(v149 - 152))
      {
        a7[1] = sub_1BE77D498(a7[1] - 224);
        goto LABEL_119;
      }
LABEL_364:
      *(float *)(v149 - 56) = logf(v148) + *((float *)a2 + 42);
      v280 = v199 == a6 || *((_BYTE *)a2 + 172) != 0;
      *(_BYTE *)(v149 - 52) = v280;
      BYTE7(v328) = 1;
      LOWORD(__dst) = 121;
      v281 = objc_retainAutorelease(sub_1BE77ECA0((uint64_t **)(v149 - 224), (const void **)&__dst, (uint64_t)&__dst)[7]);
      v287 = (void *)objc_msgSend_dataPointer(v281, v282, v283, v284, v285, v286);
      *((_BYTE *)&v330.__r_.__value_.__s + 23) = 1;
      LOWORD(v330.__r_.__value_.__l.__data_) = 121;
      v288 = sub_1BE77ECA0((uint64_t **)(v149 - 224), (const void **)&v330.__r_.__value_.__l.__data_, (uint64_t)&v330);
      v294 = objc_msgSend_count(v288[7], v289, v290, v291, v292, v293);
      bzero(v287, 4 * v294);
      if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v330.__r_.__value_.__l.__data_);
        if ((SBYTE7(v328) & 0x80000000) == 0)
          goto LABEL_372;
      }
      else if ((SBYTE7(v328) & 0x80000000) == 0)
      {
        goto LABEL_372;
      }
      operator delete((void *)__dst);
LABEL_372:
      BYTE7(v328) = 1;
      LOWORD(__dst) = 121;
      v295 = objc_retainAutorelease(sub_1BE77ECA0((uint64_t **)(v149 - 224), (const void **)&__dst, (uint64_t)&__dst)[7]);
      *(_DWORD *)(objc_msgSend_dataPointer(v295, v296, v297, v298, v299, v300) + 4 * v320) = 1065353216;
      if (SBYTE7(v328) < 0)
        operator delete((void *)__dst);
      CoreHandwriting::CHEncoderDecoderBeamState::updatePastAttention((uint64_t **)(v149 - 224), a2, v301, v302, v303, v304);
      if ((int **)(v149 - 200) != v311)
        sub_1BE781768(v149 - 200, *v311, (int *)a2 + 8);
      LOBYTE(__dst) = 0;
      v305 = this[67];
      if (*(_QWORD *)&this[68] != *(_QWORD *)&v305)
      {
        v306 = 0;
        v307 = 1;
        do
        {
          *(float *)(v149 - 56) = (***(float (****)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)&v305 + 8 * v306))(*(_QWORD *)(*(_QWORD *)&v305 + 8 * v306), v149 - 224, &__dst)+ *(float *)(v149 - 56);
          v307 &= (_BYTE)__dst != 0;
          ++v306;
          v305 = this[67];
        }
        while (v306 < (uint64_t)(*(_QWORD *)&this[68] - *(_QWORD *)&v305) >> 3);
        if ((v307 & 1) == 0)
          v315 = (int)fmin((double)(v315 + 1), (double)(this[86].i32[0] + a4));
      }
      sub_1BE76E968((uint64_t *)&__dst, *(_BYTE **)(v149 - 48), *(_BYTE **)(v149 - 40));
      v308 = *v317;
      if (*v317)
      {
        *(_QWORD *)(v149 - 40) = v308;
        operator delete(v308);
      }
      *(_QWORD *)(v149 - 48) = __dst;
      v309 = *((_QWORD *)&__dst + 1);
      *(_QWORD *)(v149 - 40) = *((_QWORD *)&__dst + 1);
      *(_QWORD *)(v149 - 32) = v328;
      if (*(_DWORD *)(v309 - 4) != 1)
      {
        v142 = v319;
        if (*(char *)(v149 - 1) < 0)
        {
          **(_BYTE **)(v149 - 24) = 0;
          *(_QWORD *)(v149 - 16) = 0;
        }
        else
        {
          *(_BYTE *)(v149 - 24) = 0;
          *(_BYTE *)(v149 - 1) = 0;
        }
        goto LABEL_120;
      }
LABEL_119:
      v142 = v319;
LABEL_120:
      v140 = v142 + 1;
      v82 = v325;
    }
    while (v140 < (v326 - (char *)v325) >> 3);
    v101 = v324;
  }
  if (v101)
    operator delete(v101);
  if (v82)
    operator delete(v82);

}

void sub_1BE775A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;

  if (*(char *)(v32 - 153) < 0)
    operator delete(*(void **)(v32 - 176));

  _Unwind_Resume(a1);
}

void **sub_1BE775C68(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_1BE77D498(v3 - 224);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::CHMathBeamDecoder::prepareActiveAlphabetMask(CHEncoderDecoderNetwork *a1@<X1>, _QWORD *a2@<X8>)
{
  CHEncoderDecoderNetwork *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v54 = a2;
  objc_msgSend_activeAlphabet(v4, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend_codeMap(v4, v11, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_count(v16, v17, v18, v19, v20, v21);
    v23 = v22;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    if (v22)
    {
      if (v22 >> 62)
        sub_1BE61F930();
      v24 = (char *)operator new(4 * v22);
      v25 = &v24[4 * v23];
      bzero(v24, 4 * v23);
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    *v54 = v24;
    v54[1] = v25;
    v54[2] = v25;

    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    objc_msgSend_activeAlphabet(v4, v26, v27, v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v55, (uint64_t)v62, 16, v33);
    if (v39)
    {
      v40 = *(_QWORD *)v56;
      do
      {
        for (i = 0; i != v39; ++i)
        {
          if (*(_QWORD *)v56 != v40)
            objc_enumerationMutation(v31);
          v42 = *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i);
          objc_msgSend_codeMap(v4, v34, v35, v36, v37, v38);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = objc_msgSend_containsObject_(v43, v44, v42, v45, v46, v47);

          if (v48)
          {
            objc_msgSend_codeMap(v4, v34, v35, v36, v37, v38);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)&v24[4 * objc_msgSend_indexOfObject_(v49, v50, v42, v51, v52, v53)] = 1065353216;

          }
        }
        v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v55, (uint64_t)v62, 16, v38);
      }
      while (v39);
    }

  }
}

void sub_1BE775EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (v22)
  {
    *(_QWORD *)(a10 + 8) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

void sub_1BE775F34(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  id v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  id v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  const char *v145;
  size_t v146;
  size_t v147;
  __int128 *p_buf;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  size_t v156;
  __int128 *v157;
  _QWORD *v158;
  const void *v159;
  const void *v160;
  int v161;
  size_t v162;
  const void *v163;
  size_t v164;
  int v165;
  _BOOL4 v166;
  int v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL4 v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  _QWORD *v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  _BYTE *v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  size_t v195;
  size_t v196;
  __int128 *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  size_t v203;
  __int128 *v204;
  _QWORD *v205;
  const void *v206;
  const void *v207;
  int v208;
  size_t v209;
  const void *v210;
  size_t v211;
  int v212;
  _BOOL4 v213;
  int v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  _BOOL4 v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  _BYTE *v223;
  uint64_t v224;
  _BYTE *v225;
  uint64_t v226;
  _BYTE *v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  const char *v241;
  size_t v242;
  size_t v243;
  __int128 *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  size_t v250;
  __int128 *v251;
  _QWORD *v252;
  const void *v253;
  const void *v254;
  int v255;
  size_t v256;
  const void *v257;
  size_t v258;
  int v259;
  _BOOL4 v260;
  int v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  _BOOL4 v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE *v269;
  _BYTE *v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  _BYTE *v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  const char *v288;
  size_t v289;
  size_t v290;
  __int128 *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  size_t v297;
  __int128 *v298;
  _QWORD *v299;
  const void *v300;
  const void *v301;
  int v302;
  size_t v303;
  const void *v304;
  size_t v305;
  int v306;
  _BOOL4 v307;
  int v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  _BOOL4 v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  _BYTE *v316;
  _BYTE *v317;
  uint64_t v318;
  _BYTE *v319;
  uint64_t v320;
  _BYTE *v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _BYTE *v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  BOOL v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  unint64_t v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  const char *v361;
  uint64_t v362;
  uint64_t v363;
  id v364;
  const char *v365;
  uint64_t v366;
  void *v367;
  const char *v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  void *v373;
  const char *v374;
  uint64_t v375;
  void *v376;
  const char *v377;
  uint64_t v378;
  void *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  const char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  const char *v389;
  uint64_t v390;
  id v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  NSObject *v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  id v403;
  const char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  const char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  const char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  const char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  void *v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  const char *v454;
  uint64_t v455;
  uint64_t v456;
  void *v457;
  const char *v458;
  uint64_t v459;
  const char *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  const char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  id v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  void *v483;
  const char *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  void *v488;
  const char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  int *v496;
  char *v497;
  float *v498;
  uint64_t v499;
  int8x8_t v500;
  int8x8_t v501;
  int8x8_t v502;
  unint64_t v503;
  unint64_t v504;
  float *v505;
  float v506;
  float v507;
  int v508;
  uint64_t v509;
  float v510;
  int8x8_t v511;
  uint8x8_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t **v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  uint64_t **v521;
  uint64_t *v522;
  uint64_t v523;
  int *v524;
  int *v525;
  int8x8_t *v526;
  int8x8_t v527;
  uint8x8_t v528;
  unint64_t v529;
  int64_t v530;
  unint64_t v531;
  uint64_t **v532;
  uint64_t *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  char *v539;
  char *v540;
  int *v541;
  char *v542;
  uint64_t v543;
  int v544;
  float v545;
  unint64_t v546;
  float32x4_t *v547;
  unint64_t v548;
  float32x4_t v549;
  unint64_t v550;
  float *v551;
  int *v552;
  char *v553;
  unint64_t v554;
  void *v555;
  std::string::size_type v556;
  CoreHandwriting::CHEncoderDecoderBeamState *v557;
  std::string::size_type size;
  std::string::size_type v559;
  int v560;
  int *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  std::string::size_type v566;
  std::string::size_type v567;
  int64_t v568;
  std::string::size_type v569;
  unint64_t v570;
  unint64_t v571;
  char *v572;
  int v573;
  int v574;
  uint64_t v575;
  uint64_t *v576;
  uint64_t **v577;
  uint64_t *v578;
  uint64_t **v579;
  uint64_t **v580;
  uint64_t v581;
  _DWORD *v582;
  uint64_t *v583;
  uint64_t *v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  _BYTE *v589;
  int v590;
  uint64_t v591;
  int v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t *v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  char *v601;
  uint64_t v602;
  uint64_t v603;
  std::string::size_type v604;
  std::string::size_type v605;
  std::string::size_type v606;
  void *v607;
  std::string::size_type v608;
  void *v609;
  void *v610;
  void *v611;
  void *v612;
  void *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  void *v617;
  void *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  std::string::size_type v622;
  BOOL v623;
  uint64_t v624;
  unint64_t v625;
  _QWORD *j;
  uint64_t v627;
  std::string::size_type v628;
  std::string::size_type v629;
  std::string::size_type v630;
  std::string::size_type v631;
  int v632;
  const std::string *v633;
  uint64_t v634;
  std::string::size_type v635;
  int v636;
  char *v637;
  uint64_t v638;
  char *v639;
  uint64_t v640;
  std::string::size_type v641;
  std::string::size_type v642;
  std::string::size_type v643;
  std::string::size_type v644;
  uint64_t v645;
  void *v646;
  uint64_t v647;
  uint64_t v648;
  void *v649;
  void *v650;
  void *v651;
  void *v652;
  void *v653;
  void *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  void *v658;
  void *v659;
  void *v660;
  void *v661;
  void *v662;
  void *v663;
  void *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  void *v668;
  void *v669;
  std::string::size_type v670;
  unint64_t v671;
  uint64_t v672;
  std::string::size_type v673;
  _QWORD *v674;
  _QWORD *v675;
  uint64_t v676;
  _QWORD *v677;
  std::string *v678;
  uint64_t i;
  void *v680;
  uint64_t v681;
  float v682;
  uint64_t v683;
  float v684;
  float v685;
  void *v686;
  void *v687;
  uint64_t v688;
  uint64_t v689;
  void *v690;
  void *v691;
  std::string::size_type v692;
  uint64_t v693;
  void *v694;
  std::string::size_type v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  float v702;
  uint64_t v703;
  float v704;
  char *v705;
  char *v706;
  _BYTE *v707;
  size_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  char *v713;
  _BYTE *v714;
  unint64_t v715;
  char *v716;
  void *v717;
  char *v718;
  char *v719;
  char *v720;
  _BYTE *v721;
  size_t v722;
  unint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  char *v727;
  _BYTE *v728;
  unint64_t v729;
  char *v730;
  void *v731;
  char *v732;
  char *v733;
  char *v734;
  _BYTE *v735;
  size_t v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  char *v741;
  _BYTE *v742;
  unint64_t v743;
  char *v744;
  void *v745;
  int v746;
  char *v747;
  char *v748;
  _BYTE *v749;
  size_t v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  char *v755;
  void **v756;
  _BYTE *v757;
  unint64_t v758;
  char *v759;
  void *v760;
  __int16 v761;
  int v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  float v766;
  uint64_t v767;
  float v768;
  int v769;
  float v770;
  uint64_t v771;
  float v772;
  uint64_t v773;
  unint64_t v774;
  int v775;
  uint64_t v776;
  void *v777;
  void *v778;
  uint64_t v779;
  uint64_t v780;
  void *v781;
  void *v782;
  std::string::size_type v783;
  char *v784;
  uint64_t v785;
  std::string::size_type v786;
  void *v787;
  void *v788;
  void *v789;
  void *v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  void *v795;
  void *v796;
  const char *v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  std::string::size_type v803;
  unint64_t v804;
  uint64_t v805;
  char *v806;
  char *v807;
  void *v808;
  void *v809;
  void *v810;
  void *v811;
  void *v812;
  void *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  void *v817;
  void *v818;
  char *v819;
  unint64_t v820;
  int64_t v821;
  uint64_t v822;
  unint64_t v823;
  char *v824;
  uint64_t v825;
  char *v826;
  unint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  char *v831;
  unint64_t v832;
  char *v833;
  const char *v834;
  size_t v835;
  size_t v836;
  __int128 *p_dst;
  _QWORD *v838;
  void **v839;
  _QWORD *v840;
  _QWORD *v841;
  uint64_t v842;
  uint64_t v843;
  size_t v844;
  __int128 *v845;
  _QWORD *v846;
  const void *v847;
  const void *v848;
  int v849;
  size_t v850;
  const void *v851;
  size_t v852;
  int v853;
  _BOOL4 v854;
  int v855;
  const char *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  _BOOL4 v861;
  void *v862;
  uint64_t v863;
  uint64_t v864;
  _BYTE *v865;
  _BYTE *v866;
  uint64_t v867;
  _BYTE *v868;
  uint64_t v869;
  _BYTE *v870;
  int v871;
  uint64_t v872;
  int v873;
  uint64_t *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  _BYTE *v878;
  const char *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  void *v883;
  const char *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  char *v890;
  const char *v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  const char *v896;
  size_t v897;
  size_t v898;
  __int128 *v899;
  uint64_t v900;
  uint64_t v901;
  char *v902;
  _QWORD *v903;
  void **v904;
  _QWORD *v905;
  _QWORD *v906;
  size_t v907;
  __int128 *v908;
  _QWORD *v909;
  const void *v910;
  const void *v911;
  int v912;
  size_t v913;
  const void *v914;
  size_t v915;
  int v916;
  _BOOL4 v917;
  int v918;
  const char *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  _BOOL4 v924;
  void *v925;
  uint64_t v926;
  uint64_t v927;
  _BYTE *v928;
  _BYTE *v929;
  uint64_t v930;
  _BYTE *v931;
  uint64_t v932;
  _BYTE *v933;
  int v934;
  uint64_t v935;
  int v936;
  uint64_t *v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  _BYTE *v941;
  void *v942;
  const char *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  void *v947;
  const char *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  int v953;
  _QWORD *v954;
  const char *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  char *v960;
  int v961;
  int8x8_t v962;
  const char *v963;
  size_t v964;
  size_t v965;
  __int128 *v966;
  _QWORD *v967;
  void **v968;
  _QWORD *v969;
  _QWORD *v970;
  uint64_t v971;
  uint64_t v972;
  size_t v973;
  __int128 *v974;
  _QWORD *v975;
  const void *v976;
  const void *v977;
  int v978;
  size_t v979;
  const void *v980;
  size_t v981;
  int v982;
  _BOOL4 v983;
  int v984;
  _BOOL4 v985;
  void *v986;
  uint64_t v987;
  uint64_t v988;
  _BYTE *v989;
  _BYTE *v990;
  uint64_t v991;
  _BYTE *v992;
  uint64_t v993;
  _BYTE *v994;
  int v995;
  uint64_t v996;
  int v997;
  uint64_t *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  _BYTE *v1002;
  id v1003;
  const char *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  size_t v1013;
  const void *v1014;
  uint64_t *v1015;
  int v1016;
  size_t v1017;
  const void *v1018;
  size_t v1019;
  int v1020;
  _BOOL4 v1021;
  BOOL v1022;
  uint64_t *v1023;
  const void *v1024;
  _QWORD *v1025;
  const void *v1026;
  int v1027;
  size_t v1028;
  const void *v1029;
  size_t v1030;
  int v1031;
  BOOL v1032;
  unsigned int v1033;
  float v1034;
  float v1035;
  _OWORD *v1036;
  uint64_t v1037;
  uint64_t **v1038;
  int v1039;
  uint64_t **v1040;
  char *v1041;
  int v1042;
  _DWORD *v1043;
  uint64_t *v1044;
  uint64_t *v1045;
  uint64_t v1046;
  uint64_t *v1047;
  uint64_t v1048;
  _BYTE *v1049;
  int v1050;
  uint64_t v1051;
  int v1052;
  uint64_t *v1053;
  uint64_t v1054;
  uint64_t v1055;
  _QWORD *v1056;
  uint64_t v1057;
  uint64_t *v1058;
  _OWORD *v1059;
  _OWORD *v1060;
  char *v1061;
  char *v1062;
  char **v1063;
  char *v1064;
  int v1065;
  char **v1066;
  char **v1067;
  char *v1068;
  int v1069;
  char *v1070;
  char *v1071;
  char *v1072;
  char *v1073;
  uint64_t v1074;
  char *v1075;
  uint64_t v1076;
  _BYTE *v1077;
  int v1078;
  uint64_t v1079;
  int v1080;
  uint64_t *v1081;
  uint64_t v1082;
  uint64_t v1083;
  char *v1084;
  uint64_t **v1085;
  char *v1086;
  char *v1087;
  uint64_t v1088;
  char *v1089;
  int v1090;
  char *v1091;
  _DWORD *v1092;
  uint64_t v1093;
  uint64_t *v1094;
  uint64_t *v1095;
  uint64_t v1096;
  uint64_t *v1097;
  uint64_t v1098;
  _BYTE *v1099;
  int v1100;
  uint64_t v1101;
  int v1102;
  uint64_t *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t *v1106;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t *v1110;
  uint64_t *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  unint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  unint64_t v1122;
  char *v1123;
  uint64_t v1124;
  _QWORD *v1125;
  unint64_t v1126;
  _QWORD *v1127;
  _QWORD *v1128;
  uint64_t v1129;
  uint64_t v1130;
  unint64_t v1131;
  unint64_t v1132;
  uint64_t *v1133;
  char *v1134;
  uint64_t v1135;
  uint64_t v1136;
  unint64_t v1137;
  __int128 *v1138;
  char *v1139;
  uint64_t v1140;
  __int128 v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  unint64_t v1145;
  unint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  char *v1149;
  __int128 *v1150;
  uint64_t v1151;
  __int128 v1152;
  uint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  char *v1158;
  __int128 *v1159;
  uint64_t v1160;
  __int128 v1161;
  uint64_t v1162;
  void *v1163;
  uint64_t v1164;
  uint64_t v1165;
  _OWORD *v1166;
  __int128 *v1167;
  uint64_t v1168;
  __int128 v1169;
  uint64_t v1170;
  char *v1171;
  uint64_t v1172;
  unint64_t v1173;
  char *v1174;
  unint64_t v1175;
  unint64_t v1176;
  unint64_t v1177;
  uint64_t *v1178;
  uint64_t v1179;
  uint64_t v1180;
  _OWORD *v1181;
  __int128 *v1182;
  uint64_t v1183;
  __int128 v1184;
  uint64_t v1185;
  unint64_t v1186;
  char *v1187;
  char *v1188;
  char *v1189;
  int v1190;
  unint64_t v1191;
  _QWORD *v1192;
  _OWORD *v1193;
  unint64_t v1194;
  unint64_t v1195;
  unint64_t v1196;
  BOOL v1197;
  char v1198;
  BOOL v1199;
  uint64_t v1200;
  uint64_t v1201;
  __int128 *v1202;
  char *v1203;
  uint64_t v1204;
  __int128 v1205;
  __int128 v1206;
  unint64_t v1207;
  BOOL v1208;
  BOOL v1209;
  uint64_t v1211;
  uint64_t v1212;
  unint64_t v1213;
  __int128 *v1214;
  _OWORD *v1215;
  uint64_t v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  uint64_t v1221;
  char v1222;
  int v1223;
  std::string::size_type v1224;
  std::string::size_type v1225;
  void *v1226;
  void *v1227;
  void *v1228;
  void *v1229;
  void *v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  void *v1234;
  void *v1235;
  char *v1236;
  char *v1237;
  void *v1238;
  uint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  void **v1242;
  uint64_t v1243;
  uint64_t v1244;
  void *v1245;
  uint64_t v1246;
  void *v1247;
  void *v1248;
  uint64_t v1249;
  uint64_t v1250;
  char *v1251;
  char *v1252;
  uint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  char *v1256;
  char *v1257;
  uint64_t v1258;
  unint64_t v1259;
  std::string::size_type v1260;
  char *v1261;
  int8x8_t v1262;
  unint64_t v1263;
  uint8x8_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  uint64_t **v1267;
  uint64_t *v1268;
  uint64_t v1269;
  uint64_t v1270;
  unint64_t v1271;
  unint64_t v1272;
  uint64_t **v1273;
  uint64_t *v1274;
  uint64_t v1275;
  float *v1276;
  int *v1277;
  unint64_t v1278;
  uint64_t v1279;
  int v1280;
  float v1281;
  float v1282;
  std::string *p_p;
  std::string::size_type v1284;
  unint64_t v1285;
  unint64_t v1286;
  unint64_t v1287;
  uint8x8_t v1288;
  unint64_t v1289;
  uint64_t **v1290;
  uint64_t *v1291;
  int v1292;
  std::string::size_type v1293;
  uint64_t v1294;
  unint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  std::string::size_type v1299;
  int v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  char *v1306;
  void *v1307;
  uint64_t v1308;
  unint64_t v1309;
  unint64_t v1310;
  char *v1311;
  uint64_t v1312;
  char *k;
  char *v1314;
  void *v1315;
  void *v1316;
  void *v1317;
  std::string *v1318;
  std::string::size_type v1319;
  unint64_t v1320;
  std::string::size_type v1321;
  unint64_t v1322;
  uint8x8_t v1323;
  uint64_t **v1324;
  uint64_t *v1325;
  std::string::size_type v1326;
  std::string *v1327;
  uint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  const void **v1332;
  std::string *v1333;
  int v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  const void **v1338;
  std::string *v1339;
  int v1340;
  _QWORD *v1341;
  std::string *v1342;
  float v1343;
  _QWORD *v1344;
  _QWORD *v1345;
  _BOOL8 v1346;
  unint64_t v1347;
  unint64_t v1348;
  size_t prime;
  size_t v1350;
  unint64_t v1351;
  uint8x8_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  unint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  void **v1358;
  void *v1359;
  void **v1360;
  void *v1361;
  void *v1362;
  void *v1363;
  void **v1364;
  void *v1366;
  void *v1367;
  void *v1369;
  void *v1370;
  void *context;
  id v1372;
  void *v1373;
  uint64_t v1374;
  unint64_t v1375;
  void *v1376;
  NSDictionary *v1377;
  CHEncoderDecoderNetwork *v1378;
  void *v1379;
  void *v1380;
  int *v1381;
  uint64_t *v1382;
  unint64_t v1383;
  unint64_t v1384;
  void *v1385;
  void *v1386;
  void *v1387;
  void *v1388;
  _QWORD *v1390;
  float *v1391;
  char *v1392;
  uint64_t v1393;
  float *v1395;
  uint64_t __sz;
  std::string::size_type v1397;
  std::string::size_type v1398;
  uint64_t *v1399;
  uint64_t v1400;
  void *v1402;
  uint64_t v1403;
  int64_t v1404;
  uint64_t **v1405;
  void *v1406;
  int v1407[2];
  int v1408;
  void *v1409;
  void *v1410;
  std::string::size_type v1411;
  uint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  int v1415;
  std::string::size_type v1416;
  void *v1417;
  std::string::size_type v1418;
  std::string::size_type v1419;
  void *v1420;
  uint64_t v1421;
  id v1422;
  void *v1423[3];
  void *v1424;
  id v1425;
  __int128 __dst;
  __int128 v1427;
  int v1428[4];
  void *v1429;
  int v1430[2];
  void *v1431;
  int v1432[2];
  void *v1433;
  int v1434[2];
  void *v1435;
  int v1436[2];
  _QWORD *v1437;
  _QWORD *v1438[2];
  int v1439;
  __int16 v1440;
  void *v1441;
  int v1442[2];
  std::string v1443;
  std::string __p;
  __int128 v1445;
  __int128 v1446;
  float v1447;
  _QWORD v1448[4];
  _QWORD v1449[4];
  _QWORD v1450[6];
  _QWORD v1451[6];
  const __CFString *v1452;
  void *v1453;
  _QWORD v1454[4];
  void *v1455;
  uint64_t v1456;
  void *v1457;
  void *v1458;
  __int128 buf;
  __int128 v1460;
  std::string::size_type *v1461;
  void *v1462;
  int v1463[2];
  void *v1464;
  int v1465[2];
  void *v1466;
  int v1467[2];
  void *__src;
  int v1469[2];
  _QWORD *v1470;
  _QWORD *v1471;
  float v1472;
  __int16 v1473;
  void *v1474;
  int v1475[2];
  std::string v1476;
  uint64_t v1477;

  v1477 = *MEMORY[0x1E0C80C00];
  v1378 = a2;
  v8 = objc_alloc(MEMORY[0x1E0C9E970]);
  v9 = *(_QWORD *)(a3 + 48);
  v1455 = &unk_1E78290F0;
  v10 = (void *)MEMORY[0x1E0CB37E8];
  v16 = objc_msgSend_numInputChannels(v1378, v11, v12, v13, v14, v15);
  objc_msgSend_numberWithInteger_(v10, v17, v16, v18, v19, v20);
  v1456 = objc_claimAutoreleasedReturnValue();
  v1420 = (void *)v1456;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v21, **(_QWORD **)a3, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v1457 = v25;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v26, *(_QWORD *)(*(_QWORD *)a3 + 8), v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v1458 = v30;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v31, (uint64_t)&v1455, 4, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v1454[0] = &unk_1E78290F0;
  v1454[1] = &unk_1E78290F0;
  v35 = (void *)MEMORY[0x1E0CB37E8];
  v41 = objc_msgSend_numInputChannels(v1378, v36, v37, v38, v39, v40);
  objc_msgSend_numberWithInteger_(v35, v42, v41, v43, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v1454[2] = v46;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v47, **(_QWORD **)a3, v48, v49, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v1454[3] = v51;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v52, (uint64_t)v1454, 4, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v1366 = (void *)objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v8, v56, v9, (uint64_t)v34, 65568, (uint64_t)v55, 0, 0);

  v57 = objc_alloc(MEMORY[0x1E0C9E8F8]);
  v1452 = CFSTR("image");
  v1453 = v1366;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v58, (uint64_t)&v1453, (uint64_t)&v1452, 1, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v1367 = (void *)objc_msgSend_initWithDictionary_error_(v57, v61, (uint64_t)v60, 0, v62, v63);

  v64 = objc_alloc(MEMORY[0x1E0C9E9B0]);
  v1370 = (void *)objc_msgSend_initWithUsesCPUOnly_(v64, v65, 1, v66, v67, v68);
  objc_msgSend_encoderModel(v1378, v69, v70, v71, v72, v73);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v1425 = 0;
  objc_msgSend_predictionFromFeatures_options_error_(v74, v75, (uint64_t)v1367, (uint64_t)v1370, (uint64_t)&v1425, v76);
  v1369 = (void *)objc_claimAutoreleasedReturnValue();
  v1372 = v1425;

  if (!v1369)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v81 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v81, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_localizedDescription(v1372, v82, v83, v84, v85, v86);
      v87 = (id)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v87;
      _os_log_impl(&dword_1BE607000, v81, OS_LOG_TYPE_FAULT, "An error occurred when running math encoder inference: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  v88 = *(_QWORD *)(a6 + 24);
  if (v88 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 48))(v88))
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    goto LABEL_1640;
  }
  objc_msgSend_featureValueForName_(v1369, v77, (uint64_t)CFSTR("encoded_image"), v78, v79, v80);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v89, v90, v91, v92, v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_squeezeDimensions_error_(v95, v96, (uint64_t)&unk_1E7827E60, 0, v97, v98);
  v1380 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_featureValueForName_(v1369, v99, (uint64_t)CFSTR("encoded_image_projected"), v100, v101, v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v103, v104, v105, v106, v107, v108);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_squeezeDimensions_error_(v109, v110, (uint64_t)&unk_1E7827E78, 0, v111, v112);
  v1379 = (void *)objc_claimAutoreleasedReturnValue();

  CoreHandwriting::CHMathBeamDecoder::prepareActiveAlphabetMask(v1378, &v1424);
  memset(v1423, 0, sizeof(v1423));
  CoreHandwriting::CHMathBeamDecoder::initialState(v1369, (uint64_t)&buf);
  v1364 = &v1423[2];
  v1428[0] = &v1423[2];
  *(_QWORD *)&__dst = operator new(0xE0uLL);
  *((_QWORD *)&__dst + 1) = __dst;
  *(_QWORD *)&v1427 = __dst;
  *((_QWORD *)&v1427 + 1) = __dst + 224;
  sub_1BE77D5F4((_QWORD *)__dst, (uint64_t)&buf);
  v113 = 0;
  v114 = *((_QWORD *)&__dst + 1);
  *(_QWORD *)&v1427 = v1427 + 224;
  while ((char *)v1423[1] + v113 != v1423[0])
  {
    v113 -= 224;
    sub_1BE77D5F4((_QWORD *)(v113 + v114), (uint64_t)v1423[1] + v113);
  }
  v1423[0] = (void *)(v114 + v113);
  *(_OWORD *)&v1423[1] = v1427;
  sub_1BE77D498((uint64_t)&buf);
  v1421 = 0;
  v120 = (unint64_t)(a5 - 2) >> 1;
  __sz = 224 * a5;
  v1395 = (float *)(a1 + 24);
  v1382 = (uint64_t *)(a1 + 40);
  v1374 = 224 * v120;
  v1375 = v120 + 1;
  do
  {
    if (objc_msgSend_maxDecodingSteps(v1378, v115, v116, v117, v118, v119, v1364) <= v1421)
      goto LABEL_1369;
    memset(&__p, 0, sizeof(__p));
    objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v122, 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5), v123, v124, v125);
    v1385 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v126, 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5), v127, v128, v129);
    v1386 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v130, 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5), v131, v132, v133);
    v1387 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v134, 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5), v135, v136, v137);
    v1388 = (void *)objc_claimAutoreleasedReturnValue();
    v143 = (char *)v1423[0];
    if (v1423[1] != v1423[0])
    {
      v144 = 0;
      while (1)
      {
        v145 = (const char *)objc_msgSend_UTF8String(CFSTR("decoder_state_h"), v138, v139, v140, v141, v142);
        v146 = strlen(v145);
        if (v146 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        v147 = v146;
        if (v146 >= 0x17)
          break;
        BYTE7(v1460) = v146;
        p_buf = &buf;
        if (v146)
          goto LABEL_28;
LABEL_29:
        *((_BYTE *)p_buf + v147) = 0;
        v151 = &v143[224 * v144];
        v153 = v151 + 8;
        v152 = (_QWORD *)*((_QWORD *)v151 + 1);
        v154 = v151 + 8;
        v155 = v151 + 8;
        if (v152)
        {
          if ((SBYTE7(v1460) & 0x80u) == 0)
            v156 = BYTE7(v1460);
          else
            v156 = *((_QWORD *)&buf + 1);
          if ((SBYTE7(v1460) & 0x80u) == 0)
            v157 = &buf;
          else
            v157 = (__int128 *)buf;
          while (1)
          {
            while (1)
            {
              v155 = v152;
              v160 = (const void *)v152[4];
              v158 = v152 + 4;
              v159 = v160;
              v161 = *((char *)v158 + 23);
              if (v161 >= 0)
                v162 = *((unsigned __int8 *)v158 + 23);
              else
                v162 = v158[1];
              if (v161 >= 0)
                v163 = v158;
              else
                v163 = v159;
              if (v162 >= v156)
                v164 = v156;
              else
                v164 = v162;
              v165 = memcmp(v157, v163, v164);
              v166 = v156 < v162;
              if (v165)
                v166 = v165 < 0;
              if (!v166)
                break;
              v152 = (_QWORD *)*v155;
              v154 = v155;
              if (!*v155)
                goto LABEL_54;
            }
            v167 = memcmp(v163, v157, v164);
            v171 = v162 < v156;
            if (v167)
              v171 = v167 < 0;
            if (!v171)
              break;
            v152 = (_QWORD *)v155[1];
            if (!v152)
            {
              v154 = v155 + 1;
              goto LABEL_54;
            }
          }
          v172 = v155;
        }
        else
        {
LABEL_54:
          v172 = operator new(0x40uLL);
          *((_OWORD *)v172 + 2) = buf;
          v173 = v1460;
          *(_QWORD *)&v1460 = 0;
          buf = 0uLL;
          *((_QWORD *)v172 + 6) = v173;
          *((_QWORD *)v172 + 7) = 0;
          *(_QWORD *)v172 = 0;
          *((_QWORD *)v172 + 1) = 0;
          *((_QWORD *)v172 + 2) = v155;
          *v154 = v172;
          v174 = **(_QWORD **)v151;
          v175 = v172;
          if (v174)
          {
            *(_QWORD *)v151 = v174;
            v175 = (_BYTE *)*v154;
          }
          v176 = (_QWORD *)*v153;
          v1022 = v175 == (_BYTE *)*v153;
          v175[24] = v1022;
          if (!v1022)
          {
            do
            {
              v177 = *((_QWORD *)v175 + 2);
              if (*(_BYTE *)(v177 + 24))
                break;
              v178 = *(_BYTE **)(v177 + 16);
              v179 = *(_QWORD *)v178;
              if (*(_QWORD *)v178 == v177)
              {
                v182 = *((_QWORD *)v178 + 1);
                if (!v182 || (v183 = *(unsigned __int8 *)(v182 + 24), v180 = (_BYTE *)(v182 + 24), v183))
                {
                  if (*(_BYTE **)v177 == v175)
                  {
                    *(_BYTE *)(v177 + 24) = 1;
                    v178[24] = 0;
                    v186 = *(_QWORD *)(v177 + 8);
                    *(_QWORD *)v178 = v186;
                    if (v186)
                      goto LABEL_71;
                  }
                  else
                  {
                    v184 = *(uint64_t **)(v177 + 8);
                    v185 = *v184;
                    *(_QWORD *)(v177 + 8) = *v184;
                    if (v185)
                    {
                      *(_QWORD *)(v185 + 16) = v177;
                      v178 = *(_BYTE **)(v177 + 16);
                    }
                    v184[2] = (uint64_t)v178;
                    *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8 * (**(_QWORD **)(v177 + 16) != v177)) = v184;
                    *v184 = v177;
                    *(_QWORD *)(v177 + 16) = v184;
                    v178 = (_BYTE *)v184[2];
                    v177 = *(_QWORD *)v178;
                    *((_BYTE *)v184 + 24) = 1;
                    v178[24] = 0;
                    v186 = *(_QWORD *)(v177 + 8);
                    *(_QWORD *)v178 = v186;
                    if (v186)
LABEL_71:
                      *(_QWORD *)(v186 + 16) = v178;
                  }
                  *(_QWORD *)(v177 + 16) = *((_QWORD *)v178 + 2);
                  *(_QWORD *)(*((_QWORD *)v178 + 2) + 8 * (**((_QWORD **)v178 + 2) != (_QWORD)v178)) = v177;
                  *(_QWORD *)(v177 + 8) = v178;
LABEL_82:
                  *((_QWORD *)v178 + 2) = v177;
                  break;
                }
              }
              else if (!v179 || (v181 = *(unsigned __int8 *)(v179 + 24), v180 = (_BYTE *)(v179 + 24), v181))
              {
                if (*(_BYTE **)v177 == v175)
                {
                  v187 = *((_QWORD *)v175 + 1);
                  *(_QWORD *)v177 = v187;
                  if (v187)
                  {
                    *(_QWORD *)(v187 + 16) = v177;
                    v178 = *(_BYTE **)(v177 + 16);
                  }
                  *((_QWORD *)v175 + 2) = v178;
                  *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8 * (**(_QWORD **)(v177 + 16) != v177)) = v175;
                  *((_QWORD *)v175 + 1) = v177;
                  *(_QWORD *)(v177 + 16) = v175;
                  v178 = (_BYTE *)*((_QWORD *)v175 + 2);
                }
                else
                {
                  v175 = (_BYTE *)*((_QWORD *)v175 + 2);
                }
                v175[24] = 1;
                v178[24] = 0;
                v177 = *((_QWORD *)v178 + 1);
                v188 = *(_BYTE **)v177;
                *((_QWORD *)v178 + 1) = *(_QWORD *)v177;
                if (v188)
                  *((_QWORD *)v188 + 2) = v178;
                *(_QWORD *)(v177 + 16) = *((_QWORD *)v178 + 2);
                *(_QWORD *)(*((_QWORD *)v178 + 2) + 8 * (**((_QWORD **)v178 + 2) != (_QWORD)v178)) = v177;
                *(_QWORD *)v177 = v178;
                goto LABEL_82;
              }
              *(_BYTE *)(v177 + 24) = 1;
              v175 = v178;
              v178[24] = v178 == (_BYTE *)v176;
              *v180 = 1;
            }
            while (v178 != (_BYTE *)v176);
          }
          ++*((_QWORD *)v151 + 2);
        }
        objc_msgSend_setObject_atIndexedSubscript_(v1385, v168, *((_QWORD *)v172 + 7), v144, v169, v170);
        if (SBYTE7(v1460) < 0)
          operator delete((void *)buf);
        v194 = (const char *)objc_msgSend_UTF8String(CFSTR("decoder_state_c"), v189, v190, v191, v192, v193);
        v195 = strlen(v194);
        if (v195 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        v196 = v195;
        if (v195 >= 0x17)
        {
          v201 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v195 | 7) != 0x17)
            v201 = v195 | 7;
          v202 = v201 + 1;
          v197 = (__int128 *)operator new(v201 + 1);
          *(_QWORD *)&v1460 = v202 | 0x8000000000000000;
          *(_QWORD *)&buf = v197;
          *((_QWORD *)&buf + 1) = v196;
        }
        else
        {
          BYTE7(v1460) = v195;
          v197 = &buf;
          if (!v195)
          {
            LOBYTE(buf) = 0;
            v198 = (_QWORD *)*v153;
            v199 = v151 + 8;
            v200 = v151 + 8;
            if (!*v153)
              goto LABEL_119;
            goto LABEL_95;
          }
        }
        memmove(v197, v194, v196);
        *((_BYTE *)v197 + v196) = 0;
        v198 = (_QWORD *)*v153;
        v199 = v151 + 8;
        v200 = v151 + 8;
        if (!*v153)
        {
LABEL_119:
          v219 = operator new(0x40uLL);
          *((_OWORD *)v219 + 2) = buf;
          v220 = v1460;
          *(_QWORD *)&v1460 = 0;
          buf = 0uLL;
          *((_QWORD *)v219 + 6) = v220;
          *((_QWORD *)v219 + 7) = 0;
          *(_QWORD *)v219 = 0;
          *((_QWORD *)v219 + 1) = 0;
          *((_QWORD *)v219 + 2) = v200;
          *v199 = v219;
          v221 = **(_QWORD **)v151;
          v222 = v219;
          if (v221)
          {
            *(_QWORD *)v151 = v221;
            v222 = (_BYTE *)*v199;
          }
          v223 = (_BYTE *)*v153;
          v1022 = v222 == (_BYTE *)*v153;
          v222[24] = v1022;
          if (!v1022)
          {
            do
            {
              v224 = *((_QWORD *)v222 + 2);
              if (*(_BYTE *)(v224 + 24))
                break;
              v225 = *(_BYTE **)(v224 + 16);
              v226 = *(_QWORD *)v225;
              if (*(_QWORD *)v225 == v224)
              {
                v229 = *((_QWORD *)v225 + 1);
                if (!v229 || (v230 = *(unsigned __int8 *)(v229 + 24), v227 = (_BYTE *)(v229 + 24), v230))
                {
                  if (*(_BYTE **)v224 == v222)
                  {
                    *(_BYTE *)(v224 + 24) = 1;
                    v225[24] = 0;
                    v233 = *(_QWORD *)(v224 + 8);
                    *(_QWORD *)v225 = v233;
                    if (v233)
                      goto LABEL_136;
                  }
                  else
                  {
                    v231 = *(uint64_t **)(v224 + 8);
                    v232 = *v231;
                    *(_QWORD *)(v224 + 8) = *v231;
                    if (v232)
                    {
                      *(_QWORD *)(v232 + 16) = v224;
                      v225 = *(_BYTE **)(v224 + 16);
                    }
                    v231[2] = (uint64_t)v225;
                    *(_QWORD *)(*(_QWORD *)(v224 + 16) + 8 * (**(_QWORD **)(v224 + 16) != v224)) = v231;
                    *v231 = v224;
                    *(_QWORD *)(v224 + 16) = v231;
                    v225 = (_BYTE *)v231[2];
                    v224 = *(_QWORD *)v225;
                    *((_BYTE *)v231 + 24) = 1;
                    v225[24] = 0;
                    v233 = *(_QWORD *)(v224 + 8);
                    *(_QWORD *)v225 = v233;
                    if (v233)
LABEL_136:
                      *(_QWORD *)(v233 + 16) = v225;
                  }
                  *(_QWORD *)(v224 + 16) = *((_QWORD *)v225 + 2);
                  *(_QWORD *)(*((_QWORD *)v225 + 2) + 8 * (**((_QWORD **)v225 + 2) != (_QWORD)v225)) = v224;
                  *(_QWORD *)(v224 + 8) = v225;
LABEL_147:
                  *((_QWORD *)v225 + 2) = v224;
                  break;
                }
              }
              else if (!v226 || (v228 = *(unsigned __int8 *)(v226 + 24), v227 = (_BYTE *)(v226 + 24), v228))
              {
                if (*(_BYTE **)v224 == v222)
                {
                  v234 = *((_QWORD *)v222 + 1);
                  *(_QWORD *)v224 = v234;
                  if (v234)
                  {
                    *(_QWORD *)(v234 + 16) = v224;
                    v225 = *(_BYTE **)(v224 + 16);
                  }
                  *((_QWORD *)v222 + 2) = v225;
                  *(_QWORD *)(*(_QWORD *)(v224 + 16) + 8 * (**(_QWORD **)(v224 + 16) != v224)) = v222;
                  *((_QWORD *)v222 + 1) = v224;
                  *(_QWORD *)(v224 + 16) = v222;
                  v225 = (_BYTE *)*((_QWORD *)v222 + 2);
                }
                else
                {
                  v222 = (_BYTE *)*((_QWORD *)v222 + 2);
                }
                v222[24] = 1;
                v225[24] = 0;
                v224 = *((_QWORD *)v225 + 1);
                v235 = *(_BYTE **)v224;
                *((_QWORD *)v225 + 1) = *(_QWORD *)v224;
                if (v235)
                  *((_QWORD *)v235 + 2) = v225;
                *(_QWORD *)(v224 + 16) = *((_QWORD *)v225 + 2);
                *(_QWORD *)(*((_QWORD *)v225 + 2) + 8 * (**((_QWORD **)v225 + 2) != (_QWORD)v225)) = v224;
                *(_QWORD *)v224 = v225;
                goto LABEL_147;
              }
              *(_BYTE *)(v224 + 24) = 1;
              v222 = v225;
              v225[24] = v225 == v223;
              *v227 = 1;
            }
            while (v225 != v223);
          }
          ++*((_QWORD *)v151 + 2);
          goto LABEL_149;
        }
LABEL_95:
        if ((SBYTE7(v1460) & 0x80u) == 0)
          v203 = BYTE7(v1460);
        else
          v203 = *((_QWORD *)&buf + 1);
        if ((SBYTE7(v1460) & 0x80u) == 0)
          v204 = &buf;
        else
          v204 = (__int128 *)buf;
        while (1)
        {
          while (1)
          {
            v200 = v198;
            v207 = (const void *)v198[4];
            v205 = v198 + 4;
            v206 = v207;
            v208 = *((char *)v205 + 23);
            if (v208 >= 0)
              v209 = *((unsigned __int8 *)v205 + 23);
            else
              v209 = v205[1];
            if (v208 >= 0)
              v210 = v205;
            else
              v210 = v206;
            if (v209 >= v203)
              v211 = v203;
            else
              v211 = v209;
            v212 = memcmp(v204, v210, v211);
            v213 = v203 < v209;
            if (v212)
              v213 = v212 < 0;
            if (!v213)
              break;
            v198 = (_QWORD *)*v200;
            v199 = v200;
            if (!*v200)
              goto LABEL_119;
          }
          v214 = memcmp(v210, v204, v211);
          v218 = v209 < v203;
          if (v214)
            v218 = v214 < 0;
          if (!v218)
            break;
          v198 = (_QWORD *)v200[1];
          if (!v198)
          {
            v199 = v200 + 1;
            goto LABEL_119;
          }
        }
        v219 = v200;
LABEL_149:
        objc_msgSend_setObject_atIndexedSubscript_(v1386, v215, *((_QWORD *)v219 + 7), v144, v216, v217);
        if (SBYTE7(v1460) < 0)
          operator delete((void *)buf);
        v241 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v236, v237, v238, v239, v240);
        v242 = strlen(v241);
        if (v242 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        v243 = v242;
        if (v242 >= 0x17)
        {
          v248 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v242 | 7) != 0x17)
            v248 = v242 | 7;
          v249 = v248 + 1;
          v244 = (__int128 *)operator new(v248 + 1);
          *(_QWORD *)&v1460 = v249 | 0x8000000000000000;
          *(_QWORD *)&buf = v244;
          *((_QWORD *)&buf + 1) = v243;
        }
        else
        {
          BYTE7(v1460) = v242;
          v244 = &buf;
          if (!v242)
          {
            LOBYTE(buf) = 0;
            v245 = (_QWORD *)*v153;
            v246 = v151 + 8;
            v247 = v151 + 8;
            if (!*v153)
              goto LABEL_184;
            goto LABEL_160;
          }
        }
        memmove(v244, v241, v243);
        *((_BYTE *)v244 + v243) = 0;
        v245 = (_QWORD *)*v153;
        v246 = v151 + 8;
        v247 = v151 + 8;
        if (!*v153)
        {
LABEL_184:
          v266 = operator new(0x40uLL);
          *((_OWORD *)v266 + 2) = buf;
          v267 = v1460;
          *(_QWORD *)&v1460 = 0;
          buf = 0uLL;
          *((_QWORD *)v266 + 6) = v267;
          *((_QWORD *)v266 + 7) = 0;
          *(_QWORD *)v266 = 0;
          *((_QWORD *)v266 + 1) = 0;
          *((_QWORD *)v266 + 2) = v247;
          *v246 = v266;
          v268 = **(_QWORD **)v151;
          v269 = v266;
          if (v268)
          {
            *(_QWORD *)v151 = v268;
            v269 = (_BYTE *)*v246;
          }
          v270 = (_BYTE *)*v153;
          v1022 = v269 == (_BYTE *)*v153;
          v269[24] = v1022;
          if (!v1022)
          {
            do
            {
              v271 = *((_QWORD *)v269 + 2);
              if (*(_BYTE *)(v271 + 24))
                break;
              v272 = *(_BYTE **)(v271 + 16);
              v273 = *(_QWORD *)v272;
              if (*(_QWORD *)v272 == v271)
              {
                v276 = *((_QWORD *)v272 + 1);
                if (!v276 || (v277 = *(unsigned __int8 *)(v276 + 24), v274 = (_BYTE *)(v276 + 24), v277))
                {
                  if (*(_BYTE **)v271 == v269)
                  {
                    *(_BYTE *)(v271 + 24) = 1;
                    v272[24] = 0;
                    v280 = *(_QWORD *)(v271 + 8);
                    *(_QWORD *)v272 = v280;
                    if (v280)
                      goto LABEL_201;
                  }
                  else
                  {
                    v278 = *(uint64_t **)(v271 + 8);
                    v279 = *v278;
                    *(_QWORD *)(v271 + 8) = *v278;
                    if (v279)
                    {
                      *(_QWORD *)(v279 + 16) = v271;
                      v272 = *(_BYTE **)(v271 + 16);
                    }
                    v278[2] = (uint64_t)v272;
                    *(_QWORD *)(*(_QWORD *)(v271 + 16) + 8 * (**(_QWORD **)(v271 + 16) != v271)) = v278;
                    *v278 = v271;
                    *(_QWORD *)(v271 + 16) = v278;
                    v272 = (_BYTE *)v278[2];
                    v271 = *(_QWORD *)v272;
                    *((_BYTE *)v278 + 24) = 1;
                    v272[24] = 0;
                    v280 = *(_QWORD *)(v271 + 8);
                    *(_QWORD *)v272 = v280;
                    if (v280)
LABEL_201:
                      *(_QWORD *)(v280 + 16) = v272;
                  }
                  *(_QWORD *)(v271 + 16) = *((_QWORD *)v272 + 2);
                  *(_QWORD *)(*((_QWORD *)v272 + 2) + 8 * (**((_QWORD **)v272 + 2) != (_QWORD)v272)) = v271;
                  *(_QWORD *)(v271 + 8) = v272;
LABEL_212:
                  *((_QWORD *)v272 + 2) = v271;
                  break;
                }
              }
              else if (!v273 || (v275 = *(unsigned __int8 *)(v273 + 24), v274 = (_BYTE *)(v273 + 24), v275))
              {
                if (*(_BYTE **)v271 == v269)
                {
                  v281 = *((_QWORD *)v269 + 1);
                  *(_QWORD *)v271 = v281;
                  if (v281)
                  {
                    *(_QWORD *)(v281 + 16) = v271;
                    v272 = *(_BYTE **)(v271 + 16);
                  }
                  *((_QWORD *)v269 + 2) = v272;
                  *(_QWORD *)(*(_QWORD *)(v271 + 16) + 8 * (**(_QWORD **)(v271 + 16) != v271)) = v269;
                  *((_QWORD *)v269 + 1) = v271;
                  *(_QWORD *)(v271 + 16) = v269;
                  v272 = (_BYTE *)*((_QWORD *)v269 + 2);
                }
                else
                {
                  v269 = (_BYTE *)*((_QWORD *)v269 + 2);
                }
                v269[24] = 1;
                v272[24] = 0;
                v271 = *((_QWORD *)v272 + 1);
                v282 = *(_BYTE **)v271;
                *((_QWORD *)v272 + 1) = *(_QWORD *)v271;
                if (v282)
                  *((_QWORD *)v282 + 2) = v272;
                *(_QWORD *)(v271 + 16) = *((_QWORD *)v272 + 2);
                *(_QWORD *)(*((_QWORD *)v272 + 2) + 8 * (**((_QWORD **)v272 + 2) != (_QWORD)v272)) = v271;
                *(_QWORD *)v271 = v272;
                goto LABEL_212;
              }
              *(_BYTE *)(v271 + 24) = 1;
              v269 = v272;
              v272[24] = v272 == v270;
              *v274 = 1;
            }
            while (v272 != v270);
          }
          ++*((_QWORD *)v151 + 2);
          goto LABEL_214;
        }
LABEL_160:
        if ((SBYTE7(v1460) & 0x80u) == 0)
          v250 = BYTE7(v1460);
        else
          v250 = *((_QWORD *)&buf + 1);
        if ((SBYTE7(v1460) & 0x80u) == 0)
          v251 = &buf;
        else
          v251 = (__int128 *)buf;
        while (1)
        {
          while (1)
          {
            v247 = v245;
            v254 = (const void *)v245[4];
            v252 = v245 + 4;
            v253 = v254;
            v255 = *((char *)v252 + 23);
            if (v255 >= 0)
              v256 = *((unsigned __int8 *)v252 + 23);
            else
              v256 = v252[1];
            if (v255 >= 0)
              v257 = v252;
            else
              v257 = v253;
            if (v256 >= v250)
              v258 = v250;
            else
              v258 = v256;
            v259 = memcmp(v251, v257, v258);
            v260 = v250 < v256;
            if (v259)
              v260 = v259 < 0;
            if (!v260)
              break;
            v245 = (_QWORD *)*v247;
            v246 = v247;
            if (!*v247)
              goto LABEL_184;
          }
          v261 = memcmp(v257, v251, v258);
          v265 = v256 < v250;
          if (v261)
            v265 = v261 < 0;
          if (!v265)
            break;
          v245 = (_QWORD *)v247[1];
          if (!v245)
          {
            v246 = v247 + 1;
            goto LABEL_184;
          }
        }
        v266 = v247;
LABEL_214:
        objc_msgSend_setObject_atIndexedSubscript_(v1387, v262, *((_QWORD *)v266 + 7), v144, v263, v264);
        if (SBYTE7(v1460) < 0)
          operator delete((void *)buf);
        v288 = (const char *)objc_msgSend_UTF8String(CFSTR("y"), v283, v284, v285, v286, v287);
        v289 = strlen(v288);
        if (v289 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        v290 = v289;
        if (v289 >= 0x17)
        {
          v295 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v289 | 7) != 0x17)
            v295 = v289 | 7;
          v296 = v295 + 1;
          v291 = (__int128 *)operator new(v295 + 1);
          *(_QWORD *)&v1460 = v296 | 0x8000000000000000;
          *(_QWORD *)&buf = v291;
          *((_QWORD *)&buf + 1) = v290;
        }
        else
        {
          BYTE7(v1460) = v289;
          v291 = &buf;
          if (!v289)
          {
            LOBYTE(buf) = 0;
            v292 = (_QWORD *)*v153;
            v293 = v151 + 8;
            v294 = v151 + 8;
            if (*v153)
              goto LABEL_225;
            goto LABEL_249;
          }
        }
        memmove(v291, v288, v290);
        *((_BYTE *)v291 + v290) = 0;
        v292 = (_QWORD *)*v153;
        v293 = v151 + 8;
        v294 = v151 + 8;
        if (*v153)
        {
LABEL_225:
          if ((SBYTE7(v1460) & 0x80u) == 0)
            v297 = BYTE7(v1460);
          else
            v297 = *((_QWORD *)&buf + 1);
          if ((SBYTE7(v1460) & 0x80u) == 0)
            v298 = &buf;
          else
            v298 = (__int128 *)buf;
          while (1)
          {
            while (1)
            {
              v294 = v292;
              v301 = (const void *)v292[4];
              v299 = v292 + 4;
              v300 = v301;
              v302 = *((char *)v299 + 23);
              if (v302 >= 0)
                v303 = *((unsigned __int8 *)v299 + 23);
              else
                v303 = v299[1];
              if (v302 >= 0)
                v304 = v299;
              else
                v304 = v300;
              if (v303 >= v297)
                v305 = v297;
              else
                v305 = v303;
              v306 = memcmp(v298, v304, v305);
              v307 = v297 < v303;
              if (v306)
                v307 = v306 < 0;
              if (!v307)
                break;
              v292 = (_QWORD *)*v294;
              v293 = v294;
              if (!*v294)
                goto LABEL_249;
            }
            v308 = memcmp(v304, v298, v305);
            v312 = v303 < v297;
            if (v308)
              v312 = v308 < 0;
            if (!v312)
              break;
            v292 = (_QWORD *)v294[1];
            if (!v292)
            {
              v293 = v294 + 1;
              goto LABEL_249;
            }
          }
          v313 = v294;
          goto LABEL_279;
        }
LABEL_249:
        v313 = operator new(0x40uLL);
        *((_OWORD *)v313 + 2) = buf;
        v314 = v1460;
        *(_QWORD *)&v1460 = 0;
        buf = 0uLL;
        *((_QWORD *)v313 + 6) = v314;
        *((_QWORD *)v313 + 7) = 0;
        *(_QWORD *)v313 = 0;
        *((_QWORD *)v313 + 1) = 0;
        *((_QWORD *)v313 + 2) = v294;
        *v293 = v313;
        v315 = **(_QWORD **)v151;
        v316 = v313;
        if (v315)
        {
          *(_QWORD *)v151 = v315;
          v316 = (_BYTE *)*v293;
        }
        v317 = (_BYTE *)*v153;
        v1022 = v316 == (_BYTE *)*v153;
        v316[24] = v1022;
        if (!v1022)
        {
          do
          {
            v318 = *((_QWORD *)v316 + 2);
            if (*(_BYTE *)(v318 + 24))
              break;
            v319 = *(_BYTE **)(v318 + 16);
            v320 = *(_QWORD *)v319;
            if (*(_QWORD *)v319 == v318)
            {
              v323 = *((_QWORD *)v319 + 1);
              if (!v323 || (v324 = *(unsigned __int8 *)(v323 + 24), v321 = (_BYTE *)(v323 + 24), v324))
              {
                if (*(_BYTE **)v318 == v316)
                {
                  *(_BYTE *)(v318 + 24) = 1;
                  v319[24] = 0;
                  v327 = *(_QWORD *)(v318 + 8);
                  *(_QWORD *)v319 = v327;
                  if (v327)
                    goto LABEL_266;
                }
                else
                {
                  v325 = *(uint64_t **)(v318 + 8);
                  v326 = *v325;
                  *(_QWORD *)(v318 + 8) = *v325;
                  if (v326)
                  {
                    *(_QWORD *)(v326 + 16) = v318;
                    v319 = *(_BYTE **)(v318 + 16);
                  }
                  v325[2] = (uint64_t)v319;
                  *(_QWORD *)(*(_QWORD *)(v318 + 16) + 8 * (**(_QWORD **)(v318 + 16) != v318)) = v325;
                  *v325 = v318;
                  *(_QWORD *)(v318 + 16) = v325;
                  v319 = (_BYTE *)v325[2];
                  v318 = *(_QWORD *)v319;
                  *((_BYTE *)v325 + 24) = 1;
                  v319[24] = 0;
                  v327 = *(_QWORD *)(v318 + 8);
                  *(_QWORD *)v319 = v327;
                  if (v327)
LABEL_266:
                    *(_QWORD *)(v327 + 16) = v319;
                }
                *(_QWORD *)(v318 + 16) = *((_QWORD *)v319 + 2);
                *(_QWORD *)(*((_QWORD *)v319 + 2) + 8 * (**((_QWORD **)v319 + 2) != (_QWORD)v319)) = v318;
                *(_QWORD *)(v318 + 8) = v319;
LABEL_277:
                *((_QWORD *)v319 + 2) = v318;
                break;
              }
            }
            else if (!v320 || (v322 = *(unsigned __int8 *)(v320 + 24), v321 = (_BYTE *)(v320 + 24), v322))
            {
              if (*(_BYTE **)v318 == v316)
              {
                v328 = *((_QWORD *)v316 + 1);
                *(_QWORD *)v318 = v328;
                if (v328)
                {
                  *(_QWORD *)(v328 + 16) = v318;
                  v319 = *(_BYTE **)(v318 + 16);
                }
                *((_QWORD *)v316 + 2) = v319;
                *(_QWORD *)(*(_QWORD *)(v318 + 16) + 8 * (**(_QWORD **)(v318 + 16) != v318)) = v316;
                *((_QWORD *)v316 + 1) = v318;
                *(_QWORD *)(v318 + 16) = v316;
                v319 = (_BYTE *)*((_QWORD *)v316 + 2);
              }
              else
              {
                v316 = (_BYTE *)*((_QWORD *)v316 + 2);
              }
              v316[24] = 1;
              v319[24] = 0;
              v318 = *((_QWORD *)v319 + 1);
              v329 = *(_BYTE **)v318;
              *((_QWORD *)v319 + 1) = *(_QWORD *)v318;
              if (v329)
                *((_QWORD *)v329 + 2) = v319;
              *(_QWORD *)(v318 + 16) = *((_QWORD *)v319 + 2);
              *(_QWORD *)(*((_QWORD *)v319 + 2) + 8 * (**((_QWORD **)v319 + 2) != (_QWORD)v319)) = v318;
              *(_QWORD *)v318 = v319;
              goto LABEL_277;
            }
            *(_BYTE *)(v318 + 24) = 1;
            v316 = v319;
            v319[24] = v319 == v317;
            *v321 = 1;
          }
          while (v319 != v317);
        }
        ++*((_QWORD *)v151 + 2);
LABEL_279:
        objc_msgSend_setObject_atIndexedSubscript_(v1388, v309, *((_QWORD *)v313 + 7), v144, v310, v311);
        if (SBYTE7(v1460) < 0)
          operator delete((void *)buf);
        ++v144;
        v143 = (char *)v1423[0];
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5) <= v144)
          goto LABEL_289;
      }
      v149 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v146 | 7) != 0x17)
        v149 = v146 | 7;
      v150 = v149 + 1;
      p_buf = (__int128 *)operator new(v149 + 1);
      *(_QWORD *)&v1460 = v150 | 0x8000000000000000;
      *(_QWORD *)&buf = p_buf;
      *((_QWORD *)&buf + 1) = v147;
LABEL_28:
      memmove(p_buf, v145, v147);
      goto LABEL_29;
    }
LABEL_289:
    objc_msgSend_shape(v1380, v138, v139, v140, v141, v142);
    v330 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v330, v331, 0, v332, v333, v334);
    v335 = (void *)objc_claimAutoreleasedReturnValue();
    v341 = objc_msgSend_unsignedIntValue(v335, v336, v337, v338, v339, v340);
    v342 = 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5) == v341;

    if (!v342)
    {
      objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v343, 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5), v344, v345, v346);
      v347 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v348, 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5), v349, v350, v351);
      v355 = (void *)objc_claimAutoreleasedReturnValue();
      if (v1423[1] != v1423[0])
      {
        v356 = 0;
        do
        {
          objc_msgSend_setObject_atIndexedSubscript_(v347, v352, (uint64_t)v1380, v356, v353, v354);
          objc_msgSend_setObject_atIndexedSubscript_(v355, v357, (uint64_t)v1379, v356++, v358, v359);
        }
        while (0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5) > v356);
      }
      objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E0C9E970], v352, (uint64_t)v347, 0, 65568, v354);
      v360 = objc_claimAutoreleasedReturnValue();

      objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E0C9E970], v361, (uint64_t)v355, 0, 65568, v362);
      v363 = objc_claimAutoreleasedReturnValue();

      v1379 = (void *)v363;
      v1380 = (void *)v360;
    }
    context = (void *)MEMORY[0x1C3B818B0]();
    v364 = objc_alloc(MEMORY[0x1E0C9E8F8]);
    v1450[0] = CFSTR("encoded_image");
    v1450[1] = CFSTR("encoded_image_projected");
    v1451[0] = v1380;
    v1451[1] = v1379;
    v1450[2] = CFSTR("decoder_state_h");
    objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E0C9E970], v365, (uint64_t)v1385, 0, 65568, v366);
    v367 = (void *)objc_claimAutoreleasedReturnValue();
    v1451[2] = v367;
    v1450[3] = CFSTR("decoder_state_c");
    objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E0C9E970], v368, (uint64_t)v1386, 0, 65568, v369);
    v370 = (void *)objc_claimAutoreleasedReturnValue();
    v1451[3] = v370;
    v1450[4] = CFSTR("past_attention_weights");
    objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E0C9E970], v371, (uint64_t)v1387, 0, 65568, v372);
    v373 = (void *)objc_claimAutoreleasedReturnValue();
    v1451[4] = v373;
    v1450[5] = CFSTR("y_prev");
    objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E0C9E970], v374, (uint64_t)v1388, 0, 65568, v375);
    v376 = (void *)objc_claimAutoreleasedReturnValue();
    v1451[5] = v376;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v377, (uint64_t)v1451, (uint64_t)v1450, 6, v378);
    v379 = (void *)objc_claimAutoreleasedReturnValue();
    v1373 = (void *)objc_msgSend_initWithDictionary_error_(v364, v380, (uint64_t)v379, 0, v381, v382);

    objc_msgSend_decoderModel(v1378, v383, v384, v385, v386, v387);
    v388 = (void *)objc_claimAutoreleasedReturnValue();
    v1422 = v1372;
    objc_msgSend_predictionFromFeatures_options_error_(v388, v389, (uint64_t)v1373, (uint64_t)v1370, (uint64_t)&v1422, v390);
    v1376 = (void *)objc_claimAutoreleasedReturnValue();
    v391 = v1422;

    v1372 = v391;
    v396 = v1376;
    if (!v1376)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v397 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v397, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend_localizedDescription(v391, v398, v399, v400, v401, v402);
        v403 = (id)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v403;
        _os_log_impl(&dword_1BE607000, v397, OS_LOG_TYPE_FAULT, "An error occurred when running math decoder inference: %@", (uint8_t *)&buf, 0xCu);

      }
      v396 = 0;
    }
    v1448[0] = CFSTR("new_decoder_state_h");
    objc_msgSend_featureValueForName_(v396, v392, (uint64_t)CFSTR("new_decoder_state_h"), v393, v394, v395);
    v1409 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_multiArrayValue(v1409, v404, v405, v406, v407, v408);
    v1402 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_squeezeDimensions_error_(v1402, v409, (uint64_t)&unk_1E7827E90, 0, v410, v411);
    v412 = (void *)objc_claimAutoreleasedReturnValue();
    v1449[0] = v412;
    v1448[1] = CFSTR("new_decoder_state_c");
    objc_msgSend_featureValueForName_(v396, v413, (uint64_t)CFSTR("new_decoder_state_c"), v414, v415, v416);
    v417 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_multiArrayValue(v417, v418, v419, v420, v421, v422);
    v423 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_squeezeDimensions_error_(v423, v424, (uint64_t)&unk_1E7827EA8, 0, v425, v426);
    v427 = (void *)objc_claimAutoreleasedReturnValue();
    v1449[1] = v427;
    v1448[2] = CFSTR("attention_weights");
    objc_msgSend_featureValueForName_(v1376, v428, (uint64_t)CFSTR("attention_weights"), v429, v430, v431);
    v432 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_multiArrayValue(v432, v433, v434, v435, v436, v437);
    v438 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_squeezeDimensions_error_((void *)v438, v439, (uint64_t)&unk_1E7827EC0, 0, v440, v441);
    v442 = (void *)objc_claimAutoreleasedReturnValue();
    v1449[2] = v442;
    v1448[3] = CFSTR("y");
    objc_msgSend_featureValueForName_(v1376, v443, (uint64_t)CFSTR("y"), v444, v445, v446);
    v447 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_multiArrayValue(v447, v448, v449, v450, v451, v452);
    v453 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_squeezeDimensions_error_(v453, v454, (uint64_t)&unk_1E7827ED8, 0, v455, v456);
    v457 = (void *)objc_claimAutoreleasedReturnValue();
    v1449[3] = v457;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v458, (uint64_t)v1449, (uint64_t)v1448, 4, v459);
    v1377 = (NSDictionary *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_activeAlphabet(v1378, v460, v461, v462, v463, v464);
    v465 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v438) = v465 == 0;

    if ((v438 & 1) != 0)
    {
      v552 = 0;
      v1392 = 0;
      v553 = (char *)v1423[0];
      if (v1423[1] != v1423[0])
        goto LABEL_413;
    }
    else
    {
      objc_msgSend_objectForKeyedSubscript_(v1377, v466, (uint64_t)CFSTR("y"), v468, v469, v470);
      v471 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v477 = objc_msgSend_dataPointer(v471, v472, v473, v474, v475, v476);
      objc_msgSend_shape(v471, v478, v479, v480, v481, v482);
      v483 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v483, v484, 0, v485, v486, v487);
      v488 = (void *)objc_claimAutoreleasedReturnValue();
      v494 = objc_msgSend_intValue(v488, v489, v490, v491, v492, v493);

      v1410 = v471;
      if (v494 >= 1)
      {
        v495 = 0;
        v1392 = 0;
        v496 = 0;
        v497 = 0;
        v498 = 0;
        v499 = 0;
        v501 = *(int8x8_t *)a1;
        v500 = *(int8x8_t *)(a1 + 8);
        v502 = v500;
        while (1)
        {
          v503 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v502 - *(_QWORD *)&v501) >> 3);
          if (*(_QWORD *)&v502 != *(_QWORD *)&v501)
          {
            v504 = 0;
            v505 = (float *)v1424;
            v506 = 0.0;
            while (1)
            {
              v508 = v503 * v499;
              v509 = (int)v503 * (int)v499 + (int)v504;
              if (v505[v504] != 0.0)
                goto LABEL_308;
              v510 = *(float *)(v477 + 4 * v509);
              if (v510 <= *(float *)(a1 + 696) || (v511 = *(int8x8_t *)(a1 + 568), !*(_QWORD *)&v511))
              {
LABEL_347:
                v526 = (int8x8_t *)a1;
                if (v510 > *(float *)(a1 + 692))
                  goto LABEL_348;
                goto LABEL_308;
              }
              v512 = (uint8x8_t)vcnt_s8(v511);
              v512.i16[0] = vaddlv_u8(v512);
              if (v512.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v511 <= v504)
                  v513 = v504 % *(_QWORD *)&v511;
                else
                  v513 = v504;
                v514 = *(_QWORD *)(a1 + 560);
                v515 = *(uint64_t ***)(v514 + 8 * v513);
                if (!v515)
                  goto LABEL_347;
              }
              else
              {
                v513 = (*(_QWORD *)&v511 + 0x7FFFFFFFLL) & v504;
                v514 = *(_QWORD *)(a1 + 560);
                v515 = *(uint64_t ***)(v514 + 8 * v513);
                if (!v515)
                  goto LABEL_347;
              }
              v516 = *v515;
              if (!*v515)
                goto LABEL_347;
              v517 = *(_QWORD *)&v511 - 1;
              if (v512.u32[0] < 2uLL)
              {
                while (1)
                {
                  v518 = v516[1];
                  if (v518 == v504)
                  {
                    if (v504 == *((_DWORD *)v516 + 4))
                      goto LABEL_334;
                  }
                  else if ((v518 & v517) != v513)
                  {
                    goto LABEL_347;
                  }
                  v516 = (uint64_t *)*v516;
                  if (!v516)
                    goto LABEL_347;
                }
              }
              while (1)
              {
                v519 = v516[1];
                if (v519 == v504)
                  break;
                if (v519 >= *(_QWORD *)&v511)
                  v519 %= *(_QWORD *)&v511;
                if (v519 != v513)
                  goto LABEL_347;
LABEL_328:
                v516 = (uint64_t *)*v516;
                if (!v516)
                  goto LABEL_347;
              }
              if (v504 != *((_DWORD *)v516 + 4))
                goto LABEL_328;
LABEL_334:
              if (v512.u32[0] > 1uLL)
              {
                v520 = v504;
                if (*(_QWORD *)&v511 <= v504)
                  v520 = v504 % *(_QWORD *)&v511;
              }
              else
              {
                v520 = (*(_QWORD *)&v511 + 0x7FFFFFFFLL) & v504;
              }
              v521 = *(uint64_t ***)(v514 + 8 * v520);
              if (!v521 || (v522 = *v521) == 0)
LABEL_1653:
                sub_1BE61C778("unordered_map::at: key not found");
              if (v512.u32[0] < 2uLL)
              {
                while (1)
                {
                  v523 = v522[1];
                  if (v523 == v504)
                  {
                    if (v504 == *((_DWORD *)v522 + 4))
                      goto LABEL_346;
                  }
                  else if ((v523 & v517) != v520)
                  {
                    goto LABEL_1653;
                  }
                  v522 = (uint64_t *)*v522;
                  if (!v522)
                    goto LABEL_1653;
                }
              }
              while (2)
              {
                v531 = v522[1];
                if (v531 != v504)
                {
                  if (v531 >= *(_QWORD *)&v511)
                    v531 %= *(_QWORD *)&v511;
                  if (v531 != v520)
                    goto LABEL_1653;
LABEL_355:
                  v522 = (uint64_t *)*v522;
                  if (!v522)
                    goto LABEL_1653;
                  continue;
                }
                break;
              }
              if (v504 != *((_DWORD *)v522 + 4))
                goto LABEL_355;
LABEL_346:
              v524 = (int *)v522[3];
              v525 = (int *)v522[4];
              if (v524 == v525)
                goto LABEL_347;
              do
              {
                v530 = *v524;
                *(float *)(v477 + 4 * ((int)v530 + v508)) = *(float *)(v477 + 4 * v509)
                                                            + *(float *)(v477 + 4 * ((int)v530 + v508));
                if ((uint64_t)v504 > v530)
                  v506 = v506 + *(float *)(v477 + 4 * v509);
                ++v524;
              }
              while (v524 != v525);
              v510 = *(float *)(v477 + 4 * v509);
              v526 = (int8x8_t *)a1;
              if (v510 > *(float *)(a1 + 692))
              {
LABEL_348:
                v527 = v526[76];
                if (v527)
                {
                  v528 = (uint8x8_t)vcnt_s8(v527);
                  v528.i16[0] = vaddlv_u8(v528);
                  if (v528.u32[0] > 1uLL)
                  {
                    v529 = v504;
                    if (*(_QWORD *)&v527 <= v504)
                      v529 = v504 % *(_QWORD *)&v527;
                  }
                  else
                  {
                    v529 = (*(_QWORD *)&v527 + 0x7FFFFFFFLL) & v504;
                  }
                  v532 = *(uint64_t ***)(*(_QWORD *)(a1 + 600) + 8 * v529);
                  if (v532)
                  {
                    v533 = *v532;
                    if (v533)
                    {
                      if (v528.u32[0] < 2uLL)
                      {
                        v534 = *(_QWORD *)&v527 - 1;
                        while (1)
                        {
                          v536 = v533[1];
                          if (v536 == v504)
                          {
                            if (v504 == *((_DWORD *)v533 + 4))
                              goto LABEL_308;
                          }
                          else if ((v536 & v534) != v529)
                          {
                            goto LABEL_378;
                          }
                          v533 = (uint64_t *)*v533;
                          if (!v533)
                            goto LABEL_378;
                        }
                      }
                      do
                      {
                        v535 = v533[1];
                        if (v535 == v504)
                        {
                          if (v504 == *((_DWORD *)v533 + 4))
                            goto LABEL_308;
                        }
                        else
                        {
                          if (v535 >= *(_QWORD *)&v527)
                            v535 %= *(_QWORD *)&v527;
                          if (v535 != v529)
                            break;
                        }
                        v533 = (uint64_t *)*v533;
                      }
                      while (v533);
                    }
                  }
                }
LABEL_378:
                if (v498 < (float *)v497)
                {
                  *(_DWORD *)v498 = v499;
                  *((_DWORD *)v498 + 1) = v504;
                  v498[2] = v510;
                  v498 += 3;
                }
                else
                {
                  v537 = 0xAAAAAAAAAAAAAAABLL * (((char *)v498 - v1392) >> 2) + 1;
                  if (v537 > 0x1555555555555555)
                    sub_1BE61F930();
                  if (0x5555555555555556 * ((v497 - v1392) >> 2) > v537)
                    v537 = 0x5555555555555556 * ((v497 - v1392) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v497 - v1392) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v538 = 0x1555555555555555;
                  else
                    v538 = v537;
                  if (v538)
                  {
                    if (v538 > 0x1555555555555555)
                      sub_1BE61F100();
                    v539 = (char *)operator new(12 * v538);
                  }
                  else
                  {
                    v539 = 0;
                  }
                  v540 = &v539[4 * (((char *)v498 - v1392) >> 2)];
                  *(_DWORD *)v540 = v499;
                  *((_DWORD *)v540 + 1) = v504;
                  *((float *)v540 + 2) = v510;
                  v541 = (int *)v540;
                  if (v498 == (float *)v1392)
                  {
                    v542 = v1392;
                    v497 = &v539[12 * v538];
                    v498 = (float *)(v540 + 12);
                    if (v1392)
                      goto LABEL_393;
                  }
                  else
                  {
                    v542 = v1392;
                    do
                    {
                      v543 = *(_QWORD *)(v498 - 3);
                      v498 -= 3;
                      v544 = *((_DWORD *)v498 + 2);
                      *(_QWORD *)(v541 - 3) = v543;
                      v541 -= 3;
                      v541[2] = v544;
                    }
                    while (v498 != (float *)v1392);
                    v497 = &v539[12 * v538];
                    v498 = (float *)(v540 + 12);
                    if (v1392)
LABEL_393:
                      operator delete(v542);
                  }
                  v1392 = (char *)v541;
                }
                v505 = (float *)v1424;
                v496 = (int *)v498;
                v501 = *(int8x8_t *)a1;
                v500 = *(int8x8_t *)(a1 + 8);
              }
LABEL_308:
              v507 = v505[v504] * *(float *)(v477 + 4 * v509);
              *(float *)(v477 + 4 * v509) = v507;
              v506 = v506 + v507;
              ++v504;
              v503 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v500 - *(_QWORD *)&v501) >> 3);
              v502 = v500;
              if (v503 <= v504)
                goto LABEL_400;
            }
          }
          v506 = 0.0;
          v502 = v501;
LABEL_400:
          if (v503)
          {
            v545 = 1.0 / v506;
            if (v503 >= 8)
            {
              v546 = v503 & 0xFFFFFFFFFFFFFFF8;
              v547 = (float32x4_t *)(v477 + 16 + v503 * v495);
              v548 = v503 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v549 = vmulq_n_f32(*v547, v545);
                v547[-1] = vmulq_n_f32(v547[-1], v545);
                *v547 = v549;
                v547 += 2;
                v548 -= 8;
              }
              while (v548);
              if (v503 == v546)
                goto LABEL_303;
            }
            else
            {
              v546 = 0;
            }
            v550 = v503 - v546;
            v551 = (float *)(v477 + 4 * (v546 + v503 * v499));
            do
            {
              *v551 = v545 * *v551;
              ++v551;
              --v550;
            }
            while (v550);
          }
LABEL_303:
          ++v499;
          v495 += 4;
          if (v499 == v494)
            goto LABEL_412;
        }
      }
      v1392 = 0;
      v496 = 0;
LABEL_412:

      v552 = v496;
      v553 = (char *)v1423[0];
      if (v1423[1] != v1423[0])
      {
LABEL_413:
        v554 = 0;
        v1381 = v552;
        while (1)
        {
          v557 = (CoreHandwriting::CHEncoderDecoderBeamState *)&v553[224 * v554];
          if (!*((_BYTE *)v557 + 172))
            break;
          size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
          {
            sub_1BE77D5F4((_QWORD *)__p.__r_.__value_.__l.__size_, (uint64_t)v557);
            v559 = size + 224;
            __p.__r_.__value_.__l.__size_ = size + 224;
            goto LABEL_590;
          }
          v598 = 0x6DB6DB6DB6DB6DB7
               * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5);
          v599 = v598 + 1;
          if ((unint64_t)(v598 + 1) > 0x124924924924924)
            sub_1BE61F930();
          if (0xDB6DB6DB6DB6DB6ELL
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5) > v599)
            v599 = 0xDB6DB6DB6DB6DB6ELL
                 * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5)) >= 0x92492492492492)
            v600 = 0x124924924924924;
          else
            v600 = v599;
          v1461 = &__p.__r_.__value_.__r.__words[2];
          if (v600)
          {
            if (v600 > 0x124924924924924)
              sub_1BE61F100();
            v601 = (char *)operator new(224 * v600);
          }
          else
          {
            v601 = 0;
          }
          *(_QWORD *)&buf = v601;
          *((_QWORD *)&buf + 1) = &v601[224 * v598];
          *(_QWORD *)&v1460 = *((_QWORD *)&buf + 1);
          *((_QWORD *)&v1460 + 1) = &v601[224 * v600];
          sub_1BE77D5F4(*((_QWORD **)&buf + 1), (uint64_t)v557);
          v602 = 0;
          v603 = *((_QWORD *)&buf + 1);
          *(_QWORD *)&v1460 = v1460 + 224;
          v604 = __p.__r_.__value_.__l.__size_;
          v605 = __p.__r_.__value_.__r.__words[0];
          while (v604 + v602 != v605)
          {
            v602 -= 224;
            sub_1BE77D5F4((_QWORD *)(v602 + v603), v602 + v604);
          }
          v606 = v603 + v602;
          v608 = __p.__r_.__value_.__l.__size_;
          v607 = (void *)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = v606;
          v1411 = v1460;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v1460;
          if ((void *)v608 != v607)
          {
            while ((*(char *)(v608 - 1) & 0x80000000) == 0)
            {
              v610 = *(void **)(v608 - 48);
              if (v610)
                goto LABEL_495;
LABEL_496:
              sub_1BE62033C(v608 - 80, *(_QWORD **)(v608 - 72));
              v611 = *(void **)(v608 - 104);
              if (v611)
              {
                *(_QWORD *)(v608 - 96) = v611;
                operator delete(v611);
              }
              v612 = *(void **)(v608 - 128);
              if (v612)
              {
                *(_QWORD *)(v608 - 120) = v612;
                operator delete(v612);
              }
              v613 = *(void **)(v608 - 152);
              if (v613)
              {
                *(_QWORD *)(v608 - 144) = v613;
                operator delete(v613);
              }
              v614 = *(_QWORD *)(v608 - 176);
              if (v614)
              {
                v615 = *(_QWORD *)(v608 - 168);
                v609 = *(void **)(v608 - 176);
                if (v615 != v614)
                {
                  v616 = *(_QWORD *)(v608 - 168);
                  do
                  {
                    v618 = *(void **)(v616 - 24);
                    v616 -= 24;
                    v617 = v618;
                    if (v618)
                    {
                      *(_QWORD *)(v615 - 16) = v617;
                      operator delete(v617);
                    }
                    v615 = v616;
                  }
                  while (v616 != v614);
                  v609 = *(void **)(v608 - 176);
                }
                *(_QWORD *)(v608 - 168) = v614;
                operator delete(v609);
              }
              sub_1BE67AC7C(v608 - 200, *(_QWORD **)(v608 - 192));
              sub_1BE77D58C(v608 - 224, *(char **)(v608 - 216));
              v608 -= 224;
              if ((void *)v608 == v607)
                goto LABEL_487;
            }
            operator delete(*(void **)(v608 - 24));
            v610 = *(void **)(v608 - 48);
            if (!v610)
              goto LABEL_496;
LABEL_495:
            *(_QWORD *)(v608 - 40) = v610;
            operator delete(v610);
            goto LABEL_496;
          }
LABEL_487:
          if (v607)
            operator delete(v607);
          v559 = v1411;
          __p.__r_.__value_.__l.__size_ = v1411;
LABEL_590:
          v670 = __p.__r_.__value_.__r.__words[0];
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v559 - __p.__r_.__value_.__r.__words[0]) >> 5) > (unint64_t)a5)
          {
            if (!a5)
            {
              v556 = 0;
              buf = 0uLL;
              *(_QWORD *)&v1460 = 0;
              if (!__p.__r_.__value_.__r.__words[0])
                goto LABEL_416;
              goto LABEL_772;
            }
            if (a5 >= 2)
            {
              v671 = v1375;
              v672 = v1374 + __p.__r_.__value_.__r.__words[0];
              do
              {
                sub_1BE7854A4(v670, a5, v672);
                v672 -= 224;
                --v671;
              }
              while (v671);
            }
            v1384 = v554;
            v1397 = v670 + 224 * a5;
            v1393 = v670;
            if (v1397 != v559)
            {
              v1390 = (_QWORD *)(v670 + 72);
              v673 = v670 + 168;
              v1403 = v670 + 48;
              v1412 = v670 + 24;
              v674 = (_QWORD *)(v670 + 96);
              v675 = (_QWORD *)(v670 + 120);
              v676 = v670 + 144;
              v677 = (_QWORD *)(v670 + 176);
              v678 = (std::string *)(v670 + 200);
              for (i = v670 + 224 * a5; i != v559; i += 224)
              {
                v681 = *(_QWORD *)(i + 80) - *(_QWORD *)(i + 72);
                if (v681)
                {
                  v682 = *(float *)(i + 168) / fabs(sqrt((double)(unint64_t)(v681 >> 2)));
                  v683 = *(_QWORD *)(v670 + 80) - *(_QWORD *)(v670 + 72);
                  if (v683)
                    goto LABEL_603;
                }
                else
                {
                  v682 = *(float *)(i + 168);
                  v683 = *(_QWORD *)(v670 + 80) - *(_QWORD *)(v670 + 72);
                  if (v683)
                  {
LABEL_603:
                    v684 = *(float *)v673 / fabs(sqrt((double)(unint64_t)(v683 >> 2)));
                    if (v682 > v684)
                      goto LABEL_607;
                    continue;
                  }
                }
                if (v682 > *(float *)v673)
                {
LABEL_607:
                  sub_1BE77D5F4(&buf, i);
                  sub_1BE784638(i, v670);
                  if ((__int128 *)v670 != &buf)
                  {
                    sub_1BE784720((uint64_t **)v670, (_QWORD *)buf, (_QWORD *)&buf + 1);
                    sub_1BE781768(v1412, *((int **)&v1460 + 1), (int *)&v1461);
                    sub_1BE784C3C(v1403, (char **)v1462, *(uint64_t *)v1463, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v1463 - (_QWORD)v1462) >> 3));
                    sub_1BE66E294(v1390, (char *)v1464, *(char **)v1465, (uint64_t)(*(_QWORD *)v1465 - (_QWORD)v1464) >> 2);
                    sub_1BE66E294(v674, (char *)v1466, *(char **)v1467, (uint64_t)(*(_QWORD *)v1467 - (_QWORD)v1466) >> 2);
                    sub_1BE62037C(v675, (char *)__src, *(char **)v1469, (uint64_t)(*(_QWORD *)v1469 - (_QWORD)__src) >> 3);
                    sub_1BE77E7C0(v676, v1470, &v1471);
                    v685 = v1472;
                    *(_WORD *)(v673 + 4) = v1473;
                    *(float *)v673 = v685;
                    sub_1BE66E294(v677, (char *)v1474, *(char **)v1475, (uint64_t)(*(_QWORD *)v1475 - (_QWORD)v1474) >> 2);
                  }
                  std::string::operator=(v678, &v1476);
                  if (SHIBYTE(v1476.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v1476.__r_.__value_.__l.__data_);
                    v686 = v1474;
                    if (v1474)
                    {
LABEL_611:
                      *(_QWORD *)v1475 = v686;
                      operator delete(v686);
                    }
                  }
                  else
                  {
                    v686 = v1474;
                    if (v1474)
                      goto LABEL_611;
                  }
                  sub_1BE62033C((uint64_t)&v1470, v1471);
                  if (__src)
                  {
                    *(_QWORD *)v1469 = __src;
                    operator delete(__src);
                  }
                  if (v1466)
                  {
                    *(_QWORD *)v1467 = v1466;
                    operator delete(v1466);
                  }
                  if (v1464)
                  {
                    *(_QWORD *)v1465 = v1464;
                    operator delete(v1464);
                  }
                  v687 = v1462;
                  if (v1462)
                  {
                    v688 = *(_QWORD *)v1463;
                    v680 = v1462;
                    if (*(void **)v1463 != v1462)
                    {
                      v689 = *(_QWORD *)v1463;
                      do
                      {
                        v691 = *(void **)(v689 - 24);
                        v689 -= 24;
                        v690 = v691;
                        if (v691)
                        {
                          *(_QWORD *)(v688 - 16) = v690;
                          operator delete(v690);
                        }
                        v688 = v689;
                      }
                      while ((void *)v689 != v687);
                      v680 = v1462;
                    }
                    *(_QWORD *)v1463 = v687;
                    operator delete(v680);
                  }
                  sub_1BE67AC7C((uint64_t)&v1460 + 8, v1461);
                  sub_1BE77D58C((uint64_t)&buf, *((char **)&buf + 1));
                  v670 = v1393;
                  sub_1BE7854A4(v1393, a5, v1393);
                }
              }
            }
            v692 = v1397;
            if (a5 < 2)
              goto LABEL_766;
            v693 = (((7 * a5) & 0x7FFFFFFFFFFFFFFLL) * (unsigned __int128)0x2492492492492493uLL) >> 64;
LABEL_633:
            if (v693 < 2)
              goto LABEL_631;
            sub_1BE77D5F4(&__dst, v670);
            v1398 = v692;
            v695 = v670;
            v696 = 0;
            v1404 = (unint64_t)(v693 - 2) >> 1;
            v1413 = v693;
            while (1)
            {
              v697 = v696 + 1;
              v698 = v695 + 224 * (v696 + 1);
              v699 = 2 * v696;
              v696 = (2 * v696) | 1;
              v700 = v699 + 2;
              if (v700 >= v693)
                goto LABEL_640;
              v701 = *(_QWORD *)(v695 + 224 * v697 + 80) - *(_QWORD *)(v695 + 224 * v697 + 72);
              if (v701)
              {
                v702 = *(float *)(v695 + 224 * v697 + 168) / fabs(sqrt((double)(unint64_t)(v701 >> 2)));
                v703 = *(_QWORD *)(v698 + 304) - *(_QWORD *)(v698 + 296);
                if (v703)
                  goto LABEL_638;
              }
              else
              {
                v702 = *(float *)(v695 + 224 * v697 + 168);
                v703 = *(_QWORD *)(v698 + 304) - *(_QWORD *)(v698 + 296);
                if (v703)
                {
LABEL_638:
                  v704 = *(float *)(v698 + 392) / fabs(sqrt((double)(unint64_t)(v703 >> 2)));
                  if (v702 <= v704)
                    goto LABEL_640;
LABEL_639:
                  v698 += 224;
                  v696 = v700;
                  goto LABEL_640;
                }
              }
              if (v702 > *(float *)(v698 + 392))
                goto LABEL_639;
LABEL_640:
              if (v695 != v698)
              {
                sub_1BE784720((uint64_t **)v695, *(_QWORD **)v698, (_QWORD *)(v698 + 8));
                sub_1BE781768(v695 + 24, *(int **)(v698 + 24), (int *)(v698 + 32));
                sub_1BE784C3C(v695 + 48, *(char ***)(v698 + 48), *(_QWORD *)(v698 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v698 + 56) - *(_QWORD *)(v698 + 48)) >> 3));
                v705 = *(char **)(v695 + 72);
                v706 = *(char **)(v698 + 72);
                v707 = *(_BYTE **)(v698 + 80);
                v708 = v707 - v706;
                v709 = (v707 - v706) >> 2;
                v710 = *(_QWORD *)(v695 + 88);
                if (v709 > (v710 - (uint64_t)v705) >> 2)
                {
                  if (v705)
                  {
                    *(_QWORD *)(v695 + 80) = v705;
                    operator delete(v705);
                    v710 = 0;
                    *(_QWORD *)(v695 + 72) = 0;
                    *(_QWORD *)(v695 + 80) = 0;
                    *(_QWORD *)(v695 + 88) = 0;
                  }
                  if ((v708 & 0x8000000000000000) != 0)
                    goto LABEL_1649;
                  v711 = v710 >> 1;
                  if (v710 >> 1 <= v709)
                    v711 = (v707 - v706) >> 2;
                  v712 = (unint64_t)v710 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v711;
                  if (v712 >> 62)
LABEL_1649:
                    sub_1BE61F930();
                  v713 = (char *)operator new(4 * v712);
                  v705 = v713;
                  *(_QWORD *)(v695 + 72) = v713;
                  *(_QWORD *)(v695 + 80) = v713;
                  *(_QWORD *)(v695 + 88) = &v713[4 * v712];
                  if (v707 != v706)
                    memcpy(v713, v706, v707 - v706);
                  goto LABEL_664;
                }
                v714 = *(_BYTE **)(v695 + 80);
                v715 = (v714 - v705) >> 2;
                if (v715 >= v709)
                {
                  if (v707 == v706)
                    goto LABEL_664;
                  v717 = *(void **)(v695 + 72);
                  v716 = *(char **)(v698 + 72);
                  goto LABEL_663;
                }
                if (v714 != v705)
                {
                  memmove(*(void **)(v695 + 72), *(const void **)(v698 + 72), v714 - v705);
                  v705 = *(char **)(v695 + 80);
                }
                v716 = &v706[4 * v715];
                v708 = v707 - v716;
                if (v707 != v716)
                {
                  v717 = v705;
LABEL_663:
                  memmove(v717, v716, v708);
                }
LABEL_664:
                v718 = &v705[v708];
                v719 = *(char **)(v695 + 96);
                *(_QWORD *)(v695 + 80) = v718;
                v720 = *(char **)(v698 + 96);
                v721 = *(_BYTE **)(v698 + 104);
                v722 = v721 - v720;
                v723 = (v721 - v720) >> 2;
                v724 = *(_QWORD *)(v695 + 112);
                if (v723 > (v724 - (uint64_t)v719) >> 2)
                {
                  if (v719)
                  {
                    *(_QWORD *)(v695 + 104) = v719;
                    operator delete(v719);
                    v724 = 0;
                    *(_QWORD *)(v695 + 96) = 0;
                    *(_QWORD *)(v695 + 104) = 0;
                    *(_QWORD *)(v695 + 112) = 0;
                  }
                  if ((v722 & 0x8000000000000000) != 0)
                    goto LABEL_1650;
                  v725 = v724 >> 1;
                  if (v724 >> 1 <= v723)
                    v725 = (v721 - v720) >> 2;
                  v726 = (unint64_t)v724 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v725;
                  if (v726 >> 62)
LABEL_1650:
                    sub_1BE61F930();
                  v727 = (char *)operator new(4 * v726);
                  v719 = v727;
                  *(_QWORD *)(v695 + 96) = v727;
                  *(_QWORD *)(v695 + 104) = v727;
                  *(_QWORD *)(v695 + 112) = &v727[4 * v726];
                  if (v721 != v720)
                    memcpy(v727, v720, v721 - v720);
                  goto LABEL_684;
                }
                v728 = *(_BYTE **)(v695 + 104);
                v729 = (v728 - v719) >> 2;
                if (v729 >= v723)
                {
                  if (v721 == v720)
                    goto LABEL_684;
                  v731 = v719;
                  v730 = *(char **)(v698 + 96);
                  goto LABEL_683;
                }
                if (v728 != v719)
                {
                  memmove(v719, *(const void **)(v698 + 96), v728 - v719);
                  v719 = *(char **)(v695 + 104);
                }
                v730 = &v720[4 * v729];
                v722 = v721 - v730;
                if (v721 != v730)
                {
                  v731 = v719;
LABEL_683:
                  memmove(v731, v730, v722);
                }
LABEL_684:
                v732 = &v719[v722];
                v733 = *(char **)(v695 + 120);
                *(_QWORD *)(v695 + 104) = v732;
                v734 = *(char **)(v698 + 120);
                v735 = *(_BYTE **)(v698 + 128);
                v736 = v735 - v734;
                v737 = (v735 - v734) >> 3;
                v738 = *(_QWORD *)(v695 + 136);
                if (v737 > (v738 - (uint64_t)v733) >> 3)
                {
                  if (v733)
                  {
                    *(_QWORD *)(v695 + 128) = v733;
                    operator delete(v733);
                    v738 = 0;
                    *(_QWORD *)(v695 + 120) = 0;
                    *(_QWORD *)(v695 + 128) = 0;
                    *(_QWORD *)(v695 + 136) = 0;
                  }
                  if ((v736 & 0x8000000000000000) != 0)
                    goto LABEL_1651;
                  v739 = v738 >> 2;
                  if (v738 >> 2 <= v737)
                    v739 = (v735 - v734) >> 3;
                  v740 = (unint64_t)v738 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v739;
                  if (v740 >> 61)
LABEL_1651:
                    sub_1BE61F930();
                  v741 = (char *)operator new(8 * v740);
                  v733 = v741;
                  *(_QWORD *)(v695 + 120) = v741;
                  *(_QWORD *)(v695 + 128) = v741;
                  *(_QWORD *)(v695 + 136) = &v741[8 * v740];
                  if (v735 != v734)
                    memcpy(v741, v734, v735 - v734);
                  goto LABEL_704;
                }
                v742 = *(_BYTE **)(v695 + 128);
                v743 = (v742 - v733) >> 3;
                if (v743 >= v737)
                {
                  if (v735 == v734)
                    goto LABEL_704;
                  v745 = v733;
                  v744 = *(char **)(v698 + 120);
                  goto LABEL_703;
                }
                if (v742 != v733)
                {
                  memmove(v733, *(const void **)(v698 + 120), v742 - v733);
                  v733 = *(char **)(v695 + 128);
                }
                v744 = &v734[8 * v743];
                v736 = v735 - v744;
                if (v735 != v744)
                {
                  v745 = v733;
LABEL_703:
                  memmove(v745, v744, v736);
                }
LABEL_704:
                *(_QWORD *)(v695 + 128) = &v733[v736];
                sub_1BE77E7C0(v695 + 144, *(_QWORD **)(v698 + 144), (_QWORD *)(v698 + 152));
                v746 = *(_DWORD *)(v698 + 168);
                v747 = *(char **)(v695 + 176);
                *(_WORD *)(v695 + 172) = *(_WORD *)(v698 + 172);
                *(_DWORD *)(v695 + 168) = v746;
                v748 = *(char **)(v698 + 176);
                v749 = *(_BYTE **)(v698 + 184);
                v750 = v749 - v748;
                v751 = (v749 - v748) >> 2;
                v752 = *(_QWORD *)(v695 + 192);
                if (v751 > (v752 - (uint64_t)v747) >> 2)
                {
                  if (v747)
                  {
                    *(_QWORD *)(v695 + 184) = v747;
                    operator delete(v747);
                    v752 = 0;
                    *(_QWORD *)(v695 + 176) = 0;
                    *(_QWORD *)(v695 + 184) = 0;
                    *(_QWORD *)(v695 + 192) = 0;
                  }
                  if ((v750 & 0x8000000000000000) != 0)
                    goto LABEL_1652;
                  v753 = v752 >> 1;
                  if (v752 >> 1 <= v751)
                    v753 = (v749 - v748) >> 2;
                  v754 = (unint64_t)v752 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v753;
                  if (v754 >> 62)
LABEL_1652:
                    sub_1BE61F930();
                  v755 = (char *)operator new(4 * v754);
                  v747 = v755;
                  *(_QWORD *)(v695 + 184) = v755;
                  v756 = (void **)(v695 + 184);
                  *(_QWORD *)(v695 + 176) = v755;
                  *(_QWORD *)(v695 + 192) = &v755[4 * v754];
                  if (v749 != v748)
                    memcpy(v755, v748, v749 - v748);
                  goto LABEL_724;
                }
                v756 = (void **)(v695 + 184);
                v757 = *(_BYTE **)(v695 + 184);
                v758 = (v757 - v747) >> 2;
                if (v758 >= v751)
                {
                  if (v749 != v748)
                  {
                    v760 = v747;
                    v759 = *(char **)(v698 + 176);
                    goto LABEL_723;
                  }
                }
                else
                {
                  if (v757 != v747)
                  {
                    memmove(v747, *(const void **)(v698 + 176), v757 - v747);
                    v747 = (char *)*v756;
                  }
                  v759 = &v748[4 * v758];
                  v750 = v749 - v759;
                  if (v749 == v759)
                    goto LABEL_724;
                  v760 = v747;
LABEL_723:
                  memmove(v760, v759, v750);
                }
LABEL_724:
                *v756 = &v747[v750];
              }
              std::string::operator=((std::string *)(v695 + 200), (const std::string *)(v698 + 200));
              v695 = v698;
              v693 = v1413;
              if (v696 > v1404)
              {
                v1405 = (uint64_t **)(v1398 - 224);
                if (v698 == v1398 - 224)
                {
                  if ((__int128 *)v698 != &__dst)
                  {
                    sub_1BE784720((uint64_t **)v698, (_QWORD *)__dst, (_QWORD *)&__dst + 1);
                    sub_1BE781768(v698 + 24, *((int **)&v1427 + 1), (int *)v1428);
                    sub_1BE784C3C(v698 + 48, (char **)v1429, *(uint64_t *)v1430, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v1430 - (_QWORD)v1429) >> 3));
                    sub_1BE66E294((_QWORD *)(v698 + 72), (char *)v1431, *(char **)v1432, (uint64_t)(*(_QWORD *)v1432 - (_QWORD)v1431) >> 2);
                    sub_1BE66E294((_QWORD *)(v698 + 96), (char *)v1433, *(char **)v1434, (uint64_t)(*(_QWORD *)v1434 - (_QWORD)v1433) >> 2);
                    sub_1BE62037C((_QWORD *)(v698 + 120), (char *)v1435, *(char **)v1436, (uint64_t)(*(_QWORD *)v1436 - (_QWORD)v1435) >> 3);
                    sub_1BE77E7C0(v698 + 144, v1437, v1438);
                    v769 = v1439;
                    *(_WORD *)(v698 + 172) = v1440;
                    *(_DWORD *)(v698 + 168) = v769;
                    sub_1BE66E294((_QWORD *)(v698 + 176), (char *)v1441, *(char **)v1442, (uint64_t)(*(_QWORD *)v1442 - (_QWORD)v1441) >> 2);
                  }
                  std::string::operator=((std::string *)(v698 + 200), &v1443);
                  goto LABEL_749;
                }
                sub_1BE784720((uint64_t **)v698, *(_QWORD **)(v1398 - 224), (_QWORD *)(v1398 - 216));
                sub_1BE781768(v698 + 24, *(int **)(v1398 - 200), (int *)(v1398 - 192));
                sub_1BE784C3C(v698 + 48, *(char ***)(v1398 - 176), *(_QWORD *)(v1398 - 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1398 - 168) - *(_QWORD *)(v1398 - 176)) >> 3));
                sub_1BE66E294((_QWORD *)(v698 + 72), *(char **)(v1398 - 152), *(char **)(v1398 - 144), (uint64_t)(*(_QWORD *)(v1398 - 144) - *(_QWORD *)(v1398 - 152)) >> 2);
                sub_1BE66E294((_QWORD *)(v698 + 96), *(char **)(v1398 - 128), *(char **)(v1398 - 120), (uint64_t)(*(_QWORD *)(v1398 - 120) - *(_QWORD *)(v1398 - 128)) >> 2);
                sub_1BE62037C((_QWORD *)(v698 + 120), *(char **)(v1398 - 104), *(char **)(v1398 - 96), (uint64_t)(*(_QWORD *)(v1398 - 96) - *(_QWORD *)(v1398 - 104)) >> 3);
                sub_1BE77E7C0(v698 + 144, *(_QWORD **)(v1398 - 80), (_QWORD *)(v1398 - 72));
                v761 = *(_WORD *)(v1398 - 52);
                *(_DWORD *)(v698 + 168) = *(_DWORD *)(v1398 - 56);
                *(_WORD *)(v698 + 172) = v761;
                v1391 = (float *)(v698 + 168);
                sub_1BE66E294((_QWORD *)(v698 + 176), *(char **)(v1398 - 48), *(char **)(v1398 - 40), (uint64_t)(*(_QWORD *)(v1398 - 40) - *(_QWORD *)(v1398 - 48)) >> 2);
                std::string::operator=((std::string *)(v698 + 200), (const std::string *)(v1398 - 24));
                if (v1405 != (uint64_t **)&__dst)
                {
                  sub_1BE784720(v1405, (_QWORD *)__dst, (_QWORD *)&__dst + 1);
                  sub_1BE781768(v1398 - 200, *((int **)&v1427 + 1), (int *)v1428);
                  sub_1BE784C3C(v1398 - 176, (char **)v1429, *(uint64_t *)v1430, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v1430 - (_QWORD)v1429) >> 3));
                  sub_1BE66E294((_QWORD *)(v1398 - 152), (char *)v1431, *(char **)v1432, (uint64_t)(*(_QWORD *)v1432 - (_QWORD)v1431) >> 2);
                  sub_1BE66E294((_QWORD *)(v1398 - 128), (char *)v1433, *(char **)v1434, (uint64_t)(*(_QWORD *)v1434 - (_QWORD)v1433) >> 2);
                  sub_1BE62037C((_QWORD *)(v1398 - 104), (char *)v1435, *(char **)v1436, (uint64_t)(*(_QWORD *)v1436 - (_QWORD)v1435) >> 3);
                  sub_1BE77E7C0(v1398 - 80, v1437, v1438);
                  v762 = v1439;
                  *(_WORD *)(v1398 - 52) = v1440;
                  *(_DWORD *)(v1398 - 56) = v762;
                  sub_1BE66E294((_QWORD *)(v1398 - 48), (char *)v1441, *(char **)v1442, (uint64_t)(*(_QWORD *)v1442 - (_QWORD)v1441) >> 2);
                }
                std::string::operator=((std::string *)(v1398 - 24), &v1443);
                v763 = v698 - v1393 + 224;
                if (v763 < 225)
                  goto LABEL_749;
                v764 = (unint64_t)(((((unint64_t)v763 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                        - 2) >> 1;
                v765 = *(_QWORD *)(v1393 + 224 * v764 + 80) - *(_QWORD *)(v1393 + 224 * v764 + 72);
                if (v765)
                {
                  v766 = *(float *)(v1393 + 224 * v764 + 168) / fabs(sqrt((double)(unint64_t)(v765 >> 2)));
                  v767 = *(_QWORD *)(v698 + 80) - *(_QWORD *)(v698 + 72);
                  if (v767)
                    goto LABEL_732;
LABEL_738:
                  if (v766 <= *v1391)
                    goto LABEL_749;
                  goto LABEL_739;
                }
                v766 = *(float *)(v1393 + 224 * v764 + 168);
                v767 = *(_QWORD *)(v698 + 80) - *(_QWORD *)(v698 + 72);
                if (!v767)
                  goto LABEL_738;
LABEL_732:
                v768 = *v1391 / fabs(sqrt((double)(unint64_t)(v767 >> 2)));
                if (v766 <= v768)
                {
LABEL_749:
                  if (SHIBYTE(v1443.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v1443.__r_.__value_.__l.__data_);
                    v777 = v1441;
                    v692 = v1398;
                    if (v1441)
                    {
LABEL_751:
                      *(_QWORD *)v1442 = v777;
                      operator delete(v777);
                    }
                  }
                  else
                  {
                    v777 = v1441;
                    v692 = v1398;
                    if (v1441)
                      goto LABEL_751;
                  }
                  sub_1BE62033C((uint64_t)&v1437, v1438[0]);
                  if (v1435)
                  {
                    *(_QWORD *)v1436 = v1435;
                    operator delete(v1435);
                  }
                  v670 = v1393;
                  v693 = v1413;
                  if (v1433)
                  {
                    *(_QWORD *)v1434 = v1433;
                    operator delete(v1433);
                  }
                  if (v1431)
                  {
                    *(_QWORD *)v1432 = v1431;
                    operator delete(v1431);
                  }
                  v778 = v1429;
                  if (v1429)
                  {
                    v779 = *(_QWORD *)v1430;
                    v694 = v1429;
                    if (*(void **)v1430 != v1429)
                    {
                      v780 = *(_QWORD *)v1430;
                      do
                      {
                        v782 = *(void **)(v780 - 24);
                        v780 -= 24;
                        v781 = v782;
                        if (v782)
                        {
                          *(_QWORD *)(v779 - 16) = v781;
                          operator delete(v781);
                        }
                        v779 = v780;
                      }
                      while ((void *)v780 != v778);
                      v694 = v1429;
                    }
                    *(_QWORD *)v1430 = v778;
                    operator delete(v694);
                  }
                  sub_1BE67AC7C((uint64_t)&v1427 + 8, v1428[0]);
                  sub_1BE77D58C((uint64_t)&__dst, *((char **)&__dst + 1));
LABEL_631:
                  v692 -= 224;
                  v623 = (unint64_t)v693-- > 2;
                  if (!v623)
                  {
LABEL_766:
                    v783 = __p.__r_.__value_.__r.__words[0];
                    buf = 0uLL;
                    *(_QWORD *)&v1460 = 0;
                    *(_QWORD *)&__dst = &buf;
                    BYTE8(__dst) = 0;
                    if (a5 < 0)
                      sub_1BE61F930();
                    v552 = v1381;
                    v554 = v1384;
                    v784 = (char *)operator new(__sz);
                    v785 = 0;
                    *(_QWORD *)&buf = v784;
                    *((_QWORD *)&buf + 1) = v784;
                    *(_QWORD *)&v1460 = &v784[224 * a5];
                    do
                    {
                      sub_1BE77D5F4(&v784[v785], v783 + v785);
                      v785 += 224;
                    }
                    while (__sz != v785);
                    v556 = (std::string::size_type)&v784[v785];
                    *((_QWORD *)&buf + 1) = &v784[v785];
                    v670 = __p.__r_.__value_.__r.__words[0];
                    if (!__p.__r_.__value_.__r.__words[0])
                    {
LABEL_416:
                      __p.__r_.__value_.__r.__words[0] = buf;
                      __p.__r_.__value_.__l.__size_ = v556;
                      __p.__r_.__value_.__r.__words[2] = v1460;
                      break;
                    }
LABEL_772:
                    v786 = __p.__r_.__value_.__l.__size_;
                    v555 = (void *)v670;
                    if (__p.__r_.__value_.__l.__size_ == v670)
                    {
LABEL_415:
                      __p.__r_.__value_.__l.__size_ = v670;
                      operator delete(v555);
                      v556 = *((_QWORD *)&buf + 1);
                      goto LABEL_416;
                    }
                    while (2)
                    {
                      if (*(char *)(v786 - 1) < 0)
                      {
                        operator delete(*(void **)(v786 - 24));
                        v788 = *(void **)(v786 - 48);
                        if (v788)
                        {
LABEL_779:
                          *(_QWORD *)(v786 - 40) = v788;
                          operator delete(v788);
                        }
                      }
                      else
                      {
                        v788 = *(void **)(v786 - 48);
                        if (v788)
                          goto LABEL_779;
                      }
                      sub_1BE62033C(v786 - 80, *(_QWORD **)(v786 - 72));
                      v789 = *(void **)(v786 - 104);
                      if (v789)
                      {
                        *(_QWORD *)(v786 - 96) = v789;
                        operator delete(v789);
                      }
                      v790 = *(void **)(v786 - 128);
                      if (v790)
                      {
                        *(_QWORD *)(v786 - 120) = v790;
                        operator delete(v790);
                      }
                      v791 = *(void **)(v786 - 152);
                      if (v791)
                      {
                        *(_QWORD *)(v786 - 144) = v791;
                        operator delete(v791);
                      }
                      v792 = *(_QWORD *)(v786 - 176);
                      if (v792)
                      {
                        v793 = *(_QWORD *)(v786 - 168);
                        v787 = *(void **)(v786 - 176);
                        if (v793 != v792)
                        {
                          v794 = *(_QWORD *)(v786 - 168);
                          do
                          {
                            v796 = *(void **)(v794 - 24);
                            v794 -= 24;
                            v795 = v796;
                            if (v796)
                            {
                              *(_QWORD *)(v793 - 16) = v795;
                              operator delete(v795);
                            }
                            v793 = v794;
                          }
                          while (v794 != v792);
                          v787 = *(void **)(v786 - 176);
                        }
                        *(_QWORD *)(v786 - 168) = v792;
                        operator delete(v787);
                      }
                      sub_1BE67AC7C(v786 - 200, *(_QWORD **)(v786 - 192));
                      sub_1BE77D58C(v786 - 224, *(char **)(v786 - 216));
                      v786 -= 224;
                      if (v786 == v670)
                      {
                        v555 = (void *)__p.__r_.__value_.__r.__words[0];
                        goto LABEL_415;
                      }
                      continue;
                    }
                  }
                  goto LABEL_633;
                }
LABEL_739:
                sub_1BE77D5F4(&buf, v698);
                while (1)
                {
                  v773 = v1393 + 224 * v764;
                  if (v698 != v773)
                  {
                    sub_1BE784720((uint64_t **)v698, *(_QWORD **)v773, (_QWORD *)(v773 + 8));
                    sub_1BE781768(v698 + 24, *(int **)(v1393 + 224 * v764 + 24), (int *)(v1393 + 224 * v764 + 32));
                    sub_1BE784C3C(v698 + 48, *(char ***)(v1393 + 224 * v764 + 48), *(_QWORD *)(v1393 + 224 * v764 + 56), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v1393 + 224 * v764 + 56) - *(_QWORD *)(v1393 + 224 * v764 + 48)) >> 3));
                    sub_1BE66E294((_QWORD *)(v698 + 72), *(char **)(v1393 + 224 * v764 + 72), *(char **)(v1393 + 224 * v764 + 80), (uint64_t)(*(_QWORD *)(v1393 + 224 * v764 + 80) - *(_QWORD *)(v1393 + 224 * v764 + 72)) >> 2);
                    sub_1BE66E294((_QWORD *)(v698 + 96), *(char **)(v1393 + 224 * v764 + 96), *(char **)(v1393 + 224 * v764 + 104), (uint64_t)(*(_QWORD *)(v1393 + 224 * v764 + 104) - *(_QWORD *)(v1393 + 224 * v764 + 96)) >> 2);
                    sub_1BE62037C((_QWORD *)(v698 + 120), *(char **)(v1393 + 224 * v764 + 120), *(char **)(v1393 + 224 * v764 + 128), (uint64_t)(*(_QWORD *)(v1393 + 224 * v764 + 128) - *(_QWORD *)(v1393 + 224 * v764 + 120)) >> 3);
                    sub_1BE77E7C0(v698 + 144, *(_QWORD **)(v1393 + 224 * v764 + 144), (_QWORD *)(v1393 + 224 * v764 + 152));
                    v774 = v1393 + 224 * v764;
                    v775 = *(_DWORD *)(v774 + 168);
                    *(_WORD *)(v698 + 172) = *(_WORD *)(v774 + 172);
                    *(_DWORD *)(v698 + 168) = v775;
                    sub_1BE66E294((_QWORD *)(v698 + 176), *(char **)(v774 + 176), *(char **)(v774 + 184), (uint64_t)(*(_QWORD *)(v774 + 184) - *(_QWORD *)(v774 + 176)) >> 2);
                  }
                  std::string::operator=((std::string *)(v698 + 200), (const std::string *)(v1393 + 224 * v764 + 200));
                  if (!v764)
                  {
LABEL_748:
                    sub_1BE784638(v773, (uint64_t)&buf);
                    sub_1BE77D498((uint64_t)&buf);
                    goto LABEL_749;
                  }
                  v764 = (v764 - 1) >> 1;
                  v776 = *(_QWORD *)(v1393 + 224 * v764 + 80) - *(_QWORD *)(v1393 + 224 * v764 + 72);
                  if (v776)
                  {
                    v770 = *(float *)(v1393 + 224 * v764 + 168) / fabs(sqrt((double)(unint64_t)(v776 >> 2)));
                    v771 = *(_QWORD *)v1465 - (_QWORD)v1464;
                    if (*(void **)v1465 != v1464)
                    {
LABEL_741:
                      v772 = v1472 / fabs(sqrt((double)(unint64_t)(v771 >> 2)));
                      v698 = v773;
                      if (v770 <= v772)
                        goto LABEL_748;
                      continue;
                    }
                  }
                  else
                  {
                    v770 = *(float *)(v1393 + 224 * v764 + 168);
                    v771 = *(_QWORD *)v1465 - (_QWORD)v1464;
                    if (*(void **)v1465 != v1464)
                      goto LABEL_741;
                  }
                  v698 = v773;
                  if (v770 <= v1472)
                    goto LABEL_748;
                }
              }
            }
          }
          ++v554;
          v553 = (char *)v1423[0];
          if (0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5) <= v554)
            goto LABEL_797;
        }
        v560 = objc_msgSend_eosIndex(v1378, v466, v467, v468, v469, v470);
        CoreHandwriting::CHMathBeamDecoder::expand((int8x8_t *)a1, v557, v1377, a5, v554, v560, &__dst);
        v561 = (int *)v1392;
        if (v1392 != (char *)v552)
        {
          do
          {
            while (1)
            {
              v573 = v561[2];
              v574 = v561[1];
              v575 = __dst + 224 * *v561;
              v578 = *(uint64_t **)(v575 + 152);
              v577 = (uint64_t **)(v575 + 152);
              v576 = v578;
              v579 = v577;
              v580 = v577;
              if (v578)
                break;
LABEL_443:
              v582 = operator new(0x28uLL);
              v582[7] = v1421;
              *((_QWORD *)v582 + 4) = 0;
              *(_QWORD *)v582 = 0;
              *((_QWORD *)v582 + 1) = 0;
              *((_QWORD *)v582 + 2) = v580;
              *v579 = (uint64_t *)v582;
              v583 = (uint64_t *)**(v577 - 1);
              v584 = (uint64_t *)v582;
              if (v583)
              {
                *(v577 - 1) = v583;
                v584 = *v579;
              }
              v585 = *v577;
              v1022 = v584 == *v577;
              *((_BYTE *)v584 + 24) = v1022;
              if (!v1022)
              {
                do
                {
                  v586 = v584[2];
                  if (*(_BYTE *)(v586 + 24))
                    break;
                  v587 = *(uint64_t **)(v586 + 16);
                  v588 = *v587;
                  if (*v587 == v586)
                  {
                    v591 = v587[1];
                    if (!v591 || (v592 = *(unsigned __int8 *)(v591 + 24), v589 = (_BYTE *)(v591 + 24), v592))
                    {
                      if (*(uint64_t **)v586 == v584)
                      {
                        *(_BYTE *)(v586 + 24) = 1;
                        *((_BYTE *)v587 + 24) = 0;
                        v595 = *(_QWORD *)(v586 + 8);
                        *v587 = v595;
                        if (v595)
                          goto LABEL_460;
                      }
                      else
                      {
                        v593 = *(uint64_t **)(v586 + 8);
                        v594 = *v593;
                        *(_QWORD *)(v586 + 8) = *v593;
                        if (v594)
                        {
                          *(_QWORD *)(v594 + 16) = v586;
                          v587 = *(uint64_t **)(v586 + 16);
                        }
                        v593[2] = (uint64_t)v587;
                        *(_QWORD *)(*(_QWORD *)(v586 + 16) + 8 * (**(_QWORD **)(v586 + 16) != v586)) = v593;
                        *v593 = v586;
                        *(_QWORD *)(v586 + 16) = v593;
                        v587 = (uint64_t *)v593[2];
                        v586 = *v587;
                        *((_BYTE *)v593 + 24) = 1;
                        *((_BYTE *)v587 + 24) = 0;
                        v595 = *(_QWORD *)(v586 + 8);
                        *v587 = v595;
                        if (v595)
LABEL_460:
                          *(_QWORD *)(v595 + 16) = v587;
                      }
                      *(_QWORD *)(v586 + 16) = v587[2];
                      *(_QWORD *)(v587[2] + 8 * (*(_QWORD *)v587[2] != (_QWORD)v587)) = v586;
                      *(_QWORD *)(v586 + 8) = v587;
LABEL_434:
                      v587[2] = v586;
                      break;
                    }
                  }
                  else if (!v588 || (v590 = *(unsigned __int8 *)(v588 + 24), v589 = (_BYTE *)(v588 + 24), v590))
                  {
                    if (*(uint64_t **)v586 == v584)
                    {
                      v596 = v584[1];
                      *(_QWORD *)v586 = v596;
                      if (v596)
                      {
                        *(_QWORD *)(v596 + 16) = v586;
                        v587 = *(uint64_t **)(v586 + 16);
                      }
                      v584[2] = (uint64_t)v587;
                      *(_QWORD *)(*(_QWORD *)(v586 + 16) + 8 * (**(_QWORD **)(v586 + 16) != v586)) = v584;
                      v584[1] = v586;
                      *(_QWORD *)(v586 + 16) = v584;
                      v587 = (uint64_t *)v584[2];
                    }
                    else
                    {
                      v584 = (uint64_t *)v584[2];
                    }
                    *((_BYTE *)v584 + 24) = 1;
                    *((_BYTE *)v587 + 24) = 0;
                    v586 = v587[1];
                    v597 = *(uint64_t **)v586;
                    v587[1] = *(_QWORD *)v586;
                    if (v597)
                      v597[2] = (uint64_t)v587;
                    *(_QWORD *)(v586 + 16) = v587[2];
                    *(_QWORD *)(v587[2] + 8 * (*(_QWORD *)v587[2] != (_QWORD)v587)) = v586;
                    *(_QWORD *)v586 = v587;
                    goto LABEL_434;
                  }
                  *(_BYTE *)(v586 + 24) = 1;
                  v584 = v587;
                  *((_BYTE *)v587 + 24) = v587 == v585;
                  *v589 = 1;
                }
                while (v587 != v585);
              }
              v577[1] = (uint64_t *)((char *)v577[1] + 1);
              v582[8] = v574;
              v582[9] = v573;
              v561 += 3;
              if (v561 == v552)
                goto LABEL_422;
            }
            while (1)
            {
              while (1)
              {
                v580 = (uint64_t **)v576;
                v581 = *((int *)v576 + 7);
                if (v1421 >= v581)
                  break;
                v576 = *v580;
                v579 = v580;
                if (!*v580)
                  goto LABEL_443;
              }
              if (v1421 <= v581)
                break;
              v576 = v580[1];
              if (!v576)
              {
                v579 = v580 + 1;
                goto LABEL_443;
              }
            }
            *((_DWORD *)v580 + 8) = v574;
            *((_DWORD *)v580 + 9) = v573;
            v561 += 3;
          }
          while (v561 != v552);
        }
LABEL_422:
        v562 = *((_QWORD *)&__dst + 1);
        v563 = __dst;
        v564 = *((_QWORD *)&__dst + 1) - __dst;
        if ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) < 1)
          goto LABEL_544;
        v565 = v564 / 224;
        v566 = __p.__r_.__value_.__l.__size_;
        v567 = __p.__r_.__value_.__r.__words[0];
        v568 = (int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 224;
        v569 = __p.__r_.__value_.__r.__words[0] + 224 * v568;
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 5) < v564 / 224)
        {
          v570 = v568 + v565;
          if ((unint64_t)(v568 + v565) > 0x124924924924924)
            sub_1BE61F930();
          if (0xDB6DB6DB6DB6DB6ELL
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5) > v570)
            v570 = 0xDB6DB6DB6DB6DB6ELL
                 * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5)) >= 0x92492492492492)
            v571 = 0x124924924924924;
          else
            v571 = v570;
          v1461 = &__p.__r_.__value_.__r.__words[2];
          if (v571)
          {
            if (v571 > 0x124924924924924)
              sub_1BE61F100();
            v572 = (char *)operator new(224 * v571);
          }
          else
          {
            v572 = 0;
          }
          v637 = &v572[224 * v568];
          *(_QWORD *)&buf = v572;
          *((_QWORD *)&buf + 1) = v637;
          *(_QWORD *)&v1460 = v637;
          *((_QWORD *)&v1460 + 1) = &v572[224 * v571];
          v638 = 224 * v565;
          v639 = &v637[v638];
          do
          {
            sub_1BE77D5F4(v637, v563);
            v637 += 224;
            v563 += 224;
            v638 -= 224;
          }
          while (v638);
          *(_QWORD *)&v1460 = v639;
          v640 = *((_QWORD *)&buf + 1);
          v641 = __p.__r_.__value_.__r.__words[0];
          while (v569 + v638 != v641)
          {
            v638 -= 224;
            sub_1BE77D5F4((_QWORD *)(v638 + v640), v638 + v569);
          }
          v642 = v640 + v638;
          *((_QWORD *)&buf + 1) = v640 + v638;
          v643 = __p.__r_.__value_.__l.__size_;
          v644 = v1460;
          if (__p.__r_.__value_.__l.__size_ != v569)
          {
            v645 = 0;
            do
            {
              sub_1BE77D5F4((_QWORD *)(v644 + v645), v569 + v645);
              v645 += 224;
            }
            while (v569 + v645 != v643);
            v569 = __p.__r_.__value_.__l.__size_;
            v644 += v645;
          }
          v646 = (void *)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = v642;
          __p.__r_.__value_.__l.__size_ = v644;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)&v1460 + 1);
          if ((void *)v569 == v646)
          {
LABEL_542:
            if (v646)
              operator delete(v646);
            goto LABEL_544;
          }
          while ((*(char *)(v569 - 1) & 0x80000000) == 0)
          {
            v661 = *(void **)(v569 - 48);
            if (v661)
              goto LABEL_572;
LABEL_573:
            sub_1BE62033C(v569 - 80, *(_QWORD **)(v569 - 72));
            v662 = *(void **)(v569 - 104);
            if (v662)
            {
              *(_QWORD *)(v569 - 96) = v662;
              operator delete(v662);
            }
            v663 = *(void **)(v569 - 128);
            if (v663)
            {
              *(_QWORD *)(v569 - 120) = v663;
              operator delete(v663);
            }
            v664 = *(void **)(v569 - 152);
            if (v664)
            {
              *(_QWORD *)(v569 - 144) = v664;
              operator delete(v664);
            }
            v665 = *(_QWORD *)(v569 - 176);
            if (v665)
            {
              v666 = *(_QWORD *)(v569 - 168);
              v660 = *(void **)(v569 - 176);
              if (v666 != v665)
              {
                v667 = *(_QWORD *)(v569 - 168);
                do
                {
                  v669 = *(void **)(v667 - 24);
                  v667 -= 24;
                  v668 = v669;
                  if (v669)
                  {
                    *(_QWORD *)(v666 - 16) = v668;
                    operator delete(v668);
                  }
                  v666 = v667;
                }
                while (v667 != v665);
                v660 = *(void **)(v569 - 176);
              }
              *(_QWORD *)(v569 - 168) = v665;
              operator delete(v660);
            }
            sub_1BE67AC7C(v569 - 200, *(_QWORD **)(v569 - 192));
            sub_1BE77D58C(v569 - 224, *(char **)(v569 - 216));
            v569 -= 224;
            if ((void *)v569 == v646)
              goto LABEL_542;
          }
          operator delete(*(void **)(v569 - 24));
          v661 = *(void **)(v569 - 48);
          if (!v661)
            goto LABEL_573;
LABEL_572:
          *(_QWORD *)(v569 - 40) = v661;
          operator delete(v661);
          goto LABEL_573;
        }
        v1383 = v554;
        v619 = __p.__r_.__value_.__l.__size_ - v569;
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - v569) >> 5) >= v565)
        {
          v620 = __dst + 224 * v565;
          v622 = __p.__r_.__value_.__l.__size_;
        }
        else
        {
          v620 = __dst + 32 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - v569) >> 5);
          if (v620 != *((_QWORD *)&__dst + 1))
          {
            v621 = 0;
            do
            {
              sub_1BE77D5F4((_QWORD *)(v566 + v621), v620 + v621);
              v621 += 224;
            }
            while (v620 + v621 != v562);
            v622 = v566 + v621;
            __p.__r_.__value_.__l.__size_ = v622;
            v623 = v619 < 1;
            v554 = v1383;
            if (!v623)
              goto LABEL_518;
LABEL_544:
            v647 = __dst;
            if (!(_QWORD)__dst)
            {
LABEL_589:
              v559 = __p.__r_.__value_.__l.__size_;
              v552 = v1381;
              goto LABEL_590;
            }
            v648 = *((_QWORD *)&__dst + 1);
            v649 = (void *)__dst;
            if (*((_QWORD *)&__dst + 1) == (_QWORD)__dst)
            {
LABEL_588:
              *((_QWORD *)&__dst + 1) = v647;
              operator delete(v649);
              goto LABEL_589;
            }
            while ((*(char *)(v648 - 1) & 0x80000000) == 0)
            {
              v651 = *(void **)(v648 - 48);
              if (v651)
                goto LABEL_552;
LABEL_553:
              sub_1BE62033C(v648 - 80, *(_QWORD **)(v648 - 72));
              v652 = *(void **)(v648 - 104);
              if (v652)
              {
                *(_QWORD *)(v648 - 96) = v652;
                operator delete(v652);
              }
              v653 = *(void **)(v648 - 128);
              if (v653)
              {
                *(_QWORD *)(v648 - 120) = v653;
                operator delete(v653);
              }
              v654 = *(void **)(v648 - 152);
              if (v654)
              {
                *(_QWORD *)(v648 - 144) = v654;
                operator delete(v654);
              }
              v655 = *(_QWORD *)(v648 - 176);
              if (v655)
              {
                v656 = *(_QWORD *)(v648 - 168);
                v650 = *(void **)(v648 - 176);
                if (v656 != v655)
                {
                  v657 = *(_QWORD *)(v648 - 168);
                  do
                  {
                    v659 = *(void **)(v657 - 24);
                    v657 -= 24;
                    v658 = v659;
                    if (v659)
                    {
                      *(_QWORD *)(v656 - 16) = v658;
                      operator delete(v658);
                    }
                    v656 = v657;
                  }
                  while (v657 != v655);
                  v650 = *(void **)(v648 - 176);
                }
                *(_QWORD *)(v648 - 168) = v655;
                operator delete(v650);
              }
              sub_1BE67AC7C(v648 - 200, *(_QWORD **)(v648 - 192));
              sub_1BE77D58C(v648 - 224, *(char **)(v648 - 216));
              v648 -= 224;
              if (v648 == v647)
              {
                v649 = (void *)__dst;
                goto LABEL_588;
              }
            }
            operator delete(*(void **)(v648 - 24));
            v651 = *(void **)(v648 - 48);
            if (!v651)
              goto LABEL_553;
LABEL_552:
            *(_QWORD *)(v648 - 40) = v651;
            operator delete(v651);
            goto LABEL_553;
          }
          v622 = __p.__r_.__value_.__l.__size_;
          v623 = v619 < 1;
          v554 = v1383;
          if (v623)
            goto LABEL_544;
        }
LABEL_518:
        v624 = 224 * v565;
        v625 = v622 - 224 * v565;
        for (j = (_QWORD *)v622; v625 < v566; j += 28)
        {
          sub_1BE77D5F4(j, v625);
          v625 += 224;
        }
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)j;
        if (v622 != v569 + v624)
        {
          v627 = 0;
          v628 = v567 + 224 * v568 + 32 * ((uint64_t)(v622 - (v569 + v624)) >> 5);
          do
          {
            v629 = v622 + v627;
            v630 = v628 + v627;
            if (v628 != v622)
            {
              sub_1BE784720((uint64_t **)(v629 - 224), *(_QWORD **)(v630 - 224), (_QWORD *)(v630 - 216));
              sub_1BE781768(v622 + v627 - 200, *(int **)(v628 + v627 - 200), (int *)(v628 + v627 - 192));
              sub_1BE784C3C(v622 + v627 - 176, *(char ***)(v628 + v627 - 176), *(_QWORD *)(v628 + v627 - 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v628 + v627 - 168) - *(_QWORD *)(v628 + v627 - 176)) >> 3));
              sub_1BE66E294((_QWORD *)(v622 + v627 - 152), *(char **)(v628 + v627 - 152), *(char **)(v628 + v627 - 144), (uint64_t)(*(_QWORD *)(v628 + v627 - 144) - *(_QWORD *)(v628 + v627 - 152)) >> 2);
              sub_1BE66E294((_QWORD *)(v622 + v627 - 128), *(char **)(v628 + v627 - 128), *(char **)(v628 + v627 - 120), (uint64_t)(*(_QWORD *)(v628 + v627 - 120) - *(_QWORD *)(v628 + v627 - 128)) >> 2);
              sub_1BE62037C((_QWORD *)(v622 + v627 - 104), *(char **)(v628 + v627 - 104), *(char **)(v628 + v627 - 96), (uint64_t)(*(_QWORD *)(v628 + v627 - 96) - *(_QWORD *)(v628 + v627 - 104)) >> 3);
              sub_1BE77E7C0(v622 + v627 - 80, *(_QWORD **)(v628 + v627 - 80), (_QWORD *)(v628 + v627 - 72));
              v631 = v622 + v627;
              v632 = *(_DWORD *)(v628 + v627 - 56);
              *(_WORD *)(v631 - 52) = *(_WORD *)(v628 + v627 - 52);
              *(_DWORD *)(v631 - 56) = v632;
              sub_1BE66E294((_QWORD *)(v622 + v627 - 48), *(char **)(v628 + v627 - 48), *(char **)(v628 + v627 - 40), (uint64_t)(*(_QWORD *)(v628 + v627 - 40) - *(_QWORD *)(v628 + v627 - 48)) >> 2);
            }
            v633 = (const std::string *)(v630 - 24);
            std::string::operator=((std::string *)(v629 - 24), v633);
            v627 -= 224;
          }
          while (&v633[-9].__r_.__value_.__r.__words[2] != (std::string::size_type *)v569);
        }
        v554 = v1383;
        if (v620 != v563)
        {
          v634 = 0;
          do
          {
            if (v563 != v569)
            {
              sub_1BE784720((uint64_t **)(v569 + v634), *(_QWORD **)(v563 + v634), (_QWORD *)(v563 + v634 + 8));
              sub_1BE781768(v569 + v634 + 24, *(int **)(v563 + v634 + 24), (int *)(v563 + v634 + 32));
              sub_1BE784C3C(v569 + v634 + 48, *(char ***)(v563 + v634 + 48), *(_QWORD *)(v563 + v634 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v563 + v634 + 56) - *(_QWORD *)(v563 + v634 + 48)) >> 3));
              sub_1BE66E294((_QWORD *)(v569 + v634 + 72), *(char **)(v563 + v634 + 72), *(char **)(v563 + v634 + 80), (uint64_t)(*(_QWORD *)(v563 + v634 + 80) - *(_QWORD *)(v563 + v634 + 72)) >> 2);
              sub_1BE66E294((_QWORD *)(v569 + v634 + 96), *(char **)(v563 + v634 + 96), *(char **)(v563 + v634 + 104), (uint64_t)(*(_QWORD *)(v563 + v634 + 104) - *(_QWORD *)(v563 + v634 + 96)) >> 2);
              sub_1BE62037C((_QWORD *)(v569 + v634 + 120), *(char **)(v563 + v634 + 120), *(char **)(v563 + v634 + 128), (uint64_t)(*(_QWORD *)(v563 + v634 + 128) - *(_QWORD *)(v563 + v634 + 120)) >> 3);
              sub_1BE77E7C0(v569 + v634 + 144, *(_QWORD **)(v563 + v634 + 144), (_QWORD *)(v563 + v634 + 152));
              v635 = v569 + v634;
              v636 = *(_DWORD *)(v563 + v634 + 168);
              *(_WORD *)(v635 + 172) = *(_WORD *)(v563 + v634 + 172);
              *(_DWORD *)(v635 + 168) = v636;
              sub_1BE66E294((_QWORD *)(v569 + v634 + 176), *(char **)(v563 + v634 + 176), *(char **)(v563 + v634 + 184), (uint64_t)(*(_QWORD *)(v563 + v634 + 184) - *(_QWORD *)(v563 + v634 + 176)) >> 2);
            }
            std::string::operator=((std::string *)(v569 + v634 + 200), (const std::string *)(v563 + v634 + 200));
            v634 += 224;
          }
          while (v563 + v634 != v620);
        }
        goto LABEL_544;
      }
    }
LABEL_797:
    if (v1392)
      operator delete(v1392);

    objc_autoreleasePoolPop(context);
    v803 = __p.__r_.__value_.__l.__size_;
    v802 = __p.__r_.__value_.__r.__words[0];
    v804 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5);
    v805 = (uint64_t)v1423[2];
    v806 = (char *)v1423[0];
    if (0x6DB6DB6DB6DB6DB7 * (((char *)v1423[2] - (char *)v1423[0]) >> 5) >= v804)
    {
      v819 = (char *)v1423[1];
      v820 = 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5);
      if (v820 >= v804)
      {
        if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
        {
          v826 = (char *)v1423[0];
        }
        else
        {
          v826 = (char *)v1423[0];
          do
          {
            sub_1BE784638((uint64_t)v806, v802);
            v802 += 224;
            v806 += 224;
            v826 += 224;
          }
          while (v802 != v803);
          v819 = (char *)v1423[1];
        }
        while (v819 != v826)
          v819 = (char *)sub_1BE77D498((uint64_t)(v819 - 224));
      }
      else
      {
        if (v1423[1] != v1423[0])
        {
          v821 = 32 * (((char *)v1423[1] - (char *)v1423[0]) >> 5);
          v822 = __p.__r_.__value_.__r.__words[0];
          do
          {
            sub_1BE784638((uint64_t)v806, v822);
            v822 += 224;
            v806 += 224;
            v821 -= 224;
          }
          while (v821);
          v806 = (char *)v1423[1];
        }
        v823 = v802 + 224 * v820;
        v824 = v806;
        if (v823 != v803)
        {
          v825 = 0;
          do
          {
            sub_1BE77D5F4(&v806[v825], v823 + v825);
            v825 += 224;
          }
          while (v823 + v825 != v803);
          v824 = &v806[v825];
        }
        v826 = v824;
      }
      goto LABEL_853;
    }
    if (v1423[0])
    {
      v807 = (char *)v1423[1];
      v808 = v1423[0];
      if (v1423[1] == v1423[0])
      {
LABEL_838:
        v1423[1] = v806;
        operator delete(v808);
        v805 = 0;
        memset(v1423, 0, sizeof(v1423));
        goto LABEL_839;
      }
      while ((*(v807 - 1) & 0x80000000) == 0)
      {
        v810 = (void *)*((_QWORD *)v807 - 6);
        if (v810)
          goto LABEL_808;
LABEL_809:
        sub_1BE62033C((uint64_t)(v807 - 80), *((_QWORD **)v807 - 9));
        v811 = (void *)*((_QWORD *)v807 - 13);
        if (v811)
        {
          *((_QWORD *)v807 - 12) = v811;
          operator delete(v811);
        }
        v812 = (void *)*((_QWORD *)v807 - 16);
        if (v812)
        {
          *((_QWORD *)v807 - 15) = v812;
          operator delete(v812);
        }
        v813 = (void *)*((_QWORD *)v807 - 19);
        if (v813)
        {
          *((_QWORD *)v807 - 18) = v813;
          operator delete(v813);
        }
        v814 = *((_QWORD *)v807 - 22);
        if (v814)
        {
          v815 = *((_QWORD *)v807 - 21);
          v809 = (void *)*((_QWORD *)v807 - 22);
          if (v815 != v814)
          {
            v816 = *((_QWORD *)v807 - 21);
            do
            {
              v818 = *(void **)(v816 - 24);
              v816 -= 24;
              v817 = v818;
              if (v818)
              {
                *(_QWORD *)(v815 - 16) = v817;
                operator delete(v817);
              }
              v815 = v816;
            }
            while (v816 != v814);
            v809 = (void *)*((_QWORD *)v807 - 22);
          }
          *((_QWORD *)v807 - 21) = v814;
          operator delete(v809);
        }
        sub_1BE67AC7C((uint64_t)(v807 - 200), *((_QWORD **)v807 - 24));
        sub_1BE77D58C((uint64_t)(v807 - 224), *((char **)v807 - 27));
        v807 -= 224;
        if (v807 == v806)
        {
          v808 = v1423[0];
          goto LABEL_838;
        }
      }
      operator delete(*((void **)v807 - 3));
      v810 = (void *)*((_QWORD *)v807 - 6);
      if (!v810)
        goto LABEL_809;
LABEL_808:
      *((_QWORD *)v807 - 5) = v810;
      operator delete(v810);
      goto LABEL_809;
    }
LABEL_839:
    if (v804 > 0x124924924924924)
      goto LABEL_1671;
    v827 = 0x6DB6DB6DB6DB6DB7 * (v805 >> 5);
    v828 = 2 * v827;
    if (2 * v827 <= v804)
      v828 = v804;
    v829 = v827 >= 0x92492492492492 ? 0x124924924924924 : v828;
    if (v829 > 0x124924924924924)
LABEL_1671:
      sub_1BE61F930();
    v826 = (char *)operator new(224 * v829);
    v1423[0] = v826;
    v1423[1] = v826;
    v1423[2] = &v826[224 * v829];
    if (v802 != v803)
    {
      v830 = 0;
      do
      {
        sub_1BE77D5F4(&v826[v830], v802 + v830);
        v830 += 224;
      }
      while (v802 + v830 != v803);
      v826 += v830;
    }
LABEL_853:
    v1423[1] = v826;
    v831 = (char *)v1423[0];
    if (v826 == v1423[0])
      goto LABEL_1343;
    v832 = 0;
    do
    {
      v833 = &v831[224 * v832];
      if (v833[172])
        goto LABEL_856;
      v834 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v797, v798, v799, v800, v801);
      v835 = strlen(v834);
      if (v835 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v836 = v835;
      if (v835 >= 0x17)
      {
        v842 = (v835 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v835 | 7) != 0x17)
          v842 = v835 | 7;
        v843 = v842 + 1;
        p_dst = (__int128 *)operator new(v842 + 1);
        *(_QWORD *)&v1427 = v843 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        *((_QWORD *)&__dst + 1) = v836;
      }
      else
      {
        BYTE7(v1427) = v835;
        p_dst = &__dst;
        if (!v835)
        {
          LOBYTE(__dst) = 0;
          v839 = (void **)(v833 + 8);
          v838 = (_QWORD *)*((_QWORD *)v833 + 1);
          v840 = v833 + 8;
          v841 = v833 + 8;
          if (!v838)
            goto LABEL_891;
          goto LABEL_867;
        }
      }
      memmove(p_dst, v834, v836);
      *((_BYTE *)p_dst + v836) = 0;
      v839 = (void **)(v833 + 8);
      v838 = (_QWORD *)*((_QWORD *)v833 + 1);
      v840 = v833 + 8;
      v841 = v833 + 8;
      if (!v838)
      {
LABEL_891:
        v862 = operator new(0x40uLL);
        *((_OWORD *)v862 + 2) = __dst;
        v863 = v1427;
        *(_QWORD *)&v1427 = 0;
        __dst = 0uLL;
        *((_QWORD *)v862 + 6) = v863;
        *((_QWORD *)v862 + 7) = 0;
        *(_QWORD *)v862 = 0;
        *((_QWORD *)v862 + 1) = 0;
        *((_QWORD *)v862 + 2) = v841;
        *v840 = v862;
        v864 = **(_QWORD **)v833;
        v865 = v862;
        if (v864)
        {
          *(_QWORD *)v833 = v864;
          v865 = (_BYTE *)*v840;
        }
        v866 = *v839;
        v1022 = v865 == *v839;
        v865[24] = v1022;
        if (!v1022)
        {
          do
          {
            v867 = *((_QWORD *)v865 + 2);
            if (*(_BYTE *)(v867 + 24))
              break;
            v868 = *(_BYTE **)(v867 + 16);
            v869 = *(_QWORD *)v868;
            if (*(_QWORD *)v868 == v867)
            {
              v872 = *((_QWORD *)v868 + 1);
              if (!v872 || (v873 = *(unsigned __int8 *)(v872 + 24), v870 = (_BYTE *)(v872 + 24), v873))
              {
                if (*(_BYTE **)v867 == v865)
                {
                  *(_BYTE *)(v867 + 24) = 1;
                  v868[24] = 0;
                  v876 = *(_QWORD *)(v867 + 8);
                  *(_QWORD *)v868 = v876;
                  if (v876)
                    goto LABEL_908;
                }
                else
                {
                  v874 = *(uint64_t **)(v867 + 8);
                  v875 = *v874;
                  *(_QWORD *)(v867 + 8) = *v874;
                  if (v875)
                  {
                    *(_QWORD *)(v875 + 16) = v867;
                    v868 = *(_BYTE **)(v867 + 16);
                  }
                  v874[2] = (uint64_t)v868;
                  *(_QWORD *)(*(_QWORD *)(v867 + 16) + 8 * (**(_QWORD **)(v867 + 16) != v867)) = v874;
                  *v874 = v867;
                  *(_QWORD *)(v867 + 16) = v874;
                  v868 = (_BYTE *)v874[2];
                  v867 = *(_QWORD *)v868;
                  *((_BYTE *)v874 + 24) = 1;
                  v868[24] = 0;
                  v876 = *(_QWORD *)(v867 + 8);
                  *(_QWORD *)v868 = v876;
                  if (v876)
LABEL_908:
                    *(_QWORD *)(v876 + 16) = v868;
                }
                *(_QWORD *)(v867 + 16) = *((_QWORD *)v868 + 2);
                *(_QWORD *)(*((_QWORD *)v868 + 2) + 8 * (**((_QWORD **)v868 + 2) != (_QWORD)v868)) = v867;
                *(_QWORD *)(v867 + 8) = v868;
LABEL_919:
                *((_QWORD *)v868 + 2) = v867;
                break;
              }
            }
            else if (!v869 || (v871 = *(unsigned __int8 *)(v869 + 24), v870 = (_BYTE *)(v869 + 24), v871))
            {
              if (*(_BYTE **)v867 == v865)
              {
                v877 = *((_QWORD *)v865 + 1);
                *(_QWORD *)v867 = v877;
                if (v877)
                {
                  *(_QWORD *)(v877 + 16) = v867;
                  v868 = *(_BYTE **)(v867 + 16);
                }
                *((_QWORD *)v865 + 2) = v868;
                *(_QWORD *)(*(_QWORD *)(v867 + 16) + 8 * (**(_QWORD **)(v867 + 16) != v867)) = v865;
                *((_QWORD *)v865 + 1) = v867;
                *(_QWORD *)(v867 + 16) = v865;
                v868 = (_BYTE *)*((_QWORD *)v865 + 2);
              }
              else
              {
                v865 = (_BYTE *)*((_QWORD *)v865 + 2);
              }
              v865[24] = 1;
              v868[24] = 0;
              v867 = *((_QWORD *)v868 + 1);
              v878 = *(_BYTE **)v867;
              *((_QWORD *)v868 + 1) = *(_QWORD *)v867;
              if (v878)
                *((_QWORD *)v878 + 2) = v868;
              *(_QWORD *)(v867 + 16) = *((_QWORD *)v868 + 2);
              *(_QWORD *)(*((_QWORD *)v868 + 2) + 8 * (**((_QWORD **)v868 + 2) != (_QWORD)v868)) = v867;
              *(_QWORD *)v867 = v868;
              goto LABEL_919;
            }
            *(_BYTE *)(v867 + 24) = 1;
            v865 = v868;
            v868[24] = v868 == v866;
            *v870 = 1;
          }
          while (v868 != v866);
        }
        ++*((_QWORD *)v833 + 2);
        goto LABEL_921;
      }
LABEL_867:
      if ((SBYTE7(v1427) & 0x80u) == 0)
        v844 = BYTE7(v1427);
      else
        v844 = *((_QWORD *)&__dst + 1);
      if ((SBYTE7(v1427) & 0x80u) == 0)
        v845 = &__dst;
      else
        v845 = (__int128 *)__dst;
      while (1)
      {
        while (1)
        {
          v841 = v838;
          v848 = (const void *)v838[4];
          v846 = v838 + 4;
          v847 = v848;
          v849 = *((char *)v846 + 23);
          if (v849 >= 0)
            v850 = *((unsigned __int8 *)v846 + 23);
          else
            v850 = v846[1];
          if (v849 >= 0)
            v851 = v846;
          else
            v851 = v847;
          if (v850 >= v844)
            v852 = v844;
          else
            v852 = v850;
          v853 = memcmp(v845, v851, v852);
          v854 = v844 < v850;
          if (v853)
            v854 = v853 < 0;
          if (!v854)
            break;
          v838 = (_QWORD *)*v841;
          v840 = v841;
          if (!*v841)
            goto LABEL_891;
        }
        v855 = memcmp(v851, v845, v852);
        v861 = v850 < v844;
        if (v855)
          v861 = v855 < 0;
        if (!v861)
          break;
        v838 = (_QWORD *)v841[1];
        if (!v838)
        {
          v840 = v841 + 1;
          goto LABEL_891;
        }
      }
      v862 = v841;
LABEL_921:
      objc_msgSend_shape(*((void **)v862 + 7), v856, v857, v858, v859, v860);
      v1406 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v1406, v879, 1, v880, v881, v882);
      v883 = (void *)objc_claimAutoreleasedReturnValue();
      v889 = objc_msgSend_intValue(v883, v884, v885, v886, v887, v888);
      v890 = (char *)v1423[0];
      v896 = (const char *)objc_msgSend_UTF8String(CFSTR("past_attention_weights"), v891, v892, v893, v894, v895);
      v897 = strlen(v896);
      if (v897 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v898 = v897;
      if (v897 >= 0x17)
      {
        v900 = (v897 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v897 | 7) != 0x17)
          v900 = v897 | 7;
        v901 = v900 + 1;
        v899 = (__int128 *)operator new(v900 + 1);
        *(_QWORD *)&v1446 = v901 | 0x8000000000000000;
        *(_QWORD *)&v1445 = v899;
        *((_QWORD *)&v1445 + 1) = v898;
LABEL_928:
        memmove(v899, v896, v898);
        goto LABEL_929;
      }
      BYTE7(v1446) = v897;
      v899 = &v1445;
      if (v897)
        goto LABEL_928;
LABEL_929:
      *((_BYTE *)v899 + v898) = 0;
      v1414 = v832;
      v902 = &v890[224 * v832];
      v904 = (void **)(v902 + 8);
      v903 = (_QWORD *)*((_QWORD *)v902 + 1);
      v905 = v902 + 8;
      v906 = v902 + 8;
      if (v903)
      {
        if ((SBYTE7(v1446) & 0x80u) == 0)
          v907 = BYTE7(v1446);
        else
          v907 = *((_QWORD *)&v1445 + 1);
        if ((SBYTE7(v1446) & 0x80u) == 0)
          v908 = &v1445;
        else
          v908 = (__int128 *)v1445;
        while (1)
        {
          while (1)
          {
            v906 = v903;
            v911 = (const void *)v903[4];
            v909 = v903 + 4;
            v910 = v911;
            v912 = *((char *)v909 + 23);
            if (v912 >= 0)
              v913 = *((unsigned __int8 *)v909 + 23);
            else
              v913 = v909[1];
            if (v912 >= 0)
              v914 = v909;
            else
              v914 = v910;
            if (v913 >= v907)
              v915 = v907;
            else
              v915 = v913;
            v916 = memcmp(v908, v914, v915);
            v917 = v907 < v913;
            if (v916)
              v917 = v916 < 0;
            if (!v917)
              break;
            v903 = (_QWORD *)*v906;
            v905 = v906;
            if (!*v906)
              goto LABEL_954;
          }
          v918 = memcmp(v914, v908, v915);
          v924 = v913 < v907;
          if (v918)
            v924 = v918 < 0;
          if (!v924)
            break;
          v903 = (_QWORD *)v906[1];
          if (!v903)
          {
            v905 = v906 + 1;
            goto LABEL_954;
          }
        }
        v925 = v906;
      }
      else
      {
LABEL_954:
        v925 = operator new(0x40uLL);
        *((_OWORD *)v925 + 2) = v1445;
        v926 = v1446;
        *(_QWORD *)&v1446 = 0;
        v1445 = 0uLL;
        *((_QWORD *)v925 + 6) = v926;
        *((_QWORD *)v925 + 7) = 0;
        *(_QWORD *)v925 = 0;
        *((_QWORD *)v925 + 1) = 0;
        *((_QWORD *)v925 + 2) = v906;
        *v905 = v925;
        v927 = **(_QWORD **)v902;
        v928 = v925;
        if (v927)
        {
          *(_QWORD *)v902 = v927;
          v928 = (_BYTE *)*v905;
        }
        v929 = *v904;
        v1022 = v928 == *v904;
        v928[24] = v1022;
        if (!v1022)
        {
          do
          {
            v930 = *((_QWORD *)v928 + 2);
            if (*(_BYTE *)(v930 + 24))
              break;
            v931 = *(_BYTE **)(v930 + 16);
            v932 = *(_QWORD *)v931;
            if (*(_QWORD *)v931 == v930)
            {
              v935 = *((_QWORD *)v931 + 1);
              if (!v935 || (v936 = *(unsigned __int8 *)(v935 + 24), v933 = (_BYTE *)(v935 + 24), v936))
              {
                if (*(_BYTE **)v930 == v928)
                {
                  *(_BYTE *)(v930 + 24) = 1;
                  v931[24] = 0;
                  v939 = *(_QWORD *)(v930 + 8);
                  *(_QWORD *)v931 = v939;
                  if (v939)
                    goto LABEL_971;
                }
                else
                {
                  v937 = *(uint64_t **)(v930 + 8);
                  v938 = *v937;
                  *(_QWORD *)(v930 + 8) = *v937;
                  if (v938)
                  {
                    *(_QWORD *)(v938 + 16) = v930;
                    v931 = *(_BYTE **)(v930 + 16);
                  }
                  v937[2] = (uint64_t)v931;
                  *(_QWORD *)(*(_QWORD *)(v930 + 16) + 8 * (**(_QWORD **)(v930 + 16) != v930)) = v937;
                  *v937 = v930;
                  *(_QWORD *)(v930 + 16) = v937;
                  v931 = (_BYTE *)v937[2];
                  v930 = *(_QWORD *)v931;
                  *((_BYTE *)v937 + 24) = 1;
                  v931[24] = 0;
                  v939 = *(_QWORD *)(v930 + 8);
                  *(_QWORD *)v931 = v939;
                  if (v939)
LABEL_971:
                    *(_QWORD *)(v939 + 16) = v931;
                }
                *(_QWORD *)(v930 + 16) = *((_QWORD *)v931 + 2);
                *(_QWORD *)(*((_QWORD *)v931 + 2) + 8 * (**((_QWORD **)v931 + 2) != (_QWORD)v931)) = v930;
                *(_QWORD *)(v930 + 8) = v931;
LABEL_982:
                *((_QWORD *)v931 + 2) = v930;
                break;
              }
            }
            else if (!v932 || (v934 = *(unsigned __int8 *)(v932 + 24), v933 = (_BYTE *)(v932 + 24), v934))
            {
              if (*(_BYTE **)v930 == v928)
              {
                v940 = *((_QWORD *)v928 + 1);
                *(_QWORD *)v930 = v940;
                if (v940)
                {
                  *(_QWORD *)(v940 + 16) = v930;
                  v931 = *(_BYTE **)(v930 + 16);
                }
                *((_QWORD *)v928 + 2) = v931;
                *(_QWORD *)(*(_QWORD *)(v930 + 16) + 8 * (**(_QWORD **)(v930 + 16) != v930)) = v928;
                *((_QWORD *)v928 + 1) = v930;
                *(_QWORD *)(v930 + 16) = v928;
                v931 = (_BYTE *)*((_QWORD *)v928 + 2);
              }
              else
              {
                v928 = (_BYTE *)*((_QWORD *)v928 + 2);
              }
              v928[24] = 1;
              v931[24] = 0;
              v930 = *((_QWORD *)v931 + 1);
              v941 = *(_BYTE **)v930;
              *((_QWORD *)v931 + 1) = *(_QWORD *)v930;
              if (v941)
                *((_QWORD *)v941 + 2) = v931;
              *(_QWORD *)(v930 + 16) = *((_QWORD *)v931 + 2);
              *(_QWORD *)(*((_QWORD *)v931 + 2) + 8 * (**((_QWORD **)v931 + 2) != (_QWORD)v931)) = v930;
              *(_QWORD *)v930 = v931;
              goto LABEL_982;
            }
            *(_BYTE *)(v930 + 24) = 1;
            v928 = v931;
            v931[24] = v931 == v929;
            *v933 = 1;
          }
          while (v931 != v929);
        }
        ++*((_QWORD *)v902 + 2);
      }
      objc_msgSend_shape(*((void **)v925 + 7), v919, v920, v921, v922, v923);
      v942 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v942, v943, 2, v944, v945, v946);
      v947 = (void *)objc_claimAutoreleasedReturnValue();
      v953 = objc_msgSend_intValue(v947, v948, v949, v950, v951, v952);
      buf = 0uLL;
      *(_QWORD *)&v1460 = 0;
      v954 = operator new(0x10uLL);
      *(_QWORD *)&v1460 = v954 + 2;
      *v954 = v889;
      v954[1] = v953;
      *(_QWORD *)&buf = v954;
      *((_QWORD *)&buf + 1) = v954 + 2;

      if (SBYTE7(v1446) < 0)
        operator delete((void *)v1445);

      if (SBYTE7(v1427) < 0)
        operator delete((void *)__dst);
      v960 = (char *)v1423[0] + 224 * v1414;
      v961 = *(_DWORD *)(*((_QWORD *)v960 + 10) - 4);
      v962 = *(int8x8_t *)a1;
      v963 = (const char *)objc_msgSend_UTF8String(CFSTR("attention_weights"), v955, v956, v957, v958, v959);
      v964 = strlen(v963);
      if (v964 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v965 = v964;
      if (v964 >= 0x17)
      {
        v971 = (v964 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v964 | 7) != 0x17)
          v971 = v964 | 7;
        v972 = v971 + 1;
        v966 = (__int128 *)operator new(v971 + 1);
        *(_QWORD *)&v1446 = v972 | 0x8000000000000000;
        *(_QWORD *)&v1445 = v966;
        *((_QWORD *)&v1445 + 1) = v965;
      }
      else
      {
        BYTE7(v1446) = v964;
        v966 = &v1445;
        if (!v964)
        {
          LOBYTE(v1445) = 0;
          v968 = (void **)(v960 + 8);
          v967 = (_QWORD *)*((_QWORD *)v960 + 1);
          v969 = v960 + 8;
          v970 = v960 + 8;
          if (!v967)
            goto LABEL_1021;
          goto LABEL_997;
        }
      }
      memmove(v966, v963, v965);
      *((_BYTE *)v966 + v965) = 0;
      v968 = (void **)(v960 + 8);
      v967 = (_QWORD *)*((_QWORD *)v960 + 1);
      v969 = v960 + 8;
      v970 = v960 + 8;
      if (!v967)
      {
LABEL_1021:
        v986 = operator new(0x40uLL);
        v832 = v1414;
        *((_OWORD *)v986 + 2) = v1445;
        v987 = v1446;
        *(_QWORD *)&v1446 = 0;
        v1445 = 0uLL;
        *((_QWORD *)v986 + 6) = v987;
        *((_QWORD *)v986 + 7) = 0;
        *(_QWORD *)v986 = 0;
        *((_QWORD *)v986 + 1) = 0;
        *((_QWORD *)v986 + 2) = v970;
        *v969 = v986;
        v988 = **(_QWORD **)v960;
        v989 = v986;
        if (v988)
        {
          *(_QWORD *)v960 = v988;
          v989 = (_BYTE *)*v969;
        }
        v990 = *v968;
        v1022 = v989 == *v968;
        v989[24] = v1022;
        if (!v1022)
        {
          do
          {
            v991 = *((_QWORD *)v989 + 2);
            if (*(_BYTE *)(v991 + 24))
              break;
            v992 = *(_BYTE **)(v991 + 16);
            v993 = *(_QWORD *)v992;
            if (*(_QWORD *)v992 == v991)
            {
              v996 = *((_QWORD *)v992 + 1);
              if (!v996 || (v997 = *(unsigned __int8 *)(v996 + 24), v994 = (_BYTE *)(v996 + 24), v997))
              {
                if (*(_BYTE **)v991 == v989)
                {
                  *(_BYTE *)(v991 + 24) = 1;
                  v992[24] = 0;
                  v1000 = *(_QWORD *)(v991 + 8);
                  *(_QWORD *)v992 = v1000;
                  if (v1000)
                    goto LABEL_1038;
                }
                else
                {
                  v998 = *(uint64_t **)(v991 + 8);
                  v999 = *v998;
                  *(_QWORD *)(v991 + 8) = *v998;
                  if (v999)
                  {
                    *(_QWORD *)(v999 + 16) = v991;
                    v992 = *(_BYTE **)(v991 + 16);
                  }
                  v998[2] = (uint64_t)v992;
                  *(_QWORD *)(*(_QWORD *)(v991 + 16) + 8 * (**(_QWORD **)(v991 + 16) != v991)) = v998;
                  *v998 = v991;
                  *(_QWORD *)(v991 + 16) = v998;
                  v992 = (_BYTE *)v998[2];
                  v991 = *(_QWORD *)v992;
                  *((_BYTE *)v998 + 24) = 1;
                  v992[24] = 0;
                  v1000 = *(_QWORD *)(v991 + 8);
                  *(_QWORD *)v992 = v1000;
                  if (v1000)
LABEL_1038:
                    *(_QWORD *)(v1000 + 16) = v992;
                }
                *(_QWORD *)(v991 + 16) = *((_QWORD *)v992 + 2);
                *(_QWORD *)(*((_QWORD *)v992 + 2) + 8 * (**((_QWORD **)v992 + 2) != (_QWORD)v992)) = v991;
                *(_QWORD *)(v991 + 8) = v992;
LABEL_1049:
                *((_QWORD *)v992 + 2) = v991;
                break;
              }
            }
            else if (!v993 || (v995 = *(unsigned __int8 *)(v993 + 24), v994 = (_BYTE *)(v993 + 24), v995))
            {
              if (*(_BYTE **)v991 == v989)
              {
                v1001 = *((_QWORD *)v989 + 1);
                *(_QWORD *)v991 = v1001;
                if (v1001)
                {
                  *(_QWORD *)(v1001 + 16) = v991;
                  v992 = *(_BYTE **)(v991 + 16);
                }
                *((_QWORD *)v989 + 2) = v992;
                *(_QWORD *)(*(_QWORD *)(v991 + 16) + 8 * (**(_QWORD **)(v991 + 16) != v991)) = v989;
                *((_QWORD *)v989 + 1) = v991;
                *(_QWORD *)(v991 + 16) = v989;
                v992 = (_BYTE *)*((_QWORD *)v989 + 2);
              }
              else
              {
                v989 = (_BYTE *)*((_QWORD *)v989 + 2);
              }
              v989[24] = 1;
              v992[24] = 0;
              v991 = *((_QWORD *)v992 + 1);
              v1002 = *(_BYTE **)v991;
              *((_QWORD *)v992 + 1) = *(_QWORD *)v991;
              if (v1002)
                *((_QWORD *)v1002 + 2) = v992;
              *(_QWORD *)(v991 + 16) = *((_QWORD *)v992 + 2);
              *(_QWORD *)(*((_QWORD *)v992 + 2) + 8 * (**((_QWORD **)v992 + 2) != (_QWORD)v992)) = v991;
              *(_QWORD *)v991 = v992;
              goto LABEL_1049;
            }
            *(_BYTE *)(v991 + 24) = 1;
            v989 = v992;
            v992[24] = v992 == v990;
            *v994 = 1;
          }
          while (v992 != v990);
        }
        ++*((_QWORD *)v960 + 2);
        goto LABEL_1051;
      }
LABEL_997:
      if ((SBYTE7(v1446) & 0x80u) == 0)
        v973 = BYTE7(v1446);
      else
        v973 = *((_QWORD *)&v1445 + 1);
      if ((SBYTE7(v1446) & 0x80u) == 0)
        v974 = &v1445;
      else
        v974 = (__int128 *)v1445;
      while (1)
      {
        while (1)
        {
          v970 = v967;
          v977 = (const void *)v967[4];
          v975 = v967 + 4;
          v976 = v977;
          v978 = *((char *)v975 + 23);
          if (v978 >= 0)
            v979 = *((unsigned __int8 *)v975 + 23);
          else
            v979 = v975[1];
          if (v978 >= 0)
            v980 = v975;
          else
            v980 = v976;
          if (v979 >= v973)
            v981 = v973;
          else
            v981 = v979;
          v982 = memcmp(v974, v980, v981);
          v983 = v973 < v979;
          if (v982)
            v983 = v982 < 0;
          if (!v983)
            break;
          v967 = (_QWORD *)*v970;
          v969 = v970;
          if (!*v970)
            goto LABEL_1021;
        }
        v984 = memcmp(v980, v974, v981);
        v985 = v979 < v973;
        if (v984)
          v985 = v984 < 0;
        if (!v985)
          break;
        v967 = (_QWORD *)v970[1];
        if (!v967)
        {
          v969 = v970 + 1;
          goto LABEL_1021;
        }
      }
      v986 = v970;
      v832 = v1414;
LABEL_1051:
      v1003 = objc_retainAutorelease(*((id *)v986 + 7));
      v1009 = objc_msgSend_dataPointer(v1003, v1004, v1005, v1006, v1007, v1008);
      *((_QWORD *)&__dst + 1) = 0;
      *(_QWORD *)&v1427 = 0;
      *(_QWORD *)&__dst = (char *)&__dst + 8;
      v1010 = *v1382;
      if (!*v1382)
        goto LABEL_1090;
      v1011 = *(_QWORD *)&v962 + 24 * v961;
      v1012 = *(char *)(v1011 + 23);
      v1013 = v1012 >= 0 ? *(unsigned __int8 *)(v1011 + 23) : *(_QWORD *)(v1011 + 8);
      v1014 = v1012 >= 0 ? (const void *)(*(_QWORD *)&v962 + 24 * v961) : *(const void **)v1011;
      v1015 = (uint64_t *)(a1 + 40);
      do
      {
        v1016 = *(char *)(v1010 + 55);
        if (v1016 >= 0)
          v1017 = *(unsigned __int8 *)(v1010 + 55);
        else
          v1017 = *(_QWORD *)(v1010 + 40);
        if (v1016 >= 0)
          v1018 = (const void *)(v1010 + 32);
        else
          v1018 = *(const void **)(v1010 + 32);
        if (v1013 >= v1017)
          v1019 = v1017;
        else
          v1019 = v1013;
        v1020 = memcmp(v1018, v1014, v1019);
        v1021 = v1017 < v1013;
        if (v1020)
          v1021 = v1020 < 0;
        v1022 = !v1021;
        if (v1021)
          v1023 = (uint64_t *)(v1010 + 8);
        else
          v1023 = (uint64_t *)v1010;
        if (v1022)
          v1015 = (uint64_t *)v1010;
        v1010 = *v1023;
      }
      while (*v1023);
      if (v1015 == v1382)
        goto LABEL_1090;
      v1026 = (const void *)v1015[4];
      v1025 = v1015 + 4;
      v1024 = v1026;
      v1027 = *((char *)v1025 + 23);
      if (v1027 >= 0)
        v1028 = *((unsigned __int8 *)v1025 + 23);
      else
        v1028 = v1025[1];
      if (v1027 >= 0)
        v1029 = v1025;
      else
        v1029 = v1024;
      if (v1028 >= v1013)
        v1030 = v1013;
      else
        v1030 = v1028;
      v1031 = memcmp(v1014, v1029, v1030);
      v1032 = v1013 >= v1028;
      if (v1031)
        v1032 = v1031 >= 0;
      if (!v1032)
      {
LABEL_1090:
        v1033 = 0;
        v1034 = *v1395;
        while (1)
        {
          v1035 = sub_1BE7C1B38(v1034, (uint64_t)v1395, (uint64_t **)&__dst, v1421, a4, v1009, (unint64_t **)&buf);
          if (v1035 <= 0.0)
          {
            v1034 = v1034 / 10.0;
          }
          else
          {
            v1036 = (_OWORD *)__dst;
            if ((__int128 *)__dst != (__int128 *)((char *)&__dst + 8))
            {
              v1037 = v1427;
              v1038 = (uint64_t **)&__dst + 1;
              do
              {
                v1039 = *((_DWORD *)v1036 + 8);
                v1040 = (uint64_t **)&__dst + 1;
                if (*((_QWORD *)&__dst + 1))
                {
                  v1041 = (char *)*((_QWORD *)&__dst + 1);
                  while (1)
                  {
                    while (1)
                    {
                      v1038 = (uint64_t **)v1041;
                      v1042 = *((_DWORD *)v1041 + 8);
                      if (v1039 >= v1042)
                        break;
                      v1041 = (char *)*v1038;
                      v1040 = v1038;
                      if (!*v1038)
                        goto LABEL_1102;
                    }
                    if (v1042 >= v1039)
                      break;
                    v1041 = (char *)v1038[1];
                    if (!v1041)
                    {
                      v1040 = v1038 + 1;
                      goto LABEL_1102;
                    }
                  }
                  *(float *)v1038[5] = *(float *)v1038[5] / v1035;
                  v1056 = (_QWORD *)*((_QWORD *)v1036 + 1);
                  if (!v1056)
                  {
                    do
                    {
LABEL_1135:
                      v1059 = (_OWORD *)*((_QWORD *)v1036 + 2);
                      v1022 = *(_QWORD *)v1059 == (_QWORD)v1036;
                      v1036 = v1059;
                    }
                    while (!v1022);
                    goto LABEL_1094;
                  }
                }
                else
                {
LABEL_1102:
                  v1043 = operator new(0x40uLL);
                  v1043[8] = v1039;
                  *((_QWORD *)v1043 + 6) = 0;
                  *((_QWORD *)v1043 + 7) = 0;
                  *((_QWORD *)v1043 + 5) = 0;
                  *(_QWORD *)v1043 = 0;
                  *((_QWORD *)v1043 + 1) = 0;
                  *((_QWORD *)v1043 + 2) = v1038;
                  *v1040 = (uint64_t *)v1043;
                  v1044 = (uint64_t *)v1043;
                  if (*(_QWORD *)__dst)
                  {
                    *(_QWORD *)&__dst = *(_QWORD *)__dst;
                    v1044 = *v1040;
                  }
                  v1045 = (uint64_t *)*((_QWORD *)&__dst + 1);
                  v1022 = v1044 == *((uint64_t **)&__dst + 1);
                  *((_BYTE *)v1044 + 24) = v1044 == *((uint64_t **)&__dst + 1);
                  if (!v1022)
                  {
                    do
                    {
                      v1046 = v1044[2];
                      if (*(_BYTE *)(v1046 + 24))
                        break;
                      v1047 = *(uint64_t **)(v1046 + 16);
                      v1048 = *v1047;
                      if (*v1047 == v1046)
                      {
                        v1051 = v1047[1];
                        if (!v1051 || (v1052 = *(unsigned __int8 *)(v1051 + 24), v1049 = (_BYTE *)(v1051 + 24), v1052))
                        {
                          if (*(uint64_t **)v1046 == v1044)
                          {
                            *(_BYTE *)(v1046 + 24) = 1;
                            *((_BYTE *)v1047 + 24) = 0;
                            v1055 = *(_QWORD *)(v1046 + 8);
                            *v1047 = v1055;
                            if (v1055)
                              goto LABEL_1119;
                          }
                          else
                          {
                            v1053 = *(uint64_t **)(v1046 + 8);
                            v1054 = *v1053;
                            *(_QWORD *)(v1046 + 8) = *v1053;
                            if (v1054)
                            {
                              *(_QWORD *)(v1054 + 16) = v1046;
                              v1047 = *(uint64_t **)(v1046 + 16);
                            }
                            v1053[2] = (uint64_t)v1047;
                            *(_QWORD *)(*(_QWORD *)(v1046 + 16) + 8 * (**(_QWORD **)(v1046 + 16) != v1046)) = v1053;
                            *v1053 = v1046;
                            *(_QWORD *)(v1046 + 16) = v1053;
                            v1047 = (uint64_t *)v1053[2];
                            v1046 = *v1047;
                            *((_BYTE *)v1053 + 24) = 1;
                            *((_BYTE *)v1047 + 24) = 0;
                            v1055 = *(_QWORD *)(v1046 + 8);
                            *v1047 = v1055;
                            if (v1055)
LABEL_1119:
                              *(_QWORD *)(v1055 + 16) = v1047;
                          }
                          *(_QWORD *)(v1046 + 16) = v1047[2];
                          *(_QWORD *)(v1047[2] + 8 * (*(_QWORD *)v1047[2] != (_QWORD)v1047)) = v1046;
                          *(_QWORD *)(v1046 + 8) = v1047;
LABEL_1131:
                          v1047[2] = v1046;
                          break;
                        }
                      }
                      else if (!v1048
                             || (v1050 = *(unsigned __int8 *)(v1048 + 24), v1049 = (_BYTE *)(v1048 + 24), v1050))
                      {
                        if (*(uint64_t **)v1046 == v1044)
                        {
                          v1057 = v1044[1];
                          *(_QWORD *)v1046 = v1057;
                          if (v1057)
                          {
                            *(_QWORD *)(v1057 + 16) = v1046;
                            v1047 = *(uint64_t **)(v1046 + 16);
                          }
                          v1044[2] = (uint64_t)v1047;
                          *(_QWORD *)(*(_QWORD *)(v1046 + 16) + 8 * (**(_QWORD **)(v1046 + 16) != v1046)) = v1044;
                          v1044[1] = v1046;
                          *(_QWORD *)(v1046 + 16) = v1044;
                          v1047 = (uint64_t *)v1044[2];
                        }
                        else
                        {
                          v1044 = (uint64_t *)v1044[2];
                        }
                        *((_BYTE *)v1044 + 24) = 1;
                        *((_BYTE *)v1047 + 24) = 0;
                        v1046 = v1047[1];
                        v1058 = *(uint64_t **)v1046;
                        v1047[1] = *(_QWORD *)v1046;
                        if (v1058)
                          v1058[2] = (uint64_t)v1047;
                        *(_QWORD *)(v1046 + 16) = v1047[2];
                        *(_QWORD *)(v1047[2] + 8 * (*(_QWORD *)v1047[2] != (_QWORD)v1047)) = v1046;
                        *(_QWORD *)v1046 = v1047;
                        goto LABEL_1131;
                      }
                      *(_BYTE *)(v1046 + 24) = 1;
                      v1044 = v1047;
                      *((_BYTE *)v1047 + 24) = v1047 == v1045;
                      *v1049 = 1;
                    }
                    while (v1047 != v1045);
                  }
                  *(_QWORD *)&v1427 = ++v1037;
                  **((float **)v1043 + 5) = **((float **)v1043 + 5) / v1035;
                  v1056 = (_QWORD *)*((_QWORD *)v1036 + 1);
                  if (!v1056)
                    goto LABEL_1135;
                }
                do
                {
                  v1059 = v1056;
                  v1056 = (_QWORD *)*v1056;
                }
                while (v1056);
LABEL_1094:
                v1036 = v1059;
                v1038 = (uint64_t **)&__dst + 1;
              }
              while (v1059 != (__int128 *)((char *)&__dst + 8));
            }
          }
          if (v1033 <= 1)
          {
            ++v1033;
            if (v1035 == 0.0)
              continue;
          }
          break;
        }
      }
      if ((SBYTE7(v1446) & 0x80000000) == 0)
      {
        v1060 = (_OWORD *)__dst;
        if ((__int128 *)__dst != (__int128 *)((char *)&__dst + 8))
          goto LABEL_1150;
        goto LABEL_1147;
      }
      operator delete((void *)v1445);
      v1060 = (_OWORD *)__dst;
      if ((__int128 *)__dst != (__int128 *)((char *)&__dst + 8))
      {
        do
        {
LABEL_1150:
          v1061 = (char *)v1423[0] + 224 * v832;
          v1064 = (char *)*((_QWORD *)v1061 + 4);
          v1063 = (char **)(v1061 + 32);
          v1062 = v1064;
          v1065 = *((_DWORD *)v1060 + 8);
          v1066 = v1063;
          v1067 = v1063;
          if (v1064)
          {
            v1068 = v1062;
            while (1)
            {
              while (1)
              {
                v1067 = (char **)v1068;
                v1069 = *((_DWORD *)v1068 + 8);
                if (v1065 >= v1069)
                  break;
                v1068 = *v1067;
                v1066 = v1067;
                if (!*v1067)
                  goto LABEL_1157;
              }
              if (v1069 >= v1065)
                break;
              v1068 = v1067[1];
              if (!v1068)
              {
                v1066 = v1067 + 1;
                goto LABEL_1157;
              }
            }
            v1070 = (char *)v1067;
            v1084 = (char *)v1423[0] + 224 * v832;
            v1085 = (uint64_t **)(v1084 + 32);
            v1086 = v1084 + 32;
            v1087 = v1084 + 32;
            if (v1062)
              goto LABEL_1190;
          }
          else
          {
LABEL_1157:
            v1070 = (char *)operator new(0x40uLL);
            *((_DWORD *)v1070 + 8) = v1065;
            *((_QWORD *)v1070 + 6) = 0;
            *((_QWORD *)v1070 + 7) = 0;
            *((_QWORD *)v1070 + 5) = 0;
            *(_QWORD *)v1070 = 0;
            *((_QWORD *)v1070 + 1) = 0;
            *((_QWORD *)v1070 + 2) = v1067;
            *v1066 = v1070;
            v1071 = *(char **)*(v1063 - 1);
            v1072 = v1070;
            if (v1071)
            {
              *(v1063 - 1) = v1071;
              v1072 = *v1066;
            }
            v1073 = *v1063;
            v1022 = v1072 == *v1063;
            v1072[24] = v1022;
            if (!v1022)
            {
              do
              {
                v1074 = *((_QWORD *)v1072 + 2);
                if (*(_BYTE *)(v1074 + 24))
                  break;
                v1075 = *(char **)(v1074 + 16);
                v1076 = *(_QWORD *)v1075;
                if (*(_QWORD *)v1075 == v1074)
                {
                  v1079 = *((_QWORD *)v1075 + 1);
                  if (!v1079 || (v1080 = *(unsigned __int8 *)(v1079 + 24), v1077 = (_BYTE *)(v1079 + 24), v1080))
                  {
                    if (*(char **)v1074 == v1072)
                    {
                      *(_BYTE *)(v1074 + 24) = 1;
                      v1075[24] = 0;
                      v1083 = *(_QWORD *)(v1074 + 8);
                      *(_QWORD *)v1075 = v1083;
                      if (v1083)
                        goto LABEL_1174;
                    }
                    else
                    {
                      v1081 = *(uint64_t **)(v1074 + 8);
                      v1082 = *v1081;
                      *(_QWORD *)(v1074 + 8) = *v1081;
                      if (v1082)
                      {
                        *(_QWORD *)(v1082 + 16) = v1074;
                        v1075 = *(char **)(v1074 + 16);
                      }
                      v1081[2] = (uint64_t)v1075;
                      *(_QWORD *)(*(_QWORD *)(v1074 + 16) + 8 * (**(_QWORD **)(v1074 + 16) != v1074)) = v1081;
                      *v1081 = v1074;
                      *(_QWORD *)(v1074 + 16) = v1081;
                      v1075 = (char *)v1081[2];
                      v1074 = *(_QWORD *)v1075;
                      *((_BYTE *)v1081 + 24) = 1;
                      v1075[24] = 0;
                      v1083 = *(_QWORD *)(v1074 + 8);
                      *(_QWORD *)v1075 = v1083;
                      if (v1083)
LABEL_1174:
                        *(_QWORD *)(v1083 + 16) = v1075;
                    }
                    *(_QWORD *)(v1074 + 16) = *((_QWORD *)v1075 + 2);
                    *(_QWORD *)(*((_QWORD *)v1075 + 2) + 8 * (**((_QWORD **)v1075 + 2) != (_QWORD)v1075)) = v1074;
                    *(_QWORD *)(v1074 + 8) = v1075;
LABEL_1186:
                    *((_QWORD *)v1075 + 2) = v1074;
                    break;
                  }
                }
                else if (!v1076 || (v1078 = *(unsigned __int8 *)(v1076 + 24), v1077 = (_BYTE *)(v1076 + 24), v1078))
                {
                  if (*(char **)v1074 == v1072)
                  {
                    v1088 = *((_QWORD *)v1072 + 1);
                    *(_QWORD *)v1074 = v1088;
                    if (v1088)
                    {
                      *(_QWORD *)(v1088 + 16) = v1074;
                      v1075 = *(char **)(v1074 + 16);
                    }
                    *((_QWORD *)v1072 + 2) = v1075;
                    *(_QWORD *)(*(_QWORD *)(v1074 + 16) + 8 * (**(_QWORD **)(v1074 + 16) != v1074)) = v1072;
                    *((_QWORD *)v1072 + 1) = v1074;
                    *(_QWORD *)(v1074 + 16) = v1072;
                    v1075 = (char *)*((_QWORD *)v1072 + 2);
                  }
                  else
                  {
                    v1072 = (char *)*((_QWORD *)v1072 + 2);
                  }
                  v1072[24] = 1;
                  v1075[24] = 0;
                  v1074 = *((_QWORD *)v1075 + 1);
                  v1089 = *(char **)v1074;
                  *((_QWORD *)v1075 + 1) = *(_QWORD *)v1074;
                  if (v1089)
                    *((_QWORD *)v1089 + 2) = v1075;
                  *(_QWORD *)(v1074 + 16) = *((_QWORD *)v1075 + 2);
                  *(_QWORD *)(*((_QWORD *)v1075 + 2) + 8 * (**((_QWORD **)v1075 + 2) != (_QWORD)v1075)) = v1074;
                  *(_QWORD *)v1074 = v1075;
                  goto LABEL_1186;
                }
                *(_BYTE *)(v1074 + 24) = 1;
                v1072 = v1075;
                v1075[24] = v1075 == v1073;
                *v1077 = 1;
              }
              while (v1075 != v1073);
            }
            ++v1063[1];
            v1062 = (char *)*((_QWORD *)v1423[0] + 28 * v832 + 4);
            v1065 = *((_DWORD *)v1060 + 8);
            v1084 = (char *)v1423[0] + 224 * v832;
            v1085 = (uint64_t **)(v1084 + 32);
            v1086 = v1084 + 32;
            v1087 = v1084 + 32;
            if (v1062)
            {
              while (1)
              {
LABEL_1190:
                while (1)
                {
                  v1087 = v1062;
                  v1090 = *((_DWORD *)v1062 + 8);
                  if (v1065 >= v1090)
                    break;
                  v1062 = *(char **)v1087;
                  v1086 = v1087;
                  if (!*(_QWORD *)v1087)
                    goto LABEL_1194;
                }
                if (v1090 >= v1065)
                  break;
                v1062 = (char *)*((_QWORD *)v1087 + 1);
                if (!v1062)
                {
                  v1086 = v1087 + 8;
                  goto LABEL_1194;
                }
              }
              v1092 = v1087;
              v1107 = *((_QWORD *)v1060 + 5);
              v1106 = (uint64_t *)*((_QWORD *)v1060 + 6);
              v1108 = (uint64_t)v1106 - v1107;
              if ((uint64_t)((uint64_t)v1106 - v1107) < 1)
                goto LABEL_1289;
              goto LABEL_1225;
            }
          }
LABEL_1194:
          v1091 = v1070;
          v1092 = operator new(0x40uLL);
          v1092[8] = v1065;
          *((_QWORD *)v1092 + 6) = 0;
          *((_QWORD *)v1092 + 7) = 0;
          *((_QWORD *)v1092 + 5) = 0;
          *(_QWORD *)v1092 = 0;
          *((_QWORD *)v1092 + 1) = 0;
          *((_QWORD *)v1092 + 2) = v1087;
          *(_QWORD *)v1086 = v1092;
          v1093 = **((_QWORD **)v1084 + 3);
          v1094 = (uint64_t *)v1092;
          if (v1093)
          {
            *((_QWORD *)v1084 + 3) = v1093;
            v1094 = *(uint64_t **)v1086;
          }
          v1095 = *v1085;
          v1022 = v1094 == *v1085;
          *((_BYTE *)v1094 + 24) = v1022;
          v1070 = v1091;
          if (!v1022)
          {
            do
            {
              v1096 = v1094[2];
              if (*(_BYTE *)(v1096 + 24))
                break;
              v1097 = *(uint64_t **)(v1096 + 16);
              v1098 = *v1097;
              if (*v1097 == v1096)
              {
                v1101 = v1097[1];
                if (!v1101 || (v1102 = *(unsigned __int8 *)(v1101 + 24), v1099 = (_BYTE *)(v1101 + 24), v1102))
                {
                  if (*(uint64_t **)v1096 == v1094)
                  {
                    *(_BYTE *)(v1096 + 24) = 1;
                    *((_BYTE *)v1097 + 24) = 0;
                    v1105 = *(_QWORD *)(v1096 + 8);
                    *v1097 = v1105;
                    if (v1105)
                      goto LABEL_1211;
                  }
                  else
                  {
                    v1103 = *(uint64_t **)(v1096 + 8);
                    v1104 = *v1103;
                    *(_QWORD *)(v1096 + 8) = *v1103;
                    if (v1104)
                    {
                      *(_QWORD *)(v1104 + 16) = v1096;
                      v1097 = *(uint64_t **)(v1096 + 16);
                    }
                    v1103[2] = (uint64_t)v1097;
                    *(_QWORD *)(*(_QWORD *)(v1096 + 16) + 8 * (**(_QWORD **)(v1096 + 16) != v1096)) = v1103;
                    *v1103 = v1096;
                    *(_QWORD *)(v1096 + 16) = v1103;
                    v1097 = (uint64_t *)v1103[2];
                    v1096 = *v1097;
                    *((_BYTE *)v1103 + 24) = 1;
                    *((_BYTE *)v1097 + 24) = 0;
                    v1105 = *(_QWORD *)(v1096 + 8);
                    *v1097 = v1105;
                    if (v1105)
LABEL_1211:
                      *(_QWORD *)(v1105 + 16) = v1097;
                  }
                  *(_QWORD *)(v1096 + 16) = v1097[2];
                  *(_QWORD *)(v1097[2] + 8 * (*(_QWORD *)v1097[2] != (_QWORD)v1097)) = v1096;
                  *(_QWORD *)(v1096 + 8) = v1097;
LABEL_1223:
                  v1097[2] = v1096;
                  break;
                }
              }
              else if (!v1098 || (v1100 = *(unsigned __int8 *)(v1098 + 24), v1099 = (_BYTE *)(v1098 + 24), v1100))
              {
                if (*(uint64_t **)v1096 == v1094)
                {
                  v1109 = v1094[1];
                  *(_QWORD *)v1096 = v1109;
                  if (v1109)
                  {
                    *(_QWORD *)(v1109 + 16) = v1096;
                    v1097 = *(uint64_t **)(v1096 + 16);
                  }
                  v1094[2] = (uint64_t)v1097;
                  *(_QWORD *)(*(_QWORD *)(v1096 + 16) + 8 * (**(_QWORD **)(v1096 + 16) != v1096)) = v1094;
                  v1094[1] = v1096;
                  *(_QWORD *)(v1096 + 16) = v1094;
                  v1097 = (uint64_t *)v1094[2];
                }
                else
                {
                  v1094 = (uint64_t *)v1094[2];
                }
                *((_BYTE *)v1094 + 24) = 1;
                *((_BYTE *)v1097 + 24) = 0;
                v1096 = v1097[1];
                v1110 = *(uint64_t **)v1096;
                v1097[1] = *(_QWORD *)v1096;
                if (v1110)
                  v1110[2] = (uint64_t)v1097;
                *(_QWORD *)(v1096 + 16) = v1097[2];
                *(_QWORD *)(v1097[2] + 8 * (*(_QWORD *)v1097[2] != (_QWORD)v1097)) = v1096;
                *(_QWORD *)v1096 = v1097;
                goto LABEL_1223;
              }
              *(_BYTE *)(v1096 + 24) = 1;
              v1094 = v1097;
              *((_BYTE *)v1097 + 24) = v1097 == v1095;
              *v1099 = 1;
            }
            while (v1097 != v1095);
          }
          ++*((_QWORD *)v1084 + 5);
          v1107 = *((_QWORD *)v1060 + 5);
          v1106 = (uint64_t *)*((_QWORD *)v1060 + 6);
          v1108 = (uint64_t)v1106 - v1107;
          if ((uint64_t)((uint64_t)v1106 - v1107) < 1)
            goto LABEL_1289;
LABEL_1225:
          v1111 = (uint64_t *)(v1070 + 40);
          v1112 = v1108 >> 3;
          v1113 = *((_QWORD *)v1070 + 5);
          v1114 = *((_QWORD *)v1092 + 6) - v1113;
          v1115 = v1114 >> 3;
          v1116 = v1113 + (v1114 & 0xFFFFFFFFFFFFFFF8);
          v1118 = *((_QWORD *)v1070 + 6);
          v1117 = *((_QWORD *)v1070 + 7);
          if (v1108 >> 3 > (uint64_t)(v1117 - v1118) >> 3)
          {
            v1119 = v1112 + ((uint64_t)(v1118 - v1113) >> 3);
            if (v1119 >> 61)
              sub_1BE61F930();
            v1120 = v1117 - v1113;
            if (v1120 >> 2 > v1119)
              v1119 = v1120 >> 2;
            if ((unint64_t)v1120 >= 0x7FFFFFFFFFFFFFF8)
              v1121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v1121 = v1119;
            *(_QWORD *)v1407 = v1070;
            if (v1121)
            {
              if (v1121 >> 61)
                sub_1BE61F100();
              v1399 = (uint64_t *)(v1070 + 40);
              v1122 = v1121;
              v1123 = (char *)operator new(8 * v1121);
              v1121 = v1122;
              v1111 = v1399;
              v1124 = (uint64_t)&v1123[8 * v1115];
              v1125 = (_QWORD *)(v1124 + 8 * v1112);
              v1126 = v1108 - 8;
              if ((unint64_t)(v1108 - 8) < 0x38)
              {
LABEL_1235:
                v1127 = (_QWORD *)v1124;
                v1128 = *(_QWORD **)v1407;
                goto LABEL_1246;
              }
            }
            else
            {
              v1123 = 0;
              v1124 = 8 * v1115;
              v1125 = (_QWORD *)(8 * v1115 + 8 * v1112);
              v1126 = v1108 - 8;
              if ((unint64_t)(v1108 - 8) < 0x38)
                goto LABEL_1235;
            }
            v1127 = (_QWORD *)v1124;
            v1128 = *(_QWORD **)v1407;
            if ((unint64_t)&v1123[(v1114 & 0xFFFFFFFFFFFFFFF8) - v1107] < 0x20)
              goto LABEL_1676;
            v1135 = (v1126 >> 3) + 1;
            v1136 = 8 * (v1135 & 0x3FFFFFFFFFFFFFFCLL);
            v1127 = (_QWORD *)(v1124 + v1136);
            v1137 = v1107 + v1136;
            v1138 = (__int128 *)(v1107 + 16);
            v1139 = &v1123[8 * v1115 + 16];
            v1140 = v1135 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1141 = *v1138;
              *((_OWORD *)v1139 - 1) = *(v1138 - 1);
              *(_OWORD *)v1139 = v1141;
              v1138 += 2;
              v1139 += 32;
              v1140 -= 4;
            }
            while (v1140);
            v1107 = v1137;
            if (v1135 != (v1135 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1676:
              do
              {
LABEL_1246:
                v1142 = *(_QWORD *)v1107;
                v1107 += 8;
                *v1127++ = v1142;
              }
              while (v1127 != v1125);
            }
            v1143 = *v1111;
            if (*v1111 != v1116)
            {
              v1144 = v1113 + (v1114 & 0xFFFFFFFFFFFFFFF8);
              v1145 = v1144 - v1143 - 8;
              if (v1145 < 0x68)
              {
                v1146 = v1113 + (v1114 & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_1254;
              }
              v1146 = v1113 + (v1114 & 0xFFFFFFFFFFFFFFF8);
              if ((unint64_t)(v1144 - (_QWORD)&v1123[v1114 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                goto LABEL_1677;
              v1147 = (v1145 >> 3) + 1;
              v1148 = 8 * (v1147 & 0x3FFFFFFFFFFFFFFCLL);
              v1146 = v1116 - v1148;
              v1124 -= v1148;
              v1149 = &v1123[8 * v1115 - 16];
              v1150 = (__int128 *)(v1113 + 8 * v1115 - 16);
              v1151 = v1147 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1152 = *v1150;
                *((_OWORD *)v1149 - 1) = *(v1150 - 1);
                *(_OWORD *)v1149 = v1152;
                v1149 -= 32;
                v1150 -= 2;
                v1151 -= 4;
              }
              while (v1151);
              if (v1147 != (v1147 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1677:
                do
                {
LABEL_1254:
                  v1153 = *(_QWORD *)(v1146 - 8);
                  v1146 -= 8;
                  *(_QWORD *)(v1124 - 8) = v1153;
                  v1124 -= 8;
                }
                while (v1146 != v1143);
              }
              v1118 = v1128[6];
            }
            if (v1118 != v1116)
            {
              v1154 = (v1114 & 0xFFFFFFFFFFFFFFF8) + v1113;
              v1155 = v1118 - v1154 - 8;
              if (v1155 < 0x68)
                goto LABEL_1678;
              if ((unint64_t)&v1123[(v1114 & 0xFFFFFFFFFFFFFFF8) + (v1108 & 0xFFFFFFFFFFFFFFF8) - v1154] < 0x20)
                goto LABEL_1678;
              v1156 = (v1155 >> 3) + 1;
              v1157 = 8 * (v1156 & 0x3FFFFFFFFFFFFFFCLL);
              v1116 += v1157;
              v1125 = (_QWORD *)((char *)v1125 + v1157);
              v1158 = &v1123[8 * v1115 + 16 + 8 * v1112];
              v1159 = (__int128 *)(v1113 + 8 * v1115 + 16);
              v1160 = v1156 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1161 = *v1159;
                *((_OWORD *)v1158 - 1) = *(v1159 - 1);
                *(_OWORD *)v1158 = v1161;
                v1158 += 32;
                v1159 += 2;
                v1160 -= 4;
              }
              while (v1160);
              if (v1156 != (v1156 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1678:
                do
                {
                  v1162 = *(_QWORD *)v1116;
                  v1116 += 8;
                  *v1125++ = v1162;
                }
                while (v1116 != v1118);
              }
            }
            v1163 = (void *)v1128[5];
            v1128[5] = v1124;
            v1128[6] = v1125;
            v1128[7] = &v1123[8 * v1121];
            if (v1163)
              operator delete(v1163);
            goto LABEL_1289;
          }
          v1129 = v1118 - v1116;
          v1130 = (uint64_t)(v1118 - v1116) >> 3;
          if (v1130 >= v1112)
          {
            v1131 = v1107 + 8 * v1112;
            v1134 = (char *)*((_QWORD *)v1070 + 6);
LABEL_1272:
            v1171 = (char *)(v1116 + 8 * v1112);
            v1172 = v1134 - v1171;
            v1173 = (unint64_t)&v1134[-8 * v1112];
            v1174 = v1134;
            if (v1173 < v1118)
            {
              v1175 = (v1114 & 0xFFFFFFFFFFFFFFF8) + v1172;
              v1176 = v1113 + v1175 + 8;
              if (v1118 > v1176)
                v1176 = v1118;
              v1177 = v1176 + ~v1113 - v1175;
              v1178 = (uint64_t *)&v1134[-8 * v1112];
              v1174 = v1134;
              if (v1177 < 0x58)
                goto LABEL_1679;
              v1178 = (uint64_t *)&v1134[-8 * v1112];
              v1174 = v1134;
              if ((unint64_t)&v1171[-(v1114 & 0xFFFFFFFFFFFFFFF8) - v1113] < 0x20)
                goto LABEL_1679;
              v1179 = (v1177 >> 3) + 1;
              v1180 = 8 * (v1179 & 0x3FFFFFFFFFFFFFFCLL);
              v1178 = (uint64_t *)(v1173 + v1180);
              v1174 = &v1134[v1180];
              v1181 = v1134 + 16;
              v1182 = (__int128 *)(v1113 + 8 * (v1172 >> 3) + 8 * v1115 + 16);
              v1183 = v1179 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1184 = *v1182;
                *(v1181 - 1) = *(v1182 - 1);
                *v1181 = v1184;
                v1181 += 2;
                v1182 += 2;
                v1183 -= 4;
              }
              while (v1183);
              if (v1179 != (v1179 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1679:
                do
                {
                  v1185 = *v1178++;
                  *(_QWORD *)v1174 = v1185;
                  v1174 += 8;
                }
                while ((unint64_t)v1178 < v1118);
              }
            }
            *((_QWORD *)v1070 + 6) = v1174;
            if (v1134 != v1171)
            {
              v1186 = v1172 - 8;
              if ((unint64_t)(v1172 - 8) < 0x98
                || ((v1194 = v1172 + (v1114 & 0xFFFFFFFFFFFFFFF8),
                     v1195 = v1194 - (v1186 & 0xFFFFFFFFFFFFFFF8),
                     v1196 = v1113 - 4 + v1194,
                     (unint64_t)&v1134[-(v1186 & 0xFFFFFFFFFFFFFFF8) - 4] < v1173)
                  ? (v1197 = v1113 - 4 + v1195 >= (unint64_t)v1134)
                  : (v1197 = 1),
                    v1197 ? (v1198 = 0) : (v1198 = 1),
                    v1113 + v1195 - 8 < (unint64_t)(v1134 - 4)
                  ? (v1199 = (unint64_t)&v1134[-(v1186 & 0xFFFFFFFFFFFFFFF8) - 8] >= v1196)
                  : (v1199 = 1),
                    !v1199 || (v1198 & 1) != 0))
              {
                v1187 = v1134;
                v1188 = &v1134[-8 * v1112];
              }
              else
              {
                v1200 = (v1186 >> 3) + 1;
                v1201 = 8 * (v1200 & 0x3FFFFFFFFFFFFFFCLL);
                v1187 = &v1134[-v1201];
                v1188 = (char *)(v1173 - v1201);
                v1202 = (__int128 *)(v1173 - 32);
                v1203 = v1134 - 32;
                v1204 = v1200 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1205 = *v1202;
                  v1206 = v1202[1];
                  v1202 -= 2;
                  *(_OWORD *)v1203 = v1205;
                  *((_OWORD *)v1203 + 1) = v1206;
                  v1203 -= 32;
                  v1204 -= 4;
                }
                while (v1204);
                if (v1200 == (v1200 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_1286;
              }
              v1189 = v1187 - 4;
              do
              {
                v1190 = *((_DWORD *)v1188 - 2);
                v1188 -= 8;
                *((_DWORD *)v1189 - 1) = v1190;
                *(_DWORD *)v1189 = *((_DWORD *)v1188 + 1);
                v1189 -= 8;
              }
              while (v1188 != (char *)v1116);
            }
LABEL_1286:
            if (v1131 != v1107)
            {
              v1191 = v1131 - v1107 - 8;
              if (v1191 < 0x78)
                goto LABEL_1680;
              v1207 = (v1114 & 0xFFFFFFFFFFFFFFF8) + (v1191 & 0xFFFFFFFFFFFFFFF8);
              v1208 = v1113 + 4 + (v1114 & 0xFFFFFFFFFFFFFFF8) >= v1107 + (v1191 & 0xFFFFFFFFFFFFFFF8) + 8
                   || v1107 + 4 >= v1113 + v1207 + 8;
              v1209 = !v1208;
              if (v1107 < v1113 + 4 + v1207 && v1116 < v1107 + 4 + (v1191 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_1680;
              if (v1209)
                goto LABEL_1680;
              v1211 = (v1191 >> 3) + 1;
              v1212 = 8 * (v1211 & 0x3FFFFFFFFFFFFFF8);
              v1116 += v1212;
              v1213 = v1107 + v1212;
              v1214 = (__int128 *)(v1107 + 32);
              v1215 = (_OWORD *)(v1113 + 8 * v1115 + 32);
              v1216 = v1211 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v1218 = *(v1214 - 2);
                v1217 = *(v1214 - 1);
                v1220 = *v1214;
                v1219 = v1214[1];
                v1214 += 4;
                *(v1215 - 2) = v1218;
                *(v1215 - 1) = v1217;
                *v1215 = v1220;
                v1215[1] = v1219;
                v1215 += 4;
                v1216 -= 8;
              }
              while (v1216);
              v1107 = v1213;
              if (v1211 != (v1211 & 0x3FFFFFFFFFFFFFF8))
              {
LABEL_1680:
                do
                {
                  *(_DWORD *)v1116 = *(_DWORD *)v1107;
                  *(_DWORD *)(v1116 + 4) = *(_DWORD *)(v1107 + 4);
                  v1107 += 8;
                  v1116 += 8;
                }
                while (v1107 != v1131);
              }
            }
            goto LABEL_1289;
          }
          v1131 = v1107 + 8 * v1130;
          if ((uint64_t *)v1131 == v1106)
          {
            v1134 = (char *)*((_QWORD *)v1070 + 6);
            goto LABEL_1271;
          }
          v1132 = (unint64_t)v1106 + -v1129 - v1107 - 8;
          if (v1132 < 0x38)
          {
            v1133 = (uint64_t *)(v1107 + 8 * v1130);
            v1134 = (char *)*((_QWORD *)v1070 + 6);
            do
            {
LABEL_1270:
              v1170 = *v1133++;
              *(_QWORD *)v1134 = v1170;
              v1134 += 8;
            }
            while (v1133 != v1106);
            goto LABEL_1271;
          }
          v1133 = (uint64_t *)(v1107 + 8 * v1130);
          v1134 = (char *)*((_QWORD *)v1070 + 6);
          if (v1116 - v1107 < 0x20)
            goto LABEL_1270;
          v1164 = (v1132 >> 3) + 1;
          v1165 = 8 * (v1164 & 0x3FFFFFFFFFFFFFFCLL);
          v1133 = (uint64_t *)(v1131 + v1165);
          v1134 = (char *)(v1118 + v1165);
          v1166 = (_OWORD *)(v1118 + 16);
          v1167 = (__int128 *)(v1107 + 8 * v1130 + 16);
          v1168 = v1164 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1169 = *v1167;
            *(v1166 - 1) = *(v1167 - 1);
            *v1166 = v1169;
            v1166 += 2;
            v1167 += 2;
            v1168 -= 4;
          }
          while (v1168);
          if (v1164 != (v1164 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_1270;
LABEL_1271:
          *((_QWORD *)v1070 + 6) = v1134;
          if (v1129 >= 1)
            goto LABEL_1272;
LABEL_1289:
          v1192 = (_QWORD *)*((_QWORD *)v1060 + 1);
          if (v1192)
          {
            do
            {
              v1193 = v1192;
              v1192 = (_QWORD *)*v1192;
            }
            while (v1192);
          }
          else
          {
            do
            {
              v1193 = (_OWORD *)*((_QWORD *)v1060 + 2);
              v1022 = *(_QWORD *)v1193 == (_QWORD)v1060;
              v1060 = v1193;
            }
            while (!v1022);
          }
          v1060 = v1193;
          v832 = v1414;
        }
        while (v1193 != (__int128 *)((char *)&__dst + 8));
      }
LABEL_1147:
      sub_1BE67AC7C((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      v831 = (char *)v1423[0];
      v826 = (char *)v1423[1];
LABEL_856:
      ++v832;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v826 - v831) >> 5) > v832);
    while (v831 != v826)
    {
      if (!v831[172])
      {
        v1221 = *(_QWORD *)(a6 + 24);
        if (v1221 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1221 + 48))(v1221))
        {
          v1222 = 0;
          v1223 = 0;
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
        }
        else
        {
          v1223 = 0;
          v1222 = 1;
        }
        goto LABEL_1344;
      }
      v831 += 224;
    }
LABEL_1343:
    v1222 = 0;
    v1223 = 1;
LABEL_1344:

    v1224 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      v1225 = __p.__r_.__value_.__l.__size_;
      v121 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
      {
LABEL_15:
        __p.__r_.__value_.__l.__size_ = v1224;
        operator delete(v121);
        goto LABEL_16;
      }
      while ((*(char *)(v1225 - 1) & 0x80000000) == 0)
      {
        v1227 = *(void **)(v1225 - 48);
        if (v1227)
          goto LABEL_1352;
LABEL_1353:
        sub_1BE62033C(v1225 - 80, *(_QWORD **)(v1225 - 72));
        v1228 = *(void **)(v1225 - 104);
        if (v1228)
        {
          *(_QWORD *)(v1225 - 96) = v1228;
          operator delete(v1228);
        }
        v1229 = *(void **)(v1225 - 128);
        if (v1229)
        {
          *(_QWORD *)(v1225 - 120) = v1229;
          operator delete(v1229);
        }
        v1230 = *(void **)(v1225 - 152);
        if (v1230)
        {
          *(_QWORD *)(v1225 - 144) = v1230;
          operator delete(v1230);
        }
        v1231 = *(_QWORD *)(v1225 - 176);
        if (v1231)
        {
          v1232 = *(_QWORD *)(v1225 - 168);
          v1226 = *(void **)(v1225 - 176);
          if (v1232 != v1231)
          {
            v1233 = *(_QWORD *)(v1225 - 168);
            do
            {
              v1235 = *(void **)(v1233 - 24);
              v1233 -= 24;
              v1234 = v1235;
              if (v1235)
              {
                *(_QWORD *)(v1232 - 16) = v1234;
                operator delete(v1234);
              }
              v1232 = v1233;
            }
            while (v1233 != v1231);
            v1226 = *(void **)(v1225 - 176);
          }
          *(_QWORD *)(v1225 - 168) = v1231;
          operator delete(v1226);
        }
        sub_1BE67AC7C(v1225 - 200, *(_QWORD **)(v1225 - 192));
        sub_1BE77D58C(v1225 - 224, *(char **)(v1225 - 216));
        v1225 -= 224;
        if (v1225 == v1224)
        {
          v121 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_15;
        }
      }
      operator delete(*(void **)(v1225 - 24));
      v1227 = *(void **)(v1225 - 48);
      if (!v1227)
        goto LABEL_1353;
LABEL_1352:
      *(_QWORD *)(v1225 - 40) = v1227;
      operator delete(v1227);
      goto LABEL_1353;
    }
LABEL_16:
    ++v1421;
  }
  while ((v1222 & 1) != 0);
  if (!v1223)
  {
    v1361 = v1423[0];
    if (v1423[0])
    {
      v1362 = v1423[1];
      v1363 = v1423[0];
      if (v1423[1] != v1423[0])
      {
        do
          v1362 = (void *)sub_1BE77D498((uint64_t)v1362 - 224);
        while (v1362 != v1361);
        v1363 = v1423[0];
      }
      v1423[1] = v1361;
      operator delete(v1363);
    }
    goto LABEL_1637;
  }
LABEL_1369:
  v1236 = (char *)v1423[0];
  v1237 = (char *)v1423[1];
  if (v1423[0] == v1423[1])
  {
    v1446 = 0u;
    v1445 = 0u;
    v1447 = 1.0;
  }
  else
  {
    do
    {
      sub_1BE76F7C0(&__dst, (uint64_t)(*((_QWORD *)v1236 + 10) - *((_QWORD *)v1236 + 9)) >> 2);
      v1239 = *((_QWORD *)v1236 + 9);
      if (*((_QWORD *)v1236 + 10) != v1239)
      {
        v1240 = 0;
        v1241 = 0;
        do
        {
          std::string::operator=((std::string *)(__dst + v1240), (const std::string *)(*(_QWORD *)a1 + 24 * *(int *)(v1239 + 4 * v1241++)));
          v1239 = *((_QWORD *)v1236 + 9);
          v1240 += 24;
        }
        while (v1241 < (*((_QWORD *)v1236 + 10) - v1239) >> 2);
      }
      sub_1BE7C21D4((uint64_t)v1395, (size_t *)&__dst, (_QWORD *)v1236 + 3, &buf);
      v1242 = (void **)(v1236 + 48);
      v1243 = *((_QWORD *)v1236 + 6);
      if (v1243)
      {
        v1244 = *((_QWORD *)v1236 + 7);
        v1245 = (void *)*((_QWORD *)v1236 + 6);
        if (v1244 != v1243)
        {
          v1246 = *((_QWORD *)v1236 + 7);
          do
          {
            v1248 = *(void **)(v1246 - 24);
            v1246 -= 24;
            v1247 = v1248;
            if (v1248)
            {
              *(_QWORD *)(v1244 - 16) = v1247;
              operator delete(v1247);
            }
            v1244 = v1246;
          }
          while (v1246 != v1243);
          v1245 = *v1242;
        }
        *((_QWORD *)v1236 + 7) = v1243;
        operator delete(v1245);
        *v1242 = 0;
        *((_QWORD *)v1236 + 7) = 0;
        *((_QWORD *)v1236 + 8) = 0;
      }
      *((_OWORD *)v1236 + 3) = buf;
      *((_QWORD *)v1236 + 8) = v1460;
      *(_QWORD *)&v1460 = 0;
      buf = 0uLL;
      v1249 = __dst;
      if ((_QWORD)__dst)
      {
        v1250 = *((_QWORD *)&__dst + 1);
        v1238 = (void *)__dst;
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
        {
          do
          {
            if (*(char *)(v1250 - 1) < 0)
              operator delete(*(void **)(v1250 - 24));
            v1250 -= 24;
          }
          while (v1250 != v1249);
          v1238 = (void *)__dst;
        }
        *((_QWORD *)&__dst + 1) = v1249;
        operator delete(v1238);
      }
      v1236 += 224;
    }
    while (v1236 != v1237);
    v1251 = (char *)v1423[0];
    v1236 = (char *)v1423[1];
    v1446 = 0u;
    v1445 = 0u;
    v1447 = 1.0;
    if (v1423[0] != v1423[1])
    {
      do
      {
        sub_1BE76F5D4((std::string *)&buf, (uint64_t)v1251, (_QWORD *)a1);
        sub_1BE77F1F0((uint64_t)&v1445, (uint64_t)&buf, (uint64_t)&buf);
        if (SBYTE7(v1460) < 0)
          operator delete((void *)buf);
        v1251 += 224;
      }
      while (v1251 != v1236);
      v1236 = (char *)v1423[0];
      v1252 = (char *)v1423[1];
      goto LABEL_1399;
    }
  }
  v1252 = v1236;
LABEL_1399:
  v1253 = 0x6DB6DB6DB6DB6DB7 * ((v1252 - v1236) >> 5);
  v1254 = v1253;
  if ((int)v1253 < 1)
    goto LABEL_1628;
  v1255 = 0;
  v1408 = -1227133513 * ((v1252 - v1236) >> 5);
  do
  {
    sub_1BE77D5F4(&buf, (uint64_t)v1423[0] + 224 * v1255);
    v1256 = (char *)v1423[0];
    v1257 = (char *)v1423[0] + 224 * v1255;
    v1258 = *((_QWORD *)v1257 + 9);
    if (*((_QWORD *)v1257 + 10) != v1258 && *(_QWORD *)(a1 + 648))
    {
      v1259 = 0;
      v1260 = 0;
      do
      {
        v1262 = *(int8x8_t *)(a1 + 648);
        if (v1262)
        {
          v1263 = *(int *)(v1258 + 4 * v1259);
          v1264 = (uint8x8_t)vcnt_s8(v1262);
          v1264.i16[0] = vaddlv_u8(v1264);
          if (v1264.u32[0] > 1uLL)
          {
            v1265 = *(int *)(v1258 + 4 * v1259);
            if (*(_QWORD *)&v1262 <= v1263)
              v1265 = v1263 % *(_QWORD *)&v1262;
          }
          else
          {
            v1265 = (*(_QWORD *)&v1262 - 1) & v1263;
          }
          v1266 = *(_QWORD *)(a1 + 640);
          v1267 = *(uint64_t ***)(v1266 + 8 * v1265);
          if (v1267)
          {
            v1268 = *v1267;
            if (*v1267)
            {
              v1269 = *(_QWORD *)&v1262 - 1;
              if (v1264.u32[0] < 2uLL)
              {
                while (1)
                {
                  v1270 = v1268[1];
                  if (v1270 == v1263)
                  {
                    if (*((_DWORD *)v1268 + 4) == (_DWORD)v1263)
                      goto LABEL_1428;
                  }
                  else if ((v1270 & v1269) != v1265)
                  {
                    goto LABEL_1406;
                  }
                  v1268 = (uint64_t *)*v1268;
                  if (!v1268)
                    goto LABEL_1406;
                }
              }
              do
              {
                v1271 = v1268[1];
                if (v1271 == v1263)
                {
                  if (*((_DWORD *)v1268 + 4) == (_DWORD)v1263)
                  {
LABEL_1428:
                    if (v1264.u32[0] > 1uLL)
                    {
                      v1272 = *(int *)(v1258 + 4 * v1259);
                      if (*(_QWORD *)&v1262 <= v1263)
                        v1272 = v1263 % *(_QWORD *)&v1262;
                    }
                    else
                    {
                      v1272 = v1269 & v1263;
                    }
                    v1273 = *(uint64_t ***)(v1266 + 8 * v1272);
                    if (!v1273 || (v1274 = *v1273) == 0)
LABEL_1654:
                      sub_1BE61C778("unordered_map::at: key not found");
                    if (v1264.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v1275 = v1274[1];
                        if (v1275 == v1263)
                        {
                          if (*((_DWORD *)v1274 + 4) == (_DWORD)v1263)
                            goto LABEL_1440;
                        }
                        else if ((v1275 & v1269) != v1272)
                        {
                          goto LABEL_1654;
                        }
                        v1274 = (uint64_t *)*v1274;
                        if (!v1274)
                          goto LABEL_1654;
                      }
                    }
                    while (1)
                    {
                      v1278 = v1274[1];
                      if (v1278 == v1263)
                      {
                        if (*((_DWORD *)v1274 + 4) == (_DWORD)v1263)
                        {
LABEL_1440:
                          v1276 = (float *)v1274[3];
                          v1277 = (int *)v1274[4];
                          if (v1276 != (float *)v1277)
                          {
                            do
                            {
                              v1281 = v1276[1];
                              if (v1281 >= 0.5)
                              {
                                v1282 = *v1276;
                                if (std::string::compare((const std::string *)(*(_QWORD *)a1 + 24 * (int)v1263), "z")
                                  || *(_QWORD *)(*((_QWORD *)v1423[0] + 28 * v1255 + 6) + 24 * v1259 + 8)
                                   - *(_QWORD *)(*((_QWORD *)v1423[0] + 28 * v1255 + 6) + 24 * v1259) <= 4uLL)
                                {
                                  v1279 = 4 * v1259;
                                  *(float *)((char *)v1464 + v1279) = v1282;
                                  *(float *)((char *)v1466 + v1279) = v1281 * *((float *)v1466 + v1259);
                                  v1472 = logf(v1281) + v1472;
                                  v1280 = sub_1BE61651C((_QWORD *)(a1 + 56), (_QWORD *)(*(_QWORD *)a1 + 24 * SLODWORD(v1282)));
                                  *((_QWORD *)__src + v1259) = v1280;
                                  v1260 = 1;
                                }
                              }
                              v1276 += 2;
                            }
                            while (v1276 != (float *)v1277);
                            v1256 = (char *)v1423[0];
                          }
                          goto LABEL_1406;
                        }
                      }
                      else
                      {
                        if (v1278 >= *(_QWORD *)&v1262)
                          v1278 %= *(_QWORD *)&v1262;
                        if (v1278 != v1272)
                          goto LABEL_1654;
                      }
                      v1274 = (uint64_t *)*v1274;
                      if (!v1274)
                        goto LABEL_1654;
                    }
                  }
                }
                else
                {
                  if (v1271 >= *(_QWORD *)&v1262)
                    v1271 %= *(_QWORD *)&v1262;
                  if (v1271 != v1265)
                    break;
                }
                v1268 = (uint64_t *)*v1268;
              }
              while (v1268);
            }
          }
        }
LABEL_1406:
        ++v1259;
        v1261 = &v1256[224 * v1255];
        v1258 = *((_QWORD *)v1261 + 9);
      }
      while (v1259 < (*((_QWORD *)v1261 + 10) - v1258) >> 2);
      if ((v1260 & 1) != 0)
      {
        sub_1BE76F5D4(&__p, (uint64_t)&buf, (_QWORD *)a1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1284 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v1284 = __p.__r_.__value_.__l.__size_;
        v1285 = sub_1BE61C318((uint64_t)&__dst, (uint64_t *)p_p, v1284);
        v1286 = *((_QWORD *)&v1445 + 1);
        if (*((_QWORD *)&v1445 + 1))
        {
          v1287 = v1285;
          v1288 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1445 + 8));
          v1288.i16[0] = vaddlv_u8(v1288);
          if (v1288.u32[0] > 1uLL)
          {
            v1289 = v1285;
            if (v1285 >= *((_QWORD *)&v1445 + 1))
              v1289 = v1285 % *((_QWORD *)&v1445 + 1);
          }
          else
          {
            v1289 = (*((_QWORD *)&v1445 + 1) - 1) & v1285;
          }
          v1290 = *(uint64_t ***)(v1445 + 8 * v1289);
          if (v1290)
          {
            v1291 = *v1290;
            if (*v1290)
            {
              v1292 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1293 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v1293 = __p.__r_.__value_.__l.__size_;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1260 = (std::string::size_type)&__p;
              else
                v1260 = __p.__r_.__value_.__r.__words[0];
              if (v1288.u32[0] < 2uLL)
              {
                v1294 = *((_QWORD *)&v1445 + 1) - 1;
                while (1)
                {
                  v1301 = v1291[1];
                  if (v1301 == v1287)
                  {
                    v1302 = *((unsigned __int8 *)v1291 + 39);
                    if ((v1302 & 0x80u) == 0)
                      v1303 = *((unsigned __int8 *)v1291 + 39);
                    else
                      v1303 = v1291[3];
                    if (v1303 == v1293)
                    {
                      if ((v1302 & 0x80) != 0)
                      {
                        v1416 = v1293;
                        v1305 = memcmp((const void *)v1291[2], (const void *)v1260, v1291[3]);
                        v1293 = v1416;
                        if (!v1305)
                          goto LABEL_1625;
                      }
                      else
                      {
                        if (!*((_BYTE *)v1291 + 39))
                          goto LABEL_1625;
                        v1304 = 0;
                        while (*((unsigned __int8 *)v1291 + v1304 + 16) == *(unsigned __int8 *)(v1260 + v1304))
                        {
                          if (v1302 == ++v1304)
                            goto LABEL_1509;
                        }
                      }
                    }
                  }
                  else if ((v1301 & v1294) != v1289)
                  {
                    goto LABEL_1510;
                  }
                  v1291 = (uint64_t *)*v1291;
                  if (!v1291)
                    goto LABEL_1510;
                }
              }
              do
              {
                v1295 = v1291[1];
                if (v1295 == v1287)
                {
                  v1296 = *((unsigned __int8 *)v1291 + 39);
                  if ((v1296 & 0x80u) == 0)
                    v1297 = *((unsigned __int8 *)v1291 + 39);
                  else
                    v1297 = v1291[3];
                  if (v1297 == v1293)
                  {
                    if ((v1296 & 0x80) != 0)
                    {
                      v1415 = v1292;
                      v1299 = v1293;
                      v1300 = memcmp((const void *)v1291[2], (const void *)v1260, v1291[3]);
                      v1293 = v1299;
                      v1292 = v1415;
                      if (!v1300)
                        goto LABEL_1625;
                    }
                    else
                    {
                      if (!*((_BYTE *)v1291 + 39))
                        goto LABEL_1625;
                      v1298 = 0;
                      while (*((unsigned __int8 *)v1291 + v1298 + 16) == *(unsigned __int8 *)(v1260 + v1298))
                      {
                        if (v1296 == ++v1298)
                        {
LABEL_1509:
                          if (v1291)
                            goto LABEL_1625;
                          goto LABEL_1510;
                        }
                      }
                    }
                  }
                }
                else
                {
                  if (v1295 >= v1286)
                    v1295 %= v1286;
                  if (v1295 != v1289)
                    break;
                }
                v1291 = (uint64_t *)*v1291;
              }
              while (v1291);
            }
          }
        }
LABEL_1510:
        v1306 = (char *)v1423[1];
        if (v1423[1] >= v1423[2])
        {
          v1308 = 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5);
          v1309 = v1308 + 1;
          if ((unint64_t)(v1308 + 1) > 0x124924924924924)
            sub_1BE61F930();
          if (0xDB6DB6DB6DB6DB6ELL * (((char *)v1423[2] - (char *)v1423[0]) >> 5) > v1309)
            v1309 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v1423[2] - (char *)v1423[0]) >> 5);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v1423[2] - (char *)v1423[0]) >> 5)) >= 0x92492492492492)
            v1310 = 0x124924924924924;
          else
            v1310 = v1309;
          v1428[0] = v1364;
          if (v1310)
          {
            if (v1310 > 0x124924924924924)
              sub_1BE61F100();
            v1311 = (char *)operator new(224 * v1310);
          }
          else
          {
            v1311 = 0;
          }
          *(_QWORD *)&__dst = v1311;
          *((_QWORD *)&__dst + 1) = &v1311[224 * v1308];
          *(_QWORD *)&v1427 = *((_QWORD *)&__dst + 1);
          *((_QWORD *)&v1427 + 1) = &v1311[224 * v1310];
          sub_1BE77D5F4(*((_QWORD **)&__dst + 1), (uint64_t)&buf);
          v1260 = 0;
          v1312 = *((_QWORD *)&__dst + 1);
          *(_QWORD *)&v1427 = v1427 + 224;
          v1314 = (char *)v1423[0];
          for (k = (char *)v1423[1]; &k[v1260] != v1314; sub_1BE77D5F4((_QWORD *)(v1260 + v1312), (uint64_t)&k[v1260]))
            v1260 -= 224;
          v1315 = (void *)(v1312 + v1260);
          v1317 = v1423[0];
          v1316 = v1423[1];
          v1423[0] = v1315;
          v1417 = (void *)v1427;
          for (*(_OWORD *)&v1423[1] = v1427; v1316 != v1317; v1316 = (void *)sub_1BE77D498((uint64_t)v1316 - 224))
            ;
          if (v1317)
            operator delete(v1317);
          v1307 = v1417;
        }
        else
        {
          sub_1BE77D5F4((_QWORD *)v1423[1], (uint64_t)&buf);
          v1307 = v1306 + 224;
        }
        v1423[1] = v1307;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1318 = &__p;
        else
          v1318 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1319 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v1319 = __p.__r_.__value_.__l.__size_;
        v1320 = sub_1BE61C318((uint64_t)&__dst, (uint64_t *)v1318, v1319);
        v1321 = v1320;
        v1322 = *((_QWORD *)&v1445 + 1);
        if (*((_QWORD *)&v1445 + 1))
        {
          v1323 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1445 + 8));
          v1323.i16[0] = vaddlv_u8(v1323);
          if (v1323.u32[0] > 1uLL)
          {
            v1260 = v1320;
            if (v1320 >= *((_QWORD *)&v1445 + 1))
              v1260 = v1320 % *((_QWORD *)&v1445 + 1);
          }
          else
          {
            v1260 = (*((_QWORD *)&v1445 + 1) - 1) & v1320;
          }
          v1324 = *(uint64_t ***)(v1445 + 8 * v1260);
          if (v1324)
          {
            v1325 = *v1324;
            if (*v1324)
            {
              LOBYTE(v1292) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1326 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v1326 = __p.__r_.__value_.__l.__size_;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1327 = &__p;
              else
                v1327 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (v1323.u32[0] < 2uLL)
              {
                v1328 = *((_QWORD *)&v1445 + 1) - 1;
                while (1)
                {
                  v1335 = v1325[1];
                  if (v1335 == v1321)
                  {
                    v1336 = *((unsigned __int8 *)v1325 + 39);
                    if ((v1336 & 0x80u) == 0)
                      v1337 = *((unsigned __int8 *)v1325 + 39);
                    else
                      v1337 = v1325[3];
                    if (v1337 == v1326)
                    {
                      v1338 = (const void **)(v1325 + 2);
                      if ((v1336 & 0x80) != 0)
                      {
                        v1419 = v1326;
                        v1400 = v1328;
                        v1340 = memcmp(*v1338, v1327, v1325[3]);
                        v1328 = v1400;
                        v1326 = v1419;
                        if (!v1340)
                          goto LABEL_1625;
                      }
                      else
                      {
                        if (!*((_BYTE *)v1325 + 39))
                          goto LABEL_1625;
                        v1339 = v1327;
                        while (*(unsigned __int8 *)v1338 == v1339->__r_.__value_.__s.__data_[0])
                        {
                          v1338 = (const void **)((char *)v1338 + 1);
                          v1339 = (std::string *)((char *)v1339 + 1);
                          if (!--v1336)
                            goto LABEL_1625;
                        }
                      }
                    }
                  }
                  else if ((v1335 & v1328) != v1260)
                  {
                    goto LABEL_1583;
                  }
                  v1325 = (uint64_t *)*v1325;
                  if (!v1325)
                    goto LABEL_1583;
                }
              }
              do
              {
                v1329 = v1325[1];
                if (v1329 == v1321)
                {
                  v1330 = *((unsigned __int8 *)v1325 + 39);
                  if ((v1330 & 0x80u) == 0)
                    v1331 = *((unsigned __int8 *)v1325 + 39);
                  else
                    v1331 = v1325[3];
                  if (v1331 == v1326)
                  {
                    v1332 = (const void **)(v1325 + 2);
                    if ((v1330 & 0x80) != 0)
                    {
                      v1418 = v1326;
                      v1334 = memcmp(*v1332, v1327, v1325[3]);
                      v1326 = v1418;
                      if (!v1334)
                        goto LABEL_1625;
                    }
                    else
                    {
                      if (!*((_BYTE *)v1325 + 39))
                        goto LABEL_1625;
                      v1333 = v1327;
                      while (*(unsigned __int8 *)v1332 == v1333->__r_.__value_.__s.__data_[0])
                      {
                        v1332 = (const void **)((char *)v1332 + 1);
                        v1333 = (std::string *)((char *)v1333 + 1);
                        if (!--v1330)
                          goto LABEL_1625;
                      }
                    }
                  }
                }
                else
                {
                  if (v1329 >= v1322)
                    v1329 %= v1322;
                  if (v1329 != v1260)
                    break;
                }
                v1325 = (uint64_t *)*v1325;
              }
              while (v1325);
            }
          }
        }
LABEL_1583:
        v1341 = operator new(0x28uLL);
        *(_QWORD *)&__dst = v1341;
        *((_QWORD *)&__dst + 1) = &v1446;
        LOBYTE(v1427) = 0;
        *v1341 = 0;
        v1341[1] = v1321;
        v1342 = (std::string *)(v1341 + 2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          sub_1BE61F128(v1342, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          *v1342 = __p;
        LOBYTE(v1427) = 1;
        v1343 = (float)(unint64_t)(*((_QWORD *)&v1446 + 1) + 1);
        if (v1322 && (float)(v1447 * (float)v1322) >= v1343)
        {
          v1344 = *(_QWORD **)(v1445 + 8 * v1260);
          v1345 = (_QWORD *)__dst;
          if (v1344)
          {
LABEL_1589:
            *v1345 = *v1344;
            *v1344 = __dst;
            goto LABEL_1624;
          }
        }
        else
        {
          v1346 = (v1322 & (v1322 - 1)) != 0;
          if (v1322 < 3)
            v1346 = 1;
          v1347 = v1346 | (2 * v1322);
          v1348 = vcvtps_u32_f32(v1343 / v1447);
          if (v1347 <= v1348)
            prime = v1348;
          else
            prime = v1347;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v1350 = *((_QWORD *)&v1445 + 1);
          if (prime > *((_QWORD *)&v1445 + 1))
            goto LABEL_1600;
          if (prime < *((_QWORD *)&v1445 + 1))
          {
            v1351 = vcvtps_u32_f32((float)*((unint64_t *)&v1446 + 1) / v1447);
            if (*((_QWORD *)&v1445 + 1) < 3uLL
              || (v1352 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1445 + 8)),
                  v1352.i16[0] = vaddlv_u8(v1352),
                  v1352.u32[0] > 1uLL))
            {
              v1351 = std::__next_prime(v1351);
            }
            else
            {
              v1353 = 1 << -(char)__clz(v1351 - 1);
              if (v1351 >= 2)
                v1351 = v1353;
            }
            if (prime <= v1351)
              prime = v1351;
            if (prime < v1350)
LABEL_1600:
              sub_1BE61F23C((uint64_t)&v1445, prime);
          }
          v1322 = *((_QWORD *)&v1445 + 1);
          v1354 = *((_QWORD *)&v1445 + 1) - 1;
          if ((*((_QWORD *)&v1445 + 1) & (*((_QWORD *)&v1445 + 1) - 1)) != 0)
          {
            if (v1321 >= *((_QWORD *)&v1445 + 1))
            {
              v1260 = v1321 % *((_QWORD *)&v1445 + 1);
              v1344 = *(_QWORD **)(v1445 + 8 * (v1321 % *((_QWORD *)&v1445 + 1)));
              v1345 = (_QWORD *)__dst;
              if (v1344)
                goto LABEL_1589;
            }
            else
            {
              v1260 = v1321;
              v1344 = *(_QWORD **)(v1445 + 8 * v1321);
              v1345 = (_QWORD *)__dst;
              if (v1344)
                goto LABEL_1589;
            }
          }
          else
          {
            v1260 = v1354 & v1321;
            v1344 = *(_QWORD **)(v1445 + 8 * (v1354 & v1321));
            v1345 = (_QWORD *)__dst;
            if (v1344)
              goto LABEL_1589;
          }
        }
        *v1345 = v1446;
        *(_QWORD *)&v1446 = __dst;
        *(_QWORD *)(v1445 + 8 * v1260) = &v1446;
        if (*(_QWORD *)__dst)
        {
          v1355 = *(_QWORD *)(*(_QWORD *)__dst + 8);
          if ((v1322 & (v1322 - 1)) != 0)
          {
            if (v1355 >= v1322)
              v1355 %= v1322;
          }
          else
          {
            v1355 &= v1322 - 1;
          }
          *(_QWORD *)(v1445 + 8 * v1355) = __dst;
        }
LABEL_1624:
        ++*((_QWORD *)&v1446 + 1);
        LOBYTE(v1292) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_1625:
        if ((v1292 & 0x80) != 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1BE77D498((uint64_t)&buf);
    ++v1255;
  }
  while (v1255 != v1408);
  v1236 = (char *)v1423[0];
  v1252 = (char *)v1423[1];
  v1254 = 0x6DB6DB6DB6DB6DB7 * (((char *)v1423[1] - (char *)v1423[0]) >> 5);
  LODWORD(v1253) = v1408;
LABEL_1628:
  if (v1254 > (int)v1253)
  {
    v1356 = 126 - 2 * __clz(v1254);
    if (v1252 == v1236)
      v1357 = 0;
    else
      v1357 = v1356;
    sub_1BE781E88((uint64_t)v1236, (unint64_t)v1252, v1357, 1);
  }
  v1358 = (void **)v1446;
  if ((_QWORD)v1446)
  {
    do
    {
      v1360 = (void **)*v1358;
      if (*((char *)v1358 + 39) < 0)
        operator delete(v1358[2]);
      operator delete(v1358);
      v1358 = v1360;
    }
    while (v1360);
  }
  v1359 = (void *)v1445;
  *(_QWORD *)&v1445 = 0;
  if (v1359)
    operator delete(v1359);
  *(_OWORD *)a7 = *(_OWORD *)v1423;
  a7[2] = v1423[2];
LABEL_1637:
  if (v1424)
    operator delete(v1424);

LABEL_1640:
}

void sub_1BE77CB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE77D308(_QWORD *a1)
{
  *a1 = &off_1E77EF7D8;
  sub_1BE61FAE0((uint64_t)(a1 + 1));
  return a1;
}

void sub_1BE77D338(_QWORD *a1)
{
  *a1 = &off_1E77EF7D8;
  sub_1BE61FAE0((uint64_t)(a1 + 1));
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE77D37C(uint64_t a1)
{
  sub_1BE77E118(a1);
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE77D3A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E77EF7B0;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(void **)(v3 - 24);
        v3 -= 24;
        v5 = v6;
        if (v6)
          operator delete(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE77D414(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E77EF7B0;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(void **)(v3 - 24);
        v3 -= 24;
        v5 = v6;
        if (v6)
          operator delete(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE77D498(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 176);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 200));
  v2 = *(void **)(a1 + 176);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
LABEL_4:
  sub_1BE62033C(a1 + 144, *(_QWORD **)(a1 + 152));
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(void **)(a1 + 48);
    if (v7 != v6)
    {
      v9 = *(_QWORD *)(a1 + 56);
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v8);
  }
  sub_1BE67AC7C(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_1BE77D58C(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1BE77D58C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1BE77D58C(a1, *(_QWORD *)a2);
    sub_1BE77D58C(a1, *((_QWORD *)a2 + 1));

    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD **sub_1BE77D5F4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t ***v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  char **v31;
  char ***v32;
  _QWORD *v33;
  _QWORD **v34;
  int v35;
  __int16 v36;
  _BYTE *v37;
  _BYTE *v38;
  int64_t v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  __int128 v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  int v49;
  int v50;
  size_t v51;
  const void *v52;
  size_t v53;
  const void *v54;
  size_t v55;
  int v56;
  BOOL v57;
  uint64_t **v58;
  uint64_t **v59;
  int v60;
  size_t v61;
  const void *v62;
  size_t v63;
  int v64;
  _BOOL4 v65;
  int v66;
  _BOOL4 v67;
  uint64_t *v68;
  _BYTE *v69;
  __int128 v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  uint64_t **v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  char *v87;
  char **v88;
  char *v89;
  char **v90;
  char **v91;
  char **v92;
  int v93;
  char *v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD **v101;
  uint64_t *v102;

  a1[1] = 0;
  v2 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v101 = (_QWORD **)a1;
  v3 = (_QWORD *)(a2 + 8);
  v4 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    while (1)
    {
      v44 = (uint64_t *)a1[1];
      v45 = v2;
      if ((_QWORD *)*a1 != v2)
      {
        v46 = (_QWORD *)a1[1];
        v47 = v2;
        if (v44)
        {
          do
          {
            v45 = v46;
            v46 = (_QWORD *)v46[1];
          }
          while (v46);
        }
        else
        {
          do
          {
            v45 = (_QWORD *)v47[2];
            v48 = *v45 == (_QWORD)v47;
            v47 = v45;
          }
          while (v48);
        }
        v49 = *((char *)v4 + 55);
        v50 = *((char *)v45 + 55);
        if (v50 >= 0)
          v51 = *((unsigned __int8 *)v45 + 55);
        else
          v51 = v45[5];
        if (v50 >= 0)
          v52 = v45 + 4;
        else
          v52 = (const void *)v45[4];
        if (v49 >= 0)
          v53 = *((unsigned __int8 *)v4 + 55);
        else
          v53 = v4[5];
        if (v49 >= 0)
          v54 = v4 + 4;
        else
          v54 = (const void *)v4[4];
        if (v53 >= v51)
          v55 = v51;
        else
          v55 = v53;
        v56 = memcmp(v52, v54, v55);
        v57 = v51 < v53;
        if (v56)
          v57 = v56 < 0;
        if (!v57)
          break;
      }
      if (v44)
        v58 = (uint64_t **)v45;
      else
        v58 = (uint64_t **)v2;
      if (v44)
        v59 = (uint64_t **)(v45 + 1);
      else
        v59 = (uint64_t **)v2;
      if (!*v59)
        goto LABEL_73;
LABEL_79:
      v72 = (_QWORD *)v4[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          v73 = (_QWORD *)v4[2];
          v48 = *v73 == (_QWORD)v4;
          v4 = v73;
        }
        while (!v48);
      }
      v4 = v73;
      a1 = v101;
      if (v73 == v3)
        goto LABEL_2;
    }
    v59 = (uint64_t **)v2;
    v58 = (uint64_t **)v2;
    if (v44)
    {
      while (1)
      {
        while (1)
        {
          v58 = (uint64_t **)v44;
          v60 = *((char *)v44 + 55);
          if (v60 >= 0)
            v61 = *((unsigned __int8 *)v44 + 55);
          else
            v61 = v44[5];
          if (v60 >= 0)
            v62 = v44 + 4;
          else
            v62 = (const void *)v44[4];
          if (v61 >= v53)
            v63 = v53;
          else
            v63 = v61;
          v64 = memcmp(v54, v62, v63);
          v65 = v53 < v61;
          if (v64)
            v65 = v64 < 0;
          if (!v65)
            break;
          v44 = *v58;
          v59 = v58;
          if (!*v58)
            goto LABEL_73;
        }
        v66 = memcmp(v62, v54, v63);
        v67 = v61 < v53;
        if (v66)
          v67 = v66 < 0;
        if (!v67)
          goto LABEL_79;
        v44 = v58[1];
        if (!v44)
        {
          v59 = v58 + 1;
          break;
        }
      }
    }
LABEL_73:
    v68 = (uint64_t *)operator new(0x40uLL);
    v69 = v68 + 4;
    if (*((char *)v4 + 55) < 0)
    {
      sub_1BE61F128(v69, (void *)v4[4], v4[5]);
    }
    else
    {
      v70 = *((_OWORD *)v4 + 2);
      v68[6] = v4[6];
      *(_OWORD *)v69 = v70;
    }
    v68[7] = (uint64_t)(id)v4[7];
    *v68 = 0;
    v68[1] = 0;
    v68[2] = (uint64_t)v58;
    *v59 = v68;
    v71 = (_QWORD *)**v101;
    if (v71)
    {
      *v101 = v71;
      v68 = *v59;
    }
    sub_1BE61F5C0(v101[1], v68);
    v101[2] = (_QWORD *)((char *)v101[2] + 1);
    goto LABEL_79;
  }
LABEL_2:
  a1[4] = 0;
  v5 = (uint64_t **)(a1 + 4);
  a1[3] = a1 + 4;
  v6 = (uint64_t ***)(a1 + 3);
  a1[5] = 0;
  v7 = *(_QWORD **)(a2 + 24);
  if (v7 != (_QWORD *)(a2 + 32))
  {
    while (1)
    {
      v74 = *((_DWORD *)v7 + 8);
      v75 = *v5;
      v76 = v5;
      if (*v6 != v5)
      {
        v77 = *v5;
        v78 = v5;
        if (v75)
        {
          do
          {
            v76 = (uint64_t **)v77;
            v77 = (uint64_t *)v77[1];
          }
          while (v77);
        }
        else
        {
          do
          {
            v76 = (uint64_t **)v78[2];
            v48 = *v76 == (uint64_t *)v78;
            v78 = v76;
          }
          while (v48);
        }
        if (*((_DWORD *)v76 + 8) >= v74)
          break;
      }
      if (v75)
        v79 = v76;
      else
        v79 = v5;
      if (v75)
        v80 = v76 + 1;
      else
        v80 = v5;
      if (!*v80)
        goto LABEL_107;
LABEL_110:
      v84 = (_QWORD *)v7[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (_QWORD *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (_QWORD *)v7[2];
          v48 = *v85 == (_QWORD)v7;
          v7 = v85;
        }
        while (!v48);
      }
      v7 = v85;
      a1 = v101;
      if (v85 == (_QWORD *)(a2 + 32))
        goto LABEL_3;
    }
    v80 = v5;
    v79 = v5;
    if (v75)
    {
      while (1)
      {
        while (1)
        {
          v79 = (uint64_t **)v75;
          v81 = *((_DWORD *)v75 + 8);
          if (v81 <= v74)
            break;
          v75 = *v79;
          v80 = v79;
          if (!*v79)
            goto LABEL_107;
        }
        if (v81 >= v74)
          goto LABEL_110;
        v75 = v79[1];
        if (!v75)
        {
          v80 = v79 + 1;
          break;
        }
      }
    }
LABEL_107:
    sub_1BE77DF40((uint64_t)v6, (int *)v7 + 8, (uint64_t)&v102);
    v82 = v102;
    *v102 = 0;
    v82[1] = 0;
    v82[2] = (uint64_t)v79;
    *v80 = v82;
    v83 = **v6;
    if (v83)
    {
      *v6 = (uint64_t **)v83;
      v82 = *v80;
    }
    sub_1BE61F5C0(v101[4], v82);
    v101[5] = (_QWORD *)((char *)v101[5] + 1);
    goto LABEL_110;
  }
LABEL_3:
  a1[6] = 0;
  v8 = a1;
  a1[8] = 0;
  v9 = (uint64_t)(a1 + 8);
  a1[7] = 0;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    if (v13 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v14 = operator new(v12);
    v8 = v101;
    v101[6] = v14;
    v101[7] = v14;
    v101[8] = &v14[3 * v13];
    v101[7] = sub_1BE77E018(v9, v10, v11, v14);
  }
  v8[9] = 0;
  v8[10] = 0;
  v8[11] = 0;
  v16 = *(_BYTE **)(a2 + 72);
  v15 = *(_BYTE **)(a2 + 80);
  v17 = v15 - v16;
  v18 = v8;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_1BE61F930();
    v19 = (char *)operator new(v15 - v16);
    v8[9] = v19;
    v8[10] = v19;
    v20 = &v19[4 * (v17 >> 2)];
    v8[11] = v20;
    memcpy(v19, v16, v17);
    v8[10] = v20;
  }
  v8[12] = 0;
  v8[13] = 0;
  v8[14] = 0;
  v22 = *(_BYTE **)(a2 + 96);
  v21 = *(_BYTE **)(a2 + 104);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      sub_1BE61F930();
    v24 = (char *)operator new(v21 - v22);
    v8[12] = v24;
    v8[13] = v24;
    v25 = &v24[4 * (v23 >> 2)];
    v8[14] = v25;
    memcpy(v24, v22, v23);
    v8[13] = v25;
  }
  v8[15] = 0;
  v8[16] = 0;
  v8[17] = 0;
  v27 = *(_BYTE **)(a2 + 120);
  v26 = *(_BYTE **)(a2 + 128);
  v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0)
      sub_1BE61F930();
    v29 = (char *)operator new(v26 - v27);
    v8[15] = v29;
    v8[16] = v29;
    v30 = &v29[8 * (v28 >> 3)];
    v8[17] = v30;
    memcpy(v29, v27, v28);
    v8[16] = v30;
  }
  v8[19] = 0;
  v31 = (char **)(v8 + 19);
  v18[18] = v18 + 19;
  v32 = (char ***)(v18 + 18);
  v18[20] = 0;
  v33 = *(_QWORD **)(a2 + 144);
  if (v33 != (_QWORD *)(a2 + 152))
  {
    while (1)
    {
      v86 = *((_DWORD *)v33 + 7);
      v87 = *v31;
      v88 = v31;
      if (*v32 != v31)
      {
        v89 = *v31;
        v90 = v31;
        if (v87)
        {
          do
          {
            v88 = (char **)v89;
            v89 = (char *)*((_QWORD *)v89 + 1);
          }
          while (v89);
        }
        else
        {
          do
          {
            v88 = (char **)v90[2];
            v48 = *v88 == (char *)v90;
            v90 = v88;
          }
          while (v48);
        }
        if (*((_DWORD *)v88 + 7) >= v86)
          break;
      }
      if (v87)
        v91 = v88;
      else
        v91 = v31;
      if (v87)
        v92 = v88 + 1;
      else
        v92 = v31;
      if (!*v92)
        goto LABEL_138;
LABEL_141:
      v97 = (_QWORD *)v33[1];
      if (v97)
      {
        do
        {
          v98 = v97;
          v97 = (_QWORD *)*v97;
        }
        while (v97);
      }
      else
      {
        do
        {
          v98 = (_QWORD *)v33[2];
          v48 = *v98 == (_QWORD)v33;
          v33 = v98;
        }
        while (!v48);
      }
      v33 = v98;
      if (v98 == (_QWORD *)(a2 + 152))
        goto LABEL_16;
    }
    v92 = v31;
    v91 = v31;
    if (v87)
    {
      while (1)
      {
        while (1)
        {
          v91 = (char **)v87;
          v93 = *((_DWORD *)v87 + 7);
          if (v93 <= v86)
            break;
          v87 = *v91;
          v92 = v91;
          if (!*v91)
            goto LABEL_138;
        }
        if (v93 >= v86)
          goto LABEL_141;
        v87 = v91[1];
        if (!v87)
        {
          v92 = v91 + 1;
          break;
        }
      }
    }
LABEL_138:
    v94 = (char *)operator new(0x28uLL);
    v95 = *(_QWORD *)((char *)v33 + 28);
    *((_DWORD *)v94 + 9) = *((_DWORD *)v33 + 9);
    *(_QWORD *)(v94 + 28) = v95;
    *(_QWORD *)v94 = 0;
    *((_QWORD *)v94 + 1) = 0;
    *((_QWORD *)v94 + 2) = v91;
    *v92 = v94;
    v96 = **v32;
    if (v96)
    {
      *v32 = (char **)v96;
      v94 = *v92;
    }
    sub_1BE61F5C0(v101[19], (uint64_t *)v94);
    v101[20] = (_QWORD *)((char *)v101[20] + 1);
    goto LABEL_141;
  }
LABEL_16:
  v34 = v101;
  v35 = *(_DWORD *)(a2 + 168);
  v36 = *(_WORD *)(a2 + 172);
  v101[22] = 0;
  *((_WORD *)v101 + 86) = v36;
  *((_DWORD *)v101 + 42) = v35;
  v101[23] = 0;
  v101[24] = 0;
  v38 = *(_BYTE **)(a2 + 176);
  v37 = *(_BYTE **)(a2 + 184);
  v39 = v37 - v38;
  if (v37 != v38)
  {
    if (v39 < 0)
      sub_1BE61F930();
    v40 = (char *)operator new(v37 - v38);
    v34 = v101;
    v101[22] = v40;
    v101[23] = v40;
    v41 = &v40[4 * (v39 >> 2)];
    v101[24] = v41;
    memcpy(v40, v38, v39);
    v101[23] = v41;
  }
  v42 = v34 + 25;
  if (*(char *)(a2 + 223) < 0)
  {
    sub_1BE61F128(v42, *(void **)(a2 + 200), *(_QWORD *)(a2 + 208));
  }
  else
  {
    v43 = *(_OWORD *)(a2 + 200);
    v34[27] = *(_QWORD **)(a2 + 216);
    *(_OWORD *)v42 = v43;
  }
  return v34;
}

void sub_1BE77DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD **v14;
  void **v15;
  uint64_t v16;
  void **v17;
  _QWORD **v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(a13 + 184) = v20;
    operator delete(v20);
  }
  sub_1BE62033C(v16, *v14);
  v21 = *v15;
  if (*v15)
  {
    *(_QWORD *)(a13 + 128) = v21;
    operator delete(v21);
  }
  v22 = *a9;
  if (*a9)
  {
    *(_QWORD *)(a13 + 104) = v22;
    operator delete(v22);
  }
  v23 = *a10;
  if (*a10)
  {
    *(_QWORD *)(a13 + 80) = v23;
    operator delete(v23);
  }
  sub_1BE63CEBC(a11);
  sub_1BE67AC7C(v13, *v18);
  sub_1BE77D58C(a13, *(char **)(a13 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE77DEEC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {

      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_1BE77DF40@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  result[5] = 0;
  *((_DWORD *)result + 8) = v7;
  result[6] = 0;
  result[7] = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 1);
  v8 = (_BYTE *)*((_QWORD *)a2 + 2);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    v11 = result;
    if (v10 < 0)
      sub_1BE61F930();
    v12 = (char *)operator new(v8 - v9);
    v11[5] = v12;
    v11[6] = v12;
    v11[7] = &v12[8 * (v10 >> 3)];
    result = memcpy(v12, v9, v10 & 0xFFFFFFFFFFFFFFF8);
    v11[6] = &v12[v10 & 0xFFFFFFFFFFFFFFF8];
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1BE77DFF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_1BE67AEA0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE77E018(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1BE61F930();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1BE77E0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE77E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE77E118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void **v12;
  void **v13;
  void **v14;

  *(_QWORD *)a1 = &off_1E77EF800;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 144);
    v4 = *(void **)(a1 + 136);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v4);
  }

  v5 = *(void ***)(a1 + 104);
  if (v5)
  {
    do
    {
      v12 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v12;
    }
    while (v12);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(void ***)(a1 + 64);
  if (v7)
  {
    do
    {
      v13 = (void **)*v7;
      if (*((char *)v7 + 39) < 0)
        operator delete(v7[2]);
      operator delete(v7);
      v7 = v13;
    }
    while (v13);
  }
  v8 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void ***)(a1 + 24);
  if (v9)
  {
    do
    {
      v14 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v14;
    }
    while (v14);
  }
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

char *sub_1BE77E25C(char **a1, _BYTE *__src, _BYTE *a3)
{
  char *result;
  char *v7;
  char *v8;
  _QWORD *v9;
  int64_t v10;

  result = a1[2];
  v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = (char *)operator new(4uLL);
    v7 = result;
    *a1 = result;
    a1[1] = result;
    v9 = a1 + 1;
    a1[2] = result + 4;
    v10 = a3 - __src;
    if (a3 != __src)
      result = (char *)memcpy(result, __src, a3 - __src);
  }
  else
  {
    v8 = a1[1];
    v9 = a1 + 1;
    v10 = a3 - __src;
    if (v8 != v7)
    {
      if (a3 == __src)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (__src != a3)
LABEL_10:
      result = (char *)memmove(v7, __src, a3 - __src);
  }
LABEL_11:
  *v9 = &v7[v10];
  return result;
}

void sub_1BE77E330(float *a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  unint64_t v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v13 = *v17;
LABEL_90:
    *v17 = v13;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_1BE61F100();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_68;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_68;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v6 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 == v27)
        goto LABEL_62;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
      {
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
LABEL_62:
        v25 = v36;
        v36 = (_QWORD *)*v36;
        if (!v36)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
        v25 = v36;
        v36 = (_QWORD *)*v36;
        v27 = v38;
        if (!v36)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (prime <= v33)
      prime = v33;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v6)
    v6 %= v7;
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v16[v6] = a1 + 4;
  if (*v13)
  {
    v40 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
}

void sub_1BE77E7AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE77E7C0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (uint64_t *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          *((_DWORD *)v12 + 9) = *((_DWORD *)v13 + 9);
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= *((_DWORD *)v15 + 7))
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1BE62033C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_1BE62033C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v25 + 28) = *(_QWORD *)((char *)v4 + 28);
      *((_DWORD *)v25 + 9) = v27;
      v28 = *v24;
      v29 = (uint64_t **)(a1 + 8);
      v30 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_54:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = **(_QWORD **)a1;
      if (v31)
        goto LABEL_55;
LABEL_56:
      sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = v28;
        if (*((_DWORD *)v25 + 7) >= *((_DWORD *)v28 + 7))
          break;
        v28 = (uint64_t **)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_54;
      }
      v28 = (uint64_t **)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = **(_QWORD **)a1;
    if (!v31)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v31;
    v26 = *v30;
    goto LABEL_56;
  }
}

uint64_t *sub_1BE77EAFC(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_26;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return (uint64_t *)v10;
      v5 = v10[1];
    }
    while (v5);
    v6 = v10 + 1;
LABEL_26:
    v22 = (uint64_t *)operator new(0x40uLL);
    v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v10 = a1 + 1;
    v22 = (uint64_t *)operator new(0x40uLL);
    v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_1BE61F128(v23, *(void **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v23[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  v22[7] = 0;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  *v6 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v6;
  }
  sub_1BE61F5C0(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_1BE77EC8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1BE77ECA0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v23 = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v10[6] = v23;
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *v6 = (uint64_t *)v10;
    v24 = (uint64_t *)**a1;
    v25 = (uint64_t *)v10;
    if (v24)
    {
      *a1 = v24;
      v25 = *v6;
    }
    sub_1BE61F5C0(a1[1], v25);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t *sub_1BE77EE04(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_1BE77EF10(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x20uLL);
        v11[7] = v6[7];
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_1BE61F5C0((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_1BE77EF10(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

char *sub_1BE77F0C0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_1BE61F128(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1BE77F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1BE61F89C(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE77F1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1BE61F89C(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1BE77F1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1BE61C318((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x28uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(_QWORD *)v14 = *v29;
LABEL_89:
      *v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_1BE61F23C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      if (v29)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v28 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BE77F5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE61F0B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE77F610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(void **)(v2 - 24);
    v2 -= 24;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1BE77F660(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_1BE61F930();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_1BE61F100();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v3 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_1BE77F7F8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _DWORD *v17;
  void *v18;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      if (v8 != (_DWORD *)a2)
        sub_1BE66E294((_QWORD *)v8 + 3, (char *)a2[3], (char *)a2[4], (uint64_t)(a2[4] - a2[3]) >> 2);
      v9 = *(_DWORD **)v8;
      sub_1BE77FA00((uint64_t)a1, (uint64_t)v8);
      a2 = (_QWORD *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v17 = *(_DWORD **)v8;
      v18 = (void *)*((_QWORD *)v8 + 3);
      if (v18)
      {
        *((_QWORD *)v8 + 4) = v18;
        operator delete(v18);
      }
      operator delete(v8);
      v8 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      v10 = operator new(0x30uLL);
      *v10 = 0;
      v10[1] = 0;
      v11 = *((int *)a2 + 4);
      v10[3] = 0;
      *((_DWORD *)v10 + 4) = v11;
      v10[4] = 0;
      v10[5] = 0;
      v13 = (_BYTE *)a2[3];
      v12 = (_BYTE *)a2[4];
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          sub_1BE61F930();
        v15 = (char *)operator new(v12 - v13);
        v10[3] = v15;
        v10[4] = v15;
        v16 = &v15[4 * (v14 >> 2)];
        v10[5] = v16;
        memcpy(v15, v13, v14);
        v10[4] = v16;
      }
      v10[1] = v11;
      sub_1BE77FA00((uint64_t)a1, (uint64_t)v10);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_1BE77F974()
{
  __break(1u);
}

void sub_1BE77F990(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE77F9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE758CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE77F9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_1BE758CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE77F9DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE77FA00(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t *i;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = *(int *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_1BE61F100();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    v17 = (unint64_t)v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = *v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = (uint64_t **)v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22 && *((_DWORD *)v20 + 4) == *((_DWORD *)v22 + 4));
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = (uint64_t **)v20;
            v19 = v21;
          }
        }
        v20 = *v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = *v15; *v15; i = *v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = (uint64_t **)i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41 && *((_DWORD *)i + 4) == *((_DWORD *)v41 + 4));
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = (uint64_t **)i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_85;
    }
    v34 = 0;
    v35 = *(_DWORD *)(a2 + 16);
    while (1)
    {
      v37 = v33;
      v33 = (uint64_t *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (*((_DWORD *)v33 + 4) != v35);
        v34 |= *((_DWORD *)v33 + 4) == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = *(_QWORD *)(a2 + 8);
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = *(_DWORD *)(a2 + 16);
  while (1)
  {
    v37 = v50;
    v50 = (uint64_t *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (*((_DWORD *)v50 + 4) != v52);
      v51 |= *((_DWORD *)v50 + 4) == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = *(_QWORD *)(a2 + 8);
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *(_QWORD *)a2 = *v37;
  *v37 = a2;
  if (*(_QWORD *)a2)
  {
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE77FF60(void **__p)
{
  void **v2;
  void *v3;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_1BE77FFA8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      v9 = *(_DWORD **)v8;
      sub_1BE77FA00((uint64_t)a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = *(_DWORD **)v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x18uLL);
      *(_QWORD *)v10 = 0;
      v11 = *((int *)a2 + 4);
      v10[4] = v11;
      *((_QWORD *)v10 + 1) = v11;
      sub_1BE77FA00((uint64_t)a1, (uint64_t)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1BE780084(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BE7800A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE7800B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7800CC(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  BOOL v35;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  char *v76;
  size_t v77;

  v6 = a1[1];
  if (!v6)
    goto LABEL_80;
  for (i = 0; i != v6; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (!v8)
  {
LABEL_80:
    while (a2 != a3)
    {
      v71 = operator new(0x30uLL);
      *v71 = 0;
      v71[1] = 0;
      v72 = *((int *)a2 + 4);
      v71[3] = 0;
      *((_DWORD *)v71 + 4) = v72;
      v71[4] = 0;
      v71[5] = 0;
      v74 = (_BYTE *)*((_QWORD *)a2 + 3);
      v73 = (_BYTE *)*((_QWORD *)a2 + 4);
      v75 = v73 - v74;
      if (v73 != v74)
      {
        if (v75 < 0)
          sub_1BE61F930();
        v76 = (char *)operator new(v73 - v74);
        v71[3] = v76;
        v71[4] = v76;
        v71[5] = &v76[8 * (v75 >> 3)];
        v77 = v75 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v76, v74, v77);
        v71[4] = &v76[v77];
      }
      v71[1] = v72;
      sub_1BE77FA00((uint64_t)a1, (uint64_t)v71);
      a2 = *(char **)a2;
    }
    return;
  }
  while (a2 != a3)
  {
    *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
    if (v8 != a2)
    {
      v9 = (char *)*((_QWORD *)v8 + 3);
      v10 = (char *)*((_QWORD *)a2 + 3);
      v11 = (char *)*((_QWORD *)a2 + 4);
      v12 = v11 - v10;
      v13 = (v11 - v10) >> 3;
      v14 = *((_QWORD *)v8 + 5);
      if (v13 > (v14 - (uint64_t)v9) >> 3)
      {
        if (v9)
        {
          *((_QWORD *)v8 + 4) = v9;
          operator delete(v9);
          v14 = 0;
          *((_QWORD *)v8 + 3) = 0;
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
        }
        if (v12 < 0)
          goto LABEL_87;
        v15 = v14 >> 2;
        if (v14 >> 2 <= v13)
          v15 = (v11 - v10) >> 3;
        v16 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
        if (v16 >> 61)
LABEL_87:
          sub_1BE61F930();
        v17 = (char *)operator new(8 * v16);
        v18 = v17;
        *((_QWORD *)v8 + 4) = v17;
        v19 = v8 + 32;
        *((_QWORD *)v8 + 3) = v17;
        *((_QWORD *)v8 + 5) = &v17[8 * v16];
        v20 = v17;
        if (v10 != v11)
        {
          memcpy(v17, v10, v12 & 0xFFFFFFFFFFFFFFF8);
          v20 = &v18[v12 & 0xFFFFFFFFFFFFFFF8];
        }
        v21 = (char *)(v20 - v18);
        goto LABEL_58;
      }
      v19 = v8 + 32;
      v18 = (char *)*((_QWORD *)v8 + 4);
      v22 = v18 - v9;
      v23 = (v18 - v9) >> 3;
      if (v23 < v13)
      {
        v24 = &v10[8 * v23];
        if (v18 != v9)
        {
          if ((unint64_t)(v22 - 8) < 0x78)
          {
            v25 = (char *)*((_QWORD *)a2 + 3);
            goto LABEL_24;
          }
          v31 = (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
          v32 = &v9[v31 + 4];
          v33 = &v10[v31 + 4];
          v35 = v9 + 4 < &v10[v22 & 0xFFFFFFFFFFFFFFF8] && v10 + 4 < &v9[v22 & 0xFFFFFFFFFFFFFFF8];
          v25 = (char *)*((_QWORD *)a2 + 3);
          if (v10 < v32 && v9 < v33)
            goto LABEL_90;
          if (v35)
            goto LABEL_90;
          v37 = ((unint64_t)(v22 - 8) >> 3) + 1;
          v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFF8);
          v39 = &v9[v38];
          v25 = &v10[v38];
          v40 = (__int128 *)(v10 + 32);
          v41 = v9 + 32;
          v42 = v37 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v44 = *(v40 - 2);
            v43 = *(v40 - 1);
            v46 = *v40;
            v45 = v40[1];
            v40 += 4;
            *(v41 - 2) = v44;
            *(v41 - 1) = v43;
            *v41 = v46;
            v41[1] = v45;
            v41 += 4;
            v42 -= 8;
          }
          while (v42);
          v9 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_90:
            do
            {
LABEL_24:
              *(_DWORD *)v9 = *(_DWORD *)v25;
              *((_DWORD *)v9 + 1) = *((_DWORD *)v25 + 1);
              v25 += 8;
              v9 += 8;
            }
            while (v25 != v24);
          }
        }
        if (v24 == v11)
        {
          v21 = 0;
        }
        else
        {
          v26 = &v10[v22];
          v27 = v11 - v26 - 8;
          if (v27 < 0x38)
          {
            v28 = v18;
            goto LABEL_56;
          }
          v47 = v18 - v26;
          v28 = v18;
          if (v47 < 0x20)
            goto LABEL_91;
          v48 = (v27 >> 3) + 1;
          v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
          v24 += v49;
          v28 = &v18[v49];
          v50 = v18 + 16;
          v51 = &v10[8 * v23 + 16];
          v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 += 2;
            v51 += 32;
            v52 -= 4;
          }
          while (v52);
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
LABEL_56:
              v54 = *(_QWORD *)v24;
              v24 += 8;
              *(_QWORD *)v28 = v54;
              v28 += 8;
            }
            while (v24 != v11);
          }
          v21 = (char *)(v28 - v18);
        }
LABEL_58:
        *v19 = &v21[(_QWORD)v18];
        goto LABEL_59;
      }
      if (v10 == v11)
      {
        v30 = (char *)*((_QWORD *)v8 + 3);
      }
      else
      {
        v29 = v12 - 8;
        if ((unint64_t)(v12 - 8) < 0x78)
        {
          v30 = (char *)*((_QWORD *)v8 + 3);
          goto LABEL_31;
        }
        v57 = v9 + 4 < &v10[(v29 & 0xFFFFFFFFFFFFFFF8) + 8] && v10 + 4 < &v9[(v29 & 0xFFFFFFFFFFFFFFF8) + 8];
        v30 = (char *)*((_QWORD *)v8 + 3);
        if (v10 < &v9[(v29 & 0xFFFFFFFFFFFFFFF8) + 4] && v9 < &v10[(v29 & 0xFFFFFFFFFFFFFFF8) + 4])
          goto LABEL_92;
        if (v57)
          goto LABEL_92;
        v59 = (v29 >> 3) + 1;
        v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFF8);
        v30 = &v9[v60];
        v61 = &v10[v60];
        v62 = (__int128 *)(v10 + 32);
        v63 = v9 + 32;
        v64 = v59 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v66 = *(v62 - 2);
          v65 = *(v62 - 1);
          v68 = *v62;
          v67 = v62[1];
          v62 += 4;
          *(v63 - 2) = v66;
          *(v63 - 1) = v65;
          *v63 = v68;
          v63[1] = v67;
          v63 += 4;
          v64 -= 8;
        }
        while (v64);
        v10 = v61;
        if (v59 != (v59 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_92:
          do
          {
LABEL_31:
            *(_DWORD *)v30 = *(_DWORD *)v10;
            *((_DWORD *)v30 + 1) = *((_DWORD *)v10 + 1);
            v30 += 8;
            v10 += 8;
          }
          while (v10 != v11);
        }
      }
      v21 = (char *)(v30 - v9);
      v18 = v9;
      goto LABEL_58;
    }
LABEL_59:
    v55 = *(char **)v8;
    sub_1BE77FA00((uint64_t)a1, (uint64_t)v8);
    a2 = *(char **)a2;
    v8 = v55;
    if (!v55)
      goto LABEL_80;
  }
  do
  {
    v69 = *(char **)v8;
    v70 = (void *)*((_QWORD *)v8 + 3);
    if (v70)
    {
      *((_QWORD *)v8 + 4) = v70;
      operator delete(v70);
    }
    operator delete(v8);
    v8 = v69;
  }
  while (v69);
}

void sub_1BE780564(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_1BE77FF60(v1);
  __cxa_rethrow();
}

void sub_1BE780580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE758CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE780594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_1BE758CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE7805B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE7805CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7805F0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  float *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  float v15;
  int v16;
  float v17;
  float v18;
  int v19;
  uint64_t v20;
  int v21;
  float v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  int v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unint64_t j;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  int v49;
  float v50;
  float v51;
  int v52;
  int v53;
  float v54;
  float v55;
  int v56;
  int v57;
  float v58;
  int v59;
  uint64_t v60;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float v74;
  int64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  float v81;
  unint64_t v82;
  float v83;
  float v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  int v96;
  unint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  float v107;
  float v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  float v114;
  unint64_t k;
  uint64_t v116;
  float v117;
  float v118;
  int v119;
  int v120;
  unint64_t m;

  v7 = result;
LABEL_2:
  v8 = (float *)(a2 - 8);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v46 = *(float *)i;
        v47 = *(float *)(a2 - 8);
        if (*(float *)i >= v47)
        {
          if (v47 < v46)
            return result;
          v48 = *(_DWORD *)(i + 4);
          v49 = *(_DWORD *)(a2 - 4);
          if (v48 >= v49)
            return result;
        }
        else
        {
          v48 = *(_DWORD *)(i + 4);
          v49 = *(_DWORD *)(a2 - 4);
        }
        *(float *)i = v47;
        *(float *)(a2 - 8) = v46;
        *(_DWORD *)(i + 4) = v49;
        *(_DWORD *)(a2 - 4) = v48;
        return result;
      case 3uLL:
        return sub_1BE78108C(i, i + 8, a2 - 8);
      case 4uLL:
        result = sub_1BE78108C(i, i + 8, i + 16);
        v50 = *(float *)(i + 16);
        v51 = *(float *)(a2 - 8);
        if (v50 >= v51)
        {
          if (v51 < v50)
            return result;
          v52 = *(_DWORD *)(i + 20);
          v53 = *(_DWORD *)(a2 - 4);
          if (v52 >= v53)
            return result;
        }
        else
        {
          v52 = *(_DWORD *)(i + 20);
          v53 = *(_DWORD *)(a2 - 4);
        }
        *(float *)(i + 16) = v51;
        *(float *)(a2 - 8) = v50;
        *(_DWORD *)(i + 20) = v53;
        *(_DWORD *)(a2 - 4) = v52;
        v54 = *(float *)(i + 8);
        v55 = *(float *)(i + 16);
        if (v54 >= v55)
        {
          if (v55 < v54)
            return result;
          v56 = *(_DWORD *)(i + 12);
          v57 = *(_DWORD *)(i + 20);
          if (v56 >= v57)
            return result;
        }
        else
        {
          v56 = *(_DWORD *)(i + 12);
          v57 = *(_DWORD *)(i + 20);
        }
        *(float *)(i + 8) = v55;
        *(float *)(i + 16) = v54;
        *(_DWORD *)(i + 12) = v57;
        *(_DWORD *)(i + 20) = v56;
        v58 = *(float *)i;
        if (*(float *)i >= v55)
        {
          if (v55 < v58)
            return result;
          v59 = *(_DWORD *)(i + 4);
          if (v59 >= v57)
            return result;
        }
        else
        {
          v59 = *(_DWORD *)(i + 4);
        }
        *(float *)i = v55;
        *(float *)(i + 8) = v58;
        *(_DWORD *)(i + 4) = v57;
        *(_DWORD *)(i + 12) = v59;
        return result;
      case 5uLL:
        return sub_1BE7814EC(i, i + 8, i + 16, i + 24, a2 - 8);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v75 = (v11 - 2) >> 1;
            v76 = v75;
            while (1)
            {
              v78 = v76;
              if (v75 >= v76)
              {
                v79 = (2 * v76) | 1;
                v80 = i + 8 * v79;
                if (2 * v78 + 2 < (uint64_t)v11)
                {
                  v81 = *(float *)(v80 + 8);
                  if (v81 < *(float *)v80
                    || *(float *)v80 >= v81 && *(_DWORD *)(v80 + 12) < *(_DWORD *)(i + 8 * v79 + 4))
                  {
                    v80 += 8;
                    v79 = 2 * v78 + 2;
                  }
                }
                v82 = i + 8 * v78;
                v83 = *(float *)v82;
                v84 = *(float *)v80;
                if (*(float *)v82 >= *(float *)v80)
                {
                  v85 = *(_DWORD *)(v80 + 4);
                  if (v84 < v83)
                  {
                    v86 = *(_DWORD *)(v82 + 4);
LABEL_142:
                    *(float *)v82 = v84;
                    *(_DWORD *)(v82 + 4) = v85;
                    if (v75 >= v79)
                    {
                      while (1)
                      {
                        v87 = 2 * v79;
                        v79 = (2 * v79) | 1;
                        v77 = i + 8 * v79;
                        v88 = v87 + 2;
                        if (v88 < (uint64_t)v11)
                        {
                          v89 = *(float *)(v77 + 8);
                          if (v89 < *(float *)v77
                            || *(float *)v77 >= v89
                            && (result = *(unsigned int *)(v77 + 12), (int)result < *(_DWORD *)(i + 8 * v79 + 4)))
                          {
                            v77 += 8;
                            v79 = v88;
                          }
                        }
                        v90 = *(float *)v77;
                        if (v83 < *(float *)v77)
                          break;
                        v91 = *(_DWORD *)(v77 + 4);
                        v92 = v90 >= v83 && v86 < v91;
                        if (v92)
                          break;
                        *(float *)v80 = v90;
                        *(_DWORD *)(v80 + 4) = v91;
                        v80 = v77;
                        if (v75 < v79)
                          goto LABEL_130;
                      }
                    }
                    v77 = v80;
LABEL_130:
                    *(float *)v77 = v83;
                    *(_DWORD *)(v77 + 4) = v86;
                    goto LABEL_131;
                  }
                  v86 = *(_DWORD *)(i + 8 * v78 + 4);
                  if (v86 >= v85)
                    goto LABEL_142;
                }
              }
LABEL_131:
              v76 = v78 - 1;
              if (!v78)
              {
                v93 = (unint64_t)v10 >> 3;
                while (1)
                {
                  if (v93 >= 2)
                  {
                    v94 = 0;
                    v95 = *(float *)i;
                    v96 = *(_DWORD *)(i + 4);
                    v97 = i;
                    do
                    {
                      v98 = (_DWORD *)v97;
                      v99 = v94 + 1;
                      v97 += 8 * (v94 + 1);
                      v100 = 2 * v94;
                      v94 = (2 * v94) | 1;
                      v101 = v100 + 2;
                      if (v101 < v93)
                      {
                        v102 = *(float *)(v97 + 8);
                        if (v102 < *(float *)v97 || *(float *)v97 >= v102 && *(_DWORD *)(v97 + 12) < v98[2 * v99 + 1])
                        {
                          v97 += 8;
                          v94 = v101;
                        }
                      }
                      *v98 = *(_DWORD *)v97;
                      v98[1] = *(_DWORD *)(v97 + 4);
                    }
                    while (v94 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
                    if (v97 == a2 - 8)
                    {
                      *(float *)v97 = v95;
                      *(_DWORD *)(v97 + 4) = v96;
                    }
                    else
                    {
                      *(_DWORD *)v97 = *(_DWORD *)(a2 - 8);
                      *(_DWORD *)(v97 + 4) = *(_DWORD *)(a2 - 4);
                      *(float *)(a2 - 8) = v95;
                      *(_DWORD *)(a2 - 4) = v96;
                      v103 = v97 - i + 8;
                      if (v103 >= 9)
                      {
                        v104 = ((unint64_t)v103 >> 3) - 2;
                        v105 = v104 >> 1;
                        v106 = i + 8 * (v104 >> 1);
                        v107 = *(float *)v97;
                        v108 = *(float *)v106;
                        if (*(float *)v97 < *(float *)v106)
                        {
                          v109 = *(_DWORD *)(v97 + 4);
                          v110 = *(_DWORD *)(v106 + 4);
LABEL_172:
                          *(float *)v97 = v108;
                          *(_DWORD *)(v97 + 4) = v110;
                          if (v104 >= 2)
                          {
                            while (1)
                            {
                              v113 = v105 - 1;
                              v105 = (v105 - 1) >> 1;
                              v111 = i + 8 * v105;
                              v114 = *(float *)v111;
                              if (v107 < *(float *)v111)
                              {
                                v112 = *(_DWORD *)(v111 + 4);
                              }
                              else
                              {
                                if (v114 < v107)
                                  break;
                                v112 = *(_DWORD *)(i + 8 * v105 + 4);
                                if (v109 >= v112)
                                  break;
                              }
                              *(float *)v106 = v114;
                              *(_DWORD *)(v106 + 4) = v112;
                              v106 = i + 8 * v105;
                              if (v113 <= 1)
                                goto LABEL_174;
                            }
                          }
                          v111 = v106;
LABEL_174:
                          *(float *)v111 = v107;
                          *(_DWORD *)(v111 + 4) = v109;
                          goto LABEL_157;
                        }
                        if (v108 >= v107)
                        {
                          v109 = *(_DWORD *)(v97 + 4);
                          v110 = *(_DWORD *)(i + 8 * v105 + 4);
                          if (v109 < v110)
                            goto LABEL_172;
                        }
                      }
                    }
                  }
LABEL_157:
                  a2 -= 8;
                  v92 = (unint64_t)v93-- > 2;
                  if (!v92)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = (_DWORD *)(i + 8 * (v11 >> 1));
          if ((unint64_t)v10 < 0x401)
          {
            result = sub_1BE78108C(v7 + 8 * (v11 >> 1), v7, a2 - 8);
            --a3;
            v17 = *(float *)v7;
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            sub_1BE78108C(v7, v7 + 8 * (v11 >> 1), a2 - 8);
            v14 = v7 + 8 * v12;
            sub_1BE78108C(v7 + 8, v14 - 8, a2 - 16);
            sub_1BE78108C(v7 + 16, v7 + 8 + 8 * v12, a2 - 24);
            result = sub_1BE78108C(v14 - 8, (uint64_t)v13, v7 + 8 + 8 * v12);
            v15 = *(float *)v7;
            *(_DWORD *)v7 = *v13;
            *(float *)v13 = v15;
            v16 = *(_DWORD *)(v7 + 4);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v14 + 4);
            *(_DWORD *)(v14 + 4) = v16;
            --a3;
            v17 = *(float *)v7;
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(float *)(v7 - 8);
          if (v17 >= v18)
          {
            if (v18 < v17)
            {
              v19 = *(_DWORD *)(v7 + 4);
            }
            else
            {
              v19 = *(_DWORD *)(v7 + 4);
              if (v19 < *(_DWORD *)(v7 - 4))
                goto LABEL_13;
            }
            v35 = *v8;
            if (*v8 >= v17 && (v17 < v35 || *(_DWORD *)(a2 - 4) >= v19))
            {
              for (i = v7 + 8; i < a2 && *(float *)i >= v17 && (v17 < *(float *)i || *(_DWORD *)(i + 4) >= v19); i += 8)
                ;
            }
            else
            {
              i = v7;
              do
              {
                v36 = *(float *)(i + 8);
                i += 8;
                v37 = v36;
              }
              while (v36 >= v17 && (v17 < v37 || *(_DWORD *)(i + 4) >= v19));
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 8; v35 < v17 || v17 >= v35 && *(_DWORD *)(j + 4) < v19; j -= 8)
              {
                v39 = *(float *)(j - 8);
                v35 = v39;
              }
            }
            if (i < j)
            {
              v40 = *(float *)i;
              v41 = *(float *)j;
              do
              {
                *(float *)i = v41;
                *(float *)j = v40;
                v42 = *(float *)(i + 8);
                i += 8;
                v40 = v42;
                v43 = *(_DWORD *)(i - 4);
                *(_DWORD *)(i - 4) = *(_DWORD *)(j + 4);
                *(_DWORD *)(j + 4) = v43;
                while (v40 >= v17 && (v17 < v40 || *(_DWORD *)(i + 4) >= v19))
                {
                  v44 = *(float *)(i + 8);
                  i += 8;
                  v40 = v44;
                }
                do
                {
                  do
                  {
                    v45 = *(float *)(j - 8);
                    j -= 8;
                    v41 = v45;
                  }
                  while (v45 < v17);
                }
                while (v17 >= v41 && *(_DWORD *)(j + 4) < v19);
              }
              while (i < j);
            }
            if (i - 8 != v7)
            {
              *(_DWORD *)v7 = *(_DWORD *)(i - 8);
              *(_DWORD *)(v7 + 4) = *(_DWORD *)(i - 4);
            }
            a4 = 0;
            *(float *)(i - 8) = v17;
            *(_DWORD *)(i - 4) = v19;
            continue;
          }
LABEL_13:
          v20 = 0;
          v21 = *(_DWORD *)(v7 + 4);
          while (1)
          {
            v22 = *(float *)(v7 + v20 + 8);
            if (v17 >= v22 && (v22 < v17 || v21 >= *(_DWORD *)(v7 + v20 + 12)))
              break;
            v20 += 8;
          }
          v23 = v7 + v20 + 8;
          if (v20)
          {
            v24 = *v8;
            v25 = a2 - 8;
            if (v17 >= *v8)
            {
              do
              {
                if (v24 >= v17 && v21 < *(_DWORD *)(v25 + 4))
                  break;
                v26 = *(float *)(v25 - 8);
                v25 -= 8;
                v24 = v26;
              }
              while (v17 >= v26);
            }
          }
          else
          {
            v25 = a2;
            if (v23 < a2)
            {
              v27 = *v8;
              v25 = a2 - 8;
              if (v17 >= *v8)
              {
                v25 = a2 - 8;
                do
                {
                  if (v27 < v17)
                  {
                    if (v23 >= v25)
                      break;
                  }
                  else if (v23 >= v25 || v21 < *(_DWORD *)(v25 + 4))
                  {
                    break;
                  }
                  v34 = *(float *)(v25 - 8);
                  v25 -= 8;
                  v27 = v34;
                }
                while (v17 >= v34);
              }
            }
          }
          if (v23 >= v25)
          {
            i = v23;
          }
          else
          {
            v28 = *(float *)v25;
            i = v23;
            v29 = v25;
            do
            {
              *(float *)i = v28;
              *(float *)v29 = v22;
              v30 = *(_DWORD *)(i + 4);
              *(_DWORD *)(i + 4) = *(_DWORD *)(v29 + 4);
              *(_DWORD *)(v29 + 4) = v30;
              do
              {
                do
                {
                  v31 = *(float *)(i + 8);
                  i += 8;
                  v22 = v31;
                }
                while (v17 < v31);
              }
              while (v22 >= v17 && v21 < *(_DWORD *)(i + 4));
              do
              {
                v32 = *(float *)(v29 - 8);
                v29 -= 8;
                v28 = v32;
              }
              while (v17 >= v32 && (v28 < v17 || v21 >= *(_DWORD *)(v29 + 4)));
            }
            while (i < v29);
          }
          if (i - 8 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(i - 8);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(i - 4);
          }
          *(float *)(i - 8) = v17;
          *(_DWORD *)(i - 4) = v21;
          if (v23 < v25)
          {
LABEL_44:
            result = sub_1BE7805F0(v7, i - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v33 = sub_1BE7811EC(v7, i - 8);
          result = sub_1BE7811EC(i, a2);
          if (!(_DWORD)result)
          {
            if (v33)
              continue;
            goto LABEL_44;
          }
          a2 = i - 8;
          if (v33)
            return result;
          goto LABEL_2;
        }
        v60 = i + 8;
        v62 = i == a2 || v60 == a2;
        if ((a4 & 1) != 0)
        {
          if (v62)
            return result;
          v63 = 0;
          v64 = i;
LABEL_114:
          v66 = v64;
          v64 = v60;
          v67 = *(float *)v66;
          v68 = *(float *)(v66 + 8);
          if (*(float *)v66 >= v68)
          {
            if (v68 < v67)
              goto LABEL_113;
            v70 = *(_DWORD *)(v66 + 4);
            v69 = *(_DWORD *)(v66 + 12);
            if (v70 >= v69)
              goto LABEL_113;
          }
          else
          {
            v69 = *(_DWORD *)(v66 + 12);
            v70 = *(_DWORD *)(v66 + 4);
          }
          *(float *)(v66 + 8) = v67;
          *(_DWORD *)(v64 + 4) = v70;
          v65 = i;
          if (v66 == i)
            goto LABEL_112;
          v71 = v63;
          while (1)
          {
            v74 = *(float *)(i + v71 - 8);
            if (v74 < v68)
            {
              v72 = *(_DWORD *)(i + v71 - 4);
            }
            else
            {
              if (v68 < v74)
              {
                v65 = v66;
LABEL_112:
                *(float *)v65 = v68;
                *(_DWORD *)(v65 + 4) = v69;
LABEL_113:
                v60 = v64 + 8;
                v63 += 8;
                if (v64 + 8 == a2)
                  return result;
                goto LABEL_114;
              }
              v65 = i + v71;
              v72 = *(_DWORD *)(i + v71 - 4);
              if (v72 >= v69)
                goto LABEL_112;
            }
            v66 -= 8;
            v73 = i + v71;
            *(float *)v73 = v74;
            *(_DWORD *)(v73 + 4) = v72;
            v71 -= 8;
            if (!v71)
            {
              v65 = i;
              goto LABEL_112;
            }
          }
        }
        if (!v62)
        {
          for (k = i + 4; ; k += 8)
          {
            v116 = v7;
            v7 = v60;
            v117 = *(float *)v116;
            v118 = *(float *)(v116 + 8);
            if (*(float *)v116 < v118)
              break;
            if (v118 >= v117)
            {
              v120 = *(_DWORD *)(v116 + 4);
              v119 = *(_DWORD *)(v116 + 12);
              if (v120 < v119)
                goto LABEL_198;
            }
LABEL_193:
            v60 += 8;
            if (v7 + 8 == a2)
              return result;
          }
          v119 = *(_DWORD *)(v116 + 12);
LABEL_198:
          for (m = k; ; m -= 8)
          {
            *(float *)(m + 4) = v117;
            *(_DWORD *)(m + 8) = *(_DWORD *)m;
            v117 = *(float *)(m - 12);
            if (v117 >= v118 && (v118 < v117 || *(_DWORD *)(m - 8) >= v119))
              break;
          }
          *(float *)(m - 4) = v118;
          *(_DWORD *)m = v119;
          goto LABEL_193;
        }
        return result;
    }
  }
}

uint64_t sub_1BE78108C(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  int v7;
  float v8;
  int v9;
  int v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v3 = *(float *)result;
  v4 = *(float *)a2;
  if (*(float *)result >= *(float *)a2 && (v4 < v3 || *(_DWORD *)(result + 4) >= *(_DWORD *)(a2 + 4)))
  {
    v8 = *(float *)a3;
    if (v4 >= *(float *)a3)
    {
      if (v8 < v4)
        return result;
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)(a3 + 4);
      if (v9 >= v10)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v8;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v10;
    *(_DWORD *)(a3 + 4) = v9;
    v11 = *(float *)result;
    v12 = *(float *)a2;
    if (*(float *)result >= *(float *)a2)
    {
      if (v12 >= v11)
      {
        v19 = *(_DWORD *)(result + 4);
        v20 = *(_DWORD *)(a2 + 4);
        if (v19 < v20)
        {
          *(float *)result = v12;
          *(float *)a2 = v11;
          *(_DWORD *)(result + 4) = v20;
          *(_DWORD *)(a2 + 4) = v19;
        }
      }
    }
    else
    {
      v13 = *(_DWORD *)(result + 4);
      v14 = *(_DWORD *)(a2 + 4);
      *(float *)result = v12;
      *(float *)a2 = v11;
      *(_DWORD *)(result + 4) = v14;
      *(_DWORD *)(a2 + 4) = v13;
    }
  }
  else
  {
    v5 = *(float *)a3;
    if (v4 < *(float *)a3)
    {
      v6 = *(_DWORD *)(a3 + 4);
LABEL_6:
      *(float *)result = v5;
      *(float *)a3 = v3;
      v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = v6;
      *(_DWORD *)(a3 + 4) = v7;
      return result;
    }
    v15 = *(_DWORD *)(a2 + 4);
    if (v5 >= v4)
    {
      v6 = *(_DWORD *)(a3 + 4);
      if (v15 < v6)
        goto LABEL_6;
    }
    *(float *)result = v4;
    *(float *)a2 = v3;
    v16 = *(_DWORD *)(result + 4);
    *(_DWORD *)(result + 4) = v15;
    *(_DWORD *)(a2 + 4) = v16;
    v17 = *(float *)a3;
    if (v3 >= *(float *)a3)
    {
      if (v17 >= v3)
      {
        v21 = *(_DWORD *)(a3 + 4);
        if (v16 < v21)
        {
          *(float *)a2 = v17;
          *(float *)a3 = v3;
          *(_DWORD *)(a2 + 4) = v21;
          *(_DWORD *)(a3 + 4) = v16;
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(a3 + 4);
      *(float *)a2 = v17;
      *(float *)a3 = v3;
      *(_DWORD *)(a2 + 4) = v18;
      *(_DWORD *)(a3 + 4) = v16;
    }
  }
  return result;
}

BOOL sub_1BE7811EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;
  float v27;
  float v28;
  int v29;
  int v30;
  float v31;
  int v32;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(float *)a1;
      v20 = *(float *)(a2 - 8);
      if (*(float *)a1 < v20)
      {
        v21 = *(_DWORD *)(a1 + 4);
        v22 = *(_DWORD *)(a2 - 4);
LABEL_24:
        *(float *)a1 = v20;
        *(float *)(a2 - 8) = v19;
        *(_DWORD *)(a1 + 4) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v21 = *(_DWORD *)(a1 + 4);
        v22 = *(_DWORD *)(a2 - 4);
        if (v21 < v22)
          goto LABEL_24;
      }
      return result;
    case 3:
      sub_1BE78108C(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      sub_1BE78108C(a1, a1 + 8, a1 + 16);
      v23 = *(float *)(a1 + 16);
      v24 = *(float *)(a2 - 8);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v25 = *(_DWORD *)(a1 + 20);
        v26 = *(_DWORD *)(a2 - 4);
        if (v25 >= v26)
          return 1;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 20);
        v26 = *(_DWORD *)(a2 - 4);
      }
      *(float *)(a1 + 16) = v24;
      *(float *)(a2 - 8) = v23;
      *(_DWORD *)(a1 + 20) = v26;
      *(_DWORD *)(a2 - 4) = v25;
      v27 = *(float *)(a1 + 8);
      v28 = *(float *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v29 = *(_DWORD *)(a1 + 12);
        v30 = *(_DWORD *)(a1 + 20);
        if (v29 >= v30)
          return 1;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 12);
        v30 = *(_DWORD *)(a1 + 20);
      }
      *(float *)(a1 + 8) = v28;
      *(float *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 20) = v29;
      v31 = *(float *)a1;
      if (*(float *)a1 < v28)
      {
        v32 = *(_DWORD *)(a1 + 4);
LABEL_46:
        *(float *)a1 = v28;
        *(float *)(a1 + 8) = v31;
        *(_DWORD *)(a1 + 4) = v30;
        result = 1;
        *(_DWORD *)(a1 + 12) = v32;
        return result;
      }
      if (v28 >= v31)
      {
        v32 = *(_DWORD *)(a1 + 4);
        if (v32 < v30)
          goto LABEL_46;
      }
      return 1;
    case 5:
      sub_1BE7814EC(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v6 = a1 + 16;
      sub_1BE78108C(a1, a1 + 8, a1 + 16);
      v7 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(float *)v6;
        v12 = *(float *)v7;
        if (*(float *)v6 >= *(float *)v7)
        {
          if (v12 < v11)
            goto LABEL_7;
          v14 = *(_DWORD *)(v6 + 4);
          v13 = *(_DWORD *)(v7 + 4);
          if (v14 >= v13)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_DWORD *)(v7 + 4);
          v14 = *(_DWORD *)(v6 + 4);
        }
        *(float *)v7 = v11;
        *(_DWORD *)(v7 + 4) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(float *)(a1 + v15 + 8);
          if (v18 < v12)
          {
            v16 = *(_DWORD *)(v17 + 12);
LABEL_13:
            v6 -= 8;
            *(float *)(v17 + 16) = v18;
            *(_DWORD *)(a1 + v15 + 20) = v16;
            v15 -= 8;
            if (v15 == -16)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v12 >= v18)
        {
          v16 = *(_DWORD *)(a1 + v15 + 12);
          if (v16 >= v13)
          {
            v10 = v6;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = a1 + v15 + 16;
LABEL_6:
        *(float *)v10 = v12;
        *(_DWORD *)(v10 + 4) = v13;
        if (++v9 == 8)
          return v7 + 8 == a2;
LABEL_7:
        v6 = v7;
        v8 += 8;
        v7 += 8;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t sub_1BE7814EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;
  float v27;
  float v28;
  int v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  int v38;

  result = sub_1BE78108C(a1, a2, a3);
  v11 = *(float *)a3;
  v12 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v12 < v11)
      goto LABEL_16;
    v13 = *(_DWORD *)(a3 + 4);
    v14 = *(_DWORD *)(a4 + 4);
    if (v13 >= v14)
      goto LABEL_16;
  }
  else
  {
    v13 = *(_DWORD *)(a3 + 4);
    v14 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v12;
  *(float *)a4 = v11;
  *(_DWORD *)(a3 + 4) = v14;
  *(_DWORD *)(a4 + 4) = v13;
  v15 = *(float *)a2;
  v16 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v16 < v15)
      goto LABEL_16;
    v17 = *(_DWORD *)(a2 + 4);
    v18 = *(_DWORD *)(a3 + 4);
    if (v17 >= v18)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 4);
    v18 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v16;
  *(float *)a3 = v15;
  *(_DWORD *)(a2 + 4) = v18;
  *(_DWORD *)(a3 + 4) = v17;
  v19 = *(float *)a1;
  v20 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    v21 = *(_DWORD *)(a1 + 4);
    v22 = *(_DWORD *)(a2 + 4);
LABEL_7:
    *(float *)a1 = v20;
    *(float *)a2 = v19;
    *(_DWORD *)(a1 + 4) = v22;
    *(_DWORD *)(a2 + 4) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    v21 = *(_DWORD *)(a1 + 4);
    v22 = *(_DWORD *)(a2 + 4);
    if (v21 < v22)
      goto LABEL_7;
  }
LABEL_16:
  v23 = *(float *)a4;
  v24 = *(float *)a5;
  if (*(float *)a4 >= *(float *)a5)
  {
    if (v24 < v23)
      return result;
    v25 = *(_DWORD *)(a4 + 4);
    v26 = *(_DWORD *)(a5 + 4);
    if (v25 >= v26)
      return result;
  }
  else
  {
    v25 = *(_DWORD *)(a4 + 4);
    v26 = *(_DWORD *)(a5 + 4);
  }
  *(float *)a4 = v24;
  *(float *)a5 = v23;
  *(_DWORD *)(a4 + 4) = v26;
  *(_DWORD *)(a5 + 4) = v25;
  v27 = *(float *)a3;
  v28 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v28 < v27)
      return result;
    v29 = *(_DWORD *)(a3 + 4);
    v30 = *(_DWORD *)(a4 + 4);
    if (v29 >= v30)
      return result;
  }
  else
  {
    v29 = *(_DWORD *)(a3 + 4);
    v30 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v28;
  *(float *)a4 = v27;
  *(_DWORD *)(a3 + 4) = v30;
  *(_DWORD *)(a4 + 4) = v29;
  v31 = *(float *)a2;
  v32 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v32 < v31)
      return result;
    v33 = *(_DWORD *)(a2 + 4);
    v34 = *(_DWORD *)(a3 + 4);
    if (v33 >= v34)
      return result;
  }
  else
  {
    v33 = *(_DWORD *)(a2 + 4);
    v34 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v32;
  *(float *)a3 = v31;
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a3 + 4) = v33;
  v35 = *(float *)a1;
  v36 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    v37 = *(_DWORD *)(a1 + 4);
    v38 = *(_DWORD *)(a2 + 4);
LABEL_24:
    *(float *)a1 = v36;
    *(float *)a2 = v35;
    *(_DWORD *)(a1 + 4) = v38;
    *(_DWORD *)(a2 + 4) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    v37 = *(_DWORD *)(a1 + 4);
    v38 = *(_DWORD *)(a2 + 4);
    if (v37 < v38)
      goto LABEL_24;
  }
  return result;
}

uint64_t sub_1BE781718(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    sub_1BE77D498(i - 224);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE781768(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  uint64_t *v13;
  int **v14;
  int **v15;
  uint64_t v16;
  int *v17;
  int *v18;
  BOOL v19;
  int *v20;
  uint64_t v21;
  int *i;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int *v32;
  int *v33;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_50;
  v6 = *(uint64_t **)a1;
  v8 = (uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = v6[1] ? (int *)v6[1] : (int *)v6;
  v31 = a1;
  v33 = v9;
  if (!v9)
    goto LABEL_50;
  v10 = (int *)*((_QWORD *)v9 + 2);
  if (v10)
  {
    v11 = *(int **)v10;
    if (*(int **)v10 == v9)
    {
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v30 = (int *)*((_QWORD *)v10 + 1);
        if (!v30)
          break;
        do
        {
          v10 = v30;
          v30 = *(int **)v30;
        }
        while (v30);
      }
    }
    else
    {
      for (*((_QWORD *)v10 + 1) = 0; v11; v11 = (int *)*((_QWORD *)v10 + 1))
      {
        do
        {
          v10 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
    }
  }
  v32 = v10;
  if (a2 == a3)
  {
    v21 = a1;
    sub_1BE67AC7C(a1, v9);
    if (!v10)
      goto LABEL_50;
    goto LABEL_47;
  }
  v12 = a2;
  do
  {
    v9[8] = v12[8];
    if (v9 != v12)
    {
      sub_1BE781B3C((uint64_t)(v9 + 10), *((char **)v12 + 5), *((char **)v12 + 6), (uint64_t)(*((_QWORD *)v12 + 6) - *((_QWORD *)v12 + 5)) >> 3);
      v9 = v33;
    }
    v13 = *v8;
    v14 = (int **)(a1 + 8);
    v15 = (int **)(a1 + 8);
    if (!*v8)
    {
LABEL_20:
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = v14;
      *v15 = v9;
      v16 = **(_QWORD **)a1;
      if (!v16)
        goto LABEL_22;
LABEL_21:
      *(_QWORD *)a1 = v16;
      v9 = *v15;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        v14 = (int **)v13;
        if (v9[8] >= *((_DWORD *)v13 + 8))
          break;
        v13 = (uint64_t *)*v13;
        v15 = v14;
        if (!*v14)
          goto LABEL_20;
      }
      v13 = (uint64_t *)v13[1];
    }
    while (v13);
    v15 = v14 + 1;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v14;
    v14[1] = v9;
    v16 = **(_QWORD **)a1;
    if (v16)
      goto LABEL_21;
LABEL_22:
    sub_1BE61F5C0(*(uint64_t **)(a1 + 8), (uint64_t *)v9);
    ++*(_QWORD *)(a1 + 16);
    v9 = v32;
    v33 = v32;
    if (v32)
    {
      v10 = (int *)*((_QWORD *)v32 + 2);
      if (v10)
      {
        v17 = *(int **)v10;
        if (*(int **)v10 == v32)
        {
          *(_QWORD *)v10 = 0;
          while (1)
          {
            v20 = (int *)*((_QWORD *)v10 + 1);
            if (!v20)
              break;
            do
            {
              v10 = v20;
              v20 = *(int **)v20;
            }
            while (v20);
          }
        }
        else
        {
          for (*((_QWORD *)v10 + 1) = 0; v17; v17 = (int *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v17;
              v17 = *(int **)v17;
            }
            while (v17);
          }
        }
      }
      v32 = v10;
      v18 = (int *)*((_QWORD *)v12 + 1);
      if (!v18)
      {
        do
        {
LABEL_33:
          a2 = (int *)*((_QWORD *)v12 + 2);
          v19 = *(_QWORD *)a2 == (_QWORD)v12;
          v12 = a2;
        }
        while (!v19);
        goto LABEL_35;
      }
    }
    else
    {
      v10 = 0;
      v18 = (int *)*((_QWORD *)v12 + 1);
      if (!v18)
        goto LABEL_33;
    }
    do
    {
      a2 = v18;
      v18 = *(int **)v18;
    }
    while (v18);
LABEL_35:
    if (!v9)
      break;
    v12 = a2;
  }
  while (a2 != a3);
  v21 = v31;
  sub_1BE67AC7C(v31, v9);
  if (!v10)
    goto LABEL_50;
LABEL_47:
  for (i = (int *)*((_QWORD *)v10 + 2); i; i = (int *)*((_QWORD *)i + 2))
    v10 = i;
  sub_1BE67AC7C(v21, v10);
LABEL_50:
  if (a2 != a3)
  {
    while (2)
    {
      sub_1BE77DF40(a1, a2 + 8, (uint64_t)&v31);
      v23 = (uint64_t *)v31;
      v24 = *(uint64_t ***)(a1 + 8);
      v25 = (uint64_t **)(a1 + 8);
      v26 = (uint64_t **)(a1 + 8);
      if (v24)
      {
        do
        {
          while (1)
          {
            v25 = v24;
            if (*(_DWORD *)(v31 + 32) >= *((_DWORD *)v24 + 8))
              break;
            v24 = (uint64_t **)*v24;
            v26 = v25;
            if (!*v25)
              goto LABEL_58;
          }
          v24 = (uint64_t **)v24[1];
        }
        while (v24);
        v26 = v25 + 1;
        *(_QWORD *)v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        v25[1] = v23;
        v27 = **(_QWORD **)a1;
        if (!v27)
        {
LABEL_60:
          sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v23);
          ++*(_QWORD *)(a1 + 16);
          v28 = (int *)*((_QWORD *)a2 + 1);
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = *(int **)v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (int *)*((_QWORD *)a2 + 2);
              v19 = *(_QWORD *)v29 == (_QWORD)a2;
              a2 = v29;
            }
            while (!v19);
          }
          a2 = v29;
          if (v29 == a3)
            return;
          continue;
        }
      }
      else
      {
LABEL_58:
        *(_QWORD *)v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        *v26 = v23;
        v27 = **(_QWORD **)a1;
        if (!v27)
          goto LABEL_60;
      }
      break;
    }
    *(_QWORD *)a1 = v27;
    v23 = *v26;
    goto LABEL_60;
  }
}

void sub_1BE781AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE781AE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE781AE8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1BE67AC7C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1BE67AC7C(*(_QWORD *)a1, v2);
  }
  return a1;
}

_DWORD *sub_1BE781B3C(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8;
  _DWORD *v9;
  _DWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  BOOL v33;
  char v34;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  BOOL v57;
  char v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD **)a1;
  result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    v18 = *(_DWORD **)(a1 + 8);
    v17 = (_QWORD *)(a1 + 8);
    v14 = v18;
    v19 = (char *)v18 - (char *)v9;
    v20 = ((char *)v18 - (char *)v9) >> 3;
    if (v20 < __sz)
    {
      v21 = &a2[8 * v20];
      if (v14 == v9)
        goto LABEL_18;
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        v29 = (v19 & 0xFFFFFFFFFFFFFFF8) - 4;
        v30 = (char *)v9 + v29;
        v31 = &a2[v29];
        v32 = a2 + 4;
        v33 = v9 + 1 >= (_DWORD *)&a2[v19 & 0xFFFFFFFFFFFFFFF8] || v32 >= (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        v34 = !v33;
        v22 = a2;
        if ((v30 <= a2 || v9 >= (_DWORD *)v31) && (v34 & 1) == 0)
        {
          v36 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v37 = 2 * (v36 & 0x3FFFFFFFFFFFFFF8);
          result = &v9[v37];
          v22 = &a2[v37 * 4];
          v38 = (__int128 *)(a2 + 32);
          v39 = v9 + 8;
          v40 = v36 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v42 = *(v38 - 2);
            v41 = *(v38 - 1);
            v44 = *v38;
            v43 = v38[1];
            v38 += 4;
            *(v39 - 2) = v42;
            *(v39 - 1) = v41;
            *v39 = v44;
            v39[1] = v43;
            v39 += 4;
            v40 -= 8;
          }
          while (v40);
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_18:
            if (v21 == a3)
            {
              v16 = 0;
              goto LABEL_51;
            }
            v23 = &a2[v19];
            v24 = a3 - &a2[v19] - 8;
            if (v24 >= 0x38)
            {
              v45 = (char *)v14 - v23;
              v25 = (char *)v14;
              if (v45 >= 0x20)
              {
                v46 = (v24 >> 3) + 1;
                v47 = 2 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                v21 += v47 * 4;
                v25 = (char *)&v14[v47];
                v48 = v14 + 4;
                v49 = &a2[8 * v20 + 16];
                v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v51 = *(_OWORD *)v49;
                  *(v48 - 1) = *((_OWORD *)v49 - 1);
                  *v48 = v51;
                  v48 += 2;
                  v49 += 32;
                  v50 -= 4;
                }
                while (v50);
                if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_50;
              }
            }
            else
            {
              v25 = (char *)v14;
            }
            do
            {
              v52 = *(_QWORD *)v21;
              v21 += 8;
              *(_QWORD *)v25 = v52;
              v25 += 8;
            }
            while (v21 != a3);
LABEL_50:
            v16 = v25 - (char *)v14;
            goto LABEL_51;
          }
        }
      }
      else
      {
        v22 = a2;
      }
      do
      {
        *result = *(_DWORD *)v22;
        result[1] = *((_DWORD *)v22 + 1);
        v22 += 8;
        result += 2;
      }
      while (v22 != v21);
      goto LABEL_18;
    }
    if (a2 == a3)
    {
      v27 = (char *)v9;
    }
    else
    {
      v26 = a3 - a2 - 8;
      if (v26 < 0x78
        || ((v53 = v26 & 0xFFFFFFFFFFFFFFF8 | 4,
             v54 = (char *)v9 + v53,
             v55 = &a2[v53],
             v56 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8,
             v9 + 1 < (_DWORD *)&a2[v56])
          ? (v57 = a2 + 4 >= (char *)v9 + v56)
          : (v57 = 1),
            v57 ? (v58 = 0) : (v58 = 1),
            v54 > a2 ? (v59 = v9 >= (_DWORD *)v55) : (v59 = 1),
            !v59 || (v58 & 1) != 0))
      {
        v27 = (char *)v9;
        v28 = a2;
      }
      else
      {
        v60 = (v26 >> 3) + 1;
        v61 = 2 * (v60 & 0x3FFFFFFFFFFFFFF8);
        v27 = (char *)&v9[v61];
        v28 = &a2[v61 * 4];
        v62 = (__int128 *)(a2 + 32);
        v63 = v9 + 8;
        v64 = v60 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v66 = *(v62 - 2);
          v65 = *(v62 - 1);
          v68 = *v62;
          v67 = v62[1];
          v62 += 4;
          *(v63 - 2) = v66;
          *(v63 - 1) = v65;
          *v63 = v68;
          v63[1] = v67;
          v63 += 4;
          v64 -= 8;
        }
        while (v64);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_28;
      }
      do
      {
        *(_DWORD *)v27 = *(_DWORD *)v28;
        *((_DWORD *)v27 + 1) = *((_DWORD *)v28 + 1);
        v27 += 8;
        v28 += 8;
      }
      while (v28 != a3);
    }
LABEL_28:
    v16 = v27 - (char *)v9;
    v14 = v9;
    goto LABEL_51;
  }
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (__sz >> 61)
    goto LABEL_68;
  v11 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v11 = __sz;
  v33 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v33)
    v12 = v11;
  if (v12 >> 61)
LABEL_68:
    sub_1BE61F930();
  v13 = 2 * v12;
  result = operator new(8 * v12);
  v14 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v13];
  v15 = (char *)result;
  if (a2 != a3)
  {
    result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    v15 = (char *)v14 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = v15 - (char *)v14;
  v17 = (_QWORD *)(a1 + 8);
LABEL_51:
  *v17 = (char *)v14 + v16;
  return result;
}

uint64_t sub_1BE781E88(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  unint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  char v51;
  uint64_t v52;
  float v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  float v69;
  unint64_t v70;
  float v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  _QWORD *v103;
  _BYTE *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  _QWORD *v114;
  _BYTE *v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  _BYTE *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  _QWORD *v130;
  _BYTE *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  _BYTE *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  _QWORD *v146;
  _BYTE *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  _BYTE *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  _QWORD *v162;
  _BYTE *v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  int64_t v168;
  int64_t v169;
  int64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  uint64_t v175;
  float v176;
  uint64_t v177;
  float v178;
  uint64_t v179;
  uint64_t v180;
  float v181;
  uint64_t v182;
  float v183;
  uint64_t v184;
  float v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  float v191;
  uint64_t v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  float v204;
  uint64_t v205;
  float v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  float v210;
  uint64_t v211;
  float v212;
  float v213;
  uint64_t v214;
  float v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  uint64_t v224;
  float v225;
  uint64_t v226;
  float v227;
  uint64_t v228;
  uint64_t v229;
  float v230;
  _QWORD *v231;
  _BYTE *v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  uint64_t v242;
  _QWORD *v243;
  _BYTE *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  _BYTE *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  uint64_t v258;
  _QWORD *v259;
  _BYTE *v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  _BYTE *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  char *v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  uint64_t v274;
  _QWORD *v275;
  _BYTE *v276;
  unint64_t v277;
  char *v278;
  uint64_t v279;
  _BYTE *v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  _QWORD *v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  _QWORD *v290;
  _BYTE *v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD v302[9];
  uint64_t v303;
  uint64_t v304;
  float v305;
  _QWORD v306[9];
  uint64_t v307;
  uint64_t v308;
  float v309;

  v301 = result;
LABEL_2:
  v7 = a2 - 224;
  v8 = a2 - 448;
  v9 = a2 - 672;
  v10 = v301;
  v298 = a2;
  while (2)
  {
    v301 = v10;
    v11 = a2 - v10;
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v10) >> 5);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v84 = *(_QWORD *)(a2 - 144) - *(_QWORD *)(a2 - 152);
        if (v84)
        {
          v85 = *(float *)(a2 - 56) / fabs(sqrt((double)(unint64_t)(v84 >> 2)));
          v86 = v301;
          v87 = *(_QWORD *)(v301 + 80) - *(_QWORD *)(v301 + 72);
          if (v87)
            goto LABEL_123;
        }
        else
        {
          v85 = *(float *)(a2 - 56);
          v86 = v301;
          v87 = *(_QWORD *)(v301 + 80) - *(_QWORD *)(v301 + 72);
          if (v87)
          {
LABEL_123:
            v88 = *(float *)(v86 + 168) / fabs(sqrt((double)(unint64_t)(v87 >> 2)));
            if (v85 <= v88)
              return result;
            goto LABEL_396;
          }
        }
        if (v85 <= *(float *)(v86 + 168))
          return result;
LABEL_396:
        sub_1BE77D5F4(v306, v301);
        sub_1BE784638(v301, v7);
        sub_1BE784638(v7, (uint64_t)v306);
        return sub_1BE77D498((uint64_t)v306);
      case 3:
        return sub_1BE783F08(v301, v301 + 224, v7);
      case 4:
        return sub_1BE784EB0(v301, v301 + 224, v301 + 448, v7);
      case 5:
        return sub_1BE785148(v301, v301 + 224, v301 + 448, v301 + 672, v7);
      default:
        if (v11 <= 5375)
        {
          if ((a4 & 1) != 0)
          {
            if (v301 == a2)
              return result;
            v89 = v301 + 224;
            if (v301 + 224 == a2)
              return result;
            v90 = 0;
            v91 = v301;
            while (1)
            {
              v92 = v89;
              v93 = *(_QWORD *)(v91 + 304) - *(_QWORD *)(v91 + 296);
              if (v93)
              {
                v94 = *(float *)(v91 + 392) / fabs(sqrt((double)(unint64_t)(v93 >> 2)));
                v95 = v301;
                v96 = *(_QWORD *)(v91 + 80) - *(_QWORD *)(v91 + 72);
                if (v96)
                  goto LABEL_135;
              }
              else
              {
                v94 = *(float *)(v91 + 392);
                v95 = v301;
                v96 = *(_QWORD *)(v91 + 80) - *(_QWORD *)(v91 + 72);
                if (v96)
                {
LABEL_135:
                  v97 = *(float *)(v91 + 168) / fabs(sqrt((double)(unint64_t)(v96 >> 2)));
                  if (v94 <= v97)
                    goto LABEL_132;
                  goto LABEL_139;
                }
              }
              if (v94 <= *(float *)(v91 + 168))
                goto LABEL_132;
LABEL_139:
              sub_1BE77D5F4(v306, v92);
              v294 = v92;
              v296 = v90;
              while (1)
              {
                v299 = v91;
                v102 = v95 + v90;
                sub_1BE784720((uint64_t **)(v102 + 224), *(_QWORD **)v102, (_QWORD *)(v102 + 8));
                sub_1BE781768(v102 + 248, *(int **)(v102 + 24), (int *)(v102 + 32));
                v103 = (_QWORD *)(v301 + v90);
                sub_1BE784C3C(v301 + v90 + 272, *(char ***)(v301 + v90 + 48), *(_QWORD *)(v301 + v90 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v301 + v90 + 56) - *(_QWORD *)(v301 + v90 + 48)) >> 3));
                v105 = *(char **)(v301 + v90 + 72);
                v104 = *(_BYTE **)(v301 + v90 + 80);
                v106 = v104 - v105;
                v107 = (v104 - v105) >> 2;
                v108 = *(_QWORD *)(v301 + v90 + 312);
                v109 = *(char **)(v301 + v90 + 296);
                if (v107 > (v108 - (uint64_t)v109) >> 2)
                {
                  v110 = v103 + 37;
                  if (v109)
                  {
                    *(_QWORD *)(v301 + v90 + 304) = v109;
                    operator delete(v109);
                    v108 = 0;
                    *v110 = 0;
                    v103[38] = 0;
                    v103[39] = 0;
                  }
                  if (v106 < 0)
                    goto LABEL_402;
                  v111 = v108 >> 1;
                  if (v108 >> 1 <= v107)
                    v111 = (v104 - v105) >> 2;
                  v112 = (unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v111;
                  if (v112 >> 62)
LABEL_402:
                    sub_1BE61F930();
                  v113 = (char *)operator new(4 * v112);
                  v109 = v113;
                  *v110 = v113;
                  v114 = (_QWORD *)(v301 + v90 + 304);
                  *v114 = v113;
                  v103[39] = &v113[4 * v112];
                  if (v104 != v105)
                    memcpy(v113, v105, v104 - v105);
LABEL_161:
                  v117 = v301;
                  goto LABEL_162;
                }
                v114 = (_QWORD *)(v92 + 80);
                v115 = *(_BYTE **)(v301 + v90 + 304);
                v116 = (v115 - v109) >> 2;
                if (v116 >= v107)
                {
                  if (v104 != v105)
                    memmove(v109, v105, v104 - v105);
                  goto LABEL_161;
                }
                if (v115 != v109)
                {
                  memmove(v109, v105, v115 - v109);
                  v109 = *(char **)(v301 + v90 + 304);
                }
                v117 = v301;
                v118 = &v105[4 * v116];
                v106 = v104 - v118;
                if (v104 != v118)
                  memmove(v109, v118, v104 - v118);
LABEL_162:
                *v114 = &v109[v106];
                v119 = v117 + v90;
                v121 = *(char **)(v119 + 96);
                v120 = *(_BYTE **)(v119 + 104);
                v122 = v120 - v121;
                v123 = (v120 - v121) >> 2;
                v124 = *(_QWORD *)(v119 + 336);
                v125 = *(char **)(v119 + 320);
                if (v123 > (v124 - (uint64_t)v125) >> 2)
                {
                  v126 = (_QWORD *)(v119 + 320);
                  if (v125)
                  {
                    *(_QWORD *)(v301 + v90 + 328) = v125;
                    operator delete(v125);
                    v124 = 0;
                    *v126 = 0;
                    *(_QWORD *)(v119 + 328) = 0;
                    *(_QWORD *)(v119 + 336) = 0;
                  }
                  if (v122 < 0)
                    goto LABEL_403;
                  v127 = v124 >> 1;
                  if (v124 >> 1 <= v123)
                    v127 = (v120 - v121) >> 2;
                  v128 = (unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v127;
                  if (v128 >> 62)
LABEL_403:
                    sub_1BE61F930();
                  v129 = (char *)operator new(4 * v128);
                  v125 = v129;
                  *v126 = v129;
                  v130 = (_QWORD *)(v301 + v90 + 328);
                  *v130 = v129;
                  *(_QWORD *)(v119 + 336) = &v129[4 * v128];
                  if (v120 != v121)
                    memcpy(v129, v121, v120 - v121);
LABEL_181:
                  v133 = v301;
                  goto LABEL_182;
                }
                v130 = (_QWORD *)(v92 + 104);
                v131 = *(_BYTE **)(v119 + 328);
                v132 = (v131 - v125) >> 2;
                if (v132 >= v123)
                {
                  if (v120 != v121)
                    memmove(*(void **)(v119 + 320), *(const void **)(v119 + 96), v120 - v121);
                  goto LABEL_181;
                }
                if (v131 != v125)
                {
                  memmove(*(void **)(v119 + 320), *(const void **)(v119 + 96), v131 - v125);
                  v125 = *(char **)(v119 + 328);
                }
                v133 = v301;
                v134 = &v121[4 * v132];
                v122 = v120 - v134;
                if (v120 != v134)
                  memmove(v125, v134, v120 - v134);
LABEL_182:
                *v130 = &v125[v122];
                v135 = v133 + v90;
                v137 = *(char **)(v135 + 120);
                v136 = *(_BYTE **)(v135 + 128);
                v138 = v136 - v137;
                v139 = (v136 - v137) >> 3;
                v140 = *(_QWORD *)(v135 + 360);
                v141 = *(char **)(v135 + 344);
                if (v139 > (v140 - (uint64_t)v141) >> 3)
                {
                  v142 = (_QWORD *)(v135 + 344);
                  if (v141)
                  {
                    *(_QWORD *)(v301 + v90 + 352) = v141;
                    operator delete(v141);
                    v140 = 0;
                    *v142 = 0;
                    *(_QWORD *)(v135 + 352) = 0;
                    *(_QWORD *)(v135 + 360) = 0;
                  }
                  if (v138 < 0)
                    goto LABEL_404;
                  v143 = v140 >> 2;
                  if (v140 >> 2 <= v139)
                    v143 = (v136 - v137) >> 3;
                  v144 = (unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v143;
                  if (v144 >> 61)
LABEL_404:
                    sub_1BE61F930();
                  v145 = (char *)operator new(8 * v144);
                  v141 = v145;
                  *v142 = v145;
                  v146 = (_QWORD *)(v301 + v90 + 352);
                  *v146 = v145;
                  *(_QWORD *)(v135 + 360) = &v145[8 * v144];
                  if (v136 != v137)
                    memcpy(v145, v137, v136 - v137);
LABEL_201:
                  v149 = v301;
                  goto LABEL_202;
                }
                v146 = (_QWORD *)(v92 + 128);
                v147 = *(_BYTE **)(v135 + 352);
                v148 = (v147 - v141) >> 3;
                if (v148 >= v139)
                {
                  if (v136 != v137)
                    memmove(*(void **)(v135 + 344), *(const void **)(v135 + 120), v136 - v137);
                  goto LABEL_201;
                }
                if (v147 != v141)
                {
                  memmove(*(void **)(v135 + 344), *(const void **)(v135 + 120), v147 - v141);
                  v141 = *(char **)(v135 + 352);
                }
                v149 = v301;
                v150 = &v137[8 * v148];
                v138 = v136 - v150;
                if (v136 != v150)
                  memmove(v141, v150, v136 - v150);
LABEL_202:
                *v146 = &v141[v138];
                v151 = v149 + v90;
                sub_1BE77E7C0(v151 + 368, *(_QWORD **)(v151 + 144), (_QWORD *)(v151 + 152));
                *(_DWORD *)(v151 + 392) = *(_DWORD *)(v151 + 168);
                *(_WORD *)(v151 + 396) = *(_WORD *)(v151 + 172);
                v153 = *(char **)(v151 + 176);
                v152 = *(_BYTE **)(v151 + 184);
                v154 = v152 - v153;
                v155 = (v152 - v153) >> 2;
                v156 = *(_QWORD *)(v151 + 416);
                v157 = *(char **)(v151 + 400);
                if (v155 > (v156 - (uint64_t)v157) >> 2)
                {
                  v158 = (_QWORD *)(v151 + 400);
                  if (v157)
                  {
                    *(_QWORD *)(v301 + v90 + 408) = v157;
                    operator delete(v157);
                    v156 = 0;
                    *v158 = 0;
                    *(_QWORD *)(v151 + 408) = 0;
                    *(_QWORD *)(v151 + 416) = 0;
                  }
                  if (v154 < 0)
                    goto LABEL_405;
                  v159 = v156 >> 1;
                  if (v156 >> 1 <= v155)
                    v159 = (v152 - v153) >> 2;
                  v160 = (unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v159;
                  if (v160 >> 62)
LABEL_405:
                    sub_1BE61F930();
                  v161 = (char *)operator new(4 * v160);
                  v157 = v161;
                  *v158 = v161;
                  v162 = (_QWORD *)(v301 + v90 + 408);
                  *v162 = v161;
                  *(_QWORD *)(v151 + 416) = &v161[4 * v160];
                  if (v152 != v153)
                    memcpy(v161, v153, v152 - v153);
LABEL_221:
                  v165 = v301;
                  goto LABEL_222;
                }
                v162 = (_QWORD *)(v92 + 184);
                v163 = *(_BYTE **)(v301 + v90 + 408);
                v164 = (v163 - v157) >> 2;
                if (v164 >= v155)
                {
                  if (v152 != v153)
                    memmove(v157, v153, v152 - v153);
                  goto LABEL_221;
                }
                if (v163 != v157)
                {
                  memmove(v157, v153, v163 - v157);
                  v157 = *(char **)(v301 + v90 + 408);
                }
                v165 = v301;
                v166 = &v153[4 * v164];
                v154 = v152 - v166;
                if (v152 != v166)
                  memmove(v157, v166, v152 - v166);
LABEL_222:
                *v162 = &v157[v154];
                std::string::operator=((std::string *)(v165 + v90 + 424), (const std::string *)(v165 + v90 + 200));
                if (!v90)
                  break;
                v95 = v301;
                if (v308 == v307)
                {
                  v98 = v309;
                  v99 = v301 + v90;
                  v100 = *(_QWORD *)(v301 + v90 - 144) - *(_QWORD *)(v301 + v90 - 152);
                  if (v100)
                    goto LABEL_141;
LABEL_225:
                  v92 = v299;
                  v91 = v299 - 224;
                  v90 -= 224;
                  if (v98 <= *(float *)(v99 - 56))
                  {
LABEL_226:
                    v167 = v301 + v90 + 224;
                    goto LABEL_228;
                  }
                }
                else
                {
                  v98 = v309 / fabs(sqrt((double)(unint64_t)((v308 - v307) >> 2)));
                  v99 = v301 + v90;
                  v100 = *(_QWORD *)(v301 + v90 - 144) - *(_QWORD *)(v301 + v90 - 152);
                  if (!v100)
                    goto LABEL_225;
LABEL_141:
                  v101 = *(float *)(v99 - 56) / fabs(sqrt((double)(unint64_t)(v100 >> 2)));
                  v92 = v299;
                  v91 = v299 - 224;
                  v90 -= 224;
                  if (v98 <= v101)
                    goto LABEL_226;
                }
              }
              v167 = v301;
LABEL_228:
              sub_1BE784638(v167, (uint64_t)v306);
              v90 = v296;
              result = sub_1BE77D498((uint64_t)v306);
              v92 = v294;
LABEL_132:
              v89 = v92 + 224;
              v90 += 224;
              v91 = v92;
              if (v92 + 224 == v298)
                return result;
            }
          }
          if (v301 == a2)
            return result;
          v218 = v301 + 224;
          if (v301 + 224 == a2)
            return result;
          v219 = 0;
          v220 = v301;
          while (1)
          {
            v221 = v218;
            v222 = *(_QWORD *)(v220 + 304) - *(_QWORD *)(v220 + 296);
            if (v222)
            {
              v223 = *(float *)(v220 + 392) / fabs(sqrt((double)(unint64_t)(v222 >> 2)));
              v224 = *(_QWORD *)(v220 + 80) - *(_QWORD *)(v220 + 72);
              if (!v224)
                goto LABEL_306;
            }
            else
            {
              v223 = *(float *)(v220 + 392);
              v224 = *(_QWORD *)(v220 + 80) - *(_QWORD *)(v220 + 72);
              if (!v224)
              {
LABEL_306:
                if (v223 <= *(float *)(v220 + 168))
                  goto LABEL_300;
LABEL_307:
                sub_1BE77D5F4(v306, v221);
                v295 = v221;
                v297 = v219;
                v226 = v301;
                while (1)
                {
                  v300 = v220;
                  sub_1BE784720((uint64_t **)(v226 + v219 + 224), *(_QWORD **)(v226 + v219), (_QWORD *)(v226 + v219 + 8));
                  sub_1BE781768(v226 + v219 + 248, *(int **)(v226 + v219 + 24), (int *)(v226 + v219 + 32));
                  v231 = (_QWORD *)(v226 + v219);
                  sub_1BE784C3C(v226 + v219 + 272, *(char ***)(v226 + v219 + 48), *(_QWORD *)(v226 + v219 + 56), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v226 + v219 + 56) - *(_QWORD *)(v226 + v219 + 48)) >> 3));
                  v233 = *(char **)(v226 + v219 + 72);
                  v232 = *(_BYTE **)(v226 + v219 + 80);
                  v234 = v232 - v233;
                  v235 = (v232 - v233) >> 2;
                  v236 = v231[39];
                  v237 = (char *)v231[37];
                  if (v235 <= (v236 - (uint64_t)v237) >> 2)
                  {
                    v243 = (_QWORD *)(v221 + 80);
                    v244 = *(_BYTE **)(v301 + v219 + 304);
                    v245 = (v244 - v237) >> 2;
                    if (v245 >= v235)
                    {
                      if (v232 != v233)
                        memmove(v237, v233, v232 - v233);
                      v242 = v301;
                    }
                    else
                    {
                      if (v244 != v237)
                      {
                        memmove(v237, v233, v244 - v237);
                        v237 = *(char **)(v301 + v219 + 304);
                      }
                      v242 = v301;
                      v246 = &v233[4 * v245];
                      v234 = v232 - v246;
                      if (v232 != v246)
                        memmove(v237, v246, v232 - v246);
                    }
                  }
                  else
                  {
                    v238 = v231 + 37;
                    if (v237)
                    {
                      *(_QWORD *)(v301 + v219 + 304) = v237;
                      operator delete(v237);
                      v236 = 0;
                      *v238 = 0;
                      v231[38] = 0;
                      v231[39] = 0;
                    }
                    if (v234 < 0)
                      goto LABEL_399;
                    v239 = v236 >> 1;
                    if (v236 >> 1 <= v235)
                      v239 = (v232 - v233) >> 2;
                    v240 = (unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v239;
                    if (v240 >> 62)
LABEL_399:
                      sub_1BE61F930();
                    v241 = (char *)operator new(4 * v240);
                    v242 = v301;
                    v237 = v241;
                    *v238 = v241;
                    v243 = (_QWORD *)(v301 + v219 + 304);
                    *v243 = v241;
                    v231[39] = &v241[4 * v240];
                    if (v232 != v233)
                      memcpy(v241, v233, v232 - v233);
                  }
                  *v243 = &v237[v234];
                  v247 = v242 + v219;
                  v249 = *(char **)(v242 + v219 + 96);
                  v248 = *(_BYTE **)(v242 + v219 + 104);
                  v250 = v248 - v249;
                  v251 = (v248 - v249) >> 2;
                  v252 = *(_QWORD *)(v247 + 336);
                  v253 = *(char **)(v247 + 320);
                  if (v251 <= (v252 - (uint64_t)v253) >> 2)
                  {
                    v259 = (_QWORD *)(v221 + 104);
                    v260 = *(_BYTE **)(v247 + 328);
                    v261 = (v260 - v253) >> 2;
                    if (v261 >= v251)
                    {
                      if (v248 != v249)
                        memmove(*(void **)(v247 + 320), v249, v248 - v249);
                      v258 = v301;
                    }
                    else
                    {
                      if (v260 != v253)
                      {
                        memmove(*(void **)(v247 + 320), v249, v260 - v253);
                        v253 = *(char **)(v247 + 328);
                      }
                      v258 = v301;
                      v262 = &v249[4 * v261];
                      v250 = v248 - v262;
                      if (v248 != v262)
                        memmove(v253, v262, v248 - v262);
                    }
                  }
                  else
                  {
                    v254 = (_QWORD *)(v247 + 320);
                    if (v253)
                    {
                      *(_QWORD *)(v301 + v219 + 328) = v253;
                      operator delete(v253);
                      v252 = 0;
                      *v254 = 0;
                      *(_QWORD *)(v247 + 328) = 0;
                      *(_QWORD *)(v247 + 336) = 0;
                    }
                    if (v250 < 0)
                      goto LABEL_398;
                    v255 = v252 >> 1;
                    if (v252 >> 1 <= v251)
                      v255 = (v248 - v249) >> 2;
                    v256 = (unint64_t)v252 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v255;
                    if (v256 >> 62)
LABEL_398:
                      sub_1BE61F930();
                    v257 = (char *)operator new(4 * v256);
                    v258 = v301;
                    v253 = v257;
                    *v254 = v257;
                    v259 = (_QWORD *)(v301 + v219 + 328);
                    *v259 = v257;
                    *(_QWORD *)(v247 + 336) = &v257[4 * v256];
                    if (v248 != v249)
                      memcpy(v257, v249, v248 - v249);
                  }
                  *v259 = &v253[v250];
                  v263 = v258 + v219;
                  v265 = *(char **)(v258 + v219 + 120);
                  v264 = *(_BYTE **)(v258 + v219 + 128);
                  v266 = v264 - v265;
                  v267 = (v264 - v265) >> 3;
                  v268 = *(_QWORD *)(v263 + 360);
                  v269 = *(char **)(v263 + 344);
                  if (v267 <= (v268 - (uint64_t)v269) >> 3)
                  {
                    v275 = (_QWORD *)(v221 + 128);
                    v276 = *(_BYTE **)(v263 + 352);
                    v277 = (v276 - v269) >> 3;
                    if (v277 >= v267)
                    {
                      if (v264 != v265)
                        memmove(*(void **)(v263 + 344), v265, v264 - v265);
                      v274 = v301;
                    }
                    else
                    {
                      if (v276 != v269)
                      {
                        memmove(*(void **)(v263 + 344), v265, v276 - v269);
                        v269 = *(char **)(v263 + 352);
                      }
                      v274 = v301;
                      v278 = &v265[8 * v277];
                      v266 = v264 - v278;
                      if (v264 != v278)
                        memmove(v269, v278, v264 - v278);
                    }
                  }
                  else
                  {
                    v270 = (_QWORD *)(v263 + 344);
                    if (v269)
                    {
                      *(_QWORD *)(v301 + v219 + 352) = v269;
                      operator delete(v269);
                      v268 = 0;
                      *v270 = 0;
                      *(_QWORD *)(v263 + 352) = 0;
                      *(_QWORD *)(v263 + 360) = 0;
                    }
                    if (v266 < 0)
                      goto LABEL_401;
                    v271 = v268 >> 2;
                    if (v268 >> 2 <= v267)
                      v271 = (v264 - v265) >> 3;
                    v272 = (unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v271;
                    if (v272 >> 61)
LABEL_401:
                      sub_1BE61F930();
                    v273 = (char *)operator new(8 * v272);
                    v274 = v301;
                    v269 = v273;
                    *v270 = v273;
                    v275 = (_QWORD *)(v301 + v219 + 352);
                    *v275 = v273;
                    *(_QWORD *)(v263 + 360) = &v273[8 * v272];
                    if (v264 != v265)
                      memcpy(v273, v265, v264 - v265);
                  }
                  *v275 = &v269[v266];
                  v279 = v274 + v219;
                  sub_1BE77E7C0(v274 + v219 + 368, *(_QWORD **)(v274 + v219 + 144), (_QWORD *)(v274 + v219 + 152));
                  *(_DWORD *)(v279 + 392) = *(_DWORD *)(v279 + 168);
                  *(_WORD *)(v279 + 396) = *(_WORD *)(v279 + 172);
                  v281 = *(char **)(v274 + v219 + 176);
                  v280 = *(_BYTE **)(v274 + v219 + 184);
                  v282 = v280 - v281;
                  v283 = (v280 - v281) >> 2;
                  v284 = *(_QWORD *)(v279 + 416);
                  v285 = *(char **)(v279 + 400);
                  if (v283 <= (v284 - (uint64_t)v285) >> 2)
                  {
                    v290 = (_QWORD *)(v221 + 184);
                    v291 = *(_BYTE **)(v301 + v219 + 408);
                    v292 = (v291 - v285) >> 2;
                    if (v292 >= v283)
                    {
                      if (v280 != v281)
                        memmove(v285, v281, v280 - v281);
                      v226 = v301;
                    }
                    else
                    {
                      if (v291 != v285)
                      {
                        memmove(v285, v281, v291 - v285);
                        v285 = *(char **)(v301 + v219 + 408);
                      }
                      v226 = v301;
                      v293 = &v281[4 * v292];
                      v282 = v280 - v293;
                      if (v280 != v293)
                        memmove(v285, v293, v280 - v293);
                    }
                  }
                  else
                  {
                    v286 = (_QWORD *)(v279 + 400);
                    if (v285)
                    {
                      *(_QWORD *)(v301 + v219 + 408) = v285;
                      operator delete(v285);
                      v284 = 0;
                      *v286 = 0;
                      *(_QWORD *)(v279 + 408) = 0;
                      *(_QWORD *)(v279 + 416) = 0;
                    }
                    if (v282 < 0)
                      goto LABEL_400;
                    v287 = v284 >> 1;
                    if (v284 >> 1 <= v283)
                      v287 = (v280 - v281) >> 2;
                    v288 = (unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v287;
                    if (v288 >> 62)
LABEL_400:
                      sub_1BE61F930();
                    v289 = (char *)operator new(4 * v288);
                    v226 = v301;
                    v285 = v289;
                    *v286 = v289;
                    v290 = (_QWORD *)(v301 + v219 + 408);
                    *v290 = v289;
                    *(_QWORD *)(v279 + 416) = &v289[4 * v288];
                    if (v280 != v281)
                      memcpy(v289, v281, v280 - v281);
                  }
                  *v290 = &v285[v282];
                  std::string::operator=((std::string *)(v226 + v219 + 424), (const std::string *)(v226 + v219 + 200));
                  if (v308 == v307)
                  {
                    v227 = v309;
                    a2 = v298;
                    v221 = v300;
                    v228 = v226 + v219;
                    v229 = *(_QWORD *)(v226 + v219 - 144) - *(_QWORD *)(v226 + v219 - 152);
                    if (v229)
                      goto LABEL_309;
                  }
                  else
                  {
                    v227 = v309 / fabs(sqrt((double)(unint64_t)((v308 - v307) >> 2)));
                    a2 = v298;
                    v221 = v300;
                    v228 = v226 + v219;
                    v229 = *(_QWORD *)(v226 + v219 - 144) - *(_QWORD *)(v226 + v219 - 152);
                    if (v229)
                    {
LABEL_309:
                      v230 = *(float *)(v228 - 56) / fabs(sqrt((double)(unint64_t)(v229 >> 2)));
                      v220 = v221 - 224;
                      v219 -= 224;
                      if (v227 <= v230)
                        goto LABEL_393;
                      continue;
                    }
                  }
                  v220 = v221 - 224;
                  v219 -= 224;
                  if (v227 <= *(float *)(v228 - 56))
                  {
LABEL_393:
                    sub_1BE784638(v226 + v219 + 224, (uint64_t)v306);
                    result = sub_1BE77D498((uint64_t)v306);
                    v221 = v295;
                    v219 = v297;
                    goto LABEL_300;
                  }
                }
              }
            }
            v225 = *(float *)(v220 + 168) / fabs(sqrt((double)(unint64_t)(v224 >> 2)));
            if (v223 > v225)
              goto LABEL_307;
LABEL_300:
            v218 = v221 + 224;
            v219 += 224;
            v220 = v221;
            if (v221 + 224 == a2)
              return result;
          }
        }
        if (a3)
        {
          v13 = (unint64_t)v12 >> 1;
          v14 = v301;
          v15 = v301 + 224 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 <= 0x7000)
          {
            sub_1BE783F08(v15, v301, v7);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            sub_1BE783F08(v301, v15, v7);
            v16 = 224 * v13;
            sub_1BE783F08(v301 + 224, v16 + v301 - 224, v8);
            sub_1BE783F08(v301 + 448, v301 + 224 + v16, v9);
            sub_1BE783F08(v16 + v301 - 224, v15, v301 + 224 + v16);
            sub_1BE77D5F4(v306, v301);
            sub_1BE784638(v301, v15);
            sub_1BE784638(v15, (uint64_t)v306);
            sub_1BE77D498((uint64_t)v306);
            v14 = v301;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          v17 = *(_QWORD *)(v14 - 144) - *(_QWORD *)(v14 - 152);
          if (v17)
          {
            v18 = *(float *)(v14 - 56) / fabs(sqrt((double)(unint64_t)(v17 >> 2)));
            v19 = *(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 72);
            if (!v19)
              goto LABEL_64;
LABEL_12:
            v20 = *(float *)(v14 + 168) / fabs(sqrt((double)(unint64_t)(v19 >> 2)));
            if (v18 > v20)
              goto LABEL_13;
LABEL_65:
            sub_1BE77D5F4(v302, v14);
            v52 = v304 - v303;
            if (v304 == v303)
            {
              v53 = v305;
              v54 = v305;
              v55 = v298;
              v56 = *(_QWORD *)(v298 - 144) - *(_QWORD *)(v298 - 152);
              if (v56)
              {
LABEL_67:
                v57 = *(float *)(v55 - 56) / fabs(sqrt((double)(unint64_t)(v56 >> 2)));
                goto LABEL_70;
              }
            }
            else
            {
              v53 = v305;
              v54 = v305 / fabs(sqrt((double)(unint64_t)(v52 >> 2)));
              v55 = v298;
              v56 = *(_QWORD *)(v298 - 144) - *(_QWORD *)(v298 - 152);
              if (v56)
                goto LABEL_67;
            }
            v57 = *(float *)(v55 - 56);
LABEL_70:
            v58 = v53 / fabs(sqrt((double)(unint64_t)(v52 >> 2)));
            if (v54 <= v57)
            {
              v65 = v14 + 224;
              if (v304 == v303)
              {
                a2 = v298;
                while (1)
                {
                  v10 = v65;
                  if (v65 >= v298)
                    break;
                  v68 = *(_QWORD *)(v65 + 80) - *(_QWORD *)(v65 + 72);
                  if (v68)
                  {
                    v69 = *(float *)(v10 + 168) / fabs(sqrt((double)(unint64_t)(v68 >> 2)));
                    v65 = v10 + 224;
                    if (v53 > v69)
                      break;
                  }
                  else
                  {
                    v65 = v10 + 224;
                    if (v53 > *(float *)(v10 + 168))
                      break;
                  }
                }
              }
              else
              {
                a2 = v298;
                while (1)
                {
                  v10 = v65;
                  if (v65 >= v298)
                    break;
                  v66 = *(_QWORD *)(v65 + 80) - *(_QWORD *)(v65 + 72);
                  if (v66)
                  {
                    v67 = *(float *)(v10 + 168) / fabs(sqrt((double)(unint64_t)(v66 >> 2)));
                    v65 = v10 + 224;
                    if (v67 < v58)
                      break;
                  }
                  else
                  {
                    v65 = v10 + 224;
                    if (*(float *)(v10 + 168) < v58)
                      break;
                  }
                }
              }
            }
            else
            {
              v10 = v14;
              a2 = v298;
              if (v304 == v303)
              {
                v10 = v301;
                do
                {
                  while (1)
                  {
                    v63 = *(_QWORD *)(v10 + 304) - *(_QWORD *)(v10 + 296);
                    if (v63)
                      break;
                    v62 = *(float *)(v10 + 392);
                    v10 += 224;
                    if (v53 > v62)
                      goto LABEL_93;
                  }
                  v64 = *(float *)(v10 + 392) / fabs(sqrt((double)(unint64_t)(v63 >> 2)));
                  v10 += 224;
                }
                while (v53 <= v64);
              }
              else
              {
                do
                {
                  while (1)
                  {
                    v60 = *(_QWORD *)(v10 + 304) - *(_QWORD *)(v10 + 296);
                    if (v60)
                      break;
                    v59 = *(float *)(v10 + 392);
                    v10 += 224;
                    if (v59 < v58)
                      goto LABEL_93;
                  }
                  v61 = *(float *)(v10 + 392) / fabs(sqrt((double)(unint64_t)(v60 >> 2)));
                  v10 += 224;
                }
                while (v61 >= v58);
              }
            }
LABEL_93:
            v70 = a2;
            if (v10 < a2)
            {
              if (v304 != v303)
                v53 = v58;
              v70 = a2;
              do
              {
                while (1)
                {
                  v72 = *(_QWORD *)(v70 - 144) - *(_QWORD *)(v70 - 152);
                  if (v72)
                    break;
                  v71 = *(float *)(v70 - 56);
                  v70 -= 224;
                  if (v53 <= v71)
                    goto LABEL_114;
                }
                v73 = *(float *)(v70 - 56) / fabs(sqrt((double)(unint64_t)(v72 >> 2)));
                v70 -= 224;
              }
              while (v53 > v73);
            }
LABEL_114:
            while (v10 < v70)
            {
              sub_1BE77D5F4(v306, v10);
              sub_1BE784638(v10, v70);
              sub_1BE784638(v70, (uint64_t)v306);
              sub_1BE77D498((uint64_t)v306);
              v74 = v305;
              if (v304 == v303)
              {
                do
                {
                  while (1)
                  {
                    v79 = *(_QWORD *)(v10 + 304) - *(_QWORD *)(v10 + 296);
                    if (v79)
                      break;
                    v78 = *(float *)(v10 + 392);
                    v10 += 224;
                    if (v305 > v78)
                      goto LABEL_112;
                  }
                  v80 = *(float *)(v10 + 392) / fabs(sqrt((double)(unint64_t)(v79 >> 2)));
                  v10 += 224;
                }
                while (v305 <= v80);
              }
              else
              {
                v74 = v305 / fabs(sqrt((double)(unint64_t)((v304 - v303) >> 2)));
                do
                {
                  while (1)
                  {
                    v76 = *(_QWORD *)(v10 + 304) - *(_QWORD *)(v10 + 296);
                    if (v76)
                      break;
                    v75 = *(float *)(v10 + 392);
                    v10 += 224;
                    if (v75 < v74)
                      goto LABEL_112;
                  }
                  v77 = *(float *)(v10 + 392) / fabs(sqrt((double)(unint64_t)(v76 >> 2)));
                  v10 += 224;
                }
                while (v77 >= v74);
              }
              do
              {
LABEL_112:
                while (1)
                {
                  v82 = *(_QWORD *)(v70 - 144) - *(_QWORD *)(v70 - 152);
                  if (v82)
                    break;
                  v81 = *(float *)(v70 - 56);
                  v70 -= 224;
                  if (v74 <= v81)
                    goto LABEL_114;
                }
                v83 = *(float *)(v70 - 56) / fabs(sqrt((double)(unint64_t)(v82 >> 2)));
                v70 -= 224;
              }
              while (v74 > v83);
            }
            if (v10 - 224 != v301)
              sub_1BE784638(v301, v10 - 224);
            sub_1BE784638(v10 - 224, (uint64_t)v302);
            result = sub_1BE77D498((uint64_t)v302);
            a4 = 0;
            continue;
          }
          v18 = *(float *)(v14 - 56);
          v19 = *(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 72);
          if (v19)
            goto LABEL_12;
LABEL_64:
          if (v18 <= *(float *)(v14 + 168))
            goto LABEL_65;
LABEL_13:
          sub_1BE77D5F4(v302, v14);
          v21 = v14;
          v22 = v305;
          v23 = v305 / fabs(sqrt((double)(unint64_t)((v304 - v303) >> 2)));
          if (v304 == v303)
          {
            v21 = v14;
            do
            {
              while (1)
              {
                v28 = *(_QWORD *)(v21 + 304) - *(_QWORD *)(v21 + 296);
                if (v28)
                  break;
                v27 = *(float *)(v21 + 392);
                v21 += 224;
                if (v27 <= v305)
                  goto LABEL_22;
              }
              v29 = *(float *)(v21 + 392) / fabs(sqrt((double)(unint64_t)(v28 >> 2)));
              v21 += 224;
            }
            while (v29 > v305);
          }
          else
          {
            do
            {
              while (1)
              {
                v25 = *(_QWORD *)(v21 + 304) - *(_QWORD *)(v21 + 296);
                if (v25)
                  break;
                v24 = *(float *)(v21 + 392);
                v21 += 224;
                if (v24 <= v23)
                  goto LABEL_22;
              }
              v26 = *(float *)(v21 + 392) / fabs(sqrt((double)(unint64_t)(v25 >> 2)));
              v21 += 224;
            }
            while (v26 > v23);
          }
LABEL_22:
          if (v21 - 224 == v14)
          {
            if (v304 != v303)
              v22 = v23;
            a2 = v298;
            v30 = v298;
            while (v21 < v30)
            {
              v38 = *(_QWORD *)(v30 - 144) - *(_QWORD *)(v30 - 152);
              if (v38)
              {
                v39 = *(float *)(v30 - 56) / fabs(sqrt((double)(unint64_t)(v38 >> 2)));
                v30 -= 224;
                if (v39 > v22)
                  break;
              }
              else
              {
                v37 = *(float *)(v30 - 56);
                v30 -= 224;
                if (v37 > v22)
                  break;
              }
            }
          }
          else
          {
            a2 = v298;
            v30 = v298;
            if (v304 == v303)
            {
              v30 = v298;
              do
              {
                while (1)
                {
                  v35 = *(_QWORD *)(v30 - 144) - *(_QWORD *)(v30 - 152);
                  if (v35)
                    break;
                  v34 = *(float *)(v30 - 56);
                  v30 -= 224;
                  if (v34 > v305)
                    goto LABEL_40;
                }
                v36 = *(float *)(v30 - 56) / fabs(sqrt((double)(unint64_t)(v35 >> 2)));
                v30 -= 224;
              }
              while (v36 <= v305);
            }
            else
            {
              do
              {
                while (1)
                {
                  v32 = *(_QWORD *)(v30 - 144) - *(_QWORD *)(v30 - 152);
                  if (v32)
                    break;
                  v31 = *(float *)(v30 - 56);
                  v30 -= 224;
                  if (v31 > v23)
                    goto LABEL_40;
                }
                v33 = *(float *)(v30 - 56) / fabs(sqrt((double)(unint64_t)(v32 >> 2)));
                v30 -= 224;
              }
              while (v33 <= v23);
            }
          }
LABEL_40:
          v10 = v21;
          if (v21 < v30)
          {
            v10 = v21;
            v40 = v30;
            do
            {
              sub_1BE77D5F4(v306, v10);
              sub_1BE784638(v10, v40);
              sub_1BE784638(v40, (uint64_t)v306);
              sub_1BE77D498((uint64_t)v306);
              v41 = v305;
              if (v304 == v303)
              {
                do
                {
                  while (1)
                  {
                    v46 = *(_QWORD *)(v10 + 304) - *(_QWORD *)(v10 + 296);
                    if (v46)
                      break;
                    v45 = *(float *)(v10 + 392);
                    v10 += 224;
                    if (v45 <= v305)
                      goto LABEL_54;
                  }
                  v47 = *(float *)(v10 + 392) / fabs(sqrt((double)(unint64_t)(v46 >> 2)));
                  v10 += 224;
                }
                while (v47 > v305);
              }
              else
              {
                v41 = v305 / fabs(sqrt((double)(unint64_t)((v304 - v303) >> 2)));
                do
                {
                  while (1)
                  {
                    v43 = *(_QWORD *)(v10 + 304) - *(_QWORD *)(v10 + 296);
                    if (v43)
                      break;
                    v42 = *(float *)(v10 + 392);
                    v10 += 224;
                    if (v42 <= v41)
                      goto LABEL_54;
                  }
                  v44 = *(float *)(v10 + 392) / fabs(sqrt((double)(unint64_t)(v43 >> 2)));
                  v10 += 224;
                }
                while (v44 > v41);
              }
              do
              {
LABEL_54:
                while (1)
                {
                  v49 = *(_QWORD *)(v40 - 144) - *(_QWORD *)(v40 - 152);
                  if (v49)
                    break;
                  v48 = *(float *)(v40 - 56);
                  v40 -= 224;
                  if (v48 > v41)
                    goto LABEL_42;
                }
                v50 = *(float *)(v40 - 56) / fabs(sqrt((double)(unint64_t)(v49 >> 2)));
                v40 -= 224;
              }
              while (v50 <= v41);
LABEL_42:
              ;
            }
            while (v10 < v40);
          }
          if (v10 - 224 != v301)
            sub_1BE784638(v301, v10 - 224);
          sub_1BE784638(v10 - 224, (uint64_t)v302);
          sub_1BE77D498((uint64_t)v302);
          if (v21 < v30)
            goto LABEL_62;
          v51 = sub_1BE7842BC(v301, v10 - 224);
          result = sub_1BE7842BC(v10, a2);
          if (!(_DWORD)result)
          {
            if ((v51 & 1) != 0)
              continue;
LABEL_62:
            result = sub_1BE781E88(v301, v10 - 224, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 224;
          if ((v51 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if (v301 == a2)
          return result;
        v168 = (unint64_t)(v12 - 2) >> 1;
        v169 = v168;
        do
        {
          v170 = v169;
          if (v168 < v169)
            goto LABEL_232;
          v171 = (2 * v169) | 1;
          v172 = v301 + 224 * v171;
          if (2 * v169 + 2 < v12)
          {
            v173 = *(_QWORD *)(v301 + 224 * v171 + 80) - *(_QWORD *)(v301 + 224 * v171 + 72);
            if (v173)
            {
              v174 = *(float *)(v301 + 224 * v171 + 168) / fabs(sqrt((double)(unint64_t)(v173 >> 2)));
              v175 = *(_QWORD *)(v172 + 304) - *(_QWORD *)(v172 + 296);
              if (v175)
                goto LABEL_237;
            }
            else
            {
              v174 = *(float *)(v301 + 224 * v171 + 168);
              v175 = *(_QWORD *)(v172 + 304) - *(_QWORD *)(v172 + 296);
              if (v175)
              {
LABEL_237:
                v176 = *(float *)(v172 + 392) / fabs(sqrt((double)(unint64_t)(v175 >> 2)));
                if (v174 <= v176)
                  goto LABEL_239;
LABEL_238:
                v172 += 224;
                v171 = 2 * v169 + 2;
                goto LABEL_239;
              }
            }
            if (v174 > *(float *)(v172 + 392))
              goto LABEL_238;
          }
LABEL_239:
          v177 = *(_QWORD *)(v172 + 80) - *(_QWORD *)(v172 + 72);
          if (!v177)
          {
            v178 = *(float *)(v172 + 168);
            v179 = v301;
            v180 = *(_QWORD *)(v301 + 224 * v170 + 80) - *(_QWORD *)(v301 + 224 * v170 + 72);
            if (v180)
              goto LABEL_241;
LABEL_244:
            if (v178 > *(float *)(v179 + 224 * v170 + 168))
              goto LABEL_232;
LABEL_245:
            v182 = v301 + 224 * v170;
            sub_1BE77D5F4(v306, v182);
            while (1)
            {
              v186 = v172;
              sub_1BE784638(v182, v172);
              if (v168 < v171)
              {
LABEL_231:
                sub_1BE784638(v186, (uint64_t)v306);
                result = sub_1BE77D498((uint64_t)v306);
                goto LABEL_232;
              }
              v187 = 2 * v171;
              v188 = (2 * v171) | 1;
              v171 = v188;
              v172 = v301 + 224 * v188;
              v189 = v187 + 2;
              if (v189 >= v12)
                goto LABEL_254;
              v190 = *(_QWORD *)(v301 + 224 * v188 + 80) - *(_QWORD *)(v301 + 224 * v188 + 72);
              if (v190)
              {
                v191 = *(float *)(v301 + 224 * v188 + 168) / fabs(sqrt((double)(unint64_t)(v190 >> 2)));
                v192 = *(_QWORD *)(v172 + 304) - *(_QWORD *)(v172 + 296);
                if (!v192)
                  goto LABEL_259;
              }
              else
              {
                v191 = *(float *)(v301 + 224 * v188 + 168);
                v192 = *(_QWORD *)(v172 + 304) - *(_QWORD *)(v172 + 296);
                if (!v192)
                {
LABEL_259:
                  if (v191 <= *(float *)(v172 + 392))
                    goto LABEL_254;
LABEL_253:
                  v172 += 224;
                  v171 = v189;
                  goto LABEL_254;
                }
              }
              v193 = *(float *)(v172 + 392) / fabs(sqrt((double)(unint64_t)(v192 >> 2)));
              if (v191 > v193)
                goto LABEL_253;
LABEL_254:
              v194 = *(_QWORD *)(v172 + 80) - *(_QWORD *)(v172 + 72);
              if (v194)
              {
                v183 = *(float *)(v172 + 168) / fabs(sqrt((double)(unint64_t)(v194 >> 2)));
                v184 = v308 - v307;
                if (v308 == v307)
                  goto LABEL_256;
LABEL_247:
                v185 = v309 / fabs(sqrt((double)(unint64_t)(v184 >> 2)));
                v182 = v186;
                if (v183 > v185)
                  goto LABEL_231;
              }
              else
              {
                v183 = *(float *)(v172 + 168);
                v184 = v308 - v307;
                if (v308 != v307)
                  goto LABEL_247;
LABEL_256:
                v182 = v186;
                if (v183 > v309)
                  goto LABEL_231;
              }
            }
          }
          v178 = *(float *)(v172 + 168) / fabs(sqrt((double)(unint64_t)(v177 >> 2)));
          v179 = v301;
          v180 = *(_QWORD *)(v301 + 224 * v170 + 80) - *(_QWORD *)(v301 + 224 * v170 + 72);
          if (!v180)
            goto LABEL_244;
LABEL_241:
          v181 = *(float *)(v179 + 224 * v170 + 168) / fabs(sqrt((double)(unint64_t)(v180 >> 2)));
          if (v178 <= v181)
            goto LABEL_245;
LABEL_232:
          v169 = v170 - 1;
        }
        while (v170);
        v195 = (((unint64_t)v11 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
        do
        {
          if (v195 < 2)
            goto LABEL_267;
          sub_1BE77D5F4(v302, v301);
          v197 = 0;
          v198 = v301;
          do
          {
            v199 = v197 + 1;
            v200 = v198 + 224 * (v197 + 1);
            v201 = 2 * v197;
            v197 = (2 * v197) | 1;
            v202 = v201 + 2;
            if (v202 >= v195)
              goto LABEL_276;
            v203 = *(_QWORD *)(v198 + 224 * v199 + 80) - *(_QWORD *)(v198 + 224 * v199 + 72);
            if (v203)
            {
              v204 = *(float *)(v198 + 224 * v199 + 168) / fabs(sqrt((double)(unint64_t)(v203 >> 2)));
              v205 = *(_QWORD *)(v200 + 304) - *(_QWORD *)(v200 + 296);
              if (v205)
                goto LABEL_274;
            }
            else
            {
              v204 = *(float *)(v198 + 224 * v199 + 168);
              v205 = *(_QWORD *)(v200 + 304) - *(_QWORD *)(v200 + 296);
              if (v205)
              {
LABEL_274:
                v206 = *(float *)(v200 + 392) / fabs(sqrt((double)(unint64_t)(v205 >> 2)));
                if (v204 <= v206)
                  goto LABEL_276;
LABEL_275:
                v200 += 224;
                v197 = v202;
                goto LABEL_276;
              }
            }
            if (v204 > *(float *)(v200 + 392))
              goto LABEL_275;
LABEL_276:
            sub_1BE784638(v198, v200);
            v198 = v200;
          }
          while (v197 <= (uint64_t)((unint64_t)(v195 - 2) >> 1));
          if (v200 == a2 - 224)
          {
            sub_1BE784638(v200, (uint64_t)v302);
            goto LABEL_266;
          }
          sub_1BE784638(v200, a2 - 224);
          sub_1BE784638(a2 - 224, (uint64_t)v302);
          v207 = v200 - v301 + 224;
          if (v207 >= 225)
          {
            v208 = (unint64_t)(((((unint64_t)v207 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                    - 2) >> 1;
            v209 = *(_QWORD *)(v301 + 224 * v208 + 80) - *(_QWORD *)(v301 + 224 * v208 + 72);
            if (v209)
            {
              v210 = *(float *)(v301 + 224 * v208 + 168) / fabs(sqrt((double)(unint64_t)(v209 >> 2)));
              v211 = *(_QWORD *)(v200 + 80) - *(_QWORD *)(v200 + 72);
              if (v211)
              {
LABEL_285:
                v212 = *(float *)(v200 + 168) / fabs(sqrt((double)(unint64_t)(v211 >> 2)));
                if (v210 <= v212)
                  goto LABEL_266;
                goto LABEL_289;
              }
            }
            else
            {
              v210 = *(float *)(v301 + 224 * v208 + 168);
              v211 = *(_QWORD *)(v200 + 80) - *(_QWORD *)(v200 + 72);
              if (v211)
                goto LABEL_285;
            }
            if (v210 <= *(float *)(v200 + 168))
              goto LABEL_266;
LABEL_289:
            sub_1BE77D5F4(v306, v200);
            while (1)
            {
              v216 = v200;
              v200 = v301 + 224 * v208;
              sub_1BE784638(v216, v200);
              if (!v208)
              {
LABEL_296:
                sub_1BE784638(v200, (uint64_t)v306);
                sub_1BE77D498((uint64_t)v306);
                break;
              }
              v208 = (v208 - 1) >> 1;
              v217 = *(_QWORD *)(v301 + 224 * v208 + 80) - *(_QWORD *)(v301 + 224 * v208 + 72);
              if (v217)
              {
                v213 = *(float *)(v301 + 224 * v208 + 168) / fabs(sqrt((double)(unint64_t)(v217 >> 2)));
                v214 = v308 - v307;
                if (v308 != v307)
                {
LABEL_291:
                  v215 = v309 / fabs(sqrt((double)(unint64_t)(v214 >> 2)));
                  if (v213 <= v215)
                    goto LABEL_296;
                  continue;
                }
              }
              else
              {
                v213 = *(float *)(v301 + 224 * v208 + 168);
                v214 = v308 - v307;
                if (v308 != v307)
                  goto LABEL_291;
              }
              if (v213 <= v309)
                goto LABEL_296;
            }
          }
LABEL_266:
          result = sub_1BE77D498((uint64_t)v302);
LABEL_267:
          a2 -= 224;
        }
        while ((unint64_t)v195-- > 2);
        return result;
    }
  }
}

void sub_1BE783DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1BE77D498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE783DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  sub_1BE77D498((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_1BE783DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  sub_1BE77D498((uint64_t)&a42);
  sub_1BE77D498((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE783F08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  _QWORD v29[28];

  v5 = result;
  v7 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    v9 = *(float *)(a2 + 168);
    v10 = v9 / fabs(sqrt((double)(unint64_t)(v8 >> 2)));
    v11 = *(_QWORD *)(result + 80) - *(_QWORD *)(result + 72);
    if (v11)
      goto LABEL_3;
LABEL_7:
    v14 = *(_QWORD *)(a3 + 72);
    v13 = *(_QWORD *)(a3 + 80);
    if (v10 > *(float *)(result + 168))
      goto LABEL_4;
LABEL_8:
    v17 = v13 - v14;
    if (v17)
      v18 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v17 >> 2)));
    else
      v18 = *(float *)(a3 + 168);
    v24 = v9 / fabs(sqrt((double)(unint64_t)(v8 >> 2)));
    if (v6 != v7)
      v9 = v24;
    if (v18 <= v9)
      return result;
    sub_1BE77D5F4(v29, a2);
    sub_1BE784638(a2, a3);
    sub_1BE784638(a3, (uint64_t)v29);
    result = sub_1BE77D498((uint64_t)v29);
    v25 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v25)
    {
      v26 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v25 >> 2)));
      v27 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
      if (v27)
        goto LABEL_25;
    }
    else
    {
      v26 = *(float *)(a2 + 168);
      v27 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
      if (v27)
      {
LABEL_25:
        v28 = *(float *)(v5 + 168) / fabs(sqrt((double)(unint64_t)(v27 >> 2)));
        if (v26 <= v28)
          return result;
        goto LABEL_32;
      }
    }
    if (v26 <= *(float *)(v5 + 168))
      return result;
LABEL_32:
    sub_1BE77D5F4(v29, v5);
    sub_1BE784638(v5, a2);
    sub_1BE784638(a2, (uint64_t)v29);
    return sub_1BE77D498((uint64_t)v29);
  }
  v9 = *(float *)(a2 + 168);
  v10 = v9;
  v11 = *(_QWORD *)(result + 80) - *(_QWORD *)(result + 72);
  if (!v11)
    goto LABEL_7;
LABEL_3:
  v12 = *(float *)(result + 168) / fabs(sqrt((double)(unint64_t)(v11 >> 2)));
  v14 = *(_QWORD *)(a3 + 72);
  v13 = *(_QWORD *)(a3 + 80);
  if (v10 <= v12)
    goto LABEL_8;
LABEL_4:
  v15 = v13 - v14;
  if (v15)
    v16 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v15 >> 2)));
  else
    v16 = *(float *)(a3 + 168);
  v19 = v9 / fabs(sqrt((double)(unint64_t)(v8 >> 2)));
  if (v6 != v7)
    v9 = v19;
  if (v16 > v9)
  {
    sub_1BE77D5F4(v29, result);
    sub_1BE784638(v5, a3);
    sub_1BE784638(a3, (uint64_t)v29);
    return sub_1BE77D498((uint64_t)v29);
  }
  sub_1BE77D5F4(v29, result);
  sub_1BE784638(v5, a2);
  sub_1BE784638(a2, (uint64_t)v29);
  result = sub_1BE77D498((uint64_t)v29);
  v20 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
  if (v20)
  {
    v21 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v20 >> 2)));
    v22 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v22)
      goto LABEL_17;
  }
  else
  {
    v21 = *(float *)(a3 + 168);
    v22 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v22)
    {
LABEL_17:
      v23 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v22 >> 2)));
      if (v21 <= v23)
        return result;
LABEL_29:
      sub_1BE77D5F4(v29, a2);
      sub_1BE784638(a2, a3);
      sub_1BE784638(a3, (uint64_t)v29);
      return sub_1BE77D498((uint64_t)v29);
    }
  }
  if (v21 > *(float *)(a2 + 168))
    goto LABEL_29;
  return result;
}

void sub_1BE784258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE78426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE784280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE784294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE7842A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7842BC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[9];
  uint64_t v26;
  uint64_t v27;
  float v28;

  v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = *(_QWORD *)(a2 - 144) - *(_QWORD *)(a2 - 152);
      if (v5)
      {
        v6 = *(float *)(a2 - 56) / fabs(sqrt((double)(unint64_t)(v5 >> 2)));
        v7 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
        if (v7)
          goto LABEL_4;
      }
      else
      {
        v6 = *(float *)(a2 - 56);
        v7 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
        if (v7)
        {
LABEL_4:
          v8 = *(float *)(a1 + 168) / fabs(sqrt((double)(unint64_t)(v7 >> 2)));
          if (v6 <= v8)
            return v4;
          goto LABEL_34;
        }
      }
      if (v6 <= *(float *)(a1 + 168))
        return v4;
LABEL_34:
      v23 = a2 - 224;
      sub_1BE77D5F4(v25, a1);
      sub_1BE784638(a1, v23);
      sub_1BE784638(v23, (uint64_t)v25);
      goto LABEL_35;
    case 3:
      sub_1BE783F08(a1, a1 + 224, a2 - 224);
      return v4;
    case 4:
      sub_1BE784EB0(a1, a1 + 224, a1 + 448, a2 - 224);
      return v4;
    case 5:
      sub_1BE785148(a1, a1 + 224, a1 + 448, a1 + 672, a2 - 224);
      return v4;
    default:
      v9 = a1 + 448;
      sub_1BE783F08(a1, a1 + 224, a1 + 448);
      v10 = a1 + 672;
      if (a1 + 672 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      while (2)
      {
        v13 = *(_QWORD *)(v10 + 80) - *(_QWORD *)(v10 + 72);
        if (v13)
        {
          v14 = *(float *)(v10 + 168) / fabs(sqrt((double)(unint64_t)(v13 >> 2)));
          v15 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
          if (v15)
            goto LABEL_13;
        }
        else
        {
          v14 = *(float *)(v10 + 168);
          v15 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
          if (v15)
          {
LABEL_13:
            v16 = *(float *)(v9 + 168) / fabs(sqrt((double)(unint64_t)(v15 >> 2)));
            if (v14 > v16)
              goto LABEL_17;
LABEL_10:
            v9 = v10;
            v11 += 224;
            v10 += 224;
            if (v10 == a2)
              return 1;
            continue;
          }
        }
        break;
      }
      if (v14 <= *(float *)(v9 + 168))
        goto LABEL_10;
LABEL_17:
      sub_1BE77D5F4(v25, v10);
      v17 = v11;
      while (1)
      {
        sub_1BE784638(a1 + v17 + 672, a1 + v17 + 448);
        if (v17 == -448)
          break;
        if (v27 == v26)
        {
          v19 = v28;
          v20 = a1 + v17;
          v21 = *(_QWORD *)(a1 + v17 + 304) - *(_QWORD *)(a1 + v17 + 296);
          if (v21)
            goto LABEL_18;
LABEL_24:
          v17 -= 224;
          if (v19 <= *(float *)(v20 + 392))
          {
LABEL_25:
            v22 = a1 + v17 + 672;
            goto LABEL_27;
          }
        }
        else
        {
          v19 = v28 / fabs(sqrt((double)(unint64_t)((v27 - v26) >> 2)));
          v20 = a1 + v17;
          v21 = *(_QWORD *)(a1 + v17 + 304) - *(_QWORD *)(a1 + v17 + 296);
          if (!v21)
            goto LABEL_24;
LABEL_18:
          v18 = *(float *)(v20 + 392) / fabs(sqrt((double)(unint64_t)(v21 >> 2)));
          v17 -= 224;
          if (v19 <= v18)
            goto LABEL_25;
        }
      }
      v22 = a1;
LABEL_27:
      sub_1BE784638(v22, (uint64_t)v25);
      if (++v12 != 8)
      {
        sub_1BE77D498((uint64_t)v25);
        goto LABEL_10;
      }
      v4 = v10 + 224 == a2;
LABEL_35:
      sub_1BE77D498((uint64_t)v25);
      return v4;
  }
}

void sub_1BE7845FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE784610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE784624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE784638(uint64_t a1, uint64_t a2)
{
  int v4;

  if (a1 != a2)
  {
    sub_1BE784720((uint64_t **)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
    sub_1BE781768(a1 + 24, *(int **)(a2 + 24), (int *)(a2 + 32));
    sub_1BE784C3C(a1 + 48, *(char ***)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    sub_1BE66E294((_QWORD *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    sub_1BE66E294((_QWORD *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
    sub_1BE62037C((_QWORD *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
    sub_1BE77E7C0(a1 + 144, *(_QWORD **)(a2 + 144), (_QWORD *)(a2 + 152));
    v4 = *(_DWORD *)(a2 + 168);
    *(_WORD *)(a1 + 172) = *(_WORD *)(a2 + 172);
    *(_DWORD *)(a1 + 168) = v4;
    sub_1BE66E294((_QWORD *)(a1 + 176), *(char **)(a2 + 176), *(char **)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  }
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  return a1;
}

void sub_1BE784720(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  size_t v18;
  const void *v19;
  _QWORD *v20;
  const void *v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v30;
  _QWORD *v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  char *i;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v40;
  uint64_t *v41;

  v4 = a2;
  if (!a1[2])
    goto LABEL_64;
  v6 = *a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  v41 = v9;
  if (!v9)
    goto LABEL_64;
  v10 = (char *)v9[2];
  if (v10)
  {
    v11 = *(char **)v10;
    if (*(uint64_t **)v10 == v9)
    {
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v38 = (char *)*((_QWORD *)v10 + 1);
        if (!v38)
          break;
        do
        {
          v10 = v38;
          v38 = *(char **)v38;
        }
        while (v38);
      }
    }
    else
    {
      for (*((_QWORD *)v10 + 1) = 0; v11; v11 = (char *)*((_QWORD *)v10 + 1))
      {
        do
        {
          v10 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v40 = v10;
  if (a2 == a3)
  {
    v34 = (uint64_t)a1;
    sub_1BE77D58C((uint64_t)a1, (char *)v9);
    if (!v10)
      goto LABEL_64;
    goto LABEL_61;
  }
  v12 = a2;
  do
  {
    std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
    objc_storeStrong((id *)v9 + 7, (id)v12[7]);
    v13 = v41;
    v14 = *v8;
    v15 = a1 + 1;
    v16 = a1 + 1;
    if (!*v8)
    {
LABEL_34:
      *v41 = 0;
      v41[1] = 0;
      v41[2] = (uint64_t)v15;
      *v16 = v41;
      v29 = (uint64_t *)**a1;
      if (!v29)
        goto LABEL_36;
LABEL_35:
      *a1 = v29;
      v13 = *v16;
      goto LABEL_36;
    }
    v17 = *((char *)v41 + 55);
    if (v17 >= 0)
      v18 = *((unsigned __int8 *)v41 + 55);
    else
      v18 = v41[5];
    if (v17 >= 0)
      v19 = v41 + 4;
    else
      v19 = (const void *)v41[4];
    do
    {
      while (1)
      {
        v15 = (uint64_t **)v14;
        v22 = (const void *)v14[4];
        v20 = v14 + 4;
        v21 = v22;
        v23 = *((char *)v20 + 23);
        if (v23 >= 0)
          v24 = *((unsigned __int8 *)v20 + 23);
        else
          v24 = v20[1];
        if (v23 >= 0)
          v25 = v20;
        else
          v25 = v21;
        if (v24 >= v18)
          v26 = v18;
        else
          v26 = v24;
        v27 = memcmp(v19, v25, v26);
        v28 = v18 < v24;
        if (v27)
          v28 = v27 < 0;
        if (!v28)
          break;
        v14 = *v15;
        v16 = v15;
        if (!*v15)
          goto LABEL_34;
      }
      v14 = v15[1];
    }
    while (v14);
    v16 = v15 + 1;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    v15[1] = v41;
    v29 = (uint64_t *)**a1;
    if (v29)
      goto LABEL_35;
LABEL_36:
    sub_1BE61F5C0(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = (uint64_t *)v40;
    v41 = (uint64_t *)v40;
    if (v40)
    {
      v10 = (char *)*((_QWORD *)v40 + 2);
      if (v10)
      {
        v30 = *(char **)v10;
        if (*(char **)v10 == v40)
        {
          *(_QWORD *)v10 = 0;
          while (1)
          {
            v33 = (char *)*((_QWORD *)v10 + 1);
            if (!v33)
              break;
            do
            {
              v10 = v33;
              v33 = *(char **)v33;
            }
            while (v33);
          }
        }
        else
        {
          for (*((_QWORD *)v10 + 1) = 0; v30; v30 = (char *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v30;
              v30 = *(char **)v30;
            }
            while (v30);
          }
        }
      }
      v40 = v10;
      v31 = (_QWORD *)v12[1];
      if (!v31)
      {
        do
        {
LABEL_47:
          v4 = (_QWORD *)v12[2];
          v32 = *v4 == (_QWORD)v12;
          v12 = v4;
        }
        while (!v32);
        goto LABEL_49;
      }
    }
    else
    {
      v10 = 0;
      v31 = (_QWORD *)v12[1];
      if (!v31)
        goto LABEL_47;
    }
    do
    {
      v4 = v31;
      v31 = (_QWORD *)*v31;
    }
    while (v31);
LABEL_49:
    if (!v9)
      break;
    v12 = v4;
  }
  while (v4 != a3);
  v34 = (uint64_t)a1;
  sub_1BE77D58C((uint64_t)a1, (char *)v9);
  if (!v10)
    goto LABEL_64;
LABEL_61:
  for (i = (char *)*((_QWORD *)v10 + 2); i; i = (char *)*((_QWORD *)i + 2))
    v10 = i;
  sub_1BE77D58C(v34, v10);
LABEL_64:
  if (v4 != a3)
  {
    do
    {
      sub_1BE784ABC(a1, (uint64_t)(v4 + 4));
      v36 = (_QWORD *)v4[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v4[2];
          v32 = *v37 == (_QWORD)v4;
          v4 = v37;
        }
        while (!v32);
      }
      v4 = v37;
    }
    while (v37 != a3);
  }
}

void sub_1BE784A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE784A68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE784A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1BE77D58C(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1BE77D58C(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

char *sub_1BE784ABC(uint64_t **a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char *v6;
  _OWORD *v7;
  char *v8;
  char **v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t *v21;
  char *v23;

  v4 = (char **)(a1 + 1);
  v5 = (char *)operator new(0x40uLL);
  v6 = v5;
  v23 = v5;
  v7 = v5 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1BE61F128(v5 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(id *)(a2 + 24);
  v8 = *v4;
  v9 = v4;
  if (!*v4)
  {
LABEL_25:
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v4;
    *v9 = v6;
    v21 = (uint64_t *)**a1;
    if (!v21)
      goto LABEL_27;
LABEL_26:
    *a1 = v21;
    v6 = *v9;
    goto LABEL_27;
  }
  v10 = v6[55];
  if (v10 >= 0)
    v11 = v6[55];
  else
    v11 = *((_QWORD *)v6 + 5);
  if (v10 < 0)
    v7 = (_OWORD *)*((_QWORD *)v6 + 4);
  do
  {
    while (1)
    {
      v4 = (char **)v8;
      v14 = (_QWORD *)*((_QWORD *)v8 + 4);
      v12 = v8 + 32;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      v16 = v15 >= 0 ? *((unsigned __int8 *)v12 + 23) : v12[1];
      v17 = v15 >= 0 ? v12 : v13;
      v18 = v16 >= v11 ? v11 : v16;
      v19 = memcmp(v7, v17, v18);
      v20 = v11 < v16;
      if (v19)
        v20 = v19 < 0;
      if (!v20)
        break;
      v8 = *v4;
      v9 = v4;
      if (!*v4)
        goto LABEL_25;
    }
    v8 = v4[1];
  }
  while (v8);
  v9 = v4 + 1;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v4;
  v4[1] = v6;
  v21 = (uint64_t *)**a1;
  if (v21)
    goto LABEL_26;
LABEL_27:
  sub_1BE61F5C0(a1[1], (uint64_t *)v6);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v23;
}

void sub_1BE784C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE77DEEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BE784C3C(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_1BE61F930();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_1BE77E018(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_1BE66E294(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_1BE77E018(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_1BE66E294(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_1BE784EA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE784EA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1BE784EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  _QWORD v21[28];

  result = sub_1BE783F08(a1, a2, a3);
  v9 = *(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72);
  if (v9)
  {
    v10 = *(float *)(a4 + 168) / fabs(sqrt((double)(unint64_t)(v9 >> 2)));
    v11 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v10 = *(float *)(a4 + 168);
    v11 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v11)
    {
LABEL_3:
      v12 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v11 >> 2)));
      if (v10 <= v12)
        return result;
      goto LABEL_7;
    }
  }
  if (v10 <= *(float *)(a3 + 168))
    return result;
LABEL_7:
  sub_1BE77D5F4(v21, a3);
  sub_1BE784638(a3, a4);
  sub_1BE784638(a4, (uint64_t)v21);
  result = sub_1BE77D498((uint64_t)v21);
  v13 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
  if (v13)
  {
    v14 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v13 >> 2)));
    v15 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v15)
      goto LABEL_9;
  }
  else
  {
    v14 = *(float *)(a3 + 168);
    v15 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v15)
    {
LABEL_9:
      v16 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v15 >> 2)));
      if (v14 <= v16)
        return result;
      goto LABEL_13;
    }
  }
  if (v14 <= *(float *)(a2 + 168))
    return result;
LABEL_13:
  sub_1BE77D5F4(v21, a2);
  sub_1BE784638(a2, a3);
  sub_1BE784638(a3, (uint64_t)v21);
  result = sub_1BE77D498((uint64_t)v21);
  v17 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
  if (v17)
  {
    v18 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v17 >> 2)));
    v19 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v19)
      goto LABEL_15;
  }
  else
  {
    v18 = *(float *)(a2 + 168);
    v19 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v19)
    {
LABEL_15:
      v20 = *(float *)(a1 + 168) / fabs(sqrt((double)(unint64_t)(v19 >> 2)));
      if (v18 > v20)
        goto LABEL_19;
      return result;
    }
  }
  if (v18 > *(float *)(a1 + 168))
  {
LABEL_19:
    sub_1BE77D5F4(v21, a1);
    sub_1BE784638(a1, a2);
    sub_1BE784638(a2, (uint64_t)v21);
    return sub_1BE77D498((uint64_t)v21);
  }
  return result;
}

void sub_1BE78510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE785120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE785134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE785148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  _QWORD v27[28];

  result = sub_1BE784EB0(a1, a2, a3, a4);
  v11 = *(_QWORD *)(a5 + 80) - *(_QWORD *)(a5 + 72);
  if (v11)
  {
    v12 = *(float *)(a5 + 168) / fabs(sqrt((double)(unint64_t)(v11 >> 2)));
    v13 = *(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72);
    if (v13)
      goto LABEL_3;
  }
  else
  {
    v12 = *(float *)(a5 + 168);
    v13 = *(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72);
    if (v13)
    {
LABEL_3:
      v14 = *(float *)(a4 + 168) / fabs(sqrt((double)(unint64_t)(v13 >> 2)));
      if (v12 <= v14)
        return result;
      goto LABEL_7;
    }
  }
  if (v12 <= *(float *)(a4 + 168))
    return result;
LABEL_7:
  sub_1BE77D5F4(v27, a4);
  sub_1BE784638(a4, a5);
  sub_1BE784638(a5, (uint64_t)v27);
  result = sub_1BE77D498((uint64_t)v27);
  v15 = *(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72);
  if (v15)
  {
    v16 = *(float *)(a4 + 168) / fabs(sqrt((double)(unint64_t)(v15 >> 2)));
    v17 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v17)
      goto LABEL_9;
  }
  else
  {
    v16 = *(float *)(a4 + 168);
    v17 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v17)
    {
LABEL_9:
      v18 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v17 >> 2)));
      if (v16 <= v18)
        return result;
      goto LABEL_13;
    }
  }
  if (v16 <= *(float *)(a3 + 168))
    return result;
LABEL_13:
  sub_1BE77D5F4(v27, a3);
  sub_1BE784638(a3, a4);
  sub_1BE784638(a4, (uint64_t)v27);
  result = sub_1BE77D498((uint64_t)v27);
  v19 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
  if (v19)
  {
    v20 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v19 >> 2)));
    v21 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v21)
      goto LABEL_15;
  }
  else
  {
    v20 = *(float *)(a3 + 168);
    v21 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v21)
    {
LABEL_15:
      v22 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v21 >> 2)));
      if (v20 <= v22)
        return result;
      goto LABEL_19;
    }
  }
  if (v20 <= *(float *)(a2 + 168))
    return result;
LABEL_19:
  sub_1BE77D5F4(v27, a2);
  sub_1BE784638(a2, a3);
  sub_1BE784638(a3, (uint64_t)v27);
  result = sub_1BE77D498((uint64_t)v27);
  v23 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
  if (v23)
  {
    v24 = *(float *)(a2 + 168) / fabs(sqrt((double)(unint64_t)(v23 >> 2)));
    v25 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v25)
      goto LABEL_21;
  }
  else
  {
    v24 = *(float *)(a2 + 168);
    v25 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v25)
    {
LABEL_21:
      v26 = *(float *)(a1 + 168) / fabs(sqrt((double)(unint64_t)(v25 >> 2)));
      if (v24 > v26)
        goto LABEL_25;
      return result;
    }
  }
  if (v24 > *(float *)(a1 + 168))
  {
LABEL_25:
    sub_1BE77D5F4(v27, a1);
    sub_1BE784638(a1, a2);
    sub_1BE784638(a2, (uint64_t)v27);
    return sub_1BE77D498((uint64_t)v27);
  }
  return result;
}

void sub_1BE785454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE785468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE78547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE785490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7854A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  _QWORD v30[9];
  uint64_t v31;
  uint64_t v32;
  float v33;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v5 = result;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a3 - result) >> 5))
    {
      v8 = (0xDB6DB6DB6DB6DB6ELL * ((a3 - result) >> 5)) | 1;
      v9 = result + 224 * v8;
      if ((uint64_t)(0xDB6DB6DB6DB6DB6ELL * ((a3 - result) >> 5) + 2) >= a2)
        goto LABEL_8;
      v10 = *(_QWORD *)(result + 224 * v8 + 80) - *(_QWORD *)(result + 224 * v8 + 72);
      if (v10)
      {
        v11 = *(float *)(result + 224 * v8 + 168) / fabs(sqrt((double)(unint64_t)(v10 >> 2)));
        v12 = *(_QWORD *)(v9 + 304) - *(_QWORD *)(v9 + 296);
        if (v12)
          goto LABEL_6;
      }
      else
      {
        v11 = *(float *)(result + 224 * v8 + 168);
        v12 = *(_QWORD *)(v9 + 304) - *(_QWORD *)(v9 + 296);
        if (v12)
        {
LABEL_6:
          v13 = *(float *)(v9 + 392) / fabs(sqrt((double)(unint64_t)(v12 >> 2)));
          if (v11 <= v13)
            goto LABEL_8;
          goto LABEL_7;
        }
      }
      if (v11 <= *(float *)(v9 + 392))
      {
LABEL_8:
        v14 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
        if (v14)
        {
          v15 = *(float *)(v9 + 168) / fabs(sqrt((double)(unint64_t)(v14 >> 2)));
          v16 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
          if (v16)
            goto LABEL_10;
        }
        else
        {
          v15 = *(float *)(v9 + 168);
          v16 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
          if (v16)
          {
LABEL_10:
            v17 = *(float *)(a3 + 168) / fabs(sqrt((double)(unint64_t)(v16 >> 2)));
            if (v15 > v17)
              return result;
LABEL_14:
            sub_1BE77D5F4(v30, a3);
            while (1)
            {
              v19 = v4;
              v4 = v9;
              sub_1BE784638(v19, v9);
              if (v6 < v8)
              {
LABEL_31:
                sub_1BE784638(v4, (uint64_t)v30);
                return sub_1BE77D498((uint64_t)v30);
              }
              v20 = 2 * v8;
              v21 = (2 * v8) | 1;
              v8 = v21;
              v9 = v5 + 224 * v21;
              v22 = v20 + 2;
              if (v22 >= a2)
                goto LABEL_22;
              v23 = *(_QWORD *)(v5 + 224 * v21 + 80) - *(_QWORD *)(v5 + 224 * v21 + 72);
              if (v23)
              {
                v24 = *(float *)(v5 + 224 * v21 + 168) / fabs(sqrt((double)(unint64_t)(v23 >> 2)));
                v25 = *(_QWORD *)(v9 + 304) - *(_QWORD *)(v9 + 296);
                if (!v25)
                  goto LABEL_29;
              }
              else
              {
                v24 = *(float *)(v5 + 224 * v21 + 168);
                v25 = *(_QWORD *)(v9 + 304) - *(_QWORD *)(v9 + 296);
                if (!v25)
                {
LABEL_29:
                  if (v24 <= *(float *)(v9 + 392))
                    goto LABEL_22;
LABEL_21:
                  v9 += 224;
                  v8 = v22;
                  goto LABEL_22;
                }
              }
              v26 = *(float *)(v9 + 392) / fabs(sqrt((double)(unint64_t)(v25 >> 2)));
              if (v24 > v26)
                goto LABEL_21;
LABEL_22:
              v27 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
              if (v27)
              {
                v28 = *(float *)(v9 + 168) / fabs(sqrt((double)(unint64_t)(v27 >> 2)));
                v29 = v32 - v31;
                if (v32 == v31)
                  goto LABEL_26;
LABEL_15:
                v18 = v33 / fabs(sqrt((double)(unint64_t)(v29 >> 2)));
                if (v28 > v18)
                  goto LABEL_31;
              }
              else
              {
                v28 = *(float *)(v9 + 168);
                v29 = v32 - v31;
                if (v32 != v31)
                  goto LABEL_15;
LABEL_26:
                if (v28 > v33)
                  goto LABEL_31;
              }
            }
          }
        }
        if (v15 > *(float *)(a3 + 168))
          return result;
        goto LABEL_14;
      }
LABEL_7:
      v9 += 224;
      v8 = 0xDB6DB6DB6DB6DB6ELL * ((a3 - result) >> 5) + 2;
      goto LABEL_8;
    }
  }
  return result;
}

void sub_1BE7857D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE7857E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE77D498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ***sub_1BE7857F8(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_1BE77D498(v4 - 224);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1BE785B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE785BF4(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v5 = v3;
  v8 = 0;
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v30, (uint64_t)v34, 16, v7);
  if (v14)
  {
    v15 = *(_QWORD *)v31;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v31 != v15)
          objc_enumerationMutation(v5);
        objc_msgSend_encodedStrokeIdentifier(*(void **)(*((_QWORD *)&v30 + 1) + 8 * v16), v9, v10, v11, v12, v13, (_QWORD)v30);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v4, v18, (uint64_t)v17, v19, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend_count(v22, v23, v24, v25, v26, v27);

        v8 += v28;
        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v30, (uint64_t)v34, 16, v13);
    }
    while (v14);
  }

  return v8;
}

void sub_1BE785D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE785E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE785E1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double MidY;
  double v69;
  double v70;
  unint64_t v71;
  double v72;
  double v73;
  BOOL v74;
  uint64_t v75;
  double MidX;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v13, (uint64_t)v12, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v17, v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v23, v24, v25, v26, v27, v28);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;

  v37 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(v5, v38, v39, v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v37, v44, (uint64_t)v43, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v48, v49, v50, v51, v52, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v54, v55, v56, v57, v58, v59);
  v61 = v60;
  v63 = v62;
  v65 = v64;
  v67 = v66;

  v78.origin.x = v30;
  v78.origin.y = v32;
  v78.size.width = v34;
  v78.size.height = v36;
  MidX = CGRectGetMidX(v78);
  v79.origin.x = v30;
  v79.origin.y = v32;
  v79.size.width = v34;
  v79.size.height = v36;
  MidY = CGRectGetMidY(v79);
  v80.origin.x = v61;
  v80.origin.y = v63;
  v80.size.width = v65;
  v80.size.height = v67;
  v69 = CGRectGetMidX(v80);
  v81.origin.x = v61;
  v81.origin.y = v63;
  v81.size.width = v65;
  v81.size.height = v67;
  v70 = CGRectGetMidY(v81);
  v71 = *(_QWORD *)(a1 + 40);
  if (v71 >= 2)
  {
    if (v71 == 2)
    {
      v73 = v70 - MidY;
      v74 = MidX - v69 <= 0.0;
      if (MidX - v69 != 0.0)
        goto LABEL_11;
    }
    else
    {
      if (v71 != 3)
        goto LABEL_10;
      v72 = v70 - MidY;
      v73 = v69 - MidX;
      v74 = v72 <= 0.0;
      if (v72 != 0.0)
        goto LABEL_11;
    }
LABEL_9:
    v74 = v73 <= 0.0;
    if (v73 != 0.0)
      goto LABEL_11;
LABEL_10:
    v75 = 0;
    goto LABEL_14;
  }
  v73 = v70 - MidY;
  v74 = v69 - MidX <= 0.0;
  if (v69 - MidX == 0.0)
    goto LABEL_9;
LABEL_11:
  if (v74)
    v75 = 1;
  else
    v75 = -1;
LABEL_14:

  return v75;
}

void sub_1BE786004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE786020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE786038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE78604C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE78605C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE786078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE786090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7860A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7860B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7860C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7863A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE787C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;
  void *v70;
  void *v72;

  _Block_object_dispose(&a55, 8);
  if (__p)
  {
    a62 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a69, 8);
  v72 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v72;
    operator delete(v72);
  }

  _Unwind_Resume(a1);
}

id sub_1BE78815C(void *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  if (a1)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v3, v4, v5, v6, v7);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v9 = v8;
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v26, (uint64_t)v30, 16, v11);
    if (v17)
    {
      v18 = *(_QWORD *)v27;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v27 != v18)
            objc_enumerationMutation(v9);
          objc_msgSend_encodedStrokeIdentifier(*(void **)(*((_QWORD *)&v26 + 1) + 8 * v19), v12, v13, v14, v15, v16, (_QWORD)v26);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(a1, v21, (uint64_t)v20, v22, v23, v24);

          ++v19;
        }
        while (v17 != v19);
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v26, (uint64_t)v30, 16, v16);
      }
      while (v17);
    }

  }
  return a1;
}

void sub_1BE78828C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1BE7882C8(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  double x;
  double y;
  double width;
  double height;
  id v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  int isStroke_versionOfStrokeWithIdentifier;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char isSubsetOfSet;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  CHOrderedStrokeGroup *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  double v183;
  double v184;
  uint64_t StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers;
  void *v186;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  CHOrderedStrokeGroup *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  double v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  id obj;
  id v237;
  id v238;
  void *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint8_t buf[16];
  _BYTE v249[128];
  _BYTE v250[128];
  uint64_t v251;
  CGRect v252;
  CGRect v253;
  CGRect v254;

  v251 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v238 = a3;
  v237 = a4;
  v239 = v9;
  if (a1)
  {
    if (!objc_msgSend_count(v9, v10, v11, v12, v13, v14))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v20 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_FAULT, "Attempt to create an empty stroke group.", buf, 2u);
      }

    }
    objc_msgSend_set(MEMORY[0x1E0C99E20], v15, v16, v17, v18, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v244 = 0u;
    v245 = 0u;
    v246 = 0u;
    v247 = 0u;
    v26 = v9;
    v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v244, (uint64_t)v250, 16, v28);
    if (v34)
    {
      v35 = *(_QWORD *)v245;
      do
      {
        for (i = 0; i != v34; ++i)
        {
          if (*(_QWORD *)v245 != v35)
            objc_enumerationMutation(v26);
          v37 = *(void **)(*((_QWORD *)&v244 + 1) + 8 * i);
          objc_msgSend_encodedStrokeIdentifier(v37, v29, v30, v31, v32, v33);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v21, v39, (uint64_t)v38, v40, v41, v42);

          objc_msgSend_bounds(v37, v43, v44, v45, v46, v47);
          v254.origin.x = v48;
          v254.origin.y = v49;
          v254.size.width = v50;
          v254.size.height = v51;
          v252.origin.x = x;
          v252.origin.y = y;
          v252.size.width = width;
          v252.size.height = height;
          v253 = CGRectUnion(v252, v254);
          x = v253.origin.x;
          y = v253.origin.y;
          width = v253.size.width;
          height = v253.size.height;
        }
        v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v244, (uint64_t)v250, 16, v33);
      }
      while (v34);
    }

    if (!a5)
    {
      v194 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_38;
    }
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    obj = v237;
    v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v52, (uint64_t)&v240, (uint64_t)v249, 16, v53);
    if (v54)
    {
      v235 = *(_QWORD *)v241;
LABEL_18:
      v234 = v54;
      v60 = 0;
      while (1)
      {
        if (*(_QWORD *)v241 != v235)
          objc_enumerationMutation(obj);
        v61 = *(void **)(*((_QWORD *)&v240 + 1) + 8 * v60);
        objc_msgSend_strokeProvider(a1, v55, v56, v57, v58, v59);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_lastStrokeIdentifier(v61, v63, v64, v65, v66, v67);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIdentifierFromData_(v62, v69, (uint64_t)v68, v70, v71, v72);
        v73 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_strokeIdentifiers(v61, v74, v75, v76, v77, v78);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v79, v80, v81, v82, v83, v84) == 1
          && objc_msgSend_count(v26, v85, v86, v87, v88, v89) == 1)
        {
          objc_msgSend_strokeProvider(a1, v90, v91, v92, v93, v94);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_lastObject(v26, v96, v97, v98, v99, v100);
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          isStroke_versionOfStrokeWithIdentifier = objc_msgSend_isStroke_versionOfStrokeWithIdentifier_(v95, v102, (uint64_t)v101, (uint64_t)v73, v103, v104);

          if (isStroke_versionOfStrokeWithIdentifier)
          {
            v188 = objc_msgSend_uniqueIdentifier(v61, v106, v107, v108, v109, v110);
            v194 = objc_msgSend_ancestorIdentifier(v61, v189, v190, v191, v192, v193);

            if (v188 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v195 = [CHOrderedStrokeGroup alloc];
              objc_msgSend_firstObject(v26, v196, v197, v198, v199, v200);
              v146 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_encodedStrokeIdentifier(v146, v201, v202, v203, v204, v205);
              v152 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_lastObject(v26, v206, v207, v208, v209, v210);
              v158 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_encodedStrokeIdentifier(v158, v211, v212, v213, v214, v215);
              v164 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strategyIdentifier(a1, v216, v217, v218, v219, v220);
              v170 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_firstObject(v26, v221, v222, v223, v224, v225);
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_bounds(v176, v226, v227, v228, v229, v230);
              StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers = objc_msgSend_initWithUniqueIdentifier_ancestorIdentifier_strokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers_(v195, v231, v188, v194, (uint64_t)v21, (uint64_t)v152, v164, 1, x, y, width, height, 1.0, v232, v233, v170, v238);
              goto LABEL_39;
            }
            goto LABEL_38;
          }
        }
        else
        {

        }
        objc_msgSend_strokeIdentifiers(v61, v106, v107, v108, v109, v110);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        isSubsetOfSet = objc_msgSend_isSubsetOfSet_(v111, v112, (uint64_t)v21, v113, v114, v115);

        if ((isSubsetOfSet & 1) != 0
          || (objc_msgSend_strokeIdentifiers(v61, v117, v118, v119, v120, v121),
              v122 = (void *)objc_claimAutoreleasedReturnValue(),
              v127 = objc_msgSend_isSubsetOfSet_(v21, v123, (uint64_t)v122, v124, v125, v126),
              v122,
              v127))
        {
LABEL_31:
          v194 = objc_msgSend_ancestorIdentifier(v61, v117, v118, v119, v120, v121);

          goto LABEL_37;
        }
        v128 = objc_msgSend_count(v26, v117, v118, v119, v120, v121) - 1;
        while ((v128 & 0x8000000000000000) == 0)
        {
          objc_msgSend_objectAtIndexedSubscript_(v26, v117, v128, v119, v120, v121);
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeProvider(a1, v130, v131, v132, v133, v134);
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          v139 = objc_msgSend_isStroke_versionOfStrokeWithIdentifier_(v135, v136, (uint64_t)v129, (uint64_t)v73, v137, v138);

          --v128;
          if ((v139 & 1) != 0)
            goto LABEL_31;
        }

        if (++v60 == v234)
        {
          v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v240, (uint64_t)v249, 16, v59);
          v194 = 0x7FFFFFFFFFFFFFFFLL;
          if (v54)
            goto LABEL_18;
          goto LABEL_37;
        }
      }
    }
    v194 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_37:

LABEL_38:
    v140 = [CHOrderedStrokeGroup alloc];
    objc_msgSend_firstObject(v26, v141, v142, v143, v144, v145);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_encodedStrokeIdentifier(v146, v147, v148, v149, v150, v151);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastObject(v26, v153, v154, v155, v156, v157);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_encodedStrokeIdentifier(v158, v159, v160, v161, v162, v163);
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strategyIdentifier(a1, v165, v166, v167, v168, v169);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v26, v171, v172, v173, v174, v175);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v176, v177, v178, v179, v180, v181);
    StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers = objc_msgSend_initWithAncestorIdentifier_strokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers_(v140, v182, v194, (uint64_t)v21, (uint64_t)v152, (uint64_t)v164, 1, v170, x, y, width, height, 1.0, v183, v184, v238);
LABEL_39:
    v186 = (void *)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers;

  }
  else
  {
    v186 = 0;
  }

  return v186;
}

void sub_1BE7888F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

double sub_1BE788A98(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double v19;
  unint64_t i;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t v59[16];

  v1 = a1;
  if (!objc_msgSend_count(v1, v2, v3, v4, v5, v6))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v12 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_1BE607000, v12, OS_LOG_TYPE_FAULT, "At least one stroke is needed to calculate accumulated time differences", v59, 2u);
    }

  }
  objc_msgSend_firstObject(v1, v7, v8, v9, v10, v11);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0.0;
  for (i = 1; i < objc_msgSend_count(v1, v13, v14, v15, v16, v17); ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(v1, v21, i, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_startTimestamp(v25, v26, v27, v28, v29, v30);
    v32 = v31;
    objc_msgSend_startTimestamp(v18, v33, v34, v35, v36, v37);
    if (v32 >= v43)
    {
      objc_msgSend_startTimestamp(v25, v38, v39, v40, v41, v42);
      v45 = v52;
      objc_msgSend_endTimestamp(v18, v53, v54, v55, v56, v57);
    }
    else
    {
      objc_msgSend_startTimestamp(v18, v38, v39, v40, v41, v42);
      v45 = v44;
      objc_msgSend_endTimestamp(v25, v46, v47, v48, v49, v50);
    }
    v19 = v19 + v45 - v51;

    v18 = v25;
  }

  return v19;
}

void sub_1BE788BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE788C28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1BE788C40(void *a1, double *a2, double *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double height;
  BOOL IsNull;
  char v45;
  double v46;
  double v47;
  _BOOL4 v48;
  int v49;
  double v50;
  void *v51;
  double MaxY;
  double MinY;
  double v55;
  double v56;
  double v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;

  v13 = a1;
  v58.origin.x = a4;
  v58.origin.y = a5;
  v58.size.width = a6;
  v58.size.height = a7;
  MinY = CGRectGetMinY(v58);
  v59.origin.x = a4;
  v59.origin.y = a5;
  v59.size.width = a6;
  v59.size.height = a7;
  MaxY = CGRectGetMaxY(v59);
  v19 = 0;
  v57 = 0.0;
  v20 = -1;
  v56 = 2147483650.0;
  v21 = -1;
  v55 = a4;
  while (v19 < objc_msgSend_count(v13, v14, v15, v16, v17, v18))
  {
    objc_msgSend_objectAtIndexedSubscript_(v13, v22, v19, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_frame(v26, v27, v28, v29, v30, v31);
    v33 = v32;
    v35 = v34;
    v37 = v36;
    v39 = v38;

    v60.origin.x = a4;
    v40 = a5;
    v60.origin.y = a5;
    v41 = a6;
    v60.size.width = a6;
    v42 = a7;
    v60.size.height = a7;
    v64.origin.x = v33;
    v64.origin.y = v35;
    v64.size.width = v37;
    v64.size.height = v39;
    v61 = CGRectIntersection(v60, v64);
    height = v61.size.height;
    IsNull = CGRectIsNull(v61);
    v45 = height <= v57 || IsNull;
    if ((v45 & 1) != 0)
    {
      v62.origin.x = v33;
      v62.origin.y = v35;
      v62.size.width = v37;
      v62.size.height = v39;
      v46 = CGRectGetMinY(v62);
      v63.origin.x = v33;
      v63.origin.y = v35;
      v63.size.width = v37;
      v63.size.height = v39;
      v47 = MinY - CGRectGetMaxY(v63);
      v48 = v47 >= 0.0 && v47 < v56;
      if (v47 < 0.0 || v47 >= v56)
        v47 = v56;
      v49 = v46 - MaxY >= 0.0 && v46 - MaxY < v47 || v48;
      if (v46 - MaxY >= 0.0 && v46 - MaxY < v47)
        v47 = v46 - MaxY;
      v56 = v47;
      if (v49)
        v20 = v19;
    }
    else
    {
      v21 = v19;
      v57 = height;
    }
    ++v19;
    a7 = v42;
    a6 = v41;
    a5 = v40;
    a4 = v55;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (a2)
      *a2 = v57;
    v50 = 0.0;
    if (!a3)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (v20 < 0)
  {
    v51 = 0;
    goto LABEL_22;
  }
  if (a2)
    *a2 = 0.0;
  v21 = v20;
  v50 = v56;
  if (a3)
LABEL_20:
    *a3 = v50;
LABEL_21:
  objc_msgSend_objectAtIndexedSubscript_(v13, v22, v21, v23, v24, v25, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_22:

  return v51;
}

void sub_1BE788E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE788EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE788F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1BE788F14(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t i;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v5 = v3;
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v53, (uint64_t)v57, 16, v7);
  if (v13)
  {
    v14 = *(_QWORD *)v54;
    v15 = 0.0;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v54 != v14)
          objc_enumerationMutation(v5);
        v17 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
        objc_msgSend_encodedStrokeIdentifier(v17, v8, v9, v10, v11, v12, (_QWORD)v53);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v4, v19, (uint64_t)v18, v20, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend_doubleValue(v23, v24, v25, v26, v27, v28);
          v30 = v29;
        }
        else
        {
          v31 = (void *)objc_opt_class();
          objc_msgSend_arcLengthForStroke_(v31, v32, (uint64_t)v17, v33, v34, v35);
          v30 = v36;
          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_encodedStrokeIdentifier(v17, v43, v44, v45, v46, v47);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v4, v49, (uint64_t)v42, (uint64_t)v48, v50, v51);

        }
        v15 = v15 + v30;
      }
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v53, (uint64_t)v57, 16, v12);
    }
    while (v13);
  }
  else
  {
    v15 = 0.0;
  }

  return v15;
}

void sub_1BE7890D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 sub_1BE78913C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE789160(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE789178(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void sub_1BE78929C(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void sub_1BE78970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7897CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a2;
  v6 = a3;
  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v12, v13, (uint64_t)v5, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v23, v24, (uint64_t)v6, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v34, v35, (uint64_t)v17, (uint64_t)v28, v36, v37);

  return v38;
}

void sub_1BE78988C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7898C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7898E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7898F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  void *v11;

  v11 = *(void **)(a1 + 32);
  if (v11)
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  return objc_msgSend_addPoint_(*(void **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1BE78A774(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend_strokeIdentifier(a2, v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v5, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v4, v18, (uint64_t)v11, (uint64_t)v17, v19, v20);
  return v21;
}

uint64_t sub_1BE78AAD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  void *v11;

  v11 = *(void **)(a1 + 32);
  if (v11)
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  return objc_msgSend_addPoint_(*(void **)(a1 + 40), a2, a3, a4, a5, a6, a7 - *(double *)(a1 + 48), a8 - *(double *)(a1 + 56));
}

uint64_t sub_1BE78AB28(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v4 = a3;
  objc_msgSend_startTimestamp(a2, v5, v6, v7, v8, v9);
  v11 = v10;
  objc_msgSend_startTimestamp(v4, v12, v13, v14, v15, v16);
  v18 = v17;

  if (v11 >= v18)
    return 1;
  else
    return -1;
}

void sub_1BE78B0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE790710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,void *a55,uint64_t a56,void *a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;

  _Unwind_Resume(a1);
}

void sub_1BE791DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 512);
    if (v4)
    {
      if (v4 == 2)
      {
        if (a2 != 2)
        {
LABEL_11:
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v6 = (id)qword_1EF568E18[0];
          if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
          {
            v7 = *(_QWORD *)(a1 + 512);
            v8 = 134218240;
            v9 = v7;
            v10 = 2048;
            v11 = a2;
            _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_FAULT, "Invalid status transition from %ld to %ld.", (uint8_t *)&v8, 0x16u);
          }

        }
      }
      else if (v4 != 1 || a2 != 2)
      {
        goto LABEL_11;
      }
    }
    *(_QWORD *)(a1 + 512) = a2;
  }
}

uint64_t sub_1BE791EDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE791EE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE791EEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE791EF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE791EFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE791F04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE791F0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

id sub_1BE791F14(void *a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char hasPrincipalLines;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  CHStrokeGroupRecognitionResult *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  id v114;
  uint8_t buf[16];

  v114 = a2;
  v5 = a3;
  v112 = v5;
  if (a1)
  {
    v11 = v5;
    hasPrincipalLines = objc_msgSend_hasPrincipalLines(v5, v6, v7, v8, v9, v10);
    v13 = v11;
    v19 = v13;
    if ((hasPrincipalLines & 1) == 0)
    {
      objc_msgSend_preferredLocale(v13, v14, v15, v16, v17, v18);
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recognitionResultsByLocale(v19, v20, v21, v22, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)v113, v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      if (v30)
      {
        v111 = v30;
        objc_msgSend_inputStrokeIdentifiers(v30, v31, v32, v33, v34, v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_msgSend_count(v36, v37, v38, v39, v40, v41);

        if (!v42)
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v47 = (id)qword_1EF568E18[0];
          if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BE607000, v47, OS_LOG_TYPE_FAULT, "CHRecognitionSessionTasks can not add principal lines on a text result with no stroke identifiers.", buf, 2u);
          }

        }
        objc_msgSend_setLocale_(v111, v43, (uint64_t)v113, v44, v45, v46);
        sub_1BE7987A8(a1, v114, 0, v111);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_recognitionResultsByLocale(v19, v48, v49, v50, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = (void *)objc_msgSend_mutableCopy(v53, v54, v55, v56, v57, v58);

        v109 = v59;
        objc_msgSend_setObject_forKeyedSubscript_(v59, v60, (uint64_t)v110, (uint64_t)v113, v61, v62);
        v63 = [CHStrokeGroupRecognitionResult alloc];
        objc_msgSend_recognitionLocales(a1, v64, v65, v66, v67, v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorsByLocale(v19, v70, v71, v72, v73, v74);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_languageFitnessByLocale(v19, v75, v76, v77, v78, v79);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_mathResult(v19, v80, v81, v82, v83, v84);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputStrokeIdentifiers(v19, v85, v86, v87, v88, v89);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputDrawing(v19, v91, v92, v93, v94, v95);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputDrawingCutPoints(v19, v97, v98, v99, v100, v101);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        v104 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v63, v103, (uint64_t)v69, (uint64_t)v109, (uint64_t)v108, (uint64_t)v107, v106, v90, v96, v102);

        v19 = (void *)v104;
        v30 = v111;
      }

    }
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_1BE7921CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE7922B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1BE7922D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  void *v66;
  BOOL v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  NSObject *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id obj;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint8_t buf[4];
  id v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  _BYTE v113[128];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v81 = a4;
  if (a1)
  {
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    objc_msgSend_strokeGroups(v7, v9, v10, v11, v12, v13);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v91, (uint64_t)v113, 16, v15);
    if (v21)
    {
      v88 = 0;
      v89 = 0;
      v82 = 0;
      v83 = 0;
      v86 = 0;
      v87 = 0;
      v84 = 0;
      v85 = 0;
      v22 = *(_QWORD *)v92;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v92 != v22)
            objc_enumerationMutation(obj);
          v24 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * i);
          objc_msgSend_createdStrokeGroups(v7, v16, v17, v18, v19, v20, v81);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = objc_msgSend_containsObject_(v25, v26, (uint64_t)v24, v27, v28, v29);

          v31 = (void *)MEMORY[0x1E0CB37E8];
          v37 = objc_msgSend_uniqueIdentifier(v24, v32, v33, v34, v35, v36);
          objc_msgSend_numberWithInteger_(v31, v38, v37, v39, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v8, v43, (uint64_t)v42, v44, v45, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();

          if (v47)
          {
            objc_msgSend_mathResult(v47, v48, v49, v50, v51, v52);
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v58
              || (objc_msgSend_recognitionResultsByLocale(v47, v53, v54, v55, v56, v57),
                  v59 = (void *)objc_claimAutoreleasedReturnValue(),
                  v65 = objc_msgSend_count(v59, v60, v61, v62, v63, v64) == 0,
                  v59,
                  v58,
                  v65))
            {
              objc_msgSend_mathResult(v47, v53, v54, v55, v56, v57);
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              v67 = v66 == 0;

              if (v67)
              {
                objc_msgSend_recognitionResultsByLocale(v47, v68, v69, v70, v71, v72);
                v73 = (void *)objc_claimAutoreleasedReturnValue();
                v79 = objc_msgSend_count(v73, v74, v75, v76, v77, v78) == 0;

                if (v79)
                {
                  v82 += v30;
                  ++v83;
                }
                else
                {
                  ++v84;
                  v85 += v30;
                }
              }
              else
              {
                ++v86;
                v87 += v30;
              }
            }
            else
            {
              v88 += v30;
              ++v89;
            }
          }

        }
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v91, (uint64_t)v113, 16, v20);
      }
      while (v21);
    }
    else
    {
      v88 = 0;
      v89 = 0;
      v82 = 0;
      v83 = 0;
      v86 = 0;
      v87 = 0;
      v84 = 0;
      v85 = 0;
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v80 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138414338;
      v96 = v81;
      v97 = 2048;
      v98 = v86;
      v99 = 2048;
      v100 = v87;
      v101 = 2048;
      v102 = v84;
      v103 = 2048;
      v104 = v85;
      v105 = 2048;
      v106 = v89;
      v107 = 2048;
      v108 = v88;
      v109 = 2048;
      v110 = v83;
      v111 = 2048;
      v112 = v82;
      _os_log_impl(&dword_1BE607000, v80, OS_LOG_TYPE_DEFAULT, "%@ session result contains the following groups (newly created). Math: %lu (%lu), Text: %lu (%lu), Both: %lu (%lu), None: %lu (%lu)", buf, 0x5Cu);
    }

  }
}

void sub_1BE792654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE79272C()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (MGGetBoolAnswer())
  {
    byte_1EF568220 = 1;
LABEL_4:
    objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v0, v1, v2, v3, v4);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    byte_1EF568220 = objc_msgSend_BOOLForKey_(v10, v6, (uint64_t)CFSTR("CHRecognitionSessionLogging"), v7, v8, v9);

    return;
  }
  v5 = MGGetBoolAnswer();
  byte_1EF568220 = v5;
  if (v5)
    goto LABEL_4;
  byte_1EF568220 = 0;
}

void sub_1BE7927BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7927D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v11 = objc_msgSend_uniqueIdentifier(v3, v6, v7, v8, v9, v10);
  objc_msgSend_numberWithInteger_(v5, v12, v11, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_containsObject_(v4, v17, (uint64_t)v16, v18, v19, v20);

  return v21;
}

void sub_1BE79283C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE792850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t *sub_1BE793384(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  NSObject *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  void *v132;
  id v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t i;
  uint64_t v216;
  void *v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  NSObject *v229;
  id v230;
  NSObject *v231;
  void *v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  NSObject *v271;
  NSObject *v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  id v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  CHStrokeGroupRecognitionResult *v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  const char *v300;
  NSObject *v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  NSObject *v309;
  NSObject *v312;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  NSObject *v319;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  id v326;
  id v327;
  uint64_t v328;
  id v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  NSObject *group;
  id obj;
  void *v336;
  _QWORD block[5];
  id v338;
  id v339;
  id v340;
  uint64_t *v341;
  id v342;
  id v343;
  id v344;
  id v345;
  id v346;
  _BYTE *v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  _QWORD v353[4];
  NSObject *v354;
  id v355;
  uint64_t *v356;
  id v357;
  id v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  id *v362;
  uint64_t v363;
  uint64_t (*v364)(uint64_t, uint64_t);
  void (*v365)(uint64_t);
  id v366;
  id v367;
  id v368;
  uint8_t v369[4];
  uint64_t v370;
  __int16 v371;
  double v372;
  uint8_t v373[128];
  _BYTE buf[24];
  uint64_t (*v375)(uint64_t, uint64_t);
  void (*v376)(uint64_t);
  id v377;
  uint64_t v378;

  v378 = *MEMORY[0x1E0C80C00];
  v327 = a2;
  v326 = a3;
  if (!a1)
    goto LABEL_74;
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v7, v8, v9, v10, v11);
  v13 = v12;
  v328 = objc_msgSend_uniqueIdentifier(v327, v14, v15, v16, v17, v18);
  objc_msgSend_strokeProvider(a1, v19, v20, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_opt_respondsToSelector();

  if ((v25 & 1) != 0)
  {
    if (qword_1EF568E88 == -1)
    {
      v309 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v309, OS_LOG_TYPE_DEBUG))
        goto LABEL_7;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v309 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v309, OS_LOG_TYPE_DEBUG))
      {
LABEL_7:

        objc_msgSend_strokeIdentifiers(v327, v26, v27, v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_allObjects(v31, v32, v33, v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeProvider(a1, v38, v39, v40, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v44, (uint64_t)v37, (uint64_t)v43, v45, v46);
        v47 = objc_claimAutoreleasedReturnValue();

        objc_msgSend_strokeProvider(a1, v48, v49, v50, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v54, (uint64_t)v47, v55, v56, v57);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_cachedTranscriptionForStrokeGroup_(v53, v59, (uint64_t)v58, v60, v61, v62);
        obj = (id)objc_claimAutoreleasedReturnValue();

        if (obj)
        {
          objc_msgSend_strokeIdentifiers(v327, v63, v64, v65, v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = objc_msgSend_count(v68, v69, v70, v71, v72, v73);
          objc_msgSend_strokeIndexes(obj, v75, v76, v77, v78, v79);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v74) = v74 == objc_msgSend_count(v80, v81, v82, v83, v84, v85);

          if ((_DWORD)v74)
          {
            if (qword_1EF568E88 == -1)
            {
              v312 = (id)qword_1EF568E18[0];
              if (!os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
              {
LABEL_13:

                goto LABEL_28;
              }
            }
            else
            {
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v312 = (id)qword_1EF568E18[0];
              if (!os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
                goto LABEL_13;
            }
            objc_msgSend_strokeIdentifiers(v327, v314, v315, v316, v317, v318);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v92 = objc_msgSend_count(v86, v87, v88, v89, v90, v91);
            objc_msgSend_topTranscription(obj, v93, v94, v95, v96, v97);
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 134218243;
            *(_QWORD *)&buf[4] = v92;
            *(_WORD *)&buf[12] = 2117;
            *(_QWORD *)&buf[14] = v98;
            _os_log_impl(&dword_1BE607000, v312, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier has a cached transcription for this stroke group with %ld strokes, transcription = %{sensitive}@", buf, 0x16u);

            goto LABEL_13;
          }
          if (qword_1EF568E88 == -1)
          {
            v319 = (id)qword_1EF568E18[0];
            if (!os_log_type_enabled(v319, OS_LOG_TYPE_DEBUG))
            {
LABEL_26:

              goto LABEL_27;
            }
          }
          else
          {
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v319 = (id)qword_1EF568E18[0];
            if (!os_log_type_enabled(v319, OS_LOG_TYPE_DEBUG))
              goto LABEL_26;
          }
          objc_msgSend_strokeIdentifiers(v327, v321, v322, v323, v324, v325);
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          v118 = objc_msgSend_count(v112, v113, v114, v115, v116, v117);
          objc_msgSend_strokeIndexes(obj, v119, v120, v121, v122, v123);
          v124 = (void *)objc_claimAutoreleasedReturnValue();
          v130 = objc_msgSend_count(v124, v125, v126, v127, v128, v129);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v118;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v130;
          _os_log_impl(&dword_1BE607000, v319, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier has a cached transcription for this stroke group with %ld strokes - but the transcription is invalid - covering %ld strokes - ignoring", buf, 0x16u);

          goto LABEL_26;
        }
        if (qword_1EF568E88 == -1)
        {
          v99 = (id)qword_1EF568E18[0];
          if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
LABEL_21:

            goto LABEL_27;
          }
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v99 = (id)qword_1EF568E18[0];
          if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
            goto LABEL_21;
        }
        objc_msgSend_strokeIdentifiers(v327, v100, v101, v102, v103, v104);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        v111 = objc_msgSend_count(v105, v106, v107, v108, v109, v110);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v111;
        _os_log_impl(&dword_1BE607000, v99, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier has no cached transcription for this stroke group with %ld strokes.", buf, 0xCu);

        goto LABEL_21;
      }
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v309, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier implements a stroke cache.", buf, 2u);
    goto LABEL_7;
  }
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v47 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      goto LABEL_27;
    goto LABEL_17;
  }
  v47 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
  {
LABEL_17:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v47, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier does not implement a stroke cache.", buf, 2u);
  }
LABEL_27:
  obj = 0;
LABEL_28:

  v367 = 0;
  v368 = 0;
  objc_msgSend_recognizableDrawingForStrokeGroup_translationVector_originalDrawing_orderedStrokesIDs_rescalingFactor_replacementStrokeGroup_(v326, v131, (uint64_t)v327, (uint64_t)&v368, (uint64_t)&v367, 0, a4, 0.0, 0.0);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v329 = v368;
  v133 = v367;
  v331 = v132;
  v332 = v133;
  v139 = objc_msgSend_strokeCount(v132, v134, v135, v136, v137, v138);
  if (v139 != objc_msgSend_count(v133, v140, v141, v142, v143, v144))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v150 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v150, OS_LOG_TYPE_FAULT))
    {
      v156 = objc_msgSend_strokeCount(v331, v151, v152, v153, v154, v155);
      v162 = objc_msgSend_count(v133, v157, v158, v159, v160, v161);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v156;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v162;
      _os_log_impl(&dword_1BE607000, v150, OS_LOG_TYPE_FAULT, "The strokes count in the drawing (%ld) must match the ones in the result (%ld).", buf, 0x16u);
    }

  }
  objc_msgSend_recognitionOptions(a1, v145, v146, v147, v148, v149);
  v330 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recognitionLocales(a1, v163, v164, v165, v166, v167);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v331;
  v175 = objc_msgSend_count(v168, v170, v171, v172, v173, v174);

  objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], v176, v175, v177, v178, v179);
  v336 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], v180, v175, v181, v182, v183);
  v333 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v375 = sub_1BE796270;
  v376 = sub_1BE796280;
  v377 = 0;
  v361 = 0;
  v362 = (id *)&v361;
  v363 = 0x3032000000;
  v364 = sub_1BE796270;
  v365 = sub_1BE796280;
  v366 = 0;
  if (objc_msgSend_strokeGroupingOnly(a1, v184, v185, v186, v187, v188))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v189 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v369 = 0;
      _os_log_impl(&dword_1BE607000, v189, OS_LOG_TYPE_DEFAULT, "GroupingOnly option selected. Skipping the recognition and performing grouping only.", v369, 2u);
    }

  }
  group = dispatch_group_create();
  if (objc_msgSend_classification(v327, v190, v191, v192, v193, v194) == 3
    && (objc_msgSend_strokeGroupingOnly(a1, v195, v196, v197, v198, v199) & 1) == 0)
  {
    objc_msgSend_delegate(a1, v195, v196, v197, v198, v199);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_mathRecognizer(v232, v233, v234, v235, v236, v237);
    v238 = (void *)objc_claimAutoreleasedReturnValue();

    if (v238)
    {
      v244 = (void *)objc_msgSend_copy(v331, v239, v240, v241, v242, v243);
      objc_msgSend_set(MEMORY[0x1E0C99E20], v245, v246, v247, v248, v249);
      v250 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_calculateDocumentProvider(a1, v251, v252, v253, v254, v255);
      v256 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_declaredVariables(v256, v257, v258, v259, v260, v261);
      v262 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_unionSet_(v250, v263, (uint64_t)v262, v264, v265, v266);

      objc_msgSend_unionSet_(v250, v267, a1[1], v268, v269, v270);
      if (obj && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_storeStrong(v362 + 5, obj);
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v271 = (id)qword_1EF568E28;
        if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v369 = 134217984;
          v370 = v328;
          _os_log_impl(&dword_1BE607000, v271, OS_LOG_TYPE_DEBUG, "Math result retrieved from cache for stroke group %ld", v369, 0xCu);
        }
      }
      else
      {
        v272 = a1[77];
        v353[0] = MEMORY[0x1E0C809B0];
        v353[1] = 3221225472;
        v353[2] = sub_1BE796288;
        v353[3] = &unk_1E77F4CC8;
        v360 = v328;
        v354 = v238;
        v355 = v250;
        v356 = a1;
        v359 = &v361;
        v357 = v244;
        v358 = v330;
        dispatch_group_async(group, v272, v353);

        v271 = v354;
      }

      v205 = v238;
    }
    else
    {
      v205 = 0;
    }
    goto LABEL_63;
  }
  if ((objc_msgSend_strokeGroupingOnly(a1, v195, v196, v197, v198, v199) & 1) == 0)
  {
    v351 = 0u;
    v352 = 0u;
    v349 = 0u;
    v350 = 0u;
    objc_msgSend_recognitionLocales(a1, v200, v201, v202, v203, v204);
    v205 = (void *)objc_claimAutoreleasedReturnValue();
    v213 = objc_msgSend_countByEnumeratingWithState_objects_count_(v205, v206, (uint64_t)&v349, (uint64_t)v373, 16, v207);
    if (v213)
    {
      v214 = *(_QWORD *)v350;
      do
      {
        for (i = 0; i != v213; ++i)
        {
          if (*(_QWORD *)v350 != v214)
            objc_enumerationMutation(v205);
          v216 = *(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * i);
          objc_msgSend_delegate(a1, v208, v209, v210, v211, v212);
          v217 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_recognizerForLocale_(v217, v218, v216, v219, v220, v221);
          v222 = (void *)objc_claimAutoreleasedReturnValue();

          if (v222)
          {
            v228 = (void *)objc_msgSend_copy(v169, v223, v224, v225, v226, v227);
            v229 = a1[77];
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = sub_1BE7966C4;
            block[3] = &unk_1E77F4CF0;
            v348 = v328;
            block[4] = v216;
            v338 = v222;
            v339 = v228;
            v340 = obj;
            v341 = a1;
            v342 = v330;
            v343 = v329;
            v344 = v332;
            v345 = v336;
            v346 = v333;
            v347 = buf;
            v230 = v228;
            v231 = v229;
            v169 = v331;
            dispatch_group_async(group, v231, block);

          }
        }
        v213 = objc_msgSend_countByEnumeratingWithState_objects_count_(v205, v208, (uint64_t)&v349, (uint64_t)v373, 16, v212);
      }
      while (v213);
    }
LABEL_63:

  }
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  if (objc_msgSend_saveInputDrawings(a1, v273, v274, v275, v276, v277))
    v283 = v169;
  else
    v283 = 0;
  if (objc_msgSend_count(v336, v278, v279, v280, v281, v282))
  {
    objc_msgSend_recognitionLocales(a1, v284, v285, v286, v287, v288);
    v289 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_updateMultiLocaleResultDictionary_locales_(CHMultiLocaleResultProcessor, v290, (uint64_t)v336, (uint64_t)v289, v291, v292);

  }
  v293 = [CHStrokeGroupRecognitionResult alloc];
  objc_msgSend_recognitionLocales(a1, v294, v295, v296, v297, v298);
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  a1 = (uint64_t *)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v293, v300, (uint64_t)v299, (uint64_t)v336, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), (uint64_t)v333, v362[5], v332, v283, 0);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v301 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v301, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v302, v303, v304, v305, v306);
    *(_DWORD *)v369 = 134218240;
    v370 = v328;
    v371 = 2048;
    v372 = v307 - v13;
    _os_log_impl(&dword_1BE607000, v301, OS_LOG_TYPE_DEBUG, "Recognizer finished for stroke group %ld, duration: %0.3fs", v369, 0x16u);
  }

  _Block_object_dispose(&v361, 8);
  _Block_object_dispose(buf, 8);

LABEL_74:
  return a1;
}

void sub_1BE79408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

id sub_1BE794308(uint64_t *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int isTextTranscriptionVariableAssignment;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  int isTextTranscriptionUnitConversion_locales;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int isTextTranscriptionInMathAlphabet;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  int v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  double v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  void *v237;
  void *v238;
  void *v239;
  NSObject *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  id v282;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  const char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  void *v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  double v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  const char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  const char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int isEqualToString;
  const char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  void *v413;
  const char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  const char *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  const char *v426;
  uint64_t v427;
  NSObject *v428;
  CHStrokeGroupRecognitionResult *v429;
  const char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  const char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void *v441;
  const char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  const char *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  const char *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  const char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  const char *v472;
  void *v473;
  NSObject *v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  void *v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  const char *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  const char *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  void *v504;
  const char *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  const char *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  void *v521;
  const char *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  void *v533;
  const char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  void *v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  const char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  const char *v550;
  uint64_t v551;
  const char *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t i;
  uint64_t v560;
  uint64_t v561;
  const char *v562;
  void *v563;
  char v564;
  void *v565;
  const char *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  void *v571;
  const char *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  const char *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  const char *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  double v587;
  double v588;
  const char *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  const char *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  const char *v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  const char *v613;
  uint64_t v614;
  void *v615;
  const char *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  void *v620;
  char v621;
  const char *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  void *v627;
  const char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  double v632;
  _BOOL4 v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  void *v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  void *v645;
  const char *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  const char *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  void *v656;
  const char *v657;
  uint64_t v658;
  uint64_t v659;
  const char *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  void *v665;
  void *v666;
  const char *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  const char *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  const char *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  const char *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  const char *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  void *v698;
  const char *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  const char *v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  const char *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  void *v713;
  const char *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int v718;
  const char *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  void *v724;
  const char *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  id v729;
  const char *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  const char *v735;
  size_t v736;
  size_t v737;
  _BYTE *v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  const char *v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  const char *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  void *v751;
  const char *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  id v756;
  void *v757;
  const char *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  void *v763;
  const char *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int isTrivialTextTranscriptionAvailableForLatex;
  const char *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  void *v774;
  const char *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  const char *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  void *v785;
  const char *v786;
  uint64_t v787;
  uint64_t v788;
  const char *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  const char *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  const char *v800;
  uint64_t v801;
  uint64_t v802;
  const char *v803;
  id v804;
  id v805;
  const char *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  const char *v810;
  uint64_t v811;
  uint64_t v812;
  const char *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  const char *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  const char *v825;
  uint64_t v826;
  uint64_t v827;
  const char *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  void *v833;
  const char *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  void *v839;
  const char *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  void *v845;
  const char *v846;
  uint64_t v847;
  void *v848;
  CHStrokeGroupRecognitionResult *v849;
  const char *v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  const char *v854;
  uint64_t v855;
  void *v856;
  const char *v857;
  uint64_t v858;
  void *v859;
  const char *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  void *v865;
  const char *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  void *v871;
  const char *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  void *v877;
  const char *v878;
  void *v879;
  NSObject *v880;
  const char *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  void *v886;
  const char *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  void *v892;
  const char *v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  void *v897;
  const char *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  const char *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  void *v910;
  const char *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  const char *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  NSObject *v924;
  const char *v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  void *v930;
  const char *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  const char *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  void *v943;
  const char *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  void *v949;
  const char *v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  void *v954;
  const char *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  const char *v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  void *v968;
  CHTokenizedMathResult *v969;
  const char *v970;
  uint64_t v971;
  uint64_t v972;
  void *v973;
  const char *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  const char *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  void *v983;
  const char *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  void *v989;
  const char *v990;
  uint64_t v991;
  CHStrokeGroupRecognitionResult *v992;
  const char *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  const char *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  void *v1004;
  const char *v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  void *v1010;
  const char *v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  void *v1016;
  const char *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  void *v1022;
  const char *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  void *v1028;
  const char *v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  void *v1034;
  CHStrokeGroupRecognitionResult *v1035;
  void *v1036;
  const char *v1037;
  NSObject *v1038;
  const char *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  void *v1044;
  const char *v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  void *v1050;
  const char *v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  void *v1055;
  const char *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  const char *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  void *v1068;
  const char *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  const char *v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  void *v1082;
  _QWORD *v1083;
  void *v1084;
  int v1085;
  void *v1086;
  int v1087;
  void *v1088;
  uint64_t v1089;
  void *v1090;
  void *v1091;
  void *v1092;
  uint64_t v1093;
  void *v1094;
  id v1096;
  void *v1097;
  void *v1098;
  id v1099;
  id v1100;
  id v1101;
  id v1102;
  _QWORD v1103[2];
  id v1104;
  _QWORD v1105[4];
  id v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  void *v1115;
  void *v1116;
  void *v1117;
  void *v1118;
  void *v1119;
  void *v1120;
  _BYTE v1121[128];
  uint8_t v1122[128];
  _BYTE buf[24];
  uint64_t v1124;
  uint64_t v1125;

  v1125 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v1101 = a3;
  v1100 = a4;
  v1098 = v10;
  v1099 = a5;
  if (!a1)
  {
    v1102 = 0;
    goto LABEL_32;
  }
  v1102 = v10;
  objc_msgSend_mathResult(v1102, v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16)
  {
    objc_msgSend_preferredLocale(v1102, v17, v18, v19, v20, v21);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v38)
      goto LABEL_4;
    objc_msgSend_recognitionResultsByLocale(v1102, v22, v23, v24, v25, v26);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_preferredLocale(v1102, v40, v41, v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v39, v46, (uint64_t)v45, v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topTranscription(v50, v51, v52, v53, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();

    v1093 = (uint64_t)v56;
    isTextTranscriptionVariableAssignment = objc_msgSend_isTextTranscriptionVariableAssignment_(CHTokenizedTextResult, v57, (uint64_t)v56, v58, v59, v60);
    if ((objc_msgSend_hasSuffix_(v56, v62, (uint64_t)CFSTR("="), v63, v64, v65) & 1) == 0
      && (sub_1BE7981AC((uint64_t)a1, v56) | isTextTranscriptionVariableAssignment) != 1)
    {
      v237 = v56;
      goto LABEL_31;
    }
    objc_msgSend_strategyIdentifier(v1101, v66, v67, v68, v69, v70);
    v1089 = objc_claimAutoreleasedReturnValue();
    v76 = objc_msgSend_classification(v1101, v71, v72, v73, v74, v75);
    objc_msgSend_updateStrategyIdentifier_classification_(v1101, v77, (uint64_t)CFSTR("CHMathStrokeGroupingStrategy"), 3, v78, v79);
    sub_1BE793384(a1, v1101, v1100, (uint64_t)a6);
    v1091 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_updateStrategyIdentifier_classification_(v1101, v80, v1089, v76, v81, v82);
    objc_msgSend_orderedLocales(v1102, v83, v84, v85, v86, v87);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    isTextTranscriptionUnitConversion_locales = objc_msgSend_isTextTranscriptionUnitConversion_locales_(CHTokenizedTextResult, v89, (uint64_t)v56, (uint64_t)v88, v90, v91);

    objc_msgSend_mathResult(v1091, v93, v94, v95, v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topTranscription(v98, v99, v100, v101, v102, v103);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_orderedLocales(v1102, v105, v106, v107, v108, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    v1087 = objc_msgSend_isTextTranscriptionUnitConversion_locales_(CHTokenizedTextResult, v111, (uint64_t)v104, (uint64_t)v110, v112, v113);
    v114 = isTextTranscriptionUnitConversion_locales;

    isTextTranscriptionInMathAlphabet = objc_msgSend_isTextTranscriptionInMathAlphabet_(CHTokenizedMathResult, v115, v1093, v116, v117, v118);
    objc_msgSend_mathResult(v1091, v120, v121, v122, v123, v124);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topTranscription(v125, v126, v127, v128, v129, v130);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v132, (uint64_t)v131, v133, v134, v135);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v137 = isTextTranscriptionVariableAssignment;
    v142 = objc_msgSend_isTextTranscriptionVariableAssignment_(CHTokenizedTextResult, v138, (uint64_t)v136, v139, v140, v141);

    objc_msgSend_mathResult(v1091, v143, v144, v145, v146, v147);
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_hasLowConfidence(v148, v149, v150, v151, v152, v153) & 1) != 0)
    {
      v159 = 0;

      if ((v114 & v1087 & isTextTranscriptionInMathAlphabet & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      objc_msgSend_mathResult(v1091, v154, v155, v156, v157, v158);
      v206 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_score(v206, v207, v208, v209, v210, v211);
      v213 = v212;
      objc_msgSend_recognitionResultsByLocale(v1102, v214, v215, v216, v217, v218);
      v219 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_preferredLocale(v1102, v220, v221, v222, v223, v224);
      v225 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v219, v226, (uint64_t)v225, v227, v228, v229);
      v230 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_score(v230, v231, v232, v233, v234, v235);
      v159 = v213 > v236 * 0.7;

      if ((v114 & v1087 & isTextTranscriptionInMathAlphabet & 1) != 0)
        goto LABEL_24;
    }
    if (!v159 && (isTextTranscriptionInMathAlphabet & v137 & v142) == 0)
    {
      v237 = (void *)v1093;
      v238 = (void *)v1089;
      if (a6)
        *a6 = 0;
      v239 = v1091;
      goto LABEL_29;
    }
LABEL_24:
    v238 = (void *)v1089;
    v237 = (void *)v1093;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v239 = v1091;
    v240 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_recognitionResultsByLocale(v1102, v241, v242, v243, v244, v245);
      v246 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_preferredLocale(v1102, v247, v248, v249, v250, v251);
      v252 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v246, v253, (uint64_t)v252, v254, v255, v256);
      v257 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_score(v257, v258, v259, v260, v261, v262);
      v264 = v263;
      objc_msgSend_mathResult(v1091, v265, v266, v267, v268, v269);
      v270 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_score(v270, v271, v272, v273, v274, v275);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v264;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v281;
      *(_WORD *)&buf[22] = 2048;
      v1124 = objc_msgSend_uniqueIdentifier(v1101, v276, v277, v278, v279, v280);
      _os_log_impl(&dword_1BE607000, v240, OS_LOG_TYPE_DEBUG, "Swapped text result (score=%0.3f) for math result (score=%0.3f) in group %ld.", buf, 0x20u);

    }
    v282 = v1091;

    v1102 = v282;
LABEL_29:

LABEL_31:
    goto LABEL_32;
  }

LABEL_4:
  if ((objc_msgSend_disableMathTextSwapping(a1, v22, v23, v24, v25, v26) & 1) == 0)
  {
    objc_msgSend_preferredLocale(v1102, v27, v28, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (v32)
    {

      goto LABEL_32;
    }
    objc_msgSend_mathResult(v1102, v33, v34, v35, v36, v37);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    if (v165)
    {
      objc_msgSend_recognitionLocales(a1, v160, v161, v162, v163, v164);
      v166 = (void *)objc_claimAutoreleasedReturnValue();
      v172 = objc_msgSend_count(v166, v167, v168, v169, v170, v171);

      if (v172)
      {
        v175 = objc_msgSend_fallbackTextScriptClassificationForMathGroup_strokeClassificationResult_fromTopNCandidate_(CHStrokeClassifier, v173, (uint64_t)v1101, (uint64_t)v1099, 2, v174);
        objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v176, v175, v177, v178, v179);
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_localeForScriptClass_(CHRecognizerConfiguration, v181, (uint64_t)v180, v182, v183, v184);
        v185 = (void *)objc_claimAutoreleasedReturnValue();

        if (v1099)
        {
          objc_msgSend_recognitionLocales(a1, v186, v187, v188, v189, v190);
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_containsObject_(v191, v192, (uint64_t)v185, v193, v194, v195))
          {
            objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v196, v175, v197, v198, v199);
            v200 = (void *)objc_claimAutoreleasedReturnValue();
            v205 = objc_msgSend_containsObject_(&unk_1E7827EF0, v201, (uint64_t)v200, v202, v203, v204) ^ 1;

          }
          else
          {
            v205 = 0;
          }

        }
        else
        {
          v205 = 0;
        }
        objc_msgSend_mathResult(v1102, v186, v187, v188, v189, v190);
        v284 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_topTranscription(v284, v285, v286, v287, v288, v289);
        v290 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_containsString_(v290, v291, (uint64_t)CFSTR("="), v292, v293, v294) & 1) != 0)
        {

          if (!v205)
            goto LABEL_114;
        }
        else
        {
          objc_msgSend_mathResult(v1102, v295, v296, v297, v298, v299);
          v305 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_topTranscription(v305, v306, v307, v308, v309, v310);
          v311 = (void *)objc_claimAutoreleasedReturnValue();
          v316 = objc_msgSend_containsString_(v311, v312, (uint64_t)CFSTR("\\hline"), v313, v314, v315) ^ 1 | v205;

          if ((v316 & 1) == 0)
            goto LABEL_114;
        }
        objc_msgSend_mathResult(v1102, v300, v301, v302, v303, v304);
        v317 = (void *)objc_claimAutoreleasedReturnValue();
        v1090 = v185;
        if ((objc_msgSend_hasLowConfidence(v317, v318, v319, v320, v321, v322) & 1) != 0)
        {
LABEL_43:

          goto LABEL_44;
        }
        objc_msgSend_mathResult(v1102, v323, v324, v325, v326, v327);
        v328 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_score(v328, v329, v330, v331, v332, v333);
        if (v339 < 0.6)
        {

          goto LABEL_43;
        }
        objc_msgSend_mathResult(v1102, v334, v335, v336, v337, v338);
        v565 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_topTranscription(v565, v566, v567, v568, v569, v570);
        v571 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isTrivialTextTranscriptionAvailableForLatex_(CHTokenizedMathResult, v572, (uint64_t)v571, v573, v574, v575))
        {
          objc_msgSend_mathResult(v1102, v576, v577, v578, v579, v580);
          v581 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_score(v581, v582, v583, v584, v585, v586);
          v588 = v587;

          if (v588 < 0.8)
          {
LABEL_44:
            objc_msgSend_strategyIdentifier(v1101, v340, v341, v342, v343, v344);
            v1092 = (void *)objc_claimAutoreleasedReturnValue();
            v350 = objc_msgSend_classification(v1101, v345, v346, v347, v348, v349);
            objc_msgSend_updateStrategyIdentifier_classification_(v1101, v351, (uint64_t)CFSTR("CHBottomUpStrokeGroupingStrategy_left-to-right"), 1, v352, v353);
            sub_1BE793384(a1, v1101, v1100, (uint64_t)a6);
            v1094 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_updateStrategyIdentifier_classification_(v1101, v354, (uint64_t)v1092, v350, v355, v356);
            objc_msgSend_preferredLocale(v1094, v357, v358, v359, v360, v361);
            v362 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v362)
            {
              if (a6)
                *a6 = 0;
              CHOSLogForCategory(2);
              v428 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v428, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend_mathResult(v1102, v516, v517, v518, v519, v520);
                v521 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_score(v521, v522, v523, v524, v525, v526);
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = v532;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = objc_msgSend_uniqueIdentifier(v1101, v527, v528, v529, v530, v531);
                _os_log_impl(&dword_1BE607000, v428, OS_LOG_TYPE_ERROR, "Text recognition failed when trying to swap math result (score=%0.3f) in group %ld.", buf, 0x16u);

              }
              goto LABEL_113;
            }
            objc_msgSend_recognitionResultsByLocale(v1094, v363, v364, v365, v366, v367);
            v368 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_preferredLocale(v1094, v369, v370, v371, v372, v373);
            v374 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v368, v375, (uint64_t)v374, v376, v377, v378);
            v379 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_topTranscription(v379, v380, v381, v382, v383, v384);
            v385 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_mathResult(v1102, v386, v387, v388, v389, v390);
            v391 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_topTranscription(v391, v392, v393, v394, v395, v396);
            v397 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v398, (uint64_t)v397, v399, v400, v401);
            v402 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v385, v403, (uint64_t)v402, v404, v405, v406);

            if (isEqualToString)
            {
              objc_msgSend_mathResult(v1102, v408, v409, v410, v411, v412);
              v413 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_inputStrokeIdentifiers(v1102, v414, v415, v416, v417, v418);
              v419 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_inputStrokeIdentifiers(v1094, v420, v421, v422, v423, v424);
              v425 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_mathResultWithReindexedTokens_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHTokenizedMathResult, v426, (uint64_t)v413, (uint64_t)v419, (uint64_t)v425, v427);
              v428 = objc_claimAutoreleasedReturnValue();

              v429 = [CHStrokeGroupRecognitionResult alloc];
              objc_msgSend_orderedLocales(v1094, v430, v431, v432, v433, v434);
              v435 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_recognitionResultsByLocale(v1094, v436, v437, v438, v439, v440);
              v441 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_errorsByLocale(v1094, v442, v443, v444, v445, v446);
              v447 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_languageFitnessByLocale(v1094, v448, v449, v450, v451, v452);
              v453 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_inputStrokeIdentifiers(v1094, v454, v455, v456, v457, v458);
              v459 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_inputDrawing(v1094, v460, v461, v462, v463, v464);
              v465 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_inputDrawingCutPoints(v1094, v466, v467, v468, v469, v470);
              v471 = (void *)objc_claimAutoreleasedReturnValue();
              v473 = (void *)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v429, v472, (uint64_t)v435, (uint64_t)v441, (uint64_t)v447, (uint64_t)v453, v428, v459, v465, v471);

              CHOSLogForCategory(2);
              v474 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v474, OS_LOG_TYPE_DEBUG))
              {
                objc_msgSend_recognitionResultsByLocale(v473, v475, v476, v477, v478, v479);
                v480 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_preferredLocale(v473, v481, v482, v483, v484, v485);
                v486 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectForKeyedSubscript_(v480, v487, (uint64_t)v486, v488, v489, v490);
                v491 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_score(v491, v492, v493, v494, v495, v496);
                v498 = v497;
                objc_msgSend_mathResult(v1102, v499, v500, v501, v502, v503);
                v504 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_score(v504, v505, v506, v507, v508, v509);
                *(_DWORD *)buf = 134218496;
                *(_QWORD *)&buf[4] = v498;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v515;
                *(_WORD *)&buf[22] = 2048;
                v1124 = objc_msgSend_uniqueIdentifier(v1101, v510, v511, v512, v513, v514);
                _os_log_impl(&dword_1BE607000, v474, OS_LOG_TYPE_DEBUG, "Added complementary text result (score=%0.3f) running text recognition as alternative to math result (score=%0.3f) in group %ld.", buf, 0x20u);

              }
              v1102 = v473;
              goto LABEL_113;
            }
            objc_msgSend_recognitionResultsByLocale(v1094, v408, v409, v410, v411, v412);
            v533 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_preferredLocale(v1094, v534, v535, v536, v537, v538);
            v539 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v533, v540, (uint64_t)v539, v541, v542, v543);
            v428 = objc_claimAutoreleasedReturnValue();

            v1113 = 0u;
            v1114 = 0u;
            v1111 = 0u;
            v1112 = 0u;
            objc_msgSend_transcriptionPaths(v428, v544, v545, v546, v547, v548);
            v549 = (void *)objc_claimAutoreleasedReturnValue();
            v557 = objc_msgSend_countByEnumeratingWithState_objects_count_(v549, v550, (uint64_t)&v1111, (uint64_t)v1122, 16, v551);
            if (v557)
            {
              v558 = *(_QWORD *)v1112;
              while (2)
              {
                for (i = 0; i != v557; ++i)
                {
                  if (*(_QWORD *)v1112 != v558)
                    objc_enumerationMutation(v549);
                  v560 = *(_QWORD *)(*((_QWORD *)&v1111 + 1) + 8 * i);
                  v561 = objc_msgSend_tokenColumnCount(v428, v552, v553, v554, v555, v556);
                  objc_msgSend_transcriptionWithPath_columnRange_filterLowConfidence_(v428, v562, v560, 0, v561, 0);
                  v563 = (void *)objc_claimAutoreleasedReturnValue();
                  v564 = sub_1BE7981AC((uint64_t)a1, v563);

                  if ((v564 & 1) != 0)
                  {
                    v1085 = 1;
                    goto LABEL_66;
                  }
                }
                v557 = objc_msgSend_countByEnumeratingWithState_objects_count_(v549, v552, (uint64_t)&v1111, (uint64_t)v1122, 16, v556);
                if (v557)
                  continue;
                break;
              }
            }
            v1085 = 0;
LABEL_66:

            objc_msgSend_mathResult(v1102, v589, v590, v591, v592, v593);
            v594 = (void *)objc_claimAutoreleasedReturnValue();
            v1109 = 0u;
            v1110 = 0u;
            v1107 = 0u;
            v1108 = 0u;
            objc_msgSend_transcriptionPaths(v594, v595, v596, v597, v598, v599);
            v600 = (void *)objc_claimAutoreleasedReturnValue();
            v608 = objc_msgSend_countByEnumeratingWithState_objects_count_(v600, v601, (uint64_t)&v1107, (uint64_t)v1121, 16, v602);
            if (!v608)
              goto LABEL_74;
            v609 = *(_QWORD *)v1108;
LABEL_68:
            v610 = 0;
            while (1)
            {
              if (*(_QWORD *)v1108 != v609)
                objc_enumerationMutation(v600);
              v611 = *(_QWORD *)(*((_QWORD *)&v1107 + 1) + 8 * v610);
              v612 = objc_msgSend_tokenColumnCount(v594, v603, v604, v605, v606, v607);
              objc_msgSend_transcriptionWithPath_columnRange_(v594, v613, v611, 0, v612, v614);
              v615 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v616, (uint64_t)v615, v617, v618, v619);
              v620 = (void *)objc_claimAutoreleasedReturnValue();
              v621 = sub_1BE7981AC((uint64_t)a1, v620);

              if ((v621 & 1) != 0)
                break;
              if (v608 == ++v610)
              {
                v608 = objc_msgSend_countByEnumeratingWithState_objects_count_(v600, v603, (uint64_t)&v1107, (uint64_t)v1121, 16, v607);
                if (!v608)
                {
LABEL_74:

                  goto LABEL_76;
                }
                goto LABEL_68;
              }
            }

            if ((v1085 & 1) == 0)
            {
LABEL_76:
              objc_msgSend_preferredLocale(v1094, v622, v623, v624, v625, v626);
              v627 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_languageFitnessForLocale_(v1094, v628, (uint64_t)v627, v629, v630, v631);
              v633 = v632 > 0.4;

              if (v633)
              {
                objc_msgSend_recognitionResultsByLocale(v1094, v634, v635, v636, v637, v638);
                v639 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_preferredLocale(v1094, v640, v641, v642, v643, v644);
                v645 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectForKeyedSubscript_(v639, v646, (uint64_t)v645, v647, v648, v649);
                v650 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_topTranscription(v650, v651, v652, v653, v654, v655);
                v656 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v656, v657, (uint64_t)CFSTR(" "), (uint64_t)&stru_1E77F6F28, v658, v659);
                v1088 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_array(MEMORY[0x1E0C99DE8], v660, v661, v662, v663, v664);
                v665 = (void *)objc_claimAutoreleasedReturnValue();
                v1105[0] = MEMORY[0x1E0C809B0];
                v1105[1] = 3221225472;
                v1105[2] = sub_1BE798580;
                v1105[3] = &unk_1E77F1EC8;
                v1096 = v665;
                v1106 = v1096;
                v666 = v1088;
                objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v594, v667, (uint64_t)v1105, v668, v669, v670);
                v676 = objc_msgSend_countCharacters(v1088, v671, v672, v673, v674, v675);
                if (v676 == objc_msgSend_count(v1096, v677, v678, v679, v680, v681))
                  v687 = v1085;
                else
                  v687 = 0;
                if (v687 == 1)
                {
                  objc_msgSend_array(MEMORY[0x1E0C99DE8], v682, v683, v684, v685, v686);
                  v1086 = (void *)objc_claimAutoreleasedReturnValue();
                  v693 = 0;
                  v1083 = a1 + 2;
                  while (1)
                  {
                    if (v693 >= objc_msgSend_count(v1096, v688, v689, v690, v691, v692))
                    {
                      v969 = [CHTokenizedMathResult alloc];
                      v1120 = v1086;
                      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v970, (uint64_t)&v1120, 1, v971, v972);
                      v973 = (void *)objc_claimAutoreleasedReturnValue();
                      v1084 = (void *)objc_msgSend_initWithBestPathTokens_(v969, v974, (uint64_t)v973, v975, v976, v977);

                      objc_msgSend_inputStrokeIdentifiers(v1102, v978, v979, v980, v981, v982);
                      v983 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_inputStrokeIdentifiers(v1094, v984, v985, v986, v987, v988);
                      v989 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_mathResultWithReindexedTokens_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHTokenizedMathResult, v990, (uint64_t)v1084, (uint64_t)v983, (uint64_t)v989, v991);
                      v1082 = (void *)objc_claimAutoreleasedReturnValue();

                      v992 = [CHStrokeGroupRecognitionResult alloc];
                      objc_msgSend_orderedLocales(v1094, v993, v994, v995, v996, v997);
                      v998 = objc_claimAutoreleasedReturnValue();
                      objc_msgSend_recognitionResultsByLocale(v1094, v999, v1000, v1001, v1002, v1003);
                      v1004 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_errorsByLocale(v1094, v1005, v1006, v1007, v1008, v1009);
                      v1010 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_languageFitnessByLocale(v1094, v1011, v1012, v1013, v1014, v1015);
                      v1016 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_inputStrokeIdentifiers(v1094, v1017, v1018, v1019, v1020, v1021);
                      v1022 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_inputDrawing(v1094, v1023, v1024, v1025, v1026, v1027);
                      v1028 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_inputDrawingCutPoints(v1094, v1029, v1030, v1031, v1032, v1033);
                      v1034 = (void *)objc_claimAutoreleasedReturnValue();
                      v1035 = v992;
                      v1036 = (void *)v998;
                      v756 = (id)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v1035, v1037, v998, (uint64_t)v1004, (uint64_t)v1010, (uint64_t)v1016, v1082, v1022, v1028, v1034);

                      CHOSLogForCategory(2);
                      v1038 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v1038, OS_LOG_TYPE_DEBUG))
                      {
                        objc_msgSend_recognitionResultsByLocale(v756, v1039, v1040, v1041, v1042, v1043);
                        v1044 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_preferredLocale(v756, v1045, v1046, v1047, v1048, v1049);
                        v1050 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_objectForKeyedSubscript_(v1044, v1051, (uint64_t)v1050, v1052, v1053, v1054);
                        v1055 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_score(v1055, v1056, v1057, v1058, v1059, v1060);
                        v1062 = v1061;
                        objc_msgSend_mathResult(v1102, v1063, v1064, v1065, v1066, v1067);
                        v1068 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_score(v1068, v1069, v1070, v1071, v1072, v1073);
                        v1075 = v1074;
                        v1081 = objc_msgSend_uniqueIdentifier(v1101, v1076, v1077, v1078, v1079, v1080);
                        *(_DWORD *)buf = 134218496;
                        *(_QWORD *)&buf[4] = v1062;
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v1075;
                        *(_WORD *)&buf[22] = 2048;
                        v1124 = v1081;
                        _os_log_impl(&dword_1BE607000, v1038, OS_LOG_TYPE_DEBUG, "Added complementary text result (score=%0.3f) running text recognition and updated the math result to match text transcription (score=%0.3f) in group %ld.", buf, 0x20u);

                      }
                      v968 = v1086;
                      goto LABEL_111;
                    }
                    objc_msgSend_objectAtIndexedSubscript_(v1096, v694, v693, v695, v696, v697);
                    v698 = (void *)objc_claimAutoreleasedReturnValue();
                    v703 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v666, v699, v693, v700, v701, v702);
                    objc_msgSend_substringWithRange_(v666, v704, v703, (uint64_t)v704, v705, v706);
                    v707 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_string(v698, v708, v709, v710, v711, v712);
                    v713 = (void *)objc_claimAutoreleasedReturnValue();
                    v718 = objc_msgSend_isEqualToString_(v713, v714, (uint64_t)v707, v715, v716, v717);

                    if (v718)
                    {
                      objc_msgSend_addObject_(v1086, v719, (uint64_t)v698, v721, v722, v723);
                      goto LABEL_96;
                    }
                    v724 = (void *)objc_msgSend_mutableCopy(v698, v719, v720, v721, v722, v723);
                    objc_msgSend_setString_(v724, v725, (uint64_t)v707, v726, v727, v728);
                    v729 = objc_retainAutorelease(v707);
                    v735 = (const char *)objc_msgSend_UTF8String(v729, v730, v731, v732, v733, v734);
                    v736 = strlen(v735);
                    if (v736 >= 0x7FFFFFFFFFFFFFF8)
                      sub_1BE61F1B4();
                    v737 = v736;
                    if (v736 >= 0x17)
                    {
                      v739 = (v736 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v736 | 7) != 0x17)
                        v739 = v736 | 7;
                      v740 = v739 + 1;
                      v738 = operator new(v739 + 1);
                      *(_QWORD *)&buf[8] = v737;
                      *(_QWORD *)&buf[16] = v740 | 0x8000000000000000;
                      *(_QWORD *)buf = v738;
                    }
                    else
                    {
                      buf[23] = v736;
                      v738 = buf;
                      if (!v736)
                        goto LABEL_93;
                    }
                    memmove(v738, v735, v737);
LABEL_93:
                    v738[v737] = 0;
                    v741 = sub_1BE61651C(v1083, buf);
                    objc_msgSend_setProperties_(v724, v742, v741, v743, v744, v745);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    v751 = (void *)objc_msgSend_copy(v724, v746, v747, v748, v749, v750);
                    objc_msgSend_addObject_(v1086, v752, (uint64_t)v751, v753, v754, v755);

LABEL_96:
                    ++v693;
                    v666 = v1088;
                  }
                }
                CHOSLogForCategory(2);
                v924 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v924, OS_LOG_TYPE_DEBUG))
                {
                  objc_msgSend_mathResult(v1102, v925, v926, v927, v928, v929);
                  v930 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_score(v930, v931, v932, v933, v934, v935);
                  v937 = v936;
                  objc_msgSend_recognitionResultsByLocale(v1094, v938, v939, v940, v941, v942);
                  v943 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_preferredLocale(v1094, v944, v945, v946, v947, v948);
                  v949 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_objectForKeyedSubscript_(v943, v950, (uint64_t)v949, v951, v952, v953);
                  v954 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_score(v954, v955, v956, v957, v958, v959);
                  v961 = v960;
                  v967 = objc_msgSend_uniqueIdentifier(v1101, v962, v963, v964, v965, v966);
                  *(_DWORD *)buf = 134218496;
                  *(_QWORD *)&buf[4] = v937;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v961;
                  *(_WORD *)&buf[22] = 2048;
                  v1124 = v967;
                  _os_log_impl(&dword_1BE607000, v924, OS_LOG_TYPE_DEBUG, "Swapped math result (score=%0.3f) for text result (score=%0.3f) in group %ld.", buf, 0x20u);

                }
                v756 = v1094;
                v968 = v1102;
LABEL_111:

LABEL_112:
                v1102 = v756;
LABEL_113:

                v185 = v1090;
                goto LABEL_114;
              }
            }
            if (a6)
              *a6 = 0;
            v756 = v1102;
            goto LABEL_112;
          }
        }
        else
        {

        }
        objc_msgSend_mathResult(v1102, v340, v341, v342, v343, v344);
        v757 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_topTranscription(v757, v758, v759, v760, v761, v762);
        v763 = (void *)objc_claimAutoreleasedReturnValue();
        isTrivialTextTranscriptionAvailableForLatex = objc_msgSend_isTrivialTextTranscriptionAvailableForLatex_(CHTokenizedMathResult, v764, (uint64_t)v763, v765, v766, v767);

        if (isTrivialTextTranscriptionAvailableForLatex)
        {
          objc_msgSend_recognitionLocales(a1, v769, v770, v771, v772, v773);
          v774 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_firstObject(v774, v775, v776, v777, v778, v779);
          v1092 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_mathResult(v1102, v780, v781, v782, v783, v784);
          v785 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_tokenizedTextResultFromTokenizedMathResult_locale_(CHMathPostProcessingManager, v786, (uint64_t)v785, (uint64_t)v1092, v787, v788);
          v1094 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_strategyIdentifier(v1101, v789, v790, v791, v792, v793);
          v428 = objc_claimAutoreleasedReturnValue();
          v799 = objc_msgSend_classification(v1101, v794, v795, v796, v797, v798);
          objc_msgSend_updateStrategyIdentifier_classification_(v1101, v800, (uint64_t)CFSTR("CHBottomUpStrokeGroupingStrategy_left-to-right"), 1, v801, v802);
          v1104 = 0;
          v804 = (id)objc_msgSend_recognizableDrawingForStrokeGroup_translationVector_originalDrawing_orderedStrokesIDs_rescalingFactor_replacementStrokeGroup_(v1100, v803, (uint64_t)v1101, 0, (uint64_t)&v1104, 0, a6, 0.0, 0.0);
          v805 = v1104;
          objc_msgSend_setInputStrokeIdentifiers_(v1094, v806, (uint64_t)v805, v807, v808, v809);
          objc_msgSend_updateStrategyIdentifier_classification_(v1101, v810, (uint64_t)v428, v799, v811, v812);
          objc_msgSend_score(v1094, v813, v814, v815, v816, v817);
          v1103[0] = v818;
          objc_msgSend_score(v1094, v819, v820, v821, v822, v823);
          v1103[1] = v824;
          objc_msgSend_value_withObjCType_(MEMORY[0x1E0CB3B18], v825, (uint64_t)v1103, (uint64_t)"{?=dd}", v826, v827);
          v1097 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_mathResult(v1102, v828, v829, v830, v831, v832);
          v833 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputStrokeIdentifiers(v1102, v834, v835, v836, v837, v838);
          v839 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputStrokeIdentifiers(v1094, v840, v841, v842, v843, v844);
          v845 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_mathResultWithReindexedTokens_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHTokenizedMathResult, v846, (uint64_t)v833, (uint64_t)v839, (uint64_t)v845, v847);
          v848 = (void *)objc_claimAutoreleasedReturnValue();

          v849 = [CHStrokeGroupRecognitionResult alloc];
          v1119 = v1092;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v850, (uint64_t)&v1119, 1, v851, v852);
          v853 = (void *)objc_claimAutoreleasedReturnValue();
          v1117 = v1092;
          v1118 = v1094;
          objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v854, (uint64_t)&v1118, (uint64_t)&v1117, 1, v855);
          v856 = (void *)objc_claimAutoreleasedReturnValue();
          v1115 = v1092;
          v1116 = v1097;
          objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v857, (uint64_t)&v1116, (uint64_t)&v1115, 1, v858);
          v859 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputStrokeIdentifiers(v1094, v860, v861, v862, v863, v864);
          v865 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputDrawing(v1102, v866, v867, v868, v869, v870);
          v871 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_inputDrawingCutPoints(v1102, v872, v873, v874, v875, v876);
          v877 = (void *)objc_claimAutoreleasedReturnValue();
          v879 = (void *)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v849, v878, (uint64_t)v853, (uint64_t)v856, 0, (uint64_t)v859, v848, v865, v871, v877);

          CHOSLogForCategory(2);
          v880 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v880, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend_recognitionResultsByLocale(v879, v881, v882, v883, v884, v885);
            v886 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_preferredLocale(v879, v887, v888, v889, v890, v891);
            v892 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v886, v893, (uint64_t)v892, v894, v895, v896);
            v897 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_score(v897, v898, v899, v900, v901, v902);
            v904 = v903;
            objc_msgSend_mathResult(v1102, v905, v906, v907, v908, v909);
            v910 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_score(v910, v911, v912, v913, v914, v915);
            v917 = v916;
            v923 = objc_msgSend_uniqueIdentifier(v1101, v918, v919, v920, v921, v922);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v904;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v917;
            *(_WORD *)&buf[22] = 2048;
            v1124 = v923;
            _os_log_impl(&dword_1BE607000, v880, OS_LOG_TYPE_DEBUG, "Added complementary text result (score=%0.3f) transliterated from math result (score=%0.3f) in group %ld.", buf, 0x20u);

          }
          v1102 = v879;
          goto LABEL_113;
        }
LABEL_114:

      }
    }
  }
LABEL_32:

  return v1102;
}

void sub_1BE795A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, _Unwind_Exception *exception_object,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE796270(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE796280(uint64_t a1)
{

}

void sub_1BE796288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v7;
  double v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  double v70;
  _QWORD v71[5];
  id v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  double v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], a2, a3, a4, a5, a6);
  v8 = v7;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v9 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 80);
    *(_DWORD *)buf = 134217984;
    v74 = v10;
    _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEBUG, "Beginning math recognizer request for stroke group %ld", buf, 0xCu);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v12 = *(id *)(a1 + 32);
    objc_msgSend_setDeclaredVariables_(v12, v42, *(_QWORD *)(a1 + 40), v43, v44, v45);
    objc_msgSend_recognitionLocales(*(void **)(a1 + 48), v46, v47, v48, v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLocales_(v12, v52, (uint64_t)v51, v53, v54, v55);

    v56 = *(_QWORD *)(a1 + 56);
    v57 = *(_QWORD *)(a1 + 64);
    v71[0] = MEMORY[0x1E0C809B0];
    v71[1] = 3221225472;
    v71[2] = sub_1BE7966BC;
    v71[3] = &unk_1E77F4CA0;
    v71[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend_mathRecognitionResultForDrawing_options_shouldCancel_(v12, v58, v56, v57, (uint64_t)v71, v59);
    v60 = objc_claimAutoreleasedReturnValue();
    v61 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v62 = *(void **)(v61 + 40);
    *(_QWORD *)(v61 + 40) = v60;

    goto LABEL_17;
  }
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E28;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
LABEL_8:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEBUG, "Running remote recognition", buf, 2u);
  }
LABEL_9:

  v12 = *(id *)(a1 + 32);
  objc_msgSend_setDeclaredVariables_(v12, v13, *(_QWORD *)(a1 + 40), v14, v15, v16);
  objc_msgSend_recognitionLocales(*(void **)(a1 + 48), v17, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLocales_(v12, v23, (uint64_t)v22, v24, v25, v26);

  v27 = *(_QWORD *)(a1 + 56);
  v28 = *(_QWORD *)(a1 + 64);
  v72 = 0;
  objc_msgSend_mathRecognitionResultForDrawing_options_error_(v12, v29, v27, v28, (uint64_t)&v72, v30);
  v31 = objc_claimAutoreleasedReturnValue();
  v32 = v72;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v31;

  if (v32)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v35 = (id)qword_1EF568E38;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_description(v32, v36, v37, v38, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v74 = v41;
      _os_log_impl(&dword_1BE607000, v35, OS_LOG_TYPE_ERROR, "Remote Recognition error: %@", buf, 0xCu);

    }
  }

LABEL_17:
  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v63 = (id)qword_1EF568E28;
    if (!os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
    goto LABEL_19;
  }
  v63 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
  {
LABEL_19:
    v69 = *(void **)(a1 + 80);
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v64, v65, v66, v67, v68);
    *(_DWORD *)buf = 134218240;
    v74 = v69;
    v75 = 2048;
    v76 = v70 - v8;
    _os_log_impl(&dword_1BE607000, v63, OS_LOG_TYPE_DEBUG, "Finished math recognizer request for stroke group %ld. Duration: %0.3f", buf, 0x16u);
  }
LABEL_20:

}

void sub_1BE79666C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7966BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1BE7966C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  NSObject *v56;
  uint64_t v57;
  id v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  NSObject *v122;
  id v123;
  const char *v124;
  uint64_t v125;
  NSObject *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  NSObject *v133;
  id v134;
  const char *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BOOL4 v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t j;
  void *v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  id v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  CHTokenizedTextResultToken *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  double v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  double v255;
  double v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  void *v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  double v269;
  double v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  double v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  BOOL v337;
  NSObject *v338;
  id v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  void *v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  CHMutableTokenizedTextResult *v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  const char *v358;
  void *v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  NSObject *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  id v376;
  const char *v377;
  uint64_t v378;
  void *v379;
  void *v380;
  id v381;
  id v382;
  NSObject *v383;
  const char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  id v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  id v394;
  NSObject *v395;
  void *v396;
  id v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  const char *v409;
  uint64_t v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t k;
  uint64_t v419;
  void *v420;
  const char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  id v427;
  const char *v428;
  const char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  NSObject *v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  void *v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  double v455;
  NSObject *v456;
  uint64_t v457;
  id v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  void *v462;
  id v463;
  uint64_t v464;
  void *v465;
  id v466;
  double v467;
  void *v468;
  void *v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  id v477;
  char isKindOfClass;
  uint64_t v479;
  id v480;
  unint64_t v481;
  id v482;
  void *v483;
  id v484;
  unint64_t v485;
  void *v486;
  void *v487;
  void *v488;
  void *v489;
  id obj;
  uint64_t v491;
  CHMutableTokenizedResultColumn *v492;
  uint64_t v493;
  uint64_t i;
  id v495;
  void *v496;
  id v497;
  id v498;
  uint64_t v499;
  void *v500;
  uint64_t v501;
  id v502;
  double v503;
  id v504;
  id v505;
  double v506;
  id v507;
  double v508;
  void *v509;
  id v510;
  id v511;
  _QWORD v512[4];
  id v513;
  id v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  _QWORD v523[4];
  id v524;
  id v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  _QWORD v534[5];
  id v535;
  _QWORD v536[4];
  id v537;
  id v538;
  __int128 *v539;
  unint64_t v540;
  uint8_t v541[16];
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  uint64_t v546;
  uint64_t v547;
  _BYTE buf[22];
  __int16 v549;
  double v550;
  uint64_t v551;

  v551 = *MEMORY[0x1E0C80C00];
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], a2, a3, a4, a5, a6);
  v467 = v7;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v479 = a1;
  v8 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(v479 + 120);
    objc_msgSend_localeIdentifier(*(void **)(v479 + 32), v9, v10, v11, v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v15;
    _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEBUG, "Beginning text recognizer request for stroke group %ld, locale %@", buf, 0x16u);

  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v21 = (void *)objc_opt_class();
    v485 = objc_msgSend_maxRequestStrokeCountForLocale_(v21, v22, *(_QWORD *)(v479 + 32), v23, v24, v25);
  }
  else
  {
    v485 = objc_msgSend_strokeCount(*(void **)(v479 + 48), v16, v17, v18, v19, v20);
  }
  v26 = v479;
  if (*(_QWORD *)(v479 + 56))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v30 = *(id *)(v479 + 56);
      v502 = 0;
      if (!v30)
        goto LABEL_120;
      goto LABEL_11;
    }
  }
  v69 = *(void **)(v479 + 40);
  v70 = *(void **)(v479 + 32);
  v72 = *(_QWORD *)(v479 + 64);
  v71 = *(void **)(v479 + 72);
  v480 = *(id *)(v479 + 48);
  v482 = v69;
  v466 = v70;
  v477 = v71;
  v470 = v72;
  if (!v72)
  {
    v394 = 0;
    v390 = 0;
    goto LABEL_106;
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v73, v74, v75, v76, v77);
  v468 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = (void *)MEMORY[0x1E0CB3788];
  v84 = objc_msgSend_strokeCount(v480, v79, v80, v81, v82, v83);
  objc_msgSend_indexSetWithIndexesInRange_(v78, v85, 0, v84, v86, v87);
  v487 = (void *)objc_claimAutoreleasedReturnValue();
  v481 = objc_msgSend_strokeCount(v480, v88, v89, v90, v91, v92);
  v483 = 0;
  v98 = 0;
  v475 = 0;
  v476 = 0;
  v471 = 1;
  while (objc_msgSend_count(v487, v93, v94, v95, v96, v97))
  {
    v104 = v480;
    if (v481 <= v485)
    {
      v121 = v487;
      v497 = 0;
      v486 = v104;
    }
    else
    {
      *(_QWORD *)&v545 = 0;
      *((_QWORD *)&v545 + 1) = &v545;
      v546 = 0x2020000000;
      v547 = 0;
      objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v99, v100, v101, v102, v103);
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v106, v107, v108, v109, v110);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      v536[0] = MEMORY[0x1E0C809B0];
      v536[1] = 3221225472;
      v536[2] = sub_1BE79858C;
      v536[3] = &unk_1E77F4D18;
      v539 = &v545;
      v540 = v485;
      v112 = v105;
      v537 = v112;
      v497 = v111;
      v538 = v497;
      objc_msgSend_enumerateIndexesUsingBlock_(v487, v113, (uint64_t)v536, v114, v115, v116);
      objc_msgSend_drawingWithStrokesFromIndexSet_(v104, v117, (uint64_t)v112, v118, v119, v120);
      v486 = (void *)objc_claimAutoreleasedReturnValue();

      _Block_object_dispose(&v545, 8);
      v121 = v112;
    }
    v488 = v121;
    v496 = v104;
    if ((isKindOfClass & 1) != 0)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v122 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v545) = 0;
        _os_log_impl(&dword_1BE607000, v122, OS_LOG_TYPE_DEBUG, "Running remote recognition", (uint8_t *)&v545, 2u);
      }

      v123 = v482;
      v535 = v98;
      objc_msgSend_textRecognitionResultForDrawing_options_error_(v123, v124, (uint64_t)v486, (uint64_t)v477, (uint64_t)&v535, v125);
      v489 = (void *)objc_claimAutoreleasedReturnValue();
      v484 = v535;

      if (v484)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v126 = (id)qword_1EF568E38;
        if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend_description(v484, v127, v128, v129, v130, v131);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v545) = 138412290;
          *(_QWORD *)((char *)&v545 + 4) = v132;
          _os_log_impl(&dword_1BE607000, v126, OS_LOG_TYPE_ERROR, "Remote Recognition error: %@", (uint8_t *)&v545, 0xCu);

        }
      }
      else
      {
        v484 = 0;
      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v133 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v545) = 0;
        _os_log_impl(&dword_1BE607000, v133, OS_LOG_TYPE_DEBUG, "Running local recognition", (uint8_t *)&v545, 2u);
      }

      v534[0] = MEMORY[0x1E0C809B0];
      v534[1] = 3221225472;
      v534[2] = sub_1BE798668;
      v534[3] = &unk_1E77F4CA0;
      v534[4] = v470;
      v134 = v482;
      objc_msgSend_textRecognitionResultForDrawing_options_shouldCancel_(v134, v135, (uint64_t)v486, (uint64_t)v477, (uint64_t)v534, v136);
      v489 = (void *)objc_claimAutoreleasedReturnValue();
      v484 = v98;
    }

    if (v489)
    {
      if (v481 <= v485)
      {
        v149 = v489;

        v176 = v488;
        v471 = 0;
      }
      else
      {
        objc_msgSend_tokenColumns(v489, v137, v138, v139, v140, v141);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v148 = objc_msgSend_count(v142, v143, v144, v145, v146, v147);

        v149 = v483;
        v473 = v148 - 1;
        if (objc_msgSend_count(v488, v150, v151, v152, v153, v154) >= v485)
        {
          objc_msgSend_tokenColumns(v489, v155, v156, v157, v158, v159);
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          v166 = (unint64_t)objc_msgSend_count(v160, v161, v162, v163, v164, v165) > 2;

          v149 = v483;
          if (v166)
          {
            objc_msgSend_tokenColumns(v489, v155, v156, v157, v158, v159);
            v167 = (void *)objc_claimAutoreleasedReturnValue();
            v173 = objc_msgSend_count(v167, v168, v169, v170, v171, v172);

            v473 = v173 - 3;
            v149 = v483;
          }
        }
        objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v155, v156, v157, v158, v159);
        v174 = objc_claimAutoreleasedReturnValue();
        v176 = (id)v174;
        if ((v473 & 0x8000000000000000) == 0)
        {
          v472 = 0;
          v469 = (void *)v174;
          do
          {
            objc_msgSend_tokenColumns(v489, v137, v175, v139, v140, v141);
            v177 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectAtIndexedSubscript_(v177, v178, v472, v179, v180, v181);
            v474 = (void *)objc_claimAutoreleasedReturnValue();

            v492 = objc_alloc_init(CHMutableTokenizedResultColumn);
            v532 = 0u;
            v533 = 0u;
            v530 = 0u;
            v531 = 0u;
            objc_msgSend_textTokenRows(v474, v182, v183, v184, v185, v186);
            obj = (id)objc_claimAutoreleasedReturnValue();
            v493 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v187, (uint64_t)&v530, (uint64_t)buf, 16, v188);
            if (v493)
            {
              v491 = *(_QWORD *)v531;
              do
              {
                for (i = 0; i != v493; ++i)
                {
                  if (*(_QWORD *)v531 != v491)
                    objc_enumerationMutation(obj);
                  v194 = *(void **)(*((_QWORD *)&v530 + 1) + 8 * i);
                  objc_msgSend_array(MEMORY[0x1E0C99DE8], v189, v190, v191, v192, v193);
                  v195 = objc_claimAutoreleasedReturnValue();
                  v528 = 0u;
                  v529 = 0u;
                  v526 = 0u;
                  v527 = 0u;
                  v495 = v194;
                  v500 = (void *)v195;
                  v198 = objc_msgSend_countByEnumeratingWithState_objects_count_(v495, v196, (uint64_t)&v526, (uint64_t)v541, 16, v197);
                  if (v198)
                  {
                    v499 = *(_QWORD *)v527;
                    do
                    {
                      v501 = v198;
                      for (j = 0; j != v501; ++j)
                      {
                        if (*(_QWORD *)v527 != v499)
                          objc_enumerationMutation(v495);
                        v205 = *(void **)(*((_QWORD *)&v526 + 1) + 8 * j);
                        objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v199, v200, v201, v202, v203);
                        v206 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_strokeIndexes(v205, v207, v208, v209, v210, v211);
                        v212 = (void *)objc_claimAutoreleasedReturnValue();
                        v523[0] = MEMORY[0x1E0C809B0];
                        v523[1] = 3221225472;
                        v523[2] = sub_1BE798670;
                        v523[3] = &unk_1E77F3DD0;
                        v524 = v497;
                        v213 = v206;
                        v525 = v213;
                        objc_msgSend_enumerateIndexesUsingBlock_(v212, v214, (uint64_t)v523, v215, v216, v217);

                        objc_msgSend_boundsForStrokeIndexes_(v496, v218, (uint64_t)v213, v219, v220, v221);
                        v223 = v222;
                        v225 = v224;
                        v227 = v226;
                        v229 = v228;
                        v230 = [CHTokenizedTextResultToken alloc];
                        objc_msgSend_string(v205, v231, v232, v233, v234, v235);
                        v236 = (void *)objc_claimAutoreleasedReturnValue();
                        v242 = objc_msgSend_wordID(v205, v237, v238, v239, v240, v241);
                        objc_msgSend_recognitionScore(v205, v243, v244, v245, v246, v247);
                        v249 = v248;
                        objc_msgSend_recognitionScore(v205, v250, v251, v252, v253, v254);
                        v256 = v255;
                        objc_msgSend_combinedScore(v205, v257, v258, v259, v260, v261);
                        v263 = v262;
                        objc_msgSend_alignmentScore(v205, v264, v265, v266, v267, v268);
                        v270 = v269;
                        v276 = objc_msgSend_properties(v205, v271, v272, v273, v274, v275);
                        objc_msgSend_recognizerSourceLocale(v205, v277, v278, v279, v280, v281);
                        v282 = (void *)objc_claimAutoreleasedReturnValue();
                        v503 = v270;
                        v504 = v263;
                        v506 = v256;
                        v508 = v229;
                        v283 = v223;
                        v289 = objc_msgSend_inputSources(v205, v284, v285, v286, v287, v288);
                        v295 = objc_msgSend_substrokeCount(v205, v290, v291, v292, v293, v294);
                        objc_msgSend_originalBounds(v205, v296, v297, v298, v299, v300);
                        v307 = v306;
                        v309 = v308;
                        v311 = v310;
                        v313 = v312;
                        if (v205)
                        {
                          objc_msgSend_principalLines(v205, v301, v302, v303, v304, v305);
                        }
                        else
                        {
                          v521 = 0u;
                          v522 = 0u;
                          v519 = 0u;
                          v520 = 0u;
                          v517 = 0u;
                          v518 = 0u;
                          v515 = 0u;
                          v516 = 0u;
                        }
                        v314 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v230, v301, (uint64_t)v236, (uint64_t)v213, v242, v276, v282, v289, v249, v506, *(double *)&v504, v503, v283, v225, v227, v508, v295, v307, v309,
                                         v311,
                                         v313,
                                         &v515);

                        objc_msgSend_addObject_(v500, v315, (uint64_t)v314, v316, v317, v318);
                      }
                      v198 = objc_msgSend_countByEnumeratingWithState_objects_count_(v495, v199, (uint64_t)&v526, (uint64_t)v541, 16, v203);
                    }
                    while (v198);
                  }

                  objc_msgSend_addTokenRowWithTokens_(v492, v319, (uint64_t)v500, v320, v321, v322);
                }
                v493 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v189, (uint64_t)&v530, (uint64_t)buf, 16, v193);
              }
              while (v493);
            }

            objc_msgSend_addObject_(v468, v323, (uint64_t)v492, v324, v325, v326);
            objc_msgSend_strokeIndexes(v474, v327, v328, v329, v330, v331);
            v332 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addIndexes_(v469, v333, (uint64_t)v332, v334, v335, v336);

            v337 = v472++ == v473;
            v149 = v483;
            v176 = v469;
          }
          while (!v337);
        }
      }
      ++v476;
      v345 = v497;
      v483 = v149;
      if (v497)
      {
LABEL_76:
        v512[0] = MEMORY[0x1E0C809B0];
        v512[1] = 3221225472;
        v512[2] = sub_1BE798700;
        v512[3] = &unk_1E77F3DD0;
        v498 = v345;
        v513 = v498;
        v514 = v487;
        v346 = v176;
        objc_msgSend_enumerateIndexesUsingBlock_(v176, v347, (uint64_t)v512, v348, v349, v350);

        goto LABEL_79;
      }
    }
    else if (v475 < 2)
    {
      ++v475;
      v176 = 0;
      v345 = v497;
      if (v497)
        goto LABEL_76;
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v338 = (id)qword_1EF568E38;
      if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v545) = 134217984;
        *(_QWORD *)((char *)&v545 + 4) = v475 + 1;
        _os_log_impl(&dword_1BE607000, v338, OS_LOG_TYPE_ERROR, "Failed to run recognition after %li failed attempts", (uint8_t *)&v545, 0xCu);
      }

      v339 = v488;
      objc_msgSend_removeAllIndexes(v487, v340, v341, v342, v343, v344);

      v471 = 0;
      v483 = 0;
      ++v475;
      v176 = v339;
    }
    v346 = v176;
    objc_msgSend_removeIndexes_(v487, v137, (uint64_t)v176, v139, v140, v141);
LABEL_79:

    v98 = v484;
  }
  if ((v471 & 1) != 0)
  {
    v351 = [CHMutableTokenizedTextResult alloc];
    v357 = objc_msgSend_recognizerGenerationIdentifier(v483, v352, v353, v354, v355, v356);
    v359 = (void *)objc_msgSend_initWithTokenColumns_transcriptionPaths_scores_recognizerGenerationIdentifier_(v351, v358, (uint64_t)v468, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], v357);
    if ((objc_msgSend_hasValidColumns(v359, v360, v361, v362, v363, v364) & 1) == 0)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v370 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v370, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend_descriptionWithSensitiveInformation_(v359, v371, 0, v372, v373, v374);
        v375 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v545) = 138412290;
        *(_QWORD *)((char *)&v545 + 4) = v375;
        _os_log_impl(&dword_1BE607000, v370, OS_LOG_TYPE_FAULT, "Unexpected tokenized result with invalid columns passed to transcriptionPathsForTokenizedTextResult, description = %@", (uint8_t *)&v545, 0xCu);

      }
    }
    if (objc_msgSend_hasValidColumns(v359, v365, v366, v367, v368, v369))
    {
      v376 = v482;
      v379 = v376;
      if ((isKindOfClass & 1) != 0)
      {
        v510 = 0;
        v511 = 0;
        objc_msgSend_transcriptionPathsForTokenizedTextResult_withHistory_scores_error_(v376, v377, (uint64_t)v359, 0, (uint64_t)&v511, (uint64_t)&v510);
        v380 = (void *)objc_claimAutoreleasedReturnValue();
        v381 = v511;
        v382 = v510;
        if (!v380)
        {
          CHOSLogForCategory(4);
          v383 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v383, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend_description(v382, v384, v385, v386, v387, v388);
            v389 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v545) = 138412290;
            *(_QWORD *)((char *)&v545 + 4) = v389;
            _os_log_impl(&dword_1BE607000, v383, OS_LOG_TYPE_ERROR, "Remote call to compute transcription paths error: %@", (uint8_t *)&v545, 0xCu);

          }
          v380 = 0;
          goto LABEL_99;
        }
      }
      else
      {
        v511 = 0;
        objc_msgSend_bestTranscriptionPathsForTokenizedResult_scores_history_(v376, v377, (uint64_t)v359, (uint64_t)&v511, 0, v378);
        v380 = (void *)objc_claimAutoreleasedReturnValue();
        v381 = v511;
        v382 = 0;
      }

      if (v381 && v380)
        objc_msgSend_setTranscriptionPaths_scores_(v359, v391, (uint64_t)v380, (uint64_t)v381, v392, v393);
LABEL_99:
      v390 = v359;

    }
    else
    {
      v390 = 0;
      v380 = v483;
    }

  }
  else
  {
    v390 = v483;
  }
  v394 = objc_retainAutorelease(v98);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v395 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v395, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v545) = 134217984;
    *(_QWORD *)((char *)&v545 + 4) = v476;
    _os_log_impl(&dword_1BE607000, v395, OS_LOG_TYPE_DEBUG, "Recognition successful using %li sub-drawings", (uint8_t *)&v545, 0xCu);
  }

LABEL_106:
  v502 = v394;
  v30 = *(id *)(v479 + 64);
  v396 = *(void **)(v479 + 80);
  v397 = v390;
  v507 = v396;
  if (v30)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v398, v399, v400, v401, v402);
    v509 = (void *)objc_claimAutoreleasedReturnValue();
    v543 = 0u;
    v544 = 0u;
    *(_OWORD *)v541 = 0u;
    v542 = 0u;
    objc_msgSend_transcriptionPaths(v397, v403, v404, v405, v406, v407);
    v408 = (void *)objc_claimAutoreleasedReturnValue();
    v505 = v408;
    v416 = objc_msgSend_countByEnumeratingWithState_objects_count_(v408, v409, (uint64_t)v541, (uint64_t)buf, 16, v410);
    if (v416)
    {
      v417 = *(_QWORD *)v542;
      do
      {
        for (k = 0; k != v416; ++k)
        {
          if (*(_QWORD *)v542 != v417)
            objc_enumerationMutation(v505);
          v419 = *(_QWORD *)(*(_QWORD *)&v541[8] + 8 * k);
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v411, v412, v413, v414, v415);
          v420 = (void *)objc_claimAutoreleasedReturnValue();
          v426 = objc_msgSend_tokenColumnCount(v397, v421, v422, v423, v424, v425);
          *(_QWORD *)&v515 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v515 + 1) = 3221225472;
          *(_QWORD *)&v516 = sub_1BE797F18;
          *((_QWORD *)&v516 + 1) = &unk_1E77F3218;
          *(_QWORD *)&v517 = v507;
          v427 = v420;
          *((_QWORD *)&v517 + 1) = v427;
          objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v397, v428, v419, 0, v426, (uint64_t)&v515);
          objc_msgSend_addObject_(v509, v429, (uint64_t)v427, v430, v431, v432);

        }
        v408 = v505;
        v416 = objc_msgSend_countByEnumeratingWithState_objects_count_(v505, v411, (uint64_t)v541, (uint64_t)buf, 16, v415);
      }
      while (v416);
    }

    objc_msgSend_transcriptionPathScores(v397, v433, v434, v435, v436, v437);
    v438 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_modifiedResultWithBestPathTokens_pathProbabilities_(v397, v439, (uint64_t)v509, (uint64_t)v438, v440, v441);
    v30 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v442 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v442, OS_LOG_TYPE_DEBUG))
  {
    v448 = *(_QWORD *)(v479 + 120);
    objc_msgSend_localeIdentifier(*(void **)(v479 + 32), v443, v444, v445, v446, v447);
    v449 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v450, v451, v452, v453, v454);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v448;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v449;
    v549 = 2048;
    v550 = v455 - v467;
    _os_log_impl(&dword_1BE607000, v442, OS_LOG_TYPE_DEBUG, "Finished text recognizer request for stroke group %ld, locale %@. Duration: %0.3f", buf, 0x20u);

  }
  v26 = v479;
  if (v30)
  {
LABEL_11:
    objc_msgSend_languageFitnessForLocale_recognitionMode_(v30, v27, *(_QWORD *)(v26 + 32), 6, v28, v29);
    *(_QWORD *)buf = v31;
    *(_QWORD *)&buf[8] = v32;
    v33 = *(id *)(v26 + 88);
    objc_sync_enter(v33);
    v39 = (void *)objc_msgSend_copy(*(void **)(v26 + 88), v34, v35, v36, v37, v38);
    objc_msgSend_setInputStrokeIdentifiers_(v30, v40, (uint64_t)v39, v41, v42, v43);

    objc_msgSend_inputStrokeIdentifiers(v30, v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend_count(v49, v50, v51, v52, v53, v54) == 0;

    if (v55)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v56 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v541 = 0;
        _os_log_impl(&dword_1BE607000, v56, OS_LOG_TYPE_FAULT, "CHRecognitionSessionTask can not produce a text result with no stroke identifiers.", v541, 2u);
      }

    }
    objc_sync_exit(v33);

    v57 = v479;
    v58 = *(id *)(v479 + 96);
    objc_sync_enter(v58);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v57 + 96), v59, (uint64_t)v30, *(_QWORD *)(v57 + 32), v60, v61);
    objc_msgSend_value_withObjCType_(MEMORY[0x1E0CB3B18], v62, (uint64_t)buf, (uint64_t)"{?=dd}", v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v57 + 104), v66, (uint64_t)v65, *(_QWORD *)(v57 + 32), v67, v68);

    objc_sync_exit(v58);
    goto LABEL_128;
  }
LABEL_120:
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v456 = (id)qword_1EF568E28;
  if (os_log_type_enabled(v456, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v456, OS_LOG_TYPE_ERROR, "CHTokenizedTextResult is nil", buf, 2u);
  }

  if (v502)
  {
    v457 = v479;
    v458 = *(id *)(v479 + 96);
    objc_sync_enter(v458);
    v462 = *(void **)(*(_QWORD *)(*(_QWORD *)(v479 + 112) + 8) + 40);
    if (!v462)
    {
      v463 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v464 = *(_QWORD *)(*(_QWORD *)(v479 + 112) + 8);
      v465 = *(void **)(v464 + 40);
      *(_QWORD *)(v464 + 40) = v463;

      v462 = *(void **)(*(_QWORD *)(*(_QWORD *)(v479 + 112) + 8) + 40);
      v457 = v479;
    }
    objc_msgSend_setObject_forKeyedSubscript_(v462, v459, (uint64_t)v502, *(_QWORD *)(v457 + 32), v460, v461);
    objc_sync_exit(v458);

  }
LABEL_128:

}

void sub_1BE797ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,void *a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  _Unwind_Resume(a1);
}

void sub_1BE797F18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CHTokenizedTextResultToken *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD v121[9];

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_boundsForStrokeIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;

  v23 = [CHTokenizedTextResultToken alloc];
  objc_msgSend_string(v3, v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v3, v30, v31, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v117 = v22;
  v118 = v20;
  v119 = v18;
  v120 = v16;
  v41 = objc_msgSend_wordID(v3, v36, v37, v38, v39, v40);
  objc_msgSend_modelScore(v3, v42, v43, v44, v45, v46);
  v48 = v47;
  objc_msgSend_recognitionScore(v3, v49, v50, v51, v52, v53);
  v55 = v54;
  objc_msgSend_combinedScore(v3, v56, v57, v58, v59, v60);
  v62 = v61;
  objc_msgSend_alignmentScore(v3, v63, v64, v65, v66, v67);
  v69 = v68;
  v75 = objc_msgSend_properties(v3, v70, v71, v72, v73, v74);
  objc_msgSend_recognizerSourceLocale(v3, v76, v77, v78, v79, v80);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = objc_msgSend_inputSources(v3, v82, v83, v84, v85, v86);
  v93 = objc_msgSend_substrokeCount(v3, v88, v89, v90, v91, v92);
  objc_msgSend_bounds(v3, v94, v95, v96, v97, v98);
  v105 = v104;
  v107 = v106;
  v109 = v108;
  v111 = v110;
  if (v3)
    objc_msgSend_principalLines(v3, v99, v100, v101, v102, v103);
  else
    memset(v121, 0, 128);
  v112 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v23, v99, (uint64_t)v29, (uint64_t)v35, v41, v75, v81, v87, v48, v55, v62, v69, v105, v107, v109, v111, v93, v120, v119,
                   v118,
                   v117,
                   v121);

  objc_msgSend_addObject_(*(void **)(a1 + 40), v113, (uint64_t)v112, v114, v115, v116);
}

void sub_1BE79811C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE798130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE798144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE798158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE798168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE798178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE798194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7981AC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  void *v95;
  id v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v119;
  id obj;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[128];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], v4, (uint64_t)CFSTR("[+-x×\\*\\.⋅÷/:]?\\s?[\\$€£¥¢₺₴₽₩]?[\\d\\.⋅,]+"), 0, 0, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_length(v3, v7, v8, v9, v10, v11);
  objc_msgSend_matchesInString_options_range_(v6, v13, (uint64_t)v3, 0, 0, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v14, v15, v16, v17, v18, v19)
    && (objc_msgSend_firstObject(v14, v20, v21, v22, v23, v24),
        v25 = (void *)objc_claimAutoreleasedReturnValue(),
        v31 = objc_msgSend_range(v25, v26, v27, v28, v29, v30),
        v25,
        !v31))
  {
    objc_msgSend_firstObject(v14, v32, v33, v34, v35, v36);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_range(v38, v39, v40, v41, v42, v43);
    v45 = v44;

    objc_msgSend_substringFromIndex_(v3, v46, v45, v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v51, v52, v53, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v50, v57, (uint64_t)v56, v58, v59, v60);
    v123 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_root(*(void **)(a1 + 656), v61, v62, v63, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v66, v67, (uint64_t)v123, v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend_length(v123, v72, v73, v74, v75, v76)
      || v71 && (objc_msgSend_isMatch(v71, v77, v78, v79, v80, v81) & 1) != 0
      || (objc_msgSend_containsString_(CFSTR("$€£¥¢₺₴₽₩"), v77, (uint64_t)v123, v79, v80, v81) & 1) != 0)
    {
      v37 = 1;
    }
    else
    {
      objc_msgSend_componentsSeparatedByString_(v123, v82, (uint64_t)CFSTR("/"), v83, v84, v85);
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v119, v86, v87, v88, v89, v90) == 2)
      {
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        obj = v119;
        v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v91, (uint64_t)&v124, (uint64_t)v128, 16, v92);
        if (v93)
        {
          v122 = *(_QWORD *)v125;
          while (2)
          {
            v121 = v93;
            for (i = 0; i != v121; ++i)
            {
              if (*(_QWORD *)v125 != v122)
                objc_enumerationMutation(obj);
              v95 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * i);
              v96 = *(id *)(a1 + 656);
              objc_msgSend_root(v96, v97, v98, v99, v100, v101);
              v102 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectForKeyedSubscript_(v102, v103, (uint64_t)v95, v104, v105, v106);
              v107 = (void *)objc_claimAutoreleasedReturnValue();

              v71 = v107;
              if (objc_msgSend_length(v95, v108, v109, v110, v111, v112)
                && (!v107 || (objc_msgSend_isMatch(v107, v113, v114, v115, v116, v117) & 1) == 0))
              {
                v37 = 0;
                goto LABEL_24;
              }
            }
            v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v113, (uint64_t)&v124, (uint64_t)v128, 16, v117);
            if (v93)
              continue;
            break;
          }
        }
        v37 = 1;
LABEL_24:

      }
      else
      {
        v37 = 0;
      }

    }
  }
  else
  {
    v37 = 0;
  }

  return v37;
}

void sub_1BE7984AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE798580(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE79858C(uint64_t a1, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) >= *(_QWORD *)(a1 + 56))
  {
    *a3 = 1;
  }
  else
  {
    objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
    v8 = *(void **)(a1 + 40);
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v9, (uint64_t)a2, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v8, v19, (uint64_t)v13, (uint64_t)v18, v20, v21);

  }
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
}

void sub_1BE798644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE798658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE798668(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1BE798670(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v7, v9, (uint64_t)v8, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  return objc_msgSend_addIndex_(*(void **)(a1 + 40), v20, v19, v21, v22, v23);
}

void sub_1BE7986DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7986F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE798700(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v7 = *(void **)(a1 + 32);
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v7, v9, (uint64_t)v8, v10, v11, v12);
  v24 = (id)objc_claimAutoreleasedReturnValue();

  v13 = *(void **)(a1 + 40);
  v19 = objc_msgSend_integerValue(v24, v14, v15, v16, v17, v18);
  objc_msgSend_removeIndex_(v13, v20, v19, v21, v22, v23);

}

void sub_1BE79877C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE798794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1BE7987A8(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  CHContextualTextResult *v9;
  const char *v10;
  uint64_t v11;
  CHTextTransformationManager *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t i;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  const char *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  void *v158;
  void *v160;
  void *v161;
  void *v162;
  id v163;
  void *v164;
  void *v165;
  void *v166;
  _QWORD v167[4];
  id v168;
  id v169;
  char v170;
  _QWORD v171[5];
  uint8_t buf[4];
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  _QWORD v176[3];

  v176[1] = *MEMORY[0x1E0C80C00];
  v163 = a2;
  v7 = a4;
  v160 = v7;
  if (a1)
  {
    v8 = v7;
    v9 = [CHContextualTextResult alloc];
    v162 = (void *)objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v9, v10, (uint64_t)v8, 0, (uint64_t)v163, v11);
    v12 = [CHTextTransformationManager alloc];
    objc_msgSend_strokeIdentifiers(v163, v13, v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allObjects(v18, v19, v20, v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v176[0] = v162;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v25, (uint64_t)v176, 1, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeProvider(a1, v29, v30, v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v161 = (void *)objc_msgSend_initWithContextStrokes_relatedNonTextStrokes_contextResults_strokeGroupingResult_strokeClassificationResult_strokeProvider_(v12, v35, (uint64_t)v24, MEMORY[0x1E0C9AA60], (uint64_t)v28, 0, 0, v34);

    v171[0] = MEMORY[0x1E0C809B0];
    v171[1] = 3221225472;
    v171[2] = sub_1BE798D8C;
    v171[3] = &unk_1E77F4CA0;
    v171[4] = a1;
    objc_msgSend_reflowableTokensSkipLineOrientationEstimate_useCache_preserveTokenOrder_shouldCancel_(v161, v36, a3, 0, 1, (uint64_t)v171);
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v166, v37, v38, v39, v40, v41)
      && (objc_msgSend_topModelTranscriptionPath(v8, v42, v43, v44, v45, v46),
          v47 = (void *)objc_claimAutoreleasedReturnValue(),
          v52 = objc_msgSend_tokenCountInTranscriptionPath_(v8, v48, (uint64_t)v47, v49, v50, v51),
          LOBYTE(v52) = v52 == objc_msgSend_count(v166, v53, v54, v55, v56, v57),
          v47,
          (v52 & 1) != 0))
    {
      objc_msgSend_array(MEMORY[0x1E0C99DE8], v58, v59, v60, v61, v62);
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_array(MEMORY[0x1E0C99DE8], v63, v64, v65, v66, v67);
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      for (i = 0; ; ++i)
      {
        objc_msgSend_transcriptionPaths(v8, v68, v69, v70, v71, v72);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = i < objc_msgSend_count(v74, v75, v76, v77, v78, v79);

        if (!v80)
          break;
        objc_msgSend_transcriptionPaths(v8, v81, v82, v83, v84, v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v86, v87, i, v88, v89, v90);
        v91 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_topModelTranscriptionPath(v8, v92, v93, v94, v95, v96);
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v86) = objc_msgSend_transcriptionPathsHaveSameSegmentation_otherPath_(v8, v98, (uint64_t)v97, (uint64_t)v91, v99, v100);

        objc_msgSend_array(MEMORY[0x1E0C99DE8], v101, v102, v103, v104, v105);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = objc_msgSend_tokenColumnCount(v8, v107, v108, v109, v110, v111);
        v167[0] = MEMORY[0x1E0C809B0];
        v167[1] = 3221225472;
        v167[2] = sub_1BE798D94;
        v167[3] = &unk_1E77F4D40;
        v170 = (char)v86;
        v168 = v166;
        v113 = v106;
        v169 = v113;
        objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v8, v114, (uint64_t)v91, 0, v112, (uint64_t)v167);
        if (objc_msgSend_count(v113, v115, v116, v117, v118, v119))
        {
          objc_msgSend_addObject_(v164, v120, (uint64_t)v113, v121, v122, v123);
          objc_msgSend_transcriptionPathScores(v8, v124, v125, v126, v127, v128);
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v129, v130, i, v131, v132, v133);
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v165, v135, (uint64_t)v134, v136, v137, v138);

        }
      }
      objc_msgSend_modifiedResultWithBestPathTokens_pathProbabilities_(v8, v81, (uint64_t)v164, (uint64_t)v165, v84, v85);
      v158 = (void *)objc_claimAutoreleasedReturnValue();

      v157 = v158;
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v139 = (id)qword_1EF568E68;
      if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_topModelTranscriptionPath(v8, v140, v141, v142, v143, v144);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        v150 = objc_msgSend_tokenCountInTranscriptionPath_(v8, v146, (uint64_t)v145, v147, v148, v149);
        v156 = objc_msgSend_count(v166, v151, v152, v153, v154, v155);
        *(_DWORD *)buf = 134218240;
        v173 = v150;
        v174 = 2048;
        v175 = v156;
        _os_log_impl(&dword_1BE607000, v139, OS_LOG_TYPE_ERROR, "Invalid reflowable tokens count: result tokens:%li reflowable tokens:%li", buf, 0x16u);

      }
      v157 = v8;
    }

  }
  else
  {
    v157 = 0;
  }

  return v157;
}

void sub_1BE798C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE798D8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1BE798D94(uint64_t a1, void *a2, unint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  CHTokenizedTextResultToken *v128;
  void *v129;
  _OWORD v130[8];
  uint8_t buf[4];
  unint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  if (*(_BYTE *)(a1 + 48))
  {
    if (objc_msgSend_count(*(void **)(a1 + 32), v5, v6, v7, v8, v9) <= a3)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v11 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        v132 = a3;
        _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_FAULT, "Reflowable tokens does not have a token at index %lu", buf, 0xCu);
      }

    }
    v128 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_string(v10, v12, v13, v14, v15, v16);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIndexes(v10, v17, v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_wordID(v10, v23, v24, v25, v26, v27);
    objc_msgSend_modelScore(v10, v29, v30, v31, v32, v33);
    v127 = v34;
    objc_msgSend_recognitionScore(v10, v35, v36, v37, v38, v39);
    v126 = v40;
    objc_msgSend_combinedScore(v10, v41, v42, v43, v44, v45);
    v125 = v46;
    objc_msgSend_alignmentScore(v10, v47, v48, v49, v50, v51);
    v124 = v52;
    v58 = objc_msgSend_properties(v10, v53, v54, v55, v56, v57);
    objc_msgSend_recognizerSourceLocale(v10, v59, v60, v61, v62, v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_inputSources(v10, v65, v66, v67, v68, v69);
    v76 = objc_msgSend_substrokeCount(v10, v71, v72, v73, v74, v75);
    objc_msgSend_bounds(v10, v77, v78, v79, v80, v81);
    v83 = v82;
    v85 = v84;
    v87 = v86;
    v89 = v88;
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v90, a3, v91, v92, v93);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v94, v95, v96, v97, v98, v99);
    v101 = v100;
    v103 = v102;
    v105 = v104;
    v107 = v106;
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v108, a3, v109, v110, v111);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = v112;
    if (v112)
      objc_msgSend_principalLines(v112, v113, v114, v115, v116, v117);
    else
      memset(v130, 0, sizeof(v130));
    v119 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v128, v113, (uint64_t)v129, (uint64_t)v22, v28, v58, v64, v70, v127, v126, v125, v124, v83, v85, v87, v89, v76, v101, v103,
                     v105,
                     v107,
                     v130);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v120, (uint64_t)v119, v121, v122, v123);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v5, (uint64_t)v10, v7, v8, v9);
  }

}

void sub_1BE799068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE7990D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((unint64_t)objc_msgSend_strokeAttributes(a2, (const char *)a2, a3, a4, a5, a6) >> 2) & 1;
}

void sub_1BE7990EC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v9 + 24))
  {
    v10 = *(void **)(a1 + 32);
    v16 = v3;
    objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_containsIndexes_(v10, v12, (uint64_t)v11, v13, v14, v15);

    v3 = v16;
  }
  else
  {
    *(_BYTE *)(v9 + 24) = 0;
  }

}

void sub_1BE799178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE799190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7991A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t Index;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  NSObject *v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  id v147;
  _QWORD v148[4];
  id v149;
  uint8_t buf[4];
  void *v151;
  __int16 v152;
  void *v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v147 = a4;
  objc_msgSend_subResultWithColumnRange_(*(void **)(a1 + 32), v7, a2, a3, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexesForColumnsInRange_(*(void **)(a1 + 32), v11, a2, a3, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v20, v21, (uint64_t)v14, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInputStrokeIdentifiers_(v10, v26, (uint64_t)v25, v27, v28, v29);

  objc_msgSend_remapAllStrokeIndexesWithIndexSet_(v10, v30, (uint64_t)v14, v31, v32, v33);
  objc_msgSend_strokeIndexes(v10, v34, v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = &qword_1EF568000;
  v51 = &qword_1EF568000;
  if (objc_msgSend_firstIndex(v39, v40, v41, v42, v43, v44))
    goto LABEL_7;
  objc_msgSend_strokeIndexes(v10, v45, v46, v47, v48, v49);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  Index = objc_msgSend_lastIndex(v52, v53, v54, v55, v56, v57);
  if (Index != objc_msgSend_count(v14, v59, v60, v61, v62, v63) - 1)
  {

LABEL_7:
    goto LABEL_8;
  }
  objc_msgSend_strokeIndexes(v10, v64, v65, v66, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend_count(v69, v70, v71, v72, v73, v74);
  v81 = objc_msgSend_count(v14, v76, v77, v78, v79, v80);

  v87 = v75 == v81;
  v51 = &qword_1EF568000;
  v50 = &qword_1EF568000;
  if (!v87)
  {
LABEL_8:
    if (v50[465] == -1)
    {
      v88 = (id)v51[451];
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
      {
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v88 = (id)v51[451];
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
        goto LABEL_11;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v88, OS_LOG_TYPE_FAULT, "Problem of non-contiguous stroke indexes after applying remapAllStrokeIndexesWithIndexSet.", buf, 2u);
    goto LABEL_11;
  }
LABEL_12:
  objc_msgSend_locale(*(void **)(a1 + 32), v82, v83, v84, v85, v86);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLocale_(v10, v90, (uint64_t)v89, v91, v92, v93);

  sub_1BE7987A8(*(void **)(a1 + 40), *(void **)(a1 + 48), *(_BYTE *)(a1 + 56) == 0, v10);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v100 = (void *)objc_msgSend_mutableCopy(v94, v95, v96, v97, v98, v99);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v101, v102, v103, v104, v105);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  v148[0] = MEMORY[0x1E0C809B0];
  v148[1] = 3221225472;
  v148[2] = sub_1BE799680;
  v148[3] = &unk_1E77F2CB8;
  v107 = v106;
  v149 = v107;
  objc_msgSend_enumerateIndexesUsingBlock_(v14, v108, (uint64_t)v148, v109, v110, v111);
  objc_msgSend_remapAllStrokeIndexesWithArray_(v100, v112, (uint64_t)v107, v113, v114, v115);
  objc_msgSend_tokenColumns(v100, v116, v117, v118, v119, v120);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendTokenColumns_(v147, v122, (uint64_t)v121, v123, v124, v125);

  objc_msgSend_strokeIndexesForColumnsInRange_(v147, v126, a2, a3, v127, v128);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqual_(v129, v130, (uint64_t)v14, v131, v132, v133) & 1) == 0)
  {
    if (v50[465] == -1)
    {
      v134 = (id)v51[451];
      if (!os_log_type_enabled(v134, OS_LOG_TYPE_FAULT))
      {
LABEL_16:

        goto LABEL_17;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v134 = (id)v51[451];
      if (!os_log_type_enabled(v134, OS_LOG_TYPE_FAULT))
        goto LABEL_16;
    }
    objc_msgSend_description(v129, v135, v136, v137, v138, v139);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_description(v14, v141, v142, v143, v144, v145);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138413058;
    v151 = v140;
    v152 = 2112;
    v153 = v146;
    v154 = 2048;
    v155 = a2;
    v156 = 2048;
    v157 = a3;
    _os_log_impl(&dword_1BE607000, v134, OS_LOG_TYPE_FAULT, "Error: the strokes covered in the cumulative results (%@) don't match those of the original result (%@) for the range %ld,%ld", buf, 0x2Au);

    goto LABEL_16;
  }
LABEL_17:

}

void sub_1BE799594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE799680(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE7996CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7996E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2 > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 + a3;
  return result;
}

uint64_t sub_1BE799750(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a3;
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1BE7997CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7997EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE799850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE799900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE799920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE799A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE799A20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE799A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE799BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id sub_1BE799C30(uint64_t a1, void *a2, _QWORD *a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  sub_1BE793384(*(uint64_t **)(a1 + 32), a2, *(void **)(a1 + 40), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v4;
  if (a3)
  {
    objc_msgSend_inputStrokeIdentifiers(v4, v5, v6, v7, v8, v9);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_mathResult(v10, v5, v6, v7, v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_1BE799C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1BE79A388(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE79A3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE79A3E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE79A424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE79A438(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char hasTokenAtLocation;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char isEqualToString;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  id v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  NSObject *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  NSObject *v232;
  void *v233;
  void *v234;
  uint64_t v235;
  _QWORD v236[4];
  id v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  _QWORD v242[4];
  id v243;
  uint8_t *v244;
  uint8_t v245[8];
  uint8_t *v246;
  uint64_t v247;
  char v248;
  uint8_t buf[4];
  void *v250;
  __int16 v251;
  void *v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  objc_msgSend_textResult(*(void **)(a1 + 32), v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_tokenColumnCount(v13, v14, v15, v16, v17, v18);

  if (v19 <= a3)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v48 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v245 = 0;
      _os_log_impl(&dword_1BE607000, v48, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting group having columns with multiple tokens on previous result.", v245, 2u);
    }
  }
  else
  {
    v25 = (void *)MEMORY[0x1E0C99E60];
    objc_msgSend_strokeGroupResult(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inputStrokeIdentifiers(v26, v27, v28, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIndexes(v7, v33, v34, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectsAtIndexes_(v32, v39, (uint64_t)v38, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWithArray_(v25, v44, (uint64_t)v43, v45, v46, v47);
    v48 = objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend_isSubsetOfSet_(v48, v49, *(_QWORD *)(a1 + 40), v50, v51, v52) & 1) != 0)
    {
      *(_QWORD *)v245 = 0;
      v246 = v245;
      v247 = 0x2020000000;
      v248 = 0;
      objc_msgSend_strokeIndexes(v7, v53, v54, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = MEMORY[0x1E0C809B0];
      v242[0] = MEMORY[0x1E0C809B0];
      v242[1] = 3221225472;
      v242[2] = sub_1BE79ADC4;
      v242[3] = &unk_1E77F2C40;
      v243 = *(id *)(a1 + 32);
      v244 = v245;
      objc_msgSend_enumerateIndexesUsingBlock_(v58, v60, (uint64_t)v242, v61, v62, v63);

      if (v246[24])
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v69 = (id)qword_1EF568E28;
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend_string(v7, v70, v71, v72, v73, v74);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138739971;
          v250 = v75;
          _os_log_impl(&dword_1BE607000, v69, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token (%{sensitive}@) as it contained synthetic ink)", buf, 0xCu);

        }
      }
      else
      {
        objc_msgSend_textResult(*(void **)(a1 + 48), v64, v65, v66, v67, v68);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v240 = *(_OWORD *)a4;
        v241 = a4[2];
        hasTokenAtLocation = objc_msgSend_hasTokenAtLocation_(v76, v77, (uint64_t)&v240, v78, v79, v80);

        if ((hasTokenAtLocation & 1) != 0)
        {
          objc_msgSend_textResult(*(void **)(a1 + 48), v82, v83, v84, v85, v86);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          v238 = *(_OWORD *)a4;
          v239 = a4[2];
          objc_msgSend_tokenAtLocation_(v87, v88, (uint64_t)&v238, v89, v90, v91);
          v69 = objc_claimAutoreleasedReturnValue();

          objc_msgSend_string(v7, v92, v93, v94, v95, v96);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_string(v69, v98, v99, v100, v101, v102);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToString = objc_msgSend_isEqualToString_(v97, v104, (uint64_t)v103, v105, v106, v107);

          if ((isEqualToString & 1) != 0)
          {
            objc_msgSend_refinedTokenColumns(*(void **)(a1 + 48), v109, v110, v111, v112, v113);
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            v119 = objc_msgSend_containsIndex_(v114, v115, *a4, v116, v117, v118);

            if ((v119 & 1) != 0)
            {
              objc_msgSend_drawing(*(void **)(a1 + 32), v120, v121, v122, v123, v124);
              v125 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeIndexes(v7, v126, v127, v128, v129, v130);
              v131 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_drawingWithStrokesFromIndexSet_(v125, v132, (uint64_t)v131, v133, v134, v135);
              v235 = objc_claimAutoreleasedReturnValue();

              v136 = (void *)MEMORY[0x1E0C99DE8];
              objc_msgSend_strokeIndexes(v69, v137, v138, v139, v140, v141);
              v142 = (void *)objc_claimAutoreleasedReturnValue();
              v148 = objc_msgSend_count(v142, v143, v144, v145, v146, v147);
              objc_msgSend_arrayWithCapacity_(v136, v149, v148, v150, v151, v152);
              v234 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_strokeIdentifiers(*(void **)(a1 + 48), v153, v154, v155, v156, v157);
              v233 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeIndexes(v69, v158, v159, v160, v161, v162);
              v163 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectsAtIndexes_(v233, v164, (uint64_t)v163, v165, v166, v167);
              v168 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeProvider(*(void **)(a1 + 56), v169, v170, v171, v172, v173);
              v174 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_encodedStrokeIdentifiers_withStrokeProvider_(CHStrokeUtilities, v175, (uint64_t)v168, (uint64_t)v174, v176, v177);
              v178 = (void *)objc_claimAutoreleasedReturnValue();

              v236[0] = v59;
              v236[1] = 3221225472;
              v236[2] = sub_1BE79AE38;
              v236[3] = &unk_1E77F4E70;
              v179 = v234;
              v237 = v179;
              objc_msgSend_enumerateObjectsUsingBlock_(v178, v180, (uint64_t)v236, v181, v182, v183);
              CHOSLogForCategory(2);
              v184 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_string(v69, v185, v186, v187, v188, v189);
                v190 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138739971;
                v250 = v190;
                _os_log_impl(&dword_1BE607000, v184, OS_LOG_TYPE_DEFAULT, "Inventory data ingestion: (autorefine) candidate token for inventory: %{sensitive}@", buf, 0xCu);

              }
              objc_msgSend_textResult(*(void **)(a1 + 32), v191, v192, v193, v194, v195);
              v196 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_subResultWithColumnRange_(v196, v197, a3, 1, v198, v199);
              v200 = (void *)objc_claimAutoreleasedReturnValue();

              if ((objc_msgSend_isSingleTokenResult(v200, v201, v202, v203, v204, v205) & 1) != 0)
              {
                objc_msgSend_populateStyleInventoryWithTokenizedResult_drawing_strokeIdentifiers_error_(*(void **)(a1 + 64), v206, (uint64_t)v200, v235, (uint64_t)v179, 0);
              }
              else
              {
                CHOSLogForCategory(2);
                v232 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v250 = v200;
                  _os_log_impl(&dword_1BE607000, v232, OS_LOG_TYPE_ERROR, "Inventory data ingestion: (autorefine) produced tokenized result should contain a single token: %@", buf, 0xCu);
                }

              }
              v213 = v235;
            }
            else
            {
              CHOSLogForCategory(2);
              v213 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
              {
                objc_msgSend_string(v69, v226, v227, v228, v229, v230);
                v231 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138739971;
                v250 = v231;
                _os_log_impl(&dword_1BE607000, v213, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token as it is not fully synthetic: %{sensitive}@", buf, 0xCu);

              }
            }
          }
          else
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v213 = (id)qword_1EF568E28;
            if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_string(v69, v214, v215, v216, v217, v218);
              v219 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_string(v7, v220, v221, v222, v223, v224);
              v225 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138740227;
              v250 = v219;
              v251 = 2117;
              v252 = v225;
              _os_log_impl(&dword_1BE607000, v213, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token (%{sensitive}@) as transcription is different from previous result (%{sensitive}@)", buf, 0x16u);

            }
          }

        }
        else
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v69 = (id)qword_1EF568E28;
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend_string(v7, v207, v208, v209, v210, v211);
            v212 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138739971;
            v250 = v212;
            _os_log_impl(&dword_1BE607000, v69, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token (%{sensitive}@) as new result doesn't have token at the same location)", buf, 0xCu);

          }
        }
      }

      _Block_object_dispose(v245, 8);
    }
  }

}

void sub_1BE79ABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1BE79ADC4(uint64_t a1, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (uint64_t)a2;
  objc_msgSend_syntheticStrokeIndexes(*(void **)(a1 + 32), a2, (uint64_t)a3, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v7) = objc_msgSend_containsIndex_(v9, v10, v7, v11, v12, v13);

  if ((_DWORD)v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_1BE79AE28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79AE38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE79AE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE79AE90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  objc_msgSend_UUID(MEMORY[0x1E0CB3A28], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  v25 = (id)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1E0C99E98];
  NSTemporaryDirectory();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)qword_1EF568230;
  qword_1EF568230 = v23;

}

void sub_1BE79AF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE79AF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE79AF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE79B1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79B2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE79B314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79B328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79B3A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79B3E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79B528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE79B564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE79B580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE79B598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79B5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79B5C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79B5D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79B8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v7;

  _Unwind_Resume(a1);
}

void sub_1BE79B990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79BA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1BE79BC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE79BE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1BE79BE84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79BE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE79BEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79BECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE79BEDC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE79BEEC(uint64_t a1)
{

}

void sub_1BE79BEF4(uint64_t a1, void *a2, void *a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v6 = a3;
  if (objc_msgSend_integerValue(v6, v7, v8, v9, v10, v11) > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_integerValue(v6, v12, v13, v14, v15, v16);
  }

}

void sub_1BE79BF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE79C044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE79C064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79C1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79C3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE79C70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE79D000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, id *a17, void *a18, uint64_t a19, void *a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1BE79D55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE79DA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

__n128 sub_1BE79DB78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE79DB88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  id v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  double MinX;
  double MaxX;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(a2, (const char *)a2, a3, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v8, v10, (uint64_t)v9, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)objc_opt_class();
  objc_msgSend_strokeProvider(*(void **)(a1 + 40), v16, v17, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v15, v22, (uint64_t)v14, (uint64_t)v21, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v30 = v25;
  v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v48, (uint64_t)v52, 16, v32);
  if (v38)
  {
    v39 = *(_QWORD *)v49;
    do
    {
      v40 = 0;
      do
      {
        if (*(_QWORD *)v49 != v39)
          objc_enumerationMutation(v30);
        objc_msgSend_bounds(*(void **)(*((_QWORD *)&v48 + 1) + 8 * v40), v33, v34, v35, v36, v37, (_QWORD)v48);
        v58.origin.x = v41;
        v58.origin.y = v42;
        v58.size.width = v43;
        v58.size.height = v44;
        v54.origin.x = x;
        v54.origin.y = y;
        v54.size.width = width;
        v54.size.height = height;
        v55 = CGRectUnion(v54, v58);
        x = v55.origin.x;
        y = v55.origin.y;
        width = v55.size.width;
        height = v55.size.height;
        ++v40;
      }
      while (v38 != v40);
      v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v48, (uint64_t)v52, 16, v37);
    }
    while (v38);
  }

  v56.origin.x = x;
  v56.origin.y = y;
  v56.size.width = width;
  v56.size.height = height;
  MinX = CGRectGetMinX(v56);
  if (MinX <= CGRectGetMaxX(*(CGRect *)(a1 + 56)))
  {
    v57.origin.x = x;
    v57.origin.y = y;
    v57.size.width = width;
    v57.size.height = height;
    MaxX = CGRectGetMaxX(v57);
    if (MaxX >= CGRectGetMinX(*(CGRect *)(a1 + 56)))
    {
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (*(_QWORD *)(v47 + 48) == 0x7FFFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(v47 + 48) = a3;
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      }
      ++*(_QWORD *)(v47 + 56);
    }
  }

}

void sub_1BE79DDD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79EB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1BE79EE58(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v3 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  if (!v3)
  {
    v22 = *MEMORY[0x1E0C9D538];
    if (*MEMORY[0x1E0C9D538] != 0.0)
      goto LABEL_16;
    v23 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v20 = 0.0;
    v21 = 0.0;
    if (v23 != 0.0)
      goto LABEL_16;
    goto LABEL_10;
  }
  objc_msgSend_principalLines(v3, v8, v9, v10, v11, v12);
  v18 = (double *)MEMORY[0x1E0C9D538];
  if (v38 == *MEMORY[0x1E0C9D538] && v39 == *(double *)(MEMORY[0x1E0C9D538] + 8))
  {
    objc_msgSend_principalLines(v3, v13, v14, v15, v16, v17);
    v21 = v36;
    v20 = v37;
    v22 = *v18;
    v23 = v18[1];
LABEL_10:
    if (v21 == v22 && v20 == v23)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
LABEL_16:
  v25 = (void *)objc_opt_class();
  objc_msgSend_recognizerSourceLocale(v3, v26, v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) |= objc_msgSend_useRightToLeftReflow_(v25, v32, (uint64_t)v31, v33, v34, v35);

}

void sub_1BE79EF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79EF7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79EF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79EFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79F464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79F668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE79F9AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE79FDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE7A0524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7A0B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE7A0E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A1064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A107C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;

  sub_1BE6F2154((uint64_t)&a33);

  _Unwind_Resume(a1);
}

void sub_1BE7A1220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A1238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A1250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A1268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A1280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A1294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A12A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A12B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A149C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7A16BC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_1BE6F2154(v2 - 144);

  _Unwind_Resume(a1);
}

void sub_1BE7A16D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  sub_1BE6F2154((uint64_t)&a27);
  sub_1BE6F2154(v28 - 144);

  _Unwind_Resume(a1);
}

void sub_1BE7A16F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A1704(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_1BE6F2154(v2 - 144);

  _Unwind_Resume(a1);
}

void sub_1BE7A1808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A1818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A18E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A19F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7A1A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A1A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A1B08()
{
  void *v0;

  v0 = (void *)qword_1EF568248;
  qword_1EF568248 = (uint64_t)&unk_1E7827448;

}

void sub_1BE7A1B6C()
{
  void *v0;

  v0 = (void *)qword_1EF568258;
  qword_1EF568258 = (uint64_t)&unk_1E7827470;

}

void sub_1BE7A1DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7A1F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A1F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A1F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A2014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A2024()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;

  v0 = (void *)objc_opt_class();
  objc_msgSend_alternativeCharacterForms(v0, v1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v6, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsJoinedByString_(v12, v13, (uint64_t)&stru_1E77F6F28, v14, v15, v16);
  v23 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v17, (uint64_t)v23, v18, v19, v20);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)qword_1EF568260;
  qword_1EF568260 = v21;

}

void sub_1BE7A20AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7A20C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A20D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A2290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7A22D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a13);
  v16 = v14;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7A2304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A2318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A2328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7A2344(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;

  v9 = a2;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v13 + 24))
  {
    v14 = 1;
  }
  else
  {
    v15 = v9;
    v14 = objc_msgSend_rangeOfString_(*(void **)(a1 + 32), v9, (uint64_t)v9, v10, v11, v12) != 0x7FFFFFFFFFFFFFFFLL;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = v15;
  }
  *(_BYTE *)(v13 + 24) = v14;
  *a7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

}

void sub_1BE7A23C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7A23DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v8 + 24))
  {
    *(_BYTE *)(v8 + 24) = 1;
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, (uint64_t)a5, a6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_containsObject_(v9, v11, (uint64_t)v10, v12, v13, v14);

  }
  *a5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void sub_1BE7A2468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A24BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A2584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7A25A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7A25C4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v45 = a2;
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByTrimmingCharactersInSet_(v45, v9, (uint64_t)v8, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v13, v14, v15, v16, v17, v18))
  {
    if (objc_msgSend_containsObject_(*(void **)(a1 + 32), v19, (uint64_t)v45, v20, v21, v22))
    {
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    else
    {
      objc_msgSend_ch_nonAscenderCharacterSet(MEMORY[0x1E0CB3500], v23, v24, v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_indexesOfCharacters_(v45, v29, (uint64_t)v28, v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      v39 = objc_msgSend_count(v33, v34, v35, v36, v37, v38);
      if (v39 != objc_msgSend_length(v45, v40, v41, v42, v43, v44))
        ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

    }
  }

}

void sub_1BE7A26BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7A26D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7A26F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7A270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7A2724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7A2738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7A2878(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7A288C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7A28A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7A28B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE6F2154(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7A28EC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double MidX;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  CGRect v20;
  CGRect v21;

  v4 = a2;
  v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  MidX = CGRectGetMidX(v20);
  objc_msgSend_bounds(v5, v12, v13, v14, v15, v16);
  v17 = CGRectGetMidX(v21);
  if (MidX < v17)
    v18 = -1;
  else
    v18 = MidX > v17;

  return v18;
}

void sub_1BE7A295C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A2970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A2AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE7A2B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A2B24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  id obj;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(a2, (const char *)a2, a3, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v8, v10, (uint64_t)v9, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v7, v15, (uint64_t)v14, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  obj = *(id *)(a1 + 40);
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v54, (uint64_t)v58, 16, v21);
  if (v22)
  {
    v23 = *(_QWORD *)v55;
    while (2)
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v55 != v23)
          objc_enumerationMutation(obj);
        v25 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
        v26 = (void *)MEMORY[0x1E0C99E60];
        v27 = (void *)objc_opt_class();
        objc_msgSend_strokeIdentifiers(v25, v28, v29, v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_encodedStrokeIdentifiers_withStrokeProvider_(v27, v34, (uint64_t)v33, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 96), v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setWithArray_(v26, v38, (uint64_t)v37, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend_isEqualToSet_(v42, v43, (uint64_t)v19, v44, v45, v46))
        {
          objc_msgSend_addObject_(*(void **)(a1 + 56), v47, (uint64_t)v25, v48, v49, v50);

          goto LABEL_11;
        }

      }
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v54, (uint64_t)v58, 16, v52);
      if (v22)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_1BE7A2CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7A33C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);
  sub_1BE6F2154((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BE7A3424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A3438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7A3448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A345C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A438C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *v63;
  void *v64;
  void *v65;
  void *v67;
  void *v68;

  if (__p)
  {
    operator delete(__p);
    v67 = a32;
    if (!a32)
    {
LABEL_3:
      v68 = a43;
      if (!a43)
      {
LABEL_8:

        if (a56)
          operator delete(a56);
        sub_1BE63CEBC(&a59);
        if (a62)
        {
          a63 = (uint64_t)a62;
          operator delete(a62);
        }

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v68);
      goto LABEL_8;
    }
  }
  else
  {
    v67 = a32;
    if (!a32)
      goto LABEL_3;
  }
  operator delete(v67);
  v68 = a43;
  if (!a43)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1BE7A45C8(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_1BE7A48FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A4914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A492C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7A4940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7A4E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1BE7A52F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE7A59CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE7A5D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7A6348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7A7704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  sub_1BE6F2154((uint64_t)&STACK[0x480]);
  sub_1BE7A79B4((uint64_t)&STACK[0x500]);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7A79B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

char **sub_1BE7A7A24(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_1BE6F5A88(a1, *a2, a2[1], (a2[1] - *a2) >> 4);
    sub_1BE6F5A88(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 4);
    sub_1BE6F5A88(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 4);
    sub_1BE6F5A88(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 4);
  }
  return a1;
}

void sub_1BE7A81B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1BE7A9258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  _Unwind_Resume(a1);
}

void sub_1BE7A979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7A9C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7AA6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);

  _Unwind_Resume(a1);
}

void sub_1BE7AAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7AB758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;
  void *v48;

  sub_1BE6F2154((uint64_t)&a47);
  _Unwind_Resume(a1);
}

BOOL sub_1BE7ABA90(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  _BOOL8 v23;

  v3 = a2;
  objc_msgSend_floatValue(v3, v4, v5, v6, v7, v8);
  v10 = v9;
  objc_msgSend_firstObject(*(void **)(a1 + 32), v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_floatValue(v16, v17, v18, v19, v20, v21);
  v23 = v10 > v22;

  return v23;
}

void sub_1BE7ABAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7ABB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7ACA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  void *v56;
  void *v57;

  if (__p)
    operator delete(__p);

  sub_1BE6F2154(a19);
  _Unwind_Resume(a1);
}

BOOL sub_1BE7ACC7C(uint64_t a1, NSString *a2)
{
  double v3;
  double v4;
  float *v6;
  float *v7;

  parseFloatsFromString(a2, (char **)&v6);
  if ((char *)v7 - (char *)v6 == 8)
  {
    v3 = *v6;
    v4 = v6[1];
LABEL_4:
    v7 = v6;
    operator delete(v6);
    return v4 - v3 * *(double *)(a1 + 32) > *(double *)(a1 + 40);
  }
  v3 = *MEMORY[0x1E0C9D538];
  v4 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  if (v6)
    goto LABEL_4;
  return v4 - v3 * *(double *)(a1 + 32) > *(double *)(a1 + 40);
}

void sub_1BE7AD660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  void *v52;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

__n128 sub_1BE7AD8E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE7AD908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

void sub_1BE7AD984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  void *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *__src;
  __int128 v36;

  v2 = a2;
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = **(_QWORD **)(a1 + 48);
  v6 = (void **)(v5 + 24 * a2);
  v7 = (_QWORD *)v4[7];
  v8 = v4[8];
  if ((unint64_t)v7 >= v8)
  {
    v15 = (_QWORD *)v4[6];
    v16 = 0xAAAAAAAAAAAAAAABLL * (v7 - v15);
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F930();
    v17 = *v6;
    v18 = v6[1];
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v15) >> 3);
    v20 = 2 * v19;
    if (2 * v19 <= v16 + 1)
      v20 = v16 + 1;
    if (v19 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v20;
    if (v21)
    {
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F100();
      v22 = (char *)operator new(24 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[8 * (v7 - v15)];
    v24 = &v22[24 * v21];
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)&v36 + 1) = v24;
    *((_QWORD *)v23 + 2) = 0;
    *(_QWORD *)v23 = 0;
    v25 = v18 - v17;
    if (v25)
    {
      if (v25 < 0)
        sub_1BE61F930();
      __src = v17;
      v26 = (char *)operator new(v25);
      *(_QWORD *)v23 = v26;
      v27 = &v26[16 * (v25 >> 4)];
      *((_QWORD *)v23 + 2) = v27;
      memcpy(v26, __src, v25);
      *((_QWORD *)v23 + 1) = v27;
    }
    v14 = v23 + 24;
    *(_QWORD *)&v36 = v23 + 24;
    if (v7 == v15)
    {
      v4[6] = v23;
      v4[7] = v14;
      v4[8] = v24;
      v2 = a2;
    }
    else
    {
      do
      {
        v28 = v23;
        *((_QWORD *)v23 - 2) = 0;
        *((_QWORD *)v23 - 1) = 0;
        v29 = *(_OWORD *)(v7 - 3);
        v7 -= 3;
        *(_OWORD *)(v23 - 24) = v29;
        v23 -= 24;
        *((_QWORD *)v28 - 1) = v7[2];
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      while (v7 != v15);
      v7 = (_QWORD *)v4[6];
      v30 = (_QWORD *)v4[7];
      v4[6] = v23;
      *(_OWORD *)(v4 + 7) = v36;
      v14 = (_QWORD *)v36;
      v2 = a2;
      if (v30 != v7)
      {
        v31 = v30;
        do
        {
          v33 = (void *)*(v31 - 3);
          v31 -= 3;
          v32 = v33;
          if (v33)
          {
            *(v30 - 2) = v32;
            operator delete(v32);
          }
          v30 = v31;
        }
        while (v31 != v7);
      }
    }
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v9 = *v6;
    v10 = *(_BYTE **)(v5 + 24 * a2 + 8);
    v11 = v10 - (_BYTE *)*v6;
    if (v10 != *v6)
    {
      if (v11 < 0)
        sub_1BE61F930();
      v12 = (char *)operator new(v10 - (_BYTE *)*v6);
      *v7 = v12;
      v7[1] = v12;
      v13 = &v12[16 * (v11 >> 4)];
      v7[2] = v13;
      memcpy(v12, v9, v11);
      v7[1] = v13;
    }
    v14 = v7 + 3;
    v4[7] = v7 + 3;
  }
  v4[7] = v14;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += (uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 48)
                                                                                     + 24 * v2
                                                                                     + 8)
                                                                         - *(_QWORD *)(**(_QWORD **)(a1 + 48) + 24 * v2)) >> 4;
}

void sub_1BE7ADC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  _QWORD *v5;
  void *v7;
  va_list va;

  va_start(va, a4);
  v7 = *v4;
  if (*v4)
  {
    *v5 = v7;
    operator delete(v7);
  }
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE7ADC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v2 + 56) = v1;
  _Unwind_Resume(exception_object);
}

void sub_1BE7AE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  operator delete(v27);
  operator delete(v28);
  operator delete(v30);
  operator delete(v29);
  sub_1BE6F2154((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void sub_1BE7AE4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7AE8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (a16)
    {
LABEL_6:
      operator delete(v18);

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v18 = a16;
    if (a16)
      goto LABEL_6;
  }

  _Unwind_Resume(a1);
}

void sub_1BE7AF058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v69;

  sub_1BE6F2154((uint64_t)&a21);
  sub_1BE6F2154((uint64_t)&a33);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1BE6F2154(v67 - 208);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  operator delete(v66);
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
    v69 = *(void **)(v67 - 232);
    if (!v69)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v69 = *(void **)(v67 - 232);
    if (!v69)
      goto LABEL_7;
  }
  *(_QWORD *)(v67 - 224) = v69;
  operator delete(v69);
  goto LABEL_7;
}

double sub_1BE7AF1E0(float64x2_t *a1, double a2, double a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(a1[4], vmlaq_n_f64(vmulq_n_f64(a1[3], a3), a1[2], a2));
  return result;
}

void sub_1BE7B0A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36)
{

  _Unwind_Resume(a1);
}

void sub_1BE7B1624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1BE7B1F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE7B2240(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = *(char **)a1;
  v9 = *(__int128 **)(a1 + 8);
  v10 = a2 - *(_QWORD *)a1;
  v11 = (char *)(*(_QWORD *)a1 + (v10 & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a1 + 16);
  if (a5 > (v12 - (uint64_t)v9) >> 4)
  {
    v13 = a5 + (((char *)v9 - v8) >> 4);
    if (v13 >> 60)
      sub_1BE61F930();
    v14 = v12 - (_QWORD)v8;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        sub_1BE61F100();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[16 * (v10 >> 4)];
    v27 = 16 * a5;
    v28 = &v26[16 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v6;
      v6 += 16;
      *(_OWORD *)v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    v31 = *(char **)a1;
    if (*(char **)a1 != v11)
    {
      v32 = v11;
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v32 - 1);
        v26 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      v9 = *(__int128 **)(a1 + 8);
    }
    v33 = &v17[16 * v16];
    if (v9 != (__int128 *)v11)
      memmove(v28, v11, (char *)v9 - v11);
    v34 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v28[(char *)v9 - v11];
    *(_QWORD *)(a1 + 16) = v33;
    if (v34)
      operator delete(v34);
    return;
  }
  v18 = ((char *)v9 - v11) >> 4;
  if (v18 >= a5)
  {
    v19 = &__src[16 * a5];
    v21 = *(char **)(a1 + 8);
    v22 = &v11[16 * a5];
    v23 = &v9[-a5];
    v24 = v21;
    if (v23 >= v9)
    {
LABEL_21:
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v11, v21 - v22);
      if (v19 != v6)
        memmove(v11, v6, v19 - v6);
      return;
    }
LABEL_19:
    v24 = v21;
    do
    {
      v25 = *v23++;
      *(_OWORD *)v24 = v25;
      v24 += 16;
    }
    while (v23 < v9);
    goto LABEL_21;
  }
  v19 = &__src[16 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  v21 = (char *)v9 + v20;
  *(_QWORD *)(a1 + 8) = (char *)v9 + v20;
  if ((char *)v9 - v11 >= 1)
  {
    v22 = &v11[16 * a5];
    v23 = (__int128 *)&v21[-16 * a5];
    v24 = (char *)v9 + v20;
    if (v23 >= v9)
      goto LABEL_21;
    goto LABEL_19;
  }
}

void sub_1BE7B2738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_1BE7B27E8(uint64_t a1, void *a2, void *a3, uint64_t a4, BOOL *a5, _QWORD *a6)
{
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  void *v51;
  _QWORD v52[5];
  _QWORD v53[5];

  v10 = a2;
  v11 = a3;
  v51 = v10;
  objc_opt_self();
  objc_msgSend_swappableColumnIndexesFromResults_locales_topLocaleIndex_(CHRecognizerConfiguration, v12, (uint64_t)v10, (uint64_t)v11, a4, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = sub_1BE7B2A78;
  v53[3] = &unk_1E77F5050;
  v53[4] = a4;
  v20 = objc_msgSend_indexOfObjectPassingTest_(v14, v16, (uint64_t)v53, v17, v18, v19);
  v52[0] = v15;
  v52[1] = 3221225472;
  v52[2] = sub_1BE7B2AD0;
  v52[3] = &unk_1E77F5050;
  v52[4] = a4;
  v25 = objc_msgSend_indexOfObjectPassingTest_(v14, v21, (uint64_t)v52, v22, v23, v24);
  v30 = v51;
  if (v25 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend_objectAtIndexedSubscript_(v11, v26, a4, v27, v28, v29);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = v30;
    if (v20 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_6;
    goto LABEL_5;
  }
  objc_msgSend_objectAtIndexedSubscript_(v14, v26, 0, v27, v28, v29);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v31, v32, 0, v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend_intValue(v36, v37, v38, v39, v40, v41);
  objc_msgSend_objectAtIndexedSubscript_(v11, v43, v42, v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  v49 = v30;
  if (v20 != 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_5:
    objc_msgSend_resultsBySwapping_swappableColumns_locales_topLocaleIndex_topLocale_(CHTokenizedTextResult, v48, (uint64_t)v30, (uint64_t)v14, (uint64_t)v11, a4, v47);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_6:
  if (a5)
    *a5 = v20 != 0x7FFFFFFFFFFFFFFFLL;
  if (a6)
    *a6 = objc_retainAutorelease(v47);

  return v49;
}

void sub_1BE7B29E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE7B2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7B2A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7B2A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL sub_1BE7B2A78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;

  objc_msgSend_objectAtIndexedSubscript_(a2, (const char *)a2, 0, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(a1 + 32) != (int)objc_msgSend_intValue(v7, v8, v9, v10, v11, v12);

  return v13;
}

void sub_1BE7B2AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE7B2AD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;

  objc_msgSend_objectAtIndexedSubscript_(a2, (const char *)a2, 0, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(a1 + 32) == (int)objc_msgSend_intValue(v7, v8, v9, v10, v11, v12);

  return v13;
}

void sub_1BE7B2B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B2E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE7B2F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B301C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B319C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7B31C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B31DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B31F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B3204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B3218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B3294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B33BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7B33D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);
  v8 = v7;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7B33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7B3410(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v18 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_hash(v18, v7, v8, v9, v10, v11)
                                                              - v6
                                                              + 32 * v6;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_hash(v5, v13, v14, v15, v16, v17)
                                                              - v12
                                                              + 32 * v12;

}

void sub_1BE7B34A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7B3658(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint8_t v17[8];
  id v18;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend_function(*(void **)(*(_QWORD *)(a1 + 32) + 8), v2, v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  objc_msgSend_prepareForExecutionWithError_(v7, v8, (uint64_t)&v18, v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v18;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 16);
  *(_QWORD *)(v14 + 16) = v12;

  if (v13)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v16 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1BE607000, v16, OS_LOG_TYPE_ERROR, "Could not prepare CHE5MLExecutionContext for execution.", v17, 2u);
    }

  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 32));
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16))();

}

void sub_1BE7B42A8(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v5 = a3;
  v6 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHE5MLContextExecution", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHE5MLContextExecution\"", v11, 2u);
  }

  (*(void (**)(void))(a1[5] + 16))();
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 32));
}

void sub_1BE7B452C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B45F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B460C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B46D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B46EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B46FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t compareCellsByPosition(objc_object *a1, objc_object *a2, void *a3)
{
  objc_object *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a2;
  v10 = objc_msgSend_inputRange(a1, v5, v6, v7, v8, v9);
  v12 = v11;
  v17 = objc_msgSend_inputRange(v4, v11, v13, v14, v15, v16);
  v18 = 1;
  v20 = (unint64_t)&v12[v10] > v17 + v19;
  if ((unint64_t)&v12[v10] < v17 + v19)
    v20 = -1;
  if (v10 <= v17)
    v18 = v20;
  if (v10 >= v17)
    v21 = v18;
  else
    v21 = -1;

  return v21;
}

void sub_1BE7B478C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B479C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t compareCellsByProbability(objc_object *a1, objc_object *a2, void *a3)
{
  objc_object *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v4 = a2;
  objc_msgSend_probability(a1, v5, v6, v7, v8, v9);
  v11 = v10;
  objc_msgSend_probability(v4, v12, v13, v14, v15, v16);
  if (v11 > v17)
    v18 = -1;
  else
    v18 = v11 < v17;

  return v18;
}

void sub_1BE7B4800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B4810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t compareRangesByPosition(objc_object *a1, objc_object *a2, void *a3)
{
  objc_object *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v18;

  v4 = a2;
  v9 = objc_msgSend_rangeFromString_(CHParseTableCell, v5, (uint64_t)a1, v6, v7, v8);
  v11 = v10;
  v15 = objc_msgSend_rangeFromString_(CHParseTableCell, v10, (uint64_t)v4, v12, v13, v14);
  if (v9 < v15)
    goto LABEL_5;
  if (v9 > v15)
  {

    return 1;
  }
  if ((unint64_t)&v11[v9] >= v15 + v16)
  {
    v18 = (unint64_t)&v11[v9] > v15 + v16;

    return v18;
  }
  else
  {
LABEL_5:

    return -1;
  }
}

void sub_1BE7B48D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B48E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B4944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B4A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B4A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B4A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B4A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B4C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B4CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B4CC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B4D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7B4E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE7B4E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7B4F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE7B4F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B5038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B504C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B505C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B5074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B508C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B50A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B51F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B5318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE7B5340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE7B5350(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSRange v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v32;
  NSRange v34;

  v3 = a2;
  objc_msgSend_nonTerminal(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_name(v9, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v15, v16, *(_QWORD *)(a1 + 32), v17, v18, v19))
  {
    v34.location = objc_msgSend_inputRange(v3, v20, v21, v22, v23, v24);
    v25 = NSIntersectionRange(v34, *(NSRange *)(a1 + 40));
    v32 = v25.location == objc_msgSend_inputRange(v3, (const char *)v25.length, v26, v27, v28, v29) && v25.length == v30;
  }
  else
  {
    v32 = 0;
  }

  return v32;
}

void sub_1BE7B53EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B5400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B5410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B54CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE7B5C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7B5C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B5C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B5C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B5C8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int isEqualToString;
  double v35;
  double v36;
  CHTerminal *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  CHNonTerminal *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  CHParseTableCell *v57;
  const char *v58;
  uint64_t v59;
  void *inited;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CHParseTree *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id obj;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  objc_msgSend_grammar(*(void **)(a1 + 32), v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_terminalProductions(v11, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  obj = v17;
  v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v107, (uint64_t)v111, 16, v19);
  if (v25)
  {
    v26 = *(_QWORD *)v108;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v108 != v26)
          objc_enumerationMutation(obj);
        v28 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * i);
        objc_msgSend_rightNode1(v28, v20, v21, v22, v23, v24);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v5, v31, v32, v33);

        if (isEqualToString)
        {
          objc_msgSend_probability(v28, v20, v21, v22, v23, v24);
          v36 = v35;
          if (v35 > 0.0)
          {
            v37 = [CHTerminal alloc];
            objc_msgSend_rightNode1(v28, v38, v39, v40, v41, v42);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = (void *)objc_msgSend_initWithName_inputRange_(v37, v44, (uint64_t)v43, a3, a4, v45);

            v47 = [CHNonTerminal alloc];
            objc_msgSend_leftNode(v28, v48, v49, v50, v51, v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v56 = (void *)objc_msgSend_initWithName_leftNode_rightNode_(v47, v54, (uint64_t)v53, (uint64_t)v46, 0, v55);

            v57 = [CHParseTableCell alloc];
            inited = (void *)objc_msgSend_initNonTerminal_range_(v57, v58, (uint64_t)v56, a3, a4, v59);
            objc_msgSend_setRule_(inited, v61, (uint64_t)v28, v62, v63, v64);
            objc_msgSend_setTerminal_(inited, v65, (uint64_t)v46, v66, v67, v68);
            objc_msgSend_setProbability_(inited, v69, v70, v71, v72, v73, v36);
            v74 = [CHParseTree alloc];
            objc_msgSend_grammar(*(void **)(a1 + 32), v75, v76, v77, v78, v79);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            v85 = (void *)objc_msgSend_initWithGrammar_(v74, v81, (uint64_t)v80, v82, v83, v84);
            objc_msgSend_setParseTree_(inited, v86, (uint64_t)v85, v87, v88, v89);

            objc_msgSend_parseTree(inited, v90, v91, v92, v93, v94);
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setRoot_(v95, v96, (uint64_t)v56, v97, v98, v99);

            objc_msgSend_addCell_(*(void **)(a1 + 40), v100, (uint64_t)inited, v101, v102, v103);
          }
        }
      }
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v107, (uint64_t)v111, 16, v24);
    }
    while (v25);
  }

}

void sub_1BE7B5F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE7B6128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7B61A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7B61C0(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t isEqualToString;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4, v5, v6) == 1)
  {
    objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v1, v13, (uint64_t)v12, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_length(v17, v18, v19, v20, v21, v22);

    if (v23 && (objc_msgSend_isEqualToString_(v1, v24, (uint64_t)CFSTR("."), v25, v26, v27) & 1) == 0)
    {
      isEqualToString = objc_msgSend_isEqualToString_(v1, v28, (uint64_t)CFSTR("."), v29, v30, v31);

      return isEqualToString;
    }
    else
    {

      return 1;
    }
  }
  else
  {

    return 0;
  }
}

void sub_1BE7B6298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B62B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B62C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B73B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v40;
  void *v41;

  v40 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v40;
    operator delete(v40);
  }
  v41 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v41;
    operator delete(v41);
  }

  _Unwind_Resume(a1);
}

void sub_1BE7B7754(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE7B7DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7B7DD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7B7DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7B7E04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7B84C0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
    return -1;
  else
    return 1;
}

void sub_1BE7B8598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7B85B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7B85C0(uint64_t a1)
{

}

void sub_1BE7B85C8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 72));
}

void sub_1BE7B8E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  uint64_t v34;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a27, 8);

  _Block_object_dispose((const void *)(v34 - 176), 8);
  _Block_object_dispose((const void *)(v34 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1BE7B8F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7B8F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B8F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B8F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7B8F84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7B8F94(uint64_t a1)
{

}

void sub_1BE7B8F9C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE7B90A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7B90B8(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v10 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E38;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_localizedDescription(v10, v12, v13, v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v17;
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEBUG, "Error during recognition: %@", (uint8_t *)&v18, 0xCu);

    }
  }
  objc_msgSend_logDrawingsAndResultsForRequest_result_error_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 40), (uint64_t)v6, (uint64_t)v10, v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

}

void sub_1BE7B921C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7B9334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7B936C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B93E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7B9514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7BC780(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("+"), a4, a5, a6, CFSTR("-"), CFSTR("\\times"), CFSTR("\\cdot"), CFSTR("*"), CFSTR("\\div"), CFSTR("/"), CFSTR(":"), 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568278;
  qword_1EF568278 = v6;

}

void sub_1BE7BC888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7BC898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7BC8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::describe(CoreHandwriting *this, const CoreHandwriting::BoundingBox *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("x_min = %.2f, y_min = %.2f, x_max = %.2f, y_max = %.2f"), a4, a5, a6, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)this + 1), *((_QWORD *)this + 3));
}

id CoreHandwriting::writeObjectToFileInFolder(CoreHandwriting *this, objc_object *a2, NSURL *a3, NSString *a4)
{
  CoreHandwriting *v6;
  objc_object *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char DirectoryAtURL_withIntermediateDirectories_attributes_error;
  id v26;
  id v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  objc_class *v35;
  objc_object *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  NSURL *v56;
  id v57;
  id v58;
  uint8_t buf[4];
  objc_object *v60;
  __int16 v61;
  id v62;
  __int16 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = this;
  v7 = a2;
  v56 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  objc_msgSend_absoluteString(v7, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_fileExistsAtPath_(v8, v15, (uint64_t)v14, v16, v17, v18);

  if ((v19 & 1) != 0)
  {
    v24 = 0;
LABEL_5:
    objc_msgSend_URLByAppendingPathComponent_(v7, v20, (uint64_t)v56, v21, v22, v23);
    v28 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], v29, (uint64_t)v6, 1, 0, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = v24;
    objc_msgSend_writeToURL_options_error_(v31, v32, (uint64_t)v28, 1, (uint64_t)&v57, v33);
    v27 = v57;

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v34 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = (objc_class *)objc_opt_class();
      NSStringFromClass(v35);
      v36 = (objc_object *)(id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_absoluteString(v28, v37, v38, v39, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_description(v27, v43, v44, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v60 = v36;
      v61 = 2112;
      v62 = v42;
      v63 = 2112;
      v64 = v48;
      _os_log_impl(&dword_1BE607000, v34, OS_LOG_TYPE_DEFAULT, "%@ saving at URL %@, error = %@", buf, 0x20u);

    }
    if (v27)
    {
      v54 = 0;
    }
    else
    {
      objc_msgSend_absoluteString(v28, v49, v50, v51, v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_18;
  }
  v58 = 0;
  DirectoryAtURL_withIntermediateDirectories_attributes_error = objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(v8, v20, (uint64_t)v7, 1, 0, (uint64_t)&v58);
  v26 = v58;
  v27 = v26;
  if ((DirectoryAtURL_withIntermediateDirectories_attributes_error & 1) != 0)
  {
    v24 = v26;
    goto LABEL_5;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v28 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412546;
    v60 = v7;
    v61 = 2112;
    v62 = v27;
    _os_log_impl(&dword_1BE607000, v28, OS_LOG_TYPE_ERROR, "Unable to create folder at URL %@: Error %@", buf, 0x16u);
  }
  v54 = 0;
LABEL_18:

  return v54;
}

void sub_1BE7BCC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE7BCD10()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  void *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.CHGroupingModel.queue", v0);
  v2 = (void *)qword_1EF568280;
  qword_1EF568280 = (uint64_t)v1;

  v3 = (void *)qword_1EF568288;
  qword_1EF568288 = 0;

}

void sub_1BE7BCE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE7BCE44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7BCE54(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  unint64_t v17;
  __int128 *p_p;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  BOOL v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  CHGroupingModel *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **__dst;
  size_t v36;
  int64_t v37;
  __int128 __p;
  unint64_t v39;
  char __s[1024];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!qword_1EF568288)
  {
    v2 = objc_retainAutorelease(*(id *)(a1 + 32));
    v8 = (const char *)objc_msgSend_UTF8String(v2, v3, v4, v5, v6, v7);
    pathForResource(v8, 0, (UInt8 *)__s);
    v9 = strlen(__s);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      sub_1BE61F1B4();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      v36 = v10;
      v37 = v13 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v37) = v9;
      p_dst = (void **)&__dst;
      if (!v9)
      {
LABEL_10:
        *((_BYTE *)p_dst + v10) = 0;
        v14 = operator new();
        *(_QWORD *)(v14 + 48) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
        v15 = SHIBYTE(v37);
        if (v37 >= 0)
          v16 = HIBYTE(v37);
        else
          v16 = v36;
        v17 = v16 + 19;
        if (v16 + 19 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
        if (v17 >= 0x17)
        {
          v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v19 = v17 | 7;
          v20 = v19 + 1;
          p_p = (__int128 *)operator new(v19 + 1);
          *((_QWORD *)&__p + 1) = v16 + 19;
          v39 = v20 | 0x8000000000000000;
          *(_QWORD *)&__p = p_p;
        }
        else
        {
          v39 = 0;
          __p = 0uLL;
          p_p = &__p;
          HIBYTE(v39) = v16 + 19;
          if (!v16)
            goto LABEL_24;
        }
        if (v15 >= 0)
          v21 = (void **)&__dst;
        else
          v21 = __dst;
        memmove(p_p, v21, v16);
LABEL_24:
        strcpy((char *)p_p + v16, "/model.espresso.net");
        v22 = sub_1BE7E77FC((uint64_t *)v14);
        v23 = v22;
        if (SHIBYTE(v39) < 0)
        {
          operator delete((void *)__p);
          if (v23)
            goto LABEL_33;
        }
        else if (v22)
        {
LABEL_33:
          v26 = [CHGroupingModel alloc];
          v29 = objc_msgSend_initWithModelName_model_contentType_(v26, v27, *(_QWORD *)(a1 + 32), v14, *(_QWORD *)(a1 + 40), v28);
          v30 = (void *)qword_1EF568288;
          qword_1EF568288 = v29;

          objc_msgSend_logModelLoaded_(CHPowerLogging, v31, 1, v32, v33, v34);
          if (v15 < 0)
            operator delete(__dst);
          return;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v24 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
        {
          v25 = *(_QWORD *)(a1 + 32);
          LODWORD(__p) = 138412290;
          *(_QWORD *)((char *)&__p + 4) = v25;
          _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_FAULT, "Error loading Espresso model %@", (uint8_t *)&__p, 0xCu);
        }

        goto LABEL_33;
      }
    }
    memcpy(p_dst, __s, v10);
    goto LABEL_10;
  }
}

void sub_1BE7BD140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  char v21;

  if (a21 < 0)
    operator delete(__p);
  if (v21 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE7BD2A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7BD38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHGroupingModel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7BD614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7BD88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7BDA84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7BDAFC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double MidY;
  uint64_t v31;
  double v32;
  CGFloat rect;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v4 = a3;
  objc_msgSend_bounds(a2, v5, v6, v7, v8, v9);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  objc_msgSend_bounds(v4, v18, v19, v20, v21, v22);
  rect = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v35.origin.x = v11;
  v35.origin.y = v13;
  v35.size.width = v15;
  v35.size.height = v17;
  MidY = CGRectGetMidY(v35);
  v36.origin.x = rect;
  v36.origin.y = v25;
  v36.size.width = v27;
  v36.size.height = v29;
  if (MidY >= CGRectGetMidY(v36))
  {
    v37.origin.x = v11;
    v37.origin.y = v13;
    v37.size.width = v15;
    v37.size.height = v17;
    v32 = CGRectGetMidY(v37);
    v38.origin.x = rect;
    v38.origin.y = v25;
    v38.size.width = v27;
    v38.size.height = v29;
    v31 = v32 > CGRectGetMidY(v38);
  }
  else
  {
    v31 = -1;
  }

  return v31;
}

void sub_1BE7BDBF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7BDC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7BDEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7BE110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7BE6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1BE7C072C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,_QWORD *a62,uint64_t a63)
{
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;

  operator delete(__p);

  if (a62)
  {
    v64 = (_QWORD *)a63;
    v65 = a62;
    if ((_QWORD *)a63 != a62)
    {
      do
      {
        v66 = (_QWORD *)*(v64 - 3);
        if (v66)
        {
          do
          {
            v67 = (_QWORD *)*v66;
            operator delete(v66);
            v66 = v67;
          }
          while (v67);
        }
        v69 = (void *)*(v64 - 5);
        v64 -= 5;
        v68 = v69;
        *v64 = 0;
        if (v69)
          operator delete(v68);
      }
      while (v64 != a62);
      v65 = a62;
    }
    operator delete(v65);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE7C0AB0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE7C0AD4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = *(_QWORD **)(a1 + 48);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 56) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v1);
      v9 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 56) = v1;
      operator delete(v9);
    }
  }
}

void sub_1BE7C0B70(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  std::string::size_type v45;
  std::string *p_dst;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _BOOL4 v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _BOOL4 v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _BOOL4 v99;
  _BOOL4 v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  _BOOL4 v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  uint64_t v131;
  float *v132;
  int64_t v133;
  uint64_t v134;
  float *v135;
  float v136;
  void *v137;
  void *v138;
  _BOOL4 v139;
  id v140;
  id v141;
  id v142;
  id v143;
  std::string __dst;
  float *v145;
  const __CFString *v146;
  _QWORD v147[3];

  v147[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(CHStrokeUtilities, a2, *(_QWORD *)(a1 + 32), 0, 1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_normalizedDrawing_(*(void **)(a1 + 40), v4, (uint64_t)v3, v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();

  v9 = *(void **)(a1 + 40);
  v137 = (void *)v8;
  v15 = objc_msgSend_count(*(void **)(a1 + 32), v10, v11, v12, v13, v14);
  v20 = objc_msgSend__closestConfigurationForInputStrokes_(v9, v16, v15, v17, v18, v19);
  objc_msgSend_extractBBoxFeaturesForDrawing_padTo_(*(void **)(a1 + 40), v21, v8, v20, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_extractSignalFeaturesFromDrawing_padTo_(*(void **)(a1 + 40), v25, v8, v20, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_extractSignalMaskFromDrawing_padTo_(*(void **)(a1 + 40), v29, v8, v20, v30, v31);
  v140 = (id)objc_claimAutoreleasedReturnValue();
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v33, (uint64_t)CFSTR("s%ld"), v34, v35, v36, v20);
  v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v43 = (const char *)objc_msgSend_UTF8String(v37, v38, v39, v40, v41, v42);
  v44 = strlen(v43);
  if (v44 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    p_dst = (std::string *)operator new(v47 + 1);
    __dst.__r_.__value_.__l.__size_ = v45;
    __dst.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v44;
  p_dst = &__dst;
  if (v44)
LABEL_8:
    memmove(p_dst, v43, v45);
  p_dst->__r_.__value_.__s.__data_[v45] = 0;
  v139 = sub_1BE7E7D10(v32, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);

  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v143 = objc_retainAutorelease(v24);
  v55 = objc_msgSend_dataPointer(v143, v50, v51, v52, v53, v54);
  v61 = objc_msgSend_numBBoxFeaturesPerStroke(*(void **)(a1 + 40), v56, v57, v58, v59, v60);
  v62 = operator new(0x20uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 4);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v62 + 4);
  *v62 = 1;
  v62[1] = v20;
  v62[2] = 1;
  v62[3] = v61;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  v63 = sub_1BE7E7A2C(v49, v55);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v64 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v142 = objc_retainAutorelease(v28);
  v70 = objc_msgSend_dataPointer(v142, v65, v66, v67, v68, v69);
  v76 = objc_msgSend_maxNumPointsPerStroke(*(void **)(a1 + 40), v71, v72, v73, v74, v75);
  v82 = objc_msgSend_numSignalFeaturesPerPoint(*(void **)(a1 + 40), v77, v78, v79, v80, v81);
  v83 = operator new(0x20uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v83 + 4);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v83 + 4);
  *v83 = 1;
  v83[1] = v20;
  v83[2] = v76;
  v83[3] = v82;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
  v84 = sub_1BE7E7A2C(v64, v70);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v85 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v141 = objc_retainAutorelease(v140);
  v91 = objc_msgSend_dataPointer(v141, v86, v87, v88, v89, v90);
  v97 = objc_msgSend_maxNumPointsPerStroke(*(void **)(a1 + 40), v92, v93, v94, v95, v96);
  v98 = operator new(0x20uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v98 + 4);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v98 + 4);
  *v98 = 1;
  v98[1] = v20;
  v98[2] = v97;
  v98[3] = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  v99 = sub_1BE7E7A2C(v85, v91);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v100 = CoreHandwriting::EspressoModelWrapper::bindOutput(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), (uint64_t)&v145, (uint64_t)"adjacency_matrix", 1);
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v101, v102, v103, v104, v105);
  v107 = v106;
  v108 = CoreHandwriting::EspressoModelWrapper::execute(*(CoreHandwriting::EspressoModelWrapper **)(*(_QWORD *)(a1 + 40)
                                                                                                  + 16));
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v109, v110, v111, v112, v113);
  v115 = v114;
  v146 = CFSTR("inputStrokeCount");
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v116, *(_QWORD *)(a1 + 56), v117, v118, v119);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v147[0] = v120;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v121, (uint64_t)v147, (uint64_t)&v146, 1, v122);
  v123 = objc_claimAutoreleasedReturnValue();

  v138 = (void *)v123;
  objc_msgSend_logModelInference_startTimestamp_endTimestamp_data_(CHPowerLogging, v124, 1, v123, v125, v126, v107, v115);
  if (!v139 || !v63 || !v84 || !v99 || !v100 || !v108)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v127 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v127, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BE607000, v127, OS_LOG_TYPE_FAULT, "CHGroupingModel inference failed", (uint8_t *)&__dst, 2u);
    }

  }
  v128 = *(_QWORD *)(a1 + 56);
  if (v128 >= 1)
  {
    v129 = 0;
    v130 = v145;
    v131 = 4 * v20;
    v132 = v145;
    do
    {
      if (v128 >= 1)
      {
        v133 = 0;
        v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) + 40 * v129;
        v135 = v132;
        do
        {
          v136 = v130[v133];
          if (v136 > 0.1 && *v135 > 0.1)
          {
            __dst.__r_.__value_.__r.__words[0] = v133;
            *((float *)sub_1BE7C16F0(v134, v133, &__dst) + 6) = v136;
            v128 = *(_QWORD *)(a1 + 56);
          }
          ++v133;
          v135 = (float *)((char *)v135 + v131);
        }
        while (v133 < v128);
      }
      ++v129;
      ++v132;
      v130 = (float *)((char *)v130 + v131);
    }
    while (v129 < v128);
  }

}

void sub_1BE7C10F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{

  _Unwind_Resume(a1);
}

void sub_1BE7C12A8(char **a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(float **)(**(_QWORD **)a2 + 40 * a3 + 16);
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (v3[6] <= *(float *)(a2 + 8))
        goto LABEL_5;
      if (v8 >= v7)
        break;
      *(_QWORD *)v8 = *((_QWORD *)v3 + 2);
      v9 = (uint64_t)(v8 + 8);
LABEL_4:
      a1[1] = (char *)v9;
      v8 = (char *)v9;
LABEL_5:
      v3 = *(float **)v3;
      if (!v3)
        return;
    }
    v10 = (v8 - v6) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_1BE61F930();
    if ((v7 - v6) >> 2 > v11)
      v11 = (v7 - v6) >> 2;
    if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 61)
        sub_1BE61F100();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v10];
      *(_QWORD *)v14 = *((_QWORD *)v3 + 2);
      v9 = (uint64_t)(v14 + 8);
      v15 = v8 - v6;
      if (v8 == v6)
        goto LABEL_22;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v10);
      *(_QWORD *)(8 * v10) = *((_QWORD *)v3 + 2);
      v9 = 8 * v10 + 8;
      v15 = v8 - v6;
      if (v8 == v6)
        goto LABEL_22;
    }
    v16 = v15 - 8;
    if (v16 >= 0x168)
    {
      v19 = (v8 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
      if (&v13[v8 - v6 - 8 - v19] > &v13[v8 - v6 - 8])
      {
        v17 = v8;
      }
      else if (&v8[-v19 - 8] > v8 - 8)
      {
        v17 = v8;
      }
      else if ((unint64_t)(v6 - v13) >= 0x20)
      {
        v20 = (v16 >> 3) + 1;
        v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v17 = &v8[-v21];
        v14 -= v21;
        v22 = &v13[8 * v10 - 16];
        v23 = v8 - 16;
        v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 4;
        }
        while (v24);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          v7 = &v13[8 * v12];
          *a1 = v14;
          a1[1] = (char *)v9;
          a1[2] = v7;
          if (v6)
            operator delete(v6);
          v6 = v14;
          goto LABEL_4;
        }
      }
      else
      {
        v17 = v8;
      }
    }
    else
    {
      v17 = v8;
    }
    do
    {
      v18 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v14 - 1) = v18;
      v14 -= 8;
    }
    while (v17 != v6);
    goto LABEL_22;
  }
}

void sub_1BE7C14C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1BE7C14E0(void **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_1BE61F930();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_1BE61F100();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = v10;
  v11 = a2[2];
  *((_QWORD *)v8 + 2) = v11;
  v12 = a2[3];
  *((_QWORD *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      v15 = v13 >= v10;
      v14 = v13 % v10;
      if (!v15)
        v14 = v13;
    }
    else
    {
      v14 = v13 & (v10 - 1);
    }
    *(_QWORD *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  v16 = &v7[40 * v6];
  v17 = v8 + 40;
  v18 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    v20 = 0;
    do
    {
      v22 = &v8[v20];
      v23 = &v19[v20];
      v24 = *(_QWORD *)&v19[v20 - 40];
      *((_QWORD *)v23 - 5) = 0;
      *((_QWORD *)v22 - 5) = v24;
      *((_QWORD *)v22 - 4) = *(_QWORD *)&v19[v20 - 32];
      *((_QWORD *)v23 - 4) = 0;
      v25 = *(_QWORD *)&v19[v20 - 24];
      *(_QWORD *)&v8[v20 - 24] = v25;
      v26 = *(_QWORD *)&v19[v20 - 16];
      *((_QWORD *)v22 - 2) = v26;
      *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v20 - 8];
      if (v26)
      {
        v21 = *(_QWORD *)(v25 + 8);
        v27 = *((_QWORD *)v22 - 4);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v21 >= v27)
            v21 %= v27;
        }
        else
        {
          v21 &= v27 - 1;
        }
        *(_QWORD *)(v24 + 8 * v21) = &v8[v20 - 24];
        *(_QWORD *)&v19[v20 - 24] = 0;
        *(_QWORD *)&v19[v20 - 16] = 0;
      }
      v20 -= 40;
    }
    while (&v19[v20] != v18);
    v19 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = &v8[v20];
    a1[1] = v17;
    a1[2] = v16;
    while (v28 != v19)
    {
      v29 = (_QWORD *)*((_QWORD *)v28 - 3);
      if (v29)
      {
        do
        {
          v30 = (_QWORD *)*v29;
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
      v32 = (void *)*((_QWORD *)v28 - 5);
      v28 -= 40;
      v31 = v32;
      *(_QWORD *)v28 = 0;
      if (v32)
        operator delete(v31);
    }
  }
  if (v19)
    operator delete(v19);
  return v17;
}

_QWORD *sub_1BE7C16F0(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_1BE61F23C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1BE7C19B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

CoreHandwriting::AttentionBasedMathSegmentation *CoreHandwriting::AttentionBasedMathSegmentation::AttentionBasedMathSegmentation(CoreHandwriting::AttentionBasedMathSegmentation *this, float a2)
{
  uint64_t **v3;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  v3 = (uint64_t **)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  *(float *)this = a2;
  sub_1BE7C849C((uint64_t **)this + 1, "{");
  sub_1BE7C849C(v3, "}");
  sub_1BE7C849C(v3, "_");
  sub_1BE7C849C(v3, "^");
  sub_1BE7C849C(v3, "&");
  sub_1BE7C8720(v3, "\\\\");
  sub_1BE7C849C(v3, "\\");
  sub_1BE7C849C(v3, "[");
  sub_1BE7C849C(v3, "]");
  sub_1BE7C8958(v3, "\\mathrm");
  sub_1BE7C8B90(v3, "\\begin{aligned}");
  sub_1BE7C8DC8(v3, "\\begin{array}{l}");
  sub_1BE7C9000(v3, "\\begin{array}{lr}");
  sub_1BE7C9238(v3, "\\begin{matrix}");
  sub_1BE7C9470(v3, "\\end{aligned}");
  sub_1BE7C96A8(v3, "\\end{array}");
  sub_1BE7C98E0(v3, "\\end{matrix}");
  return this;
}

void sub_1BE7C1B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  sub_1BE61F3E8(v1, *v2);
  _Unwind_Resume(a1);
}

float sub_1BE7C1B38(float a1, uint64_t a2, uint64_t **a3, int a4, _QWORD *a5, uint64_t a6, unint64_t **a7)
{
  unint64_t *v7;
  unint64_t v8;
  float v9;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t *v17;
  int v18;
  int v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  int v23;
  BOOL v24;
  char **v25;
  _DWORD *v26;
  _DWORD *v27;
  char **v28;
  int v29;
  char **v30;
  char **v31;
  char **v32;
  char *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  int v76;

  v7 = *a7;
  v8 = **a7;
  v9 = 0.0;
  if (v8 && v7[1])
  {
    v12 = 0;
    v13 = a3 + 1;
    v71 = a6;
LABEL_6:
    v14 = v7[1];
    if (!v14)
      goto LABEL_5;
    v15 = 0;
    v73 = v12;
    while (1)
    {
      v16 = *(float *)(a6 + 4 * (v15 + v14 * v12));
      if (v16 > a1)
        break;
LABEL_10:
      ++v15;
      v14 = v7[1];
      if (v14 <= v15)
      {
        v8 = *v7;
LABEL_5:
        if (v8 <= ++v12)
          return v9;
        goto LABEL_6;
      }
    }
    v74 = v15;
    v17 = *(uint64_t **)(*(_QWORD *)(*a5 + 24 * v12) + 40 * v15 + 16);
    if (!v17)
    {
LABEL_9:
      a6 = v71;
      v12 = v73;
      v15 = v74;
      goto LABEL_10;
    }
    while (1)
    {
      v19 = *((_DWORD *)v17 + 4);
      v18 = *((_DWORD *)v17 + 5);
      v20 = (char *)*v13;
      v21 = v13;
      v22 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v23 = *((_DWORD *)v22 + 8);
          v24 = v23 < v19;
          if (v23 >= v19)
            v25 = (char **)v22;
          else
            v25 = (char **)(v22 + 8);
          if (!v24)
            v21 = v22;
          v22 = *v25;
        }
        while (*v25);
        if (v21 != v13 && v19 >= *((_DWORD *)v21 + 8))
        {
          v31 = (char **)v13;
          v32 = (char **)v13;
          if (v20)
            goto LABEL_69;
          goto LABEL_73;
        }
        v76 = *((_DWORD *)v17 + 5);
        v26 = operator new(8uLL);
        v27 = v26 + 2;
        *v26 = 0;
        v26[1] = a4;
        while (1)
        {
          while (1)
          {
            v28 = (char **)v20;
            v29 = *((_DWORD *)v20 + 8);
            if (v19 >= v29)
              break;
            v20 = *(char **)v20;
            if (!*v28)
            {
              v30 = v28;
              goto LABEL_38;
            }
          }
          if (v29 >= v19)
            break;
          v20 = (char *)*((_QWORD *)v20 + 1);
          if (!v20)
          {
            v30 = v28 + 1;
            goto LABEL_38;
          }
        }
        v49 = v20 + 40;
        v48 = (void *)*((_QWORD *)v20 + 5);
        if (v48)
        {
LABEL_65:
          *((_QWORD *)v20 + 6) = v48;
          operator delete(v48);
          *v49 = 0;
          v49[1] = 0;
          v49[2] = 0;
        }
      }
      else
      {
        v76 = *((_DWORD *)v17 + 5);
        v26 = operator new(8uLL);
        v27 = v26 + 2;
        *v26 = 0;
        v26[1] = a4;
        v30 = (char **)v13;
        v28 = (char **)v13;
LABEL_38:
        v33 = (char *)operator new(0x40uLL);
        v20 = v33;
        *((_DWORD *)v33 + 8) = v19;
        *((_QWORD *)v33 + 6) = 0;
        *((_QWORD *)v33 + 7) = 0;
        *((_QWORD *)v33 + 5) = 0;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = v28;
        *v30 = v33;
        v34 = (uint64_t *)**a3;
        v35 = v33;
        if (v34)
        {
          *a3 = v34;
          v35 = *v30;
        }
        v36 = (char *)*v13;
        v37 = v35 == (char *)*v13;
        v35[24] = v37;
        if (!v37)
        {
          do
          {
            v38 = *((_QWORD *)v35 + 2);
            if (*(_BYTE *)(v38 + 24))
              break;
            v39 = *(char **)(v38 + 16);
            v40 = *(_QWORD *)v39;
            if (*(_QWORD *)v39 == v38)
            {
              v43 = *((_QWORD *)v39 + 1);
              if (!v43 || (v44 = *(unsigned __int8 *)(v43 + 24), v41 = (_BYTE *)(v43 + 24), v44))
              {
                if (*(char **)v38 == v35)
                {
                  *(_BYTE *)(v38 + 24) = 1;
                  v39[24] = 0;
                  v47 = *(_QWORD *)(v38 + 8);
                  *(_QWORD *)v39 = v47;
                  if (v47)
                    goto LABEL_55;
                }
                else
                {
                  v45 = *(uint64_t **)(v38 + 8);
                  v46 = *v45;
                  *(_QWORD *)(v38 + 8) = *v45;
                  if (v46)
                  {
                    *(_QWORD *)(v46 + 16) = v38;
                    v39 = *(char **)(v38 + 16);
                  }
                  v45[2] = (uint64_t)v39;
                  *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v45;
                  *v45 = v38;
                  *(_QWORD *)(v38 + 16) = v45;
                  v39 = (char *)v45[2];
                  v38 = *(_QWORD *)v39;
                  *((_BYTE *)v45 + 24) = 1;
                  v39[24] = 0;
                  v47 = *(_QWORD *)(v38 + 8);
                  *(_QWORD *)v39 = v47;
                  if (v47)
LABEL_55:
                    *(_QWORD *)(v47 + 16) = v39;
                }
                *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
                *(_QWORD *)(*((_QWORD *)v39 + 2) + 8 * (**((_QWORD **)v39 + 2) != (_QWORD)v39)) = v38;
                *(_QWORD *)(v38 + 8) = v39;
LABEL_63:
                *((_QWORD *)v39 + 2) = v38;
                break;
              }
            }
            else if (!v40 || (v42 = *(unsigned __int8 *)(v40 + 24), v41 = (_BYTE *)(v40 + 24), v42))
            {
              if (*(char **)v38 == v35)
              {
                v68 = *((_QWORD *)v35 + 1);
                *(_QWORD *)v38 = v68;
                if (v68)
                {
                  *(_QWORD *)(v68 + 16) = v38;
                  v39 = *(char **)(v38 + 16);
                }
                *((_QWORD *)v35 + 2) = v39;
                *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v35;
                *((_QWORD *)v35 + 1) = v38;
                *(_QWORD *)(v38 + 16) = v35;
                v39 = (char *)*((_QWORD *)v35 + 2);
                v35[24] = 1;
                v39[24] = 0;
                v38 = *((_QWORD *)v39 + 1);
                v50 = *(char **)v38;
                *((_QWORD *)v39 + 1) = *(_QWORD *)v38;
                if (v50)
LABEL_61:
                  *((_QWORD *)v50 + 2) = v39;
              }
              else
              {
                *(_BYTE *)(v38 + 24) = 1;
                v39[24] = 0;
                v38 = *((_QWORD *)v39 + 1);
                v50 = *(char **)v38;
                *((_QWORD *)v39 + 1) = *(_QWORD *)v38;
                if (v50)
                  goto LABEL_61;
              }
              *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
              *(_QWORD *)(*((_QWORD *)v39 + 2) + 8 * (**((_QWORD **)v39 + 2) != (_QWORD)v39)) = v38;
              *(_QWORD *)v38 = v39;
              goto LABEL_63;
            }
            *(_BYTE *)(v38 + 24) = 1;
            v35 = v39;
            v39[24] = v39 == v36;
            *v41 = 1;
          }
          while (v39 != v36);
        }
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        v49 = v33 + 40;
        v48 = (void *)*((_QWORD *)v33 + 5);
        if (v48)
          goto LABEL_65;
      }
      *((_QWORD *)v20 + 5) = v26;
      *((_QWORD *)v20 + 6) = v27;
      *((_QWORD *)v20 + 7) = v27;
      v20 = (char *)*v13;
      v18 = v76;
      v31 = (char **)v13;
      v32 = (char **)v13;
      if (*v13)
      {
        while (1)
        {
LABEL_69:
          while (1)
          {
            v32 = (char **)v20;
            v51 = *((_DWORD *)v20 + 8);
            if (v19 >= v51)
              break;
            v20 = *(char **)v20;
            v31 = v32;
            if (!*v32)
              goto LABEL_73;
          }
          if (v51 >= v19)
            goto LABEL_18;
          v20 = (char *)*((_QWORD *)v20 + 1);
          if (!v20)
          {
            v31 = v32 + 1;
            break;
          }
        }
      }
LABEL_73:
      v52 = (char *)v32;
      v32 = (char **)operator new(0x40uLL);
      *((_DWORD *)v32 + 8) = v19;
      v32[6] = 0;
      v32[7] = 0;
      v32[5] = 0;
      *v32 = 0;
      v32[1] = 0;
      v32[2] = v52;
      *v31 = (char *)v32;
      v53 = (uint64_t *)**a3;
      v54 = (char *)v32;
      if (v53)
      {
        *a3 = v53;
        v54 = *v31;
      }
      v55 = (char *)*v13;
      v37 = v54 == (char *)*v13;
      v54[24] = v37;
      if (!v37)
      {
        do
        {
          v56 = *((_QWORD *)v54 + 2);
          if (*(_BYTE *)(v56 + 24))
            break;
          v57 = *(char **)(v56 + 16);
          v58 = *(_QWORD *)v57;
          if (*(_QWORD *)v57 == v56)
          {
            v61 = *((_QWORD *)v57 + 1);
            if (!v61 || (v62 = *(unsigned __int8 *)(v61 + 24), v59 = (_BYTE *)(v61 + 24), v62))
            {
              if (*(char **)v56 == v54)
              {
                *(_BYTE *)(v56 + 24) = 1;
                v57[24] = 0;
                v65 = *(_QWORD *)(v56 + 8);
                *(_QWORD *)v57 = v65;
                if (v65)
                  goto LABEL_90;
              }
              else
              {
                v63 = *(uint64_t **)(v56 + 8);
                v64 = *v63;
                *(_QWORD *)(v56 + 8) = *v63;
                if (v64)
                {
                  *(_QWORD *)(v64 + 16) = v56;
                  v57 = *(char **)(v56 + 16);
                }
                v63[2] = (uint64_t)v57;
                *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v63;
                *v63 = v56;
                *(_QWORD *)(v56 + 16) = v63;
                v57 = (char *)v63[2];
                v56 = *(_QWORD *)v57;
                *((_BYTE *)v63 + 24) = 1;
                v57[24] = 0;
                v65 = *(_QWORD *)(v56 + 8);
                *(_QWORD *)v57 = v65;
                if (v65)
LABEL_90:
                  *(_QWORD *)(v65 + 16) = v57;
              }
              *(_QWORD *)(v56 + 16) = *((_QWORD *)v57 + 2);
              *(_QWORD *)(*((_QWORD *)v57 + 2) + 8 * (**((_QWORD **)v57 + 2) != (_QWORD)v57)) = v56;
              *(_QWORD *)(v56 + 8) = v57;
LABEL_16:
              *((_QWORD *)v57 + 2) = v56;
              break;
            }
          }
          else if (!v58 || (v60 = *(unsigned __int8 *)(v58 + 24), v59 = (_BYTE *)(v58 + 24), v60))
          {
            if (*(char **)v56 == v54)
            {
              v67 = *((_QWORD *)v54 + 1);
              *(_QWORD *)v56 = v67;
              if (v67)
              {
                *(_QWORD *)(v67 + 16) = v56;
                v57 = *(char **)(v56 + 16);
              }
              *((_QWORD *)v54 + 2) = v57;
              *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v54;
              *((_QWORD *)v54 + 1) = v56;
              *(_QWORD *)(v56 + 16) = v54;
              v57 = (char *)*((_QWORD *)v54 + 2);
              v54[24] = 1;
              v57[24] = 0;
              v56 = *((_QWORD *)v57 + 1);
              v66 = *(char **)v56;
              *((_QWORD *)v57 + 1) = *(_QWORD *)v56;
              if (!v66)
                goto LABEL_15;
            }
            else
            {
              *(_BYTE *)(v56 + 24) = 1;
              v57[24] = 0;
              v56 = *((_QWORD *)v57 + 1);
              v66 = *(char **)v56;
              *((_QWORD *)v57 + 1) = *(_QWORD *)v56;
              if (!v66)
                goto LABEL_15;
            }
            *((_QWORD *)v66 + 2) = v57;
LABEL_15:
            *(_QWORD *)(v56 + 16) = *((_QWORD *)v57 + 2);
            *(_QWORD *)(*((_QWORD *)v57 + 2) + 8 * (**((_QWORD **)v57 + 2) != (_QWORD)v57)) = v56;
            *(_QWORD *)v56 = v57;
            goto LABEL_16;
          }
          *(_BYTE *)(v56 + 24) = 1;
          v54 = v57;
          v57[24] = v57 == v55;
          *v59 = 1;
        }
        while (v57 != v55);
      }
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
LABEL_18:
      *(float *)v32[5] = *(float *)v32[5] + (float)(v16 * (float)v18);
      v9 = v9 + (float)(v16 * (float)v18);
      v17 = (uint64_t *)*v17;
      if (!v17)
      {
        v7 = *a7;
        goto LABEL_9;
      }
    }
  }
  return v9;
}

void sub_1BE7C21C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7C21D4(uint64_t a1@<X0>, size_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v4;
  size_t v5;
  int64_t v6;
  unint64_t v7;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL *v22;
  size_t v23;
  char v24;
  size_t v25;
  const void *v26;
  uint64_t v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t *v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int64_t v56;
  int v57;
  _QWORD *v58;
  _QWORD **v59;
  _QWORD *v60;
  int64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  uint64_t v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  _DWORD *v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  char *v120;
  int v121;
  uint64_t v122;
  size_t v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  void *v132;
  char *v133;
  __int128 v134;
  char *v135;
  char *v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  float v144;
  _QWORD *v145;
  _QWORD **v146;
  _QWORD *v147;
  int v148;
  int v149;
  _DWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _BYTE *v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  int *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  int64_t v171;
  unint64_t v172;
  size_t v173;
  unint64_t i;
  _QWORD *v175;
  _QWORD **v176;
  _QWORD *v177;
  int64_t v178;
  _DWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _BYTE *v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  void *v202;
  unint64_t v203;
  char *v204;
  __int128 v205;
  char *v206;
  char *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  _QWORD **v211;
  _QWORD *v212;
  int64_t v213;
  _DWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _BYTE *v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  size_t v236;
  char *v237;
  unint64_t *v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  _BYTE *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  size_t v253;
  _BYTE *v254;
  char *v255;
  char **v256;
  char *v257;
  size_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  char *v267;
  char *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  __int128 *v273;
  uint64_t v274;
  __int128 v275;
  int v276;
  char *v277;
  size_t v278;
  uint64_t v279;
  uint64_t v280;
  _OWORD *v281;
  __int128 *v282;
  uint64_t v283;
  __int128 v284;
  int v285;
  _BYTE *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  int *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t *v298;
  char *v299;
  unint64_t v300;
  _QWORD *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  int *v310;
  int64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  _OWORD *v316;
  char *v317;
  uint64_t v318;
  __int128 v319;
  int v320;
  char *v321;
  char *v322;
  char *v323;
  void *v324;
  void *v325;
  char *v326;
  unint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  unint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  char *v334;
  char *v335;
  unint64_t v336;
  int v337;
  uint64_t v338;
  int v339;
  int v340;
  int v341;
  unint64_t v342;
  int v343;
  int v344;
  unint64_t v345;
  uint64_t v346;
  char *v347;
  int v348;
  int v349;
  int v350;
  int v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t __lena;
  char *v366;
  uint64_t v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  _QWORD *v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  unint64_t v380;
  int v381;
  int64_t __sz;
  uint64_t __sza;
  size_t __szb;
  int64_t __szc;
  int v386;
  size_t v387;
  size_t v388;
  int v389;
  size_t v390;
  char **v391;
  size_t v392;
  void *__p;
  char *v394;
  __int128 v395;
  void *v396;
  char *v397;
  char *v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  char *v406;

  v5 = *a2;
  v4 = a2[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v390 = v5;
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v366 = 0;
    v42 = 0;
    v43 = (_QWORD *)*a3;
    v372 = a3 + 1;
    if ((_QWORD *)*a3 == a3 + 1)
      goto LABEL_458;
LABEL_56:
    v44 = 0;
    v45 = 0;
    v376 = -1;
    do
    {
      v46 = *((_DWORD *)v43 + 8);
      v47 = v43[5];
      v48 = v43[6];
      while (v47 != v48)
      {
        v49 = *(int *)(v47 + 4);
        if (v42[8 * v49])
        {
          ++*(_DWORD *)&v42[8 * v49 + 4];
          v44 = ++v45;
        }
        v47 += 8;
      }
      v50 = v376;
      if (v46 > v376)
        v50 = v46;
      v376 = v50;
      v51 = (_QWORD *)v43[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v43[2];
          v34 = *v52 == (_QWORD)v43;
          v43 = v52;
        }
        while (!v34);
      }
      v43 = v52;
    }
    while (v52 != v372);
    if (!v45)
      goto LABEL_458;
    v400 = 0;
    v401 = 0;
    v399 = &v400;
    v396 = 0;
    v397 = 0;
    v398 = 0;
    v53 = v42;
    v377 = v44;
    if (v366 != v42)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      while (1)
      {
        v368 = v53;
        if (v53[8 * v56])
        {
          if (*(int *)&v53[8 * v56 + 4] >= 1)
            break;
        }
LABEL_74:
        ++v56;
        v53 = v368;
        if (v56 >= (unint64_t)((v366 - v368) >> 3))
          goto LABEL_165;
      }
      v57 = 0;
      v379 = &v53[8 * v56 + 4];
      while (1)
      {
        v58 = v400;
        v59 = &v400;
        v60 = &v400;
        v386 = v57;
        if (v400)
        {
          while (1)
          {
            while (1)
            {
              v59 = (_QWORD **)v58;
              v61 = *((int *)v58 + 8);
              if (v56 >= v61)
                break;
              v58 = *v59;
              v60 = v59;
              if (!*v59)
                goto LABEL_86;
            }
            if (v56 <= v61)
              break;
            v58 = v59[1];
            if (!v58)
            {
              v60 = v59 + 1;
              goto LABEL_86;
            }
          }
          v76 = (char *)v55;
          v63 = v59;
          __sz = v55 - (_QWORD)v54;
          v77 = (unint64_t)(v55 - (_QWORD)v54) >> 2;
          v79 = (char *)v63[6];
          v78 = v63[7];
          if ((unint64_t)v79 >= v78)
            goto LABEL_105;
LABEL_132:
          *(_DWORD *)v79 = v77;
          v63[6] = v79 + 4;
          v99 = v398;
          if (v76 >= v398)
            goto LABEL_133;
LABEL_78:
          *(_DWORD *)v76 = v56;
          v55 = (uint64_t)(v76 + 4);
          v397 = v76 + 4;
          v57 = v386 + 1;
          if (v386 + 1 >= *(_DWORD *)v379)
            goto LABEL_74;
        }
        else
        {
LABEL_86:
          v62 = operator new(0x40uLL);
          v63 = v62;
          *((_DWORD *)v62 + 8) = v56;
          v62[6] = 0;
          v62[7] = 0;
          v62[5] = 0;
          *v62 = 0;
          v62[1] = 0;
          v62[2] = v59;
          *v60 = v62;
          v64 = v62;
          if (*v399)
          {
            v399 = (_QWORD *)*v399;
            v64 = (_QWORD *)*v60;
          }
          v65 = v400;
          *((_BYTE *)v64 + 24) = v64 == v400;
          if (v64 != v65)
          {
            do
            {
              v66 = v64[2];
              if (*(_BYTE *)(v66 + 24))
                break;
              v67 = *(_QWORD **)(v66 + 16);
              v68 = *v67;
              if (*v67 == v66)
              {
                v71 = v67[1];
                if (!v71 || (v72 = *(unsigned __int8 *)(v71 + 24), v69 = (_BYTE *)(v71 + 24), v72))
                {
                  if (*(_QWORD **)v66 == v64)
                  {
                    *(_BYTE *)(v66 + 24) = 1;
                    *((_BYTE *)v67 + 24) = 0;
                    v75 = *(_QWORD *)(v66 + 8);
                    *v67 = v75;
                    if (v75)
                      goto LABEL_102;
                  }
                  else
                  {
                    v73 = *(uint64_t **)(v66 + 8);
                    v74 = *v73;
                    *(_QWORD *)(v66 + 8) = *v73;
                    if (v74)
                    {
                      *(_QWORD *)(v74 + 16) = v66;
                      v67 = *(_QWORD **)(v66 + 16);
                    }
                    v73[2] = (uint64_t)v67;
                    *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v73;
                    *v73 = v66;
                    *(_QWORD *)(v66 + 16) = v73;
                    v67 = (_QWORD *)v73[2];
                    v66 = *v67;
                    *((_BYTE *)v73 + 24) = 1;
                    *((_BYTE *)v67 + 24) = 0;
                    v75 = *(_QWORD *)(v66 + 8);
                    *v67 = v75;
                    if (v75)
LABEL_102:
                      *(_QWORD *)(v75 + 16) = v67;
                  }
                  *(_QWORD *)(v66 + 16) = v67[2];
                  *(_QWORD *)(v67[2] + 8 * (*(_QWORD *)v67[2] != (_QWORD)v67)) = v66;
                  *(_QWORD *)(v66 + 8) = v67;
LABEL_130:
                  v67[2] = v66;
                  break;
                }
              }
              else if (!v68 || (v70 = *(unsigned __int8 *)(v68 + 24), v69 = (_BYTE *)(v68 + 24), v70))
              {
                if (*(_QWORD **)v66 == v64)
                {
                  v119 = v64[1];
                  *(_QWORD *)v66 = v119;
                  if (v119)
                  {
                    *(_QWORD *)(v119 + 16) = v66;
                    v67 = *(_QWORD **)(v66 + 16);
                  }
                  v64[2] = v67;
                  *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v64;
                  v64[1] = v66;
                  *(_QWORD *)(v66 + 16) = v64;
                  v67 = (_QWORD *)v64[2];
                  *((_BYTE *)v64 + 24) = 1;
                  *((_BYTE *)v67 + 24) = 0;
                  v66 = v67[1];
                  v100 = *(_QWORD **)v66;
                  v67[1] = *(_QWORD *)v66;
                  if (v100)
LABEL_128:
                    v100[2] = v67;
                }
                else
                {
                  *(_BYTE *)(v66 + 24) = 1;
                  *((_BYTE *)v67 + 24) = 0;
                  v66 = v67[1];
                  v100 = *(_QWORD **)v66;
                  v67[1] = *(_QWORD *)v66;
                  if (v100)
                    goto LABEL_128;
                }
                *(_QWORD *)(v66 + 16) = v67[2];
                *(_QWORD *)(v67[2] + 8 * (*(_QWORD *)v67[2] != (_QWORD)v67)) = v66;
                *(_QWORD *)v66 = v67;
                goto LABEL_130;
              }
              *(_BYTE *)(v66 + 24) = 1;
              v64 = v67;
              *((_BYTE *)v67 + 24) = v67 == v65;
              *v69 = 1;
            }
            while (v67 != v65);
          }
          ++v401;
          v54 = (char *)v396;
          v76 = v397;
          __sz = v397 - (_BYTE *)v396;
          v77 = (unint64_t)(v397 - (_BYTE *)v396) >> 2;
          v79 = (char *)v62[6];
          v78 = v62[7];
          if ((unint64_t)v79 < v78)
            goto LABEL_132;
LABEL_105:
          v80 = (char *)v63[5];
          v81 = (v79 - v80) >> 2;
          v82 = v81 + 1;
          if ((unint64_t)(v81 + 1) >> 62)
            sub_1BE61F930();
          v83 = v78 - (_QWORD)v80;
          if (v83 >> 1 > v82)
            v82 = v83 >> 1;
          if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
            v84 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v84 = v82;
          if (!v84)
          {
            v86 = 0;
            v87 = (_DWORD *)(4 * v81);
            *(_DWORD *)(4 * v81) = v77;
            v88 = 4 * v81 + 4;
            v89 = v79 - v80;
            if (v79 == v80)
              goto LABEL_122;
LABEL_116:
            v90 = v89 - 4;
            if (v90 < 0x2C)
              goto LABEL_533;
            if ((unint64_t)(v80 - v86) < 0x20)
              goto LABEL_533;
            v91 = (v90 >> 2) + 1;
            v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
            v93 = &v79[-v92];
            v87 = (_DWORD *)((char *)v87 - v92);
            v94 = &v86[4 * v81 - 16];
            v95 = v79 - 16;
            v96 = v91 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v97 = *(_OWORD *)v95;
              *(v94 - 1) = *((_OWORD *)v95 - 1);
              *v94 = v97;
              v94 -= 2;
              v95 -= 32;
              v96 -= 8;
            }
            while (v96);
            v79 = v93;
            if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_533:
              do
              {
                v98 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *--v87 = v98;
              }
              while (v79 != v80);
            }
            goto LABEL_122;
          }
          if (v84 >> 62)
            sub_1BE61F100();
          v85 = v84;
          v86 = operator new(4 * v84);
          v84 = v85;
          v87 = &v86[4 * v81];
          *v87 = v77;
          v88 = (uint64_t)(v87 + 1);
          v89 = v79 - v80;
          if (v79 != v80)
            goto LABEL_116;
LABEL_122:
          v63[5] = v87;
          v63[6] = v88;
          v63[7] = &v86[4 * v84];
          if (v80)
            operator delete(v80);
          LODWORD(v44) = v377;
          v63[6] = v88;
          v99 = v398;
          if (v76 < v398)
            goto LABEL_78;
LABEL_133:
          v101 = __sz >> 2;
          v102 = (__sz >> 2) + 1;
          if (v102 >> 62)
            sub_1BE61F930();
          v103 = v99 - v54;
          if (v103 >> 1 > v102)
            v102 = v103 >> 1;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
            v104 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v104 = v102;
          if (v104)
          {
            if (v104 >> 62)
              sub_1BE61F100();
            v105 = operator new(4 * v104);
            v106 = &v105[4 * v101];
            *v106 = v56;
            v55 = (uint64_t)(v106 + 1);
            v107 = v76 - v54;
            if (v76 == v54)
            {
LABEL_150:
              v110 = v386;
              v396 = v106;
              v397 = (char *)v55;
              v398 = &v105[4 * v104];
              if (!v54)
                goto LABEL_147;
LABEL_146:
              operator delete(v54);
              goto LABEL_147;
            }
          }
          else
          {
            v105 = 0;
            v106 = (_DWORD *)(4 * v101);
            *(_DWORD *)(4 * v101) = v56;
            v55 = 4 * v101 + 4;
            v107 = v76 - v54;
            if (v76 == v54)
              goto LABEL_150;
          }
          v108 = v107 - 4;
          if (v108 < 0xBC
            || (v112 = (v76 - 4 - v54) & 0xFFFFFFFFFFFFFFFCLL, &v105[__sz - 4 - v112] > &v105[__sz - 4])
            || &v76[-v112 - 4] > v76 - 4
            || (unint64_t)(v76 - &v105[__sz]) < 0x20)
          {
            v109 = v76;
            v110 = v386;
            do
            {
LABEL_144:
              v111 = *((_DWORD *)v109 - 1);
              v109 -= 4;
              *--v106 = v111;
            }
            while (v109 != v54);
            goto LABEL_145;
          }
          v113 = (v108 >> 2) + 1;
          v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
          v109 = &v76[-v114];
          v106 = (_DWORD *)((char *)v106 - v114);
          v115 = &v105[4 * v101 - 16];
          v116 = v76 - 16;
          v117 = v113 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v118 = *(_OWORD *)v116;
            *(v115 - 1) = *((_OWORD *)v116 - 1);
            *v115 = v118;
            v115 -= 2;
            v116 -= 32;
            v117 -= 8;
          }
          while (v117);
          v110 = v386;
          if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_144;
LABEL_145:
          v396 = v106;
          v397 = (char *)v55;
          v398 = &v105[4 * v104];
          if (v54)
            goto LABEL_146;
LABEL_147:
          v54 = (char *)v106;
          v397 = (char *)v55;
          v57 = v110 + 1;
          if (v57 >= *(_DWORD *)v379)
            goto LABEL_74;
        }
      }
    }
LABEL_165:
    v369 = v53;
    v394 = 0;
    v395 = 0uLL;
    if ((v376 & 0x80000000) == 0)
    {
      v120 = 0;
      v121 = 0;
      v122 = (int)v44;
      v123 = 4 * (int)v44;
      do
      {
        if ((unint64_t)v120 >= *((_QWORD *)&v395 + 1))
        {
          v127 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v394) >> 3) + 1;
          if (v127 > 0xAAAAAAAAAAAAAAALL)
            sub_1BE61F930();
          if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v395 + 1) - (_QWORD)v394) >> 3) > v127)
            v127 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v395 + 1) - (_QWORD)v394) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v395 + 1) - (_QWORD)v394) >> 3) >= 0x555555555555555)
            v128 = 0xAAAAAAAAAAAAAAALL;
          else
            v128 = v127;
          v406 = (char *)&v395 + 8;
          if (v128)
          {
            if (v128 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE61F100();
            v129 = (char *)operator new(24 * v128);
          }
          else
          {
            v129 = 0;
          }
          v130 = &v129[8 * ((v120 - v394) >> 3)];
          v402 = v129;
          v403 = v130;
          v131 = &v129[24 * v128];
          v404 = v130;
          v405 = v131;
          *((_QWORD *)v130 + 1) = 0;
          *(_QWORD *)v130 = 0;
          *((_QWORD *)v130 + 2) = 0;
          if ((_DWORD)v44)
          {
            if ((v44 & 0x80000000) != 0)
              sub_1BE61F930();
            v132 = operator new(v123);
            *(_QWORD *)v130 = v132;
            v44 = (unint64_t)v132 + 4 * v122;
            memset_pattern16(v132, &unk_1BE8DF400, v123);
            *(int64x2_t *)(v130 + 8) = vdupq_n_s64(v44);
            LODWORD(v44) = v377;
          }
          v125 = v130 + 24;
          v404 = v130 + 24;
          if (v120 == v394)
          {
            v394 = v130;
            *((_QWORD *)&v395 + 1) = v131;
          }
          else
          {
            do
            {
              v133 = v130;
              *((_QWORD *)v130 - 2) = 0;
              *((_QWORD *)v130 - 1) = 0;
              v134 = *(_OWORD *)(v120 - 24);
              v120 -= 24;
              *(_OWORD *)(v130 - 24) = v134;
              v130 -= 24;
              *((_QWORD *)v133 - 1) = *((_QWORD *)v120 + 2);
              *(_QWORD *)v120 = 0;
              *((_QWORD *)v120 + 1) = 0;
              *((_QWORD *)v120 + 2) = 0;
            }
            while (v120 != v394);
            v120 = v394;
            v135 = (char *)v395;
            v394 = v130;
            *((_QWORD *)&v395 + 1) = v405;
            v125 = v404;
            if ((char *)v395 != v120)
            {
              v136 = (char *)v395;
              do
              {
                v138 = (void *)*((_QWORD *)v136 - 3);
                v136 -= 24;
                v137 = v138;
                if (v138)
                {
                  *((_QWORD *)v135 - 2) = v137;
                  operator delete(v137);
                }
                v135 = v136;
              }
              while (v136 != v120);
            }
          }
          if (v120)
            operator delete(v120);
        }
        else
        {
          *(_QWORD *)v120 = 0;
          *((_QWORD *)v120 + 1) = 0;
          *((_QWORD *)v120 + 2) = 0;
          if ((_DWORD)v44)
          {
            if ((v44 & 0x80000000) != 0)
              sub_1BE61F930();
            v126 = (char *)operator new(v123);
            *(_QWORD *)v120 = v126;
            v124 = &v126[4 * v122];
            *((_QWORD *)v120 + 2) = v124;
            memset_pattern16(v126, &unk_1BE8DF400, v123);
            *((_QWORD *)v120 + 1) = v124;
          }
          v125 = v120 + 24;
        }
        *(_QWORD *)&v395 = v125;
        v120 = v125;
        v34 = v121++ == v376;
      }
      while (!v34);
    }
    v139 = (_QWORD *)*a3;
    if ((_QWORD *)*a3 != v372)
    {
      v140 = v401;
      while (1)
      {
        v141 = v139[5];
        v142 = v139[6];
        if (v141 != v142)
          break;
LABEL_244:
        v169 = (_QWORD *)v139[1];
        if (v169)
        {
          do
          {
            v170 = v169;
            v169 = (_QWORD *)*v169;
          }
          while (v169);
        }
        else
        {
          do
          {
            v170 = (_QWORD *)v139[2];
            v34 = *v170 == (_QWORD)v139;
            v139 = v170;
          }
          while (!v34);
        }
        v139 = v170;
        if (v170 == v372)
          goto LABEL_250;
      }
      v143 = *((_DWORD *)v139 + 8);
      while (1)
      {
        v144 = *(float *)v141;
        v145 = v400;
        v146 = &v400;
        v147 = &v400;
        v148 = *(_DWORD *)(v141 + 4);
        if (v400)
        {
          while (1)
          {
            while (1)
            {
              v146 = (_QWORD **)v145;
              v149 = *((_DWORD *)v145 + 8);
              if (v148 >= v149)
                break;
              v145 = *v146;
              v147 = v146;
              if (!*v146)
                goto LABEL_209;
            }
            if (v149 >= v148)
              break;
            v145 = v146[1];
            if (!v145)
            {
              v147 = v146 + 1;
              goto LABEL_209;
            }
          }
          v163 = (int *)v146[5];
          v164 = (int *)v146[6];
          if (v163 == v164)
            goto LABEL_201;
        }
        else
        {
LABEL_209:
          v150 = operator new(0x40uLL);
          v150[8] = v148;
          *((_QWORD *)v150 + 6) = 0;
          *((_QWORD *)v150 + 7) = 0;
          *((_QWORD *)v150 + 5) = 0;
          *(_QWORD *)v150 = 0;
          *((_QWORD *)v150 + 1) = 0;
          *((_QWORD *)v150 + 2) = v146;
          *v147 = v150;
          v151 = v150;
          if (*v399)
          {
            v399 = (_QWORD *)*v399;
            v151 = (_QWORD *)*v147;
          }
          v152 = v400;
          *((_BYTE *)v151 + 24) = v151 == v400;
          if (v151 != v152)
          {
            do
            {
              v153 = v151[2];
              if (*(_BYTE *)(v153 + 24))
                break;
              v154 = *(_QWORD **)(v153 + 16);
              v155 = *v154;
              if (*v154 == v153)
              {
                v158 = v154[1];
                if (!v158 || (v159 = *(unsigned __int8 *)(v158 + 24), v156 = (_BYTE *)(v158 + 24), v159))
                {
                  if (*(_QWORD **)v153 == v151)
                  {
                    *(_BYTE *)(v153 + 24) = 1;
                    *((_BYTE *)v154 + 24) = 0;
                    v162 = *(_QWORD *)(v153 + 8);
                    *v154 = v162;
                    if (v162)
                      goto LABEL_225;
                  }
                  else
                  {
                    v160 = *(uint64_t **)(v153 + 8);
                    v161 = *v160;
                    *(_QWORD *)(v153 + 8) = *v160;
                    if (v161)
                    {
                      *(_QWORD *)(v161 + 16) = v153;
                      v154 = *(_QWORD **)(v153 + 16);
                    }
                    v160[2] = (uint64_t)v154;
                    *(_QWORD *)(*(_QWORD *)(v153 + 16) + 8 * (**(_QWORD **)(v153 + 16) != v153)) = v160;
                    *v160 = v153;
                    *(_QWORD *)(v153 + 16) = v160;
                    v154 = (_QWORD *)v160[2];
                    v153 = *v154;
                    *((_BYTE *)v160 + 24) = 1;
                    *((_BYTE *)v154 + 24) = 0;
                    v162 = *(_QWORD *)(v153 + 8);
                    *v154 = v162;
                    if (v162)
LABEL_225:
                      *(_QWORD *)(v162 + 16) = v154;
                  }
                  *(_QWORD *)(v153 + 16) = v154[2];
                  *(_QWORD *)(v154[2] + 8 * (*(_QWORD *)v154[2] != (_QWORD)v154)) = v153;
                  *(_QWORD *)(v153 + 8) = v154;
LABEL_233:
                  v154[2] = v153;
                  break;
                }
              }
              else if (!v155 || (v157 = *(unsigned __int8 *)(v155 + 24), v156 = (_BYTE *)(v155 + 24), v157))
              {
                if (*(_QWORD **)v153 == v151)
                {
                  v168 = v151[1];
                  *(_QWORD *)v153 = v168;
                  if (v168)
                  {
                    *(_QWORD *)(v168 + 16) = v153;
                    v154 = *(_QWORD **)(v153 + 16);
                  }
                  v151[2] = v154;
                  *(_QWORD *)(*(_QWORD *)(v153 + 16) + 8 * (**(_QWORD **)(v153 + 16) != v153)) = v151;
                  v151[1] = v153;
                  *(_QWORD *)(v153 + 16) = v151;
                  v154 = (_QWORD *)v151[2];
                  *((_BYTE *)v151 + 24) = 1;
                  *((_BYTE *)v154 + 24) = 0;
                  v153 = v154[1];
                  v165 = *(_QWORD **)v153;
                  v154[1] = *(_QWORD *)v153;
                  if (v165)
LABEL_231:
                    v165[2] = v154;
                }
                else
                {
                  *(_BYTE *)(v153 + 24) = 1;
                  *((_BYTE *)v154 + 24) = 0;
                  v153 = v154[1];
                  v165 = *(_QWORD **)v153;
                  v154[1] = *(_QWORD *)v153;
                  if (v165)
                    goto LABEL_231;
                }
                *(_QWORD *)(v153 + 16) = v154[2];
                *(_QWORD *)(v154[2] + 8 * (*(_QWORD *)v154[2] != (_QWORD)v154)) = v153;
                *(_QWORD *)v153 = v154;
                goto LABEL_233;
              }
              *(_BYTE *)(v153 + 24) = 1;
              v151 = v154;
              *((_BYTE *)v154 + 24) = v154 == v152;
              *v156 = 1;
            }
            while (v154 != v152);
          }
          v401 = ++v140;
          v163 = (int *)*((_QWORD *)v150 + 5);
          v164 = (int *)*((_QWORD *)v150 + 6);
          if (v163 == v164)
            goto LABEL_201;
        }
        v166 = *(_QWORD *)&v394[24 * v143];
        do
        {
          v167 = *v163++;
          *(_DWORD *)(v166 + 4 * v167) = (int)(float)(v144 * -100.0);
        }
        while (v163 != v164);
LABEL_201:
        v141 += 8;
        if (v141 == v142)
          goto LABEL_244;
      }
    }
LABEL_250:
    v42 = v369;
    if (v366 != v369)
    {
      v171 = 0;
      v172 = (unint64_t)fmax((double)(v376 + 1), (double)(int)v377);
      v173 = 4 * v172;
      __sza = 4 * v172;
      v387 = v172;
      do
      {
        if (v42[8 * v171] && *(int *)&v42[8 * v171 + 4] >= 2)
        {
          v370 = v42;
          for (i = 1; ; ++i)
          {
            v175 = v400;
            v176 = &v400;
LABEL_264:
            v177 = v176;
            if (v175)
            {
              while (1)
              {
                v176 = (_QWORD **)v175;
                v178 = *((int *)v175 + 8);
                if (v171 < v178)
                {
                  v175 = *v176;
                  goto LABEL_264;
                }
                if (v171 <= v178)
                  break;
                v175 = v176[1];
                if (!v175)
                {
                  v177 = v176 + 1;
                  goto LABEL_269;
                }
              }
              if (i >= ((char *)v176[6] - (char *)v176[5]) >> 2)
              {
LABEL_252:
                v42 = v370;
                break;
              }
            }
            else
            {
LABEL_269:
              v179 = operator new(0x40uLL);
              v179[8] = v171;
              *((_QWORD *)v179 + 6) = 0;
              *((_QWORD *)v179 + 7) = 0;
              *((_QWORD *)v179 + 5) = 0;
              *(_QWORD *)v179 = 0;
              *((_QWORD *)v179 + 1) = 0;
              *((_QWORD *)v179 + 2) = v176;
              *v177 = v179;
              v180 = v179;
              if (*v399)
              {
                v399 = (_QWORD *)*v399;
                v180 = (_QWORD *)*v177;
              }
              v181 = v400;
              *((_BYTE *)v180 + 24) = v180 == v400;
              if (v180 != v181)
              {
                do
                {
                  v182 = v180[2];
                  if (*(_BYTE *)(v182 + 24))
                    break;
                  v183 = *(_QWORD **)(v182 + 16);
                  v184 = *v183;
                  if (*v183 == v182)
                  {
                    v187 = v183[1];
                    if (!v187 || (v188 = *(unsigned __int8 *)(v187 + 24), v185 = (_BYTE *)(v187 + 24), v188))
                    {
                      if (*(_QWORD **)v182 == v180)
                      {
                        *(_BYTE *)(v182 + 24) = 1;
                        *((_BYTE *)v183 + 24) = 0;
                        v191 = *(_QWORD *)(v182 + 8);
                        *v183 = v191;
                        if (v191)
                          goto LABEL_285;
                      }
                      else
                      {
                        v189 = *(uint64_t **)(v182 + 8);
                        v190 = *v189;
                        *(_QWORD *)(v182 + 8) = *v189;
                        if (v190)
                        {
                          *(_QWORD *)(v190 + 16) = v182;
                          v183 = *(_QWORD **)(v182 + 16);
                        }
                        v189[2] = (uint64_t)v183;
                        *(_QWORD *)(*(_QWORD *)(v182 + 16) + 8 * (**(_QWORD **)(v182 + 16) != v182)) = v189;
                        *v189 = v182;
                        *(_QWORD *)(v182 + 16) = v189;
                        v183 = (_QWORD *)v189[2];
                        v182 = *v183;
                        *((_BYTE *)v189 + 24) = 1;
                        *((_BYTE *)v183 + 24) = 0;
                        v191 = *(_QWORD *)(v182 + 8);
                        *v183 = v191;
                        if (v191)
LABEL_285:
                          *(_QWORD *)(v191 + 16) = v183;
                      }
                      *(_QWORD *)(v182 + 16) = v183[2];
                      *(_QWORD *)(v183[2] + 8 * (*(_QWORD *)v183[2] != (_QWORD)v183)) = v182;
                      *(_QWORD *)(v182 + 8) = v183;
LABEL_293:
                      v183[2] = v182;
                      break;
                    }
                  }
                  else if (!v184 || (v186 = *(unsigned __int8 *)(v184 + 24), v185 = (_BYTE *)(v184 + 24), v186))
                  {
                    if (*(_QWORD **)v182 == v180)
                    {
                      v228 = v180[1];
                      *(_QWORD *)v182 = v228;
                      if (v228)
                      {
                        *(_QWORD *)(v228 + 16) = v182;
                        v183 = *(_QWORD **)(v182 + 16);
                      }
                      v180[2] = v183;
                      *(_QWORD *)(*(_QWORD *)(v182 + 16) + 8 * (**(_QWORD **)(v182 + 16) != v182)) = v180;
                      v180[1] = v182;
                      *(_QWORD *)(v182 + 16) = v180;
                      v183 = (_QWORD *)v180[2];
                      *((_BYTE *)v180 + 24) = 1;
                      *((_BYTE *)v183 + 24) = 0;
                      v182 = v183[1];
                      v192 = *(_QWORD **)v182;
                      v183[1] = *(_QWORD *)v182;
                      if (v192)
LABEL_291:
                        v192[2] = v183;
                    }
                    else
                    {
                      *(_BYTE *)(v182 + 24) = 1;
                      *((_BYTE *)v183 + 24) = 0;
                      v182 = v183[1];
                      v192 = *(_QWORD **)v182;
                      v183[1] = *(_QWORD *)v182;
                      if (v192)
                        goto LABEL_291;
                    }
                    *(_QWORD *)(v182 + 16) = v183[2];
                    *(_QWORD *)(v183[2] + 8 * (*(_QWORD *)v183[2] != (_QWORD)v183)) = v182;
                    *(_QWORD *)v182 = v183;
                    goto LABEL_293;
                  }
                  *(_BYTE *)(v182 + 24) = 1;
                  v180 = v183;
                  *((_BYTE *)v183 + 24) = v183 == v181;
                  *v185 = 1;
                }
                while (v183 != v181);
              }
              ++v401;
              if (i >= (uint64_t)(*((_QWORD *)v179 + 6) - *((_QWORD *)v179 + 5)) >> 2)
                goto LABEL_252;
            }
            v193 = (char *)v395;
            if ((unint64_t)v395 >= *((_QWORD *)&v395 + 1))
            {
              v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v395 - (_QWORD)v394) >> 3) + 1;
              if (v197 > 0xAAAAAAAAAAAAAAALL)
                sub_1BE61F930();
              if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v395 + 1) - (_QWORD)v394) >> 3) > v197)
                v197 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v395 + 1) - (_QWORD)v394) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v395 + 1) - (_QWORD)v394) >> 3) >= 0x555555555555555)
                v198 = 0xAAAAAAAAAAAAAAALL;
              else
                v198 = v197;
              v406 = (char *)&v395 + 8;
              if (v198)
              {
                if (v198 > 0xAAAAAAAAAAAAAAALL)
                  sub_1BE61F100();
                v199 = (char *)operator new(24 * v198);
              }
              else
              {
                v199 = 0;
              }
              v200 = &v199[8 * ((uint64_t)(v395 - (_QWORD)v394) >> 3)];
              v402 = v199;
              v403 = v200;
              v201 = &v199[24 * v198];
              v404 = v200;
              v405 = v201;
              *((_QWORD *)v200 + 1) = 0;
              *(_QWORD *)v200 = 0;
              *((_QWORD *)v200 + 2) = 0;
              if (v387)
              {
                if (v387 >> 62)
                  sub_1BE61F930();
                v202 = operator new(__sza);
                *(_QWORD *)v200 = v202;
                v203 = (unint64_t)v202 + 4 * v387;
                memset_pattern16(v202, &unk_1BE8DF400, __sza);
                *(int64x2_t *)(v200 + 8) = vdupq_n_s64(v203);
              }
              v196 = v200 + 24;
              v404 = v200 + 24;
              if ((char *)v395 == v394)
              {
                v394 = v200;
                *((_QWORD *)&v395 + 1) = v201;
                v173 = __sza;
                v172 = v387;
              }
              else
              {
                do
                {
                  v204 = v200;
                  *((_QWORD *)v200 - 2) = 0;
                  *((_QWORD *)v200 - 1) = 0;
                  v205 = *(_OWORD *)(v193 - 24);
                  v193 -= 24;
                  *(_OWORD *)(v200 - 24) = v205;
                  v200 -= 24;
                  *((_QWORD *)v204 - 1) = *((_QWORD *)v193 + 2);
                  *(_QWORD *)v193 = 0;
                  *((_QWORD *)v193 + 1) = 0;
                  *((_QWORD *)v193 + 2) = 0;
                }
                while (v193 != v394);
                v193 = v394;
                v206 = (char *)v395;
                v394 = v200;
                *((_QWORD *)&v395 + 1) = v405;
                v196 = v404;
                v173 = __sza;
                v172 = v387;
                if ((char *)v395 != v193)
                {
                  v207 = (char *)v395;
                  do
                  {
                    v209 = (void *)*((_QWORD *)v207 - 3);
                    v207 -= 24;
                    v208 = v209;
                    if (v209)
                    {
                      *((_QWORD *)v206 - 2) = v208;
                      operator delete(v208);
                    }
                    v206 = v207;
                  }
                  while (v207 != v193);
                }
              }
              if (v193)
                operator delete(v193);
            }
            else
            {
              *(_OWORD *)v395 = 0uLL;
              *(_QWORD *)(v395 + 16) = 0;
              if (v172)
              {
                if (v172 >> 62)
                  sub_1BE61F930();
                v194 = (char *)operator new(v173);
                *(_QWORD *)v395 = v194;
                v195 = &v194[4 * v172];
                *(_QWORD *)(v395 + 16) = v195;
                memset_pattern16(v194, &unk_1BE8DF400, v173);
                *(_QWORD *)(v395 + 8) = v195;
              }
              v196 = (char *)(v395 + 24);
            }
            *(_QWORD *)&v395 = v196;
            v210 = v400;
            v211 = &v400;
LABEL_325:
            v212 = v211;
            if (v210)
            {
              while (1)
              {
                v211 = (_QWORD **)v210;
                v213 = *((int *)v210 + 8);
                if (v171 < v213)
                {
                  v210 = *v211;
                  goto LABEL_325;
                }
                if (v171 <= v213)
                  break;
                v210 = v211[1];
                if (!v210)
                {
                  v212 = v211 + 1;
                  goto LABEL_330;
                }
              }
              v214 = v211;
            }
            else
            {
LABEL_330:
              v214 = operator new(0x40uLL);
              v214[8] = v171;
              *((_QWORD *)v214 + 6) = 0;
              *((_QWORD *)v214 + 7) = 0;
              *((_QWORD *)v214 + 5) = 0;
              *(_QWORD *)v214 = 0;
              *((_QWORD *)v214 + 1) = 0;
              *((_QWORD *)v214 + 2) = v211;
              *v212 = v214;
              v215 = v214;
              if (*v399)
              {
                v399 = (_QWORD *)*v399;
                v215 = (_QWORD *)*v212;
              }
              v216 = v400;
              *((_BYTE *)v215 + 24) = v215 == v400;
              if (v215 != v216)
              {
                do
                {
                  v217 = v215[2];
                  if (*(_BYTE *)(v217 + 24))
                    break;
                  v218 = *(_QWORD **)(v217 + 16);
                  v219 = *v218;
                  if (*v218 == v217)
                  {
                    v222 = v218[1];
                    if (!v222 || (v223 = *(unsigned __int8 *)(v222 + 24), v220 = (_BYTE *)(v222 + 24), v223))
                    {
                      if (*(_QWORD **)v217 == v215)
                      {
                        *(_BYTE *)(v217 + 24) = 1;
                        *((_BYTE *)v218 + 24) = 0;
                        v226 = *(_QWORD *)(v217 + 8);
                        *v218 = v226;
                        if (v226)
                          goto LABEL_346;
                      }
                      else
                      {
                        v224 = *(uint64_t **)(v217 + 8);
                        v225 = *v224;
                        *(_QWORD *)(v217 + 8) = *v224;
                        if (v225)
                        {
                          *(_QWORD *)(v225 + 16) = v217;
                          v218 = *(_QWORD **)(v217 + 16);
                        }
                        v224[2] = (uint64_t)v218;
                        *(_QWORD *)(*(_QWORD *)(v217 + 16) + 8 * (**(_QWORD **)(v217 + 16) != v217)) = v224;
                        *v224 = v217;
                        *(_QWORD *)(v217 + 16) = v224;
                        v218 = (_QWORD *)v224[2];
                        v217 = *v218;
                        *((_BYTE *)v224 + 24) = 1;
                        *((_BYTE *)v218 + 24) = 0;
                        v226 = *(_QWORD *)(v217 + 8);
                        *v218 = v226;
                        if (v226)
LABEL_346:
                          *(_QWORD *)(v226 + 16) = v218;
                      }
                      *(_QWORD *)(v217 + 16) = v218[2];
                      *(_QWORD *)(v218[2] + 8 * (*(_QWORD *)v218[2] != (_QWORD)v218)) = v217;
                      *(_QWORD *)(v217 + 8) = v218;
LABEL_259:
                      v218[2] = v217;
                      break;
                    }
                  }
                  else if (!v219 || (v221 = *(unsigned __int8 *)(v219 + 24), v220 = (_BYTE *)(v219 + 24), v221))
                  {
                    if (*(_QWORD **)v217 == v215)
                    {
                      v229 = v215[1];
                      *(_QWORD *)v217 = v229;
                      if (v229)
                      {
                        *(_QWORD *)(v229 + 16) = v217;
                        v218 = *(_QWORD **)(v217 + 16);
                      }
                      v215[2] = v218;
                      *(_QWORD *)(*(_QWORD *)(v217 + 16) + 8 * (**(_QWORD **)(v217 + 16) != v217)) = v215;
                      v215[1] = v217;
                      *(_QWORD *)(v217 + 16) = v215;
                      v218 = (_QWORD *)v215[2];
                      *((_BYTE *)v215 + 24) = 1;
                      *((_BYTE *)v218 + 24) = 0;
                      v217 = v218[1];
                      v227 = *(_QWORD **)v217;
                      v218[1] = *(_QWORD *)v217;
                      if (!v227)
                        goto LABEL_258;
                    }
                    else
                    {
                      *(_BYTE *)(v217 + 24) = 1;
                      *((_BYTE *)v218 + 24) = 0;
                      v217 = v218[1];
                      v227 = *(_QWORD **)v217;
                      v218[1] = *(_QWORD *)v217;
                      if (!v227)
                        goto LABEL_258;
                    }
                    v227[2] = v218;
LABEL_258:
                    *(_QWORD *)(v217 + 16) = v218[2];
                    *(_QWORD *)(v218[2] + 8 * (*(_QWORD *)v218[2] != (_QWORD)v218)) = v217;
                    *(_QWORD *)v217 = v218;
                    goto LABEL_259;
                  }
                  *(_BYTE *)(v217 + 24) = 1;
                  v215 = v218;
                  *((_BYTE *)v218 + 24) = v218 == v216;
                  *v220 = 1;
                }
                while (v218 != v216);
              }
              ++v401;
            }
            *(_DWORD *)(*((_QWORD *)v196 - 3) + 4 * *(int *)(*((_QWORD *)v214 + 5) + 4 * i)) = 0;
          }
        }
        ++v171;
      }
      while (v171 < (unint64_t)((v366 - v42) >> 3));
    }
    v231 = v394;
    v230 = (char *)v395;
    v232 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v395 - (_QWORD)v394) >> 3);
    v233 = (*((_QWORD *)v394 + 1) - *(_QWORD *)v394) >> 2;
    v234 = (v232 - v233);
    v371 = v42;
    if ((int)v234 < 1)
    {
LABEL_410:
      if (v230 != v231)
      {
        v287 = *((_QWORD *)v231 + 1);
        v288 = v287 - *(_QWORD *)v231;
        if (v287 != *(_QWORD *)v231)
        {
          __p = 0;
          __szc = v288 << 30;
          v289 = (v288 << 30) + 0x100000000;
          v290 = (uint64_t)v289 >> 32;
          if (v288 << 30 == 0xFFFFFFFF00000000)
          {
            v291 = 0;
            v292 = v288 >> 2;
            if ((int)v232 > (int)(v288 >> 2))
              goto LABEL_417;
          }
          else
          {
            if ((v289 & 0x8000000000000000) != 0)
              sub_1BE61F930();
            v291 = (int *)operator new(v289 >> 30);
            __p = v291;
            memset(v291, 255, 4 * v290);
            v292 = v288 >> 2;
            if ((int)v232 > (int)(v288 >> 2))
              goto LABEL_417;
          }
          v402 = 0;
          v403 = 0;
          v404 = 0;
          v389 = v292;
          v381 = v232;
          if (v232 << 32)
          {
            if (((v232 << 32) & 0x8000000000000000) != 0)
              sub_1BE61F930();
            v326 = (char *)operator new((4 * v232) & 0x3FFFFFFFFLL);
            v402 = v326;
            v404 = &v326[4 * (int)v232];
            bzero(v326, (4 * v232) & 0x3FFFFFFFFLL);
            v403 = &v326[(4 * v232) & 0x3FFFFFFFFLL];
            LODWORD(v292) = v389;
          }
          else
          {
            v326 = 0;
          }
          v327 = v290 >> 6;
          v361 = HIDWORD(v289) & 0x3F;
          v359 = v289 >> 38;
          v358 = v288;
          if (v288 << 30 == 0xFFFFFFFF00000000)
          {
            v328 = 0;
            v329 = 0;
            v334 = 0;
            v330 = 0;
            v335 = 0;
            v333 = 0;
          }
          else
          {
            v328 = (char *)operator new(v289 >> 30);
            bzero(v328, v289 >> 30);
            v329 = (char *)operator new(v289 >> 30);
            v374 = v290 >> 6;
            bzero(v329, v289 >> 30);
            v330 = (char *)operator new(v289 >> 30);
            bzero(v330, v289 >> 30);
            v331 = (v290 - 1) >> 6;
            v332 = operator new(8 * v331 + 8);
            v333 = v332;
            v334 = &v329[v289 >> 30];
            v335 = &v330[v289 >> 30];
            if (HIDWORD(v289) >= 0x41)
              v336 = v331;
            else
              v336 = 0;
            v332[v336] = 0;
            v327 = v374;
            if (v359)
            {
              bzero(v332, 8 * v374);
              v335 = &v330[v289 >> 30];
              v334 = &v329[v289 >> 30];
            }
            LODWORD(v292) = v389;
            if (v361)
              v333[v374] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(BYTE4(v289) & 0x3F));
          }
          if (v381 >= 1)
          {
            v337 = 0;
            v360 = v327;
            v375 = v334 - v329;
            v367 = v335 - v330;
            v362 = 4 * (((unint64_t)(v335 - v330) >> 2) - ((unint64_t)(v335 - v330) > 3)) + 4;
            __lena = 4 * (((unint64_t)(v334 - v329) >> 2) - ((unint64_t)(v334 - v329) > 3)) + 4;
            v338 = (v292 + 1);
            do
            {
              v291[__szc >> 32] = v337;
              if (v375 >= 1)
              {
                v339 = v337;
                memset_pattern16(v329, &unk_1BE8DF3F0, __lena);
                v337 = v339;
                LODWORD(v292) = v389;
              }
              if (v367 >= 1)
              {
                v340 = v337;
                memset(v330, 255, v362);
                v337 = v340;
                LODWORD(v292) = v389;
              }
              v341 = v337;
              v342 = __szc >> 32;
              v343 = v292;
              if ((unint64_t)__szc <= 0xFFFFFFFEFFFFFFFFLL)
              {
                if (v359)
                {
                  v344 = v337;
                  bzero(v333, v360 * 8);
                  v337 = v344;
                  LODWORD(v292) = v389;
                }
                v341 = v337;
                v342 = __szc >> 32;
                v343 = v292;
                if (v361)
                {
                  v333[v360] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(BYTE4(v289) & 0x3F));
                  v341 = v337;
                  v342 = __szc >> 32;
                  v343 = v292;
                }
              }
              do
              {
                v345 = 0;
                *(_QWORD *)((char *)v333 + ((v342 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v342;
                v346 = v341;
                v347 = &v231[24 * v341];
                v348 = 0x7FFFFFFF;
                v349 = -1;
                do
                {
                  if (((*(_QWORD *)((char *)v333 + ((v345 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v345) & 1) == 0)
                  {
                    v350 = *(_DWORD *)(*(_QWORD *)v347 + 4 * v345)
                         - (*(_DWORD *)&v326[4 * v346]
                          + *(_DWORD *)&v328[4 * v345]);
                    v351 = *(_DWORD *)&v329[4 * v345];
                    if (v350 < v351)
                    {
                      *(_DWORD *)&v329[4 * v345] = v350;
                      *(_DWORD *)&v330[4 * v345] = v343;
                      v351 = *(_DWORD *)&v329[4 * v345];
                    }
                    if (v351 < v348)
                    {
                      v348 = v351;
                      v349 = v345;
                    }
                  }
                  ++v345;
                }
                while ((v358 >> 2) != v345);
                v352 = 0;
                do
                {
                  v353 = v329;
                  if (((*(_QWORD *)((char *)v333 + ((v352 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v352) & 1) != 0)
                  {
                    v354 = 4 * v291[v352];
                    *(_DWORD *)&v326[v354] += v348;
                    v353 = v328;
                  }
                  *(_DWORD *)&v353[4 * v352++] -= v348;
                }
                while (v338 != v352);
                v342 = v349;
                v341 = v291[v349];
                v343 = v349;
              }
              while (v341 != -1);
              v355 = v349;
              if (v349 != (_DWORD)v292)
              {
                do
                {
                  v356 = v355;
                  v357 = *(int *)&v330[v356 * 4];
                  v291[v356] = v291[v357];
                  v355 = v357;
                }
                while ((_DWORD)v357 != (_DWORD)v292);
              }
              ++v337;
            }
            while (v337 != v381);
          }
          if (v333)
            operator delete(v333);
          if (v330)
            operator delete(v330);
          if (v329)
            operator delete(v329);
          if (v328)
            operator delete(v328);
          v42 = v371;
          if (v326)
            operator delete(v326);
          goto LABEL_417;
        }
      }
    }
    else if ((char *)v395 != v394)
    {
      v235 = 0;
      v236 = 4 * (v232 - v233);
      __szb = (v232 - v233);
      v388 = v236;
      while (1)
      {
        v237 = (char *)operator new(v236);
        bzero(v237, v236);
        v238 = (unint64_t *)&v231[24 * v235];
        v239 = (char *)v238[1];
        v391 = (char **)(v238 + 1);
        v240 = *v238;
        v241 = (uint64_t)&v239[-*v238];
        v242 = v241 >> 2;
        v243 = (_BYTE *)(*v238 + (v241 & 0xFFFFFFFFFFFFFFFCLL));
        v244 = v238[2];
        if (v234 > (uint64_t)(v244 - (_QWORD)v239) >> 2)
          break;
        v249 = &v237[4 * v234];
        v250 = v239 - v243;
        v251 = (v239 - v243) >> 2;
        if (v251 >= v234)
        {
          v255 = (char *)v238[1];
          v256 = (char **)(v238 + 1);
LABEL_381:
          v257 = &v243[4 * v234];
          v258 = v255 - v257;
          v259 = (v255 - v257) >> 2;
          v260 = &v255[-4 * v234];
          v261 = v255;
          if (v260 < v239)
          {
            v262 = (v241 & 0xFFFFFFFFFFFFFFFCLL) + v258;
            v263 = v240 + v262 + 4;
            if ((unint64_t)v239 > v263)
              v263 = (unint64_t)v239;
            v264 = v263 + ~v240 - v262;
            if (v264 < 0x2C)
            {
              v261 = v255;
              goto LABEL_404;
            }
            v261 = v255;
            if ((unint64_t)&v257[-(v241 & 0xFFFFFFFFFFFFFFFCLL) - v240] < 0x20)
              goto LABEL_534;
            v279 = (v264 >> 2) + 1;
            v280 = 4 * (v279 & 0x7FFFFFFFFFFFFFF8);
            v260 += v280;
            v261 = &v255[v280];
            v281 = v255 + 16;
            v282 = (__int128 *)(v240 + 4 * v259 + 4 * v242 + 16);
            v283 = v279 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v284 = *v282;
              *(v281 - 1) = *(v282 - 1);
              *v281 = v284;
              v281 += 2;
              v282 += 2;
              v283 -= 8;
            }
            while (v283);
            if (v279 != (v279 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_534:
              do
              {
LABEL_404:
                v285 = *(_DWORD *)v260;
                v260 += 4;
                *(_DWORD *)v261 = v285;
                v261 += 4;
              }
              while (v260 < v239);
            }
          }
          *v256 = v261;
          if (v255 != v257)
          {
            v286 = v243;
            memmove(&v255[-4 * v259], v243, v258);
            v243 = v286;
          }
          if (v249 != v237)
            memmove(v243, v237, v249 - v237);
          goto LABEL_367;
        }
        v252 = &v237[4 * v251];
        v253 = v249 - v252;
        v254 = v243;
        memmove(v239, v252, v253);
        v255 = &v239[v253];
        v256 = v391;
        *v391 = &v239[v253];
        if (v250 >= 1)
        {
          v243 = v254;
          v249 = v252;
          v242 = v241 >> 2;
          goto LABEL_381;
        }
LABEL_367:
        operator delete(v237);
        ++v235;
        v231 = v394;
        v230 = (char *)v395;
        v232 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v395 - (_QWORD)v394) >> 3);
        v236 = v388;
        if (v232 <= v235)
        {
          v42 = v371;
          goto LABEL_410;
        }
      }
      v245 = v242 + v234;
      if ((unint64_t)(v242 + v234) >> 62)
        sub_1BE61F930();
      v246 = v244 - v240;
      if (v246 >> 1 > v245)
        v245 = v246 >> 1;
      if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL)
        v245 = 0x3FFFFFFFFFFFFFFFLL;
      v380 = v245;
      if (v245)
      {
        if (v245 >> 62)
          sub_1BE61F100();
        v247 = (char *)(*v238 + (v241 & 0xFFFFFFFFFFFFFFFCLL));
        v248 = operator new(4 * v245);
        v242 = v241 >> 2;
      }
      else
      {
        v247 = (char *)(*v238 + (v241 & 0xFFFFFFFFFFFFFFFCLL));
        v248 = 0;
      }
      v373 = v242;
      v265 = &v248[4 * v242];
      bzero(v265, v388);
      if ((char *)v240 == v239)
      {
        v268 = v265;
      }
      else
      {
        v266 = v241 - 4;
        if ((unint64_t)(v241 - 4) >= 0x3C)
        {
          v269 = v240 + (v241 & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)&v248[v241 & 0xFFFFFFFFFFFFFFFCLL];
          v267 = v247;
          v268 = v265;
          if (v269 >= 0x20)
          {
            v270 = (v266 >> 2) + 1;
            v271 = 4 * (v270 & 0x7FFFFFFFFFFFFFF8);
            v267 = &v247[-v271];
            v268 = &v265[-v271];
            v272 = &v248[4 * v373 - 16];
            v273 = (__int128 *)(v240 + 4 * v373 - 16);
            v274 = v270 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v275 = *v273;
              *(v272 - 1) = *(v273 - 1);
              *v272 = v275;
              v272 -= 2;
              v273 -= 2;
              v274 -= 8;
            }
            while (v274);
            if (v270 == (v270 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_396;
          }
        }
        else
        {
          v267 = v247;
          v268 = v265;
        }
        do
        {
          v276 = *((_DWORD *)v267 - 1);
          v267 -= 4;
          *((_DWORD *)v268 - 1) = v276;
          v268 -= 4;
        }
        while (v267 != (char *)v240);
      }
LABEL_396:
      v277 = &v265[4 * __szb];
      v278 = v239 - v247;
      if (v278)
        memmove(v277, v247, v278);
      *v238 = (unint64_t)v268;
      *v391 = &v277[v278];
      v238[2] = (unint64_t)&v248[4 * v380];
      v234 = __szb;
      if (v240)
        operator delete((void *)v240);
      goto LABEL_367;
    }
    __p = 0;
LABEL_417:
    v293 = v377;
    if ((int)v377 < 1)
    {
LABEL_445:
      if (__p)
        operator delete(__p);
      if (v394)
      {
        v321 = (char *)v395;
        v322 = v394;
        if ((char *)v395 != v394)
        {
          v323 = (char *)v395;
          do
          {
            v325 = (void *)*((_QWORD *)v323 - 3);
            v323 -= 24;
            v324 = v325;
            if (v325)
            {
              *((_QWORD *)v321 - 2) = v324;
              operator delete(v324);
            }
            v321 = v323;
          }
          while (v323 != v394);
          v322 = v394;
        }
        operator delete(v322);
      }
      if (v396)
        operator delete(v396);
      sub_1BE67AC7C((uint64_t)&v399, v400);
      goto LABEL_458;
    }
    v294 = 0;
    while (1)
    {
      v378 = v293;
      v296 = *((_DWORD *)__p + v294);
      if (v296 < 0 || v296 > v376)
        goto LABEL_421;
      v297 = *a4 + 24 * *((int *)v396 + v294);
      v298 = (uint64_t *)(v297 + 8);
      v299 = *(char **)(v297 + 8);
      v301 = (_QWORD *)(v297 + 16);
      v300 = *(_QWORD *)(v297 + 16);
      if ((unint64_t)v299 >= v300)
        break;
      *(_DWORD *)v299 = v296;
      v295 = (uint64_t)(v299 + 4);
LABEL_420:
      *v298 = v295;
LABEL_421:
      ++v294;
      v293 = v378;
      if (v294 >= (int)v378)
        goto LABEL_445;
    }
    v302 = *(char **)v297;
    v303 = (uint64_t)&v299[-*(_QWORD *)v297];
    v304 = v303 >> 2;
    v305 = (v303 >> 2) + 1;
    if (v305 >> 62)
      sub_1BE61F930();
    v306 = v300 - (_QWORD)v302;
    if (v306 >> 1 > v305)
      v305 = v306 >> 1;
    if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFFCLL)
      v307 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v307 = v305;
    if (v307)
    {
      v392 = (size_t)&v299[-*(_QWORD *)v297];
      if (v307 >> 62)
        sub_1BE61F100();
      v308 = v307;
      v309 = operator new(4 * v307);
      v307 = v308;
      v301 = (_QWORD *)(v297 + 16);
      v298 = (uint64_t *)(v297 + 8);
      v303 = v392;
      v310 = (int *)&v309[4 * v304];
      *v310 = v296;
      v295 = (uint64_t)(v310 + 1);
      v311 = v299 - v302;
      if (v299 == v302)
        goto LABEL_442;
    }
    else
    {
      v309 = 0;
      v310 = (int *)(4 * v304);
      *(_DWORD *)(4 * v304) = v296;
      v295 = 4 * v304 + 4;
      v311 = v299 - v302;
      if (v299 == v302)
      {
LABEL_442:
        *(_QWORD *)v297 = v310;
        *v298 = v295;
        *v301 = &v309[4 * v307];
        if (v302)
          operator delete(v302);
        v42 = v371;
        goto LABEL_420;
      }
    }
    v312 = v311 - 4;
    if (v312 < 0x2C)
      goto LABEL_535;
    if ((unint64_t)(v299 - &v309[v303]) < 0x20)
      goto LABEL_535;
    v313 = (v312 >> 2) + 1;
    v314 = 4 * (v313 & 0x7FFFFFFFFFFFFFF8);
    v315 = &v299[-v314];
    v310 = (int *)((char *)v310 - v314);
    v316 = &v309[4 * v304 - 16];
    v317 = v299 - 16;
    v318 = v313 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v319 = *(_OWORD *)v317;
      *(v316 - 1) = *((_OWORD *)v317 - 1);
      *v316 = v319;
      v316 -= 2;
      v317 -= 32;
      v318 -= 8;
    }
    while (v318);
    v299 = v315;
    if (v313 != (v313 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_535:
      do
      {
        v320 = *((_DWORD *)v299 - 1);
        v299 -= 4;
        *--v310 = v320;
      }
      while (v299 != v302);
    }
    goto LABEL_442;
  }
  v7 = v6 / 24;
  if ((unint64_t)(v6 / 24) > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  v9 = (char *)operator new(v6);
  *a4 = v9;
  a4[2] = &v9[24 * v7];
  v10 = 24 * ((v6 - 24) / 0x18uLL) + 24;
  bzero(v9, v10);
  a4[1] = &v9[v10];
  v11 = (char *)operator new(8 * v7);
  v12 = v11;
  v13 = v11;
  if (((v7 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_536;
  v14 = ((v7 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v13 = &v11[8 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
  v15 = v11 + 8;
  v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    *(v15 - 8) = 0;
    *v15 = 0;
    *((_DWORD *)v15 - 1) = 0;
    *((_DWORD *)v15 + 1) = 0;
    v15 += 16;
    v16 -= 2;
  }
  while (v16);
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
  {
LABEL_536:
    do
    {
      *v13 = 0;
      *((_DWORD *)v13 + 1) = 0;
      v13 += 8;
    }
    while (v13 != &v11[8 * v7]);
  }
  v366 = &v11[8 * v7];
  v17 = 0;
  v20 = *(_QWORD *)(a1 + 16);
  v18 = a1 + 16;
  v19 = v20;
  if (v7 <= 1)
    v7 = 1;
  do
  {
    if (!v19)
      goto LABEL_11;
    v23 = v390 + 24 * v17;
    v24 = *(_BYTE *)(v23 + 23);
    v25 = v24 >= 0 ? *(unsigned __int8 *)(v23 + 23) : *(_QWORD *)(v23 + 8);
    v26 = v24 >= 0 ? (const void *)(v390 + 24 * v17) : *(const void **)v23;
    v21 = v18;
    v27 = v19;
    do
    {
      v28 = *(char *)(v27 + 55);
      if (v28 >= 0)
        v29 = *(unsigned __int8 *)(v27 + 55);
      else
        v29 = *(_QWORD *)(v27 + 40);
      if (v28 >= 0)
        v30 = (const void *)(v27 + 32);
      else
        v30 = *(const void **)(v27 + 32);
      if (v25 >= v29)
        v31 = v29;
      else
        v31 = v25;
      v32 = memcmp(v30, v26, v31);
      v33 = v29 < v25;
      if (v32)
        v33 = v32 < 0;
      v34 = !v33;
      if (v33)
        v35 = (uint64_t *)(v27 + 8);
      else
        v35 = (uint64_t *)v27;
      if (v34)
        v21 = v27;
      v27 = *v35;
    }
    while (*v35);
    if (v21 == v18)
      goto LABEL_11;
    v36 = *(char *)(v21 + 55);
    if (v36 >= 0)
      v37 = *(unsigned __int8 *)(v21 + 55);
    else
      v37 = *(_QWORD *)(v21 + 40);
    if (v36 >= 0)
      v38 = (const void *)(v21 + 32);
    else
      v38 = *(const void **)(v21 + 32);
    if (v37 >= v25)
      v39 = v25;
    else
      v39 = v37;
    v40 = memcmp(v26, v38, v39);
    v41 = v25 < v37;
    if (v40)
      v41 = v40 < 0;
    if (v41)
LABEL_11:
      v21 = v18;
    v22 = (BOOL *)&v12[8 * v17];
    *v22 = v21 == v18;
    *((_DWORD *)v22 + 1) = 0;
    ++v17;
  }
  while (v17 != v7);
  v42 = v12;
  v43 = (_QWORD *)*a3;
  v372 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
    goto LABEL_56;
LABEL_458:
  if (v42)
    operator delete(v42);
}

void sub_1BE7C4300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  operator delete(v38);
  operator delete(v37);
  operator delete(v36);
  if (v35)
    operator delete(v35);
  if (v34)
    operator delete(v34);
  sub_1BE63CEBC(&a30);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
    sub_1BE67AC7C(v39 - 168, *(_QWORD **)(v39 - 160));
    if (!a19)
    {
LABEL_7:
      sub_1BE63CEBC(a17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1BE67AC7C(v39 - 168, *(_QWORD **)(v39 - 160));
    if (!a19)
      goto LABEL_7;
  }
  operator delete(a19);
  sub_1BE63CEBC(a17);
  _Unwind_Resume(a1);
}

uint64_t **sub_1BE7C4518(uint64_t **a1, uint64_t **a2)
{
  char **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t i;
  char *v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  char *v12;
  char **v13;
  char **v14;
  int v15;
  size_t v16;
  _QWORD *v17;
  const void *v18;
  const void *v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  const char *v29;
  size_t v30;
  size_t v31;
  __int128 *p_dst;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  __int128 *v39;
  char **v40;
  int v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  BOOL v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  size_t v53;
  char *v54;
  size_t v55;
  int v56;
  _BOOL4 v57;
  uint64_t **v58;
  uint64_t j;
  const char *v60;
  size_t v61;
  size_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  __int128 *v70;
  char **v71;
  int v72;
  size_t v73;
  const void *v74;
  size_t v75;
  int v76;
  _BOOL4 v77;
  BOOL v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  size_t v84;
  char *v85;
  size_t v86;
  int v87;
  _BOOL4 v88;
  uint64_t **v89;
  uint64_t **v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  char **v105;
  unint64_t v106;
  int v107;
  const void *v108;
  size_t v109;
  _BOOL4 v110;
  int v111;
  _BOOL4 v112;
  BOOL v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  int v119;
  char *v120;
  size_t v121;
  _BOOL4 v122;
  int v123;
  _BOOL4 v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD v139[2];
  _QWORD v140[4];
  uint64_t **v141;
  uint64_t **v142;
  uint64_t **v143;
  uint64_t **v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  char __p[18];
  char v152;
  void *v153[2];
  char v154;
  char v155;
  __int128 v156;
  __int16 v157;
  char v158;
  void **v159;
  __int128 __dst;
  unint64_t v161;
  int v162[2];
  const void *v163[4];
  __int128 v164;
  __int16 v165;
  char v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v3 = (char **)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  *(_OWORD *)(a1 + 7) = 0u;
  v4 = (uint64_t)(a1 + 7);
  *(_OWORD *)(a1 + 9) = 0u;
  *((_DWORD *)a1 + 22) = 1065353216;
  *((_OWORD *)a1 + 6) = 0u;
  v138 = (uint64_t)(a1 + 12);
  *((_OWORD *)a1 + 7) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  v137 = (uint64_t)(a1 + 17);
  *((_DWORD *)a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 19) = 0u;
  *((_DWORD *)a1 + 42) = 1065353216;
  *((_OWORD *)a1 + 11) = 0u;
  v136 = (uint64_t)(a1 + 22);
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 52) = 1065353216;
  *(_OWORD *)(a1 + 27) = 0u;
  v135 = (uint64_t)(a1 + 27);
  *(_OWORD *)(a1 + 29) = 0u;
  *((_DWORD *)a1 + 62) = 1065353216;
  v134 = (uint64_t)(a1 + 32);
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_DWORD *)a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  v142 = a1 + 37;
  *((_DWORD *)a1 + 82) = 1065353216;
  v141 = a1 + 42;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_DWORD *)a1 + 92) = 1065353216;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  v144 = a1 + 47;
  *((_DWORD *)a1 + 102) = 1065353216;
  if (a1 != a2)
  {
    v5 = (uint64_t *)(a2 + 1);
    v6 = *a2;
    if (*a2 != (uint64_t *)(a2 + 1))
    {
      while (1)
      {
        v8 = (char *)operator new(0x40uLL);
        v9 = v8;
        *(_QWORD *)&__dst = v8;
        *((_QWORD *)&__dst + 1) = v3;
        LOBYTE(v161) = 0;
        v10 = v8 + 32;
        if (*((char *)v6 + 55) < 0)
        {
          sub_1BE61F128(v8 + 32, (void *)v6[4], v6[5]);
        }
        else
        {
          v11 = *((_OWORD *)v6 + 2);
          *((_QWORD *)v8 + 6) = v6[6];
          *v10 = v11;
        }
        *((_DWORD *)v9 + 14) = *((_DWORD *)v6 + 14);
        v12 = *v3;
        v13 = v3;
        v14 = v3;
        if (*v3)
          break;
LABEL_65:
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v13;
        *v14 = v9;
        v26 = (uint64_t *)**a1;
        if (v26)
          goto LABEL_66;
LABEL_67:
        sub_1BE61F5C0(a1[1], (uint64_t *)v9);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        v27 = (uint64_t *)v6[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (uint64_t *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (uint64_t *)v6[2];
            v47 = *v28 == (_QWORD)v6;
            v6 = v28;
          }
          while (!v47);
        }
        v6 = v28;
        if (v28 == v5)
          goto LABEL_3;
      }
      v15 = v9[55];
      if (v15 >= 0)
        v16 = v9[55];
      else
        v16 = *((_QWORD *)v9 + 5);
      if (v15 < 0)
        v10 = (_OWORD *)*((_QWORD *)v9 + 4);
      do
      {
        while (1)
        {
          v13 = (char **)v12;
          v19 = (const void *)*((_QWORD *)v12 + 4);
          v17 = v12 + 32;
          v18 = v19;
          v20 = *((char *)v17 + 23);
          if (v20 >= 0)
            v21 = *((unsigned __int8 *)v17 + 23);
          else
            v21 = v17[1];
          if (v20 >= 0)
            v22 = v17;
          else
            v22 = v18;
          if (v21 >= v16)
            v23 = v16;
          else
            v23 = v21;
          v24 = memcmp(v10, v22, v23);
          v25 = v16 < v21;
          if (v24)
            v25 = v24 < 0;
          if (!v25)
            break;
          v12 = *v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_65;
        }
        v12 = v13[1];
      }
      while (v12);
      v14 = v13 + 1;
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = v13;
      v13[1] = v9;
      v26 = (uint64_t *)**a1;
      if (!v26)
        goto LABEL_67;
LABEL_66:
      *a1 = v26;
      v9 = *v14;
      goto LABEL_67;
    }
  }
LABEL_3:
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 123;
  *(_QWORD *)&v156 = &__dst;
  v143 = a1;
  *((_DWORD *)a1 + 6) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 125;
  *(_QWORD *)&v156 = &__dst;
  *((_DWORD *)a1 + 7) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 124;
  *(_QWORD *)&v156 = &__dst;
  *((_DWORD *)a1 + 8) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  HIBYTE(v161) = 5;
  strcpy((char *)&__dst, "\\sqrt");
  *(_QWORD *)&v156 = &__dst;
  *((_DWORD *)a1 + 9) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 91;
  *(_QWORD *)&v156 = &__dst;
  *((_DWORD *)a1 + 10) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)
                         + 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  LODWORD(__dst) = *((_DWORD *)a1 + 6);
  v158 = 1;
  strcpy((char *)&v156, "[");
  v153[0] = &v156;
  DWORD1(__dst) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 14);
  v155 = 14;
  strcpy((char *)v153, "\\begin{matrix}");
  *(_QWORD *)&v164 = v153;
  v133 = (int *)(a1 + 3);
  DWORD2(__dst) = *((_DWORD *)sub_1BE61F448(a1, (const void **)v153, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v164) + 14);
  v166 = 15;
  strcpy((char *)&v164, "\\begin{aligned}");
  qmemcpy(v140, "aligned}\\begin{a{matrix}\\begin{m", sizeof(v140));
  v163[0] = &v164;
  HIDWORD(__dst) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v164, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v163) + 14);
  HIBYTE(v163[2]) = 16;
  strcpy((char *)v163, "\\begin{array}{l}");
  *(_QWORD *)__p = v163;
  LODWORD(v161) = *((_DWORD *)sub_1BE61F448(a1, v163, (uint64_t)&unk_1BE8D50A2, (_OWORD **)__p) + 14);
  v152 = 17;
  qmemcpy(v139, "\\begin{array}{lr\\begin{array}{l}", sizeof(v139));
  strcpy(__p, "\\begin{array}{lr}");
  v149[0] = __p;
  HIDWORD(v161) = *((_DWORD *)sub_1BE61F448(a1, (const void **)__p, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v149) + 14);
  sub_1BE7C9B18(v4, (int *)&__dst, v162);
  if (v152 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v166 & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_246;
    }
  }
  else if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete((void *)v163[0]);
  if ((v166 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v155 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_247:
    operator delete(v153[0]);
    if ((v158 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_248;
  }
LABEL_246:
  operator delete((void *)v164);
  if (v155 < 0)
    goto LABEL_247;
LABEL_17:
  if ((v158 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_248:
  operator delete((void *)v156);
LABEL_18:
  LODWORD(v163[0]) = *((_DWORD *)a1 + 7);
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 93;
  *(_QWORD *)&v156 = &__dst;
  HIDWORD(v163[0]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 12;
  strcpy((char *)&v156, "\\end{matrix}");
  v153[0] = &v156;
  LODWORD(v163[1]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 14);
  v155 = 13;
  strcpy((char *)v153, "\\end{aligned}");
  *(_QWORD *)&v164 = v153;
  HIDWORD(v163[1]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)v153, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v164) + 14);
  v166 = 11;
  strcpy((char *)&v164, "\\end{array}");
  *(_QWORD *)__p = &v164;
  LODWORD(v163[2]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v164, (uint64_t)&unk_1BE8D50A2, (_OWORD **)__p) + 14);
  sub_1BE7C9B18(v138, (int *)v163, (int *)&v163[2] + 1);
  if (v166 < 0)
  {
    operator delete((void *)v164);
    if ((v155 & 0x80000000) == 0)
    {
LABEL_20:
      if ((v158 & 0x80000000) == 0)
        goto LABEL_21;
LABEL_251:
      operator delete((void *)v156);
      v131 = *(_QWORD *)"\\end{aligned}";
      v132 = *(_QWORD *)"\\end{array}";
      if ((SHIBYTE(v161) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_252;
    }
  }
  else if ((v155 & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v153[0]);
  if (v158 < 0)
    goto LABEL_251;
LABEL_21:
  v131 = *(_QWORD *)"\\end{aligned}";
  v132 = *(_QWORD *)"\\end{array}";
  if ((SHIBYTE(v161) & 0x80000000) == 0)
    goto LABEL_22;
LABEL_252:
  operator delete((void *)__dst);
LABEL_22:
  HIBYTE(v161) = 14;
  *(_QWORD *)&__dst = v140[3];
  *(_QWORD *)((char *)&__dst + 6) = v140[2];
  BYTE14(__dst) = 0;
  *(_QWORD *)&v156 = &__dst;
  LODWORD(v163[0]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 15;
  *(_QWORD *)&v156 = v140[1];
  *(_QWORD *)((char *)&v156 + 7) = v140[0];
  HIBYTE(v156) = 0;
  v153[0] = &v156;
  HIDWORD(v163[0]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 14);
  v155 = 16;
  *(_OWORD *)v153 = v139[1];
  v154 = 0;
  *(_QWORD *)&v164 = v153;
  LODWORD(v163[1]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)v153, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v164) + 14);
  v166 = 17;
  v164 = v139[0];
  v165 = 125;
  *(_QWORD *)__p = &v164;
  HIDWORD(v163[1]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v164, (uint64_t)&unk_1BE8D50A2, (_OWORD **)__p) + 14);
  sub_1BE7C9B18(v137, (int *)v163, (int *)&v163[2]);
  if (v166 < 0)
  {
    operator delete((void *)v164);
    if ((v155 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v158 & 0x80000000) == 0)
        goto LABEL_25;
LABEL_255:
      operator delete((void *)v156);
      if ((SHIBYTE(v161) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_256;
    }
  }
  else if ((v155 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v153[0]);
  if (v158 < 0)
    goto LABEL_255;
LABEL_25:
  if ((SHIBYTE(v161) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_256:
  operator delete((void *)__dst);
LABEL_26:
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 38;
  *(_QWORD *)&v156 = &__dst;
  LODWORD(v153[0]) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  sub_1BE7C9B18(v136, (int *)v153, (int *)v153 + 1);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 94;
  *(_QWORD *)&v156 = &__dst;
  LODWORD(v164) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 1;
  strcpy((char *)&v156, "_");
  v153[0] = &v156;
  DWORD1(v164) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 14);
  v155 = 5;
  strcpy((char *)v153, "\\frac");
  v163[0] = v153;
  DWORD2(v164) = *((_DWORD *)sub_1BE61F448(a1, (const void **)v153, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v163) + 14);
  sub_1BE7C9B18(v135, (int *)&v164, (int *)&v164 + 3);
  if ((v155 & 0x80000000) == 0)
  {
    if ((v158 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_258:
    operator delete((void *)v156);
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_259;
  }
  operator delete(v153[0]);
  if (v158 < 0)
    goto LABEL_258;
LABEL_30:
  if ((SHIBYTE(v161) & 0x80000000) == 0)
    goto LABEL_31;
LABEL_259:
  operator delete((void *)__dst);
LABEL_31:
  v158 = 1;
  strcpy((char *)&v156, "+");
  v153[0] = &v156;
  LODWORD(__dst) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 14);
  v155 = 1;
  LOWORD(v153[0]) = 45;
  *(_QWORD *)&v164 = v153;
  DWORD1(__dst) = *((_DWORD *)sub_1BE61F448(a1, (const void **)v153, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v164) + 14);
  v166 = 6;
  strcpy((char *)&v164, "\\times");
  v163[0] = &v164;
  DWORD2(__dst) = *((_DWORD *)sub_1BE61F448(a1, (const void **)&v164, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v163) + 14);
  HIBYTE(v163[2]) = 4;
  strcpy((char *)v163, "\\ast");
  *(_QWORD *)__p = v163;
  HIDWORD(__dst) = *((_DWORD *)sub_1BE61F448(a1, v163, (uint64_t)&unk_1BE8D50A2, (_OWORD **)__p) + 14);
  v152 = 5;
  strcpy(__p, "\\cdot");
  v149[0] = __p;
  LODWORD(v161) = *((_DWORD *)sub_1BE61F448(a1, (const void **)__p, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v149) + 14);
  v150 = 1;
  LOWORD(v149[0]) = 47;
  v147[0] = v149;
  HIDWORD(v161) = *((_DWORD *)sub_1BE61F448(a1, (const void **)v149, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v147) + 14);
  v148 = 4;
  strcpy((char *)v147, "\\div");
  v145[0] = v147;
  v162[0] = *((_DWORD *)sub_1BE61F448(a1, (const void **)v147, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v145) + 14);
  v146 = 1;
  LOWORD(v145[0]) = 58;
  v159 = v145;
  v162[1] = *((_DWORD *)sub_1BE61F448(a1, (const void **)v145, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v159) + 14);
  sub_1BE7C9B18(v134, (int *)&__dst, (int *)v163);
  if (v146 < 0)
  {
    operator delete(v145[0]);
    if ((v148 & 0x80000000) == 0)
    {
LABEL_33:
      if ((v150 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_262;
    }
  }
  else if ((v148 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v147[0]);
  if ((v150 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v152 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_263;
  }
LABEL_262:
  operator delete(v149[0]);
  if ((v152 & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_264;
  }
LABEL_263:
  operator delete(*(void **)__p);
  if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((v166 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_265;
  }
LABEL_264:
  operator delete((void *)v163[0]);
  if ((v166 & 0x80000000) == 0)
  {
LABEL_37:
    if ((v155 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_266:
    operator delete(v153[0]);
    v130 = (int *)(a1 + 4);
    if ((v158 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_267:
    operator delete((void *)v156);
    goto LABEL_39;
  }
LABEL_265:
  operator delete((void *)v164);
  if (v155 < 0)
    goto LABEL_266;
LABEL_38:
  v130 = (int *)(a1 + 4);
  if (v158 < 0)
    goto LABEL_267;
LABEL_39:
  for (i = 0; i != 9; ++i)
  {
    while (1)
    {
      v29 = off_1E77F5150[i];
      v30 = strlen(v29);
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v31 = v30;
      if (v30 >= 0x17)
      {
        v36 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v36 = v30 | 7;
        v37 = v36 + 1;
        p_dst = (__int128 *)operator new(v36 + 1);
        *((_QWORD *)&__dst + 1) = v31;
        v161 = v37 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v161) = v30;
        p_dst = &__dst;
        if (!v30)
        {
          LOBYTE(__dst) = 0;
          v33 = (uint64_t)*v3;
          v34 = HIBYTE(v161);
          v35 = SHIBYTE(v161);
          if (!*v3)
            goto LABEL_75;
          goto LABEL_86;
        }
      }
      memmove(p_dst, v29, v31);
      *((_BYTE *)p_dst + v31) = 0;
      v33 = (uint64_t)*v3;
      v34 = HIBYTE(v161);
      v35 = SHIBYTE(v161);
      if (!*v3)
        goto LABEL_75;
LABEL_86:
      v38 = v35 >= 0 ? v34 : *((_QWORD *)&__dst + 1);
      v39 = v35 >= 0 ? &__dst : (__int128 *)__dst;
      v40 = v3;
      do
      {
        v41 = *(char *)(v33 + 55);
        if (v41 >= 0)
          v42 = *(unsigned __int8 *)(v33 + 55);
        else
          v42 = *(_QWORD *)(v33 + 40);
        if (v41 >= 0)
          v43 = (const void *)(v33 + 32);
        else
          v43 = *(const void **)(v33 + 32);
        if (v38 >= v42)
          v44 = v42;
        else
          v44 = v38;
        v45 = memcmp(v43, v39, v44);
        v46 = v42 < v38;
        if (v45)
          v46 = v45 < 0;
        v47 = !v46;
        if (v46)
          v48 = (uint64_t *)(v33 + 8);
        else
          v48 = (uint64_t *)v33;
        if (v47)
          v40 = (char **)v33;
        v33 = *v48;
      }
      while (*v48);
      if (v40 != v3)
      {
        v51 = v40[4];
        v50 = v40 + 4;
        v49 = v51;
        v52 = *((char *)v50 + 23);
        if (v52 >= 0)
          v53 = *((unsigned __int8 *)v50 + 23);
        else
          v53 = v50[1];
        if (v52 >= 0)
          v54 = (char *)v50;
        else
          v54 = v49;
        if (v53 >= v38)
          v55 = v38;
        else
          v55 = v53;
        v56 = memcmp(v39, v54, v55);
        v57 = v38 >= v53;
        if (v56)
          v57 = v56 >= 0;
        if (v57)
        {
          *(_QWORD *)&v156 = &__dst;
          v58 = sub_1BE61F944(v143, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (__int128 **)&v156);
          sub_1BE7C9EB0((uint64_t)v142, (int *)v58 + 14, (_DWORD *)v58 + 14);
          LOBYTE(v35) = HIBYTE(v161);
        }
      }
LABEL_75:
      if ((v35 & 0x80) != 0)
        break;
      if (++i == 9)
        goto LABEL_126;
    }
    operator delete((void *)__dst);
  }
LABEL_126:
  for (j = 0; j != 9; ++j)
  {
    while (1)
    {
      v60 = off_1E77F5198[j];
      v61 = strlen(v60);
      if (v61 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      v62 = v61;
      if (v61 >= 0x17)
      {
        v67 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17)
          v67 = v61 | 7;
        v68 = v67 + 1;
        v63 = (__int128 *)operator new(v67 + 1);
        *((_QWORD *)&__dst + 1) = v62;
        v161 = v68 | 0x8000000000000000;
        *(_QWORD *)&__dst = v63;
      }
      else
      {
        HIBYTE(v161) = v61;
        v63 = &__dst;
        if (!v61)
        {
          LOBYTE(__dst) = 0;
          v64 = (uint64_t)*v3;
          v65 = HIBYTE(v161);
          v66 = SHIBYTE(v161);
          if (!*v3)
            goto LABEL_127;
          goto LABEL_138;
        }
      }
      memmove(v63, v60, v62);
      *((_BYTE *)v63 + v62) = 0;
      v64 = (uint64_t)*v3;
      v65 = HIBYTE(v161);
      v66 = SHIBYTE(v161);
      if (!*v3)
        goto LABEL_127;
LABEL_138:
      v69 = v66 >= 0 ? v65 : *((_QWORD *)&__dst + 1);
      v70 = v66 >= 0 ? &__dst : (__int128 *)__dst;
      v71 = v3;
      do
      {
        v72 = *(char *)(v64 + 55);
        if (v72 >= 0)
          v73 = *(unsigned __int8 *)(v64 + 55);
        else
          v73 = *(_QWORD *)(v64 + 40);
        if (v72 >= 0)
          v74 = (const void *)(v64 + 32);
        else
          v74 = *(const void **)(v64 + 32);
        if (v69 >= v73)
          v75 = v73;
        else
          v75 = v69;
        v76 = memcmp(v74, v70, v75);
        v77 = v73 < v69;
        if (v76)
          v77 = v76 < 0;
        v78 = !v77;
        if (v77)
          v79 = (uint64_t *)(v64 + 8);
        else
          v79 = (uint64_t *)v64;
        if (v78)
          v71 = (char **)v64;
        v64 = *v79;
      }
      while (*v79);
      if (v71 != v3)
      {
        v82 = v71[4];
        v81 = v71 + 4;
        v80 = v82;
        v83 = *((char *)v81 + 23);
        if (v83 >= 0)
          v84 = *((unsigned __int8 *)v81 + 23);
        else
          v84 = v81[1];
        if (v83 >= 0)
          v85 = (char *)v81;
        else
          v85 = v80;
        if (v84 >= v69)
          v86 = v69;
        else
          v86 = v84;
        v87 = memcmp(v70, v85, v86);
        v88 = v69 >= v84;
        if (v87)
          v88 = v87 >= 0;
        if (v88)
        {
          *(_QWORD *)&v156 = &__dst;
          v89 = sub_1BE61F944(v143, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (__int128 **)&v156);
          sub_1BE7C9EB0((uint64_t)v141, (int *)v89 + 14, (_DWORD *)v89 + 14);
          LOBYTE(v66) = HIBYTE(v161);
        }
      }
LABEL_127:
      if ((v66 & 0x80) != 0)
        break;
      if (++j == 9)
        goto LABEL_178;
    }
    operator delete((void *)__dst);
  }
LABEL_178:
  v90 = v143;
  v91 = *((_DWORD *)v143 + 7);
  *(_QWORD *)&__dst = v133;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, v133, (uint64_t)&unk_1BE8D50A2, (_DWORD **)&__dst) + 5) = v91;
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 93;
  *(_QWORD *)&v156 = &__dst;
  v92 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 1;
  strcpy((char *)&v156, "[");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v92;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_269;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_180;
LABEL_269:
    operator delete((void *)__dst);
  }
LABEL_180:
  HIBYTE(v161) = 12;
  strcpy((char *)&__dst, "\\end{matrix}");
  *(_QWORD *)&v156 = &__dst;
  v93 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 14;
  *(_QWORD *)&v156 = v140[3];
  *(_QWORD *)((char *)&v156 + 6) = v140[2];
  BYTE14(v156) = 0;
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v93;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_271;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_182;
LABEL_271:
    operator delete((void *)__dst);
  }
LABEL_182:
  HIBYTE(v161) = 13;
  *(_QWORD *)&__dst = v131;
  strcpy((char *)&__dst + 5, "aligned}");
  *(_QWORD *)&v156 = &__dst;
  v94 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 15;
  *(_QWORD *)&v156 = v140[1];
  *(_QWORD *)((char *)&v156 + 7) = v140[0];
  HIBYTE(v156) = 0;
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v94;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_273;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_184;
LABEL_273:
    operator delete((void *)__dst);
  }
LABEL_184:
  HIBYTE(v161) = 11;
  strcpy((char *)&__dst + 7, "ray}");
  *(_QWORD *)&__dst = v132;
  *(_QWORD *)&v156 = &__dst;
  v95 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 16;
  v156 = v139[1];
  LOBYTE(v157) = 0;
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v95;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_275;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_186;
LABEL_275:
    operator delete((void *)__dst);
  }
LABEL_186:
  HIBYTE(v161) = 11;
  strcpy((char *)&__dst + 7, "ray}");
  *(_QWORD *)&__dst = v132;
  *(_QWORD *)&v156 = &__dst;
  v96 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 17;
  v156 = v139[0];
  v157 = 125;
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v96;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_277;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_188;
LABEL_277:
    operator delete((void *)__dst);
  }
LABEL_188:
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 41;
  *(_QWORD *)&v156 = &__dst;
  v97 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 1;
  strcpy((char *)&v156, "(");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v97;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_279;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_190;
LABEL_279:
    operator delete((void *)__dst);
  }
LABEL_190:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rbrack");
  *(_QWORD *)&v156 = &__dst;
  v98 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 7;
  strcpy((char *)&v156, "\\lbrack");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v98;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_281;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_192;
LABEL_281:
    operator delete((void *)__dst);
  }
LABEL_192:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rangle");
  *(_QWORD *)&v156 = &__dst;
  v99 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 7;
  strcpy((char *)&v156, "\\langle");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v99;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_283;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_194;
LABEL_283:
    operator delete((void *)__dst);
  }
LABEL_194:
  HIBYTE(v161) = 6;
  strcpy((char *)&__dst, "\\rceil");
  *(_QWORD *)&v156 = &__dst;
  v100 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 6;
  strcpy((char *)&v156, "\\lceil");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v100;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_285;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_196;
LABEL_285:
    operator delete((void *)__dst);
  }
LABEL_196:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rfloor");
  *(_QWORD *)&v156 = &__dst;
  v101 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 7;
  strcpy((char *)&v156, "\\lfloor");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v101;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0)
      goto LABEL_287;
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_198;
LABEL_287:
    operator delete((void *)__dst);
  }
LABEL_198:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rfloor");
  *(_QWORD *)&v156 = &__dst;
  v102 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
  v158 = 2;
  strcpy((char *)&v156, "\\{");
  v153[0] = &v156;
  v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v102;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_200;
LABEL_289:
    operator delete((void *)__dst);
    goto LABEL_200;
  }
  if (SHIBYTE(v161) < 0)
    goto LABEL_289;
LABEL_200:
  v103 = *v130;
  *(_QWORD *)&__dst = v130;
  *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, v130, (uint64_t)&unk_1BE8D50A2, (_DWORD **)&__dst) + 5) = v103;
  HIBYTE(v161) = 6;
  strcpy((char *)&__dst, "\\left(");
  v104 = (uint64_t)*v3;
  if (*v3)
  {
    v105 = v3;
    do
    {
      v106 = *(unsigned __int8 *)(v104 + 55);
      v107 = (char)v106;
      if ((v106 & 0x80u) != 0)
        v106 = *(_QWORD *)(v104 + 40);
      if (v107 >= 0)
        v108 = (const void *)(v104 + 32);
      else
        v108 = *(const void **)(v104 + 32);
      if (v106 >= 6)
        v109 = 6;
      else
        v109 = v106;
      v110 = v106 < 6;
      v111 = memcmp(v108, &__dst, v109);
      v112 = v111 < 0;
      if (!v111)
        v112 = v110;
      v113 = !v112;
      if (v112)
        v114 = (uint64_t *)(v104 + 8);
      else
        v114 = (uint64_t *)v104;
      if (v113)
        v105 = (char **)v104;
      v104 = *v114;
    }
    while (*v114);
    if (v105 != v3)
    {
      v117 = v105[4];
      v116 = v105 + 4;
      v115 = v117;
      v118 = *((unsigned __int8 *)v116 + 23);
      v119 = (char)v118;
      if ((v118 & 0x80u) != 0)
        v118 = v116[1];
      if (v119 >= 0)
        v120 = (char *)v116;
      else
        v120 = v115;
      if (v118 >= 6)
        v121 = 6;
      else
        v121 = v118;
      v122 = v118 > 6;
      v123 = memcmp(&__dst, v120, v121);
      v124 = v123 < 0;
      if (!v123)
        v124 = v122;
      if (!v124)
      {
        HIBYTE(v161) = 7;
        strcpy((char *)&__dst, "\\right)");
        *(_QWORD *)&v156 = &__dst;
        v125 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
        v158 = 6;
        strcpy((char *)&v156, "\\left(");
        v153[0] = &v156;
        v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v125;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0)
            goto LABEL_291;
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0)
            goto LABEL_233;
LABEL_291:
          operator delete((void *)__dst);
        }
LABEL_233:
        HIBYTE(v161) = 7;
        strcpy((char *)&__dst, "\\right|");
        *(_QWORD *)&v156 = &__dst;
        v126 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
        v158 = 6;
        strcpy((char *)&v156, "\\left|");
        v153[0] = &v156;
        v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v126;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0)
            goto LABEL_293;
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0)
            goto LABEL_235;
LABEL_293:
          operator delete((void *)__dst);
        }
LABEL_235:
        HIBYTE(v161) = 13;
        strcpy((char *)&__dst, "\\right\\rfloor");
        *(_QWORD *)&v156 = &__dst;
        v127 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
        v158 = 12;
        strcpy((char *)&v156, "\\left\\lfloor");
        v153[0] = &v156;
        v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v127;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0)
            goto LABEL_295;
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0)
            goto LABEL_237;
LABEL_295:
          operator delete((void *)__dst);
        }
LABEL_237:
        HIBYTE(v161) = 12;
        strcpy((char *)&__dst, "\\right\\rceil");
        *(_QWORD *)&v156 = &__dst;
        v128 = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156) + 14);
        v158 = 11;
        strcpy((char *)&v156, "\\left\\lceil");
        v153[0] = &v156;
        v153[0] = sub_1BE61F448(v90, (const void **)&v156, (uint64_t)&unk_1BE8D50A2, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1BE7CA1D0((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1BE8D50A2, (_DWORD **)v153) + 5) = v128;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0)
            goto LABEL_297;
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0)
            goto LABEL_239;
LABEL_297:
          operator delete((void *)__dst);
        }
      }
    }
  }
LABEL_239:
  HIBYTE(v161) = 2;
  strcpy((char *)&__dst, "\\\\");
  *(_QWORD *)&v156 = &__dst;
  *((_DWORD *)v90 + 11) = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)+ 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  HIBYTE(v161) = 6;
  strcpy((char *)&__dst, "\\hline");
  *(_QWORD *)&v156 = &__dst;
  *((_DWORD *)v90 + 12) = *((_DWORD *)sub_1BE61F448(v90, (const void **)&__dst, (uint64_t)&unk_1BE8D50A2, (_OWORD **)&v156)+ 14);
  if (SHIBYTE(v161) < 0)
    operator delete((void *)__dst);
  return v90;
}

void sub_1BE7C6508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  sub_1BE65DB88(a33);
  sub_1BE65DB88(a30);
  sub_1BE65DB88(a31);
  sub_1BE65DB88(a16);
  sub_1BE65DB88(a17);
  sub_1BE65DB88(a18);
  sub_1BE65DB88(a19);
  sub_1BE65DB88(a20);
  sub_1BE65DB88(a9);
  sub_1BE61F3E8(a32, *(char **)(a32 + 8));
  _Unwind_Resume(a1);
}

void sub_1BE7C6930(CoreHandwriting::LaTeXSyntaxHelper *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  __int128 *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  __int128 *p_dst;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  signed __int8 v43;
  size_t v44;
  unsigned __int8 *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  int v52;
  _BOOL4 v53;
  BOOL v54;
  uint64_t *v55;
  const void *v56;
  _QWORD *v57;
  const void *v58;
  int v59;
  size_t v60;
  const void *v61;
  size_t v62;
  int v63;
  BOOL v64;
  int v65;
  size_t v66;
  const void *v67;
  size_t v68;
  int v69;
  _BOOL4 v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  char *v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  char *v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  char *v90;
  char *v91;
  void *v92;
  char *v95;
  uint64_t *v96;
  int v97;
  void *__p;
  char *v99;
  unint64_t v100;
  __int128 __dst;
  unint64_t v102;

  __p = 0;
  v99 = 0;
  v100 = 0;
  v4 = *((char *)a2 + 23);
  v5 = *((unsigned __int8 *)a2 + 23);
  v6 = a2[1];
  if (v4 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = a2[1];
  if (!v7)
    goto LABEL_164;
  v8 = 0;
  v9 = (uint64_t *)*a2;
  if (v4 >= 0)
    v9 = a2;
  while (*((_BYTE *)v9 + v8) == 32)
  {
    if (v7 == ++v8)
    {
      LODWORD(v8) = v7;
      break;
    }
  }
  v10 = (int)v8;
  if (v7 <= (int)v8)
  {
LABEL_164:
    __dst = 0uLL;
    v102 = 0;
    goto LABEL_165;
  }
  v11 = v4 >> 31;
  v12 = v8;
  do
  {
    if ((v11 & 1) != 0)
    {
      v14 = (uint64_t *)*a2;
      if (*(_BYTE *)(*a2 + v10) == 32)
      {
        v15 = v12;
        if (v6 < v12)
          goto LABEL_179;
        goto LABEL_23;
      }
      if (v6 - 1 != v10)
        goto LABEL_13;
      v21 = v12;
      if (v6 < v12)
        goto LABEL_182;
LABEL_36:
      v22 = v6 - v21;
      if (v22 >= (int)v8 - v12 + 1)
        v23 = (int)v8 - v12 + 1;
      else
        v23 = v22;
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        sub_1BE61F1B4();
      if (v23 >= 0x17)
      {
        v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v36 = v23 | 7;
        v37 = v36 + 1;
        p_dst = (__int128 *)operator new(v36 + 1);
        *((_QWORD *)&__dst + 1) = v23;
        v102 = v37 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v102) = v23;
        p_dst = &__dst;
        if (!v23)
        {
          LOBYTE(__dst) = 0;
          v25 = v99;
          if ((unint64_t)v99 < v100)
          {
LABEL_43:
            v26 = __dst;
            *((_QWORD *)v25 + 2) = v102;
            *(_OWORD *)v25 = v26;
            v99 = v25 + 24;
LABEL_72:
            v5 = *((unsigned __int8 *)a2 + 23);
            v6 = a2[1];
            goto LABEL_13;
          }
LABEL_70:
          v99 = sub_1BE7CA5E4(&__p, (uint64_t)&__dst);
          if (SHIBYTE(v102) < 0)
            operator delete((void *)__dst);
          goto LABEL_72;
        }
      }
      memmove(p_dst, (char *)v14 + v21, v23);
      *((_BYTE *)p_dst + v23) = 0;
      v25 = v99;
      if ((unint64_t)v99 < v100)
        goto LABEL_43;
      goto LABEL_70;
    }
    if (*((_BYTE *)a2 + v10) != 32)
    {
      if (v5 - 1 != v10)
        goto LABEL_13;
      v21 = v12;
      v6 = v5;
      v14 = a2;
      if (v12 > v5)
LABEL_182:
        sub_1BE61C764();
      goto LABEL_36;
    }
    v15 = v12;
    v6 = v5;
    v14 = a2;
    if (v12 > v5)
LABEL_179:
      sub_1BE61C764();
LABEL_23:
    v16 = v6 - v15;
    if (v16 >= (int)v8 - v12)
      v17 = (int)v8 - v12;
    else
      v17 = v16;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_1BE61F1B4();
    if (v17 >= 0x17)
    {
      v27 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v27 = v17 | 7;
      v28 = v27 + 1;
      v18 = (__int128 *)operator new(v27 + 1);
      *((_QWORD *)&__dst + 1) = v17;
      v102 = v28 | 0x8000000000000000;
      *(_QWORD *)&__dst = v18;
    }
    else
    {
      HIBYTE(v102) = v17;
      v18 = &__dst;
      if (!v17)
      {
        LOBYTE(__dst) = 0;
        v19 = v99;
        if ((unint64_t)v99 < v100)
          goto LABEL_30;
        goto LABEL_48;
      }
    }
    memmove(v18, (char *)v14 + v15, v17);
    *((_BYTE *)v18 + v17) = 0;
    v19 = v99;
    if ((unint64_t)v99 < v100)
    {
LABEL_30:
      v20 = __dst;
      *((_QWORD *)v19 + 2) = v102;
      *(_OWORD *)v19 = v20;
      v99 = v19 + 24;
      goto LABEL_50;
    }
LABEL_48:
    v99 = sub_1BE7CA5E4(&__p, (uint64_t)&__dst);
    if (SHIBYTE(v102) < 0)
      operator delete((void *)__dst);
LABEL_50:
    v5 = *((unsigned __int8 *)a2 + 23);
    v6 = a2[1];
    if ((v5 & 0x80u) == 0)
      v29 = *((unsigned __int8 *)a2 + 23);
    else
      v29 = a2[1];
    v30 = (int)v8;
    if ((v5 & 0x80u) == 0)
      v31 = a2;
    else
      v31 = (uint64_t *)*a2;
    if (v29 <= (int)v8 + 1)
      v32 = v8 + 1;
    else
      v32 = v29;
    if (v29 <= (int)v8 + 1)
      v33 = v8 + 1;
    else
      v33 = v29;
    LODWORD(v8) = v33 - 1;
    v34 = (uint64_t)v31 + 1;
    do
    {
      v12 = v30 + 1;
      if (v29 <= v30 + 1)
      {
        v12 = v32;
        goto LABEL_13;
      }
      v35 = *(unsigned __int8 *)(v34 + v30++);
    }
    while (v35 == 32);
    LODWORD(v8) = v12 - 1;
LABEL_13:
    LODWORD(v8) = v8 + 1;
    v10 = (int)v8;
    LOBYTE(v11) = (v5 & 0x80u) != 0;
    if ((v5 & 0x80u) == 0)
      v13 = v5;
    else
      v13 = v6;
  }
  while (v13 > (int)v8);
  v38 = (char *)__p;
  __dst = 0uLL;
  v102 = 0;
  v95 = v99;
  if (__p == v99)
  {
LABEL_165:
    sub_1BE7C7168(a1, (uint64_t *)&__dst, a3);
    goto LABEL_167;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v96 = (uint64_t *)((char *)a1 + 8);
  while (1)
  {
    v42 = (uint64_t *)*v96;
    if (!*v96)
      break;
    v43 = v38[23];
    v44 = v43 >= 0 ? v38[23] : *((_QWORD *)v38 + 1);
    v45 = v43 >= 0 ? (unsigned __int8 *)v38 : *(unsigned __int8 **)v38;
    v46 = (uint64_t *)((char *)a1 + 8);
    v47 = *v96;
    do
    {
      v48 = *(char *)(v47 + 55);
      if (v48 >= 0)
        v49 = *(unsigned __int8 *)(v47 + 55);
      else
        v49 = *(_QWORD *)(v47 + 40);
      if (v48 >= 0)
        v50 = (const void *)(v47 + 32);
      else
        v50 = *(const void **)(v47 + 32);
      if (v44 >= v49)
        v51 = v49;
      else
        v51 = v44;
      v52 = memcmp(v50, v45, v51);
      v53 = v49 < v44;
      if (v52)
        v53 = v52 < 0;
      v54 = !v53;
      if (v53)
        v55 = (uint64_t *)(v47 + 8);
      else
        v55 = (uint64_t *)v47;
      if (v54)
        v46 = (uint64_t *)v47;
      v47 = *v55;
    }
    while (*v55);
    if (v46 == v96)
      break;
    v58 = (const void *)v46[4];
    v57 = v46 + 4;
    v56 = v58;
    v59 = *((char *)v57 + 23);
    if (v59 >= 0)
      v60 = *((unsigned __int8 *)v57 + 23);
    else
      v60 = v57[1];
    if (v59 >= 0)
      v61 = v57;
    else
      v61 = v56;
    if (v60 >= v44)
      v62 = v44;
    else
      v62 = v60;
    v63 = memcmp(v45, v61, v62);
    v64 = v44 < v60;
    if (v63)
      v64 = v63 < 0;
    if (v64)
      break;
    while (1)
    {
      while (1)
      {
        v65 = *((char *)v42 + 55);
        if (v65 >= 0)
          v66 = *((unsigned __int8 *)v42 + 55);
        else
          v66 = v42[5];
        if (v65 >= 0)
          v67 = v42 + 4;
        else
          v67 = (const void *)v42[4];
        if (v66 >= v44)
          v68 = v44;
        else
          v68 = v66;
        v69 = memcmp(v45, v67, v68);
        v70 = v44 < v66;
        if (v69)
          v70 = v69 < 0;
        if (!v70)
          break;
        v42 = (uint64_t *)*v42;
        if (!v42)
          goto LABEL_178;
      }
      v71 = memcmp(v67, v45, v68);
      v72 = v66 < v44;
      if (v71)
        v72 = v71 < 0;
      if (!v72)
        break;
      v42 = (uint64_t *)v42[1];
      if (!v42)
LABEL_178:
        sub_1BE61C778("map::at:  key not found");
    }
    if (v41 < v40)
    {
      *(_DWORD *)v41 = *((_DWORD *)v42 + 14);
      v41 += 4;
      *((_QWORD *)&__dst + 1) = v41;
      v38 += 24;
      if (v38 == v95)
        goto LABEL_165;
    }
    else
    {
      v73 = (v41 - v39) >> 2;
      v74 = v73 + 1;
      if ((unint64_t)(v73 + 1) >> 62)
        sub_1BE61F930();
      if ((v40 - v39) >> 1 > v74)
        v74 = (v40 - v39) >> 1;
      if ((unint64_t)(v40 - v39) >= 0x7FFFFFFFFFFFFFFCLL)
        v75 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v75 = v74;
      if (v75)
      {
        if (v75 >> 62)
          sub_1BE61F100();
        v76 = operator new(4 * v75);
        v77 = &v76[4 * v73];
        *(_DWORD *)v77 = *((_DWORD *)v42 + 14);
        v78 = (uint64_t)(v77 + 4);
        v79 = v41 - v39;
        if (v41 == v39)
          goto LABEL_152;
      }
      else
      {
        v76 = 0;
        v77 = (char *)(4 * v73);
        *(_DWORD *)(4 * v73) = *((_DWORD *)v42 + 14);
        v78 = 4 * v73 + 4;
        v79 = v41 - v39;
        if (v41 == v39)
          goto LABEL_152;
      }
      v80 = v79 - 4;
      if (v80 >= 0xBC)
      {
        v83 = (v41 - 4 - v39) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v76[v41 - v39 - 4 - v83] > &v76[v41 - v39 - 4])
        {
          v81 = v41;
        }
        else if (&v41[-v83 - 4] > v41 - 4)
        {
          v81 = v41;
        }
        else if ((unint64_t)(v39 - v76) >= 0x20)
        {
          v84 = (v80 >> 2) + 1;
          v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
          v81 = &v41[-v85];
          v77 -= v85;
          v86 = &v76[4 * v73 - 16];
          v87 = v41 - 16;
          v88 = v84 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 8;
          }
          while (v88);
          if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_152;
        }
        else
        {
          v81 = v41;
        }
      }
      else
      {
        v81 = v41;
      }
      do
      {
        v82 = *((_DWORD *)v81 - 1);
        v81 -= 4;
        *((_DWORD *)v77 - 1) = v82;
        v77 -= 4;
      }
      while (v81 != v39);
LABEL_152:
      v40 = &v76[4 * v75];
      *(_QWORD *)&__dst = v77;
      *((_QWORD *)&__dst + 1) = v78;
      v102 = (unint64_t)v40;
      if (v39)
        operator delete(v39);
      v39 = v77;
      *((_QWORD *)&__dst + 1) = v78;
      v38 += 24;
      v41 = (char *)v78;
      if (v38 == v95)
        goto LABEL_165;
    }
  }
  v97 = 0;
  sub_1BE7CA4F4(a3, &v97, 1);
LABEL_167:
  if ((_QWORD)__dst)
    operator delete((void *)__dst);
  v90 = (char *)__p;
  if (__p)
  {
    v91 = v99;
    v92 = __p;
    if (v99 != __p)
    {
      do
      {
        if (*(v91 - 1) < 0)
          operator delete(*((void **)v91 - 3));
        v91 -= 24;
      }
      while (v91 != v90);
      v92 = __p;
    }
    v99 = v90;
    operator delete(v92);
  }
}

void sub_1BE7C70D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1BE61081C(&a15);
  _Unwind_Resume(a1);
}

void sub_1BE7C7168(CoreHandwriting::LaTeXSyntaxHelper *this@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4;
  int *v7;
  char *v8;
  int *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  _BYTE *v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  int8x8_t v56;
  uint8x8_t v57;
  unint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int8x8_t v65;
  unint64_t v66;
  uint8x8_t v67;
  unint64_t v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  _DWORD *v87;
  int v88;
  uint64_t *v89;
  int v90;
  uint64_t *v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  char *v106;
  int64_t v107;
  uint64_t v108;
  int8x8_t v109;
  uint8x8_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  int v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int8x8_t v120;
  uint8x8_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 *v132;
  uint64_t v133;
  __int128 v134;
  char *v136;
  uint64_t v137;
  int8x8_t v138;
  unint64_t v139;
  uint8x8_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  __int128 *v156;
  uint64_t v157;
  __int128 v158;
  char *v159;
  char *v160;
  uint64_t **v161;
  int *__p;
  int v163;
  char *v164;
  _DWORD *v165;
  char *v166;

  __p = 0;
  v4 = *a2;
  if (a2[1] == *a2)
  {
    v8 = 0;
    v164 = 0;
    v165 = 0;
    v166 = 0;
    a3[2] = 0;
    a3[1] = 0;
    *a3 = (uint64_t *)(a3 + 1);
    goto LABEL_152;
  }
  v161 = a3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v14 = *(_DWORD *)(v4 + 4 * v12);
    v15 = *((_QWORD *)this + 8);
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = v14;
        if (v15 <= v14)
          v17 = v14 % v15;
      }
      else
      {
        v17 = (v15 - 1) & v14;
      }
      v18 = *(uint64_t ***)(*((_QWORD *)this + 7) + 8 * v17);
      if (v18)
      {
        v19 = *v18;
        if (v19)
        {
          if (v16.u32[0] < 2uLL)
          {
            v20 = v15 - 1;
            while (1)
            {
              v21 = v19[1];
              if (v21 == v14)
              {
                if (*((_DWORD *)v19 + 4) == v14)
                  goto LABEL_45;
              }
              else if ((v21 & v20) != v17)
              {
                goto LABEL_24;
              }
              v19 = (uint64_t *)*v19;
              if (!v19)
                goto LABEL_24;
            }
          }
          do
          {
            v22 = v19[1];
            if (v22 == v14)
            {
              if (*((_DWORD *)v19 + 4) == v14)
              {
LABEL_45:
                if (v8 < v11)
                {
                  *(_DWORD *)v8 = v14;
                  v31 = (uint64_t)(v8 + 4);
                  goto LABEL_67;
                }
                v32 = v11;
                v33 = v8 - v10;
                v34 = (v8 - v10) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
                  sub_1BE61F930();
                v36 = v32 - v10;
                v37 = (v32 - v10) >> 1;
                if (v37 > v35)
                  v35 = v37;
                if (v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v38 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v38 = v35;
                if (v38)
                {
                  if (v38 >> 62)
                    sub_1BE61F100();
                  v39 = v8;
                  v40 = v38;
                  v41 = operator new(4 * v38);
                  v8 = v39;
                  v38 = v40;
                  v7 = (int *)&v41[4 * v34];
                  *v7 = v14;
                  v31 = (uint64_t)(v7 + 1);
                  v42 = v8 - v10;
                  if (v8 == v10)
                    goto LABEL_64;
LABEL_61:
                  v43 = v42 - 4;
                  if (v43 < 0xBC)
                  {
                    v44 = v8;
                    goto LABEL_63;
                  }
                  v74 = (v8 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL;
                  if (&v41[v33 - 4 - v74] > &v41[v33 - 4])
                  {
                    v44 = v8;
                    goto LABEL_63;
                  }
                  if (&v8[-v74 - 4] > v8 - 4)
                  {
                    v44 = v8;
                    goto LABEL_63;
                  }
                  if ((unint64_t)(v8 - &v41[v33]) < 0x20)
                  {
                    v44 = v8;
                    goto LABEL_63;
                  }
                  v75 = (v43 >> 2) + 1;
                  v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
                  v44 = &v8[-v76];
                  v7 = (int *)((char *)v7 - v76);
                  v77 = &v41[4 * v34 - 16];
                  v78 = v8 - 16;
                  v79 = v75 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v80 = *(_OWORD *)v78;
                    *(v77 - 1) = *((_OWORD *)v78 - 1);
                    *v77 = v80;
                    v77 -= 2;
                    v78 -= 32;
                    v79 -= 8;
                  }
                  while (v79);
                  if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_63:
                      v45 = *((_DWORD *)v44 - 1);
                      v44 -= 4;
                      *--v7 = v45;
                    }
                    while (v44 != v10);
                  }
                }
                else
                {
                  v41 = 0;
                  v7 = (int *)(4 * v34);
                  *(_DWORD *)(4 * v34) = v14;
                  v31 = 4 * v34 + 4;
                  v42 = v8 - v10;
                  if (v8 != v10)
                    goto LABEL_61;
                }
LABEL_64:
                v11 = &v41[4 * v38];
                __p = v7;
                if (v10)
                  operator delete(v10);
                v9 = v7;
                v10 = (char *)v7;
                goto LABEL_67;
              }
            }
            else
            {
              if (v22 >= v15)
                v22 %= v15;
              if (v22 != v17)
                break;
            }
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_24:
    v23 = *((_QWORD *)this + 13);
    if (!v23)
      goto LABEL_68;
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = v14;
      if (v23 <= v14)
        v25 = v14 % v23;
    }
    else
    {
      v25 = (v23 - 1) & v14;
    }
    v26 = *(uint64_t ***)(*((_QWORD *)this + 12) + 8 * v25);
    if (!v26)
      goto LABEL_68;
    v27 = *v26;
    if (!v27)
      goto LABEL_68;
    if (v24.u32[0] < 2uLL)
    {
      v28 = v23 - 1;
      while (1)
      {
        v30 = v27[1];
        if (v30 == v14)
        {
          if (*((_DWORD *)v27 + 4) == v14)
            goto LABEL_47;
        }
        else if ((v30 & v28) != v25)
        {
          goto LABEL_68;
        }
        v27 = (uint64_t *)*v27;
        if (!v27)
          goto LABEL_68;
      }
    }
    while (1)
    {
      v29 = v27[1];
      if (v29 == v14)
        break;
      if (v29 >= v23)
        v29 %= v23;
      if (v29 != v25)
        goto LABEL_68;
LABEL_34:
      v27 = (uint64_t *)*v27;
      if (!v27)
        goto LABEL_68;
    }
    if (*((_DWORD *)v27 + 4) != v14)
      goto LABEL_34;
LABEL_47:
    if (v8 == (char *)v9)
      goto LABEL_49;
    v31 = (uint64_t)(v8 - 4);
    v10 = (char *)v9;
    if (!CoreHandwriting::LaTeXSyntaxHelper::checkCompatibleSymbols(this, *((_DWORD *)v8 - 1), v14))
      goto LABEL_49;
LABEL_67:
    v8 = (char *)v31;
LABEL_68:
    v46 = *((_QWORD *)this + 23);
    if (!v46)
      goto LABEL_88;
    v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      v48 = v14;
      if (v46 <= v14)
        v48 = v14 % v46;
    }
    else
    {
      v48 = (v46 - 1) & v14;
    }
    v49 = *(uint64_t ***)(*((_QWORD *)this + 22) + 8 * v48);
    if (!v49 || (v50 = *v49) == 0)
    {
LABEL_88:
      v4 = *a2;
      if (!v12)
        goto LABEL_3;
      goto LABEL_89;
    }
    if (v47.u32[0] < 2uLL)
    {
      v51 = v46 - 1;
      while (1)
      {
        v53 = v50[1];
        if (v53 == v14)
        {
          if (*((_DWORD *)v50 + 4) == v14)
            goto LABEL_116;
        }
        else if ((v53 & v51) != v48)
        {
          goto LABEL_88;
        }
        v50 = (uint64_t *)*v50;
        if (!v50)
          goto LABEL_88;
      }
    }
    while (2)
    {
      v52 = v50[1];
      if (v52 != v14)
      {
        if (v52 >= v46)
          v52 %= v46;
        if (v52 != v48)
          goto LABEL_88;
        goto LABEL_78;
      }
      if (*((_DWORD *)v50 + 4) != v14)
      {
LABEL_78:
        v50 = (uint64_t *)*v50;
        if (!v50)
          goto LABEL_88;
        continue;
      }
      break;
    }
LABEL_116:
    if (v8 == (char *)v7)
      goto LABEL_49;
    v65 = *(int8x8_t *)((char *)this + 144);
    if (!*(_QWORD *)&v65)
      goto LABEL_49;
    v66 = *((int *)v8 - 1);
    v67 = (uint8x8_t)vcnt_s8(v65);
    v67.i16[0] = vaddlv_u8(v67);
    if (v67.u32[0] > 1uLL)
    {
      v68 = *((int *)v8 - 1);
      if (*(_QWORD *)&v65 <= v66)
        v68 = v66 % *(_QWORD *)&v65;
    }
    else
    {
      v68 = (*(_QWORD *)&v65 - 1) & v66;
    }
    v69 = *(uint64_t ***)(*((_QWORD *)this + 17) + 8 * v68);
    if (!v69)
      goto LABEL_49;
    v70 = *v69;
    if (!v70)
      goto LABEL_49;
    if (v67.u32[0] < 2uLL)
    {
      v71 = *(_QWORD *)&v65 - 1;
      while (1)
      {
        v73 = v70[1];
        if (v73 == v66)
        {
          if (*((_DWORD *)v70 + 4) == (_DWORD)v66)
            goto LABEL_138;
        }
        else if ((v73 & v71) != v68)
        {
          goto LABEL_49;
        }
        v70 = (uint64_t *)*v70;
        if (!v70)
          goto LABEL_49;
      }
    }
    while (2)
    {
      v72 = v70[1];
      if (v72 != v66)
      {
        if (v72 >= *(_QWORD *)&v65)
          v72 %= *(_QWORD *)&v65;
        if (v72 != v68)
          goto LABEL_49;
LABEL_127:
        v70 = (uint64_t *)*v70;
        if (!v70)
          goto LABEL_49;
        continue;
      }
      break;
    }
    if (*((_DWORD *)v70 + 4) != (_DWORD)v66)
      goto LABEL_127;
LABEL_138:
    v9 = v7;
    v10 = (char *)v7;
    v4 = *a2;
    if (!v12)
      goto LABEL_3;
LABEL_89:
    v54 = *((_DWORD *)this + 6);
    v55 = *(int *)(v4 + 4 * (v12 - 1));
    if (v14 != v54)
    {
      v56 = *(int8x8_t *)((char *)this + 224);
      if (v56)
      {
        v57 = (uint8x8_t)vcnt_s8(v56);
        v57.i16[0] = vaddlv_u8(v57);
        if (v57.u32[0] > 1uLL)
        {
          v58 = *(int *)(v4 + 4 * (v12 - 1));
          if (*(_QWORD *)&v56 <= v55)
            v58 = v55 % *(_QWORD *)&v56;
        }
        else
        {
          v58 = (*(_QWORD *)&v56 - 1) & v55;
        }
        v59 = *(uint64_t ***)(*((_QWORD *)this + 27) + 8 * v58);
        if (v59)
        {
          v60 = *v59;
          if (v60)
          {
            if (v57.u32[0] < 2uLL)
            {
              v61 = *(_QWORD *)&v56 - 1;
              while (1)
              {
                v63 = v60[1];
                if (v63 == v55)
                {
                  if (*((_DWORD *)v60 + 4) == (_DWORD)v55)
                    goto LABEL_49;
                }
                else if ((v63 & v61) != v58)
                {
                  goto LABEL_110;
                }
                v60 = (uint64_t *)*v60;
                if (!v60)
                  goto LABEL_110;
              }
            }
            do
            {
              v62 = v60[1];
              if (v62 == v55)
              {
                if (*((_DWORD *)v60 + 4) == (_DWORD)v55)
                  goto LABEL_49;
              }
              else
              {
                if (v62 >= *(_QWORD *)&v56)
                  v62 %= *(_QWORD *)&v56;
                if (v62 != v58)
                  break;
              }
              v60 = (uint64_t *)*v60;
            }
            while (v60);
          }
        }
      }
    }
LABEL_110:
    if ((_DWORD)v55 == *((_DWORD *)this + 9)
      && (v64 = *(_DWORD *)(v4 + 4 * v12), v64 != v54)
      && v64 != *((_DWORD *)this + 10)
      || v14 == *((_DWORD *)this + 12) && (_DWORD)v55 != *((_DWORD *)this + 11))
    {
LABEL_49:
      LODWORD(v164) = 1;
      sub_1BE7CA4F4(v161, (int *)&v164, 1);
      goto LABEL_173;
    }
LABEL_3:
    ++v12;
    v13 = a2[1];
  }
  while (v12 < (v13 - v4) >> 2);
  v164 = 0;
  v165 = 0;
  v166 = 0;
  if (v13 == v4)
  {
    a3 = v161;
    v161[2] = 0;
    v161[1] = 0;
    *v161 = (uint64_t *)(v161 + 1);
    goto LABEL_152;
  }
  v160 = v8;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  while (2)
  {
    v98 = *(int *)(v4 + 4 * v95);
    v99 = *((_DWORD *)this + 6);
    if ((_DWORD)v98 == v99)
    {
      if (v94 < v92)
      {
        *(_DWORD *)v94 = v95;
        v96 = v94 + 4;
        v93 = (unint64_t)v92;
        goto LABEL_179;
      }
      v100 = v164;
      v101 = (char *)(v94 - v164);
      v102 = (v94 - v164) >> 2;
      v103 = v102 + 1;
      if (!((unint64_t)(v102 + 1) >> 62))
      {
        if ((v92 - v164) >> 1 > v103)
          v103 = (v92 - v164) >> 1;
        if ((unint64_t)(v92 - v164) >= 0x7FFFFFFFFFFFFFFCLL)
          v104 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v104 = v103;
        if (v104)
        {
          if (v104 >> 62)
            goto LABEL_328;
          v105 = operator new(4 * v104);
          v106 = &v105[4 * v102];
          *(_DWORD *)v106 = v95;
          v97 = (uint64_t)(v106 + 4);
          v107 = v94 - v100;
          if (v94 == v100)
            goto LABEL_204;
        }
        else
        {
          v105 = 0;
          v106 = (char *)(4 * v102);
          *(_DWORD *)(4 * v102) = v95;
          v97 = 4 * v102 + 4;
          v107 = v94 - v100;
          if (v94 == v100)
            goto LABEL_204;
        }
        v112 = v107 - 4;
        if (v112 >= 0xBC)
        {
          v123 = (v94 - 4 - v100) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v101[(_QWORD)v105 - 4 - v123] > &v101[(_QWORD)v105 - 4])
          {
            v113 = v94;
          }
          else if (&v94[-v123 - 4] > v94 - 4)
          {
            v113 = v94;
          }
          else if ((unint64_t)(v94 - v105 - (_QWORD)v101) >= 0x20)
          {
            v129 = (v112 >> 2) + 1;
            v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
            v113 = &v94[-v130];
            v106 -= v130;
            v131 = &v105[4 * v102 - 16];
            v132 = (__int128 *)(v94 - 16);
            v133 = v129 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v134 = *v132;
              *(v131 - 1) = *(v132 - 1);
              *v131 = v134;
              v131 -= 2;
              v132 -= 2;
              v133 -= 8;
            }
            while (v133);
            if (v129 == (v129 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_204;
          }
          else
          {
            v113 = v94;
          }
        }
        else
        {
          v113 = v94;
        }
        do
        {
          v114 = *((_DWORD *)v113 - 1);
          v113 -= 4;
          *((_DWORD *)v106 - 1) = v114;
          v106 -= 4;
        }
        while (v113 != v100);
LABEL_204:
        v92 = &v105[4 * v104];
        v164 = v106;
        v166 = v92;
        if (v100)
          operator delete(v100);
        v93 = (unint64_t)v92;
        goto LABEL_180;
      }
      goto LABEL_327;
    }
    if ((_DWORD)v98 == *((_DWORD *)this + 7))
    {
      v108 = *((int *)v94 - 1);
      v96 = v94 - 4;
      if (*(_DWORD *)(v4 + 4 * v108) == v99)
        goto LABEL_179;
      v163 = 5;
      a3 = v161;
      sub_1BE7CA4F4(v161, &v163, 1);
      v94 = v164;
      goto LABEL_318;
    }
    v109 = *(int8x8_t *)((char *)this + 304);
    if (v109)
    {
      v110 = (uint8x8_t)vcnt_s8(v109);
      v110.i16[0] = vaddlv_u8(v110);
      if (v110.u32[0] > 1uLL)
      {
        v111 = *(int *)(v4 + 4 * v95);
        if (*(_QWORD *)&v109 <= v98)
          v111 = v98 % *(_QWORD *)&v109;
      }
      else
      {
        v111 = (*(_QWORD *)&v109 - 1) & v98;
      }
      v115 = *(uint64_t ***)(*((_QWORD *)this + 37) + 8 * v111);
      if (v115)
      {
        v116 = *v115;
        if (v116)
        {
          if (v110.u32[0] < 2uLL)
          {
            v117 = *(_QWORD *)&v109 - 1;
            while (1)
            {
              v119 = v116[1];
              if (v119 == v98)
              {
                if (*((_DWORD *)v116 + 4) == (_DWORD)v98)
                  goto LABEL_255;
              }
              else if ((v119 & v117) != v111)
              {
                goto LABEL_224;
              }
              v116 = (uint64_t *)*v116;
              if (!v116)
                goto LABEL_224;
            }
          }
          do
          {
            v118 = v116[1];
            if (v118 == v98)
            {
              if (*((_DWORD *)v116 + 4) == (_DWORD)v98)
              {
LABEL_255:
                v100 = v164;
                if ((_DWORD)v98 == *((_DWORD *)this + 8) && v94 != v164)
                {
                  v97 = (uint64_t)(v94 - 4);
                  if (*(_DWORD *)(v4 + 4 * *((int *)v94 - 1)) == (_DWORD)v98)
                    goto LABEL_180;
                }
                if ((unint64_t)v94 < v93)
                {
                  *(_DWORD *)v94 = v95;
                  v96 = v94 + 4;
                  goto LABEL_179;
                }
                v142 = (v94 - v164) >> 2;
                v143 = v142 + 1;
                if (!((unint64_t)(v142 + 1) >> 62))
                {
                  if ((uint64_t)(v93 - (_QWORD)v164) >> 1 > v143)
                    v143 = (uint64_t)(v93 - (_QWORD)v164) >> 1;
                  if (v93 - (unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
                    v104 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v104 = v143;
                  if (v104)
                  {
                    if (!(v104 >> 62))
                    {
                      v105 = operator new(4 * v104);
                      goto LABEL_296;
                    }
LABEL_328:
                    sub_1BE61F100();
                  }
                  v105 = 0;
LABEL_296:
                  v106 = &v105[4 * v142];
                  *(_DWORD *)v106 = v95;
                  v97 = (uint64_t)(v106 + 4);
                  if (v94 != v100)
                  {
                    v149 = v94 - v100 - 4;
                    if (v149 < 0xBC)
                    {
                      v150 = v94;
                      goto LABEL_299;
                    }
                    v152 = (v94 - 4 - v100) & 0xFFFFFFFFFFFFFFFCLL;
                    if (&v105[v94 - v100 - 4 - v152] > &v105[v94 - v100 - 4])
                    {
                      v150 = v94;
                      goto LABEL_299;
                    }
                    if (&v94[-v152 - 4] > v94 - 4)
                    {
                      v150 = v94;
                      goto LABEL_299;
                    }
                    if ((unint64_t)(v100 - v105) < 0x20)
                    {
                      v150 = v94;
                      goto LABEL_299;
                    }
                    v153 = (v149 >> 2) + 1;
                    v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
                    v150 = &v94[-v154];
                    v106 -= v154;
                    v155 = &v105[4 * v142 - 16];
                    v156 = (__int128 *)(v94 - 16);
                    v157 = v153 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v158 = *v156;
                      *(v155 - 1) = *(v156 - 1);
                      *v155 = v158;
                      v155 -= 2;
                      v156 -= 2;
                      v157 -= 8;
                    }
                    while (v157);
                    if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_299:
                        v151 = *((_DWORD *)v150 - 1);
                        v150 -= 4;
                        *((_DWORD *)v106 - 1) = v151;
                        v106 -= 4;
                      }
                      while (v150 != v100);
                    }
                  }
                  goto LABEL_204;
                }
LABEL_327:
                sub_1BE61F930();
              }
            }
            else
            {
              if (v118 >= *(_QWORD *)&v109)
                v118 %= *(_QWORD *)&v109;
              if (v118 != v111)
                break;
            }
            v116 = (uint64_t *)*v116;
          }
          while (v116);
        }
      }
    }
LABEL_224:
    v120 = *(int8x8_t *)((char *)this + 344);
    if (!*(_QWORD *)&v120)
      goto LABEL_181;
    v121 = (uint8x8_t)vcnt_s8(v120);
    v121.i16[0] = vaddlv_u8(v121);
    if (v121.u32[0] > 1uLL)
    {
      v122 = *(int *)(v4 + 4 * v95);
      if (*(_QWORD *)&v120 <= v98)
        v122 = v98 % *(_QWORD *)&v120;
    }
    else
    {
      v122 = (*(_QWORD *)&v120 - 1) & v98;
    }
    v124 = *(uint64_t ***)(*((_QWORD *)this + 42) + 8 * v122);
    if (!v124)
      goto LABEL_181;
    v125 = *v124;
    if (!v125)
      goto LABEL_181;
    if (v121.u32[0] < 2uLL)
    {
      v126 = *(_QWORD *)&v120 - 1;
      while (1)
      {
        v128 = v125[1];
        if (v128 == v98)
        {
          if (*((_DWORD *)v125 + 4) == (_DWORD)v98)
            goto LABEL_262;
        }
        else if ((v128 & v126) != v122)
        {
          goto LABEL_181;
        }
        v125 = (uint64_t *)*v125;
        if (!v125)
          goto LABEL_181;
      }
    }
    while (2)
    {
      v127 = v125[1];
      if (v127 != v98)
      {
        if (v127 >= *(_QWORD *)&v120)
          v127 %= *(_QWORD *)&v120;
        if (v127 != v122)
          goto LABEL_181;
        goto LABEL_238;
      }
      if (*((_DWORD *)v125 + 4) != (_DWORD)v98)
      {
LABEL_238:
        v125 = (uint64_t *)*v125;
        if (!v125)
          goto LABEL_181;
        continue;
      }
      break;
    }
LABEL_262:
    v136 = v164;
    if (v94 == v164)
    {
      v163 = 5;
      a3 = v161;
      sub_1BE7CA4F4(v161, &v163, 1);
      goto LABEL_318;
    }
    v137 = *((int *)v94 - 1);
    v96 = v94 - 4;
    if (!CoreHandwriting::LaTeXSyntaxHelper::checkCompatibleSymbols(this, *(_DWORD *)(v4 + 4 * v137), v98))
    {
      v163 = 5;
      a3 = v161;
      sub_1BE7CA4F4(v161, &v163, 1);
LABEL_326:
      v94 = v136;
LABEL_318:
      v8 = v160;
      if (!v94)
        goto LABEL_152;
LABEL_151:
      v165 = v94;
      v81 = v8;
      operator delete(v94);
      v8 = v81;
      goto LABEL_152;
    }
    if ((_DWORD)v95 - *(_DWORD *)v96 == 1)
    {
      v163 = 6;
      a3 = v161;
      sub_1BE7CA4F4(v161, &v163, 1);
      goto LABEL_326;
    }
    v138 = *(int8x8_t *)((char *)this + 264);
    if (v138)
    {
      v139 = *(int *)(*a2 + 4 * v95 - 4);
      v140 = (uint8x8_t)vcnt_s8(v138);
      v140.i16[0] = vaddlv_u8(v140);
      if (v140.u32[0] > 1uLL)
      {
        v141 = *(int *)(*a2 + 4 * v95 - 4);
        if (*(_QWORD *)&v138 <= v139)
          v141 = v139 % *(_QWORD *)&v138;
      }
      else
      {
        v141 = (*(_QWORD *)&v138 - 1) & v139;
      }
      v144 = *(uint64_t ***)(*((_QWORD *)this + 32) + 8 * v141);
      if (v144)
      {
        v145 = *v144;
        if (v145)
        {
          if (v140.u32[0] < 2uLL)
          {
            v146 = *(_QWORD *)&v138 - 1;
            while (1)
            {
              v148 = v145[1];
              if (v148 == v139)
              {
                if (*((_DWORD *)v145 + 4) == (_DWORD)v139)
                  goto LABEL_322;
              }
              else if ((v148 & v146) != v141)
              {
                goto LABEL_179;
              }
              v145 = (uint64_t *)*v145;
              if (!v145)
                goto LABEL_179;
            }
          }
          do
          {
            v147 = v145[1];
            if (v147 == v139)
            {
              if (*((_DWORD *)v145 + 4) == (_DWORD)v139)
              {
LABEL_322:
                v163 = 7;
                a3 = v161;
                sub_1BE7CA4F4(v161, &v163, 1);
                goto LABEL_326;
              }
            }
            else
            {
              if (v147 >= *(_QWORD *)&v138)
                v147 %= *(_QWORD *)&v138;
              if (v147 != v141)
                break;
            }
            v145 = (uint64_t *)*v145;
          }
          while (v145);
        }
      }
    }
LABEL_179:
    v97 = (uint64_t)v96;
LABEL_180:
    v165 = (_DWORD *)v97;
    v94 = (char *)v97;
    v4 = *a2;
    v13 = a2[1];
LABEL_181:
    if (++v95 < (unint64_t)((v13 - v4) >> 2))
      continue;
    break;
  }
  v159 = v164;
  if (v94 != v164)
  {
    v163 = 4;
    a3 = v161;
    sub_1BE7CA4F4(v161, &v163, 1);
    v94 = v159;
    goto LABEL_318;
  }
  v8 = v160;
  a3 = v161;
  v161[2] = 0;
  v161[1] = 0;
  *v161 = (uint64_t *)(v161 + 1);
  if (v94)
    goto LABEL_151;
LABEL_152:
  v83 = (uint64_t *)(a3 + 1);
  v82 = a3[1];
  v84 = (uint64_t *)(a3 + 1);
  if (v8 != (char *)__p)
  {
    if (v82)
    {
      v85 = a3[1];
      while (1)
      {
        while (1)
        {
          v84 = v85;
          v86 = *((_DWORD *)v85 + 7);
          if (v86 < 4)
            break;
          v85 = (uint64_t *)*v84;
          v83 = v84;
          if (!*v84)
            goto LABEL_160;
        }
        if (v86 == 3)
          goto LABEL_173;
        v85 = (uint64_t *)v84[1];
        if (!v85)
        {
          v83 = v84 + 1;
          break;
        }
      }
    }
LABEL_160:
    v87 = operator new(0x20uLL);
    v88 = 3;
LABEL_170:
    v87[7] = v88;
    *(_QWORD *)v87 = 0;
    *((_QWORD *)v87 + 1) = 0;
    *((_QWORD *)v87 + 2) = v84;
    *v83 = (uint64_t)v87;
    v91 = (uint64_t *)**a3;
    if (v91)
    {
      *a3 = v91;
      v87 = (_DWORD *)*v83;
    }
    sub_1BE61F5C0(a3[1], (uint64_t *)v87);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    goto LABEL_173;
  }
  if (!v82)
  {
LABEL_169:
    v87 = operator new(0x20uLL);
    v88 = 2;
    goto LABEL_170;
  }
  v89 = a3[1];
  while (1)
  {
    while (1)
    {
      v84 = v89;
      v90 = *((_DWORD *)v89 + 7);
      if (v90 < 3)
        break;
      v89 = (uint64_t *)*v84;
      v83 = v84;
      if (!*v84)
        goto LABEL_169;
    }
    if (v90 == 2)
      break;
    v89 = (uint64_t *)v84[1];
    if (!v89)
    {
      v83 = v84 + 1;
      goto LABEL_169;
    }
  }
LABEL_173:
  if (__p)
    operator delete(__p);
}

void sub_1BE7C815C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a12;
    if (!a12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

BOOL CoreHandwriting::LaTeXSyntaxHelper::checkCompatibleSymbols(CoreHandwriting::LaTeXSyntaxHelper *this, int a2, int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  v3 = *((_QWORD *)this + 48);
  if (!v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = (v3 - 1) & a2;
  }
  v6 = *((_QWORD *)this + 47);
  v7 = *(uint64_t ***)(v6 + 8 * v5);
  if (!v7)
    return 0;
  v8 = *v7;
  if (!*v7)
    return 0;
  v9 = v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v8 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        return 0;
    }
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 == a2)
      break;
    if (v11 >= v3)
      v11 %= v3;
    if (v11 != v5)
      return 0;
LABEL_16:
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 0;
  }
  if (*((_DWORD *)v8 + 4) != a2)
    goto LABEL_16;
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    v13 = a2;
    if (v3 <= a2)
      v13 = a2 % v3;
  }
  else
  {
    v13 = v9 & a2;
  }
  v14 = *(uint64_t ***)(v6 + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
LABEL_42:
    sub_1BE61C778("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v15[1];
      if (v16 == a2)
      {
        if (*((_DWORD *)v15 + 4) == a2)
          return *((_DWORD *)v15 + 5) == a3;
      }
      else if ((v16 & v9) != v13)
      {
        goto LABEL_42;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_42;
    }
  }
  while (2)
  {
    v17 = v15[1];
    if (v17 != a2)
    {
      if (v17 >= v3)
        v17 %= v3;
      if (v17 != v13)
        goto LABEL_42;
      goto LABEL_36;
    }
    if (*((_DWORD *)v15 + 4) != a2)
    {
LABEL_36:
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_42;
      continue;
    }
    return *((_DWORD *)v15 + 5) == a3;
  }
}

uint64_t sub_1BE7C83B4(uint64_t a1)
{
  _QWORD *v2;
  void *__p;
  void *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = operator new(0x10uLL);
  v5 = v2 + 2;
  v6 = v2 + 2;
  *v2 = 0;
  v2[1] = 0;
  __p = v2;
  sub_1BE87F878((char **)a1, (char **)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1BE7C8420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)(v11 + 48);
    if (!v13)
    {
LABEL_3:
      v14 = *(void **)(v11 + 24);
      if (!v14)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v13 = *(void **)(v11 + 48);
    if (!v13)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 56) = v13;
  operator delete(v13);
  v14 = *(void **)(v11 + 24);
  if (!v14)
  {
LABEL_4:
    v15 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v11 + 32) = v14;
  operator delete(v14);
  v15 = *(void **)v11;
  if (!*(_QWORD *)v11)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v11 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

char *sub_1BE7C849C(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C86C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE7C86D4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

char *sub_1BE7C8720(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C8944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C8958(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C8B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C8B90(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C8DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C8DC8(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C8FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C9000(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C9224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C9238(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C945C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C9470(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C9694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C96A8(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C98CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1BE7C98E0(uint64_t **a1, const char *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  char *v31;

  v4 = a1 + 1;
  v5 = (char *)operator new(0x38uLL);
  v31 = v5;
  v6 = v5 + 32;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v6 = operator new(v12 + 1);
    *((_QWORD *)v5 + 5) = v8;
    *((_QWORD *)v5 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      *v6 = 0;
      v9 = v5;
      v10 = (_QWORD *)*v4;
      v11 = v4;
      if (!*v4)
        goto LABEL_34;
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  v9 = v5;
  v10 = (_QWORD *)*v4;
  v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v4 = v9;
    v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      v9 = (char *)*v4;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  v14 = (void *)*((_QWORD *)v9 + 4);
  v15 = v9[55];
  if (v15 < 0)
    v16 = *((_QWORD *)v9 + 5);
  else
    v16 = v9[55];
  if (v15 < 0)
    v17 = (const void *)*((_QWORD *)v9 + 4);
  else
    v17 = v9 + 32;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      v20 = (const void *)v10[4];
      v18 = v10 + 4;
      v19 = v20;
      v21 = *((char *)v18 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v18 + 23);
      else
        v22 = v18[1];
      if (v21 >= 0)
        v23 = v18;
      else
        v23 = v19;
      if (v22 >= v16)
        v24 = v16;
      else
        v24 = v22;
      v25 = memcmp(v17, v23, v24);
      v26 = v16 < v22;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        break;
      v10 = (_QWORD *)*v11;
      v4 = v11;
      if (!*v11)
        goto LABEL_34;
    }
    v27 = memcmp(v23, v17, v24);
    v28 = v22 < v16;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      break;
    v10 = (_QWORD *)v11[1];
    if (!v10)
    {
      v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0)
      operator delete(v14);
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1BE7C9B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE7C86D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BE7C9B18(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_73;
  for (i = 0; i != v6; ++i)
    *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
  v8 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2 == a3)
  {
    v10 = v8;
    if (!v8)
      goto LABEL_73;
    do
    {
LABEL_70:
      v32 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v32;
    }
    while (v32);
    goto LABEL_73;
  }
  if (v8)
  {
    while (1)
    {
      v9 = *v4;
      *((_DWORD *)v8 + 4) = v9;
      v10 = (_QWORD *)*v8;
      v8[1] = v9;
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v13 = v9;
          if (v11 <= v9)
            v13 = v9 % v11;
        }
        else
        {
          v13 = (v11 - 1) & v9;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v13);
        if (v14)
        {
          v15 = *v14;
          if (v15)
          {
            if (v12.u32[0] < 2uLL)
            {
              while (1)
              {
                v17 = v15[1];
                if (v17 == v9)
                {
                  if (*((_DWORD *)v15 + 4) == (_DWORD)v9)
                    goto LABEL_63;
                }
                else if ((v17 & (v11 - 1)) != v13)
                {
                  goto LABEL_26;
                }
                v15 = (uint64_t *)*v15;
                if (!v15)
                  goto LABEL_26;
              }
            }
            do
            {
              v16 = v15[1];
              if (v16 == v9)
              {
                if (*((_DWORD *)v15 + 4) == (_DWORD)v9)
                  goto LABEL_63;
              }
              else
              {
                if (v16 >= v11)
                  v16 %= v11;
                if (v16 != v13)
                  break;
              }
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_26:
      v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v19 = *(float *)(a1 + 32);
      if (!v11 || (float)(v19 * (float)v11) < v18)
      {
        v20 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3)
          v20 = 1;
        v21 = v20 | (2 * v11);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          prime = v22;
        else
          prime = v21;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v11 = *(_QWORD *)(a1 + 8);
        }
        if (prime > v11)
          goto LABEL_38;
        if (prime < v11)
        {
          v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v11 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
          {
            v24 = std::__next_prime(v24);
          }
          else
          {
            v26 = 1 << -(char)__clz(v24 - 1);
            if (v24 >= 2)
              v24 = v26;
          }
          if (prime <= v24)
            prime = v24;
          if (prime < v11)
LABEL_38:
            sub_1BE61F23C(a1, prime);
        }
      }
      v27 = *(int8x8_t *)(a1 + 8);
      v28 = v8[1];
      v29 = (uint8x8_t)vcnt_s8(v27);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        if (v28 >= *(_QWORD *)&v27)
          v28 %= *(_QWORD *)&v27;
      }
      else
      {
        v28 &= *(_QWORD *)&v27 - 1;
      }
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
      if (v30)
      {
        *v8 = *v30;
      }
      else
      {
        *v8 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = a1 + 16;
        if (!*v8)
          goto LABEL_62;
        v31 = *(_QWORD *)(*v8 + 8);
        if (v29.u32[0] > 1uLL)
        {
          if (v31 >= *(_QWORD *)&v27)
            v31 %= *(_QWORD *)&v27;
        }
        else
        {
          v31 &= *(_QWORD *)&v27 - 1;
        }
        v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
      }
      *v30 = v8;
LABEL_62:
      ++*(_QWORD *)(a1 + 24);
LABEL_63:
      ++v4;
      if (v10)
      {
        v8 = v10;
        if (v4 != a3)
          continue;
      }
      goto LABEL_67;
    }
  }
  v10 = 0;
LABEL_67:
  if (v10)
    goto LABEL_70;
LABEL_73:
  while (v4 != a3)
  {
    sub_1BE7C9EB0(a1, v4, v4);
    ++v4;
  }
}

void sub_1BE7C9E7C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BE7C9E9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE7C9EB0(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_1BE61F23C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BE7CA1BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE7CA1D0(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_1BE61F23C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1BE7CA4E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_1BE7CA4F4(_QWORD **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      v7 = sub_1BE77EF10(a1, v4, &v13, &v12, a2);
      if (!*v7)
      {
        v8 = operator new(0x20uLL);
        v8[7] = *a2;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *v7 = (uint64_t)v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = (_DWORD *)*v7;
        }
        sub_1BE61F5C0(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1BE7CA5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE62033C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1BE7CA5E4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

unint64_t CoreHandwriting::InkMapping::getMappedPointIndex(CoreHandwriting::InkMapping *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  void *v9;

  v4 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) > a2)
  {
    v5 = *(_QWORD *)this + 24 * a2;
    v7 = *(_BYTE **)v5;
    v6 = *(_BYTE **)(v5 + 8);
    v8 = v6 - v7;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        sub_1BE6FB4B8();
      v9 = operator new(v6 - v7);
      memcpy(v9, v7, v8 & 0xFFFFFFFFFFFFFFF0);
      if (a3 < v8 >> 4)
        v4 = *((_QWORD *)v9 + 2 * a3);
      operator delete(v9);
    }
  }
  return v4;
}

void sub_1BE7CA7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE7CA810(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void CoreHandwriting::InkMapping::resizeToAtLeastNumStrokes(CoreHandwriting::InkMapping *this, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  v3 = a2 > v2;
  v4 = a2 - v2;
  if (v3)
    sub_1BE7CAFF4((uint64_t)this, v4);
}

uint64_t *CoreHandwriting::InkMapping::getStrokePointMapping(CoreHandwriting::InkMapping *this, unint64_t a2)
{
  uint64_t *result;
  unsigned __int8 v3;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) > a2)
    return (uint64_t *)(*(_QWORD *)this + 24 * a2);
  v3 = atomic_load((unsigned __int8 *)&qword_1EF568290);
  result = &qword_1EF568298;
  if ((v3 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF568290))
    {
      qword_1EF5682A0 = 0;
      unk_1EF5682A8 = 0;
      qword_1EF568298 = 0;
      __cxa_atexit((void (*)(void *))sub_1BE7CA810, &qword_1EF568298, &dword_1BE607000);
      __cxa_guard_release(&qword_1EF568290);
    }
    return &qword_1EF568298;
  }
  return result;
}

uint64_t CoreHandwriting::InkMapping::getStrokePointMapping(CoreHandwriting::InkMapping *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v3 = *(_QWORD *)this;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  v5 = a2 + 1 >= v4;
  v6 = a2 + 1 - v4;
  if (v6 != 0 && v5)
  {
    sub_1BE7CAFF4((uint64_t)this, v6);
    v3 = *(_QWORD *)this;
  }
  return v3 + 24 * a2;
}

void CoreHandwriting::InkMapping::composeWith(CoreHandwriting::InkMapping *this@<X0>, const CoreHandwriting::InkMapping *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  const CoreHandwriting::InkMapping *v5;
  unint64_t v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t **v14;
  unint64_t *v15;
  uint64_t *v16;
  unsigned __int8 v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  size_t v25;
  unint64_t *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  size_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  char **v45;
  unsigned __int8 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  const CoreHandwriting::InkMapping *v53;
  uint64_t *v54;
  uint64_t *v55;

  v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  if (v4 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3))
    v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  v51 = v4;
  if (v4)
  {
    v5 = a2;
    sub_1BE7CAFF4((uint64_t)v3, v4);
    v7 = 0;
    v50 = v3;
    v53 = v5;
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) <= v7)
      {
        v9 = atomic_load((unsigned __int8 *)&qword_1EF568290);
        v8 = &qword_1EF568298;
        if ((v9 & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_1EF568290))
          {
            qword_1EF5682A0 = 0;
            unk_1EF5682A8 = 0;
            qword_1EF568298 = 0;
            v8 = &qword_1EF568298;
            __cxa_atexit((void (*)(void *))sub_1BE7CA810, &qword_1EF568298, &dword_1BE607000);
            __cxa_guard_release(&qword_1EF568290);
          }
          v3 = v50;
          v5 = v53;
        }
      }
      else
      {
        v8 = (uint64_t *)(*(_QWORD *)this + 24 * v7);
      }
      if (*v8 != v8[1])
        break;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3) <= v7)
      {
        v46 = atomic_load((unsigned __int8 *)&qword_1EF568290);
        v45 = (char **)&qword_1EF568298;
        if ((v46 & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_1EF568290))
          {
            qword_1EF5682A0 = 0;
            unk_1EF5682A8 = 0;
            qword_1EF568298 = 0;
            v45 = (char **)&qword_1EF568298;
            __cxa_atexit((void (*)(void *))sub_1BE7CA810, &qword_1EF568298, &dword_1BE607000);
            __cxa_guard_release(&qword_1EF568290);
          }
          v3 = v50;
          v5 = v53;
        }
      }
      else
      {
        v45 = (char **)(*(_QWORD *)v5 + 24 * v7);
      }
      v52 = v7 + 1;
      v47 = *v3;
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
      if (v48 <= v7)
      {
        sub_1BE7CAFF4((uint64_t)v3, v52 - v48);
        v47 = *v3;
      }
      v49 = v47 + 24 * v7;
      if ((char **)v49 != v45)
        sub_1BE6FDB64(v49, *v45, v45[1], (v45[1] - *v45) >> 4);
LABEL_6:
      v7 = v52;
      if (v52 == v51)
        return;
    }
    v10 = *v3;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
    if (v11 <= v7)
    {
      sub_1BE7CAFF4((uint64_t)v3, v7 + 1 - v11);
      v10 = *v3;
    }
    v52 = v7 + 1;
    v12 = 0;
    v13 = v10 + 24 * v7;
    v14 = (unint64_t **)(v13 + 8);
    v54 = (uint64_t *)v13;
    v55 = (uint64_t *)(v13 + 16);
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) <= v7)
      {
        v17 = atomic_load((unsigned __int8 *)&qword_1EF568290);
        v16 = &qword_1EF568298;
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF568290))
        {
          qword_1EF5682A0 = 0;
          unk_1EF5682A8 = 0;
          qword_1EF568298 = 0;
          v16 = &qword_1EF568298;
          __cxa_atexit((void (*)(void *))sub_1BE7CA810, &qword_1EF568298, &dword_1BE607000);
          __cxa_guard_release(&qword_1EF568290);
        }
      }
      else
      {
        v16 = (uint64_t *)(*(_QWORD *)this + 24 * v7);
      }
      if (v12 >= (v16[1] - *v16) >> 4)
      {
        v3 = v50;
        goto LABEL_6;
      }
      v18 = v7;
      v19 = v12;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) > v7)
      {
        v20 = *(_QWORD *)this + 24 * v7;
        v22 = *(_BYTE **)v20;
        v21 = *(_BYTE **)(v20 + 8);
        v19 = v12;
        v18 = v7;
        v23 = v21 - v22;
        if (v21 != v22)
        {
          if (v23 < 0)
            sub_1BE6FB4B8();
          v24 = (char *)operator new(v21 - v22);
          v25 = v23 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v24, v22, v25);
          v19 = v12;
          v18 = v7;
          if (v12 < v25 >> 4)
          {
            v26 = (unint64_t *)&v24[16 * v12];
            v18 = *v26;
            v19 = v26[1];
          }
          operator delete(v24);
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3) <= v18)
        goto LABEL_32;
      v27 = *(_QWORD *)v5 + 24 * v18;
      v29 = *(_BYTE **)v27;
      v28 = *(_BYTE **)(v27 + 8);
      v30 = v28 - v29;
      if (v28 != v29)
        break;
      v34 = *v14;
      v35 = *v55;
      if ((unint64_t)*v14 < *v55)
      {
LABEL_14:
        *v34 = v18;
        v34[1] = v19;
        v15 = v34 + 2;
        goto LABEL_15;
      }
LABEL_33:
      v36 = (unint64_t *)*v54;
      v37 = ((uint64_t)v34 - *v54) >> 4;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60)
        sub_1BE6FB4B8();
      v39 = v35 - (_QWORD)v36;
      if (v39 >> 3 > v38)
        v38 = v39 >> 3;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v40 = 0xFFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
      {
        if (v40 >> 60)
          sub_1BE61F100();
        v41 = (char *)operator new(16 * v40);
        v42 = (unint64_t *)&v41[16 * v37];
        *v42 = v18;
        v42[1] = v19;
        v43 = (uint64_t)v42;
        if (v34 != v36)
        {
LABEL_42:
          v5 = v53;
          do
          {
            *(_OWORD *)(v43 - 16) = *((_OWORD *)v34 - 1);
            v43 -= 16;
            v34 -= 2;
          }
          while (v34 != v36);
          v44 = v54;
          v34 = (unint64_t *)*v54;
          goto LABEL_49;
        }
      }
      else
      {
        v41 = 0;
        v42 = (unint64_t *)(16 * v37);
        *v42 = v18;
        v42[1] = v19;
        v43 = 16 * v37;
        if (v34 != v36)
          goto LABEL_42;
      }
      v5 = v53;
      v44 = v54;
LABEL_49:
      *v44 = v43;
      v15 = v42 + 2;
      *v14 = v42 + 2;
      *v55 = (uint64_t)&v41[16 * v40];
      if (v34)
        operator delete(v34);
LABEL_15:
      *v14 = v15;
      ++v12;
    }
    if (v30 < 0)
      sub_1BE6FB4B8();
    v31 = (char *)operator new(v28 - v29);
    v32 = v30 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v31, v29, v32);
    if (v19 < v32 >> 4)
    {
      v33 = (unint64_t *)&v31[16 * v19];
      v18 = *v33;
      v19 = v33[1];
    }
    operator delete(v31);
LABEL_32:
    v34 = *v14;
    v35 = *v55;
    if ((unint64_t)*v14 < *v55)
      goto LABEL_14;
    goto LABEL_33;
  }
}

void sub_1BE7CAF10(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7CAF24(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7CAF38(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE63CEBC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE7CAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_1BE63CEBC(a10);
  _Unwind_Resume(a1);
}

void sub_1BE7CAF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    sub_1BE63CEBC(a10);
    _Unwind_Resume(a1);
  }
  sub_1BE63CEBC(a10);
  _Unwind_Resume(a1);
}

void sub_1BE7CAFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_1BE63CEBC(a10);
  _Unwind_Resume(a1);
}

void sub_1BE7CAFF4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F930();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F100();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_1BE7CBA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  sub_1BE7CBD58((void **)va);

  _Unwind_Resume(a1);
}

void sub_1BE7CBB44(char **a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E77EFB30;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    *a2 = 0;
    v8 = a1[1];
    v7 = (unint64_t)a1[2];
    if ((unint64_t)v8 < v7)
    {
LABEL_3:
      *(_QWORD *)v8 = v4;
      *((_QWORD *)v8 + 1) = v5;
      a1[1] = v8 + 16;
      return;
    }
  }
  else
  {
    v5 = 0;
    *a2 = 0;
    v8 = a1[1];
    v7 = (unint64_t)a1[2];
    if ((unint64_t)v8 < v7)
      goto LABEL_3;
  }
  v9 = *a1;
  v10 = (v8 - *a1) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13 >> 60)
    sub_1BE61F100();
  v14 = (char *)operator new(16 * v13);
  v15 = &v14[16 * v10];
  *(_QWORD *)v15 = v4;
  *((_QWORD *)v15 + 1) = v5;
  v16 = &v14[16 * v13];
  v17 = v15 + 16;
  if (v8 == v9)
  {
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v8 - 1);
      v8 -= 16;
      *((_OWORD *)v15 - 1) = v18;
      v15 -= 16;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
    }
    while (v8 != v9);
    v8 = *a1;
    v19 = a1[1];
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    while (v19 != v8)
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 16;
    }
  }
  if (v8)
    operator delete(v8);
  a1[1] = v17;
}

void sub_1BE7CBD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE6EED64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_1BE7CBD58(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (char *)*a1;
  if (*a1)
  {
    v9 = (char *)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_1BE7CBEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7CBEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7CC468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,_QWORD *a57,uint64_t a58,void *a59)
{
  void *v59;

  sub_1BE6E6BC8(&a59);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  sub_1BE6E7EB4(a9, a57);

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE7CC510(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1BE7CC54C(uint64_t a1)
{
  sub_1BE6E7EB4(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_1BE7CC55C(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  void **v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  void **v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37[4];
  void *__p;
  __int128 v39;

  for (i = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56); i; i = (uint64_t *)*i)
  {
    v13 = *((_DWORD *)i + 8);
    if (v13 <= a2)
    {
      if (v13 >= a2)
        return;
      ++i;
    }
  }
  __p = 0;
  v39 = 0uLL;
  if (*(_BYTE *)(a1 + 72))
  {
    CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::collectFastPathCharactersFromHolders(*(_QWORD *)(a1 + 32) + 8, a2, 2, (char **)&v36);
    v5 = (char *)__p;
    if (__p)
    {
      v6 = (char *)v39;
      v7 = __p;
      if ((void *)v39 != __p)
      {
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;

        }
        while (v6 != v5);
        v7 = __p;
      }
      *(_QWORD *)&v39 = v5;
      operator delete(v7);
    }
    __p = v36;
    v39 = *(_OWORD *)v37;
    if (*(void **)v37 != v36)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = (uint64_t **)(v9 + 56);
      v10 = *(uint64_t **)(v9 + 56);
      if (v10)
      {
        while (1)
        {
          while (1)
          {
            v12 = v10;
            v14 = *((_DWORD *)v10 + 8);
            if (v14 <= a2)
              break;
            v10 = (uint64_t *)*v12;
            v11 = (uint64_t **)v12;
            if (!*v12)
              goto LABEL_21;
          }
          if (v14 >= a2)
            break;
          v10 = (uint64_t *)v12[1];
          if (!v10)
          {
            v11 = (uint64_t **)(v12 + 1);
            goto LABEL_21;
          }
        }
        v18 = (void **)(v12 + 5);
        if (v12 + 5 == (uint64_t *)&__p)
          goto LABEL_41;
      }
      else
      {
        v12 = (uint64_t *)(v9 + 56);
LABEL_21:
        v15 = (char *)operator new(0x40uLL);
        *((_DWORD *)v15 + 8) = a2;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 7) = 0;
        *((_QWORD *)v15 + 5) = 0;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = v12;
        *v11 = (uint64_t *)v15;
        v16 = **(_QWORD **)(v9 + 48);
        v17 = (uint64_t *)v15;
        if (v16)
        {
          *(_QWORD *)(v9 + 48) = v16;
          v17 = *v11;
        }
        sub_1BE61F5C0(*(uint64_t **)(v9 + 56), v17);
        ++*(_QWORD *)(v9 + 64);
        v18 = (void **)(v15 + 40);
        if (v15 + 40 == (char *)&__p)
          goto LABEL_41;
      }
      sub_1BE7CD478(v18, (uint64_t)__p, v39, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)__p) >> 3));
LABEL_41:
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      goto LABEL_49;
    }
  }
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::collectFastPathCharactersFromHolders(*(_QWORD *)(a1 + 32) + 8, a2, 1, (char **)&v36);
  v19 = (char *)v36;
  if (*(void **)v37 != v36)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v22 = (uint64_t **)(v20 + 56);
    v21 = *(uint64_t **)(v20 + 56);
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          v23 = v21;
          v24 = *((_DWORD *)v21 + 8);
          if (v24 <= a2)
            break;
          v21 = (uint64_t *)*v23;
          v22 = (uint64_t **)v23;
          if (!*v23)
            goto LABEL_33;
        }
        if (v24 >= a2)
          break;
        v21 = (uint64_t *)v23[1];
        if (!v21)
        {
          v22 = (uint64_t **)(v23 + 1);
          goto LABEL_33;
        }
      }
      v28 = (void **)(v23 + 5);
      if (v23 + 5 == (uint64_t *)&v36)
      {
LABEL_44:
        ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        if (v19)
          goto LABEL_45;
        goto LABEL_49;
      }
    }
    else
    {
      v23 = (uint64_t *)(v20 + 56);
LABEL_33:
      v25 = (char *)operator new(0x40uLL);
      *((_DWORD *)v25 + 8) = a2;
      *((_QWORD *)v25 + 6) = 0;
      *((_QWORD *)v25 + 7) = 0;
      *((_QWORD *)v25 + 5) = 0;
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = v23;
      *v22 = (uint64_t *)v25;
      v26 = **(_QWORD **)(v20 + 48);
      v27 = (uint64_t *)v25;
      if (v26)
      {
        *(_QWORD *)(v20 + 48) = v26;
        v27 = *v22;
      }
      sub_1BE61F5C0(*(uint64_t **)(v20 + 56), v27);
      ++*(_QWORD *)(v20 + 64);
      v19 = (char *)v36;
      v28 = (void **)(v25 + 40);
      if (v25 + 40 == (char *)&v36)
        goto LABEL_44;
    }
    sub_1BE7CD478(v28, (uint64_t)v19, *(uint64_t *)v37, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v37 - (_QWORD)v19) >> 3));
    v19 = (char *)v36;
    goto LABEL_44;
  }
  v19 = *(char **)v37;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if (v19)
  {
LABEL_45:
    v29 = *(char **)v37;
    v30 = v19;
    if (*(char **)v37 != v19)
    {
      do
      {
        v31 = (void *)*((_QWORD *)v29 - 3);
        v29 -= 24;

      }
      while (v29 != v19);
      v30 = v36;
    }
    *(_QWORD *)v37 = v19;
    operator delete(v30);
  }
LABEL_49:
  v32 = (char *)__p;
  if (__p)
  {
    v33 = (char *)v39;
    v34 = __p;
    if ((void *)v39 != __p)
    {
      do
      {
        v35 = (void *)*((_QWORD *)v33 - 3);
        v33 -= 24;

      }
      while (v33 != v32);
      v34 = __p;
    }
    *(_QWORD *)&v39 = v32;
    operator delete(v34);
  }
}

void sub_1BE7CC8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_1BE6E6BC8(&a9);
  sub_1BE6E6BC8(&a12);
  _Unwind_Resume(a1);
}

void sub_1BE7CC8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE7CC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE7CC920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7CC934(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1BE7CCCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7CCCEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7CCD04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7CCD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7CCD44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7CCD5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7CCD74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7CCD84(uint64_t a1)
{

}

void sub_1BE7CCD8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char IsMember;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;

  v6 = (int)a2;
  if (objc_msgSend_countOfIndexesInRange_(*(void **)(a1 + 32), a2, a3, a4, a5, a6) == a4)
  {
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    unicodeToNSString(v6, v8, v9, v10, v11, v12);
    v46 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingString_(v13, v14, (uint64_t)v46, v15, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_controlCharacterSet(MEMORY[0x1E0CB3500], v8, v9, v10, v11, v12);
    v47 = (id)objc_claimAutoreleasedReturnValue();
    IsMember = objc_msgSend_characterIsMember_(v47, v19, (unsigned __int16)v6, v20, v21, v22);

    if ((IsMember & 1) != 0)
      return;
    CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition(v6, 0);
    v46 = (id)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend_length(v46, v24, v25, v26, v27, v28);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v36 = *(void **)(v35 + 40);
    if (!v29)
    {
      unicodeToNSString(v6, v30, v31, v32, v33, v34);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByAppendingString_(v36, v39, (uint64_t)v38, v40, v41, v42);
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v45 = *(void **)(v44 + 40);
      *(_QWORD *)(v44 + 40) = v43;

      goto LABEL_7;
    }
    objc_msgSend_stringByAppendingString_(*(void **)(v35 + 40), v30, (uint64_t)v46, v32, v33, v34);
    v18 = objc_claimAutoreleasedReturnValue();
  }
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v38 = *(void **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = v18;
LABEL_7:

}

void sub_1BE7CCEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7CCEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7CCEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7CCF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7CD10C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7CD11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;

  sub_1BE65DB88((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE7CD13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_1BE65DB88((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BE7CD1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7CD214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE7CD230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7CD244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7CD3BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE7CD3E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1BE7CD3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BE8DF4B8)
    return a1 + 24;
  if (((v3 & 0x80000001BE8DF4B8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BE8DF4B8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BE8DF4B8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_1BE7CD478(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  id *v9;
  id *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  id *v18;
  uint64_t v19;
  id *v20;
  id *v21;
  id *v22;
  void *v23;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (id *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v18 = (id *)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v18 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v22 = (id *)*a1;
      }
      else
      {
        v22 = (id *)*a1;
        do
        {
          objc_storeStrong(v9, *(id *)v6);
          v9[1] = *(id *)(v6 + 8);
          v9[2] = *(id *)(v6 + 16);
          v22 += 3;
          v6 += 24;
          v9 += 3;
        }
        while (v6 != a3);
        v18 = (id *)a1[1];
      }
      while (v18 != v22)
      {
        v23 = *(v18 - 3);
        v18 -= 3;

      }
      a1[1] = v22;
    }
    else
    {
      v19 = a2 + 8 * (v18 - v9);
      if (v18 != v9)
      {
        do
        {
          objc_storeStrong(v9, *(id *)v6);
          v9[1] = *(id *)(v6 + 8);
          v9[2] = *(id *)(v6 + 16);
          v6 += 24;
          v9 += 3;
        }
        while (v6 != v19);
        v9 = (id *)a1[1];
      }
      v20 = v9;
      if (v19 != a3)
      {
        v20 = v9;
        v21 = v9;
        do
        {
          *v21 = *(id *)v19;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v19 + 8);
          v20 += 3;
          v19 += 24;
          v21 += 3;
        }
        while (v19 != a3);
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (id *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          v12 = *(v10 - 3);
          v10 -= 3;

        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_33;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= __sz)
      v14 = __sz;
    v15 = v13 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
LABEL_33:
      sub_1BE6E7EA0();
    v16 = 24 * v15;
    v17 = (char *)operator new(24 * v15);
    *a1 = v17;
    a1[1] = v17;
    for (a1[2] = &v17[v16]; v6 != a3; v6 += 24)
    {
      *(_QWORD *)v17 = *(id *)v6;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v6 + 8);
      v17 += 24;
    }
    a1[1] = v17;
  }
}

void sub_1BE7CD788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7CD79C()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.CoreHandwriting.CHTextCheckingQuery.TextComposerProcessing", v2);
  v1 = (void *)qword_1EF568DA8;
  qword_1EF568DA8 = (uint64_t)v0;

}

void sub_1BE7CDD48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **sub_1BE7CDD98(void **a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  BOOL v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  NSObject *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  CHContextualTextResult *v183;
  const char *v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t k;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  double v331;
  double v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  const char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  const char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  const char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  unint64_t v395;
  const char *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _BOOL4 v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  NSObject *v413;
  const char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  void *v425;
  const char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  double v436;
  double v437;
  const char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char v443;
  const char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  const char *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  double v460;
  double v461;
  _BOOL4 v462;
  double v463;
  double v464;
  const char *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  double v470;
  unint64_t v471;
  unint64_t v472;
  _BOOL4 v474;
  BOOL v475;
  int v476;
  int v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  _BOOL4 v484;
  NSObject *v485;
  const char *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  void *v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  const char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  void *v515;
  const char *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  void *v532;
  const char *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  void *v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  const char *v546;
  const char *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  void *v552;
  const char *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  void *v558;
  const char *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  const char *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  const char *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  void *v580;
  const char *v581;
  uint64_t v582;
  uint64_t v583;
  const char *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  void *v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  void *v595;
  const char *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  const char *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  void *v605;
  BOOL v606;
  const char *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  NSObject *v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  void *v618;
  const char *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  const char *v624;
  uint64_t v625;
  uint64_t v626;
  double v627;
  const char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  void *v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  void *v645;
  void *v646;
  const char *v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  const char *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  void *v656;
  const char *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  void *v662;
  const char *v663;
  uint64_t v664;
  const CGPath *v665;
  CHTextCheckingQueryItem *v666;
  const char *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  id v671;
  id v672;
  const char *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  void *v680;
  const char *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  void *v687;
  NSObject *v688;
  const char *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  void *v693;
  const char *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  const char *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  void *v705;
  const char *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  void *v712;
  _QWORD *v713;
  const char *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  const char *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  _QWORD *v723;
  CHTextCheckingQueryItem *v724;
  const char *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  void *v729;
  const char *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  void *v734;
  const char *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  const CGPath *v740;
  id v741;
  id v742;
  const char *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  void *v749;
  const char *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  void *v756;
  const char *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  id v761;
  NSObject *v762;
  const char *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  const char *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t Index;
  const char *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  const char *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  const char *v787;
  NSObject *v788;
  const char *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  const char *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  void *v799;
  const char *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  NSObject *v804;
  const char *v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  void *v812;
  id obj;
  uint64_t v814;
  uint64_t v815;
  uint64_t i;
  void *v817;
  void *v818;
  void *v819;
  void *v820;
  void *v821;
  unint64_t v822;
  void **v823;
  uint64_t v824;
  id v825;
  void *v826;
  void *v827;
  void *v828;
  void *v829;
  void *v830;
  unint64_t v831;
  void *v832;
  NSObject *v833;
  uint64_t v834;
  id v835;
  void *v836;
  uint64_t v837;
  void *v838;
  id v839;
  id v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t v843;
  void *v844;
  _QWORD v845[5];
  _QWORD v846[4];
  id v847;
  void **v848;
  id v849;
  _QWORD v850[5];
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  _BYTE v859[128];
  uint8_t v860[128];
  _BYTE v861[24];
  void *v862;
  id v863;
  void *v864;
  id v865;
  _BYTE buf[24];
  _BYTE v867[40];
  __int16 v868;
  void *v869;
  __int16 v870;
  double v871;
  __int16 v872;
  uint64_t v873;
  __int16 v874;
  int v875;
  uint64_t v876;

  v876 = *MEMORY[0x1E0C80C00];
  v835 = a2;
  v823 = a1;
  if (a1)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery._textCheckingResultsForSessionResult: start", buf, 2u);
    }

    objc_msgSend_array(MEMORY[0x1E0C99DE8], v4, v5, v6, v7, v8);
    v818 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeGroupingResult(v835, v9, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_textStrokeGroupClusters(v14, v15, v16, v17, v18, v19);
    v812 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_autoRefineResult(v835, v20, v21, v22, v23, v24);
    v827 = (void *)objc_claimAutoreleasedReturnValue();
    v857 = 0u;
    v858 = 0u;
    v855 = 0u;
    v856 = 0u;
    obj = v812;
    v815 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v855, (uint64_t)v860, 16, v26);
    if (v815)
    {
      v814 = *(_QWORD *)v856;
      do
      {
        for (i = 0; i != v815; ++i)
        {
          if (*(_QWORD *)v856 != v814)
            objc_enumerationMutation(obj);
          v32 = *(void **)(*((_QWORD *)&v855 + 1) + 8 * i);
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v27, v28, v29, v30, v31);
          v826 = (void *)objc_claimAutoreleasedReturnValue();
          v853 = 0u;
          v854 = 0u;
          v851 = 0u;
          v852 = 0u;
          v839 = v32;
          v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v839, v33, (uint64_t)&v851, (uint64_t)v859, 16, v34);
          if (!v35)
            goto LABEL_47;
          v841 = *(_QWORD *)v852;
          do
          {
            v843 = v35;
            for (j = 0; j != v843; ++j)
            {
              if (*(_QWORD *)v852 != v841)
                objc_enumerationMutation(v839);
              v42 = *(void **)(*((_QWORD *)&v851 + 1) + 8 * j);
              v43 = objc_msgSend_uniqueIdentifier(v42, v36, v37, v38, v39, v40);
              objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v835, v44, v43, v45, v46, v47);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_preferredLocale(v48, v49, v50, v51, v52, v53);
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              if ((CHHasPersonalizedSynthesisSupportForLocale(v54) & 1) != 0)
              {
                v55 = (void *)objc_opt_class();
                objc_msgSend_recognitionResultsByLocale(v48, v56, v57, v58, v59, v60);
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_locales(v835, v62, v63, v64, v65, v66);
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_languageFitnessByLocale(v48, v68, v69, v70, v71, v72);
                v73 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_filteredResultsByLocale_orderedLocales_usingLanguageFitness_outSortedLocales_(v55, v74, (uint64_t)v61, (uint64_t)v67, (uint64_t)v73, 0);
                v75 = objc_claimAutoreleasedReturnValue();

                objc_msgSend_objectForKeyedSubscript_(v75, v76, (uint64_t)v54, v77, v78, v79);
                v80 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_recognitionResultsByGroupID(v835, v81, v82, v83, v84, v85);
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                v87 = (void *)MEMORY[0x1E0CB37E8];
                v93 = objc_msgSend_uniqueIdentifier(v42, v88, v89, v90, v91, v92);
                objc_msgSend_numberWithInteger_(v87, v94, v93, v95, v96, v97);
                v98 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectForKeyedSubscript_(v86, v99, (uint64_t)v98, v100, v101, v102);
                v103 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_mathResult(v103, v104, v105, v106, v107, v108);
                v109 = (void *)objc_claimAutoreleasedReturnValue();
                v110 = v109 == 0;

                if (!v110)
                {
                  if (qword_1EF568E88 != -1)
                    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                  v116 = (id)qword_1EF568E28;
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_topTranscription(v80, v117, v118, v119, v120, v121);
                    v122 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138739971;
                    *(_QWORD *)&buf[4] = v122;
                    _os_log_impl(&dword_1BE607000, v116, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping group with transcription %{sensitive}@ because it has a math result.", buf, 0xCu);

                  }
LABEL_38:

                  goto LABEL_39;
                }
                objc_msgSend_strokeGroup(v827, v111, v112, v113, v114, v115);
                v129 = (void *)objc_claimAutoreleasedReturnValue();
                if (v42 == v129)
                {
                  objc_msgSend_refinedTokenColumns(v827, v130, v131, v132, v133, v134);
                  v135 = (void *)objc_claimAutoreleasedReturnValue();
                  v141 = objc_msgSend_count(v135, v136, v137, v138, v139, v140);
                  objc_msgSend_textResult(v827, v142, v143, v144, v145, v146);
                  v147 = (void *)objc_claimAutoreleasedReturnValue();
                  v153 = v141 < objc_msgSend_tokenColumnCount(v147, v148, v149, v150, v151, v152);

                  if (v153)
                  {
                    *(_QWORD *)buf = 0;
                    *(_QWORD *)&buf[8] = buf;
                    *(_QWORD *)&buf[16] = 0x4012000000;
                    *(_QWORD *)v867 = sub_1BE7D0498;
                    *(_QWORD *)&v867[8] = nullsub_36;
                    *(_QWORD *)&v867[16] = &unk_1BE94989A;
                    *(_OWORD *)&v867[24] = xmmword_1BE8D6920;
                    objc_msgSend_refinedTokenColumns(v827, v154, v155, v156, v157, v158);
                    v159 = (void *)objc_claimAutoreleasedReturnValue();
                    v850[0] = MEMORY[0x1E0C809B0];
                    v850[1] = 3221225472;
                    v850[2] = sub_1BE7D04A8;
                    v850[3] = &unk_1E77F52D0;
                    v850[4] = buf;
                    objc_msgSend_enumerateRangesUsingBlock_(v159, v160, (uint64_t)v850, v161, v162, v163);

                    if (!*(_QWORD *)(*(_QWORD *)&buf[8] + 56))
                    {
                      if (qword_1EF568E88 != -1)
                        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                      v195 = (id)qword_1EF568E28;
                      if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
                      {
                        objc_msgSend_topTranscription(v80, v196, v197, v198, v199, v200);
                        v201 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)v861 = 138739971;
                        *(_QWORD *)&v861[4] = v201;
                        _os_log_impl(&dword_1BE607000, v195, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping group with transcription %{sensitive}@ because it is autorefinable and has no refined columns.", v861, 0xCu);

                      }
                      _Block_object_dispose(buf, 8);
                      goto LABEL_38;
                    }
                    objc_msgSend_textResult(v827, v164, v165, v166, v167, v168);
                    v169 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_subResultWithColumnRange_(v169, v170, *(_QWORD *)(*(_QWORD *)&buf[8] + 48), *(_QWORD *)(*(_QWORD *)&buf[8] + 56), v171, v172);
                    v173 = (void *)objc_claimAutoreleasedReturnValue();

                    if (qword_1EF568E88 != -1)
                      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                    v174 = (id)qword_1EF568E28;
                    if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
                    {
                      objc_msgSend_topTranscription(v173, v175, v176, v177, v178, v179);
                      v180 = (void *)objc_claimAutoreleasedReturnValue();
                      v182 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
                      v181 = *(void **)(*(_QWORD *)&buf[8] + 56);
                      *(_DWORD *)v861 = 138740483;
                      *(_QWORD *)&v861[4] = v180;
                      *(_WORD *)&v861[12] = 2048;
                      *(_QWORD *)&v861[14] = v182;
                      *(_WORD *)&v861[22] = 2048;
                      v862 = v181;
                      _os_log_impl(&dword_1BE607000, v174, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Autorefinable group truncated to transcription %{sensitive}@ (columns in range %ld,%ld) for proofreading", v861, 0x20u);

                    }
                    _Block_object_dispose(buf, 8);
                    v80 = v173;
                  }
                }
                else
                {

                }
                if (!v80)
                  goto LABEL_39;
                v183 = [CHContextualTextResult alloc];
                v186 = (void *)objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v183, v184, (uint64_t)v80, (uint64_t)CFSTR("\n"), (uint64_t)v42, v185);
                objc_msgSend_setStrokeGroupResult_(v186, v187, (uint64_t)v48, v188, v189, v190);
                objc_msgSend_addObject_(v826, v191, (uint64_t)v186, v192, v193, v194);

                goto LABEL_38;
              }
              if (qword_1EF568E88 != -1)
                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v75 = (id)qword_1EF568E28;
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_languageIdentifier(v54, v123, v124, v125, v126, v127);
                v128 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v128;
                _os_log_impl(&dword_1BE607000, v75, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping group preferred locale %@", buf, 0xCu);

              }
LABEL_39:

            }
            v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v839, v36, (uint64_t)&v851, (uint64_t)v859, 16, v40);
          }
          while (v35);
LABEL_47:

          if (!objc_msgSend_count(v826, v202, v203, v204, v205, v206))
            goto LABEL_166;
          objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v207, v208, v209, v210, v211);
          v817 = (void *)objc_claimAutoreleasedReturnValue();
          v822 = 0;
LABEL_49:
          if (v822 < objc_msgSend_count(v826, v212, v213, v214, v215, v216))
          {
            objc_msgSend_objectAtIndexedSubscript_(v826, v217, v822, v218, v219, v220);
            v819 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_textResult(v819, v221, v222, v223, v224, v225);
            v226 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_locale(v226, v227, v228, v229, v230, v231);
            v821 = (void *)objc_claimAutoreleasedReturnValue();

            v232 = (void *)MEMORY[0x1E0DBDA98];
            objc_msgSend_languageCode(v821, v233, v234, v235, v236, v237);
            v238 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v232) = objc_msgSend_checkingEnabledForLanguage_(v232, v239, (uint64_t)v238, v240, v241, v242);

            if ((_DWORD)v232)
              objc_msgSend_addIndex_(v817, v243, v822, v244, v245, v246);
            v825 = v819;
            objc_msgSend_array(MEMORY[0x1E0C99DE8], v247, v248, v249, v250, v251);
            v820 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_textResult(v825, v252, v253, v254, v255, v256);
            v836 = (void *)objc_claimAutoreleasedReturnValue();
            for (k = 0; ; k = v834 + 1)
            {
              if (k >= objc_msgSend_tokenColumnCount(v836, v257, v258, v259, v260, v261))
              {
                v761 = v820;
                goto LABEL_164;
              }
              objc_msgSend_tokenRowsAtColumnIndex_(v836, v263, k, v264, v265, v266);
              v844 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_topModelTranscriptionPath(v836, v267, v268, v269, v270, v271);
              v272 = (void *)objc_claimAutoreleasedReturnValue();
              v842 = objc_msgSend_indexAtPosition_(v272, v273, k, v274, v275, v276);
              v834 = k;

              objc_msgSend_transcriptionPaths(v836, v277, v278, v279, v280, v281);
              v282 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_firstObject(v282, v283, v284, v285, v286, v287);
              v288 = (void *)objc_claimAutoreleasedReturnValue();
              v837 = objc_msgSend_indexAtPosition_(v288, v289, v834, v290, v291, v292);

              if (v842 >= objc_msgSend_count(v844, v293, v294, v295, v296, v297))
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v762 = (id)qword_1EF568E18[0];
                if (os_log_type_enabled(v762, OS_LOG_TYPE_ERROR))
                {
                  v768 = objc_msgSend_count(v844, v763, v764, v765, v766, v767);
                  *(_DWORD *)buf = 134218240;
                  *(_QWORD *)&buf[4] = v842;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v768;
                  _os_log_impl(&dword_1BE607000, v762, OS_LOG_TYPE_ERROR, "SpellChecking detection error: Unexpected indexOfTopModelTokens = %ld for a token column with %ld rows, aborting.", buf, 0x16u);
                }

                v761 = (id)MEMORY[0x1E0C9AA60];
LABEL_164:

                objc_msgSend_addObjectsFromArray_(v818, v769, (uint64_t)v761, v770, v771, v772);
                ++v822;
                goto LABEL_49;
              }
              objc_msgSend_objectAtIndexedSubscript_(v844, v298, v842, v299, v300, v301);
              v302 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_firstObject(v302, v303, v304, v305, v306, v307);
              v840 = (id)objc_claimAutoreleasedReturnValue();

              objc_msgSend_string(v840, v308, v309, v310, v311, v312);
              v313 = (void *)objc_claimAutoreleasedReturnValue();
              v319 = objc_msgSend_countCharacters(v313, v314, v315, v316, v317, v318);

              v325 = objc_msgSend_properties(v840, v320, v321, v322, v323, v324);
              objc_msgSend_modelScore(v840, v326, v327, v328, v329, v330);
              v332 = v331;
              objc_msgSend_topModelTranscriptionPath(v836, v333, v334, v335, v336, v337);
              v338 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_transcriptionWithPath_columnRange_filterLowConfidence_(v836, v339, (uint64_t)v338, 0, v834, 0);
              v830 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_objectAtIndexedSubscript_(v844, v340, v842, v341, v342, v343);
              v344 = (void *)objc_claimAutoreleasedReturnValue();
              if ((unint64_t)objc_msgSend_count(v344, v345, v346, v347, v348, v349) > 1
                || (v831 = v325 & 4, (v325 & 4) != 0)
                && (unint64_t)objc_msgSend_count(v844, v350, v351, v352, v353, v354) >= 2
                && v837 == v842)
              {

LABEL_59:
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v833 = (id)qword_1EF568E28;
                if (os_log_type_enabled(v833, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_topTranscription(v836, v360, v361, v362, v363, v364);
                  v365 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_objectAtIndexedSubscript_(v844, v366, v842, v367, v368, v369);
                  v370 = (void *)objc_claimAutoreleasedReturnValue();
                  v376 = objc_msgSend_count(v370, v371, v372, v373, v374, v375);
                  *(_DWORD *)buf = 134219011;
                  *(_QWORD *)&buf[4] = v834;
                  *(_WORD *)&buf[12] = 2117;
                  *(_QWORD *)&buf[14] = v365;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)v867 = v376 > 1;
                  *(_WORD *)&v867[4] = 1024;
                  *(_DWORD *)&v867[6] = v837 == v842;
                  *(_WORD *)&v867[10] = 2048;
                  *(_QWORD *)&v867[12] = v319;
                  _os_log_impl(&dword_1BE607000, v833, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping column %ld from group with transcription %{sensitive}@ because no viable replacements: hasMultipleTopModelTokens ? %d, topIsTopModel ? %d, topModelTokenLength: %ld", buf, 0x2Cu);

                }
                goto LABEL_155;
              }

              if (v319 == 1)
                goto LABEL_59;
              v377 = objc_msgSend_length(v830, v355, v356, v357, v358, v359);
              v383 = objc_msgSend_properties(v840, v378, v379, v380, v381, v382);
              objc_msgSend_array(MEMORY[0x1E0C99DE8], v384, v385, v386, v387, v388);
              v833 = objc_claimAutoreleasedReturnValue();
              v394 = 0;
              v395 = 0;
              v824 = ((v383 >> 5) & 1) + v377;
              while (v395 < objc_msgSend_count(v844, v389, v390, v391, v392, v393))
              {
                v401 = v394;
                if (v842 != v395 || (unint64_t)objc_msgSend_count(v844, v396, v397, v398, v399, v400) <= 1)
                {
                  objc_msgSend_objectAtIndexedSubscript_(v844, v396, v395, v398, v399, v400);
                  v402 = (void *)objc_claimAutoreleasedReturnValue();
                  v408 = (unint64_t)objc_msgSend_count(v402, v403, v404, v405, v406, v407) > 1;

                  if (!v408)
                  {
                    objc_msgSend_objectAtIndexedSubscript_(v844, v409, v395, v410, v411, v412);
                    v425 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_firstObject(v425, v426, v427, v428, v429, v430);
                    v413 = objc_claimAutoreleasedReturnValue();

                    objc_msgSend_modelScore(v413, v431, v432, v433, v434, v435);
                    v437 = v436;
                    v443 = objc_msgSend_properties(v413, v438, v439, v440, v441, v442);
                    v449 = objc_msgSend_inputSources(v413, v444, v445, v446, v447, v448);
                    objc_msgSend_recognitionScore(v413, v450, v451, v452, v453, v454);
                    v461 = v460;
                    if (v842 == v837)
                    {
                      v462 = 0;
                    }
                    else if (v437 == v332)
                    {
                      v462 = 1;
                    }
                    else
                    {
                      objc_msgSend_recognitionScore(v413, v455, v456, v457, v458, v459);
                      v464 = v463;
                      objc_msgSend_recognitionScore(v840, v465, v466, v467, v468, v469);
                      v462 = v464 == v470;
                    }
                    v471 = v443 & 4;
                    v472 = v449 & 0x20;
                    v474 = v461 > 0.55 && v472 != 0;
                    if (v471)
                      v475 = v831 == 0;
                    else
                      v475 = 0;
                    v476 = v475;
                    if (v437 < v332 + -0.35)
                      v477 = v476;
                    else
                      v477 = 0;
                    if (objc_msgSend_count(v844, v455, v456, v457, v458, v459) == 1)
                    {
                      v484 = v437 < 0.8 && v471 != 0;
                      if ((((v462 || v474) | v477) & 1) != 0)
                      {
LABEL_110:
                        if (v837 == v395)
                        {
                          objc_msgSend_string(v413, v478, v479, v480, v481, v482);
                          v522 = objc_claimAutoreleasedReturnValue();

                          v401 = (void *)v522;
                        }
                        objc_msgSend_string(v413, v478, v479, v480, v481, v482);
                        v485 = objc_claimAutoreleasedReturnValue();
                        objc_msgSend_addObject_(v833, v523, (uint64_t)v485, v524, v525, v526);
                        goto LABEL_113;
                      }
                    }
                    else
                    {
                      v484 = 0;
                      if ((((v462 || v474) | v477) & 1) != 0)
                        goto LABEL_110;
                    }
                    if (v484)
                      goto LABEL_110;
                    if (qword_1EF568E88 != -1)
                      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                    v485 = (id)qword_1EF568E28;
                    if (os_log_type_enabled(v485, OS_LOG_TYPE_DEFAULT))
                    {
                      objc_msgSend_string(v840, v486, v487, v488, v489, v490);
                      v828 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_string(v413, v491, v492, v493, v494, v495);
                      v496 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_string(v413, v497, v498, v499, v500, v501);
                      v502 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_recognitionScore(v413, v503, v504, v505, v506, v507);
                      v509 = v508;
                      objc_msgSend_string(v840, v510, v511, v512, v513, v514);
                      v515 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_recognitionScore(v840, v516, v517, v518, v519, v520);
                      *(_DWORD *)buf = 138742531;
                      *(_QWORD *)&buf[4] = v828;
                      *(_WORD *)&buf[12] = 2117;
                      *(_QWORD *)&buf[14] = v496;
                      *(_WORD *)&buf[22] = 2117;
                      *(_QWORD *)v867 = v502;
                      *(_WORD *)&v867[8] = 2048;
                      *(double *)&v867[10] = v437;
                      *(_WORD *)&v867[18] = 2048;
                      *(_QWORD *)&v867[20] = v509;
                      *(_WORD *)&v867[28] = 1024;
                      *(_DWORD *)&v867[30] = v471 >> 2;
                      *(_WORD *)&v867[34] = 1024;
                      *(_DWORD *)&v867[36] = v472 >> 5;
                      v868 = 2117;
                      v869 = v515;
                      v870 = 2048;
                      v871 = v332;
                      v872 = 2048;
                      v873 = v521;
                      v874 = 1024;
                      v875 = v831 >> 2;
                      _os_log_impl(&dword_1BE607000, v485, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Spelling correction skipped for token %{sensitive}@ -> %{sensitive}@ because replacement token(String: %{sensitive}@ model score: %.2f rec score: %.2f in lexicon: %i is spell correction: %i) can't replace top model token(String: %{sensitive}@ model score: %.2f rec score: %.2f in lexicon: %i)", buf, 0x64u);

                    }
LABEL_113:

                    goto LABEL_114;
                  }
                }
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v413 = (id)qword_1EF568E28;
                if (os_log_type_enabled(v413, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_objectAtIndexedSubscript_(v844, v414, v395, v415, v416, v417);
                  v418 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_description(v418, v419, v420, v421, v422, v423);
                  v424 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138739971;
                  *(_QWORD *)&buf[4] = v424;
                  _os_log_impl(&dword_1BE607000, v413, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping line of transcription %{sensitive}@ because the top model transcription has multiple tokens", buf, 0xCu);

                }
LABEL_114:

                ++v395;
                v394 = v401;
              }
              if (!objc_msgSend_count(v833, v396, v397, v398, v399, v400))
                goto LABEL_154;
              if (!v394)
              {
                objc_msgSend_firstObject(v833, v527, v528, v529, v530, v531);
                v394 = (void *)objc_claimAutoreleasedReturnValue();
              }
              objc_msgSend_removeObject_(v833, v527, (uint64_t)v394, v529, v530, v531);
              v532 = (void *)MEMORY[0x1E0CB3970];
              objc_msgSend_string(v840, v533, v534, v535, v536, v537);
              v538 = (void *)objc_claimAutoreleasedReturnValue();
              v539 = v394;
              v545 = objc_msgSend_length(v538, v540, v541, v542, v543, v544);
              objc_msgSend_correctionCheckingResultWithRange_replacementString_alternativeStrings_(v532, v546, v824, v545, (uint64_t)v394, (uint64_t)v833);
              v829 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_strokeGroupResult(v825, v547, v548, v549, v550, v551);
              v552 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_inputStrokeIdentifiers(v552, v553, v554, v555, v556, v557);
              v558 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeIndexes(v840, v559, v560, v561, v562, v563);
              v564 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectsAtIndexes_(v558, v565, (uint64_t)v564, v566, v567, v568);
              v838 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_recognitionSession(v823, v569, v570, v571, v572, v573);
              v574 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_latestStrokeProvider(v574, v575, v576, v577, v578, v579);
              v580 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v581, (uint64_t)v838, (uint64_t)v580, v582, v583);
              v832 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_recognitionSession(v823, v584, v585, v586, v587, v588);
              v589 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_latestStrokeProvider(v589, v590, v591, v592, v593, v594);
              v595 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v596, (uint64_t)v832, v597, v598, v599);
              v600 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_cachedTranscriptionForStrokeGroup_(v595, v601, (uint64_t)v600, v602, v603, v604);
              v605 = (void *)objc_claimAutoreleasedReturnValue();
              v606 = v605 == 0;

              if (!v606)
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v612 = (id)qword_1EF568E28;
                if (os_log_type_enabled(v612, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_string(v840, v613, v614, v615, v616, v617);
                  v618 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138740227;
                  *(_QWORD *)&buf[4] = v618;
                  *(_WORD *)&buf[12] = 2117;
                  *(_QWORD *)&buf[14] = v539;
                  _os_log_impl(&dword_1BE607000, v612, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Spelling correction skipped for token = %{sensitive}@ -> %{sensitive}@ because there is a matching recognition result in the transcription cache.", buf, 0x16u);

                }
                goto LABEL_133;
              }
              if (objc_msgSend_hasValidPrincipalLines(v840, v607, v608, v609, v610, v611))
              {
                objc_msgSend_principalOrientation(v840, v619, v620, v621, v622, v623);
                if (fabs(v627) > 0.2)
                {
                  if (qword_1EF568E88 != -1)
                    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                  v612 = (id)qword_1EF568E28;
                  if (os_log_type_enabled(v612, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_string(v840, v628, v629, v630, v631, v632);
                    v633 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_principalOrientation(v840, v634, v635, v636, v637, v638);
                    *(_DWORD *)buf = 138740483;
                    *(_QWORD *)&buf[4] = v633;
                    *(_WORD *)&buf[12] = 2117;
                    *(_QWORD *)&buf[14] = v539;
                    *(_WORD *)&buf[22] = 2048;
                    *(_QWORD *)v867 = v639;
                    _os_log_impl(&dword_1BE607000, v612, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Spelling correction skipped for token = %{sensitive}@ -> %{sensitive}@ because baseline is slanted (angle %.2f).", buf, 0x20u);

                  }
                  goto LABEL_133;
                }
                v865 = v840;
                objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v624, (uint64_t)&v865, 1, v625, v626);
                v646 = (void *)objc_claimAutoreleasedReturnValue();
                v864 = v838;
                objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v647, (uint64_t)&v864, 1, v648, v649);
                v650 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_recognitionSession(v823, v651, v652, v653, v654, v655);
                v656 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_latestStrokeProvider(v656, v657, v658, v659, v660, v661);
                v662 = (void *)objc_claimAutoreleasedReturnValue();
                v665 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v663, (uint64_t)v646, (uint64_t)v650, (uint64_t)v662, v664);

                v666 = [CHTextCheckingQueryItem alloc];
                objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v667, (uint64_t)v832, v668, v669, v670);
                v671 = (id)objc_claimAutoreleasedReturnValue();
                v672 = v829;
                if (v666)
                {
                  *(_QWORD *)buf = v666;
                  *(_QWORD *)&buf[8] = CHTextCheckingQueryItem;
                  v678 = objc_msgSendSuper2((objc_super *)buf, sel_init);
                  if (v678)
                  {
                    v679 = objc_msgSend_copy(v671, v673, v674, v675, v676, v677);
                    v680 = (void *)v678[4];
                    v678[4] = v679;

                    v686 = objc_msgSend_copy(v672, v681, v682, v683, v684, v685);
                    v687 = (void *)v678[5];
                    v678[5] = v686;

                    v678[1] = 0x7FFFFFFFFFFFFFFFLL;
                    if (!CGPathIsEmpty(v665))
                      v678[3] = CGPathRetain(v665);
                    *((_DWORD *)v678 + 4) = 0;
                  }
                }
                else
                {
                  v678 = 0;
                }

                if (v665)
                  CGPathRelease(v665);
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v688 = (id)qword_1EF568E28;
                if (os_log_type_enabled(v688, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_objectAtIndexedSubscript_(v844, v689, v842, v690, v691, v692);
                  v693 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_firstObject(v693, v694, v695, v696, v697, v698);
                  v699 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_string(v699, v700, v701, v702, v703, v704);
                  v705 = (void *)objc_claimAutoreleasedReturnValue();
                  v711 = objc_msgSend_count(v838, v706, v707, v708, v709, v710);
                  *(_DWORD *)buf = 138740483;
                  *(_QWORD *)&buf[4] = v539;
                  *(_WORD *)&buf[12] = 2117;
                  *(_QWORD *)&buf[14] = v705;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)v867 = v711;
                  _os_log_impl(&dword_1BE607000, v688, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Found Spelling correction = %{sensitive}@ as replacement to %{sensitive}@, covering %ld strokes", buf, 0x20u);

                }
                v712 = v823[9];
                *(_QWORD *)v861 = MEMORY[0x1E0C809B0];
                *(_QWORD *)&v861[8] = 3221225472;
                *(_QWORD *)&v861[16] = sub_1BE7D048C;
                v862 = &unk_1E77F52A8;
                v713 = v678;
                v863 = v713;
                v722 = objc_msgSend_indexOfObjectPassingTest_(v712, v714, (uint64_t)v861, v715, v716, v717);
                if (v722 == 0x7FFFFFFFFFFFFFFFLL)
                {
                  objc_msgSend_addObject_(v820, v718, (uint64_t)v713, v719, v720, v721);
                  v723 = v713;
                }
                else
                {
                  v724 = [CHTextCheckingQueryItem alloc];
                  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v725, (uint64_t)v832, v726, v727, v728);
                  v729 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_objectAtIndexedSubscript_(v823[9], v730, v722, v731, v732, v733);
                  v734 = (void *)objc_claimAutoreleasedReturnValue();
                  v740 = (const CGPath *)objc_msgSend_estimatedBaseline(v734, v735, v736, v737, v738, v739);
                  v741 = v729;
                  v742 = v672;
                  if (v724)
                  {
                    *(_QWORD *)buf = v724;
                    *(_QWORD *)&buf[8] = CHTextCheckingQueryItem;
                    v723 = objc_msgSendSuper2((objc_super *)buf, sel_init);
                    if (v723)
                    {
                      v748 = objc_msgSend_copy(v741, v743, v744, v745, v746, v747);
                      v749 = (void *)v723[4];
                      v723[4] = v748;

                      v755 = objc_msgSend_copy(v742, v750, v751, v752, v753, v754);
                      v756 = (void *)v723[5];
                      v723[5] = v755;

                      v723[1] = 0x7FFFFFFFFFFFFFFFLL;
                      if (!CGPathIsEmpty(v740))
                        v723[3] = CGPathRetain(v740);
                      *((_DWORD *)v723 + 4) = 0;
                    }
                  }
                  else
                  {
                    v723 = 0;
                  }

                  objc_msgSend_addObject_(v820, v757, (uint64_t)v723, v758, v759, v760);
                }

                v394 = v539;
LABEL_154:

              }
              else
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v612 = (id)qword_1EF568E28;
                if (os_log_type_enabled(v612, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_string(v840, v640, v641, v642, v643, v644);
                  v645 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138740227;
                  *(_QWORD *)&buf[4] = v645;
                  *(_WORD *)&buf[12] = 2117;
                  *(_QWORD *)&buf[14] = v539;
                  _os_log_impl(&dword_1BE607000, v612, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Spelling correction skipped for token = %{sensitive}@ -> %{sensitive}@ because no accurate baseline is available.", buf, 0x16u);

                }
LABEL_133:

              }
LABEL_155:

            }
          }
          Index = objc_msgSend_firstIndex(v817, v217, v822, v218, v219, v220);
          v779 = objc_msgSend_lastIndex(v817, v774, v775, v776, v777, v778);
          v785 = objc_msgSend_firstIndex(v817, v780, v781, v782, v783, v784);
          v846[0] = MEMORY[0x1E0C809B0];
          v786 = v779 - v785 + 1;
          v846[1] = 3221225472;
          v846[2] = sub_1BE7D04C0;
          v846[3] = &unk_1E77F52F8;
          v847 = v826;
          v848 = v823;
          v849 = v818;
          objc_msgSend_enumerateRangesInRange_options_usingBlock_(v817, v787, Index, v786, 0, (uint64_t)v846);

LABEL_166:
        }
        v815 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v855, (uint64_t)v860, 16, v31);
      }
      while (v815);
    }

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v788 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v788, OS_LOG_TYPE_DEFAULT))
    {
      v794 = objc_msgSend_count(v818, v789, v790, v791, v792, v793);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v794;
      _os_log_impl(&dword_1BE607000, v788, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery._textCheckingResultsForSessionResult: completed, found %lu items.", buf, 0xCu);
    }

    v845[0] = MEMORY[0x1E0C809B0];
    v845[1] = 3221225472;
    v845[2] = sub_1BE7D1238;
    v845[3] = &unk_1E77F52A8;
    v845[4] = v823;
    objc_msgSend_indexesOfObjectsPassingTest_(v818, v795, (uint64_t)v845, v796, v797, v798);
    v799 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectsAtIndexes_(v818, v800, (uint64_t)v799, v801, v802, v803);
    a1 = (void **)objc_claimAutoreleasedReturnValue();
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v804 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v804, OS_LOG_TYPE_DEFAULT))
    {
      v810 = objc_msgSend_count(v818, v805, v806, v807, v808, v809);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v810;
      _os_log_impl(&dword_1BE607000, v804, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery._textCheckingResultsForSessionResult: completed, kept %lu valid items after codemap filtering.", buf, 0xCu);
    }

  }
  return a1;
}

void sub_1BE7CF82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  void *v56;
  void *v57;
  void *v58;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7CFE1C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7CFE2C(uint64_t a1)
{

}

void sub_1BE7CFE34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  __int128 v12;
  _QWORD v13[4];
  __int128 v14;

  objc_msgSend_sharedEditor(MEMORY[0x1E0DBDA98], a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE7CFF00;
  v13[3] = &unk_1E77F5210;
  v12 = *(_OWORD *)(a1 + 48);
  v10 = (id)v12;
  v14 = v12;
  objc_msgSend_requestCheckingOfString_language_offset_options_completionHandler_(v7, v11, v8, (uint64_t)CFSTR("en"), 0, v9, v13);

}

void sub_1BE7CFEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7CFF00(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = objc_msgSend_copy(v3, v4, v5, v6, v7, v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v12 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v18 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v13, v14, v15, v16, v17);
    v19 = 134217984;
    v20 = v18;
    _os_log_impl(&dword_1BE607000, v12, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQueryItem found %ld grammar text checking results in paragraph", (uint8_t *)&v19, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE7D0014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D0038(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  const CGPath *v79;
  id v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v80 = a3;
  v6 = a4;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v7 = v6;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v85, (uint64_t)v90, 16, v9);
  if (v15)
  {
    v16 = *(_QWORD *)v86;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v86 != v16)
          objc_enumerationMutation(v7);
        v18 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 8 * i);
        objc_msgSend_recognitionSession(*(void **)(a1 + 32), v10, v11, v12, v13, v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_latestStrokeProvider(v19, v20, v21, v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v26, v18, (uint64_t)v25, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 40), v30, (uint64_t)v29, v31, v32, v33);
      }
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v85, (uint64_t)v90, 16, v14);
    }
    while (v15);
  }

  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v34 = v80;
  v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v81, (uint64_t)v89, 16, v36);
  if (v42)
  {
    v43 = *(_QWORD *)v82;
    do
    {
      for (j = 0; j != v42; ++j)
      {
        if (*(_QWORD *)v82 != v43)
          objc_enumerationMutation(v34);
        v45 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * j);
        if (objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v37, v38, v39, v40, v41)
          && (objc_msgSend_properties(v45, v46, v47, v48, v49, v50) & 0x20) != 0)
        {
          objc_msgSend_stringByAppendingString_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v46, (uint64_t)CFSTR(" "), v48, v49, v50);
          v51 = objc_claimAutoreleasedReturnValue();
          v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v53 = *(void **)(v52 + 40);
          *(_QWORD *)(v52 + 40) = v51;

        }
        v54 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        objc_msgSend_string(v45, v46, v47, v48, v49, v50);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAppendingString_(v54, v56, (uint64_t)v55, v57, v58, v59);
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v62 = *(void **)(v61 + 40);
        *(_QWORD *)(v61 + 40) = v60;

      }
      v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v37, (uint64_t)&v81, (uint64_t)v89, 16, v41);
    }
    while (v42);
  }

  v68 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v69 = *(_BYTE *)(v68 + 24);
  if (v69)
  {
    v69 = objc_msgSend_indexOfObjectPassingTest_(v34, v63, (uint64_t)&unk_1E77EFEF8, v65, v66, v67) == 0x7FFFFFFFFFFFFFFFLL;
    v68 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  }
  *(_BYTE *)(v68 + 24) = v69;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    objc_msgSend_recognitionSession(*(void **)(a1 + 32), v63, v64, v65, v66, v67);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_latestStrokeProvider(v70, v71, v72, v73, v74, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v77, (uint64_t)v34, (uint64_t)v7, (uint64_t)v76, v78);

    CGPathAddPath(*(CGMutablePathRef *)(a1 + 72), 0, v79);
    CGPathRelease(v79);
  }

}

void sub_1BE7D0374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D040C(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _BOOL8 v14;

  v2 = a2;
  if (objc_msgSend_hasValidPrincipalLines(v2, v3, v4, v5, v6, v7))
  {
    objc_msgSend_principalOrientation(v2, v8, v9, v10, v11, v12);
    v14 = fabs(v13) > 0.2;

    return v14;
  }
  else
  {

    return 1;
  }
}

void sub_1BE7D0470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D0480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_isEquivalentToTextCheckingQueryItem_, a2, a4, a5, a6);
}

uint64_t sub_1BE7D048C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_isEquivalentToTextCheckingQueryItem_, a2, a4, a5, a6);
}

__n128 sub_1BE7D0498(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1BE7D04A8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)(v4 + 56) = a3;
  *a4 = 1;
  return result;
}

void sub_1BE7D04C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CHContextualTextResults *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void **v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSCharacterSet *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  dispatch_block_t v43;
  NSObject *v44;
  id v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t j;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  CGMutablePathRef Mutable;
  unint64_t v117;
  id v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  BOOL v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  const char *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  unint64_t v157;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t k;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  CHTextCheckingQueryItem *v188;
  id v189;
  id v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  CHTextCheckingQueryItem *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  const CGPath *v229;
  id v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  id v255;
  id obj;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  id v260;
  uint64_t i;
  id v262;
  void **v263;
  void *v264;
  const CGPath *path;
  NSString *v266;
  NSString *v267;
  uint64_t v268;
  void *v269;
  void *v270;
  void *v271;
  _QWORD v272[4];
  id v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _QWORD v278[5];
  id v279;
  uint64_t *v280;
  uint64_t *v281;
  _BYTE *v282;
  CGMutablePathRef v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t, uint64_t);
  void (*v292)(uint64_t);
  __CFString *v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  _QWORD block[4];
  NSString *v299;
  id v300;
  id v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t (*v306)(uint64_t, uint64_t);
  void (*v307)(uint64_t);
  id v308;
  uint8_t v309[128];
  _BYTE buf[24];
  char v311;
  _BYTE v312[128];
  objc_super v313;
  uint64_t v314;

  v314 = *MEMORY[0x1E0C80C00];
  objc_msgSend_subarrayWithRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6);
  v255 = (id)objc_claimAutoreleasedReturnValue();
  v6 = [CHContextualTextResults alloc];
  v11 = (void *)objc_msgSend_initWithTextResults_(v6, v7, (uint64_t)v255, v8, v9, v10);
  v12 = *(void ***)(a1 + 40);
  v262 = v11;
  v263 = v12;
  if (v12)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v13, v14, v15, v16, v17);
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_rawTranscription(v262, v18, v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v23, v24, (uint64_t)CFSTR("\n"), (uint64_t)CFSTR(" "), v25, v26);
    v266 = (NSString *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_ch_sentenceEndPunctuationCharacterSet(MEMORY[0x1E0CB3500], v27, v28, v29, v30, v31);
    v32 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    v33 = rangeOfCharactersFromSet(v266, v32, 1);
    v35 = v34;

    if (v33 == 0x7FFFFFFFFFFFFFFFLL || v33 + v35 < (unint64_t)objc_msgSend_length(v266, v36, v37, v38, v39, v40))
    {
      objc_msgSend_stringByAppendingString_(v266, v36, (uint64_t)CFSTR("."), v38, v39, v40);
      v41 = objc_claimAutoreleasedReturnValue();

      v42 = (void *)v41;
    }
    else
    {
      v42 = v266;
    }
    v43 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &unk_1E77EFE38);
    v303 = 0;
    v304 = &v303;
    v305 = 0x3032000000;
    v306 = sub_1BE7CFE1C;
    v307 = sub_1BE7CFE2C;
    v308 = 0;
    v44 = qword_1EF568DA8;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BE7CFE34;
    block[3] = &unk_1E77F5238;
    v267 = v42;
    v299 = v267;
    v300 = 0;
    v302 = &v303;
    v45 = v43;
    v301 = v45;
    dispatch_sync(v44, block);
    v253 = v45;
    dispatch_block_wait(v45, 0xFFFFFFFFFFFFFFFFLL);
    v296 = 0u;
    v297 = 0u;
    v294 = 0u;
    v295 = 0u;
    obj = (id)v304[5];
    v258 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v46, (uint64_t)&v294, (uint64_t)v312, 16, v47);
    if (v258)
    {
      v257 = *(_QWORD *)v295;
      do
      {
        for (i = 0; i != v258; ++i)
        {
          if (*(_QWORD *)v295 != v257)
            objc_enumerationMutation(obj);
          v264 = *(void **)(*((_QWORD *)&v294 + 1) + 8 * i);
          objc_msgSend_grammarDetails(v264, v48, v49, v50, v51, v52, v253);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v269 = (void *)objc_msgSend_mutableCopy(v53, v54, v55, v56, v57, v58);

          for (j = 0; j < objc_msgSend_count(v269, v59, v60, v61, v62, v63); j = v268 + 1)
          {
            objc_msgSend_set(MEMORY[0x1E0C99E20], v65, v66, v67, v68, v69);
            v270 = (void *)objc_claimAutoreleasedReturnValue();
            v288 = 0;
            v289 = &v288;
            v290 = 0x3032000000;
            v291 = sub_1BE7CFE1C;
            v292 = sub_1BE7CFE2C;
            v293 = &stru_1E77F6F28;
            objc_msgSend_objectAtIndex_(v269, v70, j, v71, v72, v73);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            v268 = j;
            v271 = (void *)objc_msgSend_mutableCopy(v74, v75, v76, v77, v78, v79);

            objc_msgSend_objectForKey_(v271, v80, (uint64_t)CFSTR("NSGrammarRange"), v81, v82, v83);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v90 = objc_msgSend_rangeValue(v84, v85, v86, v87, v88, v89);
            v92 = v91;

            v98 = objc_msgSend_range(v264, v93, v94, v95, v96, v97);
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v99 = (id)qword_1EF568E28;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_objectForKey_(v271, v100, (uint64_t)CFSTR("NSGrammarCorrections"), v101, v102, v103);
              v104 = (void *)objc_claimAutoreleasedReturnValue();
              v110 = objc_msgSend_count(v104, v105, v106, v107, v108, v109);
              objc_msgSend_objectForKey_(v271, v111, (uint64_t)CFSTR("NSGrammarCorrections"), v112, v113, v114);
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 134218243;
              *(_QWORD *)&buf[4] = v110;
              *(_WORD *)&buf[12] = 2117;
              *(_QWORD *)&buf[14] = v115;
              _os_log_impl(&dword_1BE607000, v99, OS_LOG_TYPE_DEBUG, "CHTextCheckingQuery Found Grammar correction with %ld corrections = %{sensitive}@", buf, 0x16u);

            }
            if (v92)
            {
              Mutable = CGPathCreateMutable();
              v117 = v98 + v90;
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0x2020000000;
              v311 = 1;
              v284 = 0;
              v285 = &v284;
              v286 = 0x2020000000;
              v287 = 0;
              v278[0] = MEMORY[0x1E0C809B0];
              v278[1] = 3221225472;
              v278[2] = sub_1BE7D0038;
              v278[3] = &unk_1E77F5280;
              v280 = &v284;
              v278[4] = v263;
              v118 = v270;
              v279 = v118;
              v281 = &v288;
              v282 = buf;
              path = Mutable;
              v283 = Mutable;
              objc_msgSend_enumerateGroupsCoveredByStringRange_block_(v262, v119, v117, v92, (uint64_t)v278, v120);
              objc_msgSend_recognitionSession(v263, v121, v122, v123, v124, v125);
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_latestStrokeProvider(v126, v127, v128, v129, v130, v131);
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_cachedTranscriptionForStrokeGroup_(v132, v133, (uint64_t)v118, v134, v135, v136);
              v137 = (void *)objc_claimAutoreleasedReturnValue();
              v138 = v137 == 0;

              if (v138)
              {
                if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24)
                  && objc_msgSend_count(v118, v139, v140, v141, v142, v143)
                  && v285[3] == 1)
                {
                  v151 = 0;
                  v152 = 0;
                  v153 = v92 + v117 - 1;
                  while (v151 < objc_msgSend_length(v267, v146, v147, v148, v149, v150))
                  {
                    v154 = v289[5];
                    v155 = objc_msgSend_length(v267, v146, v147, v148, v149, v150);
                    v157 = objc_msgSend_rangeOfString_options_range_(v267, v156, v154, 0, (uint64_t)&v152[v151], v155 - (_QWORD)&v152[v151]);
                    v151 = v157;
                    if (v157 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v151 = 0x7FFFFFFFFFFFFFFFLL;
                      break;
                    }
                    v152 = v146;
                    if (v117 >= v157
                      && v117 - v157 < (unint64_t)v146
                      && v153 >= v157
                      && v153 - v157 < (unint64_t)v146)
                    {
                      break;
                    }
                  }
                  objc_msgSend_array(MEMORY[0x1E0C99DE8], v146, v147, v148, v149, v150);
                  v164 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v151 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    objc_msgSend_objectForKey_(v271, v160, (uint64_t)CFSTR("NSGrammarCorrections"), v161, v162, v163);
                    v165 = v164;
                    v164 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                  else
                  {
                    v276 = 0u;
                    v277 = 0u;
                    v274 = 0u;
                    v275 = 0u;
                    objc_msgSend_objectForKey_(v271, v160, (uint64_t)CFSTR("NSGrammarCorrections"), v161, v162, v163);
                    v165 = (void *)objc_claimAutoreleasedReturnValue();
                    v170 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v166, (uint64_t)&v274, (uint64_t)v309, 16, v167);
                    if (v170)
                    {
                      v171 = v117 - v151;
                      v172 = *(_QWORD *)v275;
                      do
                      {
                        for (k = 0; k != v170; ++k)
                        {
                          if (*(_QWORD *)v275 != v172)
                            objc_enumerationMutation(v165);
                          objc_msgSend_stringByReplacingCharactersInRange_withString_((void *)v289[5], v168, v171, v92, *(_QWORD *)(*((_QWORD *)&v274 + 1) + 8 * k), v169);
                          v174 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend_addObject_(v164, v175, (uint64_t)v174, v176, v177, v178);

                        }
                        v170 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v168, (uint64_t)&v274, (uint64_t)v309, 16, v169);
                      }
                      while (v170);
                    }
                  }

                  objc_msgSend_setObject_forKeyedSubscript_(v271, v179, (uint64_t)v164, (uint64_t)CFSTR("NSGrammarCorrections"), v180, v181);
                  objc_msgSend_setObject_atIndexedSubscript_(v269, v182, (uint64_t)v271, v268, v183, v184);
                  objc_msgSend_grammarCheckingResultWithRange_details_(MEMORY[0x1E0CB3970], v185, v117, v92, (uint64_t)v269, v186);
                  v187 = (void *)objc_claimAutoreleasedReturnValue();
                  v188 = [CHTextCheckingQueryItem alloc];
                  v189 = v118;
                  v190 = v187;
                  if (v188)
                  {
                    v313.receiver = v188;
                    v313.super_class = (Class)CHTextCheckingQueryItem;
                    v196 = objc_msgSendSuper2(&v313, sel_init);
                    if (v196)
                    {
                      v197 = objc_msgSend_copy(v189, v191, v192, v193, v194, v195);
                      v198 = (void *)v196[4];
                      v196[4] = v197;

                      v204 = objc_msgSend_copy(v190, v199, v200, v201, v202, v203);
                      v205 = (void *)v196[5];
                      v196[5] = v204;

                      v196[1] = v268;
                      if (!CGPathIsEmpty(path))
                        v196[3] = CGPathRetain(path);
                      *((_DWORD *)v196 + 4) = 1;
                    }
                  }
                  else
                  {
                    v196 = 0;
                  }

                  v206 = v263[9];
                  v272[0] = MEMORY[0x1E0C809B0];
                  v272[1] = 3221225472;
                  v272[2] = sub_1BE7D0480;
                  v272[3] = &unk_1E77F52A8;
                  v207 = v196;
                  v273 = v207;
                  v216 = objc_msgSend_indexOfObjectPassingTest_(v206, v208, (uint64_t)v272, v209, v210, v211);
                  if (v216 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    objc_msgSend_addObject_(v259, v212, (uint64_t)v207, v213, v214, v215);
                    v217 = v207;
                  }
                  else
                  {
                    v218 = [CHTextCheckingQueryItem alloc];
                    objc_msgSend_objectAtIndexedSubscript_(v263[9], v219, v216, v220, v221, v222);
                    v223 = (void *)objc_claimAutoreleasedReturnValue();
                    v229 = (const CGPath *)objc_msgSend_estimatedBaseline(v223, v224, v225, v226, v227, v228);
                    v260 = v189;
                    v230 = v190;
                    if (v218)
                    {
                      v313.receiver = v218;
                      v313.super_class = (Class)CHTextCheckingQueryItem;
                      v217 = objc_msgSendSuper2(&v313, sel_init);
                      if (v217)
                      {
                        v236 = objc_msgSend_copy(v260, v231, v232, v233, v234, v235);
                        v237 = (void *)v217[4];
                        v217[4] = v236;

                        v243 = objc_msgSend_copy(v230, v238, v239, v240, v241, v242);
                        v244 = (void *)v217[5];
                        v217[5] = v243;

                        v217[1] = v268;
                        if (!CGPathIsEmpty(v229))
                          v217[3] = CGPathRetain(v229);
                        *((_DWORD *)v217 + 4) = 1;
                      }
                    }
                    else
                    {
                      v217 = 0;
                    }

                    objc_msgSend_addObject_(v259, v245, (uint64_t)v217, v246, v247, v248);
                  }

                }
                if (path)
                  CGPathRelease(path);
              }
              else
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v144 = (id)qword_1EF568E28;
                if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                {
                  v145 = (void *)v289[5];
                  LODWORD(v313.receiver) = 138739971;
                  *(id *)((char *)&v313.receiver + 4) = v145;
                  _os_log_impl(&dword_1BE607000, v144, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Grammar correction skipped for string = %{sensitive}@ because there is a matching recognition result in the transcription cache.", (uint8_t *)&v313, 0xCu);
                }

              }
              _Block_object_dispose(&v284, 8);
              _Block_object_dispose(buf, 8);
            }

            _Block_object_dispose(&v288, 8);
          }

        }
        v258 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v48, (uint64_t)&v294, (uint64_t)v312, 16, v52);
      }
      while (v258);
    }

    _Block_object_dispose(&v303, 8);
  }
  else
  {
    v259 = 0;
  }

  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 48), v249, (uint64_t)v259, v250, v251, v252);
}

void sub_1BE7D0FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE7D0FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, id a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{

  _Block_object_dispose(&STACK[0x240], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D1238(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id obj;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __CFString *v50;
  uint64_t v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  objc_msgSend_replacementStrings(a2, (const char *)a2, a3, a4, a5, a6);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v46, (uint64_t)v52, 16, v8);
  if (v14)
  {
    v15 = *(_QWORD *)v47;
    while (2)
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v47 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v16);
        objc_msgSend_recognitionSession(*(void **)(a1 + 32), v9, v10, v11, v12, v13);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_textSynthesizer(v18, v19, v20, v21, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = CHTextSynthesisOptionSupportedCharactersStrict[0];
        v51 = MEMORY[0x1E0C9AAB0];
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v25, (uint64_t)&v51, (uint64_t)&v50, 1, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_supportedCharacterIndexesForString_options_(v24, v28, (uint64_t)v17, (uint64_t)v27, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        v37 = objc_msgSend_count(v31, v32, v33, v34, v35, v36);
        LOBYTE(v37) = v37 < objc_msgSend_length(v17, v38, v39, v40, v41, v42);

        if ((v37 & 1) != 0)
        {
          v43 = 0;
          goto LABEL_11;
        }
        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v46, (uint64_t)v52, 16, v13);
      if (v14)
        continue;
      break;
    }
  }
  v43 = 1;
LABEL_11:

  return v43;
}

void sub_1BE7D13EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7D152C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 72));
}

void sub_1BE7D15F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHTextCheckingQueryItem;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7D16C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D16E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D18B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D1974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D1984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D1B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D1D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D1EC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D1ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D1EEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D1EFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D202C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D2FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,void *a57,uint64_t a58,void *a59)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D3320(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = objc_msgSend_scriptCodeForCodepoint_(CHTextInputScriptSpec, a2, (uint64_t)a2, a4, (uint64_t)a5, a6);
  result = objc_msgSend_isSkippableScriptCode_(CHTextInputScriptSpec, v9, v8, v10, v11, v12);
  if ((result & 1) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
    *a5 = 1;
  }
  return result;
}

void sub_1BE7D3380(uint64_t a1, void *a2, void *a3, void *a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  const char *v87;
  uint32_t v88;
  unint64_t Index;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  const CGPath *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  CHDataDetectorQueryItem *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  id v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  uint64_t v223;
  void *v224;
  id v225;
  id v226;
  void *v227;
  os_log_t loga;
  NSObject *log;
  id v230;
  const CGPath *path;
  void *v232;
  void *v233;
  id obj;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  void *v240;
  void *v241;
  _QWORD v242[4];
  id v243;
  void *v244;
  id v245;
  NSObject *v246;
  id v247;
  id v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _BYTE buf[22];
  __int16 v254;
  void *v255;
  __int16 v256;
  void *v257;
  _BYTE v258[128];
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  v238 = a2;
  v230 = a3;
  v225 = a4;
  v226 = a4;
  objc_msgSend_set(MEMORY[0x1E0C99E20], v6, v7, v8, v9, v10);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  path = CGPathCreateMutable();
  v251 = 0u;
  v252 = 0u;
  v249 = 0u;
  v250 = 0u;
  objc_msgSend_allKeys(v238, v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  obj = v16;
  v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v249, (uint64_t)v258, 16, v18);
  if (!v19)
  {
LABEL_37:

    goto LABEL_39;
  }
  v237 = *(_QWORD *)v250;
  v25 = 0x1E0C99000uLL;
LABEL_3:
  v236 = v19;
  v26 = 0;
  while (1)
  {
    if (*(_QWORD *)v250 != v237)
      objc_enumerationMutation(obj);
    v27 = *(void **)(*((_QWORD *)&v249 + 1) + 8 * v26);
    v28 = objc_msgSend_integerValue(v27, v20, v21, v22, v23, v24);
    objc_msgSend_objectForKey_(v238, v29, (uint64_t)v27, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v34, v28, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *(void **)(a1 + 40);
    v241 = v38;
    v45 = objc_msgSend_uniqueIdentifier(v38, v40, v41, v42, v43, v44);
    objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v39, v46, v45, v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inputStrokeIdentifiers(v50, v51, v52, v53, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = objc_msgSend_count(v56, v57, v58, v59, v60, v61);
    if (v62 < objc_msgSend_count(v33, v63, v64, v65, v66, v67))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v73 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v79 = objc_msgSend_count(v33, v74, v75, v76, v77, v78);
      v85 = objc_msgSend_count(v56, v80, v81, v82, v83, v84);
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = v79;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v85;
      v254 = 2112;
      v255 = v56;
      v256 = 2112;
      v257 = v33;
      v86 = v73;
      v87 = "Found %lu strokes in the data detected content but only %lu strokes in the entire stroke group: %@. Found st"
            "roke indexes: %@";
      v88 = 42;
LABEL_20:
      _os_log_impl(&dword_1BE607000, v86, OS_LOG_TYPE_ERROR, v87, buf, v88);
LABEL_21:
      LODWORD(v154) = 2;
      v121 = v240;
      v240 = 0;
      goto LABEL_34;
    }
    Index = objc_msgSend_lastIndex(v33, v68, v69, v70, v71, v72);
    if (Index >= objc_msgSend_count(v56, v90, v91, v92, v93, v94))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v73 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v160 = objc_msgSend_lastIndex(v33, v155, v156, v157, v158, v159);
      v166 = objc_msgSend_count(v56, v161, v162, v163, v164, v165);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v160;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v166;
      v86 = v73;
      v87 = "The last stroke index found in the data detected content (#strokes=%lu) should be within the scope of the st"
            "rokeIDs array (#strokes=%lu)";
      v88 = 22;
      goto LABEL_20;
    }
    objc_msgSend_array(*(void **)(v25 + 3560), v95, v96, v97, v98, v99);
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(*(void **)(v25 + 3560), v100, v101, v102, v103, v104);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recognitionResultsByLocale(v50, v105, v106, v107, v108, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_preferredLocale(v50, v111, v112, v113, v114, v115);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v110, v117, (uint64_t)v116, v118, v119, v120);
    v235 = (void *)objc_claimAutoreleasedReturnValue();

    v242[0] = MEMORY[0x1E0C809B0];
    v242[1] = 3221225472;
    v242[2] = sub_1BE7D3D3C;
    v242[3] = &unk_1E77F3880;
    v243 = v33;
    v244 = v27;
    v245 = v56;
    v73 = v232;
    v246 = v73;
    v121 = v233;
    v247 = v121;
    v122 = v240;
    v248 = v122;
    objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v235, v123, (uint64_t)v242, v124, v125, v126);
    objc_msgSend_objectForKey_(v230, v127, (uint64_t)v27, v128, v129, v130);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_count(v73, v132, v133, v134, v135, v136))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      log = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_topTranscription(v235, v167, v168, v169, v170, v171);
        v227 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_mathResult(v50, v172, v173, v174, v175, v176);
        v177 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_topTranscription(v177, v178, v179, v180, v181, v182);
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138740227;
        *(_QWORD *)&buf[4] = v227;
        *(_WORD *)&buf[12] = 2117;
        *(_QWORD *)&buf[14] = v183;
        _os_log_impl(&dword_1BE607000, log, OS_LOG_TYPE_DEFAULT, "CHDataDetectorQuery - No intersecting tokens found in preferredResult with transcription = %{sensitive}@, math result %{sensitive}@", buf, 0x16u);

      }
      if (path)
        CGPathRelease(path);
      LODWORD(v154) = 1;
      goto LABEL_33;
    }
    if (v131)
    {
      if (objc_msgSend_indexOfObjectPassingTest_(v73, v137, (uint64_t)&unk_1E77F1950, v138, v139, v140) == 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend_recognitionSession(*(void **)(a1 + 48), v141, v142, v143, v144, v145);
        loga = (os_log_t)objc_claimAutoreleasedReturnValue();
        objc_msgSend_latestStrokeProvider(loga, v146, v147, v148, v149, v150);
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        v154 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v152, (uint64_t)v73, (uint64_t)v121, (uint64_t)v151, v153);

      }
      else
      {
        v154 = (const CGPath *)objc_msgSend_newEstimatedBaselineForStrokesWithTokens_tokenStrokeIdentifiers_(v241, v141, (uint64_t)v73, (uint64_t)v121, v144, v145);
      }
      CGPathAddPath(path, 0, v154);
      if (!v154)
        goto LABEL_33;
      CGPathRelease(v154);
    }
    LODWORD(v154) = 0;
LABEL_33:

    v240 = v122;
LABEL_34:

    if ((_DWORD)v154)
      break;
    ++v26;
    v25 = 0x1E0C99000;
    if (v236 == v26)
    {
      v16 = obj;
      v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v249, (uint64_t)v258, 16, v24);
      if (v19)
        goto LABEL_3;
      goto LABEL_37;
    }
  }

  if ((_DWORD)v154 != 2)
    goto LABEL_50;
LABEL_39:
  objc_msgSend_allObjects(v240, v184, v185, v186, v187, v188);
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recognitionSession(*(void **)(a1 + 48), v190, v191, v192, v193, v194);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_latestStrokeProvider(v195, v196, v197, v198, v199, v200);
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v202, (uint64_t)v189, (uint64_t)v201, v203, v204);
  v205 = (void *)objc_claimAutoreleasedReturnValue();

  if (v205)
  {
    v210 = [CHDataDetectorQueryItem alloc];
    objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v211, (uint64_t)v205, v212, v213, v214);
    v215 = (id)objc_claimAutoreleasedReturnValue();
    v216 = v226;
    if (v210)
    {
      *(_QWORD *)buf = v210;
      *(_QWORD *)&buf[8] = CHDataDetectorQueryItem;
      v222 = objc_msgSendSuper2((objc_super *)buf, sel_init);
      if (v222)
      {
        v223 = objc_msgSend_copy(v215, v217, v218, v219, v220, v221);
        v224 = (void *)*((_QWORD *)v222 + 2);
        *((_QWORD *)v222 + 2) = v223;

        objc_storeStrong((id *)v222 + 3, v225);
        *((_QWORD *)v222 + 1) = CGPathRetain(path);
      }
    }
    else
    {
      v222 = 0;
    }

    if (!path)
      goto LABEL_47;
LABEL_46:
    CGPathRelease(path);
  }
  else
  {
    v222 = 0;
    if (path)
      goto LABEL_46;
  }
LABEL_47:
  if (v222)
    objc_msgSend_addObject_(*(void **)(a1 + 56), v206, (uint64_t)v222, v207, v208, v209);

LABEL_50:
}

void sub_1BE7D3B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D3D3C(id *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v54;
  id v55;
  id v56;
  _QWORD v57[4];
  id v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  uint8_t buf[4];
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = 0;
  v61 = &v60;
  v62 = 0x2020000000;
  v63 = 0;
  objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = sub_1BE7D3FF8;
  v57[3] = &unk_1E77F2C40;
  v58 = a1[4];
  v59 = &v60;
  objc_msgSend_enumerateIndexesUsingBlock_(v15, v17, (uint64_t)v57, v18, v19, v20);

  if (*((_BYTE *)v61 + 24))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v21 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v27 = objc_msgSend_intValue(a1[5], v22, v23, v24, v25, v26);
      *(_DWORD *)buf = 67109120;
      v65 = v27;
      _os_log_impl(&dword_1BE607000, v21, OS_LOG_TYPE_DEFAULT, "CHDataDetectorQuery._dataDetectorResultsForSessionResult: detection results for group %i", buf, 8u);
    }

    objc_msgSend_strokeIndexes(v3, v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v16;
    v52 = 3221225472;
    v53 = sub_1BE7D403C;
    v54 = &unk_1E77F3DD0;
    v34 = v9;
    v55 = v34;
    v56 = a1[6];
    objc_msgSend_enumerateIndexesUsingBlock_(v33, v35, (uint64_t)&v51, v36, v37, v38);

    objc_msgSend_addObject_(a1[7], v39, (uint64_t)v3, v40, v41, v42, v51, v52, v53, v54);
    objc_msgSend_addObject_(a1[8], v43, (uint64_t)v34, v44, v45, v46);
    objc_msgSend_addObjectsFromArray_(a1[9], v47, (uint64_t)v34, v48, v49, v50);

  }
  _Block_object_dispose(&v60, 8);

}

void sub_1BE7D3F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D3FF8(uint64_t a1, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_containsIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_1BE7D403C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE7D4080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D4094(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_hasValidPrincipalLines(a2, (const char *)a2, a3, a4, a5, a6) ^ 1;
}

void sub_1BE7D4178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D4198(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7D41A8(uint64_t a1)
{

}

void sub_1BE7D41B0(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 80));
}

void sub_1BE7D42A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHDataDetectorQueryItem;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7D4384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE7D43B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D45DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7D46C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D46D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void RectangleRegressor::RectangleRegressor(RectangleRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v4;
  void *v5;
  uint64_t v6;
  RectangleRegressor *v7;
  float v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  double *v15;
  unsigned int v16;
  double *v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  unint64_t v29;
  float v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double *v39;
  float v40;
  float v41;
  float v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  int v47;
  float v48;
  BOOL v50;
  int64_t v51;
  double *v52;
  double *v53;
  RectangleRegressor *v54;
  int64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float v60;
  float v61;
  float v62;
  float v63;
  double v64;
  double v65;
  float v66;
  float v67;
  float v68;
  float v69;
  double v70;
  double v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  RectangleRegressor *v99;
  char *v100;
  unint64_t v101;
  float v102;
  double v103;
  double *v104;
  double *v105;
  double v106;
  double v107;
  double v108;
  float v109;
  float v110;
  float v111;
  double v112;
  double v113;
  float v114;
  double **v115;
  unint64_t v116;
  double *v117;
  double *v118;
  unint64_t v119;
  double *v120;
  double **v121;
  double *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  double *v127;
  uint64_t v128;
  double *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  double *v134;
  uint64_t v135;
  double *v136;
  double *v137;
  double v138;
  double v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  float v144;
  double v145;
  float v146;
  float v147;
  int v148;
  double *v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  double *v160;
  double v161;
  double v162;
  float v163;
  float v164;
  float v165;
  float v166;
  int v167;
  double *v168;
  char *v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unsigned int v175;
  uint64_t v176;
  double *v177;
  char *v178;
  char *v179;
  void *v180;
  char *v181;
  void *v182;
  void *v183;
  char *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  double *v188;
  double *v189;
  char *v190;
  uint64_t v191;
  float v192;
  float v193;
  double v194;
  double v195;
  double v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  double *v203;
  double *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  _BYTE *v210;
  _BYTE *v211;
  int64_t v212;
  char *v213;
  RectangleRegressor *v214;
  double *v215;
  __int128 v216;
  __int128 v217;
  double *v218;
  double *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  double *v223;
  double *v224;
  __int128 v225;
  __int128 v226;
  char *v227;
  __int128 v228;
  char *v229;
  __int128 v230;
  __int128 v231;
  char *v232;
  char *v233;
  _BYTE *v234;
  _BYTE *v235;
  int64_t v236;
  double *v237;
  double *v238;
  float v239;
  double *v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  float v246;
  float v247;
  double *j;
  double v249;
  double v250;
  uint64_t v251;
  void *v252;
  char *v253;
  char *v254;
  int64_t v255;
  char *v256;
  uint64_t v257;
  void *v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  unint64_t v267;
  float v268;
  double *v269;
  double *v270;
  double v271;
  double v272;
  double v273;
  float v274;
  float v275;
  float v276;
  double v277;
  double v278;
  float v279;
  _QWORD *v280;
  unint64_t v281;
  double *v282;
  double *v283;
  unint64_t v284;
  double *v285;
  double **v286;
  double *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  double *v292;
  uint64_t v293;
  double **v294;
  double *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  double *v300;
  uint64_t v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  double v325;
  float v326;
  float v327;
  float v328;
  double v329;
  float v330;
  float v331;
  double v332;
  float v333;
  float v334;
  float v335;
  float v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  float v345;
  float v346;
  float v347;
  float v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  float v355;
  double v356;
  float v357;
  CHDrawing *v358;
  RectangleRegressor *i;
  double v360;
  double v361;
  char *v362;
  double v363;
  double v364;
  _DWORD *v365;
  char *v366;
  char *v367;
  char *v368;
  void *__p[2];
  __int128 v370;
  uint64_t v371;
  float v372;
  void *v373;
  double *v374;
  char *v375;
  void *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char v381[32];
  char *v382;
  char *v383;
  uint64_t v384;

  v4 = a2;
  *(_QWORD *)this = &off_1E77F0778;
  v382 = 0;
  v383 = 0;
  v384 = 0;
  *((_DWORD *)this + 2) = 12;
  v5 = (void *)operator new[]();
  *((_QWORD *)this + 2) = v5;
  v6 = *((unsigned int *)this + 2);
  if ((int)v6 >= 1)
    memset_pattern16(v5, &unk_1BE8DF560, 4 * v6);
  v8 = sub_1BE631E24(v4, (uint64_t)&v382, (uint64_t)v381, 1, 20.0);
  v10 = v382;
  v9 = v383;
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v383 - v382) >> 3);
  if (v11 < 7)
  {
    *((_QWORD *)this + 3) = RectangleRegressor::provideAnAnswer(v7, v4);
    goto LABEL_227;
  }
  v12 = 0;
  v13 = v8 * 1.5;
  v14 = v11 - 4;
  v15 = (double *)(v382 + 128);
  v16 = -1;
  do
  {
    if (v12 == v11 - 3)
      break;
    v17 = (double *)&v382[40 * v12];
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[5] - *v17;
    v21 = v17[6] - v19;
    v22 = (float)(v21 * v21) + (float)(v20 * v20);
    v23 = v21 / v22;
    if (v22 > 0.0)
    {
      v24 = v20 / v22;
    }
    else
    {
      v23 = v17[6] - v19;
      v24 = v17[5] - *v17;
    }
    if (v11 - 1 > v12 + 3)
    {
      v25 = sqrtf(v22);
      v26 = v24;
      v27 = v23;
      v28 = v15;
      v29 = v14;
      while (1)
      {
        v30 = ((*v28 - v19) * v27 + (*(v28 - 1) - v18) * v26) * v25;
        v31 = v30 <= 0.0 || v13 <= v30;
        if (!v31)
          break;
        v28 += 5;
        if (!--v29)
          goto LABEL_6;
      }
      v16 = v12;
    }
LABEL_6:
    ++v12;
    --v14;
    v15 += 5;
  }
  while ((v16 & 0x80000000) != 0);
  v32 = v11 - 4;
  v33 = -858993459 * ((v383 - v382) >> 3);
  v34 = v11 - 3;
  while ((int)v33 >= 4)
  {
    v35 = v33 - 1;
    v36 = (double *)&v382[40 * (v33 - 1)];
    v37 = *v36;
    v38 = v36[1];
    v39 = (double *)&v382[40 * (v33 - 2)];
    v40 = *v39 - *v36;
    v41 = v39[1] - v38;
    v42 = (float)(v41 * v41) + (float)(v40 * v40);
    if (v42 > 0.0)
    {
      v40 = v40 / v42;
      v41 = v41 / v42;
    }
    v43 = (double *)&v382[40 * v32 + 8];
    v33 = v35;
    v44 = sqrtf(v42);
    v45 = v40;
    v46 = v41;
    v47 = v34;
    while (1)
    {
      v48 = ((*v43 - v38) * v46 + (*(v43 - 1) - v37) * v45) * v44;
      if (v48 > 0.0 && v13 > v48)
        break;
      --v47;
      v43 -= 5;
      if (v47 <= 0)
      {
        LODWORD(v35) = -1;
        break;
      }
    }
    --v32;
    --v34;
    if ((v35 & 0x80000000) == 0)
    {
      if (&v382[40 * v35] != v383)
      {
        v383 = &v382[40 * v35];
        v9 = v383;
      }
      break;
    }
  }
  if ((v16 & 0x80000000) != 0 || (0xCCCCCCCCCCCCCCCDLL * ((v9 - v382) >> 3) > v16 ? (v50 = v16 == 0) : (v50 = 1), v50))
  {
    v379 = 0;
    v380 = 0;
    v378 = 0;
    v51 = v9 - v382;
    if (v9 == v382)
      goto LABEL_44;
    goto LABEL_42;
  }
  v253 = &v382[40 * v16];
  v254 = v382;
  v255 = v9 - v253;
  if (v9 != v253)
  {
    memmove(v382, v253, v255 - 3);
    v254 = v382;
  }
  v256 = &v10[v255];
  v383 = &v10[v255];
  v10 = v254;
  v379 = 0;
  v380 = 0;
  v378 = 0;
  v51 = v256 - v254;
  if (v256 != v254)
  {
LABEL_42:
    if (0xCCCCCCCCCCCCCCCDLL * (v51 >> 3) > 0x666666666666666)
      sub_1BE61F930();
    v378 = (char *)operator new(v51);
    v380 = &v378[8 * (v51 >> 3)];
    memcpy(v378, v10, v51 - 3);
    v379 = v380;
  }
LABEL_44:
  sub_1BE629CD4((uint64_t *)&v378, (uint64_t)__p);
  v53 = (double *)__p[0];
  v52 = (double *)__p[1];
  __p[1] = 0;
  *(_QWORD *)&v370 = 0;
  __p[0] = 0;
  v54 = (RectangleRegressor *)v378;
  if (v378)
  {
    v379 = v378;
    operator delete(v378);
  }
  v55 = (char *)v52 - (char *)v53;
  if (0xCCCCCCCCCCCCCCCDLL * (v52 - v53) >= 4)
  {
    for (i = this; v55 != 160; v55 = &v169[(_QWORD)v168] - (char *)v53)
    {
      v139 = *(v52 - 5);
      v138 = *(v52 - 4);
      v140 = v53[5] - v139;
      v141 = v53[6] - v138;
      v142 = (float)(v141 * v141) + (float)(v140 * v140);
      if (v142 > 0.0)
      {
        v140 = v140 / v142;
        v141 = v141 / v142;
      }
      v143 = v55 / 40;
      v144 = sqrtf(v142);
      v145 = v53[1];
      v146 = ((*v53 - v139) * v141 - (v145 - v138) * v140) * v144;
      v147 = fabsf(v146);
      if ((unint64_t)(v143 - 1) < 2)
      {
        v148 = 0;
      }
      else
      {
        v148 = 0;
        v149 = v53 + 6;
        v150 = 2;
        v151 = v53[1];
        v152 = *v53;
        do
        {
          v157 = v149[4] - v152;
          v158 = v149[5] - v151;
          v159 = (float)(v158 * v158) + (float)(v157 * v157);
          if (v159 > 0.0)
          {
            v157 = v157 / v159;
            v158 = v158 / v159;
          }
          v153 = *(v149 - 1);
          v154 = *v149;
          v155 = ((v153 - v152) * v158 - (*v149 - v151) * v157) * sqrtf(v159);
          v156 = fabsf(v155);
          if (v156 < v147)
            v148 = v150 - 1;
          ++v150;
          if (v156 < v147)
            v147 = v156;
          v149 += 5;
          v151 = v154;
          v152 = v153;
        }
        while (v143 != v150);
      }
      v160 = &v53[5 * v143];
      v162 = *(v160 - 10);
      v161 = *(v160 - 9);
      v163 = *v53 - v162;
      v164 = v145 - v161;
      v165 = (float)(v164 * v164) + (float)(v163 * v163);
      if (v165 > 0.0)
      {
        v163 = v163 / v165;
        v164 = v164 / v165;
      }
      v166 = ((v139 - v162) * v164 - (v138 - v161) * v163) * sqrtf(v165);
      v167 = v143 - 1;
      if (fabsf(v166) >= v147)
        v167 = v148;
      v168 = &v53[5 * v167];
      v169 = (char *)((char *)v52 - (char *)(v168 + 5));
      if (v52 != v168 + 5)
        memmove(&v53[5 * v167], v168 + 5, (size_t)(v169 - 3));
      v52 -= 5;
    }
    v56 = *v53;
    v57 = v53[1];
    v58 = v53[5];
    v59 = v53[6];
    v60 = v58 - *v53;
    v61 = v59 - v57;
    v62 = (float)(v61 * v61) + (float)(v60 * v60);
    if (v62 > 0.0)
    {
      v60 = v60 / v62;
      v61 = v61 / v62;
    }
    v63 = sqrtf(v62);
    v64 = v53[10];
    v65 = v53[11];
    v66 = v64 - v58;
    v67 = v65 - v59;
    v68 = (float)(v67 * v67) + (float)(v66 * v66);
    v69 = sqrtf(v68);
    v360 = v53[6];
    v363 = v53[5];
    if (v68 > 0.0)
    {
      v66 = v66 / v68;
      v67 = v67 / v68;
    }
    v70 = v53[15];
    v71 = v53[16];
    v72 = v70 - v64;
    v73 = v71 - v65;
    v74 = (float)(v73 * v73) + (float)(v72 * v72);
    v75 = sqrtf(v74);
    v31 = v74 <= 0.0;
    v76 = v72 / v74;
    v77 = v73 / v74;
    if (!v31)
    {
      v73 = v77;
      v72 = v76;
    }
    v78 = v56 - v70;
    v79 = v57 - v71;
    v80 = (float)(v79 * v79) + (float)(v78 * v78);
    v81 = sqrtf(v80);
    v31 = v80 <= 0.0;
    v82 = v78 / v80;
    v83 = v79 / v80;
    if (!v31)
    {
      v78 = v82;
      v79 = v83;
    }
    v84 = (float)((float)(v60 * v63) - (float)(v72 * v75)) * 0.5;
    v85 = (float)((float)(v61 * v63) - (float)(v73 * v75)) * 0.5;
    v86 = (float)((float)(v67 * v69) - (float)(v79 * v81)) * 0.5;
    v87 = (float)((float)(v66 * v69) - (float)(v78 * v81)) * -0.5;
    v88 = (float)(v85 * v85) + (float)(v84 * v84);
    v89 = sqrtf(v88);
    v31 = v88 <= 0.0;
    v90 = v84 / v88;
    v91 = v85 / v88;
    if (!v31)
    {
      v84 = v90;
      v85 = v91;
    }
    v92 = (float)(v87 * v87) + (float)(v86 * v86);
    v93 = sqrtf(v92);
    v31 = v92 <= 0.0;
    v94 = v86 / v92;
    v95 = v87 / v92;
    if (!v31)
    {
      v86 = v94;
      v87 = v95;
    }
    v96 = (float)((float)(v93 * v86) + (float)(v84 * v89)) * 0.5;
    v97 = (float)((float)(v93 * v87) + (float)(v85 * v89)) * 0.5;
    v98 = (float)(v97 * v97) + (float)(v96 * v96);
    v356 = v53[1];
    if (v98 > 0.0)
    {
      v96 = v96 / v98;
      v97 = v97 / v98;
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v370 = 0;
    v358 = v4;
    sub_1BE76568C(&v376, 4uLL, (uint64_t)__p);
    v99 = (RectangleRegressor *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v100 = v382;
    if (v383 - v382 != 40)
    {
      v101 = 0;
      v361 = ((v356 + v65) * 0.5 + (v360 + v71) * 0.5) * 0.5;
      v364 = ((v56 + v64) * 0.5 + (v363 + v70) * 0.5) * 0.5;
      v102 = sqrtf(v98);
      v103 = v97;
      while (1)
      {
        v105 = (double *)&v100[40 * v101];
        v106 = v105[1];
        v108 = v105[5];
        v107 = v105[6];
        v109 = v108 - *v105;
        v110 = v107 - v106;
        v111 = (float)(v110 * v110) + (float)(v109 * v109);
        if (v111 > 0.0)
        {
          v109 = v109 / v111;
          v110 = v110 / v111;
        }
        if (fabsf(sqrtf(v111) * (float)(v102 * (float)((float)(v97 * v110) + (float)(v96 * v109)))) <= 0.95)
          goto LABEL_69;
        v112 = (*v105 + v108) * 0.5;
        v113 = (v106 + v107) * 0.5;
        v114 = (v112 - v364) * v103 - (v113 - v361) * v96;
        v115 = (double **)v376;
        if (v114 > 0.0)
        {
          v117 = (double *)*((_QWORD *)v376 + 1);
          v116 = *((_QWORD *)v376 + 2);
          if ((unint64_t)v117 < v116)
          {
            *v117 = v112;
            v117[1] = v113;
            v118 = v117 + 2;
LABEL_103:
            v115[1] = v118;
            goto LABEL_69;
          }
          v129 = *(double **)v376;
          v130 = ((uint64_t)v117 - *(_QWORD *)v376) >> 4;
          v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 60)
LABEL_299:
            sub_1BE61F930();
          v132 = v116 - (_QWORD)v129;
          if (v132 >> 3 > v131)
            v131 = v132 >> 3;
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
            v133 = 0xFFFFFFFFFFFFFFFLL;
          else
            v133 = v131;
          if (v133)
          {
            if (v133 >> 60)
LABEL_298:
              sub_1BE61F100();
            v99 = (RectangleRegressor *)operator new(16 * v133);
            v134 = (double *)((char *)v99 + 16 * v130);
            *v134 = v112;
            v134[1] = v113;
            v135 = (uint64_t)v134;
            if (v117 != v129)
              goto LABEL_99;
LABEL_108:
            this = i;
            v137 = (double *)((char *)v99 + 16 * v133);
            v118 = v134 + 2;
            *v115 = (double *)v135;
            v115[1] = v134 + 2;
            v115[2] = v137;
            if (!v117)
              goto LABEL_103;
          }
          else
          {
            v99 = 0;
            v134 = (double *)(16 * v130);
            *v134 = v112;
            v134[1] = v113;
            v135 = 16 * v130;
            if (v117 == v129)
              goto LABEL_108;
LABEL_99:
            this = i;
            do
            {
              *(_OWORD *)(v135 - 16) = *((_OWORD *)v117 - 1);
              v135 -= 16;
              v117 -= 2;
            }
            while (v117 != v129);
            v117 = *v115;
            v136 = (double *)((char *)v99 + 16 * v133);
            v118 = v134 + 2;
            *v115 = (double *)v135;
            v115[1] = v134 + 2;
            v115[2] = v136;
            if (!v117)
              goto LABEL_103;
          }
          operator delete(v117);
          goto LABEL_103;
        }
        v120 = (double *)*((_QWORD *)v376 + 7);
        v119 = *((_QWORD *)v376 + 8);
        if ((unint64_t)v120 < v119)
        {
          *v120 = v112;
          v120[1] = v113;
          v104 = v120 + 2;
        }
        else
        {
          v121 = (double **)((char *)v376 + 48);
          v122 = (double *)*((_QWORD *)v376 + 6);
          v123 = ((char *)v120 - (char *)v122) >> 4;
          v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 60)
            goto LABEL_299;
          v125 = v119 - (_QWORD)v122;
          if (v125 >> 3 > v124)
            v124 = v125 >> 3;
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0)
            v126 = 0xFFFFFFFFFFFFFFFLL;
          else
            v126 = v124;
          if (v126)
          {
            if (v126 >> 60)
              goto LABEL_298;
            v99 = (RectangleRegressor *)operator new(16 * v126);
            v127 = (double *)((char *)v99 + 16 * v123);
            *v127 = v112;
            v127[1] = v113;
            v128 = (uint64_t)v127;
            if (v120 != v122)
            {
LABEL_86:
              this = i;
              do
              {
                *(_OWORD *)(v128 - 16) = *((_OWORD *)v120 - 1);
                v128 -= 16;
                v120 -= 2;
              }
              while (v120 != v122);
              v120 = *v121;
              v104 = v127 + 2;
              v115[6] = (double *)v128;
              v115[7] = v127 + 2;
              v115[8] = (double *)((char *)v99 + 16 * v126);
              if (!v120)
                goto LABEL_68;
LABEL_106:
              operator delete(v120);
              goto LABEL_68;
            }
          }
          else
          {
            v99 = 0;
            v127 = (double *)(16 * v123);
            *v127 = v112;
            v127[1] = v113;
            v128 = 16 * v123;
            if (v120 != v122)
              goto LABEL_86;
          }
          this = i;
          v104 = v127 + 2;
          v115[6] = (double *)v128;
          v115[7] = v127 + 2;
          v115[8] = (double *)((char *)v99 + 16 * v126);
          if (v120)
            goto LABEL_106;
        }
LABEL_68:
        v115[7] = v104;
LABEL_69:
        ++v101;
        v100 = v382;
        if (0xCCCCCCCCCCCCCCCDLL * ((v383 - v382) >> 3) - 1 <= v101)
        {
          if (v383 - v382 == 40)
            break;
          v267 = 0;
          v268 = -v96;
LABEL_236:
          v270 = (double *)&v100[40 * v267];
          v271 = v270[1];
          v273 = v270[5];
          v272 = v270[6];
          v274 = v273 - *v270;
          v275 = v272 - v271;
          v276 = (float)(v275 * v275) + (float)(v274 * v274);
          if (v276 > 0.0)
          {
            v274 = v274 / v276;
            v275 = v275 / v276;
          }
          if (fabsf(sqrtf(v276) * (float)(v102 * (float)((float)(v275 * v268) + (float)(v97 * v274)))) <= 0.95)
            goto LABEL_235;
          v277 = (*v270 + v273) * 0.5;
          v278 = (v271 + v272) * 0.5;
          v279 = (v277 - v364) * v268 - (v278 - v361) * v103;
          v280 = v376;
          if (v279 > 0.0)
          {
            v282 = (double *)*((_QWORD *)v376 + 10);
            v281 = *((_QWORD *)v376 + 11);
            if ((unint64_t)v282 < v281)
            {
              *v282 = v277;
              v282[1] = v278;
              v283 = v282 + 2;
              goto LABEL_270;
            }
            v294 = (double **)((char *)v376 + 72);
            v295 = (double *)*((_QWORD *)v376 + 9);
            v296 = ((char *)v282 - (char *)v295) >> 4;
            v297 = v296 + 1;
            if ((unint64_t)(v296 + 1) >> 60)
LABEL_300:
              sub_1BE61F930();
            v298 = v281 - (_QWORD)v295;
            if (v298 >> 3 > v297)
              v297 = v298 >> 3;
            if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF0)
              v299 = 0xFFFFFFFFFFFFFFFLL;
            else
              v299 = v297;
            if (v299)
            {
              if (v299 >> 60)
LABEL_304:
                sub_1BE61F100();
              v99 = (RectangleRegressor *)operator new(16 * v299);
              v300 = (double *)((char *)v99 + 16 * v296);
              *v300 = v277;
              v300[1] = v278;
              v301 = (uint64_t)v300;
              if (v282 != v295)
              {
LABEL_266:
                v4 = v358;
                do
                {
                  *(_OWORD *)(v301 - 16) = *((_OWORD *)v282 - 1);
                  v301 -= 16;
                  v282 -= 2;
                }
                while (v282 != v295);
                v282 = *v294;
                v283 = v300 + 2;
                v280[9] = v301;
                v280[10] = v300 + 2;
                v280[11] = (char *)v99 + 16 * v299;
                this = i;
                if (v282)
LABEL_269:
                  operator delete(v282);
LABEL_270:
                v280[10] = v283;
LABEL_235:
                ++v267;
                v100 = v382;
                if (-1 - 0x3333333333333333 * ((v383 - v382) >> 3) <= v267)
                  break;
                goto LABEL_236;
              }
            }
            else
            {
              v99 = 0;
              v300 = (double *)(16 * v296);
              *v300 = v277;
              v300[1] = v278;
              v301 = 16 * v296;
              if (v282 != v295)
                goto LABEL_266;
            }
            v4 = v358;
            this = i;
            v283 = v300 + 2;
            v280[9] = v301;
            v280[10] = v300 + 2;
            v280[11] = (char *)v99 + 16 * v299;
            if (v282)
              goto LABEL_269;
            goto LABEL_270;
          }
          v285 = (double *)*((_QWORD *)v376 + 4);
          v284 = *((_QWORD *)v376 + 5);
          if ((unint64_t)v285 < v284)
          {
            *v285 = v277;
            v285[1] = v278;
            v269 = v285 + 2;
            goto LABEL_234;
          }
          v286 = (double **)((char *)v376 + 24);
          v287 = (double *)*((_QWORD *)v376 + 3);
          v288 = ((char *)v285 - (char *)v287) >> 4;
          v289 = v288 + 1;
          if ((unint64_t)(v288 + 1) >> 60)
            goto LABEL_300;
          v290 = v284 - (_QWORD)v287;
          if (v290 >> 3 > v289)
            v289 = v290 >> 3;
          if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF0)
            v291 = 0xFFFFFFFFFFFFFFFLL;
          else
            v291 = v289;
          if (v291)
          {
            if (v291 >> 60)
              goto LABEL_304;
            v99 = (RectangleRegressor *)operator new(16 * v291);
            v292 = (double *)((char *)v99 + 16 * v288);
            *v292 = v277;
            v292[1] = v278;
            v293 = (uint64_t)v292;
            if (v285 != v287)
            {
LABEL_252:
              v4 = v358;
              do
              {
                *(_OWORD *)(v293 - 16) = *((_OWORD *)v285 - 1);
                v293 -= 16;
                v285 -= 2;
              }
              while (v285 != v287);
              v285 = *v286;
              v269 = v292 + 2;
              v280[3] = v293;
              v280[4] = v292 + 2;
              v280[5] = (char *)v99 + 16 * v291;
              this = i;
              if (v285)
LABEL_255:
                operator delete(v285);
LABEL_234:
              v280[4] = v269;
              goto LABEL_235;
            }
          }
          else
          {
            v99 = 0;
            v292 = (double *)(16 * v288);
            *v292 = v277;
            v292[1] = v278;
            v293 = 16 * v288;
            if (v285 != v287)
              goto LABEL_252;
          }
          v4 = v358;
          this = i;
          v269 = v292 + 2;
          v280[3] = v293;
          v280[4] = v292 + 2;
          v280[5] = (char *)v99 + 16 * v291;
          if (v285)
            goto LABEL_255;
          goto LABEL_234;
        }
      }
    }
    v373 = 0;
    v374 = 0;
    v375 = 0;
    v372 = 0.0;
    v170 = *((_QWORD *)v376 + 1) - *(_QWORD *)v376 > 0x10uLL;
    v171 = 0xFFFFFFFFLL;
    if (*((_QWORD *)v376 + 1) - *(_QWORD *)v376 <= 0x10uLL)
      v171 = 0;
    v172 = *((_QWORD *)v376 + 7) - *((_QWORD *)v376 + 6);
    if (*((_QWORD *)v376 + 4) - *((_QWORD *)v376 + 3) <= 0x10uLL)
    {
      v173 = 1;
    }
    else
    {
      ++v170;
      v173 = v171;
    }
    v174 = *((_QWORD *)v376 + 10) - *((_QWORD *)v376 + 9);
    if (v172 <= 0x10)
      v175 = v170;
    else
      v175 = v170 + 1;
    if (v172 <= 0x10)
      v176 = 2;
    else
      v176 = v173;
    if (v174 > 0x10)
      ++v175;
    if (v175 >= 3)
    {
      v184 = (char *)operator new(0x10uLL);
      *(_QWORD *)v184 = 0;
      *((_QWORD *)v184 + 1) = 0;
      v362 = v184;
      v185 = operator new(0x10uLL);
      v186 = 0;
      *v185 = 0;
      v185[1] = 0;
      v365 = v185;
      if (v174 <= 0x10)
        v187 = 3;
      else
        v187 = v176;
      v188 = &v53[5 * v187];
      v189 = &v53[5 * ((v187 + 1) & 3)];
      do
      {
        if (v186 == v187)
        {
          v194 = v189[1];
          v195 = (*v188 + *v189) * 0.5;
          v196 = (v188[1] + v194) * 0.5;
          v197 = *v189 - v195;
          v198 = v194 - v196;
          v199 = (float)(v198 * v198) + (float)(v197 * v197);
          v200 = sqrtf(v199);
          if (v199 > 0.0)
            v201 = v198 / v199;
          else
            v201 = v194 - v196;
          if (v199 > 0.0)
            v202 = v197 / v199;
          else
            v202 = *v189 - v195;
          v203 = v374;
          if (v374 < (double *)v375)
          {
            *v374 = v195;
            v203[1] = v196;
            *((_BYTE *)v203 + 16) = 1;
            *((float *)v203 + 5) = v202;
            *((float *)v203 + 6) = v201;
            v190 = (char *)(v203 + 5);
            *((float *)v203 + 7) = v199;
            *((float *)v203 + 8) = v200;
          }
          else
          {
            v204 = (double *)v373;
            v205 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v374 - (_BYTE *)v373) >> 3);
            v206 = v205 + 1;
            if (v205 + 1 > 0x666666666666666)
              sub_1BE61F930();
            if (0x999999999999999ALL * ((v375 - (_BYTE *)v373) >> 3) > v206)
              v206 = 0x999999999999999ALL * ((v375 - (_BYTE *)v373) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((v375 - (_BYTE *)v373) >> 3) >= 0x333333333333333)
              v207 = 0x666666666666666;
            else
              v207 = v206;
            if (v207)
            {
              if (v207 > 0x666666666666666)
                sub_1BE61F100();
              v208 = (char *)operator new(40 * v207);
            }
            else
            {
              v208 = 0;
            }
            v223 = (double *)&v208[40 * v205];
            *v223 = v195;
            v223[1] = v196;
            *((_BYTE *)v223 + 16) = 1;
            *((float *)v223 + 5) = v202;
            *((float *)v223 + 6) = v201;
            *((float *)v223 + 7) = v199;
            *((float *)v223 + 8) = v200;
            v224 = v223;
            if (v203 != v204)
            {
              do
              {
                v225 = *(_OWORD *)(v203 - 5);
                v226 = *(_OWORD *)(v203 - 3);
                *((_DWORD *)v224 - 2) = *((_DWORD *)v203 - 2);
                *(_OWORD *)(v224 - 3) = v226;
                *(_OWORD *)(v224 - 5) = v225;
                v224 -= 5;
                v203 -= 5;
              }
              while (v203 != v204);
              v203 = v204;
            }
            v190 = (char *)(v223 + 5);
            v373 = v224;
            v374 = v223 + 5;
            v375 = &v208[40 * v207];
            if (v203)
              operator delete(v203);
          }
          v374 = (double *)v190;
          v191 = v187;
          v365[v191] = 0;
          v192 = *v188 - *v189;
          v193 = v188[1] - v189[1];
          *(float *)&v184[v191 * 4] = sqrtf((float)(v193 * v193) + (float)(v192 * v192));
        }
        else
        {
          v209 = (char *)v376 + 24 * v186;
          v367 = 0;
          v368 = 0;
          v366 = 0;
          v211 = *(_BYTE **)v209;
          v210 = (_BYTE *)*((_QWORD *)v209 + 1);
          v212 = v210 - v211;
          if (v210 == v211)
          {
            v213 = 0;
          }
          else
          {
            if (v212 < 0)
              sub_1BE61F930();
            v213 = (char *)operator new(v210 - v211);
            v366 = v213;
            v368 = &v213[16 * (v212 >> 4)];
            memcpy(v213, v211, v212);
            v367 = &v213[16 * (v212 >> 4)];
          }
          v214 = (RectangleRegressor *)sub_1BE8C4570((uint64_t)__p, (uint64_t)&v366, &v372);
          v215 = v374;
          if (v374 >= (double *)v375)
          {
            v219 = (double *)v373;
            v220 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v374 - (_BYTE *)v373) >> 3);
            v221 = v220 + 1;
            if (v220 + 1 > 0x666666666666666)
              sub_1BE61F930();
            if (0x999999999999999ALL * ((v375 - (_BYTE *)v373) >> 3) > v221)
              v221 = 0x999999999999999ALL * ((v375 - (_BYTE *)v373) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((v375 - (_BYTE *)v373) >> 3) >= 0x333333333333333)
              v222 = 0x666666666666666;
            else
              v222 = v221;
            if (v222)
            {
              if (v222 > 0x666666666666666)
                sub_1BE61F100();
              v214 = (RectangleRegressor *)operator new(40 * v222);
            }
            else
            {
              v214 = 0;
            }
            v227 = (char *)v214 + 40 * v220;
            v228 = v370;
            *(_OWORD *)v227 = *(_OWORD *)__p;
            *((_OWORD *)v227 + 1) = v228;
            *((_QWORD *)v227 + 4) = v371;
            v229 = v227;
            if (v215 != v219)
            {
              do
              {
                v230 = *(_OWORD *)(v215 - 5);
                v231 = *(_OWORD *)(v215 - 3);
                *((_DWORD *)v229 - 2) = *((_DWORD *)v215 - 2);
                *(_OWORD *)(v229 - 24) = v231;
                *(_OWORD *)(v229 - 40) = v230;
                v229 -= 40;
                v215 -= 5;
              }
              while (v215 != v219);
              v215 = v219;
            }
            v218 = (double *)(v227 + 40);
            v373 = v229;
            v374 = (double *)(v227 + 40);
            v375 = (char *)v214 + 40 * v222;
            if (v215)
              operator delete(v215);
          }
          else
          {
            v216 = *(_OWORD *)__p;
            v217 = v370;
            *((_QWORD *)v374 + 4) = v371;
            *(_OWORD *)v215 = v216;
            *((_OWORD *)v215 + 1) = v217;
            v218 = v215 + 5;
          }
          v374 = v218;
          if (v213)
          {
            v367 = v213;
            operator delete(v213);
          }
          *(float *)&v365[v186] = (float)(fabsf(v372) * 2.0) + -1.0;
          v232 = (char *)v373;
          v233 = (char *)v376 + 24 * v186;
          v235 = *(_BYTE **)v233;
          v234 = (_BYTE *)*((_QWORD *)v233 + 1);
          v236 = v234 - v235;
          if (v234 == v235)
          {
            v237 = 0;
            v239 = 0.0;
            v184 = v362;
          }
          else
          {
            if (v236 < 0)
              sub_1BE61F930();
            v237 = (double *)operator new(v234 - v235);
            v238 = &v237[2 * (v236 >> 4)];
            v214 = (RectangleRegressor *)memcpy(v237, v235, v236);
            v239 = 0.0;
            v184 = v362;
            if ((unint64_t)((char *)v238 - (char *)v237) >= 0x20)
            {
              v240 = (double *)&v232[40 * v186];
              v241 = *v240;
              v242 = v240[1];
              v243 = *((float *)v240 + 5);
              v244 = *((float *)v240 + 6);
              v245 = *((float *)v240 + 8);
              v246 = ((v237[1] - v242) * v244 + (*v237 - *v240) * v243) * v245;
              v247 = v246;
              for (j = v237; j != v238; v246 = fmaxf(*(float *)&v249, v246))
              {
                v249 = *j;
                v250 = j[1];
                j += 2;
                *(float *)&v249 = ((v250 - v242) * v244 + (v249 - v241) * v243) * v245;
                v247 = fminf(*(float *)&v249, v247);
              }
              v239 = v246 - v247;
            }
          }
          *(float *)&v184[4 * v186] = v239;
          if (v237)
          {
            operator delete(v237);
            v239 = *(float *)&v184[4 * v186];
          }
          if (v239 <= 0.0)
          {
            v4 = v358;
            v251 = RectangleRegressor::provideAnAnswer(v214, v358);
            v252 = v365;
            goto LABEL_292;
          }
        }
        ++v186;
      }
      while (v186 != 4);
      v252 = v365;
      std::__sort<std::__less<float,float> &,float *>();
      v257 = *((_QWORD *)i + 2);
      *(_DWORD *)v257 = *v365;
      v258 = v373;
      v259 = fabsf(*((float *)v373 + 18)* (float)(*((float *)v373 + 8)* (float)((float)(*((float *)v373 + 6) * *((float *)v373 + 16))+ (float)(*((float *)v373 + 5) * *((float *)v373 + 15)))))* -2.0+ 1.0;
      *(float *)(v257 + 16) = v259;
      *(_DWORD *)(v257 + 4) = v365[1];
      v260 = fabsf(*((float *)v258 + 28)* (float)(*((float *)v258 + 18)* (float)((float)(*((float *)v258 + 16) * *((float *)v258 + 26))+ (float)(*((float *)v258 + 15) * *((float *)v258 + 25)))))* -2.0+ 1.0;
      *(float *)(v257 + 20) = v260;
      *(_DWORD *)(v257 + 8) = v365[2];
      v261 = fabsf(*((float *)v258 + 38)* (float)(*((float *)v258 + 28)* (float)((float)(*((float *)v258 + 26) * *((float *)v258 + 36))+ (float)(*((float *)v258 + 25) * *((float *)v258 + 35)))))* -2.0+ 1.0;
      *(float *)(v257 + 24) = v261;
      *(_DWORD *)(v257 + 12) = v365[3];
      v262 = fabsf(*((float *)v258 + 8)* (float)(*((float *)v258 + 38)* (float)((float)(*((float *)v258 + 36) * *((float *)v258 + 6))+ (float)(*((float *)v258 + 35) * *((float *)v258 + 5)))))* -2.0+ 1.0;
      *(float *)(v257 + 28) = v262;
      v263 = fabsf(*((float *)v258 + 28)* (float)(*((float *)v258 + 8)* (float)((float)(*((float *)v258 + 6) * *((float *)v258 + 26))+ (float)(*((float *)v258 + 5) * *((float *)v258 + 25)))))* 2.0+ -1.0;
      *(float *)(v257 + 32) = v263;
      v264 = *(float *)v184;
      v265 = *((float *)v184 + 2);
      v4 = v358;
      if (*(float *)v184 >= v265)
        v266 = v265 / v264;
      else
        v266 = v264 / v265;
      v302 = v266 * 2.0 + -1.0;
      *(float *)(v257 + 40) = v302;
      v303 = fabsf(*((float *)v258 + 38)* (float)(*((float *)v258 + 18)* (float)((float)(*((float *)v258 + 16) * *((float *)v258 + 36))+ (float)(*((float *)v258 + 15) * *((float *)v258 + 35)))))* 2.0+ -1.0;
      *(float *)(v257 + 36) = v303;
      v304 = *((float *)v184 + 1);
      v305 = *((float *)v184 + 3);
      if (v304 >= v305)
        v306 = v305 / v304;
      else
        v306 = v304 / v305;
      v372 = v306;
      v307 = v306 * 2.0 + -1.0;
      *(float *)(v257 + 44) = v307;
      v308 = *((float *)v258 + 15);
      v309 = *((float *)v258 + 16);
      *((float *)v258 + 15) = v309;
      *((float *)v258 + 16) = -v308;
      v310 = *((float *)v258 + 35);
      v311 = *((float *)v258 + 36);
      *((float *)v258 + 35) = v311;
      *((float *)v258 + 36) = -v310;
      v312 = *((float *)v258 + 5);
      v313 = *((float *)v258 + 6);
      v314 = *(float *)v184 * v312;
      v357 = *(float *)v184;
      v315 = *(float *)v184 * v313;
      if ((float)((float)(v312 * v309) - (float)(v308 * v313)) >= 0.0)
      {
        v308 = -v308;
      }
      else
      {
        v309 = -v309;
        *((float *)v258 + 15) = v309;
        *((float *)v258 + 16) = v308;
      }
      v316 = *((float *)v184 + 1);
      v317 = v309 * v316;
      v355 = v316;
      v318 = v308 * v316;
      v319 = *((float *)v258 + 18);
      v320 = v314 + (float)(v317 * v319);
      v321 = v315 + (float)(v318 * v319);
      v323 = *((float *)v258 + 25);
      v322 = *((float *)v258 + 26);
      if ((float)((float)(v313 * v322) + (float)(v312 * v323)) < 0.0)
      {
        v323 = -v323;
        v322 = -v322;
        *((float *)v258 + 25) = v323;
        *((float *)v258 + 26) = v322;
      }
      v324 = *((float *)v184 + 2);
      v325 = v324;
      v326 = v323 * v324;
      v327 = v322 * v324;
      v328 = *((float *)v258 + 28);
      if ((float)((float)(v313 * (float)-v310) + (float)(v312 * v311)) >= 0.0)
      {
        v329 = v325;
        v310 = -v310;
      }
      else
      {
        v311 = -v311;
        *((float *)v258 + 35) = v311;
        *((float *)v258 + 36) = v310;
        v329 = *((float *)v184 + 2);
      }
      v330 = *((float *)v184 + 3);
      v331 = *((float *)v258 + 38);
      v332 = v330;
      v333 = *(float *)v184 + 0.0 + *((float *)v184 + 1) + v329 + v330;
      v334 = (float)((float)(v320 + (float)(v326 * v328)) + (float)((float)(v311 * v330) * v331)) / v333;
      v335 = (float)((float)(v321 + (float)(v327 * v328)) + (float)((float)(v310 * v330) * v331)) / v333;
      v336 = (float)(v335 * v335) + (float)(v334 * v334);
      v354 = v325;
      if (v336 > 0.0)
      {
        v334 = v334 / v336;
        v335 = v335 / v336;
      }
      v337 = *(double *)v258;
      v349 = *((double *)v258 + 6);
      v350 = *((double *)v258 + 5);
      v352 = *((double *)v258 + 10);
      v353 = *((double *)v258 + 1);
      v351 = *((double *)v258 + 11);
      v339 = *((double *)v258 + 15);
      v338 = *((double *)v258 + 16);
      v251 = operator new();
      v340 = v337;
      v341 = v333;
      v342 = (v337 * v357 + v350 * v355 + v352 * v354 + v339 * v332) / v333;
      v343 = (v353 * v357 + v349 * v355 + v351 * v354 + v338 * v332) / v341;
      v344 = sqrtf(v336);
      v345 = ((v338 - v343) * v335 + (v339 - v342) * v334) * v344;
      *(float *)&v338 = ((v349 - v343) * v335 + (v350 - v342) * v334) * v344;
      *(float *)&v339 = ((v352 - v342) * v335 - (v351 - v343) * v334) * v344;
      v346 = ((v340 - v342) * v335 - (v353 - v343) * v334) * v344;
      v347 = (float)(atan2f(v335, v334) * 180.0) / 3.14159265 + 360.0;
      v348 = fmodf(v347, 360.0);
      *(_QWORD *)v251 = &off_1E77F06B0;
      *(double *)(v251 + 16) = v342;
      *(double *)(v251 + 24) = v343;
      *(double *)(v251 + 32) = (float)(fabsf(*(float *)&v338) + fabsf(v345));
      *(double *)(v251 + 40) = (float)(fabsf(*(float *)&v339) + fabsf(v346));
      *(double *)(v251 + 48) = v348;
LABEL_292:
      *((_QWORD *)i + 3) = v251;
      operator delete(v252);
      operator delete(v184);
      v177 = (double *)v373;
      if (!v373)
        goto LABEL_147;
    }
    else
    {
      *((_QWORD *)this + 3) = RectangleRegressor::provideAnAnswer(v99, v4);
      v177 = (double *)v373;
      if (!v373)
        goto LABEL_147;
    }
    v374 = v177;
    operator delete(v177);
LABEL_147:
    v178 = (char *)v376;
    if (v376)
    {
      v179 = v377;
      v180 = v376;
      if (v377 != v376)
      {
        v181 = v377;
        do
        {
          v183 = (void *)*((_QWORD *)v181 - 3);
          v181 -= 24;
          v182 = v183;
          if (v183)
          {
            *((_QWORD *)v179 - 2) = v182;
            operator delete(v182);
          }
          v179 = v181;
        }
        while (v181 != v178);
        v180 = v376;
      }
      v377 = v178;
      operator delete(v180);
    }
    goto LABEL_225;
  }
  *((_QWORD *)this + 3) = RectangleRegressor::provideAnAnswer(v54, v4);
LABEL_225:
  if (v53)
    operator delete(v53);
LABEL_227:
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }

}

void sub_1BE7D6024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  uint64_t v38;
  void *v40;

  operator delete(__p);
  operator delete(a20);
  if (a34)
    operator delete(a34);
  sub_1BE63CEBC(&a37);
  if (v37)
    operator delete(v37);
  v40 = *(void **)(v38 - 176);
  if (v40)
  {
    *(_QWORD *)(v38 - 168) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

uint64_t RectangleRegressor::provideAnAnswer(RectangleRegressor *this, CHDrawing *a2)
{
  CHDrawing *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t j;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float *v24;
  float v25;
  float *v26;
  float *v27;
  float v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  float **v32;
  float **v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float **v40;
  float *v41;
  float *v42;
  float **v43;
  float **v44;
  float *v45;
  float *v46;
  float **v47;
  float *v49;
  float **v50;
  unint64_t v51;
  float *v52;
  float **v53;
  unint64_t v54;
  char v55;

  v2 = a2;
  v3 = 0;
  v52 = (float *)&v52;
  v53 = &v52;
  v54 = 0;
  v49 = (float *)&v49;
  v50 = &v49;
  v51 = 0;
  for (i = objc_msgSend_strokeCount(v2, v4, v5, v6, v7, v8);
        i > v3;
        i = objc_msgSend_strokeCount(v2, v15, v16, v17, v18, v19))
  {
    for (j = 0; objc_msgSend_pointCountForStrokeIndex_(v2, v10, v3, v11, v12, v13) > j; ++j)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v2, v15, v3, j, v18, v19);
      v21 = v20;
      v23 = v22;
      v24 = (float *)operator new(0x18uLL);
      v25 = v21;
      v24[4] = v25;
      v26 = v52;
      *(_QWORD *)v24 = v52;
      *((_QWORD *)v24 + 1) = &v52;
      *((_QWORD *)v26 + 1) = v24;
      v52 = v24;
      ++v54;
      v27 = (float *)operator new(0x18uLL);
      v28 = v23;
      v27[4] = v28;
      v29 = v49;
      *(_QWORD *)v27 = v49;
      *((_QWORD *)v27 + 1) = &v49;
      *((_QWORD *)v29 + 1) = v27;
      v49 = v27;
      ++v51;
    }
    ++v3;
  }
  sub_1BE765818((uint64_t)v53, (uint64_t)&v52, v54, (uint64_t)&v55);
  sub_1BE765818((uint64_t)v50, (uint64_t)&v49, v51, (uint64_t)&v55);
  v30 = (uint64_t)v50;
  v31 = (uint64_t)v53;
  if (v54 >= 0xA)
  {
    v34 = v54 / 0xA;
    v33 = &v52;
    v32 = &v49;
    do
    {
      v31 = *(_QWORD *)(v31 + 8);
      v30 = *(_QWORD *)(v30 + 8);
      v33 = (float **)*v33;
      v32 = (float **)*v32;
      --v34;
    }
    while (v34);
  }
  else
  {
    v32 = &v49;
    v33 = &v52;
  }
  v35 = *(float *)(v31 + 16);
  v36 = *(float *)(v30 + 16);
  v37 = (*v33)[4];
  v38 = (*v32)[4];
  v39 = operator new();
  *(_QWORD *)v39 = &off_1E77F06B0;
  *(double *)(v39 + 16) = (float)((float)(v35 + v37) * 0.5);
  *(double *)(v39 + 24) = (float)((float)(v36 + v38) * 0.5);
  *(double *)(v39 + 32) = (float)(v37 - v35);
  *(double *)(v39 + 40) = (float)(v38 - v36);
  *(_QWORD *)(v39 + 48) = 0;
  if (v51)
  {
    v41 = v49;
    v40 = v50;
    v42 = *v50;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v49 + 1);
    **((_QWORD **)v41 + 1) = v42;
    v51 = 0;
    if (v40 != &v49)
    {
      do
      {
        v43 = (float **)v40[1];
        operator delete(v40);
        v40 = v43;
      }
      while (v43 != &v49);
    }
  }
  if (v54)
  {
    v45 = v52;
    v44 = v53;
    v46 = *v53;
    *((_QWORD *)v46 + 1) = *((_QWORD *)v52 + 1);
    **((_QWORD **)v45 + 1) = v46;
    v54 = 0;
    if (v44 != &v52)
    {
      do
      {
        v47 = (float **)v44[1];
        operator delete(v44);
        v44 = v47;
      }
      while (v47 != &v52);
    }
  }

  return v39;
}

void sub_1BE7D63E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1BE76551C((uint64_t *)va);
  sub_1BE76551C((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void *RectangleRegressor::writeFeatures(const void **this, float **a2)
{
  void *result;

  result = memcpy(*a2, this[2], 4 * *((int *)this + 2));
  *a2 += *((int *)this + 2);
  return result;
}

void sub_1BE7D6464(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "CHRectangle");
}

void sub_1BE7D64DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHPrefixQueryItem;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE7D66BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D67EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D67FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *sub_1BE7D680C(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  objc_super v23;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)CHPrefixQuery;
    a1 = (id *)objc_msgSendSuper2(&v23, sel_initWithRecognitionSession_, v9);
    if (a1)
    {
      v18 = objc_msgSend_copy(v10, v13, v14, v15, v16, v17);
      v19 = a1[12];
      a1[12] = (id)v18;

      sub_1BE7D6AA8(a1, v11);
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = a1[10];
      a1[10] = (id)v20;

      objc_storeStrong(a1 + 11, a5);
    }
  }

  return a1;
}

void sub_1BE7D6914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7D69C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D69E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D6A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D6A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE7D6AA8(id a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, void *);
  void *v30;
  id v31;
  id v32;

  v3 = a2;
  v9 = v3;
  if (a1)
  {
    if (objc_msgSend_count(v3, v4, v5, v6, v7, v8))
    {
      objc_msgSend_set(MEMORY[0x1E0C99E20], v10, v11, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = MEMORY[0x1E0C809B0];
      v28 = 3221225472;
      v29 = sub_1BE7D6EF8;
      v30 = &unk_1E77F5348;
      v16 = v15;
      v31 = v16;
      v32 = a1;
      objc_msgSend_enumerateObjectsUsingBlock_(v9, v17, (uint64_t)&v27, v18, v19, v20);
      a1 = (id)objc_msgSend_copy(v16, v21, v22, v23, v24, v25, v27, v28, v29, v30);

    }
    else
    {
      a1 = v9;
    }
  }

  return a1;
}

void sub_1BE7D6B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7D6B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D6B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D6ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D6EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D6EF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = v3;
  v14 = v6;
  if (v5)
  {
    objc_msgSend_stringByFoldingWithOptions_locale_(v6, v7, 385, 0, v8, v9);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend_addObject_(v4, v10, (uint64_t)v5, v11, v12, v13);
}

void sub_1BE7D6F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D6F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D71FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7D7254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D726C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7D7288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7D72A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D72B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D72C8(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int hasPrefix;
  id v22;

  v22 = a2;
  v5 = *(void **)(a1 + 32);
  v11 = objc_msgSend_length(*(void **)(a1 + 40), v6, v7, v8, v9, v10);
  objc_msgSend_substringFromIndex_(v5, v12, v11, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  hasPrefix = objc_msgSend_hasPrefix_(v22, v17, (uint64_t)v16, v18, v19, v20);

  if (hasPrefix)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    *a3 = 1;
  }

}

void sub_1BE7D734C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D7364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE7D7378(void **a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const CGPath *v63;
  _QWORD *v64;
  CGPath *Mutable;
  CHPrefixQueryItem *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v100;
  id v101;
  void *v102;
  _QWORD v103[4];
  id v104;
  _QWORD v105[4];
  id v106;
  id v107;
  id v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char v113;
  objc_super v114;

  v7 = a2;
  v8 = a3;
  v100 = v8;
  v101 = a4;
  if (a1)
  {
    sub_1BE7D7858((uint64_t)a1, v7);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = 0;
    v111 = &v110;
    v112 = 0x2020000000;
    v113 = 1;
    v9 = (void *)MEMORY[0x1E0C99DE8];
    v15 = objc_msgSend_count(v7, v10, v11, v12, v13, v14);
    objc_msgSend_arrayWithCapacity_(v9, v16, v15, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v105[0] = MEMORY[0x1E0C809B0];
    v105[1] = 3221225472;
    v105[2] = sub_1BE7D7948;
    v105[3] = &unk_1E77F5398;
    v106 = v8;
    v27 = v20;
    v107 = v27;
    v28 = v26;
    v108 = v28;
    v109 = &v110;
    objc_msgSend_enumerateObjectsUsingBlock_(v7, v29, (uint64_t)v105, v30, v31, v32);
    objc_msgSend_recognitionSession(a1, v33, v34, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_latestStrokeProvider(v38, v39, v40, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v45, (uint64_t)v28, (uint64_t)v44, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v48)
    {
      v64 = 0;
LABEL_21:

      _Block_object_dispose(&v110, 8);
      goto LABEL_22;
    }
    if (*((_BYTE *)v111 + 24))
    {
      objc_msgSend_recognitionSession(a1, v49, v50, v51, v52, v53, v20, v100);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_latestStrokeProvider(v54, v55, v56, v57, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v61, (uint64_t)v7, (uint64_t)v27, (uint64_t)v60, v62);

    }
    else
    {
      v63 = (const CGPath *)objc_msgSend_newEstimatedBaselineForStrokesWithTokens_tokenStrokeIdentifiers_(v101, v49, (uint64_t)v7, (uint64_t)v27, v52, v53, v20, v100);
    }
    Mutable = CGPathCreateMutable();
    CGPathAddPath(Mutable, 0, v63);
    if (v63)
      CGPathRelease(v63);
    v66 = [CHPrefixQueryItem alloc];
    objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v67, (uint64_t)v48, v68, v69, v70);
    v71 = (id)objc_claimAutoreleasedReturnValue();
    v72 = v102;
    v73 = v72;
    if (v66)
    {
      v114.receiver = v66;
      v114.super_class = (Class)CHPrefixQueryItem;
      v64 = objc_msgSendSuper2(&v114, sel_init);
      if (v64)
      {
        v79 = objc_msgSend_copy(v71, v74, v75, v76, v77, v78);
        v80 = (void *)v64[1];
        v64[1] = v79;

        v86 = objc_msgSend_copy(v73, v81, v82, v83, v84, v85);
        v87 = (void *)v64[2];
        v64[2] = v86;

        v64[3] = CGPathRetain(Mutable);
      }

      if (*((_BYTE *)v111 + 24))
      {
LABEL_13:
        if (!Mutable)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    else
    {
      v64 = 0;

      if (*((_BYTE *)v111 + 24))
        goto LABEL_13;
    }
    v88 = a1[9];
    v103[0] = MEMORY[0x1E0C809B0];
    v103[1] = 3221225472;
    v103[2] = sub_1BE7D7B78;
    v103[3] = &unk_1E77F53C0;
    v64 = v64;
    v104 = v64;
    v94 = objc_msgSend_indexOfObjectPassingTest_(v88, v89, (uint64_t)v103, v90, v91, v92);
    if (v94 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_objectAtIndexedSubscript_(a1[9], v93, v94, v95, v96, v97);
      v98 = objc_claimAutoreleasedReturnValue();

      v64 = (_QWORD *)v98;
    }

    if (!Mutable)
      goto LABEL_21;
LABEL_20:
    CGPathRelease(Mutable);
    goto LABEL_21;
  }
  v64 = 0;
LABEL_22:

  return v64;
}

void sub_1BE7D7758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id sub_1BE7D7858(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[4];
  id v22;

  v8 = a2;
  if (a1)
  {
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v3, v4, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = sub_1BE7D7D68;
    v21[3] = &unk_1E77F53E8;
    v10 = v9;
    v22 = v10;
    objc_msgSend_enumerateObjectsUsingBlock_(v8, v11, (uint64_t)v21, v12, v13, v14);
    objc_msgSend_stringWithString_(MEMORY[0x1E0CB3940], v15, (uint64_t)v10, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_1BE7D7918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE7D7938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D7948(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  _QWORD v47[4];
  id v48;
  id v49;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99DE8];
  v46 = v3;
  objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
  objc_msgSend_arrayWithCapacity_(v4, v17, v16, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeIndexes(v46, v22, v23, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = sub_1BE7D7AF4;
  v47[3] = &unk_1E77F3DD0;
  v28 = v21;
  v48 = v28;
  v49 = *(id *)(a1 + 32);
  objc_msgSend_enumerateIndexesUsingBlock_(v27, v29, (uint64_t)v47, v30, v31, v32);

  objc_msgSend_addObject_(*(void **)(a1 + 40), v33, (uint64_t)v28, v34, v35, v36);
  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 48), v37, (uint64_t)v28, v38, v39, v40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) |= objc_msgSend_hasValidPrincipalLines(v46, v41, v42, v43, v44, v45);

}

void sub_1BE7D7A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE7D7A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D7AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D7AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D7ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE7D7AF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v7 = *(void **)(a1 + 32);
  objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v17, v8, (uint64_t)a2, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v7, v13, (uint64_t)v12, v14, v15, v16);

}

void sub_1BE7D7B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D7B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D7B78(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t isEqualToString;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int isEqual;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(a1 + 32);
  v3 = a2;
  isEqualToString = 0;
  if (v3 && v2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v10 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        v40 = 138412290;
        v41 = v3;
        _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_FAULT, "item should be of class CHPrefixQueryItem: %@", (uint8_t *)&v40, 0xCu);
      }

    }
    if (v2 == v3)
    {
      isEqualToString = 1;
    }
    else
    {
      objc_msgSend_strokeIdentifiers(v3, v5, v6, v7, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeIdentifiers(v2, v12, v13, v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      isEqual = objc_msgSend_isEqual_(v11, v18, (uint64_t)v17, v19, v20, v21);

      if (isEqual)
      {
        objc_msgSend_queryResult(v3, v23, v24, v25, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_queryResult(v2, v29, v30, v31, v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v28, v35, (uint64_t)v34, v36, v37, v38);

      }
      else
      {
        isEqualToString = 0;
      }
    }
  }

  return isEqualToString;
}

void sub_1BE7D7D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D7D68(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v16 = a2;
  if (a3 && (objc_msgSend_properties(v16, v5, v6, v7, v8, v9) & 0x20) != 0)
    objc_msgSend_appendString_(*(void **)(a1 + 32), v5, (uint64_t)CFSTR(" "), v7, v8, v9);
  v10 = *(void **)(a1 + 32);
  objc_msgSend_string(v16, v5, v6, v7, v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v10, v12, (uint64_t)v11, v13, v14, v15);

}

void sub_1BE7D7DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7D7DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D8244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D838C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char isTokenStringMatchingQuery_allowPartialMatching;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;

  v42 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v42, v4, v5, v6);
  sub_1BE7D7858(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  isTokenStringMatchingQuery_allowPartialMatching = objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(*(void **)(a1 + 40), v8, (uint64_t)v7, 1, v9, v10);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    v17 = isTokenStringMatchingQuery_allowPartialMatching;
  else
    v17 = 1;
  if ((v17 & 1) == 0)
  {
    objc_msgSend_removeLastObject(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    sub_1BE7D7858(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(*(void **)(a1 + 40), v20, (uint64_t)v19, 0, v21, v22))
    {
      sub_1BE7D7378(*(void ***)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32)
        objc_msgSend_addObject_(*(void **)(a1 + 64), v28, (uint64_t)v32, v29, v30, v31);

    }
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v33, (uint64_t)v42, v34, v35, v36);
    sub_1BE7D7858(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    v41 = objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(*(void **)(a1 + 40), v38, (uint64_t)v37, 1, v39, v40);
    if ((v41 & 1) != 0)
      goto LABEL_6;
LABEL_12:
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    v18 = 0;
    goto LABEL_13;
  }
  if ((isTokenStringMatchingQuery_allowPartialMatching & 1) == 0)
    goto LABEL_12;
LABEL_6:
  v18 = 1;
LABEL_13:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v18;

}

void sub_1BE7D84D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE7D84F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE7D856C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_string(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(v4, v11, (uint64_t)v10, 0, v12, v13);

  if ((_DWORD)v4)
  {
    v17 = *(void ***)(a1 + 32);
    v24[0] = v3;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v14, (uint64_t)v24, 1, v15, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE7D7378(v17, v18, *(void **)(a1 + 40), *(void **)(a1 + 48));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
      objc_msgSend_addObject_(*(void **)(a1 + 56), v20, (uint64_t)v19, v21, v22, v23);

  }
}

void sub_1BE7D8650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7D8758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE7D8778(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE7D8788(uint64_t a1)
{

}

void sub_1BE7D8790(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 72));
}

void sub_1BE7D8874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7D8894(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 80));
}

void sub_1BE7D8948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D8958(uint64_t a1)
{
  id v2;
  id *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id obj;

  sub_1BE7D6AA8(*(id *)(a1 + 32), *(void **)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(*(_QWORD *)(a1 + 32) + 80);
  obj = v2;
  if (*v3 != v2)
  {
    objc_storeStrong(v3, v2);
    objc_msgSend_q_setNeedsQueryResultUpdating(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  }

}

void sub_1BE7D89C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7D8A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7D8A60()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  const char *v268;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286;
  uint64_t v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  uint64_t v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  const char *v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  const char *v361;
  uint64_t v362;
  uint64_t v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  const char *v373;
  uint64_t v374;
  uint64_t v375;
  const char *v376;
  uint64_t v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  uint64_t v386;
  uint64_t v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  const char *v394;
  uint64_t v395;
  uint64_t v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  const char *v400;
  uint64_t v401;
  uint64_t v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  const char *v412;
  uint64_t v413;
  uint64_t v414;
  const char *v415;
  uint64_t v416;
  uint64_t v417;
  const char *v418;
  uint64_t v419;
  uint64_t v420;
  const char *v421;
  uint64_t v422;
  uint64_t v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  const char *v430;
  uint64_t v431;
  uint64_t v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  const char *v436;
  uint64_t v437;
  uint64_t v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  const char *v442;
  uint64_t v443;
  uint64_t v444;
  const char *v445;
  uint64_t v446;
  uint64_t v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  const char *v451;
  uint64_t v452;
  uint64_t v453;
  const char *v454;
  uint64_t v455;
  uint64_t v456;
  const char *v457;
  uint64_t v458;
  uint64_t v459;
  const char *v460;
  uint64_t v461;
  uint64_t v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  const char *v466;
  uint64_t v467;
  uint64_t v468;
  const char *v469;
  uint64_t v470;
  uint64_t v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  const char *v484;
  uint64_t v485;
  uint64_t v486;
  const char *v487;
  uint64_t v488;
  uint64_t v489;
  const char *v490;
  uint64_t v491;
  uint64_t v492;
  const char *v493;
  uint64_t v494;
  uint64_t v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  const char *v502;
  uint64_t v503;
  uint64_t v504;
  const char *v505;
  uint64_t v506;
  uint64_t v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  const char *v511;
  uint64_t v512;
  uint64_t v513;
  const char *v514;
  uint64_t v515;
  uint64_t v516;
  const char *v517;
  uint64_t v518;
  uint64_t v519;
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  const char *v526;
  uint64_t v527;
  uint64_t v528;
  const char *v529;
  uint64_t v530;
  uint64_t v531;
  const char *v532;
  uint64_t v533;
  uint64_t v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  const char *v538;
  uint64_t v539;
  uint64_t v540;
  const char *v541;
  uint64_t v542;
  uint64_t v543;
  const char *v544;
  uint64_t v545;
  uint64_t v546;
  const char *v547;
  uint64_t v548;
  uint64_t v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  const char *v553;
  uint64_t v554;
  uint64_t v555;
  const char *v556;
  uint64_t v557;
  uint64_t v558;
  const char *v559;
  uint64_t v560;
  uint64_t v561;
  const char *v562;
  uint64_t v563;
  uint64_t v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  const char *v568;
  uint64_t v569;
  uint64_t v570;
  const char *v571;
  uint64_t v572;
  uint64_t v573;
  const char *v574;
  uint64_t v575;
  uint64_t v576;
  const char *v577;
  uint64_t v578;
  uint64_t v579;
  const char *v580;
  uint64_t v581;
  uint64_t v582;
  const char *v583;
  uint64_t v584;
  uint64_t v585;
  const char *v586;
  uint64_t v587;
  uint64_t v588;
  const char *v589;
  uint64_t v590;
  uint64_t v591;
  const char *v592;
  uint64_t v593;
  uint64_t v594;
  const char *v595;
  uint64_t v596;
  uint64_t v597;
  const char *v598;
  uint64_t v599;
  uint64_t v600;
  const char *v601;
  uint64_t v602;
  uint64_t v603;
  const char *v604;
  uint64_t v605;
  uint64_t v606;
  const char *v607;
  uint64_t v608;
  uint64_t v609;
  const char *v610;
  uint64_t v611;
  uint64_t v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  const char *v616;
  uint64_t v617;
  uint64_t v618;
  const char *v619;
  uint64_t v620;
  uint64_t v621;
  const char *v622;
  uint64_t v623;
  uint64_t v624;
  const char *v625;
  uint64_t v626;
  uint64_t v627;
  const char *v628;
  uint64_t v629;
  uint64_t v630;
  const char *v631;
  uint64_t v632;
  uint64_t v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  const char *v637;
  uint64_t v638;
  uint64_t v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  const char *v643;
  uint64_t v644;
  uint64_t v645;
  const char *v646;
  uint64_t v647;
  uint64_t v648;
  const char *v649;
  uint64_t v650;
  uint64_t v651;
  const char *v652;
  uint64_t v653;
  uint64_t v654;
  const char *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  void *v660;
  const char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  const char *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  void *v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  void *v677;
  id v678;

  v678 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend_addCharactersInRange_(v678, v0, 173, 1, v1, v2);
  objc_msgSend_addCharactersInRange_(v678, v3, 1541, 1, v4, v5);
  objc_msgSend_addCharactersInRange_(v678, v6, 1757, 1, v7, v8);
  objc_msgSend_addCharactersInRange_(v678, v9, 2274, 1, v10, v11);
  objc_msgSend_addCharactersInRange_(v678, v12, 8203, 1, v13, v14);
  objc_msgSend_addCharactersInRange_(v678, v15, 8206, 2, v16, v17);
  objc_msgSend_addCharactersInRange_(v678, v18, 8234, 5, v19, v20);
  objc_msgSend_addCharactersInRange_(v678, v21, 8288, 5, v22, v23);
  objc_msgSend_addCharactersInRange_(v678, v24, 8294, 10, v25, v26);
  objc_msgSend_addCharactersInRange_(v678, v27, 65279, 1, v28, v29);
  objc_msgSend_addCharactersInRange_(v678, v30, 65529, 3, v31, v32);
  objc_msgSend_addCharactersInRange_(v678, v33, 113824, 4, v34, v35);
  objc_msgSend_addCharactersInRange_(v678, v36, 119155, 8, v37, v38);
  objc_msgSend_addCharactersInRange_(v678, v39, 917505, 1, v40, v41);
  objc_msgSend_addCharactersInRange_(v678, v42, 917536, 96, v43, v44);
  objc_msgSend_addCharactersInRange_(v678, v45, 1536, 5, v46, v47);
  objc_msgSend_addCharactersInRange_(v678, v48, 1564, 1, v49, v50);
  objc_msgSend_addCharactersInRange_(v678, v51, 1807, 1, v52, v53);
  objc_msgSend_addCharactersInRange_(v678, v54, 6158, 1, v55, v56);
  objc_msgSend_addCharactersInRange_(v678, v57, 8204, 2, v58, v59);
  objc_msgSend_addCharactersInRange_(v678, v60, 78896, 9, v61, v62);
  objc_msgSend_addCharactersInRange_(v678, v63, 69821, 1, v64, v65);
  objc_msgSend_addCharactersInRange_(v678, v66, 69837, 1, v67, v68);
  objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E0CB3500], v69, v70, v71, v72, v73);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v678, v75, (uint64_t)v74, v76, v77, v78);

  objc_msgSend_addCharactersInRange_(v678, v79, 95, 1, v80, v81);
  objc_msgSend_addCharactersInRange_(v678, v82, 8255, 2, v83, v84);
  objc_msgSend_addCharactersInRange_(v678, v85, 8276, 1, v86, v87);
  objc_msgSend_addCharactersInRange_(v678, v88, 65075, 2, v89, v90);
  objc_msgSend_addCharactersInRange_(v678, v91, 65101, 3, v92, v93);
  objc_msgSend_addCharactersInRange_(v678, v94, 65343, 1, v95, v96);
  objc_msgSend_addCharactersInRange_(v678, v97, 45, 1, v98, v99);
  objc_msgSend_addCharactersInRange_(v678, v100, 8208, 6, v101, v102);
  objc_msgSend_addCharactersInRange_(v678, v103, 11799, 1, v104, v105);
  objc_msgSend_addCharactersInRange_(v678, v106, 11802, 1, v107, v108);
  objc_msgSend_addCharactersInRange_(v678, v109, 11834, 2, v110, v111);
  objc_msgSend_addCharactersInRange_(v678, v112, 11840, 1, v113, v114);
  objc_msgSend_addCharactersInRange_(v678, v115, 12316, 1, v116, v117);
  objc_msgSend_addCharactersInRange_(v678, v118, 12336, 1, v119, v120);
  objc_msgSend_addCharactersInRange_(v678, v121, 12448, 1, v122, v123);
  objc_msgSend_addCharactersInRange_(v678, v124, 65073, 2, v125, v126);
  objc_msgSend_addCharactersInRange_(v678, v127, 65112, 1, v128, v129);
  objc_msgSend_addCharactersInRange_(v678, v130, 65123, 1, v131, v132);
  objc_msgSend_addCharactersInRange_(v678, v133, 65293, 1, v134, v135);
  objc_msgSend_addCharactersInRange_(v678, v136, 1418, 1, v137, v138);
  objc_msgSend_addCharactersInRange_(v678, v139, 1470, 1, v140, v141);
  objc_msgSend_addCharactersInRange_(v678, v142, 5120, 1, v143, v144);
  objc_msgSend_addCharactersInRange_(v678, v145, 6150, 1, v146, v147);
  objc_msgSend_addCharactersInRange_(v678, v148, 69293, 1, v149, v150);
  objc_msgSend_addCharactersInRange_(v678, v151, 41, 1, v152, v153);
  objc_msgSend_addCharactersInRange_(v678, v154, 93, 1, v155, v156);
  objc_msgSend_addCharactersInRange_(v678, v157, 125, 1, v158, v159);
  objc_msgSend_addCharactersInRange_(v678, v160, 8262, 1, v161, v162);
  objc_msgSend_addCharactersInRange_(v678, v163, 8318, 1, v164, v165);
  objc_msgSend_addCharactersInRange_(v678, v166, 8334, 1, v167, v168);
  objc_msgSend_addCharactersInRange_(v678, v169, 8969, 1, v170, v171);
  objc_msgSend_addCharactersInRange_(v678, v172, 8971, 1, v173, v174);
  objc_msgSend_addCharactersInRange_(v678, v175, 9002, 1, v176, v177);
  objc_msgSend_addCharactersInRange_(v678, v178, 10089, 1, v179, v180);
  objc_msgSend_addCharactersInRange_(v678, v181, 10091, 1, v182, v183);
  objc_msgSend_addCharactersInRange_(v678, v184, 10093, 1, v185, v186);
  objc_msgSend_addCharactersInRange_(v678, v187, 10095, 1, v188, v189);
  objc_msgSend_addCharactersInRange_(v678, v190, 10097, 1, v191, v192);
  objc_msgSend_addCharactersInRange_(v678, v193, 10099, 1, v194, v195);
  objc_msgSend_addCharactersInRange_(v678, v196, 10101, 1, v197, v198);
  objc_msgSend_addCharactersInRange_(v678, v199, 10182, 1, v200, v201);
  objc_msgSend_addCharactersInRange_(v678, v202, 10215, 1, v203, v204);
  objc_msgSend_addCharactersInRange_(v678, v205, 10217, 1, v206, v207);
  objc_msgSend_addCharactersInRange_(v678, v208, 10219, 1, v209, v210);
  objc_msgSend_addCharactersInRange_(v678, v211, 10221, 1, v212, v213);
  objc_msgSend_addCharactersInRange_(v678, v214, 10223, 1, v215, v216);
  objc_msgSend_addCharactersInRange_(v678, v217, 10628, 1, v218, v219);
  objc_msgSend_addCharactersInRange_(v678, v220, 10630, 1, v221, v222);
  objc_msgSend_addCharactersInRange_(v678, v223, 10632, 1, v224, v225);
  objc_msgSend_addCharactersInRange_(v678, v226, 10634, 1, v227, v228);
  objc_msgSend_addCharactersInRange_(v678, v229, 10636, 1, v230, v231);
  objc_msgSend_addCharactersInRange_(v678, v232, 10638, 1, v233, v234);
  objc_msgSend_addCharactersInRange_(v678, v235, 10640, 1, v236, v237);
  objc_msgSend_addCharactersInRange_(v678, v238, 10642, 1, v239, v240);
  objc_msgSend_addCharactersInRange_(v678, v241, 10644, 1, v242, v243);
  objc_msgSend_addCharactersInRange_(v678, v244, 10646, 1, v245, v246);
  objc_msgSend_addCharactersInRange_(v678, v247, 10648, 1, v248, v249);
  objc_msgSend_addCharactersInRange_(v678, v250, 10713, 1, v251, v252);
  objc_msgSend_addCharactersInRange_(v678, v253, 10715, 1, v254, v255);
  objc_msgSend_addCharactersInRange_(v678, v256, 10749, 1, v257, v258);
  objc_msgSend_addCharactersInRange_(v678, v259, 11811, 1, v260, v261);
  objc_msgSend_addCharactersInRange_(v678, v262, 11813, 1, v263, v264);
  objc_msgSend_addCharactersInRange_(v678, v265, 11815, 1, v266, v267);
  objc_msgSend_addCharactersInRange_(v678, v268, 11817, 1, v269, v270);
  objc_msgSend_addCharactersInRange_(v678, v271, 12297, 1, v272, v273);
  objc_msgSend_addCharactersInRange_(v678, v274, 12299, 1, v275, v276);
  objc_msgSend_addCharactersInRange_(v678, v277, 12301, 1, v278, v279);
  objc_msgSend_addCharactersInRange_(v678, v280, 12303, 1, v281, v282);
  objc_msgSend_addCharactersInRange_(v678, v283, 12305, 1, v284, v285);
  objc_msgSend_addCharactersInRange_(v678, v286, 12309, 1, v287, v288);
  objc_msgSend_addCharactersInRange_(v678, v289, 12311, 1, v290, v291);
  objc_msgSend_addCharactersInRange_(v678, v292, 12313, 1, v293, v294);
  objc_msgSend_addCharactersInRange_(v678, v295, 12315, 1, v296, v297);
  objc_msgSend_addCharactersInRange_(v678, v298, 12318, 2, v299, v300);
  objc_msgSend_addCharactersInRange_(v678, v301, 64830, 1, v302, v303);
  objc_msgSend_addCharactersInRange_(v678, v304, 65048, 1, v305, v306);
  objc_msgSend_addCharactersInRange_(v678, v307, 65078, 1, v308, v309);
  objc_msgSend_addCharactersInRange_(v678, v310, 65080, 1, v311, v312);
  objc_msgSend_addCharactersInRange_(v678, v313, 65082, 1, v314, v315);
  objc_msgSend_addCharactersInRange_(v678, v316, 65084, 1, v317, v318);
  objc_msgSend_addCharactersInRange_(v678, v319, 65086, 1, v320, v321);
  objc_msgSend_addCharactersInRange_(v678, v322, 65088, 1, v323, v324);
  objc_msgSend_addCharactersInRange_(v678, v325, 65090, 1, v326, v327);
  objc_msgSend_addCharactersInRange_(v678, v328, 65092, 1, v329, v330);
  objc_msgSend_addCharactersInRange_(v678, v331, 65096, 1, v332, v333);
  objc_msgSend_addCharactersInRange_(v678, v334, 65114, 1, v335, v336);
  objc_msgSend_addCharactersInRange_(v678, v337, 65116, 1, v338, v339);
  objc_msgSend_addCharactersInRange_(v678, v340, 65118, 1, v341, v342);
  objc_msgSend_addCharactersInRange_(v678, v343, 65289, 1, v344, v345);
  objc_msgSend_addCharactersInRange_(v678, v346, 65341, 1, v347, v348);
  objc_msgSend_addCharactersInRange_(v678, v349, 65373, 1, v350, v351);
  objc_msgSend_addCharactersInRange_(v678, v352, 65376, 1, v353, v354);
  objc_msgSend_addCharactersInRange_(v678, v355, 65379, 1, v356, v357);
  objc_msgSend_addCharactersInRange_(v678, v358, 3899, 1, v359, v360);
  objc_msgSend_addCharactersInRange_(v678, v361, 3901, 1, v362, v363);
  objc_msgSend_addCharactersInRange_(v678, v364, 5788, 1, v365, v366);
  objc_msgSend_addCharactersInRange_(v678, v367, 187, 1, v368, v369);
  objc_msgSend_addCharactersInRange_(v678, v370, 8217, 1, v371, v372);
  objc_msgSend_addCharactersInRange_(v678, v373, 8221, 1, v374, v375);
  objc_msgSend_addCharactersInRange_(v678, v376, 8250, 1, v377, v378);
  objc_msgSend_addCharactersInRange_(v678, v379, 11779, 1, v380, v381);
  objc_msgSend_addCharactersInRange_(v678, v382, 11781, 1, v383, v384);
  objc_msgSend_addCharactersInRange_(v678, v385, 11786, 1, v386, v387);
  objc_msgSend_addCharactersInRange_(v678, v388, 11789, 1, v389, v390);
  objc_msgSend_addCharactersInRange_(v678, v391, 11805, 1, v392, v393);
  objc_msgSend_addCharactersInRange_(v678, v394, 11809, 1, v395, v396);
  objc_msgSend_addCharactersInRange_(v678, v397, 171, 1, v398, v399);
  objc_msgSend_addCharactersInRange_(v678, v400, 8216, 1, v401, v402);
  objc_msgSend_addCharactersInRange_(v678, v403, 8219, 2, v404, v405);
  objc_msgSend_addCharactersInRange_(v678, v406, 8223, 1, v407, v408);
  objc_msgSend_addCharactersInRange_(v678, v409, 8249, 1, v410, v411);
  objc_msgSend_addCharactersInRange_(v678, v412, 11778, 1, v413, v414);
  objc_msgSend_addCharactersInRange_(v678, v415, 11780, 1, v416, v417);
  objc_msgSend_addCharactersInRange_(v678, v418, 11785, 1, v419, v420);
  objc_msgSend_addCharactersInRange_(v678, v421, 11788, 1, v422, v423);
  objc_msgSend_addCharactersInRange_(v678, v424, 11804, 1, v425, v426);
  objc_msgSend_addCharactersInRange_(v678, v427, 11808, 1, v428, v429);
  objc_msgSend_addCharactersInRange_(v678, v430, 40, 1, v431, v432);
  objc_msgSend_addCharactersInRange_(v678, v433, 91, 1, v434, v435);
  objc_msgSend_addCharactersInRange_(v678, v436, 123, 1, v437, v438);
  objc_msgSend_addCharactersInRange_(v678, v439, 8218, 1, v440, v441);
  objc_msgSend_addCharactersInRange_(v678, v442, 8222, 1, v443, v444);
  objc_msgSend_addCharactersInRange_(v678, v445, 8261, 1, v446, v447);
  objc_msgSend_addCharactersInRange_(v678, v448, 8317, 1, v449, v450);
  objc_msgSend_addCharactersInRange_(v678, v451, 8333, 1, v452, v453);
  objc_msgSend_addCharactersInRange_(v678, v454, 8968, 1, v455, v456);
  objc_msgSend_addCharactersInRange_(v678, v457, 8970, 1, v458, v459);
  objc_msgSend_addCharactersInRange_(v678, v460, 9001, 1, v461, v462);
  objc_msgSend_addCharactersInRange_(v678, v463, 10088, 1, v464, v465);
  objc_msgSend_addCharactersInRange_(v678, v466, 10090, 1, v467, v468);
  objc_msgSend_addCharactersInRange_(v678, v469, 10092, 1, v470, v471);
  objc_msgSend_addCharactersInRange_(v678, v472, 10094, 1, v473, v474);
  objc_msgSend_addCharactersInRange_(v678, v475, 10096, 1, v476, v477);
  objc_msgSend_addCharactersInRange_(v678, v478, 10098, 1, v479, v480);
  objc_msgSend_addCharactersInRange_(v678, v481, 10100, 1, v482, v483);
  objc_msgSend_addCharactersInRange_(v678, v484, 10181, 1, v485, v486);
  objc_msgSend_addCharactersInRange_(v678, v487, 10214, 1, v488, v489);
  objc_msgSend_addCharactersInRange_(v678, v490, 10216, 1, v491, v492);
  objc_msgSend_addCharactersInRange_(v678, v493, 10218, 1, v494, v495);
  objc_msgSend_addCharactersInRange_(v678, v496, 10220, 1, v497, v498);
  objc_msgSend_addCharactersInRange_(v678, v499, 10222, 1, v500, v501);
  objc_msgSend_addCharactersInRange_(v678, v502, 10627, 1, v503, v504);
  objc_msgSend_addCharactersInRange_(v678, v505, 10629, 1, v506, v507);
  objc_msgSend_addCharactersInRange_(v678, v508, 10631, 1, v509, v510);
  objc_msgSend_addCharactersInRange_(v678, v511, 10633, 1, v512, v513);
  objc_msgSend_addCharactersInRange_(v678, v514, 10635, 1, v515, v516);
  objc_msgSend_addCharactersInRange_(v678, v517, 10637, 1, v518, v519);
  objc_msgSend_addCharactersInRange_(v678, v520, 10639, 1, v521, v522);
  objc_msgSend_addCharactersInRange_(v678, v523, 10641, 1, v524, v525);
  objc_msgSend_addCharactersInRange_(v678, v526, 10643, 1, v527, v528);
  objc_msgSend_addCharactersInRange_(v678, v529, 10645, 1, v530, v531);
  objc_msgSend_addCharactersInRange_(v678, v532, 10647, 1, v533, v534);
  objc_msgSend_addCharactersInRange_(v678, v535, 10712, 1, v536, v537);
  objc_msgSend_addCharactersInRange_(v678, v538, 10714, 1, v539, v540);
  objc_msgSend_addCharactersInRange_(v678, v541, 10748, 1, v542, v543);
  objc_msgSend_addCharactersInRange_(v678, v544, 11810, 1, v545, v546);
  objc_msgSend_addCharactersInRange_(v678, v547, 11812, 1, v548, v549);
  objc_msgSend_addCharactersInRange_(v678, v550, 11814, 1, v551, v552);
  objc_msgSend_addCharactersInRange_(v678, v553, 11816, 1, v554, v555);
  objc_msgSend_addCharactersInRange_(v678, v556, 11842, 1, v557, v558);
  objc_msgSend_addCharactersInRange_(v678, v559, 12296, 1, v560, v561);
  objc_msgSend_addCharactersInRange_(v678, v562, 12298, 1, v563, v564);
  objc_msgSend_addCharactersInRange_(v678, v565, 12300, 1, v566, v567);
  objc_msgSend_addCharactersInRange_(v678, v568, 12302, 1, v569, v570);
  objc_msgSend_addCharactersInRange_(v678, v571, 12304, 1, v572, v573);
  objc_msgSend_addCharactersInRange_(v678, v574, 12308, 1, v575, v576);
  objc_msgSend_addCharactersInRange_(v678, v577, 12310, 1, v578, v579);
  objc_msgSend_addCharactersInRange_(v678, v580, 12312, 1, v581, v582);
  objc_msgSend_addCharactersInRange_(v678, v583, 12314, 1, v584, v585);
  objc_msgSend_addCharactersInRange_(v678, v586, 12317, 1, v587, v588);
  objc_msgSend_addCharactersInRange_(v678, v589, 64831, 1, v590, v591);
  objc_msgSend_addCharactersInRange_(v678, v592, 65047, 1, v593, v594);
  objc_msgSend_addCharactersInRange_(v678, v595, 65077, 1, v596, v597);
  objc_msgSend_addCharactersInRange_(v678, v598, 65079, 1, v599, v600);
  objc_msgSend_addCharactersInRange_(v678, v601, 65081, 1, v602, v603);
  objc_msgSend_addCharactersInRange_(v678, v604, 65083, 1, v605, v606);
  objc_msgSend_addCharactersInRange_(v678, v607, 65085, 1, v608, v609);
  objc_msgSend_addCharactersInRange_(v678, v610, 65087, 1, v611, v612);
  objc_msgSend_addCharactersInRange_(v678, v613, 65089, 1, v614, v615);
  objc_msgSend_addCharactersInRange_(v678, v616, 65091, 1, v617, v618);
  objc_msgSend_addCharactersInRange_(v678, v619, 65095, 1, v620, v621);
  objc_msgSend_addCharactersInRange_(v678, v622, 65113, 1, v623, v624);
  objc_msgSend_addCharactersInRange_(v678, v625, 65115, 1, v626, v627);
  objc_msgSend_addCharactersInRange_(v678, v628, 65117, 1, v629, v630);
  objc_msgSend_addCharactersInRange_(v678, v631, 65288, 1, v632, v633);
  objc_msgSend_addCharactersInRange_(v678, v634, 65339, 1, v635, v636);
  objc_msgSend_addCharactersInRange_(v678, v637, 65371, 1, v638, v639);
  objc_msgSend_addCharactersInRange_(v678, v640, 65375, 1, v641, v642);
  objc_msgSend_addCharactersInRange_(v678, v643, 65378, 1, v644, v645);
  objc_msgSend_addCharactersInRange_(v678, v646, 3898, 1, v647, v648);
  objc_msgSend_addCharactersInRange_(v678, v649, 3900, 1, v650, v651);
  objc_msgSend_addCharactersInRange_(v678, v652, 5787, 1, v653, v654);
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v655, v656, v657, v658, v659);
  v660 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v678, v661, (uint64_t)v660, v662, v663, v664);

  v670 = (void *)objc_msgSend_copy(v678, v665, v666, v667, v668, v669);
  objc_msgSend_invertedSet(v670, v671, v672, v673, v674, v675);
  v676 = objc_claimAutoreleasedReturnValue();
  v677 = (void *)qword_1EF567EB8;
  qword_1EF567EB8 = v676;

}

