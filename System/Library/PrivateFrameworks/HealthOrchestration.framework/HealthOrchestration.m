uint64_t CurrentValueWorkPlan.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

__n128 CurrentValueWorkPlan.identifier.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*CurrentValueWorkPlan.identifier.modify())()
{
  return nullsub_1;
}

uint64_t CurrentValueWorkPlan.priority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t CurrentValueWorkPlan.priority.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
  return result;
}

uint64_t (*CurrentValueWorkPlan.priority.modify())()
{
  return nullsub_1;
}

uint64_t CurrentValueWorkPlan.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 48));
}

uint64_t CurrentValueWorkPlan.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 48), a1);
}

uint64_t (*CurrentValueWorkPlan.value.modify())()
{
  return nullsub_1;
}

uint64_t CurrentValueWorkPlan.init(identifier:priority:value:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a2;
  v12 = *((_BYTE *)a2 + 8);
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_QWORD *)(a7 + 16) = v10;
  *(_QWORD *)(a7 + 24) = v11;
  *(_BYTE *)(a7 + 32) = v12;
  v13 = a7 + *(int *)(type metadata accessor for CurrentValueWorkPlan(0, a4, a5, a6) + 48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v13, a3, a4);
}

uint64_t type metadata accessor for CurrentValueWorkPlan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CurrentValueWorkPlan);
}

uint64_t CurrentValueWorkPlan.merged(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

BOOL sub_23DE8CB00(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23DE8CB10()
{
  return sub_23DF15484();
}

uint64_t sub_23DE8CB34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DE8CC8C()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DE8CCD0(char a1)
{
  if (!a1)
    return 0x696669746E656469;
  if (a1 == 1)
    return 0x797469726F697270;
  return 0x65756C6176;
}

BOOL sub_23DE8CD28(char *a1, char *a2)
{
  return sub_23DE8CB00(*a1, *a2);
}

uint64_t sub_23DE8CD40()
{
  return sub_23DE8CC8C();
}

uint64_t sub_23DE8CD50()
{
  return sub_23DE8CB10();
}

uint64_t sub_23DE8CD60()
{
  sub_23DF15478();
  sub_23DE8CB10();
  return sub_23DF154A8();
}

uint64_t sub_23DE8CDA8()
{
  char *v0;

  return sub_23DE8CCD0(*v0);
}

uint64_t sub_23DE8CDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE8CB34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DE8CDE8()
{
  return 0;
}

uint64_t sub_23DE8CDF4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DE8F8A0();
  *a1 = result;
  return result;
}

uint64_t sub_23DE8CE24(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF15F48, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DE8CE58(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF15F48, a1);
  return sub_23DF154D8();
}

uint64_t CurrentValueWorkPlan.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v4 = a2[2];
  v5 = a2[3];
  v17 = a2[4];
  v18 = v4;
  v6 = type metadata accessor for CurrentValueWorkPlan.CodingKeys(255, v4, v5, v17);
  MEMORY[0x2426483D0](&unk_23DF15F48, v6);
  v7 = sub_23DF153A0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v16 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = v19;
  sub_23DF154C0();
  v12 = *((_QWORD *)v11 + 2);
  v21 = *v11;
  v22 = v12;
  v23 = 0;
  sub_23DE8D078();
  v13 = v20;
  sub_23DF15388();
  if (!v13)
  {
    v14 = *((_BYTE *)v11 + 32);
    *(_QWORD *)&v21 = *((_QWORD *)v11 + 3);
    BYTE8(v21) = v14;
    v23 = 1;
    sub_23DE8D0BC();
    sub_23DF15388();
    LOBYTE(v21) = 2;
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for CurrentValueWorkPlan.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CurrentValueWorkPlan.CodingKeys);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23DE8D078()
{
  unint64_t result;

  result = qword_256D0E018;
  if (!qword_256D0E018)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkPlanIdentifier, &type metadata for WorkPlanIdentifier);
    atomic_store(result, (unint64_t *)&qword_256D0E018);
  }
  return result;
}

unint64_t sub_23DE8D0BC()
{
  unint64_t result;

  result = qword_256D0E020;
  if (!qword_256D0E020)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet, &type metadata for PriorityRuleSet);
    atomic_store(result, (unint64_t *)&qword_256D0E020);
  }
  return result;
}

uint64_t CurrentValueWorkPlan.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;

  v32 = a5;
  v31 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8]();
  v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CurrentValueWorkPlan.CodingKeys(255, v10, v11, v12);
  MEMORY[0x2426483D0](&unk_23DF15F48, v13);
  v38 = sub_23DF15340();
  v34 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8]();
  v15 = (char *)&v31 - v14;
  v36 = a3;
  v37 = a2;
  v33 = type metadata accessor for CurrentValueWorkPlan(0, a2, a3, a4);
  v16 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v31 - v17;
  v19 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v39 = v15;
  v20 = v41;
  sub_23DF154B4();
  if (v20)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  v21 = v33;
  v22 = v34;
  v41 = v16;
  v23 = v37;
  v24 = v18;
  v25 = v35;
  v44 = 0;
  sub_23DE8D43C();
  v26 = v38;
  sub_23DF15334();
  v27 = v43;
  *(_OWORD *)v24 = v42;
  *((_QWORD *)v24 + 2) = v27;
  v44 = 1;
  sub_23DE8D480();
  sub_23DF15334();
  v28 = BYTE8(v42);
  *((_QWORD *)v24 + 3) = v42;
  v24[32] = v28;
  LOBYTE(v42) = 2;
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v39, v26);
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v24[*(int *)(v21 + 48)], v25, v23);
  v29 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v32, v24, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v24, v21);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_23DE8D43C()
{
  unint64_t result;

  result = qword_256D0E6E0;
  if (!qword_256D0E6E0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkPlanIdentifier, &type metadata for WorkPlanIdentifier);
    atomic_store(result, (unint64_t *)&qword_256D0E6E0);
  }
  return result;
}

unint64_t sub_23DE8D480()
{
  unint64_t result;

  result = qword_256D0E030[0];
  if (!qword_256D0E030[0])
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet, &type metadata for PriorityRuleSet);
    atomic_store(result, qword_256D0E030);
  }
  return result;
}

uint64_t sub_23DE8D4CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CurrentValueWorkPlan.merged(with:)(a1, a2, a3);
}

uint64_t sub_23DE8D4E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CurrentValueWorkPlan.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_23DE8D500(_QWORD *a1, _QWORD *a2)
{
  return CurrentValueWorkPlan.encode(to:)(a1, a2);
}

uint64_t CurrentValueWorkPlan.description.getter()
{
  sub_23DF15190();
  sub_23DF14E60();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  sub_23DF153C4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRetain();
  PriorityRuleSet.description.getter();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  sub_23DF153E8();
  sub_23DF14E60();
  return 0;
}

uint64_t static CurrentValueWorkPlan<>.== infix(_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = a2[2];
  v12 = *(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1];
  if ((v12 || (sub_23DF15400() & 1) != 0) && v10 == v11)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_BYTE *)(a1 + 32);
    v15 = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_23DE8DAB8(v13, v15) & 1) != 0)
    {
      sub_23DE8D7D0(v14);
      v17 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
      {
        type metadata accessor for CurrentValueWorkPlan(0, a3, a4, a5);
        return sub_23DF14DDC() & 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t sub_23DE8D7BC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return static CurrentValueWorkPlan<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

void sub_23DE8D7D0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23DE8D834(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DE8D898 + 4 * byte_23DF15CD4[a2]))(0x746E65677275);
}

uint64_t sub_23DE8D898(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E65677275 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_23DF15400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23DE8D944(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23DE8D990(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_23DE8DA04 + 4 * byte_23DF15CDD[a2]))();
}

uint64_t sub_23DE8DA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0x800000023DF1C100)
    v4 = 1;
  else
    v4 = sub_23DF15400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_23DE8DAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  char v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t i;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  int64_t v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  int64_t v107;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 != *(_QWORD *)(v4 + 16))
    return 0;
  v105 = *(unsigned __int8 *)(a1 + 40);
  if (!v5)
  {
    swift_bridgeObjectRetain();
    goto LABEL_119;
  }
  swift_bridgeObjectRetain();
  if (v3 == v4)
  {
LABEL_119:
    swift_bridgeObjectRetain();
    goto LABEL_120;
  }
  v94 = v4 + 32;
  v95 = v3 + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
  v96 = v4;
  v89 = v5;
  while (2)
  {
    if (v6 >= *(_QWORD *)(v4 + 16))
      goto LABEL_135;
    v7 = (uint64_t *)(v95 + 16 * v6);
    v9 = *v7;
    v8 = v7[1];
    v10 = (_QWORD *)(v94 + 16 * v6);
    v102 = v9;
    v104 = v8;
    v101 = *v10;
    v103 = v10[1];
    v90 = v6;
    if (v9 == *v10)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = v8;
      goto LABEL_65;
    }
    if (*(_QWORD *)(v9 + 16) != *(_QWORD *)(*v10 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_125;
    }
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v91 = v9 + 64;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v9 + 64);
    v92 = (unint64_t)(v11 + 63) >> 6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = 0;
    if (!v13)
      goto LABEL_16;
    while (2)
    {
      v97 = (v13 - 1) & v13;
      v99 = v14;
      v15 = __clz(__rbit64(v13)) | (v14 << 6);
LABEL_30:
      v21 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v15);
      v22 = *v21;
      v23 = v21[1];
      v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = sub_23DE946E8(v22, v23);
      v27 = v26;
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
        goto LABEL_124;
      v28 = *(_QWORD *)(*(_QWORD *)(v101 + 56) + 8 * v25);
      if (v28 == v24)
      {
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
      if (*(_QWORD *)(v28 + 16) != *(_QWORD *)(v24 + 16))
      {
LABEL_124:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_125;
      }
      v29 = 1 << *(_BYTE *)(v28 + 32);
      v30 = v28 + 64;
      if (v29 < 64)
        v31 = ~(-1 << v29);
      else
        v31 = -1;
      v32 = v31 & *(_QWORD *)(v28 + 64);
      v106 = (unint64_t)(v29 + 63) >> 6;
      swift_bridgeObjectRetain();
      v33 = 0;
      while (v32)
      {
        v34 = __clz(__rbit64(v32));
        v32 &= v32 - 1;
        v35 = v34 | (v33 << 6);
LABEL_53:
        v39 = 16 * v35;
        v40 = (uint64_t *)(*(_QWORD *)(v28 + 48) + v39);
        v41 = *v40;
        v42 = v40[1];
        v43 = (uint64_t *)(*(_QWORD *)(v28 + 56) + v39);
        v44 = *v43;
        v45 = v43[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v46 = sub_23DE946E8(v41, v42);
        v48 = v47;
        swift_bridgeObjectRelease();
        if ((v48 & 1) == 0)
        {
LABEL_122:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_124;
        }
        v49 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v46);
        if (*v49 == v44 && v49[1] == v45)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v51 = sub_23DF15400();
          swift_bridgeObjectRelease();
          if ((v51 & 1) == 0)
          {
LABEL_123:
            swift_bridgeObjectRelease();
            goto LABEL_124;
          }
        }
      }
      v36 = v33 + 1;
      if (__OFADD__(v33, 1))
      {
        __break(1u);
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      if (v36 >= v106)
        goto LABEL_61;
      v37 = *(_QWORD *)(v30 + 8 * v36);
      ++v33;
      if (v37)
        goto LABEL_52;
      v33 = v36 + 1;
      if (v36 + 1 >= v106)
        goto LABEL_61;
      v37 = *(_QWORD *)(v30 + 8 * v33);
      if (v37)
        goto LABEL_52;
      v33 = v36 + 2;
      if (v36 + 2 >= v106)
        goto LABEL_61;
      v37 = *(_QWORD *)(v30 + 8 * v33);
      if (v37)
      {
LABEL_52:
        v32 = (v37 - 1) & v37;
        v35 = __clz(__rbit64(v37)) + (v33 << 6);
        goto LABEL_53;
      }
      v38 = v36 + 3;
      if (v38 < v106)
      {
        v37 = *(_QWORD *)(v30 + 8 * v38);
        v33 = v38;
        if (!v37)
        {
          while (1)
          {
            v33 = v38 + 1;
            if (__OFADD__(v38, 1))
              break;
            if (v33 >= v106)
              goto LABEL_61;
            v37 = *(_QWORD *)(v30 + 8 * v33);
            ++v38;
            if (v37)
              goto LABEL_52;
          }
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        goto LABEL_52;
      }
LABEL_61:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v96;
      v9 = v102;
LABEL_62:
      v13 = v97;
      v14 = v99;
      if (v97)
        continue;
      break;
    }
LABEL_16:
    v16 = v14 + 1;
    v17 = v104;
    if (__OFADD__(v14, 1))
      goto LABEL_136;
    if (v16 < v92)
    {
      v18 = *(_QWORD *)(v91 + 8 * v16);
      v19 = v14 + 1;
      if (v18)
        goto LABEL_29;
      v19 = v14 + 2;
      if (v14 + 2 < v92)
      {
        v18 = *(_QWORD *)(v91 + 8 * v19);
        if (v18)
          goto LABEL_29;
        v19 = v14 + 3;
        if (v14 + 3 < v92)
        {
          v18 = *(_QWORD *)(v91 + 8 * v19);
          if (v18)
            goto LABEL_29;
          v20 = v14 + 4;
          if (v14 + 4 < v92)
          {
            v18 = *(_QWORD *)(v91 + 8 * v20);
            if (v18)
            {
              v19 = v14 + 4;
LABEL_29:
              v97 = (v18 - 1) & v18;
              v99 = v19;
              v15 = __clz(__rbit64(v18)) + (v19 << 6);
              goto LABEL_30;
            }
            while (1)
            {
              v19 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_139;
              if (v19 >= v92)
                break;
              v18 = *(_QWORD *)(v91 + 8 * v19);
              ++v20;
              if (v18)
                goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_65:
    if (v17 == v103)
      goto LABEL_115;
    if (*(_QWORD *)(v17 + 16) == *(_QWORD *)(v103 + 16))
    {
      v52 = 0;
      v93 = v17 + 64;
      v53 = 1 << *(_BYTE *)(v17 + 32);
      if (v53 < 64)
        v54 = ~(-1 << v53);
      else
        v54 = -1;
      v55 = v54 & *(_QWORD *)(v17 + 64);
      v98 = (unint64_t)(v53 + 63) >> 6;
      if (!v55)
        goto LABEL_72;
      while (2)
      {
        v100 = (v55 - 1) & v55;
        v107 = v52;
        v56 = __clz(__rbit64(v55)) | (v52 << 6);
LABEL_85:
        v61 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * v56);
        v62 = *v61;
        v63 = v61[1];
        v64 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v65 = sub_23DE946E8(v62, v63);
        v67 = v66;
        swift_bridgeObjectRelease();
        if ((v67 & 1) == 0)
          goto LABEL_124;
        v68 = *(_QWORD *)(*(_QWORD *)(v103 + 56) + 8 * v65);
        if (v68 == v64)
        {
          swift_bridgeObjectRelease();
          goto LABEL_111;
        }
        if (*(_QWORD *)(v68 + 16) != *(_QWORD *)(v64 + 16))
          goto LABEL_124;
        v69 = 1 << *(_BYTE *)(v68 + 32);
        v70 = v68 + 64;
        if (v69 < 64)
          v71 = ~(-1 << v69);
        else
          v71 = -1;
        v72 = v71 & *(_QWORD *)(v68 + 64);
        v73 = (unint64_t)(v69 + 63) >> 6;
        swift_bridgeObjectRetain();
        v74 = 0;
        while (2)
        {
          if (v72)
          {
            v75 = __clz(__rbit64(v72));
            v72 &= v72 - 1;
            v76 = v75 | (v74 << 6);
LABEL_107:
            v80 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v76);
            v81 = *v80;
            v82 = v80[1];
            v83 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v76);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_23DE946E8(v81, v82);
            v85 = v84;
            swift_bridgeObjectRelease();
            if ((v85 & 1) == 0)
              goto LABEL_122;
            v86 = swift_bridgeObjectRetain();
            v87 = sub_23DEA1E24(v86, v83);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v87 & 1) == 0)
              goto LABEL_123;
            continue;
          }
          break;
        }
        v77 = v74 + 1;
        if (__OFADD__(v74, 1))
          goto LABEL_133;
        if (v77 < v73)
        {
          v78 = *(_QWORD *)(v70 + 8 * v77);
          ++v74;
          if (!v78)
          {
            v74 = v77 + 1;
            if (v77 + 1 >= v73)
              goto LABEL_113;
            v78 = *(_QWORD *)(v70 + 8 * v74);
            if (!v78)
            {
              v74 = v77 + 2;
              if (v77 + 2 >= v73)
                goto LABEL_113;
              v78 = *(_QWORD *)(v70 + 8 * v74);
              if (!v78)
              {
                v79 = v77 + 3;
                if (v79 >= v73)
                  goto LABEL_113;
                v78 = *(_QWORD *)(v70 + 8 * v79);
                v74 = v79;
                if (!v78)
                {
                  while (1)
                  {
                    v74 = v79 + 1;
                    if (__OFADD__(v79, 1))
                      break;
                    if (v74 >= v73)
                      goto LABEL_113;
                    v78 = *(_QWORD *)(v70 + 8 * v74);
                    ++v79;
                    if (v78)
                      goto LABEL_106;
                  }
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
                  JUMPOUT(0x23DE8E5F4);
                }
              }
            }
          }
LABEL_106:
          v72 = (v78 - 1) & v78;
          v76 = __clz(__rbit64(v78)) + (v74 << 6);
          goto LABEL_107;
        }
LABEL_113:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v96;
LABEL_111:
        v17 = v104;
        v52 = v107;
        v55 = v100;
        if (v100)
          continue;
        break;
      }
LABEL_72:
      v57 = v52 + 1;
      if (__OFADD__(v52, 1))
        goto LABEL_138;
      if (v57 < v98)
      {
        v58 = *(_QWORD *)(v93 + 8 * v57);
        i = v52 + 1;
        if (v58)
          goto LABEL_84;
        i = v52 + 2;
        if (v52 + 2 < v98)
        {
          v58 = *(_QWORD *)(v93 + 8 * i);
          if (v58)
            goto LABEL_84;
          i = v52 + 3;
          if (v52 + 3 < v98)
          {
            v58 = *(_QWORD *)(v93 + 8 * i);
            if (v58)
              goto LABEL_84;
            v60 = v52 + 4;
            if (v52 + 4 < v98)
            {
              v58 = *(_QWORD *)(v93 + 8 * v60);
              for (i = v52 + 4; !v58; ++v60)
              {
                i = v60 + 1;
                if (__OFADD__(v60, 1))
                  goto LABEL_140;
                if (i >= v98)
                  goto LABEL_115;
                v58 = *(_QWORD *)(v93 + 8 * i);
              }
LABEL_84:
              v100 = (v58 - 1) & v58;
              v107 = i;
              v56 = __clz(__rbit64(v58)) + (i << 6);
              goto LABEL_85;
            }
          }
        }
      }
LABEL_115:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v90 + 1;
      if (v90 + 1 == v89)
LABEL_120:
        __asm { BR              X8 }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_125:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23DE8E614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v10 = 0;
    return v10 & 1;
  }
  if (v2 && a1 != a2)
  {
    v3 = v2 - 1;
    v4 = (uint64_t *)(a2 + 40);
    v5 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v8 = *(v4 - 1);
      v9 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23DEA3370(v6, v8) & 1) == 0)
        break;
      v10 = sub_23DEA337C(v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v3-- != 0;
      if ((v10 & 1) != 0)
      {
        v4 += 2;
        v5 += 2;
        if (v12)
          continue;
      }
      return v10 & 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v10 = 1;
  return v10 & 1;
}

uint64_t sub_23DE8E720(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v5 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_64:
    swift_bridgeObjectRetain();
    v31 = sub_23DF15298();
    swift_bridgeObjectRelease();
    if (v6 != v31)
      goto LABEL_61;
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  v6 = sub_23DF15298();
  swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_64;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_61;
LABEL_4:
  if (!v6)
    goto LABEL_45;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0)
    v8 = a1;
  if (!v5)
    v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  else
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
  if (v7)
    v9 = v10;
  if (v8 == v9)
  {
LABEL_45:
    LOBYTE(v6) = 1;
    return v6 & 1;
  }
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) == 0)
    {
      v11 = *(_QWORD **)(a1 + 32);
      result = swift_retain();
      v13 = a2 & 0xC000000000000001;
      if ((a2 & 0xC000000000000001) == 0)
        goto LABEL_18;
LABEL_68:
      v14 = (_QWORD *)MEMORY[0x242647BF0](0, a2);
      goto LABEL_20;
    }
  }
  result = MEMORY[0x242647BF0](0, a1);
  v11 = (_QWORD *)result;
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_68;
LABEL_18:
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD **)(a2 + 32);
    swift_retain();
LABEL_20:
    if ((v11[2] == v14[2] && v11[3] == v14[3] || (sub_23DF15400() & 1) != 0)
      && (sub_23DEA3580(v11[4], v14[4]) & 1) != 0)
    {
      v15 = sub_23DEA3F28(v11[5], v14[5]);
      swift_release();
      result = swift_release();
      if ((v15 & 1) != 0)
      {
        v16 = v6 - 1;
        if (v6 != 1)
        {
          if (((a2 | a1) & 0xC000000000000001) != 0)
          {
            v17 = 0;
            v32 = v6 - 2;
            while (1)
            {
              if (v16 == v17)
                goto LABEL_70;
              if (v2)
              {
                result = MEMORY[0x242647BF0](v17 + 1, a1);
                v18 = (_QWORD *)result;
                if (v13)
                  goto LABEL_31;
              }
              else
              {
                v18 = *(_QWORD **)(a1 + 40 + 8 * v17);
                result = swift_retain();
                if (v13)
                {
LABEL_31:
                  v19 = (_QWORD *)MEMORY[0x242647BF0](v17 + 1, a2);
                  goto LABEL_35;
                }
              }
              if ((unint64_t)(v17 + 1) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_73;
              v19 = *(_QWORD **)(a2 + 40 + 8 * v17);
              swift_retain();
LABEL_35:
              v20 = v18[2] == v19[2] && v18[3] == v19[3];
              if (!v20 && (sub_23DF15400() & 1) == 0 || (sub_23DEA3580(v18[4], v19[4]) & 1) == 0)
                goto LABEL_60;
              LOBYTE(v6) = sub_23DEA3F28(v18[5], v19[5]);
              swift_release();
              result = swift_release();
              if ((v6 & 1) != 0)
              {
                v20 = v32 == v17++;
                if (!v20)
                  continue;
              }
              return v6 & 1;
            }
          }
          v21 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v21 <= 1)
            v21 = 1;
          v22 = v21 - 1;
          v23 = a1 + 40;
          v24 = a2 + 40;
          LOBYTE(v6) = 1;
          while (v16)
          {
            if (!v22)
              goto LABEL_72;
            v25 = *(_QWORD *)v23;
            v26 = *(_QWORD *)v24;
            v27 = *(_QWORD *)(*(_QWORD *)v23 + 16) == *(_QWORD *)(*(_QWORD *)v24 + 16)
               && *(_QWORD *)(*(_QWORD *)v23 + 24) == *(_QWORD *)(*(_QWORD *)v24 + 24);
            if (!v27 && (sub_23DF15400() & 1) == 0)
              goto LABEL_61;
            v28 = *(_QWORD *)(v25 + 32);
            v29 = *(_QWORD *)(v26 + 32);
            swift_retain();
            swift_retain();
            if ((sub_23DEA3580(v28, v29) & 1) == 0)
              goto LABEL_60;
            v30 = sub_23DEA3F28(*(_QWORD *)(v25 + 40), *(_QWORD *)(v26 + 40));
            swift_release();
            result = swift_release();
            if ((v30 & 1) == 0)
              goto LABEL_61;
            --v22;
            v23 += 8;
            v24 += 8;
            if (!--v16)
              return v6 & 1;
          }
          goto LABEL_71;
        }
        return v6 & 1;
      }
    }
    else
    {
LABEL_60:
      swift_release();
      swift_release();
    }
LABEL_61:
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_23DE8EAD0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x2426483D0](&protocol conformance descriptor for CurrentValueWorkPlan<A>);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for CurrentValueWorkPlan<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_23DE8EB14()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DE8EB1C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DE8EB9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 33) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    a1[2] = a2[2];
    v11 = ((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
    v13 = (v11 + v6 + 9) & ~v6;
    v14 = (v12 + v6 + 9) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t sub_23DE8EC90(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_23DE8ECE4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = ((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 9 + v5) & ~v9;
  v11 = (v9 + 9 + v6) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *sub_23DE8ED84(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v6 = ((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v6 = *(_QWORD *)v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(unsigned __int8 *)(v8 + 80) + 9 + v6) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 9 + v7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_23DE8EE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  v5 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 9 + v4) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 9 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *sub_23DE8EEB4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = ((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 9 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_23DE8EF4C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 33) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + v7 + 9) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DE8F020 + 4 * byte_23DF15CE2[(v9 - 1)]))();
}

void sub_23DE8F098(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23DE8F8FC(a1, &qword_25432D998);
}

uint64_t sub_23DE8F2B0()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for EnqueuedWorkPlan.PlanState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23DE8F358(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DE8F3A4 + 4 * byte_23DF15CF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DE8F3D8 + 4 * byte_23DF15CF0[v4]))();
}

uint64_t sub_23DE8F3D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE8F3E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE8F3E8);
  return result;
}

uint64_t sub_23DE8F3F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE8F3FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DE8F400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE8F408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE8F414(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23DE8F41C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void sub_23DE8F424()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DE8F434()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DE8F444()
{
  JUMPOUT(0x2426483D0);
}

uint64_t sub_23DE8F454(uint64_t a1, uint64_t a2)
{
  return sub_23DE8F530(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_23DE8F468(uint64_t a1, uint64_t a2)
{
  return sub_23DE8F530(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_23DE8F480()
{
  sub_23DF14E0C();
  sub_23DF14E3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE8F4C0()
{
  uint64_t v0;

  sub_23DF14E0C();
  sub_23DF15478();
  sub_23DF14E3C();
  v0 = sub_23DF154A8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23DE8F530(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23DF14E0C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23DE8F56C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_23DF14DF4();
  *a2 = 0;
  return result;
}

uint64_t sub_23DE8F5E0(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_23DF14E00();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_23DE8F65C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_23DF14E0C();
  v2 = sub_23DF14DE8();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DE8F6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_23DF14E0C();
  v2 = v1;
  if (v0 == sub_23DF14E0C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23DF15400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_23DE8F72C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DF14E0C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23DE8F754()
{
  sub_23DE8F998(&qword_256D0E2A0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23DF1621C);
  sub_23DE8F998(&qword_256D0E2A8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23DF16170);
  return sub_23DF152E0();
}

uint64_t sub_23DE8F7D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DF14DE8();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DE8F81C()
{
  sub_23DE8F998((unint64_t *)&qword_256D0E2B0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_23DF16260);
  sub_23DE8F998(&qword_256D0E2B8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_23DF1605C);
  return sub_23DF152E0();
}

uint64_t sub_23DE8F8A0()
{
  return 3;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242648388](a1, v6, a5);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_23DE8F8FC(a1, &qword_256D0E260);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_23DE8F8FC(a1, &qword_256D0E268);
}

void sub_23DE8F8FC(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_23DE8F940()
{
  return sub_23DE8F998(&qword_256D0E270, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_23DF16020);
}

uint64_t sub_23DE8F96C()
{
  return sub_23DE8F998(&qword_256D0E278, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_23DF15FF4);
}

uint64_t sub_23DE8F998(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2426483D0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DE8F9D8()
{
  return sub_23DE8F998(&qword_256D0E280, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23DF16134);
}

uint64_t sub_23DE8FA04()
{
  return sub_23DE8F998(&qword_256D0E288, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23DF16108);
}

uint64_t sub_23DE8FA30()
{
  return sub_23DE8F998(&qword_256D0E290, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23DF161A4);
}

uint64_t sub_23DE8FA5C()
{
  return sub_23DE8F998(&qword_256D0E298, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_23DF16090);
}

uint64_t InputSignalAnchor.isEqual(to:)()
{
  return sub_23DF14DDC() & 1;
}

uint64_t dispatch thunk of InputSignalAnchor.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of InputSignalAnchor.merged(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of InputSignalAnchor.hasDifference(from:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t sub_23DE8FADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE v23[40];

  v9 = sub_23DF150F4();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = &v23[-v13 - 8];
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12, v16);
  v18 = &v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_23DE902F4(a1, (uint64_t)v23);
  sub_23DE90254(0, qword_25432C070);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v19)
  {
    v20(v14, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, a2);
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 56))(v18, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a2);
  }
  else
  {
    v20(v14, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a4, v4, a2);
  }
}

uint64_t sub_23DE8FC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char v16;
  _BYTE v19[40];

  v4 = sub_23DF150F4();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = &v19[-v8 - 8];
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v7, v11);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_23DE902F4(a1, (uint64_t)v19);
  sub_23DE90254(0, qword_25432C070);
  v14 = swift_dynamicCast();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v14)
  {
    v15(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, a2);
    v16 = sub_23DF14DDC();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a2);
  }
  else
  {
    v15(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_23DE8FDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  _BYTE v54[40];

  v50 = a1;
  v51 = (char *)a2;
  v47 = sub_23DF150F4();
  v49 = *(_QWORD *)(v47 - 8);
  v7 = MEMORY[0x24BDAC7A8](v47, v6);
  v48 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7, v9);
  v12 = (char *)&v45 - v11;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10, v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = sub_23DF150F4();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v23 = (char *)&v45 - v22;
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v21, v25);
  v27 = (char *)&v45 - v26;
  sub_23DE902F4((uint64_t)v51, (uint64_t)v54);
  sub_23DE90254(0, (unint64_t *)&qword_25432C280);
  v28 = swift_dynamicCast();
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (!v28)
  {
    v29(v23, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
LABEL_9:
    v42 = 0;
    return v42 & 1;
  }
  v30 = a3;
  v51 = v16;
  v32 = v48;
  v31 = v49;
  v29(v23, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v27, v23, AssociatedTypeWitness);
  sub_23DE901AC(v50, (uint64_t)&v52);
  if (!v53)
  {
    sub_23DE902A0((uint64_t)&v52);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v32, 1, 1, a3);
    v43 = v27;
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 64))(v32, v27, a3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v47);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v43, AssociatedTypeWitness);
    return v42 & 1;
  }
  v50 = v24;
  v33 = v27;
  sub_23DE902DC(&v52, (uint64_t)v54);
  sub_23DE902F4((uint64_t)v54, (uint64_t)&v52);
  sub_23DE90254(0, qword_25432C070);
  v34 = v12;
  v35 = v30;
  v36 = swift_dynamicCast();
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v38 = v47;
  if (!v36)
  {
    v37(v34, 1, 1, v35);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v38);
    goto LABEL_9;
  }
  v39 = v13;
  v37(v34, 0, 1, v35);
  v40 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v41 = (uint64_t)v51;
  v40(v51, v34, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v32, v41, v35);
  v37(v32, 0, 1, v35);
  v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 64))(v32, v33, v35);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v38);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v33, AssociatedTypeWitness);
  return v42 & 1;
}

uint64_t sub_23DE901AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE901F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DE901F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D450)
  {
    sub_23DE90254(255, qword_25432C070);
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D450);
  }
}

uint64_t sub_23DE90254(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23DE902A0(uint64_t a1)
{
  uint64_t v2;

  sub_23DE901F0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DE902DC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23DE902F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

__n128 SecureCodingValueAnchor.init(identifier:value:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3;
  __n128 result;

  v3 = a1->n128_u64[1];
  a3->n128_u64[0] = a1->n128_u64[0];
  a3->n128_u64[1] = v3;
  result = a1[1];
  a3[1] = result;
  a3[2].n128_u64[0] = a2;
  return result;
}

uint64_t SecureCodingValueAnchor.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id SecureCodingValueAnchor.value.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t SecureCodingValueAnchor.hasDifference(from:for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  char v10;
  char v11;

  v2 = a1[1];
  if (v2)
  {
    v3 = *(void **)(v1 + 32);
    v5 = a1[3];
    v4 = (void *)a1[4];
    v6 = a1[2];
    v7 = *a1;
    sub_23DE9043C(*a1, v2, v6, v5, v4);
    v8 = v3;
    v9 = v4;
    v10 = sub_23DF150E8();
    sub_23DE90474(v7, v2, v6, v5, v4);

    v11 = v10 ^ 1;
  }
  else
  {
    v11 = 1;
  }
  return v11 & 1;
}

uint64_t sub_23DE9043C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    v6 = a5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23DE90474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SecureCodingValueAnchor.merged(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = (void *)v1[4];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v5;
  a1[3] = v4;
  a1[4] = v6;
  swift_bridgeObjectRetain();
  v7 = v6;
  return swift_bridgeObjectRetain();
}

BOOL sub_23DE904E8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23DE904F8()
{
  return sub_23DF15484();
}

uint64_t sub_23DE9051C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DE90610()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DE90654(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x696669746E656469;
}

BOOL sub_23DE9068C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23DE904E8(*a1, *a2);
}

uint64_t sub_23DE90698()
{
  return sub_23DE90610();
}

uint64_t sub_23DE906A0()
{
  return sub_23DE904F8();
}

uint64_t sub_23DE906A8()
{
  sub_23DF15478();
  sub_23DE904F8();
  return sub_23DF154A8();
}

uint64_t sub_23DE906E4()
{
  char *v0;

  return sub_23DE90654(*v0);
}

uint64_t sub_23DE906EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE9051C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DE90710@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DE913F8();
  *a1 = result;
  return result;
}

uint64_t sub_23DE90738(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF16498, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DE9076C(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF16498, a1);
  return sub_23DF154D8();
}

void SecureCodingValueAnchor.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v28 = a5;
  v6 = type metadata accessor for SecureCodingValueAnchor.CodingKeys(255, a2, a3, a4);
  MEMORY[0x2426483D0](&unk_23DF16498, v6);
  v7 = sub_23DF15340();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v26 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = v29;
  sub_23DF154B4();
  if (v11)
    goto LABEL_3;
  v12 = v8;
  v34 = 1;
  sub_23DE90AC4();
  sub_23DF15334();
  v13 = v7;
  v29 = v10;
  v15 = v30;
  v14 = v31;
  sub_23DE90F5C(0, (unint64_t *)&qword_25432D9A0);
  v16 = sub_23DF15028();
  v17 = (void *)v16;
  v26 = v15;
  v27 = v14;
  if (!v16)
  {
    LOBYTE(v30) = 1;
    sub_23DF151CC();
    swift_allocError();
    MEMORY[0x2426483D0](MEMORY[0x24BEE33F8], v13);
    v20 = v29;
    sub_23DF151C0();
    swift_willThrow();
    sub_23DE90B08(v26, v27);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v13);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }
  v34 = 0;
  sub_23DE90B4C();
  v18 = v17;
  v19 = v29;
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v13);
  sub_23DE90B08(v26, v27);
  v22 = v30;
  v21 = v31;
  v24 = v32;
  v23 = v33;
  swift_bridgeObjectRetain();
  v25 = v28;
  *v28 = v22;
  v25[1] = v21;
  v25[2] = v24;
  v25[3] = v23;
  v25[4] = (uint64_t)v18;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SecureCodingValueAnchor.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingValueAnchor.CodingKeys);
}

unint64_t sub_23DE90AC4()
{
  unint64_t result;

  result = qword_25432D2D0;
  if (!qword_25432D2D0)
  {
    result = MEMORY[0x2426483D0](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_25432D2D0);
  }
  return result;
}

uint64_t sub_23DE90B08(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_23DE90B4C()
{
  unint64_t result;

  result = qword_25432E210;
  if (!qword_25432E210)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for InputSignalIdentifier, &type metadata for InputSignalIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432E210);
  }
  return result;
}

uint64_t SecureCodingValueAnchor.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for SecureCodingValueAnchor.CodingKeys(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x2426483D0](&unk_23DF16498, v6);
  v28 = sub_23DF153A0();
  v7 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v23 - v8;
  v10 = *v4;
  v11 = v4[1];
  v23 = v4[2];
  v24 = v10;
  v12 = v4[4];
  v25 = v4[3];
  v26 = (unint64_t)v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DF154C0();
  v13 = (void *)objc_opt_self();
  v30 = 0;
  v14 = objc_msgSend(v13, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v12, 1, &v30);
  v15 = v30;
  if (v14)
  {
    v16 = (void *)sub_23DF14BCC();
    v18 = v17;

    v30 = v16;
    v31 = v18;
    v29 = 1;
    sub_23DE90E10();
    v19 = v27;
    v20 = v28;
    sub_23DF15388();
    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
      return sub_23DE90B08((uint64_t)v16, v18);
    }
    else
    {
      v30 = v24;
      v31 = v26;
      v32 = v23;
      v33 = v25;
      v29 = 0;
      sub_23DE90E54();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DF15388();
      sub_23DE90B08((uint64_t)v16, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v20);
    }
  }
  else
  {
    v22 = v15;
    sub_23DF14B78();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v28);
  }
}

unint64_t sub_23DE90E10()
{
  unint64_t result;

  result = qword_25432D2C0;
  if (!qword_25432D2C0)
  {
    result = MEMORY[0x2426483D0](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_25432D2C0);
  }
  return result;
}

unint64_t sub_23DE90E54()
{
  unint64_t result;

  result = qword_25432E1F0;
  if (!qword_25432E1F0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for InputSignalIdentifier, &type metadata for InputSignalIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432E1F0);
  }
  return result;
}

uint64_t static SecureCodingValueAnchor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_23DF15400() & 1) == 0)
    return 0;
  sub_23DE90F5C(0, (unint64_t *)&qword_25432D9E0);
  return sub_23DF150E8() & 1;
}

void sub_23DE90F28(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  SecureCodingValueAnchor.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_23DE90F44(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SecureCodingValueAnchor.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_23DE90F5C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_23DE90F98()
{
  unint64_t result;

  result = qword_256D0E320;
  if (!qword_256D0E320)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for IdentityConfiguration, &type metadata for IdentityConfiguration);
    atomic_store(result, (unint64_t *)&qword_256D0E320);
  }
  return result;
}

uint64_t sub_23DE90FDC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingValueAnchor<A>);
  a1[2] = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingValueAnchor<A>, a2);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingValueAnchor<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ExecutorIdentifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void sub_23DE91064(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *sub_23DE91094(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

_QWORD *sub_23DE910E4(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[4];
  v5 = (void *)a1[4];
  a1[4] = v4;
  v6 = v4;

  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_23DE91178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t sub_23DE911CC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23DE91214(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SecureCodingValueAnchor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingValueAnchor);
}

uint64_t sub_23DE91268()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for ExecutorIdentifier.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23DE91300(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DE9134C + 4 * byte_23DF162E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DE91380 + 4 * byte_23DF162E0[v4]))();
}

uint64_t sub_23DE91380(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE91388(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE91390);
  return result;
}

uint64_t sub_23DE9139C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE913A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DE913A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE913B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23DE913BC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void sub_23DE913C8()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DE913D8()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DE913E8()
{
  JUMPOUT(0x2426483D0);
}

uint64_t sub_23DE913F8()
{
  return 2;
}

uint64_t ScopedExecutorIdentifier.provider.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ScopedExecutorIdentifier.provider.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ScopedExecutorIdentifier.provider.modify())()
{
  return nullsub_1;
}

uint64_t ScopedExecutorIdentifier.executor.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[3];
  v4 = v1[4];
  v3 = v1[5];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 ScopedExecutorIdentifier.executor.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*ScopedExecutorIdentifier.executor.modify())()
{
  return nullsub_1;
}

void __swiftcall ScopedExecutorIdentifier.init(provider:executor:)(HealthOrchestration::ScopedExecutorIdentifier *__return_ptr retstr, Swift::String provider, HealthOrchestration::ExecutorIdentifier executor)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)executor.value._countAndFlagsBits;
  v4 = *(void **)(executor.value._countAndFlagsBits + 8);
  retstr->provider = provider;
  retstr->executor.value._countAndFlagsBits = v3;
  retstr->executor.value._object = v4;
  retstr->executor.logDescription = *(Swift::String_optional *)(executor.value._countAndFlagsBits + 16);
}

uint64_t ScopedExecutorIdentifier.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  if (!v1)
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return 60;
}

uint64_t static ExecutorIdentifier.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 0;
  else
    return sub_23DF15400();
}

uint64_t static ExecutorIdentifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23DF15400();
}

uint64_t ScopedExecutorIdentifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ScopedExecutorIdentifier.hashValue.getter()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DE91798(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_23DE917DC(v7, v8) & 1;
}

uint64_t sub_23DE917DC(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (*a2 != *a1 || a2[1] != a1[1])
  {
    if ((sub_23DF15400() & 1) != 0)
    {
      v5 = 0;
      return v5 & 1;
    }
    v5 = 1;
    if ((sub_23DF15400() & 1) != 0)
      return v5 & 1;
  }
  if (a2[2] == a1[2] && a2[3] == a1[3])
    v5 = 1;
  else
    v5 = sub_23DF15400() ^ 1;
  return v5 & 1;
}

uint64_t sub_23DE91898(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_23DE918DC(v7, v8) & 1;
}

uint64_t sub_23DE918DC(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (*a1 != *a2 || a1[1] != a2[1])
  {
    if ((sub_23DF15400() & 1) != 0)
    {
      v5 = 0;
      return v5 & 1;
    }
    v5 = 1;
    if ((sub_23DF15400() & 1) != 0)
      return v5 & 1;
  }
  if (a1[2] == a2[2] && a1[3] == a2[3])
    v5 = 1;
  else
    v5 = sub_23DF15400() ^ 1;
  return v5 & 1;
}

uint64_t sub_23DE91998(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_23DE919DC(v7, v8) & 1;
}

uint64_t sub_23DE919DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v5;

  if (*a2 == *a1 && a2[1] == a1[1])
    goto LABEL_7;
  v5 = 1;
  if ((sub_23DF15400() & 1) == 0)
  {
    if ((sub_23DF15400() & 1) != 0)
      return 0;
LABEL_7:
    if (a2[2] != a1[2] || a2[3] != a1[3])
      return sub_23DF15400();
    return 0;
  }
  return v5;
}

uint64_t sub_23DE91AA0()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DE91B40()
{
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE91BC4()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t ExecutorIdentifier.value.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExecutorIdentifier.value.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ExecutorIdentifier.value.modify())()
{
  return nullsub_1;
}

uint64_t ExecutorIdentifier.logDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExecutorIdentifier.logDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ExecutorIdentifier.logDescription.modify())()
{
  return nullsub_1;
}

HealthOrchestration::ExecutorIdentifier __swiftcall ExecutorIdentifier.init(_:logDescription:)(Swift::String _, Swift::String_optional logDescription)
{
  Swift::String_optional *v2;
  HealthOrchestration::ExecutorIdentifier result;

  v2->value = _;
  v2[1] = logDescription;
  result.logDescription = logDescription;
  result.value = _;
  return result;
}

BOOL sub_23DE91D50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23DE91D68()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DE91DAC()
{
  return sub_23DF15484();
}

uint64_t sub_23DE91DD4()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DE91E14()
{
  _BYTE *v0;

  if (*v0)
    return 0x7263736544676F6CLL;
  else
    return 0x65756C6176;
}

uint64_t sub_23DE91E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE92E18(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DE91E7C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23DE91E88()
{
  sub_23DE92650();
  return sub_23DF154CC();
}

uint64_t sub_23DE91EB0()
{
  sub_23DE92650();
  return sub_23DF154D8();
}

uint64_t ExecutorIdentifier.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  char v13;

  sub_23DE92694(0, &qword_256D0E370, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v11 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v11[1] = *(_QWORD *)(v1 + 24);
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DE92650();
  sub_23DF154C0();
  v13 = 0;
  v9 = v11[3];
  sub_23DF15364();
  if (!v9)
  {
    v12 = 1;
    sub_23DF1534C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ExecutorIdentifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  sub_23DE92694(0, &qword_256D0E380, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DE92650();
  sub_23DF154B4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v21 = 0;
    v11 = sub_23DF15310();
    v13 = v12;
    v20 = 1;
    swift_bridgeObjectRetain();
    v14 = sub_23DF152F8();
    v16 = v15;
    v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18 = v14;
    v17(v9, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v11;
    a2[1] = v13;
    a2[2] = v18;
    a2[3] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE921C8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ExecutorIdentifier.init(from:)(a1, a2);
}

uint64_t sub_23DE921DC(_QWORD *a1)
{
  return ExecutorIdentifier.encode(to:)(a1);
}

HealthOrchestration::ExecutorIdentifier __swiftcall ExecutorIdentifier.init(stringLiteral:)(Swift::String stringLiteral)
{
  Swift::String *v1;
  HealthOrchestration::ExecutorIdentifier result;

  *v1 = stringLiteral;
  v1[1]._countAndFlagsBits = 0;
  v1[1]._object = 0;
  result.value = stringLiteral;
  return result;
}

uint64_t sub_23DE92200()
{
  return sub_23DF1540C();
}

_QWORD *sub_23DE92214@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  a2[2] = 0;
  a2[3] = 0;
  return result;
}

uint64_t ExecutorIdentifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  return swift_bridgeObjectRelease();
}

uint64_t ExecutorIdentifier.hashValue.getter()
{
  sub_23DF15478();
  sub_23DF14E3C();
  return sub_23DF154A8();
}

uint64_t sub_23DE922B0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23DF15400();
}

uint64_t sub_23DE922E0()
{
  sub_23DF15478();
  sub_23DF14E3C();
  return sub_23DF154A8();
}

uint64_t sub_23DE92328()
{
  return sub_23DF14E3C();
}

uint64_t sub_23DE92330()
{
  sub_23DF15478();
  sub_23DF14E3C();
  return sub_23DF154A8();
}

uint64_t ExecutorIdentifier.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  if (v0[3])
  {
    v1 = v0[2];
  }
  else
  {
    v1 = *v0;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23DE923C4()
{
  uint64_t *v0;
  uint64_t v1;

  if (v0[3])
  {
    v1 = v0[2];
  }
  else
  {
    v1 = *v0;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23DE92414(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 0;
  else
    return sub_23DF15400();
}

uint64_t sub_23DE92444(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = sub_23DF15400() ^ 1;
  return v7 & 1;
}

uint64_t sub_23DE92480(_QWORD *a1, _QWORD *a2)
{
  char v3;

  if (*a1 == *a2 && a1[1] == a2[1])
    v3 = 1;
  else
    v3 = sub_23DF15400() ^ 1;
  return v3 & 1;
}

uint64_t sub_23DE924C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return sub_23DF15400();
}

uint64_t _s19HealthOrchestration24ScopedExecutorIdentifierV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_23DF15400(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_23DF15400();
  }
  return result;
}

uint64_t _s19HealthOrchestration24ScopedExecutorIdentifierV1loiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1])
    goto LABEL_7;
  v7 = 1;
  if ((sub_23DF15400() & 1) == 0)
  {
    if ((sub_23DF15400() & 1) != 0)
      return 0;
LABEL_7:
    if (v2 != v4 || v3 != v5)
      return sub_23DF15400();
    return 0;
  }
  return v7;
}

unint64_t sub_23DE92650()
{
  unint64_t result;

  result = qword_256D0E378;
  if (!qword_256D0E378)
  {
    result = MEMORY[0x2426483D0](&unk_23DF16918, &type metadata for ExecutorIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0E378);
  }
  return result;
}

void sub_23DE92694(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DE92650();
    v7 = a3(a1, &type metadata for ExecutorIdentifier.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DE926F4()
{
  unint64_t result;

  result = qword_25432D720;
  if (!qword_25432D720)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ScopedExecutorIdentifier, &type metadata for ScopedExecutorIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432D720);
  }
  return result;
}

unint64_t sub_23DE9273C()
{
  unint64_t result;

  result = qword_25432E130;
  if (!qword_25432E130)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ExecutorIdentifier, &type metadata for ExecutorIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432E130);
  }
  return result;
}

uint64_t sub_23DE92780()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_23DE92790()
{
  unint64_t result;

  result = qword_25432E120;
  if (!qword_25432E120)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ExecutorIdentifier, &type metadata for ExecutorIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432E120);
  }
  return result;
}

uint64_t sub_23DE927D4()
{
  return MEMORY[0x24BEE3968];
}

unint64_t sub_23DE927E4()
{
  unint64_t result;

  result = qword_25432E128;
  if (!qword_25432E128)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ExecutorIdentifier, &type metadata for ExecutorIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432E128);
  }
  return result;
}

uint64_t sub_23DE92828()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_23DE92834()
{
  return MEMORY[0x24BEE0D88];
}

unint64_t sub_23DE92844()
{
  unint64_t result;

  result = qword_256D0E388;
  if (!qword_256D0E388)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ExecutorIdentifier, &type metadata for ExecutorIdentifier);
    atomic_store(result, (unint64_t *)&qword_256D0E388);
  }
  return result;
}

uint64_t destroy for ScopedExecutorIdentifier()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ScopedExecutorIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ScopedExecutorIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for ScopedExecutorIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScopedExecutorIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScopedExecutorIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScopedExecutorIdentifier()
{
  return &type metadata for ScopedExecutorIdentifier;
}

uint64_t dispatch thunk of Executor.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Executor.planner(signals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Executor.run(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t destroy for ExecutorIdentifier()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ExecutorIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ExecutorIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ExecutorIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutorIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutorIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutorIdentifier()
{
  return &type metadata for ExecutorIdentifier;
}

uint64_t storeEnumTagSinglePayload for ExecutorIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DE92CC0 + 4 * byte_23DF164F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DE92CF4 + 4 * byte_23DF164F0[v4]))();
}

uint64_t sub_23DE92CF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE92CFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE92D04);
  return result;
}

uint64_t sub_23DE92D10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE92D18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DE92D1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE92D24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutorIdentifier.CodingKeys()
{
  return &type metadata for ExecutorIdentifier.CodingKeys;
}

unint64_t sub_23DE92D44()
{
  unint64_t result;

  result = qword_256D0E390;
  if (!qword_256D0E390)
  {
    result = MEMORY[0x2426483D0](&unk_23DF168F0, &type metadata for ExecutorIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0E390);
  }
  return result;
}

unint64_t sub_23DE92D8C()
{
  unint64_t result;

  result = qword_256D0E398;
  if (!qword_256D0E398)
  {
    result = MEMORY[0x2426483D0](&unk_23DF16860, &type metadata for ExecutorIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0E398);
  }
  return result;
}

unint64_t sub_23DE92DD4()
{
  unint64_t result;

  result = qword_256D0E3A0;
  if (!qword_256D0E3A0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF16888, &type metadata for ExecutorIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0E3A0);
  }
  return result;
}

uint64_t sub_23DE92E18(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7263736544676F6CLL && a2 == 0xEE006E6F69747069)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t static EnvironmentalStateDescription.deviceUnlocked()@<X0>(unint64_t *a1@<X8>)
{
  return sub_23DE93E80((uint64_t)&unk_250EADD78, a1);
}

void sub_23DE92F34()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432D8A8)
  {
    sub_23DE95B00(255, (unint64_t *)&qword_25432C210, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432D8A8);
  }
}

unint64_t static DeviceLockStateComponent.identifier.getter()
{
  return 0xD000000000000022;
}

unint64_t sub_23DE92FCC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE95B00(0, &qword_256D0E3B0, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_23DF152BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_23DE946E8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE930F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE95B00(0, qword_25432DAB0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_23DF152BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23DE946E8(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE93224(uint64_t a1)
{
  return sub_23DE93604(a1, (void (*)(_QWORD))sub_23DE95A84, (uint64_t (*)(uint64_t, uint64_t))sub_23DE946E8);
}

unint64_t sub_23DE93238(uint64_t a1)
{
  return sub_23DE9324C(a1, (unint64_t *)&unk_25432DAD0, (uint64_t (*)(uint64_t))sub_23DE95A68);
}

unint64_t sub_23DE9324C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE95A00(0, a2, a3, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v4 = (_QWORD *)sub_23DF152BC();
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23DE946E8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE93368(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE954A8();
  v2 = sub_23DF152BC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23DE955B4(v6, (uint64_t)&v17);
    v7 = v17;
    v8 = v18;
    v9 = v19;
    v10 = v20;
    result = sub_23DEA6458(v17, v18, v19, v20);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v13 = (uint64_t *)(v3[6] + 32 * result);
    *v13 = v7;
    v13[1] = v8;
    v13[2] = v9;
    v13[3] = v10;
    result = sub_23DE902DC(&v21, v3[7] + 40 * result);
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v3[2] = v16;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE934A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE957C4();
  v2 = (_QWORD *)sub_23DF152BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 80);
  while (1)
  {
    v5 = *(v4 - 5);
    v6 = *(v4 - 4);
    v7 = *(v4 - 3);
    v9 = *(v4 - 2);
    v8 = *(v4 - 1);
    v10 = *v4;
    *(_QWORD *)&v18 = *(v4 - 6);
    *((_QWORD *)&v18 + 1) = v5;
    *(_QWORD *)&v19 = v6;
    *((_QWORD *)&v19 + 1) = v7;
    *(_QWORD *)&v20 = v9;
    *((_QWORD *)&v20 + 1) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23DEA64E4((uint64_t)&v18);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (_OWORD *)(v2[6] + 48 * result);
    v14 = v19;
    *v13 = v18;
    v13[1] = v14;
    v13[2] = v20;
    *(_QWORD *)(v2[7] + 8 * result) = v10;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4 += 7;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE935F0(uint64_t a1)
{
  return sub_23DE93604(a1, (void (*)(_QWORD))sub_23DE951B8, (uint64_t (*)(uint64_t, uint64_t))sub_23DE946E8);
}

unint64_t sub_23DE93604(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  a2(0);
  v5 = (_QWORD *)sub_23DF152BC();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = a3(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (_QWORD *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE9371C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE95B00(0, &qword_256D0E3A8, MEMORY[0x24BEE3F88], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_23DF152BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_23DE946E8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE93840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  sub_23DE956BC(0, (unint64_t *)&qword_256D0EB30, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)v26 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE9572C(0, &qword_256D0E420, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v8 = sub_23DF152BC();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = &v7[*(int *)(v3 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v26[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_23DE95670(v14, (uint64_t)v7, (uint64_t)&qword_256D0EB30, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DE956BC);
    result = sub_23DEA63B4((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = sub_23DF14BA8();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    v21 = v9[7];
    v22 = sub_23DF14BF0();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v18, v11, v22);
    v23 = v9[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v9[2] = v25;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE93A1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  sub_23DE956BC(0, (unint64_t *)&unk_256D0E400, (void (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal.Presenter);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)v24 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE9572C(0, (unint64_t *)&unk_256D0EE80, (void (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal.Presenter);
  v8 = sub_23DF152BC();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = *(int *)(v3 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_23DE95670(v14, (uint64_t)v7, (uint64_t)&unk_256D0E400, (uint64_t)type metadata accessor for FileCoordinatorInputSignal.Presenter, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DE956BC);
    result = sub_23DEA63B4((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = sub_23DF14BA8();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v7[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE93BD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  v2 = MEMORY[0x24BEE4AD8] + 8;
  sub_23DE95B00(0, &qword_256D0E3F0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v3 = sub_23DF152BC();
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23DE95670(v7, (uint64_t)&v16, (uint64_t)&qword_256D0E3F8, v2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DE953EC);
    v8 = v16;
    v9 = v17;
    result = sub_23DE946E8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_23DE9543C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE93D3C(uint64_t a1)
{
  return sub_23DE9324C(a1, &qword_25432DAE0, (uint64_t (*)(uint64_t))sub_23DE9544C);
}

unint64_t sub_23DE93D50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE95140();
  v2 = (_QWORD *)sub_23DF152BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v13 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = sub_23DE946E8(v5, v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t static EnvironmentalStateDescription.firstUnlock()@<X0>(unint64_t *a1@<X8>)
{
  return sub_23DE93E80((uint64_t)&unk_250EADDB8, a1);
}

unint64_t sub_23DE93E80@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t inited;
  unint64_t v5;
  unint64_t result;

  sub_23DE95234(0, &qword_25432DB80, (uint64_t (*)(uint64_t))sub_23DE92F34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16970;
  *(_QWORD *)(inited + 32) = 0xD000000000000022;
  *(_QWORD *)(inited + 40) = 0x800000023DF1C230;
  *(_QWORD *)(inited + 48) = sub_23DE930F0(a1);
  v5 = sub_23DE93604(inited, (void (*)(_QWORD))sub_23DE95A84, (uint64_t (*)(uint64_t, uint64_t))sub_23DE946E8);
  result = sub_23DE9324C(MEMORY[0x24BEE4AF8], (unint64_t *)&unk_25432DAD0, (uint64_t (*)(uint64_t))sub_23DE95A68);
  *a2 = v5;
  a2[1] = result;
  return result;
}

unint64_t static DeviceLockStateComponent.HasPerformedFirstUnlockKey.getter()
{
  return 0xD000000000000017;
}

uint64_t static DeviceLockStateComponent.LockStateKey.getter()
{
  return 0x746174536B636F4CLL;
}

_QWORD *DeviceLockStateComponent.__allocating_init(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  type metadata accessor for DeviceLockStateComponent.LockStateObserverShim();
  v4 = swift_allocObject();
  v5 = (_QWORD *)swift_allocObject();
  v6 = sub_23DE94AE8(a1, a2, v4, v5);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t type metadata accessor for DeviceLockStateComponent.LockStateObserverShim()
{
  return objc_opt_self();
}

_QWORD *DeviceLockStateComponent.__allocating_init(observer:shim:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  v10 = sub_23DE94FC8(a1, a2, v9, v3, v7, v8);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v10;
}

_QWORD *DeviceLockStateComponent.init(observer:shim:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x24BDAC7A8](v9, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_23DE94D64(a1, a2, (uint64_t)v11, v3, v7, v8);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

void sub_23DE94154(int *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[6];

  v5 = a2[3];
  v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
  v7 = *(NSObject **)(a3 + 24);
  v8 = swift_allocObject();
  swift_weakInit();
  v11[4] = sub_23DE959E0;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DEFD240;
  v11[3] = &block_descriptor;
  v9 = _Block_copy(v11);
  swift_release();
  v10 = sub_23DF14E24();
  swift_bridgeObjectRelease();
  notify_register_dispatch((const char *)(v10 + 32), a1, v7, v9);
  swift_release();
  _Block_release(v9);
}

uint64_t sub_23DE94270()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  unint64_t v4;
  void (*v5)(unint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t);

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 40);
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    v4 = DeviceLockStateComponent.currentState.getter();
    v5 = *(void (**)(unint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v2 + 8);
    swift_retain();
    v5(v4, v1, &protocol witness table for DeviceLockStateComponent, ObjectType, v2);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  return result;
}

unint64_t DeviceLockStateComponent.currentState.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  v1 = v0[9];
  v2 = v0[10];
  __swift_project_boxed_opaque_existential_1(v0 + 6, v1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2) & 1) == 0)
    return sub_23DE930F0((uint64_t)&unk_250EADDF8);
  sub_23DE95080();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16980;
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x800000023DF1C060;
  *(_QWORD *)(inited + 48) = 5457241;
  *(_QWORD *)(inited + 56) = 0xE300000000000000;
  *(_QWORD *)(inited + 64) = 0x746174536B636F4CLL;
  *(_QWORD *)(inited + 72) = 0xE900000000000065;
  v5 = v0[9];
  v4 = v0[10];
  __swift_project_boxed_opaque_existential_1(v0 + 6, v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  v7 = 0x64656B636F6CLL;
  if ((v6 & 1) != 0)
    v7 = 0x64656B636F6C6E75;
  v8 = 0xE600000000000000;
  if ((v6 & 1) != 0)
    v8 = 0xE800000000000000;
  *(_QWORD *)(inited + 80) = v7;
  *(_QWORD *)(inited + 88) = v8;
  return sub_23DE930F0(inited);
}

uint64_t DeviceLockStateComponent.deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int os_unfair_lock_opaque;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1 + 5);
  os_unfair_lock_opaque = v1[4]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque != -1)
    notify_cancel(os_unfair_lock_opaque);
  os_unfair_lock_unlock(v1 + 5);
  swift_release();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  return v0;
}

uint64_t DeviceLockStateComponent.__deallocating_deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int os_unfair_lock_opaque;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1 + 5);
  os_unfair_lock_opaque = v1[4]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque != -1)
    notify_cancel(os_unfair_lock_opaque);
  os_unfair_lock_unlock(v1 + 5);
  swift_release();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  return swift_deallocClassInstance();
}

unint64_t DeviceLockStateComponent.identifier.getter()
{
  return 0xD000000000000022;
}

Swift::Void __swiftcall DeviceLockStateComponent.stopObserving()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int os_unfair_lock_opaque;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1 + 5);
  os_unfair_lock_opaque = v1[4]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque != -1)
    notify_cancel(os_unfair_lock_opaque);
  v1[4]._os_unfair_lock_opaque = -1;
  os_unfair_lock_unlock(v1 + 5);
}

uint64_t sub_23DE945C4(_DWORD *a1)
{
  uint64_t result;

  result = *a1;
  if ((_DWORD)result != -1)
    result = notify_cancel(result);
  *a1 = -1;
  return result;
}

uint64_t sub_23DE94600()
{
  return swift_deallocClassInstance();
}

BOOL sub_23DE94610()
{
  return (int)MKBDeviceUnlockedSinceBoot() > 0;
}

uint64_t sub_23DE9462C()
{
  unsigned int v0;

  v0 = MKBGetDeviceLockState();
  return (v0 < 4) & (9u >> (v0 & 0xF));
}

unint64_t sub_23DE9465C()
{
  return 0xD000000000000024;
}

unint64_t sub_23DE94678()
{
  return 0xD000000000000022;
}

void sub_23DE94698()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_23DE945C4(v2);
  os_unfair_lock_unlock(v3);
}

unint64_t sub_23DE946E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DF15478();
  sub_23DF14E3C();
  v4 = sub_23DF154A8();
  return sub_23DE9474C(a1, a2, v4);
}

unint64_t sub_23DE9474C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23DF15400() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23DF15400() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23DE9482C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DE95388();
    v3 = (_QWORD *)sub_23DF152BC();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_DWORD *)i - 2);
      v6 = *i;
      result = sub_23DEA6424(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_23DE948FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_23DE9528C(0, &qword_256D0E3D8, (void (*)(uint64_t))sub_23DE95334);
  v3 = (_QWORD *)sub_23DF152BC();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_23DEA6424(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_unknownObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_DWORD *)v8 - 2);
    v13 = *v8;
    swift_unknownObjectRetain();
    result = sub_23DEA6424(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_23DE94A08(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DE9528C(0, &qword_256D0E3C8, (void (*)(uint64_t))sub_23DE952E8);
    v3 = (_QWORD *)sub_23DF152BC();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_DWORD *)i - 2);
      v6 = *i;
      result = sub_23DEA6424(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

_QWORD *sub_23DE94AE8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int *v14;
  os_unfair_lock_s *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  v18 = a1;
  v19 = a2;
  v6 = sub_23DF1504C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DF15040();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8]();
  sub_23DF14D34();
  MEMORY[0x24BDAC7A8]();
  v21[3] = type metadata accessor for DeviceLockStateComponent.LockStateObserverShim();
  v21[4] = &off_250EAE9A8;
  v21[0] = a3;
  sub_23DE958C4();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0xFFFFFFFFLL;
  a4[2] = v11;
  sub_23DE95920();
  sub_23DF14D28();
  v20 = MEMORY[0x24BEE4AF8];
  sub_23DE8F998((unint64_t *)&qword_25432D9B0, v10, MEMORY[0x24BEE5698]);
  sub_23DE95234(0, (unint64_t *)&qword_25432D950, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DE9595C();
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5750], v6);
  a4[3] = sub_23DF15064();
  sub_23DE902F4((uint64_t)v21, (uint64_t)(a4 + 6));
  v12 = v19;
  a4[4] = v18;
  a4[5] = v12;
  v13 = (os_unfair_lock_s *)a4[2];
  v14 = (int *)&v13[4];
  v15 = v13 + 5;
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v15);
  sub_23DE94154(v14, v21, (uint64_t)a4);
  os_unfair_lock_unlock(v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return a4;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

_QWORD *sub_23DE94D64(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  os_unfair_lock_s *v18;
  int *v19;
  os_unfair_lock_s *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  v23 = a1;
  v24 = a2;
  v10 = sub_23DF1504C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DF15040();
  MEMORY[0x24BDAC7A8]();
  sub_23DF14D34();
  MEMORY[0x24BDAC7A8]();
  v26[3] = a5;
  v26[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  sub_23DE958C4();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0xFFFFFFFFLL;
  a4[2] = v15;
  sub_23DE95920();
  sub_23DF14D28();
  v25 = MEMORY[0x24BEE4AF8];
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  sub_23DE8F998((unint64_t *)&qword_25432D9B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  sub_23DE95234(0, (unint64_t *)&qword_25432D950, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DE9595C();
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5750], v10);
  a4[3] = sub_23DF15064();
  sub_23DE902F4((uint64_t)v26, (uint64_t)(a4 + 6));
  v17 = v24;
  a4[4] = v23;
  a4[5] = v17;
  v18 = (os_unfair_lock_s *)a4[2];
  v19 = (int *)&v18[4];
  v20 = v18 + 5;
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v20);
  sub_23DE94154(v19, v26, (uint64_t)a4);
  os_unfair_lock_unlock(v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return a4;
}

_QWORD *sub_23DE94FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  return sub_23DE94D64(a1, a2, (uint64_t)v13, v14, a5, a6);
}

void sub_23DE95080()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432C2C0)
  {
    sub_23DE953EC(255, (unint64_t *)&qword_25432D8C0);
    v0 = sub_23DF153D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432C2C0);
  }
}

uint64_t dispatch thunk of DeviceLockStateShim.unlockedSinceBoot.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DeviceLockStateShim.unlocked.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DeviceLockStateShim.notificationName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for DeviceLockStateComponent()
{
  return objc_opt_self();
}

uint64_t method lookup function for DeviceLockStateComponent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeviceLockStateComponent.__allocating_init(observer:shim:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for DeviceLockStateComponent.ProtectedState()
{
  return &type metadata for DeviceLockStateComponent.ProtectedState;
}

void sub_23DE95140()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432C2A8)
  {
    sub_23DE95524(255, qword_25432C180);
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432C2A8);
  }
}

void sub_23DE951B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0E3B8)
  {
    sub_23DE95234(255, (unint64_t *)&qword_256D0E3C0, (uint64_t (*)(uint64_t))type metadata accessor for DebugSnapshot, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0E3B8);
  }
}

void sub_23DE95234(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DE9528C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DF152C8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DE952E8()
{
  unint64_t result;

  result = qword_256D0E3D0;
  if (!qword_256D0E3D0)
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&qword_256D0E3D0);
  }
  return result;
}

unint64_t sub_23DE95334()
{
  unint64_t result;

  result = qword_256D0E3E0;
  if (!qword_256D0E3E0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D0E3E0);
  }
  return result;
}

void sub_23DE95388()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0E3E8)
  {
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0E3E8);
  }
}

void sub_23DE953EC(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

_OWORD *sub_23DE9543C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_23DE9544C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D990)
  {
    v0 = sub_23DF14FA4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D990);
  }
}

void sub_23DE954A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E300)
  {
    sub_23DE95524(255, qword_25432C070);
    sub_23DE95570();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E300);
  }
}

uint64_t sub_23DE95524(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_23DE95570()
{
  unint64_t result;

  result = qword_25432E200;
  if (!qword_25432E200)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for InputSignalIdentifier, &type metadata for InputSignalIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432E200);
  }
  return result;
}

uint64_t sub_23DE955B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE955F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DE955F8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432E218)
  {
    sub_23DE95524(255, qword_25432C070);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432E218);
  }
}

uint64_t sub_23DE95670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_23DE956BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_23DF14BA8();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_23DE9572C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_23DF14BA8();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    a3(255);
    sub_23DE8F998((unint64_t *)&unk_256D0E410, v5, MEMORY[0x24BDCDAF0]);
    v6 = sub_23DF152C8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_23DE957C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DAA8)
  {
    sub_23DE95234(255, (unint64_t *)&unk_25432D8D0, (uint64_t (*)(uint64_t))type metadata accessor for WorkCriteriaRecord, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DE95844();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DAA8);
  }
}

unint64_t sub_23DE95844()
{
  unint64_t result;

  result = qword_25432D718;
  if (!qword_25432D718)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ScopedExecutorIdentifier, &type metadata for ScopedExecutorIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432D718);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_23DE958C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA60)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA60);
  }
}

unint64_t sub_23DE95920()
{
  unint64_t result;

  result = qword_25432C220;
  if (!qword_25432C220)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25432C220);
  }
  return result;
}

unint64_t sub_23DE9595C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25432D960;
  if (!qword_25432D960)
  {
    sub_23DE95234(255, (unint64_t *)&qword_25432D950, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25432D960);
  }
  return result;
}

uint64_t sub_23DE959BC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DE959E0()
{
  return sub_23DE94270();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void sub_23DE95A00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, MEMORY[0x24BEE0D00], v7, MEMORY[0x24BEE0D10]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DE95A68(uint64_t a1)
{
  sub_23DE95A00(a1, (unint64_t *)&unk_25432D890, (uint64_t (*)(uint64_t))sub_23DE9544C, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
}

void sub_23DE95A84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DAC8)
  {
    sub_23DE95B00(255, (unint64_t *)&qword_25432C210, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DAC8);
  }
}

void sub_23DE95B00(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x24BEE0D00], a3, MEMORY[0x24BEE0D10]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t OrchestrationDirector.environment.getter()
{
  return swift_retain();
}

uint64_t OrchestrationDirector.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_logger;
  v4 = sub_23DF14C80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t OrchestrationDirector.__allocating_init(environment:inputSignalProviders:executorProviders:contextProvider:dispatcher:logger:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = swift_allocObject();
  OrchestrationDirector.init(environment:inputSignalProviders:executorProviders:contextProvider:dispatcher:logger:debugIdentifier:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

uint64_t OrchestrationDirector.init(environment:inputSignalProviders:executorProviders:contextProvider:dispatcher:logger:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v10 = v9;
  sub_23DE9B2F8(0, (unint64_t *)&unk_25432DA10);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 44) = 0;
  *(_QWORD *)(v18 + 16) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v18 + 24) = xmmword_23DF16A70;
  *(_WORD *)(v18 + 40) = 0;
  *(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState) = v18;
  *(_QWORD *)(v10 + 16) = a1;
  type metadata accessor for WorkQueue();
  swift_allocObject();
  v19 = swift_retain();
  *(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue) = WorkQueue.init(environment:)(v19);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_inputSignalProviders) = a2;
  *(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_executorProviders) = a3;
  v20 = (_QWORD *)(v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_contextProvider);
  *v20 = a4;
  v20[1] = a5;
  sub_23DE902DC(a6, v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_dispatcher);
  v21 = v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_logger;
  v22 = sub_23DF14C80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a7, v22);
  v23 = (_QWORD *)(v10 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_debugIdentifier);
  *v23 = a8;
  v23[1] = a9;
  return v10;
}

void OrchestrationDirector.start(completion:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t ObjectType;
  _QWORD v13[5];

  v3 = v2;
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 44));
  if (*(_QWORD *)(v6 + 24) == 1)
  {
    *(_QWORD *)(v6 + 24) = a1;
    *(_QWORD *)(v6 + 32) = a2;
    sub_23DE9A5CC((uint64_t)a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 44));
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_dispatcher + 24);
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_dispatcher + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_dispatcher), v7);
    v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue);
    v13[3] = type metadata accessor for WorkQueue();
    v13[4] = &protocol witness table for WorkQueue;
    v13[0] = v9;
    v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 8);
    swift_retain();
    v10(v13, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_contextProvider + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v11 + 32))(v3, &protocol witness table for OrchestrationDirector, ObjectType, v11);
  }
  else
  {
    if (a1)
      a1();
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 44));
  }
}

Swift::Void __swiftcall OrchestrationDirector.stop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 44));
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4AF8];
  sub_23DE9B394(v2);
  *(_OWORD *)(v1 + 24) = xmmword_23DF16A80;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 44));
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_contextProvider + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(ObjectType, v4);
  if (v3 >> 62)
    goto LABEL_21;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    v7 = 0;
    v8 = v3 & 0xC000000000000001;
    v19 = v3 + 32;
    v20 = v3 & 0xFFFFFFFFFFFFFF8;
    v21 = v3 & 0xC000000000000001;
    v22 = v6;
    while (v8)
    {
      v9 = MEMORY[0x242647BF0](v7, v3);
      v10 = __OFADD__(v7++, 1);
      if (v10)
        goto LABEL_19;
LABEL_11:
      v11 = *(os_unfair_lock_s **)(v9 + 64);
      v12 = v11 + 4;
      v13 = v11 + 22;
      os_unfair_lock_lock(v11 + 22);
      sub_23DEBA124(v12, v23);
      os_unfair_lock_unlock(v13);
      if (v23[0])
      {
        v14 = *(_QWORD *)(v23[0] + 16);
        if (v14)
        {
          v15 = v3;
          v16 = v23[0] + 32;
          do
          {
            sub_23DE902F4(v16, (uint64_t)v23);
            v17 = v24;
            v18 = v25;
            __swift_project_boxed_opaque_existential_1(v23, v24);
            (*(void (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
            v16 += 40;
            --v14;
          }
          while (v14);
          swift_release();
          v3 = v15;
          v8 = v21;
          v6 = v22;
        }
        else
        {
          swift_release();
        }
        swift_bridgeObjectRelease();
        if (v7 == v6)
          goto LABEL_22;
      }
      else
      {
        swift_release();
        if (v7 == v6)
          goto LABEL_22;
      }
    }
    if (v7 >= *(_QWORD *)(v20 + 16))
      goto LABEL_20;
    v9 = *(_QWORD *)(v19 + 8 * v7);
    swift_retain();
    v10 = __OFADD__(v7++, 1);
    if (!v10)
      goto LABEL_11;
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    v6 = sub_23DF15298();
    swift_bridgeObjectRelease();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

uint64_t OrchestrationDirector.paused.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v2 = (os_unfair_lock_s *)(v1 + 44);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 44));
  v3 = *(unsigned __int8 *)(v1 + 40);
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall OrchestrationDirector.pause()()
{
  sub_23DE964FC((void (*)(os_unfair_lock_s *, uint64_t))sub_23DE9617C);
}

void sub_23DE9617C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;

  v2 = v1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return;
  v3 = (uint64_t *)a1;
  *(_BYTE *)(a1 + 24) = 1;
  if (*(_QWORD *)(a1 + 8) != 2)
    return;
  if (*(_QWORD *)a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  swift_retain_n();
  v4 = sub_23DF14C68();
  v5 = sub_23DF1501C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v16 = v7;
    *(_DWORD *)v6 = 136315394;
    swift_retain();
    sub_23DF15190();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_release();
    sub_23DEC1518(0xD000000000000018, 0x800000023DF1C360, &v16);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2048;
    sub_23DF15100();
    _os_log_impl(&dword_23DE8B000, v4, v5, "%s: Pausing (%ld orchestrators).", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242648490](v7, -1, -1);
    MEMORY[0x242648490](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v8 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v3 = *(uint64_t **)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_9;
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain_n();
  v3 = (uint64_t *)sub_23DF15298();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_17;
LABEL_9:
  v9 = 4;
  while (1)
  {
    v10 = v9 - 4;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = (uint64_t *)MEMORY[0x242647BF0](v9 - 4, v8);
      v12 = (uint64_t *)(v9 - 3);
      if (__OFADD__(v10, 1))
        goto LABEL_19;
    }
    else
    {
      v11 = *(uint64_t **)(v8 + 8 * v9);
      swift_retain();
      v12 = (uint64_t *)(v9 - 3);
      if (__OFADD__(v10, 1))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    v13 = (os_unfair_lock_s *)v11[8];
    v14 = (uint64_t)&v13[4];
    v15 = v13 + 22;
    os_unfair_lock_lock(v13 + 22);
    sub_23DEB6B18(v14, v11);
    if (v2)
      break;
    v2 = 0;
    os_unfair_lock_unlock(v15);
    swift_release();
    ++v9;
    if (v12 == v3)
      goto LABEL_17;
  }
  os_unfair_lock_unlock(v15);
  __break(1u);
}

Swift::Void __swiftcall OrchestrationDirector.resume()()
{
  sub_23DE964FC((void (*)(os_unfair_lock_s *, uint64_t))sub_23DE96558);
}

void sub_23DE964FC(void (*a1)(os_unfair_lock_s *, uint64_t))
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v4 = v3 + 4;
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  a1(v4, v1);
  os_unfair_lock_unlock(v5);
}

void sub_23DE96558(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  Swift::OpaquePointer v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;

  v2 = v1;
  if (*(_BYTE *)(a1 + 24) != 1)
    return;
  v3 = a1;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_QWORD *)(a1 + 8) != 2)
    return;
  if (*(_QWORD *)a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v4 = (void *)sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(void **)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_retain_n();
  v5 = sub_23DF14C68();
  v6 = sub_23DF1501C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v20 = v8;
    *(_DWORD *)v7 = 136315394;
    v18 = 0;
    v19 = 0xE000000000000000;
    swift_retain();
    sub_23DF15190();
    swift_bridgeObjectRelease();
    v18 = (void *)0xD000000000000018;
    v19 = 0x800000023DF1C360;
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_release();
    v18 = (void *)sub_23DEC1518((uint64_t)v18, v19, &v20);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    v18 = v4;
    sub_23DF15100();
    _os_log_impl(&dword_23DE8B000, v5, v6, "%s: Resuming (%ld orchestrators).", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242648490](v8, -1, -1);
    MEMORY[0x242648490](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v3 = *(_QWORD *)v3;
  if (!(v3 >> 62))
  {
    v9 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_10;
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain_n();
  v9 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_18;
LABEL_10:
  v10 = 4;
  while (1)
  {
    v11 = v10 - 4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v12 = (uint64_t *)MEMORY[0x242647BF0](v10 - 4, v3);
      v13 = v10 - 3;
      if (__OFADD__(v11, 1))
        goto LABEL_20;
    }
    else
    {
      v12 = *(uint64_t **)(v3 + 8 * v10);
      swift_retain();
      v13 = v10 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    v14 = (os_unfair_lock_s *)v12[8];
    v15 = (uint64_t)&v14[4];
    v16 = v14 + 22;
    os_unfair_lock_lock(v14 + 22);
    sub_23DEB6D68(v15, v12, &v18);
    if (v2)
      break;
    v2 = 0;
    os_unfair_lock_unlock(v16);
    v17._rawValue = v18;
    sub_23DEB6854(v17);
    swift_release();
    swift_bridgeObjectRelease();
    ++v10;
    if (v13 == v9)
      goto LABEL_18;
  }
  os_unfair_lock_unlock(v16);
  __break(1u);
}

Swift::Void __swiftcall OrchestrationDirector.fireOnce()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  char v16;
  uint64_t v17;
  void *v18;
  char isEscapingClosureAtFileLocation;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD aBlock[7];

  v1 = v0;
  v2 = sub_23DF14D64();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v8 = v7 + 4;
  v9 = v7 + 11;
  os_unfair_lock_lock(v7 + 11);
  sub_23DE96B9C(v8, aBlock);
  os_unfair_lock_unlock(v9);
  v10 = aBlock[0];
  if (aBlock[0] >> 62)
    goto LABEL_14;
  v11 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11)
  {
    while (v11 >= 1)
    {
      v12 = 0;
      v22 = v10 & 0xC000000000000001;
      v21 = *MEMORY[0x24BEE5608];
      v20 = v11;
      while (1)
      {
        if (v22)
        {
          v13 = MEMORY[0x242647BF0](v12, v10);
        }
        else
        {
          v13 = *(_QWORD *)(v10 + 8 * v12 + 32);
          swift_retain();
        }
        v14 = *(void **)(v13 + 56);
        *v6 = v14;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, v21, v2);
        v15 = v14;
        v16 = sub_23DF14D7C();
        (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
        if ((v16 & 1) == 0)
          break;
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = sub_23DE9A528;
        *(_QWORD *)(v17 + 24) = v13;
        aBlock[4] = sub_23DE9A540;
        aBlock[5] = v17;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_23DE99578;
        aBlock[3] = &block_descriptor_0;
        v18 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_async_and_wait(v15, v18);
        _Block_release(v18);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release_n();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
          goto LABEL_13;
        if (v20 == ++v12)
          goto LABEL_11;
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      v11 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (!v11)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23DE96B9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  swift_retain_n();
  v4 = sub_23DF14C68();
  v5 = sub_23DF1501C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v9 = v7;
    *(_DWORD *)v6 = 136315394;
    swift_retain();
    sub_23DF15190();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_release();
    sub_23DEC1518(0xD000000000000018, 0x800000023DF1C360, &v9);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2048;
    sub_23DF15100();
    _os_log_impl(&dword_23DE8B000, v4, v5, "%s: Triggering single fire at %ld contexts.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242648490](v7, -1, -1);
    MEMORY[0x242648490](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t OrchestrationDirector.fireOnce(priorityThresholdOverride:barrier:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v7;

  v5 = *a1;
  OrchestrationDirector.fireOnce()();
  v7 = v5;
  return WorkQueue.enqueue(priorityThresholdOverride:barrier:)(&v7, a2, a3);
}

uint64_t OrchestrationDirector.recheckFailedTriggers(priorityThresholdOverride:barrier:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  Swift::OpaquePointer v16;
  uint64_t v17;
  char v19;
  unint64_t v22;

  v19 = *a1;
  v4 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v5 = v4 + 4;
  v6 = v4 + 11;
  os_unfair_lock_lock(v4 + 11);
  sub_23DE97034(v5, &v22);
  os_unfair_lock_unlock(v6);
  v7 = v22;
  if (v22 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    v8 = sub_23DF15298();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      v9 = 4;
      do
      {
        v10 = v9 - 4;
        if ((v7 & 0xC000000000000001) != 0)
        {
          v11 = MEMORY[0x242647BF0](v9 - 4, v7);
          v12 = v9 - 3;
          if (__OFADD__(v10, 1))
            goto LABEL_11;
        }
        else
        {
          v11 = *(_QWORD *)(v7 + 8 * v9);
          swift_retain();
          v12 = v9 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        v13 = *(os_unfair_lock_s **)(v11 + 64);
        v14 = (uint64_t)&v13[4];
        v15 = v13 + 22;
        os_unfair_lock_lock(v13 + 22);
        sub_23DEB7FD4(v14, (uint64_t *)&v22);
        os_unfair_lock_unlock(v15);
        v16._rawValue = (void *)v22;
        sub_23DEB6854(v16);
        swift_release();
        swift_bridgeObjectRelease();
        ++v9;
      }
      while (v12 != v8);
    }
  }
  swift_bridgeObjectRelease();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  LOBYTE(v22) = v19;
  sub_23DE9A5CC(a2);
  WorkQueue.enqueue(priorityThresholdOverride:barrier:)((char *)&v22, (uint64_t)sub_23DE9A5A4, v17);
  return swift_release();
}

uint64_t sub_23DE97034@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;

  swift_retain_n();
  v4 = sub_23DF14C68();
  v5 = sub_23DF1501C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v9 = v7;
    swift_retain();
    sub_23DF15190();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_release();
    sub_23DEC1518(0xD000000000000018, 0x800000023DF1C360, &v9);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DE8B000, v4, v5, "%s: Triggering failed work criteria recheck.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242648490](v7, -1, -1);
    MEMORY[0x242648490](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void OrchestrationDirector.statusObserver.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue)
                            + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEEFACC(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_23DE972B8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(*a1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue)
                            + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEEFACC(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t OrchestrationDirector.statusObserver.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  _BYTE v8[40];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue);
  sub_23DE9A5DC(a1, (uint64_t)v8);
  v4 = *(os_unfair_lock_s **)(v3 + 16);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 19;
  os_unfair_lock_lock(v4 + 19);
  sub_23DEEFAF8(v5, (uint64_t)v8);
  os_unfair_lock_unlock(v6);
  sub_23DE9A9BC((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DE9A620);
  return sub_23DE9A9BC(a1, (uint64_t (*)(_QWORD))sub_23DE9A620);
}

void (*OrchestrationDirector.statusObserver.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue);
  v3[15] = v4;
  v5 = *(os_unfair_lock_s **)(v4 + 16);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 19;
  os_unfair_lock_lock(v5 + 19);
  sub_23DEEFACC(v6, (uint64_t)v3);
  v3[16] = 0;
  os_unfair_lock_unlock(v7);
  return sub_23DE97440;
}

void sub_23DE97440(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    v4 = v2[15];
    sub_23DE9A5DC(*a1, v3);
    sub_23DE9A5DC(v3, (uint64_t)(v2 + 10));
    v5 = *(os_unfair_lock_s **)(v4 + 16);
    v6 = (uint64_t)&v5[4];
    v7 = v5 + 19;
    os_unfair_lock_lock(v5 + 19);
    sub_23DEEFAF8(v6, (uint64_t)(v2 + 10));
    os_unfair_lock_unlock(v7);
    sub_23DE9A9BC((uint64_t)(v2 + 10), (uint64_t (*)(_QWORD))sub_23DE9A620);
  }
  else
  {
    v8 = v2[15];
    sub_23DE9A5DC(*a1, v3);
    v9 = *(os_unfair_lock_s **)(v8 + 16);
    v10 = (uint64_t)&v9[4];
    v11 = v9 + 19;
    os_unfair_lock_lock(v9 + 19);
    sub_23DEEFAF8(v10, v3);
    os_unfair_lock_unlock(v11);
  }
  sub_23DE9A9BC(v3, (uint64_t (*)(_QWORD))sub_23DE9A620);
  sub_23DE9A9BC((uint64_t)v2, (uint64_t (*)(_QWORD))sub_23DE9A620);
  free(v2);
}

uint64_t OrchestrationDirector.orchestrationGraph()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DE975B4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_23DE975B4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20[2];
  uint64_t v21;

  v4 = v2;
  v6 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7)
  {
    while (1)
    {
      v21 = MEMORY[0x24BEE4AF8];
      sub_23DEAA1B4(0, v7 & ~(v7 >> 63), 0);
      if (v7 < 0)
        break;
      v8 = 0;
      v18 = a2;
      v19 = v6 & 0xC000000000000001;
      v9 = v6;
      while (v7 != v8)
      {
        if (v19)
        {
          v10 = MEMORY[0x242647BF0](v8, v6);
        }
        else
        {
          v10 = *(_QWORD *)(v6 + 8 * v8 + 32);
          swift_retain();
        }
        v11 = *(os_unfair_lock_s **)(v10 + 64);
        v12 = (uint64_t *)&v11[4];
        v3 = v11 + 22;
        os_unfair_lock_lock(v11 + 22);
        sub_23DEBE388(v12, v20);
        if (v4)
          goto LABEL_21;
        v4 = 0;
        os_unfair_lock_unlock(v3);
        v13 = v20[0];
        a2 = (_QWORD *)v20[1];
        swift_release();
        v14 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA1B4(0, *(_QWORD *)(v14 + 16) + 1, 1);
          v14 = v21;
        }
        v16 = *(_QWORD *)(v14 + 16);
        v15 = *(_QWORD *)(v14 + 24);
        v3 = (os_unfair_lock_s *)(v16 + 1);
        if (v16 >= v15 >> 1)
        {
          sub_23DEAA1B4(v15 > 1, v16 + 1, 1);
          v14 = v21;
        }
        ++v8;
        *(_QWORD *)(v14 + 16) = v3;
        v17 = v14 + 16 * v16;
        *(_QWORD *)(v17 + 32) = v13;
        *(_QWORD *)(v17 + 40) = a2;
        v6 = v9;
        if (v7 == v8)
        {
          swift_bridgeObjectRelease();
          a2 = v18;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain_n();
      v7 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (!v7)
        goto LABEL_18;
    }
    __break(1u);
LABEL_21:
    os_unfair_lock_unlock(v3);
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
LABEL_19:
    *a2 = v14;
  }
}

uint64_t sub_23DE977B0(unint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = v3;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8;
    if (v8)
      goto LABEL_3;
    return a2();
  }
  swift_bridgeObjectRetain();
  v8 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (!v8)
    return a2();
  swift_bridgeObjectRetain();
  v9 = sub_23DF15298();
  swift_bridgeObjectRelease();
LABEL_3:
  sub_23DE9B2F8(0, &qword_25432DA80);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v9;
  if (v8 < 1)
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    swift_bridgeObjectRetain();
    v12 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x242647BF0](v12, a1);
      else
        swift_retain();
      ++v12;
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v4;
      v13[3] = v11;
      v13[4] = a2;
      v13[5] = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      Orchestrator.start(completion:)((uint64_t)sub_23DE9B388, (uint64_t)v13);
      swift_release();
      swift_release();
    }
    while (v8 != v12);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23DE97968(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  os_unfair_lock_s *v5;
  BOOL v6;

  v5 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState)
                          + 44);
  os_unfair_lock_lock(v5);
  sub_23DE979EC(a2, &v6);
  os_unfair_lock_unlock(v5);
  if (v6)
    a3();
}

void sub_23DE979EC(uint64_t a1@<X1>, BOOL *a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 - 1;
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v8;
    v6 = v5;
    if (!v2)
    {
      os_unfair_lock_unlock(v5);
      *a2 = v8 == 0;
      return;
    }
  }
  os_unfair_lock_unlock(v6);
  __break(1u);
}

void OrchestrationDirector.priorityThreshold.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue)
                            + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF0CF0(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_23DE97AC8(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  char v6;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(*a1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue)
                            + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF0CF0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t OrchestrationDirector.priorityThreshold.setter(char *a1)
{
  char v2;

  v2 = *a1;
  return WorkQueue.priorityThreshold.setter(&v2);
}

uint64_t (*OrchestrationDirector.priorityThreshold.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue);
  *a1 = v2;
  v3 = a1 + 1;
  v4 = *(os_unfair_lock_s **)(v2 + 16);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 19;
  os_unfair_lock_lock(v4 + 19);
  sub_23DEF0CF0(v5, v3);
  os_unfair_lock_unlock(v6);
  return sub_23DE97BF0;
}

uint64_t sub_23DE97BF0(uint64_t a1, char a2)
{
  char *v2;
  char v4;
  char v5;

  if ((a2 & 1) != 0)
  {
    v4 = *(_BYTE *)(a1 + 8);
    v2 = &v4;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 8);
    v2 = &v5;
  }
  return WorkQueue.priorityThreshold.setter(v2);
}

Swift::Void __swiftcall OrchestrationDirector.didUpdate(contexts:)(Swift::OpaquePointer contexts)
{
  unint64_t v1;
  os_unfair_lock_s *v3;
  unint64_t *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v5;
  void (*v6)(void);

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  p_os_unfair_lock_opaque = (unint64_t *)&v3[4]._os_unfair_lock_opaque;
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  sub_23DE97CA8(p_os_unfair_lock_opaque, (unint64_t)contexts._rawValue, v1, &v6);
  os_unfair_lock_unlock(v5);
  v6();
  swift_release();
}

void sub_23DE97CA8(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;

  v5 = v4;
  v6 = (uint64_t)a4;
  if (a1[1] == 3)
  {
    *a4 = nullsub_1;
    a4[1] = 0;
    return;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = sub_23DE99610(a1, a2, a3);
  v11 = v10;
  v28 = a1;
  if (!(*a1 >> 62))
  {
    v12 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12 >= v10)
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_22:
  swift_bridgeObjectRetain();
  v12 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (v12 < v11)
    goto LABEL_23;
LABEL_5:
  v13 = v28;
  sub_23DF08050(v11, v12);
  v14 = swift_bridgeObjectRetain();
  v15 = sub_23DE9B030(v14, (uint64_t *)v28);
  swift_bridgeObjectRelease();
  swift_retain();
  a2 = sub_23DE9AE10(v15, a3);
  swift_bridgeObjectRelease();
  swift_release();
  v27 = (_QWORD *)v6;
  if (*((_BYTE *)v28 + 24) != 1)
  {
LABEL_17:
    v22 = swift_bridgeObjectRetain();
    sub_23DEF33F4(v22);
    v23 = v13[1];
    if (v23 - 1 >= 3)
    {
      v24 = v13[2];
      *(_OWORD *)(v13 + 1) = xmmword_23DF16A90;
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = v23;
    v25[3] = v24;
    v25[4] = a3;
    v25[5] = a2;
    *v27 = sub_23DE9B2DC;
    v27[1] = v25;
    swift_retain();
    return;
  }
  if (!(a2 >> 62))
  {
    v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v26 = a3;
    if (v11)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_24:
  swift_bridgeObjectRetain_n();
  v11 = sub_23DF15298();
  swift_bridgeObjectRelease();
  v26 = a3;
  if (!v11)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    a3 = v26;
    v13 = v28;
    goto LABEL_17;
  }
LABEL_8:
  a3 = a2 & 0xC000000000000001;
  v6 = 4;
  while (1)
  {
    v16 = v6 - 4;
    if (a3)
    {
      v17 = (uint64_t *)MEMORY[0x242647BF0](v6 - 4, a2);
      v18 = v6 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_21;
    }
    else
    {
      v17 = *(uint64_t **)(a2 + 8 * v6);
      swift_retain();
      v18 = v6 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    v19 = (os_unfair_lock_s *)v17[8];
    v20 = (uint64_t)&v19[4];
    v21 = v19 + 22;
    os_unfair_lock_lock(v19 + 22);
    sub_23DEB6B18(v20, v17);
    if (v5)
      break;
    v5 = 0;
    os_unfair_lock_unlock(v21);
    swift_release();
    ++v6;
    if (v18 == v11)
      goto LABEL_16;
  }
  os_unfair_lock_unlock(v21);
  __break(1u);
}

uint64_t sub_23DE97F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = a2 + 40;
    while (1)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v5 = sub_23DEF937C();
      swift_unknownObjectRelease();
      if ((v5 & 1) != 0)
        break;
      v4 += 16;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
LABEL_6:
    swift_retain_n();
    swift_retain_n();
    v6 = sub_23DF14C68();
    v7 = sub_23DF1501C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v13 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_retain();
      sub_23DF15190();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_release();
      sub_23DEC1518(0xD000000000000018, 0x800000023DF1C360, &v13);
      sub_23DF15100();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      type metadata accessor for Orchestrator();
      swift_retain();
      v10 = sub_23DF14E18();
      sub_23DEC1518(v10, v11, &v13);
      sub_23DF15100();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DE8B000, v6, v7, "%s: Stopping orchestrator for removed context: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242648490](v9, -1, -1);
      MEMORY[0x242648490](v8, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    Orchestrator.stop()();
    return 1;
  }
}

uint64_t sub_23DE98294@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v5 = *a1;
  v18 = a1[1];
  swift_retain_n();
  swift_unknownObjectRetain_n();
  v6 = sub_23DF14C68();
  v7 = sub_23DF1501C();
  if (os_log_type_enabled(v6, v7))
  {
    v17 = a3;
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v19 = v9;
    *(_DWORD *)v8 = 136315394;
    swift_retain();
    sub_23DF15190();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_release();
    sub_23DEC1518(0xD000000000000018, 0x800000023DF1C360, &v19);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_unknownObjectRetain();
    v10 = sub_23DF14E18();
    sub_23DEC1518(v10, v11, &v19);
    sub_23DF15100();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DE8B000, v6, v7, "%s: Starting orchestrator for new context: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242648490](v9, -1, -1);
    v12 = v8;
    a3 = v17;
    MEMORY[0x242648490](v12, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
    swift_release_n();
  }

  v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_inputSignalProviders);
  v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_executorProviders);
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue);
  type metadata accessor for Orchestrator();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  result = Orchestrator.init(context:inputSignalProviders:executorProviders:workQueue:)(v5, v18, v13, v14, v15);
  *a3 = result;
  return result;
}

uint64_t sub_23DE985B8(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t i;

  if (a1)
  {
    swift_retain();
    sub_23DE977B0(a4, a1, a2);
    return sub_23DE9B2E8((uint64_t)a1);
  }
  if (!(a4 >> 62))
  {
    v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_5;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = sub_23DF15298();
  v8 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_5:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((a4 & 0xC000000000000001) != 0)
        MEMORY[0x242647BF0](i, a4);
      else
        swift_retain();
      Orchestrator.start(completion:)(0, 0);
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t OrchestrationDirector.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_logger;
  v2 = sub_23DF14C80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_dispatcher);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t OrchestrationDirector.__deallocating_deinit()
{
  OrchestrationDirector.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23DE987B0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  unint64_t *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v3;
  void (*v5)(void);

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  p_os_unfair_lock_opaque = (unint64_t *)&v1[4]._os_unfair_lock_opaque;
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DE9AC58(p_os_unfair_lock_opaque, &v5);
  os_unfair_lock_unlock(v3);
  v5();
  return swift_release();
}

void sub_23DE98820(uint64_t a1, uint64_t a2)
{
  sub_23DE98838(a1, a2, (void (*)(os_unfair_lock_s *))sub_23DE9AC40);
}

void sub_23DE9882C(uint64_t a1, uint64_t a2)
{
  sub_23DE98838(a1, a2, (void (*)(os_unfair_lock_s *))sub_23DE9AC28);
}

void sub_23DE98838(uint64_t a1, uint64_t a2, void (*a3)(os_unfair_lock_s *))
{
  uint64_t v3;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v6 = v5 + 4;
  v7 = v5 + 11;
  os_unfair_lock_lock(v5 + 11);
  a3(v6);
  os_unfair_lock_unlock(v7);
}

void sub_23DE98890(_BYTE *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue)
                            + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF0CF0(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_23DE988F4(char *a1)
{
  char v2;

  v2 = *a1;
  return WorkQueue.priorityThreshold.setter(&v2);
}

uint64_t (*sub_23DE98930(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrchestrationDirector.priorityThreshold.modify(v2);
  return sub_23DE98974;
}

unint64_t OrchestrationDirector.description.getter()
{
  sub_23DF15190();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return 0xD000000000000018;
}

unint64_t sub_23DE98A20()
{
  return OrchestrationDirector.description.getter();
}

uint64_t OrchestrationDirector.debugSnapshot.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DE98AA4(v2, v0, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_23DE98AA4(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;

  sub_23DF15190();
  swift_bridgeObjectRelease();
  v76 = 0xD000000000000018;
  v77 = 0x800000023DF1C360;
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  sub_23DE95234(0, (unint64_t *)&qword_25432C2C0, (uint64_t (*)(uint64_t))sub_23DE9ACDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16AA0;
  *(_QWORD *)(inited + 32) = 0x6863746170736964;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  sub_23DE902F4(a2 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_dispatcher, (uint64_t)&v76);
  sub_23DE95524(0, &qword_256D0E438);
  *(_QWORD *)(inited + 48) = sub_23DF14E18();
  *(_QWORD *)(inited + 56) = v8;
  *(_QWORD *)(inited + 64) = 0x646573756170;
  *(_QWORD *)(inited + 72) = 0xE600000000000000;
  v9 = 28526;
  if (*((_BYTE *)a1 + 24))
    v10 = 5457241;
  else
    v10 = 28526;
  if (*((_BYTE *)a1 + 24))
    v11 = 0xE300000000000000;
  else
    v11 = 0xE200000000000000;
  *(_QWORD *)(inited + 80) = v10;
  *(_QWORD *)(inited + 88) = v11;
  *(_QWORD *)(inited + 96) = 0x657669746361;
  *(_QWORD *)(inited + 104) = 0xE600000000000000;
  if (a1[1] == 2)
  {
    v9 = 5457241;
    v12 = 0xE300000000000000;
  }
  else
  {
    v12 = 0xE200000000000000;
  }
  *(_QWORD *)(inited + 112) = v9;
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 128) = 0x50747865746E6F63;
  *(_QWORD *)(inited + 136) = 0xEF72656469766F72;
  v76 = 0;
  v77 = 0xE000000000000000;
  v75[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_contextProvider);
  sub_23DE95524(0, &qword_256D0E440);
  sub_23DF15274();
  v13 = v77;
  *(_QWORD *)(inited + 144) = v76;
  *(_QWORD *)(inited + 152) = v13;
  v71 = sub_23DE930F0(inited);
  sub_23DE95234(0, (unint64_t *)&unk_256D0EE90, (uint64_t (*)(uint64_t))sub_23DE9AD3C, v6);
  v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_23DF16AB0;
  *(_QWORD *)(v14 + 32) = 0x6575657571;
  *(_QWORD *)(v14 + 40) = 0xE500000000000000;
  sub_23DE9ADB8();
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23DF16AC0;
  v16 = *(os_unfair_lock_s **)(*(_QWORD *)(a2 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_workQueue)
                             + 16);
  v17 = (uint64_t)&v16[4];
  v18 = v16 + 19;
  os_unfair_lock_lock(v16 + 19);
  sub_23DEF14D0(v17);
  if (v3)
    goto LABEL_58;
  v19 = 0;
  os_unfair_lock_unlock(v18);
  *(_QWORD *)(v15 + 32) = v76;
  v76 = v15;
  sub_23DF14ED8();
  *(_QWORD *)(v14 + 48) = v76;
  *(_QWORD *)(v14 + 56) = 0x6D6E6F7269766E65;
  *(_QWORD *)(v14 + 64) = 0xEB00000000746E65;
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_23DF16AC0;
  v74 = a2;
  v18 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) + 40);
  os_unfair_lock_lock(v18);
  sub_23DF061D0(&v76);
  os_unfair_lock_unlock(v18);
  *(_QWORD *)(v20 + 32) = v76;
  v76 = v20;
  sub_23DF14ED8();
  *(_QWORD *)(v14 + 72) = v76;
  strcpy((char *)(v14 + 80), "orchestrators");
  *(_WORD *)(v14 + 94) = -4864;
  v21 = *a1;
  if (v21 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain_n();
    v22 = sub_23DF15298();
    swift_bridgeObjectRelease();
    if (v22)
      goto LABEL_13;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22)
    {
LABEL_13:
      v76 = MEMORY[0x24BEE4AF8];
      sub_23DF15220();
      if ((v22 & 0x8000000000000000) == 0)
      {
        v23 = 0;
        v18 = (os_unfair_lock_s *)(v21 & 0xC000000000000001);
        do
        {
          if (v22 == v23)
          {
            __break(1u);
            goto LABEL_23;
          }
          if (v18)
          {
            v24 = MEMORY[0x242647BF0](v23, v21);
          }
          else
          {
            v24 = *(_QWORD *)(v21 + 8 * v23 + 32);
            swift_retain();
          }
          v25 = *(os_unfair_lock_s **)(v24 + 64);
          v26 = (uint64_t)&v25[4];
          v27 = v25 + 22;
          os_unfair_lock_lock(v25 + 22);
          sub_23DEC0284(v26, v24, v75);
          ++v23;
          os_unfair_lock_unlock(v27);
          v19 = *(os_unfair_lock_s **)&v75[0];
          swift_release();
          sub_23DF151FC();
          sub_23DF1522C();
          sub_23DF15238();
          sub_23DF15208();
        }
        while (v22 != v23);
        v28 = v76;
        swift_bridgeObjectRelease();
        v29 = v74;
        if ((v28 & 0x8000000000000000) == 0)
          goto LABEL_25;
        goto LABEL_56;
      }
      __break(1u);
      os_unfair_lock_unlock(v19);
      __break(1u);
      swift_release();
      __break(1u);
LABEL_58:
      os_unfair_lock_unlock(v18);
      __break(1u);
      return;
    }
  }
  swift_bridgeObjectRelease();
  v28 = MEMORY[0x24BEE4AF8];
  v29 = v74;
  if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
  {
LABEL_56:
    v70 = swift_bridgeObjectRetain();
    v30 = (uint64_t)sub_23DF0F790(v70);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
LABEL_25:
  if ((v28 & 0x4000000000000000) != 0)
    goto LABEL_56;
  v30 = v28 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_27:
  v76 = v30;
  sub_23DE99598(&v76);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 96) = v76;
  *(_QWORD *)(v14 + 104) = 0xD000000000000014;
  v73 = (_QWORD *)v14;
  *(_QWORD *)(v14 + 112) = 0x800000023DF1C3D0;
  v31 = *(_QWORD *)(v29 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_inputSignalProviders);
  v32 = *(_QWORD *)(v31 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  if (v32)
  {
    v78 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA1B4(0, v32, 0);
    v34 = v31 + 32;
    do
    {
      sub_23DE902F4(v34, (uint64_t)&v76);
      sub_23DE902F4((uint64_t)&v76, (uint64_t)v75);
      sub_23DE95524(0, &qword_256D0E450);
      v35 = sub_23DF14E18();
      v37 = v36;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
      v38 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DEAA1B4(0, *(_QWORD *)(v38 + 16) + 1, 1);
        v38 = v78;
      }
      v40 = *(_QWORD *)(v38 + 16);
      v39 = *(_QWORD *)(v38 + 24);
      if (v40 >= v39 >> 1)
      {
        sub_23DEAA1B4(v39 > 1, v40 + 1, 1);
        v38 = v78;
      }
      *(_QWORD *)(v38 + 16) = v40 + 1;
      v41 = v38 + 16 * v40;
      *(_QWORD *)(v41 + 32) = v35;
      *(_QWORD *)(v41 + 40) = v37;
      v34 += 40;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    v29 = v74;
    v33 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v38 = MEMORY[0x24BEE4AF8];
  }
  v76 = v38;
  swift_bridgeObjectRetain();
  sub_23DED4970(&v76);
  swift_bridgeObjectRelease();
  v42 = v76;
  v43 = *(_QWORD *)(v76 + 16);
  v44 = MEMORY[0x24BEE4B00];
  if (v43)
  {
    v76 = v33;
    sub_23DF15220();
    type metadata accessor for DebugSnapshot();
    v45 = (uint64_t *)(v42 + 40);
    do
    {
      v47 = *(v45 - 1);
      v46 = *v45;
      v48 = (_QWORD *)swift_allocObject();
      v48[2] = v47;
      v48[3] = v46;
      v48[4] = v44;
      v48[5] = v44;
      swift_bridgeObjectRetain();
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      v45 += 2;
      --v43;
    }
    while (v43);
    v49 = v76;
    swift_release();
    v29 = v74;
  }
  else
  {
    swift_release();
    v49 = MEMORY[0x24BEE4AF8];
  }
  v73[15] = v49;
  v73[16] = 0xD000000000000011;
  v73[17] = 0x800000023DF1C3F0;
  v50 = *(_QWORD *)(v29 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_executorProviders);
  v51 = *(_QWORD *)(v50 + 16);
  v52 = MEMORY[0x24BEE4AF8];
  if (v51)
  {
    v78 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA1B4(0, v51, 0);
    v53 = v50 + 32;
    do
    {
      sub_23DE902F4(v53, (uint64_t)&v76);
      sub_23DE902F4((uint64_t)&v76, (uint64_t)v75);
      sub_23DE95524(0, &qword_25432D440);
      v54 = sub_23DF14E18();
      v56 = v55;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
      v57 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DEAA1B4(0, *(_QWORD *)(v57 + 16) + 1, 1);
        v57 = v78;
      }
      v59 = *(_QWORD *)(v57 + 16);
      v58 = *(_QWORD *)(v57 + 24);
      if (v59 >= v58 >> 1)
      {
        sub_23DEAA1B4(v58 > 1, v59 + 1, 1);
        v57 = v78;
      }
      *(_QWORD *)(v57 + 16) = v59 + 1;
      v60 = v57 + 16 * v59;
      *(_QWORD *)(v60 + 32) = v54;
      *(_QWORD *)(v60 + 40) = v56;
      v53 += 40;
      --v51;
    }
    while (v51);
    swift_bridgeObjectRelease();
    v52 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v57 = MEMORY[0x24BEE4AF8];
  }
  v76 = v57;
  swift_bridgeObjectRetain();
  sub_23DED4970(&v76);
  swift_bridgeObjectRelease();
  v61 = v76;
  v62 = *(_QWORD *)(v76 + 16);
  if (v62)
  {
    v76 = v52;
    sub_23DF15220();
    type metadata accessor for DebugSnapshot();
    v63 = (uint64_t *)(v61 + 40);
    do
    {
      v65 = *(v63 - 1);
      v64 = *v63;
      v66 = (_QWORD *)swift_allocObject();
      v66[2] = v65;
      v66[3] = v64;
      v66[4] = v44;
      v66[5] = v44;
      swift_bridgeObjectRetain();
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      v63 += 2;
      --v62;
    }
    while (v62);
    v67 = v76;
    swift_release();
  }
  else
  {
    swift_release();
    v67 = MEMORY[0x24BEE4AF8];
  }
  v73[18] = v67;
  v68 = sub_23DE935F0((uint64_t)v73);
  type metadata accessor for DebugSnapshot();
  v69 = (_QWORD *)swift_allocObject();
  v69[2] = 0xD000000000000018;
  v69[3] = 0x800000023DF1C360;
  v69[4] = v71;
  v69[5] = v68;
  *a3 = v69;
}

uint64_t sub_23DE99514()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(*v0 + OBJC_IVAR____TtC19HealthOrchestration21OrchestrationDirector_protectedState);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DE9AC10(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DE99578(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_23DE99598(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_23DEF7D68();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_23DE999AC(v6);
  return sub_23DF15208();
}

unint64_t sub_23DE99610(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v21;
  int v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = swift_bridgeObjectRetain();
  v9 = sub_23DE9AF0C(v8, a2);
  if (!v3)
  {
    v4 = v9;
    v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      v26 = *a1;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        v4 = sub_23DF15298();
        swift_bridgeObjectRelease();
      }
      else
      {
        v4 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v12 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_56;
      if (*a1 >> 62)
      {
LABEL_57:
        swift_bridgeObjectRetain();
        v28 = sub_23DF15298();
        swift_bridgeObjectRelease();
        if (v12 != v28)
          goto LABEL_7;
      }
      else if (v12 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_7:
        v12 = v4 + 5;
        v29 = a3;
        while (1)
        {
          v13 = v12 - 4;
          v14 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v15 = MEMORY[0x242647BF0](v12 - 4);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
            if (v13 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_47;
            v15 = *(_QWORD *)(v14 + 8 * v12);
            swift_retain();
          }
          v30 = v15;
          v16 = sub_23DE97F80((uint64_t)&v30, a2);
          swift_release();
          if ((v16 & 1) == 0)
            break;
LABEL_33:
          v24 = v12 - 3;
          if (__OFADD__(v13, 1))
            goto LABEL_48;
          if (*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            v25 = sub_23DF15298();
            swift_bridgeObjectRelease();
          }
          else
          {
            v25 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v12;
          if (v24 == v25)
            goto LABEL_44;
        }
        if (v13 == v4)
        {
LABEL_32:
          if (__OFADD__(v4++, 1))
            goto LABEL_49;
          goto LABEL_33;
        }
        v17 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v18 = MEMORY[0x242647BF0](v4, *a1);
          v17 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_18:
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_52;
            if (v13 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_53;
            v19 = *(_QWORD *)(v17 + 8 * v12);
            swift_retain();
            goto LABEL_21;
          }
        }
        else
        {
          if ((v4 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v4 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v18 = *(_QWORD *)(v17 + 8 * v4 + 32);
          swift_retain();
          if ((v17 & 0xC000000000000001) == 0)
            goto LABEL_18;
        }
        v19 = MEMORY[0x242647BF0](v12 - 4, v17);
        v17 = *a1;
LABEL_21:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v17;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v17 & 0x8000000000000000) != 0
          || (v17 & 0x4000000000000000) != 0)
        {
          sub_23DF07530(v17);
        }
        *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v19;
        swift_release();
        sub_23DF14ED8();
        v21 = *a1;
        v22 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v21;
        if (!v22 || (v21 & 0x8000000000000000) != 0 || (v21 & 0x4000000000000000) != 0)
          sub_23DF07530(v21);
        a3 = v29;
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_54;
        if (v13 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_55;
        *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v18;
        swift_release();
        sub_23DF14ED8();
        goto LABEL_32;
      }
    }
LABEL_44:
    swift_bridgeObjectRelease();
    swift_release();
    return v4;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23DE999AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *__dst;
  uint64_t v101;

  v2 = v1;
  v4 = a1[1];
  result = sub_23DF153B8();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_150;
    if (v4)
      return sub_23DE9A07C(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_158;
  v7 = result;
  v95 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v101 = MEMORY[0x24BEE4AF8];
    __dst = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_116:
      v87 = v10;
      if (v13 >= 2)
      {
        v88 = *v95;
        do
        {
          v89 = v13 - 2;
          if (v13 < 2)
            goto LABEL_145;
          if (!v88)
            goto LABEL_157;
          v90 = v87;
          v91 = *(_QWORD *)&v87[16 * v89 + 32];
          v92 = *(_QWORD *)&v87[16 * v13 + 24];
          sub_23DE9A138((char *)(v88 + 8 * v91), (char *)(v88 + 8 * *(_QWORD *)&v87[16 * v13 + 16]), v88 + 8 * v92, __dst);
          if (v2)
            break;
          if (v92 < v91)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v90 = sub_23DEF7D18((uint64_t)v90);
          if (v89 >= *((_QWORD *)v90 + 2))
            goto LABEL_147;
          v93 = &v90[16 * v89 + 32];
          *(_QWORD *)v93 = v91;
          *((_QWORD *)v93 + 1) = v92;
          v94 = *((_QWORD *)v90 + 2);
          if (v13 > v94)
            goto LABEL_148;
          memmove(&v90[16 * v13 + 16], &v90[16 * v13 + 32], 16 * (v94 - v13));
          v87 = v90;
          *((_QWORD *)v90 + 2) = v94 - 1;
          v13 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_23DF14ED8();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for DebugSnapshot();
    v9 = sub_23DF14EFC();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v101 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v96 = v12 - 8;
  v97 = v7;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v98 = v4;
  v99 = v12;
  while (1)
  {
    v14 = v11++;
    if (v11 < v4)
    {
      v15 = *(_QWORD *)(v12 + 8 * v11);
      v16 = *(_QWORD *)(v12 + 8 * v14);
      if (*(_QWORD *)(v15 + 16) == *(_QWORD *)(v16 + 16) && *(_QWORD *)(v15 + 24) == *(_QWORD *)(v16 + 24))
      {
        v19 = v14 + 2;
        if (v14 + 2 >= v4)
          goto LABEL_43;
        v18 = 0;
        do
        {
LABEL_26:
          v21 = *(_QWORD *)(v12 + 8 * v19);
          v22 = *(_QWORD *)(v12 + 8 * v11);
          if (*(_QWORD *)(v21 + 16) == *(_QWORD *)(v22 + 16) && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v22 + 24))
          {
            if ((v18 & 1) != 0)
              goto LABEL_35;
          }
          else if (((v18 ^ sub_23DF15400()) & 1) != 0)
          {
            goto LABEL_34;
          }
          v20 = v19 + 1;
          v11 = v19;
          v19 = v20;
        }
        while (v20 < v4);
        v19 = v20;
      }
      else
      {
        v18 = sub_23DF15400();
        v19 = v14 + 2;
        if (v14 + 2 < v4)
          goto LABEL_26;
      }
LABEL_34:
      v11 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_35:
        if (v19 < v14)
          goto LABEL_153;
        if (v14 < v19)
        {
          v24 = (uint64_t *)(v96 + 8 * v19);
          v25 = v19;
          v26 = v14;
          v27 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v26 != --v25)
            {
              if (!v12)
                goto LABEL_156;
              v28 = *v27;
              *v27 = *v24;
              *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
LABEL_43:
        v11 = v19;
      }
    }
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_149;
      if (v11 - v14 < v97)
        break;
    }
LABEL_65:
    if (v11 < v14)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_23DEF77DC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v37 = *((_QWORD *)v10 + 2);
    v36 = *((_QWORD *)v10 + 3);
    v13 = v37 + 1;
    if (v37 >= v36 >> 1)
      v10 = sub_23DEF77DC((char *)(v36 > 1), v37 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v38 = v10 + 32;
    v39 = &v10[16 * v37 + 32];
    *(_QWORD *)v39 = v14;
    *((_QWORD *)v39 + 1) = v11;
    if (v37)
    {
      v12 = v99;
      while (1)
      {
        v40 = v13 - 1;
        if (v13 >= 4)
        {
          v45 = &v38[16 * v13];
          v46 = *((_QWORD *)v45 - 8);
          v47 = *((_QWORD *)v45 - 7);
          v51 = __OFSUB__(v47, v46);
          v48 = v47 - v46;
          if (v51)
            goto LABEL_133;
          v50 = *((_QWORD *)v45 - 6);
          v49 = *((_QWORD *)v45 - 5);
          v51 = __OFSUB__(v49, v50);
          v43 = v49 - v50;
          v44 = v51;
          if (v51)
            goto LABEL_134;
          v52 = v13 - 2;
          v53 = &v38[16 * v13 - 32];
          v55 = *(_QWORD *)v53;
          v54 = *((_QWORD *)v53 + 1);
          v51 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          if (v51)
            goto LABEL_136;
          v51 = __OFADD__(v43, v56);
          v57 = v43 + v56;
          if (v51)
            goto LABEL_139;
          if (v57 >= v48)
          {
            v75 = &v38[16 * v40];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v51 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v51)
              goto LABEL_143;
            v68 = v43 < v78;
            goto LABEL_103;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v69 = *((_QWORD *)v10 + 4);
            v70 = *((_QWORD *)v10 + 5);
            v51 = __OFSUB__(v70, v69);
            v62 = v70 - v69;
            v63 = v51;
            goto LABEL_97;
          }
          v42 = *((_QWORD *)v10 + 4);
          v41 = *((_QWORD *)v10 + 5);
          v51 = __OFSUB__(v41, v42);
          v43 = v41 - v42;
          v44 = v51;
        }
        if ((v44 & 1) != 0)
          goto LABEL_135;
        v52 = v13 - 2;
        v58 = &v38[16 * v13 - 32];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v61 = __OFSUB__(v59, v60);
        v62 = v59 - v60;
        v63 = v61;
        if (v61)
          goto LABEL_138;
        v64 = &v38[16 * v40];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v51 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v51)
          goto LABEL_141;
        if (__OFADD__(v62, v67))
          goto LABEL_142;
        if (v62 + v67 >= v43)
        {
          v68 = v43 < v67;
LABEL_103:
          if (v68)
            v40 = v52;
          goto LABEL_105;
        }
LABEL_97:
        if ((v63 & 1) != 0)
          goto LABEL_137;
        v71 = &v38[16 * v40];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v51 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v51)
          goto LABEL_140;
        if (v74 < v62)
          goto LABEL_14;
LABEL_105:
        v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!v12)
          goto LABEL_155;
        v80 = v10;
        v81 = v12;
        v82 = &v38[16 * v79];
        v83 = *(_QWORD *)v82;
        v84 = &v38[16 * v40];
        v85 = *((_QWORD *)v84 + 1);
        sub_23DE9A138((char *)(v81 + 8 * *(_QWORD *)v82), (char *)(v81 + 8 * *(_QWORD *)v84), v81 + 8 * v85, __dst);
        if (v1)
          goto LABEL_113;
        if (v85 < v83)
          goto LABEL_130;
        if (v40 > *((_QWORD *)v80 + 2))
          goto LABEL_131;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v38[16 * v79 + 8] = v85;
        v86 = *((_QWORD *)v80 + 2);
        if (v40 >= v86)
          goto LABEL_132;
        v10 = v80;
        v13 = v86 - 1;
        memmove(&v38[16 * v40], v84 + 16, 16 * (v86 - 1 - v40));
        *((_QWORD *)v80 + 2) = v86 - 1;
        v68 = v86 > 2;
        v12 = v99;
        if (!v68)
          goto LABEL_14;
      }
    }
    v13 = 1;
    v12 = v99;
LABEL_14:
    v4 = v98;
    if (v11 >= v98)
    {
      v2 = v1;
      goto LABEL_116;
    }
  }
  if (__OFADD__(v14, v97))
    goto LABEL_151;
  if (v14 + v97 >= v4)
    v29 = v4;
  else
    v29 = v14 + v97;
  if (v29 >= v14)
  {
    if (v11 != v29)
    {
      v30 = (_QWORD *)(v96 + 8 * v11);
      do
      {
        v31 = *(_QWORD *)(v12 + 8 * v11);
        v32 = v14;
        v33 = v30;
        do
        {
          v34 = *(_QWORD *)(v31 + 16) == *(_QWORD *)(*v33 + 16) && *(_QWORD *)(v31 + 24) == *(_QWORD *)(*v33 + 24);
          if (v34 || (sub_23DF15400() & 1) == 0)
            break;
          if (!v12)
            goto LABEL_154;
          v35 = *v33;
          v31 = v33[1];
          *v33 = v31;
          v33[1] = v35;
          --v33;
          ++v32;
        }
        while (v11 != v32);
        ++v11;
        ++v30;
      }
      while (v11 != v29);
      v11 = v29;
    }
    goto LABEL_65;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DE9A07C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(_QWORD *)(v7 + 8 * v4);
    v10 = v6;
    v11 = (_QWORD *)v8;
    while (1)
    {
      result = *(_QWORD *)(v9 + 16);
      v12 = result == *(_QWORD *)(*v11 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(*v11 + 24);
      if (v12 || (result = sub_23DF15400(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v13 = *v11;
      v9 = v11[1];
      *v11 = v9;
      v11[1] = v13;
      --v11;
      if (v4 == ++v10)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DE9A138(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t result;
  char *v26;
  char *v27;
  char *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v28 = __src;
  v27 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v17 = &v4[8 * v13];
      v26 = v17;
      v28 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v18 = (char *)(a3 - 8);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 8;
          v21 = *((_QWORD *)v17 - 1);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          v23 = *(_QWORD *)(v22 + 24);
          v24 = *(_QWORD *)(v21 + 16) == *(_QWORD *)(v22 + 16) && *(_QWORD *)(v21 + 24) == v23;
          if (v24 || (sub_23DF15400() & 1) == 0)
          {
            v26 = v17 - 8;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_QWORD *)v18 = *((_QWORD *)v17 - 1);
            v19 = v6;
            v17 -= 8;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_QWORD *)v18 = *(_QWORD *)v19;
            v28 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 8;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 16) == *(_QWORD *)(*(_QWORD *)v4 + 16)
           && *(_QWORD *)(*(_QWORD *)v6 + 24) == *(_QWORD *)(*(_QWORD *)v4 + 24);
        if (v15 || (sub_23DF15400() & 1) == 0)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v27 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 8;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v28 = v7;
    }
LABEL_50:
    sub_23DEF7AE0(&v28, &v27, &v26);
    return 1;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t (*sub_23DE9A3E0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_23DE9A4B4(v6, a2, a3);
  return sub_23DE98974;
}

uint64_t (*sub_23DE9A434(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_23DE9AC70(v6, a2, a3);
  return sub_23DE98974;
}

void sub_23DE9A488(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_23DE9A4B4(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x242647BF0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_23DE9A520;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DE9A520()
{
  return swift_release();
}

uint64_t sub_23DE9A528()
{
  uint64_t v0;

  return sub_23DEB7F7C(v0);
}

uint64_t sub_23DE9A530()
{
  return swift_deallocObject();
}

uint64_t sub_23DE9A540()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_23DE9A578()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DE9A5A4()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_23DE9A5CC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_23DE9A5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE9A620();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DE9A620()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E2C8)
  {
    sub_23DE95524(255, &qword_25432DD08);
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E2C8);
  }
}

uint64_t sub_23DE9A68C(uint64_t a1)
{
  _BYTE v2[40];

  sub_23DE9A5DC(a1, (uint64_t)v2);
  return OrchestrationDirector.statusObserver.setter((uint64_t)v2);
}

uint64_t sub_23DE9A6C8(char *a1)
{
  char v2;

  v2 = *a1;
  return WorkQueue.priorityThreshold.setter(&v2);
}

uint64_t dispatch thunk of Dispatcher.start(source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_23DE9A710()
{
  return type metadata accessor for OrchestrationDirector();
}

uint64_t type metadata accessor for OrchestrationDirector()
{
  uint64_t result;

  result = qword_25432D2F0;
  if (!qword_25432D2F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DE9A754()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DF14C80();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for OrchestrationDirector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OrchestrationDirector.__allocating_init(environment:inputSignalProviders:executorProviders:contextProvider:dispatcher:logger:debugIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for OrchestrationDirector.State(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 8) >= 4uLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for OrchestrationDirector.State(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  if ((unint64_t)(v5 - 1) >= 3 && v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *v4;
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for OrchestrationDirector.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 - 1;
  if ((unint64_t)(v4 - 1) < 3)
  {
    if (v6 < 3)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (v6 < 3)
  {
    sub_23DE9A9BC(a1 + 8, (uint64_t (*)(_QWORD))sub_23DE9A9F8);
    goto LABEL_12;
  }
  if (!v4)
  {
LABEL_9:
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v8;
      swift_retain();
      goto LABEL_13;
    }
LABEL_12:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_13;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
LABEL_13:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t sub_23DE9A9BC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_23DE9A9F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0E428)
  {
    sub_23DE95234(0, &qword_256D0E430, (uint64_t (*)(uint64_t))sub_23DE9AA5C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0E428);
  }
}

unint64_t sub_23DE9AA5C()
{
  unint64_t result;

  result = qword_25432DBC8;
  if (!qword_25432DBC8)
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&qword_25432DBC8);
  }
  return result;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OrchestrationDirector.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)(v4 - 1) >= 3)
  {
    if ((unint64_t)(v5 - 1) >= 3)
    {
      if (v4)
      {
        if (v5)
        {
          v7 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 8) = v5;
          *(_QWORD *)(a1 + 16) = v7;
          swift_release();
          goto LABEL_5;
        }
        swift_release();
      }
      else if (v5)
      {
        v8 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v8;
        goto LABEL_5;
      }
    }
    else
    {
      sub_23DE9A9BC(a1 + 8, (uint64_t (*)(_QWORD))sub_23DE9A9F8);
    }
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_5:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrchestrationDirector.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrchestrationDirector.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrchestrationDirector.State()
{
  return &type metadata for OrchestrationDirector.State;
}

void sub_23DE9AC10(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_23DE98AA4(a1, v2, a2);
}

void sub_23DE9AC28(unint64_t a1)
{
  sub_23DE96558(a1);
}

void sub_23DE9AC40(uint64_t a1)
{
  sub_23DE9617C(a1);
}

void sub_23DE9AC58(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_23DE97CA8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t (*sub_23DE9AC70(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x242647BF0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_23DE9B798;
  }
  __break(1u);
  return result;
}

void sub_23DE9ACDC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432D8C0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432D8C0);
  }
}

void sub_23DE9AD3C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D0E448)
  {
    sub_23DE95234(255, (unint64_t *)&qword_256D0E3C0, (uint64_t (*)(uint64_t))type metadata accessor for DebugSnapshot, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D0E448);
  }
}

void sub_23DE9ADB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DBA8)
  {
    v0 = sub_23DF153D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DBA8);
  }
}

uint64_t sub_23DE9AE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  _OWORD *i;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_23DF15220();
    for (i = (_OWORD *)(a1 + 32); ; ++i)
    {
      *(_OWORD *)v8 = *i;
      swift_unknownObjectRetain();
      sub_23DE98294(v8, a2, &v9);
      swift_unknownObjectRelease();
      if (v2)
        break;
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      if (!--v4)
        return v10;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_23DE9AF0C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_14;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = 0;
  if (v5)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x242647BF0](v6, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain();
      }
      v11 = v7;
      v8 = sub_23DE97F80((uint64_t)&v11, a2);
      swift_release();
      if (v2 || (v8 & 1) != 0)
        break;
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v5 = sub_23DF15298();
        swift_bridgeObjectRelease();
        v6 = 0;
        if (!v5)
          return v6;
      }
      else
      {
        ++v6;
        if (v9 == v5)
          return 0;
      }
    }
  }
  return v6;
}

uint64_t sub_23DE9B030(uint64_t result, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = 0;
  v15 = result + 32;
  v4 = MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(result + 16);
  while (1)
  {
    v17 = v4;
    if (v3 > v2)
      v2 = v3;
    v13 = v2;
LABEL_6:
    if (v3 == v2)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    v5 = *a2;
    v19 = *(_OWORD *)(v15 + 16 * v3);
    if ((unint64_t)*a2 >> 62)
    {
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v6 = sub_23DF15298();
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    v18 = v3 + 1;
    if (v6)
      break;
LABEL_22:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = v17;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_23DEAA41C(0, *(_QWORD *)(v17 + 16) + 1, 1);
      v4 = v17;
    }
    v12 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 24);
    v3 = v18;
    if (v12 >= v11 >> 1)
    {
      result = sub_23DEAA41C(v11 > 1, v12 + 1, 1);
      v4 = v17;
    }
    *(_QWORD *)(v4 + 16) = v12 + 1;
    *(_OWORD *)(v4 + 16 * v12 + 32) = v19;
    v2 = v14;
    if (v18 == v14)
      return v4;
  }
  v7 = 4;
  while (1)
  {
    v8 = v7 - 4;
    if ((v5 & 0xC000000000000001) != 0)
    {
      result = MEMORY[0x242647BF0](v7 - 4, v5);
      v9 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_30;
    }
    else
    {
      result = swift_retain();
      v9 = v7 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    swift_getObjectType();
    v10 = sub_23DEF937C();
    swift_release();
    if ((v10 & 1) != 0)
      break;
    ++v7;
    if (v9 == v6)
      goto LABEL_22;
  }
  swift_unknownObjectRelease_n();
  result = swift_bridgeObjectRelease_n();
  v4 = v17;
  v3 = v18;
  v2 = v13;
  if (v18 != v14)
    goto LABEL_6;
  return v4;
}

uint64_t sub_23DE9B2A0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DE9B2DC()
{
  uint64_t v0;

  return sub_23DE985B8(*(uint64_t (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23DE9B2E8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

void sub_23DE9B2F8(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v3 = sub_23DF151E4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DE9B354()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23DE9B388()
{
  uint64_t v0;

  sub_23DE97968(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_23DE9B394(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3)
    return sub_23DE9B2E8(result);
  return result;
}

uint64_t storeEnumTagSinglePayload for OrchestrationDirector.PauseState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DE9B3F4 + 4 * byte_23DF16AE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DE9B428 + 4 * byte_23DF16AE0[v4]))();
}

uint64_t sub_23DE9B428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE9B430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE9B438);
  return result;
}

uint64_t sub_23DE9B444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE9B44CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DE9B450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE9B458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OrchestrationDirector.PauseState()
{
  return &type metadata for OrchestrationDirector.PauseState;
}

uint64_t *destroy for OrchestrationDirector.RunState(uint64_t *result)
{
  uint64_t v1;

  LODWORD(v1) = -1;
  if ((unint64_t)*result < 0xFFFFFFFF)
    v1 = *result;
  if ((int)v1 - 1 < 0)
  {
    if (*result)
      return (uint64_t *)swift_release();
  }
  return result;
}

_QWORD *_s19HealthOrchestration21OrchestrationDirectorC8RunStateOwCP_0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((int)v4 - 1 < 0 && v3)
  {
    v5 = a2[1];
    *a1 = v3;
    a1[1] = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

uint64_t *assignWithCopy for OrchestrationDirector.RunState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *a1;
  LODWORD(v5) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *a1;
  v7 = v6 - 1;
  v8 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v5 = *a2;
  v9 = v5 - 1;
  if (v7 < 0)
  {
    if (v9 < 0)
    {
      if (!v4)
        goto LABEL_8;
      if (v8)
      {
        v12 = a2[1];
        *a1 = v8;
        a1[1] = v12;
        swift_retain();
        swift_release();
        return a1;
      }
    }
    else if (!v4)
    {
      goto LABEL_13;
    }
    swift_release();
    goto LABEL_13;
  }
  if ((v9 & 0x80000000) == 0)
  {
LABEL_13:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
LABEL_8:
  if (!v8)
    goto LABEL_13;
  v10 = a2[1];
  *a1 = v8;
  a1[1] = v10;
  swift_retain();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for OrchestrationDirector.RunState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  LODWORD(v5) = -1;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    v5 = *a1;
  if ((int)v5 - 1 >= 0)
    goto LABEL_9;
  v6 = *a2;
  LODWORD(v7) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v7 = *a2;
  if ((int)v7 - 1 < 0)
  {
    if (!v4)
    {
      if (v6)
      {
        v10 = a2[1];
        *a1 = v6;
        a1[1] = v10;
        return a1;
      }
      goto LABEL_9;
    }
    if (v6)
    {
      v9 = a2[1];
      *a1 = v6;
      a1[1] = v9;
      swift_release();
      return a1;
    }
    goto LABEL_8;
  }
  if (v4)
LABEL_8:
    swift_release();
LABEL_9:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for OrchestrationDirector.RunState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 2;
  if (v5 >= 4)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OrchestrationDirector.RunState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

uint64_t sub_23DE9B6F0(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_23DE9B714(_QWORD *result, unsigned int a2)
{
  uint64_t v2;

  if (a2 > 0x7FFFFFFE)
  {
    v2 = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for OrchestrationDirector.RunState()
{
  return &type metadata for OrchestrationDirector.RunState;
}

unint64_t sub_23DE9B754()
{
  unint64_t result;

  result = qword_256D0E458;
  if (!qword_256D0E458)
  {
    result = MEMORY[0x2426483D0](&unk_23DF16C34, &type metadata for OrchestrationDirector.PauseState);
    atomic_store(result, (unint64_t *)&qword_256D0E458);
  }
  return result;
}

uint64_t sub_23DE9B79C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41[32];
  uint64_t v42;

  v30 = a5;
  v31 = a8;
  v36 = a1;
  v37 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v38 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v34 = (char *)&v27 - v14;
  v39 = a4;
  MEMORY[0x24BDAC7A8](v13, v15);
  v33 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = sub_23DF14FC8();
  if (!v21)
    return sub_23DF14EF0();
  v22 = v21;
  v28 = v17;
  v42 = sub_23DF15250();
  v35 = sub_23DF1525C();
  sub_23DF15214();
  v39 = v20;
  result = sub_23DF14FBC();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v24 = v34;
    while (1)
    {
      v25 = (void (*)(char *, _QWORD))sub_23DF14FE0();
      (*(void (**)(char *))(v11 + 16))(v24);
      v25(v41, 0);
      v26 = v40;
      v36(v24, v38);
      if (v26)
        break;
      v40 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
      sub_23DF15244();
      sub_23DF14FD4();
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
        return v42;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v38, v30);
  }
  return result;
}

void SecureCodingValuesAnchor.init(identifier:values:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  type metadata accessor for SecureCodingValuesAnchor();
}

uint64_t sub_23DE9BABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for SecureCodingValuesAnchor()
{
  JUMPOUT(0x242648388);
}

uint64_t SecureCodingValuesAnchor.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SecureCodingValuesAnchor.values.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SecureCodingValuesAnchor.hasDifference(from:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD v23[2];

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DF150F4();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)v23 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12, v16);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v19 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, a3);
    v20 = v6;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 16))(v8, v23[1] + *(int *)(a3 + 52), v5);
    v21 = sub_23DF14DDC();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a3);
    v19 = v21 ^ 1;
  }
  return v19 & 1;
}

uint64_t SecureCodingValuesAnchor.merged(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_23DE9BD04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DE9BDF8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7365756C6176;
  else
    return 0x696669746E656469;
}

uint64_t sub_23DE9BE30()
{
  char *v0;

  return sub_23DE9BDF8(*v0);
}

uint64_t sub_23DE9BE38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE9BD04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DE9BE5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DE913F8();
  *a1 = result;
  return result;
}

uint64_t sub_23DE9BE8C(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF16EB0, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DE9BEC0(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF16EB0, a1);
  return sub_23DF154D8();
}

void SecureCodingValuesAnchor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[22];

  v8[6] = a3;
  v8[8] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v8[7] = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[17] = v4;
  v8[18] = v5;
  v8[19] = v6;
  v8[20] = v7;
  type metadata accessor for SecureCodingValuesAnchor.CodingKeys();
}

void sub_23DE9BF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x2426483D0](&unk_23DF16EB0, a1);
  v6 = sub_23DF15340();
  *(_QWORD *)(v5 - 136) = v6;
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  *(_QWORD *)(v5 - 152) = v4;
  *(_QWORD *)(v5 - 120) = v4;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 176) = v1;
  *(_QWORD *)(v5 - 168) = v3;
  *(_QWORD *)(v5 - 184) = v2;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v1;
  type metadata accessor for SecureCodingValuesAnchor();
}

uint64_t sub_23DE9BFF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v8 = &v25[-v7];
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v4 - 144) = v3;
  v9 = *(_QWORD *)(v4 - 128);
  sub_23DF154B4();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v4 - 232) = v6;
  *(_QWORD *)(v4 - 224) = v8;
  *(_QWORD *)(v4 - 216) = a1;
  v10 = *(_QWORD *)(v4 - 152);
  *(_QWORD *)(v4 - 128) = v2;
  sub_23DE9C2F4();
  *(_BYTE *)(v4 - 65) = 1;
  sub_23DE9C858((unint64_t *)&unk_256D0E468, (uint64_t (*)(void))sub_23DE90AC4, MEMORY[0x24BEE12D0]);
  v12 = *(_QWORD *)(v4 - 144);
  v11 = *(_QWORD *)(v4 - 136);
  v13 = sub_23DF15334();
  *(_QWORD *)(v4 - 240) = v25;
  v14 = *(_QWORD *)(v4 - 120);
  *(_QWORD *)(v4 - 248) = v14;
  *(_QWORD *)(v4 - 120) = v14;
  MEMORY[0x24BDAC7A8](v13, v15);
  v16 = *(_QWORD *)(v4 - 168);
  *(_QWORD *)&v25[-32] = v10;
  *(_QWORD *)&v25[-24] = v16;
  v17 = *(_QWORD *)(v4 - 176);
  *(_QWORD *)&v25[-16] = *(_QWORD *)(v4 - 184);
  *(_QWORD *)&v25[-8] = v17;
  swift_getAssociatedTypeWitness();
  sub_23DE9C3F8();
  v18 = sub_23DF14E9C();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v18, v10, v16);
  v20 = *(_QWORD *)(v4 - 224);
  v21 = *(_QWORD *)(v4 - 216);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 192) + 32))(v20 + *(int *)(v21 + 52), v19, v10);
  *(_BYTE *)(v4 - 65) = 0;
  sub_23DE90B4C();
  sub_23DF15334();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v12, v11);
  v22 = *(_QWORD *)(v4 - 112);
  *(_QWORD *)v20 = *(_QWORD *)(v4 - 120);
  *(_QWORD *)(v20 + 8) = v22;
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v4 - 104);
  v23 = *(_QWORD *)(v4 - 232);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v23 + 16))(*(_QWORD *)(v4 - 208), v20, v21);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v20, v21);
}

void type metadata accessor for SecureCodingValuesAnchor.CodingKeys()
{
  JUMPOUT(0x242648388);
}

void sub_23DE9C2F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0E460)
  {
    v0 = sub_23DF14F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0E460);
  }
}

uint64_t sub_23DE9C348@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  sub_23DE9D2E8();
  swift_getAssociatedTypeWitness();
  result = sub_23DF15028();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_23DE9C3DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_23DE9C348(a1);
}

unint64_t sub_23DE9C3F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D0E478;
  if (!qword_256D0E478)
  {
    sub_23DE9C2F4();
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_256D0E478);
  }
  return result;
}

void SecureCodingValuesAnchor.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v7[4] = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v4[3];
  v5 = v4[4];
  v8 = v4[5];
  v9 = v5;
  v11 = v2;
  v12 = v6;
  v13 = v5;
  v14 = v8;
  type metadata accessor for SecureCodingValuesAnchor.CodingKeys();
}

uint64_t sub_23DE9C4C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x2426483D0](&unk_23DF16EB0, a1);
  v6 = sub_23DF153A0();
  *(_QWORD *)(v5 - 232) = v6;
  *(_QWORD *)(v5 - 248) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v23 - v8;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v5 - 240) = v9;
  v10 = *(_QWORD *)(v5 - 224);
  v11 = *(_QWORD *)(v5 - 200);
  v12 = *(_QWORD *)(v5 - 192);
  sub_23DF154C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v12 + *(int *)(v4 + 52), v3);
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 152) = v2;
  v13 = *(_QWORD *)(v5 - 216);
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v5 - 208);
  *(_QWORD *)(v5 - 136) = v13;
  v14 = sub_23DE9C804();
  v15 = *(_QWORD *)(v5 - 184);
  v16 = sub_23DE9B79C((void (*)(char *, char *))sub_23DE9C7E4, v5 - 176, v3, MEMORY[0x24BDCDDE8], v14, *(_QWORD *)(v2 + 8), MEMORY[0x24BEE3F20], v5 - 120);
  if (v15)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v3);
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 248) + 8))(*(_QWORD *)(v5 - 240), *(_QWORD *)(v5 - 232));
  }
  else
  {
    v18 = v16;
    v19 = *(_QWORD *)(v5 - 248);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v3);
    *(_QWORD *)(v5 - 120) = v18;
    *(_BYTE *)(v5 - 65) = 1;
    sub_23DE9C2F4();
    sub_23DE9C858(qword_256D0E480, (uint64_t (*)(void))sub_23DE90E10, MEMORY[0x24BEE12A0]);
    v20 = *(_QWORD *)(v5 - 240);
    v21 = *(_QWORD *)(v5 - 232);
    sub_23DF15388();
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v5 - 120) = *(_QWORD *)v12;
    *(_QWORD *)(v5 - 112) = v22;
    *(_OWORD *)(v5 - 104) = *(_OWORD *)(v12 + 16);
    *(_BYTE *)(v5 - 65) = 0;
    sub_23DE90E54();
    sub_23DF15388();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  }
}

void sub_23DE9C6F8(uint64_t *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v13[0] = 0;
  v6 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 1, v13);
  v7 = v13[0];
  if (v6)
  {
    v8 = sub_23DF14BCC();
    v10 = v9;

    *a3 = v8;
    a3[1] = v10;
  }
  else
  {
    v11 = v7;
    v12 = sub_23DF14B78();

    swift_willThrow();
    *a2 = v12;
  }
}

void sub_23DE9C7E4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_23DE9C6F8(a1, a2, a3);
}

unint64_t sub_23DE9C804()
{
  unint64_t result;

  result = qword_25432DBB8;
  if (!qword_25432DBB8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25432DBB8);
  }
  return result;
}

uint64_t sub_23DE9C858(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_23DE9C2F4();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x2426483D0](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static SecureCodingValuesAnchor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_23DF15400() & 1) != 0)
    type metadata accessor for SecureCodingValuesAnchor();
  return 0;
}

uint64_t sub_23DE9C96C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingValuesAnchor<A>);
  a1[2] = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingValuesAnchor<A>, a2);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingValuesAnchor<A>, a2);
  a1[3] = result;
  return result;
}

void sub_23DE9C9C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SecureCodingValuesAnchor.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_23DE9C9E4(uint64_t a1, uint64_t a2)
{
  SecureCodingValuesAnchor.encode(to:)(a1, a2);
}

uint64_t sub_23DE9C9F8(_QWORD *a1, _QWORD *a2)
{
  return static SecureCodingValuesAnchor.== infix(_:_:)(a1, a2);
}

uint64_t sub_23DE9CA08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  MEMORY[0x2426483D0](MEMORY[0x24BEE12C8]);
  result = sub_23DF14F20();
  *a1 = result;
  return result;
}

uint64_t sub_23DE9CA64(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2426483D0](MEMORY[0x24BEE12E0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23DE9CA90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DF14F14();
  MEMORY[0x2426483D0](MEMORY[0x24BEE12C8], v2);
  result = sub_23DF14FB0();
  *a1 = result;
  return result;
}

uint64_t sub_23DE9CB08(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2426483D0](MEMORY[0x24BEE1728]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of InstantiableCollection.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_23DE9CB3C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DE9CBB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 32) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = a2[3];
    a1[2] = a2[2];
    a1[3] = v11;
    v12 = ((unint64_t)a1 + v6 + 32) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 32) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_23DE9CC88(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_23DE9CCD4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 32) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 32) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v10, v6);
  return a1;
}

_QWORD *sub_23DE9CD54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_23DE9CDEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

_QWORD *sub_23DE9CE3C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_23DE9CEB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DE9CF88 + 4 * byte_23DF16C60[(v9 - 1)]))();
}

void sub_23DE9CFF8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_23DE9D1F4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DE9D1FC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DE9D248 + 4 * byte_23DF16C73[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DE9D27C + 4 * byte_23DF16C6E[v4]))();
}

uint64_t sub_23DE9D27C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE9D284(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE9D28CLL);
  return result;
}

uint64_t sub_23DE9D298(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE9D2A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DE9D2A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE9D2AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23DE9D2B8()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DE9D2C8()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DE9D2D8()
{
  JUMPOUT(0x2426483D0);
}

unint64_t sub_23DE9D2E8()
{
  unint64_t result;

  result = qword_25432D9A0;
  if (!qword_25432D9A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D9A0);
  }
  return result;
}

uint64_t BuiltinProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t BuiltinProvider.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t BuiltinProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t BuiltinProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _s19HealthOrchestration15BuiltinProviderC12inputSignals3for8observerSayAA11InputSignal_pGAA11WorkContext_p_AA0iJ8Observer_ptF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;

  v37 = a2;
  v36 = type metadata accessor for LocaleInputSignal.BuiltinLocaleProvider();
  MEMORY[0x24BDAC7A8](v36, v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE9DC1C(0, &qword_25432DB18, (unint64_t *)&qword_25432D308);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23DF16F00;
  v10 = type metadata accessor for CalendarDayInputSignal();
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  swift_allocObject();
  v11 = swift_unknownObjectRetain();
  v12 = CalendarDayInputSignal.init(observer:dateProvider:)(v11, a4, (uint64_t)v38);
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 64) = sub_23DE8F998((unint64_t *)&unk_25432D670, (uint64_t (*)(uint64_t))type metadata accessor for CalendarDayInputSignal, (uint64_t)&protocol conformance descriptor for CalendarDayInputSignal);
  *(_QWORD *)(v9 + 32) = v12;
  v13 = type metadata accessor for DeadlineInputSignal.DispatchSourceTimeDelayProvider();
  v14 = swift_allocObject();
  sub_23DE9B2F8(0, (unint64_t *)&qword_25432DA40);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v14 + 16) = v15;
  v16 = type metadata accessor for DeadlineInputSignal();
  v17 = (_QWORD *)swift_allocObject();
  v17[7] = v13;
  v17[8] = &off_250EAF248;
  v17[4] = v14;
  sub_23DE9DAE4();
  v18 = swift_allocObject();
  v19 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 16) = v19;
  v17[9] = v18;
  v17[2] = a3;
  v17[3] = a4;
  *(_QWORD *)(v9 + 96) = v16;
  *(_QWORD *)(v9 + 104) = sub_23DE8F998(&qword_25432D630, (uint64_t (*)(uint64_t))type metadata accessor for DeadlineInputSignal, (uint64_t)&protocol conformance descriptor for DeadlineInputSignal);
  *(_QWORD *)(v9 + 72) = v17;
  v20 = (void *)objc_opt_self();
  swift_unknownObjectRetain_n();
  v21 = objc_msgSend(v20, sel_autoupdatingCurrentLocale);
  sub_23DF14C20();

  v22 = type metadata accessor for LocaleInputSignal();
  v23 = (_QWORD *)swift_allocObject();
  v23[7] = v36;
  v23[8] = &off_250EB1D20;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23 + 4);
  sub_23DE9DB9C((uint64_t)v8, (uint64_t)boxed_opaque_existential_1);
  sub_23DE9B2F8(0, (unint64_t *)&qword_25432DA28);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  v23[9] = v25;
  v23[2] = a3;
  v23[3] = a4;
  sub_23DE9DBE0((uint64_t)v8);
  *(_QWORD *)(v9 + 136) = v22;
  *(_QWORD *)(v9 + 144) = sub_23DE8F998(qword_25432D4A0, (uint64_t (*)(uint64_t))type metadata accessor for LocaleInputSignal, (uint64_t)&protocol conformance descriptor for LocaleInputSignal);
  *(_QWORD *)(v9 + 112) = v23;
  v26 = type metadata accessor for NotificationInputSignal();
  swift_allocObject();
  swift_unknownObjectRetain();
  v27 = swift_unknownObjectRetain();
  v28 = v37;
  v29 = NotificationInputSignal.init(context:observer:)(v27, v37, a3, a4);
  *(_QWORD *)(v9 + 176) = v26;
  *(_QWORD *)(v9 + 184) = sub_23DE8F998(qword_25432D688, (uint64_t (*)(uint64_t))type metadata accessor for NotificationInputSignal, (uint64_t)&protocol conformance descriptor for NotificationInputSignal);
  *(_QWORD *)(v9 + 152) = v29;
  v30 = type metadata accessor for POSIXSignalInputSignal();
  swift_allocObject();
  swift_unknownObjectRetain();
  v31 = swift_unknownObjectRetain();
  v32 = POSIXSignalInputSignal.init(context:observer:)(v31, v28, a3, a4);
  *(_QWORD *)(v9 + 216) = v30;
  *(_QWORD *)(v9 + 224) = sub_23DE8F998(&qword_25432D680, (uint64_t (*)(uint64_t))type metadata accessor for POSIXSignalInputSignal, (uint64_t)&protocol conformance descriptor for POSIXSignalInputSignal);
  *(_QWORD *)(v9 + 192) = v32;
  v33 = type metadata accessor for PresenceInputSignal();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = a3;
  *(_QWORD *)(v34 + 24) = a4;
  *(_QWORD *)(v9 + 256) = v33;
  *(_QWORD *)(v9 + 264) = sub_23DE8F998(&qword_25432D638, (uint64_t (*)(uint64_t))type metadata accessor for PresenceInputSignal, (uint64_t)&protocol conformance descriptor for PresenceInputSignal);
  *(_QWORD *)(v9 + 232) = v34;
  swift_unknownObjectRetain();
  return v9;
}

uint64_t sub_23DE9D788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  _QWORD v18[4];
  _QWORD aBlock[7];
  _QWORD v20[5];

  v20[3] = sub_23DE9DC78();
  v20[4] = &protocol witness table for RBSProcessMonitor;
  v20[0] = a4;
  v10 = sub_23DE930F0(MEMORY[0x24BEE4AF8]);
  sub_23DE9B2F8(0, (unint64_t *)&qword_25432C2A0);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  v12 = (os_unfair_lock_s *)(v11 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  v13 = v11 + 16;
  a5[2] = v11;
  a5[8] = a2;
  a5[9] = a3;
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_23DEDE2E4(v13, a1);
  os_unfair_lock_unlock(v12);
  swift_release();
  sub_23DE902F4((uint64_t)v20, (uint64_t)(a5 + 3));
  v18[2] = a1;
  v18[3] = a5;
  v14 = (void *)v20[0];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_23DE9DCB4;
  *(_QWORD *)(v15 + 24) = v18;
  aBlock[4] = sub_23DE9DCCC;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DEDEEE0;
  aBlock[3] = &block_descriptor_1;
  v16 = _Block_copy(aBlock);
  swift_retain();
  objc_msgSend(v14, sel_updateConfiguration_, v16);
  _Block_release(v16);
  swift_release();
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    return (uint64_t)a5;
  }
  return result;
}

uint64_t _s19HealthOrchestration15BuiltinProviderC28environmentalStateComponents8observerSayAA013EnvironmentalF9Component_pGAA0ifJ8Observer_p_tF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;

  sub_23DE9DC1C(0, &qword_25432DB50, qword_25432C180);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23DF16980;
  type metadata accessor for DeviceLockStateComponent.LockStateObserverShim();
  v5 = swift_allocObject();
  type metadata accessor for DeviceLockStateComponent();
  v6 = (_QWORD *)swift_allocObject();
  v7 = swift_unknownObjectRetain();
  v8 = sub_23DE94AE8(v7, a2, v5, v6);
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = &protocol witness table for DeviceLockStateComponent;
  v9 = objc_allocWithZone(MEMORY[0x24BE80CC8]);
  swift_unknownObjectRetain();
  v10 = objc_msgSend(v9, sel_init);
  type metadata accessor for ProcessStateComponent();
  v11 = (_QWORD *)swift_allocObject();
  v12 = sub_23DE9D788((uint64_t)&unk_250EADE38, a1, a2, (uint64_t)v10, v11);
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 48) = v12;
  *(_QWORD *)(v4 + 56) = &protocol witness table for ProcessStateComponent;
  return v4;
}

uint64_t type metadata accessor for BuiltinProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for BuiltinProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BuiltinProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

void sub_23DE9DAE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA78)
  {
    sub_23DE9DB48();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA78);
  }
}

void sub_23DE9DB48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D8E0)
  {
    v0 = sub_23DF14F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D8E0);
  }
}

uint64_t sub_23DE9DB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocaleInputSignal.BuiltinLocaleProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DE9DBE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocaleInputSignal.BuiltinLocaleProvider();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DE9DC1C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_23DE95524(255, a3);
    v4 = sub_23DF153D0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DE9DC78()
{
  unint64_t result;

  result = qword_25432D9B8;
  if (!qword_25432D9B8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D9B8);
  }
  return result;
}

void sub_23DE9DCB4(void *a1)
{
  sub_23DEDE4E4(a1);
}

uint64_t sub_23DE9DCBC()
{
  return swift_deallocObject();
}

uint64_t sub_23DE9DCCC(uint64_t a1)
{
  uint64_t v1;

  return sub_23DEDEEC0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

double WorkPlanAnalytics.blockedDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void WorkPlanAnalytics.blockedDuration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*WorkPlanAnalytics.blockedDuration.modify())()
{
  return nullsub_1;
}

double WorkPlanAnalytics.pausedDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void WorkPlanAnalytics.pausedDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*WorkPlanAnalytics.pausedDuration.modify())()
{
  return nullsub_1;
}

double WorkPlanAnalytics.runnableDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void WorkPlanAnalytics.runnableDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*WorkPlanAnalytics.runnableDuration.modify())()
{
  return nullsub_1;
}

uint64_t WorkPlanAnalytics.replacementCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t WorkPlanAnalytics.replacementCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*WorkPlanAnalytics.replacementCount.modify())()
{
  return nullsub_1;
}

double WorkPlanAnalytics.runDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void WorkPlanAnalytics.runDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*WorkPlanAnalytics.runDuration.modify())()
{
  return nullsub_1;
}

uint64_t WorkPlanAnalytics.description.getter()
{
  sub_23DF15190();
  sub_23DF14E60();
  sub_23DF14F68();
  sub_23DF14E60();
  sub_23DF14F68();
  sub_23DF14E60();
  sub_23DF14F68();
  sub_23DF14E60();
  sub_23DF14F68();
  sub_23DF14E60();
  sub_23DF153C4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return 0;
}

uint64_t getEnumTagSinglePayload for WorkPlanAnalytics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WorkPlanAnalytics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WorkPlanAnalytics()
{
  return &type metadata for WorkPlanAnalytics;
}

uint64_t dispatch thunk of EnvironmentalStateComponentProvider.environmentalStateComponents(observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

_QWORD *DeadlineInputSignal.__allocating_init(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for DeadlineInputSignal.DispatchSourceTimeDelayProvider();
  v5 = swift_allocObject();
  sub_23DE9E094();
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v5 + 16) = v6;
  v7 = (_QWORD *)swift_allocObject();
  v7[7] = v4;
  v7[8] = &off_250EAF248;
  v7[4] = v5;
  sub_23DE9DAE4();
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = v9;
  v7[9] = v8;
  v7[2] = a1;
  v7[3] = a2;
  return v7;
}

uint64_t type metadata accessor for DeadlineInputSignal.DispatchSourceTimeDelayProvider()
{
  return objc_opt_self();
}

void sub_23DE9E094()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA40)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA40);
  }
}

void static InputSignalIdentifier.deadline.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF16FE0;
  a1[2] = 0;
  a1[3] = 0;
}

void static InputSignalSet.LookupKey.deadline.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF16FE0;
  a1[2] = 0;
  a1[3] = 0;
}

void DeadlineInputSignal.Configuration.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF16FE0;
  a1[2] = 0;
  a1[3] = 0;
}

double DeadlineInputSignal.Configuration.deadline.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DeadlineInputSignal.Configuration.deadline.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DeadlineInputSignal.Configuration.deadline.modify())()
{
  return nullsub_1;
}

uint64_t DeadlineInputSignal.Configuration.interval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t DeadlineInputSignal.Configuration.interval.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*DeadlineInputSignal.Configuration.interval.modify())()
{
  return nullsub_1;
}

HealthOrchestration::DeadlineInputSignal::Configuration __swiftcall DeadlineInputSignal.Configuration.init(deadline:interval:)(Swift::Double deadline, Swift::Double_optional interval)
{
  char v2;
  uint64_t v3;
  HealthOrchestration::DeadlineInputSignal::Configuration result;

  *(Swift::Double *)v3 = deadline;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)&interval.is_nil;
  *(_BYTE *)(v3 + 16) = v2 & 1;
  result.interval.value = interval.value;
  result.interval.is_nil = interval.is_nil;
  result.deadline = deadline;
  return result;
}

uint64_t DeadlineInputSignal.Configuration.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23DF1549C();
  if (v1 == 1)
    return sub_23DF15490();
  sub_23DF15490();
  return sub_23DF1549C();
}

uint64_t static DeadlineInputSignal.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t DeadlineInputSignal.Configuration.hashValue.getter()
{
  sub_23DF15478();
  DeadlineInputSignal.Configuration.hash(into:)();
  return sub_23DF154A8();
}

void sub_23DE9E2BC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF16FE0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_23DE9E2E0()
{
  sub_23DF15478();
  DeadlineInputSignal.Configuration.hash(into:)();
  return sub_23DF154A8();
}

uint64_t sub_23DE9E33C()
{
  sub_23DF15478();
  DeadlineInputSignal.Configuration.hash(into:)();
  return sub_23DF154A8();
}

uint64_t sub_23DE9E390(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(double *)a1 == *(double *)a2)
  {
    v2 = *(_BYTE *)(a2 + 16);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 16))
        return 1;
    }
    else
    {
      if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

HealthOrchestration::DeadlineInputSignal::Anchor __swiftcall DeadlineInputSignal.Anchor.init(timestamp:)(HealthOrchestration::DeadlineInputSignal::Anchor timestamp)
{
  HealthOrchestration::DeadlineInputSignal::Anchor *v1;

  v1->timestamp = timestamp.timestamp;
  return timestamp;
}

double DeadlineInputSignal.Anchor.timestamp.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DeadlineInputSignal.Anchor.timestamp.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DeadlineInputSignal.Anchor.timestamp.modify())()
{
  return nullsub_1;
}

Swift::Bool __swiftcall DeadlineInputSignal.Anchor.hasDifference(from:for:)(HealthOrchestration::DeadlineInputSignal::Anchor_optional from, HealthOrchestration::DeadlineInputSignal::Configuration a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;

  v3 = **(double **)&a2.interval.is_nil;
  v4 = *v2;
  if ((*(_BYTE *)(*(_QWORD *)&from.is_nil + 8) & 1) != 0)
  {
    v5 = 0.0;
    if (v3 <= 0.0)
      goto LABEL_3;
  }
  else
  {
    v5 = **(double **)&from.is_nil;
    if (**(double **)&from.is_nil >= v3)
    {
LABEL_3:
      if ((*(_BYTE *)(*(_QWORD *)&a2.interval.is_nil + 16) & 1) != 0)
        return v4 < v3;
      v8 = *(double *)(*(_QWORD *)&a2.interval.is_nil + 8);
      v7 = v3 + (floor((v5 - v3) / v8) + 1.0) * v8;
      if (v4 < v3)
        return v3 != v7;
      goto LABEL_13;
    }
  }
  if (v4 >= v3)
  {
    if ((*(_BYTE *)(*(_QWORD *)&a2.interval.is_nil + 16) & 1) != 0)
      return 1;
    v8 = *(double *)(*(_QWORD *)&a2.interval.is_nil + 8);
    v7 = **(double **)&a2.interval.is_nil;
LABEL_13:
    v3 = v3 + (floor((v4 - v3) / v8) + 1.0) * v8;
    return v3 != v7;
  }
  v7 = **(double **)&a2.interval.is_nil;
  return v3 != v7;
}

HealthOrchestration::DeadlineInputSignal::Anchor __swiftcall DeadlineInputSignal.Anchor.merged(with:)(HealthOrchestration::DeadlineInputSignal::Anchor with)
{
  double *v1;
  HealthOrchestration::DeadlineInputSignal::Anchor *v2;
  double *v3;
  HealthOrchestration::DeadlineInputSignal::Anchor result;

  *(HealthOrchestration::DeadlineInputSignal::Anchor *)&result.timestamp = *(HealthOrchestration::DeadlineInputSignal::Anchor *)v1;
  if (*v1 >= *v3)
    *(HealthOrchestration::DeadlineInputSignal::Anchor *)&result.timestamp = *(HealthOrchestration::DeadlineInputSignal::Anchor *)v3;
  v2->timestamp = result.timestamp;
  return result;
}

BOOL static DeadlineInputSignal.Anchor.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23DE9E4EC()
{
  return 1;
}

uint64_t sub_23DE9E4F4()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DE9E534()
{
  return sub_23DF15484();
}

uint64_t sub_23DE9E558()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DE9E594()
{
  return 0x6D617473656D6974;
}

uint64_t sub_23DE9E5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DF15400();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_23DE9E650(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23DE9E65C()
{
  sub_23DE9F8E4();
  return sub_23DF154CC();
}

uint64_t sub_23DE9E684()
{
  sub_23DE9F8E4();
  return sub_23DF154D8();
}

uint64_t DeadlineInputSignal.Anchor.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_23DE9F928(0, &qword_25432DB08, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DE9F8E4();
  sub_23DF154C0();
  sub_23DF15370();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t DeadlineInputSignal.Anchor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_23DE9F928(0, &qword_25432DAF8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DE9F8E4();
  sub_23DF154B4();
  if (!v2)
  {
    sub_23DF1531C();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *a2 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

double *sub_23DE9E8C4@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double *v2;
  double v3;

  v3 = *result;
  if (*result >= *v2)
    v3 = *v2;
  *a2 = v3;
  return result;
}

uint64_t sub_23DE9E8E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return DeadlineInputSignal.Anchor.init(from:)(a1, a2);
}

uint64_t sub_23DE9E8F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_23DE9F928(0, &qword_25432DB08, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DE9F8E4();
  sub_23DF154C0();
  sub_23DF15370();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

BOOL sub_23DE9E9E4(double *a1, double *a2)
{
  return *a1 == *a2;
}

void DeadlineInputSignal.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF16FE0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t DeadlineInputSignal.observer.getter()
{
  return swift_unknownObjectRetain();
}

_QWORD *DeadlineInputSignal.__allocating_init(observer:provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  v10 = sub_23DEA030C(a1, a2, v9, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v10;
}

_QWORD *DeadlineInputSignal.init(observer:provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x24BDAC7A8](v9, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_23DEA0280(a1, a2, (uint64_t)v11, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

uint64_t sub_23DE9EB6C(double a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  _QWORD *v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = *(_QWORD *)(v1 + 72);
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v5 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(v5 + 48);
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v9 = *(v7 - 2);
      if (v9 > a1)
        goto LABEL_8;
      if ((*(_BYTE *)v7 & 1) == 0)
        break;
LABEL_4:
      v7 += 3;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    v9 = v9 + *(v7 - 1) * (floor((a1 - v9) / *(v7 - 1)) + 1.0);
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_23DF06734(0, v8[2] + 1, 1, v8);
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
      v8 = sub_23DF06734((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8[2] = v11 + 1;
    *(double *)&v8[v11 + 4] = v9;
    goto LABEL_4;
  }
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_14:
  swift_bridgeObjectRelease();
  v14 = v8;
  swift_bridgeObjectRetain();
  sub_23DE9F87C((uint64_t *)&v14);
  swift_bridgeObjectRelease();
  if (v14[2])
    v12 = v14[4];
  else
    v12 = 0;
  swift_release();
  return v12;
}

_QWORD *sub_23DE9ED14()
{
  _QWORD *result;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(double *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, double);
  _QWORD *v19;
  double v20;

  swift_beginAccess();
  result = (_QWORD *)swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 4;
    v3 = result[7];
    v4 = result[8];
    __swift_project_boxed_opaque_existential_1(result + 4, v3);
    v5 = (*(double (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    v6 = v1[3];
    ObjectType = swift_getObjectType();
    v20 = v5;
    v19 = v1;
    v8 = *(void (**)(double *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8);
    v9 = type metadata accessor for DeadlineInputSignal();
    v11 = sub_23DEA068C(&qword_25432D630, v10, (uint64_t (*)(uint64_t))type metadata accessor for DeadlineInputSignal, (uint64_t)&protocol conformance descriptor for DeadlineInputSignal);
    v8(&v20, &v19, v9, v11, ObjectType, v6);
    *(double *)&v12 = COERCE_DOUBLE(sub_23DE9EB6C(v5));
    if ((v13 & 1) != 0)
    {
      return (_QWORD *)swift_release();
    }
    else
    {
      v14 = *(double *)&v12;
      v15 = v1[7];
      v16 = v1[8];
      __swift_project_boxed_opaque_existential_1(v2, v15);
      v17 = swift_allocObject();
      swift_weakInit();
      v18 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, double))(v16 + 16);
      swift_retain();
      v18(sub_23DEA0408, v17, v15, v16, v14);
      swift_release();
      return (_QWORD *)swift_release_n();
    }
  }
  return result;
}

uint64_t *sub_23DE9EE98@<X0>(uint64_t *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;

  v3 = *result;
  if (*result)
  {
    swift_getObjectType();
    result = (uint64_t *)sub_23DF150AC();
  }
  *a2 = v3 == 0;
  return result;
}

uint64_t sub_23DE9EEE4(uint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t ObjectType;
  void *v31;
  char *v32;
  double v33;
  double v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t *v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[7];

  v52 = a2;
  v53 = a3;
  v6 = sub_23DF14D04();
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v59 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v10);
  v58 = (char *)&v46 - v11;
  v57 = sub_23DF14D58();
  v55 = *(_QWORD *)(v57 - 8);
  v13 = MEMORY[0x24BDAC7A8](v57, v12);
  v54 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v56 = (char *)&v46 - v16;
  v17 = sub_23DF14D10();
  v50 = *(_QWORD *)(v17 - 8);
  v51 = v17;
  MEMORY[0x24BDAC7A8](v17, v18);
  v49 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_23DF14D34();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48, v20);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23DF1507C();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23, v25);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23DF150AC();
    swift_unknownObjectRelease_n();
    *a1 = 0;
  }
  sub_23DEA0AC8();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  v28 = (void (*)(uint64_t))MEMORY[0x24BEE57C0];
  sub_23DEA068C(&qword_25432D9C8, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  v46 = a1;
  sub_23DEA0B5C(0, (unint64_t *)&qword_25432D970, v28);
  sub_23DEA0B04(&qword_25432D978, (unint64_t *)&qword_25432D970, v28);
  sub_23DF15148();
  v29 = sub_23DF15088();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  ObjectType = swift_getObjectType();
  aBlock[4] = v52;
  aBlock[5] = v53;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE9F35C;
  aBlock[3] = &block_descriptor_2;
  v31 = _Block_copy(aBlock);
  swift_retain();
  sub_23DF14D28();
  v32 = v49;
  sub_23DE9F38C();
  sub_23DF150A0();
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v48);
  swift_release();
  v33 = a4 - CFAbsoluteTimeGetCurrent();
  if (v33 < 0.0)
    v34 = 0.0;
  else
    v34 = v33;
  v35 = v54;
  sub_23DF14D40();
  v36 = v56;
  MEMORY[0x2426477B8](v35, v34);
  v55 = *(_QWORD *)(v55 + 8);
  v37 = v57;
  ((void (*)(char *, uint64_t))v55)(v35, v57);
  v39 = v60;
  v38 = v61;
  v40 = *(void (**)(char *, _QWORD, uint64_t))(v60 + 104);
  v41 = v58;
  v40(v58, *MEMORY[0x24BEE5418], v61);
  v42 = v59;
  *(_QWORD *)v59 = 0;
  v40(v42, *MEMORY[0x24BEE5400], v38);
  MEMORY[0x242647B18](v36, v41, v42, ObjectType);
  v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  v43(v42, v38);
  v43(v41, v38);
  ((void (*)(char *, uint64_t))v55)(v36, v37);
  v44 = v46;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *v44 = v29;
  sub_23DF150B8();
  return swift_unknownObjectRelease();
}

uint64_t sub_23DE9F35C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_23DE9F38C()
{
  void (*v0)(uint64_t);

  sub_23DF14D10();
  v0 = (void (*)(uint64_t))MEMORY[0x24BEE5458];
  sub_23DEA068C(&qword_25432C290, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23DEA0B5C(0, (unint64_t *)&unk_25432D910, v0);
  sub_23DEA0B04((unint64_t *)&unk_25432D920, (unint64_t *)&unk_25432D910, v0);
  return sub_23DF15148();
}

uint64_t sub_23DE9F44C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BEE5418];
  v3 = sub_23DF14D04();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_23DE9F490@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = *MEMORY[0x24BEE5400];
  v3 = sub_23DF14D04();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_23DE9F4D8()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_23DE9F500()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DEA0AAC(v2);
  os_unfair_lock_unlock(v3);
}

void sub_23DE9F55C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  BOOL v4;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DE9EE98(v2, &v4);
  os_unfair_lock_unlock(v3);
}

Swift::Void __swiftcall DeadlineInputSignal.beginObservation(from:configurations:)(HealthOrchestration::DeadlineInputSignal::Anchor_optional from, Swift::OpaquePointer configurations)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(double *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *(*)(), uint64_t, uint64_t, uint64_t, double);
  _QWORD *v22;
  double v23;

  v3 = v2;
  v5 = *v3;
  v6 = v3[9];
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  swift_bridgeObjectRelease();
  *(Swift::OpaquePointer *)(v6 + 16) = configurations;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  v7 = v3[7];
  v8 = v3[8];
  __swift_project_boxed_opaque_existential_1(v3 + 4, v7);
  v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  v10 = v3[3];
  ObjectType = swift_getObjectType();
  v23 = v9;
  v22 = v3;
  v12 = *(void (**)(double *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14 = sub_23DEA068C(&qword_25432D630, v13, (uint64_t (*)(uint64_t))type metadata accessor for DeadlineInputSignal, (uint64_t)&protocol conformance descriptor for DeadlineInputSignal);
  v12(&v23, &v22, v5, v14, ObjectType, v10);
  *(double *)&v15 = COERCE_DOUBLE(sub_23DE9EB6C(v9));
  if ((v16 & 1) == 0)
  {
    v17 = *(double *)&v15;
    v18 = v3[7];
    v19 = v3[8];
    __swift_project_boxed_opaque_existential_1(v3 + 4, v18);
    v20 = swift_allocObject();
    swift_weakInit();
    v21 = *(void (**)(_QWORD *(*)(), uint64_t, uint64_t, uint64_t, double))(v19 + 16);
    swift_retain();
    v21(sub_23DEA0408, v20, v18, v19, v17);
    swift_release_n();
  }
}

Swift::Void __swiftcall DeadlineInputSignal.stopObservation()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[7];
  v2 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t DeadlineInputSignal.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return v0;
}

uint64_t DeadlineInputSignal.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23DE9F7D0()
{
  return swift_unknownObjectRetain();
}

void sub_23DE9F7F8(char a1, Swift::OpaquePointer a2, double a3)
{
  DeadlineInputSignal.beginObservation(from:configurations:)(*(HealthOrchestration::DeadlineInputSignal::Anchor_optional *)(&a1 - 8), a2);
}

uint64_t sub_23DE9F818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 32), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

unint64_t sub_23DE9F860()
{
  return 0xD000000000000013;
}

uint64_t sub_23DE9F87C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DEF7D54(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DE9F984(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_23DE9F8E4()
{
  unint64_t result;

  result = qword_25432D5E0;
  if (!qword_25432D5E0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF172F0, &type metadata for DeadlineInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25432D5E0);
  }
  return result;
}

void sub_23DE9F928(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DE9F8E4();
    v7 = a3(a1, &type metadata for DeadlineInputSignal.Anchor.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DE9F984(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_23DF153B8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_23DEA0014((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_23DEF7D18((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23DF14EFC();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DEF77DC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_23DEF77DC((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_23DEA0014((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEA0014(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_23DEF7A38((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

_QWORD *sub_23DEA0280(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;

  a4[7] = a5;
  a4[8] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  sub_23DE9DAE4();
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = v13;
  a4[9] = v12;
  a4[2] = a1;
  a4[3] = a2;
  return a4;
}

_QWORD *sub_23DEA030C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  return sub_23DEA0280(a1, a2, (uint64_t)v13, v14, a5, a6);
}

uint64_t type metadata accessor for DeadlineInputSignal()
{
  return objc_opt_self();
}

uint64_t sub_23DEA03E4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

_QWORD *sub_23DEA0408()
{
  return sub_23DE9ED14();
}

unint64_t sub_23DEA0410(uint64_t a1)
{
  unint64_t result;

  result = sub_23DEA0434();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DEA0434()
{
  unint64_t result;

  result = qword_25432D5C8;
  if (!qword_25432D5C8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Configuration, &type metadata for DeadlineInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_25432D5C8);
  }
  return result;
}

unint64_t sub_23DEA047C()
{
  unint64_t result;

  result = qword_25432D5D0;
  if (!qword_25432D5D0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Configuration, &type metadata for DeadlineInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_25432D5D0);
  }
  return result;
}

unint64_t sub_23DEA04C4()
{
  unint64_t result;

  result = qword_256D0E628;
  if (!qword_256D0E628)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Configuration, &type metadata for DeadlineInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0E628);
  }
  return result;
}

unint64_t sub_23DEA0508(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23DEA053C();
  a1[2] = sub_23DEA0580();
  result = sub_23DEA05C4();
  a1[3] = result;
  return result;
}

unint64_t sub_23DEA053C()
{
  unint64_t result;

  result = qword_25432D618;
  if (!qword_25432D618)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Anchor, &type metadata for DeadlineInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D618);
  }
  return result;
}

unint64_t sub_23DEA0580()
{
  unint64_t result;

  result = qword_25432D600;
  if (!qword_25432D600)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Anchor, &type metadata for DeadlineInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D600);
  }
  return result;
}

unint64_t sub_23DEA05C4()
{
  unint64_t result;

  result = qword_25432D608;
  if (!qword_25432D608)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Anchor, &type metadata for DeadlineInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D608);
  }
  return result;
}

unint64_t sub_23DEA060C()
{
  unint64_t result;

  result = qword_25432D620;
  if (!qword_25432D620)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DeadlineInputSignal.Anchor, &type metadata for DeadlineInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D620);
  }
  return result;
}

uint64_t sub_23DEA0650(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23DEA068C(qword_25432E140, a2, (uint64_t (*)(uint64_t))type metadata accessor for DeadlineInputSignal, (uint64_t)&protocol conformance descriptor for DeadlineInputSignal);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23DEA068C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2426483D0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of TimeDelayProvider.timestamp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeDelayProvider.fire(at:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TimeDelayProvider.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t method lookup function for DeadlineInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeadlineInputSignal.__allocating_init(observer:provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DeadlineInputSignal.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeadlineInputSignal.Configuration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DeadlineInputSignal.Configuration()
{
  return &type metadata for DeadlineInputSignal.Configuration;
}

ValueMetadata *type metadata accessor for DeadlineInputSignal.Anchor()
{
  return &type metadata for DeadlineInputSignal.Anchor;
}

uint64_t getEnumTagSinglePayload for DeadlineInputSignal.Anchor.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DeadlineInputSignal.Anchor.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DEA080C + 4 * asc_23DF16FF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DEA082C + 4 * byte_23DF16FF5[v4]))();
}

_BYTE *sub_23DEA080C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DEA082C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEA0834(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEA083C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEA0844(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEA084C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23DEA0858()
{
  return 0;
}

ValueMetadata *type metadata accessor for DeadlineInputSignal.Anchor.CodingKeys()
{
  return &type metadata for DeadlineInputSignal.Anchor.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState()
{
  return &type metadata for DeadlineInputSignal.DispatchSourceTimeDelayProvider.ProtectedState;
}

unint64_t sub_23DEA09D8()
{
  unint64_t result;

  result = qword_256D0E6D8;
  if (!qword_256D0E6D8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF172C8, &type metadata for DeadlineInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0E6D8);
  }
  return result;
}

unint64_t sub_23DEA0A20()
{
  unint64_t result;

  result = qword_25432D5F0;
  if (!qword_25432D5F0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF17238, &type metadata for DeadlineInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25432D5F0);
  }
  return result;
}

unint64_t sub_23DEA0A68()
{
  unint64_t result;

  result = qword_25432D5E8;
  if (!qword_25432D5E8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF17260, &type metadata for DeadlineInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25432D5E8);
  }
  return result;
}

uint64_t sub_23DEA0AAC(uint64_t *a1)
{
  uint64_t v1;

  return sub_23DE9EEE4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 32));
}

unint64_t sub_23DEA0AC8()
{
  unint64_t result;

  result = qword_25432D9D0;
  if (!qword_25432D9D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D9D0);
  }
  return result;
}

uint64_t sub_23DEA0B04(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DEA0B5C(255, a2, a3);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE12C8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

void sub_23DEA0B5C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DF14F14();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t SecureCodingCurrentValueWorkPlan.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

__n128 SecureCodingCurrentValueWorkPlan.identifier.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*SecureCodingCurrentValueWorkPlan.identifier.modify())()
{
  return nullsub_1;
}

uint64_t SecureCodingCurrentValueWorkPlan.priority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t SecureCodingCurrentValueWorkPlan.priority.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
  return result;
}

uint64_t (*SecureCodingCurrentValueWorkPlan.priority.modify())()
{
  return nullsub_1;
}

id SecureCodingCurrentValueWorkPlan.value.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

void SecureCodingCurrentValueWorkPlan.value.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
}

uint64_t (*SecureCodingCurrentValueWorkPlan.value.modify())()
{
  return nullsub_1;
}

__n128 SecureCodingCurrentValueWorkPlan.init(identifier:priority:value:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;

  result = *a1;
  v5 = a1[1].n128_u64[0];
  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  *a4 = *a1;
  a4[1].n128_u64[0] = v5;
  a4[1].n128_u64[1] = v6;
  a4[2].n128_u8[0] = v7;
  a4[2].n128_u64[1] = a3;
  return result;
}

id SecureCodingCurrentValueWorkPlan.merged(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v7;
}

uint64_t sub_23DEA0D30(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DEA0E88(char a1)
{
  if (!a1)
    return 0x65756C6176;
  if (a1 == 1)
    return 0x696669746E656469;
  return 0x797469726F697270;
}

BOOL sub_23DEA0EE0(char *a1, char *a2)
{
  return sub_23DE8CB00(*a1, *a2);
}

uint64_t sub_23DEA0EEC()
{
  return sub_23DE8CC8C();
}

uint64_t sub_23DEA0EF4()
{
  return sub_23DE8CB10();
}

uint64_t sub_23DEA0EFC()
{
  sub_23DF15478();
  sub_23DE8CB10();
  return sub_23DF154A8();
}

uint64_t sub_23DEA0F38()
{
  char *v0;

  return sub_23DEA0E88(*v0);
}

uint64_t sub_23DEA0F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEA0D30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DEA0F64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DE8F8A0();
  *a1 = result;
  return result;
}

uint64_t sub_23DEA0F8C(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF17618, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DEA0FC0(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF17618, a1);
  return sub_23DF154D8();
}

void SecureCodingCurrentValueWorkPlan.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;

  v36 = a5;
  v7 = type metadata accessor for SecureCodingCurrentValueWorkPlan.CodingKeys(255, a2, a3, a4);
  MEMORY[0x2426483D0](&unk_23DF17618, v7);
  v8 = sub_23DF15340();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v34 - v11;
  v13 = a1[3];
  v37 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v14 = v38;
  sub_23DF154B4();
  if (v14)
    goto LABEL_3;
  v15 = v9;
  v42 = 0;
  sub_23DE90AC4();
  sub_23DF15334();
  v16 = v8;
  v18 = v39;
  v17 = v40;
  sub_23DE90F5C(0, (unint64_t *)&qword_25432D9A0);
  v19 = a2;
  v20 = sub_23DF15028();
  v23 = (void *)v20;
  v24 = v15;
  if (!v20)
  {
    v27 = type metadata accessor for SecureCodingCurrentValueWorkPlan.Errors(0, v19, v21, v22);
    MEMORY[0x2426483D0](&unk_23DF175D8, v27);
    swift_allocError();
    swift_willThrow();
    sub_23DE90B08(v18, v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v16);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return;
  }
  v42 = 1;
  sub_23DE8D43C();
  v25 = v16;
  v26 = v23;
  sub_23DF15334();
  v28 = v40;
  v38 = v39;
  v35 = v41;
  v42 = 2;
  sub_23DE8D480();
  v29 = v28;
  swift_bridgeObjectRetain();
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  sub_23DE90B08(v18, v17);
  v30 = v39;
  v31 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v36;
  v32 = (uint64_t)v37;
  *v36 = v38;
  v33[1] = v29;
  v33[2] = v35;
  v33[3] = v30;
  *((_BYTE *)v33 + 32) = v31;
  v33[5] = (uint64_t)v26;
  __swift_destroy_boxed_opaque_existential_1(v32);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SecureCodingCurrentValueWorkPlan.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingCurrentValueWorkPlan.CodingKeys);
}

uint64_t type metadata accessor for SecureCodingCurrentValueWorkPlan.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingCurrentValueWorkPlan.Errors);
}

uint64_t SecureCodingCurrentValueWorkPlan.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for SecureCodingCurrentValueWorkPlan.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  v32 = MEMORY[0x2426483D0](&unk_23DF17618, v6);
  v7 = sub_23DF153A0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v25 - v10;
  v13 = *(void **)v4;
  v12 = *(_QWORD *)(v4 + 8);
  v29 = *(_QWORD *)(v4 + 16);
  v30 = v12;
  v28 = *(void **)(v4 + 24);
  v27 = *(unsigned __int8 *)(v4 + 32);
  v14 = *(_QWORD *)(v4 + 40);
  v15 = (void *)objc_opt_self();
  v35 = 0;
  v16 = objc_msgSend(v15, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v14, 1, &v35);
  v17 = v35;
  if (v16)
  {
    v26 = v13;
    v31 = v8;
    v18 = v7;
    v19 = (void *)sub_23DF14BCC();
    v21 = v20;

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_23DF154C0();
    v35 = v19;
    v36 = v21;
    v34 = 0;
    sub_23DE90E10();
    v22 = v33;
    sub_23DF15388();
    if (v22)
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v18);
      return sub_23DE90B08((uint64_t)v19, v21);
    }
    else
    {
      v35 = v26;
      v36 = v30;
      v37 = v29;
      v34 = 1;
      sub_23DE8D078();
      swift_bridgeObjectRetain();
      sub_23DF15388();
      swift_bridgeObjectRelease();
      v35 = v28;
      LOBYTE(v36) = v27;
      v34 = 2;
      sub_23DE8D0BC();
      swift_bridgeObjectRetain();
      sub_23DF15388();
      sub_23DE90B08((uint64_t)v19, v21);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v18);
    }
  }
  else
  {
    v24 = v17;
    sub_23DF14B78();

    return swift_willThrow();
  }
}

uint64_t static SecureCodingCurrentValueWorkPlan.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = a2[2];
  v5 = a2[3];
  if ((*(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1] || (sub_23DF15400() & 1) != 0) && v2 == v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_23DE8DAB8(v3, v5) & 1) != 0)
    {
      sub_23DE8D7D0(v4);
      v8 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        sub_23DE90F5C(0, (unint64_t *)&qword_25432D9E0);
        return sub_23DF150E8() & 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

id sub_23DEA17AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SecureCodingCurrentValueWorkPlan.merged(with:)(a1, a2);
}

void sub_23DEA17C4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  SecureCodingCurrentValueWorkPlan.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t sub_23DEA17DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SecureCodingCurrentValueWorkPlan.encode(to:)(a1, a2, a3, a4);
}

uint64_t SecureCodingCurrentValueWorkPlan.description.getter(uint64_t a1)
{
  sub_23DF15190();
  sub_23DF14E60();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  sub_23DF153C4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRetain();
  PriorityRuleSet.description.getter();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  MEMORY[0x2426483D0](MEMORY[0x24BDD0240], *(_QWORD *)(a1 + 16));
  sub_23DF153F4();
  sub_23DF14E60();
  return 0;
}

uint64_t sub_23DEA1998(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingCurrentValueWorkPlan<A>);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingCurrentValueWorkPlan<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_23DEA19DC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_23DEA1A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t sub_23DEA1A64(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  return a1;
}

uint64_t sub_23DEA1AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t type metadata accessor for SecureCodingCurrentValueWorkPlan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingCurrentValueWorkPlan);
}

uint64_t sub_23DEA1B54()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DEA1B5C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DEA1B9C + 4 * byte_23DF17350[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DEA1BBC + 4 * byte_23DF17355[v4]))();
}

_BYTE *sub_23DEA1B9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DEA1BBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEA1BC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEA1BCC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEA1BD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEA1BDC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23DEA1BE8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DEA1C34 + 4 * byte_23DF1735F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DEA1C68 + 4 * byte_23DF1735A[v4]))();
}

uint64_t sub_23DEA1C68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEA1C70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEA1C78);
  return result;
}

uint64_t sub_23DEA1C84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEA1C8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DEA1C90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEA1C98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23DEA1CA4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEA1CB4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEA1CC4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEA1CD4()
{
  JUMPOUT(0x2426483D0);
}

void static InputSignalIdentifier.fileCoordinator.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x800000023DF17660;
  a1[2] = 0;
  a1[3] = 0;
}

void static InputSignalSet.LookupKey.fileCoordinator.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x800000023DF17660;
  a1[2] = 0;
  a1[3] = 0;
}

void FileCoordinatorInputSignal.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x800000023DF17660;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t FileCoordinatorInputSignal.observer.getter()
{
  return swift_unknownObjectRetain();
}

void FileCoordinatorInputSignal.Configuration.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x800000023DF17660;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t FileCoordinatorInputSignal.Configuration.paths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FileCoordinatorInputSignal.Configuration.paths.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FileCoordinatorInputSignal.Configuration.paths.modify())()
{
  return nullsub_1;
}

uint64_t FileCoordinatorInputSignal.Configuration.init(paths:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t FileCoordinatorInputSignal.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23DEA7730(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static FileCoordinatorInputSignal.Configuration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_23DEA20A8(*a1, *a2);
}

uint64_t sub_23DEA1E24(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_23DF15478();
    swift_bridgeObjectRetain();
    sub_23DF14E3C();
    v18 = sub_23DF154A8();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_23DF15400() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_23DF15400() & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_23DEA20A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t i;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v4 = sub_23DF14BA8();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v10);
  v44 = (char *)&v37 - v11;
  sub_23DEA8A88(0, &qword_256D0E858, v12);
  result = MEMORY[0x24BDAC7A8](v13, v14);
  v17 = (char *)&v37 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 56);
    v38 = a1;
    v39 = a1 + 56;
    v20 = 1 << *(_BYTE *)(a1 + 32);
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v22 = v21 & v19;
    v40 = (unint64_t)(v20 + 63) >> 6;
    v43 = a2 + 56;
    v37 = v17;
    if (!v22)
      goto LABEL_8;
LABEL_7:
    v42 = (v22 - 1) & v22;
    for (i = __clz(__rbit64(v22)) | (v18 << 6); ; i = __clz(__rbit64(v25)) + (v18 << 6))
    {
      v27 = *(_QWORD *)(v5 + 72);
      v28 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v28(v17, *(_QWORD *)(a1 + 48) + v27 * i, v4);
      v29 = 1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) == 1)
        return v29;
      v41 = v18;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v44, v17, v4);
      sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      v30 = sub_23DF14DB8();
      v31 = -1 << *(_BYTE *)(a2 + 32);
      v32 = v30 & ~v31;
      if (((*(_QWORD *)(v43 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
        break;
      v33 = a2;
      v34 = ~v31;
      while (1)
      {
        v28(v9, *(_QWORD *)(v33 + 48) + v32 * v27, v4);
        sub_23DEA068C(qword_256D0EB40, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
        v35 = sub_23DF14DDC();
        v36 = *(void (**)(char *, uint64_t))(v5 + 8);
        v36(v9, v4);
        if ((v35 & 1) != 0)
          break;
        v32 = (v32 + 1) & v34;
        if (((*(_QWORD *)(v43 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
          goto LABEL_32;
      }
      result = ((uint64_t (*)(char *, uint64_t))v36)(v44, v4);
      a2 = v33;
      v17 = v37;
      a1 = v38;
      v18 = v41;
      v22 = v42;
      if (v42)
        goto LABEL_7;
LABEL_8:
      v24 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        return result;
      }
      if (v24 >= v40)
        goto LABEL_35;
      v25 = *(_QWORD *)(v39 + 8 * v24);
      ++v18;
      if (!v25)
      {
        v18 = v24 + 1;
        if (v24 + 1 >= v40)
          goto LABEL_35;
        v25 = *(_QWORD *)(v39 + 8 * v18);
        if (!v25)
        {
          v18 = v24 + 2;
          if (v24 + 2 >= v40)
            goto LABEL_35;
          v25 = *(_QWORD *)(v39 + 8 * v18);
          if (!v25)
          {
            v26 = v24 + 3;
            if (v26 >= v40)
            {
LABEL_35:
              v29 = 1;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v17, 1, 1, v4);
              return v29;
            }
            v25 = *(_QWORD *)(v39 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                v18 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_37;
                if (v18 >= v40)
                  goto LABEL_35;
                v25 = *(_QWORD *)(v39 + 8 * v18);
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v18 = v26;
          }
        }
      }
LABEL_21:
      v42 = (v25 - 1) & v25;
    }
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
LABEL_32:
    v36(v44, v4);
  }
  return 0;
}

uint64_t sub_23DEA248C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_32;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v12);
    result = MEMORY[0x242647EB4](*(_QWORD *)(a2 + 40), v16, 4);
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_DWORD *)(v19 + 4 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_DWORD *)(v19 + 4 * v18) == v16)
      goto LABEL_7;
  }
}

uint64_t sub_23DEA2654(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v20 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v21 = (unint64_t)(v6 + 63) >> 6;
  v9 = a2 + 56;
  if ((v7 & v5) == 0)
    goto LABEL_9;
LABEL_7:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    sub_23DEA8704(*(_QWORD *)(v3 + 48) + 40 * i, (uint64_t)v27);
    v24 = v27[0];
    v25 = v27[1];
    v26 = v28;
    sub_23DF15478();
    __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
    sub_23DF14DC4();
    v15 = sub_23DF154A8();
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
    {
LABEL_29:
      sub_23DEA8740((uint64_t)&v24);
      return 0;
    }
    v18 = ~v16;
    while (1)
    {
      sub_23DEA8704(*(_QWORD *)(a2 + 48) + 40 * v17, (uint64_t)v22);
      v19 = v23;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      LOBYTE(v19) = sub_23DEB4944((uint64_t)&v24, v19);
      sub_23DEA8740((uint64_t)v22);
      if ((v19 & 1) != 0)
        break;
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_29;
    }
    result = sub_23DEA8740((uint64_t)&v24);
    if (v8)
      goto LABEL_7;
LABEL_9:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v12 >= v21)
      return 1;
    v13 = *(_QWORD *)(v20 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v21)
        return 1;
      v13 = *(_QWORD *)(v20 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v21)
          return 1;
        v13 = *(_QWORD *)(v20 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v21)
            return 1;
          v13 = *(_QWORD *)(v20 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v21)
    return 1;
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v21)
      return 1;
    v13 = *(_QWORD *)(v20 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_23DEA28F4(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v28 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v29 = (unint64_t)(v4 + 63) >> 6;
  v31 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v30 = v3;
      v8 = v7 | (v3 << 6);
      goto LABEL_26;
    }
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v9 >= v29)
      return 1;
    v10 = *(_QWORD *)(v28 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v29)
        return 1;
      v10 = *(_QWORD *)(v28 + 8 * v11);
      if (!v10)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v29)
          return 1;
        v10 = *(_QWORD *)(v28 + 8 * v11);
        if (!v10)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v29)
            return 1;
          v10 = *(_QWORD *)(v28 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v10 - 1) & v10;
    v30 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_26:
    v13 = result;
    v14 = (uint64_t *)(*(_QWORD *)(result + 48) + 32 * v8);
    v16 = *v14;
    v15 = v14[1];
    sub_23DF15478();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    v17 = sub_23DF154A8();
    v18 = -1 << *(_BYTE *)(a2 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v31 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_41;
    v20 = *(_QWORD *)(a2 + 48);
    v21 = (_QWORD *)(v20 + 32 * v19);
    v22 = *v21 == v16 && v21[1] == v15;
    if (!v22 && (sub_23DF15400() & 1) == 0)
    {
      v23 = ~v18;
      for (i = v19 + 1; ; i = v25 + 1)
      {
        v25 = i & v23;
        if (((*(_QWORD *)(v31 + (((i & v23) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v23)) & 1) == 0)
          break;
        v26 = (_QWORD *)(v20 + 32 * v25);
        v27 = *v26 == v16 && v26[1] == v15;
        if (v27 || (sub_23DF15400() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v13;
    v3 = v30;
  }
  v12 = v3 + 5;
  if (v3 + 5 >= v29)
    return 1;
  v10 = *(_QWORD *)(v28 + 8 * v12);
  if (v10)
  {
    v11 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v29)
      return 1;
    v10 = *(_QWORD *)(v28 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t FileCoordinatorInputSignal.Configuration.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DEA7730(v3, v1);
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

void sub_23DEA2C1C(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x800000023DF17660;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_23DEA2C40()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DEA7730(v3, v1);
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DEA2C94(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23DEA7730(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEA2CCC()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DEA7730(v3, v1);
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DEA2D1C(uint64_t *a1, uint64_t *a2)
{
  return sub_23DEA20A8(*a1, *a2);
}

uint64_t (*FileCoordinatorInputSignal.Anchor.modificationDates.modify())()
{
  return nullsub_1;
}

uint64_t FileCoordinatorInputSignal.Anchor.hasDifference(from:for:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t result;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, unint64_t, uint64_t);
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;

  sub_23DEA8A88(0, &qword_256D0E850, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v7 = MEMORY[0x24BDAC7A8](v5, v6);
  v62 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v59 - v10;
  v12 = sub_23DF14BF0();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v60 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v17);
  v64 = (char *)&v59 - v18;
  v19 = sub_23DF14BA8();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19, v21);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DEA8A88(0, &qword_256D0E858, v24);
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v59 - v27;
  v29 = *a2;
  v30 = v13;
  v31 = *v2;
  v32 = *(_QWORD *)(v29 + 56);
  v67 = *a1;
  v68 = v29 + 56;
  v33 = 1 << *(_BYTE *)(v29 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & v32;
  v69 = (unint64_t)(v33 + 63) >> 6;
  v70 = v29;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  v71 = v23;
  v72 = v31;
  v63 = v30;
  v61 = v11;
  while (1)
  {
    if (v35)
    {
      v39 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v40 = v39 | (v37 << 6);
      goto LABEL_22;
    }
    v41 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v41 >= v69)
      goto LABEL_32;
    v42 = *(_QWORD *)(v68 + 8 * v41);
    ++v37;
    if (!v42)
    {
      v37 = v41 + 1;
      if (v41 + 1 >= v69)
        goto LABEL_32;
      v42 = *(_QWORD *)(v68 + 8 * v37);
      if (!v42)
      {
        v37 = v41 + 2;
        if (v41 + 2 >= v69)
          goto LABEL_32;
        v42 = *(_QWORD *)(v68 + 8 * v37);
        if (!v42)
          break;
      }
    }
LABEL_21:
    v35 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v37 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v28, *(_QWORD *)(v70 + 48) + *(_QWORD *)(v20 + 72) * v40, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v28, 0, 1, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v28, 1, v19) == 1)
      goto LABEL_33;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v28, v19);
    if (!*(_QWORD *)(v31 + 16) || (v44 = sub_23DEA63B4((uint64_t)v23), (v45 & 1) == 0))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v11, 1, 1, v12);
      v38 = (uint64_t)v11;
      goto LABEL_5;
    }
    v46 = *(_QWORD *)(v30 + 72);
    v47 = *(_QWORD *)(v72 + 56) + v46 * v44;
    v65 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    v65(v11, v47, v12);
    v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v66(v11, 0, 1, v12);
    v38 = (uint64_t)v11;
    v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    if (v48(v38, 1, v12) == 1)
    {
LABEL_5:
      v23 = v71;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v71, v19);
      result = sub_23DEA79C8(v38);
      v11 = (char *)v38;
      v31 = v72;
    }
    else
    {
      v49 = v12;
      v50 = *(void (**)(char *, uint64_t))(v30 + 32);
      v51 = v49;
      v50(v64, v38);
      if (!v67 || !*(_QWORD *)(v67 + 16) || (v52 = sub_23DEA63B4((uint64_t)v71), (v53 & 1) == 0))
      {
        v54 = (uint64_t)v62;
        v66(v62, 1, 1, v51);
LABEL_35:
        (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v51);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v71, v19);
        swift_release();
        sub_23DEA79C8(v54);
        return 1;
      }
      v54 = (uint64_t)v62;
      v65(v62, *(_QWORD *)(v67 + 56) + v52 * v46, v51);
      v66((char *)v54, 0, 1, v51);
      if (v48(v54, 1, v51) == 1)
        goto LABEL_35;
      v55 = v60;
      ((void (*)(char *, uint64_t, uint64_t))v50)(v60, v54, v51);
      v56 = v64;
      LODWORD(v66) = sub_23DF14BD8();
      v57 = v63;
      v58 = *(void (**)(char *, uint64_t))(v63 + 8);
      v58(v55, v51);
      v58(v56, v51);
      v23 = v71;
      result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v71, v19);
      v12 = v51;
      v30 = v57;
      v11 = v61;
      v31 = v72;
      if ((v66 & 1) != 0)
      {
        swift_release();
        return 1;
      }
    }
  }
  v43 = v41 + 3;
  if (v43 >= v69)
  {
LABEL_32:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v28, 1, 1, v19);
LABEL_33:
    swift_release();
    return 0;
  }
  v42 = *(_QWORD *)(v68 + 8 * v43);
  if (v42)
  {
    v37 = v43;
    goto LABEL_21;
  }
  while (1)
  {
    v37 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v37 >= v69)
      goto LABEL_32;
    v42 = *(_QWORD *)(v68 + 8 * v37);
    ++v43;
    if (v42)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t FileCoordinatorInputSignal.Anchor.merged(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  result = sub_23DEA32E8(v4, v3);
  *a1 = result;
  return result;
}

uint64_t sub_23DEA32E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_23DEA6D3C(a1, (uint64_t)sub_23DEA6CB8, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t static FileCoordinatorInputSignal.Anchor.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_23DEA3784(*a1, *a2);
}

uint64_t sub_23DEA3370(uint64_t a1, uint64_t a2)
{
  return sub_23DEA3394(a1, a2, sub_23DEA3580);
}

uint64_t sub_23DEA337C(uint64_t a1, uint64_t a2)
{
  return sub_23DEA3394(a1, a2, sub_23DEA3388);
}

uint64_t sub_23DEA3388(uint64_t a1, uint64_t a2)
{
  return sub_23DEA3394(a1, a2, sub_23DEA1E24);
}

uint64_t sub_23DEA3394(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  int64_t v23;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v5 = 0;
  v6 = result + 64;
  v7 = 1 << *(_BYTE *)(result + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(result + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v5 << 6);
      goto LABEL_22;
    }
    v12 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v23)
      return 1;
    v13 = *(_QWORD *)(v6 + 8 * v12);
    ++v5;
    if (!v13)
    {
      v5 = v12 + 1;
      if (v12 + 1 >= v23)
        return 1;
      v13 = *(_QWORD *)(v6 + 8 * v5);
      if (!v13)
      {
        v5 = v12 + 2;
        if (v12 + 2 >= v23)
          return 1;
        v13 = *(_QWORD *)(v6 + 8 * v5);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v9 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v5 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23DE946E8(v16, v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v21 = swift_bridgeObjectRetain();
    v22 = a3(v21, v18);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v23)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v14);
  if (v13)
  {
    v5 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v5 >= v23)
      return 1;
    v13 = *(_QWORD *)(v6 + 8 * v5);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23DEA3580(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_23DE946E8(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = sub_23DF15400();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_23DEA3784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char v51;
  char v52;
  unint64_t v53;
  char *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int64_t v66;
  _BOOL4 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = sub_23DF14BF0();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v64 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v57 - v10;
  v12 = sub_23DF14BA8();
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  MEMORY[0x24BDAC7A8](v12, v13);
  v65 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DEA8A88(0, &qword_256D0EB18, (void (*)(uint64_t))sub_23DEA8958);
  v17 = MEMORY[0x24BDAC7A8](v15, v16);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v17, v20);
  v23 = (char *)&v57 - v22;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v62 = v19;
  v63 = a2;
  v66 = 0;
  v61 = a1;
  v26 = *(_QWORD *)(a1 + 64);
  v25 = a1 + 64;
  v24 = v26;
  v27 = 1 << *(_BYTE *)(v25 - 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v24;
  v59 = v25;
  v60 = (unint64_t)(v27 + 63) >> 6;
  v58 = v60 - 1;
  v30 = v69;
  while (1)
  {
    if (v29)
    {
      v31 = __clz(__rbit64(v29));
      v32 = (v29 - 1) & v29;
      v33 = v31 | (v66 << 6);
LABEL_8:
      v34 = v61;
      (*(void (**)(char *, unint64_t, uint64_t))(v69 + 16))(v19, *(_QWORD *)(v61 + 48) + *(_QWORD *)(v69 + 72) * v33, v70);
      v35 = *(_QWORD *)(v34 + 56) + *(_QWORD *)(v5 + 72) * v33;
      sub_23DEA8958();
      v37 = v36;
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v19[*(int *)(v36 + 48)], v35, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v19, 0, 1, v37);
      goto LABEL_27;
    }
    v38 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v38 < v60)
    {
      v39 = *(_QWORD *)(v59 + 8 * v38);
      if (v39)
        goto LABEL_12;
      v40 = v66 + 2;
      ++v66;
      if (v38 + 1 < v60)
      {
        v39 = *(_QWORD *)(v59 + 8 * v40);
        if (v39)
          goto LABEL_15;
        v66 = v38 + 1;
        if (v38 + 2 < v60)
        {
          v39 = *(_QWORD *)(v59 + 8 * (v38 + 2));
          if (v39)
          {
            v38 += 2;
            goto LABEL_12;
          }
          v40 = v38 + 3;
          v66 = v38 + 2;
          if (v38 + 3 < v60)
            break;
        }
      }
    }
LABEL_26:
    sub_23DEA8958();
    v37 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v19, 1, 1, v41);
    v32 = 0;
LABEL_27:
    sub_23DEA89C8((uint64_t)v19, (uint64_t)v23);
    sub_23DEA8958();
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v23, 1, v37);
    v67 = v42 == 1;
    if (v42 == 1)
      return v67;
    v68 = v32;
    v43 = &v23[*(int *)(v37 + 48)];
    v44 = v5;
    v45 = (uint64_t)v65;
    v46 = v23;
    v47 = v70;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v65, v23, v70);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v11, v43, v4);
    v48 = v63;
    v49 = v11;
    v50 = sub_23DEA63B4(v45);
    v52 = v51;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v45, v47);
    if ((v52 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v4);
      return 0;
    }
    v53 = *(_QWORD *)(v48 + 56) + *(_QWORD *)(v44 + 72) * v50;
    v54 = v64;
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v64, v53, v4);
    sub_23DEA068C(&qword_256D0EB28, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
    v55 = sub_23DF14DDC();
    v56 = *(void (**)(char *, uint64_t))(v44 + 8);
    v56(v54, v4);
    result = ((uint64_t (*)(char *, uint64_t))v56)(v49, v4);
    v11 = v49;
    v5 = v44;
    v19 = v62;
    v23 = v46;
    v29 = v68;
    if ((v55 & 1) == 0)
      return v67;
  }
  v39 = *(_QWORD *)(v59 + 8 * v40);
  if (v39)
  {
LABEL_15:
    v38 = v40;
LABEL_12:
    v32 = (v39 - 1) & v39;
    v33 = __clz(__rbit64(v39)) + (v38 << 6);
    v66 = v38;
    goto LABEL_8;
  }
  while (1)
  {
    v38 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v38 >= v60)
    {
      v66 = v58;
      goto LABEL_26;
    }
    v39 = *(_QWORD *)(v59 + 8 * v38);
    ++v40;
    if (v39)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_23DEA3C24(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v19 = sub_23DE946E8(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_23DEA3DC0(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  double v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    result = sub_23DEA6424(*(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v11));
    if ((v16 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * result) != v15)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23DEA3F28(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;

  if (result == a2)
    return 1;
  v2 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_24;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        return 1;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          return 1;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            return 1;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_24:
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23DE946E8(v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v20 = swift_bridgeObjectRetain();
    v21 = sub_23DE8E720(v20, v17);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      return 0;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
    return 1;
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_23DEA4104(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD v50[3];
  _QWORD v51[3];

  if (result == a2)
    return 1;
  v2 = a2;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = *(_QWORD *)(result + 64);
  v43 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v44 = (unint64_t)(v6 + 63) >> 6;
  v45 = result;
  v46 = a2;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v14 = (v8 - 1) & v8;
      v15 = v13 | (v4 << 6);
      goto LABEL_26;
    }
    v16 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v44)
      return 1;
    v17 = *(_QWORD *)(v43 + 8 * v16);
    ++v4;
    if (!v17)
    {
      v4 = v16 + 1;
      if (v16 + 1 >= v44)
        return 1;
      v17 = *(_QWORD *)(v43 + 8 * v4);
      if (!v17)
      {
        v4 = v16 + 2;
        if (v16 + 2 >= v44)
          return 1;
        v17 = *(_QWORD *)(v43 + 8 * v4);
        if (!v17)
        {
          v4 = v16 + 3;
          if (v16 + 3 >= v44)
            return 1;
          v17 = *(_QWORD *)(v43 + 8 * v4);
          if (!v17)
            break;
        }
      }
    }
LABEL_25:
    v14 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v4 << 6);
LABEL_26:
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v15);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = v19[3];
    v24 = *(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v25 = sub_23DEA6458(v20, v21, v22, v23);
    LOBYTE(v22) = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_33;
    v49 = v14;
    v47 = v4;
    v27 = *(_QWORD **)(*(_QWORD *)(v2 + 56) + 8 * v25);
    v28 = v27[5];
    v29 = v27[6];
    v30 = __swift_project_boxed_opaque_existential_1(v27 + 2, v28);
    v48 = &v43;
    v31 = *(_QWORD *)(v28 - 8);
    MEMORY[0x24BDAC7A8](v30, v30);
    v33 = (char *)&v43 - v32;
    (*(void (**)(char *))(v31 + 16))((char *)&v43 - v32);
    v34 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v29 + 40);
    swift_retain();
    v34(v51, v28, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v28);
    v36 = v51[0];
    v35 = v51[1];
    v37 = v24[5];
    v38 = v24[6];
    v39 = __swift_project_boxed_opaque_existential_1(v24 + 2, v37);
    v40 = *(_QWORD *)(v37 - 8);
    MEMORY[0x24BDAC7A8](v39, v39);
    v42 = (char *)&v43 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v40 + 16))(v42);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v38 + 40))(v50, v37, v38);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v37);
    if (v36 == v50[0] && v35 == v50[1])
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v49;
    }
    else
    {
      v9 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v49;
      if ((v9 & 1) == 0)
      {
        swift_release();
LABEL_33:
        swift_release();
        return 0;
      }
    }
    swift_beginAccess();
    v10 = v27[7];
    swift_beginAccess();
    v11 = v24[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = sub_23DEA2654(v10, v11);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v3 = v45;
    v2 = v46;
    v4 = v47;
    if ((v12 & 1) == 0)
      return 0;
  }
  v18 = v16 + 4;
  if (v18 >= v44)
    return 1;
  v17 = *(_QWORD *)(v43 + 8 * v18);
  if (v17)
  {
    v4 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v4 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v4 >= v44)
      return 1;
    v17 = *(_QWORD *)(v43 + 8 * v4);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_23DEA4538()
{
  return 0xD000000000000011;
}

uint64_t sub_23DEA4554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEA8680(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23DEA457C()
{
  sub_23DEA7A14();
  return sub_23DF154CC();
}

uint64_t sub_23DEA45A4()
{
  sub_23DEA7A14();
  return sub_23DF154D8();
}

uint64_t FileCoordinatorInputSignal.Anchor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  sub_23DEA7B90(0, &qword_256D0E860, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEA7A14();
  sub_23DF154C0();
  v11[1] = v9;
  sub_23DEA7A58();
  sub_23DEA7AF0();
  sub_23DF15388();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t FileCoordinatorInputSignal.Anchor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];

  sub_23DEA7B90(0, &qword_256D0E898, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)v12 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEA7A14();
  sub_23DF154B4();
  if (!v2)
  {
    sub_23DEA7A58();
    sub_23DEA7BEC();
    sub_23DF15334();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *a2 = v12[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DEA4818@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  result = sub_23DEA32E8(v4, v3);
  *a1 = result;
  return result;
}

uint64_t sub_23DEA4870@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FileCoordinatorInputSignal.Anchor.init(from:)(a1, a2);
}

uint64_t sub_23DEA4884(_QWORD *a1)
{
  return FileCoordinatorInputSignal.Anchor.encode(to:)(a1);
}

uint64_t sub_23DEA4898(uint64_t *a1, uint64_t *a2)
{
  return sub_23DEA3784(*a1, *a2);
}

_QWORD *FileCoordinatorInputSignal.__allocating_init(context:observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v8 = (_QWORD *)swift_allocObject();
  v8[4] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
  v9 = MEMORY[0x24BEE4AF8];
  v10 = sub_23DE93840(MEMORY[0x24BEE4AF8]);
  v11 = sub_23DE93A1C(v9);
  sub_23DEA7C8C();
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v8[6] = a2;
  v8[7] = v12;
  v8[5] = a1;
  v8[2] = a3;
  v8[3] = a4;
  return v8;
}

_QWORD *FileCoordinatorInputSignal.init(context:observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4[4] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
  v9 = MEMORY[0x24BEE4AF8];
  v10 = sub_23DE93840(MEMORY[0x24BEE4AF8]);
  v11 = sub_23DE93A1C(v9);
  sub_23DEA7C8C();
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v4[6] = a2;
  v4[7] = v12;
  v4[5] = a1;
  v4[2] = a3;
  v4[3] = a4;
  return v4;
}

void FileCoordinatorInputSignal.beginObservation(from:configurations:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD v8[6];

  v4 = *a1;
  v5 = *(void **)(v2 + 32);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v2;
  v6[3] = v4;
  v6[4] = a2;
  v8[4] = sub_23DEA7CEC;
  v8[5] = v6;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_23DE9F35C;
  v8[3] = &block_descriptor_3;
  v7 = _Block_copy(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_addOperationWithBlock_, v7);
  _Block_release(v7);
}

uint64_t sub_23DEA4AE8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  void (*v17)(uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = (uint64_t)v2;
  v4 = *v2;
  v5 = *a1;
  v6 = MEMORY[0x24BEE4AF8];
  v22 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v7; ++i)
    {
      v9 = swift_bridgeObjectRetain();
      sub_23DEF3400(v9);
    }
    swift_bridgeObjectRelease();
    v6 = v22;
  }
  v10 = sub_23DECE124(v6);
  swift_bridgeObjectRelease();
  v11 = *(os_unfair_lock_s **)(v3 + 56);
  v12 = v11 + 4;
  v13 = v11 + 8;
  os_unfair_lock_lock(v11 + 8);
  sub_23DEA4C38(v12, v5, v10, v3, &v22);
  os_unfair_lock_unlock(v13);
  swift_bridgeObjectRelease();
  v14 = v22;
  v15 = *(_QWORD *)(v3 + 24);
  ObjectType = swift_getObjectType();
  v22 = v14;
  v21 = v3;
  v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
  v19 = sub_23DEA068C(&qword_256D0EB08, v18, (uint64_t (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal, (uint64_t)&protocol conformance descriptor for FileCoordinatorInputSignal);
  v17(&v22, &v21, v4, v19, ObjectType, v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEA4C38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t result;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t i;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void *v55;
  objc_class *v56;
  char *v57;
  id v58;
  id v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  id v62;
  _QWORD *v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v75;
  unint64_t v76;
  char v77;
  char v78;
  void (*v79)(unint64_t, uint64_t);
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  void (*v94)(char *, unint64_t, uint64_t);
  char *v95;
  char *v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  int64_t v99;
  char *v100;
  id v101;
  void (*v102)(uint64_t, uint64_t);
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  char *v117;
  objc_super v118;
  uint64_t v119;

  v108 = a4;
  v110 = a3;
  v93 = a5;
  sub_23DEA8A88(0, &qword_256D0E850, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v95 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v107 = (uint64_t)&v92 - v13;
  MEMORY[0x24BDAC7A8](v12, v14);
  v106 = (uint64_t)&v92 - v15;
  v16 = sub_23DF14BF0();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v96 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v21);
  v105 = (char *)&v92 - v22;
  v23 = sub_23DF14BA8();
  v116 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23, v24);
  v100 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v104 = (char *)&v92 - v29;
  MEMORY[0x24BDAC7A8](v28, v30);
  v32 = (char *)&v92 - v31;
  sub_23DEA8A88(0, &qword_256D0E858, v33);
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v92 - v36;
  if (a2)
  {
    *a1 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v113 = a1;
  v38 = *(_QWORD *)(v110 + 56);
  v98 = v110 + 56;
  v39 = 1 << *(_BYTE *)(v110 + 32);
  v40 = -1;
  if (v39 < 64)
    v40 = ~(-1 << v39);
  v41 = v40 & v38;
  v99 = (unint64_t)(v39 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v43 = 0;
  v111 = v16;
  v112 = v17;
  v117 = v32;
  v103 = v37;
  if (v41)
    goto LABEL_8;
LABEL_9:
  v47 = v43 + 1;
  if (__OFADD__(v43, 1))
  {
    __break(1u);
  }
  else
  {
    if (v47 >= v99)
      goto LABEL_35;
    v48 = *(_QWORD *)(v98 + 8 * v47);
    ++v43;
    if (v48)
      goto LABEL_22;
    v43 = v47 + 1;
    if (v47 + 1 >= v99)
      goto LABEL_35;
    v48 = *(_QWORD *)(v98 + 8 * v43);
    if (v48)
      goto LABEL_22;
    v43 = v47 + 2;
    if (v47 + 2 >= v99)
      goto LABEL_35;
    v48 = *(_QWORD *)(v98 + 8 * v43);
    if (v48)
      goto LABEL_22;
    v49 = v47 + 3;
    if (v49 >= v99)
    {
LABEL_35:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v37, 1, 1, v23);
LABEL_36:
      swift_release();
      *v93 = *v113;
      return swift_bridgeObjectRetain();
    }
    v48 = *(_QWORD *)(v98 + 8 * v49);
    if (v48)
    {
      v43 = v49;
LABEL_22:
      v45 = (v48 - 1) & v48;
      for (i = __clz(__rbit64(v48)) + (v43 << 6); ; i = v44 | (v43 << 6))
      {
        v50 = v116;
        v51 = *(_QWORD *)(v116 + 72);
        v52 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
        v52(v37, *(_QWORD *)(v110 + 48) + v51 * i, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v23);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v37, 1, v23) == 1)
          break;
        v109 = v51;
        v114 = v45;
        v115 = v43;
        v53 = v116;
        (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v117, v37, v23);
        v54 = (uint64_t)v104;
        v52(v104, (unint64_t)v117, v23);
        v55 = *(void **)(v108 + 32);
        v56 = (objc_class *)type metadata accessor for FileCoordinatorInputSignal.Presenter();
        v57 = (char *)objc_allocWithZone(v56);
        swift_weakInit();
        v52(&v57[OBJC_IVAR____TtCC19HealthOrchestration26FileCoordinatorInputSignal9Presenter_observedURL], v54, v23);
        *(_QWORD *)&v57[OBJC_IVAR____TtCC19HealthOrchestration26FileCoordinatorInputSignal9Presenter_presentedItemOperationQueue] = v55;
        swift_weakAssign();
        v118.receiver = v57;
        v118.super_class = v56;
        v58 = v55;
        v59 = objc_msgSendSuper2(&v118, sel_init);
        v60 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
        v61 = (uint64_t)v117;
        v60(v54, v23);
        v52((char *)v54, v61, v23);
        v62 = v59;
        v63 = v113;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v119 = v63[1];
        v63[1] = 0x8000000000000000;
        sub_23DEEB0A4((uint64_t)v62, v54, isUniquelyReferenced_nonNull_native);
        v63[1] = v119;
        swift_bridgeObjectRelease();
        v60(v54, v23);
        objc_msgSend((id)objc_opt_self(), sel_addFilePresenter_, v62);
        v65 = v106;
        sub_23DEA55B0(v61, v106);
        v66 = v112;
        v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
        v68 = v111;
        if (((unsigned int (*)(uint64_t, uint64_t))v67)(v65, 1) == 1)
        {
          v60(v61, v23);

          result = sub_23DEA79C8(v65);
          v37 = v103;
          v41 = v114;
          v43 = v115;
          if (!v114)
            goto LABEL_9;
        }
        else
        {
          v101 = v62;
          v102 = v60;
          v69 = v68;
          v70 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 32);
          v71 = v105;
          v70(v105, v65, v69);
          v72 = (uint64_t)v100;
          v52(v100, v61, v23);
          v73 = v107;
          (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v107, v71, v69);
          v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56);
          v74(v73, 0, 1, v69);
          if (v67(v73, 1, v69) == 1)
          {
            sub_23DEA79C8(v107);
            v75 = v113;
            swift_bridgeObjectRetain();
            v76 = sub_23DEA63B4(v72);
            v78 = v77;
            swift_bridgeObjectRelease();
            v79 = (void (*)(unint64_t, uint64_t))v102;
            v97 = v74;
            if ((v78 & 1) != 0)
            {
              v94 = (void (*)(char *, unint64_t, uint64_t))v70;
              v80 = swift_isUniquelyReferenced_nonNull_native();
              v81 = *v75;
              v119 = *v75;
              *v75 = 0x8000000000000000;
              if ((v80 & 1) == 0)
              {
                sub_23DECA7E4();
                v81 = v119;
              }
              v79(*(_QWORD *)(v81 + 48) + v76 * v109, v23);
              v82 = v119;
              v83 = v111;
              v84 = v112;
              v85 = v95;
              v94(v95, *(_QWORD *)(v119 + 56) + *(_QWORD *)(v112 + 72) * v76, v111);
              sub_23DEA72C0(v76, v82);
              *v75 = v82;
              swift_bridgeObjectRelease();
              v86 = (uint64_t)v85;
              v87 = 0;
            }
            else
            {
              v87 = 1;
              v86 = (uint64_t)v95;
              v83 = v111;
              v84 = v112;
            }
            v37 = v103;
            v41 = v114;
            v43 = v115;
            v91 = v101;
            v97(v86, v87, 1, v83);
            v79((unint64_t)v100, v23);
            sub_23DEA79C8(v86);
          }
          else
          {
            v88 = (uint64_t)v96;
            v70(v96, v107, v69);
            v89 = v113;
            v90 = swift_isUniquelyReferenced_nonNull_native();
            v119 = *v89;
            *v89 = 0x8000000000000000;
            sub_23DEEAF1C(v88, v72, v90);
            *v89 = v119;
            swift_bridgeObjectRelease();
            v79 = (void (*)(unint64_t, uint64_t))v102;
            v102(v72, v23);
            v83 = v69;
            v84 = v112;
            v37 = v103;
            v41 = v114;
            v43 = v115;
            v91 = v101;
          }

          (*(void (**)(char *, uint64_t))(v84 + 8))(v105, v83);
          result = ((uint64_t (*)(char *, uint64_t))v79)(v117, v23);
          if (!v41)
            goto LABEL_9;
        }
LABEL_8:
        v44 = __clz(__rbit64(v41));
        v45 = (v41 - 1) & v41;
      }
      goto LABEL_36;
    }
    while (1)
    {
      v43 = v49 + 1;
      if (__OFADD__(v49, 1))
        break;
      if (v43 >= v99)
        goto LABEL_35;
      v48 = *(_QWORD *)(v98 + 8 * v43);
      ++v49;
      if (v48)
        goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23DEA542C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  sub_23DEA8A88(0, &qword_256D0E850, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v19 - v8;
  v10 = sub_23DF14BF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) == 1)
  {
    sub_23DEA79C8(a1);
    sub_23DEA7184(a2, (uint64_t)v9);
    v15 = sub_23DF14BA8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a2, v15);
    return sub_23DEA79C8((uint64_t)v9);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DEEAF1C((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v20;
    swift_bridgeObjectRelease();
    v18 = sub_23DF14BA8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  }
}

uint64_t sub_23DEA55B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  char v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t ObjectType;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v54 = a2;
  v58 = *MEMORY[0x24BDAC8D0];
  v3 = sub_23DF14C80();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v53 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DF14BA8();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7, v9);
  v52 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v47 - v13;
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  sub_23DF14B84();
  sub_23DF14B9C();
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v14, v7);
  v17 = (void *)sub_23DF14DE8();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v56 = 0;
  v18 = objc_msgSend(v15, sel_attributesOfItemAtPath_error_, v17, &v56);

  v19 = (id)v56;
  if (v18)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_23DEA068C(&qword_256D0E2A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23DF1621C);
    v20 = sub_23DF14D94();

    if (*(_QWORD *)(v20 + 16))
    {
      v21 = (id)*MEMORY[0x24BDD0C98];
      v22 = sub_23DEA6590((uint64_t)v21);
      if ((v23 & 1) != 0)
      {
        sub_23DEA8844(*(_QWORD *)(v20 + 56) + 32 * v22, (uint64_t)&v56);
      }
      else
      {
        v56 = 0u;
        v57 = 0u;
      }

    }
    else
    {
      v56 = 0u;
      v57 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v57 + 1))
    {
      v42 = sub_23DF14BF0();
      v43 = v54;
      v44 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v43, v44 ^ 1u, 1, v42);
    }
    sub_23DEA87B0((uint64_t)&v56);
  }
  else
  {
    v24 = v19;
    v48 = v16;
    v49 = v4;
    v50 = v3;
    v25 = (void *)sub_23DF14B78();

    swift_willThrow();
    v26 = *(_QWORD *)(v51 + 48);
    ObjectType = swift_getObjectType();
    v28 = v53;
    (*(void (**)(uint64_t, uint64_t))(v26 + 40))(ObjectType, v26);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v30 = v52;
    v29(v52, a1, v7);
    v31 = v25;
    v32 = v25;
    v33 = sub_23DF14C68();
    v34 = sub_23DF15004();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v47 = (_QWORD *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      *(_QWORD *)&v56 = v51;
      *(_DWORD *)v35 = 136315394;
      sub_23DEA068C(&qword_256D0EB10, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v36 = sub_23DF153C4();
      v55 = sub_23DEC1518(v36, v37, (uint64_t *)&v56);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      v48(v30, v7);
      *(_WORD *)(v35 + 12) = 2112;
      v38 = v25;
      v39 = _swift_stdlib_bridgeErrorToNSError();
      v55 = v39;
      sub_23DF15100();
      v40 = v47;
      *v47 = v39;

      _os_log_impl(&dword_23DE8B000, v33, v34, "Failed to fetch initial modfication date for: %s: %@", (uint8_t *)v35, 0x16u);
      sub_23DEA8A88(0, (unint64_t *)&qword_25432D9F0, (void (*)(uint64_t))sub_23DEA8774);
      swift_arrayDestroy();
      MEMORY[0x242648490](v40, -1, -1);
      v41 = v51;
      swift_arrayDestroy();
      MEMORY[0x242648490](v41, -1, -1);
      MEMORY[0x242648490](v35, -1, -1);

    }
    else
    {

      v48(v30, v7);
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v50);
  }
  v46 = sub_23DF14BF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v54, 1, 1, v46);
}

Swift::Void __swiftcall FileCoordinatorInputSignal.stopObservation()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 56);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_23DEA5B50(v2);
  os_unfair_lock_unlock(v3);
}

id sub_23DEA5B50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  id result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v7)
      goto LABEL_23;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_23;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_23;
        v13 = *(_QWORD *)(v3 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v7)
            goto LABEL_23;
          v13 = *(_QWORD *)(v3 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    result = objc_msgSend((id)objc_opt_self(), sel_removeFilePresenter_, *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v11));
  }
  v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_23:
    swift_release();
    v15 = sub_23DE93A1C(MEMORY[0x24BEE4AF8]);
    result = (id)swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 8) = v15;
    return result;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_23;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23DEA5CE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  void (*v20)(uint64_t *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v3 = *v1;
  sub_23DEA8A88(0, &qword_256D0E850, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v23 - v6;
  v8 = sub_23DF14BF0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DEA55B0(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23DEA79C8((uint64_t)v7);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
  v14 = (os_unfair_lock_s *)v1[7];
  v15 = v14 + 4;
  v16 = v14 + 8;
  os_unfair_lock_lock(v14 + 8);
  sub_23DEA5EA0(v15, a1, (uint64_t)v12, &v25);
  os_unfair_lock_unlock(v16);
  v17 = v25;
  v18 = v1[3];
  ObjectType = swift_getObjectType();
  v25 = v17;
  v24 = v1;
  v20 = *(void (**)(uint64_t *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8);
  v22 = sub_23DEA068C(&qword_256D0EB08, v21, (uint64_t (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal, (uint64_t)&protocol conformance descriptor for FileCoordinatorInputSignal);
  v20(&v25, &v24, v3, v22, ObjectType, v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEA5EA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  sub_23DEA8A88(0, &qword_256D0E850, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v20 - v10;
  v12 = sub_23DF14BA8();
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v15, a2);
  v17 = sub_23DF14BF0();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, a3, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
  sub_23DEA542C((uint64_t)v11, (uint64_t)v15);
  *a4 = *a1;
  return swift_bridgeObjectRetain();
}

id sub_23DEA6160()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FileCoordinatorInputSignal.Presenter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t FileCoordinatorInputSignal.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t FileCoordinatorInputSignal.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

void sub_23DEA6264(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD v9[6];

  v4 = *v2;
  v5 = *a1;
  v6 = *(void **)(v4 + 32);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = a2;
  v9[4] = sub_23DEA7CEC;
  v9[5] = v7;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_23DE9F35C;
  v9[3] = &block_descriptor_8;
  v8 = _Block_copy(v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_addOperationWithBlock_, v8);
  _Block_release(v8);
}

void sub_23DEA6344()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 56);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_23DEA5B50(v2);
  os_unfair_lock_unlock(v3);
}

unint64_t sub_23DEA6398()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_23DEA63B4(uint64_t a1)
{
  uint64_t v2;

  sub_23DF14BA8();
  sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  v2 = sub_23DF14DB8();
  return sub_23DEA66AC(a1, v2);
}

unint64_t sub_23DEA6424(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x242647EB4](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_23DEA67F0(a1, v3);
}

unint64_t sub_23DEA6458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  v8 = sub_23DF154A8();
  return sub_23DEA688C(a1, a2, a3, a4, v8);
}

unint64_t sub_23DEA64E4(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  _OWORD v5[2];

  sub_23DF15478();
  v2 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v2;
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  sub_23DEA88F0((uint64_t)v5);
  sub_23DF14E3C();
  sub_23DEA8924((uint64_t)v5);
  v3 = sub_23DF154A8();
  return sub_23DEA696C((uint64_t *)a1, v3);
}

unint64_t sub_23DEA6590(uint64_t a1)
{
  uint64_t v2;

  sub_23DF14E0C();
  sub_23DF15478();
  sub_23DF14E3C();
  v2 = sub_23DF154A8();
  swift_bridgeObjectRelease();
  return sub_23DEA6A64(a1, v2);
}

unint64_t sub_23DEA661C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  sub_23DF15484();
  v6 = sub_23DF154A8();
  return sub_23DEA6BD8(a1, a2, a3, v6);
}

unint64_t sub_23DEA66AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = sub_23DF14BA8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5);
      sub_23DEA068C(qword_256D0EB40, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
      v15 = sub_23DF14DDC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t sub_23DEA67F0(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23DEA688C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v12 = (_QWORD *)(v11 + 32 * v8);
    v13 = *v12 == a1 && v12[1] == a2;
    if (!v13 && (sub_23DF15400() & 1) == 0)
    {
      v14 = ~v7;
      do
      {
        v8 = (v8 + 1) & v14;
        if (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        v15 = (_QWORD *)(v11 + 32 * v8);
        v16 = *v15 == a1 && v15[1] == a2;
      }
      while (!v16 && (sub_23DF15400() & 1) == 0);
    }
  }
  return v8;
}

unint64_t sub_23DEA696C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *a1;
    v9 = a1[1];
    v10 = a1[2];
    v11 = a1[3];
    do
    {
      v12 = (_QWORD *)(v7 + 48 * v5);
      v13 = v12[2];
      v14 = v12[3];
      v15 = *v12 == v8 && v12[1] == v9;
      if (v15 || (sub_23DF15400() & 1) != 0)
      {
        v16 = v13 == v10 && v14 == v11;
        if (v16 || (sub_23DF15400() & 1) != 0)
          break;
      }
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_23DEA6A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_23DF14E0C();
    v8 = v7;
    if (v6 == sub_23DF14E0C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_23DF15400();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_23DF14E0C();
          v15 = v14;
          if (v13 == sub_23DF14E0C() && v15 == v16)
            break;
          v18 = sub_23DF15400();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_23DEA6BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (_QWORD *)(v12 + 24 * v7);
      v14 = v13[2];
      v15 = *v13 == a1 && v13[1] == a2;
      if ((v15 || (sub_23DF15400() & 1) != 0) && v14 == a3)
        break;
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t sub_23DEA6CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23DEA8958();
  v5 = a1 + *(int *)(v4 + 48);
  sub_23DEA8A1C();
  v7 = a2 + *(int *)(v6 + 48);
  v8 = sub_23DF14BA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  v9 = sub_23DF14BF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v5, v9);
}

uint64_t sub_23DEA6D3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  _QWORD *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  void (*v72)(uint64_t, uint64_t, uint64_t);
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v74 = a5;
  v9 = sub_23DF14BF0();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v68 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v67 = (char *)v65 - v16;
  MEMORY[0x24BDAC7A8](v15, v17);
  v73 = (char *)v65 - v18;
  v19 = sub_23DF14BA8();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19, v21);
  v82 = (uint64_t)v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DEA8A88(0, &qword_256D0EB38, (void (*)(uint64_t))sub_23DEA8A1C);
  MEMORY[0x24BDAC7A8](v23, v24);
  v26 = (char *)v65 - v25;
  v27 = -1 << *(_BYTE *)(a1 + 32);
  v28 = ~v27;
  v29 = *(_QWORD *)(a1 + 64);
  v30 = -v27;
  v75 = a1;
  v76 = a1 + 64;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  else
    v31 = -1;
  v77 = v28;
  v78 = 0;
  v79 = v31 & v29;
  v80 = a2;
  v81 = a3;
  v65[2] = a1;
  swift_bridgeObjectRetain();
  v65[1] = a3;
  v32 = (uint64_t)v26;
  swift_retain();
  sub_23DEE2BF8((uint64_t)v26);
  sub_23DEA8A1C();
  v34 = v33;
  v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48);
  if (v71(v26, 1, v33) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23DEA8AD4();
    return swift_release();
  }
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
  v66 = v20;
  v69 = v34;
  v70 = v26;
  while (1)
  {
    v47 = v32 + *(int *)(v34 + 48);
    v48 = v82;
    v72(v82, v32, v19);
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    v49(v73, v47, v9);
    v50 = (_QWORD *)*v74;
    v52 = sub_23DEA63B4(v48);
    v53 = v50[2];
    v54 = (v51 & 1) == 0;
    v55 = v53 + v54;
    if (__OFADD__(v53, v54))
      break;
    v56 = v51;
    if (v50[3] >= v55)
    {
      if ((a4 & 1) != 0)
      {
        v58 = v74;
        v61 = (_QWORD *)*v74;
        if ((v51 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        v58 = v74;
        sub_23DECA7E4();
        v61 = (_QWORD *)*v58;
        if ((v56 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      v57 = a4 & 1;
      v58 = v74;
      sub_23DEC76F0(v55, v57);
      v59 = sub_23DEA63B4(v82);
      if ((v56 & 1) != (v60 & 1))
        goto LABEL_25;
      v52 = v59;
      v61 = (_QWORD *)*v58;
      if ((v56 & 1) != 0)
      {
LABEL_7:
        v36 = *(_QWORD *)(v10 + 72) * v52;
        v37 = v61[7] + v36;
        v38 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
        v39 = v68;
        v38(v68, v37, v9);
        v40 = v19;
        v41 = v10;
        v42 = v73;
        if ((sub_23DF14BD8() & 1) != 0)
          v43 = v39;
        else
          v43 = v42;
        v44 = v67;
        v38(v67, (unint64_t)v43, v9);
        v45 = *(void (**)(char *, uint64_t))(v41 + 8);
        v45(v39, v9);
        v46 = v42;
        v10 = v41;
        v19 = v40;
        v20 = v66;
        v45(v46, v9);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v82, v19);
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 40))(*(_QWORD *)(*v58 + 56) + v36, v44, v9);
        goto LABEL_11;
      }
    }
    v61[(v52 >> 6) + 8] |= 1 << v52;
    v72(v61[6] + *(_QWORD *)(v20 + 72) * v52, v82, v19);
    v49((char *)(v61[7] + *(_QWORD *)(v10 + 72) * v52), (uint64_t)v73, v9);
    v62 = v61[2];
    v63 = __OFADD__(v62, 1);
    v64 = v62 + 1;
    if (v63)
      goto LABEL_24;
    v61[2] = v64;
LABEL_11:
    v32 = (uint64_t)v70;
    sub_23DEE2BF8((uint64_t)v70);
    a4 = 1;
    v34 = v69;
    if (v71((char *)v32, 1, v69) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEA7184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_23DEA63B4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23DECA7E4();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_23DF14BA8();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = sub_23DF14BF0();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_23DEA72C0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = sub_23DF14BF0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

unint64_t sub_23DEA72C0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = sub_23DF14BA8();
  v38 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4, v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 64;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    v12 = ~v10;
    result = sub_23DF15154();
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v37 = (result + 1) & v12;
      v13 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v14 = v12;
      do
      {
        v15 = v9;
        v16 = v13;
        v17 = v13 * v11;
        v18 = v14;
        v36(v8, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
        sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
        v19 = sub_23DF14DB8();
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v8, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v37)
        {
          if (v20 >= v37 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v9 = v15;
            if (v16 * a1 < v17
              || *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = *(_QWORD *)(*(_QWORD *)(sub_23DF14BF0() - 8) + 72);
            v25 = v24 * a1;
            result = v23 + v24 * a1;
            v26 = v24 * v11;
            v27 = v23 + v24 * v11 + v24;
            if (v25 < v26 || result >= v27)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              v14 = v18;
            }
            else
            {
              a1 = v11;
              v14 = v18;
              if (v25 != v26)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v14 = v18;
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v37 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v9 = v15;
LABEL_5:
        v11 = (v11 + 1) & v14;
        v13 = v16;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_23DEA7598(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23DF15154();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = MEMORY[0x242647EB4](*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_23DEA7730(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t result;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t i;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v4 = sub_23DF14BA8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DEA8A88(0, &qword_256D0E858, v9);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)v32 - v12;
  v14 = *((_QWORD *)a1 + 8);
  v15 = a1[1];
  v34 = *a1;
  v35 = v15;
  v16 = a1[2];
  v17 = a1[3];
  v32[1] = a1;
  v36 = v16;
  v37 = v17;
  v38 = v14;
  v32[2] = sub_23DF154A8();
  v33 = a2;
  v18 = a2 + 56;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(a2 + 56);
  v22 = (unint64_t)(v19 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v24 = 0;
  v25 = 0;
  if (!v21)
    goto LABEL_5;
LABEL_4:
  v26 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (i = v26 | (v25 << 6); ; i = __clz(__rbit64(v29)) + (v25 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v13, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
    sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    v31 = sub_23DF14DB8();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v24 ^= v31;
    if (v21)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v25++, 1))
      goto LABEL_21;
    if (v25 >= v22)
      goto LABEL_18;
    v29 = *(_QWORD *)(v18 + 8 * v25);
    if (!v29)
      break;
LABEL_14:
    v21 = (v29 - 1) & v29;
  }
  v30 = v25 + 1;
  if (v25 + 1 >= v22)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
LABEL_19:
    swift_release();
    return sub_23DF15484();
  }
  v29 = *(_QWORD *)(v18 + 8 * v30);
  if (v29)
  {
    ++v25;
    goto LABEL_14;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v22)
      goto LABEL_18;
    v29 = *(_QWORD *)(v18 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23DEA79C8(uint64_t a1)
{
  uint64_t v2;

  sub_23DEA8A88(0, &qword_256D0E850, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DEA7A14()
{
  unint64_t result;

  result = qword_256D0E868;
  if (!qword_256D0E868)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1794C, &type metadata for FileCoordinatorInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0E868);
  }
  return result;
}

void sub_23DEA7A58()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256D0E870)
  {
    sub_23DF14BA8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_23DF14BF0();
    sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, v0, MEMORY[0x24BDCDAF0]);
    v1 = sub_23DF14DAC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256D0E870);
  }
}

unint64_t sub_23DEA7AF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256D0E880;
  if (!qword_256D0E880)
  {
    sub_23DEA7A58();
    v2 = v1;
    v3[0] = sub_23DEA068C(&qword_256D0E888, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    v3[1] = sub_23DEA068C(&qword_256D0E890, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE04C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256D0E880);
  }
  return result;
}

void sub_23DEA7B90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DEA7A14();
    v7 = a3(a1, &type metadata for FileCoordinatorInputSignal.Anchor.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DEA7BEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256D0E8A0;
  if (!qword_256D0E8A0)
  {
    sub_23DEA7A58();
    v2 = v1;
    v3[0] = sub_23DEA068C(&qword_256D0E8A8, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v3[1] = sub_23DEA068C(&qword_256D0E8B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE04E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256D0E8A0);
  }
  return result;
}

void sub_23DEA7C8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0E8B8)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0E8B8);
  }
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t sub_23DEA7D08(uint64_t a1)
{
  unint64_t result;

  result = sub_23DEA7D2C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DEA7D2C()
{
  unint64_t result;

  result = qword_256D0E8C0;
  if (!qword_256D0E8C0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Configuration, &type metadata for FileCoordinatorInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0E8C0);
  }
  return result;
}

unint64_t sub_23DEA7D74()
{
  unint64_t result;

  result = qword_256D0E8C8;
  if (!qword_256D0E8C8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Configuration, &type metadata for FileCoordinatorInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0E8C8);
  }
  return result;
}

unint64_t sub_23DEA7DBC()
{
  unint64_t result;

  result = qword_256D0E8D0;
  if (!qword_256D0E8D0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Configuration, &type metadata for FileCoordinatorInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0E8D0);
  }
  return result;
}

unint64_t sub_23DEA7E00(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23DEA7E34();
  a1[2] = sub_23DEA7E78();
  result = sub_23DEA7EBC();
  a1[3] = result;
  return result;
}

unint64_t sub_23DEA7E34()
{
  unint64_t result;

  result = qword_256D0E920;
  if (!qword_256D0E920)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Anchor, &type metadata for FileCoordinatorInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0E920);
  }
  return result;
}

unint64_t sub_23DEA7E78()
{
  unint64_t result;

  result = qword_256D0E928;
  if (!qword_256D0E928)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Anchor, &type metadata for FileCoordinatorInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0E928);
  }
  return result;
}

unint64_t sub_23DEA7EBC()
{
  unint64_t result;

  result = qword_256D0E930;
  if (!qword_256D0E930)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Anchor, &type metadata for FileCoordinatorInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0E930);
  }
  return result;
}

unint64_t sub_23DEA7F04()
{
  unint64_t result;

  result = qword_256D0E938;
  if (!qword_256D0E938)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for FileCoordinatorInputSignal.Anchor, &type metadata for FileCoordinatorInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0E938);
  }
  return result;
}

uint64_t sub_23DEA7F48(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23DEA068C(&qword_256D0E998, a2, (uint64_t (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal, (uint64_t)&protocol conformance descriptor for FileCoordinatorInputSignal);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FileCoordinatorInputSignal()
{
  return objc_opt_self();
}

uint64_t method lookup function for FileCoordinatorInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FileCoordinatorInputSignal.__allocating_init(context:observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for FileCoordinatorInputSignal.Configuration()
{
  return &type metadata for FileCoordinatorInputSignal.Configuration;
}

ValueMetadata *type metadata accessor for FileCoordinatorInputSignal.Anchor()
{
  return &type metadata for FileCoordinatorInputSignal.Anchor;
}

uint64_t sub_23DEA7FD8()
{
  return type metadata accessor for FileCoordinatorInputSignal.Presenter();
}

uint64_t type metadata accessor for FileCoordinatorInputSignal.Presenter()
{
  uint64_t result;

  result = qword_256D0EAE0;
  if (!qword_256D0EAE0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DEA801C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DF14BA8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for EnvironmentalStateDescription()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthOrchestration29EnvironmentalStateDescriptionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EnvironmentalStateDescription(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for EnvironmentalStateDescription(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentalStateDescription(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentalStateDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FileCoordinatorInputSignal.State()
{
  return &type metadata for FileCoordinatorInputSignal.State;
}

uint64_t storeEnumTagSinglePayload for FileCoordinatorInputSignal.Anchor.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DEA826C + 4 * byte_23DF17670[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DEA828C + 4 * byte_23DF17675[v4]))();
}

_BYTE *sub_23DEA826C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DEA828C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEA8294(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEA829C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEA82A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEA82AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FileCoordinatorInputSignal.Anchor.CodingKeys()
{
  return &type metadata for FileCoordinatorInputSignal.Anchor.CodingKeys;
}

unint64_t sub_23DEA82CC()
{
  unint64_t result;

  result = qword_256D0EAF0;
  if (!qword_256D0EAF0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF17924, &type metadata for FileCoordinatorInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0EAF0);
  }
  return result;
}

unint64_t sub_23DEA8314()
{
  unint64_t result;

  result = qword_256D0EAF8;
  if (!qword_256D0EAF8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF17894, &type metadata for FileCoordinatorInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0EAF8);
  }
  return result;
}

unint64_t sub_23DEA835C()
{
  unint64_t result;

  result = qword_256D0EB00;
  if (!qword_256D0EB00)
  {
    result = MEMORY[0x2426483D0](&unk_23DF178BC, &type metadata for FileCoordinatorInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0EB00);
  }
  return result;
}

uint64_t sub_23DEA83A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_23DF154A8();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_23DF15484();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_23DF15478();
    swift_bridgeObjectRetain();
    sub_23DF14E3C();
    v11 = sub_23DF154A8();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23DEA8534(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;

  result = sub_23DF154A8();
  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = a2 + 56;
  v8 = 1 << *(_BYTE *)(a2 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a2 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v6++, 1))
      goto LABEL_19;
    if (v6 >= v11)
      return sub_23DF15484();
    v15 = *(_QWORD *)(v7 + 8 * v6);
    if (!v15)
      break;
LABEL_16:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    result = MEMORY[0x242647EB4](v4, *(unsigned int *)(*(_QWORD *)(a2 + 48) + 4 * v13), 4);
    v5 ^= result;
  }
  v16 = v6 + 1;
  if (v6 + 1 >= v11)
    return sub_23DF15484();
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    ++v6;
    goto LABEL_16;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return sub_23DF15484();
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23DEA8680(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023DF1C720)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23DF15400();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23DEA8704(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Orchestrator.AnyConfiguration(a2, a1);
  return a2;
}

uint64_t sub_23DEA8740(uint64_t a1)
{
  destroy for Orchestrator.AnyConfiguration(a1);
  return a1;
}

unint64_t sub_23DEA8774()
{
  unint64_t result;

  result = qword_25432D9E0;
  if (!qword_25432D9E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D9E0);
  }
  return result;
}

uint64_t sub_23DEA87B0(uint64_t a1)
{
  uint64_t v2;

  sub_23DEA87EC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DEA87EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DD40)
  {
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DD40);
  }
}

uint64_t sub_23DEA8844(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DEA88B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 24);
  return sub_23DEA4AE8(&v3, v1);
}

uint64_t sub_23DEA88F0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DEA8924(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_23DEA8958()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D0EB20)
  {
    sub_23DF14BA8();
    sub_23DF14BF0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D0EB20);
  }
}

uint64_t sub_23DEA89C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DEA8A88(0, &qword_256D0EB18, (void (*)(uint64_t))sub_23DEA8958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DEA8A1C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D0EB30)
  {
    sub_23DF14BA8();
    sub_23DF14BF0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D0EB30);
  }
}

void sub_23DEA8A88(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DF150F4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_23DEA8AD4()
{
  return swift_release();
}

uint64_t WorkBarrier.__allocating_init(completion:priorityThresholdOverride:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  char v7;

  result = swift_allocObject();
  v7 = *a3;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 32) = a2;
  *(_BYTE *)(result + 40) = v7;
  return result;
}

uint64_t WorkBarrier.init(completion:priorityThresholdOverride:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  char v4;

  v4 = *a3;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = v4;
  return v3;
}

uint64_t WorkBarrier.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t WorkBarrier.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WorkBarrier()
{
  return objc_opt_self();
}

uint64_t method lookup function for WorkBarrier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WorkBarrier.__allocating_init(completion:priorityThresholdOverride:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t SingleContextProvider.__allocating_init(context:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SingleContextProvider.init(context:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t SingleContextProvider.start(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *v2;
  ObjectType = swift_getObjectType();
  sub_23DEA8C98();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23DF16970;
  v7 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v6 + 32) = v2[2];
  *(_QWORD *)(v6 + 40) = v7;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  v8(v6, ObjectType, a2);
  return swift_bridgeObjectRelease();
}

void sub_23DEA8C98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432C240)
  {
    sub_23DEA8CEC();
    v0 = sub_23DF153D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432C240);
  }
}

unint64_t sub_23DEA8CEC()
{
  unint64_t result;

  result = qword_25432C268;
  if (!qword_25432C268)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25432C268);
  }
  return result;
}

uint64_t SingleContextProvider.context(for:)()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23DEA8DCC();
  if (!v0)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t SingleContextProvider.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t SingleContextProvider.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEA8DA4()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23DEA8DCC();
  if (!v0)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_23DEA8DCC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_23DEA8DD4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_23DEA8DE0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SingleContextProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SingleContextProvider);
}

uint64_t method lookup function for SingleContextProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SingleContextProvider.__allocating_init(context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ExecutorProvider.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExecutorProvider.executors(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

__n128 SecureCodingOptionalValueAnchor.init(identifier:value:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3;
  __n128 result;

  v3 = a1->n128_u64[1];
  a3->n128_u64[0] = a1->n128_u64[0];
  a3->n128_u64[1] = v3;
  result = a1[1];
  a3[1] = result;
  a3[2].n128_u64[0] = a2;
  return result;
}

uint64_t SecureCodingOptionalValueAnchor.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void *SecureCodingOptionalValueAnchor.value.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

uint64_t SecureCodingOptionalValueAnchor.hasDifference(from:for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  char v12;

  v2 = a1[1];
  if (v2)
  {
    v3 = a1[4];
    v4 = *(_QWORD *)(v1 + 32);
    v5 = (v4 | v3) == 0;
    if (v4)
      v6 = v3 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = *a1;
      v8 = a1[2];
      v9 = a1[3];
      v10 = (id)v4;
      sub_23DEA8F88(v7, v2, v8, v9, (void *)v3);
      v11 = (id)v3;
      v5 = sub_23DF150E8();
      sub_23DEA8FC0(v7, v2, v8, v9, (void *)v3);

    }
    v12 = v5 ^ 1;
  }
  else
  {
    v12 = 1;
  }
  return v12 & 1;
}

uint64_t sub_23DEA8F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5;
  uint64_t result;

  if (a2)
  {
    v5 = a5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_23DEA8FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t SecureCodingOptionalValueAnchor.merged(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = (void *)v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  v6 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DEA904C(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF17C30, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DEA9080(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF17C30, a1);
  return sub_23DF154D8();
}

void SecureCodingOptionalValueAnchor.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v27 = a5;
  v6 = type metadata accessor for SecureCodingOptionalValueAnchor.CodingKeys(255, a2, a3, a4);
  MEMORY[0x2426483D0](&unk_23DF17C30, v6);
  v7 = sub_23DF15340();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v27 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = v28;
  sub_23DF154B4();
  if (v12)
    goto LABEL_3;
  v13 = (uint64_t)a1;
  v14 = v27;
  v15 = v8;
  sub_23DEA93E4();
  v33 = 1;
  sub_23DEA9438();
  sub_23DF15334();
  v16 = v7;
  v28 = v11;
  v17 = v30;
  if (v30 >> 60 != 15)
  {
    v20 = v29;
    sub_23DE9D2E8();
    v21 = v20;
    v18 = (void *)sub_23DF15028();
    if (v18)
    {
      sub_23DEA9498(v21, v17);
      goto LABEL_6;
    }
    LOBYTE(v29) = 1;
    sub_23DF151CC();
    swift_allocError();
    MEMORY[0x2426483D0](MEMORY[0x24BEE33F8], v16);
    v26 = v28;
    sub_23DF151C0();
    swift_willThrow();
    sub_23DEA9498(v21, v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v26, v16);
    a1 = (_QWORD *)v13;
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }
  v18 = 0;
LABEL_6:
  v19 = v28;
  v33 = 0;
  sub_23DE90B4C();
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v16);
  v22 = v30;
  v23 = v31;
  v24 = v32;
  *v14 = v29;
  v14[1] = v22;
  v14[2] = v23;
  v14[3] = v24;
  v14[4] = (uint64_t)v18;
  v25 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SecureCodingOptionalValueAnchor.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingOptionalValueAnchor.CodingKeys);
}

void sub_23DEA93E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D2D8)
  {
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D2D8);
  }
}

unint64_t sub_23DEA9438()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25432D2E0;
  if (!qword_25432D2E0)
  {
    sub_23DEA93E4();
    v2 = v1;
    v3 = sub_23DE90AC4();
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE4AC0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25432D2E0);
  }
  return result;
}

uint64_t sub_23DEA9498(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23DE90B08(a1, a2);
  return a1;
}

uint64_t SecureCodingOptionalValueAnchor.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for SecureCodingOptionalValueAnchor.CodingKeys(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x2426483D0](&unk_23DF17C30, v6);
  v7 = sub_23DF153A0();
  v31 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v26 - v9;
  v11 = *v4;
  v28 = v4[1];
  v29 = v11;
  v12 = v4[2];
  v13 = v4[4];
  v26 = v4[3];
  v27 = (uint64_t)v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DF154C0();
  if (v13)
  {
    v14 = v7;
    v15 = v30;
    v16 = (void *)objc_opt_self();
    v33 = 0;
    v17 = v13;
    v18 = objc_msgSend(v16, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v17, 1, &v33);
    v19 = v33;
    if (v18)
    {
      v20 = (void *)sub_23DF14BCC();
      v22 = v21;

      v33 = v20;
      v34 = v22;
      v32 = 1;
      sub_23DE90E10();
      sub_23DF15388();
      if (v15)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v14);

        return sub_23DE90B08((uint64_t)v20, v22);
      }

      sub_23DE90B08((uint64_t)v20, v22);
      goto LABEL_9;
    }
    v25 = v19;
    sub_23DF14B78();

    swift_willThrow();
  }
  else
  {
    LOBYTE(v33) = 1;
    v24 = v30;
    sub_23DF15394();
    v14 = v7;
    if (!v24)
    {
LABEL_9:
      v33 = v29;
      v34 = (unint64_t)v28;
      v35 = v27;
      v36 = v26;
      v32 = 0;
      sub_23DE90E54();
      sub_23DF15388();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v14);
}

uint64_t static SecureCodingOptionalValueAnchor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  BOOL v4;
  char v5;
  uint64_t result;
  id v7;
  id v8;
  char v9;

  v2 = (void *)a1[4];
  v3 = (void *)a2[4];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_23DF15400(), result = 0, (v5 & 1) != 0))
  {
    if (v2)
    {
      if (v3)
      {
        v7 = v3;
        v8 = v2;
        v9 = sub_23DF150E8();

        if ((v9 & 1) != 0)
          return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_23DEA980C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingOptionalValueAnchor<A>);
  a1[2] = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingOptionalValueAnchor<A>, a2);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for SecureCodingOptionalValueAnchor<A>, a2);
  a1[3] = result;
  return result;
}

void sub_23DEA9864(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  SecureCodingOptionalValueAnchor.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_23DEA9880(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SecureCodingOptionalValueAnchor.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_23DEA9894(_QWORD *a1, _QWORD *a2)
{
  return static SecureCodingOptionalValueAnchor.== infix(_:_:)(a1, a2);
}

_QWORD *sub_23DEA989C(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[4];
  v5 = (void *)a2[4];
  a1[4] = v5;
  v6 = v5;

  return a1;
}

uint64_t type metadata accessor for SecureCodingOptionalValueAnchor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureCodingOptionalValueAnchor);
}

uint64_t sub_23DEA9928(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DEA9974 + 4 * byte_23DF17A75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DEA99A8 + 4 * byte_23DF17A70[v4]))();
}

uint64_t sub_23DEA99A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEA99B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEA99B8);
  return result;
}

uint64_t sub_23DEA99C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEA99CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DEA99D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEA99D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23DEA99E4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEA99F4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEA9A04()
{
  JUMPOUT(0x2426483D0);
}

uint64_t WorkCriteria.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[3];
  v4 = v1[4];
  v3 = v1[5];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t WorkCriteria.anchor.getter()
{
  return swift_retain();
}

uint64_t WorkCriteria.inputSignalConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 WorkCriteria.__allocating_init(identifier:anchor:inputSignalConfigurations:)(__n128 *a1, unint64_t a2, unint64_t a3)
{
  __n128 *v6;
  unint64_t v7;
  __n128 result;

  v6 = (__n128 *)swift_allocObject();
  v7 = a1->n128_u64[1];
  v6[1].n128_u64[0] = a1->n128_u64[0];
  v6[1].n128_u64[1] = v7;
  result = a1[1];
  v6[2] = result;
  v6[3].n128_u64[0] = a2;
  v6[3].n128_u64[1] = a3;
  return result;
}

uint64_t WorkCriteria.init(identifier:anchor:inputSignalConfigurations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v3 + 48) = a2;
  *(_QWORD *)(v3 + 56) = a3;
  return v3;
}

_QWORD *WorkCriteria.__allocating_init(identifier:anchor:inputSignalConfigurations:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = 0;
  result[5] = 0;
  result[6] = a3;
  result[7] = a4;
  return result;
}

HealthOrchestration::WorkCriteria::Identifier __swiftcall WorkCriteria.Identifier.init(_:logDescription:)(Swift::String _, Swift::String_optional logDescription)
{
  Swift::String_optional *v2;
  HealthOrchestration::WorkCriteria::Identifier result;

  v2->value = _;
  v2[1] = logDescription;
  result.logDescription = logDescription;
  result.value = _;
  return result;
}

uint64_t WorkCriteria.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WorkCriteria.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t WorkCriteria.Identifier.value.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WorkCriteria.Identifier.value.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WorkCriteria.Identifier.value.modify())()
{
  return nullsub_1;
}

uint64_t WorkCriteria.Identifier.logDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WorkCriteria.Identifier.logDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*WorkCriteria.Identifier.logDescription.modify())()
{
  return nullsub_1;
}

void static WorkCriteria.Identifier.singleWorkCriteriaIdentifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000023DF1C7D0;
  a1[2] = 0;
  a1[3] = 0;
}

HealthOrchestration::WorkCriteria::Identifier __swiftcall WorkCriteria.Identifier.init(stringLiteral:)(Swift::String stringLiteral)
{
  Swift::String *v1;
  HealthOrchestration::WorkCriteria::Identifier result;

  *v1 = stringLiteral;
  v1[1]._countAndFlagsBits = 0;
  v1[1]._object = 0;
  result.value = stringLiteral;
  return result;
}

uint64_t static WorkCriteria.Identifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23DF15400();
}

uint64_t WorkCriteria.Identifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  return swift_bridgeObjectRelease();
}

uint64_t WorkCriteria.Identifier.hashValue.getter()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DEA9D84()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DEA9DDC()
{
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEA9E20()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t WorkCriteria.Identifier.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  if (v0[3])
  {
    v1 = v0[2];
  }
  else
  {
    v1 = *v0;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WorkCriteria.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  sub_23DF15190();
  swift_bridgeObjectRelease();
  v20 = 0x6972436B726F573CLL;
  v21 = 0xEF203A6169726574;
  if (!*(_QWORD *)(v0 + 40))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v19 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA1B4(0, v2, 0);
    v4 = v1 + 32;
    do
    {
      sub_23DE902F4(v4, (uint64_t)v16);
      v14 = 0;
      v15 = 0xE000000000000000;
      v5 = v17;
      v6 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 16))(v13, v5, v6);
      if (!v13[3])
        swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v14;
      v8 = v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v3 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DEAA1B4(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v19;
      }
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_23DEAA1B4(v9 > 1, v10 + 1, 1);
        v3 = v19;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      v11 = v3 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v8;
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v16[0] = v3;
  sub_23DEABD84(0, (unint64_t *)&qword_25432D930, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DEAA1D0();
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return v20;
}

uint64_t sub_23DEAA194()
{
  return WorkCriteria.description.getter();
}

uint64_t sub_23DEAA1B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAA514(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_23DEAA1D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25432D940;
  if (!qword_25432D940)
  {
    sub_23DEABD84(255, (unint64_t *)&qword_25432D930, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_25432D940);
  }
  return result;
}

unint64_t sub_23DEAA234()
{
  unint64_t result;

  result = qword_256D0EC48;
  if (!qword_256D0EC48)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkCriteria.Identifier, &type metadata for WorkCriteria.Identifier);
    atomic_store(result, (unint64_t *)&qword_256D0EC48);
  }
  return result;
}

unint64_t sub_23DEAA27C()
{
  unint64_t result;

  result = qword_256D0EC50;
  if (!qword_256D0EC50)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkCriteria.Identifier, &type metadata for WorkCriteria.Identifier);
    atomic_store(result, (unint64_t *)&qword_256D0EC50);
  }
  return result;
}

unint64_t sub_23DEAA2C4()
{
  unint64_t result;

  result = qword_256D0EC58;
  if (!qword_256D0EC58)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkCriteria.Identifier, &type metadata for WorkCriteria.Identifier);
    atomic_store(result, (unint64_t *)&qword_256D0EC58);
  }
  return result;
}

unint64_t sub_23DEAA30C()
{
  unint64_t result;

  result = qword_25432E0E0;
  if (!qword_25432E0E0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkCriteria.Identifier, &type metadata for WorkCriteria.Identifier);
    atomic_store(result, (unint64_t *)&qword_25432E0E0);
  }
  return result;
}

uint64_t type metadata accessor for WorkCriteria()
{
  return objc_opt_self();
}

uint64_t method lookup function for WorkCriteria()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WorkCriteria.__allocating_init(identifier:anchor:inputSignalConfigurations:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for WorkCriteria.Identifier()
{
  return &type metadata for WorkCriteria.Identifier;
}

uint64_t sub_23DEAA394(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DEAA690(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DEAA3B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAA820(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA3CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DEAAFFC(a1, a2, a3, (_QWORD *)*v3, &qword_25432DB48, (unint64_t *)&qword_25432C280);
  *v3 = result;
  return result;
}

uint64_t sub_23DEAA400(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAAB24(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA41C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DEAACA0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DEAA438(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DEAAE50(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DEAA454(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DEAAFFC(a1, a2, a3, (_QWORD *)*v3, &qword_25432DB18, (unint64_t *)&qword_25432D308);
  *v3 = result;
  return result;
}

uint64_t sub_23DEAA488(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAB4F0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA4A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAB660(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA4C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAB7F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA4DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEAB98C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA4F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DEABB28(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DEAA514(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB70, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAA690(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABCC0(0, (unint64_t *)&qword_25432C2C0, (void (*)(uint64_t))sub_23DE9ACDC);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_23DE9ACDC();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAA820(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB20, (uint64_t)&type metadata for Orchestrator.AnyConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAA9B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB98, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAAB24(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432E338, (uint64_t)&type metadata for InputSignalIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAACA0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DE9DC1C(0, (unint64_t *)&qword_25432C240, (unint64_t *)&qword_25432C268);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAAE50(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABCC0(0, &qword_25432DB78, (void (*)(uint64_t))sub_23DEABD0C);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_23DEABD0C();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAAFE0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23DEAAFFC(a1, a2, a3, a4, &qword_25432DB18, (unint64_t *)&qword_25432D308);
}

uint64_t sub_23DEAAFFC(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_23DE9DC1C(0, a5, a6);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_23DE95524(0, a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAB1C0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_256D0EC60, (uint64_t)&type metadata for ScopedExecutorIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAB358(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB28, (uint64_t)&type metadata for Orchestrator.InputSignalRecord, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAB4F0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432C248, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAB660(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB30, (uint64_t)&type metadata for ScheduledWorkPlan, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8])
      memmove(v12, v13, 136 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[136 * v8] || v12 >= &v13[136 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAB7F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432E330, (uint64_t)&type metadata for EnqueuedWorkPlan, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 216);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[216 * v8])
      memmove(v12, v13, 216 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[216 * v8] || v12 >= &v13[216 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEAB98C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB40, (uint64_t)&type metadata for InputSignalAnchorSet.EncodedAnchor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEABB28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DB38, (uint64_t)&type metadata for WorkPlanIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

void sub_23DEABCC0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DF153D0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DEABD0C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432D8A0)
  {
    sub_23DE95524(255, &qword_25432D870);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432D8A0);
  }
}

void sub_23DEABD84(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t ScheduledWorkPlan.context.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ScheduledWorkPlan.context.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ScheduledWorkPlan.context.modify())()
{
  return nullsub_1;
}

uint64_t ScheduledWorkPlan.executorIdentifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v6 = v1[6];
  v5 = v1[7];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 ScheduledWorkPlan.executorIdentifier.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)(v1 + 16) = v6;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*ScheduledWorkPlan.executorIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t ScheduledWorkPlan.plan.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DE902F4(v1 + 64, a1);
}

uint64_t ScheduledWorkPlan.plan.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 64;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_23DE902DC(a1, v3);
}

uint64_t (*ScheduledWorkPlan.plan.modify())()
{
  return nullsub_1;
}

uint64_t ScheduledWorkPlan.anchor.getter()
{
  return swift_retain();
}

uint64_t ScheduledWorkPlan.anchor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*ScheduledWorkPlan.anchor.modify())()
{
  return nullsub_1;
}

double ScheduledWorkPlan.scheduled.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

void ScheduledWorkPlan.scheduled.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 112) = a1;
}

uint64_t (*ScheduledWorkPlan.scheduled.modify())()
{
  return nullsub_1;
}

uint64_t sub_23DEABFA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 120) = sub_23DEACEB4;
  *(_QWORD *)(a2 + 128) = v5;
  return result;
}

uint64_t ScheduledWorkPlan.onFinish.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_retain();
  return v1;
}

uint64_t ScheduledWorkPlan.onFinish.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return result;
}

uint64_t (*ScheduledWorkPlan.onFinish.modify())()
{
  return nullsub_1;
}

BOOL static ScheduledWorkPlan.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 112) < *(double *)(a2 + 112);
}

uint64_t ScheduledWorkPlan.init(context:executorIdentifier:plan:anchor:scheduled:onFinish:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  v16 = *((_QWORD *)a3 + 3);
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_OWORD *)(a8 + 16) = v14;
  *(_QWORD *)(a8 + 32) = v15;
  *(_QWORD *)(a8 + 40) = v16;
  *(_OWORD *)(a8 + 48) = a3[2];
  result = sub_23DE902DC(a4, a8 + 64);
  *(_QWORD *)(a8 + 104) = a5;
  *(double *)(a8 + 112) = a9;
  *(_QWORD *)(a8 + 120) = a6;
  *(_QWORD *)(a8 + 128) = a7;
  return result;
}

uint64_t ScheduledWorkPlan.matches(_:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD v23[17];
  _QWORD v24[17];
  _BYTE v25[64];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[64];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v2 = (uint64_t)v1;
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = *(_QWORD *)(v2 + 40);
  v8 = a1[4];
  v9 = a1[5];
  v10 = v4 == a1[2] && v5 == a1[3];
  if (!v10 && (sub_23DF15400() & 1) == 0
    || (v6 == v8 ? (v11 = v7 == v9) : (v11 = 0), !v11 && (sub_23DF15400() & 1) == 0))
  {
    sub_23DEAC648(v2, (uint64_t)v29);
    sub_23DEAC648((uint64_t)a1, (uint64_t)v25);
    goto LABEL_18;
  }
  sub_23DEAC648(v2, (uint64_t)v29);
  sub_23DEAC648((uint64_t)a1, (uint64_t)v25);
  v12 = v31;
  v13 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 24))(v24, v12, v13);
  v15 = v24[0];
  v14 = v24[1];
  v16 = v24[2];
  v17 = v27;
  v18 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v18 + 24))(v23, v17, v18);
  v19 = v23[2];
  if (v15 == v23[0] && v14 == v23[1])
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  v20 = sub_23DF15400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_18:
    sub_23DEAC67C((uint64_t)v29);
    sub_23DEAC67C((uint64_t)v25);
    sub_23DEAC648(v2, (uint64_t)v24);
    sub_23DEAC648((uint64_t)a1, (uint64_t)v23);
    goto LABEL_19;
  }
LABEL_16:
  sub_23DEAC67C((uint64_t)v29);
  sub_23DEAC67C((uint64_t)v25);
  sub_23DEAC648(v2, (uint64_t)v24);
  sub_23DEAC648((uint64_t)a1, (uint64_t)v23);
  if (v16 != v19)
  {
LABEL_19:
    v21 = 0;
    goto LABEL_20;
  }
  swift_getObjectType();
  v21 = sub_23DEF937C();
LABEL_20:
  sub_23DEAC67C((uint64_t)v24);
  sub_23DEAC67C((uint64_t)v23);
  return v21 & 1;
}

BOOL sub_23DEAC318(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 112) < *(double *)(a2 + 112);
}

BOOL sub_23DEAC32C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 112) >= *(double *)(a1 + 112);
}

BOOL sub_23DEAC340(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 112) >= *(double *)(a2 + 112);
}

BOOL sub_23DEAC354(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 112) < *(double *)(a1 + 112);
}

uint64_t ScheduledWorkPlan.Result.description.getter(id a1)
{
  id v3;

  if (!a1)
    return 0x73736563637573;
  if (a1 == (id)1)
    return 0x646563616C706572;
  v3 = a1;
  sub_23DF14E60();
  sub_23DE9C804();
  sub_23DF15274();
  sub_23DF14E60();
  sub_23DEAC6A8(a1);
  return 0;
}

uint64_t sub_23DEAC440()
{
  id *v0;

  return ScheduledWorkPlan.Result.description.getter(*v0);
}

BOOL _s19HealthOrchestration17ScheduledWorkPlanV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v18;
  _QWORD v20[3];
  _QWORD v21[3];
  _BYTE v22[64];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[64];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  swift_getObjectType();
  v4 = sub_23DEF937C();
  sub_23DEAC648(a1, (uint64_t)v35);
  sub_23DEAC648(a2, (uint64_t)v30);
  if ((v4 & 1) != 0
    && ((v5 = v38, v6 = v39, v7 = v33, v8 = v34, v36 == v31) && v37 == v32 || (sub_23DF15400() & 1) != 0)
    && (v5 == v7 && v6 == v8 || (sub_23DF15400() & 1) != 0))
  {
    sub_23DEAC67C((uint64_t)v30);
    sub_23DEAC67C((uint64_t)v35);
    sub_23DEAC648(a1, (uint64_t)v26);
    sub_23DEAC648(a2, (uint64_t)v22);
    v9 = v28;
    v10 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 24))(v21, v9, v10);
    v12 = v21[0];
    v11 = v21[1];
    v13 = v21[2];
    v14 = v24;
    v15 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 24))(v20, v14, v15);
    v16 = v20[2];
    if (v12 == v20[0] && v11 == v20[1])
    {
      swift_bridgeObjectRelease_n();
LABEL_13:
      v17 = v13 == v16;
      goto LABEL_14;
    }
    v18 = sub_23DF15400();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    sub_23DEAC67C((uint64_t)v30);
    sub_23DEAC67C((uint64_t)v35);
    sub_23DEAC648(a1, (uint64_t)v26);
    sub_23DEAC648(a2, (uint64_t)v22);
    v17 = 0;
  }
LABEL_14:
  sub_23DEAC67C((uint64_t)v26);
  sub_23DEAC67C((uint64_t)v22);
  return v17;
}

uint64_t sub_23DEAC648(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScheduledWorkPlan(a2, a1);
  return a2;
}

uint64_t sub_23DEAC67C(uint64_t a1)
{
  destroy for ScheduledWorkPlan(a1);
  return a1;
}

void sub_23DEAC6A8(id a1)
{
  if ((unint64_t)a1 >= 2)

}

unint64_t sub_23DEAC6BC()
{
  unint64_t result;

  result = qword_256D0EC68;
  if (!qword_256D0EC68)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ScheduledWorkPlan, &type metadata for ScheduledWorkPlan);
    atomic_store(result, &qword_256D0EC68);
  }
  return result;
}

uint64_t sub_23DEAC700@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 128);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = sub_23DEACEBC;
  a2[1] = v5;
  return swift_retain();
}

uint64_t destroy for ScheduledWorkPlan(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduledWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = a1 + 64;
  v8 = a2 + 64;
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v14;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ScheduledWorkPlan(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 8);
  a1[13] = a2[13];
  swift_retain();
  swift_release();
  a1[14] = a2[14];
  v5 = a2[16];
  a1[15] = a2[15];
  a1[16] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ScheduledWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduledWorkPlan(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduledWorkPlan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduledWorkPlan()
{
  return &type metadata for ScheduledWorkPlan;
}

_QWORD *initializeBufferWithCopyOfBuffer for ScheduledWorkPlan.Result(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for ScheduledWorkPlan.Result(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for ScheduledWorkPlan.Result(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

void **assignWithTake for ScheduledWorkPlan.Result(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduledWorkPlan.Result(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScheduledWorkPlan.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_23DEACE48(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23DEACE60(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ScheduledWorkPlan.Result()
{
  return &type metadata for ScheduledWorkPlan.Result;
}

uint64_t sub_23DEACE90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEACEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23DEEED88(a1, a2, *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16));
}

uint64_t sub_23DEACEBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_23DEEED64(a1, a2, *(uint64_t (**)(uint64_t, _QWORD))(v2 + 16));
}

uint64_t AsyncExecutor.run(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v14 = (char *)&v25 - v13;
  sub_23DEAD0A4();
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23DF14F5C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, AssociatedTypeWitness);
  v20 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  *((_QWORD *)v21 + 4) = a4;
  *((_QWORD *)v21 + 5) = a5;
  *((_QWORD *)v21 + 6) = v5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[v20], v14, AssociatedTypeWitness);
  v22 = &v21[(v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8];
  v23 = v26;
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v23;
  swift_unknownObjectRetain();
  swift_retain();
  sub_23DEAD4E8((uint64_t)v18, (uint64_t)&unk_256D0EC78, (uint64_t)v21);
  return swift_release();
}

void sub_23DEAD0A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D980)
  {
    sub_23DF14F5C();
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D980);
  }
}

uint64_t sub_23DEAD0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v8[2] = a6;
  v8[3] = a7;
  v13 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v14 + 16) + *(_QWORD *)(v14 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  v8[4] = v11;
  *v11 = v8;
  v11[1] = sub_23DEAD17C;
  return v13(a5, a8);
}

uint64_t sub_23DEAD17C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DEAD1E0()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DEAD214()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  void *v3;

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(void))(v0 + 16);
  v3 = (void *)sub_23DF14B6C();
  v2();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DEAD268()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEAD368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8;
  v7 = v0 + v5;
  v8 = swift_task_alloc();
  v9 = *(_OWORD *)(v0 + v6);
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)v8 = v1;
  *(_QWORD *)(v8 + 8) = sub_23DEAD4A0;
  *(_OWORD *)(v8 + 16) = v9;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v3 + 16) + *(_QWORD *)(v3 + 16));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 32) = v10;
  *v10 = v8;
  v10[1] = sub_23DEAD17C;
  return v12(v7, v2, v3);
}

uint64_t sub_23DEAD4A0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23DEAD4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_23DF14F5C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_23DF14F50();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_23DEAD6A4(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23DF14F2C();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t dispatch thunk of AsyncExecutor.run(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23DEAD4A0;
  return v9(a1, a2, a3);
}

uint64_t sub_23DEAD6A4(uint64_t a1)
{
  uint64_t v2;

  sub_23DEAD0A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DEAD6E0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23DEAD744;
  return v6(a1);
}

uint64_t sub_23DEAD744()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23DEAD790()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEAD7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23DEAD824;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256D0EC88 + dword_256D0EC88))(a1, v4);
}

uint64_t static TimeoutDispatchTarget.Errors.== infix(_:_:)()
{
  return 1;
}

uint64_t TimeoutDispatchTarget.Errors.hash(into:)()
{
  return sub_23DF15484();
}

uint64_t TimeoutDispatchTarget.Errors.hashValue.getter()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t TimeoutDispatchTarget.__allocating_init(timeout:target:)(__int128 *a1, double a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  sub_23DE902DC(a1, v4 + 24);
  return v4;
}

uint64_t TimeoutDispatchTarget.init(timeout:target:)(__int128 *a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a2;
  sub_23DE902DC(a1, v2 + 24);
  return v2;
}

uint64_t TimeoutDispatchTarget.run(_:for:context:completion:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  void (*v31)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t (*)(void *), uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38[2];
  _OWORD v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v7 = v6;
  v34[0] = a6;
  v37 = a5;
  v36 = a4;
  v35 = a1;
  v11 = sub_23DF1507C();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0];
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v14);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a2[1];
  v40 = *a2;
  v41 = v17;
  v42 = a2[2];
  sub_23DE90F5C(0, (unint64_t *)&qword_25432D9D0);
  *(_QWORD *)&v39[0] = MEMORY[0x24BEE4AF8];
  sub_23DE8F998(&qword_25432D9C8, v12, MEMORY[0x24BEE57D0]);
  sub_23DEADBF0();
  sub_23DE8F998(&qword_25432D978, (uint64_t (*)(uint64_t))sub_23DEADBF0, MEMORY[0x24BEE12C8]);
  sub_23DF15148();
  v18 = sub_23DF15088();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
  sub_23DEADC44();
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 28) = 0;
  *(_QWORD *)(v19 + 16) = v18;
  *(_BYTE *)(v19 + 24) = 0;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v19 + 28));
  v33 = a6;
  v20 = a3;
  v21 = a3;
  v22 = v36;
  v23 = v35;
  v24 = v37;
  sub_23DEADD08((uint64_t *)(v19 + 16), (uint64_t)sub_23DEADD00, v19, v21, v36, &v40, v35, v37, v33, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 28));
  v25 = (_QWORD *)(v7 + 24);
  v26 = *(_QWORD *)(v7 + 48);
  v27 = *(_QWORD *)(v7 + 56);
  v34[1] = __swift_project_boxed_opaque_existential_1(v25, v26);
  v39[0] = v40;
  v39[1] = v41;
  v39[2] = v42;
  sub_23DE902F4(v23, (uint64_t)v38);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_23DEADD00;
  *(_QWORD *)(v28 + 24) = v19;
  *(_QWORD *)(v28 + 32) = v20;
  *(_QWORD *)(v28 + 40) = v22;
  v29 = v22;
  v30 = v41;
  *(_OWORD *)(v28 + 48) = v40;
  *(_OWORD *)(v28 + 64) = v30;
  *(_OWORD *)(v28 + 80) = v42;
  sub_23DE902DC(v38, v28 + 96);
  *(_QWORD *)(v28 + 136) = v24;
  *(_QWORD *)(v28 + 144) = v34[0];
  v31 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t (*)(void *), uint64_t, uint64_t, uint64_t))(v27 + 8);
  swift_retain();
  swift_unknownObjectRetain();
  sub_23DEAEBB0((uint64_t)&v40);
  swift_retain();
  v31(v23, v39, v20, v29, sub_23DEAEB7C, v28, v26, v27);
  swift_release();
  return swift_release_n();
}

void sub_23DEADBF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D970)
  {
    sub_23DF1507C();
    v0 = sub_23DF14F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D970);
  }
}

void sub_23DEADC44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DD10)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DD10);
  }
}

uint64_t sub_23DEADCA0(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int v3;

  v2 = (os_unfair_lock_s *)(a1 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28));
  v3 = *(unsigned __int8 *)(a1 + 24);
  if ((v3 & 1) == 0)
  {
    *(_BYTE *)(a1 + 24) = 1;
    swift_getObjectType();
    sub_23DF150AC();
  }
  os_unfair_lock_unlock(v2);
  return v3 ^ 1u;
}

uint64_t sub_23DEADD00()
{
  uint64_t v0;

  return sub_23DEADCA0(v0);
}

uint64_t sub_23DEADD08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t result;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(_QWORD *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD aBlock[6];
  __int128 v69[3];
  uint64_t *v70;

  v65 = a8;
  v58 = a7;
  v59 = a5;
  v70 = a1;
  v67 = a10;
  v62 = a9;
  v56 = sub_23DF14D04();
  v52 = *(_QWORD *)(v56 - 8);
  v16 = MEMORY[0x24BDAC7A8](v56, v15);
  v55 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (uint64_t *)((char *)&v51 - v19);
  v54 = sub_23DF14D58();
  v51 = *(_QWORD *)(v54 - 8);
  v22 = MEMORY[0x24BDAC7A8](v54, v21);
  v66 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v24);
  v53 = (char *)&v51 - v25;
  v26 = sub_23DF14D10();
  v63 = *(_QWORD *)(v26 - 8);
  v64 = v26;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_23DF14D34();
  v60 = *(_QWORD *)(v30 - 8);
  v61 = v30;
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (char *)&v51 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *a1;
  swift_getObjectType();
  sub_23DE902F4(v58, (uint64_t)v69);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = a2;
  *(_QWORD *)(v34 + 24) = a3;
  v35 = v59;
  *(_QWORD *)(v34 + 32) = a4;
  *(_QWORD *)(v34 + 40) = v35;
  v36 = a6[1];
  *(_OWORD *)(v34 + 48) = *a6;
  *(_OWORD *)(v34 + 64) = v36;
  *(_OWORD *)(v34 + 80) = a6[2];
  sub_23DE902DC(v69, v34 + 96);
  v37 = v62;
  *(_QWORD *)(v34 + 136) = v65;
  *(_QWORD *)(v34 + 144) = v37;
  aBlock[4] = sub_23DEAF030;
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE9F35C;
  aBlock[3] = &block_descriptor_4;
  v38 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  sub_23DEAEBB0((uint64_t)a6);
  swift_retain();
  sub_23DE9F388();
  sub_23DE9F38C();
  sub_23DF150A0();
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v29, v64);
  v39 = v66;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v33, v61);
  swift_release();
  v40 = *v70;
  ObjectType = swift_getObjectType();
  result = sub_23DF14D40();
  v43 = *(double *)(v67 + 16) * 1000.0;
  if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v43 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v43 < 9.22337204e18)
  {
    *v20 = (uint64_t)v43;
    v44 = v52;
    v45 = v56;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v52 + 104))(v20, *MEMORY[0x24BEE5410], v56);
    v67 = v40;
    v46 = v53;
    sub_23DF14D4C();
    v47 = *(void (**)(_QWORD *, uint64_t))(v44 + 8);
    v47(v20, v45);
    v48 = *(void (**)(char *, uint64_t))(v51 + 8);
    v49 = v54;
    v48(v39, v54);
    sub_23DE9F44C((uint64_t)v20);
    v50 = v55;
    sub_23DE9F490(v55);
    MEMORY[0x242647B18](v46, v20, v50, ObjectType);
    v47(v50, v45);
    v47(v20, v45);
    v48(v46, v49);
    swift_getObjectType();
    return sub_23DF150B8();
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_23DEAE16C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t ObjectType;
  NSObject *v18;
  int v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE v37[40];
  __int128 v38;
  __int128 v39;

  v33 = a6;
  v11 = sub_23DF14C80();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1(v14) & 1) != 0)
  {
    v30 = v12;
    v31 = v11;
    v32 = a7;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(a4 + 40))(ObjectType, a4);
    sub_23DE902F4(v33, (uint64_t)v37);
    sub_23DEAEBB0(a5);
    sub_23DEAEBB0(a5);
    v18 = sub_23DF14C68();
    v19 = sub_23DF15004();
    v20 = v16;
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      LODWORD(v33) = v19;
      v21 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v36 = v29;
      *(_DWORD *)v21 = 136315394;
      v22 = *(_OWORD *)(a5 + 32);
      v38 = *(_OWORD *)(a5 + 16);
      v39 = v22;
      v34 = 60;
      v35 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      v23 = v30;
      if (!*((_QWORD *)&v39 + 1))
        swift_bridgeObjectRetain();
      sub_23DEA88F0((uint64_t)&v38);
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DEA8924((uint64_t)&v38);
      sub_23DF14E60();
      v34 = sub_23DEC1518(v34, v35, &v36);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      sub_23DEAEED8(a5);
      sub_23DEAEED8(a5);
      *(_WORD *)(v21 + 12) = 2080;
      sub_23DE902F4((uint64_t)v37, (uint64_t)&v34);
      sub_23DEAEF20();
      v24 = sub_23DF14E18();
      v34 = sub_23DEC1518(v24, v25, &v36);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      _os_log_impl(&dword_23DE8B000, v18, (os_log_type_t)v33, "%s: %s: Timed out.", (uint8_t *)v21, 0x16u);
      v26 = v29;
      swift_arrayDestroy();
      MEMORY[0x242648490](v26, -1, -1);
      MEMORY[0x242648490](v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v31);
    }
    else
    {
      sub_23DEAEED8(a5);
      sub_23DEAEED8(a5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);

      (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v31);
    }
    sub_23DEAF060();
    v27 = (void *)swift_allocError();
    v28 = (void *)sub_23DF14B6C();
    v32();

  }
}

uint64_t sub_23DEAE4D8(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *), uint64_t a7, uint64_t (*a8)(void *))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  char *v24;
  uint64_t ObjectType;
  void (*v26)(uint64_t, uint64_t);
  id v27;
  char *v28;
  uint64_t (*v29)(void *);
  id v30;
  id v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t (*v38)(void *);
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (*v45)(void *);
  uint64_t v46;
  unint64_t v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t (*v51)(void *);
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void *);
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE v64[40];
  __int128 v65;
  __int128 v66;

  v59 = a7;
  v60 = a8;
  v12 = sub_23DF14C80();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v21 = (char *)&v54 - v20;
  if ((a2(v19) & 1) != 0)
    return v60(a1);
  v23 = v59;
  v60 = a6;
  v57 = v13;
  v58 = v12;
  if (a1)
  {
    v24 = v17;
    ObjectType = swift_getObjectType();
    v26 = *(void (**)(uint64_t, uint64_t))(a5 + 40);
    v27 = a1;
    v28 = v24;
    v26(ObjectType, a5);
    sub_23DE902F4(v23, (uint64_t)v64);
    v29 = v60;
    sub_23DEAEBB0((uint64_t)v60);
    v30 = v27;
    sub_23DEAEBB0((uint64_t)v29);
    v31 = v30;
    v32 = sub_23DF14C68();
    v33 = sub_23DF15004();
    if (os_log_type_enabled(v32, (os_log_type_t)v33))
    {
      v55 = v33;
      v59 = (uint64_t)a1;
      v34 = swift_slowAlloc();
      v54 = (_QWORD *)swift_slowAlloc();
      v56 = swift_slowAlloc();
      v63 = v56;
      *(_DWORD *)v34 = 136315650;
      v35 = *((_OWORD *)v29 + 2);
      v65 = *((_OWORD *)v29 + 1);
      v66 = v35;
      v61 = 60;
      v62 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      if (!*((_QWORD *)&v66 + 1))
        swift_bridgeObjectRetain();
      v44 = v57;
      sub_23DEA88F0((uint64_t)&v65);
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DEA8924((uint64_t)&v65);
      sub_23DF14E60();
      v61 = sub_23DEC1518(v61, v62, &v63);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      v45 = v60;
      sub_23DEAEED8((uint64_t)v60);
      sub_23DEAEED8((uint64_t)v45);
      *(_WORD *)(v34 + 12) = 2080;
      sub_23DE902F4((uint64_t)v64, (uint64_t)&v61);
      sub_23DEAEF20();
      v46 = sub_23DF14E18();
      v61 = sub_23DEC1518(v46, v47, &v63);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      *(_WORD *)(v34 + 22) = 2112;
      v61 = (uint64_t)v31;
      v48 = v31;
      sub_23DF15100();
      v49 = v54;
      *v54 = v59;

      _os_log_impl(&dword_23DE8B000, v32, (os_log_type_t)v55, "%s: %s: Failed after timeout with error: %@", (uint8_t *)v34, 0x20u);
      sub_23DEAEF74();
      swift_arrayDestroy();
      MEMORY[0x242648490](v49, -1, -1);
      v50 = v56;
      swift_arrayDestroy();
      MEMORY[0x242648490](v50, -1, -1);
      MEMORY[0x242648490](v34, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v28, v58);
    }
    else
    {

      sub_23DEAEED8((uint64_t)v29);
      sub_23DEAEED8((uint64_t)v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);

      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v24, v58);
    }
  }
  else
  {
    v36 = swift_getObjectType();
    v37 = v21;
    (*(void (**)(uint64_t, uint64_t))(a5 + 40))(v36, a5);
    sub_23DE902F4(v23, (uint64_t)v64);
    v38 = v60;
    sub_23DEAEBB0((uint64_t)v60);
    sub_23DEAEBB0((uint64_t)v38);
    v39 = sub_23DF14C68();
    v40 = sub_23DF1501C();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v63 = v42;
      *(_DWORD *)v41 = 136315394;
      v43 = *((_OWORD *)v38 + 2);
      v65 = *((_OWORD *)v38 + 1);
      v66 = v43;
      v61 = 60;
      v62 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      if (!*((_QWORD *)&v66 + 1))
        swift_bridgeObjectRetain();
      sub_23DEA88F0((uint64_t)&v65);
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DEA8924((uint64_t)&v65);
      sub_23DF14E60();
      v61 = sub_23DEC1518(v61, v62, &v63);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      v51 = v60;
      sub_23DEAEED8((uint64_t)v60);
      sub_23DEAEED8((uint64_t)v51);
      *(_WORD *)(v41 + 12) = 2080;
      sub_23DE902F4((uint64_t)v64, (uint64_t)&v61);
      sub_23DEAEF20();
      v52 = sub_23DF14E18();
      v61 = sub_23DEC1518(v52, v53, &v63);
      sub_23DF15100();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      _os_log_impl(&dword_23DE8B000, v39, v40, "%s: %s: Finished after timeout.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242648490](v42, -1, -1);
      MEMORY[0x242648490](v41, -1, -1);
    }
    else
    {
      sub_23DEAEED8((uint64_t)v38);
      sub_23DEAEED8((uint64_t)v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v37, v58);
  }
}

uint64_t sub_23DEAEB7C(void *a1)
{
  uint64_t v1;

  return sub_23DEAE4D8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t (*)(void *))(v1 + 48), v1 + 96, *(uint64_t (**)(void *))(v1 + 136));
}

uint64_t sub_23DEAEBB0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t TimeoutDispatchTarget.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t TimeoutDispatchTarget.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocClassInstance();
}

unint64_t sub_23DEAEC3C()
{
  unint64_t result;

  result = qword_256D0EC98;
  if (!qword_256D0EC98)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for TimeoutDispatchTarget.Errors, &type metadata for TimeoutDispatchTarget.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0EC98);
  }
  return result;
}

uint64_t sub_23DEAEC80(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return TimeoutDispatchTarget.run(_:for:context:completion:)(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata accessor for TimeoutDispatchTarget()
{
  return objc_opt_self();
}

uint64_t method lookup function for TimeoutDispatchTarget()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TimeoutDispatchTarget.__allocating_init(timeout:target:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for TimeoutDispatchTarget.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DEAED14 + 4 * byte_23DF17F90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DEAED34 + 4 * byte_23DF17F95[v4]))();
}

_BYTE *sub_23DEAED14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DEAED34(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEAED3C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEAED44(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEAED4C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEAED54(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TimeoutDispatchTarget.Errors()
{
  return &type metadata for TimeoutDispatchTarget.Errors;
}

uint64_t initializeBufferWithCopyOfBuffer for TimeoutDispatchTarget.State(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TimeoutDispatchTarget.State(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for TimeoutDispatchTarget.State(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeoutDispatchTarget.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeoutDispatchTarget.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeoutDispatchTarget.State()
{
  return &type metadata for TimeoutDispatchTarget.State;
}

uint64_t sub_23DEAEED8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_23DEAEF20()
{
  unint64_t result;

  result = qword_25432D878;
  if (!qword_25432D878)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D878);
  }
  return result;
}

void sub_23DEAEF74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D9F0)
  {
    sub_23DE90F5C(255, (unint64_t *)&qword_25432D9E0);
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D9F0);
  }
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  return swift_deallocObject();
}

void sub_23DEAF030()
{
  uint64_t v0;

  sub_23DEAE16C(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + 48, v0 + 96, *(void (**)(void))(v0 + 136));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

unint64_t sub_23DEAF060()
{
  unint64_t result;

  result = qword_256D0ECA0;
  if (!qword_256D0ECA0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for TimeoutDispatchTarget.Errors, &type metadata for TimeoutDispatchTarget.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0ECA0);
  }
  return result;
}

uint64_t CalendarDayInputSignal.__allocating_init(observer:dateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  sub_23DEAF2C0(a3, (uint64_t)&v8);
  if (v9)
  {
    sub_23DEAF370(a3);
    sub_23DE902DC(&v8, (uint64_t)&v10);
  }
  else
  {
    swift_unknownObjectRetain();
    sub_23DEAF370((uint64_t)&v8);
    v11 = &type metadata for CalendarDayInputSignal.DateProvider;
    v12 = &off_250EB00A0;
    swift_unknownObjectRelease();
    sub_23DEAF370(a3);
  }
  sub_23DE902DC(&v10, v6 + 32);
  return v6;
}

void static InputSignalIdentifier.calendarDay.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF18090;
  a1[2] = 0;
  a1[3] = 0;
}

void static InputSignalSet.LookupKey.calendarDay.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF18090;
  a1[2] = 0;
  a1[3] = 0;
}

void CalendarDayInputSignal.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF18090;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CalendarDayInputSignal.observer.getter()
{
  return swift_unknownObjectRetain();
}

void static CalendarDayInputSignal.identityConfiguration.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF18090;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CalendarDayInputSignal.init(observer:dateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  ValueMetadata *v9;
  _UNKNOWN **v10;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  sub_23DEAF2C0(a3, (uint64_t)&v6);
  if (v7)
  {
    sub_23DEAF370(a3);
    sub_23DE902DC(&v6, (uint64_t)&v8);
  }
  else
  {
    swift_unknownObjectRetain();
    sub_23DEAF370((uint64_t)&v6);
    v9 = &type metadata for CalendarDayInputSignal.DateProvider;
    v10 = &off_250EB00A0;
    swift_unknownObjectRelease();
    sub_23DEAF370(a3);
  }
  sub_23DE902DC(&v8, v3 + 32);
  return v3;
}

uint64_t sub_23DEAF2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE95234(0, &qword_25432D860, (uint64_t (*)(uint64_t))sub_23DEAF31C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23DEAF31C()
{
  unint64_t result;

  result = qword_25432D858;
  if (!qword_25432D858)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D858);
  }
  return result;
}

uint64_t sub_23DEAF370(uint64_t a1)
{
  uint64_t v2;

  sub_23DE95234(0, &qword_25432D860, (uint64_t (*)(uint64_t))sub_23DEAF31C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DEAF3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(unint64_t, _QWORD, uint64_t);
  _QWORD v14[2];

  v14[1] = a1;
  v1 = sub_23DF14C5C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1, v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DF14C44();
  sub_23DE95234(0, &qword_25432DD30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v6 = sub_23DF14C50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23DF16F00;
  v11 = v10 + v9;
  v12 = *(void (**)(unint64_t, _QWORD, uint64_t))(v7 + 104);
  v12(v11, *MEMORY[0x24BDCF228], v6);
  v12(v11 + v8, *MEMORY[0x24BDCF240], v6);
  v12(v11 + 2 * v8, *MEMORY[0x24BDCF250], v6);
  v12(v11 + 3 * v8, *MEMORY[0x24BDCF220], v6);
  v12(v11 + 4 * v8, *MEMORY[0x24BDCF280], v6);
  v12(v11 + 5 * v8, *MEMORY[0x24BDCF288], v6);
  sub_23DECDFFC(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_23DF14C38();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t sub_23DEAF5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  _QWORD *v30;

  v0 = sub_23DF14BF0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0, v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DF14B60();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DEAFC34();
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = (_QWORD *)result;
    v29 = *(_QWORD *)(result + 16);
    v27 = *(_QWORD *)(result + 24);
    ObjectType = swift_getObjectType();
    v25 = v6;
    v26 = v5;
    v16 = v0;
    v17 = v15[7];
    v18 = v15[8];
    __swift_project_boxed_opaque_existential_1(v15 + 4, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
    sub_23DEAF3C4((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v16);
    *(_QWORD *)v13 = 0xD000000000000016;
    *((_QWORD *)v13 + 1) = 0x800000023DF18090;
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = 0;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v13[*(int *)(v10 + 52)], v9, v26);
    v30 = v15;
    v19 = v27;
    v20 = *(void (**)(char *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8);
    v21 = type metadata accessor for CalendarDayInputSignal();
    v23 = sub_23DEA068C((unint64_t *)&unk_25432D670, v22, (uint64_t (*)(uint64_t))type metadata accessor for CalendarDayInputSignal, (uint64_t)&protocol conformance descriptor for CalendarDayInputSignal);
    v20(v13, &v30, v21, v23, ObjectType, v19);
    sub_23DEAFDDC((uint64_t)v13);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall CalendarDayInputSignal.stopObservation()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, *MEMORY[0x24BDBC9E8], 0);

}

uint64_t CalendarDayInputSignal.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return v0;
}

uint64_t CalendarDayInputSignal.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocClassInstance();
}

void sub_23DEAF880(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF18090;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_23DEAF8A4()
{
  return _s19HealthOrchestration22CalendarDayInputSignalC16beginObservation4from14configurationsyAA11ValueAnchorVy10Foundation14DateComponentsVGSg_SayAA21IdentityConfigurationVGtF_0();
}

void sub_23DEAF8C4()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v2, sel_removeObserver_name_object_, v1, *MEMORY[0x24BDBC9E8], 0);

}

unint64_t sub_23DEAF930()
{
  return 0xD000000000000016;
}

uint64_t _s19HealthOrchestration22CalendarDayInputSignalC16beginObservation4from14configurationsyAA11ValueAnchorVy10Foundation14DateComponentsVGSg_SayAA21IdentityConfigurationVGtF_0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v1 = v0;
  v30 = *v0;
  v2 = sub_23DF14BF0();
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_23DF14B60();
  v26 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_23DEAFC34();
  MEMORY[0x24BDAC7A8](v25, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v13 = *MEMORY[0x24BDBC9E8];
  v14 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_23DEAFDBC;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DEDB8B8;
  aBlock[3] = &block_descriptor_5;
  v15 = _Block_copy(aBlock);
  swift_release();
  v16 = objc_msgSend(v12, sel_addObserverForName_object_queue_usingBlock_, v13, 0, 0, v15);
  _Block_release(v15);
  swift_unknownObjectRelease();

  v17 = v1[3];
  ObjectType = swift_getObjectType();
  v19 = v1[7];
  v20 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v19);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  sub_23DEAF3C4((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  *(_QWORD *)v11 = 0xD000000000000016;
  *((_QWORD *)v11 + 1) = 0x800000023DF18090;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v11[*(int *)(v25 + 52)], v8, v29);
  aBlock[0] = v1;
  v21 = *(void (**)(char *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8);
  v23 = sub_23DEA068C((unint64_t *)&unk_25432D670, v22, (uint64_t (*)(uint64_t))type metadata accessor for CalendarDayInputSignal, (uint64_t)&protocol conformance descriptor for CalendarDayInputSignal);
  v21(v11, aBlock, v30, v23, ObjectType, v17);
  return sub_23DEAFDDC((uint64_t)v11);
}

uint64_t sub_23DEAFC04()
{
  return sub_23DEA068C(&qword_25432E0D0, 255, (uint64_t (*)(uint64_t))sub_23DEAFC34, (uint64_t)&protocol conformance descriptor for ValueAnchor<A>);
}

uint64_t sub_23DEAFC34()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);

  result = qword_25432E0D8;
  if (!qword_25432E0D8)
  {
    sub_23DF14B60();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0];
    sub_23DEA068C(&qword_25432E0B8, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE20]);
    sub_23DEA068C(&qword_25432E0A8, 255, v1, MEMORY[0x24BDCBE00]);
    sub_23DEA068C(&qword_25432E0B0, 255, v1, MEMORY[0x24BDCBE18]);
    type metadata accessor for ValueAnchor();
  }
  return result;
}

uint64_t sub_23DEAFD10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23DEA068C((unint64_t *)&unk_25432E228, a2, (uint64_t (*)(uint64_t))type metadata accessor for CalendarDayInputSignal, (uint64_t)&protocol conformance descriptor for CalendarDayInputSignal);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for CalendarDayInputSignal()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of CalendarDayInputSignalDateProvider.currentDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for CalendarDayInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CalendarDayInputSignal.__allocating_init(observer:dateProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for CalendarDayInputSignal.DateProvider()
{
  return &type metadata for CalendarDayInputSignal.DateProvider;
}

uint64_t sub_23DEAFD98()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DEAFDBC()
{
  return sub_23DEAF5C0();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_23DEAFDDC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DEAFC34();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DEAFE1C()
{
  unint64_t result;

  result = qword_256D0ED08;
  if (!qword_256D0ED08)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for SimpleWorkPlan, &type metadata for SimpleWorkPlan);
    atomic_store(result, (unint64_t *)&qword_256D0ED08);
  }
  return result;
}

uint64_t dispatch thunk of Planner.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Planner.fetchCriteria(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Planner.workPlans(for:anchor:previous:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of Planner.workPlan(_:didFail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of Planner.update(anchor:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of Planner.update(anchor:withoutGeneratingFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

_QWORD *AutoPauseController.__allocating_init(target:paused:environment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  v8 = (_QWORD *)swift_allocObject();
  sub_23DEB0718();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 36) = 0;
  *(_WORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v9 + 32) = a3;
  v8[4] = a1;
  v8[5] = a2;
  v8[2] = v9;
  v8[3] = a4;
  v10 = *(os_unfair_lock_s **)(a4 + 16);
  v11 = (uint64_t)&v10[4];
  v12 = v10 + 10;
  swift_retain_n();
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_23DF0506C(v11, (uint64_t)v8, (uint64_t)&protocol witness table for AutoPauseController);
  os_unfair_lock_unlock(v12);
  swift_release();
  swift_unknownObjectRelease();
  swift_release_n();
  return v8;
}

_QWORD *AutoPauseController.init(target:paused:environment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;

  v4 = sub_23DEB0638(a1, a2, a3, a4);
  swift_release();
  return v4;
}

Swift::Void __swiftcall AutoPauseController.pauseIfAnyMatches(descriptions:)(Swift::OpaquePointer descriptions)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = v3 + 4;
  v5 = v3 + 9;
  os_unfair_lock_lock(v3 + 9);
  sub_23DEB0014(v4, (uint64_t)descriptions._rawValue, v1);
  os_unfair_lock_unlock(v5);
}

void sub_23DEB0014(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  os_unfair_lock_s *v13;
  Swift::Bool v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  _BYTE *v19;
  uint64_t v20;
  Swift::OpaquePointer v21;

  v4 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 1) = a2;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v19 = a1;
    v20 = a3;
    v9 = *(_QWORD *)(a3 + 24);
    swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v9 + 16);
      v12 = (_QWORD *)(v11 + 16);
      v13 = (os_unfair_lock_s *)(v11 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_lock(v13);
      sub_23DED7914(v12, &v21);
      if (v4)
      {
        os_unfair_lock_unlock(v13);
        __break(1u);
        return;
      }
      v4 = 0;
      os_unfair_lock_unlock(v13);
      v14 = EnvironmentalStateDescription.matches(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
        break;
      if (v8 == ++v10)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        a3 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    a1 = v19;
    v19[1] = 1;
    if ((*v19 & 1) != 0)
    {
      a3 = v20;
      goto LABEL_12;
    }
    a3 = v20;
    if ((v19[16] & 1) == 0)
    {
LABEL_15:
      a1[16] = 1;
      v17 = *(_QWORD *)(a3 + 40);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(ObjectType, v17);
    }
  }
  else
  {
LABEL_7:
    a1[1] = 0;
    if ((*a1 & 1) != 0)
    {
LABEL_12:
      if (a1[16] == 1)
        return;
      goto LABEL_15;
    }
    if (a1[16] == 1)
    {
      a1[16] = 0;
      v15 = *(_QWORD *)(a3 + 40);
      v16 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    }
  }
}

Swift::Void __swiftcall AutoPauseController.pause()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 36));
  *(_BYTE *)(v1 + 16) = 1;
  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    *(_BYTE *)(v1 + 32) = 1;
    v2 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 36));
}

Swift::Void __swiftcall AutoPauseController.resume()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_23DEB0290(v2, v0);
  os_unfair_lock_unlock(v3);
}

_BYTE *sub_23DEB0290(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;

  *result = 0;
  if ((result[1] & 1) != 0)
  {
    if ((result[16] & 1) == 0)
    {
      result[16] = 1;
      v2 = *(_QWORD *)(a2 + 40);
      ObjectType = swift_getObjectType();
      return (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    }
  }
  else if (result[16])
  {
    result[16] = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v5 = swift_getObjectType();
    return (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  }
  return result;
}

Swift::Void __swiftcall AutoPauseController.didUpdate(environmentalState:)(Swift::OpaquePointer environmentalState)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = v2 + 4;
  v4 = v2 + 9;
  os_unfair_lock_lock(v2 + 9);
  sub_23DEB0358(v3, v1);
  os_unfair_lock_unlock(v4);
}

void sub_23DEB0358(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  os_unfair_lock_s *v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _BYTE *v15;
  uint64_t v16;
  Swift::OpaquePointer v17;

  v3 = v2;
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
  if (v4)
  {
    v15 = a1;
    v16 = a2;
    v5 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = (_QWORD *)(v7 + 16);
      v9 = (os_unfair_lock_s *)(v7 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_lock(v9);
      sub_23DED7914(v8, &v17);
      if (v3)
      {
        os_unfair_lock_unlock(v9);
        __break(1u);
        return;
      }
      v3 = 0;
      os_unfair_lock_unlock(v9);
      v10 = EnvironmentalStateDescription.matches(_:)(v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10)
        break;
      if (v4 == ++v6)
      {
        swift_bridgeObjectRelease();
        a1 = v15;
        a2 = v16;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    a1 = v15;
    v15[1] = 1;
    if ((*v15 & 1) != 0)
    {
      a2 = v16;
      goto LABEL_12;
    }
    a2 = v16;
    if ((v15[16] & 1) == 0)
    {
LABEL_15:
      a1[16] = 1;
      v13 = *(_QWORD *)(a2 + 40);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13);
    }
  }
  else
  {
LABEL_7:
    a1[1] = 0;
    if ((*a1 & 1) != 0)
    {
LABEL_12:
      if (a1[16] == 1)
        return;
      goto LABEL_15;
    }
    if (a1[16] == 1)
    {
      a1[16] = 0;
      v11 = *(_QWORD *)(a2 + 40);
      v12 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
    }
  }
}

uint64_t AutoPauseController.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t AutoPauseController.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void sub_23DEB0560()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_23DEB0970(v2);
  os_unfair_lock_unlock(v3);
}

void sub_23DEB05A0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_23DEB0958(v2);
  os_unfair_lock_unlock(v3);
}

void sub_23DEB05EC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_23DEB0940(v2);
  os_unfair_lock_unlock(v3);
}

_QWORD *sub_23DEB0638(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  sub_23DEB0718();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 36) = 0;
  *(_WORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v9 + 32) = a3;
  v4[4] = a1;
  v4[5] = a2;
  v4[2] = v9;
  v4[3] = a4;
  v10 = *(os_unfair_lock_s **)(a4 + 16);
  v11 = (uint64_t)&v10[4];
  v12 = v10 + 10;
  swift_retain_n();
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_23DF0506C(v11, (uint64_t)v4, (uint64_t)&protocol witness table for AutoPauseController);
  os_unfair_lock_unlock(v12);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return v4;
}

void sub_23DEB0718()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA38)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA38);
  }
}

uint64_t dispatch thunk of Pausable.pause()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Pausable.resume()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for AutoPauseController()
{
  return objc_opt_self();
}

uint64_t method lookup function for AutoPauseController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AutoPauseController.__allocating_init(target:paused:environment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t destroy for WorkPlanIdentifier()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19HealthOrchestration19AutoPauseControllerC14ProtectedStateVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutoPauseController.ProtectedState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AutoPauseController.ProtectedState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoPauseController.ProtectedState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoPauseController.ProtectedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoPauseController.ProtectedState()
{
  return &type metadata for AutoPauseController.ProtectedState;
}

void sub_23DEB0940(_BYTE *a1)
{
  uint64_t v1;

  sub_23DEB0358(a1, v1);
}

_BYTE *sub_23DEB0958(_BYTE *a1)
{
  uint64_t v1;

  return sub_23DEB0290(a1, v1);
}

_BYTE *sub_23DEB0970(_BYTE *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  *result = 1;
  if ((result[16] & 1) == 0)
  {
    result[16] = 1;
    v2 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType();
    return (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  }
  return result;
}

uint64_t UncheckedSendable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UncheckedSendable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*UncheckedSendable.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t UncheckedSendable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_23DEB0A1C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DEB0A88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_23DEB0AF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23DEB0B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_23DEB0B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_23DEB0B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_23DEB0B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_23DEB0BC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DEB0C78 + 4 * byte_23DF18240[(v7 - 1)]))();
}

void sub_23DEB0CC8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedSendable);
}

uint64_t dispatch thunk of InputSignalObserver.didUpdate<A>(anchor:signal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t SecurelyCodableWorkPlan.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_identifier + 8);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_identifier + 16);
  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_identifier);
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

char *SecurelyCodableWorkPlan.__allocating_init(_:context:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return SecurelyCodableWorkPlan.init(_:context:)(a1, a2, a3);
}

char *SecurelyCodableWorkPlan.init(_:context:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(__int128 *__return_ptr, uint64_t, uint64_t);
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(uint64_t, uint64_t);
  objc_super v25;
  __int128 v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;

  v30 = a2;
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 24);
  v9 = v3;
  v8(&v26, v6, v7);
  v10 = v27;
  v11 = &v9[OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_identifier];
  *(_OWORD *)v11 = v26;
  *((_QWORD *)v11 + 2) = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DF14B24();
  swift_allocObject();
  sub_23DF14B18();
  v12 = sub_23DF14B0C();
  if (v4)
  {
    swift_release();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();

    type metadata accessor for SecurelyCodableWorkPlan();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v14 = v12;
    v15 = v13;
    swift_release();
    v16 = (uint64_t *)&v9[OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_payload];
    *v16 = v14;
    v16[1] = v15;
    ObjectType = swift_getObjectType();
    v23 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v26);
    v23(ObjectType, a3);
    __swift_project_boxed_opaque_existential_1(&v26, AssociatedTypeWitness);
    swift_allocObject();
    sub_23DF14B18();
    v19 = sub_23DF14B0C();
    v21 = v20;
    swift_release();
    v22 = (uint64_t *)&v9[OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_encodedContextDescriptor];
    *v22 = v19;
    v22[1] = v21;

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    v25.receiver = v9;
    v25.super_class = (Class)type metadata accessor for SecurelyCodableWorkPlan();
    v9 = (char *)objc_msgSendSuper2(&v25, sel_init);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t type metadata accessor for SecurelyCodableWorkPlan()
{
  return objc_opt_self();
}

uint64_t sub_23DEB11E8()
{
  sub_23DF14B00();
  swift_allocObject();
  sub_23DF14AF4();
  sub_23DF14AE8();
  return swift_release();
}

uint64_t sub_23DEB127C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[1] = a1;
  swift_getAssociatedTypeWitness();
  v12[0] = a2;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v9 = (char *)v12 - v8;
  sub_23DF14B00();
  swift_allocObject();
  sub_23DF14AF4();
  swift_getAssociatedConformanceWitness();
  v10 = v12[3];
  sub_23DF14AE8();
  swift_release();
  if (!v10)
  {
    a3 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(a3 + 24))(v9, v12[0], a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  }
  return a3;
}

uint64_t static SecurelyCodableWorkPlan.supportsSecureCoding.getter()
{
  return 1;
}

void sub_23DEB1448(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = v1 + OBJC_IVAR____TtC19HealthOrchestration23SecurelyCodableWorkPlan_identifier;
  v4 = (void *)sub_23DF14DE8();
  v5 = (void *)sub_23DF14DE8();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);

  v6 = *(_QWORD *)(v3 + 16);
  v7 = (void *)sub_23DF14DE8();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v6, v7);

  v8 = (void *)sub_23DF14BB4();
  v9 = (void *)sub_23DF14DE8();
  objc_msgSend(a1, sel_encodeObject_forKey_, v8, v9);

  v10 = (void *)sub_23DF14BB4();
  v11 = (id)sub_23DF14DE8();
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);

}

uint64_t SecurelyCodableWorkPlan.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SecurelyCodableWorkPlan.init(coder:)(a1);
}

uint64_t SecurelyCodableWorkPlan.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = v1;
  v4 = (void *)sub_23DF14DE8();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  sub_23DE90F5C(0, &qword_256D0ED28);
  v5 = sub_23DF150DC();
  if (v5)
  {
    v6 = (void *)v5;
    sub_23DF14E00();

  }
  type metadata accessor for SecurelyCodableWorkPlan();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_23DEB18A4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

id SecurelyCodableWorkPlan.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SecurelyCodableWorkPlan.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SecurelyCodableWorkPlan.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecurelyCodableWorkPlan();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SecurelyCodableWorkPlan()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SecurelyCodableWorkPlan.__allocating_init(_:context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SecurelyCodableWorkPlan.decoded<A>(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SecurelyCodableWorkPlan.context<A>(from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SecurelyCodableWorkPlan.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SecurelyCodableWorkPlan.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

BOOL sub_23DEB1AA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnqueuedWorkPlan.scheduledPlan.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DEAC648(v1 + 80, a1);
}

uint64_t EnqueuedWorkPlan.scheduledPlan.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DEB1AD0(a1, v1 + 80);
}

uint64_t sub_23DEB1AD0(uint64_t a1, uint64_t a2)
{
  assignWithTake for ScheduledWorkPlan(a2, a1);
  return a2;
}

uint64_t (*EnqueuedWorkPlan.scheduledPlan.modify())()
{
  return nullsub_1;
}

_QWORD *sub_23DEB1B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double Current;
  double *v7;
  double *v8;
  _QWORD *result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = v2;
  sub_23DEB2338(v3, a2);
  Current = CFAbsoluteTimeGetCurrent();
  v7 = (double *)(a2 + 32);
  if (*(_BYTE *)(a2 + 16) != 1)
    v7 = (double *)(a2 + 40);
  if (*(_BYTE *)(a2 + 16))
    v8 = v7;
  else
    v8 = (double *)(a2 + 24);
  *v8 = Current - *(double *)(a2 + 8) + *v8;
  *(double *)(a2 + 8) = Current;
  result = sub_23DEB236C((_QWORD *)(a1 + 80), (_QWORD *)(a2 + 80));
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    *(_QWORD *)(a2 + 48) = v12;
  return result;
}

BOOL static EnqueuedWorkPlan.< infix(_:_:)(double *a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = qword_23DF183F8[*(char *)a1];
  v3 = qword_23DF183F8[*(char *)a2];
  if (v2 < v3)
    return 1;
  if (v3 >= v2)
    return a1[24] < a2[24];
  return 0;
}

BOOL static EnqueuedWorkPlan.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return _s19HealthOrchestration17ScheduledWorkPlanV2eeoiySbAC_ACtFZ_0(a1 + 80, a2 + 80);
}

BOOL sub_23DEB1C10(double *a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = qword_23DF183F8[*(char *)a1];
  v3 = qword_23DF183F8[*(char *)a2];
  if (v2 < v3)
    return 1;
  if (v3 >= v2)
    return a1[24] < a2[24];
  return 0;
}

BOOL sub_23DEB1C5C(double *a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = qword_23DF183F8[*(char *)a2];
  v3 = qword_23DF183F8[*(char *)a1];
  if (v2 < v3)
    return 0;
  if (v3 >= v2)
    return a2[24] >= a1[24];
  return 1;
}

BOOL sub_23DEB1CA8(double *a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = qword_23DF183F8[*(char *)a1];
  v3 = qword_23DF183F8[*(char *)a2];
  if (v2 < v3)
    return 0;
  if (v3 >= v2)
    return a1[24] >= a2[24];
  return 1;
}

BOOL sub_23DEB1CF4(double *a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = qword_23DF183F8[*(char *)a2];
  v3 = qword_23DF183F8[*(char *)a1];
  if (v2 < v3)
    return 1;
  if (v3 >= v2)
    return a2[24] < a1[24];
  return 0;
}

BOOL sub_23DEB1D40(uint64_t a1, uint64_t a2)
{
  return _s19HealthOrchestration17ScheduledWorkPlanV2eeoiySbAC_ACtFZ_0(a1 + 80, a2 + 80);
}

unint64_t sub_23DEB1D50()
{
  unint64_t result;

  result = qword_256D0ED60;
  if (!qword_256D0ED60)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for EnqueuedWorkPlan, &type metadata for EnqueuedWorkPlan);
    atomic_store(result, (unint64_t *)&qword_256D0ED60);
  }
  return result;
}

uint64_t destroy for EnqueuedWorkPlan(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for EnqueuedWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  v8 = a1 + 144;
  v9 = a2 + 144;
  v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 168) = v10;
  v11 = v10;
  v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v8, v9, v11);
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v13;
  v14 = *(_QWORD *)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v14;
  *(_QWORD *)(a1 + 208) = v15;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EnqueuedWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 144), (uint64_t *)(a2 + 144));
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v6 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for EnqueuedWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_unknownObjectRelease();
  v5 = *(_QWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  v10 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v10;
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnqueuedWorkPlan(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnqueuedWorkPlan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnqueuedWorkPlan()
{
  return &type metadata for EnqueuedWorkPlan;
}

uint64_t storeEnumTagSinglePayload for EnqueuedWorkPlan.PlanState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DEB2270 + 4 * byte_23DF182F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DEB22A4 + 4 * byte_23DF182F0[v4]))();
}

uint64_t sub_23DEB22A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEB22AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEB22B4);
  return result;
}

uint64_t sub_23DEB22C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEB22C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DEB22CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEB22D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnqueuedWorkPlan.PlanState()
{
  return &type metadata for EnqueuedWorkPlan.PlanState;
}

unint64_t sub_23DEB22F4()
{
  unint64_t result;

  result = qword_256D0ED68;
  if (!qword_256D0ED68)
  {
    result = MEMORY[0x2426483D0](&unk_23DF183CC, &type metadata for EnqueuedWorkPlan.PlanState);
    atomic_store(result, (unint64_t *)&qword_256D0ED68);
  }
  return result;
}

uint64_t sub_23DEB2338(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for EnqueuedWorkPlan(a2, a1);
  return a2;
}

_QWORD *sub_23DEB236C(_QWORD *a1, _QWORD *a2)
{
  assignWithCopy for ScheduledWorkPlan(a2, a1);
  return a2;
}

uint64_t dispatch thunk of EnvironmentalStateComponentObserver.didUpdate(state:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of EnvironmentalStateComponent.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EnvironmentalStateComponent.currentState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EnvironmentalStateComponent.stopObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

HealthOrchestration::IdentityConfiguration __swiftcall IdentityConfiguration.init(identifier:)(HealthOrchestration::IdentityConfiguration identifier)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(identifier.identifier.value._countAndFlagsBits + 8);
  *(_QWORD *)v1 = *(_QWORD *)identifier.identifier.value._countAndFlagsBits;
  *(_QWORD *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(identifier.identifier.value._countAndFlagsBits + 16);
  return identifier;
}

uint64_t IdentityConfiguration.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static IdentityConfiguration.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23DF15400();
}

uint64_t IdentityConfiguration.hash(into:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t IdentityConfiguration.hashValue.getter()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return sub_23DF154A8();
}

uint64_t sub_23DEB251C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DEB254C()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return sub_23DF154A8();
}

uint64_t sub_23DEB25C8()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23DEB262C()
{
  sub_23DF15478();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return sub_23DF154A8();
}

unint64_t sub_23DEB26A4(uint64_t a1)
{
  unint64_t result;

  result = sub_23DEB26C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DEB26C8()
{
  unint64_t result;

  result = qword_25432D660;
  if (!qword_25432D660)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for IdentityConfiguration, &type metadata for IdentityConfiguration);
    atomic_store(result, (unint64_t *)&qword_25432D660);
  }
  return result;
}

unint64_t sub_23DEB2710()
{
  unint64_t result;

  result = qword_25432D668;
  if (!qword_25432D668)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for IdentityConfiguration, &type metadata for IdentityConfiguration);
    atomic_store(result, (unint64_t *)&qword_25432D668);
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityConfiguration()
{
  return &type metadata for IdentityConfiguration;
}

void static InputSignalSet.LookupKey.buildNumber.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000033;
  a1[1] = 0x800000023DF1CA80;
  a1[2] = 0;
  a1[3] = 0;
}

void static InputSignalSet.LookupKey.constant<A>(type:_:)()
{
  type metadata accessor for ConstantInputSignal();
}

uint64_t sub_23DEB27C4()
{
  __n128 *v0;
  __n128 v2;

  InputSignalSet.LookupKey.init(identifier:)(&v2, v0);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void type metadata accessor for ConstantInputSignal()
{
  JUMPOUT(0x242648388);
}

void static InputSignalIdentifier.buildNumber.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000033;
  a1[1] = 0x800000023DF1CA80;
  a1[2] = 0;
  a1[3] = 0;
}

void static ConstantInputSignal<>.buildNumber(observer:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = (id)MobileGestalt_get_current_device();
  if (v4)
  {
    v5 = v4;
    v6 = (id)MobileGestalt_copy_buildVersion_obj();

    if (v6)
    {
      v7 = sub_23DF14E0C();
      v9 = v8;

      v10 = (_QWORD *)swift_allocObject();
      v10[8] = v7;
      v10[9] = v9;
      v10[2] = a1;
      v10[3] = a2;
      v10[4] = 0xD000000000000033;
      v10[5] = 0x800000023DF1CA80;
      v10[6] = 0;
      v10[7] = 0;
      swift_unknownObjectRetain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ConstantInputSignal.__allocating_init(identifier:value:observer:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = swift_allocObject();
  v9 = *(_QWORD *)v8;
  v10 = *a1;
  v11 = a1[1];
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v11;
  *(_OWORD *)(v8 + 48) = *((_OWORD *)a1 + 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 80) - 8) + 32))(v8 + *(_QWORD *)(v9 + 128), a2);
  return v8;
}

uint64_t ConstantInputSignal.observer.getter()
{
  sub_23DEB2CC8();
  return swift_unknownObjectRetain();
}

uint64_t ConstantInputSignal.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[5];
  v4 = v1[6];
  v3 = v1[7];
  *a1 = v1[4];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ConstantInputSignal.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
}

uint64_t *ConstantInputSignal.init(identifier:value:observer:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v4;
  v6 = *a1;
  v7 = a1[1];
  v4[2] = a3;
  v4[3] = a4;
  v4[4] = v6;
  v4[5] = v7;
  *((_OWORD *)v4 + 3) = *((_OWORD *)a1 + 1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 32))((uint64_t)v4 + *(_QWORD *)(v5 + 128));
  return v4;
}

uint64_t *ConstantInputSignal.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  return v0;
}

uint64_t ConstantInputSignal.__deallocating_deinit()
{
  ConstantInputSignal.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEB2AB4@<X0>(_QWORD *a1@<X8>)
{
  return ConstantInputSignal.identifier.getter(a1);
}

uint64_t sub_23DEB2AD4()
{
  sub_23DEB2CC8();
  return swift_unknownObjectRetain();
}

void sub_23DEB2B00(uint64_t a1, uint64_t a2)
{
  _s19HealthOrchestration19ConstantInputSignalC16beginObservation4from14configurationsyAA11ValueAnchorVyxGSg_SayAA21IdentityConfigurationVGtF_0(a1, a2);
}

uint64_t sub_23DEB2B20(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x2426483D0](&protocol conformance descriptor for ConstantInputSignal<A>, a1);
  return InputSignal.description.getter(a1, v2);
}

void _s19HealthOrchestration19ConstantInputSignalC16beginObservation4from14configurationsyAA11ValueAnchorVyxGSg_SayAA21IdentityConfigurationVGtF_0(uint64_t a1, uint64_t a2)
{
  MEMORY[0x24BDAC7A8](a1, a2);
  type metadata accessor for ValueAnchor();
}

void sub_23DEB2BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v14 - 128) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v14 - 120) = a1;
  MEMORY[0x24BDAC7A8](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = *((_QWORD *)v10 + 3);
  *(_QWORD *)(v14 - 136) = *((_QWORD *)v10 + 2);
  *(_QWORD *)(v14 - 160) = v17;
  *(_QWORD *)(v14 - 144) = swift_getObjectType();
  v18 = *((_QWORD *)v10 + 5);
  v19 = *((_QWORD *)v10 + 6);
  v20 = *((_QWORD *)v10 + 7);
  *(_QWORD *)(v14 - 112) = *((_QWORD *)v10 + 4);
  *(_QWORD *)(v14 - 104) = v18;
  *(_QWORD *)(v14 - 96) = v19;
  *(_QWORD *)(v14 - 88) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v12, &v10[*(_QWORD *)(v9 + 128)], v11);
  ValueAnchor.init(identifier:value:)(v14 - 112, (uint64_t)v16);
}

uint64_t sub_23DEB2C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v6;

  *(_QWORD *)(v3 - 112) = v1;
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x2426483D0](&protocol conformance descriptor for ConstantInputSignal<A>, v0);
  v5(v2, v3 - 112, v0, v6, *(_QWORD *)(v3 - 144), v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 128) + 8))(v2, *(_QWORD *)(v3 - 120));
}

uint64_t sub_23DEB2CC8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_23DEB2CD0()
{
  JUMPOUT(0x2426483D0);
}

uint64_t sub_23DEB2CE0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2426483D0](&protocol conformance descriptor for ConstantInputSignal<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23DEB2D0C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ConstantInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConstantInputSignal.__allocating_init(identifier:value:observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t (*MockEnvironmentalStateComponentObserver.handler.getter())(uint64_t, uint64_t, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  return sub_23DEB32E4;
}

__n128 sub_23DEB2E38@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_23DEB32A4((uint64_t *)(v4 + 16), &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  v6 = v7;
  swift_release();
  result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_23DEB2ED4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain();
  sub_23DEB32E8((uint64_t)sub_23DEB32E4, v3);
  return swift_release();
}

uint64_t MockEnvironmentalStateComponentObserver.handler.setter(uint64_t a1, uint64_t a2)
{
  sub_23DEB32E8(a1, a2);
  return swift_release();
}

void (*MockEnvironmentalStateComponentObserver.handler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  swift_retain();
  os_unfair_lock_unlock(v5);
  v8 = swift_allocObject();
  v3[3] = sub_23DEB32E4;
  v3[4] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  return sub_23DEB2FFC;
}

void sub_23DEB2FFC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    v2[5] = sub_23DEB3394;
    v2[6] = v6;
    v7 = *(_QWORD *)(v5 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    v9 = v2[5];
    v8 = v2[6];
    swift_release();
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 24) = v8;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    swift_release();
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v3;
    *(_QWORD *)(v10 + 24) = v4;
    v2[5] = sub_23DEB3394;
    v2[6] = v10;
    v11 = *(_QWORD *)(v5 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    v13 = v2[5];
    v12 = v2[6];
    swift_release();
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v12;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  }
  swift_release();
  swift_endAccess();
  free(v2);
}

uint64_t MockEnvironmentalStateComponentObserver.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  sub_23DEB3398();
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = nullsub_1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t MockEnvironmentalStateComponentObserver.init()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DEB3398();
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = nullsub_1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t MockEnvironmentalStateComponentObserver.didUpdate(state:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  void (*v8)(uint64_t *, _QWORD *);
  _QWORD v10[2];
  uint64_t v11;

  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  v8 = *(void (**)(uint64_t *, _QWORD *))(v7 + 16);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  swift_release();
  v10[1] = a3;
  v11 = a1;
  v10[0] = a2;
  v8(&v11, v10);
  return swift_release();
}

uint64_t MockEnvironmentalStateComponentObserver.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t MockEnvironmentalStateComponentObserver.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEB32A4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  return swift_retain();
}

uint64_t sub_23DEB32C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEB32E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  *(_QWORD *)(v6 + 16) = sub_23DEB3394;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  return swift_endAccess();
}

void sub_23DEB3398()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0EDC8)
  {
    sub_23DEB33FC();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0EDC8);
  }
}

unint64_t sub_23DEB33FC()
{
  unint64_t result;

  result = qword_256D0EDD0;
  if (!qword_256D0EDD0)
  {
    sub_23DEB3464();
    sub_23DEB34C4();
    result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&qword_256D0EDD0);
  }
  return result;
}

void sub_23DEB3464()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432C210)
  {
    v0 = sub_23DF14DAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432C210);
  }
}

unint64_t sub_23DEB34C4()
{
  unint64_t result;

  result = qword_25432C180[0];
  if (!qword_25432C180[0])
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, qword_25432C180);
  }
  return result;
}

uint64_t type metadata accessor for MockEnvironmentalStateComponentObserver()
{
  return objc_opt_self();
}

uint64_t method lookup function for MockEnvironmentalStateComponentObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MockEnvironmentalStateComponentObserver.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23DEB3550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD *);
  _QWORD v6[2];
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t *, _QWORD *))(v3 + 16);
  v6[1] = a3;
  v7 = a1;
  v6[0] = a2;
  return v4(&v7, v6);
}

uint64_t sub_23DEB3588(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, *a2, a2[1]);
}

Swift::Void __swiftcall Orchestrator.stop()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = *(os_unfair_lock_s **)(v0 + 64);
  v2 = v1 + 4;
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  sub_23DEBA124(v2, v8);
  os_unfair_lock_unlock(v3);
  if (v8[0])
  {
    v4 = *(_QWORD *)(v8[0] + 16);
    if (v4)
    {
      v5 = v8[0] + 32;
      do
      {
        sub_23DE902F4(v5, (uint64_t)v8);
        v6 = v9;
        v7 = v10;
        __swift_project_boxed_opaque_existential_1(v8, v9);
        (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        v5 += 40;
        --v4;
      }
      while (v4);
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall Orchestrator.pause()()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = (os_unfair_lock_s *)v0[8];
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  sub_23DEB6B18(v2, v0);
  os_unfair_lock_unlock(v3);
}

Swift::Void __swiftcall Orchestrator.resume()()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  Swift::OpaquePointer v4;
  void *v5;

  v1 = (os_unfair_lock_s *)v0[8];
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  sub_23DEB6D68(v2, v0, &v5);
  os_unfair_lock_unlock(v3);
  v4._rawValue = v5;
  sub_23DEB6854(v4);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Orchestrator.resetFailedWorkCriteria()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  void *v4;
  Swift::OpaquePointer v5;

  v1 = *(os_unfair_lock_s **)(v0 + 64);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  v4 = (void *)sub_23DEB800C(v2);
  os_unfair_lock_unlock(v3);
  v5._rawValue = v4;
  sub_23DEB6854(v5);
  swift_bridgeObjectRelease();
}

Swift::String __swiftcall Orchestrator.orchestrationGraph()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;
  uint64_t v7[2];

  v1 = *(os_unfair_lock_s **)(v0 + 64);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  sub_23DEBE388(v2, v7);
  os_unfair_lock_unlock(v3);
  v4 = v7[0];
  v5 = (void *)v7[1];
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t sub_23DEB37F0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = MEMORY[0x24BEE4AF8];
  sub_23DEAA488(0, v1, 0);
  v2 = v30;
  result = sub_23DECC8A8(a1);
  v6 = result;
  v7 = v29;
  v8 = 0;
  v9 = a1 + 64;
  v10 = *(_BYTE *)(a1 + 32);
  v11 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v10)
  {
    v13 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
    if (v14 >> 62)
    {
      v25 = v9;
      v27 = v5;
      v23 = v11;
      swift_bridgeObjectRetain();
      v15 = sub_23DF15298();
      result = swift_bridgeObjectRelease();
      v11 = v23;
      v9 = v25;
      v5 = v27;
      v7 = v29;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v17 = *(_QWORD *)(v30 + 16);
    v16 = *(_QWORD *)(v30 + 24);
    if (v17 >= v16 >> 1)
    {
      v26 = v9;
      v28 = v5;
      v24 = v11;
      result = sub_23DEAA488(v16 > 1, v17 + 1, 1);
      v11 = v24;
      v9 = v26;
      v5 = v28;
      v7 = v29;
    }
    *(_QWORD *)(v30 + 16) = v17 + 1;
    *(_QWORD *)(v30 + 8 * v17 + 32) = v15;
    v10 = *(_BYTE *)(a1 + 32);
    v12 = 1 << v10;
    if (v6 >= 1 << v10)
      goto LABEL_28;
    v18 = *(_QWORD *)(v9 + 8 * v13);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_29;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_30;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v12 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = v13 + 1;
      v21 = (v12 + 63) >> 6;
      if (v13 + 1 < v21)
      {
        v22 = *(_QWORD *)(v9 + 8 * v20);
        if (v22)
        {
LABEL_22:
          v12 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v13)
          {
            v22 = *(_QWORD *)(v11 + 8 * v13++);
            if (v22)
            {
              v20 = v13 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v12;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void Orchestrator.start(completion:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t ObjectType;
  uint64_t v24;
  __int128 v25;
  void (*v26)(void (*)(uint64_t *), uint64_t, uint64_t, _QWORD);
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v3 = v2;
  v6 = (os_unfair_lock_s *)v3[8];
  v7 = (uint64_t)&v6[4];
  v8 = v6 + 22;
  os_unfair_lock_lock(v6 + 22);
  sub_23DEB84CC(v7, a1, a2, (char *)&v34);
  os_unfair_lock_unlock(v8);
  if (v34 != 1)
    return;
  v9 = v3[4];
  if (!*(_QWORD *)(v9 + 16))
  {
    v30 = sub_23DE934A8(MEMORY[0x24BEE4AF8]);
    sub_23DEB8550(v30);
    swift_bridgeObjectRelease();
    return;
  }
  v10 = *(_QWORD *)(v3[9] + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
  *(_QWORD *)(v10 + 24) = &protocol witness table for Orchestrator;
  swift_unknownObjectWeakAssign();
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 32));
  swift_release();
  Current = CFAbsoluteTimeGetCurrent();
  sub_23DEBFA1C();
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = MEMORY[0x24BEE4B00];
  v31 = v9 + 64;
  v13 = 1 << *(_BYTE *)(v9 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v9 + 64);
  v32 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v16 = 0;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_7;
    }
    v27 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v32)
      goto LABEL_23;
    v28 = *(_QWORD *)(v31 + 8 * v27);
    ++v16;
    if (!v28)
    {
      v16 = v27 + 1;
      if (v27 + 1 >= v32)
        goto LABEL_23;
      v28 = *(_QWORD *)(v31 + 8 * v16);
      if (!v28)
      {
        v16 = v27 + 2;
        if (v27 + 2 >= v32)
          goto LABEL_23;
        v28 = *(_QWORD *)(v31 + 8 * v16);
        if (!v28)
          break;
      }
    }
LABEL_22:
    v15 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_7:
    v19 = *(_QWORD *)(v9 + 56);
    v20 = (__int128 *)(*(_QWORD *)(v9 + 48) + 48 * v18);
    v22 = v20[1];
    v21 = v20[2];
    v34 = *v20;
    v35 = v22;
    v36 = v21;
    v33 = *(_OWORD *)(v19 + 16 * v18);
    ObjectType = swift_getObjectType();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v12;
    v25 = v35;
    *(_OWORD *)(v24 + 24) = v34;
    *(_OWORD *)(v24 + 40) = v25;
    *(_OWORD *)(v24 + 56) = v36;
    *(_QWORD *)(v24 + 72) = v3;
    *(_OWORD *)(v24 + 80) = v33;
    *(_QWORD *)(v24 + 96) = v9;
    *(CFAbsoluteTime *)(v24 + 104) = Current;
    v26 = *(void (**)(void (*)(uint64_t *), uint64_t, uint64_t, _QWORD))(*((_QWORD *)&v33 + 1) + 32);
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_23DEAEBB0((uint64_t)&v34);
    swift_retain();
    v26(sub_23DEBFAE4, v24, ObjectType, *((_QWORD *)&v33 + 1));
    swift_unknownObjectRelease();
    swift_release();
  }
  v29 = v27 + 3;
  if (v29 >= v32)
  {
LABEL_23:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v28 = *(_QWORD *)(v31 + 8 * v29);
  if (v28)
  {
    v16 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v16 >= v32)
      goto LABEL_23;
    v28 = *(_QWORD *)(v31 + 8 * v16);
    ++v29;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

uint64_t Orchestrator.__allocating_init(context:inputSignalProviders:executorProviders:workQueue:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  Orchestrator.init(context:inputSignalProviders:executorProviders:workQueue:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t Orchestrator.debugSnapshot.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 64);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  sub_23DEC0284(v2, v0, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DEB3E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  uint64_t v57;
  _QWORD *v58;

  v32 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v58 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v4)
    goto LABEL_36;
LABEL_6:
  v7 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v7 < v33)
    {
      v8 = *(_QWORD *)(v32 + 8 * v7);
      ++v6;
      if (v8)
        goto LABEL_21;
      v6 = v7 + 1;
      if (v7 + 1 >= v33)
        goto LABEL_37;
      v8 = *(_QWORD *)(v32 + 8 * v6);
      if (v8)
        goto LABEL_21;
      v6 = v7 + 2;
      if (v7 + 2 >= v33)
        goto LABEL_37;
      v8 = *(_QWORD *)(v32 + 8 * v6);
      if (v8)
        goto LABEL_21;
      v6 = v7 + 3;
      if (v7 + 3 >= v33)
        goto LABEL_37;
      v8 = *(_QWORD *)(v32 + 8 * v6);
      if (v8)
      {
LABEL_21:
        v4 = (v8 - 1) & v8;
        for (i = __clz(__rbit64(v8)) + (v6 << 6); ; i = v31 | (v6 << 6))
        {
          v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * i);
          v12 = *v11;
          v13 = v11[1];
          v14 = v11[2];
          v15 = v11[3];
          sub_23DE902F4(*(_QWORD *)(a1 + 56) + 40 * i, (uint64_t)v56);
          *(_QWORD *)&v54 = v12;
          *((_QWORD *)&v54 + 1) = v13;
          *(_QWORD *)&v55 = v14;
          *((_QWORD *)&v55 + 1) = v15;
          v49 = v54;
          v50 = v55;
          v51 = v56[0];
          v52 = v56[1];
          v53 = v57;
          v16 = *(_QWORD *)(a2 + 16);
          if (*(_QWORD *)(v16 + 16))
          {
            v17 = v49;
            v18 = v50;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v19 = sub_23DEA6458(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1));
            if ((v20 & 1) != 0)
            {
              sub_23DE902F4(*(_QWORD *)(v16 + 56) + 40 * v19, (uint64_t)&v41);
            }
            else
            {
              v43 = 0;
              v41 = 0u;
              v42 = 0u;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*((_QWORD *)&v42 + 1))
            {
              sub_23DE902DC(&v41, (uint64_t)&v36);
              v44 = v17;
              v45 = v18;
              v21 = *((_QWORD *)&v52 + 1);
              v22 = v53;
              __swift_project_boxed_opaque_existential_1(&v51, *((uint64_t *)&v52 + 1));
              *((_QWORD *)&v47 + 1) = v21;
              v48 = v22;
              boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v46);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_23DE8FADC((uint64_t)&v36, v21, v22, (uint64_t)boxed_opaque_existential_1);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
              goto LABEL_30;
            }
          }
          else
          {
            v43 = 0;
            v41 = 0u;
            v42 = 0u;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          sub_23DECECC8((uint64_t)&v41, (unint64_t *)&qword_25432D450, qword_25432C070, (uint64_t)&protocol descriptor for InputSignalAnchor);
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          v48 = 0;
LABEL_30:
          sub_23DE9A9BC((uint64_t)&v49, (uint64_t (*)(_QWORD))sub_23DECDEF8);
          if (*((_QWORD *)&v44 + 1))
          {
            v38 = v46;
            v39 = v47;
            v40 = v48;
            v36 = v44;
            v37 = v45;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_23DF0684C(0, v58[2] + 1, 1, v58);
              v58 = (_QWORD *)result;
            }
            v25 = v58[2];
            v24 = v58[3];
            if (v25 >= v24 >> 1)
            {
              result = (uint64_t)sub_23DF0684C((_QWORD *)(v24 > 1), v25 + 1, 1, v58);
              v58 = (_QWORD *)result;
            }
            v26 = v58;
            v58[2] = v25 + 1;
            v27 = &v26[9 * v25];
            *((_OWORD *)v27 + 2) = v36;
            v28 = v37;
            v29 = v38;
            v30 = v39;
            v27[12] = v40;
            *((_OWORD *)v27 + 4) = v29;
            *((_OWORD *)v27 + 5) = v30;
            *((_OWORD *)v27 + 3) = v28;
            if (!v4)
              goto LABEL_6;
          }
          else
          {
            result = sub_23DECEBD0((uint64_t)&v44);
            if (!v4)
              goto LABEL_6;
          }
LABEL_36:
          v31 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v9 = v7 + 4;
      if (v9 < v33)
      {
        v8 = *(_QWORD *)(v32 + 8 * v9);
        if (v8)
        {
          v6 = v9;
          goto LABEL_21;
        }
        while (1)
        {
          v6 = v9 + 1;
          if (__OFADD__(v9, 1))
            goto LABEL_39;
          if (v6 >= v33)
            break;
          v8 = *(_QWORD *)(v32 + 8 * v6);
          ++v9;
          if (v8)
            goto LABEL_21;
        }
      }
    }
LABEL_37:
    swift_release();
    swift_release();
    return (uint64_t)v58;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_23DEB42A0(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_23DE95570();
  result = sub_23DF14F98();
  v3 = 0;
  v20 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v8)
      goto LABEL_23;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v3;
    if (!v17)
    {
      v3 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_23;
      v17 = *(_QWORD *)(v4 + 8 * v3);
      if (!v17)
      {
        v3 = v16 + 2;
        if (v16 + 2 >= v8)
          goto LABEL_23;
        v17 = *(_QWORD *)(v4 + 8 * v3);
        if (!v17)
        {
          v3 = v16 + 3;
          if (v16 + 3 >= v8)
            goto LABEL_23;
          v17 = *(_QWORD *)(v4 + 8 * v3);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v10);
    v12 = *v11;
    v13 = v11[1];
    v14 = v11[2];
    v15 = v11[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23DEE68AC(&v19, v12, v13, v14, v15);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v18 = v16 + 4;
  if (v18 >= v8)
  {
LABEL_23:
    swift_release();
    return v20;
  }
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v3 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v17 = *(_QWORD *)(v4 + 8 * v3);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23DEB4460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_retain();
    sub_23DEBB2E0((uint64_t)&v16, &v15);
    if (v1)
    {
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    result = sub_23DEF3284(v15);
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v7)
      goto LABEL_26;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    if (!v13)
      break;
LABEL_17:
    v6 = (v13 - 1) & v13;
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_26:
    swift_release();
    return v17;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_26;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23DEB461C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    sub_23DEBB4B4(&v16, &v15);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = sub_23DEF33E8(v15);
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v7)
      goto LABEL_26;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    if (!v13)
      break;
LABEL_17:
    v6 = (v13 - 1) & v13;
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_26:
    swift_release();
    return v17;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_26;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23DEB47D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v12 = MEMORY[0x24BEE4AF8];
  v1 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_23;
      v10 = *(_QWORD *)(v1 + 8 * v7);
      if (!v10)
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v5)
          goto LABEL_23;
        v10 = *(_QWORD *)(v1 + 8 * v7);
        if (!v10)
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v5)
            goto LABEL_23;
          v10 = *(_QWORD *)(v1 + 8 * v7);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v10 - 1) & v10;
LABEL_5:
    v8 = swift_bridgeObjectRetain();
    result = sub_23DEF3C6C(v8);
  }
  v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return v12;
  }
  v10 = *(_QWORD *)(v1 + 8 * v11);
  if (v10)
  {
    v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v7 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v7);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23DEB4944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char v16;
  _BYTE v19[40];

  v4 = sub_23DF150F4();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = &v19[-v8 - 8];
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v7, v11);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_23DE902F4(a1, (uint64_t)v19);
  sub_23DE95524(0, (unint64_t *)&qword_25432C280);
  v14 = swift_dynamicCast();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v14)
  {
    v15(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, a2);
    v16 = sub_23DF14DDC();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a2);
  }
  else
  {
    v15(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_23DEB4AC0()
{
  _QWORD *v0;

  sub_23DF15478();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_23DF14DC4();
  return sub_23DF154A8();
}

uint64_t sub_23DEB4B20()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return sub_23DF14DC4();
}

uint64_t sub_23DEB4B68()
{
  _QWORD *v0;

  sub_23DF15478();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_23DF14DC4();
  return sub_23DF154A8();
}

uint64_t sub_23DEB4BC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return sub_23DEB4944(a2, v3) & 1;
}

uint64_t sub_23DEB4C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  sub_23DE902F4(a1, v3 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v31 = MEMORY[0x24BEE4AF8];
    sub_23DEAA3B0(0, v8, 0);
    v10 = v31;
    v11 = a2 + 32;
    do
    {
      sub_23DE902F4(v11, (uint64_t)&v28);
      v31 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_23DEAA3B0(v12 > 1, v13 + 1, 1);
        v10 = v31;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      v14 = v10 + 40 * v13;
      v15 = v28;
      v16 = v29;
      *(_QWORD *)(v14 + 64) = v30;
      *(_OWORD *)(v14 + 32) = v15;
      *(_OWORD *)(v14 + 48) = v16;
      v11 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v17 = sub_23DECDF74(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 56) = v17;
  v18 = *(_QWORD *)(a3 + 16);
  if (v18)
  {
    v31 = v9;
    sub_23DEAA3B0(0, v18, 0);
    v19 = v31;
    v20 = a3 + 32;
    do
    {
      sub_23DE902F4(v20, (uint64_t)&v28);
      v31 = v19;
      v22 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_23DEAA3B0(v21 > 1, v22 + 1, 1);
        v19 = v31;
      }
      *(_QWORD *)(v19 + 16) = v22 + 1;
      v23 = v19 + 40 * v22;
      v24 = v28;
      v25 = v29;
      *(_QWORD *)(v23 + 64) = v30;
      *(_OWORD *)(v23 + 32) = v24;
      *(_OWORD *)(v23 + 48) = v25;
      v20 += 40;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v26 = sub_23DECDF74(v19);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)(v4 + 64) = v26;
  return v4;
}

uint64_t sub_23DEB4E14()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEB4E48(_QWORD **a1, _QWORD **a2)
{
  return sub_23DECC930(*a1, *a2);
}

uint64_t sub_23DEB4E54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657669746341;
  if (*v0 != 1)
    v1 = 0x6465646E45;
  if (*v0)
    return v1;
  else
    return 0x7261745320746F4ELL;
}

uint64_t sub_23DEB4EB0()
{
  _BYTE *v0;

  if (*v0)
    return 0x646573756150;
  else
    return 0x676E696E6E7552;
}

void sub_23DEB4EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;

  v9 = *(_QWORD *)(v4 + 16);
  v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  v11 = MEMORY[0x24264855C](v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  os_unfair_lock_unlock(v10);
  if (v11)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(a1, a2, a3, a4, ObjectType, v12);
    swift_unknownObjectRelease();
  }
}

uint64_t Orchestrator.init(context:inputSignalProviders:executorProviders:workQueue:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ObjectType;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  _QWORD *v81;
  __int128 v82[2];
  _QWORD v83[4];
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v78 = a5;
  v69 = a4;
  v79 = a2;
  *(_QWORD *)&v80 = a3;
  v71 = sub_23DF14C80();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71, v8);
  v76 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_23DF1504C();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75, v10);
  v73 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DF15040();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v12, v14);
  v15 = sub_23DF14D34();
  MEMORY[0x24BDAC7A8](v15, v16);
  v77 = v5;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v72 = sub_23DE95920();
  *(_QWORD *)&v84 = 0;
  *((_QWORD *)&v84 + 1) = 0xE000000000000000;
  swift_unknownObjectRetain();
  sub_23DF15190();
  swift_bridgeObjectRelease();
  strcpy((char *)&v84, "Orchestration-");
  HIBYTE(v84) = -18;
  *(_QWORD *)&v82[0] = a1;
  *((_QWORD *)&v82[0] + 1) = a2;
  v17 = sub_23DE95524(0, (unint64_t *)&qword_25432C268);
  swift_unknownObjectRetain();
  v68 = v17;
  sub_23DF14E18();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14D28();
  *(_QWORD *)&v84 = MEMORY[0x24BEE4AF8];
  sub_23DE8F998((unint64_t *)&qword_25432D9B0, v13, MEMORY[0x24BEE5698]);
  sub_23DE95234(0, (unint64_t *)&qword_25432D950, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DEC0E44((unint64_t *)&qword_25432D960, (unint64_t *)&qword_25432D950, v13);
  v18 = a1;
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, *MEMORY[0x24BEE5750], v75);
  v19 = v77;
  *(_QWORD *)(v19 + 56) = sub_23DF15064();
  *(_QWORD *)(v19 + 40) = v78;
  type metadata accessor for Orchestrator.InputSignalObserverShim();
  v20 = swift_allocObject();
  *((_QWORD *)&v82[0] + 1) = 0;
  v21 = swift_unknownObjectWeakInit();
  sub_23DEC0EAC(v21, (uint64_t)&v84);
  sub_23DE9B2F8(0, &qword_25432C228);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 32) = 0;
  sub_23DEC0EE4((uint64_t)&v84, v22 + 16);
  swift_retain();
  sub_23DEC0F1C((uint64_t)&v84);
  *(_QWORD *)(v20 + 16) = v22;
  *(_QWORD *)(v19 + 72) = v20;
  swift_retain_n();
  swift_unknownObjectRetain();
  v23 = 0;
  v24 = sub_23DECCB44(v80, v18, v79, v20);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v75 = v20;
  swift_release();
  v25 = *(_QWORD *)(v24 + 16);
  v26 = MEMORY[0x24BEE4B00];
  if (v25)
  {
    v73 = 0;
    v74 = v18;
    v27 = v24 + 32;
    v72 = v24;
    swift_bridgeObjectRetain();
    v28 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      *(_QWORD *)&v80 = v25;
      sub_23DE902F4(v27, (uint64_t)&v84);
      v30 = *((_QWORD *)&v85 + 1);
      v31 = v86;
      __swift_project_boxed_opaque_existential_1(&v84, *((uint64_t *)&v85 + 1));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v31 + 40))(v83, v30, v31);
      v33 = v83[0];
      v32 = v83[1];
      v35 = v83[2];
      v34 = v83[3];
      sub_23DE902F4((uint64_t)&v84, (uint64_t)v82);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v81 = v28;
      v38 = sub_23DEA6458(v33, v32, v35, v34);
      v39 = v28[2];
      v40 = (v37 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_31:
        result = sub_23DF15424();
        __break(1u);
        return result;
      }
      v42 = v37;
      if (v28[3] >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v28 = v81;
          if ((v37 & 1) != 0)
            goto LABEL_3;
        }
        else
        {
          sub_23DECAEAC((void (*)(_QWORD))sub_23DECEA00, (void (*)(_BYTE *, uint64_t))sub_23DE902DC);
          v28 = v81;
          if ((v42 & 1) != 0)
            goto LABEL_3;
        }
      }
      else
      {
        sub_23DEC8178(v41, isUniquelyReferenced_nonNull_native, (void (*)(_QWORD))sub_23DECEA00, (void (*)(uint64_t, _BYTE *))sub_23DE902DC);
        v43 = sub_23DEA6458(v33, v32, v35, v34);
        if ((v42 & 1) != (v44 & 1))
          goto LABEL_31;
        v38 = v43;
        v28 = v81;
        if ((v42 & 1) != 0)
        {
LABEL_3:
          v29 = v28[7] + 40 * v38;
          __swift_destroy_boxed_opaque_existential_1(v29);
          sub_23DE902DC(v82, v29);
          goto LABEL_4;
        }
      }
      v28[(v38 >> 6) + 8] |= 1 << v38;
      v45 = (uint64_t *)(v28[6] + 32 * v38);
      *v45 = v33;
      v45[1] = v32;
      v45[2] = v35;
      v45[3] = v34;
      sub_23DE902DC(v82, v28[7] + 40 * v38);
      v46 = v28[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_29;
      v28[2] = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
      v27 += 40;
      v25 = v80 - 1;
      if ((_QWORD)v80 == 1)
      {
        swift_bridgeObjectRelease();
        v19 = v77;
        v18 = v74;
        v23 = v73;
        v26 = MEMORY[0x24BEE4B00];
        goto LABEL_18;
      }
    }
  }
  v28 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_18:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v19 + 48) = v28;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v49 = sub_23DECCD60(v69, v18, v79);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *(_QWORD *)&v82[0] = v26;
  v50 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    swift_bridgeObjectRetain();
    v51 = (_OWORD *)(v49 + 48);
    while (1)
    {
      v52 = *((_QWORD *)v51 - 1);
      *(_QWORD *)&v84 = *((_QWORD *)v51 - 2);
      *((_QWORD *)&v84 + 1) = v52;
      v80 = *v51;
      v85 = v80;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      sub_23DEB59B0((uint64_t *)v82, (uint64_t *)&v84, v18, v79, (uint64_t)v28);
      if (v23)
        goto LABEL_30;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v51 += 2;
      if (!--v50)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_24:
  *(_QWORD *)(v19 + 32) = *(_QWORD *)&v82[0];
  v53 = MEMORY[0x24BEE4AF8];
  v54 = sub_23DE934A8(MEMORY[0x24BEE4AF8]);
  sub_23DE9B2F8(0, &qword_25432DA20);
  v55 = swift_allocObject();
  *(_DWORD *)(v55 + 88) = 0;
  *(_QWORD *)(v55 + 16) = v53;
  *(_QWORD *)(v55 + 24) = 0;
  *(_QWORD *)(v55 + 32) = 0;
  *(_QWORD *)(v55 + 40) = v54;
  *(_WORD *)(v55 + 48) = 0;
  *(_BYTE *)(v55 + 50) = 0;
  *(_QWORD *)(v55 + 56) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v55 + 64) = 0;
  *(_QWORD *)(v55 + 72) = 0;
  *(_QWORD *)(v55 + 80) = 0;
  *(_QWORD *)(v19 + 64) = v55;
  v56 = *(_QWORD *)(v19 + 24);
  ObjectType = swift_getObjectType();
  v58 = v76;
  (*(void (**)(uint64_t, uint64_t))(v56 + 40))(ObjectType, v56);
  swift_retain_n();
  v59 = sub_23DF14C68();
  v60 = sub_23DF1501C();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = swift_slowAlloc();
    v62 = swift_slowAlloc();
    *(_QWORD *)&v82[0] = v62;
    *(_DWORD *)v61 = 136315650;
    v84 = *(_OWORD *)(v19 + 16);
    swift_unknownObjectRetain();
    v63 = sub_23DF14E18();
    *(_QWORD *)&v84 = sub_23DEC1518(v63, v64, (uint64_t *)v82);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 12) = 2048;
    v65 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 16);
    swift_release();
    *(_QWORD *)&v84 = v65;
    sub_23DF15100();
    swift_release();
    *(_WORD *)(v61 + 22) = 2048;
    v66 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 16);
    swift_release();
    *(_QWORD *)&v84 = v66;
    sub_23DF15100();
    swift_release();
    _os_log_impl(&dword_23DE8B000, v59, v60, "[%s]: Initialized with %ld input signals and %ld planners", (uint8_t *)v61, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x242648490](v62, -1, -1);
    MEMORY[0x242648490](v61, -1, -1);
    swift_release();

    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v76, v71);
  }
  else
  {

    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v71);
  }
  return v19;
}

uint64_t sub_23DEB59B0(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t ObjectType;
  void (*v21)(uint64_t *__return_ptr, uint64_t, unint64_t);
  NSObject *v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  os_log_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t AssociatedConformanceWitness;
  void (*v46)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, unint64_t);
  unint64_t v71;
  char *v72;
  NSObject *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  os_log_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100[3];
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;

  v94 = a5;
  v97 = a3;
  v98 = a4;
  v7 = sub_23DF14C80();
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v99 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v87 = (char *)&v82 - v13;
  MEMORY[0x24BDAC7A8](v12, v14);
  v92 = (char *)&v82 - v15;
  v16 = *a2;
  v17 = a2[1];
  v18 = a2[2];
  v19 = a2[3];
  ObjectType = swift_getObjectType();
  v21 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(v19 + 24);
  swift_bridgeObjectRetain();
  v110 = v18;
  v21(&v101, ObjectType, v19);
  v22 = v102;
  v23 = (char *)v104;
  v89 = v16;
  *(_QWORD *)&v105 = v16;
  *((_QWORD *)&v105 + 1) = v17;
  v86 = v101;
  v106 = v101;
  v107 = (unint64_t)v102;
  v91 = v103;
  v108 = v103;
  v109 = v104;
  v88 = a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23DEA64E4((uint64_t)&v105);
    v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      v26 = v97;
      v27 = swift_getObjectType();
      v28 = v98;
      v29 = v99;
      (*(void (**)(uint64_t, unint64_t))(v98 + 40))(v27, v98);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      v30 = sub_23DF14C68();
      LODWORD(v94) = sub_23DF15010();
      if (os_log_type_enabled(v30, (os_log_type_t)v94))
      {
        v93 = v30;
        v31 = swift_slowAlloc();
        v92 = (char *)swift_slowAlloc();
        v100[0] = (uint64_t)v92;
        *(_DWORD *)v31 = 136315906;
        v101 = v26;
        v102 = v28;
        v32 = v17;
        sub_23DE95524(0, (unint64_t *)&qword_25432C268);
        swift_unknownObjectRetain();
        v33 = sub_23DF14E18();
        v101 = sub_23DEC1518(v33, v34, v100);
        sub_23DF15100();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2080;
        v35 = v22;
        swift_bridgeObjectRetain();
        v101 = sub_23DEC1518(v89, v32, v100);
        sub_23DF15100();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v31 + 22) = 2080;
        v36 = (unint64_t)v23;
        v37 = v91;
        if (!v23)
        {
          swift_bridgeObjectRetain();
          v37 = v86;
          v36 = (unint64_t)v35;
        }
        swift_bridgeObjectRetain();
        v101 = sub_23DEC1518(v37, v36, v100);
        sub_23DF15100();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 32) = 2080;
        v101 = v110;
        v102 = v19;
        sub_23DE95524(0, &qword_25432D870);
        swift_unknownObjectRetain();
        v38 = sub_23DF14E18();
        v101 = sub_23DEC1518(v38, v39, v100);
        sub_23DF15100();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v40 = v93;
        _os_log_impl(&dword_23DE8B000, v93, (os_log_type_t)v94, "[%s]: Executor provider %s returned multiple executors with the same identifier (%s). Ignoring %s", (uint8_t *)v31, 0x2Au);
        v41 = v92;
        swift_arrayDestroy();
        MEMORY[0x242648490](v41, -1, -1);
        MEMORY[0x242648490](v31, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v99, v96);
      }
      else
      {

        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v29, v96);
      }
    }
  }
  v99 = v23;
  v93 = v22;
  v90 = v17;
  v101 = v94;
  v43 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(v19 + 32))(&v101, ObjectType, v19);
  if (!v43)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v44 = v43;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v46 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
  v47 = swift_checkMetadataState();
  v94 = v44;
  v84 = v47;
  v85 = AssociatedConformanceWitness;
  v83 = v46;
  v46(&v101, v47, AssociatedConformanceWitness);
  v48 = v101;
  v49 = (unint64_t)v102;
  v21(v100, ObjectType, v19);
  if (v48 == v100[0] && v49 == v100[1])
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = v98;
LABEL_13:
    v52 = v97;
    v53 = swift_getObjectType();
    v54 = v92;
    (*(void (**)(uint64_t, unint64_t))(v50 + 40))(v53, v50);
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v55 = sub_23DF14C68();
    v56 = sub_23DF1501C();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = v50;
      v58 = swift_slowAlloc();
      v110 = swift_slowAlloc();
      v100[0] = v110;
      *(_DWORD *)v58 = 136315394;
      v101 = v52;
      v102 = v57;
      sub_23DE95524(0, (unint64_t *)&qword_25432C268);
      swift_unknownObjectRetain();
      v59 = sub_23DF14E18();
      v101 = sub_23DEC1518(v59, v60, v100);
      v61 = v99;
      sub_23DF15100();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      v101 = 60;
      v102 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      if (!v61)
      {
        swift_bridgeObjectRetain();
        v91 = v86;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      v101 = sub_23DEC1518(v101, (unint64_t)v102, v100);
      sub_23DF15100();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DE8B000, v55, v56, "[%s]: Received executor/planner %s", (uint8_t *)v58, 0x16u);
      v62 = v110;
      swift_arrayDestroy();
      MEMORY[0x242648490](v62, -1, -1);
      MEMORY[0x242648490](v58, -1, -1);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v96);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v54, v96);
    }
    v63 = v94;
    v64 = v85;
    v65 = v84;
    v66 = v88;
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v101 = *v66;
    *v66 = 0x8000000000000000;
    sub_23DECC740(v63, &v105, isUniquelyReferenced_nonNull_native, &v101, v65, v64);
    *v66 = v101;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v51 = sub_23DF15400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = v98;
  if ((v51 & 1) != 0)
    goto LABEL_13;
  v68 = v97;
  v69 = swift_getObjectType();
  v70 = *(void (**)(uint64_t, unint64_t))(v50 + 40);
  v71 = v50;
  v72 = v87;
  v70(v69, v71);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = sub_23DF14C68();
  v74 = sub_23DF15010();
  if (os_log_type_enabled(v73, (os_log_type_t)v74))
  {
    LODWORD(v110) = v74;
    v75 = swift_slowAlloc();
    v92 = (char *)swift_slowAlloc();
    v100[0] = (uint64_t)v92;
    *(_DWORD *)v75 = 136315650;
    v101 = v68;
    v102 = v71;
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_unknownObjectRetain();
    v76 = sub_23DF14E18();
    v101 = sub_23DEC1518(v76, v77, v100);
    v78 = v99;
    sub_23DF15100();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2080;
    v101 = 60;
    v102 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    if (!v78)
    {
      swift_bridgeObjectRetain();
      v91 = v86;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    v101 = sub_23DEC1518(v101, (unint64_t)v102, v100);
    sub_23DF15100();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 22) = 2080;
    v83(&v101, v84, v85);
    v79 = v104;
    if (v104)
    {
      v80 = v103;
    }
    else
    {
      v80 = v101;
      v79 = swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    v101 = sub_23DEC1518(v80, v79, v100);
    sub_23DF15100();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DE8B000, v73, (os_log_type_t)v110, "[%s]: Executor %s returned a planner with a differing identifier (%s)", (uint8_t *)v75, 0x20u);
    v81 = v92;
    swift_arrayDestroy();
    MEMORY[0x242648490](v81, -1, -1);
    MEMORY[0x242648490](v75, -1, -1);
    swift_unknownObjectRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v87, v96);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v72, v96);
  }
}

uint64_t Orchestrator.deinit()
{
  uint64_t v0;

  Orchestrator.stop()();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return v0;
}

uint64_t Orchestrator.__deallocating_deinit()
{
  Orchestrator.deinit();
  return swift_deallocClassInstance();
}

void sub_23DEB6854(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = sub_23DF14C80();
  MEMORY[0x24BDAC7A8](v3, v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *((_QWORD *)a1._rawValue + 2);
  if (v8)
  {
    v9 = 0;
    v10 = 32;
    v11 = *((_QWORD *)a1._rawValue + 2);
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)((char *)a1._rawValue + v10) + 16);
      v13 = __OFADD__(v9, v12);
      v9 += v12;
      if (v13)
      {
        __break(1u);
        return;
      }
      v10 += 104;
      --v11;
    }
    while (v11);
    v27 = v5;
    v14 = *(_QWORD *)(v1 + 16);
    v15 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v15 + 40))(ObjectType, v15);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v17 = sub_23DF14C68();
    v18 = sub_23DF1501C();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v26 = v3;
      v20 = v19;
      v25 = swift_slowAlloc();
      v29 = v15;
      v30 = v25;
      *(_DWORD *)v20 = 136315650;
      v24[1] = v20 + 4;
      v28 = v14;
      sub_23DE95524(0, (unint64_t *)&qword_25432C268);
      swift_unknownObjectRetain();
      v21 = sub_23DF14E18();
      v28 = sub_23DEC1518(v21, v22, &v30);
      sub_23DF15100();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2048;
      v28 = v9;
      sub_23DF15100();
      *(_WORD *)(v20 + 22) = 2048;
      swift_bridgeObjectRelease();
      v28 = v8;
      sub_23DF15100();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DE8B000, v17, v18, "[%s]: Enqueuing %ld items for %ld criteria.", (uint8_t *)v20, 0x20u);
      v23 = v25;
      swift_arrayDestroy();
      MEMORY[0x242648490](v23, -1, -1);
      MEMORY[0x242648490](v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v3);
    }
    WorkQueue.enqueue(_:)(a1);
  }
}

uint64_t sub_23DEB6B18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *a2;
  v6 = sub_23DF14C80();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x24BDAC7A8](v6, v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 33) & 1) == 0)
  {
    v25 = v5;
    v12 = a2[3];
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v12 + 40))(ObjectType, v12);
    swift_retain_n();
    v14 = sub_23DF14C68();
    v15 = sub_23DF1501C();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v24 = v2;
      v17 = (uint8_t *)v16;
      v22 = swift_slowAlloc();
      v27 = v22;
      v23 = a1;
      *(_DWORD *)v17 = 136315138;
      v21 = v17 + 4;
      v26 = (uint64_t)a2;
      swift_retain();
      v18 = sub_23DF14E18();
      v26 = sub_23DEC1518(v18, v19, &v27);
      a1 = v23;
      sub_23DF15100();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DE8B000, v14, v15, "%s: Pausing.", v17, 0xCu);
      v20 = v22;
      swift_arrayDestroy();
      MEMORY[0x242648490](v20, -1, -1);
      MEMORY[0x242648490](v17, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    *(_BYTE *)(a1 + 33) = 1;
  }
  return result;
}

uint64_t Orchestrator.paused.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = (os_unfair_lock_s *)(v1 + 88);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 88));
  v3 = *(unsigned __int8 *)(v1 + 49);
  os_unfair_lock_unlock(v2);
  return v3;
}

_QWORD *sub_23DEB6D68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t ObjectType;
  void (*v18)(uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *result;
  _QWORD v34[2];
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v37 = *a2;
  v7 = sub_23DF14C80();
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)v34 - v13;
  v15 = *(unsigned __int8 *)(a1 + 33);
  v16 = a2[3];
  ObjectType = swift_getObjectType();
  v18 = *(void (**)(uint64_t, uint64_t))(v16 + 40);
  if (v15 == 1)
  {
    v18(ObjectType, v16);
    swift_retain_n();
    v19 = sub_23DF14C68();
    v20 = sub_23DF1501C();
    if (os_log_type_enabled(v19, v20))
    {
      v36 = v3;
      v21 = swift_slowAlloc();
      v35 = a3;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc();
      v41 = v23;
      *(_DWORD *)v22 = 136315138;
      v34[1] = v22 + 4;
      v40 = (uint64_t)a2;
      swift_retain();
      v24 = sub_23DF14E18();
      v40 = sub_23DEC1518(v24, v25, &v41);
      sub_23DF15100();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DE8B000, v19, v20, "%s: Resuming.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242648490](v23, -1, -1);
      v26 = v22;
      a3 = v35;
      MEMORY[0x242648490](v26, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    *(_BYTE *)(a1 + 33) = 0;
    result = sub_23DEB7118(a1);
  }
  else
  {
    v18(ObjectType, v16);
    swift_retain_n();
    v27 = sub_23DF14C68();
    v28 = sub_23DF1501C();
    if (os_log_type_enabled(v27, v28))
    {
      v36 = v3;
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v41 = v30;
      *(_DWORD *)v29 = 136315138;
      v40 = (uint64_t)a2;
      swift_retain();
      v31 = sub_23DF14E18();
      v35 = a3;
      v40 = sub_23DEC1518(v31, v32, &v41);
      sub_23DF15100();
      swift_release_n();
      a3 = v35;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DE8B000, v27, v28, "%s: Ignoring no-op resume.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242648490](v30, -1, -1);
      MEMORY[0x242648490](v29, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
    result = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  *a3 = result;
  return result;
}

_QWORD *sub_23DEB7118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double Current;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t *v31;
  os_unfair_lock_s *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  size_t v77;
  uint64_t isStackAllocationSafe;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t ObjectType;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  _QWORD *result;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[4];
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD v138[3];
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v115 = *(_QWORD *)(a1 + 16);
  if (!v115)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  if (*(_BYTE *)(a1 + 34) != 1)
  {
    swift_retain();
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      goto LABEL_4;
LABEL_8:
    v6 = 0;
    v105 = swift_retain();
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = v3;
  v6 = 0;
  v7 = sub_23DF00440(v4, v5);
  type metadata accessor for InputSignalAnchorSet();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  v9 = swift_retain();
  v105 = v8;
  if ((_s19HealthOrchestration20InputSignalAnchorSetC2eeoiySbAC_ACtFZ_0(v9, v8) & 1) != 0)
  {
    swift_release();
    swift_release();
    swift_release();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_release();
LABEL_10:
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v105;
  Current = CFAbsoluteTimeGetCurrent();
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 64);
  v93 = v11 + 64;
  v13 = 1 << *(_BYTE *)(v11 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v97 = v14 & v12;
  v94 = (unint64_t)(v13 + 63) >> 6;
  v95 = v11;
  swift_bridgeObjectRetain();
  v15 = 0;
  v106 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v97)
    {
      v16 = __clz(__rbit64(v97));
      v97 &= v97 - 1;
      v96 = v15;
      v17 = v16 | (v15 << 6);
    }
    else
    {
      v18 = __OFADD__(v15, 1);
      v19 = v15 + 1;
      if (v18)
        goto LABEL_77;
      if (v19 >= v94)
        goto LABEL_73;
      v20 = *(_QWORD *)(v93 + 8 * v19);
      if (!v20)
      {
        v21 = v19 + 1;
        if (v19 + 1 >= v94)
          goto LABEL_73;
        v20 = *(_QWORD *)(v93 + 8 * v21);
        if (!v20)
        {
          v21 = v19 + 2;
          if (v19 + 2 >= v94)
            goto LABEL_73;
          v20 = *(_QWORD *)(v93 + 8 * v21);
          if (!v20)
          {
            v21 = v19 + 3;
            if (v19 + 3 >= v94)
              goto LABEL_73;
            v20 = *(_QWORD *)(v93 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                v19 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_78;
                if (v19 >= v94)
                  break;
                v20 = *(_QWORD *)(v93 + 8 * v19);
                ++v21;
                if (v20)
                  goto LABEL_26;
              }
LABEL_73:
              swift_release();
              swift_release();
              swift_release();
              return v106;
            }
          }
        }
        v19 = v21;
      }
LABEL_26:
      v97 = (v20 - 1) & v20;
      v96 = v19;
      v17 = __clz(__rbit64(v20)) + (v19 << 6);
    }
    v22 = *(_QWORD *)(v95 + 56);
    v23 = (_OWORD *)(*(_QWORD *)(v95 + 48) + 48 * v17);
    v25 = v23[1];
    v24 = v23[2];
    v138[0] = *v23;
    v138[1] = v25;
    v138[2] = v24;
    v26 = *(_QWORD *)(v22 + 8 * v17);
    if (v26 >> 62)
      break;
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    sub_23DEAEBB0((uint64_t)v138);
    if (v27)
      goto LABEL_29;
LABEL_13:
    swift_bridgeObjectRelease();
    sub_23DEAEED8((uint64_t)v138);
    v15 = v96;
  }
  swift_bridgeObjectRetain_n();
  sub_23DEAEBB0((uint64_t)v138);
  v27 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (!v27)
    goto LABEL_13;
LABEL_29:
  v28 = 0;
  v116 = v26 & 0xC000000000000001;
  v100 = v26 & 0xFFFFFFFFFFFFFF8;
  v99 = v26 + 32;
  v103 = v27;
  v104 = v26;
  while (1)
  {
    while (1)
    {
      if (v116)
      {
        v123 = MEMORY[0x242647BF0](v28, v26);
        v18 = __OFADD__(v28, 1);
        v29 = v28 + 1;
        if (v18)
          goto LABEL_75;
      }
      else
      {
        if (v28 >= *(_QWORD *)(v100 + 16))
          goto LABEL_76;
        v123 = *(_QWORD *)(v99 + 8 * v28);
        swift_retain();
        v18 = __OFADD__(v28, 1);
        v29 = v28 + 1;
        if (v18)
        {
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
        }
      }
      v122 = v29;
      v30 = *(os_unfair_lock_s **)(v123 + 112);
      v31 = (uint64_t *)&v30[4];
      v32 = v30 + 16;
      os_unfair_lock_lock(v30 + 16);
      sub_23DF0B35C(v31, v115, &v126, Current);
      os_unfair_lock_unlock(v32);
      v33 = v126;
      v34 = v127;
      v35 = v131;
      v36 = v133;
      v37 = v134;
      v38 = v135;
      if (!(_QWORD)v126)
        break;
      if ((_QWORD)v126 == 1 || (_QWORD)v126 == 2)
        goto LABEL_42;
      v114 = v6;
      v119 = v130;
      v52 = *((_QWORD *)&v126 + 1);
      v121 = v132;
      v53 = v136;
      v54 = v137;
      v118 = v128;
      v113 = v129;
      v55 = swift_allocObject();
      v120 = v35;
      v56 = v37;
      v57 = v55;
      swift_weakInit();
      v58 = v36;
      v59 = (_QWORD *)swift_allocObject();
      v59[2] = v57;
      v59[3] = v33;
      v60 = v120;
      v59[4] = v52;
      v59[5] = v34;
      v61 = v113;
      v59[6] = v118;
      v59[7] = v61;
      v59[8] = v119;
      v59[9] = v60;
      v59[10] = v121;
      v59[11] = v58;
      v59[12] = v56;
      v59[13] = v38;
      v59[14] = v53;
      v59[15] = v54;
      v108 = v54;
      v109 = v53;
      v62 = v121;
      v107 = v38;
      v110 = v56;
      v112 = v52;
      v63 = v61;
      sub_23DECDB44(v33);
      swift_bridgeObjectRetain();
      swift_retain();
      v111 = v58;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v64 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v106 = sub_23DF06E20(0, v106[2] + 1, 1, v106);
      v66 = v106[2];
      v65 = v106[3];
      if (v66 >= v65 >> 1)
        v106 = sub_23DF06E20((_QWORD *)(v65 > 1), v66 + 1, 1, v106);
      v67 = v106;
      v106[2] = v66 + 1;
      v68 = &v67[13 * v66];
      v69 = v112;
      v68[4] = v33;
      v68[5] = v69;
      v117 = v34;
      v70 = v118;
      v68[6] = v64;
      v68[7] = v70;
      v71 = v119;
      v68[8] = v63;
      v68[9] = v71;
      v68[10] = v120;
      v68[11] = v62;
      v72 = v110;
      v68[12] = v111;
      v68[13] = v72;
      v68[14] = v107;
      v68[15] = sub_23DECDB38;
      v68[16] = v59;
      swift_release();
      sub_23DECDBC4(v33);
      v27 = v103;
      v28 = v122;
      v6 = v114;
      v26 = v104;
      if (v122 == v103)
        goto LABEL_13;
    }
    v108 = v137;
    v109 = v136;
    v110 = v134;
    v111 = v133;
    v112 = *((_QWORD *)&v126 + 1);
    v117 = v127;
    v119 = v130;
    v120 = v131;
    v114 = v6;
    v39 = *(_QWORD *)(v123 + 96);
    v40 = *(_QWORD *)(v39 + 56);
    v41 = *(_QWORD *)(v40 + 16);
    v121 = v132;
    v113 = v129;
    v118 = v128;
    v101 = v39;
    if (v41)
    {
      v107 = v135;
      v124 = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_23DEAA400(0, v41, 0);
      v98 = v40;
      v26 = v40 + 32;
      v42 = v124;
      do
      {
        sub_23DE902F4(v26, (uint64_t)&v126);
        v43 = v128;
        v44 = v129;
        __swift_project_boxed_opaque_existential_1(&v126, v128);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v44 + 16))(v125, v43, v44);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
        v45 = v125[0];
        v46 = v125[1];
        v47 = v125[2];
        v48 = v125[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA400(0, *(_QWORD *)(v42 + 16) + 1, 1);
          v42 = v124;
        }
        v50 = *(_QWORD *)(v42 + 16);
        v49 = *(_QWORD *)(v42 + 24);
        if (v50 >= v49 >> 1)
        {
          sub_23DEAA400(v49 > 1, v50 + 1, 1);
          v42 = v124;
        }
        *(_QWORD *)(v42 + 16) = v50 + 1;
        v51 = (_QWORD *)(v42 + 32 * v50);
        v51[4] = v45;
        v51[5] = v46;
        v51[6] = v47;
        v51[7] = v48;
        v26 += 40;
        --v41;
      }
      while (v41);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_retain();
      v42 = MEMORY[0x24BEE4AF8];
    }
    v73 = *(_QWORD *)(v105 + 16);
    v74 = *(_BYTE *)(v73 + 32);
    v75 = v74 & 0x3F;
    v76 = (unint64_t)((1 << v74) + 63) >> 6;
    v77 = 8 * v76;
    swift_bridgeObjectRetain_n();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v75 <= 0xD)
      break;
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
      break;
    v26 = swift_slowAlloc();
    bzero((void *)v26, v77);
    swift_bridgeObjectRetain();
    v6 = v114;
    v82 = sub_23DECDC40(v26, v76, v73, v42);
    if (v6)
      goto LABEL_80;
    v81 = v82;
    swift_bridgeObjectRelease();
    MEMORY[0x242648490](v26, -1, -1);
    v26 = v104;
    v27 = v103;
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    type metadata accessor for InputSignalAnchorSet();
    v83 = swift_allocObject();
    *(_QWORD *)(v83 + 16) = v81;
    v84 = *(_QWORD *)(v102 + 32);
    if (*(_QWORD *)(v84 + 16))
    {
      sub_23DEAEBB0((uint64_t)v138);
      v85 = sub_23DEA64E4((uint64_t)v138);
      if ((v86 & 1) != 0)
      {
        v87 = *(_QWORD *)(*(_QWORD *)(v84 + 56) + 16 * v85 + 8);
        swift_unknownObjectRetain();
        sub_23DEAEED8((uint64_t)v138);
        ObjectType = swift_getObjectType();
        v89 = *(_QWORD *)(v123 + 96);
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 64);
        swift_retain();
        v91 = ObjectType;
        v27 = v103;
        v90(v83, v89, v91, v87);
        swift_release();
        swift_unknownObjectRelease();
        sub_23DECDBC4(0);
        swift_release();
        v26 = v104;
LABEL_42:
        swift_release();
        goto LABEL_32;
      }
      sub_23DEAEED8((uint64_t)v138);
    }
    swift_release();
    swift_release();
    sub_23DECDBC4(0);
LABEL_32:
    v28 = v122;
    if (v122 == v27)
      goto LABEL_13;
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe, v79);
  bzero((char *)&v93 - ((v77 + 15) & 0x3FFFFFFFFFFFFFF0), v77);
  swift_bridgeObjectRetain();
  v6 = v114;
  v80 = sub_23DECDC40((uint64_t)&v93 - ((v77 + 15) & 0x3FFFFFFFFFFFFFF0), v76, v73, v42);
  if (!v6)
  {
    v81 = v80;
    swift_bridgeObjectRelease();
    v26 = v104;
    v27 = v103;
    goto LABEL_64;
  }
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  __break(1u);
LABEL_80:
  swift_bridgeObjectRelease_n();
  result = (_QWORD *)MEMORY[0x242648490](v26, -1, -1);
  __break(1u);
  return result;
}

Swift::Void __swiftcall Orchestrator.test_signalBarrier()()
{
  uint64_t v0;
  NSObject *v1;
  void *v2;
  _QWORD v3[6];

  v1 = *(NSObject **)(v0 + 56);
  v3[4] = nullsub_1;
  v3[5] = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 1107296256;
  v3[2] = sub_23DE99578;
  v3[3] = &block_descriptor_6;
  v2 = _Block_copy(v3);
  swift_release();
  dispatch_async_and_wait(v1, v2);
  _Block_release(v2);
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
    __break(1u);
}

uint64_t sub_23DEB7F7C(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  Swift::OpaquePointer v5;

  v1 = *(os_unfair_lock_s **)(a1 + 64);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  v4 = sub_23DEB7118(v2);
  os_unfair_lock_unlock(v3);
  v5._rawValue = v4;
  sub_23DEB6854(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEB7FD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_23DEB800C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_23DEB800C(uint64_t a1)
{
  double Current;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  v50 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v39 = v3 + 64;
  v40 = v3;
  v38 = v8;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v15)) + (v10 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * i);
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v18 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (v18)
      {
LABEL_25:
        v55 = v7;
        v19 = 4;
        v20 = v11;
        v54 = v18;
        v41 = v10;
        do
        {
          v22 = v19 - 4;
          if ((v17 & 0xC000000000000001) != 0)
          {
            result = MEMORY[0x242647BF0](v19 - 4, v17);
            v23 = result;
            v24 = v19 - 3;
            if (__OFADD__(v22, 1))
              goto LABEL_42;
          }
          else
          {
            v23 = *(_QWORD *)(v17 + 8 * v19);
            result = swift_retain();
            v24 = v19 - 3;
            if (__OFADD__(v22, 1))
            {
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
          }
          v25 = *(os_unfair_lock_s **)(v23 + 112);
          v26 = (uint64_t)&v25[4];
          v27 = v25 + 16;
          os_unfair_lock_lock(v25 + 16);
          sub_23DF0B9E4(v26, &v56, Current);
          os_unfair_lock_unlock(v27);
          v28 = v56;
          if ((unint64_t)v56 <= 2)
          {
            swift_release();
            v21 = v54;
            v7 = v55;
          }
          else
          {
            v44 = v24;
            v45 = v20;
            v42 = v57;
            v52 = v58;
            v53 = *((_QWORD *)&v56 + 1);
            v29 = v61;
            v49 = v60;
            v51 = v62;
            v48 = v63;
            v30 = v65;
            v46 = v59;
            v47 = v64;
            v31 = v66;
            v32 = v67;
            v33 = swift_allocObject();
            swift_weakInit();
            v34 = (_QWORD *)swift_allocObject();
            v34[2] = v33;
            v34[3] = v28;
            v34[4] = v53;
            v34[5] = v42;
            v34[6] = v52;
            v34[7] = v46;
            v34[8] = v49;
            v34[9] = v29;
            v34[10] = v51;
            v34[11] = v48;
            v34[12] = v47;
            v34[13] = v30;
            v34[14] = v31;
            v34[15] = v32;
            v43 = v30;
            sub_23DECDB44(v28);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v50 = sub_23DF06E20(0, v50[2] + 1, 1, v50);
            v36 = v50[2];
            v35 = v50[3];
            if (v36 >= v35 >> 1)
              v50 = sub_23DF06E20((_QWORD *)(v35 > 1), v36 + 1, 1, v50);
            v50[2] = v36 + 1;
            v37 = &v50[13 * v36];
            v37[4] = v28;
            v37[5] = v53;
            v37[6] = v42;
            v37[7] = v52;
            v37[8] = v46;
            v37[9] = v49;
            v37[10] = v29;
            v37[11] = v51;
            v37[12] = v48;
            v37[13] = v47;
            v37[14] = v43;
            v37[15] = sub_23DECF280;
            v37[16] = v34;
            swift_release();
            sub_23DECDBC4(v28);
            v24 = v44;
            v20 = v45;
            v21 = v54;
            v7 = v55;
            v10 = v41;
          }
          ++v19;
        }
        while (v24 != v21);
        v11 = v20;
        result = swift_bridgeObjectRelease();
        v4 = v39;
        v3 = v40;
        v8 = v38;
        if (v7)
          goto LABEL_4;
        goto LABEL_5;
      }
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v18)
        goto LABEL_25;
    }
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v10 >= v8)
      goto LABEL_41;
    v15 = *(_QWORD *)(v4 + 8 * v10);
    if (!v15)
      break;
LABEL_15:
    v7 = (v15 - 1) & v15;
  }
  v16 = v10 + 1;
  if (v10 + 1 >= v8)
    goto LABEL_41;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v10 + 2;
  if (v10 + 2 >= v8)
    goto LABEL_41;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v10 + 3;
  if (v10 + 3 >= v8)
  {
LABEL_41:
    swift_release();
    return (uint64_t)v50;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_14:
    v10 = v16;
    goto LABEL_15;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      goto LABEL_41;
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_15;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_23DEB84CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  char v5;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(result + 32))
  {
    v5 = 0;
  }
  else
  {
    v8 = result;
    v5 = 1;
    *(_BYTE *)(result + 32) = 1;
    v9 = *(_QWORD *)(result + 56);
    sub_23DE9A5CC(a2);
    result = sub_23DE9B2E8(v9);
    *(_QWORD *)(v8 + 56) = a2;
    *(_QWORD *)(v8 + 64) = a3;
  }
  *a4 = v5;
  return result;
}

uint64_t sub_23DEB8550(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  _QWORD *v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 *v93;
  char isUniquelyReferenced_nonNull_native;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t ObjectType;
  uint64_t *v110;
  NSObject *v111;
  os_log_type_t v112;
  int v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_unfair_lock_s *v123;
  uint64_t v124;
  os_unfair_lock_s *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int64_t v137;
  unint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(__int128 *__return_ptr, uint64_t, uint64_t);
  unint64_t v145;
  char v146;
  int64_t v147;
  char *v148;
  NSObject *v149;
  os_log_type_t v150;
  _BOOL4 v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  int64_t v171;
  int64_t v172;
  int v173;
  int v174;
  char v175;
  char v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int64_t v180;
  uint64_t v181;
  char v182;
  void (*v183)();
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t result;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  int64_t v196;
  int64_t v197;
  void (*v198)(uint64_t *, uint64_t);
  int64_t v199;
  void (*v200)(uint64_t, int64_t);
  uint64_t v201;
  int64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  __int128 v206;
  __int128 *v207;
  __int128 *v208;
  _OWORD *v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  _QWORD v226[4];
  uint64_t v227;

  v193 = sub_23DF14C80();
  v3 = *(_QWORD *)(v193 - 8);
  v5 = MEMORY[0x24BDAC7A8](v193, v4);
  v195 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v7);
  *(_QWORD *)&v192 = (char *)&v188 - v8;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_23DEB461C(v9);
  v191 = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v220 = MEMORY[0x24BEE4AF8];
  v194 = v1;
  v190 = v10 >> 62;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_23DF15298();
    v188 = v3;
    v189 = a1;
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v188 = v3;
    v189 = a1;
    if (v11)
    {
LABEL_3:
      if (v11 < 1)
      {
LABEL_168:
        __break(1u);
        goto LABEL_169;
      }
      v12 = 0;
      do
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          v13 = MEMORY[0x242647BF0](v12, v10);
        }
        else
        {
          v13 = *(_QWORD *)(v10 + 8 * v12 + 32);
          swift_retain();
        }
        ++v12;
        v14 = *(_QWORD *)(v13 + 56);
        swift_bridgeObjectRetain();
        swift_release();
        sub_23DEF3284(v14);
      }
      while (v11 != v12);
      swift_bridgeObjectRelease();
      v15 = v220;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x24BEE4AF8];
LABEL_12:
  v16 = sub_23DEBA554(v15);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 64);
  v197 = v16 + 64;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v196 = (unint64_t)(v18 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v21 = 0;
  v22 = (_QWORD *)MEMORY[0x24BEE4B00];
  v198 = (void (*)(uint64_t *, uint64_t))v10;
  v199 = v16;
  while (1)
  {
    v204 = v22;
    if (v20)
    {
      v201 = (v20 - 1) & v20;
      v202 = v21;
      v23 = __clz(__rbit64(v20)) | (v21 << 6);
    }
    else
    {
      v24 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_163;
      if (v24 >= v196)
      {
LABEL_63:
        swift_release();
        swift_bridgeObjectRelease();
        if (v190)
        {
          swift_bridgeObjectRetain();
          v72 = sub_23DF15298();
          swift_bridgeObjectRelease();
        }
        else
        {
          v72 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v32 = v194;
        v33 = (uint64_t *)v192;
        v73 = MEMORY[0x24BEE4AF8];
        if (v72)
        {
          *(_QWORD *)&v220 = MEMORY[0x24BEE4AF8];
          sub_23DF15220();
          if (v72 < 0)
            goto LABEL_170;
          v74 = 0;
          v75 = (unint64_t)v198;
          do
          {
            if ((v75 & 0xC000000000000001) != 0)
              MEMORY[0x242647BF0](v74, v75);
            else
              swift_retain();
            ++v74;
            swift_retain();
            swift_release();
            sub_23DF151FC();
            sub_23DF1522C();
            sub_23DF15238();
            sub_23DF15208();
          }
          while (v72 != v74);
          v73 = v220;
          v32 = v194;
          v33 = (uint64_t *)v192;
        }
        v76 = *(_QWORD *)(v73 + 16);
        *(_QWORD *)&v206 = v72;
        if (!v76)
          goto LABEL_102;
        v77 = *(_QWORD *)(v73 + 32);
        v208 = &v222;
        v209 = &v219;
        v207 = (__int128 *)&v216;
        swift_bridgeObjectRetain();
        swift_retain();
        v78 = 1;
        do
        {
          while (1)
          {
LABEL_76:
            if (v76 == v78)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_103;
            }
            v79 = v78 + 1;
            if (__OFADD__(v78, 1))
              goto LABEL_164;
            v80 = *(_QWORD *)(v73 + 8 * v78 + 32);
            if (v77)
              break;
            v77 = swift_retain();
            v78 = v79;
          }
          ++v78;
        }
        while (!v80);
        *((_QWORD *)&v206 + 1) = v79;
        v81 = v80;
        swift_retain_n();
        swift_retain();
        v82 = swift_bridgeObjectRetain();
        v205 = v81;
        v83 = v81;
        v84 = v191;
        v85 = sub_23DEB3E78(v82, v83);
        v191 = v84;
        swift_bridgeObjectRelease();
        v86 = (_QWORD *)sub_23DE93368(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v85 + 16))
          goto LABEL_97;
        v210 = *(_QWORD *)(v85 + 16);
        v201 = v76;
        v202 = v73;
        v203 = v77;
        v87 = v85 + 32;
        v200 = (void (*)(uint64_t, int64_t))v85;
        swift_bridgeObjectRetain();
        v88 = (uint64_t)v209;
        while (2)
        {
          sub_23DE955B4(v87, (uint64_t)&v220);
          v90 = v220;
          v91 = v221;
          v217 = v220;
          v218 = v221;
          v92 = (uint64_t)v208;
          sub_23DE902F4((uint64_t)v208, v88);
          v214 = v90;
          v215 = v91;
          v93 = v207;
          sub_23DE902F4(v92, (uint64_t)v207);
          sub_23DE902DC(v93, (uint64_t)&v223);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v211 = v86;
          v96 = sub_23DEA6458(v90, *((uint64_t *)&v90 + 1), v91, *((uint64_t *)&v91 + 1));
          v97 = v86[2];
          v98 = (v95 & 1) == 0;
          v99 = v97 + v98;
          if (__OFADD__(v97, v98))
            goto LABEL_165;
          v100 = v95;
          if (v86[3] >= v99)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v95 & 1) == 0)
                goto LABEL_91;
            }
            else
            {
              sub_23DECAEAC((void (*)(_QWORD))sub_23DE954A8, (void (*)(_BYTE *, uint64_t))sub_23DE902DC);
              v86 = (_QWORD *)v211;
              if ((v100 & 1) == 0)
                goto LABEL_91;
            }
          }
          else
          {
            sub_23DEC8178(v99, isUniquelyReferenced_nonNull_native, (void (*)(_QWORD))sub_23DE954A8, (void (*)(uint64_t, _BYTE *))sub_23DE902DC);
            v86 = (_QWORD *)v211;
            v101 = sub_23DEA6458(v90, *((uint64_t *)&v90 + 1), v91, *((uint64_t *)&v91 + 1));
            if ((v100 & 1) != (v102 & 1))
              goto LABEL_172;
            v96 = v101;
            if ((v100 & 1) == 0)
            {
LABEL_91:
              v86[(v96 >> 6) + 8] |= 1 << v96;
              v103 = (__int128 *)(v86[6] + 32 * v96);
              *v103 = v90;
              v103[1] = v91;
              sub_23DE902DC(&v223, v86[7] + 40 * v96);
              v104 = v86[2];
              v70 = __OFADD__(v104, 1);
              v105 = v104 + 1;
              if (v70)
                goto LABEL_166;
              v86[2] = v105;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
LABEL_83:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v88 = (uint64_t)v209;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
              sub_23DE9A9BC((uint64_t)&v220, (uint64_t (*)(_QWORD))sub_23DE955F8);
              v87 += 72;
              if (!--v210)
              {
                swift_bridgeObjectRelease();
                v16 = v199;
                v22 = v204;
                v76 = v201;
                v73 = v202;
LABEL_97:
                swift_bridgeObjectRelease();
                type metadata accessor for InputSignalAnchorSet();
                v106 = swift_allocObject();
                *(_QWORD *)(v106 + 16) = v86;
                swift_release_n();
                swift_release_n();
                v77 = v106;
                v78 = *((_QWORD *)&v206 + 1);
                v32 = v194;
                v33 = (uint64_t *)v192;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        v89 = v86[7] + 40 * v96;
        __swift_destroy_boxed_opaque_existential_1(v89);
        sub_23DE902DC(&v223, v89);
        goto LABEL_83;
      }
      v25 = *(_QWORD *)(v197 + 8 * v24);
      v26 = v21 + 1;
      if (!v25)
      {
        v26 = v21 + 2;
        if (v21 + 2 >= v196)
          goto LABEL_63;
        v25 = *(_QWORD *)(v197 + 8 * v26);
        if (!v25)
        {
          v26 = v21 + 3;
          if (v21 + 3 >= v196)
            goto LABEL_63;
          v25 = *(_QWORD *)(v197 + 8 * v26);
          if (!v25)
          {
            v26 = v21 + 4;
            if (v21 + 4 >= v196)
              goto LABEL_63;
            v25 = *(_QWORD *)(v197 + 8 * v26);
            if (!v25)
            {
              v26 = v21 + 5;
              if (v21 + 5 >= v196)
                goto LABEL_63;
              v25 = *(_QWORD *)(v197 + 8 * v26);
              if (!v25)
              {
                v27 = v21 + 6;
                if (v21 + 6 >= v196)
                  goto LABEL_63;
                v25 = *(_QWORD *)(v197 + 8 * v27);
                if (!v25)
                {
                  while (1)
                  {
                    v26 = v27 + 1;
                    if (__OFADD__(v27, 1))
                      break;
                    if (v26 >= v196)
                      goto LABEL_63;
                    v25 = *(_QWORD *)(v197 + 8 * v26);
                    ++v27;
                    if (v25)
                      goto LABEL_36;
                  }
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
                  goto LABEL_171;
                }
                v26 = v21 + 6;
              }
            }
          }
        }
      }
LABEL_36:
      v201 = (v25 - 1) & v25;
      v202 = v26;
      v23 = __clz(__rbit64(v25)) + (v26 << 6);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
    sub_23DE902F4(v28 + 16, (uint64_t)&v214);
    v29 = *((_QWORD *)&v215 + 1);
    v30 = v216;
    __swift_project_boxed_opaque_existential_1(&v214, *((uint64_t *)&v215 + 1));
    v22 = *(_QWORD **)(v30 + 40);
    swift_retain();
    ((void (*)(__int128 *__return_ptr, uint64_t, uint64_t))v22)(&v211, v29, v30);
    v206 = v211;
    v203 = *((_QWORD *)&v212 + 1);
    v205 = v212;
    sub_23DE902F4(v28 + 16, (uint64_t)&v217);
    v200 = (void (*)(uint64_t, int64_t))v28;
    v31 = *(_QWORD *)(v28 + 64);
    v32 = *(_QWORD **)(v31 + 16);
    if (v32)
      break;
    v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_50:
    sub_23DE95570();
    *(_QWORD *)&v223 = sub_23DF14F98();
    v47 = v41[2];
    if (v47)
    {
      v48 = v41 + 7;
      do
      {
        v49 = *(v48 - 3);
        v50 = *(v48 - 2);
        v51 = *(v48 - 1);
        v52 = *v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23DEE68AC((uint64_t *)&v220, v49, v50, v51, v52);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v48 += 4;
        --v47;
      }
      while (v47);
    }
    swift_bridgeObjectRelease();
    v53 = v223;
    sub_23DE902DC(&v217, (uint64_t)&v220);
    *((_QWORD *)&v222 + 1) = v53;
    v217 = v220;
    v218 = v221;
    v219 = v222;
    v22 = v204;
    v54 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v223 = v22;
    v55 = v203;
    v57 = sub_23DEA6458(v206, *((uint64_t *)&v206 + 1), v205, v203);
    v58 = v22[2];
    v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
    {
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    v61 = v56;
    if (v22[3] >= v60)
    {
      v10 = (unint64_t)v198;
      if ((v54 & 1) == 0)
      {
        sub_23DECAC9C();
        v22 = (_QWORD *)v223;
      }
      v16 = v199;
      v62 = *((_QWORD *)&v206 + 1);
      if ((v61 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      sub_23DEC7E1C(v60, v54);
      v22 = (_QWORD *)v223;
      v62 = *((_QWORD *)&v206 + 1);
      v63 = sub_23DEA6458(v206, *((uint64_t *)&v206 + 1), v205, v55);
      v10 = (unint64_t)v198;
      if ((v61 & 1) != (v64 & 1))
        goto LABEL_172;
      v57 = v63;
      v16 = v199;
      if ((v61 & 1) != 0)
      {
LABEL_15:
        sub_23DECEAF8(&v217, v22[7] + 48 * v57);
        goto LABEL_16;
      }
    }
    v22[(v57 >> 6) + 8] |= 1 << v57;
    v65 = (_QWORD *)(v22[6] + 32 * v57);
    *v65 = v206;
    v65[1] = v62;
    v65[2] = v205;
    v65[3] = v55;
    v66 = (__int128 *)(v22[7] + 48 * v57);
    v67 = v217;
    v68 = v219;
    v66[1] = v218;
    v66[2] = v68;
    *v66 = v67;
    v69 = v22[2];
    v70 = __OFADD__(v69, 1);
    v71 = v69 + 1;
    if (v70)
      goto LABEL_162;
    v22[2] = v71;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v214);
    swift_release();
    v20 = v201;
    v21 = v202;
  }
  v227 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v33 = &v227;
  sub_23DEAA400(0, (int64_t)v32, 0);
  v16 = sub_23DECC5BC(v31);
  v36 = v35 & 1;
  v207 = (__int128 *)v31;
  v208 = (__int128 *)(v31 + 56);
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(v31 + 32))
  {
    if (((*(_QWORD *)((char *)v208 + (((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      goto LABEL_100;
    if (*(_DWORD *)(v31 + 36) != (_DWORD)v34)
      goto LABEL_101;
    v209 = (_OWORD *)v34;
    LODWORD(v210) = v36;
    sub_23DEA8704(*(_QWORD *)(v31 + 48) + 40 * v16, (uint64_t)&v220);
    v223 = v220;
    v224 = v221;
    v37 = v222;
    v225 = v222;
    v38 = *((_QWORD *)&v221 + 1);
    __swift_project_boxed_opaque_existential_1(&v223, *((uint64_t *)&v221 + 1));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v37 + 16))(v226, v38, v37);
    sub_23DEA8740((uint64_t)&v223);
    v39 = v226[0];
    v33 = (uint64_t *)v226[1];
    v40 = v226[2];
    v22 = (_QWORD *)v226[3];
    v41 = (_QWORD *)v227;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23DEAA400(0, v41[2] + 1, 1);
      v41 = (_QWORD *)v227;
    }
    v43 = v41[2];
    v42 = v41[3];
    if (v43 >= v42 >> 1)
    {
      sub_23DEAA400(v42 > 1, v43 + 1, 1);
      v41 = (_QWORD *)v227;
    }
    v41[2] = v43 + 1;
    v44 = &v41[4 * v43];
    v44[4] = v39;
    v44[5] = v33;
    v44[6] = v40;
    v44[7] = v22;
    v31 = (uint64_t)v207;
    v45 = sub_23DECC65C(v16, (int)v209, v210 & 1, (uint64_t)v207);
    v16 = v45;
    v36 = v46 & 1;
    v32 = (_QWORD *)((char *)v32 - 1);
    if (!v32)
    {
      sub_23DECEB44(v45, v34, v36);
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  swift_bridgeObjectRelease();
  v77 = 0;
LABEL_103:
  v203 = v77;
  v108 = v32[2];
  v107 = v32[3];
  ObjectType = swift_getObjectType();
  v110 = v33;
  v200 = *(void (**)(uint64_t, int64_t))(v107 + 40);
  v201 = ObjectType;
  v200(ObjectType, v107);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v111 = sub_23DF14C68();
  v112 = sub_23DF1501C();
  v113 = v112;
  v114 = os_log_type_enabled(v111, v112);
  *((_QWORD *)&v206 + 1) = v108;
  v202 = v107;
  if (v114)
  {
    v115 = v107;
    v116 = swift_slowAlloc();
    v210 = swift_slowAlloc();
    *(_QWORD *)&v217 = v210;
    *(_DWORD *)v116 = 136315906;
    LODWORD(v209) = v113;
    *(_QWORD *)&v220 = v108;
    *((_QWORD *)&v220 + 1) = v115;
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_unknownObjectRetain();
    v117 = sub_23DF14E18();
    *(_QWORD *)&v220 = sub_23DEC1518(v117, v118, (uint64_t *)&v217);
    sub_23DF15100();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v116 + 12) = 2048;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v220 = v206;
    sub_23DF15100();
    swift_bridgeObjectRelease();
    *(_WORD *)(v116 + 22) = 2048;
    v119 = v22[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v220 = v119;
    sub_23DF15100();
    swift_bridgeObjectRelease();
    *(_WORD *)(v116 + 32) = 2048;
    v120 = *(_QWORD *)(v32[6] + 16);
    swift_release();
    *(_QWORD *)&v220 = v120;
    v16 = v199;
    sub_23DF15100();
    swift_release();
    _os_log_impl(&dword_23DE8B000, v111, (os_log_type_t)v209, "[%s]: Beginning registration of %ld criteria at %ld of %ld sources", (uint8_t *)v116, 0x2Au);
    v121 = MEMORY[0x24BEE4AD8];
    v122 = v210;
    swift_arrayDestroy();
    MEMORY[0x242648490](v122, -1, -1);
    MEMORY[0x242648490](v116, -1, -1);

    v198 = *(void (**)(uint64_t *, uint64_t))(v188 + 8);
    v198((uint64_t *)v192, v193);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    v198 = *(void (**)(uint64_t *, uint64_t))(v188 + 8);
    v198(v110, v193);
    v121 = MEMORY[0x24BEE4AD8];
  }
  v123 = (os_unfair_lock_s *)v32[8];
  v124 = (uint64_t)&v123[4];
  v125 = v123 + 22;
  os_unfair_lock_lock(v123 + 22);
  sub_23DEBB628(v124, v189);
  os_unfair_lock_unlock(v125);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v16 + 16))
  {
    swift_bridgeObjectRelease();
    os_unfair_lock_lock(v125);
    v183 = sub_23DEBB6A0(v124);
    v185 = v184;
    v186 = swift_allocObject();
    *(_QWORD *)(v186 + 16) = v183;
    *(_QWORD *)(v186 + 24) = v185;
    os_unfair_lock_unlock(v125);
    sub_23DEECAA0((uint64_t (*)(void))v183);
    swift_release();
    return swift_release();
  }
  v127 = 0;
  v128 = 1 << *(_BYTE *)(v16 + 32);
  v129 = -1;
  if (v128 < 64)
    v129 = ~(-1 << v128);
  v130 = v129 & *(_QWORD *)(v16 + 64);
  v196 = (unint64_t)(v128 + 63) >> 6;
  *(_QWORD *)&v126 = 136315394;
  v192 = v126;
  v191 = v121 + 8;
  v131 = v203;
  v132 = *((_QWORD *)&v206 + 1);
  while (1)
  {
    v133 = v195;
    if (v130)
    {
      v134 = __clz(__rbit64(v130));
      v135 = (v130 - 1) & v130;
      v136 = v134 | (v127 << 6);
      goto LABEL_129;
    }
    v137 = v127 + 1;
    if (__OFADD__(v127, 1))
      goto LABEL_167;
    if (v137 >= v196)
    {
LABEL_156:
      swift_release();
      return swift_release();
    }
    v138 = *(_QWORD *)(v197 + 8 * v137);
    ++v127;
    if (!v138)
    {
      v127 = v137 + 1;
      if (v137 + 1 >= v196)
        goto LABEL_156;
      v138 = *(_QWORD *)(v197 + 8 * v127);
      if (!v138)
      {
        v127 = v137 + 2;
        if (v137 + 2 >= v196)
          goto LABEL_156;
        v138 = *(_QWORD *)(v197 + 8 * v127);
        if (!v138)
        {
          v127 = v137 + 3;
          if (v137 + 3 >= v196)
            goto LABEL_156;
          v138 = *(_QWORD *)(v197 + 8 * v127);
          if (!v138)
            break;
        }
      }
    }
LABEL_128:
    v135 = (v138 - 1) & v138;
    v136 = __clz(__rbit64(v138)) + (v127 << 6);
LABEL_129:
    v207 = (__int128 *)v135;
    v208 = (__int128 *)v127;
    v140 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v136);
    if (v131)
    {
      v141 = *(_QWORD *)(v131 + 16);
      sub_23DE902F4(v140 + 16, (uint64_t)&v217);
      v142 = *((_QWORD *)&v218 + 1);
      v143 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
      v144 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v143 + 40);
      swift_retain();
      swift_bridgeObjectRetain();
      v144(&v214, v142, v143);
      if (*(_QWORD *)(v141 + 16)
        && (v145 = sub_23DEA6458(v214, *((uint64_t *)&v214 + 1), v215, *((uint64_t *)&v215 + 1)), (v146 & 1) != 0))
      {
        sub_23DE902F4(*(_QWORD *)(v141 + 56) + 40 * v145, (uint64_t)&v220);
      }
      else
      {
        *(_QWORD *)&v222 = 0;
        v220 = 0u;
        v221 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      v133 = v195;
    }
    else
    {
      *(_QWORD *)&v222 = 0;
      v220 = 0u;
      v221 = 0u;
      swift_retain();
    }
    v147 = v202;
    v200(v201, v202);
    swift_retain_n();
    swift_retain_n();
    v148 = v133;
    v149 = sub_23DF14C68();
    v150 = sub_23DF1501C();
    v151 = os_log_type_enabled(v149, v150);
    v209 = (_OWORD *)v140;
    if (v151)
    {
      v152 = swift_slowAlloc();
      v153 = (_QWORD *)v140;
      v154 = swift_slowAlloc();
      *(_QWORD *)&v214 = v154;
      *(_DWORD *)v152 = v192;
      *(_QWORD *)&v217 = v132;
      *((_QWORD *)&v217 + 1) = v147;
      sub_23DE95524(0, (unint64_t *)&qword_25432C268);
      swift_unknownObjectRetain();
      v155 = sub_23DF14E18();
      *(_QWORD *)(v152 + 4) = sub_23DEC1518(v155, v156, (uint64_t *)&v214);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v152 + 12) = 2080;
      v157 = v153[5];
      v158 = v153[6];
      v159 = __swift_project_boxed_opaque_existential_1(v153 + 2, v157);
      v160 = *(_QWORD *)(v157 - 8);
      MEMORY[0x24BDAC7A8](v159, v159);
      v162 = (char *)&v188 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v160 + 16))(v162);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v158 + 40))(&v217, v157, v158);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v162, v157);
      v163 = *((_QWORD *)&v218 + 1);
      if (*((_QWORD *)&v218 + 1))
      {
        v164 = v218;
      }
      else
      {
        v164 = v217;
        v163 = swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v152 + 14) = sub_23DEC1518(v164, v163, (uint64_t *)&v214);
      swift_bridgeObjectRelease();
      v165 = (uint64_t)v209;
      swift_release_n();
      _os_log_impl(&dword_23DE8B000, v149, v150, "[%s]: Beginning observation of %s", (uint8_t *)v152, 0x16u);
      swift_arrayDestroy();
      v166 = v154;
      v140 = v165;
      MEMORY[0x242648490](v166, -1, -1);
      MEMORY[0x242648490](v152, -1, -1);

      v198((uint64_t *)v195, v193);
      v132 = *((_QWORD *)&v206 + 1);
    }
    else
    {
      swift_release_n();
      swift_release_n();

      v198((uint64_t *)v148, v193);
    }
    sub_23DE902F4(v140 + 16, (uint64_t)&v217);
    v167 = *((_QWORD *)&v218 + 1);
    v168 = v219;
    v169 = __swift_project_boxed_opaque_existential_1(&v217, *((uint64_t *)&v218 + 1));
    swift_beginAccess();
    v170 = *(_QWORD *)(v140 + 56);
    v171 = *(_QWORD *)(v170 + 16);
    if (v171)
    {
      v204 = v169;
      v205 = v168;
      *(_QWORD *)&v206 = v167;
      v227 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23DEAA3CC(0, v171, 0);
      v172 = sub_23DECC5BC(v170);
      v174 = v173;
      v176 = v175 & 1;
      v210 = v170 + 56;
      while ((v172 & 0x8000000000000000) == 0 && v172 < 1 << *(_BYTE *)(v170 + 32))
      {
        if (((*(_QWORD *)(v210 + (((unint64_t)v172 >> 3) & 0xFFFFFFFFFFFFF8)) >> v172) & 1) == 0)
          goto LABEL_159;
        if (*(_DWORD *)(v170 + 36) != v174)
          goto LABEL_160;
        sub_23DEA8704(*(_QWORD *)(v170 + 48) + 40 * v172, (uint64_t)&v223);
        v211 = v223;
        v212 = v224;
        v213 = v225;
        sub_23DE902F4((uint64_t)&v211, (uint64_t)&v214);
        sub_23DEA8740((uint64_t)&v211);
        v177 = v227;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA3CC(0, *(_QWORD *)(v177 + 16) + 1, 1);
          v177 = v227;
        }
        v179 = *(_QWORD *)(v177 + 16);
        v178 = *(_QWORD *)(v177 + 24);
        if (v179 >= v178 >> 1)
        {
          sub_23DEAA3CC(v178 > 1, v179 + 1, 1);
          v177 = v227;
        }
        *(_QWORD *)(v177 + 16) = v179 + 1;
        sub_23DE902DC(&v214, v177 + 40 * v179 + 32);
        v180 = sub_23DECC65C(v172, v174, v176 & 1, v170);
        v172 = v180;
        v174 = v181;
        v176 = v182 & 1;
        if (!--v171)
        {
          sub_23DECEB44(v180, v181, v182 & 1);
          swift_bridgeObjectRelease();
          v132 = *((_QWORD *)&v206 + 1);
          v167 = v206;
          v168 = v205;
          goto LABEL_110;
        }
      }
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    v177 = MEMORY[0x24BEE4AF8];
LABEL_110:
    sub_23DEBB940((uint64_t)&v220, v177, v167, v168);
    swift_bridgeObjectRelease();
    swift_release();
    sub_23DECECC8((uint64_t)&v220, (unint64_t *)&qword_25432D450, qword_25432C070, (uint64_t)&protocol descriptor for InputSignalAnchor);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    v16 = v199;
    v131 = v203;
    v130 = (unint64_t)v207;
    v127 = (uint64_t)v208;
  }
  v139 = v137 + 4;
  if (v139 >= v196)
    goto LABEL_156;
  v138 = *(_QWORD *)(v197 + 8 * v139);
  if (v138)
  {
    v127 = v139;
    goto LABEL_128;
  }
  while (1)
  {
    v127 = v139 + 1;
    if (__OFADD__(v139, 1))
      break;
    if (v127 >= v196)
      goto LABEL_156;
    v138 = *(_QWORD *)(v197 + 8 * v127);
    ++v139;
    if (v138)
      goto LABEL_128;
  }
LABEL_171:
  __break(1u);
LABEL_172:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

void sub_23DEB9BB0(uint64_t *a1, os_unfair_lock_s *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34;

  v32 = sub_23DF14C80();
  v16 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32, v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&a2[4];
  a2 += 6;
  os_unfair_lock_lock(a2);
  sub_23DEB9E5C(v20, a3, a1, a4, a5, a6, a7, v33);
  os_unfair_lock_unlock(a2);
  v21 = v33[0];
  if (v33[0])
  {
    v22 = *(_QWORD *)(a4 + 16);
    v23 = *(_QWORD *)(a4 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v23 + 40))(ObjectType, v23);
    swift_retain_n();
    v25 = sub_23DF14C68();
    v26 = sub_23DF1501C();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v33[1] = v23;
      v34 = v28;
      *(_DWORD *)v27 = 136315394;
      v31 = v27 + 4;
      v33[0] = v22;
      sub_23DE95524(0, (unint64_t *)&qword_25432C268);
      swift_unknownObjectRetain();
      v29 = sub_23DF14E18();
      v33[0] = sub_23DEC1518(v29, v30, &v34);
      sub_23DF15100();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2048;
      *(double *)v33 = CFAbsoluteTimeGetCurrent() - a8;
      sub_23DF15100();
      _os_log_impl(&dword_23DE8B000, v25, v26, "[%s]: Work criteria ready after %fs.", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242648490](v28, -1, -1);
      MEMORY[0x242648490](v27, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v32);
    sub_23DEB8550(v21);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23DEB9E5C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t *v10;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v24;
  unint64_t v25;
  __int128 v27[3];
  uint64_t v28;

  v10 = a3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_12;
  v13 = *(_QWORD *)(((unint64_t)a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  sub_23DEAEBB0((uint64_t)a2);
  swift_unknownObjectRetain();
  if (v13)
  {
    while (1)
    {
      v28 = MEMORY[0x24BEE4AF8];
      result = sub_23DF15220();
      if (v13 < 0)
        break;
      v20 = a7;
      v21 = a8;
      v15 = 0;
      a7 = *(_QWORD *)(a4 + 16);
      v24 = *(_QWORD *)(a4 + 24);
      v25 = (unint64_t)v10 & 0xC000000000000001;
      a8 = v10;
      while (v13 != v15)
      {
        if (v25)
        {
          v16 = MEMORY[0x242647BF0](v15, v10);
        }
        else
        {
          v16 = v10[v15 + 4];
          swift_retain();
        }
        ++v15;
        v17 = a2[1];
        v27[0] = *a2;
        v27[1] = v17;
        v27[2] = a2[2];
        type metadata accessor for WorkCriteriaRecord();
        swift_allocObject();
        sub_23DEAEBB0((uint64_t)a2);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_retain();
        sub_23DF122AC(a7, v24, v27, a5, a6, v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release_n();
        sub_23DF151FC();
        sub_23DF1522C();
        sub_23DF15238();
        sub_23DF15208();
        v10 = a8;
        if (v13 == v15)
        {
          v18 = v28;
          swift_unknownObjectRelease();
          sub_23DEAEED8((uint64_t)a2);
          swift_release();
          a8 = v21;
          a7 = v20;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_retain();
      sub_23DEAEBB0((uint64_t)a2);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v13 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (!v13)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_unknownObjectRelease();
    sub_23DEAEED8((uint64_t)a2);
    swift_release();
    v18 = MEMORY[0x24BEE4AF8];
LABEL_14:
    sub_23DEAEBB0((uint64_t)a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v27[0] = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0x8000000000000000;
    sub_23DEEB200(v18, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)a1 = *(_QWORD *)&v27[0];
    swift_bridgeObjectRelease();
    sub_23DEAEED8((uint64_t)a2);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(a7 + 16))
      result = swift_bridgeObjectRetain();
    else
      result = 0;
    *a8 = result;
  }
  return result;
}

_BYTE *sub_23DEBA124@<X0>(_BYTE *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[48];
  __int128 v10[2];
  uint64_t v11;

  if (result[32] == 2)
  {
    v3 = 0;
  }
  else
  {
    result[32] = 2;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)(*(_QWORD *)result + 16);
    v3 = MEMORY[0x24BEE4AF8];
    if (v5)
    {
      v11 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23DEAA454(0, v5, 0);
      v6 = v4 + 32;
      v3 = v11;
      do
      {
        sub_23DECD914(v6, (uint64_t)v9);
        sub_23DE902F4((uint64_t)v9, (uint64_t)v10);
        sub_23DECD964((uint64_t)v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA454(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v11;
        }
        v8 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          sub_23DEAA454(v7 > 1, v8 + 1, 1);
          v3 = v11;
        }
        *(_QWORD *)(v3 + 16) = v8 + 1;
        sub_23DE902DC(v10, v3 + 40 * v8 + 32);
        v6 += 48;
        --v5;
      }
      while (v5);
      result = (_BYTE *)swift_bridgeObjectRelease();
    }
  }
  *a2 = v3;
  return result;
}

uint64_t sub_23DEBA274(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[40];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v5 = *(_QWORD *)(v2 + 48);
    v6 = result + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_23DE902F4(v6, (uint64_t)v30);
      v7 = v31;
      v8 = v32;
      __swift_project_boxed_opaque_existential_1(v30, v31);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v22, v7, v8);
      if (*(_QWORD *)(v5 + 16) && (v9 = sub_23DEA6458(v22, v23, v24, v25), (v10 & 1) != 0))
      {
        sub_23DE902F4(*(_QWORD *)(v5 + 56) + 40 * v9, (uint64_t)&v26);
      }
      else
      {
        v28 = 0;
        v26 = 0u;
        v27 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v27 + 1))
      {
        sub_23DE902DC(&v26, (uint64_t)v29);
        v11 = v31;
        v12 = v32;
        __swift_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v22, v11, v12);
        v13 = *a2;
        if (*(_QWORD *)(*a2 + 16) && (v14 = sub_23DEA6458(v22, v23, v24, v25), (v15 & 1) != 0))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
          swift_retain();
        }
        else
        {
          sub_23DE902F4((uint64_t)v29, (uint64_t)&v26);
          type metadata accessor for Orchestrator.InputSignalSetupRecord();
          swift_allocObject();
          v16 = sub_23DEB4C10((uint64_t)&v26, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8]);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DE902F4((uint64_t)v30, (uint64_t)&v22);
        swift_beginAccess();
        sub_23DEE61DC((uint64_t)&v26, (uint64_t)&v22);
        sub_23DEA8740((uint64_t)&v26);
        swift_endAccess();
        v17 = v31;
        v18 = v32;
        __swift_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v18 + 16))(&v26, v17, v18);
        v19 = v26;
        v20 = v27;
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v22 = *a2;
        *a2 = 0x8000000000000000;
        sub_23DEEAD90(v16, v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), isUniquelyReferenced_nonNull_native);
        *a2 = v22;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      }
      else
      {
        sub_23DECECC8((uint64_t)&v26, qword_25432D318, (unint64_t *)&qword_25432D308, (uint64_t)&protocol descriptor for InputSignal);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      v6 += 40;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23DEBA554(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t ObjectType;
  os_log_type_t v83;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _OWORD v115[2];
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v92 = sub_23DF14C80();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92, v4);
  v93 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = MEMORY[0x24BEE4B00];
  v94 = a1;
  v96 = v1;
  sub_23DEBA274(a1, &v123);
  v95 = 0;
  v97 = 0;
  v6 = v123;
LABEL_2:
  v7 = *(_QWORD *)(v6 + 64);
  v98 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & v7;
  v99 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  v101 = v6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v13 = (v10 - 1) & v10;
      v107 = v11;
      v14 = v12 | (v11 << 6);
    }
    else
    {
      v15 = __OFADD__(v11, 1);
      v16 = v11 + 1;
      if (v15)
      {
        __break(1u);
        goto LABEL_100;
      }
      if (v16 >= v99)
        goto LABEL_82;
      v17 = *(_QWORD *)(v98 + 8 * v16);
      if (!v17)
      {
        v18 = v16 + 1;
        if (v16 + 1 >= v99)
          goto LABEL_82;
        v17 = *(_QWORD *)(v98 + 8 * v18);
        if (!v17)
        {
          v18 = v16 + 2;
          if (v16 + 2 >= v99)
            goto LABEL_82;
          v17 = *(_QWORD *)(v98 + 8 * v18);
          if (!v17)
          {
            v18 = v16 + 3;
            if (v16 + 3 >= v99)
              goto LABEL_82;
            v17 = *(_QWORD *)(v98 + 8 * v18);
            if (!v17)
            {
              v18 = v16 + 4;
              if (v16 + 4 >= v99)
              {
LABEL_82:
                swift_release();
                v70 = v123;
                v71 = swift_bridgeObjectRetain();
                v72 = v97;
                v73 = sub_23DEB4460(v71);
                v97 = v72;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v112 = v94;
                swift_bridgeObjectRetain();
                sub_23DEF3284(v73);
                *(_QWORD *)&v120 = MEMORY[0x24BEE4B00];
                sub_23DEBA274(v112, (uint64_t *)&v120);
                swift_bridgeObjectRelease();
                v6 = v120;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v74 = sub_23DEA4104(v70, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v74 & 1) != 0)
                  goto LABEL_96;
                v75 = *(_QWORD *)(v70 + 16);
                v76 = *(_QWORD *)(v6 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v123 = v6;
                if (v75 == v76)
                {
                  v77 = v95 + 1;
                  v2 = v93;
                  v78 = v96;
                  if (__OFADD__(v95, 1))
                    goto LABEL_105;
                  v79 = *(_QWORD *)(v6 + 16);
                  swift_bridgeObjectRelease();
                  if (v79 < v77)
                  {
                    v80 = *(_QWORD *)(v78 + 16);
                    v81 = *(_QWORD *)(v78 + 24);
                    ObjectType = swift_getObjectType();
                    (*(void (**)(uint64_t, uint64_t))(v81 + 40))(ObjectType, v81);
                    swift_retain_n();
                    v10 = sub_23DF14C68();
                    v83 = sub_23DF15010();
                    if (os_log_type_enabled((os_log_t)v10, v83))
                    {
                      v85 = (uint8_t *)swift_slowAlloc();
                      v86 = swift_slowAlloc();
                      *(_QWORD *)&v117 = v86;
                      *(_DWORD *)v85 = 136315138;
                      *(_QWORD *)&v112 = v80;
                      *((_QWORD *)&v112 + 1) = v81;
                      sub_23DE95524(0, (unint64_t *)&qword_25432C268);
                      swift_unknownObjectRetain();
                      v87 = sub_23DF14E18();
                      *(_QWORD *)&v112 = sub_23DEC1518(v87, v88, (uint64_t *)&v117);
                      sub_23DF15100();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl(&dword_23DE8B000, (os_log_t)v10, v83, "[%s]: Failed to close input signal configurations; bailing with what we have.",
                        v85,
                        0xCu);
                      swift_arrayDestroy();
                      MEMORY[0x242648490](v86, -1, -1);
                      MEMORY[0x242648490](v85, -1, -1);

LABEL_101:
                      (*(void (**)(char *, uint64_t))(v91 + 8))(v2, v92);
                      return v123;
                    }
LABEL_100:

                    swift_release_n();
                    goto LABEL_101;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  v77 = 0;
                }
                v95 = v77;
                goto LABEL_2;
              }
              v17 = *(_QWORD *)(v98 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v16 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    break;
                  if (v16 >= v99)
                    goto LABEL_82;
                  v17 = *(_QWORD *)(v98 + 8 * v16);
                  ++v18;
                  if (v17)
                    goto LABEL_21;
                }
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
                goto LABEL_106;
              }
            }
          }
        }
        v16 = v18;
      }
LABEL_21:
      v13 = (v17 - 1) & v17;
      v107 = v16;
      v14 = __clz(__rbit64(v17)) + (v16 << 6);
    }
    v106 = v13;
    v19 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v14);
    sub_23DE902F4(v19 + 16, (uint64_t)&v112);
    v20 = *((_QWORD *)&v113 + 1);
    v21 = v114;
    v22 = __swift_project_boxed_opaque_existential_1(&v112, *((uint64_t *)&v113 + 1));
    swift_beginAccess();
    v23 = *(_QWORD *)(v19 + 56);
    v24 = *(_QWORD *)(v23 + 16);
    v105 = v19;
    if (v24)
    {
      v102 = v22;
      v103 = v21;
      v104 = v20;
      v122 = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      sub_23DEAA3CC(0, v24, 0);
      v25 = sub_23DECC5BC(v23);
      v27 = v26;
      v28 = 0;
      v30 = v29 & 1;
      v31 = v23 + 56;
      v32 = *(_BYTE *)(v23 + 32);
      v108 = v26;
      v100 = v23 + 88;
      v111 = v23;
      v110 = v23 + 56;
      v109 = v24;
      while (1)
      {
        if (v25 < 0 || v25 >= 1 << v32)
        {
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          swift_bridgeObjectRelease();
          return v123;
        }
        v35 = (unint64_t)v25 >> 6;
        if ((*(_QWORD *)(v31 + 8 * ((unint64_t)v25 >> 6)) & (1 << v25)) == 0)
          goto LABEL_90;
        if (*(_DWORD *)(v23 + 36) != v27)
          goto LABEL_91;
        sub_23DEA8704(*(_QWORD *)(v23 + 48) + 40 * v25, (uint64_t)&v117);
        v115[0] = v117;
        v115[1] = v118;
        v116 = v119;
        sub_23DE902F4((uint64_t)v115, (uint64_t)&v120);
        sub_23DEA8740((uint64_t)v115);
        v36 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA3CC(0, *(_QWORD *)(v36 + 16) + 1, 1);
          v36 = v122;
        }
        v38 = *(_QWORD *)(v36 + 16);
        v37 = *(_QWORD *)(v36 + 24);
        if (v38 >= v37 >> 1)
        {
          sub_23DEAA3CC(v37 > 1, v38 + 1, 1);
          v36 = v122;
        }
        *(_QWORD *)(v36 + 16) = v38 + 1;
        sub_23DE902DC(&v120, v36 + 40 * v38 + 32);
        if ((v30 & 1) != 0)
          goto LABEL_104;
        v23 = v111;
        v32 = *(_BYTE *)(v111 + 32);
        v33 = 1 << v32;
        if (v25 >= 1 << v32)
          goto LABEL_92;
        v31 = v110;
        v39 = *(_QWORD *)(v110 + 8 * v35);
        if ((v39 & (1 << v25)) == 0)
          goto LABEL_93;
        if (*(_DWORD *)(v111 + 36) != v27)
          goto LABEL_94;
        v40 = v39 & (-2 << (v25 & 0x3F));
        if (v40)
        {
          v33 = __clz(__rbit64(v40)) | v25 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v41 = v35 + 1;
          v42 = (v33 + 63) >> 6;
          if (v35 + 1 < v42)
          {
            v43 = *(_QWORD *)(v110 + 8 * v41);
            if (v43)
              goto LABEL_42;
            v41 = v35 + 2;
            if (v35 + 2 < v42)
            {
              v43 = *(_QWORD *)(v110 + 8 * v41);
              if (v43)
                goto LABEL_42;
              v41 = v35 + 3;
              if (v35 + 3 < v42)
              {
                v43 = *(_QWORD *)(v110 + 8 * v41);
                if (v43)
                {
LABEL_42:
                  v34 = v109;
                  v33 = __clz(__rbit64(v43)) + (v41 << 6);
                  goto LABEL_26;
                }
                while (v42 - 4 != v35)
                {
                  v43 = *(_QWORD *)(v100 + 8 * v35++);
                  if (v43)
                  {
                    v41 = v35 + 3;
                    goto LABEL_42;
                  }
                }
              }
            }
          }
        }
        v34 = v109;
LABEL_26:
        v30 = 0;
        ++v28;
        v27 = v108;
        v25 = v33;
        if (v28 == v34)
        {
          swift_bridgeObjectRelease();
          v20 = v104;
          v21 = v103;
          goto LABEL_52;
        }
      }
    }
    swift_retain();
    v36 = MEMORY[0x24BEE4AF8];
LABEL_52:
    v44 = sub_23DEBB1FC(v36, v20, v21);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v112);
    v45 = *(_QWORD *)(v44 + 16);
    if (v45)
    {
      *(_QWORD *)&v120 = MEMORY[0x24BEE4AF8];
      sub_23DEAA3B0(0, v45, 0);
      v2 = (char *)v120;
      v46 = v44 + 32;
      do
      {
        sub_23DE902F4(v46, (uint64_t)&v112);
        *(_QWORD *)&v120 = v2;
        v48 = *((_QWORD *)v2 + 2);
        v47 = *((_QWORD *)v2 + 3);
        if (v48 >= v47 >> 1)
        {
          sub_23DEAA3B0(v47 > 1, v48 + 1, 1);
          v2 = (char *)v120;
        }
        *((_QWORD *)v2 + 2) = v48 + 1;
        v49 = &v2[40 * v48];
        v50 = v112;
        v51 = v113;
        *((_QWORD *)v49 + 8) = v114;
        *((_OWORD *)v49 + 2) = v50;
        *((_OWORD *)v49 + 3) = v51;
        v46 += 40;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v2 = (char *)MEMORY[0x24BEE4AF8];
    }
    sub_23DECEC84();
    v52 = sub_23DF14F98();
    v53 = *((_QWORD *)v2 + 2);
    if (v53)
      break;
LABEL_6:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v105 + 64) = v52;
    swift_release();
    swift_bridgeObjectRelease();
    v6 = v101;
    v11 = v107;
    v10 = v106;
  }
  v54 = 0;
  while (1)
  {
    sub_23DEA8704((uint64_t)&v2[40 * v54 + 32], (uint64_t)&v120);
    sub_23DF15478();
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    swift_bridgeObjectRetain();
    sub_23DF14DC4();
    v55 = sub_23DF154A8();
    v56 = -1 << *(_BYTE *)(v52 + 32);
    v57 = v55 & ~v56;
    if (((*(_QWORD *)(v52 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) != 0)
    {
      v58 = ~v56;
      do
      {
        sub_23DEA8704(*(_QWORD *)(v52 + 48) + 40 * v57, (uint64_t)&v112);
        v59 = *((_QWORD *)&v113 + 1);
        __swift_project_boxed_opaque_existential_1(&v112, *((uint64_t *)&v113 + 1));
        LOBYTE(v59) = sub_23DEB4944((uint64_t)&v120, v59);
        sub_23DEA8740((uint64_t)&v112);
        if ((v59 & 1) != 0)
          goto LABEL_61;
        v57 = (v57 + 1) & v58;
      }
      while (((*(_QWORD *)(v52 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) != 0);
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23DEA8704((uint64_t)&v120, (uint64_t)&v117);
    *(_QWORD *)&v115[0] = v52;
    if (*(_QWORD *)(v52 + 24) <= *(_QWORD *)(v52 + 16))
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23DEE8E60();
      v52 = *(_QWORD *)&v115[0];
    }
LABEL_76:
    *(_QWORD *)(v52 + ((v57 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v57;
    v65 = *(_QWORD *)(v52 + 48) + 40 * v57;
    v66 = v117;
    v67 = v118;
    *(_QWORD *)(v65 + 32) = v119;
    *(_OWORD *)v65 = v66;
    *(_OWORD *)(v65 + 16) = v67;
    v68 = *(_QWORD *)(v52 + 16);
    v15 = __OFADD__(v68, 1);
    v69 = v68 + 1;
    if (v15)
      goto LABEL_95;
    *(_QWORD *)(v52 + 16) = v69;
LABEL_61:
    swift_bridgeObjectRelease();
    sub_23DEA8740((uint64_t)&v120);
    if (++v54 == v53)
      goto LABEL_6;
  }
  if (isUniquelyReferenced_nonNull_native)
    sub_23DEE6EE0();
  else
    sub_23DEE9998();
  v52 = *(_QWORD *)&v115[0];
  sub_23DF15478();
  __swift_project_boxed_opaque_existential_1(&v117, *((uint64_t *)&v118 + 1));
  sub_23DF14DC4();
  v61 = sub_23DF154A8();
  v62 = -1 << *(_BYTE *)(v52 + 32);
  v57 = v61 & ~v62;
  if (((*(_QWORD *)(v52 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
    goto LABEL_76;
  v63 = ~v62;
  while (1)
  {
    sub_23DEA8704(*(_QWORD *)(v52 + 48) + 40 * v57, (uint64_t)&v112);
    v64 = *((_QWORD *)&v113 + 1);
    __swift_project_boxed_opaque_existential_1(&v112, *((uint64_t *)&v113 + 1));
    LOBYTE(v64) = sub_23DEB4944((uint64_t)&v117, v64);
    sub_23DEA8740((uint64_t)&v112);
    if ((v64 & 1) != 0)
      break;
    v57 = (v57 + 1) & v63;
    if (((*(_QWORD *)(v52 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
      goto LABEL_76;
  }
LABEL_106:
  result = sub_23DF15418();
  __break(1u);
  return result;
}

uint64_t sub_23DEBB1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_23DECE884(0, &qword_25432D900, (unint64_t *)&qword_25432C280, (uint64_t)&protocol descriptor for InputSignalConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  swift_getAssociatedTypeWitness();
  sub_23DECEB68();
  sub_23DF14E9C();
  v4 = (*(uint64_t (**)(void))(a3 + 72))();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23DEBB2E0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  int64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19[2];
  uint64_t v20;

  v2 = *(_QWORD *)(*(_QWORD *)result + 64);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = a2;
    v20 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA3CC(0, v3, 0);
    result = sub_23DECC5BC(v2);
    v5 = result;
    v7 = v6;
    v9 = v8 & 1;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v2 + 32))
    {
      if (((*(_QWORD *)(v2 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_15;
      if (*(_DWORD *)(v2 + 36) != v7)
        goto LABEL_16;
      sub_23DEA8704(*(_QWORD *)(v2 + 48) + 40 * v5, (uint64_t)v17);
      v15[0] = v17[0];
      v15[1] = v17[1];
      v16 = v18;
      sub_23DE902F4((uint64_t)v15, (uint64_t)v19);
      sub_23DEA8740((uint64_t)v15);
      v4 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DEAA3CC(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v20;
      }
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_23DEAA3CC(v10 > 1, v11 + 1, 1);
        v4 = v20;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      sub_23DE902DC(v19, v4 + 40 * v11 + 32);
      result = sub_23DECC65C(v5, v7, v9 & 1, v2);
      v5 = result;
      v7 = v12;
      v9 = v13 & 1;
      if (!--v3)
      {
        sub_23DECEB44(result, v12, v13 & 1);
        result = swift_bridgeObjectRelease();
        a2 = v14;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_13:
    *a2 = v4;
  }
  return result;
}

uint64_t *sub_23DEBB4B4@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  if ((unint64_t)*result >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_23DF15298();
    result = (uint64_t *)swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
  {
LABEL_12:
    *a2 = v5;
    return result;
  }
  v8 = MEMORY[0x24BEE4AF8];
  result = (uint64_t *)sub_23DF15220();
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      result = 0;
      do
      {
        v6 = (uint64_t *)((char *)result + 1);
        MEMORY[0x242647BF0]();
        swift_retain();
        swift_unknownObjectRelease();
        sub_23DF151FC();
        sub_23DF1522C();
        sub_23DF15238();
        sub_23DF15208();
        result = v6;
      }
      while ((uint64_t *)v4 != v6);
    }
    else
    {
      v7 = v3 + 32;
      do
      {
        v7 += 8;
        swift_retain();
        sub_23DF151FC();
        sub_23DF1522C();
        sub_23DF15238();
        result = (uint64_t *)sub_23DF15208();
        --v4;
      }
      while (v4);
    }
    v5 = v8;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_23DEBB628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2;
  v4 = swift_bridgeObjectRetain();
  v5 = sub_23DF0F8BC(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v5;
  *(CFAbsoluteTime *)(a1 + 48) = CFAbsoluteTimeGetCurrent();
}

void (*sub_23DEBB6A0(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double Current;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t ObjectType;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = sub_23DF14C80();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Current = CFAbsoluteTimeGetCurrent();
  v10 = *(double *)(a1 + 48);
  v11 = *(double *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(ObjectType, v12);
  swift_retain_n();
  v14 = sub_23DF14C68();
  v15 = sub_23DF1501C();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v28 = v5;
    v17 = v16;
    v18 = swift_slowAlloc();
    v30 = v12;
    v31 = v18;
    *(_DWORD *)v17 = 136315394;
    v27 = v4;
    v29 = v11;
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_unknownObjectRetain();
    v19 = sub_23DF14E18();
    v29 = COERCE_DOUBLE(sub_23DEC1518(v19, v20, &v31));
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2048;
    v29 = Current - v10;
    sub_23DF15100();
    _os_log_impl(&dword_23DE8B000, v14, v15, "[%s]: Initial registration complete after %fs.", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242648490](v18, -1, -1);
    MEMORY[0x242648490](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  *(_BYTE *)(a1 + 34) = 1;
  v21 = sub_23DEB7118(a1);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v2;
  v24[3] = v21;
  v24[4] = v22;
  v24[5] = v23;
  swift_retain();
  return sub_23DECDB04;
}

uint64_t sub_23DEBB940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[7];

  v27 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = sub_23DF150F4();
  v8 = *(_QWORD *)(v26 - 8);
  v10 = MEMORY[0x24BDAC7A8](v26, v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v14, v18);
  v25 = (char *)&v25 - v19;
  v32[0] = a2;
  v28 = a3;
  v29 = a4;
  sub_23DECE884(0, &qword_25432D900, (unint64_t *)&qword_25432C280, (uint64_t)&protocol descriptor for InputSignalConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  swift_getAssociatedTypeWitness();
  sub_23DECEB68();
  v20 = sub_23DF14E9C();
  sub_23DE901AC(v27, (uint64_t)&v30);
  if (v31)
  {
    v27 = a3;
    sub_23DE902DC(&v30, (uint64_t)v32);
    sub_23DE902F4((uint64_t)v32, (uint64_t)&v30);
    sub_23DE95524(0, qword_25432C070);
    v21 = swift_dynamicCast();
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if (v21)
    {
      v22(v16, 0, 1, AssociatedTypeWitness);
      v23 = v25;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v25, v16, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v12, v23, AssociatedTypeWitness);
      v22(v12, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 56))(v12, v20, v27, a4);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v26);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v23, AssociatedTypeWitness);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    }
    else
    {
      v22(v16, 1, 1, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v26);
    }
  }
  else
  {
    sub_23DECECC8((uint64_t)&v30, (unint64_t *)&qword_25432D450, qword_25432C070, (uint64_t)&protocol descriptor for InputSignalAnchor);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 56))(v12, v20, a3, a4);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v26);
  }
}

void sub_23DEBBC64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::OpaquePointer v21;
  uint64_t v22;
  void *v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v8 = sub_23DF14D10();
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DF14D34();
  v28 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23DF14D1C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 64) + 88));
  v21._rawValue = a2;
  sub_23DEB6854(v21);
  if (a3)
  {
    sub_23DE95920();
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, *MEMORY[0x24BEE5490], v16);
    swift_retain();
    v27 = sub_23DF15070();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a3;
    *(_QWORD *)(v22 + 24) = a4;
    aBlock[4] = sub_23DE9A540;
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23DE9F35C;
    aBlock[3] = &block_descriptor_22;
    v23 = _Block_copy(aBlock);
    swift_retain();
    sub_23DF14D28();
    v31 = MEMORY[0x24BEE4AF8];
    v24 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
    sub_23DE8F998(&qword_25432C290, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    sub_23DE95234(0, (unint64_t *)&unk_25432D910, v24, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DEC0E44((unint64_t *)&unk_25432D920, (unint64_t *)&unk_25432D910, v24);
    sub_23DF15148();
    v25 = (void *)v27;
    MEMORY[0x242647AA0](0, v15, v11, v23);
    _Block_release(v23);

    sub_23DE9B2E8(a3);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
    swift_release();
  }
}

uint64_t sub_23DEBBF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  os_unfair_lock_s *v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = *(os_unfair_lock_s **)(result + 64);
    swift_retain();
    os_unfair_lock_lock(v8 + 22);
    (*(void (**)(uint64_t, uint64_t))(a4 + 88))(a1, a2);
    os_unfair_lock_unlock(v8 + 22);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_23DEBBFD0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v74;
  BOOL v75;
  uint64_t v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  os_log_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  os_log_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  os_log_t v100;
  void (*v101)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v102;
  char *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  os_log_t v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v5 = v4;
  v104 = a4;
  v112 = a1;
  v111 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1, a2);
  v103 = (char *)v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)v94 - v11;
  v110 = sub_23DF14C80();
  v109 = *(_QWORD *)(v110 - 8);
  v14 = MEMORY[0x24BDAC7A8](v110, v13);
  v108 = (char *)v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v102 = (char *)v94 - v17;
  v19 = a2[1];
  result = a2[2];
  if (v19)
  {
    if (!result)
    {
      v21 = sub_23DE93368(MEMORY[0x24BEE4AF8]);
      type metadata accessor for InputSignalAnchorSet();
      *(_QWORD *)(swift_allocObject() + 16) = v21;
    }
    v98 = v12;
    v22 = *(_QWORD *)(v19 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = swift_bridgeObjectRetain();
    v24 = sub_23DF00440(v23, v22);
    v116 = 0;
    type metadata accessor for InputSignalAnchorSet();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v24;
    swift_release();
LABEL_8:
    v101 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v104 + 48);
    ((void (*)(_QWORD *__return_ptr, uint64_t))v101)(v126, a3);
    v25 = v127;
    v26 = *a2;
    v120 = *(_QWORD *)(*a2 + 16);
    if (!v120)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    v118 = v126[1];
    v107 = a3;
    v117 = v126[0];
    v119 = v26 + 32;
    v113 = &v122;
    result = swift_bridgeObjectRetain();
    v27 = 0;
    *(_QWORD *)&v28 = 136315650;
    v95 = v28;
    v94[1] = MEMORY[0x24BEE4AD8] + 8;
    *(_QWORD *)&v28 = 136315906;
    v96 = v28;
    v97 = v4;
    v106 = v20;
    v115 = v25;
    v114 = v26;
    while (1)
    {
      if (v27 >= *(_QWORD *)(v26 + 16))
      {
        __break(1u);
        return result;
      }
      sub_23DECD914(v119 + 48 * v27, (uint64_t)&v129);
      v29 = v132;
      if (*(_QWORD *)(v132 + 16))
        break;
LABEL_13:
      ++v27;
      result = sub_23DECD964((uint64_t)&v129);
      if (v27 == v120)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    v30 = v5;
    sub_23DF15478();
    swift_bridgeObjectRetain();
    v31 = v118;
    swift_bridgeObjectRetain();
    v32 = v117;
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    v33 = sub_23DF154A8();
    v34 = -1 << *(_BYTE *)(v29 + 32);
    v35 = v33 & ~v34;
    v36 = v29 + 56;
    if (((*(_QWORD *)(v29 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
    {
      v37 = *(_QWORD *)(v29 + 48);
      v38 = (_QWORD *)(v37 + 32 * v35);
      v39 = *v38 == v32 && v38[1] == v31;
      if (v39 || (sub_23DF15400() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v5 = v30;
LABEL_23:
        swift_bridgeObjectRetain();
        swift_retain();
        v40 = v20;
        v41 = v116;
        v42 = sub_23DECE6C0(v29, v40);
        v116 = v41;
        swift_release();
        if (!*(_QWORD *)(v42 + 16))
        {
          swift_release();
          v57 = *(_QWORD *)(v5 + 16);
          v56 = *(_QWORD *)(v5 + 24);
          ObjectType = swift_getObjectType();
          v59 = v102;
          (*(void (**)(uint64_t, uint64_t))(v56 + 40))(ObjectType, v56);
          v60 = v111;
          v61 = v98;
          v62 = v107;
          (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v98, v112, v107);
          sub_23DECD914((uint64_t)&v129, (uint64_t)v126);
          swift_retain_n();
          v63 = sub_23DF14C68();
          v64 = sub_23DF1501C();
          if (os_log_type_enabled(v63, (os_log_type_t)v64))
          {
            v105 = v64;
            v65 = swift_slowAlloc();
            v100 = (os_log_t)swift_slowAlloc();
            v125 = v100;
            *(_DWORD *)v65 = v95;
            v121 = v57;
            v122 = v56;
            sub_23DE95524(0, (unint64_t *)&qword_25432C268);
            swift_unknownObjectRetain();
            v66 = sub_23DF14E18();
            v121 = sub_23DEC1518(v66, v67, (uint64_t *)&v125);
            sub_23DF15100();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v65 + 12) = 2080;
            v101(&v121, v62, v104);
            (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
            v68 = v124;
            if (v124)
            {
              v69 = v123;
            }
            else
            {
              v69 = v121;
              v68 = swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            v121 = sub_23DEC1518(v69, v68, (uint64_t *)&v125);
            sub_23DF15100();
            swift_bridgeObjectRelease();
            *(_WORD *)(v65 + 22) = 2080;
            v87 = v127;
            v88 = v128;
            __swift_project_boxed_opaque_existential_1(v126, v127);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v88 + 40))(&v121, v87, v88);
            v89 = v124;
            if (v124)
            {
              v90 = v123;
            }
            else
            {
              v90 = v121;
              v89 = swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            v121 = sub_23DEC1518(v90, v89, (uint64_t *)&v125);
            sub_23DF15100();
            swift_bridgeObjectRelease();
            sub_23DECD964((uint64_t)v126);
            _os_log_impl(&dword_23DE8B000, v63, (os_log_type_t)v105, "[%s]: Updating dependent input signal %s -> %s.", (uint8_t *)v65, 0x20u);
            v91 = v100;
            swift_arrayDestroy();
            MEMORY[0x242648490](v91, -1, -1);
            MEMORY[0x242648490](v65, -1, -1);

            (*(void (**)(char *, uint64_t))(v109 + 8))(v102, v110);
            v76 = v106;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
            swift_release_n();
            sub_23DECD964((uint64_t)v126);

            (*(void (**)(char *, uint64_t))(v109 + 8))(v59, v110);
            v76 = v106;
          }
          v26 = v114;
          v92 = v130;
          v93 = v131;
          __swift_project_boxed_opaque_existential_1(&v129, v130);
          v20 = v76;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 80))(v76, v92, v93);
          goto LABEL_13;
        }
        v44 = *(_QWORD *)(v5 + 16);
        v43 = *(_QWORD *)(v5 + 24);
        v45 = swift_getObjectType();
        v46 = v108;
        (*(void (**)(uint64_t, uint64_t))(v43 + 40))(v45, v43);
        v47 = v111;
        v48 = v103;
        v49 = v107;
        (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v103, v112, v107);
        sub_23DECD914((uint64_t)&v129, (uint64_t)v126);
        swift_retain_n();
        swift_retain();
        v50 = sub_23DF14C68();
        v105 = sub_23DF1501C();
        if (os_log_type_enabled(v50, (os_log_type_t)v105))
        {
          v100 = v50;
          v51 = swift_slowAlloc();
          v99 = swift_slowAlloc();
          v125 = (os_log_t)v99;
          *(_DWORD *)v51 = v96;
          v121 = v44;
          v122 = v43;
          sub_23DE95524(0, (unint64_t *)&qword_25432C268);
          swift_unknownObjectRetain();
          v52 = sub_23DF14E18();
          v121 = sub_23DEC1518(v52, v53, (uint64_t *)&v125);
          sub_23DF15100();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v51 + 12) = 2080;
          v101(&v121, v49, v104);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
          v54 = v124;
          if (v124)
          {
            v55 = v123;
          }
          else
          {
            v55 = v121;
            v54 = swift_bridgeObjectRetain();
          }
          v77 = v105;
          v78 = v99;
          swift_bridgeObjectRelease();
          v121 = sub_23DEC1518(v55, v54, (uint64_t *)&v125);
          sub_23DF15100();
          swift_bridgeObjectRelease();
          *(_WORD *)(v51 + 22) = 2080;
          v79 = v127;
          v80 = v128;
          __swift_project_boxed_opaque_existential_1(v126, v127);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v80 + 40))(&v121, v79, v80);
          v81 = v124;
          if (v124)
          {
            v82 = v123;
          }
          else
          {
            v82 = v121;
            v81 = swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          v121 = sub_23DEC1518(v82, v81, (uint64_t *)&v125);
          sub_23DF15100();
          swift_bridgeObjectRelease();
          sub_23DECD964((uint64_t)v126);
          *(_WORD *)(v51 + 32) = 2080;
          sub_23DE95570();
          swift_retain();
          v83 = sub_23DF14F8C();
          v85 = v84;
          swift_release();
          v121 = sub_23DEC1518(v83, v85, (uint64_t *)&v125);
          sub_23DF15100();
          swift_release_n();
          swift_bridgeObjectRelease();
          v86 = v100;
          _os_log_impl(&dword_23DE8B000, v100, v77, "[%s]: Queuing update for dependent input signal %s -> %s; awaiting anchors from %s",
            (uint8_t *)v51,
            0x2Au);
          swift_arrayDestroy();
          MEMORY[0x242648490](v78, -1, -1);
          MEMORY[0x242648490](v51, -1, -1);

          (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v110);
          v5 = v97;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
          swift_release_n();
          sub_23DECD964((uint64_t)v126);

          swift_release_n();
          (*(void (**)(char *, uint64_t))(v109 + 8))(v46, v110);
        }
        v20 = v106;
        goto LABEL_12;
      }
      v70 = ~v34;
      v71 = (v35 + 1) & v70;
      if (((*(_QWORD *)(v36 + ((v71 >> 3) & 0xFFFFFFFFFFFFF8)) >> v71) & 1) != 0)
      {
        v72 = (_QWORD *)(v37 + 32 * v71);
        if (*v72 == v117 && v72[1] == v118)
        {
          v5 = v30;
        }
        else
        {
          v5 = v30;
          if ((sub_23DF15400() & 1) == 0)
          {
            do
            {
              v71 = (v71 + 1) & v70;
              if (((*(_QWORD *)(v36 + ((v71 >> 3) & 0xFFFFFFFFFFFFF8)) >> v71) & 1) == 0)
                goto LABEL_44;
              v74 = (_QWORD *)(v37 + 32 * v71);
              v75 = *v74 == v117 && v74[1] == v118;
            }
            while (!v75 && (sub_23DF15400() & 1) == 0);
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    v5 = v30;
LABEL_44:
    swift_bridgeObjectRelease();
LABEL_12:
    v26 = v114;
    goto LABEL_13;
  }
  if (result)
  {
    v116 = 0;
    v98 = v12;
    v20 = result;
    swift_retain();
    goto LABEL_8;
  }
  return result;
}

void sub_23DEBCC9C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);

  v9 = sub_23DF14D64();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v4 + 56);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x24BEE5610], v9);
  v15 = v14;
  LOBYTE(v14) = sub_23DF14D7C();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    v16 = *(os_unfair_lock_s **)(v4 + 64);
    v17 = (uint64_t)&v16[4];
    v18 = v16 + 22;
    os_unfair_lock_lock(v16 + 22);
    sub_23DEBCDE8(v17, a2, a1, (char *)v4, a3, a4, &v22);
    os_unfair_lock_unlock(v18);
    v19 = v22;
    if (v22)
    {
      v20 = swift_retain();
      v19(v20);
      sub_23DE9B2E8((uint64_t)v19);
      sub_23DE9B2E8((uint64_t)v19);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23DEBCDE8@<X0>(uint64_t a1@<X0>, NSObject *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  int v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ObjectType;
  char *v58;
  char *v59;
  NSObject *v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  NSObject *v73;
  void (*v74)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  NSObject *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  NSObject *v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  NSObject *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t result;
  int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  os_log_t v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  NSObject *v152;
  void (*v153)();
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void (*v158)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  NSObject *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  os_log_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v9 = a5;
  v176 = a3;
  v181 = a2;
  v171 = a7;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1, a2);
  v163 = (char *)&v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v169 = ((char *)&v157 - v17);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v161 = (char *)&v157 - v20;
  MEMORY[0x24BDAC7A8](v19, v21);
  v162 = (char *)&v157 - v22;
  v174 = sub_23DF14C80();
  v172 = *(_QWORD *)(v174 - 8);
  v24 = MEMORY[0x24BDAC7A8](v174, v23);
  v167 = (char *)&v157 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v168 = (char *)&v157 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v164 = (char *)&v157 - v31;
  MEMORY[0x24BDAC7A8](v30, v32);
  v165 = (char *)&v157 - v33;
  v179 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = sub_23DF150F4();
  v180 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x24BDAC7A8](v35, v36);
  v39 = (char *)&v157 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37, v40);
  v42 = (char *)&v157 - v41;
  v177 = (char *)a1;
  v43 = *(uint64_t **)(a1 + 16);
  v170 = v7;
  if (v43)
  {
    v44 = a4;
    v45 = v43;
  }
  else
  {
    v46 = sub_23DE93368(MEMORY[0x24BEE4AF8]);
    v166 = v12;
    v44 = a4;
    v47 = v46;
    type metadata accessor for InputSignalAnchorSet();
    v45 = (uint64_t *)swift_allocObject();
    v45[2] = v47;
    v12 = v166;
  }
  swift_retain();
  v178 = v45;
  InputSignalAnchorSet.anchor<A>(for:)(v9, v179, (uint64_t)v42);
  v48 = v180;
  v49 = *(void (**)(char *, char *, uint64_t))(v180 + 16);
  v173 = v42;
  v49(v39, v42, v35);
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v39, 1, AssociatedTypeWitness);
  v175 = v35;
  if (v51 == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v35);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v53 = v176;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v53 = v176;
    v54 = InputSignalAnchor.isEqual(to:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, AssociatedTypeWitness);
    if ((v54 & 1) != 0)
    {
      v55 = *((_QWORD *)v44 + 2);
      v56 = *((_QWORD *)v44 + 3);
      ObjectType = swift_getObjectType();
      v58 = v165;
      (*(void (**)(uint64_t, uint64_t))(v56 + 40))(ObjectType, v56);
      v59 = v162;
      (*(void (**)(char *, os_log_t, uint64_t))(v12 + 16))(v162, v181, v9);
      swift_retain_n();
      v60 = sub_23DF14C68();
      v61 = sub_23DF1501C();
      if (os_log_type_enabled(v60, (os_log_type_t)v61))
      {
        LODWORD(v181) = v61;
        v62 = v59;
        v63 = swift_slowAlloc();
        v177 = (char *)swift_slowAlloc();
        v187 = v177;
        *(_DWORD *)v63 = 136315394;
        v182 = v55;
        v183 = v56;
        sub_23DE95524(0, (unint64_t *)&qword_25432C268);
        swift_unknownObjectRetain();
        v64 = sub_23DF14E18();
        v182 = sub_23DEC1518(v64, v65, (uint64_t *)&v187);
        sub_23DF15100();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v63 + 12) = 2080;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(v179 + 40))(&v182, v9);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v62, v9);
        v66 = v185;
        if (v185)
        {
          v67 = v184;
        }
        else
        {
          v67 = v182;
          v66 = swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        v182 = sub_23DEC1518(v67, v66, (uint64_t *)&v187);
        sub_23DF15100();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23DE8B000, v60, (os_log_type_t)v181, "[%s]: Received spurious update from %s (identical anchors). Ignoring.", (uint8_t *)v63, 0x16u);
        v149 = (uint64_t)v177;
        swift_arrayDestroy();
        MEMORY[0x242648490](v149, -1, -1);
        MEMORY[0x242648490](v63, -1, -1);

        swift_release();
        (*(void (**)(char *, uint64_t))(v172 + 8))(v165, v174);
        result = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v173, v175);
        goto LABEL_59;
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v59, v9);
      swift_release_n();

      goto LABEL_55;
    }
  }
  v68 = sub_23DF01F0C(v53, v178, AssociatedTypeWitness, AssociatedConformanceWitness);
  v69 = (uint64_t)v177;
  swift_retain();
  swift_release();
  v176 = v68;
  *(_QWORD *)(v69 + 16) = v68;
  v70 = v53;
  v71 = v44;
  v72 = v69;
  sub_23DEBBFD0(v70, (_QWORD *)v69, AssociatedTypeWitness, AssociatedConformanceWitness);
  v73 = v169;
  if ((*(_BYTE *)(v69 + 34) & 1) == 0)
  {
    v74 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v179 + 40);
    v162 = (char *)v9;
    v158 = v74;
    ((void (*)(char **__return_ptr, uint64_t))v74)(&v187, v9);
    sub_23DEE68AC(&v182, (uint64_t)v187, v188, v189, v190);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75 = *(_QWORD *)(v69 + 40);
    v76 = *(_QWORD *)v69;
    v77 = *(_QWORD *)(*(_QWORD *)v69 + 16);
    v78 = MEMORY[0x24BEE4AF8];
    if (v77)
    {
      v160 = *(_QWORD *)(v69 + 40);
      v166 = v12;
      v165 = v71;
      v191 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23DEAA400(0, v77, 0);
      v159 = v76;
      v79 = v76 + 32;
      v78 = v191;
      do
      {
        sub_23DECD914(v79, (uint64_t)&v182);
        v81 = v185;
        v80 = v186;
        __swift_project_boxed_opaque_existential_1(&v182, v185);
        (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(v80 + 40))(&v187, v81, v80);
        sub_23DECD964((uint64_t)&v182);
        v83 = (uint64_t)v187;
        v82 = v188;
        v84 = v189;
        v85 = v190;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA400(0, *(_QWORD *)(v78 + 16) + 1, 1);
          v78 = v191;
        }
        v87 = *(_QWORD *)(v78 + 16);
        v86 = *(_QWORD *)(v78 + 24);
        if (v87 >= v86 >> 1)
        {
          sub_23DEAA400(v86 > 1, v87 + 1, 1);
          v78 = v191;
        }
        *(_QWORD *)(v78 + 16) = v87 + 1;
        v88 = (_QWORD *)(v78 + 32 * v87);
        v88[4] = v83;
        v88[5] = v82;
        v88[6] = v84;
        v88[7] = v85;
        v79 += 48;
        --v77;
      }
      while (v77);
      swift_bridgeObjectRelease();
      v71 = v165;
      v12 = v166;
      v72 = (uint64_t)v177;
      v73 = v169;
      v75 = v160;
    }
    v89 = sub_23DECD990(v78);
    swift_bridgeObjectRelease();
    v90 = sub_23DEA28F4(v75, v89);
    swift_bridgeObjectRelease();
    v9 = (uint64_t)v162;
    if ((v90 & 1) != 0)
    {
      v91 = *((_QWORD *)v71 + 2);
      v92 = *((_QWORD *)v71 + 3);
      v93 = swift_getObjectType();
      v94 = v164;
      (*(void (**)(uint64_t, uint64_t))(v92 + 40))(v93, v92);
      v95 = v161;
      (*(void (**)(char *, os_log_t, uint64_t))(v12 + 16))(v161, v181, v9);
      swift_retain_n();
      v96 = sub_23DF14C68();
      v97 = sub_23DF1501C();
      if (os_log_type_enabled(v96, (os_log_type_t)v97))
      {
        LODWORD(v181) = v97;
        v98 = swift_slowAlloc();
        v166 = v12;
        v99 = v98;
        v169 = swift_slowAlloc();
        v187 = (char *)v169;
        *(_DWORD *)v99 = 136315394;
        v182 = v91;
        v183 = v92;
        sub_23DE95524(0, (unint64_t *)&qword_25432C268);
        swift_unknownObjectRetain();
        v100 = sub_23DF14E18();
        v182 = sub_23DEC1518(v100, v101, (uint64_t *)&v187);
        sub_23DF15100();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v99 + 12) = 2080;
        v158(&v182, v9, v179);
        (*(void (**)(char *, uint64_t))(v166 + 8))(v95, v9);
        v102 = v185;
        if (v185)
        {
          v103 = v184;
        }
        else
        {
          v103 = v182;
          v102 = swift_bridgeObjectRetain();
        }
        v151 = v164;
        swift_bridgeObjectRelease();
        v182 = sub_23DEC1518(v103, v102, (uint64_t *)&v187);
        sub_23DF15100();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23DE8B000, v96, (os_log_type_t)v181, "[%s]: Received update from %s. Input signal registration complete.", (uint8_t *)v99, 0x16u);
        v152 = v169;
        swift_arrayDestroy();
        MEMORY[0x242648490](v152, -1, -1);
        MEMORY[0x242648490](v99, -1, -1);

        (*(void (**)(char *, uint64_t))(v172 + 8))(v151, v174);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v95, v9);

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v172 + 8))(v94, v174);
      }
      v153 = sub_23DEBB6A0((uint64_t)v177);
      v155 = v154;
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v180 + 8))(v173, v175);
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v153;
      *(_QWORD *)(result + 24) = v155;
      v156 = v171;
      *v171 = sub_23DECDAC0;
      v156[1] = result;
      return result;
    }
  }
  v104 = v9;
  v105 = *(unsigned __int8 *)(v72 + 33);
  if (*(_BYTE *)(v72 + 32) != 1 || (v105 & 1) != 0)
  {
    LODWORD(v169) = *(unsigned __int8 *)(v72 + 32);
    LODWORD(v177) = v105;
    v119 = *((_QWORD *)v71 + 2);
    v120 = *((_QWORD *)v71 + 3);
    v121 = swift_getObjectType();
    v122 = v167;
    (*(void (**)(uint64_t, uint64_t))(v120 + 40))(v121, v120);
    v123 = v163;
    v124 = v104;
    (*(void (**)(char *, os_log_t, uint64_t))(v12 + 16))(v163, v181, v104);
    v165 = v71;
    swift_retain_n();
    v125 = sub_23DF14C68();
    v126 = sub_23DF1501C();
    if (!os_log_type_enabled(v125, (os_log_type_t)v126))
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v123, v124);
      swift_release();
      swift_release_n();

      swift_release();
      (*(void (**)(char *, uint64_t))(v172 + 8))(v122, v174);
LABEL_56:
      result = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v173, v175);
LABEL_59:
      v150 = v171;
      *v171 = 0;
      v150[1] = 0;
      return result;
    }
    LODWORD(v168) = v126;
    v181 = v125;
    v127 = v12;
    v128 = swift_slowAlloc();
    v129 = swift_slowAlloc();
    v187 = (char *)v129;
    *(_DWORD *)v128 = 136315906;
    v182 = v119;
    v183 = v120;
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_unknownObjectRetain();
    v130 = sub_23DF14E18();
    v182 = sub_23DEC1518(v130, v131, (uint64_t *)&v187);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v128 + 12) = 2080;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v179 + 40))(&v182, v124);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v123, v124);
    v132 = v185;
    if (v185)
    {
      v133 = v184;
    }
    else
    {
      v133 = v182;
      v132 = swift_bridgeObjectRetain();
    }
    v58 = v167;
    v141 = (int)v169;
    swift_bridgeObjectRelease();
    v182 = sub_23DEC1518(v133, v132, (uint64_t *)&v187);
    sub_23DF15100();
    swift_bridgeObjectRelease();
    *(_WORD *)(v128 + 22) = 2080;
    v142 = 0x657669746341;
    v143 = 0xE500000000000000;
    if (v141 == 1)
      v143 = 0xE600000000000000;
    else
      v142 = 0x6465646E45;
    if (v141)
      v144 = v142;
    else
      v144 = 0x7261745320746F4ELL;
    if (v141)
      v145 = v143;
    else
      v145 = 0xEB00000000646574;
    v182 = sub_23DEC1518(v144, v145, (uint64_t *)&v187);
    sub_23DF15100();
    swift_bridgeObjectRelease();
    *(_WORD *)(v128 + 32) = 2080;
    if ((_DWORD)v177)
      v146 = 0x646573756150;
    else
      v146 = 0x676E696E6E7552;
    if ((_DWORD)v177)
      v147 = 0xE600000000000000;
    else
      v147 = 0xE700000000000000;
    v182 = sub_23DEC1518(v146, v147, (uint64_t *)&v187);
    sub_23DF15100();
    swift_bridgeObjectRelease();
    v148 = v181;
    _os_log_impl(&dword_23DE8B000, v181, (os_log_type_t)v168, "[%s]: Received update from %s; ignoring while (%s, %s).",
      (uint8_t *)v128,
      0x2Au);
    swift_arrayDestroy();
    MEMORY[0x242648490](v129, -1, -1);
    MEMORY[0x242648490](v128, -1, -1);
    swift_release();

LABEL_55:
    swift_release();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v58, v174);
    goto LABEL_56;
  }
  v106 = sub_23DEB7118(v72);
  v107 = v71;
  v108 = *((_QWORD *)v71 + 2);
  v109 = *((_QWORD *)v71 + 3);
  v110 = swift_getObjectType();
  v111 = v168;
  (*(void (**)(uint64_t, uint64_t))(v109 + 40))(v110, v109);
  (*(void (**)(NSObject *, os_log_t, uint64_t))(v12 + 16))(v73, v181, v104);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v112 = v73;
  v113 = sub_23DF14C68();
  LODWORD(v181) = sub_23DF1501C();
  if (os_log_type_enabled(v113, (os_log_type_t)v181))
  {
    v169 = v113;
    v114 = swift_slowAlloc();
    v177 = (char *)swift_slowAlloc();
    v187 = v177;
    *(_DWORD *)v114 = 136315650;
    v182 = v108;
    v183 = v109;
    sub_23DE95524(0, (unint64_t *)&qword_25432C268);
    swift_unknownObjectRetain();
    v115 = sub_23DF14E18();
    v182 = sub_23DEC1518(v115, v116, (uint64_t *)&v187);
    sub_23DF15100();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v114 + 12) = 2080;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v179 + 40))(&v182, v104);
    (*(void (**)(NSObject *, uint64_t))(v12 + 8))(v112, v104);
    v117 = v185;
    if (v185)
    {
      v118 = v184;
    }
    else
    {
      v118 = v182;
      v117 = swift_bridgeObjectRetain();
    }
    v134 = v169;
    v135 = v181;
    swift_bridgeObjectRelease();
    v182 = sub_23DEC1518(v118, v117, (uint64_t *)&v187);
    sub_23DF15100();
    swift_bridgeObjectRelease();
    *(_WORD *)(v114 + 22) = 2048;
    v136 = v106[2];
    swift_bridgeObjectRelease();
    v182 = v136;
    sub_23DF15100();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DE8B000, v134, v135, "[%s]: Received update from %s; enqueuing %ld work sets.",
      (uint8_t *)v114,
      0x20u);
    v137 = (uint64_t)v177;
    swift_arrayDestroy();
    MEMORY[0x242648490](v137, -1, -1);
    MEMORY[0x242648490](v114, -1, -1);
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v168, v174);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v173, v175);
  }
  else
  {
    (*(void (**)(NSObject *, uint64_t))(v12 + 8))(v112, v104);
    swift_release();
    swift_release_n();

    swift_release();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v111, v174);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v173, v175);
  }
  v138 = swift_allocObject();
  *(_QWORD *)(v138 + 16) = v107;
  *(_QWORD *)(v138 + 24) = v106;
  v139 = v171;
  *v171 = sub_23DECDA78;
  v139[1] = v138;
  return swift_retain();
}

uint64_t Orchestrator.didUpdate<A>(anchor:signal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[6];

  v5 = v4;
  v34 = a4;
  v35 = a1;
  v39 = sub_23DF14D10();
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39, v8);
  v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DF14D34();
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v36 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v12, v16);
  v17 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v21);
  v23 = (char *)&v34 - v22;
  v37 = *(_QWORD *)(v5 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v34 - v22, v35, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a3);
  v24 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v25 = (v20 + *(unsigned __int8 *)(v14 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v26 = (char *)swift_allocObject();
  v27 = v34;
  *((_QWORD *)v26 + 2) = a3;
  *((_QWORD *)v26 + 3) = v27;
  *((_QWORD *)v26 + 4) = v5;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v26[v24], v23, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v26[v25], v17, a3);
  aBlock[4] = sub_23DECD144;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE9F35C;
  aBlock[3] = &block_descriptor_6;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = v36;
  sub_23DF14D28();
  v43 = MEMORY[0x24BEE4AF8];
  v30 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  sub_23DE8F998(&qword_25432C290, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23DE95234(0, (unint64_t *)&unk_25432D910, v30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DEC0E44((unint64_t *)&unk_25432D920, (unint64_t *)&unk_25432D910, v30);
  v32 = v38;
  v31 = v39;
  sub_23DF15148();
  MEMORY[0x242647AA0](0, v29, v32, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_23DEBE388@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t result;
  unint64_t v83;
  unint64_t v84;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;

  v4 = swift_bridgeObjectRetain();
  v5 = sub_23DEB47D8(v4);
  swift_bridgeObjectRelease();
  if (v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v84 = swift_bridgeObjectRetain();
    v6 = (uint64_t)sub_23DF0FAD0(v84);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v107 = v6;
  sub_23DEC1428(&v107);
  if (v2)
    goto LABEL_98;
  swift_bridgeObjectRelease();
  v90 = v107;
  v107 = 0;
  v108 = 0xE000000000000000;
  sub_23DF15190();
  v111 = v107;
  v112 = v108;
  sub_23DF14E60();
  swift_getObjectType();
  sub_23DEBFEC4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  sub_23DEBFEC4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  v107 = *a1;
  swift_bridgeObjectRetain_n();
  sub_23DEC13C0(&v107);
  v92 = a1;
  swift_bridgeObjectRelease();
  v7 = v107;
  v8 = *(_QWORD *)(v107 + 16);
  if (v8)
  {
    v113 = MEMORY[0x24BEE4AF8];
    sub_23DEAA1B4(0, v8, 0);
    v9 = v7 + 32;
    do
    {
      sub_23DECD914(v9, (uint64_t)&v107);
      v102 = 0;
      v103 = 0xE000000000000000;
      sub_23DF15190();
      swift_bridgeObjectRelease();
      v105 = 0x2020202020202020;
      v106 = 0xE800000000000000;
      v10 = v109;
      v11 = v110;
      __swift_project_boxed_opaque_existential_1(&v107, v109);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 40))(&v102, v10, v11);
      if (!v104)
        swift_bridgeObjectRetain();
      sub_23DECEDF8();
      swift_bridgeObjectRetain();
      sub_23DF15124();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      v12 = v105;
      v13 = v106;
      sub_23DECD964((uint64_t)&v107);
      v14 = v113;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DEAA1B4(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v113;
      }
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_23DEAA1B4(v15 > 1, v16 + 1, 1);
        v14 = v113;
      }
      *(_QWORD *)(v14 + 16) = v16 + 1;
      v17 = v14 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v13;
      v9 += 48;
      --v8;
    }
    while (v8);
    swift_release();
  }
  else
  {
    swift_release();
    v14 = MEMORY[0x24BEE4AF8];
  }
  v107 = v14;
  sub_23DEABD84(0, (unint64_t *)&qword_25432D930, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DEAA1D0();
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  v18 = v92[3];
  swift_bridgeObjectRetain_n();
  v19 = sub_23DF0F9C4(v18);
  swift_bridgeObjectRelease();
  v107 = v19;
  sub_23DEC14A0(&v107, sub_23DEF7D7C, sub_23DEC1B80);
  swift_bridgeObjectRelease();
  v20 = v107;
  v21 = *(_QWORD *)(v107 + 16);
  if (v21)
  {
    v98 = MEMORY[0x24BEE4AF8];
    sub_23DEAA1B4(0, v21, 0);
    v22 = v98;
    v23 = (uint64_t *)(v20 + 72);
    do
    {
      v95 = v22;
      v25 = *(v23 - 5);
      v24 = *(v23 - 4);
      v26 = *v23;
      v107 = 0;
      v108 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DF15190();
      swift_bridgeObjectRelease();
      v107 = 0x2020202020202020;
      v108 = 0xE800000000000000;
      v102 = 34;
      v103 = 0xE100000000000000;
      v105 = v25;
      v106 = v24;
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      if (!v26)
        swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DECEDF8();
      sub_23DF15124();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v107;
      v28 = v108;
      v22 = v95;
      v30 = *(_QWORD *)(v95 + 16);
      v29 = *(_QWORD *)(v95 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_23DEAA1B4(v29 > 1, v30 + 1, 1);
        v22 = v95;
      }
      v23 += 6;
      *(_QWORD *)(v22 + 16) = v30 + 1;
      v31 = v22 + 16 * v30;
      *(_QWORD *)(v31 + 32) = v27;
      *(_QWORD *)(v31 + 40) = v28;
      --v21;
    }
    while (v21);
    swift_release();
  }
  else
  {
    swift_release();
    v22 = MEMORY[0x24BEE4AF8];
  }
  v107 = v22;
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  LODWORD(v32) = v90 < 0 || (v90 & 0x4000000000000000) != 0;
  if ((_DWORD)v32 == 1)
    goto LABEL_95;
  v33 = *(_QWORD *)(v90 + 16);
LABEL_30:
  v34 = MEMORY[0x24BEE4AF8];
  if (!v33)
  {
    v107 = MEMORY[0x24BEE4AF8];
    sub_23DF14DD0();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    v44 = v34;
    goto LABEL_60;
  }
  v99 = MEMORY[0x24BEE4AF8];
  sub_23DEAA1B4(0, v33 & ~(v33 >> 63), 0);
  if (v33 < 0)
  {
    __break(1u);
LABEL_98:
    result = swift_release();
    __break(1u);
    return result;
  }
  v88 = v33 & ~(v33 >> 63);
  v35 = 0;
  v93 = v90 & 0xC000000000000001;
  v96 = v33;
  do
  {
    if (v93)
    {
      v36 = (_QWORD *)MEMORY[0x242647BF0](v35, v90);
    }
    else
    {
      v36 = *(_QWORD **)(v90 + 8 * v35 + 32);
      swift_retain();
    }
    v107 = 0;
    v108 = 0xE000000000000000;
    sub_23DF15190();
    swift_bridgeObjectRelease();
    v107 = 538976288;
    v108 = 0xE400000000000000;
    v102 = 34;
    v103 = 0xE100000000000000;
    v37 = v36[5];
    v105 = v36[4];
    v106 = v37;
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    if (!v36[9])
      swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    if (!*(_QWORD *)(v36[12] + 40))
      swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DECEDF8();
    sub_23DF15124();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    v102 = 34;
    v103 = 0xE100000000000000;
    v105 = 0;
    v106 = 0xE000000000000000;
    if (!*(_QWORD *)(v36[12] + 40))
      swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF15124();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_release();
    v38 = v107;
    v39 = v108;
    v41 = *(_QWORD *)(v99 + 16);
    v40 = *(_QWORD *)(v99 + 24);
    if (v41 >= v40 >> 1)
      sub_23DEAA1B4(v40 > 1, v41 + 1, 1);
    ++v35;
    *(_QWORD *)(v99 + 16) = v41 + 1;
    v42 = v99 + 16 * v41;
    *(_QWORD *)(v42 + 32) = v38;
    *(_QWORD *)(v42 + 40) = v39;
  }
  while (v96 != v35);
  v107 = v99;
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  v100 = MEMORY[0x24BEE4AF8];
  sub_23DEAA1B4(0, v88, 0);
  v43 = 0;
  v44 = v100;
  do
  {
    if (v93)
    {
      v45 = (_QWORD *)MEMORY[0x242647BF0](v43, v90);
    }
    else
    {
      v45 = *(_QWORD **)(v90 + 8 * v43 + 32);
      swift_retain();
    }
    v107 = 538976288;
    v108 = 0xE400000000000000;
    v102 = 34;
    v103 = 0xE100000000000000;
    v46 = v45[5];
    v105 = v45[4];
    v106 = v46;
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    if (!v45[9])
      swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    if (!*(_QWORD *)(v45[12] + 40))
      swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF15124();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    v48 = v45[4];
    v47 = v45[5];
    v49 = v45[9];
    v102 = 34;
    v103 = 0xE100000000000000;
    v105 = v48;
    v106 = v47;
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    if (!v49)
      swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF15124();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    sub_23DF14E60();
    swift_release();
    swift_bridgeObjectRelease();
    v50 = v107;
    v51 = v108;
    v53 = *(_QWORD *)(v100 + 16);
    v52 = *(_QWORD *)(v100 + 24);
    if (v53 >= v52 >> 1)
      sub_23DEAA1B4(v52 > 1, v53 + 1, 1);
    ++v43;
    *(_QWORD *)(v100 + 16) = v53 + 1;
    v54 = v100 + 16 * v53;
    *(_QWORD *)(v54 + 32) = v50;
    *(_QWORD *)(v54 + 40) = v51;
  }
  while (v96 != v43);
  v34 = MEMORY[0x24BEE4AF8];
LABEL_60:
  v107 = v44;
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  v101 = v34;
  if ((_DWORD)v32)
  {
    v32 = v90;
    swift_retain();
    swift_bridgeObjectRetain();
    v55 = sub_23DF15298();
    swift_release();
    v87 = v55;
    if (!v55)
      goto LABEL_62;
LABEL_64:
    v58 = 0;
    v86 = v32 & 0xC000000000000001;
    while (1)
    {
      if (v86)
      {
        v59 = MEMORY[0x242647BF0](v58, v90);
        v60 = __OFADD__(v58, 1);
        v61 = v58 + 1;
        if (v60)
          goto LABEL_93;
      }
      else
      {
        v59 = swift_retain();
        v60 = __OFADD__(v58, 1);
        v61 = v58 + 1;
        if (v60)
        {
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          swift_bridgeObjectRetain();
          v33 = sub_23DF15298();
          swift_release();
          goto LABEL_30;
        }
      }
      v89 = v61;
      v91 = (_QWORD *)v59;
      v32 = *(_QWORD *)(v59 + 104);
      v62 = *(_QWORD *)(v32 + 16);
      if (v62)
      {
        sub_23DEABD84(0, &qword_25432E338, (uint64_t)&type metadata for InputSignalIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v63 = (_QWORD *)swift_allocObject();
        v64 = _swift_stdlib_malloc_size(v63);
        v65 = v64 - 32;
        if (v64 < 32)
          v65 = v64 - 1;
        v63[2] = v62;
        v63[3] = 2 * (v65 >> 5);
        v66 = sub_23DF118EC((uint64_t)&v107, v63 + 4, v62, v32);
        swift_bridgeObjectRetain_n();
        sub_23DEA8AD4();
        if (v66 != v62)
          goto LABEL_94;
        swift_bridgeObjectRelease();
        v67 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        swift_bridgeObjectRetain();
        v67 = MEMORY[0x24BEE4AF8];
        v63 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v107 = (uint64_t)v63;
      sub_23DEC14A0(&v107, sub_23DEF7DA4, sub_23DEC3FF8);
      swift_bridgeObjectRelease();
      v32 = v107;
      v68 = *(_QWORD *)(v107 + 16);
      if (v68)
      {
        sub_23DEAA1B4(0, v68, 0);
        v69 = v67;
        v70 = (unint64_t *)(v32 + 56);
        do
        {
          v94 = v69;
          v97 = v68;
          v72 = *(v70 - 3);
          v71 = *(v70 - 2);
          v73 = *(v70 - 1);
          v74 = *v70;
          v107 = 538976288;
          v108 = 0xE400000000000000;
          v102 = 34;
          v103 = 0xE100000000000000;
          if (v74)
          {
            v75 = v74;
          }
          else
          {
            swift_bridgeObjectRetain();
            v73 = v72;
            v75 = v71;
          }
          v105 = v73;
          v106 = v75;
          sub_23DECEDF8();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          sub_23DF15124();
          swift_bridgeObjectRelease();
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          sub_23DF14E60();
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          sub_23DF14E60();
          v102 = 34;
          v103 = 0xE100000000000000;
          v76 = v91[5];
          v105 = v91[4];
          v106 = v76;
          swift_bridgeObjectRetain();
          sub_23DF14E60();
          if (!v91[9])
            swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23DF14E60();
          if (!*(_QWORD *)(v91[12] + 40))
            swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23DF15124();
          swift_bridgeObjectRelease();
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          sub_23DF14E60();
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v77 = v107;
          v78 = v108;
          v69 = v94;
          v80 = *(_QWORD *)(v94 + 16);
          v79 = *(_QWORD *)(v94 + 24);
          v32 = v80 + 1;
          if (v80 >= v79 >> 1)
          {
            sub_23DEAA1B4(v79 > 1, v80 + 1, 1);
            v69 = v94;
          }
          v70 += 4;
          *(_QWORD *)(v69 + 16) = v32;
          v81 = v69 + 16 * v80;
          *(_QWORD *)(v81 + 32) = v77;
          *(_QWORD *)(v81 + 40) = v78;
          --v68;
        }
        while (v97 != 1);
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        v69 = v67;
      }
      sub_23DEF3B1C(v69);
      v58 = v89;
      if (v89 == v87)
      {
        swift_release_n();
        v56 = v101;
        goto LABEL_92;
      }
    }
  }
  v32 = v90;
  v57 = *(_QWORD *)(v90 + 16);
  swift_retain();
  v87 = v57;
  if (v57)
    goto LABEL_64;
LABEL_62:
  swift_release_n();
  v56 = MEMORY[0x24BEE4AF8];
LABEL_92:
  v107 = v56;
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  result = sub_23DF14E60();
  v83 = v112;
  *a2 = v111;
  a2[1] = v83;
  return result;
}

void sub_23DEBFA1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA70)
  {
    sub_23DECED74(255, &qword_25432D888, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x24BEE0460]);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA70);
  }
}

uint64_t sub_23DEBFA90()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DEBFAE4(uint64_t *a1)
{
  uint64_t v1;

  sub_23DEB9BB0(a1, *(os_unfair_lock_s **)(v1 + 16), (__int128 *)(v1 + 24), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(double *)(v1 + 104));
}

uint64_t sub_23DEBFAFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  if (!*(_QWORD *)(v2 + 72))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 96) + 40))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DECEDF8();
  sub_23DF15124();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  if (!*(_QWORD *)(v3 + 72))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 96) + 40))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF15124();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23DEBFEC4()
{
  swift_unknownObjectRetain();
  sub_23DF14E18();
  sub_23DECEDF8();
  sub_23DF15124();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return 34;
}

uint64_t sub_23DEBFF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  if (!v2)
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DECEDF8();
  sub_23DF15124();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  if (!v3)
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF15124();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

_QWORD *sub_23DEC0284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t inited;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *result;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v6 = swift_bridgeObjectRetain();
  *(_QWORD *)&v109 = sub_23DEC0F40(v6, a1);
  swift_bridgeObjectRetain();
  sub_23DEC14A0((uint64_t *)&v109, (uint64_t (*)(uint64_t))sub_23DEF7DB8, sub_23DEC46E0);
  if (v3)
  {
LABEL_71:
    result = (_QWORD *)swift_release();
    __break(1u);
    return result;
  }
  v103 = a3;
  swift_bridgeObjectRelease();
  v7 = v109;
  v8 = *(_QWORD *)(v109 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  v105 = a1;
  if (v8)
  {
    v115 = MEMORY[0x24BEE4AF8];
    sub_23DF15220();
    v10 = v7 + 32;
    do
    {
      sub_23DE902F4(v10, (uint64_t)&v109);
      v15 = v110;
      v16 = v111;
      __swift_project_boxed_opaque_existential_1(&v109, v110);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 40))(v112, v15, v16);
      v17 = v114;
      if (v114)
      {
        v11 = v113;
      }
      else
      {
        v11 = v112[0];
        v17 = swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      v12 = sub_23DE930F0(v9);
      v13 = sub_23DE935F0(v9);
      type metadata accessor for DebugSnapshot();
      v14 = (_QWORD *)swift_allocObject();
      v14[2] = v11;
      v14[3] = v17;
      v14[4] = v12;
      v14[5] = v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v109);
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      v10 += 40;
      --v8;
    }
    while (v8);
    v102 = v115;
    swift_release();
    a1 = v105;
  }
  else
  {
    swift_release();
    v102 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v109 = *(_QWORD *)a1;
  swift_bridgeObjectRetain_n();
  sub_23DEC13C0((uint64_t *)&v109);
  swift_bridgeObjectRelease();
  v18 = v109;
  v19 = *(_QWORD *)(v109 + 16);
  if (v19)
  {
    v115 = v9;
    sub_23DF15220();
    v20 = v18 + 32;
    do
    {
      sub_23DECD914(v20, (uint64_t)&v109);
      v25 = v110;
      v26 = v111;
      __swift_project_boxed_opaque_existential_1(&v109, v110);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v26 + 40))(v112, v25, v26);
      v27 = v114;
      if (v114)
      {
        v21 = v113;
      }
      else
      {
        v21 = v112[0];
        v27 = swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      v22 = sub_23DE930F0(v9);
      v23 = sub_23DE935F0(v9);
      type metadata accessor for DebugSnapshot();
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = v21;
      v24[3] = v27;
      v24[4] = v22;
      v24[5] = v23;
      sub_23DECD964((uint64_t)&v109);
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      v20 += 48;
      --v19;
    }
    while (v19);
    v28 = v115;
    swift_release();
    a1 = v105;
  }
  else
  {
    swift_release();
    v28 = MEMORY[0x24BEE4AF8];
  }
  v29 = MEMORY[0x24BEE4AF8];
  v98 = v28;
  if ((*(_BYTE *)(a1 + 34) & 1) != 0)
  {
    v30 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v33 = MEMORY[0x24BEE4AF8];
    if (v32)
    {
      v115 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23DEAA400(0, v32, 0);
      v34 = v31 + 32;
      v35 = v115;
      do
      {
        sub_23DECD914(v34, (uint64_t)&v109);
        v36 = v110;
        v37 = v111;
        __swift_project_boxed_opaque_existential_1(&v109, v110);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v37 + 40))(v112, v36, v37);
        sub_23DECD964((uint64_t)&v109);
        v38 = v112[0];
        v39 = v112[1];
        v41 = v113;
        v40 = v114;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DEAA400(0, *(_QWORD *)(v35 + 16) + 1, 1);
          v35 = v115;
        }
        v43 = *(_QWORD *)(v35 + 16);
        v42 = *(_QWORD *)(v35 + 24);
        if (v43 >= v42 >> 1)
        {
          sub_23DEAA400(v42 > 1, v43 + 1, 1);
          v35 = v115;
        }
        *(_QWORD *)(v35 + 16) = v43 + 1;
        v44 = (_QWORD *)(v35 + 32 * v43);
        v44[4] = v38;
        v44[5] = v39;
        v44[6] = v41;
        v44[7] = v40;
        v34 += 48;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease();
      v28 = v98;
      a1 = v105;
      v33 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v35 = MEMORY[0x24BEE4AF8];
    }
    v45 = sub_23DECD990(v35);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) <= *(_QWORD *)(v45 + 16) >> 3)
    {
      *(_QWORD *)&v109 = v45;
      v47 = swift_bridgeObjectRetain();
      sub_23DF0FDE0(v47);
    }
    else
    {
      v46 = swift_bridgeObjectRetain();
      sub_23DF0FFAC(v46, v45);
    }
    swift_bridgeObjectRelease();
    v29 = MEMORY[0x24BEE4AF8];
    v48 = swift_bridgeObjectRetain();
    v49 = sub_23DF0FBDC(v48);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v109 = v49;
    sub_23DEC14A0((uint64_t *)&v109, sub_23DEF7DA4, sub_23DEC3FF8);
    swift_bridgeObjectRelease();
    v50 = v109;
    v51 = *(_QWORD *)(v109 + 16);
    if (v51)
    {
      *(_QWORD *)&v109 = v33;
      sub_23DEAA1B4(0, v51, 0);
      v30 = v109;
      v52 = (uint64_t *)(v50 + 56);
      do
      {
        if (*v52)
        {
          v53 = *(v52 - 1);
          v54 = *v52;
        }
        else
        {
          v53 = *(v52 - 3);
          v54 = *(v52 - 2);
          swift_bridgeObjectRetain();
        }
        *(_QWORD *)&v109 = v30;
        v56 = *(_QWORD *)(v30 + 16);
        v55 = *(_QWORD *)(v30 + 24);
        swift_bridgeObjectRetain();
        if (v56 >= v55 >> 1)
        {
          sub_23DEAA1B4(v55 > 1, v56 + 1, 1);
          v30 = v109;
        }
        *(_QWORD *)(v30 + 16) = v56 + 1;
        v57 = v30 + 16 * v56;
        *(_QWORD *)(v57 + 32) = v53;
        *(_QWORD *)(v57 + 40) = v54;
        v52 += 4;
        --v51;
      }
      while (v51);
      swift_release();
      v29 = MEMORY[0x24BEE4AF8];
      a1 = v105;
    }
    else
    {
      swift_release();
      v30 = MEMORY[0x24BEE4AF8];
    }
  }
  v109 = *(_OWORD *)(a2 + 16);
  sub_23DE95524(0, (unint64_t *)&qword_25432C268);
  swift_unknownObjectRetain();
  v58 = sub_23DF14E18();
  v100 = v59;
  sub_23DE95234(0, (unint64_t *)&qword_25432C2C0, (uint64_t (*)(uint64_t))sub_23DE9ACDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  v61 = inited;
  *(_OWORD *)(inited + 16) = xmmword_23DF18650;
  v62 = 0xE600000000000000;
  *(_QWORD *)(inited + 32) = 0x646573756150;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v63 = 28526;
  if (*(_BYTE *)(a1 + 33))
    v63 = 5457241;
  v64 = 0xE200000000000000;
  if (*(_BYTE *)(a1 + 33))
    v64 = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = v63;
  *(_QWORD *)(inited + 56) = v64;
  *(_QWORD *)(inited + 64) = 0x6574617453;
  *(_QWORD *)(inited + 72) = 0xE500000000000000;
  v104 = v30;
  v101 = v58;
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 32) == 1)
    {
      v65 = 0x657669746341;
    }
    else
    {
      v62 = 0xE500000000000000;
      v65 = 0x6465646E45;
    }
  }
  else
  {
    v62 = 0xEB00000000646574;
    v65 = 0x7261745320746F4ELL;
  }
  *(_QWORD *)(inited + 80) = v65;
  *(_QWORD *)(inited + 88) = v62;
  *(_QWORD *)(inited + 96) = 0x6169726574697243;
  *(_QWORD *)(inited + 104) = 0xE800000000000000;
  *(_QWORD *)&v109 = 0;
  *((_QWORD *)&v109 + 1) = 0xE000000000000000;
  v66 = swift_bridgeObjectRetain();
  v67 = sub_23DEB37F0(v66);
  swift_bridgeObjectRelease();
  v68 = *(_QWORD *)(v67 + 16);
  if (v68)
  {
    v69 = 0;
    v70 = (uint64_t *)(v67 + 32);
    while (1)
    {
      v71 = *v70++;
      v72 = __OFADD__(v69, v71);
      v69 += v71;
      if (v72)
        break;
      if (!--v68)
        goto LABEL_57;
    }
    __break(1u);
    goto LABEL_71;
  }
  v69 = 0;
LABEL_57:
  swift_bridgeObjectRelease();
  v112[0] = v69;
  sub_23DF153C4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  v73 = *((_QWORD *)&v109 + 1);
  *(_QWORD *)(v61 + 112) = v109;
  *(_QWORD *)(v61 + 120) = v73;
  v99 = sub_23DE930F0(v61);
  sub_23DE95234(0, (unint64_t *)&unk_256D0EE90, (uint64_t (*)(uint64_t))sub_23DE9AD3C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v74 = swift_initStackObject();
  *(_OWORD *)(v74 + 16) = xmmword_23DF16AA0;
  *(_QWORD *)(v74 + 32) = 0x7372656E6E616C50;
  *(_QWORD *)(v74 + 40) = 0xE800000000000000;
  v75 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain_n();
  v76 = sub_23DF0F9C4(v75);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v109 = v76;
  sub_23DEC14A0((uint64_t *)&v109, sub_23DEF7D7C, sub_23DEC2558);
  swift_bridgeObjectRelease();
  v77 = v109;
  v78 = *(_QWORD *)(v109 + 16);
  v106 = v74;
  if (v78)
  {
    v112[0] = v29;
    sub_23DF15220();
    v79 = (uint64_t *)(v77 + 72);
    do
    {
      v86 = *v79;
      *(_QWORD *)&v109 = 60;
      *((_QWORD *)&v109 + 1) = 0xE100000000000000;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      v108 = v78;
      if (!v86)
        swift_bridgeObjectRetain();
      v79 += 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v81 = *((_QWORD *)&v109 + 1);
      v80 = v109;
      v82 = MEMORY[0x24BEE4AF8];
      v83 = sub_23DE930F0(MEMORY[0x24BEE4AF8]);
      v84 = sub_23DE935F0(v82);
      type metadata accessor for DebugSnapshot();
      v85 = (_QWORD *)swift_allocObject();
      v85[2] = v80;
      v85[3] = v81;
      v85[4] = v83;
      v85[5] = v84;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      v78 = v108 - 1;
    }
    while (v108 != 1);
    v87 = v112[0];
    swift_release();
    v29 = MEMORY[0x24BEE4AF8];
    v28 = v98;
  }
  else
  {
    swift_release();
    v87 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v74 + 48) = v87;
  *(_QWORD *)(v74 + 56) = 0xD000000000000016;
  *(_QWORD *)(v74 + 64) = 0x800000023DF1CE90;
  *(_QWORD *)(v74 + 72) = v102;
  strcpy((char *)(v74 + 80), "Input Signals");
  *(_WORD *)(v74 + 94) = -4864;
  *(_QWORD *)(v74 + 96) = v28;
  *(_QWORD *)(v74 + 104) = 0xD000000000000025;
  *(_QWORD *)(v74 + 112) = 0x800000023DF1CEB0;
  v88 = *(_QWORD *)(v104 + 16);
  if (v88)
  {
    *(_QWORD *)&v109 = v29;
    sub_23DF15220();
    v89 = (uint64_t *)(v104 + 40);
    do
    {
      v91 = *(v89 - 1);
      v90 = *v89;
      swift_bridgeObjectRetain_n();
      v92 = sub_23DE930F0(v29);
      v93 = sub_23DE935F0(v29);
      type metadata accessor for DebugSnapshot();
      v94 = (_QWORD *)swift_allocObject();
      v94[2] = v91;
      v94[3] = v90;
      v94[4] = v92;
      v94[5] = v93;
      swift_bridgeObjectRelease();
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      v89 += 2;
      --v88;
    }
    while (v88);
    v95 = v109;
    swift_bridgeObjectRelease();
    v74 = v106;
  }
  else
  {
    swift_bridgeObjectRelease();
    v95 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v74 + 120) = v95;
  v96 = sub_23DE935F0(v74);
  type metadata accessor for DebugSnapshot();
  result = (_QWORD *)swift_allocObject();
  result[2] = v101;
  result[3] = v100;
  result[4] = v99;
  result[5] = v96;
  *v103 = result;
  return result;
}

uint64_t sub_23DEC0E44(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DE95234(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE12C8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for Orchestrator.InputSignalObserverShim()
{
  return objc_opt_self();
}

uint64_t sub_23DEC0EAC(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_23DEC0EE4(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_23DEC0F1C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_23DEC0F40(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t i;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v29;
  int64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = 0;
  v3 = MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v36 = MEMORY[0x24BEE4AF8];
  v9 = v8 & v5;
  v25 = result;
  v26 = (unint64_t)(v7 + 63) >> 6;
  if ((v8 & v5) != 0)
    goto LABEL_33;
  while (1)
  {
LABEL_6:
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v10 >= v26)
      goto LABEL_34;
    v11 = *(_QWORD *)(v25 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v26)
        goto LABEL_34;
      v11 = *(_QWORD *)(v25 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v26)
          goto LABEL_34;
        v11 = *(_QWORD *)(v25 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v26)
            goto LABEL_34;
          v11 = *(_QWORD *)(v25 + 8 * v2);
          if (!v11)
          {
            v12 = v10 + 4;
            if (v12 >= v26)
            {
LABEL_34:
              swift_release();
              return v3;
            }
            v11 = *(_QWORD *)(v25 + 8 * v12);
            v2 = v12;
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_20:
    v9 = (v11 - 1) & v11;
    for (i = __clz(__rbit64(v11)) + (v2 << 6); ; i = v24 | (v2 << 6))
    {
      sub_23DE902F4(*(_QWORD *)(a1 + 56) + 40 * i, (uint64_t)&v32);
      sub_23DE902DC(&v32, (uint64_t)&v33);
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      if (v14)
        break;
LABEL_28:
      sub_23DE902DC(&v33, (uint64_t)&v32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_23DEAA454(0, *(_QWORD *)(v3 + 16) + 1, 1);
      v3 = v36;
      v23 = *(_QWORD *)(v36 + 16);
      v22 = *(_QWORD *)(v36 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_23DEAA454(v22 > 1, v23 + 1, 1);
        v3 = v36;
      }
      *(_QWORD *)(v3 + 16) = v23 + 1;
      result = sub_23DE902DC(&v32, v3 + 40 * v23 + 32);
      if (!v9)
        goto LABEL_6;
LABEL_33:
      v24 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
    }
    v29 = v9;
    v30 = v2;
    v15 = (_QWORD *)(*(_QWORD *)a2 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      v16 = v15[3];
      v17 = v15[4];
      __swift_project_boxed_opaque_existential_1(v15, v16);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v17 + 40))(&v32, v16, v17);
      v18 = v32;
      v20 = v34;
      v19 = v35;
      __swift_project_boxed_opaque_existential_1(&v33, v34);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 40))(&v31, v20, v19);
      if (v18 == v31)
        break;
      v21 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_5;
      v15 += 6;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        v2 = v30;
        v9 = v29;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    v2 = v30;
    v9 = v29;
    if (v29)
      goto LABEL_33;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v26)
      goto LABEL_34;
    v11 = *(_QWORD *)(v25 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_23DEC12A0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 64);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 22;
  os_unfair_lock_lock(v1 + 22);
  sub_23DECD8C4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DEC12FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  int v4;
  _BYTE v6[40];

  sub_23DE902F4(a1, (uint64_t)v6);
  sub_23DE95524(0, (unint64_t *)&qword_25432C280);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, v4 ^ 1u, 1, AssociatedTypeWitness);
}

uint64_t sub_23DEC13C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DEF7D90(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DEC2EA0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23DEC1428(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_23DEF9338();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_23DEC3834(v6);
  return sub_23DF15208();
}

uint64_t sub_23DEC14A0(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_23DEC1518(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23DEC15E8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23DEA8844((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23DEA8844((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23DEC15E8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23DF1510C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23DEC17A0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23DF151F0();
  if (!v8)
  {
    sub_23DF15280();
    __break(1u);
LABEL_17:
    result = sub_23DF152D4();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23DEC17A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23DEC1834(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DEC1A20(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23DEC1A20(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23DEC1834(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23DEC19A8(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23DF1519C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23DF15280();
      __break(1u);
LABEL_10:
      v2 = sub_23DF14E6C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23DF152D4();
    __break(1u);
LABEL_14:
    result = sub_23DF15280();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23DEC19A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23DEABD84(0, &qword_25432DBA0, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23DEC1A20(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DEABD84(0, &qword_25432DBA0, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC1B80(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  char *__dst;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v2 = v1;
  v4 = a1[1];
  result = sub_23DF153B8();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_142;
    if (v4)
      return sub_23DEC5090(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_151;
  v151 = v4;
  v147 = result;
  v143 = a1;
  if (v4 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v61 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_104:
      if (v61 >= 2)
      {
        v134 = *v143;
        v150 = v8;
        do
        {
          v135 = v61 - 2;
          if (v61 < 2)
            goto LABEL_137;
          if (!v134)
            goto LABEL_150;
          v136 = *(_QWORD *)&v11[16 * v135 + 32];
          v137 = *(_QWORD *)&v11[16 * v61 + 24];
          sub_23DEC5940((char *)(v134 + 48 * v136), (char *)(v134 + 48 * *(_QWORD *)&v11[16 * v61 + 16]), v134 + 48 * v137, __dst);
          if (v2)
            goto LABEL_117;
          if (v137 < v136)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = sub_23DEF7D18((uint64_t)v11);
          if (v135 >= *((_QWORD *)v11 + 2))
            goto LABEL_139;
          v138 = &v11[16 * v135 + 32];
          *(_QWORD *)v138 = v136;
          *((_QWORD *)v138 + 1) = v137;
          v139 = *((_QWORD *)v11 + 2);
          if (v61 > v139)
            goto LABEL_140;
          memmove(&v11[16 * v61 + 16], &v11[16 * v61 + 32], 16 * (v139 - v61));
          *((_QWORD *)v11 + 2) = v139 - 1;
          v61 = v139 - 1;
          v8 = v150;
        }
        while (v139 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v8 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_23DF14EFC();
    *(_QWORD *)(v8 + 16) = v7;
    __dst = (char *)(v8 + 32);
  }
  v150 = v8;
  v9 = 0;
  v10 = *a1;
  v144 = *a1 + 72;
  v142 = *a1 + 40;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v12 = v151;
  v157 = *a1;
  while (1)
  {
    v13 = v9;
    v14 = v9 + 1;
    v15 = v12;
    if (v9 + 1 < v12)
    {
      v148 = v11;
      v16 = (uint64_t *)(v10 + 48 * v14);
      v17 = v16[1];
      v18 = v2;
      v19 = v16[2];
      v20 = v16[3];
      v21 = v16[4];
      v22 = v16[5];
      v164 = *v16;
      v165 = v17;
      v166 = v19;
      v167 = v20;
      v168 = v21;
      v169 = v22;
      v23 = (uint64_t *)(v10 + 48 * v9);
      v24 = v23[1];
      v25 = v23[2];
      v26 = v23[3];
      v27 = v23[4];
      v28 = v23[5];
      v158 = *v23;
      v159 = v24;
      v160 = v25;
      v161 = v26;
      v162 = v27;
      v163 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v154 = sub_23DEBFF9C((uint64_t)&v164, (uint64_t)&v158);
      v170 = v18;
      if (v18)
      {
LABEL_116:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_117:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v150 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v13 + 2;
      if (v13 + 2 < v15)
      {
        v145 = v13;
        v29 = (_QWORD *)(v144 + 48 * v13);
        v30 = v29;
        while (1)
        {
          v31 = v14;
          v33 = v29[4];
          v32 = v29[5];
          v34 = v30[6];
          v30 += 6;
          v35 = v29[7];
          v36 = v29[8];
          v37 = v29[2];
          v164 = v29[3];
          v165 = v33;
          v166 = v32;
          v167 = v34;
          v168 = v35;
          v169 = v36;
          v38 = *(v29 - 3);
          v39 = *(v29 - 2);
          v40 = *(v29 - 1);
          v41 = *v29;
          v42 = v29[1];
          v158 = v38;
          v159 = v39;
          v160 = v40;
          v161 = v41;
          v162 = v42;
          v163 = v37;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43 = v170;
          v44 = sub_23DEBFF9C((uint64_t)&v164, (uint64_t)&v158);
          v170 = v43;
          if (v43)
            goto LABEL_116;
          v45 = v44;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (((v154 ^ v45) & 1) != 0)
            break;
          v14 = v31 + 1;
          v29 = v30;
          v15 = v151;
          if (v151 == v31 + 1)
          {
            v14 = v151;
            goto LABEL_22;
          }
        }
        v15 = v151;
        v14 = v31;
LABEL_22:
        v13 = v145;
      }
      v2 = v170;
      v11 = v148;
      v10 = v157;
      if ((v154 & 1) != 0)
      {
        if (v14 < v13)
          goto LABEL_146;
        if (v13 < v14)
        {
          v46 = 48 * v14;
          v47 = 48 * v13;
          v48 = v14;
          v49 = v13;
          do
          {
            if (v49 != --v48)
            {
              if (!v157)
                goto LABEL_149;
              v50 = (_OWORD *)(v157 + v47);
              v51 = *(_OWORD *)(v157 + v47);
              v52 = v157 + v46;
              v53 = *(_QWORD *)(v157 + v47 + 16);
              v54 = *(_QWORD *)(v157 + v47 + 24);
              v55 = *(_OWORD *)(v157 + v47 + 32);
              v57 = *(_OWORD *)(v157 + v46 - 32);
              v56 = *(_OWORD *)(v157 + v46 - 16);
              *v50 = *(_OWORD *)(v157 + v46 - 48);
              v50[1] = v57;
              v50[2] = v56;
              *(_OWORD *)(v52 - 48) = v51;
              *(_QWORD *)(v52 - 32) = v53;
              *(_QWORD *)(v52 - 24) = v54;
              *(_OWORD *)(v52 - 16) = v55;
            }
            ++v49;
            v46 -= 48;
            v47 += 48;
          }
          while (v49 < v48);
        }
      }
    }
    if (v14 >= v15)
      goto LABEL_41;
    if (__OFSUB__(v14, v13))
      goto LABEL_143;
    if (v14 - v13 >= v147)
      goto LABEL_41;
    if (__OFADD__(v13, v147))
      goto LABEL_144;
    v58 = v13 + v147 >= v15 ? v15 : v13 + v147;
    if (v58 < v13)
      break;
    if (v14 != v58)
    {
      v149 = v11;
      v170 = v2;
      v110 = (_QWORD *)(v142 + 48 * v14);
      v146 = v13;
      v140 = v58;
      do
      {
        v111 = (uint64_t *)(v10 + 48 * v14);
        v112 = *v111;
        v113 = v111[1];
        v114 = v111[2];
        v115 = v111[3];
        v116 = v111[4];
        v117 = v111[5];
        v118 = v13;
        v141 = v110;
        v119 = v110;
        v153 = v14;
        while (1)
        {
          v155 = v118;
          v120 = *(v119 - 11);
          v122 = *(v119 - 10);
          v121 = v119 - 11;
          v164 = v112;
          v165 = v113;
          v166 = v114;
          v167 = v115;
          v168 = v116;
          v169 = v117;
          v123 = *(v119 - 9);
          v124 = *(v119 - 8);
          v125 = *(v119 - 7);
          v126 = *(v119 - 6);
          v158 = v120;
          v159 = v122;
          v160 = v123;
          v161 = v124;
          v162 = v125;
          v163 = v126;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v127 = v170;
          v128 = sub_23DEBFF9C((uint64_t)&v164, (uint64_t)&v158);
          v170 = v127;
          if (v127)
            goto LABEL_116;
          v129 = v128;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v129 & 1) == 0)
            break;
          v10 = v157;
          v130 = v153;
          if (!v157)
            goto LABEL_148;
          v117 = *v119;
          v132 = *(_OWORD *)(v119 - 9);
          v131 = *(_OWORD *)(v119 - 7);
          *(v119 - 6) = *v119;
          v119 -= 6;
          v112 = v119[1];
          v113 = v119[2];
          v114 = v119[3];
          v115 = v119[4];
          v116 = v119[5];
          *((_OWORD *)v121 + 3) = *(_OWORD *)v121;
          *((_OWORD *)v121 + 4) = v132;
          *((_OWORD *)v121 + 5) = v131;
          *(v119 - 5) = v112;
          *(v119 - 4) = v113;
          *(v119 - 3) = v114;
          *(v119 - 2) = v115;
          *(v119 - 1) = v116;
          v118 = v155 + 1;
          if (v153 == v155 + 1)
            goto LABEL_99;
        }
        v10 = v157;
        v130 = v153;
LABEL_99:
        v14 = v130 + 1;
        v110 = v141 + 6;
        v13 = v146;
      }
      while (v14 != v140);
      v14 = v140;
      v2 = v170;
      v11 = v149;
      if (v140 < v146)
        goto LABEL_141;
      goto LABEL_42;
    }
LABEL_41:
    if (v14 < v13)
      goto LABEL_141;
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DEF77DC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v60 = *((_QWORD *)v11 + 2);
    v59 = *((_QWORD *)v11 + 3);
    v61 = v60 + 1;
    v10 = v157;
    if (v60 >= v59 >> 1)
    {
      v133 = sub_23DEF77DC((char *)(v59 > 1), v60 + 1, 1, v11);
      v10 = v157;
      v11 = v133;
    }
    *((_QWORD *)v11 + 2) = v61;
    v62 = v11 + 32;
    v63 = &v11[16 * v60 + 32];
    *(_QWORD *)v63 = v13;
    *((_QWORD *)v63 + 1) = v14;
    v152 = v14;
    if (v60)
    {
      while (1)
      {
        v64 = v61 - 1;
        if (v61 >= 4)
        {
          v69 = &v62[16 * v61];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_126;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_127;
          v76 = v61 - 2;
          v77 = &v62[16 * v61 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_129;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_132;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_136;
            v92 = v67 < v102;
            goto LABEL_78;
          }
        }
        else
        {
          if (v61 != 3)
          {
            v93 = *((_QWORD *)v11 + 4);
            v94 = *((_QWORD *)v11 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_72;
          }
          v66 = *((_QWORD *)v11 + 4);
          v65 = *((_QWORD *)v11 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_128;
        v76 = v61 - 2;
        v82 = &v62[16 * v61 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_131;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_134;
        if (__OFADD__(v86, v91))
          goto LABEL_135;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_78:
          if (v92)
            v64 = v76;
          goto LABEL_80;
        }
LABEL_72:
        if ((v87 & 1) != 0)
          goto LABEL_130;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_133;
        if (v98 < v86)
          goto LABEL_89;
LABEL_80:
        v103 = v64 - 1;
        if (v64 - 1 >= v61)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v10)
          goto LABEL_147;
        v104 = v11;
        v105 = &v62[16 * v103];
        v106 = *(_QWORD *)v105;
        v107 = &v62[16 * v64];
        v108 = *((_QWORD *)v107 + 1);
        sub_23DEC5940((char *)(v10 + 48 * *(_QWORD *)v105), (char *)(v10 + 48 * *(_QWORD *)v107), v10 + 48 * v108, __dst);
        if (v2)
          goto LABEL_117;
        if (v108 < v106)
          goto LABEL_123;
        if (v64 > *((_QWORD *)v104 + 2))
          goto LABEL_124;
        *(_QWORD *)v105 = v106;
        *(_QWORD *)&v62[16 * v103 + 8] = v108;
        v109 = *((_QWORD *)v104 + 2);
        if (v64 >= v109)
          goto LABEL_125;
        v11 = v104;
        v61 = v109 - 1;
        memmove(&v62[16 * v64], v107 + 16, 16 * (v109 - 1 - v64));
        *((_QWORD *)v11 + 2) = v109 - 1;
        v10 = v157;
        if (v109 <= 2)
          goto LABEL_89;
      }
    }
    v61 = 1;
LABEL_89:
    v12 = v151;
    v9 = v152;
    v8 = v150;
    if (v152 >= v151)
      goto LABEL_104;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEC2558(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  BOOL v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v2 = v1;
  v4 = a1[1];
  result = sub_23DF153B8();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_181;
    if (v4)
      return sub_23DEC5230(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_189;
  v135 = v4;
  v126 = result;
  v124 = a1;
  if (v4 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v137 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_147:
      v131 = v8;
      if (v11 >= 2)
      {
        v117 = *v124;
        do
        {
          v118 = v11 - 2;
          if (v11 < 2)
            goto LABEL_176;
          if (!v117)
            goto LABEL_188;
          v119 = *(_QWORD *)&v10[16 * v118 + 32];
          v120 = *(_QWORD *)&v10[16 * v11 + 24];
          sub_23DEC5E00((char *)(v117 + 48 * v119), (char *)(v117 + 48 * *(_QWORD *)&v10[16 * v11 + 16]), v117 + 48 * v120, v137);
          if (v2)
            break;
          if (v120 < v119)
            goto LABEL_177;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = sub_23DEF7D18((uint64_t)v10);
          if (v118 >= *((_QWORD *)v10 + 2))
            goto LABEL_178;
          v121 = &v10[16 * v118 + 32];
          *(_QWORD *)v121 = v119;
          *((_QWORD *)v121 + 1) = v120;
          v122 = *((_QWORD *)v10 + 2);
          if (v11 > v122)
            goto LABEL_179;
          memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v122 - v11));
          *((_QWORD *)v10 + 2) = v122 - 1;
          v11 = v122 - 1;
        }
        while (v122 > 2);
      }
LABEL_158:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v131 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_23DF14EFC();
    *(_QWORD *)(v8 + 16) = v7;
    v4 = v135;
    v137 = (char *)(v8 + 32);
  }
  v131 = v8;
  v9 = 0;
  v125 = *a1 + 16;
  v145 = *a1;
  v123 = *a1 + 32;
  v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_15:
  v12 = v9 + 1;
  if (v9 + 1 >= v4)
    goto LABEL_56;
  v127 = v2;
  v129 = v10;
  v13 = (uint64_t *)(v145 + 48 * v12);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18 = (_QWORD *)(v145 + 48 * v9);
  v19 = v18[2];
  v20 = v18[3];
  if (v14 == *v18 && v15 == v18[1])
    goto LABEL_24;
  v139 = v16;
  if ((sub_23DF15400() & 1) != 0)
  {
    v22 = v9 + 2;
    if (v9 + 2 >= v4)
    {
      v2 = v127;
      v25 = v145;
      if (v9 < v22)
        goto LABEL_62;
LABEL_67:
      v12 = v22;
      goto LABEL_68;
    }
    v140 = 1;
    goto LABEL_32;
  }
  v23 = sub_23DF15400();
  v16 = v139;
  if ((v23 & 1) == 0)
  {
LABEL_24:
    if (v16 != v19 || v17 != v20)
    {
      v140 = sub_23DF15400();
      v22 = v9 + 2;
      v25 = v145;
      if (v9 + 2 >= v4)
        goto LABEL_52;
      goto LABEL_33;
    }
  }
  v22 = v9 + 2;
  if (v9 + 2 >= v4)
  {
    v12 = v9 + 2;
    v2 = v127;
LABEL_56:
    v25 = v145;
    if (v12 >= v4)
      goto LABEL_96;
    goto LABEL_69;
  }
  v140 = 0;
LABEL_32:
  v25 = v145;
LABEL_33:
  v133 = v9;
  v26 = (uint64_t *)(v125 + 48 * v22);
  v27 = v22;
  v28 = v12;
  do
  {
    v22 = v27;
    v29 = *v26;
    v30 = v26[1];
    v31 = (_QWORD *)(v25 + 48 * v28);
    v33 = v31[2];
    v32 = v31[3];
    if (*(v26 - 2) == *v31 && *(v26 - 1) == v31[1])
      goto LABEL_44;
    v142 = v22;
    if ((sub_23DF15400() & 1) != 0)
    {
      v4 = v135;
      v22 = v142;
      if ((v140 & 1) == 0)
      {
        v12 = v142;
        v2 = v127;
        v10 = v129;
        v25 = v145;
        v9 = v133;
        if (v142 >= v135)
          goto LABEL_96;
LABEL_69:
        if (__OFSUB__(v12, v9))
          goto LABEL_180;
        if (v12 - v9 >= v126)
          goto LABEL_96;
        if (__OFADD__(v9, v126))
          goto LABEL_182;
        if (v9 + v126 >= v4)
          v51 = v4;
        else
          v51 = v9 + v126;
        if (v51 < v9)
        {
LABEL_183:
          __break(1u);
          goto LABEL_184;
        }
        if (v12 == v51)
          goto LABEL_96;
        v128 = v2;
        v130 = v10;
        v52 = v123 + 48 * v12;
        v132 = v51;
        v134 = v9;
        while (2)
        {
          v143 = v12;
          v53 = (uint64_t *)(v25 + 48 * v12);
          v54 = *v53;
          v55 = v53[1];
          v56 = v53[2];
          v57 = v53[3];
          v136 = v52;
          while (2)
          {
            v58 = (_OWORD *)(v52 - 80);
            v59 = *(_QWORD *)(v52 - 64);
            v60 = *(_QWORD *)(v52 - 56);
            if (v54 != *(_QWORD *)(v52 - 80) || v55 != *(_QWORD *)(v52 - 72))
            {
              v138 = *(_QWORD *)(v52 - 56);
              v141 = *(_QWORD *)(v52 - 64);
              if ((sub_23DF15400() & 1) == 0)
              {
                v62 = sub_23DF15400();
                v60 = v138;
                v59 = v141;
                if ((v62 & 1) != 0)
                  goto LABEL_78;
                break;
              }
LABEL_92:
              v25 = v145;
              if (!v145)
                goto LABEL_185;
              v65 = *(_OWORD *)(v52 - 64);
              v64 = *(_OWORD *)(v52 - 48);
              *(_OWORD *)(v52 - 48) = *(_OWORD *)v52;
              v52 -= 48;
              v54 = *(_QWORD *)(v52 + 16);
              v55 = *(_QWORD *)(v52 + 24);
              v56 = *(_QWORD *)(v52 + 32);
              v57 = *(_QWORD *)(v52 + 40);
              v58[3] = *v58;
              v58[4] = v65;
              v58[5] = v64;
              *(_QWORD *)(v52 - 32) = v54;
              *(_QWORD *)(v52 - 24) = v55;
              *(_QWORD *)(v52 - 16) = v56;
              *(_QWORD *)(v52 - 8) = v57;
              if (v143 == ++v9)
                goto LABEL_79;
              continue;
            }
            break;
          }
          v63 = v56 == v59 && v57 == v60;
          if (!v63 && (sub_23DF15400() & 1) != 0)
            goto LABEL_92;
LABEL_78:
          v25 = v145;
LABEL_79:
          v12 = v143 + 1;
          v52 = v136 + 48;
          v9 = v134;
          if (v143 + 1 != v132)
            continue;
          break;
        }
        v12 = v132;
        v2 = v128;
        v10 = v130;
LABEL_96:
        if (v12 < v9)
          goto LABEL_175;
        v144 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_23DEF77DC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v67 = *((_QWORD *)v10 + 2);
        v66 = *((_QWORD *)v10 + 3);
        v11 = v67 + 1;
        if (v67 >= v66 >> 1)
          v10 = sub_23DEF77DC((char *)(v66 > 1), v67 + 1, 1, v10);
        *((_QWORD *)v10 + 2) = v11;
        v68 = v10 + 32;
        v69 = &v10[16 * v67 + 32];
        *(_QWORD *)v69 = v9;
        *((_QWORD *)v69 + 1) = v144;
        if (v67)
        {
          while (2)
          {
            v70 = v11 - 1;
            if (v11 >= 4)
            {
              v76 = &v68[16 * v11];
              v77 = *((_QWORD *)v76 - 8);
              v78 = *((_QWORD *)v76 - 7);
              v82 = __OFSUB__(v78, v77);
              v79 = v78 - v77;
              v71 = v145;
              if (v82)
                goto LABEL_164;
              v81 = *((_QWORD *)v76 - 6);
              v80 = *((_QWORD *)v76 - 5);
              v82 = __OFSUB__(v80, v81);
              v74 = v80 - v81;
              v75 = v82;
              if (v82)
                goto LABEL_165;
              v83 = v11 - 2;
              v84 = &v68[16 * v11 - 32];
              v86 = *(_QWORD *)v84;
              v85 = *((_QWORD *)v84 + 1);
              v82 = __OFSUB__(v85, v86);
              v87 = v85 - v86;
              if (v82)
                goto LABEL_167;
              v82 = __OFADD__(v74, v87);
              v88 = v74 + v87;
              if (v82)
                goto LABEL_170;
              if (v88 >= v79)
              {
                v106 = &v68[16 * v70];
                v108 = *(_QWORD *)v106;
                v107 = *((_QWORD *)v106 + 1);
                v82 = __OFSUB__(v107, v108);
                v109 = v107 - v108;
                if (v82)
                  goto LABEL_174;
                v99 = v74 < v109;
              }
              else
              {
LABEL_115:
                if ((v75 & 1) != 0)
                  goto LABEL_166;
                v83 = v11 - 2;
                v89 = &v68[16 * v11 - 32];
                v91 = *(_QWORD *)v89;
                v90 = *((_QWORD *)v89 + 1);
                v92 = __OFSUB__(v90, v91);
                v93 = v90 - v91;
                v94 = v92;
                if (v92)
                  goto LABEL_169;
                v95 = &v68[16 * v70];
                v97 = *(_QWORD *)v95;
                v96 = *((_QWORD *)v95 + 1);
                v82 = __OFSUB__(v96, v97);
                v98 = v96 - v97;
                if (v82)
                  goto LABEL_172;
                if (__OFADD__(v93, v98))
                  goto LABEL_173;
                if (v93 + v98 < v74)
                  goto LABEL_127;
                v99 = v74 < v98;
              }
              if (v99)
                v70 = v83;
            }
            else
            {
              v71 = v145;
              if (v11 == 3)
              {
                v73 = *((_QWORD *)v10 + 4);
                v72 = *((_QWORD *)v10 + 5);
                v82 = __OFSUB__(v72, v73);
                v74 = v72 - v73;
                v75 = v82;
                goto LABEL_115;
              }
              v100 = *((_QWORD *)v10 + 4);
              v101 = *((_QWORD *)v10 + 5);
              v82 = __OFSUB__(v101, v100);
              v93 = v101 - v100;
              v94 = v82;
LABEL_127:
              if ((v94 & 1) != 0)
                goto LABEL_168;
              v102 = &v68[16 * v70];
              v104 = *(_QWORD *)v102;
              v103 = *((_QWORD *)v102 + 1);
              v82 = __OFSUB__(v103, v104);
              v105 = v103 - v104;
              if (v82)
                goto LABEL_171;
              if (v105 < v93)
                goto LABEL_14;
            }
            v110 = v70 - 1;
            if (v70 - 1 >= v11)
            {
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
              goto LABEL_183;
            }
            if (!v71)
              goto LABEL_186;
            v111 = v10;
            v112 = &v68[16 * v110];
            v113 = *(_QWORD *)v112;
            v114 = &v68[16 * v70];
            v115 = *((_QWORD *)v114 + 1);
            sub_23DEC5E00((char *)(v71 + 48 * *(_QWORD *)v112), (char *)(v71 + 48 * *(_QWORD *)v114), v71 + 48 * v115, v137);
            if (v2)
              goto LABEL_158;
            if (v115 < v113)
              goto LABEL_161;
            if (v70 > *((_QWORD *)v111 + 2))
              goto LABEL_162;
            *(_QWORD *)v112 = v113;
            *(_QWORD *)&v68[16 * v110 + 8] = v115;
            v116 = *((_QWORD *)v111 + 2);
            if (v70 >= v116)
              goto LABEL_163;
            v10 = v111;
            v11 = v116 - 1;
            memmove(&v68[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
            *((_QWORD *)v10 + 2) = v116 - 1;
            if (v116 <= 2)
              goto LABEL_14;
            continue;
          }
        }
        v11 = 1;
LABEL_14:
        v4 = v135;
        v9 = v144;
        v8 = v131;
        if (v144 >= v135)
          goto LABEL_147;
        goto LABEL_15;
      }
      goto LABEL_35;
    }
    v35 = sub_23DF15400();
    v22 = v142;
    if ((v35 & 1) == 0)
    {
LABEL_44:
      if (v29 != v33 || v30 != v32)
      {
        v37 = v22;
        v38 = sub_23DF15400();
        v22 = v37;
        v4 = v135;
        if (((v140 ^ v38) & 1) != 0)
        {
          v10 = v129;
          v25 = v145;
          goto LABEL_51;
        }
        goto LABEL_35;
      }
    }
    v4 = v135;
    if ((v140 & 1) != 0)
    {
      v2 = v127;
      v10 = v129;
      v25 = v145;
      v9 = v133;
      if (v22 < v133)
        goto LABEL_184;
LABEL_61:
      if (v9 < v22)
      {
LABEL_62:
        v39 = 48 * v22;
        v40 = 48 * v9;
        v41 = v22;
        v42 = v9;
        while (1)
        {
          if (v42 != --v41)
          {
            if (!v25)
              goto LABEL_187;
            v43 = (_OWORD *)(v25 + v40);
            v44 = *(_OWORD *)(v25 + v40);
            v45 = v25 + v39;
            v46 = *(_QWORD *)(v25 + v40 + 16);
            v47 = *(_QWORD *)(v25 + v40 + 24);
            v48 = *(_OWORD *)(v25 + v40 + 32);
            v50 = *(_OWORD *)(v25 + v39 - 32);
            v49 = *(_OWORD *)(v25 + v39 - 16);
            *v43 = *(_OWORD *)(v25 + v39 - 48);
            v43[1] = v50;
            v43[2] = v49;
            *(_OWORD *)(v45 - 48) = v44;
            *(_QWORD *)(v45 - 32) = v46;
            *(_QWORD *)(v45 - 24) = v47;
            *(_OWORD *)(v45 - 16) = v48;
          }
          ++v42;
          v39 -= 48;
          v40 += 48;
          if (v42 >= v41)
            goto LABEL_67;
        }
      }
      goto LABEL_67;
    }
LABEL_35:
    v26 += 6;
    v27 = v22 + 1;
    v28 = v22;
    v25 = v145;
  }
  while (v22 + 1 < v4);
  ++v22;
  v10 = v129;
LABEL_51:
  v9 = v133;
LABEL_52:
  v12 = v22;
  v2 = v127;
  if ((v140 & 1) == 0)
  {
LABEL_68:
    if (v12 >= v4)
      goto LABEL_96;
    goto LABEL_69;
  }
  if (v22 >= v9)
    goto LABEL_61;
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEC2EA0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *__dst;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[3];
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;

  v2 = v1;
  v135 = a1;
  v3 = a1[1];
  result = sub_23DF153B8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_145;
    if (v3)
      return sub_23DEC539C(0, v3, 1, v135);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_153;
  v113 = result;
  if (v3 < 2)
  {
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v112 = MEMORY[0x24BEE4AF8];
    if (v3 != 1)
    {
      v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v9 = (char *)MEMORY[0x24BEE4AF8];
LABEL_111:
      if (v10 >= 2)
      {
        v105 = *v135;
        do
        {
          v106 = v10 - 2;
          if (v10 < 2)
            goto LABEL_140;
          if (!v105)
            goto LABEL_152;
          v107 = v9;
          v108 = *(_QWORD *)&v9[16 * v106 + 32];
          v109 = *(_QWORD *)&v9[16 * v10 + 24];
          sub_23DEC61E4((char *)(v105 + 48 * v108), (char *)(v105 + 48 * *(_QWORD *)&v9[16 * v10 + 16]), v105 + 48 * v109, __dst);
          if (v2)
            break;
          if (v109 < v108)
            goto LABEL_141;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v107 = sub_23DEF7D18((uint64_t)v107);
          if (v106 >= *((_QWORD *)v107 + 2))
            goto LABEL_142;
          v110 = &v107[16 * v106 + 32];
          *(_QWORD *)v110 = v108;
          *((_QWORD *)v110 + 1) = v109;
          v111 = *((_QWORD *)v107 + 2);
          if (v10 > v111)
            goto LABEL_143;
          memmove(&v107[16 * v10 + 16], &v107[16 * v10 + 32], 16 * (v111 - v10));
          v9 = v107;
          *((_QWORD *)v107 + 2) = v111 - 1;
          v10 = v111 - 1;
        }
        while (v111 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v112 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23DF14EFC();
    *(_QWORD *)(v7 + 16) = v6;
    v112 = v7;
    __dst = (char *)(v7 + 32);
  }
  v8 = 0;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v11 = v8 + 1;
    v120 = v8;
    if (v8 + 1 < v3)
    {
      v12 = v3;
      v114 = v9;
      v116 = v2;
      v13 = *v135;
      sub_23DECD914(*v135 + 48 * v11, (uint64_t)v132);
      v118 = v13;
      sub_23DECD914(v13 + 48 * v8, (uint64_t)v129);
      v14 = v133;
      v15 = v134;
      __swift_project_boxed_opaque_existential_1(v132, v133);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 40))(&v127, v14, v15);
      v17 = v127;
      v16 = v128;
      v18 = v130;
      v19 = v131;
      __swift_project_boxed_opaque_existential_1(v129, v130);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 40))(&v125, v18, v19);
      if (v17 == v125 && v16 == v126)
        v121 = 0;
      else
        v121 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DECD964((uint64_t)v129);
      sub_23DECD964((uint64_t)v132);
      v11 = v8 + 2;
      if (v8 + 2 >= v12)
      {
        v3 = v12;
        v2 = v116;
      }
      else
      {
        v20 = v118 + 48 * v8 + 48;
        while (1)
        {
          v21 = v11;
          sub_23DECD914(v20 + 48, (uint64_t)v132);
          sub_23DECD914(v20, (uint64_t)v129);
          v22 = v133;
          v23 = v134;
          __swift_project_boxed_opaque_existential_1(v132, v133);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 40))(&v127, v22, v23);
          v25 = v127;
          v24 = v128;
          v27 = v130;
          v26 = v131;
          __swift_project_boxed_opaque_existential_1(v129, v130);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 40))(&v125, v27, v26);
          if (v25 != v125)
            goto LABEL_25;
          if (v24 == v126)
            v28 = 0;
          else
LABEL_25:
            v28 = sub_23DF15400();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23DECD964((uint64_t)v129);
          sub_23DECD964((uint64_t)v132);
          if (((v121 ^ v28) & 1) != 0)
            break;
          v11 = v21 + 1;
          v20 += 48;
          if (v12 == v21 + 1)
          {
            v3 = v12;
            v11 = v12;
            v2 = v116;
            v8 = v120;
            goto LABEL_31;
          }
        }
        v2 = v116;
        v11 = v21;
        v8 = v120;
        v3 = v12;
      }
LABEL_31:
      v9 = v114;
      if ((v121 & 1) != 0)
      {
        if (v11 < v8)
          goto LABEL_146;
        if (v8 < v11)
        {
          v29 = (__int128 *)(v118 + 48 * v11 - 48);
          v30 = (__int128 *)(v118 + 48 * v8);
          v31 = v11;
          v32 = v8;
          do
          {
            if (v32 != --v31)
            {
              if (!v118)
                goto LABEL_151;
              v33 = *v30;
              v34 = v30[1];
              v35 = v30[2];
              v37 = v29[1];
              v36 = v29[2];
              *v30 = *v29;
              v30[1] = v37;
              v30[2] = v36;
              v29[1] = v34;
              v29[2] = v35;
              *v29 = v33;
            }
            ++v32;
            v29 -= 3;
            v30 += 3;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v8))
        goto LABEL_144;
      if (v11 - v8 < v113)
        break;
    }
LABEL_61:
    if (v11 < v8)
      goto LABEL_139;
    v54 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v9 = v54;
    else
      v9 = sub_23DEF77DC(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
    v56 = *((_QWORD *)v9 + 2);
    v55 = *((_QWORD *)v9 + 3);
    v10 = v56 + 1;
    if (v56 >= v55 >> 1)
      v9 = sub_23DEF77DC((char *)(v55 > 1), v56 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v10;
    v57 = v9 + 32;
    v58 = &v9[16 * v56 + 32];
    *(_QWORD *)v58 = v8;
    *((_QWORD *)v58 + 1) = v11;
    v123 = v11;
    if (v56)
    {
      while (1)
      {
        v59 = v10 - 1;
        if (v10 >= 4)
        {
          v64 = &v57[16 * v10];
          v65 = *((_QWORD *)v64 - 8);
          v66 = *((_QWORD *)v64 - 7);
          v70 = __OFSUB__(v66, v65);
          v67 = v66 - v65;
          if (v70)
            goto LABEL_128;
          v69 = *((_QWORD *)v64 - 6);
          v68 = *((_QWORD *)v64 - 5);
          v70 = __OFSUB__(v68, v69);
          v62 = v68 - v69;
          v63 = v70;
          if (v70)
            goto LABEL_129;
          v71 = v10 - 2;
          v72 = &v57[16 * v10 - 32];
          v74 = *(_QWORD *)v72;
          v73 = *((_QWORD *)v72 + 1);
          v70 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v70)
            goto LABEL_131;
          v70 = __OFADD__(v62, v75);
          v76 = v62 + v75;
          if (v70)
            goto LABEL_134;
          if (v76 >= v67)
          {
            v94 = &v57[16 * v59];
            v96 = *(_QWORD *)v94;
            v95 = *((_QWORD *)v94 + 1);
            v70 = __OFSUB__(v95, v96);
            v97 = v95 - v96;
            if (v70)
              goto LABEL_138;
            v87 = v62 < v97;
            goto LABEL_98;
          }
        }
        else
        {
          if (v10 != 3)
          {
            v88 = *((_QWORD *)v9 + 4);
            v89 = *((_QWORD *)v9 + 5);
            v70 = __OFSUB__(v89, v88);
            v81 = v89 - v88;
            v82 = v70;
            goto LABEL_92;
          }
          v61 = *((_QWORD *)v9 + 4);
          v60 = *((_QWORD *)v9 + 5);
          v70 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          v63 = v70;
        }
        if ((v63 & 1) != 0)
          goto LABEL_130;
        v71 = v10 - 2;
        v77 = &v57[16 * v10 - 32];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v80 = __OFSUB__(v78, v79);
        v81 = v78 - v79;
        v82 = v80;
        if (v80)
          goto LABEL_133;
        v83 = &v57[16 * v59];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v70 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v70)
          goto LABEL_136;
        if (__OFADD__(v81, v86))
          goto LABEL_137;
        if (v81 + v86 >= v62)
        {
          v87 = v62 < v86;
LABEL_98:
          if (v87)
            v59 = v71;
          goto LABEL_100;
        }
LABEL_92:
        if ((v82 & 1) != 0)
          goto LABEL_132;
        v90 = &v57[16 * v59];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v70 = __OFSUB__(v91, v92);
        v93 = v91 - v92;
        if (v70)
          goto LABEL_135;
        if (v93 < v81)
          goto LABEL_14;
LABEL_100:
        v98 = v59 - 1;
        if (v59 - 1 >= v10)
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!*v135)
          goto LABEL_150;
        v99 = v9;
        v100 = &v57[16 * v98];
        v101 = *(_QWORD *)v100;
        v102 = &v57[16 * v59];
        v103 = *((_QWORD *)v102 + 1);
        sub_23DEC61E4((char *)(*v135 + 48 * *(_QWORD *)v100), (char *)(*v135 + 48 * *(_QWORD *)v102), *v135 + 48 * v103, __dst);
        if (v2)
          goto LABEL_122;
        if (v103 < v101)
          goto LABEL_125;
        if (v59 > *((_QWORD *)v99 + 2))
          goto LABEL_126;
        *(_QWORD *)v100 = v101;
        *(_QWORD *)&v57[16 * v98 + 8] = v103;
        v104 = *((_QWORD *)v99 + 2);
        if (v59 >= v104)
          goto LABEL_127;
        v10 = v104 - 1;
        memmove(&v57[16 * v59], v102 + 16, 16 * (v104 - 1 - v59));
        v9 = v99;
        *((_QWORD *)v99 + 2) = v104 - 1;
        if (v104 <= 2)
          goto LABEL_14;
      }
    }
    v10 = 1;
LABEL_14:
    v3 = v135[1];
    v8 = v123;
    if (v123 >= v3)
      goto LABEL_111;
  }
  if (__OFADD__(v8, v113))
    goto LABEL_147;
  if (v8 + v113 >= v3)
    v38 = v3;
  else
    v38 = v8 + v113;
  if (v38 >= v8)
  {
    if (v11 != v38)
    {
      v115 = v9;
      v117 = v2;
      v39 = 48 * v11;
      v119 = v38;
      do
      {
        v122 = v39;
        while (1)
        {
          v40 = v11;
          v41 = *v135 + v39;
          sub_23DECD914(v41, (uint64_t)v132);
          sub_23DECD914(v41 - 48, (uint64_t)v129);
          v42 = v133;
          v43 = v134;
          __swift_project_boxed_opaque_existential_1(v132, v133);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v43 + 40))(&v127, v42, v43);
          v45 = v127;
          v44 = v128;
          v46 = v130;
          v47 = v131;
          __swift_project_boxed_opaque_existential_1(v129, v130);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v47 + 40))(&v125, v46, v47);
          if (v45 == v125 && v44 == v126)
            break;
          v48 = sub_23DF15400();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23DECD964((uint64_t)v129);
          sub_23DECD964((uint64_t)v132);
          if ((v48 & 1) == 0)
            goto LABEL_51;
          if (!*v135)
            goto LABEL_149;
          v11 = v40;
          v49 = (__int128 *)(*v135 + v39);
          v51 = v49[1];
          v50 = v49[2];
          v52 = *v49;
          v53 = *(v49 - 2);
          *v49 = *(v49 - 3);
          v49[1] = v53;
          v49[2] = *(v49 - 1);
          *(v49 - 3) = v52;
          *(v49 - 2) = v51;
          *(v49 - 1) = v50;
          v39 -= 48;
          if (v40 == ++v8)
            goto LABEL_52;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DECD964((uint64_t)v129);
        sub_23DECD964((uint64_t)v132);
LABEL_51:
        v11 = v40;
LABEL_52:
        ++v11;
        v8 = v120;
        v39 = v122 + 48;
      }
      while (v11 != v119);
      v11 = v119;
      v9 = v115;
      v2 = v117;
    }
    goto LABEL_61;
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEC3834(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  char v83;
  char v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t *__dst;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = a1[1];
  result = sub_23DF153B8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_142;
    if (v3)
      return sub_23DEC5584(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_151;
  v6 = result;
  v97 = a1;
  if (v3 < 2)
  {
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v110 = MEMORY[0x24BEE4AF8];
    __dst = (uint64_t *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_104:
      if (v29 >= 2)
      {
        v87 = *v97;
        do
        {
          v88 = v29 - 2;
          if (v29 < 2)
            goto LABEL_137;
          if (!v87)
            goto LABEL_150;
          v89 = (uint64_t)v9;
          v90 = *(_QWORD *)&v9[16 * v88 + 32];
          v91 = *(_QWORD *)&v9[16 * v29 + 24];
          sub_23DEC66B4((uint64_t *)(v87 + 8 * v90), (uint64_t *)(v87 + 8 * *(_QWORD *)&v9[16 * v29 + 16]), v87 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v92 = (char *)v89;
          else
            v92 = sub_23DEF7D18(v89);
          if (v88 >= *((_QWORD *)v92 + 2))
            goto LABEL_139;
          v93 = &v92[16 * v88 + 32];
          *(_QWORD *)v93 = v90;
          *((_QWORD *)v93 + 1) = v91;
          v94 = *((_QWORD *)v92 + 2);
          if (v29 > v94)
            goto LABEL_140;
          v95 = v92;
          memmove(&v92[16 * v29 + 16], &v92[16 * v29 + 32], 16 * (v94 - v29));
          v9 = v95;
          *((_QWORD *)v95 + 2) = v94 - 1;
          v29 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
LABEL_120:
      *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_23DF14ED8();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for WorkCriteriaRecord();
    v8 = sub_23DF14EFC();
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (uint64_t *)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v110 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v98 = *a1 + 16;
  v96 = *a1 - 8;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v3;
  v101 = v6;
  v107 = *a1;
  while (1)
  {
    v12 = v10;
    v13 = v10 + 1;
    if (v10 + 1 < v3)
    {
      v102 = v9;
      v109 = *(_QWORD *)(v11 + 8 * v13);
      v108 = *(_QWORD *)(v11 + 8 * v10);
      swift_retain();
      swift_retain();
      v14 = sub_23DEBFAFC(&v109, &v108);
      if (v1)
      {
LABEL_118:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_120;
      }
      v15 = v14;
      swift_release();
      swift_release();
      v13 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v99 = v12;
        v16 = (uint64_t *)(v98 + 8 * v12);
        while (1)
        {
          v17 = v13;
          v18 = *(v16 - 1);
          v109 = *v16;
          v108 = v18;
          swift_retain();
          swift_retain();
          v19 = sub_23DEBFAFC(&v109, &v108);
          swift_release();
          swift_release();
          if (((v15 ^ v19) & 1) != 0)
            break;
          v13 = v17 + 1;
          ++v16;
          v3 = v105;
          if (v105 == v17 + 1)
          {
            v13 = v105;
            v6 = v101;
            goto LABEL_21;
          }
        }
        v3 = v105;
        v6 = v101;
        v13 = v17;
LABEL_21:
        v12 = v99;
      }
      v9 = v102;
      v11 = v107;
      if ((v15 & 1) != 0)
      {
        if (v13 < v12)
          goto LABEL_146;
        if (v12 < v13)
        {
          v20 = (uint64_t *)(v96 + 8 * v13);
          v21 = v13;
          v22 = v12;
          v23 = (uint64_t *)(v107 + 8 * v12);
          do
          {
            if (v22 != --v21)
            {
              if (!v107)
                goto LABEL_149;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v13 >= v3)
      goto LABEL_40;
    if (__OFSUB__(v13, v12))
      goto LABEL_143;
    if (v13 - v12 >= v6)
      goto LABEL_40;
    if (__OFADD__(v12, v6))
      goto LABEL_144;
    v25 = v12 + v6 >= v3 ? v3 : v12 + v6;
    if (v25 < v12)
      break;
    if (v13 != v25)
    {
      v104 = v9;
      v78 = (uint64_t *)(v96 + 8 * v13);
      v100 = v12;
      do
      {
        v79 = *(_QWORD *)(v11 + 8 * v13);
        v80 = v12;
        v81 = v78;
        v82 = v78;
        while (1)
        {
          v109 = v79;
          v108 = *v82;
          swift_retain();
          swift_retain();
          v83 = sub_23DEBFAFC(&v109, &v108);
          if (v1)
            goto LABEL_118;
          v84 = v83;
          swift_release();
          swift_release();
          if ((v84 & 1) == 0)
            break;
          v11 = v107;
          if (!v107)
            goto LABEL_148;
          v85 = *v82;
          v79 = v82[1];
          *v82 = v79;
          v82[1] = v85;
          --v82;
          if (v13 == ++v80)
            goto LABEL_98;
        }
        v11 = v107;
LABEL_98:
        ++v13;
        v78 = v81 + 1;
        v12 = v100;
      }
      while (v13 != v25);
      v13 = v25;
      v9 = v104;
      if (v25 < v100)
        goto LABEL_141;
      goto LABEL_41;
    }
LABEL_40:
    if (v13 < v12)
      goto LABEL_141;
LABEL_41:
    v26 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v9 = v26;
    else
      v9 = sub_23DEF77DC(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v28 = *((_QWORD *)v9 + 2);
    v27 = *((_QWORD *)v9 + 3);
    v29 = v28 + 1;
    v11 = v107;
    if (v28 >= v27 >> 1)
    {
      v86 = sub_23DEF77DC((char *)(v27 > 1), v28 + 1, 1, v9);
      v11 = v107;
      v9 = v86;
    }
    *((_QWORD *)v9 + 2) = v29;
    v30 = v9 + 32;
    v31 = &v9[16 * v28 + 32];
    *(_QWORD *)v31 = v12;
    *((_QWORD *)v31 + 1) = v13;
    v103 = v13;
    if (v28)
    {
      while (1)
      {
        v32 = v29 - 1;
        if (v29 >= 4)
        {
          v37 = &v30[16 * v29];
          v38 = *((_QWORD *)v37 - 8);
          v39 = *((_QWORD *)v37 - 7);
          v43 = __OFSUB__(v39, v38);
          v40 = v39 - v38;
          if (v43)
            goto LABEL_126;
          v42 = *((_QWORD *)v37 - 6);
          v41 = *((_QWORD *)v37 - 5);
          v43 = __OFSUB__(v41, v42);
          v35 = v41 - v42;
          v36 = v43;
          if (v43)
            goto LABEL_127;
          v44 = v29 - 2;
          v45 = &v30[16 * v29 - 32];
          v47 = *(_QWORD *)v45;
          v46 = *((_QWORD *)v45 + 1);
          v43 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          if (v43)
            goto LABEL_129;
          v43 = __OFADD__(v35, v48);
          v49 = v35 + v48;
          if (v43)
            goto LABEL_132;
          if (v49 >= v40)
          {
            v67 = &v30[16 * v32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v43 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v43)
              goto LABEL_136;
            v60 = v35 < v70;
            goto LABEL_77;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v61 = *((_QWORD *)v9 + 4);
            v62 = *((_QWORD *)v9 + 5);
            v43 = __OFSUB__(v62, v61);
            v54 = v62 - v61;
            v55 = v43;
            goto LABEL_71;
          }
          v34 = *((_QWORD *)v9 + 4);
          v33 = *((_QWORD *)v9 + 5);
          v43 = __OFSUB__(v33, v34);
          v35 = v33 - v34;
          v36 = v43;
        }
        if ((v36 & 1) != 0)
          goto LABEL_128;
        v44 = v29 - 2;
        v50 = &v30[16 * v29 - 32];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v53 = __OFSUB__(v51, v52);
        v54 = v51 - v52;
        v55 = v53;
        if (v53)
          goto LABEL_131;
        v56 = &v30[16 * v32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v43 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v43)
          goto LABEL_134;
        if (__OFADD__(v54, v59))
          goto LABEL_135;
        if (v54 + v59 >= v35)
        {
          v60 = v35 < v59;
LABEL_77:
          if (v60)
            v32 = v44;
          goto LABEL_79;
        }
LABEL_71:
        if ((v55 & 1) != 0)
          goto LABEL_130;
        v63 = &v30[16 * v32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v43 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v43)
          goto LABEL_133;
        if (v66 < v54)
          goto LABEL_88;
LABEL_79:
        v71 = v32 - 1;
        if (v32 - 1 >= v29)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v11)
          goto LABEL_147;
        v72 = v9;
        v73 = &v30[16 * v71];
        v74 = *(_QWORD *)v73;
        v75 = &v30[16 * v32];
        v76 = *((_QWORD *)v75 + 1);
        sub_23DEC66B4((uint64_t *)(v11 + 8 * *(_QWORD *)v73), (uint64_t *)(v11 + 8 * *(_QWORD *)v75), v11 + 8 * v76, __dst);
        if (v1)
          goto LABEL_119;
        if (v76 < v74)
          goto LABEL_123;
        if (v32 > *((_QWORD *)v72 + 2))
          goto LABEL_124;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v30[16 * v71 + 8] = v76;
        v77 = *((_QWORD *)v72 + 2);
        if (v32 >= v77)
          goto LABEL_125;
        v29 = v77 - 1;
        memmove(&v30[16 * v32], v75 + 16, 16 * (v77 - 1 - v32));
        v9 = v72;
        *((_QWORD *)v72 + 2) = v77 - 1;
        v11 = v107;
        if (v77 <= 2)
          goto LABEL_88;
      }
    }
    v29 = 1;
LABEL_88:
    v10 = v103;
    v3 = v105;
    v6 = v101;
    if (v103 >= v105)
      goto LABEL_104;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEC3FF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *__dst;

  v3 = a1[1];
  result = sub_23DF153B8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23DEC5678(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v107 = result;
  v104 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v95 = v11;
      v106 = v8;
      if (v12 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v96)
            goto LABEL_159;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v12 + 24];
          sub_23DEC6A0C((char *)(v96 + 32 * v99), (char *)(v96 + 32 * *(_QWORD *)&v95[16 * v12 + 16]), v96 + 32 * v100, __dst);
          if (v1)
            break;
          if (v100 < v99)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = sub_23DEF7D18((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_149;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v12 > v102)
            goto LABEL_150;
          memmove(&v98[16 * v12 + 16], &v98[16 * v12 + 32], 16 * (v102 - v12));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v12 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23DF14EFC();
    *(_QWORD *)(v7 + 16) = v6;
    v106 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v105 = *a1 + 8;
  v103 = *a1 - 32;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v108 = v3;
  v109 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 32 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 32 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_23DF15400();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v105 + 32 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 32 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_23DF15400()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 4;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 32 * v20;
        v26 = 32 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = (_OWORD *)(v10 + v26);
            v30 = v10 + v25;
            v31 = *(_QWORD *)(v10 + v26);
            v32 = *(_QWORD *)(v10 + v26 + 8);
            v33 = *(_OWORD *)(v10 + v26 + 16);
            v34 = *(_OWORD *)(v10 + v25 - 16);
            *v29 = *(_OWORD *)(v10 + v25 - 32);
            v29[1] = v34;
            *(_QWORD *)(v30 - 32) = v31;
            *(_QWORD *)(v30 - 24) = v32;
            *(_OWORD *)(v30 - 16) = v33;
          }
          ++v28;
          v25 -= 32;
          v26 += 32;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v107)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DEF77DC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v46 = *((_QWORD *)v11 + 2);
    v45 = *((_QWORD *)v11 + 3);
    v12 = v46 + 1;
    if (v46 >= v45 >> 1)
      v11 = sub_23DEF77DC((char *)(v45 > 1), v46 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v47 = v11 + 32;
    v48 = &v11[16 * v46 + 32];
    *(_QWORD *)v48 = v13;
    *((_QWORD *)v48 + 1) = v9;
    if (v46)
    {
      v10 = v109;
      while (1)
      {
        v49 = v12 - 1;
        if (v12 >= 4)
        {
          v54 = &v47[16 * v12];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_135;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_136;
          v61 = v12 - 2;
          v62 = &v47[16 * v12 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_138;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_141;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_145;
            v77 = v52 < v87;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v78 = *((_QWORD *)v11 + 4);
            v79 = *((_QWORD *)v11 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_99;
          }
          v51 = *((_QWORD *)v11 + 4);
          v50 = *((_QWORD *)v11 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_137;
        v61 = v12 - 2;
        v67 = &v47[16 * v12 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_140;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_143;
        if (__OFADD__(v71, v76))
          goto LABEL_144;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_105:
          if (v77)
            v49 = v61;
          goto LABEL_107;
        }
LABEL_99:
        if ((v72 & 1) != 0)
          goto LABEL_139;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_142;
        if (v83 < v71)
          goto LABEL_15;
LABEL_107:
        v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v89 = v10;
        v90 = &v47[16 * v88];
        v91 = *(_QWORD *)v90;
        v92 = &v47[16 * v49];
        v93 = *((_QWORD *)v92 + 1);
        sub_23DEC6A0C((char *)(v89 + 32 * *(_QWORD *)v90), (char *)(v89 + 32 * *(_QWORD *)v92), v89 + 32 * v93, __dst);
        if (v1)
          goto LABEL_115;
        if (v93 < v91)
          goto LABEL_132;
        if (v49 > *((_QWORD *)v11 + 2))
          goto LABEL_133;
        *(_QWORD *)v90 = v91;
        *(_QWORD *)&v47[16 * v88 + 8] = v93;
        v94 = *((_QWORD *)v11 + 2);
        if (v49 >= v94)
          goto LABEL_134;
        v12 = v94 - 1;
        memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
        *((_QWORD *)v11 + 2) = v94 - 1;
        v77 = v94 > 2;
        v10 = v109;
        if (!v77)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v109;
LABEL_15:
    v3 = v108;
    if (v9 >= v108)
    {
      v8 = v106;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v107))
    goto LABEL_153;
  if (v13 + v107 >= v3)
    v35 = v3;
  else
    v35 = v13 + v107;
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      v36 = v103 + 32 * v9;
      do
      {
        v37 = (uint64_t *)(v10 + 32 * v9);
        v38 = *v37;
        v39 = v37[1];
        v40 = v13;
        v41 = v36;
        do
        {
          v42 = v38 == *(_QWORD *)v41 && v39 == *(_QWORD *)(v41 + 8);
          if (v42 || (sub_23DF15400() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v38 = *(_QWORD *)(v41 + 32);
          v39 = *(_QWORD *)(v41 + 40);
          v43 = *(_OWORD *)(v41 + 48);
          v44 = *(_OWORD *)(v41 + 16);
          *(_OWORD *)(v41 + 32) = *(_OWORD *)v41;
          *(_OWORD *)(v41 + 48) = v44;
          *(_QWORD *)v41 = v38;
          *(_QWORD *)(v41 + 8) = v39;
          *(_OWORD *)(v41 + 16) = v43;
          v41 -= 32;
          ++v40;
        }
        while (v9 != v40);
        ++v9;
        v36 += 32;
      }
      while (v9 != v35);
      v9 = v35;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEC46E0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;

  v124 = a1;
  v2 = a1[1];
  result = sub_23DF153B8();
  if (result >= v2)
  {
    if (v2 < 0)
      goto LABEL_144;
    if (v2)
      return sub_23DEC5748(0, v2, 1, v124);
    return result;
  }
  if (v2 >= 0)
    v4 = v2;
  else
    v4 = v2 + 1;
  if (v2 < -1)
    goto LABEL_152;
  v107 = result;
  if (v2 < 2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    v113 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v2 != 1)
    {
      v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v9 = (char *)MEMORY[0x24BEE4AF8];
LABEL_109:
      v106 = v7;
      if (v10 >= 2)
      {
        v99 = *v124;
        do
        {
          v100 = v10 - 2;
          if (v10 < 2)
            goto LABEL_139;
          if (!v99)
            goto LABEL_151;
          v101 = v9;
          v102 = *(_QWORD *)&v9[16 * v100 + 32];
          v103 = *(_QWORD *)&v9[16 * v10 + 24];
          sub_23DEC6CA4((char *)(v99 + 40 * v102), (char *)(v99 + 40 * *(_QWORD *)&v9[16 * v10 + 16]), v99 + 40 * v103, v113);
          if (v1)
            break;
          if (v103 < v102)
            goto LABEL_140;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v101 = sub_23DEF7D18((uint64_t)v101);
          if (v100 >= *((_QWORD *)v101 + 2))
            goto LABEL_141;
          v104 = &v101[16 * v100 + 32];
          *(_QWORD *)v104 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = *((_QWORD *)v101 + 2);
          if (v10 > v105)
            goto LABEL_142;
          memmove(&v101[16 * v10 + 16], &v101[16 * v10 + 32], 16 * (v105 - v10));
          v9 = v101;
          *((_QWORD *)v101 + 2) = v105 - 1;
          v10 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_120:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v5 = v4 >> 1;
    sub_23DE95524(0, (unint64_t *)&qword_25432D308);
    v6 = sub_23DF14EFC();
    *(_QWORD *)(v6 + 16) = v5;
    v106 = v6;
    v113 = (char *)(v6 + 32);
  }
  v8 = 0;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v11 = v8++;
    v109 = v9;
    v110 = v11;
    if (v8 < v2)
    {
      v12 = v2;
      v13 = *v124;
      sub_23DE902F4(*v124 + 40 * v8, (uint64_t)&v121);
      sub_23DE902F4(v13 + 40 * v11, (uint64_t)v118);
      v14 = v122;
      v15 = v123;
      __swift_project_boxed_opaque_existential_1(&v121, v122);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 40))(&v116, v14, v15);
      v17 = v116;
      v16 = v117;
      v18 = v119;
      v19 = v120;
      __swift_project_boxed_opaque_existential_1(v118, v119);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 40))(&v114, v18, v19);
      if (v17 == v114 && v16 == v115)
        v111 = 0;
      else
        v111 = sub_23DF15400();
      v2 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
      v11 = v110;
      v8 = v110 + 2;
      if (v110 + 2 < v12)
      {
        v20 = v13 + 40 * v110 + 40;
        while (1)
        {
          sub_23DE902F4(v20 + 40, (uint64_t)&v121);
          sub_23DE902F4(v20, (uint64_t)v118);
          v21 = v122;
          v22 = v123;
          __swift_project_boxed_opaque_existential_1(&v121, v122);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 40))(&v116, v21, v22);
          v24 = v116;
          v23 = v117;
          v26 = v119;
          v25 = v120;
          __swift_project_boxed_opaque_existential_1(v118, v119);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 40))(&v114, v26, v25);
          if (v24 != v114)
            goto LABEL_26;
          if (v23 == v115)
            v27 = 0;
          else
LABEL_26:
            v27 = sub_23DF15400();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
          if (((v111 ^ v27) & 1) != 0)
            break;
          ++v8;
          v20 += 40;
          if (v12 == v8)
          {
            v2 = v12;
            v8 = v12;
            v11 = v110;
            goto LABEL_31;
          }
        }
        v11 = v110;
        v2 = v12;
      }
LABEL_31:
      if ((v111 & 1) != 0)
      {
        if (v8 < v11)
          goto LABEL_145;
        if (v11 < v8)
        {
          v28 = 40 * v8 - 40;
          v29 = 40 * v11;
          v30 = v8;
          v31 = v11;
          do
          {
            if (v31 != --v30)
            {
              if (!v13)
                goto LABEL_150;
              v32 = v13 + v29;
              sub_23DE902DC((__int128 *)(v13 + v29), (uint64_t)&v121);
              v33 = *(_QWORD *)(v13 + v28 + 32);
              v34 = *(_OWORD *)(v13 + v28 + 16);
              *(_OWORD *)v32 = *(_OWORD *)(v13 + v28);
              *(_OWORD *)(v32 + 16) = v34;
              *(_QWORD *)(v32 + 32) = v33;
              sub_23DE902DC(&v121, v13 + v28);
            }
            ++v31;
            v28 -= 40;
            v29 += 40;
          }
          while (v31 < v30);
        }
      }
    }
    if (v8 >= v2)
      goto LABEL_59;
    if (__OFSUB__(v8, v11))
      goto LABEL_143;
    if (v8 - v11 >= v107)
      goto LABEL_59;
    if (__OFADD__(v11, v107))
      goto LABEL_146;
    v35 = v11 + v107 >= v2 ? v2 : v11 + v107;
    if (v35 < v11)
      break;
    if (v8 != v35)
    {
      v36 = 40 * v8 - 40;
      v108 = v35;
      do
      {
        v37 = v11;
        v112 = v36;
        while (1)
        {
          v38 = *v124 + v36;
          sub_23DE902F4(v38 + 40, (uint64_t)&v121);
          sub_23DE902F4(v38, (uint64_t)v118);
          v39 = v122;
          v40 = v123;
          __swift_project_boxed_opaque_existential_1(&v121, v122);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v40 + 40))(&v116, v39, v40);
          v42 = v116;
          v41 = v117;
          v43 = v119;
          v44 = v120;
          __swift_project_boxed_opaque_existential_1(v118, v119);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v44 + 40))(&v114, v43, v44);
          if (v42 == v114 && v41 == v115)
            break;
          v45 = sub_23DF15400();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
          if ((v45 & 1) == 0)
            goto LABEL_50;
          v46 = *v124;
          if (!*v124)
            goto LABEL_148;
          v47 = v46 + v36;
          sub_23DE902DC((__int128 *)(v46 + v36 + 40), (uint64_t)&v121);
          v48 = *(_OWORD *)(v47 + 16);
          *(_OWORD *)(v47 + 40) = *(_OWORD *)v47;
          *(_OWORD *)(v47 + 56) = v48;
          *(_QWORD *)(v47 + 72) = *(_QWORD *)(v47 + 32);
          sub_23DE902DC(&v121, v47);
          v36 -= 40;
          if (v8 == ++v37)
            goto LABEL_50;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
LABEL_50:
        ++v8;
        v11 = v110;
        v36 = v112 + 40;
      }
      while (v8 != v108);
      v8 = v108;
    }
LABEL_59:
    if (v8 < v11)
      goto LABEL_138;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v9 = v109;
    else
      v9 = sub_23DEF77DC(0, *((_QWORD *)v109 + 2) + 1, 1, v109);
    v50 = *((_QWORD *)v9 + 2);
    v49 = *((_QWORD *)v9 + 3);
    v10 = v50 + 1;
    if (v50 >= v49 >> 1)
      v9 = sub_23DEF77DC((char *)(v49 > 1), v50 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v10;
    v51 = v9 + 32;
    v52 = &v9[16 * v50 + 32];
    *(_QWORD *)v52 = v11;
    *((_QWORD *)v52 + 1) = v8;
    if (v50)
    {
      while (1)
      {
        v53 = v10 - 1;
        if (v10 >= 4)
        {
          v58 = &v51[16 * v10];
          v59 = *((_QWORD *)v58 - 8);
          v60 = *((_QWORD *)v58 - 7);
          v64 = __OFSUB__(v60, v59);
          v61 = v60 - v59;
          if (v64)
            goto LABEL_127;
          v63 = *((_QWORD *)v58 - 6);
          v62 = *((_QWORD *)v58 - 5);
          v64 = __OFSUB__(v62, v63);
          v56 = v62 - v63;
          v57 = v64;
          if (v64)
            goto LABEL_128;
          v65 = v10 - 2;
          v66 = &v51[16 * v10 - 32];
          v68 = *(_QWORD *)v66;
          v67 = *((_QWORD *)v66 + 1);
          v64 = __OFSUB__(v67, v68);
          v69 = v67 - v68;
          if (v64)
            goto LABEL_130;
          v64 = __OFADD__(v56, v69);
          v70 = v56 + v69;
          if (v64)
            goto LABEL_133;
          if (v70 >= v61)
          {
            v88 = &v51[16 * v53];
            v90 = *(_QWORD *)v88;
            v89 = *((_QWORD *)v88 + 1);
            v64 = __OFSUB__(v89, v90);
            v91 = v89 - v90;
            if (v64)
              goto LABEL_137;
            v81 = v56 < v91;
            goto LABEL_96;
          }
        }
        else
        {
          if (v10 != 3)
          {
            v82 = *((_QWORD *)v9 + 4);
            v83 = *((_QWORD *)v9 + 5);
            v64 = __OFSUB__(v83, v82);
            v75 = v83 - v82;
            v76 = v64;
            goto LABEL_90;
          }
          v55 = *((_QWORD *)v9 + 4);
          v54 = *((_QWORD *)v9 + 5);
          v64 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          v57 = v64;
        }
        if ((v57 & 1) != 0)
          goto LABEL_129;
        v65 = v10 - 2;
        v71 = &v51[16 * v10 - 32];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v74 = __OFSUB__(v72, v73);
        v75 = v72 - v73;
        v76 = v74;
        if (v74)
          goto LABEL_132;
        v77 = &v51[16 * v53];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v64 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v64)
          goto LABEL_135;
        if (__OFADD__(v75, v80))
          goto LABEL_136;
        if (v75 + v80 >= v56)
        {
          v81 = v56 < v80;
LABEL_96:
          if (v81)
            v53 = v65;
          goto LABEL_98;
        }
LABEL_90:
        if ((v76 & 1) != 0)
          goto LABEL_131;
        v84 = &v51[16 * v53];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v64 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v64)
          goto LABEL_134;
        if (v87 < v75)
          goto LABEL_15;
LABEL_98:
        v92 = v53 - 1;
        if (v53 - 1 >= v10)
        {
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
          goto LABEL_147;
        }
        if (!*v124)
          goto LABEL_149;
        v93 = v9;
        v94 = &v51[16 * v92];
        v95 = *(_QWORD *)v94;
        v96 = &v51[16 * v53];
        v97 = *((_QWORD *)v96 + 1);
        sub_23DEC6CA4((char *)(*v124 + 40 * *(_QWORD *)v94), (char *)(*v124 + 40 * *(_QWORD *)v96), *v124 + 40 * v97, v113);
        if (v1)
          goto LABEL_120;
        if (v97 < v95)
          goto LABEL_124;
        if (v53 > *((_QWORD *)v93 + 2))
          goto LABEL_125;
        *(_QWORD *)v94 = v95;
        *(_QWORD *)&v51[16 * v92 + 8] = v97;
        v98 = *((_QWORD *)v93 + 2);
        if (v53 >= v98)
          goto LABEL_126;
        v10 = v98 - 1;
        memmove(&v51[16 * v53], v96 + 16, 16 * (v98 - 1 - v53));
        v9 = v93;
        *((_QWORD *)v93 + 2) = v98 - 1;
        if (v98 <= 2)
          goto LABEL_15;
      }
    }
    v10 = 1;
LABEL_15:
    v2 = v124[1];
    if (v8 >= v2)
    {
      v7 = v106;
      goto LABEL_109;
    }
  }
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DEC5090(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];
  _QWORD v32[6];
  uint64_t v33;

  if (a3 != a2)
  {
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 48 * a3 + 40);
    v25 = result;
    v28 = *a4;
LABEL_4:
    v7 = (uint64_t *)(v5 + 48 * a3);
    v8 = *v7;
    v9 = v7[1];
    v10 = v7[2];
    v11 = v7[3];
    v12 = v7[4];
    v13 = v7[5];
    v27 = v6;
    v29 = a3;
    while (1)
    {
      v14 = *(v6 - 11);
      v16 = *(v6 - 10);
      v15 = v6 - 11;
      v32[0] = v8;
      v32[1] = v9;
      v32[2] = v10;
      v32[3] = v11;
      v32[4] = v12;
      v32[5] = v13;
      v17 = *(v6 - 9);
      v18 = *(v6 - 8);
      v19 = *(v6 - 7);
      v20 = *(v6 - 6);
      v30 = result;
      v31[0] = v14;
      v31[1] = v16;
      v31[2] = v17;
      v31[3] = v18;
      v31[4] = v19;
      v31[5] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = sub_23DEBFF9C((uint64_t)v32, (uint64_t)v31);
      v33 = v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v4 = v33;
      if (v33)
        break;
      if ((v21 & 1) == 0)
      {
        v5 = v28;
        v24 = v29;
LABEL_11:
        a3 = v24 + 1;
        v6 = v27 + 6;
        result = v25;
        if (a3 != a2)
          goto LABEL_4;
        return result;
      }
      v5 = v28;
      if (!v28)
      {
        __break(1u);
        return result;
      }
      v13 = *v6;
      v23 = *(_OWORD *)(v6 - 9);
      v22 = *(_OWORD *)(v6 - 7);
      *(v6 - 6) = *v6;
      v6 -= 6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = v6[4];
      v12 = v6[5];
      v15[3] = *v15;
      v15[4] = v23;
      v15[5] = v22;
      *(v6 - 5) = v8;
      *(v6 - 4) = v9;
      *(v6 - 3) = v10;
      *(v6 - 2) = v11;
      *(v6 - 1) = v12;
      v24 = v29;
      result = v30 + 1;
      if (v29 == v30 + 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_23DEC5230(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v19 = result;
  if (a3 != a2)
  {
    v23 = *a4;
    v4 = *a4 + 48 * a3 + 32;
LABEL_5:
    v24 = a3;
    v5 = (uint64_t *)(v23 + 48 * a3);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[2];
    v9 = v5[3];
    v10 = v19;
    v20 = v4;
    while (1)
    {
      v11 = (_OWORD *)(v4 - 80);
      v12 = *(_QWORD *)(v4 - 64);
      v13 = *(_QWORD *)(v4 - 56);
      if (v6 != *(_QWORD *)(v4 - 80) || v7 != *(_QWORD *)(v4 - 72))
      {
        v21 = *(_QWORD *)(v4 - 56);
        v22 = *(_QWORD *)(v4 - 64);
        result = sub_23DF15400();
        if ((result & 1) != 0)
          goto LABEL_17;
        result = sub_23DF15400();
        v13 = v21;
        v12 = v22;
        if ((result & 1) != 0)
          goto LABEL_4;
      }
      v15 = v8 == v12 && v9 == v13;
      if (v15 || (result = sub_23DF15400(), (result & 1) == 0))
      {
LABEL_4:
        a3 = v24 + 1;
        v4 = v20 + 48;
        if (v24 + 1 == a2)
          return result;
        goto LABEL_5;
      }
LABEL_17:
      if (!v23)
      {
        __break(1u);
        return result;
      }
      v17 = *(_OWORD *)(v4 - 64);
      v16 = *(_OWORD *)(v4 - 48);
      *(_OWORD *)(v4 - 48) = *(_OWORD *)v4;
      v4 -= 48;
      v6 = *(_QWORD *)(v4 + 16);
      v7 = *(_QWORD *)(v4 + 24);
      v8 = *(_QWORD *)(v4 + 32);
      v9 = *(_QWORD *)(v4 + 40);
      v11[3] = *v11;
      v11[4] = v17;
      v11[5] = v16;
      *(_QWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v4 - 24) = v7;
      *(_QWORD *)(v4 - 16) = v8;
      *(_QWORD *)(v4 - 8) = v9;
      if (v24 == ++v10)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_23DEC539C(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v21 = result;
  v31 = a3;
  if (a3 != a2)
  {
    v5 = 48 * v31;
LABEL_6:
    v6 = v21;
    v22 = v5;
    while (1)
    {
      v7 = *a4 + v5;
      sub_23DECD914(v7, (uint64_t)v28);
      sub_23DECD914(v7 - 48, (uint64_t)v25);
      v8 = v29;
      v9 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 40))(v24, v8, v9);
      v11 = v24[0];
      v10 = v24[1];
      v12 = v26;
      v13 = v27;
      __swift_project_boxed_opaque_existential_1(v25, v26);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 40))(v23, v12, v13);
      if (v11 == v23[0] && v10 == v23[1])
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DECD964((uint64_t)v25);
        result = sub_23DECD964((uint64_t)v28);
LABEL_5:
        v5 = v22 + 48;
        if (++v31 == a2)
          return result;
        goto LABEL_6;
      }
      v14 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DECD964((uint64_t)v25);
      result = sub_23DECD964((uint64_t)v28);
      if ((v14 & 1) == 0)
        goto LABEL_5;
      if (!*a4)
        break;
      v15 = (__int128 *)(*a4 + v5);
      v17 = v15[1];
      v16 = v15[2];
      v18 = *v15;
      v19 = *(v15 - 2);
      *v15 = *(v15 - 3);
      v15[1] = v19;
      v15[2] = *(v15 - 1);
      *(v15 - 3) = v18;
      *(v15 - 2) = v17;
      *(v15 - 1) = v16;
      v5 -= 48;
      if (v31 == ++v6)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DEC5584(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (a3 != a2)
  {
    v5 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
    v13 = result;
LABEL_4:
    v9 = *(_QWORD *)(v7 + 8 * v5);
    v10 = (uint64_t *)v8;
    while (1)
    {
      v16 = v9;
      v15 = *v10;
      swift_retain();
      swift_retain();
      v11 = sub_23DEBFAFC(&v16, &v15);
      swift_release();
      result = swift_release();
      if (v4)
        break;
      if ((v11 & 1) != 0)
      {
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v12 = *v10;
        v9 = v10[1];
        *v10 = v9;
        v10[1] = v12;
        --v10;
        if (v5 != ++v6)
          continue;
      }
      ++v5;
      v8 += 8;
      v6 = v13;
      if (v5 != a2)
        goto LABEL_4;
      return result;
    }
  }
  return result;
}

uint64_t sub_23DEC5678(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 - 32;
LABEL_5:
    v9 = (uint64_t *)(v7 + 32 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = result == *(_QWORD *)v12 && v10 == *(_QWORD *)(v12 + 8);
      if (v13 || (result = sub_23DF15400(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *(_QWORD *)(v12 + 32);
      v10 = *(_QWORD *)(v12 + 40);
      v14 = *(_OWORD *)(v12 + 48);
      v15 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)v12;
      *(_OWORD *)(v12 + 48) = v15;
      *(_QWORD *)v12 = result;
      *(_QWORD *)(v12 + 8) = v10;
      *(_OWORD *)(v12 + 16) = v14;
      v12 -= 32;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DEC5748(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v19 = result;
  v29 = a3;
  if (a3 != a2)
  {
    v5 = 40 * v29 - 40;
LABEL_6:
    v6 = v19;
    v20 = v5;
    while (1)
    {
      v7 = *a4 + v5;
      sub_23DE902F4(v7 + 40, (uint64_t)&v26);
      sub_23DE902F4(v7, (uint64_t)v23);
      v8 = v27;
      v9 = v28;
      __swift_project_boxed_opaque_existential_1(&v26, v27);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 40))(v22, v8, v9);
      v11 = v22[0];
      v10 = v22[1];
      v12 = v24;
      v13 = v25;
      __swift_project_boxed_opaque_existential_1(v23, v24);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 40))(v21, v12, v13);
      if (v11 == v21[0] && v10 == v21[1])
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
LABEL_5:
        v5 = v20 + 40;
        if (++v29 == a2)
          return result;
        goto LABEL_6;
      }
      v14 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      if ((v14 & 1) == 0)
        goto LABEL_5;
      v15 = *a4;
      if (!*a4)
        break;
      v16 = v15 + v5;
      sub_23DE902DC((__int128 *)(v15 + v5 + 40), (uint64_t)&v26);
      v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 72) = *(_QWORD *)(v16 + 32);
      result = sub_23DE902DC(&v26, v16);
      v5 -= 40;
      if (v29 == ++v6)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DEC5940(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t result;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  const void *v80[2];
  char *v81;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = a2 - __src;
  v8 = (a2 - __src) / 48;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v81 = __src;
  v80[0] = __dst;
  if (v8 >= v10)
  {
    if (v9 >= -47)
    {
      if (__dst != a2 || &a2[48 * v10] <= __dst)
        memmove(__dst, a2, 48 * v10);
      v32 = &v4[48 * v10];
      v79 = v32;
      v81 = v5;
      if (v6 < v5 && v9 >= 48)
      {
        v33 = (char *)(a3 - 48);
        v34 = v5;
        v57 = v4;
        v65 = v6;
        while (1)
        {
          v61 = v5;
          v63 = v33;
          v59 = (unint64_t)v32;
          v35 = *((_QWORD *)v32 - 6);
          v36 = *((_QWORD *)v32 - 5);
          v32 -= 48;
          v37 = *((_QWORD *)v32 + 2);
          v38 = *((_QWORD *)v32 + 3);
          v39 = *((_QWORD *)v32 + 4);
          v40 = *((_QWORD *)v32 + 5);
          v73 = v35;
          v74 = v36;
          v75 = v37;
          v76 = v38;
          v77 = v39;
          v78 = v40;
          v41 = *((_QWORD *)v34 - 6);
          v42 = *((_QWORD *)v34 - 5);
          v34 -= 48;
          v43 = *((_QWORD *)v34 + 2);
          v44 = *((_QWORD *)v34 + 3);
          v45 = *((_QWORD *)v34 + 4);
          v46 = *((_QWORD *)v34 + 5);
          v67 = v41;
          v68 = v42;
          v69 = v43;
          v70 = v44;
          v71 = v45;
          v72 = v46;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v47 = sub_23DEBFF9C((uint64_t)&v73, (uint64_t)&v67);
          if (v66)
            goto LABEL_40;
          v48 = v47;
          v58 = v63 + 48;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v48 & 1) != 0)
          {
            v32 = (char *)v59;
            v49 = v57;
            v50 = v63;
            v51 = (unint64_t)v65;
            if (v58 != v61 || v63 >= v61)
            {
              v52 = *(_OWORD *)v34;
              v53 = *((_OWORD *)v34 + 2);
              *((_OWORD *)v63 + 1) = *((_OWORD *)v34 + 1);
              *((_OWORD *)v63 + 2) = v53;
              *(_OWORD *)v63 = v52;
            }
            v81 = v34;
          }
          else
          {
            v79 = v32;
            v49 = v57;
            v50 = v63;
            v51 = (unint64_t)v65;
            v34 = v61;
            if ((unint64_t)v58 < v59 || (unint64_t)v63 >= v59 || v58 != (char *)v59)
            {
              v54 = *(_OWORD *)v32;
              v55 = *((_OWORD *)v32 + 2);
              *((_OWORD *)v63 + 1) = *((_OWORD *)v32 + 1);
              *((_OWORD *)v63 + 2) = v55;
              *(_OWORD *)v63 = v54;
            }
          }
          if ((unint64_t)v34 > v51)
          {
            v33 = v50 - 48;
            v5 = v34;
            if (v32 > v49)
              continue;
          }
          break;
        }
      }
LABEL_39:
      sub_23DEF7AE4((void **)&v81, v80, &v79);
      return 1;
    }
  }
  else if (v7 >= -47)
  {
    if (__dst != __src || &__src[48 * v8] <= __dst)
      memmove(__dst, __src, 48 * v8);
    v60 = &v4[48 * v8];
    v79 = v60;
    if ((unint64_t)v5 < a3 && v7 >= 48)
    {
      while (1)
      {
        v64 = v6;
        v11 = *((_QWORD *)v5 + 1);
        v12 = *((_QWORD *)v5 + 2);
        v13 = *((_QWORD *)v5 + 3);
        v14 = *((_QWORD *)v5 + 4);
        v15 = *((_QWORD *)v5 + 5);
        v16 = v5;
        v73 = *(_QWORD *)v5;
        v74 = v11;
        v75 = v12;
        v76 = v13;
        v77 = v14;
        v78 = v15;
        v17 = *(_QWORD *)v4;
        v18 = *((_QWORD *)v4 + 1);
        v19 = *((_QWORD *)v4 + 2);
        v20 = *((_QWORD *)v4 + 3);
        v21 = v4;
        v22 = *((_QWORD *)v4 + 4);
        v23 = *((_QWORD *)v4 + 5);
        v67 = v17;
        v68 = v18;
        v69 = v19;
        v70 = v20;
        v71 = v22;
        v72 = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v24 = sub_23DEBFF9C((uint64_t)&v73, (uint64_t)&v67);
        if (v66)
          break;
        v25 = v24;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
        {
          v26 = v16 + 48;
          v27 = v64;
          v4 = v21;
          if (v64 < v16 || v64 >= v26 || v64 != v16)
          {
            v28 = *(_OWORD *)v16;
            v29 = *((_OWORD *)v16 + 2);
            *((_OWORD *)v64 + 1) = *((_OWORD *)v16 + 1);
            *((_OWORD *)v64 + 2) = v29;
            *(_OWORD *)v64 = v28;
          }
        }
        else
        {
          v27 = v64;
          if (v64 != v21)
          {
            v30 = *(_OWORD *)v21;
            v31 = *((_OWORD *)v21 + 2);
            *((_OWORD *)v64 + 1) = *((_OWORD *)v21 + 1);
            *((_OWORD *)v64 + 2) = v31;
            *(_OWORD *)v64 = v30;
          }
          v4 = v21 + 48;
          v80[0] = v21 + 48;
          v26 = v16;
        }
        v6 = v27 + 48;
        v81 = v6;
        if (v4 < v60)
        {
          v5 = v26;
          if ((unint64_t)v26 < a3)
            continue;
        }
        goto LABEL_39;
      }
LABEL_40:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DEF7AE4((void **)&v81, v80, &v79);
      return 1;
    }
    goto LABEL_39;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC5E00(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  BOOL v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *__dsta;
  char *v48;
  char *v49;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;

  v4 = a2;
  v5 = __src;
  v6 = a2 - __src;
  v7 = (a2 - __src) / 48;
  v8 = a3 - (_QWORD)a2;
  v9 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v54 = __src;
  v53 = a4;
  if (v7 >= v9)
  {
    if (v8 < -47)
      goto LABEL_60;
    if (a4 != a2 || &a2[48 * v9] <= a4)
      memmove(a4, a2, 48 * v9);
    v23 = &a4[48 * v9];
    v52 = v23;
    v54 = v4;
    if (v5 >= v4 || v8 < 48)
    {
LABEL_59:
      sub_23DEF7AE4((void **)&v54, (const void **)&v53, &v52);
      return 1;
    }
    v24 = (char *)(a3 - 48);
    v25 = v4;
    v45 = v5;
    while (1)
    {
      v49 = v24 + 48;
      v51 = (unint64_t)v23;
      v26 = v23 - 48;
      v28 = *((_QWORD *)v23 - 4);
      v27 = *((_QWORD *)v23 - 3);
      v29 = *((_QWORD *)v25 - 6);
      v30 = *((_QWORD *)v25 - 5);
      v25 -= 48;
      v32 = *((_QWORD *)v25 + 2);
      v31 = *((_QWORD *)v25 + 3);
      if (*((_QWORD *)v23 - 6) == v29 && *((_QWORD *)v23 - 5) == v30)
        goto LABEL_43;
      v41 = *((_QWORD *)v25 + 3);
      v42 = *((_QWORD *)v23 - 3);
      v43 = *((_QWORD *)v23 - 4);
      if ((sub_23DF15400() & 1) != 0)
        goto LABEL_48;
      v34 = sub_23DF15400();
      v31 = v41;
      v27 = v42;
      v28 = v43;
      if ((v34 & 1) == 0)
      {
LABEL_43:
        v35 = v28 == v32 && v27 == v31;
        if (!v35 && (sub_23DF15400() & 1) != 0)
        {
LABEL_48:
          if (v49 != v4 || v24 >= v4)
          {
            v36 = *(_OWORD *)v25;
            v37 = *((_OWORD *)v25 + 2);
            *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
            *((_OWORD *)v24 + 2) = v37;
            *(_OWORD *)v24 = v36;
          }
          v54 = v25;
          v23 = (char *)v51;
          if (v25 <= v45)
            goto LABEL_59;
          goto LABEL_58;
        }
      }
      v52 = v26;
      if ((unint64_t)v49 < v51 || (unint64_t)v24 >= v51 || v49 != (char *)v51)
      {
        v38 = *(_OWORD *)v26;
        v39 = *((_OWORD *)v26 + 2);
        *((_OWORD *)v24 + 1) = *((_OWORD *)v26 + 1);
        *((_OWORD *)v24 + 2) = v39;
        *(_OWORD *)v24 = v38;
      }
      v25 = v4;
      v23 = v26;
      if (v4 <= v45)
        goto LABEL_59;
LABEL_58:
      v24 -= 48;
      v4 = v25;
      if (v23 <= a4)
        goto LABEL_59;
    }
  }
  if (v6 >= -47)
  {
    if (a4 != __src || &__src[48 * v7] <= a4)
      memmove(a4, __src, 48 * v7);
    v48 = &a4[48 * v7];
    v52 = v48;
    if ((unint64_t)v4 < a3 && v6 >= 48)
    {
      v10 = a4;
      while (1)
      {
        v12 = (void *)*((_QWORD *)v4 + 2);
        v11 = *((_QWORD *)v4 + 3);
        v13 = (void *)*((_QWORD *)v10 + 2);
        v14 = *((_QWORD *)v10 + 3);
        if (*(_QWORD *)v4 != *(_QWORD *)v10 || *((_QWORD *)v4 + 1) != *((_QWORD *)v10 + 1))
        {
          v44 = *((_QWORD *)v4 + 3);
          __dsta = (void *)*((_QWORD *)v4 + 2);
          if ((sub_23DF15400() & 1) != 0)
            goto LABEL_20;
          v16 = sub_23DF15400();
          v11 = v44;
          v12 = __dsta;
          if ((v16 & 1) != 0)
            goto LABEL_24;
        }
        v17 = v12 == v13 && v11 == v14;
        if (v17 || (sub_23DF15400() & 1) == 0)
        {
LABEL_24:
          if (v5 != v10)
          {
            v21 = *(_OWORD *)v10;
            v22 = *((_OWORD *)v10 + 2);
            *((_OWORD *)v5 + 1) = *((_OWORD *)v10 + 1);
            *((_OWORD *)v5 + 2) = v22;
            *(_OWORD *)v5 = v21;
          }
          v10 += 48;
          v53 = v10;
          v18 = v4;
          goto LABEL_27;
        }
LABEL_20:
        v18 = v4 + 48;
        if (v5 < v4 || v5 >= v18 || v5 != v4)
        {
          v19 = *(_OWORD *)v4;
          v20 = *((_OWORD *)v4 + 2);
          *((_OWORD *)v5 + 1) = *((_OWORD *)v4 + 1);
          *((_OWORD *)v5 + 2) = v20;
          *(_OWORD *)v5 = v19;
        }
LABEL_27:
        v5 += 48;
        if (v10 < v48)
        {
          v4 = v18;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v54 = v5;
        goto LABEL_59;
      }
    }
    goto LABEL_59;
  }
LABEL_60:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC61E4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t result;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v62 = __src;
  v61 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -47)
      goto LABEL_49;
    if (__dst != a2 || &a2[48 * v11] <= __dst)
      memmove(__dst, a2, 48 * v11);
    v27 = &v4[48 * v11];
    v60 = v27;
    v62 = v6;
    if (__src >= v6 || v10 < 48)
    {
LABEL_48:
      sub_23DEF7AE4((void **)&v62, (const void **)&v61, &v60);
      return 1;
    }
    v28 = (char *)(a3 - 48);
    v48 = __src;
    v49 = v4;
    while (1)
    {
      sub_23DECD914((uint64_t)(v27 - 48), (uint64_t)v57);
      v31 = v6 - 48;
      sub_23DECD914((uint64_t)(v6 - 48), (uint64_t)v54);
      v33 = v58;
      v34 = v59;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v34 + 40))(&v52, v33, v34);
      v36 = v52;
      v35 = v53;
      v38 = v55;
      v37 = v56;
      __swift_project_boxed_opaque_existential_1(v54, v55);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 40))(&v50, v38, v37);
      if (v36 != v50)
        goto LABEL_37;
      if (v35 == v51)
        v39 = 0;
      else
LABEL_37:
        v39 = sub_23DF15400();
      v40 = v28 + 48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DECD964((uint64_t)v54);
      sub_23DECD964((uint64_t)v57);
      if ((v39 & 1) != 0)
        break;
      v44 = (unint64_t)v60;
      v27 = v60 - 48;
      v60 -= 48;
      v41 = (unint64_t)v49;
      if ((unint64_t)v40 < v44 || (unint64_t)v28 >= v44)
      {
        v29 = *(_OWORD *)v27;
        v30 = *(_OWORD *)(v44 - 16);
        *((_OWORD *)v28 + 1) = *(_OWORD *)(v44 - 32);
        *((_OWORD *)v28 + 2) = v30;
        *(_OWORD *)v28 = v29;
        v31 = v6;
        goto LABEL_32;
      }
      v32 = v48;
      if (v40 != (char *)v44)
      {
        v45 = *(_OWORD *)v27;
        v46 = *(_OWORD *)(v44 - 16);
        *((_OWORD *)v28 + 1) = *(_OWORD *)(v44 - 32);
        *((_OWORD *)v28 + 2) = v46;
        *(_OWORD *)v28 = v45;
      }
      v31 = v6;
      if (v27 <= v49)
        goto LABEL_48;
LABEL_33:
      v28 -= 48;
      v6 = v31;
      if (v31 <= v32)
        goto LABEL_48;
    }
    v41 = (unint64_t)v49;
    if (v40 != v6 || v28 >= v6)
    {
      v42 = *(_OWORD *)v31;
      v43 = *((_OWORD *)v6 - 1);
      *((_OWORD *)v28 + 1) = *((_OWORD *)v6 - 2);
      *((_OWORD *)v28 + 2) = v43;
      *(_OWORD *)v28 = v42;
    }
    v62 -= 48;
    v27 = v60;
LABEL_32:
    v32 = v48;
    if ((unint64_t)v27 <= v41)
      goto LABEL_48;
    goto LABEL_33;
  }
  if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v12 = (unint64_t)&v4[48 * v9];
    v60 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      while (1)
      {
        sub_23DECD914((uint64_t)v6, (uint64_t)v57);
        sub_23DECD914((uint64_t)v4, (uint64_t)v54);
        v13 = v58;
        v14 = v59;
        __swift_project_boxed_opaque_existential_1(v57, v58);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 40))(&v52, v13, v14);
        v15 = v52;
        v16 = v53;
        v17 = v55;
        v18 = v56;
        __swift_project_boxed_opaque_existential_1(v54, v55);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 40))(&v50, v17, v18);
        if (v15 == v50 && v16 == v51)
          break;
        v19 = sub_23DF15400();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DECD964((uint64_t)v54);
        sub_23DECD964((uint64_t)v57);
        if ((v19 & 1) == 0)
          goto LABEL_16;
        v20 = v62;
        v21 = (unint64_t)(v6 + 48);
        if (v62 >= v6 && (unint64_t)v62 < v21 && v62 == v6)
        {
          v20 = v6;
        }
        else
        {
          v22 = *(_OWORD *)v6;
          v23 = *((_OWORD *)v6 + 2);
          *((_OWORD *)v62 + 1) = *((_OWORD *)v6 + 1);
          *((_OWORD *)v20 + 2) = v23;
          *(_OWORD *)v20 = v22;
        }
LABEL_20:
        v62 = v20 + 48;
        v4 = v61;
        if ((unint64_t)v61 < v12)
        {
          v6 = (char *)v21;
          if (v21 < a3)
            continue;
        }
        goto LABEL_48;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DECD964((uint64_t)v54);
      sub_23DECD964((uint64_t)v57);
LABEL_16:
      v20 = v62;
      v24 = v61 + 48;
      if (v62 != v61 || v62 >= v24)
      {
        v25 = *(_OWORD *)v61;
        v26 = *((_OWORD *)v61 + 2);
        *((_OWORD *)v62 + 1) = *((_OWORD *)v61 + 1);
        *((_OWORD *)v20 + 2) = v26;
        *(_OWORD *)v20 = v25;
      }
      v61 = v24;
      v21 = (unint64_t)v6;
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_49:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC66B4(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t result;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v37 = __src;
  v36 = __dst;
  v32 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      v19 = v4;
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        memmove(__dst, a2, 8 * v13);
        __dst = v32;
      }
      v20 = &__dst[v13];
      v35 = v20;
      v37 = v6;
      if (v7 >= v6 || v11 < 8)
        goto LABEL_48;
      v21 = (uint64_t *)(a3 - 8);
      v22 = v6;
      v31 = v7;
      while (1)
      {
        v23 = v20;
        v24 = *--v20;
        v34 = v24;
        v25 = *--v22;
        v33 = v25;
        swift_retain();
        swift_retain();
        v26 = sub_23DEBFAFC(&v34, &v33);
        if (v19)
          goto LABEL_47;
        v27 = v26;
        v28 = v21 + 1;
        swift_release();
        swift_release();
        if ((v27 & 1) != 0)
        {
          v29 = v32;
          if (v28 != v6 || v21 >= v6)
            *v21 = *v22;
          v37 = v22;
          v19 = 0;
          v20 = v23;
        }
        else
        {
          v35 = v20;
          v29 = v32;
          if (v28 < v23 || v21 >= v23 || v28 != v23)
            *v21 = *v20;
          v22 = v6;
          v19 = 0;
        }
        if (v22 > v31)
        {
          --v21;
          v6 = v22;
          if (v20 > v29)
            continue;
        }
        goto LABEL_48;
      }
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      memmove(__dst, __src, 8 * v10);
      __dst = v32;
    }
    v14 = &__dst[v10];
    v35 = v14;
    if ((unint64_t)v6 >= a3 || v8 < 8)
      goto LABEL_48;
    while (1)
    {
      v34 = *v6;
      v15 = __dst;
      v33 = *__dst;
      swift_retain();
      swift_retain();
      v16 = sub_23DEBFAFC(&v34, &v33);
      if (v4)
        break;
      v17 = v16;
      swift_release();
      swift_release();
      if ((v17 & 1) != 0)
      {
        v18 = v6 + 1;
        if (v7 < v6 || v7 >= v18 || v7 != v6)
          *v7 = *v6;
        __dst = v15;
      }
      else
      {
        if (v7 != v15)
          *v7 = *v15;
        __dst = v15 + 1;
        v36 = v15 + 1;
        v18 = v6;
      }
      v37 = ++v7;
      if (__dst < v14)
      {
        v6 = v18;
        if ((unint64_t)v18 < a3)
          continue;
      }
      goto LABEL_48;
    }
LABEL_47:
    swift_release();
    swift_release();
LABEL_48:
    sub_23DEF7AE0(&v37, &v36, &v35);
    return 1;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC6A0C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 31;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst)
        memmove(__dst, a2, 32 * v13);
      v19 = &v4[32 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        v20 = (char *)(a3 - 32);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 32;
          v23 = *((_QWORD *)v21 - 4);
          v24 = *((_QWORD *)v21 - 3);
          v21 -= 32;
          v25 = *((_QWORD *)v19 - 4) == v23 && *((_QWORD *)v19 - 3) == v24;
          if (v25 || (sub_23DF15400() & 1) == 0)
          {
            v29 = v19 - 32;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
            {
              v27 = *((_OWORD *)v19 - 1);
              *(_OWORD *)v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v27;
            }
            v21 = v6;
            v19 -= 32;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
            {
              v26 = *((_OWORD *)v21 + 1);
              *(_OWORD *)v20 = *(_OWORD *)v21;
              *((_OWORD *)v20 + 1) = v26;
            }
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 32;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst)
      memmove(__dst, __src, 32 * v10);
    v14 = &v4[32 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_23DF15400() & 1) == 0)
        {
          if (v7 != v4)
          {
            v18 = *((_OWORD *)v4 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v18;
          }
          v4 += 32;
          v30 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 32;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *((_OWORD *)v6 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v17;
          }
        }
        v7 += 32;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_23DEF7990((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC6CA4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  uint64_t result;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v62 = __src;
  v61 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -39)
      goto LABEL_49;
    if (__dst != a2 || &a2[40 * v11] <= __dst)
      memmove(__dst, a2, 40 * v11);
    v27 = &v4[40 * v11];
    v60 = v27;
    v62 = v6;
    if (__src >= v6 || v10 < 40)
    {
LABEL_48:
      sub_23DEF7BA0((void **)&v62, (const void **)&v61, &v60);
      return 1;
    }
    v28 = a3 - 40;
    v48 = __src;
    v49 = v4;
    while (1)
    {
      sub_23DE902F4((uint64_t)(v27 - 40), (uint64_t)v57);
      v31 = v6 - 40;
      sub_23DE902F4((uint64_t)(v6 - 40), (uint64_t)v54);
      v33 = v58;
      v34 = v59;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v34 + 40))(&v52, v33, v34);
      v36 = v52;
      v35 = v53;
      v38 = v55;
      v37 = v56;
      __swift_project_boxed_opaque_existential_1(v54, v55);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 40))(&v50, v38, v37);
      if (v36 != v50)
        goto LABEL_37;
      if (v35 == v51)
        v39 = 0;
      else
LABEL_37:
        v39 = sub_23DF15400();
      v40 = (char *)(v28 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      if ((v39 & 1) != 0)
        break;
      v44 = v60;
      v27 = v60 - 40;
      v60 -= 40;
      v41 = (unint64_t)v49;
      if (v40 < v44 || v28 >= (unint64_t)v44)
      {
        v29 = *(_OWORD *)v27;
        v30 = *(_OWORD *)(v44 - 24);
        *(_QWORD *)(v28 + 32) = *((_QWORD *)v44 - 1);
        *(_OWORD *)v28 = v29;
        *(_OWORD *)(v28 + 16) = v30;
        v31 = v6;
        goto LABEL_32;
      }
      v32 = v48;
      if (v40 != v44)
      {
        v45 = *(_OWORD *)v27;
        v46 = *(_OWORD *)(v44 - 24);
        *(_QWORD *)(v28 + 32) = *((_QWORD *)v44 - 1);
        *(_OWORD *)v28 = v45;
        *(_OWORD *)(v28 + 16) = v46;
      }
      v31 = v6;
      if (v27 <= v49)
        goto LABEL_48;
LABEL_33:
      v28 -= 40;
      v6 = v31;
      if (v31 <= v32)
        goto LABEL_48;
    }
    v41 = (unint64_t)v49;
    if (v40 != v6 || v28 >= (unint64_t)v6)
    {
      v42 = *(_OWORD *)v31;
      v43 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v28 + 32) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v28 = v42;
      *(_OWORD *)(v28 + 16) = v43;
    }
    v62 -= 40;
    v27 = v60;
LABEL_32:
    v32 = v48;
    if ((unint64_t)v27 <= v41)
      goto LABEL_48;
    goto LABEL_33;
  }
  if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = (unint64_t)&v4[40 * v9];
    v60 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      while (1)
      {
        sub_23DE902F4((uint64_t)v6, (uint64_t)v57);
        sub_23DE902F4((uint64_t)v4, (uint64_t)v54);
        v13 = v58;
        v14 = v59;
        __swift_project_boxed_opaque_existential_1(v57, v58);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 40))(&v52, v13, v14);
        v15 = v52;
        v16 = v53;
        v17 = v55;
        v18 = v56;
        __swift_project_boxed_opaque_existential_1(v54, v55);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 40))(&v50, v17, v18);
        if (v15 == v50 && v16 == v51)
          break;
        v19 = sub_23DF15400();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
        if ((v19 & 1) == 0)
          goto LABEL_16;
        v20 = v62;
        v21 = (unint64_t)(v6 + 40);
        if (v62 >= v6 && (unint64_t)v62 < v21 && v62 == v6)
        {
          v20 = v6;
        }
        else
        {
          v22 = *(_OWORD *)v6;
          v23 = *((_OWORD *)v6 + 1);
          *((_QWORD *)v62 + 4) = *((_QWORD *)v6 + 4);
          *v20 = v22;
          v20[1] = v23;
        }
LABEL_20:
        v62 = (char *)v20 + 40;
        v4 = v61;
        if ((unint64_t)v61 < v12)
        {
          v6 = (char *)v21;
          if (v21 < a3)
            continue;
        }
        goto LABEL_48;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
LABEL_16:
      v20 = v62;
      v24 = v61 + 40;
      if (v62 != v61 || v62 >= v24)
      {
        v25 = *(_OWORD *)v61;
        v26 = *((_OWORD *)v61 + 1);
        *((_QWORD *)v62 + 4) = *((_QWORD *)v61 + 4);
        *v20 = v25;
        v20[1] = v26;
      }
      v61 = v24;
      v21 = (unint64_t)v6;
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_49:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEC7170(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  sub_23DE95388();
  result = sub_23DF152B0();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v32 & 1) == 0)
          {
            result = swift_release();
            v3 = v31;
            goto LABEL_36;
          }
          v30 = 1 << *(_BYTE *)(v5 + 32);
          if (v30 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v30;
          v3 = v31;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      result = MEMORY[0x242647EB4](*(_QWORD *)(v7 + 40), v21, 4);
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC7408(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_23DE95B00(0, &qword_256D0E3B0, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v35 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_38;
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          v3 = v2;
          if ((v35 & 1) != 0)
          {
            v34 = 1 << *(_BYTE *)(v5 + 32);
            if (v34 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v34;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v24 = v9[v15];
        if (!v24)
        {
          v25 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_31;
          v24 = v9[v25];
          if (!v24)
          {
            while (1)
            {
              v15 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              if (v15 >= v12)
                goto LABEL_31;
              v24 = v9[v15];
              ++v25;
              if (v24)
                goto LABEL_20;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
      if ((v35 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_23DF15478();
      sub_23DF14E3C();
      result = sub_23DF154A8();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v32 = v18 == v31;
          if (v18 == v31)
            v18 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v19);
      *v20 = v28;
      v20[1] = v27;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v19) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC76F0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[4];
  int v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v5 = sub_23DF14BF0();
  v6 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  MEMORY[0x24BDAC7A8](v5, v7);
  v53 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_23DF14BA8();
  v52 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *v3;
  sub_23DE9572C(0, &qword_256D0E420, v6);
  v14 = sub_23DF152B0();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_41;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v49 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v47 = v3;
  v48 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  v51 = v13;
  result = swift_retain();
  v22 = 0;
  v46 = a2;
  v23 = 16;
  if ((a2 & 1) != 0)
    v23 = 32;
  v50 = v23;
  v24 = v23;
  while (1)
  {
    if (v19)
    {
      v26 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v27 = v26 | (v22 << 6);
      goto LABEL_24;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v48)
      break;
    v29 = v49;
    v30 = v49[v28];
    ++v22;
    if (!v30)
    {
      v22 = v28 + 1;
      if (v28 + 1 >= v48)
        goto LABEL_34;
      v30 = v49[v22];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v48)
        {
LABEL_34:
          v43 = v51;
          swift_release();
          v3 = v47;
          if ((v46 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v30 = v49[v31];
        if (!v30)
        {
          while (1)
          {
            v22 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_43;
            if (v22 >= v48)
              goto LABEL_34;
            v30 = v49[v22];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v22 = v31;
      }
    }
LABEL_23:
    v19 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v22 << 6);
LABEL_24:
    v32 = v51;
    v33 = *(_QWORD *)(v52 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v52 + v24))(v12, *(_QWORD *)(v51 + 48) + v33 * v27, v9);
    v34 = *(_QWORD *)(v32 + 56);
    v35 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v24))(v53, v34 + v35 * v27, v55);
    sub_23DE8F998((unint64_t *)&unk_256D0E410, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    result = sub_23DF14DB8();
    v36 = -1 << *(_BYTE *)(v15 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      v25 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v20 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v52 + 32))(*(_QWORD *)(v15 + 48) + v33 * v25, v12, v9);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v15 + 56) + v35 * v25, v53, v55);
    ++*(_QWORD *)(v15 + 16);
  }
  v43 = v51;
  swift_release();
  v3 = v47;
  v29 = v49;
  if ((v46 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v44 = 1 << *(_BYTE *)(v43 + 32);
  if (v44 >= 64)
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v44;
  *(_QWORD *)(v43 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v15;
  return result;
}

uint64_t sub_23DEC7AF8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t i;
  char v39;

  v3 = v2;
  v5 = *v2;
  sub_23DECED0C();
  v39 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v36)
          goto LABEL_33;
        v22 = v37[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_33;
          v22 = v37[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v22 = v37[v13];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v13 = v23;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v28 = *(_QWORD *)(v5 + 56);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v20);
      v31 = *v29;
      v30 = v29[1];
      v32 = v29[2];
      v33 = v29[3];
      v34 = *(_QWORD *)(v28 + 8 * v20);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      result = sub_23DF154A8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 32 * v17);
      *v18 = v31;
      v18[1] = v30;
      v18[2] = v32;
      v18[3] = v33;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC7E1C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v3 = v2;
  v5 = *v2;
  sub_23DECEC24();
  v42 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v40)
          goto LABEL_34;
        v22 = v41[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v40)
            goto LABEL_34;
          v22 = v41[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v40)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((v42 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v5 + 32);
                if (v39 >= 64)
                  bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v39;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v41[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v13 >= v40)
                  goto LABEL_34;
                v22 = v41[v13];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v13 = v23;
          }
        }
LABEL_21:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v24 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v20);
      v26 = *v24;
      v25 = v24[1];
      v28 = v24[2];
      v27 = v24[3];
      v29 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v20);
      if ((v42 & 1) != 0)
      {
        v30 = *v29;
        v31 = v29[2];
        v44 = v29[1];
        v45 = v31;
        v43 = v30;
      }
      else
      {
        sub_23DECD914((uint64_t)v29, (uint64_t)&v43);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      result = sub_23DF154A8();
      v32 = -1 << *(_BYTE *)(v7 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v11 + 8 * v34);
        }
        while (v38 == -1);
        v14 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 32 * v14);
      *v15 = v26;
      v15[1] = v25;
      v15[2] = v28;
      v15[3] = v27;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v14);
      v17 = v43;
      v18 = v45;
      v16[1] = v44;
      v16[2] = v18;
      *v16 = v17;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC8164(uint64_t a1, char a2)
{
  return sub_23DEC8178(a1, a2, (void (*)(_QWORD))sub_23DE954A8, (void (*)(uint64_t, _BYTE *))sub_23DE902DC);
}

uint64_t sub_23DEC8178(uint64_t a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  _BYTE v43[48];

  v5 = v4;
  v7 = *v4;
  a3(0);
  v41 = a2;
  v8 = sub_23DF152B0();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_41;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v40 = v7 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v7 + 64);
  v38 = v4;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_22;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v39)
      break;
    v21 = (_QWORD *)(v7 + 64);
    v22 = *(_QWORD *)(v40 + 8 * v20);
    ++v15;
    if (!v22)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_34;
      v22 = *(_QWORD *)(v40 + 8 * v15);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v39)
        {
LABEL_34:
          swift_release();
          v5 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v40 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v15 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v15 >= v39)
              goto LABEL_34;
            v22 = *(_QWORD *)(v40 + 8 * v15);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v15 = v23;
      }
    }
LABEL_21:
    v12 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_22:
    v24 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 32 * v19);
    v26 = *v24;
    v25 = v24[1];
    v27 = v24[2];
    v28 = v24[3];
    v29 = *(_QWORD *)(v7 + 56) + 40 * v19;
    if ((v41 & 1) != 0)
    {
      a4(v29, v43);
    }
    else
    {
      sub_23DE902F4(v29, (uint64_t)v43);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23DF15478();
    swift_bridgeObjectRetain();
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    result = sub_23DF154A8();
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v16 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 32 * v16);
    *v17 = v26;
    v17[1] = v25;
    v17[2] = v27;
    v17[3] = v28;
    result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v43, *(_QWORD *)(v9 + 56) + 40 * v16);
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v5 = v38;
  v21 = (_QWORD *)(v7 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 >= 64)
    bzero(v21, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v9;
  return result;
}

uint64_t sub_23DEC84CC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  int v43;

  v3 = v2;
  v5 = sub_23DF14BA8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_23DE9572C(0, (unint64_t *)&unk_256D0EE80, (void (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal.Presenter);
  v43 = a2;
  v11 = sub_23DF152B0();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_34;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v40)
              goto LABEL_34;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      v29 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      v29 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    sub_23DE8F998((unint64_t *)&unk_256D0E410, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    result = sub_23DF14DB8();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v10 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_23DEC886C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t i;
  char v39;
  uint64_t v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  sub_23DECEA7C();
  v39 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v36)
          goto LABEL_33;
        v22 = v37[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_33;
          v22 = v37[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v22 = v37[v13];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v13 = v23;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v28 = *(_QWORD *)(v5 + 56);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 48 * v20);
      v30 = *v29;
      v31 = v29[1];
      v33 = v29[2];
      v32 = v29[3];
      v34 = v29[5];
      v40 = v29[4];
      v41 = *(_OWORD *)(v28 + 16 * v20);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_23DF154A8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 48 * v17);
      *v18 = v30;
      v18[1] = v31;
      v18[2] = v33;
      v18[3] = v32;
      v18[4] = v40;
      v18[5] = v34;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v41;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC8BEC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;

  v3 = v2;
  v5 = *v2;
  sub_23DECED74(0, (unint64_t *)&qword_25432DAA8, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x24BEE30A0]);
  v41 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    v40 = v5;
    while (1)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v42 = v13;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v38)
          goto LABEL_33;
        v22 = v39[v21];
        v23 = v13 + 1;
        if (!v22)
        {
          v23 = v13 + 2;
          if (v13 + 2 >= v38)
            goto LABEL_33;
          v22 = v39[v23];
          if (!v22)
          {
            v24 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v39[v24];
            if (!v22)
            {
              while (1)
              {
                v23 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v23 >= v38)
                  goto LABEL_33;
                v22 = v39[v23];
                ++v24;
                if (v22)
                  goto LABEL_30;
              }
            }
            v23 = v13 + 3;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v42 = v23;
        v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v29 = *(_QWORD *)(v5 + 56);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 48 * v20);
      v32 = *v30;
      v31 = v30[1];
      v34 = v30[2];
      v33 = v30[3];
      v35 = v30[5];
      v43 = v30[4];
      v36 = *(_QWORD *)(v29 + 8 * v20);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_23DF154A8();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 48 * v17);
      *v18 = v32;
      v18[1] = v31;
      v18[2] = v34;
      v18[3] = v33;
      v18[4] = v43;
      v18[5] = v35;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v36;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
      v13 = v42;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC8F7C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_23DE95B00(0, qword_25432DAB0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v42 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23DF15478();
    sub_23DF14E3C();
    result = sub_23DF154A8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC92B4(uint64_t a1, char a2)
{
  return sub_23DEC92D8(a1, a2, sub_23DECD8DC);
}

uint64_t sub_23DEC92C0(uint64_t a1, char a2)
{
  return sub_23DEC92D8(a1, a2, (void (*)(_QWORD))sub_23DE95A84);
}

uint64_t sub_23DEC92CC(uint64_t a1, char a2)
{
  return sub_23DEC92D8(a1, a2, sub_23DECD8F8);
}

uint64_t sub_23DEC92D8(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v37 = a2;
  v7 = sub_23DF152B0();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23DF15478();
    sub_23DF14E3C();
    result = sub_23DF154A8();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_23DEC95E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  sub_23DE9528C(0, &qword_256D0E3D8, (void (*)(uint64_t))sub_23DE95334);
  result = sub_23DF152B0();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = v3;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v31[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v31[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v31[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v31[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        swift_unknownObjectRetain();
      result = MEMORY[0x242647EB4](*(_QWORD *)(v7 + 40), v27, 4);
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v17) = v27;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC98AC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_23DE9528C(0, &qword_256D0E3C8, (void (*)(uint64_t))sub_23DE952E8);
  result = sub_23DF152B0();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    v31 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      result = MEMORY[0x242647EB4](*(_QWORD *)(v7 + 40), v21, 4);
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC9B58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_23DE95B00(0, &qword_256D0E3A8, MEMORY[0x24BEE3F88], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v37 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_23DF15478();
    sub_23DF14E3C();
    result = sub_23DF154A8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DEC9E74(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  sub_23DE95140();
  v6 = a2;
  v7 = sub_23DF152B0();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      sub_23DF15478();
      sub_23DF14E3C();
      result = sub_23DF154A8();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_23DECA178(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39[2];

  v3 = v2;
  v5 = *v2;
  sub_23DECE940();
  v38 = a2;
  v6 = sub_23DF152B0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_34;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_34:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v36)
              goto LABEL_34;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 24 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = v22[2];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v38 & 1) != 0)
    {
      sub_23DE902DC(v26, (uint64_t)v39);
    }
    else
    {
      sub_23DE902F4((uint64_t)v26, (uint64_t)v39);
      swift_bridgeObjectRetain();
    }
    sub_23DF15478();
    swift_bridgeObjectRetain();
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    sub_23DF15484();
    result = sub_23DF154A8();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 24 * v14);
    *v15 = v24;
    v15[1] = v23;
    v15[2] = v25;
    result = sub_23DE902DC(v39, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_23DECA4C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DE95388();
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    if (!v21)
      break;
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void *sub_23DECA63C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_23DE95B00(0, &qword_256D0E3B0, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    if (!v23)
      break;
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void *sub_23DECA7E4()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v1 = sub_23DF14BF0();
  v2 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v45 = v1;
  v41 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1, v3);
  v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_23DF14BA8();
  v40 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43, v5);
  v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE9572C(0, &qword_256D0E420, v2);
  v37 = v0;
  v7 = *v0;
  v8 = sub_23DF152A4();
  v9 = *(_QWORD *)(v7 + 16);
  v47 = v8;
  if (!v9)
  {
    result = (void *)swift_release();
    v36 = v47;
    v35 = v37;
LABEL_28:
    *v35 = v36;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  v39 = (const void *)(v7 + 64);
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, v39, 8 * v12);
    v10 = v47;
  }
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v46 = v7;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v38 = (unint64_t)(v15 + 63) >> 6;
  v18 = v40;
  v19 = v41;
  v21 = v42;
  v20 = v43;
  v22 = v45;
  v23 = v47;
  while (1)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v48 = v14;
      v25 = v24 | (v14 << 6);
      v26 = v46;
      goto LABEL_12;
    }
    v31 = v14 + 1;
    v26 = v46;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v38)
      goto LABEL_26;
    v32 = *((_QWORD *)v39 + v31);
    v33 = v14 + 1;
    if (!v32)
    {
      v33 = v31 + 1;
      if (v31 + 1 >= v38)
        goto LABEL_26;
      v32 = *((_QWORD *)v39 + v33);
      if (!v32)
        break;
    }
LABEL_25:
    v17 = (v32 - 1) & v32;
    v48 = v33;
    v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_12:
    v27 = *(_QWORD *)(v18 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v21, *(_QWORD *)(v26 + 48) + v27, v20);
    v28 = *(_QWORD *)(v19 + 72) * v25;
    v29 = *(_QWORD *)(v26 + 56) + v28;
    v30 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v44, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v23 + 48) + v27, v21, v20);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(_QWORD *)(v23 + 56) + v28, v30, v22);
    v14 = v48;
  }
  v34 = v31 + 2;
  if (v34 >= v38)
  {
LABEL_26:
    result = (void *)swift_release();
    v35 = v37;
    v36 = v47;
    goto LABEL_28;
  }
  v32 = *((_QWORD *)v39 + v34);
  if (v32)
  {
    v33 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v33 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v33 >= v38)
      goto LABEL_26;
    v32 = *((_QWORD *)v39 + v33);
    ++v34;
    if (v32)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DECAAD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_23DECED0C();
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 32 * v15);
    v18 = v17[1];
    v20 = v17[2];
    v19 = v17[3];
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = *v17;
    v23[1] = v18;
    v23[2] = v20;
    v23[3] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECAC9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  _OWORD v30[3];

  sub_23DECEC24();
  v27 = v0;
  v1 = *v0;
  v2 = sub_23DF152A4();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v28 = v1 + 64;
  v29 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    v24 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v7;
    if (!v25)
    {
      v7 = v24 + 1;
      if (v24 + 1 >= v29)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v7);
      if (!v25)
        break;
    }
LABEL_25:
    v10 = (v25 - 1) & v25;
    v12 = __clz(__rbit64(v25)) + (v7 << 6);
LABEL_12:
    v13 = 32 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 32 * v12);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    v19 = 48 * v12;
    sub_23DECD914(*(_QWORD *)(v1 + 56) + 48 * v12, (uint64_t)v30);
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v13);
    *v20 = v15;
    v20[1] = v16;
    v20[2] = v17;
    v20[3] = v18;
    v21 = (_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    v23 = v30[1];
    v22 = v30[2];
    *v21 = v30[0];
    v21[1] = v23;
    v21[2] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v29)
    goto LABEL_26;
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v7 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v7 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v7);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECAE98()
{
  return sub_23DECAEAC((void (*)(_QWORD))sub_23DE954A8, (void (*)(_BYTE *, uint64_t))sub_23DE902DC);
}

void *sub_23DECAEAC(void (*a1)(_QWORD), void (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  _BYTE v30[40];

  a1(0);
  v26 = v2;
  v3 = *v2;
  v4 = sub_23DF152A4();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v3 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v10 = 1 << *(_BYTE *)(v3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v3 + 64);
  v27 = v3 + 64;
  v28 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v14 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v15 = 32 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = v16[3];
    v21 = 40 * v14;
    sub_23DE902F4(*(_QWORD *)(v3 + 56) + 40 * v14, (uint64_t)v30);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v15);
    *v22 = v17;
    v22[1] = v18;
    v22[2] = v19;
    v22[3] = v20;
    a2(v30, *(_QWORD *)(v5 + 56) + v21);
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v28)
    goto LABEL_26;
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_23DECB0AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = sub_23DF14BA8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE9572C(0, (unint64_t *)&unk_256D0EE80, (void (*)(uint64_t))type metadata accessor for FileCoordinatorInputSignal.Presenter);
  v25 = v0;
  v6 = *v0;
  v7 = sub_23DF152A4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v25 = v8;
    return result;
  }
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = v6 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECB2E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_23DECEA7C();
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 48 * v15);
    v18 = v17[1];
    v19 = v17[2];
    v20 = v17[3];
    v22 = v17[4];
    v21 = v17[5];
    v23 = 16 * v15;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v23);
    *v24 = *v17;
    v24[1] = v18;
    v24[2] = v19;
    v24[3] = v20;
    v24[4] = v22;
    v24[5] = v21;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v23) = v25;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECB4CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_23DECED74(0, (unint64_t *)&qword_25432DAA8, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 48 * v15);
    v18 = v17[1];
    v19 = v17[2];
    v20 = v17[3];
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v24 = v17[4];
    v23 = v17[5];
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = *v17;
    v25[1] = v18;
    v25[2] = v19;
    v25[3] = v20;
    v25[4] = v24;
    v25[5] = v23;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECB6B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_23DE95B00(0, qword_25432DAB0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECB884()
{
  return sub_23DECB8A8(sub_23DECD8DC);
}

void *sub_23DECB890()
{
  return sub_23DECB8A8((void (*)(_QWORD))sub_23DE95A84);
}

void *sub_23DECB89C()
{
  return sub_23DECB8A8(sub_23DECD8F8);
}

void *sub_23DECB8A8(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_23DF152A4();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECBA5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DE9528C(0, &qword_256D0E3D8, (void (*)(uint64_t))sub_23DE95334);
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_unknownObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECBC0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  sub_23DE9528C(0, &qword_256D0E3C8, (void (*)(uint64_t))sub_23DE952E8);
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECBDA8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_23DE95B00(0, &qword_256D0E3A8, MEMORY[0x24BEE3F88], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECBF68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_23DE95140();
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_unknownObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DECC124()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27[2];

  v1 = v0;
  sub_23DECE940();
  v2 = *v0;
  v3 = sub_23DF152A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  v26 = v2 + 64;
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v12)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v8);
      if (!v23)
        break;
    }
LABEL_25:
    v11 = (v23 - 1) & v23;
    v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_12:
    v15 = 24 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 24 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = v16[2];
    v20 = 40 * v14;
    sub_23DE902F4(*(_QWORD *)(v2 + 56) + 40 * v14, (uint64_t)v27);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v15);
    *v21 = v18;
    v21[1] = v17;
    v21[2] = v19;
    sub_23DE902DC(v27, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v12)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v8 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v8);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23DECC31C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_23DECE8E8();
  result = sub_23DF15178();
  v9 = result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  v35 = v4;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v34)
      goto LABEL_36;
    v16 = v33[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v34)
        goto LABEL_36;
      v16 = v33[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v34)
          goto LABEL_36;
        v16 = v33[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    sub_23DF15478();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    result = sub_23DF154A8();
    v23 = -1 << *(_BYTE *)(v9 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    v31 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 32 * v26);
    *v31 = v19;
    v31[1] = v20;
    v31[2] = v21;
    v31[3] = v22;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v4 = v35;
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= v34)
    goto LABEL_36;
  v16 = v33[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v34)
      goto LABEL_36;
    v16 = v33[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_23DECC5BC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_23DECC65C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_23DECC740(uint64_t a1, __int128 *a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v11 = (_QWORD *)*a4;
  v13 = sub_23DEA64E4((uint64_t)a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_23DECB2E0();
LABEL_7:
    v19 = (_QWORD *)*a4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = (_QWORD *)(v19[7] + 16 * v13);
      result = swift_unknownObjectRelease();
      *v20 = a1;
      v20[1] = a6;
      return result;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v24 = (_OWORD *)(v19[6] + 48 * v13);
    v25 = *a2;
    v26 = a2[2];
    v24[1] = a2[1];
    v24[2] = v26;
    *v24 = v25;
    v27 = (_QWORD *)(v19[7] + 16 * v13);
    *v27 = a1;
    v27[1] = a6;
    v28 = v19[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v19[2] = v30;
      return sub_23DEAEBB0((uint64_t)a2);
    }
    goto LABEL_14;
  }
  sub_23DEC886C(v16, a3 & 1);
  v22 = sub_23DEA64E4((uint64_t)a2);
  if ((v17 & 1) == (v23 & 1))
  {
    v13 = v22;
    v19 = (_QWORD *)*a4;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DECC8A8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23DECC930(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  _QWORD v24[3];

  v4 = a1[5];
  v5 = a1[6];
  v6 = __swift_project_boxed_opaque_existential_1(a1 + 2, v4);
  v7 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v6, v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v24, v4, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
  v11 = v24[0];
  v10 = v24[1];
  v12 = a2[5];
  v13 = a2[6];
  v14 = __swift_project_boxed_opaque_existential_1(a2 + 2, v12);
  v15 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v14, v14);
  v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v17);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 40))(v23, v12, v13);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v12);
  if (v11 == v23[0] && v10 == v23[1])
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_beginAccess();
    v20 = a1[7];
    swift_beginAccess();
    v21 = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = sub_23DEA2654(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19 & 1;
  }
  v18 = sub_23DF15400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = 0;
  if ((v18 & 1) != 0)
    goto LABEL_5;
  return v19 & 1;
}

uint64_t sub_23DECCB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return MEMORY[0x24BEE4AF8];
  v7 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v9 = v7[3];
    v10 = v7[4];
    __swift_project_boxed_opaque_existential_1(v7, v9);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v10 + 8))(a2, a3, a4, &off_250EB0920, v9, v10);
    v12 = *(_QWORD *)(v11 + 16);
    v13 = v8[2];
    v14 = v13 + v12;
    if (__OFADD__(v13, v12))
      break;
    v15 = v11;
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v14 <= v8[3] >> 1)
    {
      if (*(_QWORD *)(v15 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v13 <= v14)
        v17 = v13 + v12;
      else
        v17 = v13;
      v8 = sub_23DF06AA8(isUniquelyReferenced_nonNull_native, v17, 1, v8);
      if (*(_QWORD *)(v15 + 16))
      {
LABEL_14:
        v18 = v8[2];
        if ((v8[3] >> 1) - v18 < v12)
          goto LABEL_28;
        v19 = (unint64_t)&v8[5 * v18 + 4];
        if (v15 + 32 < v19 + 40 * v12 && v19 < v15 + 32 + 40 * v12)
          goto LABEL_30;
        sub_23DE95524(0, (unint64_t *)&qword_25432D308);
        swift_arrayInitWithCopy();
        if (v12)
        {
          v21 = v8[2];
          v22 = __OFADD__(v21, v12);
          v23 = v21 + v12;
          if (v22)
            goto LABEL_29;
          v8[2] = v23;
        }
        goto LABEL_4;
      }
    }
    if (v12)
      goto LABEL_27;
LABEL_4:
    swift_bridgeObjectRelease();
    v7 += 5;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  swift_release();
  swift_unknownObjectRelease();
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DECCD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  __int128 v41;

  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v35 = *(_QWORD *)(a1 + 16);
  if (!v35)
    return MEMORY[0x24BEE4AF8];
  v34 = a1 + 32;
  swift_bridgeObjectRetain();
  v4 = 0;
  v5 = v3;
  while (1)
  {
    v6 = (_QWORD *)(v34 + 40 * v4);
    v7 = v6[3];
    v40 = v6 + 3;
    v8 = v6[4];
    v39 = v6 + 4;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a3, v7, v8);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v38 = v5;
      sub_23DEAA438(0, v10, 0);
      v11 = 0;
      v12 = v3;
      do
      {
        v41 = *(_OWORD *)(v9 + 16 * v11 + 32);
        v13 = *v40;
        v14 = *v39;
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v34 + 40 * v4), *v40);
        v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
        swift_unknownObjectRetain();
        v16 = v15(v13, v14);
        v18 = v17;
        v20 = v12[2];
        v19 = v12[3];
        if (v20 >= v19 >> 1)
          sub_23DEAA438(v19 > 1, v20 + 1, 1);
        ++v11;
        v12[2] = v20 + 1;
        v21 = &v12[4 * v20];
        v21[4] = v16;
        v21[5] = v18;
        *((_OWORD *)v21 + 3) = v41;
      }
      while (v10 != v11);
      swift_bridgeObjectRelease();
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v5 = v38;
    }
    else
    {
      swift_bridgeObjectRelease();
      v12 = v3;
    }
    v22 = v12[2];
    v23 = v5[2];
    v24 = v23 + v22;
    if (__OFADD__(v23, v22))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v24 <= v5[3] >> 1)
    {
      if (v12[2])
        goto LABEL_21;
    }
    else
    {
      if (v23 <= v24)
        v26 = v23 + v22;
      else
        v26 = v23;
      v5 = sub_23DF06988((_QWORD *)isUniquelyReferenced_nonNull_native, v26, 1, v5);
      if (v12[2])
      {
LABEL_21:
        v27 = v5[2];
        if ((v5[3] >> 1) - v27 < v22)
          goto LABEL_35;
        v28 = (unint64_t)&v5[4 * v27 + 4];
        if ((unint64_t)(v12 + 4) < v28 + 32 * v22 && v28 < (unint64_t)&v12[4 * v22 + 4])
          goto LABEL_37;
        sub_23DEABD0C();
        swift_arrayInitWithCopy();
        if (v22)
        {
          v30 = v5[2];
          v31 = __OFADD__(v30, v22);
          v32 = v30 + v22;
          if (v31)
            goto LABEL_36;
          v5[2] = v32;
        }
        goto LABEL_4;
      }
    }
    if (v22)
      goto LABEL_34;
LABEL_4:
    ++v4;
    swift_bridgeObjectRelease();
    if (v4 == v35)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v5;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  swift_unknownObjectRelease();
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_23DECD07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v1);
  return swift_deallocObject();
}

void sub_23DECD144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_23DEBCC9C(v0 + v4, (v0 + ((v4 + *(_QWORD *)(v3 + 64) + v5) & ~v5)), v1, v2);
}

uint64_t type metadata accessor for Orchestrator()
{
  return objc_opt_self();
}

uint64_t method lookup function for Orchestrator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Orchestrator.__allocating_init(context:inputSignalProviders:executorProviders:workQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t type metadata accessor for Orchestrator.InputSignalSetupRecord()
{
  return objc_opt_self();
}

uint64_t destroy for Orchestrator.AnyConfiguration(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for Orchestrator.AnyConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for Orchestrator.AnyConfiguration(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for Orchestrator.AnyConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Orchestrator.AnyConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Orchestrator.AnyConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Orchestrator.AnyConfiguration()
{
  return &type metadata for Orchestrator.AnyConfiguration;
}

uint64_t destroy for Orchestrator.State(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Orchestrator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v8 = (_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }
  return a1;
}

uint64_t assignWithCopy for Orchestrator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  if (!v4)
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v5;
      *(_QWORD *)(a1 + 64) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Orchestrator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (!v5)
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v4;
      *(_QWORD *)(a1 + 64) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Orchestrator.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Orchestrator.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Orchestrator.State()
{
  return &type metadata for Orchestrator.State;
}

uint64_t initializeWithCopy for Orchestrator.InputSignalObserverShim.State(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for Orchestrator.InputSignalObserverShim.State(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for Orchestrator.InputSignalObserverShim.State(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for Orchestrator.InputSignalObserverShim.State(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for Orchestrator.InputSignalObserverShim.State(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Orchestrator.InputSignalObserverShim.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Orchestrator.InputSignalObserverShim.State()
{
  return &type metadata for Orchestrator.InputSignalObserverShim.State;
}

unint64_t sub_23DECD880()
{
  unint64_t result;

  result = qword_25432D3A8[0];
  if (!qword_25432D3A8[0])
  {
    result = MEMORY[0x2426483D0](&unk_23DF18768, &type metadata for Orchestrator.AnyConfiguration);
    atomic_store(result, qword_25432D3A8);
  }
  return result;
}

_QWORD *sub_23DECD8C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_23DEC0284(a1, v2, a2);
}

void sub_23DECD8DC(uint64_t a1)
{
  sub_23DE95A00(a1, (unint64_t *)&unk_25432DAD0, (uint64_t (*)(uint64_t))sub_23DE95A68, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
}

void sub_23DECD8F8(uint64_t a1)
{
  sub_23DE95A00(a1, &qword_25432DAE0, (uint64_t (*)(uint64_t))sub_23DE9544C, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
}

uint64_t sub_23DECD914(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_23DECD964(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DECD990(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  sub_23DE95570();
  result = sub_23DF14F98();
  v10 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DEE68AC(&v9, v5, v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 4;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_23DECDA4C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DECDA78()
{
  uint64_t v0;
  Swift::OpaquePointer v1;

  v1._rawValue = *(void **)(v0 + 24);
  sub_23DEB6854(v1);
}

uint64_t sub_23DECDA9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DECDAC0()
{
  uint64_t v0;

  return sub_23DEECAA0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DECDAC8()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void sub_23DECDB04()
{
  uint64_t v0;

  sub_23DEBBC64(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23DECDB10()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DECDB38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23DEBBF1C(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24);
}

unint64_t sub_23DECDB44(unint64_t result)
{
  if (result >= 3)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_23DECDBC4(unint64_t result)
{
  if (result >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23DECDC40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD v32[4];
  uint64_t v33;
  _BYTE v34[48];
  uint64_t v35;

  v27 = (unint64_t *)result;
  v4 = 0;
  v5 = 0;
  v35 = a3;
  v8 = *(_QWORD *)(a3 + 64);
  v6 = a3 + 64;
  v7 = v8;
  v9 = 1 << *(_BYTE *)(v6 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v7;
  v29 = v6;
  v30 = (unint64_t)(v9 + 63) >> 6;
  v28 = (_QWORD *)(a4 + 40);
  while (v11)
  {
    v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v13 = v12 | (v5 << 6);
LABEL_21:
    v17 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 32 * v13);
    v18 = *v17;
    v19 = v17[1];
    v21 = v17[2];
    v20 = v17[3];
    sub_23DE902F4(*(_QWORD *)(v35 + 56) + 40 * v13, (uint64_t)v34);
    v32[0] = v18;
    v32[1] = v19;
    v32[2] = v21;
    v32[3] = v20;
    sub_23DE902F4((uint64_t)v34, (uint64_t)&v33);
    v22 = *(_QWORD *)(a4 + 16);
    if (v22)
    {
      v23 = v28;
      while (1)
      {
        v24 = *(v23 - 1) == v18 && *v23 == v19;
        if (v24 || (sub_23DF15400() & 1) != 0)
          break;
        v23 += 4;
        if (!--v22)
          goto LABEL_4;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_23DE9A9BC((uint64_t)v32, (uint64_t (*)(_QWORD))sub_23DECDEF8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v27 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return sub_23DEFF338(v27, a2, v4, v35);
      }
    }
    else
    {
LABEL_4:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_23DE9A9BC((uint64_t)v32, (uint64_t (*)(_QWORD))sub_23DECDEF8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v14 >= v30)
    return sub_23DEFF338(v27, a2, v4, v35);
  v15 = *(_QWORD *)(v29 + 8 * v14);
  ++v5;
  if (v15)
    goto LABEL_20;
  v5 = v14 + 1;
  if (v14 + 1 >= v30)
    return sub_23DEFF338(v27, a2, v4, v35);
  v15 = *(_QWORD *)(v29 + 8 * v5);
  if (v15)
    goto LABEL_20;
  v5 = v14 + 2;
  if (v14 + 2 >= v30)
    return sub_23DEFF338(v27, a2, v4, v35);
  v15 = *(_QWORD *)(v29 + 8 * v5);
  if (v15)
  {
LABEL_20:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_21;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    return sub_23DEFF338(v27, a2, v4, v35);
  v15 = *(_QWORD *)(v29 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v30)
      return sub_23DEFF338(v27, a2, v4, v35);
    v15 = *(_QWORD *)(v29 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_23DECDEF8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432E1E8)
  {
    sub_23DE95524(255, qword_25432C070);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432E1E8);
  }
}

uint64_t sub_23DECDF74(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_23DECEC84();
  result = sub_23DF14F98();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_23DEA8704(v4, (uint64_t)v5);
      sub_23DEE61DC((uint64_t)v6, (uint64_t)v5);
      sub_23DEA8740((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_23DECDFFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = sub_23DF14C50();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2, MEMORY[0x24BDCF290]);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  sub_23DE8F998(&qword_25432E0C0, v11, MEMORY[0x24BDCF2A8]);
  result = sub_23DF14F98();
  v17 = result;
  if (v10)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_23DEE639C((uint64_t)v9, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v13 += v14;
      --v10;
    }
    while (v10);
    return v17;
  }
  return result;
}

uint64_t sub_23DECE124(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v2 = sub_23DF14BA8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x24BDAC7A8](v2, v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v9);
  v11 = (char *)&v21 - v10;
  sub_23DE95234(0, &qword_256D0E858, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v21 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  sub_23DE8F998((unint64_t *)&unk_256D0E410, v3, MEMORY[0x24BDCDAF0]);
  v22 = sub_23DF14F98();
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v21 = *(_QWORD *)(v4 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v18(v15, v17, v2);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v19(v15, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v15, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v8, v15, v2);
      sub_23DEE6AA0((uint64_t)v11, v8);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v2);
      v17 += v21;
      if (!--v16)
        goto LABEL_7;
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v19(v15, 1, 1, v2);
  }
  return v22;
}

uint64_t sub_23DECE300(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23DF14F98();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23DEE6700(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_23DECE394(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  sub_23DECE9BC();
  result = sub_23DF14F98();
  v9 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v4 += 3;
      swift_bridgeObjectRetain();
      sub_23DEE6D04(&v8, v5, v6, v7);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_23DECE42C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v26 = (unint64_t *)result;
  v27 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(a3 + 56);
  v28 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v29 = (unint64_t)(v7 + 63) >> 6;
  if ((v8 & v6) != 0)
    goto LABEL_7;
LABEL_8:
  v13 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v13 < v29)
    {
      v14 = *(_QWORD *)(v28 + 8 * v13);
      ++v5;
      if (v14)
        goto LABEL_21;
      v5 = v13 + 1;
      if (v13 + 1 >= v29)
        goto LABEL_26;
      v14 = *(_QWORD *)(v28 + 8 * v5);
      if (v14)
        goto LABEL_21;
      v5 = v13 + 2;
      if (v13 + 2 >= v29)
        goto LABEL_26;
      v14 = *(_QWORD *)(v28 + 8 * v5);
      if (v14)
      {
LABEL_21:
        v9 = (v14 - 1) & v14;
        for (i = __clz(__rbit64(v14)) + (v5 << 6); ; i = v11 | (v5 << 6))
        {
          v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 32 * i);
          v17 = *v16;
          v18 = v16[1];
          v19 = v16[2];
          v20 = v16[3];
          v21 = *(_QWORD *)(v32 + 16);
          v22 = *(_QWORD *)(v21 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v22 && (v23 = sub_23DEA6458(v17, v18, v19, v20), (v24 & 1) != 0))
          {
            sub_23DE902F4(*(_QWORD *)(v21 + 56) + 40 * v23, (uint64_t)v30);
            sub_23DECECC8((uint64_t)v30, (unint64_t *)&qword_25432D450, qword_25432C070, (uint64_t)&protocol descriptor for InputSignalAnchor);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (!v9)
              goto LABEL_8;
          }
          else
          {
            v31 = 0;
            memset(v30, 0, sizeof(v30));
            sub_23DECECC8((uint64_t)v30, (unint64_t *)&qword_25432D450, qword_25432C070, (uint64_t)&protocol descriptor for InputSignalAnchor);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            *(unint64_t *)((char *)v26 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
            if (__OFADD__(v27++, 1))
              goto LABEL_29;
            if (!v9)
              goto LABEL_8;
          }
LABEL_7:
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }
      v15 = v13 + 3;
      if (v15 < v29)
      {
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (v14)
        {
          v5 = v15;
          goto LABEL_21;
        }
        while (1)
        {
          v5 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_28;
          if (v5 >= v29)
            break;
          v14 = *(_QWORD *)(v28 + 8 * v5);
          ++v15;
          if (v14)
            goto LABEL_21;
        }
      }
    }
LABEL_26:
    swift_retain();
    return sub_23DECC31C(v26, a2, v27, a3);
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23DECE6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v3 = v2;
  v15[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, v11);
    bzero((char *)v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v12 = sub_23DECE42C((uint64_t)v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    v12 = sub_23DECE42C((uint64_t)v13, v8, a1, a2);
    swift_release();
    swift_release();
    MEMORY[0x242648490](v13, -1, -1);
    swift_release_n();
  }
  return v12;
}

void sub_23DECE884(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_23DE95524(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_23DECE8E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E2D0)
  {
    sub_23DE95570();
    v0 = sub_23DF15184();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E2D0);
  }
}

void sub_23DECE940()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA90)
  {
    sub_23DE95524(255, (unint64_t *)&qword_25432D878);
    sub_23DECE9BC();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA90);
  }
}

unint64_t sub_23DECE9BC()
{
  unint64_t result;

  result = qword_25432D530;
  if (!qword_25432D530)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkPlanIdentifier, &type metadata for WorkPlanIdentifier);
    atomic_store(result, (unint64_t *)&qword_25432D530);
  }
  return result;
}

void sub_23DECEA00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E2F0)
  {
    sub_23DE95524(255, (unint64_t *)&qword_25432D308);
    sub_23DE95570();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E2F0);
  }
}

void sub_23DECEA7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DAA0)
  {
    sub_23DE95524(255, &qword_25432D868);
    sub_23DE95844();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DAA0);
  }
}

uint64_t sub_23DECEAF8(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a2);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_23DECEB44(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23DECEB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DEC12FC(a1, a2);
}

unint64_t sub_23DECEB68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25432D908;
  if (!qword_25432D908)
  {
    sub_23DECE884(255, &qword_25432D900, (unint64_t *)&qword_25432C280, (uint64_t)&protocol descriptor for InputSignalConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25432D908);
  }
  return result;
}

uint64_t sub_23DECEBD0(uint64_t a1)
{
  uint64_t v2;

  sub_23DE95234(0, &qword_25432E220, (uint64_t (*)(uint64_t))sub_23DE955F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DECEC24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E318)
  {
    sub_23DE95570();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E318);
  }
}

unint64_t sub_23DECEC84()
{
  unint64_t result;

  result = qword_25432D3A0;
  if (!qword_25432D3A0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF18790, &type metadata for Orchestrator.AnyConfiguration);
    atomic_store(result, (unint64_t *)&qword_25432D3A0);
  }
  return result;
}

uint64_t sub_23DECECC8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  sub_23DECE884(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_23DECED0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E310)
  {
    type metadata accessor for Orchestrator.InputSignalSetupRecord();
    sub_23DE95570();
    v0 = sub_23DF152C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E310);
  }
}

void sub_23DECED74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_23DE95234(255, (unint64_t *)&unk_25432D8D0, (uint64_t (*)(uint64_t))type metadata accessor for WorkCriteriaRecord, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    v8 = sub_23DE95844();
    v9 = a3(a1, &type metadata for ScopedExecutorIdentifier, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_23DECEDF8()
{
  unint64_t result;

  result = qword_256D0EEA0;
  if (!qword_256D0EEA0)
  {
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256D0EEA0);
  }
  return result;
}

uint64_t objectdestroy_27Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for Orchestrator.PauseState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DECEEE8 + 4 * byte_23DF18665[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DECEF1C + 4 * byte_23DF18660[v4]))();
}

uint64_t sub_23DECEF1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DECEF24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DECEF2CLL);
  return result;
}

uint64_t sub_23DECEF38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DECEF40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DECEF44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DECEF4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Orchestrator.PauseState()
{
  return &type metadata for Orchestrator.PauseState;
}

uint64_t storeEnumTagSinglePayload for Orchestrator.OrchestrationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DECEFB4 + 4 * byte_23DF1866F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DECEFE8 + 4 * byte_23DF1866A[v4]))();
}

uint64_t sub_23DECEFE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DECEFF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DECEFF8);
  return result;
}

uint64_t sub_23DECF004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DECF00CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DECF010(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DECF018(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Orchestrator.OrchestrationState()
{
  return &type metadata for Orchestrator.OrchestrationState;
}

uint64_t destroy for Orchestrator.InputSignalRecord(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Orchestrator.InputSignalRecord(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for Orchestrator.InputSignalRecord(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Orchestrator.InputSignalRecord(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Orchestrator.InputSignalRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Orchestrator.InputSignalRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Orchestrator.InputSignalRecord()
{
  return &type metadata for Orchestrator.InputSignalRecord;
}

unint64_t sub_23DECF1C8()
{
  unint64_t result;

  result = qword_256D0EEB0;
  if (!qword_256D0EEB0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF188BC, &type metadata for Orchestrator.OrchestrationState);
    atomic_store(result, (unint64_t *)&qword_256D0EEB0);
  }
  return result;
}

unint64_t sub_23DECF210()
{
  unint64_t result;

  result = qword_256D0EEB8[0];
  if (!qword_256D0EEB8[0])
  {
    result = MEMORY[0x2426483D0](&unk_23DF1894C, &type metadata for Orchestrator.PauseState);
    atomic_store(result, qword_256D0EEB8);
  }
  return result;
}

uint64_t sub_23DECF264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DECEB50(a1, a2);
}

void AtomicBox.wrappedValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v2[4];

  v1 = v0[2];
  v2[2] = *(_QWORD *)(*v0 + 80);
  sub_23DF044F4((void (*)(uint64_t))sub_23DECF308, (uint64_t)v2, v1);
}

uint64_t AtomicBox.wrappedValue.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_23DECF798(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

uint64_t sub_23DECF308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

void AtomicBox.set(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v3[6];

  v2 = v1[2];
  v3[2] = *(_QWORD *)(*v1 + 80);
  v3[3] = a1;
  sub_23DF044F4((void (*)(uint64_t))sub_23DECF7E8, (uint64_t)v3, v2);
}

void (*AtomicBox.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[14] = malloc(v6);
  v3[15] = malloc(v6);
  v7 = v1[2];
  v3[10] = v4;
  sub_23DF044F4((void (*)(uint64_t))sub_23DECF308, (uint64_t)(v3 + 8), v7);
  return sub_23DECF444;
}

void sub_23DECF444(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 112);
  v3 = *(void **)(*(_QWORD *)a1 + 120);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  if ((a2 & 1) != 0)
  {
    v7 = (_QWORD *)v2[11];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16))(v2[14], v2[15], v2[12]);
    v8 = v7[2];
    v2[2] = *(_QWORD *)(*v7 + 80);
    v2[3] = v4;
    sub_23DF044F4((void (*)(uint64_t))sub_23DECF7E8, (uint64_t)v2, v8);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v4, v5);
    v9(v3, v5);
  }
  else
  {
    v10 = (_QWORD *)v2[11];
    v11 = v10[2];
    v2[6] = *(_QWORD *)(*v10 + 80);
    v2[7] = v3;
    sub_23DF044F4((void (*)(uint64_t))sub_23DECF7E8, (uint64_t)(v2 + 4), v11);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  free(v3);
  free(v4);
  free(v2);
}

void AtomicBox.map(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v4[6];

  v3 = v2[2];
  v4[2] = *(_QWORD *)(*v2 + 80);
  v4[3] = a1;
  v4[4] = a2;
  sub_23DF044F4((void (*)(uint64_t))sub_23DECF844, (uint64_t)v4, v3);
}

uint64_t sub_23DECF598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v12;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10(v7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v9, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, a1, a2);
}

uint64_t AtomicBox.set(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[7];
  unsigned __int8 v7;

  v4 = v3[2];
  v6[2] = *(_QWORD *)(*v3 + 80);
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a1;
  sub_23DF044F4((void (*)(uint64_t))sub_23DECF860, (uint64_t)v6, v4);
  return v7;
}

_QWORD *AtomicBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_allocObject();
  v3[2] = sub_23DF04830(a1, *(_QWORD *)(*v3 + 80));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

_QWORD *AtomicBox.init(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *v1;
  v4 = sub_23DECF8E4(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t AtomicBox.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t AtomicBox.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_23DECF798(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v3[6];

  v2 = v1[2];
  v3[2] = *(_QWORD *)(*v1 + 80);
  v3[3] = a1;
  sub_23DF044F4((void (*)(uint64_t))sub_23DECF7E8, (uint64_t)v3, v2);
}

uint64_t sub_23DECF7E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v3, v4);
}

uint64_t sub_23DECF844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23DECF598(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_23DECF860@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 40);
  result = (*(uint64_t (**)(void))(v2 + 24))();
  if ((result & 1) != 0)
  {
    v8 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v5);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v6, v5);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  *a2 = v9;
  return result;
}

_QWORD *sub_23DECF8E4(uint64_t a1)
{
  _QWORD *v1;

  v1[2] = sub_23DF04830(a1, *(_QWORD *)(*v1 + 80));
  return v1;
}

void sub_23DECF908()
{
  AtomicBox.wrappedValue.getter();
}

void sub_23DECF928(uint64_t a1)
{
  sub_23DECF798(a1);
}

uint64_t sub_23DECF948()
{
  return 8;
}

_QWORD *sub_23DECF954(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_23DECF960()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AtomicBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicBox);
}

uint64_t method lookup function for AtomicBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AtomicBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_23DECFA94(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = a1;
  return a2(&v3);
}

id sub_23DECFC40()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id RemoteExecutionService.listener.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t RemoteExecutionService.__allocating_init(contextProvider:executorProviders:listener:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  RemoteExecutionService.init(contextProvider:executorProviders:listener:)(a1, a2, a3, a4);
  return v8;
}

uint64_t RemoteExecutionService.init(contextProvider:executorProviders:listener:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v9;
  _QWORD *v10;
  objc_class *v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;

  if (a4)
    v9 = a4;
  else
    v9 = objc_msgSend((id)objc_opt_self(), sel_serviceListener);
  *(_QWORD *)(v4 + 16) = v9;
  type metadata accessor for RemoteExecutionEngine();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v11 = (objc_class *)type metadata accessor for RemoteExecutionService.ServiceDelegate();
  v12 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v12[OBJC_IVAR____TtCC19HealthOrchestration22RemoteExecutionService15ServiceDelegate_engine] = v10;
  v18.receiver = v12;
  v18.super_class = v11;
  v13 = a4;
  swift_unknownObjectRetain();
  swift_retain();
  v14 = objc_msgSendSuper2(&v18, sel_init);
  *(_QWORD *)(v4 + 24) = v14;
  v15 = v9;
  v16 = v14;
  objc_msgSend(v15, sel_setDelegate_, v16, v18.receiver, v18.super_class);
  swift_release();

  swift_unknownObjectRelease();
  return v4;
}

void sub_23DECFE20()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), sel_resume);
  exit(0);
}

uint64_t RemoteExecutionService.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RemoteExecutionService.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RemoteExecutionService.ServiceDelegate()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RemoteExecutionService()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteExecutionService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteExecutionService.__allocating_init(contextProvider:executorProviders:listener:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of RemoteExecutionService.run()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t sub_23DECFEF0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_23DECFF14()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_23DECFF24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DECFF48(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void ValueAnchor.init(identifier:value:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  type metadata accessor for ValueAnchor();
}

uint64_t sub_23DECFFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for ValueAnchor()
{
  JUMPOUT(0x242648388);
}

uint64_t ValueAnchor.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ValueAnchor.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t ValueAnchor.hasDifference(from:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD v23[2];

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DF150F4();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)v23 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12, v16);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v19 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, a3);
    v20 = v6;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 16))(v8, v23[1] + *(int *)(a3 + 52), v5);
    v21 = sub_23DF14DDC();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a3);
    v19 = v21 ^ 1;
  }
  return v19 & 1;
}

uint64_t ValueAnchor.merged(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t static ValueAnchor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_23DF15400() & 1) != 0)
    type metadata accessor for ValueAnchor();
  return 0;
}

BOOL sub_23DED029C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23DE904E8(*a1, *a2);
}

uint64_t sub_23DED02B4()
{
  return sub_23DE90610();
}

uint64_t sub_23DED02C8()
{
  return sub_23DE904F8();
}

uint64_t sub_23DED02DC()
{
  sub_23DF15478();
  sub_23DE904F8();
  return sub_23DF154A8();
}

uint64_t sub_23DED0324()
{
  char *v0;

  return sub_23DE90654(*v0);
}

uint64_t sub_23DED0338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE9051C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DED0368(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF18C10, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DED039C(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF18C10, a1);
  return sub_23DF154D8();
}

void ValueAnchor.encode(to:)()
{
  type metadata accessor for ValueAnchor.CodingKeys();
}

uint64_t sub_23DED0418(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x2426483D0](&unk_23DF18C10, a1);
  v4 = sub_23DF153A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v12 - v7;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23DF154C0();
  v9 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v3 - 112) = *(_QWORD *)v2;
  *(_QWORD *)(v3 - 104) = v9;
  *(_OWORD *)(v3 - 96) = *(_OWORD *)(v2 + 16);
  *(_BYTE *)(v3 - 65) = 0;
  sub_23DE90E54();
  v10 = *(_QWORD *)(v3 - 120);
  sub_23DF15388();
  if (!v10)
  {
    *(_BYTE *)(v3 - 112) = 1;
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void type metadata accessor for ValueAnchor.CodingKeys()
{
  JUMPOUT(0x242648388);
}

void ValueAnchor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[14];

  v8[2] = a3;
  v8[1] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v8[4] = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[10] = v4;
  v8[11] = v5;
  v8[12] = v6;
  v8[13] = v7;
  type metadata accessor for ValueAnchor.CodingKeys();
}

void sub_23DED05E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x2426483D0](&unk_23DF18C10, a1);
  v6 = sub_23DF15340();
  *(_QWORD *)(v5 - 128) = v6;
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  *(_QWORD *)(v5 - 152) = v3;
  *(_QWORD *)(v5 - 144) = v2;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v4;
  *(_QWORD *)(v5 - 88) = v1;
  type metadata accessor for ValueAnchor();
}

uint64_t sub_23DED0650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  *(_QWORD *)(v4 - 136) = v2;
  v9 = *(_QWORD *)(v4 - 120);
  sub_23DF154B4();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 192) = v6;
  *(_QWORD *)(v4 - 120) = v3;
  v10 = *(_QWORD *)(v4 - 152);
  v12 = *(_QWORD *)(v4 - 168);
  v11 = *(_QWORD *)(v4 - 160);
  *(_BYTE *)(v4 - 65) = 0;
  sub_23DE90B4C();
  sub_23DF15334();
  v13 = *(_QWORD *)(v4 - 104);
  *(_QWORD *)v8 = *(_QWORD *)(v4 - 112);
  *((_QWORD *)v8 + 1) = v13;
  *((_OWORD *)v8 + 1) = *(_OWORD *)(v4 - 96);
  *(_BYTE *)(v4 - 112) = 1;
  sub_23DF15334();
  (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 128));
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 184) + 32))(&v8[*(int *)(a1 + 52)], v11, v10);
  v14 = *(_QWORD *)(v4 - 192);
  (*(void (**)(_QWORD, char *, uint64_t))(v14 + 16))(*(_QWORD *)(v4 - 176), v8, a1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 120));
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v8, a1);
}

void sub_23DED081C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ValueAnchor.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_23DED083C()
{
  ValueAnchor.encode(to:)();
}

uint64_t sub_23DED0850(_QWORD *a1, _QWORD *a2)
{
  return static ValueAnchor.== infix(_:_:)(a1, a2);
}

uint64_t ValueAnchor.description.getter()
{
  sub_23DF14E60();
  sub_23DF153E8();
  sub_23DF14E60();
  return 0;
}

uint64_t sub_23DED08E4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x2426483D0](&protocol conformance descriptor for ValueAnchor<A>);
  a1[2] = MEMORY[0x2426483D0](&protocol conformance descriptor for ValueAnchor<A>, a2);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for ValueAnchor<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t sub_23DED0940()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DED09B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DED0A8C + 4 * byte_23DF18A10[(v9 - 1)]))();
}

void sub_23DED0AFC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_23DED0CF8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DED0D44 + 4 * byte_23DF18A23[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DED0D78 + 4 * byte_23DF18A1E[v4]))();
}

uint64_t sub_23DED0D78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED0D80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DED0D88);
  return result;
}

uint64_t sub_23DED0D94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DED0D9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DED0DA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED0DA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23DED0DB4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DED0DC4()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DED0DD4()
{
  JUMPOUT(0x2426483D0);
}

unint64_t static SerialDispatcher.errorDomain.getter()
{
  return 0xD00000000000002CLL;
}

HealthOrchestration::SerialDispatcher::Errors_optional __swiftcall SerialDispatcher.Errors.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (HealthOrchestration::SerialDispatcher::Errors_optional)rawValue;
}

uint64_t SerialDispatcher.Errors.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

HealthOrchestration::SerialDispatcher::Errors_optional sub_23DED0E1C(Swift::Int *a1)
{
  return SerialDispatcher.Errors.init(rawValue:)(*a1);
}

void sub_23DED0E24(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t SerialDispatcher.__allocating_init(providers:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SerialDispatcher.init(providers:)(a1);
  return v2;
}

uint64_t SerialDispatcher.init(providers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v14[0] = sub_23DF1504C();
  v2 = *(_QWORD *)(v14[0] - 8);
  MEMORY[0x24BDAC7A8](v14[0], v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DF15040();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v6, v8);
  v9 = sub_23DF14D34();
  MEMORY[0x24BDAC7A8](v9, v10);
  v14[1] = sub_23DE95920();
  sub_23DF14D28();
  v16 = MEMORY[0x24BEE4AF8];
  sub_23DE8F998((unint64_t *)&qword_25432D9B0, v7, MEMORY[0x24BEE5698]);
  sub_23DEA0B5C(0, (unint64_t *)&qword_25432D950, (void (*)(uint64_t))v7);
  sub_23DEA0B04((unint64_t *)&qword_25432D960, (unint64_t *)&qword_25432D950, (void (*)(uint64_t))v7);
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, _QWORD))(v2 + 104))(v5, *MEMORY[0x24BEE5750], v14[0]);
  v11 = sub_23DF15064();
  v12 = v15;
  *(_QWORD *)(v1 + 16) = v11;
  *(_QWORD *)(v1 + 24) = v12;
  return v1;
}

uint64_t SerialDispatcher.start(source:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  __int128 v8[2];

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v4 = swift_allocObject();
  swift_weakInit();
  sub_23DE902F4((uint64_t)a1, (uint64_t)v8);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  sub_23DE902DC(v8, v5 + 24);
  v6 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v3 + 8);
  swift_retain();
  v6(sub_23DED1BD0, v5, v2, v3);
  swift_release();
  return swift_release();
}

uint64_t sub_23DED111C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DED1140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  __int128 v27[2];
  _OWORD v28[8];
  uint64_t v29;

  v3 = v2;
  v6 = sub_23DF14D10();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v24 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DF14D34();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v3 + 16);
  sub_23DEAC648(a1, (uint64_t)v28);
  sub_23DE902F4(a2, (uint64_t)v27);
  v16 = swift_allocObject();
  v17 = v28[4];
  *(_OWORD *)(v16 + 104) = v28[5];
  v18 = v28[7];
  *(_OWORD *)(v16 + 120) = v28[6];
  *(_OWORD *)(v16 + 136) = v18;
  v19 = v28[0];
  *(_OWORD *)(v16 + 40) = v28[1];
  v20 = v28[3];
  *(_OWORD *)(v16 + 56) = v28[2];
  *(_OWORD *)(v16 + 72) = v20;
  *(_OWORD *)(v16 + 88) = v17;
  *(_QWORD *)(v16 + 16) = v3;
  *(_QWORD *)(v16 + 152) = v29;
  *(_OWORD *)(v16 + 24) = v19;
  sub_23DE902DC(v27, v16 + 160);
  aBlock[4] = sub_23DED20F4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE9F35C;
  aBlock[3] = &block_descriptor_7;
  v21 = _Block_copy(aBlock);
  swift_retain();
  sub_23DF14D28();
  v25 = MEMORY[0x24BEE4AF8];
  sub_23DE8F998(&qword_25432C290, v7, MEMORY[0x24BEE5468]);
  sub_23DEA0B5C(0, (unint64_t *)&unk_25432D910, (void (*)(uint64_t))v7);
  sub_23DEA0B04((unint64_t *)&unk_25432D920, (unint64_t *)&unk_25432D910, (void (*)(uint64_t))v7);
  sub_23DF15148();
  MEMORY[0x242647AA0](0, v15, v10, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

uint64_t sub_23DED13D8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t ObjectType;
  void (*v30)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v32;
  id v33;
  void *v34;
  id v35;
  void (*v36)(_BYTE *, id);
  id v37;
  id v38;
  void *v39;
  id v40;
  void (*v41)(_BYTE *, id);
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[120];
  void (*v71)(_BYTE *, id);
  __int128 v72[2];
  _OWORD v73[8];
  uint64_t v74;
  _BYTE v75[56];

  sub_23DE902F4((uint64_t)(a2 + 8), (uint64_t)v75);
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  v54 = a2[1];
  v55 = *a2;
  sub_23DEAC648((uint64_t)a2, (uint64_t)v73);
  sub_23DE902F4(a3, (uint64_t)v72);
  sub_23DEAC648((uint64_t)v73, (uint64_t)v70);
  sub_23DE902F4((uint64_t)v72, (uint64_t)v67);
  v10 = swift_allocObject();
  v11 = v73[7];
  *(_OWORD *)(v10 + 112) = v73[6];
  *(_OWORD *)(v10 + 128) = v11;
  v12 = v74;
  v13 = v73[3];
  *(_OWORD *)(v10 + 48) = v73[2];
  *(_OWORD *)(v10 + 64) = v13;
  v14 = v73[5];
  *(_OWORD *)(v10 + 80) = v73[4];
  *(_OWORD *)(v10 + 96) = v14;
  v15 = v73[1];
  *(_OWORD *)(v10 + 16) = v73[0];
  *(_OWORD *)(v10 + 32) = v15;
  *(_QWORD *)(v10 + 144) = v12;
  *(_QWORD *)(v10 + 152) = a1;
  v56 = v10;
  sub_23DE902DC(v72, v10 + 160);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(v16 + 16);
  v57 = v8;
  if (v17)
  {
    v18 = v16 + 32;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DE902F4(v18, (uint64_t)&v58);
      v19 = v59;
      v20 = v60;
      __swift_project_boxed_opaque_existential_1(&v58, v59);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20) == v7 && v21 == v6)
        break;
      v23 = sub_23DF15400();
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        goto LABEL_25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
      v18 += 40;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRelease();
    sub_23DE902DC(&v58, (uint64_t)&v61);
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v62 + 1))
      goto LABEL_26;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_11:
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v62 + 1))
    {
LABEL_26:
      sub_23DED2190((uint64_t)&v61);
      v38 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      v39 = (void *)sub_23DF14DE8();
      v40 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, 0, 0);

      if (v40)
      {
        v41 = v71;
        v42 = v40;
        v41(v70, v40);

      }
      else
      {
        v71(v70, 0);
      }
      v48 = v68;
      v49 = v69;
      __swift_project_boxed_opaque_existential_1(v67, v68);
      v50 = swift_allocObject();
      swift_weakInit();
      sub_23DE902F4((uint64_t)v67, (uint64_t)&v64);
      v51 = swift_allocObject();
      *(_QWORD *)(v51 + 16) = v50;
      sub_23DE902DC(&v64, v51 + 24);
      v52 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v49 + 8);
      swift_retain();
      v52(sub_23DED2268, v51, v48, v49);
      swift_release();

      swift_release();
      swift_release();
      goto LABEL_35;
    }
  }
  sub_23DE902DC(&v61, (uint64_t)&v64);
  v24 = v65;
  v25 = v66;
  __swift_project_boxed_opaque_existential_1(&v64, v65);
  v26 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16))(v55, v54, v24, v25) + 16);
  if (v26)
  {
    v27 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      v28 = *v27;
      ObjectType = swift_getObjectType();
      v30 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v28 + 24);
      swift_unknownObjectRetain();
      v30(&v61, ObjectType, v28);
      if ((_QWORD)v61 == v9 && *((_QWORD *)&v61 + 1) == v57)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      v32 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v27 += 2;
      if (!--v26)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_30:
    sub_23DED1BDC((uint64_t)v75, (void (*)(id))sub_23DED2180, v56, ObjectType, v28);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_22:
    v33 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v34 = (void *)sub_23DF14DE8();
    v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 1, 0);

    if (v35)
    {
      v36 = v71;
      v37 = v35;
      v36(v70, v35);

    }
    else
    {
      v71(v70, 0);
    }
    v43 = v68;
    v44 = v69;
    __swift_project_boxed_opaque_existential_1(v67, v68);
    v45 = swift_allocObject();
    swift_weakInit();
    sub_23DE902F4((uint64_t)v67, (uint64_t)&v61);
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = v45;
    sub_23DE902DC(&v61, v46 + 24);
    v47 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v44 + 8);
    swift_retain();
    v47(sub_23DED2268, v46, v43, v44);

    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
    swift_release();
  }
LABEL_35:
  sub_23DEAC67C((uint64_t)v70);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
}

uint64_t sub_23DED1A40(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void (*v7)(uint64_t, void *);
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  __int128 v15[2];

  if (a1)
  {
    v7 = *(void (**)(uint64_t, void *))(a2 + 120);
    v8 = a1;
    v7(a2, a1);

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(a2 + 120))(a2, 0);
  }
  v9 = a4[3];
  v10 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v9);
  v11 = swift_allocObject();
  swift_weakInit();
  sub_23DE902F4((uint64_t)a4, (uint64_t)v15);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  sub_23DE902DC(v15, v12 + 24);
  v13 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v10 + 8);
  swift_retain();
  v13(sub_23DED2268, v12, v9, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_23DED1B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23DED1140(a1, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_23DED1BD0(uint64_t a1)
{
  uint64_t v1;

  return sub_23DED1B5C(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

void sub_23DED1BDC(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void (*v25)(id);
  uint64_t v26;
  _BYTE v27[40];

  v25 = a2;
  v26 = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_23DF150F4();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)&v24 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v12, v16);
  v18 = (char *)&v24 - v17;
  sub_23DE902F4(a1, (uint64_t)v27);
  sub_23DE90254(0, (unint64_t *)&qword_25432D878);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v19)
  {
    v20(v14, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, AssociatedTypeWitness);
    (*(void (**)(char *, void (*)(id), uint64_t, uint64_t, uint64_t))(a5 + 40))(v18, v25, v26, a4, a5);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  }
  else
  {
    v20(v14, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v21 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v22 = (void *)sub_23DF14DE8();
    v23 = objc_msgSend(v21, sel_initWithDomain_code_userInfo_, v22, 2, 0);

    v25(v23);
  }
}

uint64_t SerialDispatcher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SerialDispatcher.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_23DED1E68()
{
  unint64_t result;

  result = qword_256D0F0C8;
  if (!qword_256D0F0C8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for SerialDispatcher.Errors, &type metadata for SerialDispatcher.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0F0C8);
  }
  return result;
}

uint64_t sub_23DED1EAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  __int128 v8[2];

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v4 = swift_allocObject();
  swift_weakInit();
  sub_23DE902F4((uint64_t)a1, (uint64_t)v8);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  sub_23DE902DC(v8, v5 + 24);
  v6 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v3 + 8);
  swift_retain();
  v6(sub_23DED2268, v5, v2, v3);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for SerialDispatcher()
{
  return objc_opt_self();
}

uint64_t method lookup function for SerialDispatcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SerialDispatcher.__allocating_init(providers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for SerialDispatcher.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DED200C + 4 * byte_23DF18C65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DED2040 + 4 * byte_23DF18C60[v4]))();
}

uint64_t sub_23DED2040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED2048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DED2050);
  return result;
}

uint64_t sub_23DED205C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DED2064);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DED2068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED2070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SerialDispatcher.Errors()
{
  return &type metadata for SerialDispatcher.Errors;
}

uint64_t sub_23DED2090()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  return swift_deallocObject();
}

uint64_t sub_23DED20F4()
{
  uint64_t v0;

  return sub_23DED13D8(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), v0 + 160);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_23DED211C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  return swift_deallocObject();
}

uint64_t sub_23DED2180(void *a1)
{
  uint64_t v1;

  return sub_23DED1A40(a1, v1 + 16, *(_QWORD *)(v1 + 152), (_QWORD *)(v1 + 160));
}

uint64_t sub_23DED2190(uint64_t a1)
{
  uint64_t v2;

  sub_23DED21CC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DED21CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D448)
  {
    sub_23DE90254(255, &qword_25432D440);
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D448);
  }
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t SimpleWorkPlan.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

__n128 SimpleWorkPlan.identifier.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*SimpleWorkPlan.identifier.modify())()
{
  return nullsub_1;
}

uint64_t SimpleWorkPlan.priority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t SimpleWorkPlan.priority.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
  return result;
}

uint64_t (*SimpleWorkPlan.priority.modify())()
{
  return nullsub_1;
}

void __swiftcall SimpleWorkPlan.init(identifier:priority:)(HealthOrchestration::SimpleWorkPlan *__return_ptr retstr, HealthOrchestration::WorkPlanIdentifier identifier, HealthOrchestration::PriorityRuleSet priority)
{
  Swift::Int v3;
  void *v4;
  HealthOrchestration::PriorityRuleSet::Priority v5;

  v3 = *(_QWORD *)(identifier.domain._countAndFlagsBits + 16);
  v4 = *(void **)identifier.domain._object;
  v5 = *((_BYTE *)identifier.domain._object + 8);
  retstr->identifier.domain = *(Swift::String *)identifier.domain._countAndFlagsBits;
  retstr->identifier.code = v3;
  retstr->priority.orderedRules._rawValue = v4;
  retstr->priority.basePriority = v5;
}

void __swiftcall SimpleWorkPlan.init(domain:code:priority:)(HealthOrchestration::SimpleWorkPlan *__return_ptr retstr, Swift::String domain, Swift::Int code, HealthOrchestration::PriorityRuleSet priority)
{
  void *v4;
  HealthOrchestration::PriorityRuleSet::Priority v5;

  v4 = *(void **)priority.orderedRules._rawValue;
  v5 = *((_BYTE *)priority.orderedRules._rawValue + 8);
  retstr->identifier.domain = domain;
  retstr->identifier.code = code;
  retstr->priority.orderedRules._rawValue = v4;
  retstr->priority.basePriority = v5;
}

void __swiftcall SimpleWorkPlan.merged(with:)(HealthOrchestration::SimpleWorkPlan *__return_ptr retstr, HealthOrchestration::SimpleWorkPlan *with)
{
  void *object;
  Swift::Int code;
  void *rawValue;
  HealthOrchestration::PriorityRuleSet::Priority basePriority;

  object = with->identifier.domain._object;
  code = with->identifier.code;
  rawValue = with->priority.orderedRules._rawValue;
  basePriority = with->priority.basePriority;
  retstr->identifier.domain._countAndFlagsBits = with->identifier.domain._countAndFlagsBits;
  retstr->identifier.domain._object = object;
  retstr->identifier.code = code;
  retstr->priority.orderedRules._rawValue = rawValue;
  retstr->priority.basePriority = basePriority;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
}

uint64_t sub_23DED23A4()
{
  _BYTE *v0;

  if (*v0)
    return 0x797469726F697270;
  else
    return 0x696669746E656469;
}

uint64_t sub_23DED23E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DED2F24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DED2408()
{
  sub_23DED2A78();
  return sub_23DF154CC();
}

uint64_t sub_23DED2430()
{
  sub_23DED2A78();
  return sub_23DF154D8();
}

uint64_t SimpleWorkPlan.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  char v18;

  sub_23DED2ABC(0, &qword_256D0F0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v12 - v8;
  v14 = *v1;
  v10 = *((_QWORD *)v1 + 2);
  v13 = *((_QWORD *)v1 + 3);
  v17 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DED2A78();
  sub_23DF154C0();
  v15 = v14;
  v16 = v10;
  v18 = 0;
  sub_23DE8D078();
  sub_23DF15388();
  if (!v2)
  {
    *(_QWORD *)&v15 = v13;
    BYTE8(v15) = v17;
    v18 = 1;
    sub_23DE8D0BC();
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t SimpleWorkPlan.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  sub_23DED2ABC(0, &qword_256D0F0E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v16 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DED2A78();
  sub_23DF154B4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  sub_23DE8D43C();
  sub_23DF15334();
  v11 = v18;
  v16 = v17;
  v12 = v19;
  v20 = 1;
  sub_23DE8D480();
  swift_bridgeObjectRetain();
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v17;
  v14 = v18;
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DED27B4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DED27C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DED27DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DED281C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SimpleWorkPlan.init(from:)(a1, a2);
}

uint64_t sub_23DED2830(_QWORD *a1)
{
  return SimpleWorkPlan.encode(to:)(a1);
}

uint64_t SimpleWorkPlan.description.getter()
{
  sub_23DF15190();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  sub_23DF14E60();
  sub_23DF153C4();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRetain();
  PriorityRuleSet.description.getter();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return 0x616C506B726F573CLL;
}

uint64_t _s19HealthOrchestration14SimpleWorkPlanV2eeoiySbAC_ACtFZ_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  char v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = a2[2];
  v5 = a2[3];
  if (*(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1])
  {
    if (v2 != v6)
      return 0;
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_23DE8DAB8(v3, v5) & 1) != 0)
    {
      sub_23DE8D7D0(v4);
      v11 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        return 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  v8 = sub_23DF15400();
  result = 0;
  if ((v8 & 1) != 0 && v2 == v6)
    goto LABEL_9;
  return result;
}

unint64_t sub_23DED2A78()
{
  unint64_t result;

  result = qword_256D0F0D8;
  if (!qword_256D0F0D8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF18F38, &type metadata for SimpleWorkPlan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F0D8);
  }
  return result;
}

void sub_23DED2ABC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DED2A78();
    v7 = a3(a1, &type metadata for SimpleWorkPlan.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DED2B18(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_23DED2B44();
  result = sub_23DED2B88();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_23DED2B44()
{
  unint64_t result;

  result = qword_25432D438;
  if (!qword_25432D438)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for SimpleWorkPlan, &type metadata for SimpleWorkPlan);
    atomic_store(result, (unint64_t *)&qword_25432D438);
  }
  return result;
}

unint64_t sub_23DED2B88()
{
  unint64_t result;

  result = qword_25432D430;
  if (!qword_25432D430)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for SimpleWorkPlan, &type metadata for SimpleWorkPlan);
    atomic_store(result, (unint64_t *)&qword_25432D430);
  }
  return result;
}

uint64_t initializeWithCopy for SimpleWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SimpleWorkPlan(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SimpleWorkPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleWorkPlan(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleWorkPlan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleWorkPlan()
{
  return &type metadata for SimpleWorkPlan;
}

uint64_t storeEnumTagSinglePayload for SimpleWorkPlan.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DED2DCC + 4 * byte_23DF18D85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DED2E00 + 4 * byte_23DF18D80[v4]))();
}

uint64_t sub_23DED2E00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED2E08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DED2E10);
  return result;
}

uint64_t sub_23DED2E1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DED2E24);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DED2E28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED2E30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SimpleWorkPlan.CodingKeys()
{
  return &type metadata for SimpleWorkPlan.CodingKeys;
}

unint64_t sub_23DED2E50()
{
  unint64_t result;

  result = qword_256D0F0E8;
  if (!qword_256D0F0E8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF18F10, &type metadata for SimpleWorkPlan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F0E8);
  }
  return result;
}

unint64_t sub_23DED2E98()
{
  unint64_t result;

  result = qword_256D0F0F0;
  if (!qword_256D0F0F0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF18E80, &type metadata for SimpleWorkPlan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F0F0);
  }
  return result;
}

unint64_t sub_23DED2EE0()
{
  unint64_t result;

  result = qword_256D0F0F8;
  if (!qword_256D0F0F8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF18EA8, &type metadata for SimpleWorkPlan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F0F8);
  }
  return result;
}

uint64_t sub_23DED2F24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DED3020(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v32 = MEMORY[0x24BEE4AF8];
  sub_23DEAA394(0, v1, 0);
  v2 = v32;
  result = sub_23DF01F08(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v25 = v3 + 80;
  v26 = v1;
  v27 = v5;
  v28 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v29 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v13 = v12[1];
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
    v15 = v14[1];
    v30 = *v12;
    v31 = *v14;
    v16 = v3;
    v18 = *(_QWORD *)(v32 + 16);
    v17 = *(_QWORD *)(v32 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v18 >= v17 >> 1)
      result = sub_23DEAA394(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v32 + 16) = v18 + 1;
    v19 = (_QWORD *)(v32 + 32 * v18);
    v19[4] = v30;
    v19[5] = v13;
    v19[6] = v31;
    v19[7] = v15;
    v9 = 1 << *(_BYTE *)(v16 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v28;
    v20 = *(_QWORD *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v16;
    v5 = v27;
    if (*(_DWORD *)(v16 + 36) != v27)
      goto LABEL_27;
    v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v26;
    }
    else
    {
      v22 = v11 + 1;
      v23 = (unint64_t)(v9 + 63) >> 6;
      v10 = v26;
      if (v11 + 1 < v23)
      {
        v24 = *(_QWORD *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            v24 = *(_QWORD *)(v25 + 8 * v11++);
            if (v24)
            {
              v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v29 + 1;
    v6 = v9;
    if (v29 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23DED3254(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23DEAA1B4(0, v1, 0);
    v2 = v11;
    v4 = a1 + 56;
    do
    {
      v9 = *(_QWORD *)(v4 - 24);
      v10 = *(_QWORD *)(v4 - 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v11 + 16);
      v5 = *(_QWORD *)(v11 + 24);
      if (v6 >= v5 >> 1)
        sub_23DEAA1B4(v5 > 1, v6 + 1, 1);
      v4 += 32;
      *(_QWORD *)(v11 + 16) = v6 + 1;
      v7 = v11 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23DED3378(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v35 = MEMORY[0x24BEE4AF8];
  sub_23DEAA394(0, v1, 0);
  v2 = v35;
  result = sub_23DF01F08(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v29 = v1;
  v30 = v5;
  v31 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v12 = (unint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = sub_23DED3A74(v13, v14, v15);
    v33 = v17;
    v34 = v16;
    v19 = v18;
    v32 = v20;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v35 + 16);
    v21 = *(_QWORD *)(v35 + 24);
    if (v22 >= v21 >> 1)
      result = sub_23DEAA394(v21 > 1, v22 + 1, 1);
    *(_QWORD *)(v35 + 16) = v22 + 1;
    v23 = (_QWORD *)(v35 + 32 * v22);
    v23[4] = v34;
    v23[5] = v33;
    v23[6] = v19;
    v23[7] = v32;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v24 = *(_QWORD *)(v31 + 8 * v11);
    if ((v24 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v30;
    if (*(_DWORD *)(a1 + 36) != v30)
      goto LABEL_27;
    v25 = v24 & (-2 << (v6 & 0x3F));
    if (v25)
    {
      v9 = __clz(__rbit64(v25)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v29;
    }
    else
    {
      v26 = v11 + 1;
      v27 = (unint64_t)(v9 + 63) >> 6;
      v10 = v29;
      if (v11 + 1 < v27)
      {
        v28 = *(_QWORD *)(v31 + 8 * v26);
        if (v28)
        {
LABEL_20:
          v9 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v11)
          {
            v28 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v28)
            {
              v26 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

_QWORD *DebugSnapshot.__allocating_init(_:attributes:subObjects:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

uint64_t DebugSnapshot.object.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DebugSnapshot.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DebugSnapshot.subObjects.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *DebugSnapshot.init(_:attributes:subObjects:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

_QWORD *sub_23DED3660()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14[2];
  uint64_t v15;
  _QWORD *v16[2];

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
    return 0;
  v1 = swift_bridgeObjectRetain();
  v2 = (_QWORD *)sub_23DED3020(v1);
  swift_bridgeObjectRelease();
  v16[0] = v2;
  swift_bridgeObjectRetain();
  sub_23DED49D8(v16);
  swift_bridgeObjectRelease();
  v3 = v16[0];
  v16[0] = 0;
  v16[1] = (_QWORD *)0xE000000000000000;
  v4 = v3[2];
  if (v4)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_23DEAA1B4(0, v4, 0);
    v5 = v15;
    v6 = v3 + 7;
    while (1)
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_23DF14E48();
      if (__OFADD__(v9, 2))
        break;
      MEMORY[0x2426478C0](32, 0xE100000000000000, v9 + 2);
      v14[0] = v7;
      v14[1] = v8;
      swift_bridgeObjectRetain();
      sub_23DF14E60();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      sub_23DECEDF8();
      sub_23DF15124();
      swift_bridgeObjectRelease();
      sub_23DF14E60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v5;
      v11 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v5 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_23DEAA1B4(v10 > 1, v11 + 1, 1);
        v5 = v15;
      }
      v6 += 4;
      *(_QWORD *)(v5 + 16) = v11 + 1;
      v12 = v5 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v8;
      if (!--v4)
      {
        swift_release();
        goto LABEL_11;
      }
    }
    __break(1u);
    swift_release();
    __break(1u);
    result = (_QWORD *)swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    v5 = MEMORY[0x24BEE4AF8];
LABEL_11:
    v14[0] = v5;
    swift_bridgeObjectRetain();
    sub_23DED4970(v14);
    swift_bridgeObjectRelease();
    sub_23DED62E0();
    sub_23DEA068C((unint64_t *)&qword_25432D940, 255, (uint64_t (*)(uint64_t))sub_23DED62E0, MEMORY[0x24BEE12B0]);
    sub_23DF14DD0();
    swift_release();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    return v16[0];
  }
  return result;
}

uint64_t sub_23DED396C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16))
    return 0;
  v1 = swift_bridgeObjectRetain();
  v2 = (_QWORD *)sub_23DED3378(v1);
  swift_bridgeObjectRelease();
  v6 = v2;
  swift_bridgeObjectRetain();
  sub_23DED49D8(&v6);
  swift_bridgeObjectRelease();
  v3 = (_QWORD *)sub_23DED3254((uint64_t)v6);
  swift_release();
  v6 = v3;
  sub_23DED62E0();
  sub_23DEA068C((unint64_t *)&qword_25432D940, 255, (uint64_t (*)(uint64_t))sub_23DED62E0, MEMORY[0x24BEE12B0]);
  v4 = sub_23DF14DD0();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23DED3A74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[4];
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v3 = a3;
  if (a3 >> 62)
    goto LABEL_25;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
    {
LABEL_23:
      v45 = v7;
      sub_23DED62E0();
      sub_23DEA068C((unint64_t *)&qword_25432D940, 255, (uint64_t (*)(uint64_t))sub_23DED62E0, MEMORY[0x24BEE12B0]);
      sub_23DF14DD0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      return a1;
    }
    v47 = MEMORY[0x24BEE4AF8];
    result = sub_23DEAA1B4(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v35 = a1;
    v36 = a2;
    v9 = v3;
    v10 = 0;
    v3 = 0;
    v39 = v6;
    v40 = v9 & 0xC000000000000001;
    v37 = v9 + 32;
    v38 = v9;
    while (v10 != v6)
    {
      v43 = v10;
      if (v40)
      {
        v11 = MEMORY[0x242647BF0](v10, v38);
      }
      else
      {
        v11 = *(_QWORD *)(v37 + 8 * v10);
        swift_retain();
      }
      v12 = DebugSnapshot.description.getter();
      v14 = v13;
      v45 = 10;
      v46 = 0xE100000000000000;
      MEMORY[0x24BDAC7A8](v12, v13);
      v34[2] = &v45;
      swift_bridgeObjectRetain();
      v15 = sub_23DED4A40(0x7FFFFFFFFFFFFFFFLL, 1, sub_23DED62C8, (uint64_t)v34, v12, v14);
      v42 = v3;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v41 = v11;
        v44 = MEMORY[0x24BEE4AF8];
        sub_23DEAA1B4(0, v16, 0);
        v17 = v44;
        v18 = (uint64_t *)(v15 + 56);
        do
        {
          v19 = *(v18 - 3);
          v20 = *(v18 - 2);
          v21 = *(v18 - 1);
          v22 = *v18;
          v45 = 538976288;
          v46 = 0xE400000000000000;
          swift_bridgeObjectRetain();
          MEMORY[0x242647878](v19, v20, v21, v22);
          sub_23DF14E60();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v23 = v45;
          v24 = v46;
          v44 = v17;
          v26 = *(_QWORD *)(v17 + 16);
          v25 = *(_QWORD *)(v17 + 24);
          if (v26 >= v25 >> 1)
          {
            sub_23DEAA1B4(v25 > 1, v26 + 1, 1);
            v17 = v44;
          }
          *(_QWORD *)(v17 + 16) = v26 + 1;
          v27 = v17 + 16 * v26;
          *(_QWORD *)(v27 + 32) = v23;
          *(_QWORD *)(v27 + 40) = v24;
          v18 += 4;
          --v16;
        }
        while (v16);
        swift_bridgeObjectRelease();
        v6 = v39;
      }
      else
      {
        swift_bridgeObjectRelease();
        v17 = MEMORY[0x24BEE4AF8];
      }
      v45 = v17;
      sub_23DED62E0();
      sub_23DEA068C((unint64_t *)&qword_25432D940, 255, (uint64_t (*)(uint64_t))sub_23DED62E0, MEMORY[0x24BEE12B0]);
      a2 = sub_23DF14DD0();
      v29 = v28;
      swift_release();
      swift_bridgeObjectRelease();
      v7 = v47;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v31 = v43;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23DEAA1B4(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v47;
      }
      a1 = *(_QWORD *)(v7 + 16);
      v32 = *(_QWORD *)(v7 + 24);
      if (a1 >= v32 >> 1)
      {
        sub_23DEAA1B4(v32 > 1, a1 + 1, 1);
        v7 = v47;
      }
      v10 = v31 + 1;
      *(_QWORD *)(v7 + 16) = a1 + 1;
      v33 = v7 + 16 * a1;
      *(_QWORD *)(v33 + 32) = a2;
      *(_QWORD *)(v33 + 40) = v29;
      v3 = v42;
      if (v10 == v6)
      {
        a1 = v35;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v6 = sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t DebugSnapshot.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v1 = v0;
  v2 = sub_23DF14B3C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v50 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 24);
  v56 = *(_QWORD *)(v0 + 16);
  v57 = v6;
  swift_bridgeObjectRetain();
  v7 = sub_23DED3660();
  if (v8)
  {
    v9 = (uint64_t)v7;
    v10 = v8;
    v54 = 10;
    v55 = 0xE100000000000000;
    v52 = 10;
    v53 = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v7, v8);
    v46[-2] = &v52;
    swift_bridgeObjectRetain();
    v11 = sub_23DED4A40(0x7FFFFFFFFFFFFFFFLL, 1, sub_23DED62C8, (uint64_t)&v46[-4], v9, v10);
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v46[1] = v1;
      v47 = 0;
      v48 = v3;
      v49 = v2;
      v51 = MEMORY[0x24BEE4AF8];
      sub_23DEAA1B4(0, v12, 0);
      v13 = v51;
      v46[0] = v11;
      v14 = (uint64_t *)(v11 + 56);
      do
      {
        v15 = *(v14 - 3);
        v16 = *(v14 - 2);
        v18 = *(v14 - 1);
        v17 = *v14;
        v52 = 538976380;
        v53 = 0xE400000000000000;
        swift_bridgeObjectRetain();
        MEMORY[0x242647878](v15, v16, v18, v17);
        sub_23DF14E60();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v52;
        v20 = v53;
        v51 = v13;
        v22 = *(_QWORD *)(v13 + 16);
        v21 = *(_QWORD *)(v13 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_23DEAA1B4(v21 > 1, v22 + 1, 1);
          v13 = v51;
        }
        *(_QWORD *)(v13 + 16) = v22 + 1;
        v23 = v13 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v19;
        *(_QWORD *)(v23 + 40) = v20;
        v14 += 4;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v3 = v48;
      v2 = v49;
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x24BEE4AF8];
    }
    v52 = v13;
    sub_23DED62E0();
    sub_23DEA068C((unint64_t *)&qword_25432D940, 255, (uint64_t (*)(uint64_t))sub_23DED62E0, MEMORY[0x24BEE12B0]);
    sub_23DF14DD0();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
  }
  v24 = sub_23DED396C();
  if (v25)
  {
    v26 = v24;
    v27 = v25;
    v54 = 10;
    v55 = 0xE100000000000000;
    v52 = 10;
    v53 = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v24, v25);
    v46[-2] = &v52;
    swift_bridgeObjectRetain();
    v28 = sub_23DED4A40(0x7FFFFFFFFFFFFFFFLL, 1, sub_23DED62C8, (uint64_t)&v46[-4], v26, v27);
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v48 = v3;
      v49 = v2;
      v51 = MEMORY[0x24BEE4AF8];
      sub_23DEAA1B4(0, v29, 0);
      v30 = v51;
      v47 = v28;
      v31 = (uint64_t *)(v28 + 56);
      do
      {
        v32 = *(v31 - 3);
        v33 = *(v31 - 2);
        v34 = *(v31 - 1);
        v35 = *v31;
        v52 = 538976380;
        v53 = 0xE400000000000000;
        swift_bridgeObjectRetain();
        MEMORY[0x242647878](v32, v33, v34, v35);
        sub_23DF14E60();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 = v52;
        v37 = v53;
        v51 = v30;
        v39 = *(_QWORD *)(v30 + 16);
        v38 = *(_QWORD *)(v30 + 24);
        if (v39 >= v38 >> 1)
        {
          sub_23DEAA1B4(v38 > 1, v39 + 1, 1);
          v30 = v51;
        }
        *(_QWORD *)(v30 + 16) = v39 + 1;
        v40 = v30 + 16 * v39;
        *(_QWORD *)(v40 + 32) = v36;
        *(_QWORD *)(v40 + 40) = v37;
        v31 += 4;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      v3 = v48;
      v2 = v49;
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = MEMORY[0x24BEE4AF8];
    }
    v52 = v30;
    sub_23DED62E0();
    sub_23DEA068C((unint64_t *)&qword_25432D940, 255, (uint64_t (*)(uint64_t))sub_23DED62E0, MEMORY[0x24BEE12B0]);
    sub_23DF14DD0();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
  }
  v54 = v56;
  v55 = v57;
  v41 = v50;
  sub_23DF14B30();
  sub_23DECEDF8();
  v42 = sub_23DF15118();
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v41, v2);
  swift_bridgeObjectRelease();
  v54 = v42;
  v55 = v44;
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  return v54;
}

uint64_t sub_23DED4374()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475626972747461;
  if (*v0 != 1)
    v1 = 0x63656A624F627573;
  if (*v0)
    return v1;
  else
    return 0x7463656A626FLL;
}

uint64_t sub_23DED43D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DED686C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DED43F4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23DED4400()
{
  sub_23DED6334();
  return sub_23DF154CC();
}

uint64_t sub_23DED4428()
{
  sub_23DED6334();
  return sub_23DF154D8();
}

uint64_t DebugSnapshot.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DebugSnapshot.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t DebugSnapshot.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_23DED64D4(0, &qword_256D0F100, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v12 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DED6334();
  sub_23DF154C0();
  LOBYTE(v13) = 0;
  sub_23DF15364();
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 32);
    HIBYTE(v12) = 1;
    sub_23DEB3464();
    sub_23DED6530(&qword_256D0F110, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_23DF15388();
    v13 = *(_QWORD *)(v3 + 40);
    HIBYTE(v12) = 2;
    sub_23DED6378();
    sub_23DED644C();
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t DebugSnapshot.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  DebugSnapshot.init(from:)(a1);
  return v2;
}

_QWORD *DebugSnapshot.init(from:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_23DED64D4(0, &qword_256D0F138, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v13 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DED6334();
  sub_23DF154B4();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v5;
    LOBYTE(v15) = 0;
    v10 = v13;
    v1[2] = sub_23DF15310();
    v1[3] = v11;
    sub_23DEB3464();
    v14 = 1;
    sub_23DED6530(&qword_256D0F140, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    sub_23DF15334();
    v1[4] = v15;
    sub_23DED6378();
    v14 = 2;
    sub_23DED658C();
    sub_23DF15334();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
    v1[5] = v15;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

_QWORD *sub_23DED48D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  v5 = swift_allocObject();
  result = DebugSnapshot.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_23DED4924(_QWORD *a1)
{
  return DebugSnapshot.encode(to:)(a1);
}

uint64_t sub_23DED4944(_QWORD **a1, _QWORD **a2)
{
  return _s19HealthOrchestration13DebugSnapshotC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_23DED4950()
{
  return DebugSnapshot.description.getter();
}

uint64_t sub_23DED4970(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DEF7D2C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DED5034(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23DED49D8(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_23DEF7D40(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_23DED571C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23DED4A40(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_23DED4EDC(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_23DF14E84();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_23DF14E54();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_23DF14E54();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_23DF14E90();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_23DF063A8(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_23DF063A8((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_23DF14E54();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_23DF14E90();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_23DF063A8(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_23DF063A8((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_23DF15280();
  __break(1u);
LABEL_42:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DED4EDC(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_23DF14E90();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_23DF063A8(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_23DF063A8((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DED5034(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_23DF153B8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23DED5E18(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_23DED5FC4((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_23DEF7D18((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23DF14EFC();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_23DF15400();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_23DF15400()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DEF77DC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_23DEF77DC((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_23DED5FC4((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_23DF15400() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DED571C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 *v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *__dst;

  v3 = a1[1];
  result = sub_23DF153B8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23DED5EE4(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v110 = result;
  v107 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v98 = v11;
      v109 = v8;
      if (v12 >= 2)
      {
        v99 = *v107;
        do
        {
          v100 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v99)
            goto LABEL_159;
          v101 = v98;
          v102 = *(_QWORD *)&v98[16 * v100 + 32];
          v103 = *(_QWORD *)&v98[16 * v12 + 24];
          sub_23DEC6A0C((char *)(v99 + 32 * v102), (char *)(v99 + 32 * *(_QWORD *)&v98[16 * v12 + 16]), v99 + 32 * v103, __dst);
          if (v1)
            break;
          if (v103 < v102)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v101 = sub_23DEF7D18((uint64_t)v101);
          if (v100 >= *((_QWORD *)v101 + 2))
            goto LABEL_149;
          v104 = &v101[16 * v100 + 32];
          *(_QWORD *)v104 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = *((_QWORD *)v101 + 2);
          if (v12 > v105)
            goto LABEL_150;
          memmove(&v101[16 * v12 + 16], &v101[16 * v12 + 32], 16 * (v105 - v12));
          v98 = v101;
          *((_QWORD *)v101 + 2) = v105 - 1;
          v12 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v109 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v109 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    sub_23DE9ACDC();
    v7 = sub_23DF14EFC();
    *(_QWORD *)(v7 + 16) = v6;
    v109 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v108 = *a1 + 8;
  v106 = *a1 + 24;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v111 = v3;
  v112 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 32 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 32 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_23DF15400();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v108 + 32 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 32 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_23DF15400()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 4;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 32 * v20;
        v26 = 32 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = (_OWORD *)(v10 + v26);
            v30 = v10 + v25;
            v31 = *(_OWORD *)(v10 + v26);
            v32 = *(_QWORD *)(v10 + v26 + 16);
            v33 = *(_QWORD *)(v10 + v26 + 24);
            v34 = *(_OWORD *)(v10 + v25 - 16);
            *v29 = *(_OWORD *)(v10 + v25 - 32);
            v29[1] = v34;
            *(_OWORD *)(v30 - 32) = v31;
            *(_QWORD *)(v30 - 16) = v32;
            *(_QWORD *)(v30 - 8) = v33;
          }
          ++v28;
          v25 -= 32;
          v26 += 32;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v110)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DEF77DC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v48 = *((_QWORD *)v11 + 2);
    v47 = *((_QWORD *)v11 + 3);
    v12 = v48 + 1;
    if (v48 >= v47 >> 1)
      v11 = sub_23DEF77DC((char *)(v47 > 1), v48 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v49 = v11 + 32;
    v50 = &v11[16 * v48 + 32];
    *(_QWORD *)v50 = v13;
    *((_QWORD *)v50 + 1) = v9;
    if (v48)
    {
      v10 = v112;
      while (1)
      {
        v51 = v12 - 1;
        if (v12 >= 4)
        {
          v56 = &v49[16 * v12];
          v57 = *((_QWORD *)v56 - 8);
          v58 = *((_QWORD *)v56 - 7);
          v62 = __OFSUB__(v58, v57);
          v59 = v58 - v57;
          if (v62)
            goto LABEL_135;
          v61 = *((_QWORD *)v56 - 6);
          v60 = *((_QWORD *)v56 - 5);
          v62 = __OFSUB__(v60, v61);
          v54 = v60 - v61;
          v55 = v62;
          if (v62)
            goto LABEL_136;
          v63 = v12 - 2;
          v64 = &v49[16 * v12 - 32];
          v66 = *(_QWORD *)v64;
          v65 = *((_QWORD *)v64 + 1);
          v62 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          if (v62)
            goto LABEL_138;
          v62 = __OFADD__(v54, v67);
          v68 = v54 + v67;
          if (v62)
            goto LABEL_141;
          if (v68 >= v59)
          {
            v86 = &v49[16 * v51];
            v88 = *(_QWORD *)v86;
            v87 = *((_QWORD *)v86 + 1);
            v62 = __OFSUB__(v87, v88);
            v89 = v87 - v88;
            if (v62)
              goto LABEL_145;
            v79 = v54 < v89;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v80 = *((_QWORD *)v11 + 4);
            v81 = *((_QWORD *)v11 + 5);
            v62 = __OFSUB__(v81, v80);
            v73 = v81 - v80;
            v74 = v62;
            goto LABEL_99;
          }
          v53 = *((_QWORD *)v11 + 4);
          v52 = *((_QWORD *)v11 + 5);
          v62 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          v55 = v62;
        }
        if ((v55 & 1) != 0)
          goto LABEL_137;
        v63 = v12 - 2;
        v69 = &v49[16 * v12 - 32];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v72 = __OFSUB__(v70, v71);
        v73 = v70 - v71;
        v74 = v72;
        if (v72)
          goto LABEL_140;
        v75 = &v49[16 * v51];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v62 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v62)
          goto LABEL_143;
        if (__OFADD__(v73, v78))
          goto LABEL_144;
        if (v73 + v78 >= v54)
        {
          v79 = v54 < v78;
LABEL_105:
          if (v79)
            v51 = v63;
          goto LABEL_107;
        }
LABEL_99:
        if ((v74 & 1) != 0)
          goto LABEL_139;
        v82 = &v49[16 * v51];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v62 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v62)
          goto LABEL_142;
        if (v85 < v73)
          goto LABEL_15;
LABEL_107:
        v90 = v51 - 1;
        if (v51 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v91 = v11;
        v92 = v10;
        v93 = &v49[16 * v90];
        v94 = *(_QWORD *)v93;
        v95 = &v49[16 * v51];
        v96 = *((_QWORD *)v95 + 1);
        sub_23DEC6A0C((char *)(v92 + 32 * *(_QWORD *)v93), (char *)(v92 + 32 * *(_QWORD *)v95), v92 + 32 * v96, __dst);
        if (v1)
          goto LABEL_115;
        if (v96 < v94)
          goto LABEL_132;
        if (v51 > *((_QWORD *)v91 + 2))
          goto LABEL_133;
        *(_QWORD *)v93 = v94;
        *(_QWORD *)&v49[16 * v90 + 8] = v96;
        v97 = *((_QWORD *)v91 + 2);
        if (v51 >= v97)
          goto LABEL_134;
        v11 = v91;
        v12 = v97 - 1;
        memmove(&v49[16 * v51], v95 + 16, 16 * (v97 - 1 - v51));
        *((_QWORD *)v91 + 2) = v97 - 1;
        v79 = v97 > 2;
        v10 = v112;
        if (!v79)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v112;
LABEL_15:
    v3 = v111;
    if (v9 >= v111)
    {
      v8 = v109;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v110))
    goto LABEL_153;
  if (v13 + v110 >= v3)
    v35 = v3;
  else
    v35 = v13 + v110;
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      v36 = (_QWORD *)(v106 + 32 * v9);
      do
      {
        v37 = (uint64_t *)(v10 + 32 * v9);
        v38 = *v37;
        v39 = v37[1];
        v40 = v13;
        v41 = v36;
        do
        {
          v42 = (__int128 *)(v41 - 7);
          v43 = v38 == *(v41 - 7) && v39 == *(v41 - 6);
          if (v43 || (sub_23DF15400() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v45 = *v42;
          v44 = *(_OWORD *)(v41 - 5);
          *(v41 - 4) = *v41;
          v41 -= 4;
          v38 = v41[1];
          v39 = v41[2];
          v46 = v41[3];
          v42[2] = v45;
          v42[3] = v44;
          *(v41 - 3) = v38;
          *(v41 - 2) = v39;
          *(v41 - 1) = v46;
          ++v40;
        }
        while (v9 != v40);
        ++v9;
        v36 += 4;
      }
      while (v9 != v35);
      v9 = v35;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_23DF15280();
  __break(1u);
  return result;
}

uint64_t sub_23DED5E18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_23DF15400(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DED5EE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 + 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 32 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (_QWORD *)v8;
    while (1)
    {
      v13 = (__int128 *)(v12 - 7);
      v14 = result == *(v12 - 7) && v10 == *(v12 - 6);
      if (v14 || (result = sub_23DF15400(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = *v13;
      v15 = *(_OWORD *)(v12 - 5);
      *(v12 - 4) = *v12;
      v12 -= 4;
      result = v12[1];
      v10 = v12[2];
      v17 = v12[3];
      v13[2] = v16;
      v13[3] = v15;
      *(v12 - 3) = result;
      *(v12 - 2) = v10;
      *(v12 - 1) = v17;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DED5FC4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_23DF15400() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_23DF15400() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_23DEF78E8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t _s19HealthOrchestration13DebugSnapshotC2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;

  v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if ((v4 || (sub_23DF15400() & 1) != 0) && (sub_23DEA3580(a1[4], a2[4]) & 1) != 0)
    return sub_23DEA3F28(a1[5], a2[5]);
  else
    return 0;
}

uint64_t sub_23DED62C8(_QWORD *a1)
{
  return sub_23DED69FC(a1) & 1;
}

void sub_23DED62E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D930)
  {
    v0 = sub_23DF14F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D930);
  }
}

unint64_t sub_23DED6334()
{
  unint64_t result;

  result = qword_256D0F108;
  if (!qword_256D0F108)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19178, &type metadata for DebugSnapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F108);
  }
  return result;
}

void sub_23DED6378()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0F118)
  {
    sub_23DED63DC();
    v0 = sub_23DF14DAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0F118);
  }
}

void sub_23DED63DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0E3C0)
  {
    type metadata accessor for DebugSnapshot();
    v0 = sub_23DF14F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0E3C0);
  }
}

uint64_t type metadata accessor for DebugSnapshot()
{
  return objc_opt_self();
}

unint64_t sub_23DED644C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256D0F120;
  if (!qword_256D0F120)
  {
    sub_23DED6378();
    v2 = v1;
    v3 = sub_23DED6614(&qword_256D0F128, &qword_256D0F130, (uint64_t)&protocol conformance descriptor for DebugSnapshot, MEMORY[0x24BEE12A0]);
    v4[0] = MEMORY[0x24BEE0D08];
    v4[1] = v3;
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE04C0], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256D0F120);
  }
  return result;
}

void sub_23DED64D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DED6334();
    v7 = a3(a1, &type metadata for DebugSnapshot.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DED6530(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    sub_23DEB3464();
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x2426483D0](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DED658C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256D0F148;
  if (!qword_256D0F148)
  {
    sub_23DED6378();
    v2 = v1;
    v3 = sub_23DED6614(&qword_256D0F150, &qword_256D0F158, (uint64_t)&protocol conformance descriptor for DebugSnapshot, MEMORY[0x24BEE12D0]);
    v4[0] = MEMORY[0x24BEE0D38];
    v4[1] = v3;
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE04E0], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256D0F148);
  }
  return result;
}

uint64_t sub_23DED6614(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = *a1;
  if (!result)
  {
    sub_23DED63DC();
    v10 = v9;
    v12 = sub_23DEA068C(a2, v11, (uint64_t (*)(uint64_t))type metadata accessor for DebugSnapshot, a3);
    result = MEMORY[0x2426483D0](a4, v10, &v12);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for DebugSnapshot()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DebugSnapshot.__allocating_init(_:attributes:subObjects:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of DebugSnapshot.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of DebugSnapshottable.debugSnapshot.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for DebugSnapshot.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DED6714 + 4 * byte_23DF18F95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DED6748 + 4 * byte_23DF18F90[v4]))();
}

uint64_t sub_23DED6748(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED6750(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DED6758);
  return result;
}

uint64_t sub_23DED6764(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DED676CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DED6770(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED6778(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugSnapshot.CodingKeys()
{
  return &type metadata for DebugSnapshot.CodingKeys;
}

unint64_t sub_23DED6798()
{
  unint64_t result;

  result = qword_256D0F218;
  if (!qword_256D0F218)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19150, &type metadata for DebugSnapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F218);
  }
  return result;
}

unint64_t sub_23DED67E0()
{
  unint64_t result;

  result = qword_256D0F220;
  if (!qword_256D0F220)
  {
    result = MEMORY[0x2426483D0](&unk_23DF190C0, &type metadata for DebugSnapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F220);
  }
  return result;
}

unint64_t sub_23DED6828()
{
  unint64_t result;

  result = qword_256D0F228;
  if (!qword_256D0F228)
  {
    result = MEMORY[0x2426483D0](&unk_23DF190E8, &type metadata for DebugSnapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F228);
  }
  return result;
}

uint64_t sub_23DED686C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7463656A626FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x63656A624F627573 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DED69C8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DED69EC()
{
  return swift_deallocObject();
}

uint64_t sub_23DED69FC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_23DF15400() & 1;
}

BOOL static DirectDispatchTarget.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DirectDispatchTarget.Errors.hash(into:)()
{
  return sub_23DF15484();
}

uint64_t DirectDispatchTarget.Errors.hashValue.getter()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t DirectDispatchTarget.__allocating_init(providers:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t DirectDispatchTarget.init(providers:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void DirectDispatchTarget.run(_:for:context:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t ObjectType;
  void (*v27)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v29;
  void *v30;
  _BYTE *v31;
  void *v32;
  void *v33;
  _BYTE *v34;
  void *v35;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v7 = a4;
  v8 = a3;
  v10 = a2[2];
  v9 = a2[3];
  v11 = *(_QWORD *)(v6 + 16);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *a2;
    v14 = a2[1];
    v15 = v11 + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      sub_23DE902F4(v15, (uint64_t)&v41);
      v16 = v42;
      v17 = v43;
      __swift_project_boxed_opaque_existential_1(&v41, v42);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17) == v13 && v18 == v14)
        break;
      v20 = sub_23DF15400();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        goto LABEL_24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
      v15 += 40;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        v8 = a3;
        v7 = a4;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_24:
    v8 = a3;
    swift_bridgeObjectRelease();
    sub_23DE902DC(&v41, (uint64_t)&v44);
    swift_bridgeObjectRelease();
    v7 = a4;
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_25;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_11:
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v45 + 1))
    {
LABEL_25:
      sub_23DED2190((uint64_t)&v44);
      sub_23DED6E2C();
      v33 = (void *)swift_allocError();
      *v34 = 0;
      v35 = (void *)sub_23DF14B6C();
      a5();

      return;
    }
  }
  sub_23DE902DC(&v44, (uint64_t)v47);
  v21 = v48;
  v22 = v49;
  __swift_project_boxed_opaque_existential_1(v47, v48);
  v23 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 16))(v8, v7, v21, v22) + 16);
  if (v23)
  {
    v24 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      v25 = *v24;
      ObjectType = swift_getObjectType();
      v27 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v25 + 24);
      swift_unknownObjectRetain();
      v27(&v44, ObjectType, v25);
      if ((_QWORD)v44 == v10 && *((_QWORD *)&v44 + 1) == v9)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      v29 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v24 += 2;
      if (!--v23)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_28:
    sub_23DED1BDC(a1, (void (*)(id))a5, a6, ObjectType, v25);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_22:
    sub_23DED6E2C();
    v30 = (void *)swift_allocError();
    *v31 = 1;
    v32 = (void *)sub_23DF14B6C();
    a5();

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
}

unint64_t sub_23DED6E2C()
{
  unint64_t result;

  result = qword_25432E1D0;
  if (!qword_25432E1D0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DirectDispatchTarget.Errors, &type metadata for DirectDispatchTarget.Errors);
    atomic_store(result, (unint64_t *)&qword_25432E1D0);
  }
  return result;
}

uint64_t DirectDispatchTarget.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DirectDispatchTarget.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_23DED6EB4()
{
  unint64_t result;

  result = qword_256D0F230;
  if (!qword_256D0F230)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for DirectDispatchTarget.Errors, &type metadata for DirectDispatchTarget.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0F230);
  }
  return result;
}

void sub_23DED6EF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  DirectDispatchTarget.run(_:for:context:completion:)(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata accessor for DirectDispatchTarget()
{
  return objc_opt_self();
}

uint64_t method lookup function for DirectDispatchTarget()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DirectDispatchTarget.__allocating_init(providers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for DirectDispatchTarget.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DED6F98 + 4 * byte_23DF191D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DED6FCC + 4 * byte_23DF191D0[v4]))();
}

uint64_t sub_23DED6FCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED6FD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DED6FDCLL);
  return result;
}

uint64_t sub_23DED6FE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DED6FF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DED6FF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DED6FFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DirectDispatchTarget.Errors()
{
  return &type metadata for DirectDispatchTarget.Errors;
}

unint64_t static EnvironmentalStateDescription.networkReachable()@<X0>(unint64_t *a1@<X8>)
{
  return sub_23DED72A0((uint64_t)&unk_250EADE68, a1);
}

unint64_t static NetworkReachabilityStateComponent.identifier.getter()
{
  return 0xD000000000000025;
}

unint64_t static EnvironmentalStateDescription.networkInexpensive()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  v2 = sub_23DE93224(MEMORY[0x24BEE4AF8]);
  sub_23DED7170(0, &qword_25432DB88, (unint64_t *)&unk_25432D8B0, sub_23DE95A68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16970;
  *(_QWORD *)(inited + 32) = 0xD000000000000025;
  *(_QWORD *)(inited + 40) = 0x800000023DF1D230;
  sub_23DE95234(0, &qword_25432DB90, (uint64_t (*)(uint64_t))sub_23DED7220, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v4 + 32) = 0x7669736E65707845;
  *(_QWORD *)(v4 + 40) = 0xE900000000000065;
  v5 = sub_23DED8280((uint64_t)&unk_250EADEA8);
  swift_arrayDestroy();
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(inited + 48) = sub_23DE93D3C(v4);
  result = sub_23DE93238(inited);
  *a1 = v2;
  a1[1] = result;
  return result;
}

void sub_23DED7170(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_23DED71C4(255, a3, a4);
    v5 = sub_23DF153D0();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_23DED71C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_23DED7220()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432D8C8)
  {
    sub_23DED8708(255, (unint64_t *)&qword_25432D990, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE16D8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432D8C8);
  }
}

unint64_t static EnvironmentalStateDescription.networkUnreachable()@<X0>(unint64_t *a1@<X8>)
{
  return sub_23DED72A0((uint64_t)&unk_250EADED8, a1);
}

unint64_t sub_23DED72A0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t inited;
  unint64_t v5;
  unint64_t result;

  sub_23DED7170(0, &qword_25432DB80, (unint64_t *)&qword_25432D8A8, (void (*)(uint64_t))sub_23DEB3464);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16970;
  *(_QWORD *)(inited + 32) = 0xD000000000000025;
  *(_QWORD *)(inited + 40) = 0x800000023DF1D230;
  *(_QWORD *)(inited + 48) = sub_23DE930F0(a1);
  v5 = sub_23DE93224(inited);
  result = sub_23DE93238(MEMORY[0x24BEE4AF8]);
  *a2 = v5;
  a2[1] = result;
  return result;
}

uint64_t static NetworkReachabilityStateComponent.ReachabilityKey.getter()
{
  return 0x6962616863616552;
}

uint64_t static NetworkReachabilityStateComponent.ExpensiveKey.getter()
{
  return 0x7669736E65707845;
}

uint64_t *NetworkReachabilityStateComponent.__allocating_init(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  type metadata accessor for NetworkReachabilityStateComponent.NetworkReachabilityShim();
  v4 = swift_allocObject();
  sub_23DED844C();
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = (uint64_t *)swift_allocObject();
  return sub_23DED7CF4(a1, a2, v4, v6);
}

uint64_t *NetworkReachabilityStateComponent.__allocating_init(observer:shim:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  v10 = sub_23DED84C8(a1, a2, v9, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v10;
}

uint64_t *NetworkReachabilityStateComponent.init(observer:shim:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x24BDAC7A8](v9, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_23DED7FB4(a1, a2, (uint64_t)v11, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

uint64_t sub_23DED7534(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  os_unfair_lock_s *v23;
  uint64_t *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  void (*v29)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  _QWORD v30[2];
  uint64_t v31;

  v5 = sub_23DF14CE0();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x24BDAC7A8](v5, v7);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v11);
  v13 = (char *)v30 - v12;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = result;
    v16 = a1[3];
    v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v16);
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    v30[0] = a3;
    LOBYTE(v16) = v18(v16, v17);
    v19 = a1[3];
    v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, *MEMORY[0x24BDE0638], v5);
    v21 = sub_23DF14CD4();
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v10, v5);
    v22(v13, v5);
    v23 = *(os_unfair_lock_s **)(v15 + 80);
    v24 = (uint64_t *)&v23[4];
    v25 = v23 + 6;
    os_unfair_lock_lock(v23 + 6);
    sub_23DED7738(v24, v21 & 1, v16 & 1, &v31);
    os_unfair_lock_unlock(v25);
    v26 = v31;
    v27 = *(_QWORD *)(v15 + 32);
    ObjectType = swift_getObjectType();
    v29 = *(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v27 + 8);
    swift_unknownObjectRetain();
    swift_retain();
    v29(v26, v15, &protocol witness table for NetworkReachabilityStateComponent, ObjectType, v27);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_23DED7738@<X0>(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  if ((a2 & 1) != 0)
    v7 = 0x6C62616863616572;
  else
    v7 = 0x6168636165726E75;
  if ((a2 & 1) != 0)
    v8 = 0xE900000000000065;
  else
    v8 = 0xEB00000000656C62;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *a1;
  *a1 = 0x8000000000000000;
  sub_23DEEB360(v7, v8, 0x6962616863616552, 0xEC0000007974696CLL, isUniquelyReferenced_nonNull_native);
  *a1 = v15;
  swift_bridgeObjectRelease();
  v10 = (a3 & 1) == 0;
  if ((a3 & 1) != 0)
    v11 = 0x7669736E65707865;
  else
    v11 = 0x657078652D746F6ELL;
  if (v10)
    v12 = 0xED0000657669736ELL;
  else
    v12 = 0xE900000000000065;
  v13 = swift_isUniquelyReferenced_nonNull_native();
  v16 = *a1;
  *a1 = 0x8000000000000000;
  sub_23DEEB360(v11, v12, 0x7669736E65707845, 0xE900000000000065, v13);
  *a1 = v16;
  swift_bridgeObjectRelease();
  *a4 = *a1;
  return swift_bridgeObjectRetain();
}

unint64_t NetworkReachabilityStateComponent.identifier.getter()
{
  return 0xD000000000000025;
}

uint64_t NetworkReachabilityStateComponent.currentState.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t sub_23DED7914@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall NetworkReachabilityStateComponent.stopObserving()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_23DED7974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = v3;
  sub_23DF14CBC();
  swift_allocObject();
  v7 = sub_23DF14CB0();
  v8 = swift_allocObject();
  swift_weakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  swift_retain();
  swift_retain();
  sub_23DF14C98();
  swift_release();
  sub_23DF14CA4();
  v10 = *(_QWORD *)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 24));
  swift_release();
  *(_QWORD *)(v10 + 16) = v7;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 24));
  return swift_release();
}

uint64_t sub_23DED7A78(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t Strong;
  uint64_t result;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9[5];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  result = swift_release();
  if (Strong)
  {
    v7 = sub_23DF14CF8();
    v9[3] = v7;
    v9[4] = (uint64_t)&protocol witness table for NWPath;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(boxed_opaque_existential_1, a1, v7);
    a3(v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  return result;
}

uint64_t sub_23DED7B1C(_QWORD *a1)
{
  uint64_t result;

  result = swift_release();
  *a1 = 0;
  return result;
}

uint64_t sub_23DED7B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DED7974(a1, a2, a3);
}

void sub_23DED7B6C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DED7B1C(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t NetworkReachabilityStateComponent.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  return v0;
}

uint64_t NetworkReachabilityStateComponent.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t sub_23DED7C30()
{
  return 0xD000000000000025;
}

uint64_t sub_23DED7C4C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 80);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DED7914(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DED7CA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t *sub_23DED7CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v28 = a1;
  v29 = a2;
  v30 = *a4;
  v6 = sub_23DF1504C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DF15040();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v11, v13);
  v14 = sub_23DF14D34();
  MEMORY[0x24BDAC7A8](v14, v15);
  v32[3] = type metadata accessor for NetworkReachabilityStateComponent.NetworkReachabilityShim();
  v32[4] = &off_250EB1690;
  v32[0] = a3;
  sub_23DE95920();
  sub_23DF14D28();
  v31 = MEMORY[0x24BEE4AF8];
  sub_23DED8630();
  sub_23DE95234(0, (unint64_t *)&qword_25432D950, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DE9595C();
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x24BEE5750], v6);
  a4[2] = sub_23DF15064();
  v16 = sub_23DE930F0(MEMORY[0x24BEE4AF8]);
  sub_23DED8678();
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = v16;
  a4[10] = v17;
  sub_23DE902F4((uint64_t)v32, (uint64_t)(a4 + 5));
  v18 = v29;
  a4[3] = v28;
  a4[4] = v18;
  v19 = a4[8];
  v20 = a4[9];
  __swift_project_boxed_opaque_existential_1(a4 + 5, v19);
  v21 = a4[2];
  v22 = swift_allocObject();
  swift_weakInit();
  v23 = swift_allocObject();
  v24 = v30;
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v24;
  v25 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v20 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v25(v21, sub_23DED8764, v23, v19, v20);
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  swift_release();
  return a4;
}

uint64_t *sub_23DED7FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t (*)(_QWORD *), uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[5];

  v33 = a1;
  v34 = a2;
  v35 = *a4;
  v32 = sub_23DF1504C();
  v10 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DF15040();
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v14, v16);
  v17 = sub_23DF14D34();
  MEMORY[0x24BDAC7A8](v17, v18);
  v37[3] = a5;
  v37[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  sub_23DE95920();
  sub_23DF14D28();
  v20 = MEMORY[0x24BEE4AF8];
  v36 = MEMORY[0x24BEE4AF8];
  sub_23DED8630();
  sub_23DE95234(0, (unint64_t *)&qword_25432D950, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DE9595C();
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x24BEE5750], v32);
  a4[2] = sub_23DF15064();
  v21 = sub_23DE930F0(v20);
  sub_23DED8678();
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 16) = v21;
  a4[10] = v22;
  sub_23DE902F4((uint64_t)v37, (uint64_t)(a4 + 5));
  v23 = v34;
  a4[3] = v33;
  a4[4] = v23;
  v24 = a4[8];
  v25 = a4[9];
  __swift_project_boxed_opaque_existential_1(a4 + 5, v24);
  v26 = a4[2];
  v27 = swift_allocObject();
  swift_weakInit();
  v28 = swift_allocObject();
  v29 = v35;
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = v29;
  v30 = *(void (**)(uint64_t, uint64_t (*)(_QWORD *), uint64_t, uint64_t, uint64_t))(v25 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v30(v26, sub_23DED86DC, v28, v24, v25);
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  swift_release();
  return a4;
}

uint64_t sub_23DED8280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DED8708(0, &qword_25432DA08, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE24D8]);
    v3 = sub_23DF15178();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      result = sub_23DF154A8();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_23DF15400(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_23DF15400();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t type metadata accessor for NetworkReachabilityStateComponent.NetworkReachabilityShim()
{
  return objc_opt_self();
}

void sub_23DED844C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0F238)
  {
    sub_23DE95234(255, &qword_256D0F240, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0440], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0F238);
  }
}

uint64_t *sub_23DED84C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  return sub_23DED7FB4(a1, a2, (uint64_t)v13, v14, a5, a6);
}

uint64_t dispatch thunk of ReachabilityShim.start(queue:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ReachabilityShim.stop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReachabilityPath.isExpensive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReachabilityPath.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for NetworkReachabilityStateComponent()
{
  return objc_opt_self();
}

uint64_t method lookup function for NetworkReachabilityStateComponent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkReachabilityStateComponent.__allocating_init(observer:shim:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_23DED85D4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DED85F8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DED8624(uint64_t a1)
{
  uint64_t v1;

  return sub_23DED7A78(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

unint64_t sub_23DED8630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25432D9B0;
  if (!qword_25432D9B0)
  {
    v1 = sub_23DF15040();
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_25432D9B0);
  }
  return result;
}

void sub_23DED8678()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0F3A0)
  {
    sub_23DEB3464();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0F3A0);
  }
}

uint64_t sub_23DED86DC(_QWORD *a1)
{
  uint64_t v1;

  return sub_23DED7534(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23DED86E4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DED8708(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void static PriorityRuleSet.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  sub_23DED8C7C(a1, a2, sub_23DE8DAB8);
}

BOOL static PriorityRuleSet.Priority.< infix(_:_:)(char *a1, char *a2)
{
  return qword_23DF19908[*a1] < qword_23DF19908[*a2];
}

HealthOrchestration::PriorityRuleSet::Priority_optional __swiftcall PriorityRuleSet.Priority.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthOrchestration::PriorityRuleSet::Priority_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DF152EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static PriorityRuleSet.Priority.allCases.getter()
{
  return &unk_250EADF98;
}

uint64_t PriorityRuleSet.Priority.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DED8834 + 4 * byte_23DF193E0[*v0]))(0x6669636570736E75, 0xEB00000000646569);
}

uint64_t sub_23DED8834()
{
  return 0x746E65677275;
}

uint64_t sub_23DED8848()
{
  return 0x616E65746E69616DLL;
}

uint64_t sub_23DED8868()
{
  return 0x64656B636F6C62;
}

void sub_23DED8880(char *a1)
{
  sub_23DE8D7D0(*a1);
}

void sub_23DED888C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23DF15478();
  __asm { BR              X9 }
}

uint64_t sub_23DED88E0()
{
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

void sub_23DED8954()
{
  __asm { BR              X10 }
}

uint64_t sub_23DED8998()
{
  sub_23DF14E3C();
  return swift_bridgeObjectRelease();
}

void sub_23DED89F8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23DF15478();
  __asm { BR              X9 }
}

uint64_t sub_23DED8A48()
{
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

HealthOrchestration::PriorityRuleSet::Priority_optional sub_23DED8ABC(Swift::String *a1)
{
  return PriorityRuleSet.Priority.init(rawValue:)(*a1);
}

uint64_t sub_23DED8AC8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23DED8B00 + 4 * byte_23DF193F0[*v0]))();
}

void sub_23DED8B00(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65677275;
  a1[1] = 0xE600000000000000;
}

void sub_23DED8B18(_QWORD *a1@<X8>)
{
  *a1 = 0x616E65746E69616DLL;
  a1[1] = 0xEB0000000065636ELL;
}

void sub_23DED8B3C(_QWORD *a1@<X8>)
{
  *a1 = 0x64656B636F6C62;
  a1[1] = 0xE700000000000000;
}

void sub_23DED8B58(_QWORD *a1@<X8>)
{
  *a1 = &unk_250EADFC0;
}

uint64_t sub_23DED8B68()
{
  sub_23DEDB704();
  return sub_23DF14EB4();
}

uint64_t sub_23DED8BC4()
{
  sub_23DEDB704();
  return sub_23DF14EA8();
}

uint64_t PriorityRuleSet.Rule.descriptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PriorityRuleSet.Rule.descriptions.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PriorityRuleSet.Rule.descriptions.modify())()
{
  return nullsub_1;
}

uint64_t (*PriorityRuleSet.Rule.priority.modify())()
{
  return nullsub_1;
}

HealthOrchestration::PriorityRuleSet::Rule __swiftcall PriorityRuleSet.Rule.init(descriptions:priority:)(Swift::OpaquePointer descriptions, HealthOrchestration::PriorityRuleSet::Priority priority)
{
  uint64_t v2;
  char v3;
  HealthOrchestration::PriorityRuleSet::Rule result;

  v3 = *(_BYTE *)priority;
  *(Swift::OpaquePointer *)v2 = descriptions;
  *(_BYTE *)(v2 + 8) = v3;
  result.descriptions = descriptions;
  result.priority = priority;
  return result;
}

void static PriorityRuleSet.Rule.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  sub_23DED8C7C(a1, a2, sub_23DE8E614);
}

void sub_23DED8C7C(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  char v3;

  v3 = *(_BYTE *)(a1 + 8);
  if ((a3(*(_QWORD *)a1, *a2) & 1) != 0)
    sub_23DE8D7D0(v3);
}

uint64_t sub_23DED8CD4()
{
  _BYTE *v0;

  if (*v0)
    return 0x797469726F697270;
  else
    return 0x7470697263736564;
}

uint64_t sub_23DED8D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEDB4DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DED8D3C()
{
  sub_23DED8F2C();
  return sub_23DF154CC();
}

uint64_t sub_23DED8D64()
{
  sub_23DED8F2C();
  return sub_23DF154D8();
}

uint64_t PriorityRuleSet.Rule.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  sub_23DEDAE1C(0, &qword_256D0F3A8, (uint64_t (*)(void))sub_23DED8F2C, (uint64_t)&type metadata for PriorityRuleSet.Rule.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = *v1;
  v13 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DED8F2C();
  sub_23DF154C0();
  v18 = v9;
  v17 = 0;
  sub_23DEABD84(0, &qword_256D0F3B8, (uint64_t)&type metadata for EnvironmentalStateDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DED920C(&qword_256D0F3C0, (uint64_t (*)(void))sub_23DED8F70, MEMORY[0x24BEE12A0]);
  v10 = v14;
  sub_23DF15388();
  if (!v10)
  {
    v16 = v13;
    v15 = 1;
    sub_23DED8FB4();
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t sub_23DED8F2C()
{
  unint64_t result;

  result = qword_256D0F3B0;
  if (!qword_256D0F3B0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF198B0, &type metadata for PriorityRuleSet.Rule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F3B0);
  }
  return result;
}

unint64_t sub_23DED8F70()
{
  unint64_t result;

  result = qword_256D0F3C8;
  if (!qword_256D0F3C8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for EnvironmentalStateDescription, &type metadata for EnvironmentalStateDescription);
    atomic_store(result, (unint64_t *)&qword_256D0F3C8);
  }
  return result;
}

unint64_t sub_23DED8FB4()
{
  unint64_t result;

  result = qword_256D0F3D0;
  if (!qword_256D0F3D0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet.Priority, &type metadata for PriorityRuleSet.Priority);
    atomic_store(result, (unint64_t *)&qword_256D0F3D0);
  }
  return result;
}

uint64_t PriorityRuleSet.Rule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v15 = a2;
  sub_23DEDAE1C(0, &qword_256D0F3D8, (uint64_t (*)(void))sub_23DED8F2C, (uint64_t)&type metadata for PriorityRuleSet.Rule.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DED8F2C();
  sub_23DF154B4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v10 = v6;
  v11 = v15;
  sub_23DEABD84(0, &qword_256D0F3B8, (uint64_t)&type metadata for EnvironmentalStateDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v18 = 0;
  sub_23DED920C(&qword_256D0F3E0, (uint64_t (*)(void))sub_23DED9288, MEMORY[0x24BEE12D0]);
  sub_23DF15334();
  v12 = v19;
  v16 = 1;
  sub_23DED92CC();
  swift_bridgeObjectRetain();
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  v13 = v17;
  *(_QWORD *)v11 = v12;
  *(_BYTE *)(v11 + 8) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DED920C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_23DEABD84(255, &qword_256D0F3B8, (uint64_t)&type metadata for EnvironmentalStateDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x2426483D0](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DED9288()
{
  unint64_t result;

  result = qword_256D0F3E8;
  if (!qword_256D0F3E8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for EnvironmentalStateDescription, &type metadata for EnvironmentalStateDescription);
    atomic_store(result, (unint64_t *)&qword_256D0F3E8);
  }
  return result;
}

unint64_t sub_23DED92CC()
{
  unint64_t result;

  result = qword_256D0F3F0;
  if (!qword_256D0F3F0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet.Priority, &type metadata for PriorityRuleSet.Priority);
    atomic_store(result, (unint64_t *)&qword_256D0F3F0);
  }
  return result;
}

void sub_23DED9310(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_23DED9CA4(a1, a2, a3, a4, sub_23DE8E614);
}

uint64_t sub_23DED931C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PriorityRuleSet.Rule.init(from:)(a1, a2);
}

uint64_t sub_23DED9330(_QWORD *a1)
{
  return PriorityRuleSet.Rule.encode(to:)(a1);
}

uint64_t (*PriorityRuleSet.orderedRules.modify())()
{
  return nullsub_1;
}

void PriorityRuleSet.basePriority.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *PriorityRuleSet.basePriority.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*PriorityRuleSet.basePriority.modify())()
{
  return nullsub_1;
}

HealthOrchestration::PriorityRuleSet::Priority __swiftcall PriorityRuleSet.priority(for:)(Swift::OpaquePointer a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *rawValue;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Bool v12;
  char v14;
  _BYTE *v15;
  char v16;

  v3 = *(_QWORD *)v2;
  v4 = v2[8];
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5)
  {
    rawValue = a1._rawValue;
    v14 = v2[8];
    v15 = v1;
    v7 = v3 + 32;
    LOBYTE(a1._rawValue) = swift_bridgeObjectRetain();
    v8 = 0;
    while (1)
    {
      if (v8 >= *(_QWORD *)(v3 + 16))
      {
        __break(1u);
        return (HealthOrchestration::PriorityRuleSet::Priority)a1._rawValue;
      }
      v9 = (_BYTE *)(v7 + 16 * v8);
      v10 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      if (v10)
        break;
LABEL_3:
      if (++v8 == v5)
      {
        LOBYTE(a1._rawValue) = swift_bridgeObjectRelease();
        v4 = v14;
        v1 = v15;
        goto LABEL_11;
      }
    }
    v16 = v9[8];
    swift_bridgeObjectRetain_n();
    v11 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = EnvironmentalStateDescription.matches(_:)((Swift::OpaquePointer)rawValue);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
        break;
      if (v10 == ++v11)
      {
        LOBYTE(a1._rawValue) = swift_bridgeObjectRelease_n();
        v7 = v3 + 32;
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
    LOBYTE(a1._rawValue) = swift_bridgeObjectRelease_n();
    v1 = v15;
    v4 = v16;
  }
LABEL_11:
  *v1 = v4;
  return (HealthOrchestration::PriorityRuleSet::Priority)a1._rawValue;
}

char *static PriorityRuleSet.constant(_:)@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *result;
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t static PriorityRuleSet.require(_:priority:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = MEMORY[0x24BEE3598];
  sub_23DEABD84(0, (unint64_t *)&qword_25432E328, (uint64_t)&type metadata for PriorityRuleSet.Rule, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23DF16970;
  sub_23DEABD84(0, &qword_256D0F3F8, (uint64_t)&type metadata for EnvironmentalStateDescription, (uint64_t (*)(_QWORD, uint64_t))v7);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 40) = v6;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 8) = 3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 static PriorityRuleSet.requireAll(_:priority:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;
  unint64_t v20;

  v5 = *a2;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = sub_23DE93224(MEMORY[0x24BEE4AF8]);
  v8 = sub_23DE93238(v6);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v19 = a3;
    swift_bridgeObjectRetain();
    v10 = (uint64_t *)(a1 + 40);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = v7;
      sub_23DEDA87C(v11, (uint64_t)sub_23DEDAD5C, 0, isUniquelyReferenced_nonNull_native, &v20);
      v7 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v14 = swift_isUniquelyReferenced_nonNull_native();
      v20 = v8;
      sub_23DEDA38C(v12, (uint64_t)sub_23DEDAD5C, 0, v14, &v20);
      v8 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a3 = v19;
  }
  v15 = MEMORY[0x24BEE3598];
  sub_23DEABD84(0, (unint64_t *)&qword_25432E328, (uint64_t)&type metadata for PriorityRuleSet.Rule, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23DF16970;
  sub_23DEABD84(0, &qword_256D0F3F8, (uint64_t)&type metadata for EnvironmentalStateDescription, (uint64_t (*)(_QWORD, uint64_t))v15);
  v17 = swift_allocObject();
  result = (__n128)xmmword_23DF16970;
  *(_OWORD *)(v17 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v17 + 32) = v7;
  *(_QWORD *)(v17 + 40) = v8;
  *(_QWORD *)(v16 + 32) = v17;
  *(_BYTE *)(v16 + 40) = v5;
  *(_QWORD *)a3 = v16;
  *(_BYTE *)(a3 + 8) = 3;
  return result;
}

uint64_t static PriorityRuleSet.requireAny(_:priority:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;

  v5 = *a2;
  sub_23DEABD84(0, (unint64_t *)&qword_25432E328, (uint64_t)&type metadata for PriorityRuleSet.Rule, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v6 + 32) = a1;
  *(_BYTE *)(v6 + 40) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DED9824()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69725065736162;
  else
    return 0x526465726564726FLL;
}

uint64_t sub_23DED9870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEDB5E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DED9894()
{
  sub_23DEDAD94();
  return sub_23DF154CC();
}

uint64_t sub_23DED98BC()
{
  sub_23DEDAD94();
  return sub_23DF154D8();
}

uint64_t PriorityRuleSet.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  sub_23DEDAE1C(0, &qword_256D0F400, (uint64_t (*)(void))sub_23DEDAD94, (uint64_t)&type metadata for PriorityRuleSet.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = *v1;
  v13 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEDAD94();
  sub_23DF154C0();
  v18 = v9;
  v17 = 0;
  sub_23DEABD84(0, &qword_256D0F410, (uint64_t)&type metadata for PriorityRuleSet.Rule, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DEDAE78(&qword_256D0F418, (uint64_t (*)(void))sub_23DEDADD8, MEMORY[0x24BEE12A0]);
  v10 = v14;
  sub_23DF15388();
  if (!v10)
  {
    v16 = v13;
    v15 = 1;
    sub_23DED8FB4();
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t PriorityRuleSet.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v15 = a2;
  sub_23DEDAE1C(0, &qword_256D0F428, (uint64_t (*)(void))sub_23DEDAD94, (uint64_t)&type metadata for PriorityRuleSet.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEDAD94();
  sub_23DF154B4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v10 = v6;
  v11 = v15;
  sub_23DEABD84(0, &qword_256D0F410, (uint64_t)&type metadata for PriorityRuleSet.Rule, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v18 = 0;
  sub_23DEDAE78(&qword_256D0F430, (uint64_t (*)(void))sub_23DEDAEF4, MEMORY[0x24BEE12D0]);
  sub_23DF15334();
  v12 = v19;
  v16 = 1;
  sub_23DED92CC();
  swift_bridgeObjectRetain();
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  v13 = v17;
  *(_QWORD *)v11 = v12;
  *(_BYTE *)(v11 + 8) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

void sub_23DED9C98(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_23DED9CA4(a1, a2, a3, a4, sub_23DE8DAB8);
}

void sub_23DED9CA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  char v5;

  v5 = *(_BYTE *)(a1 + 8);
  if ((a5(*(_QWORD *)a1, *a2) & 1) != 0)
    sub_23DE8D7D0(v5);
}

uint64_t sub_23DED9CF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PriorityRuleSet.init(from:)(a1, a2);
}

uint64_t sub_23DED9D08(_QWORD *a1)
{
  return PriorityRuleSet.encode(to:)(a1);
}

void static PriorityRuleSet.Priority.highestPriority.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PriorityRuleSet.Priority.lowestPriority.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

BOOL sub_23DED9D34(char *a1, char *a2)
{
  return qword_23DF19908[*a1] < qword_23DF19908[*a2];
}

BOOL sub_23DED9D58(char *a1, char *a2)
{
  return qword_23DF19908[*a2] >= qword_23DF19908[*a1];
}

BOOL sub_23DED9D7C(char *a1, char *a2)
{
  return qword_23DF19908[*a1] >= qword_23DF19908[*a2];
}

BOOL sub_23DED9DA0(char *a1, char *a2)
{
  return qword_23DF19908[*a2] < qword_23DF19908[*a1];
}

uint64_t PriorityRuleSet.description.getter()
{
  _BYTE *v0;
  uint64_t v1;
  char v2;
  int64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)v0;
  v2 = v0[8];
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v3)
  {
    v14 = v0[8];
    v19 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA1B4(0, v3, 0);
    v4 = v19;
    v5 = (_BYTE *)(v1 + 40);
    do
    {
      v6 = *v5;
      v15 = *((_QWORD *)v5 - 1);
      v16 = v6;
      sub_23DEDA014(&v15, &v17);
      v7 = v17;
      v8 = v18;
      v19 = v4;
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_23DEAA1B4(v9 > 1, v10 + 1, 1);
        v4 = v19;
      }
      *(_QWORD *)(v4 + 16) = v10 + 1;
      v11 = v4 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v8;
      v5 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v17 = 0;
    v18 = 0xE000000000000000;
    sub_23DF15190();
    sub_23DF14E60();
    v15 = v4;
    v12 = MEMORY[0x24BEE0D00];
    sub_23DEABD84(0, (unint64_t *)&qword_25432D930, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DEDAFB4((unint64_t *)&qword_25432D940, (unint64_t *)&qword_25432D930, v12, MEMORY[0x24BEE12B0]);
    sub_23DF14DD0();
    swift_release();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    LOBYTE(v15) = v14;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    sub_23DF14E60();
    LOBYTE(v15) = v2;
  }
  sub_23DF15274();
  sub_23DF14E60();
  return v17;
}

uint64_t sub_23DEDA014@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;

  v3 = *a1;
  sub_23DF14E60();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v14 = a2;
    v15 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA1B4(0, v4, 0);
    v5 = v3 + 40;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v5 + 16))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        sub_23DF15190();
        swift_bridgeObjectRelease();
        sub_23DEB3464();
        swift_bridgeObjectRetain();
        sub_23DF14DA0();
        sub_23DF14E60();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DF14E60();
        sub_23DE95A68(0);
        swift_bridgeObjectRetain();
        sub_23DF14DA0();
        sub_23DF14E60();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DF14E60();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v6 = 60;
        v7 = 0xE100000000000000;
      }
      else
      {
        sub_23DEB3464();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = sub_23DF14DA0();
        v7 = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v10 = *(_QWORD *)(v15 + 16);
      v9 = *(_QWORD *)(v15 + 24);
      if (v10 >= v9 >> 1)
        sub_23DEAA1B4(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v15 + 16) = v10 + 1;
      v11 = v15 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v6;
      *(_QWORD *)(v11 + 40) = v7;
      v5 += 16;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a2 = v14;
  }
  v12 = MEMORY[0x24BEE0D00];
  sub_23DEABD84(0, (unint64_t *)&qword_25432D930, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DEDAFB4((unint64_t *)&qword_25432D940, (unint64_t *)&qword_25432D930, v12, MEMORY[0x24BEE12B0]);
  sub_23DF14DD0();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  sub_23DF15274();
  result = sub_23DF14E60();
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_23DEDA38C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  char v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  _QWORD *v65;

  swift_bridgeObjectRetain();
  v7 = swift_retain();
  v8 = sub_23DEE3170(v7);
  v64 = v10;
  if (!v9)
  {
LABEL_50:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23DEA8AD4();
    return swift_release();
  }
  v11 = v8;
  v12 = v9;
  v59 = a5;
  while (1)
  {
    v17 = (_QWORD *)*a5;
    v19 = sub_23DE946E8(v11, v12);
    v20 = v17[2];
    v21 = (v18 & 1) == 0;
    v14 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_54;
    v22 = v18;
    if (v17[3] >= v14)
    {
      if ((a4 & 1) != 0)
      {
        v24 = (_QWORD *)*a5;
        if ((v18 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
        v14 = (uint64_t)sub_23DECB884();
        v24 = (_QWORD *)*a5;
        if ((v22 & 1) == 0)
          goto LABEL_48;
      }
    }
    else
    {
      sub_23DEC92B4(v14, a4 & 1);
      v14 = sub_23DE946E8(v11, v12);
      if ((v22 & 1) != (v23 & 1))
        goto LABEL_57;
      v19 = v14;
      v24 = (_QWORD *)*a5;
      if ((v22 & 1) == 0)
      {
LABEL_48:
        v24[(v19 >> 6) + 8] |= 1 << v19;
        v55 = (uint64_t *)(v24[6] + 16 * v19);
        *v55 = v11;
        v55[1] = v12;
        *(_QWORD *)(v24[7] + 8 * v19) = v64;
        v56 = v24[2];
        v53 = __OFADD__(v56, 1);
        v57 = v56 + 1;
        if (v53)
          goto LABEL_56;
        v24[2] = v57;
        goto LABEL_4;
      }
    }
    v61 = v19;
    v60 = v24;
    v25 = *(_QWORD **)(v24[7] + 8 * v19);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = v25;
    v62 = v64 + 64;
    v27 = 1 << *(_BYTE *)(v64 + 32);
    v28 = v27 < 64 ? ~(-1 << v27) : -1;
    v29 = v28 & *(_QWORD *)(v64 + 64);
    v63 = (unint64_t)(v27 + 63) >> 6;
    swift_bridgeObjectRetain();
    v30 = 0;
    if (v29)
      break;
LABEL_19:
    v36 = v30 + 1;
    if (__OFADD__(v30, 1))
      goto LABEL_53;
    if (v36 < v63)
    {
      v37 = *(_QWORD *)(v62 + 8 * v36);
      ++v30;
      if (v37)
        goto LABEL_34;
      v30 = v36 + 1;
      if (v36 + 1 < v63)
      {
        v37 = *(_QWORD *)(v62 + 8 * v30);
        if (v37)
          goto LABEL_34;
        v30 = v36 + 2;
        if (v36 + 2 < v63)
        {
          v37 = *(_QWORD *)(v62 + 8 * v30);
          if (v37)
            goto LABEL_34;
          v30 = v36 + 3;
          if (v36 + 3 < v63)
          {
            v37 = *(_QWORD *)(v62 + 8 * v30);
            if (v37)
              goto LABEL_34;
            v38 = v36 + 4;
            if (v38 < v63)
            {
              v37 = *(_QWORD *)(v62 + 8 * v38);
              if (!v37)
              {
                while (1)
                {
                  v30 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    goto LABEL_55;
                  if (v30 >= v63)
                    goto LABEL_3;
                  v37 = *(_QWORD *)(v62 + 8 * v30);
                  ++v38;
                  if (v37)
                    goto LABEL_34;
                }
              }
              v30 = v38;
LABEL_34:
              v29 = (v37 - 1) & v37;
              v35 = __clz(__rbit64(v37)) + (v30 << 6);
              goto LABEL_35;
            }
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v60[7];
    v14 = swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 8 * v61) = v25;
    a5 = v59;
LABEL_4:
    v11 = sub_23DEE3170(v14);
    v12 = v15;
    v64 = v16;
    a4 = 1;
    if (!v15)
      goto LABEL_50;
  }
  while (1)
  {
    v34 = __clz(__rbit64(v29));
    v29 &= v29 - 1;
    v35 = v34 | (v30 << 6);
LABEL_35:
    v39 = (uint64_t *)(*(_QWORD *)(v64 + 48) + 16 * v35);
    v41 = *v39;
    v40 = v39[1];
    v42 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = sub_23DE946E8(v41, v40);
    v45 = v25[2];
    v46 = (v43 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
      break;
    v48 = v43;
    if (v25[3] >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v25 = v65;
        if ((v43 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        sub_23DECB89C();
        v25 = v65;
        if ((v48 & 1) != 0)
          goto LABEL_17;
      }
LABEL_42:
      v25[(v44 >> 6) + 8] |= 1 << v44;
      v51 = (uint64_t *)(v25[6] + 16 * v44);
      *v51 = v41;
      v51[1] = v40;
      *(_QWORD *)(v25[7] + 8 * v44) = v42;
      v52 = v25[2];
      v53 = __OFADD__(v52, 1);
      v54 = v52 + 1;
      if (v53)
        goto LABEL_52;
      v25[2] = v54;
      isUniquelyReferenced_nonNull_native = 1;
      if (!v29)
        goto LABEL_19;
    }
    else
    {
      sub_23DEC92CC(v47, isUniquelyReferenced_nonNull_native & 1);
      v49 = sub_23DE946E8(v41, v40);
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_57;
      v44 = v49;
      v25 = v65;
      if ((v48 & 1) == 0)
        goto LABEL_42;
LABEL_17:
      v31 = *(_QWORD *)(v25[7] + 8 * v44);
      swift_bridgeObjectRetain();
      v32 = sub_23DEE1B74(v42, v31);
      swift_bridgeObjectRelease();
      v33 = v25[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v33 + 8 * v44) = v32;
      isUniquelyReferenced_nonNull_native = 1;
      if (!v29)
        goto LABEL_19;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEDA87C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  char v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  _QWORD *v69;

  swift_bridgeObjectRetain();
  v7 = swift_retain();
  v8 = sub_23DEE3170(v7);
  v67 = v10;
  if (!v9)
  {
LABEL_50:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23DEA8AD4();
    return swift_release();
  }
  v11 = v8;
  v12 = v9;
  v62 = a5;
  while (1)
  {
    v17 = (_QWORD *)*a5;
    v19 = sub_23DE946E8(v11, v12);
    v20 = v17[2];
    v21 = (v18 & 1) == 0;
    v14 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_54;
    v22 = v18;
    if (v17[3] >= v14)
    {
      if ((a4 & 1) != 0)
      {
        v24 = (_QWORD *)*a5;
        if ((v18 & 1) != 0)
          break;
      }
      else
      {
        v14 = (uint64_t)sub_23DECB890();
        v24 = (_QWORD *)*a5;
        if ((v22 & 1) != 0)
          break;
      }
      goto LABEL_48;
    }
    sub_23DEC92C0(v14, a4 & 1);
    v14 = sub_23DE946E8(v11, v12);
    if ((v22 & 1) != (v23 & 1))
      goto LABEL_57;
    v19 = v14;
    v24 = (_QWORD *)*a5;
    if ((v22 & 1) != 0)
      break;
LABEL_48:
    v24[(v19 >> 6) + 8] |= 1 << v19;
    v58 = (uint64_t *)(v24[6] + 16 * v19);
    *v58 = v11;
    v58[1] = v12;
    *(_QWORD *)(v24[7] + 8 * v19) = v67;
    v59 = v24[2];
    v56 = __OFADD__(v59, 1);
    v60 = v59 + 1;
    if (v56)
      goto LABEL_56;
    v24[2] = v60;
LABEL_4:
    v11 = sub_23DEE3170(v14);
    v12 = v15;
    v67 = v16;
    a4 = 1;
    if (!v15)
      goto LABEL_50;
  }
  v64 = v19;
  v63 = v24;
  v25 = *(_QWORD **)(v24[7] + 8 * v19);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69 = v25;
  v65 = v67 + 64;
  v27 = 1 << *(_BYTE *)(v67 + 32);
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v29 = v28 & *(_QWORD *)(v67 + 64);
  v66 = (unint64_t)(v27 + 63) >> 6;
  swift_bridgeObjectRetain();
  v30 = 0;
  while (2)
  {
    if (v29)
    {
      v32 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v68 = v30;
      v33 = v32 | (v30 << 6);
    }
    else
    {
      v34 = v30 + 1;
      if (__OFADD__(v30, 1))
        goto LABEL_53;
      if (v34 >= v66)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v63[7];
        v14 = swift_bridgeObjectRelease();
        *(_QWORD *)(v13 + 8 * v64) = v25;
        a5 = v62;
        goto LABEL_4;
      }
      v35 = *(_QWORD *)(v65 + 8 * v34);
      v36 = v30 + 1;
      if (!v35)
      {
        v36 = v30 + 2;
        if (v30 + 2 >= v66)
          goto LABEL_3;
        v35 = *(_QWORD *)(v65 + 8 * v36);
        if (!v35)
        {
          v36 = v30 + 3;
          if (v30 + 3 >= v66)
            goto LABEL_3;
          v35 = *(_QWORD *)(v65 + 8 * v36);
          if (!v35)
          {
            v36 = v30 + 4;
            if (v30 + 4 >= v66)
              goto LABEL_3;
            v35 = *(_QWORD *)(v65 + 8 * v36);
            if (!v35)
            {
              v37 = v30 + 5;
              if (v30 + 5 >= v66)
                goto LABEL_3;
              v35 = *(_QWORD *)(v65 + 8 * v37);
              if (!v35)
              {
                while (1)
                {
                  v36 = v37 + 1;
                  if (__OFADD__(v37, 1))
                    goto LABEL_55;
                  if (v36 >= v66)
                    goto LABEL_3;
                  v35 = *(_QWORD *)(v65 + 8 * v36);
                  ++v37;
                  if (v35)
                    goto LABEL_35;
                }
              }
              v36 = v30 + 5;
            }
          }
        }
      }
LABEL_35:
      v29 = (v35 - 1) & v35;
      v68 = v36;
      v33 = __clz(__rbit64(v35)) + (v36 << 6);
    }
    v38 = 16 * v33;
    v39 = (uint64_t *)(*(_QWORD *)(v67 + 48) + v38);
    v41 = *v39;
    v40 = v39[1];
    v42 = (uint64_t *)(*(_QWORD *)(v67 + 56) + v38);
    v44 = *v42;
    v43 = v42[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = sub_23DE946E8(v41, v40);
    v47 = v25[2];
    v48 = (v45 & 1) == 0;
    v49 = v47 + v48;
    if (!__OFADD__(v47, v48))
    {
      v50 = v45;
      if (v25[3] >= v49)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v25 = v69;
          if ((v45 & 1) == 0)
            goto LABEL_43;
        }
        else
        {
          sub_23DECB6B8();
          v25 = v69;
          if ((v50 & 1) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        sub_23DEC8F7C(v49, isUniquelyReferenced_nonNull_native & 1);
        v51 = sub_23DE946E8(v41, v40);
        if ((v50 & 1) != (v52 & 1))
          goto LABEL_57;
        v46 = v51;
        v25 = v69;
        if ((v50 & 1) == 0)
        {
LABEL_43:
          v25[(v46 >> 6) + 8] |= 1 << v46;
          v53 = (uint64_t *)(v25[6] + 16 * v46);
          *v53 = v41;
          v53[1] = v40;
          v54 = (_QWORD *)(v25[7] + 16 * v46);
          *v54 = v44;
          v54[1] = v43;
          v55 = v25[2];
          v56 = __OFADD__(v55, 1);
          v57 = v55 + 1;
          if (v56)
            goto LABEL_52;
          v25[2] = v57;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      v31 = (_QWORD *)(v25[7] + 16 * v46);
      swift_bridgeObjectRelease();
      *v31 = v44;
      v31[1] = v43;
LABEL_17:
      isUniquelyReferenced_nonNull_native = 1;
      v30 = v68;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEDAD60@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_23DEDAD94()
{
  unint64_t result;

  result = qword_256D0F408;
  if (!qword_256D0F408)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19860, &type metadata for PriorityRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F408);
  }
  return result;
}

unint64_t sub_23DEDADD8()
{
  unint64_t result;

  result = qword_256D0F420;
  if (!qword_256D0F420)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet.Rule, &type metadata for PriorityRuleSet.Rule);
    atomic_store(result, (unint64_t *)&qword_256D0F420);
  }
  return result;
}

void sub_23DEDAE1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_23DEDAE78(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_23DEABD84(255, &qword_256D0F410, (uint64_t)&type metadata for PriorityRuleSet.Rule, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x2426483D0](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DEDAEF4()
{
  unint64_t result;

  result = qword_256D0F438;
  if (!qword_256D0F438)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet.Rule, &type metadata for PriorityRuleSet.Rule);
    atomic_store(result, (unint64_t *)&qword_256D0F438);
  }
  return result;
}

unint64_t sub_23DEDAF3C()
{
  unint64_t result;

  result = qword_256D0F440;
  if (!qword_256D0F440)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet.Priority, &type metadata for PriorityRuleSet.Priority);
    atomic_store(result, (unint64_t *)&qword_256D0F440);
  }
  return result;
}

uint64_t sub_23DEDAF80()
{
  return sub_23DEDAFB4(&qword_256D0F448, &qword_256D0F450, (uint64_t)&type metadata for PriorityRuleSet.Priority, MEMORY[0x24BEE12E0]);
}

uint64_t sub_23DEDAFB4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_23DEABD84(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426483D0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PriorityRuleSet()
{
  return &type metadata for PriorityRuleSet;
}

uint64_t getEnumTagSinglePayload for PriorityRuleSet.Priority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PriorityRuleSet.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DEDB0F4 + 4 * byte_23DF193F9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DEDB128 + 4 * byte_23DF193F4[v4]))();
}

uint64_t sub_23DEDB128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDB130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEDB138);
  return result;
}

uint64_t sub_23DEDB144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEDB14CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DEDB150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDB158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PriorityRuleSet.Priority()
{
  return &type metadata for PriorityRuleSet.Priority;
}

uint64_t initializeBufferWithCopyOfBuffer for PriorityRuleSet.Rule(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PriorityRuleSet.Rule()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19HealthOrchestration15PriorityRuleSetV4RuleVwca_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for PriorityRuleSet.Rule(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for PriorityRuleSet.Rule()
{
  return &type metadata for PriorityRuleSet.Rule;
}

ValueMetadata *type metadata accessor for PriorityRuleSet.CodingKeys()
{
  return &type metadata for PriorityRuleSet.CodingKeys;
}

uint64_t _s19HealthOrchestration15PriorityRuleSetV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DEDB2AC + 4 * byte_23DF19403[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DEDB2E0 + 4 * byte_23DF193FE[v4]))();
}

uint64_t sub_23DEDB2E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDB2E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEDB2F0);
  return result;
}

uint64_t sub_23DEDB2FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEDB304);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DEDB308(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDB310(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PriorityRuleSet.Rule.CodingKeys()
{
  return &type metadata for PriorityRuleSet.Rule.CodingKeys;
}

unint64_t sub_23DEDB330()
{
  unint64_t result;

  result = qword_256D0F458;
  if (!qword_256D0F458)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19780, &type metadata for PriorityRuleSet.Rule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F458);
  }
  return result;
}

unint64_t sub_23DEDB378()
{
  unint64_t result;

  result = qword_256D0F460;
  if (!qword_256D0F460)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19838, &type metadata for PriorityRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F460);
  }
  return result;
}

unint64_t sub_23DEDB3C0()
{
  unint64_t result;

  result = qword_256D0F468;
  if (!qword_256D0F468)
  {
    result = MEMORY[0x2426483D0](&unk_23DF197A8, &type metadata for PriorityRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F468);
  }
  return result;
}

unint64_t sub_23DEDB408()
{
  unint64_t result;

  result = qword_256D0F470;
  if (!qword_256D0F470)
  {
    result = MEMORY[0x2426483D0](&unk_23DF197D0, &type metadata for PriorityRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F470);
  }
  return result;
}

unint64_t sub_23DEDB450()
{
  unint64_t result;

  result = qword_256D0F478;
  if (!qword_256D0F478)
  {
    result = MEMORY[0x2426483D0](&unk_23DF196F0, &type metadata for PriorityRuleSet.Rule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F478);
  }
  return result;
}

unint64_t sub_23DEDB498()
{
  unint64_t result;

  result = qword_256D0F480;
  if (!qword_256D0F480)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19718, &type metadata for PriorityRuleSet.Rule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F480);
  }
  return result;
}

uint64_t sub_23DEDB4DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7470697263736564 && a2 == 0xEC000000736E6F69;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DEDB5E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x526465726564726FLL && a2 == 0xEC00000073656C75;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69725065736162 && a2 == 0xEC00000079746972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_23DEDB704()
{
  unint64_t result;

  result = qword_256D0F488;
  if (!qword_256D0F488)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PriorityRuleSet.Priority, &type metadata for PriorityRuleSet.Priority);
    atomic_store(result, (unint64_t *)&qword_256D0F488);
  }
  return result;
}

_QWORD *LocaleInputSignal.__allocating_init(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  _QWORD *v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for LocaleInputSignal.BuiltinLocaleProvider();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_autoupdatingCurrentLocale);
  sub_23DF14C20();

  v9 = (_QWORD *)swift_allocObject();
  v9[7] = v4;
  v9[8] = &off_250EB1D20;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9 + 4);
  sub_23DE9DB9C((uint64_t)v7, (uint64_t)boxed_opaque_existential_1);
  sub_23DEDC750();
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v9[9] = v11;
  v9[2] = a1;
  v9[3] = a2;
  sub_23DE9DBE0((uint64_t)v7);
  return v9;
}

uint64_t type metadata accessor for LocaleInputSignal.BuiltinLocaleProvider()
{
  uint64_t result;

  result = qword_25432D458;
  if (!qword_25432D458)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DEDB8B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v9;

  v2 = sub_23DF14B54();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(a1 + 32);
  sub_23DF14B48();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void static InputSignalSet.LookupKey.locale.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023DF19920;
  a1[2] = 0;
  a1[3] = 0;
}

void __swiftcall LocaleInputSignal.Anchor.init(localeIdentifier:decimalSeparator:groupingSeparator:)(HealthOrchestration::LocaleInputSignal::Anchor *__return_ptr retstr, Swift::String localeIdentifier, Swift::String_optional decimalSeparator, Swift::String_optional groupingSeparator)
{
  retstr->localeIdentifier = localeIdentifier;
  retstr->decimalSeparator = decimalSeparator;
  retstr->groupingSeparator = groupingSeparator;
}

uint64_t LocaleInputSignal.Anchor.localeIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocaleInputSignal.Anchor.localeIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LocaleInputSignal.Anchor.localeIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t LocaleInputSignal.Anchor.decimalSeparator.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocaleInputSignal.Anchor.decimalSeparator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*LocaleInputSignal.Anchor.decimalSeparator.modify())()
{
  return nullsub_1;
}

uint64_t LocaleInputSignal.Anchor.groupingSeparator.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocaleInputSignal.Anchor.groupingSeparator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*LocaleInputSignal.Anchor.groupingSeparator.modify())()
{
  return nullsub_1;
}

Swift::Bool __swiftcall LocaleInputSignal.Anchor.hasDifference(from:for:)(HealthOrchestration::LocaleInputSignal::Anchor_optional *from, HealthOrchestration::LocaleInputSignal::Configuration a2)
{
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;

  countAndFlagsBits = from->value.localeIdentifier._countAndFlagsBits;
  object = from->value.localeIdentifier._object;
  v6 = from->value.groupingSeparator.value._countAndFlagsBits;
  v5 = from->value.groupingSeparator.value._object;
  v7 = *(_QWORD *)a2.rawValue;
  v8 = *v2;
  v9 = (void *)v2[1];
  v11 = v2[4];
  v10 = (void *)v2[5];
  if ((*(_QWORD *)a2.rawValue & 2) != 0)
  {
    v25 = from->value.groupingSeparator.value._object;
    v12 = v2[4];
    v13 = (void *)v2[3];
    if (!object)
    {
      if (v13)
        goto LABEL_35;
      v17 = 0;
      goto LABEL_17;
    }
    v23 = (void *)v2[5];
    v24 = from->value.groupingSeparator.value._countAndFlagsBits;
    v14 = from->value.decimalSeparator.value._countAndFlagsBits;
    v15 = from->value.decimalSeparator.value._object;
    v16 = v2[2];
    swift_bridgeObjectRetain();
    if (v13)
    {
      if (!v15)
        goto LABEL_35;
      if (v16 != v14 || v13 != v15)
      {
        v18 = sub_23DF15400();
        swift_bridgeObjectRelease();
        v17 = v18 ^ 1;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    else if (v15)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    v17 = 0;
LABEL_16:
    v10 = v23;
    v6 = v24;
LABEL_17:
    v11 = v12;
    v5 = v25;
    v19 = v7 | v17;
    if ((v7 & 1) == 0 || (v17 & 1) != 0)
      goto LABEL_24;
LABEL_19:
    if (object)
    {
      if (v8 == countAndFlagsBits && object == v9)
        v19 = 0;
      else
        v19 = sub_23DF15400() ^ 1;
LABEL_24:
      v20 = (v7 >> 2) & 1 | v19;
      if ((v7 & 4) == 0 || (v19 & 1) != 0)
        return v20 & 1;
      goto LABEL_26;
    }
LABEL_35:
    LOBYTE(v20) = 1;
    return v20 & 1;
  }
  if ((v7 & 1) != 0)
    goto LABEL_19;
  if ((v7 & 4) == 0)
    goto LABEL_36;
LABEL_26:
  if (object)
  {
    swift_bridgeObjectRetain();
    if (v10)
    {
      if (v5)
      {
        if (v11 != v6 || v10 != v5)
        {
          v22 = sub_23DF15400();
          swift_bridgeObjectRelease();
          LOBYTE(v20) = v22 ^ 1;
          return v20 & 1;
        }
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (!v5)
    {
LABEL_36:
      LOBYTE(v20) = 0;
      return v20 & 1;
    }
    goto LABEL_34;
  }
  LOBYTE(v20) = v10 != 0;
  return v20 & 1;
}

void __swiftcall LocaleInputSignal.Anchor.merged(with:)(HealthOrchestration::LocaleInputSignal::Anchor *__return_ptr retstr, HealthOrchestration::LocaleInputSignal::Anchor *with)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = *(void **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(void **)(v2 + 40);
  retstr->localeIdentifier._countAndFlagsBits = *(_QWORD *)v2;
  retstr->localeIdentifier._object = v3;
  retstr->decimalSeparator.value._countAndFlagsBits = v4;
  *(_OWORD *)&retstr->decimalSeparator.value._object = *(_OWORD *)(v2 + 24);
  retstr->groupingSeparator.value._object = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
}

unint64_t sub_23DEDBD08(unsigned __int8 a1)
{
  unint64_t result;

  result = 0xD000000000000010;
  if (a1 >= 2u)
    return 0xD000000000000011;
  return result;
}

unint64_t sub_23DEDBD60()
{
  unsigned __int8 *v0;

  return sub_23DEDBD08(*v0);
}

uint64_t sub_23DEDBD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEDCFB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DEDBD8C()
{
  sub_23DEDCDA4();
  return sub_23DF154CC();
}

uint64_t sub_23DEDBDB4()
{
  sub_23DEDCDA4();
  return sub_23DF154D8();
}

uint64_t LocaleInputSignal.Anchor.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  char v14;
  char v15;
  char v16;

  sub_23DEDCDE8(0, &qword_25432DD20, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v6);
  v8 = (char *)v13 - v7;
  v9 = v1[2];
  v13[3] = v1[3];
  v13[4] = v9;
  v10 = v1[4];
  v13[1] = v1[5];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEDCDA4();
  sub_23DF154C0();
  v16 = 0;
  v11 = v13[5];
  sub_23DF15364();
  if (!v11)
  {
    v15 = 1;
    sub_23DF1534C();
    v14 = 2;
    sub_23DF1534C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t LocaleInputSignal.Anchor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  sub_23DEDCDE8(0, (unint64_t *)&unk_25432DAE8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v23 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEDCDA4();
  sub_23DF154B4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v27 = 0;
    v11 = sub_23DF15310();
    v14 = v13;
    v24 = v11;
    v26 = 1;
    swift_bridgeObjectRetain();
    v15 = sub_23DF152F8();
    v17 = v16;
    v23 = v15;
    v25 = 2;
    swift_bridgeObjectRetain();
    v18 = sub_23DF152F8();
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v22 = v18;
    v21(v10, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v24;
    a2[1] = v14;
    a2[2] = v23;
    a2[3] = v17;
    a2[4] = v22;
    a2[5] = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_23DEDC188(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023DF19920;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_23DEDC1AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DEDC1FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return LocaleInputSignal.Anchor.init(from:)(a1, a2);
}

uint64_t sub_23DEDC210(_QWORD *a1)
{
  return LocaleInputSignal.Anchor.encode(to:)(a1);
}

void LocaleInputSignal.Configuration.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023DF19920;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t LocaleInputSignal.Configuration.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthOrchestration::LocaleInputSignal::Configuration __swiftcall LocaleInputSignal.Configuration.init(rawValue:)(HealthOrchestration::LocaleInputSignal::Configuration rawValue)
{
  HealthOrchestration::LocaleInputSignal::Configuration *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static LocaleInputSignal.Configuration.localeIdentifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static LocaleInputSignal.Configuration.decimalSeparator.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static LocaleInputSignal.Configuration.groupingSeparator.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void sub_23DEDC280()
{
  qword_25432E0F0 = 7;
}

uint64_t sub_23DEDC2B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t static LocaleInputSignal.Configuration.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_25432E100 != -1)
    result = swift_once();
  *a1 = qword_25432E0F0;
  return result;
}

_QWORD *sub_23DEDC358@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_23DEDC364(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_23DEDC36C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_23DEDC380@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_23DEDC394@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_23DEDC3A8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_23DEDC3D8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_23DEDC404@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_23DEDC428(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_23DEDC43C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_23DEDC450(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_23DEDC464@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_23DEDC478(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_23DEDC48C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_23DEDC4A0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_23DEDC4B4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_23DEDC4C4()
{
  return sub_23DF1513C();
}

_QWORD *sub_23DEDC4DC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_23DEDC4F0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23DEDC500(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23DEDC50C()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t sub_23DEDC550()
{
  return sub_23DF15484();
}

uint64_t sub_23DEDC578()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

BOOL sub_23DEDC5B8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void static LocaleInputSignal.identityConfiguration.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void LocaleInputSignal.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000023DF19920;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t LocaleInputSignal.observer.getter()
{
  return swift_unknownObjectRetain();
}

_QWORD *LocaleInputSignal.__allocating_init(observer:provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  v10 = sub_23DEDD0F0(a1, a2, v9, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v10;
}

_QWORD *LocaleInputSignal.init(observer:provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x24BDAC7A8](v9, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_23DEDCC20(a1, a2, (uint64_t)v11, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

void sub_23DEDC750()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA28)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA28);
  }
}

uint64_t sub_23DEDC7BC(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  _QWORD v8[6];

  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v3 = *MEMORY[0x24BDBCA70];
  v4 = swift_allocObject();
  swift_weakInit();
  v8[4] = sub_23DEDD9F0;
  v8[5] = v4;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_23DEDB8B8;
  v8[3] = &block_descriptor_8;
  v5 = _Block_copy(v8);
  swift_release();
  v6 = objc_msgSend(v2, sel_addObserverForName_object_queue_usingBlock_, v3, 0, 0, v5);
  _Block_release(v5);

  result = swift_unknownObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t sub_23DEDC8E0()
{
  uint64_t result;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  _QWORD *v21;
  _QWORD v22[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (_QWORD *)result;
    v19 = *(_QWORD *)(result + 24);
    ObjectType = swift_getObjectType();
    v2 = v1[7];
    v3 = v1[8];
    __swift_project_boxed_opaque_existential_1(v1 + 4, v2);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    v6 = v5;
    v7 = v1[7];
    v8 = v1[8];
    __swift_project_boxed_opaque_existential_1(v1 + 4, v7);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
    v11 = v10;
    v13 = v1[7];
    v12 = v1[8];
    __swift_project_boxed_opaque_existential_1(v1 + 4, v13);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v13, v12);
    v22[0] = v4;
    v22[1] = v6;
    v22[2] = v9;
    v22[3] = v11;
    v22[4] = v14;
    v22[5] = v15;
    v21 = v1;
    v16 = *(void (**)(_QWORD *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8);
    v17 = type metadata accessor for LocaleInputSignal();
    v18 = sub_23DEDD990(qword_25432D4A0, (uint64_t)&protocol conformance descriptor for LocaleInputSignal);
    v16(v22, &v21, v17, v18, ObjectType, v19);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall LocaleInputSignal.stopObservation()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 72);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DEDCAA4(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t *sub_23DEDCAA4(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  id v4;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    v3 = (void *)objc_opt_self();
    swift_unknownObjectRetain();
    v4 = objc_msgSend(v3, sel_defaultCenter);
    objc_msgSend(v4, sel_removeObserver_, v1);

    result = (uint64_t *)swift_unknownObjectRelease_n();
    *v2 = 0;
  }
  return result;
}

uint64_t LocaleInputSignal.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return v0;
}

uint64_t LocaleInputSignal.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEDCB90()
{
  return _s19HealthOrchestration17LocaleInputSignalC16beginObservation4from14configurationsyAC6AnchorVSg_SayAC13ConfigurationVGtF_0();
}

void sub_23DEDCBB0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 72);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DEDCAA4(v2);
  os_unfair_lock_unlock(v3);
}

unint64_t sub_23DEDCC04()
{
  return 0xD000000000000011;
}

_QWORD *sub_23DEDCC20(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;

  a4[7] = a5;
  a4[8] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  sub_23DEDC750();
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  a4[9] = v12;
  a4[2] = a1;
  a4[3] = a2;
  return a4;
}

uint64_t _s19HealthOrchestration17LocaleInputSignalC6AnchorV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_23DF15400(), result = 0, (v10 & 1) != 0))
  {
    if (v4)
    {
      if (!v6)
        return 0;
      if (v2 != v7 || v4 != v6)
      {
        v12 = sub_23DF15400();
        result = 0;
        if ((v12 & 1) == 0)
          return result;
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v5)
    {
      if (v8 && (v3 == v9 && v5 == v8 || (sub_23DF15400() & 1) != 0))
        return 1;
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_23DEDCDA4()
{
  unint64_t result;

  result = qword_25432D468;
  if (!qword_25432D468)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19D78, &type metadata for LocaleInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25432D468);
  }
  return result;
}

void sub_23DEDCDE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DEDCDA4();
    v7 = a3(a1, &type metadata for LocaleInputSignal.Anchor.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t _s19HealthOrchestration17LocaleInputSignalC16beginObservation4from14configurationsyAC6AnchorVSg_SayAC13ConfigurationVGtF_0()
{
  _QWORD *v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[7];

  v1 = v0;
  v24 = *v0;
  v2 = (os_unfair_lock_s *)v0[9];
  v3 = v2 + 4;
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_23DEDC7BC(v3);
  os_unfair_lock_unlock(v4);
  v22 = v1[3];
  ObjectType = swift_getObjectType();
  v5 = v1[7];
  v6 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v9 = v8;
  v11 = v1[7];
  v10 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v11);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v11, v10);
  v14 = v13;
  v16 = v1[7];
  v15 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v16);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
  v26[0] = v7;
  v26[1] = v9;
  v26[2] = v12;
  v26[3] = v14;
  v26[4] = v17;
  v26[5] = v18;
  v25 = v1;
  v19 = *(void (**)(_QWORD *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8);
  v20 = sub_23DEDD990(qword_25432D4A0, (uint64_t)&protocol conformance descriptor for LocaleInputSignal);
  v19(v26, &v25, v24, v20, ObjectType, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEDCFB4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023DF1D390 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DF1D3B0 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023DF1D3D0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_23DEDD0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  return sub_23DEDCC20(a1, a2, (uint64_t)v13, v14, a5, a6);
}

unint64_t sub_23DEDD1AC()
{
  unint64_t result;

  result = qword_256D0F490;
  if (!qword_256D0F490)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Configuration, &type metadata for LocaleInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F490);
  }
  return result;
}

unint64_t sub_23DEDD1F0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23DEDD224();
  a1[2] = sub_23DEDD268();
  result = sub_23DEDD2AC();
  a1[3] = result;
  return result;
}

unint64_t sub_23DEDD224()
{
  unint64_t result;

  result = qword_25432D490;
  if (!qword_25432D490)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Anchor, &type metadata for LocaleInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D490);
  }
  return result;
}

unint64_t sub_23DEDD268()
{
  unint64_t result;

  result = qword_25432D480;
  if (!qword_25432D480)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Anchor, &type metadata for LocaleInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D480);
  }
  return result;
}

unint64_t sub_23DEDD2AC()
{
  unint64_t result;

  result = qword_25432D488;
  if (!qword_25432D488)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Anchor, &type metadata for LocaleInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D488);
  }
  return result;
}

unint64_t sub_23DEDD2F4()
{
  unint64_t result;

  result = qword_256D0F4E0;
  if (!qword_256D0F4E0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Configuration, &type metadata for LocaleInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F4E0);
  }
  return result;
}

unint64_t sub_23DEDD33C()
{
  unint64_t result;

  result = qword_256D0F4E8;
  if (!qword_256D0F4E8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Configuration, &type metadata for LocaleInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F4E8);
  }
  return result;
}

unint64_t sub_23DEDD380(uint64_t a1)
{
  unint64_t result;

  result = sub_23DEDD3A4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DEDD3A4()
{
  unint64_t result;

  result = qword_25432E108;
  if (!qword_25432E108)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Configuration, &type metadata for LocaleInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_25432E108);
  }
  return result;
}

unint64_t sub_23DEDD3EC()
{
  unint64_t result;

  result = qword_25432E110;
  if (!qword_25432E110)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Configuration, &type metadata for LocaleInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_25432E110);
  }
  return result;
}

unint64_t sub_23DEDD434()
{
  unint64_t result;

  result = qword_256D0F4F0;
  if (!qword_256D0F4F0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Configuration, &type metadata for LocaleInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F4F0);
  }
  return result;
}

unint64_t sub_23DEDD47C()
{
  unint64_t result;

  result = qword_25432D498;
  if (!qword_25432D498)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for LocaleInputSignal.Anchor, &type metadata for LocaleInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_25432D498);
  }
  return result;
}

uint64_t sub_23DEDD4C0(uint64_t a1)
{
  uint64_t result;

  result = sub_23DEDD990(&qword_25432E118, (uint64_t)&protocol conformance descriptor for LocaleInputSignal);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LocaleInputSignal()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of LocaleProvider.currentLocaleIdentifier()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LocaleProvider.currentDecimalSeparator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocaleProvider.currentGroupingSeparator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t method lookup function for LocaleInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LocaleInputSignal.__allocating_init(observer:provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for LocaleInputSignal.Anchor()
{
  return &type metadata for LocaleInputSignal.Anchor;
}

ValueMetadata *type metadata accessor for LocaleInputSignal.Configuration()
{
  return &type metadata for LocaleInputSignal.Configuration;
}

uint64_t storeEnumTagSinglePayload for LocaleInputSignal.Anchor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DEDD5AC + 4 * byte_23DF19935[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DEDD5E0 + 4 * byte_23DF19930[v4]))();
}

uint64_t sub_23DEDD5E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDD5E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEDD5F0);
  return result;
}

uint64_t sub_23DEDD5FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEDD604);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DEDD608(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDD610(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocaleInputSignal.Anchor.CodingKeys()
{
  return &type metadata for LocaleInputSignal.Anchor.CodingKeys;
}

ValueMetadata *type metadata accessor for LocaleInputSignal.State()
{
  return &type metadata for LocaleInputSignal.State;
}

uint64_t sub_23DEDD63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_23DEDD678(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DF14C2C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_23DEDD6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DEDD6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DEDD734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DEDD778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DEDD7BC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DEDD7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23DEDD804()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DEDD810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DF14C2C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23DEDD850()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DF14C2C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_23DEDD8BC()
{
  unint64_t result;

  result = qword_256D0F578;
  if (!qword_256D0F578)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19D50, &type metadata for LocaleInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F578);
  }
  return result;
}

unint64_t sub_23DEDD904()
{
  unint64_t result;

  result = qword_25432D478;
  if (!qword_25432D478)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19CC0, &type metadata for LocaleInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25432D478);
  }
  return result;
}

unint64_t sub_23DEDD94C()
{
  unint64_t result;

  result = qword_25432D470;
  if (!qword_25432D470)
  {
    result = MEMORY[0x2426483D0](&unk_23DF19CE8, &type metadata for LocaleInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25432D470);
  }
  return result;
}

uint64_t sub_23DEDD990(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LocaleInputSignal();
    result = MEMORY[0x2426483D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DEDD9CC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DEDD9F0()
{
  return sub_23DEDC8E0();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

_QWORD *ProcessStateComponent.__allocating_init(for:observer:monitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v8 = (_QWORD *)swift_allocObject();
  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x24BDAC7A8](v11, v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = sub_23DEDEF2C(a1, a2, a3, (uint64_t)v13, v8, v9, v10);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

void sub_23DEDDB08(char a1)
{
  sub_23DF15478();
  __asm { BR              X10 }
}

uint64_t sub_23DEDDB60()
{
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

void sub_23DEDDBE8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23DEDDC2C()
{
  sub_23DF14E3C();
  return swift_bridgeObjectRelease();
}

void sub_23DEDDC98(uint64_t a1, char a2)
{
  sub_23DF15478();
  __asm { BR              X10 }
}

uint64_t sub_23DEDDCEC()
{
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

unint64_t static EnvironmentalStateDescription.appForeground(bundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;

  sub_23DED7170(0, &qword_25432DB80, (unint64_t *)&qword_25432D8A8, (void (*)(uint64_t))sub_23DEB3464);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16970;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 40) = 0x800000023DF1D3F0;
  sub_23DE95234(0, (unint64_t *)&qword_25432C2C0, (uint64_t (*)(uint64_t))sub_23DE9ACDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 48) = 0xD000000000000011;
  *(_QWORD *)(v7 + 56) = 0x800000023DF1C0C0;
  swift_bridgeObjectRetain();
  *(_QWORD *)(inited + 48) = sub_23DE930F0(v7);
  v8 = sub_23DE93224(inited);
  result = sub_23DE93238(MEMORY[0x24BEE4AF8]);
  *a3 = v8;
  a3[1] = result;
  return result;
}

unint64_t static ProcessStateComponent.identifier.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t ProcessStateComponent.StateValues.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23DEDDED8 + 4 * byte_23DF19DEF[*v0]))(0xD000000000000011, 0x800000023DF1C0C0);
}

uint64_t sub_23DEDDEFC()
{
  return 0x696E6E7552746F6ELL;
}

uint64_t sub_23DEDDF18()
{
  return 0x6E776F6E6B6E75;
}

unint64_t static EnvironmentalStateDescription.appNotForeground(bundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_23DEDDF6C(a1, a2, (uint64_t)&unk_250EAE020, a3);
}

unint64_t static EnvironmentalStateDescription.appRunning(bundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_23DEDDF6C(a1, a2, (uint64_t)&unk_250EAE050, a3);
}

unint64_t static EnvironmentalStateDescription.appSuspended(bundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_23DEDDF6C(a1, a2, (uint64_t)&unk_250EAE0A0, a3);
}

unint64_t sub_23DEDDF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;

  v8 = sub_23DE93224(MEMORY[0x24BEE4AF8]);
  sub_23DED7170(0, &qword_25432DB88, (unint64_t *)&unk_25432D8B0, sub_23DE95A68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16970;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 40) = 0x800000023DF1D3F0;
  sub_23DED7170(0, &qword_25432DB90, (unint64_t *)&qword_25432D8C8, (void (*)(uint64_t))sub_23DE9544C);
  v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain();
  v11 = sub_23DED8280(a3);
  swift_arrayDestroy();
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(inited + 48) = sub_23DE93D3C(v10);
  result = sub_23DE93238(inited);
  *a4 = v8;
  a4[1] = result;
  return result;
}

HealthOrchestration::ProcessStateComponent::StateValues_optional __swiftcall ProcessStateComponent.StateValues.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthOrchestration::ProcessStateComponent::StateValues_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DF152EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_23DEDE100(char *a1)
{
  sub_23DE8D944(*a1);
}

void sub_23DEDE10C()
{
  char *v0;

  sub_23DEDDB08(*v0);
}

void sub_23DEDE114(uint64_t a1)
{
  char *v1;

  sub_23DEDDBE8(a1, *v1);
}

void sub_23DEDE11C(uint64_t a1)
{
  char *v1;

  sub_23DEDDC98(a1, *v1);
}

HealthOrchestration::ProcessStateComponent::StateValues_optional sub_23DEDE124(Swift::String *a1)
{
  return ProcessStateComponent.StateValues.init(rawValue:)(*a1);
}

uint64_t sub_23DEDE130@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ProcessStateComponent.StateValues.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ProcessStateComponent.update(state:visible:for:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v16;

  v9 = *(os_unfair_lock_s **)(v4 + 16);
  v10 = (uint64_t *)&v9[4];
  v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_23DEDEAB8(v10, a1, a3, a4, a2, &v16);
  os_unfair_lock_unlock(v11);
  v12 = v16;
  v13 = *(_QWORD *)(v4 + 72);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v13 + 8))(v12, v4, &protocol witness table for ProcessStateComponent, ObjectType, v13);
  return swift_bridgeObjectRelease();
}

_QWORD *ProcessStateComponent.init(for:observer:monitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x24BDAC7A8](v11, v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = sub_23DEDEF2C(a1, a2, a3, (uint64_t)v13, v4, v9, v10);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

uint64_t sub_23DEDE2E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return result;
  v4 = (_QWORD *)result;
  swift_bridgeObjectRetain();
  v5 = (uint64_t *)(a2 + 40);
  while (1)
  {
    v8 = *(v5 - 1);
    v7 = *v5;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = (_QWORD *)*v4;
    v25 = (_QWORD *)*v4;
    *v4 = 0x8000000000000000;
    v12 = sub_23DE946E8(v8, v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    if (v10[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v19 = v25;
        if ((v11 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_23DECB6B8();
        v19 = v25;
        if ((v16 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_23DEC8F7C(v15, isUniquelyReferenced_nonNull_native);
      v17 = sub_23DE946E8(v8, v7);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_20;
      v12 = v17;
      v19 = v25;
      if ((v16 & 1) != 0)
      {
LABEL_3:
        v6 = (_QWORD *)(v19[7] + 16 * v12);
        swift_bridgeObjectRelease();
        *v6 = 0x6E776F6E6B6E75;
        v6[1] = 0xE700000000000000;
        goto LABEL_4;
      }
    }
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v19[6] + 16 * v12);
    *v20 = v8;
    v20[1] = v7;
    v21 = (_QWORD *)(v19[7] + 16 * v12);
    *v21 = 0x6E776F6E6B6E75;
    v21[1] = 0xE700000000000000;
    v22 = v19[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_19;
    v19[2] = v24;
    swift_bridgeObjectRetain();
LABEL_4:
    v5 += 2;
    *v4 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v2)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

void sub_23DEDE4E4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  sub_23DEDF428(0, (unint64_t *)&qword_25432DBA8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23DF16AC0;
  v3 = swift_bridgeObjectRetain();
  sub_23DECE300(v3);
  swift_bridgeObjectRelease();
  v4 = (void *)sub_23DF14F74();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend((id)objc_opt_self(), sel_predicateMatchingBundleIdentifiers_, v4);

  *(_QWORD *)(v2 + 32) = v5;
  v13[0] = v2;
  sub_23DF14ED8();
  sub_23DEDF3EC();
  v6 = (void *)sub_23DF14ECC();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setPredicates_, v6, v13[0]);

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE80CF8]), sel_init);
  objc_msgSend(v7, sel_setValues_, 1);
  sub_23DEDF428(0, &qword_25432DB70);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23DF16970;
  *(_QWORD *)(v8 + 32) = sub_23DF14E0C();
  *(_QWORD *)(v8 + 40) = v9;
  v10 = (void *)sub_23DF14ECC();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setEndowmentNamespaces_, v10);

  objc_msgSend(a1, sel_setStateDescriptor_, v7);
  v11 = swift_allocObject();
  swift_weakInit();
  v13[4] = sub_23DEDF490;
  v13[5] = v11;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_23DEDE90C;
  v13[3] = &block_descriptor_6_0;
  v12 = _Block_copy(v13);
  swift_release();
  objc_msgSend(a1, sel_setUpdateHandler_, v12);
  _Block_release(v12);

}

uint64_t sub_23DEDE754(uint64_t a1, void *a2, void *a3)
{
  uint64_t result;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = objc_msgSend(a2, sel_bundle);
    if (v6
      && (v7 = v6, v8 = objc_msgSend(v6, sel_identifier), v7, v8))
    {
      v9 = sub_23DF14E0C();
      v11 = v10;

      v12 = objc_msgSend(a3, sel_state);
      if (v12)
      {
        v13 = v12;
        v14 = objc_msgSend(v12, sel_taskState);

        v15 = objc_msgSend(a3, sel_state);
        v16 = v15;
        if (v15)
        {
          v17 = objc_msgSend(v15, sel_endowmentNamespaces);

          if (v17)
          {
            v18 = sub_23DF14F80();

            v19 = sub_23DF14E0C();
            LOBYTE(v16) = sub_23DEFD2E0(v19, v20, v18);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            LOBYTE(v16) = 0;
          }
        }
        ProcessStateComponent.update(state:visible:for:)(v14, v16 & 1, v9, v11);
      }
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void sub_23DEDE90C(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, id, id);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, id, id))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, v8, v9);
  swift_release();

}

uint64_t ProcessStateComponent.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_23DEDF06C(v0 + 24, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  swift_release();
  sub_23DEDF11C(v0 + 24);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ProcessStateComponent.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_23DEDF06C(v0 + 24, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  swift_release();
  sub_23DEDF11C(v0 + 24);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEDEAB8@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v16;

  switch(a2)
  {
    case 2:
    case 4:
      v13 = "backgroundRunning";
      if ((a5 & 1) != 0)
        v13 = "foregroundRunning";
      v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = *a1;
      *a1 = 0x8000000000000000;
      v11 = 0xD000000000000011;
      v12 = v14;
      break;
    case 3:
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = *a1;
      *a1 = 0x8000000000000000;
      v11 = 0xD000000000000013;
      v12 = 0x800000023DF1C0E0;
      break;
    default:
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = *a1;
      *a1 = 0x8000000000000000;
      v11 = 0x6E776F6E6B6E75;
      v12 = 0xE700000000000000;
      break;
  }
  sub_23DEEB360(v11, v12, a3, a4, isUniquelyReferenced_nonNull_native);
  *a1 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a6 = *a1;
  return swift_bridgeObjectRetain();
}

unint64_t ProcessStateComponent.identifier.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t ProcessStateComponent.currentState.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall ProcessStateComponent.stopObserving()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  sub_23DEDF06C(v0 + 24, (uint64_t)v3);
  v1 = v4;
  v2 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t sub_23DEDECF4()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_23DEDED10()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_23DED7914(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DEDED6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_23DEDF06C(v0 + 24, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t sub_23DEDEDCC(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _QWORD v9[6];

  v5 = *v2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_23DE9A540;
  v9[5] = v6;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_23DEDEEE0;
  v9[3] = &block_descriptor_9;
  v7 = _Block_copy(v9);
  swift_retain();
  objc_msgSend(v5, sel_updateConfiguration_, v7);
  _Block_release(v7);
  swift_release();
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_23DEDEEC0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23DEDEEE0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

id sub_23DEDEF1C()
{
  id *v0;

  return objc_msgSend(*v0, sel_invalidate);
}

_QWORD *sub_23DEDEF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  unint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  _BYTE v20[16];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23[5];

  v23[3] = a6;
  v23[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  v14 = sub_23DE930F0(MEMORY[0x24BEE4AF8]);
  sub_23DEDF390();
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  v16 = (os_unfair_lock_s *)(v15 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  v17 = v15 + 16;
  a5[2] = v15;
  a5[8] = a2;
  a5[9] = a3;
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v16);
  sub_23DEDE2E4(v17, a1);
  os_unfair_lock_unlock(v16);
  swift_release();
  sub_23DE902F4((uint64_t)v23, (uint64_t)(a5 + 3));
  v21 = a1;
  v22 = a5;
  (*(void (**)(void (*)(void *), _BYTE *, uint64_t, uint64_t))(a7 + 8))(sub_23DE9DCB4, v20, a6, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return a5;
}

uint64_t sub_23DEDF06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE95234(0, &qword_256D0F580, (uint64_t (*)(uint64_t))sub_23DEDF0C8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UncheckedSendable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23DEDF0C8()
{
  unint64_t result;

  result = qword_256D0F588;
  if (!qword_256D0F588)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D0F588);
  }
  return result;
}

uint64_t sub_23DEDF11C(uint64_t a1)
{
  uint64_t v2;

  sub_23DE95234(0, &qword_256D0F580, (uint64_t (*)(uint64_t))sub_23DEDF0C8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UncheckedSendable);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DEDF174()
{
  unint64_t result;

  result = qword_256D0F590;
  if (!qword_256D0F590)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for ProcessStateComponent.StateValues, &type metadata for ProcessStateComponent.StateValues);
    atomic_store(result, (unint64_t *)&qword_256D0F590);
  }
  return result;
}

uint64_t dispatch thunk of ProcessMonitor.updateConfiguration(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ProcessMonitor.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for ProcessStateComponent()
{
  return objc_opt_self();
}

uint64_t method lookup function for ProcessStateComponent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProcessStateComponent.__allocating_init(for:observer:monitor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t getEnumTagSinglePayload for ProcessStateComponent.StateValues(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessStateComponent.StateValues(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DEDF2D8 + 4 * byte_23DF19DFE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DEDF30C + 4 * byte_23DF19DF9[v4]))();
}

uint64_t sub_23DEDF30C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDF314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEDF31CLL);
  return result;
}

uint64_t sub_23DEDF328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEDF330);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DEDF334(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEDF33C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProcessStateComponent.StateValues()
{
  return &type metadata for ProcessStateComponent.StateValues;
}

ValueMetadata *type metadata accessor for ProcessStateComponent.ProtectedState()
{
  return &type metadata for ProcessStateComponent.ProtectedState;
}

uint64_t sub_23DEDF368()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

void sub_23DEDF390()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432C2A0)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432C2A0);
  }
}

unint64_t sub_23DEDF3EC()
{
  unint64_t result;

  result = qword_25432D9D8;
  if (!qword_25432D9D8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25432D9D8);
  }
  return result;
}

void sub_23DEDF428(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DF153D0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DEDF46C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DEDF490(uint64_t a1, void *a2, void *a3)
{
  return sub_23DEDE754(a1, a2, a3);
}

_QWORD *RemoteExecutionEngine.__allocating_init(contextProvider:executorProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

unint64_t static RemoteExecutionEngine.errorDomain.getter()
{
  return 0xD00000000000002FLL;
}

HealthOrchestration::RemoteExecutionEngine::Errors_optional __swiftcall RemoteExecutionEngine.Errors.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (HealthOrchestration::RemoteExecutionEngine::Errors_optional)rawValue;
}

uint64_t RemoteExecutionEngine.Errors.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

HealthOrchestration::RemoteExecutionEngine::Errors_optional sub_23DEDF51C(Swift::Int *a1)
{
  return RemoteExecutionEngine.Errors.init(rawValue:)(*a1);
}

_QWORD *RemoteExecutionEngine.init(contextProvider:executorProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void sub_23DEDF534(uint64_t a1, uint64_t *a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(id);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v41;
  uint64_t v43;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v5 = v4;
  v6 = a3;
  v7 = a1;
  v8 = a2[3];
  v9 = *(_QWORD *)(v4 + 32);
  v10 = *(_QWORD *)(v9 + 16);
  v45 = a2[2];
  if (v10)
  {
    v12 = *a2;
    v11 = a2[1];
    v13 = v9 + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      sub_23DE902F4(v13, (uint64_t)&v46);
      v14 = v47;
      v15 = v48;
      __swift_project_boxed_opaque_existential_1(&v46, v47);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15) == v12 && v16 == v11)
        break;
      v18 = sub_23DF15400();
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
      v13 += 40;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        v6 = a3;
        v7 = a1;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    sub_23DE902DC(&v46, (uint64_t)&v49);
    swift_bridgeObjectRelease();
    v6 = a3;
    v7 = a1;
    if (!*((_QWORD *)&v50 + 1))
      goto LABEL_23;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_11:
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v50 + 1))
    {
LABEL_23:
      sub_23DED2190((uint64_t)&v49);
      v34 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      v35 = (void *)sub_23DF14DE8();
      v36 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, 0, 0);

      v6(v36);
      return;
    }
  }
  sub_23DE902DC(&v49, (uint64_t)v52);
  v20 = *(_QWORD *)(v4 + 16);
  v19 = *(_QWORD *)(v5 + 24);
  ObjectType = swift_getObjectType();
  v22 = sub_23DEB127C(v20, ObjectType, v19);
  v43 = v7;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = v53;
  v25 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, AssociatedConformanceWitness, v24, v25);
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    v41 = (uint64_t)v6;
    swift_bridgeObjectRetain();
    v28 = (uint64_t *)(v26 + 40);
    while (1)
    {
      v29 = *v28;
      v30 = swift_getObjectType();
      v31 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v29 + 24);
      swift_unknownObjectRetain();
      v31(&v49, v30, v29);
      if ((_QWORD)v49 == v45 && *((_QWORD *)&v49 + 1) == v8)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      v33 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v28 += 2;
      if (!--v27)
      {
        swift_bridgeObjectRelease_n();
        v6 = (void (*)(id))v41;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_28:
    sub_23DEDFC0C(v43, v41, a4, v30, v29);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_25:
    v37 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v38 = (void *)sub_23DF14DE8();
    v39 = objc_msgSend(v37, sel_initWithDomain_code_userInfo_, v38, 1, 0);

    v6(v39);
    swift_unknownObjectRelease();

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
}

void sub_23DEDFB50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0F598)
  {
    sub_23DEDFBA4();
    v0 = sub_23DF153D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0F598);
  }
}

void sub_23DEDFBA4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D0E3F8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D0E3F8);
  }
}

uint64_t sub_23DEDFC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v9);
  v11 = (char *)&v13 - v10;
  swift_getAssociatedConformanceWitness();
  sub_23DEB11E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(v11, v13, v14, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t RemoteExecutionEngine.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteExecutionEngine.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_23DEDFFC0()
{
  unint64_t result;

  result = qword_256D0F5A0;
  if (!qword_256D0F5A0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for RemoteExecutionEngine.Errors, &type metadata for RemoteExecutionEngine.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0F5A0);
  }
  return result;
}

uint64_t type metadata accessor for RemoteExecutionEngine()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteExecutionEngine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteExecutionEngine.__allocating_init(contextProvider:executorProviders:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of RemoteExecutionEngine.run(workPlan:executorIdentifier:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for RemoteExecutionEngine.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DEE0090 + 4 * byte_23DF19F85[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DEE00C4 + 4 * asc_23DF19F80[v4]))();
}

uint64_t sub_23DEE00C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEE00CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEE00D4);
  return result;
}

uint64_t sub_23DEE00E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEE00E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DEE00EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEE00F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteExecutionEngine.Errors()
{
  return &type metadata for RemoteExecutionEngine.Errors;
}

void sub_23DEE0110(uint64_t a1, uint64_t *a2, _QWORD *a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  void (*v47)(__int128 *);
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v9 = swift_allocObject();
  v10 = v9;
  *(_QWORD *)(v9 + 16) = a4;
  *(_QWORD *)(v9 + 24) = a5;
  v11 = a2[2];
  v49 = a2[3];
  v12 = a3[4];
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v44 = v9;
    v46 = a4;
    v14 = *a2;
    v15 = a2[1];
    v16 = v12 + 32;
    swift_bridgeObjectRetain_n();
    swift_retain();
    while (1)
    {
      sub_23DE902F4(v16, (uint64_t)&v50);
      v17 = v51;
      v18 = v52;
      __swift_project_boxed_opaque_existential_1(&v50, v51);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18) == v14 && v19 == v15)
        break;
      v21 = sub_23DF15400();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
      v16 += 40;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        v10 = v44;
        a4 = v46;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_13:
    a4 = v46;
    swift_bridgeObjectRelease();
    sub_23DE902DC(&v50, (uint64_t)&v53);
    swift_bridgeObjectRelease();
    v10 = v44;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_11:
    v55 = 0;
    v53 = 0u;
    v54 = 0u;
    swift_bridgeObjectRelease();
  }
  if (*((_QWORD *)&v54 + 1))
  {
    sub_23DE902DC(&v53, (uint64_t)v56);
    v22 = a3[2];
    v23 = a3[3];
    ObjectType = swift_getObjectType();
    v28 = sub_23DEB127C(v22, ObjectType, v23);
    v47 = (void (*)(__int128 *))a4;
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v30 = v57;
    v31 = v58;
    __swift_project_boxed_opaque_existential_1(v56, v57);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 16))(v28, AssociatedConformanceWitness, v30, v31);
    v33 = v32;
    v34 = *(_QWORD *)(v32 + 16);
    if (v34)
    {
      v45 = v10;
      swift_bridgeObjectRetain();
      v35 = (uint64_t *)(v33 + 40);
      while (1)
      {
        v36 = *v35;
        v37 = swift_getObjectType();
        v38 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v36 + 24);
        swift_unknownObjectRetain();
        v38(&v53, v37, v36);
        if ((_QWORD)v53 == v11 && *((_QWORD *)&v53 + 1) == v49)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
        v40 = sub_23DF15400();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
          break;
        swift_unknownObjectRelease();
        v35 += 2;
        if (!--v34)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_32:
      sub_23DEDFC0C(a1, (uint64_t)sub_23DEE07CC, v45, v37, v36);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_27:
      v41 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      v42 = (void *)sub_23DF14DE8();
      v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 1, 0);

      *(_QWORD *)&v53 = v43;
      v47(&v53);
      swift_unknownObjectRelease();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    }
    swift_release();
  }
  else
  {
    sub_23DED2190((uint64_t)&v53);
    v25 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v26 = (void *)sub_23DF14DE8();
    v27 = objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, 0, 0);

    v56[0] = v27;
    a4(v56);
    swift_release();

  }
}

uint64_t sub_23DEE07A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEE07CC(uint64_t a1)
{
  uint64_t v1;

  return sub_23DECFA94(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t PresenceInputSignal.__allocating_init(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void static InputSignalIdentifier.presence.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF1A060;
  a1[2] = 0;
  a1[3] = 0;
}

void static InputSignalSet.LookupKey.presence.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF1A060;
  a1[2] = 0;
  a1[3] = 0;
}

Swift::Bool __swiftcall PresenceInputSignal.Anchor.hasDifference(from:for:)(HealthOrchestration::PresenceInputSignal::Anchor_optional from, HealthOrchestration::IdentityConfiguration a2)
{
  return *(_BYTE *)from.is_nil;
}

void PresenceInputSignal.Anchor.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF1A060;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static PresenceInputSignal.Anchor.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23DEE0894()
{
  return 0;
}

uint64_t sub_23DEE08A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23DEE08CC()
{
  sub_23DEE0CF8();
  return sub_23DF154CC();
}

uint64_t sub_23DEE08F4()
{
  sub_23DEE0CF8();
  return sub_23DF154D8();
}

uint64_t PresenceInputSignal.Anchor.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_23DEE0CA0();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEE0CF8();
  sub_23DF154C0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t PresenceInputSignal.Anchor.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void sub_23DEE0A00(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF1A060;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_23DEE0A24(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_23DEE0A48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_23DEE0CA0();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEE0CF8();
  sub_23DF154C0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void PresenceInputSignal.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023DF1A060;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t PresenceInputSignal.observer.getter()
{
  return swift_unknownObjectRetain();
}

Swift::Void __swiftcall PresenceInputSignal.beginObservation(from:configurations:)(HealthOrchestration::PresenceInputSignal::Anchor_optional from, Swift::OpaquePointer configurations)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;

  v3 = *v2;
  v4 = v2[3];
  ObjectType = swift_getObjectType();
  v8 = v2;
  v6 = *(void (**)(uint64_t, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  v7 = sub_23DEE0ED8(&qword_25432D638, (uint64_t)&protocol conformance descriptor for PresenceInputSignal);
  v6(v7, &v8, v3, v7, ObjectType, v4);
}

uint64_t PresenceInputSignal.init(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t PresenceInputSignal.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t PresenceInputSignal.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEE0C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v11;

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 24);
  ObjectType = swift_getObjectType();
  v11 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(ObjectType, &v11, a3, a4, ObjectType, v8);
}

unint64_t sub_23DEE0C84()
{
  return 0xD000000000000013;
}

void sub_23DEE0CA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0F658)
  {
    sub_23DEE0CF8();
    v0 = sub_23DF153A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0F658);
  }
}

unint64_t sub_23DEE0CF8()
{
  unint64_t result;

  result = qword_256D0F660;
  if (!qword_256D0F660)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A1FC, &type metadata for PresenceInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F660);
  }
  return result;
}

uint64_t type metadata accessor for PresenceInputSignal()
{
  return objc_opt_self();
}

unint64_t sub_23DEE0D5C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23DEE0D90();
  a1[2] = sub_23DEE0DD4();
  result = sub_23DEE0E18();
  a1[3] = result;
  return result;
}

unint64_t sub_23DEE0D90()
{
  unint64_t result;

  result = qword_256D0F6B0;
  if (!qword_256D0F6B0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PresenceInputSignal.Anchor, &type metadata for PresenceInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F6B0);
  }
  return result;
}

unint64_t sub_23DEE0DD4()
{
  unint64_t result;

  result = qword_256D0F6B8;
  if (!qword_256D0F6B8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PresenceInputSignal.Anchor, &type metadata for PresenceInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F6B8);
  }
  return result;
}

unint64_t sub_23DEE0E18()
{
  unint64_t result;

  result = qword_256D0F6C0;
  if (!qword_256D0F6C0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PresenceInputSignal.Anchor, &type metadata for PresenceInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F6C0);
  }
  return result;
}

unint64_t sub_23DEE0E60()
{
  unint64_t result;

  result = qword_256D0F6C8;
  if (!qword_256D0F6C8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for PresenceInputSignal.Anchor, &type metadata for PresenceInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F6C8);
  }
  return result;
}

uint64_t sub_23DEE0EA4(uint64_t a1)
{
  uint64_t result;

  result = sub_23DEE0ED8(&qword_25432E1C8, (uint64_t)&protocol conformance descriptor for PresenceInputSignal);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23DEE0ED8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PresenceInputSignal();
    result = MEMORY[0x2426483D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for PresenceInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceInputSignal.__allocating_init(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for PresenceInputSignal.Anchor()
{
  return &type metadata for PresenceInputSignal.Anchor;
}

ValueMetadata *type metadata accessor for PresenceInputSignal.Anchor.CodingKeys()
{
  return &type metadata for PresenceInputSignal.Anchor.CodingKeys;
}

unint64_t sub_23DEE0F4C()
{
  unint64_t result;

  result = qword_256D0F728;
  if (!qword_256D0F728)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A1AC, &type metadata for PresenceInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F728);
  }
  return result;
}

unint64_t sub_23DEE0F94()
{
  unint64_t result;

  result = qword_256D0F730;
  if (!qword_256D0F730)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A1D4, &type metadata for PresenceInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F730);
  }
  return result;
}

HealthOrchestration::EnvironmentalStateDescription __swiftcall EnvironmentalStateDescription.init(matching:excluding:)(Swift::OpaquePointer matching, Swift::OpaquePointer excluding)
{
  Swift::OpaquePointer *v2;
  HealthOrchestration::EnvironmentalStateDescription result;

  v2->_rawValue = matching._rawValue;
  v2[1]._rawValue = excluding._rawValue;
  result.excluding = excluding;
  result.matching = matching;
  return result;
}

uint64_t sub_23DEE0FE0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  v10 = v12;
  swift_bridgeObjectRelease();
  if (v4)
    swift_bridgeObjectRelease();
  return v10;
}

Swift::Bool __swiftcall EnvironmentalStateDescription.matches(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  Swift::Bool result;
  int64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  Swift::Bool v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v3 = (_QWORD *)*v1;
  v46 = v1[1];
  v4 = *v1 + 64;
  v5 = 1 << *(_BYTE *)(*v1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v3[8];
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_23;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    if (v15 >= v8)
      goto LABEL_28;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_28;
      v16 = *(_QWORD *)(v4 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_28;
        v16 = *(_QWORD *)(v4 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_22:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_23:
    v18 = *(_QWORD *)(v3[7] + 8 * v14);
    if (*((_QWORD *)a1._rawValue + 2))
    {
      v19 = (uint64_t *)(v3[6] + 16 * v14);
      v20 = *v19;
      v21 = v19[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = sub_23DE946E8(v20, v21);
      if ((v23 & 1) != 0)
      {
        v11 = *(_QWORD *)(*((_QWORD *)a1._rawValue + 7) + 8 * v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v11 = sub_23DE930F0(MEMORY[0x24BEE4AF8]);
LABEL_6:
    v12 = sub_23DEE16C8(v11, v18);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v24 = 0;
LABEL_56:
      swift_release();
      return v24;
    }
  }
  v17 = v15 + 3;
  if (v17 < v8)
  {
    v16 = *(_QWORD *)(v4 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        v10 = v17 + 1;
        if (__OFADD__(v17, 1))
          break;
        if (v10 >= v8)
          goto LABEL_28;
        v16 = *(_QWORD *)(v4 + 8 * v10);
        ++v17;
        if (v16)
          goto LABEL_22;
      }
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v10 = v17;
    goto LABEL_22;
  }
LABEL_28:
  swift_release();
  v25 = v46 + 64;
  v26 = 1 << *(_BYTE *)(v46 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v46 + 64);
  v29 = (unint64_t)(v26 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v30 = 0;
  v31 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v28)
    {
      v34 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v35 = v34 | (v30 << 6);
      v36 = v46;
      goto LABEL_50;
    }
    v37 = v30 + 1;
    v36 = v46;
    if (__OFADD__(v30, 1))
      goto LABEL_58;
    if (v37 >= v29)
    {
LABEL_55:
      v24 = 1;
      goto LABEL_56;
    }
    v38 = *(_QWORD *)(v25 + 8 * v37);
    ++v30;
    if (!v38)
    {
      v30 = v37 + 1;
      if (v37 + 1 >= v29)
        goto LABEL_55;
      v38 = *(_QWORD *)(v25 + 8 * v30);
      if (!v38)
      {
        v30 = v37 + 2;
        if (v37 + 2 >= v29)
          goto LABEL_55;
        v38 = *(_QWORD *)(v25 + 8 * v30);
        if (!v38)
          break;
      }
    }
LABEL_49:
    v28 = (v38 - 1) & v38;
    v35 = __clz(__rbit64(v38)) + (v30 << 6);
LABEL_50:
    v40 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v35);
    if (*((_QWORD *)a1._rawValue + 2))
    {
      v41 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * v35);
      v42 = *v41;
      v43 = v41[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44 = sub_23DE946E8(v42, v43);
      if ((v45 & 1) != 0)
      {
        v32 = *(_QWORD *)(*((_QWORD *)a1._rawValue + 7) + 8 * v44);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v32 = sub_23DE930F0(v31);
LABEL_33:
    v33 = sub_23DEE1900(v40, v32);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      v24 = 0;
      goto LABEL_56;
    }
  }
  v39 = v37 + 3;
  if (v39 >= v29)
    goto LABEL_55;
  v38 = *(_QWORD *)(v25 + 8 * v39);
  if (v38)
  {
    v30 = v39;
    goto LABEL_49;
  }
  while (1)
  {
    v30 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v30 >= v29)
      goto LABEL_55;
    v38 = *(_QWORD *)(v25 + 8 * v30);
    ++v39;
    if (v38)
      goto LABEL_49;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t static EnvironmentalStateDescription.+= infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *a1;
  *a1 = 0x8000000000000000;
  sub_23DEDA87C(v3, (uint64_t)sub_23DEDAD5C, 0, isUniquelyReferenced_nonNull_native, &v8);
  *a1 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v8 = a1[1];
  a1[1] = 0x8000000000000000;
  sub_23DEDA38C(v4, (uint64_t)sub_23DEDAD5C, 0, v6, &v8);
  a1[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentalStateDescription.description.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16))
  {
    sub_23DF15190();
    swift_bridgeObjectRelease();
    sub_23DEB3464();
    swift_bridgeObjectRetain();
    sub_23DF14DA0();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    sub_23DE95A68(0);
    swift_bridgeObjectRetain();
    sub_23DF14DA0();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    return 60;
  }
  else
  {
    sub_23DEB3464();
    return sub_23DF14DA0();
  }
}

uint64_t EnvironmentalStateDescription.matching.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EnvironmentalStateDescription.matching.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*EnvironmentalStateDescription.matching.modify())()
{
  return nullsub_1;
}

uint64_t EnvironmentalStateDescription.excluding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EnvironmentalStateDescription.excluding.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*EnvironmentalStateDescription.excluding.modify())()
{
  return nullsub_1;
}

uint64_t sub_23DEE16C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  int64_t v29;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v29 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_28;
      goto LABEL_22;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v29)
      goto LABEL_31;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v29)
        goto LABEL_31;
      v13 = *(_QWORD *)(v4 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v29)
          goto LABEL_31;
        v13 = *(_QWORD *)(v4 + 8 * v9);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_28;
LABEL_22:
    v15 = 16 * v11;
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 48) + v15);
    v17 = (uint64_t *)(*(_QWORD *)(a2 + 56) + v15);
    v19 = *v17;
    v18 = v17[1];
    v21 = *v16;
    v20 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = sub_23DE946E8(v21, v20);
    if ((v23 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v22);
    v26 = *v24;
    v25 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v26 == v19 && v25 == v18)
    {
      result = swift_bridgeObjectRelease_n();
    }
    else
    {
      v28 = sub_23DF15400();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
LABEL_28:
        swift_release();
        return 0;
      }
    }
  }
  v14 = v12 + 3;
  if (v14 >= v29)
  {
LABEL_31:
    swift_release();
    return 1;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v29)
      goto LABEL_31;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_23DEE1900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    while (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      if (*(_QWORD *)(a2 + 16))
      {
LABEL_22:
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
        v19 = *v16;
        v18 = v16[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = sub_23DE946E8(v19, v18);
        if ((v21 & 1) != 0)
        {
          v22 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v20);
          v23 = *v22;
          v24 = v22[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v25 = sub_23DEFD2E0(v23, v24, v17);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v25 & 1) != 0)
          {
            v26 = 0;
LABEL_26:
            swift_release();
            return v26;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
        }
      }
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_25;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_25;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_22;
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_25:
    v26 = 1;
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t static EnvironmentalStateDescription.+ infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_23DEE0FE0(v5, v3, (uint64_t)sub_23DEDAD5C, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_23DEE2718);
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  result = sub_23DEE0FE0(v7, v4, (uint64_t)sub_23DEDAD5C, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_23DEE2228);
  *a2 = v6;
  a2[1] = result;
  return result;
}

uint64_t sub_23DEE1B74(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_23DEE6700(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t static EnvironmentalStateDescription.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_23DEA3370(*a1, *a2) & 1) != 0)
    return sub_23DEA337C(v2, v3);
  else
    return 0;
}

uint64_t sub_23DEE1D38()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6964756C637865;
  else
    return 0x676E69686374616DLL;
}

uint64_t sub_23DEE1D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEE38B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DEE1D9C()
{
  sub_23DEE3304();
  return sub_23DF154CC();
}

uint64_t sub_23DEE1DC4()
{
  sub_23DEE3304();
  return sub_23DF154D8();
}

uint64_t EnvironmentalStateDescription.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_23DEE3534(0, &qword_256D0F738, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v12 - v8;
  v10 = *v1;
  v12 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEE3304();
  sub_23DF154C0();
  v14 = v10;
  v13 = 0;
  sub_23DEE33DC(0, &qword_256D0F748, (void (*)(uint64_t))sub_23DEB3464);
  sub_23DEE3348();
  sub_23DF15388();
  if (!v2)
  {
    v14 = v12;
    v13 = 1;
    sub_23DEE33DC(0, &qword_256D0F758, sub_23DE95A68);
    sub_23DEE3438(&qword_256D0F760, (uint64_t (*)(void))sub_23DEE34B8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_23DF15388();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t EnvironmentalStateDescription.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  sub_23DEE3534(0, &qword_256D0F778, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEE3304();
  sub_23DF154B4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_23DEE33DC(0, &qword_256D0F748, (void (*)(uint64_t))sub_23DEB3464);
  v15 = 0;
  sub_23DEE3590();
  sub_23DF15334();
  v11 = v16;
  sub_23DEE33DC(0, &qword_256D0F758, sub_23DE95A68);
  v15 = 1;
  sub_23DEE3438(&qword_256D0F788, (uint64_t (*)(void))sub_23DEE3624, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  swift_bridgeObjectRetain();
  sub_23DF15334();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v12 = v16;
  *a2 = v11;
  a2[1] = v12;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEE21B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return EnvironmentalStateDescription.init(from:)(a1, a2);
}

uint64_t sub_23DEE21C8(_QWORD *a1)
{
  return EnvironmentalStateDescription.encode(to:)(a1);
}

uint64_t sub_23DEE21DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_23DEA3370(*a1, *a2) & 1) != 0)
    return sub_23DEA337C(v2, v3);
  else
    return 0;
}

uint64_t sub_23DEE2228(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  _QWORD *v65;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_23DEE3174();
  v64 = v9;
  if (!v8)
  {
LABEL_50:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23DEA8AD4();
    return swift_release();
  }
  v10 = v7;
  v11 = v8;
  v59 = a5;
  while (1)
  {
    v15 = (_QWORD *)*a5;
    v17 = sub_23DE946E8(v10, v11);
    v18 = v15[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      goto LABEL_54;
    v21 = v16;
    if (v15[3] >= v20)
    {
      if ((a4 & 1) != 0)
      {
        v24 = (_QWORD *)*a5;
        if ((v16 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
        sub_23DECB884();
        v24 = (_QWORD *)*a5;
        if ((v21 & 1) == 0)
          goto LABEL_48;
      }
    }
    else
    {
      sub_23DEC92B4(v20, a4 & 1);
      v22 = sub_23DE946E8(v10, v11);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_57;
      v17 = v22;
      v24 = (_QWORD *)*a5;
      if ((v21 & 1) == 0)
      {
LABEL_48:
        v24[(v17 >> 6) + 8] |= 1 << v17;
        v55 = (uint64_t *)(v24[6] + 16 * v17);
        *v55 = v10;
        v55[1] = v11;
        *(_QWORD *)(v24[7] + 8 * v17) = v64;
        v56 = v24[2];
        v53 = __OFADD__(v56, 1);
        v57 = v56 + 1;
        if (v53)
          goto LABEL_56;
        v24[2] = v57;
        goto LABEL_4;
      }
    }
    v61 = v17;
    v60 = v24;
    v25 = *(_QWORD **)(v24[7] + 8 * v17);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = v25;
    v62 = v64 + 64;
    v27 = 1 << *(_BYTE *)(v64 + 32);
    v28 = v27 < 64 ? ~(-1 << v27) : -1;
    v29 = v28 & *(_QWORD *)(v64 + 64);
    v63 = (unint64_t)(v27 + 63) >> 6;
    swift_bridgeObjectRetain();
    v30 = 0;
    if (v29)
      break;
LABEL_19:
    v36 = v30 + 1;
    if (__OFADD__(v30, 1))
      goto LABEL_53;
    if (v36 < v63)
    {
      v37 = *(_QWORD *)(v62 + 8 * v36);
      ++v30;
      if (v37)
        goto LABEL_34;
      v30 = v36 + 1;
      if (v36 + 1 < v63)
      {
        v37 = *(_QWORD *)(v62 + 8 * v30);
        if (v37)
          goto LABEL_34;
        v30 = v36 + 2;
        if (v36 + 2 < v63)
        {
          v37 = *(_QWORD *)(v62 + 8 * v30);
          if (v37)
            goto LABEL_34;
          v30 = v36 + 3;
          if (v36 + 3 < v63)
          {
            v37 = *(_QWORD *)(v62 + 8 * v30);
            if (v37)
              goto LABEL_34;
            v38 = v36 + 4;
            if (v38 < v63)
            {
              v37 = *(_QWORD *)(v62 + 8 * v38);
              if (!v37)
              {
                while (1)
                {
                  v30 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    goto LABEL_55;
                  if (v30 >= v63)
                    goto LABEL_3;
                  v37 = *(_QWORD *)(v62 + 8 * v30);
                  ++v38;
                  if (v37)
                    goto LABEL_34;
                }
              }
              v30 = v38;
LABEL_34:
              v29 = (v37 - 1) & v37;
              v35 = __clz(__rbit64(v37)) + (v30 << 6);
              goto LABEL_35;
            }
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v60[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 8 * v61) = v25;
    a5 = v59;
LABEL_4:
    v10 = sub_23DEE3174();
    v11 = v13;
    v64 = v14;
    a4 = 1;
    if (!v13)
      goto LABEL_50;
  }
  while (1)
  {
    v34 = __clz(__rbit64(v29));
    v29 &= v29 - 1;
    v35 = v34 | (v30 << 6);
LABEL_35:
    v39 = (uint64_t *)(*(_QWORD *)(v64 + 48) + 16 * v35);
    v41 = *v39;
    v40 = v39[1];
    v42 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = sub_23DE946E8(v41, v40);
    v45 = v25[2];
    v46 = (v43 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
      break;
    v48 = v43;
    if (v25[3] >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v25 = v65;
        if ((v43 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        sub_23DECB89C();
        v25 = v65;
        if ((v48 & 1) != 0)
          goto LABEL_17;
      }
LABEL_42:
      v25[(v44 >> 6) + 8] |= 1 << v44;
      v51 = (uint64_t *)(v25[6] + 16 * v44);
      *v51 = v41;
      v51[1] = v40;
      *(_QWORD *)(v25[7] + 8 * v44) = v42;
      v52 = v25[2];
      v53 = __OFADD__(v52, 1);
      v54 = v52 + 1;
      if (v53)
        goto LABEL_52;
      v25[2] = v54;
      isUniquelyReferenced_nonNull_native = 1;
      if (!v29)
        goto LABEL_19;
    }
    else
    {
      sub_23DEC92CC(v47, isUniquelyReferenced_nonNull_native & 1);
      v49 = sub_23DE946E8(v41, v40);
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_57;
      v44 = v49;
      v25 = v65;
      if ((v48 & 1) == 0)
        goto LABEL_42;
LABEL_17:
      v31 = *(_QWORD *)(v25[7] + 8 * v44);
      swift_bridgeObjectRetain();
      v32 = sub_23DEE1B74(v42, v31);
      swift_bridgeObjectRelease();
      v33 = v25[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v33 + 8 * v44) = v32;
      isUniquelyReferenced_nonNull_native = 1;
      if (!v29)
        goto LABEL_19;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEE2718(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  _QWORD *v69;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_23DEE3174();
  v67 = v9;
  if (!v8)
  {
LABEL_50:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23DEA8AD4();
    return swift_release();
  }
  v10 = v7;
  v11 = v8;
  v62 = a5;
  while (1)
  {
    v15 = (_QWORD *)*a5;
    v17 = sub_23DE946E8(v10, v11);
    v18 = v15[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      goto LABEL_54;
    v21 = v16;
    if (v15[3] >= v20)
    {
      if ((a4 & 1) != 0)
      {
        v24 = (_QWORD *)*a5;
        if ((v16 & 1) != 0)
          break;
      }
      else
      {
        sub_23DECB890();
        v24 = (_QWORD *)*a5;
        if ((v21 & 1) != 0)
          break;
      }
      goto LABEL_48;
    }
    sub_23DEC92C0(v20, a4 & 1);
    v22 = sub_23DE946E8(v10, v11);
    if ((v21 & 1) != (v23 & 1))
      goto LABEL_57;
    v17 = v22;
    v24 = (_QWORD *)*a5;
    if ((v21 & 1) != 0)
      break;
LABEL_48:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    v58 = (uint64_t *)(v24[6] + 16 * v17);
    *v58 = v10;
    v58[1] = v11;
    *(_QWORD *)(v24[7] + 8 * v17) = v67;
    v59 = v24[2];
    v56 = __OFADD__(v59, 1);
    v60 = v59 + 1;
    if (v56)
      goto LABEL_56;
    v24[2] = v60;
LABEL_4:
    v10 = sub_23DEE3174();
    v11 = v13;
    v67 = v14;
    a4 = 1;
    if (!v13)
      goto LABEL_50;
  }
  v64 = v17;
  v63 = v24;
  v25 = *(_QWORD **)(v24[7] + 8 * v17);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69 = v25;
  v65 = v67 + 64;
  v27 = 1 << *(_BYTE *)(v67 + 32);
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v29 = v28 & *(_QWORD *)(v67 + 64);
  v66 = (unint64_t)(v27 + 63) >> 6;
  swift_bridgeObjectRetain();
  v30 = 0;
  while (2)
  {
    if (v29)
    {
      v32 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v68 = v30;
      v33 = v32 | (v30 << 6);
    }
    else
    {
      v34 = v30 + 1;
      if (__OFADD__(v30, 1))
        goto LABEL_53;
      if (v34 >= v66)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v63[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v12 + 8 * v64) = v25;
        a5 = v62;
        goto LABEL_4;
      }
      v35 = *(_QWORD *)(v65 + 8 * v34);
      v36 = v30 + 1;
      if (!v35)
      {
        v36 = v30 + 2;
        if (v30 + 2 >= v66)
          goto LABEL_3;
        v35 = *(_QWORD *)(v65 + 8 * v36);
        if (!v35)
        {
          v36 = v30 + 3;
          if (v30 + 3 >= v66)
            goto LABEL_3;
          v35 = *(_QWORD *)(v65 + 8 * v36);
          if (!v35)
          {
            v36 = v30 + 4;
            if (v30 + 4 >= v66)
              goto LABEL_3;
            v35 = *(_QWORD *)(v65 + 8 * v36);
            if (!v35)
            {
              v37 = v30 + 5;
              if (v30 + 5 >= v66)
                goto LABEL_3;
              v35 = *(_QWORD *)(v65 + 8 * v37);
              if (!v35)
              {
                while (1)
                {
                  v36 = v37 + 1;
                  if (__OFADD__(v37, 1))
                    goto LABEL_55;
                  if (v36 >= v66)
                    goto LABEL_3;
                  v35 = *(_QWORD *)(v65 + 8 * v36);
                  ++v37;
                  if (v35)
                    goto LABEL_35;
                }
              }
              v36 = v30 + 5;
            }
          }
        }
      }
LABEL_35:
      v29 = (v35 - 1) & v35;
      v68 = v36;
      v33 = __clz(__rbit64(v35)) + (v36 << 6);
    }
    v38 = 16 * v33;
    v39 = (uint64_t *)(*(_QWORD *)(v67 + 48) + v38);
    v41 = *v39;
    v40 = v39[1];
    v42 = (uint64_t *)(*(_QWORD *)(v67 + 56) + v38);
    v44 = *v42;
    v43 = v42[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = sub_23DE946E8(v41, v40);
    v47 = v25[2];
    v48 = (v45 & 1) == 0;
    v49 = v47 + v48;
    if (!__OFADD__(v47, v48))
    {
      v50 = v45;
      if (v25[3] >= v49)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v25 = v69;
          if ((v45 & 1) == 0)
            goto LABEL_43;
        }
        else
        {
          sub_23DECB6B8();
          v25 = v69;
          if ((v50 & 1) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        sub_23DEC8F7C(v49, isUniquelyReferenced_nonNull_native & 1);
        v51 = sub_23DE946E8(v41, v40);
        if ((v50 & 1) != (v52 & 1))
          goto LABEL_57;
        v46 = v51;
        v25 = v69;
        if ((v50 & 1) == 0)
        {
LABEL_43:
          v25[(v46 >> 6) + 8] |= 1 << v46;
          v53 = (uint64_t *)(v25[6] + 16 * v46);
          *v53 = v41;
          v53[1] = v40;
          v54 = (_QWORD *)(v25[7] + 16 * v46);
          *v54 = v44;
          v54[1] = v43;
          v55 = v25[2];
          v56 = __OFADD__(v55, 1);
          v57 = v55 + 1;
          if (v56)
            goto LABEL_52;
          v25[2] = v57;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      v31 = (_QWORD *)(v25[7] + 16 * v46);
      swift_bridgeObjectRelease();
      *v31 = v44;
      v31[1] = v43;
LABEL_17:
      isUniquelyReferenced_nonNull_native = 1;
      v30 = v68;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEE2BF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  sub_23DEA8958();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DEA8A88(0, &qword_256D0EB18, v9);
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v12, v15);
  v18 = (char *)&v42 - v17;
  v19 = *v1;
  v20 = v1[1];
  v21 = v1[2];
  v22 = v1[3];
  v23 = v1[4];
  v42 = v8;
  v45 = v21;
  if (v23)
  {
    v43 = v20;
    v44 = v14;
    v24 = v5;
    v25 = a1;
    v26 = (v23 - 1) & v23;
    v27 = __clz(__rbit64(v23)) | (v22 << 6);
LABEL_3:
    v28 = *(_QWORD *)(v19 + 48);
    v29 = sub_23DF14BA8();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v18, v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v27, v29);
    v30 = *(_QWORD *)(v19 + 56);
    v31 = sub_23DF14BF0();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(&v18[*(int *)(v4 + 48)], v30 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v27, v31);
    v32 = 0;
    a1 = v25;
    v5 = v24;
    v20 = v43;
    v14 = v44;
    goto LABEL_4;
  }
  v37 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
    return result;
  }
  v38 = (unint64_t)(v21 + 64) >> 6;
  if (v37 >= v38)
  {
    v26 = 0;
    v32 = 1;
    goto LABEL_4;
  }
  v39 = *(_QWORD *)(v20 + 8 * v37);
  if (v39)
  {
LABEL_11:
    v43 = v20;
    v44 = v14;
    v24 = v5;
    v25 = a1;
    v26 = (v39 - 1) & v39;
    v27 = __clz(__rbit64(v39)) + (v37 << 6);
    v22 = v37;
    goto LABEL_3;
  }
  v40 = v22 + 2;
  if (v22 + 2 >= v38)
    goto LABEL_27;
  v39 = *(_QWORD *)(v20 + 8 * v40);
  if (v39)
  {
LABEL_15:
    v37 = v40;
    goto LABEL_11;
  }
  if (v22 + 3 >= v38)
    goto LABEL_28;
  v39 = *(_QWORD *)(v20 + 8 * (v22 + 3));
  if (v39)
  {
    v37 = v22 + 3;
    goto LABEL_11;
  }
  v40 = v22 + 4;
  if (v22 + 4 < v38)
  {
    v39 = *(_QWORD *)(v20 + 8 * v40);
    if (v39)
      goto LABEL_15;
    v37 = v22 + 5;
    if (v22 + 5 < v38)
    {
      v39 = *(_QWORD *)(v20 + 8 * v37);
      if (v39)
        goto LABEL_11;
      v37 = v38 - 1;
      v41 = v22 + 6;
      while (v38 != v41)
      {
        v39 = *(_QWORD *)(v20 + 8 * v41++);
        if (v39)
        {
          v37 = v41 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v26 = 0;
      v32 = 1;
      v22 = v37;
      goto LABEL_4;
    }
LABEL_28:
    v26 = 0;
    v32 = 1;
    v22 = v40;
    goto LABEL_4;
  }
  v26 = 0;
  v32 = 1;
  v22 += 3;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, v32, 1, v4);
  *v1 = v19;
  v1[1] = v20;
  v1[2] = v45;
  v1[3] = v22;
  v1[4] = v26;
  v33 = (void (*)(uint64_t))v1[5];
  sub_23DEE39AC((uint64_t)v18, (uint64_t)v14, &qword_256D0EB18, (void (*)(uint64_t))sub_23DEA8958);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
  {
    sub_23DEA8A1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a1, 1, 1, v34);
  }
  else
  {
    v35 = (uint64_t)v42;
    sub_23DEE39F8((uint64_t)v14, (uint64_t)v42);
    v33(v35);
    sub_23DE9A9BC(v35, (uint64_t (*)(_QWORD))sub_23DEA8958);
    sub_23DEA8A1C();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 0, 1, v36);
  }
}

uint64_t sub_23DEE2F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  void (*v21)(_OWORD *);
  uint64_t result;
  uint64_t v23;
  _OWORD v24[4];
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v23 = v1[2];
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v10);
    v13 = *v11;
    v12 = v11[1];
    v15 = v11[2];
    v14 = v11[3];
    sub_23DE902F4(*(_QWORD *)(v3 + 56) + 40 * v10, (uint64_t)v30);
    *(_QWORD *)&v28 = v13;
    *((_QWORD *)&v28 + 1) = v12;
    *(_QWORD *)&v29 = v15;
    *((_QWORD *)&v29 + 1) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = v23;
    goto LABEL_23;
  }
  v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v17 = (unint64_t)(v6 + 64) >> 6;
  if (v16 < v17)
  {
    v18 = *(_QWORD *)(v4 + 8 * v16);
    if (v18)
    {
LABEL_7:
      v23 = v1[2];
      v9 = (v18 - 1) & v18;
      v10 = __clz(__rbit64(v18)) + (v16 << 6);
      v7 = v16;
      goto LABEL_3;
    }
    v19 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v17)
    {
      v18 = *(_QWORD *)(v4 + 8 * v19);
      if (v18)
      {
LABEL_10:
        v16 = v19;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v17)
      {
        v18 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v18)
        {
          v16 = v5 + 3;
          goto LABEL_7;
        }
        v19 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v17)
        {
          v18 = *(_QWORD *)(v4 + 8 * v19);
          if (v18)
            goto LABEL_10;
          v16 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v17)
          {
            v18 = *(_QWORD *)(v4 + 8 * v16);
            if (v18)
              goto LABEL_7;
            v7 = v17 - 1;
            v20 = v5 + 6;
            while (v17 != v20)
            {
              v18 = *(_QWORD *)(v4 + 8 * v20++);
              if (v18)
              {
                v16 = v20 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v28 = 0u;
  v29 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v21 = (void (*)(_OWORD *))v1[5];
  result = sub_23DEE39AC((uint64_t)&v28, (uint64_t)v26, &qword_25432DD00, (void (*)(uint64_t))sub_23DECDEF8);
  if (*((_QWORD *)&v26[0] + 1))
  {
    v24[2] = v26[2];
    v24[3] = v26[3];
    v25 = v27;
    v24[0] = v26[0];
    v24[1] = v26[1];
    v21(v24);
    return sub_23DE9A9BC((uint64_t)v24, (uint64_t (*)(_QWORD))sub_23DECDEF8);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_23DEE3174()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

unint64_t sub_23DEE3304()
{
  unint64_t result;

  result = qword_256D0F740;
  if (!qword_256D0F740)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A3F4, &type metadata for EnvironmentalStateDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F740);
  }
  return result;
}

unint64_t sub_23DEE3348()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256D0F750;
  if (!qword_256D0F750)
  {
    sub_23DEE33DC(255, &qword_256D0F748, (void (*)(uint64_t))sub_23DEB3464);
    v2 = v1;
    v3 = MEMORY[0x24BEE04C0];
    v4[0] = MEMORY[0x24BEE0D08];
    v4[1] = sub_23DED6530(&qword_256D0F110, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    result = MEMORY[0x2426483D0](v3, v2, v4);
    atomic_store(result, (unint64_t *)&qword_256D0F750);
  }
  return result;
}

void sub_23DEE33DC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DF14DAC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_23DEE3438(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_23DEE33DC(255, &qword_256D0F758, sub_23DE95A68);
    v10 = v9;
    v11[0] = a3;
    v11[1] = a2();
    result = MEMORY[0x2426483D0](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DEE34B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256D0F768;
  if (!qword_256D0F768)
  {
    sub_23DE95A68(255);
    v2 = v1;
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = sub_23DEE36A0(&qword_256D0F770, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1700]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE04C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256D0F768);
  }
  return result;
}

void sub_23DEE3534(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DEE3304();
    v7 = a3(a1, &type metadata for EnvironmentalStateDescription.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DEE3590()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256D0F780;
  if (!qword_256D0F780)
  {
    sub_23DEE33DC(255, &qword_256D0F748, (void (*)(uint64_t))sub_23DEB3464);
    v2 = v1;
    v3 = MEMORY[0x24BEE04E0];
    v4[0] = MEMORY[0x24BEE0D38];
    v4[1] = sub_23DED6530(&qword_256D0F140, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    result = MEMORY[0x2426483D0](v3, v2, v4);
    atomic_store(result, (unint64_t *)&qword_256D0F780);
  }
  return result;
}

unint64_t sub_23DEE3624()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256D0F790;
  if (!qword_256D0F790)
  {
    sub_23DE95A68(255);
    v2 = v1;
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = sub_23DEE36A0(&qword_256D0F798, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1720]);
    result = MEMORY[0x2426483D0](MEMORY[0x24BEE04E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256D0F790);
  }
  return result;
}

uint64_t sub_23DEE36A0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_23DE9544C();
    v8 = a2;
    result = MEMORY[0x2426483D0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentalStateDescription()
{
  return &type metadata for EnvironmentalStateDescription;
}

uint64_t storeEnumTagSinglePayload for EnvironmentalStateDescription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DEE3758 + 4 * byte_23DF1A255[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DEE378C + 4 * byte_23DF1A250[v4]))();
}

uint64_t sub_23DEE378C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEE3794(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEE379CLL);
  return result;
}

uint64_t sub_23DEE37A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEE37B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DEE37B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEE37BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentalStateDescription.CodingKeys()
{
  return &type metadata for EnvironmentalStateDescription.CodingKeys;
}

unint64_t sub_23DEE37DC()
{
  unint64_t result;

  result = qword_256D0F7A0;
  if (!qword_256D0F7A0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A3CC, &type metadata for EnvironmentalStateDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F7A0);
  }
  return result;
}

unint64_t sub_23DEE3824()
{
  unint64_t result;

  result = qword_256D0F7A8;
  if (!qword_256D0F7A8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A33C, &type metadata for EnvironmentalStateDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F7A8);
  }
  return result;
}

unint64_t sub_23DEE386C()
{
  unint64_t result;

  result = qword_256D0F7B0;
  if (!qword_256D0F7B0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A364, &type metadata for EnvironmentalStateDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F7B0);
  }
  return result;
}

uint64_t sub_23DEE38B0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E69686374616DLL && a2 == 0xE800000000000000;
  if (v2 || (sub_23DF15400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6964756C637865 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DF15400();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DEE39AC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DEA8A88(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DEE39F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DEA8958();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void static InputSignalSet.LookupKey.userDefault<A>(type:_:)()
{
  type metadata accessor for UserDefaultInputSignal();
}

uint64_t sub_23DEE3A78()
{
  __n128 *v0;
  __n128 v2;

  InputSignalSet.LookupKey.init(identifier:)(&v2, v0);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void type metadata accessor for UserDefaultInputSignal()
{
  JUMPOUT(0x242648388);
}

uint64_t UserDefaultInputSignal.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + qword_256D0F7B8 + 8);
  v4 = *(_QWORD *)(v1 + qword_256D0F7B8 + 16);
  v3 = *(_QWORD *)(v1 + qword_256D0F7B8 + 24);
  *a1 = *(_QWORD *)(v1 + qword_256D0F7B8);
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t UserDefaultInputSignal.observer.getter()
{
  sub_23DEE41EC();
  return swift_unknownObjectRetain();
}

Swift::Void __swiftcall UserDefaultInputSignal.stopObservation()()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + qword_256D0F7C0);
  v2 = (id)sub_23DF14DE8();
  objc_msgSend(v1, sel_removeObserver_forKeyPath_, v0, v2);

}

id UserDefaultInputSignal.__allocating_init(identifier:observer:defaults:key:transformer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  id v17;

  v17 = objc_allocWithZone(v8);
  return UserDefaultInputSignal.init(identifier:observer:defaults:key:transformer:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

id UserDefaultInputSignal.init(identifier:observer:defaults:key:transformer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  objc_class *ObjectType;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  objc_super v24;

  ObjectType = (objc_class *)swift_getObjectType();
  v18 = *(_QWORD *)(a1 + 8);
  v19 = &v8[qword_256D0F7B8];
  *(_QWORD *)v19 = *(_QWORD *)a1;
  *((_QWORD *)v19 + 1) = v18;
  *((_OWORD *)v19 + 1) = *(_OWORD *)(a1 + 16);
  v20 = &v8[qword_256D0F7D0];
  *(_QWORD *)v20 = a2;
  *((_QWORD *)v20 + 1) = a3;
  *(_QWORD *)&v8[qword_256D0F7C0] = a4;
  v21 = &v8[qword_256D0F7C8];
  *(_QWORD *)v21 = a5;
  *((_QWORD *)v21 + 1) = a6;
  v22 = &v8[qword_256D0F7D8];
  *(_QWORD *)v22 = a7;
  *((_QWORD *)v22 + 1) = a8;
  v24.receiver = v8;
  v24.super_class = ObjectType;
  return objc_msgSendSuper2(&v24, sel_init);
}

void UserDefaultInputSignal.observeValue(forKeyPath:of:change:context:)()
{
  sub_23DEE4200();
}

void sub_23DEE3CE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;

  if (a3)
  {
    sub_23DF14E0C();
    if (a4)
      goto LABEL_3;
  }
  else if (a4)
  {
LABEL_3:
    swift_unknownObjectRetain();
    v8 = a5;
    v9 = a1;
    sub_23DF15130();
    swift_unknownObjectRelease();
    if (!a5)
      goto LABEL_7;
    goto LABEL_4;
  }
  v10 = a5;
  v11 = a1;
  if (!a5)
LABEL_7:
    sub_23DEE4200();
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_23DEE4538();
  sub_23DF14D94();

  goto LABEL_7;
}

uint64_t sub_23DEE3DA8()
{
  void *v0;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23DEA87B0((uint64_t)&v2);
}

id UserDefaultInputSignal.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void UserDefaultInputSignal.init()()
{
  sub_23DEE4454();
}

void sub_23DEE3E18()
{
  sub_23DEE4454();
}

id UserDefaultInputSignal.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23DEE3E6C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23DEE3EEC@<X0>(_QWORD *a1@<X8>)
{
  return UserDefaultInputSignal.identifier.getter(a1);
}

uint64_t sub_23DEE3F0C()
{
  sub_23DEE41EC();
  return swift_unknownObjectRetain();
}

void sub_23DEE3F38()
{
  _s19HealthOrchestration22UserDefaultInputSignalC16beginObservation4from14configurationsyAA19OptionalValueAnchorVyxGSg_SayAA21IdentityConfigurationVGtF_0();
}

void sub_23DEE3F58()
{
  UserDefaultInputSignal.stopObservation()();
}

void _s19HealthOrchestration22UserDefaultInputSignalC16beginObservation4from14configurationsyAA19OptionalValueAnchorVyxGSg_SayAA21IdentityConfigurationVGtF_0()
{
  uint64_t v0;
  uint64_t v1;

  swift_getObjectType();
  v0 = sub_23DF150F4();
  MEMORY[0x24BDAC7A8](v0, v1);
  type metadata accessor for OptionalValueAnchor();
}

void sub_23DEE401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;

  *(_QWORD *)(v10 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v10 - 168) = a1;
  MEMORY[0x24BDAC7A8](a1, a2);
  v12 = (char *)&a9 - v11;
  v13 = *(void **)(v9 + qword_256D0F7C0);
  v14 = (void *)sub_23DF14DE8();
  objc_msgSend(v13, sel_addObserver_forKeyPath_options_context_, v9, v14, 1, 0);

  *(_QWORD *)(v10 - 208) = *(_QWORD *)(v9 + qword_256D0F7D0);
  v15 = *(_QWORD *)(v9 + qword_256D0F7B8 + 8);
  v17 = *(_QWORD *)(v9 + qword_256D0F7B8 + 16);
  v16 = *(_QWORD *)(v9 + qword_256D0F7B8 + 24);
  *(_QWORD *)(v10 - 112) = *(_QWORD *)(v9 + qword_256D0F7B8);
  *(_QWORD *)(v10 - 104) = v15;
  *(_QWORD *)(v10 - 96) = v17;
  *(_QWORD *)(v10 - 88) = v16;
  v18 = *(void (**)(uint64_t))(v9 + qword_256D0F7D8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = (void *)sub_23DF14DE8();
  v20 = objc_msgSend(v13, sel_valueForKey_, v19);

  if (v20)
  {
    sub_23DF15130();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v10 - 144) = 0u;
    *(_OWORD *)(v10 - 128) = 0u;
  }
  swift_getObjectType();
  v18(v10 - 144);
  sub_23DEA87B0(v10 - 144);
  OptionalValueAnchor.init(identifier:value:)(v10 - 112, (uint64_t)v12);
}

uint64_t sub_23DEE4180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 112) = v0;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8);
  v6 = *(_QWORD *)(v4 - 152);
  v7 = MEMORY[0x2426483D0](&protocol conformance descriptor for UserDefaultInputSignal<A>, v6);
  v5(v3, v4 - 112, v6, v7, v1, v2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 176) + 8))(v3, *(_QWORD *)(v4 - 168));
}

uint64_t sub_23DEE41EC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_256D0F7D0);
}

void sub_23DEE4200()
{
  uint64_t v0;
  uint64_t v1;

  swift_getObjectType();
  v0 = sub_23DF150F4();
  MEMORY[0x24BDAC7A8](v0, v1);
  type metadata accessor for OptionalValueAnchor();
}

uint64_t sub_23DEE429C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = MEMORY[0x24BDAC7A8](a1, a2);
  v7 = (char *)&v16 - v6;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      *(_QWORD *)(v4 - 208) = result;
      v8 = (id)*MEMORY[0x24BDD0E70];
      v9 = sub_23DEA658C();
      if ((v10 & 1) != 0)
      {
        sub_23DEA8844(*(_QWORD *)(v2 + 56) + 32 * v9, v4 - 160);
      }
      else
      {
        *(_OWORD *)(v4 - 160) = 0u;
        *(_OWORD *)(v4 - 144) = 0u;
      }

      if (*(_QWORD *)(v4 - 136))
      {
        sub_23DE9543C((_OWORD *)(v4 - 160), (_OWORD *)(v4 - 120));
        v11 = *(_QWORD *)(v3 + qword_256D0F7D0 + 8);
        *(_QWORD *)(v4 - 216) = *(_QWORD *)(v3 + qword_256D0F7D0);
        *(_QWORD *)(v4 - 232) = v11;
        *(_QWORD *)(v4 - 224) = swift_getObjectType();
        v12 = *(_QWORD *)(v3 + qword_256D0F7B8 + 8);
        v13 = *(_QWORD *)(v3 + qword_256D0F7B8 + 16);
        v14 = *(_QWORD *)(v3 + qword_256D0F7B8 + 24);
        *(_QWORD *)(v4 - 160) = *(_QWORD *)(v3 + qword_256D0F7B8);
        *(_QWORD *)(v4 - 152) = v12;
        *(_QWORD *)(v4 - 144) = v13;
        *(_QWORD *)(v4 - 136) = v14;
        v15 = *(_QWORD *)(v3 + qword_256D0F7D8);
        *(_QWORD *)(v4 - 248) = *(_QWORD *)(v3 + qword_256D0F7D8 + 8);
        *(_QWORD *)(v4 - 240) = v15;
        sub_23DEA8844(v4 - 120, v4 - 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        (*(void (**)(uint64_t))(v4 - 240))(v4 - 192);
        sub_23DEA87B0(v4 - 192);
        OptionalValueAnchor.init(identifier:value:)(v4 - 160, (uint64_t)v7);
      }
    }
    else
    {
      *(_OWORD *)(v4 - 160) = 0u;
      *(_OWORD *)(v4 - 144) = 0u;
    }
    return sub_23DEA87B0(v4 - 160);
  }
  return result;
}

void sub_23DEE4454()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_23DEE4480()
{
  JUMPOUT(0x2426483D0);
}

uint64_t sub_23DEE4490(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2426483D0](MEMORY[0x24BDD0240]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23DEE44BC()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for UserDefaultInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UserDefaultInputSignal.__allocating_init(identifier:observer:defaults:key:transformer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

unint64_t sub_23DEE4538()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D0E2B0;
  if (!qword_256D0E2B0)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = MEMORY[0x2426483D0](&unk_23DF16260, v1);
    atomic_store(result, (unint64_t *)&qword_256D0E2B0);
  }
  return result;
}

uint64_t POSIXSignalInputSignal.__allocating_init(context:observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  POSIXSignalInputSignal.init(context:observer:)(a1, a2, a3, a4);
  return v8;
}

void static InputSignalIdentifier.posixSignal.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF1A4D0;
  a1[2] = 0;
  a1[3] = 0;
}

void static InputSignalSet.LookupKey.posixSignal.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF1A4D0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t (*POSIXSignalInputSignal.Anchor.signalTimestamps.modify())()
{
  return nullsub_1;
}

uint64_t POSIXSignalInputSignal.Anchor.relevantTimestamps(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_23DEEBB50(v2, v1);
  swift_bridgeObjectRelease();
  return v3;
}

BOOL POSIXSignalInputSignal.Anchor.hasDifference(from:for:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_23DEEBB50(v5, v4);
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_23DEEBB50(v7, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = sub_23DE9482C(MEMORY[0x24BEE4AF8]);
  }
  v9 = sub_23DEA3DC0(v6, v8);
  swift_release();
  swift_bridgeObjectRelease();
  return (v9 & 1) == 0;
}

uint64_t POSIXSignalInputSignal.Anchor.merged(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_23DEEBCCC(v2, (uint64_t (*)(_QWORD, double))sub_23DEEBED4);
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)sub_23DE9482C(MEMORY[0x24BEE4AF8]);
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
LABEL_17:
    result = swift_bridgeObjectRelease();
    *a1 = v4;
    return result;
  }
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)(v3 + 40);
  while (1)
  {
    v7 = *((_DWORD *)v6 - 2);
    v8 = *v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = sub_23DEA6424(v7);
    v12 = v4[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
      break;
    v15 = v10;
    if (v4[3] >= v14)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v10 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_23DECA4C8();
        if ((v15 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_23DEC7170(v14, isUniquelyReferenced_nonNull_native);
      v16 = sub_23DEA6424(v7);
      if ((v15 & 1) != (v17 & 1))
        goto LABEL_20;
      v11 = v16;
      if ((v15 & 1) != 0)
      {
LABEL_3:
        *(_QWORD *)(v4[7] + 8 * v11) = v8;
        goto LABEL_4;
      }
    }
    v4[(v11 >> 6) + 8] |= 1 << v11;
    *(_DWORD *)(v4[6] + 4 * v11) = v7;
    *(_QWORD *)(v4[7] + 8 * v11) = v8;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_19;
    v4[2] = v20;
LABEL_4:
    swift_bridgeObjectRelease();
    v6 += 2;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEE4934(unsigned int a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)(a2 + 16) && (sub_23DEA6424(a1), (v3 & 1) != 0))
    return a1;
  else
    return 0;
}

unint64_t static POSIXSignalInputSignal.Anchor.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  return sub_23DEA3DC0(*a1, *a2);
}

unint64_t sub_23DEE49A8()
{
  return 0xD000000000000010;
}

uint64_t sub_23DEE49C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DEEC8D0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23DEE49EC()
{
  sub_23DEEBEDC();
  return sub_23DF154CC();
}

uint64_t sub_23DEE4A14()
{
  sub_23DEEBEDC();
  return sub_23DF154D8();
}

uint64_t POSIXSignalInputSignal.Anchor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[4];

  sub_23DEDAE1C(0, &qword_256D0F840, (uint64_t (*)(void))sub_23DEEBEDC, (uint64_t)&type metadata for POSIXSignalInputSignal.Anchor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEEBEDC();
  sub_23DF154C0();
  v11[3] = v9;
  sub_23DEEBF20();
  sub_23DEEBF84(&qword_256D0F858, MEMORY[0x24BEE3F90], MEMORY[0x24BEE13D8], MEMORY[0x24BEE04C0]);
  sub_23DF15388();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t POSIXSignalInputSignal.Anchor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v13 = a2;
  sub_23DEDAE1C(0, &qword_256D0F860, (uint64_t (*)(void))sub_23DEEBEDC, (uint64_t)&type metadata for POSIXSignalInputSignal.Anchor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEEBEDC();
  sub_23DF154B4();
  if (!v2)
  {
    v10 = v13;
    sub_23DEEBF20();
    sub_23DEEBF84(&qword_256D0F868, MEMORY[0x24BEE3FB8], MEMORY[0x24BEE1400], MEMORY[0x24BEE04E0]);
    sub_23DF15334();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DEE4D00@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return POSIXSignalInputSignal.Anchor.init(from:)(a1, a2);
}

uint64_t sub_23DEE4D14(_QWORD *a1)
{
  return POSIXSignalInputSignal.Anchor.encode(to:)(a1);
}

unint64_t sub_23DEE4D28(unint64_t *a1, uint64_t *a2)
{
  return sub_23DEA3DC0(*a1, *a2);
}

void POSIXSignalInputSignal.Configuration.identifier.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF1A4D0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t POSIXSignalInputSignal.Configuration.includedSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t POSIXSignalInputSignal.Configuration.includedSignals.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*POSIXSignalInputSignal.Configuration.includedSignals.modify())()
{
  return nullsub_1;
}

uint64_t POSIXSignalInputSignal.Configuration.init(includedSignals:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static POSIXSignalInputSignal.Configuration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_23DEA248C(*a1, *a2);
}

uint64_t POSIXSignalInputSignal.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23DEA8534(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t POSIXSignalInputSignal.Configuration.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DEA8534((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DEE4E38(uint64_t *a1, uint64_t *a2)
{
  return sub_23DEA248C(*a1, *a2);
}

void sub_23DEE4E44(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000023DF1A4D0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_23DEE4E68()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DEA8534((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t sub_23DEE4EBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23DEA8534(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEE4EF4()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DEA8534((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_23DF154A8();
}

uint64_t POSIXSignalInputSignal.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[3];
  v4 = v1[4];
  v3 = v1[5];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t POSIXSignalInputSignal.observer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_23DEE4F98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  __int128 v20;
  char *v21;
  void (__cdecl *v22)(int);
  void (__cdecl *v23)(int);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t ObjectType;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[7];

  v4 = sub_23DF14D10();
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v57 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DF14D34();
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  MEMORY[0x24BDAC7A8](v7, v8);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DF14C80();
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 56);
  v49 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v60 = a1;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  *(_QWORD *)&v20 = 67109120;
  v48 = v20;
  v51 = v13;
  v21 = v57;
  while (1)
  {
    if (v17)
    {
      v32 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v33 = v32 | (v19 << 6);
      goto LABEL_28;
    }
    v34 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v34 >= v50)
      return swift_release();
    v35 = *(_QWORD *)(v49 + 8 * v34);
    ++v19;
    if (!v35)
    {
      v19 = v34 + 1;
      if (v34 + 1 >= v50)
        return swift_release();
      v35 = *(_QWORD *)(v49 + 8 * v19);
      if (!v35)
      {
        v19 = v34 + 2;
        if (v34 + 2 >= v50)
          return swift_release();
        v35 = *(_QWORD *)(v49 + 8 * v19);
        if (!v35)
          break;
      }
    }
LABEL_27:
    v17 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v19 << 6);
LABEL_28:
    v42 = *(_DWORD *)(*(_QWORD *)(v60 + 48) + 4 * v33);
    v43 = *(_QWORD *)(v61 + 72);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v43 + 40))(ObjectType, v43);
    v45 = sub_23DF14C68();
    v46 = sub_23DF1501C();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc();
      *(_DWORD *)v47 = v48;
      *(_DWORD *)(v47 + 4) = v42;
      _os_log_impl(&dword_23DE8B000, v45, v46, "Beginning observation for %d", (uint8_t *)v47, 8u);
      MEMORY[0x242648490](v47, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v53);
    v22 = (void (__cdecl *)(int))sub_23DF14C8C();
    v23 = signal(v42, v22);
    if (v23)
    {
      v24 = (uint64_t)v23;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = a2[1];
      a2[1] = 0x8000000000000000;
      sub_23DEEB608(v24, v42, isUniquelyReferenced_nonNull_native);
      a2[1] = aBlock[0];
LABEL_6:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v37 = sub_23DEA6424(v42);
    if ((v38 & 1) != 0)
    {
      v39 = v37;
      v40 = swift_isUniquelyReferenced_nonNull_native();
      v41 = a2[1];
      aBlock[0] = v41;
      a2[1] = 0x8000000000000000;
      if ((v40 & 1) == 0)
      {
        sub_23DECBC0C();
        v41 = aBlock[0];
      }
      sub_23DEA7598(v39, v41);
      a2[1] = v41;
      goto LABEL_6;
    }
LABEL_7:
    sub_23DE90F5C(0, (unint64_t *)&qword_25432D9D0);
    v26 = sub_23DF15094();
    swift_unknownObjectRetain();
    v27 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = *a2;
    *a2 = 0x8000000000000000;
    sub_23DEEB4D4(v26, v42, v27);
    *a2 = aBlock[0];
    swift_bridgeObjectRelease();
    swift_getObjectType();
    v28 = swift_allocObject();
    swift_weakInit();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v28;
    *(_DWORD *)(v29 + 24) = v42;
    aBlock[4] = sub_23DEEC99C;
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23DE9F35C;
    aBlock[3] = &block_descriptor_10;
    v30 = _Block_copy(aBlock);
    swift_retain();
    v31 = v54;
    sub_23DE9F388();
    sub_23DE9F38C();
    sub_23DF150A0();
    _Block_release(v30);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v56);
    swift_release();
    swift_release();
    sub_23DF150C4();
    result = swift_unknownObjectRelease();
    v13 = v51;
  }
  v36 = v34 + 3;
  if (v36 >= v50)
    return swift_release();
  v35 = *(_QWORD *)(v49 + 8 * v36);
  if (v35)
  {
    v19 = v36;
    goto LABEL_27;
  }
  while (1)
  {
    v19 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v19 >= v50)
      return swift_release();
    v35 = *(_QWORD *)(v49 + 8 * v19);
    ++v36;
    if (v35)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23DEE54D8(uint64_t a1, Swift::Int32 a2)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    POSIXSignalInputSignal.received(signal:)(a2);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall POSIXSignalInputSignal.received(signal:)(Swift::Int32 signal)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  double *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[10];
  p_os_unfair_lock_opaque = (double *)&v4[4]._os_unfair_lock_opaque;
  v6 = v4 + 10;
  os_unfair_lock_lock(v4 + 10);
  sub_23DEE5BC8(p_os_unfair_lock_opaque, signal, (uint64_t)v1, &v14);
  os_unfair_lock_unlock(v6);
  v7 = v14;
  if (v14)
  {
    v8 = v1[7];
    ObjectType = swift_getObjectType();
    v14 = v7;
    v13 = v1;
    v10 = *(void (**)(uint64_t *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
    v12 = sub_23DEA068C(&qword_25432D680, v11, (uint64_t (*)(uint64_t))type metadata accessor for POSIXSignalInputSignal, (uint64_t)&protocol conformance descriptor for POSIXSignalInputSignal);
    v10(&v14, &v13, v3, v12, ObjectType, v8);
    swift_bridgeObjectRelease();
  }
}

uint64_t POSIXSignalInputSignal.beginObservation(from:configurations:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  void (*v13)(uint64_t *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v3 = *v2;
  v4 = MEMORY[0x24BEE4B08];
  v18 = MEMORY[0x24BEE4B08];
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v7 = swift_bridgeObjectRetain();
      sub_23DEE5740(v7);
    }
    swift_bridgeObjectRelease();
    v4 = v18;
  }
  v8 = v2[10];
  v9 = (os_unfair_lock_s *)(v8 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 40));
  sub_23DEE4F98(v4, (_QWORD *)(v8 + 16));
  v10 = *(_QWORD *)(v8 + 32);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v9);
  swift_bridgeObjectRelease();
  v11 = v2[7];
  ObjectType = swift_getObjectType();
  v17 = v2;
  v18 = v10;
  v13 = *(void (**)(uint64_t *, _QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8);
  v15 = sub_23DEA068C(&qword_25432D680, v14, (uint64_t (*)(uint64_t))type metadata accessor for POSIXSignalInputSignal, (uint64_t)&protocol conformance descriptor for POSIXSignalInputSignal);
  v13(&v18, &v17, v3, v15, ObjectType, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEE5740(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = sub_23DEE6600(&v13, *(unsigned int *)(*(_QWORD *)(v1 + 48) + 4 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23DEE5888(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_23DEE6700(&v16, v11, v12);
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release();
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall POSIXSignalInputSignal.stopObservation()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  unint64_t *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 80);
  p_os_unfair_lock_opaque = (unint64_t *)&v1[4]._os_unfair_lock_opaque;
  v3 = v1 + 10;
  os_unfair_lock_lock(v1 + 10);
  sub_23DEE5A44(p_os_unfair_lock_opaque);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_23DEE5A44(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v2 = sub_23DE948FC(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  *a1 = v2;
  v3 = a1[1];
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v13 >= v8)
      goto LABEL_21;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_21;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_21;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    result = (uint64_t)signal(*(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v12), *(void (__cdecl **)(int))(*(_QWORD *)(v3 + 56) + 8 * v12));
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_21:
    swift_release();
    v16 = sub_23DE94A08(MEMORY[0x24BEE4AF8]);
    result = swift_bridgeObjectRelease();
    a1[1] = v16;
    return result;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_21;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

unint64_t sub_23DEE5BC8@<X0>(double *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  char *v14;
  char v15;
  double Current;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t ObjectType;
  NSObject *v20;
  os_log_type_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  double v25;

  v9 = sub_23DF14C80();
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (result = sub_23DEA6424(a2), (v15 & 1) != 0))
  {
    Current = CFAbsoluteTimeGetCurrent();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = a1[2];
    a1[2] = -0.0;
    sub_23DEEAB18(a2, isUniquelyReferenced_nonNull_native, Current);
    a1[2] = v25;
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(a3 + 72);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v18 + 40))(ObjectType, v18);
    v20 = sub_23DF14C68();
    v21 = sub_23DF1501C();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (_DWORD *)swift_slowAlloc();
      v24 = v4;
      v23 = v22;
      *v22 = 67109376;
      LODWORD(v25) = a2;
      sub_23DF15100();
      *((_WORD *)v23 + 4) = 2048;
      v25 = Current;
      sub_23DF15100();
      _os_log_impl(&dword_23DE8B000, v20, v21, "Caught signal %d at %f", (uint8_t *)v23, 0x12u);
      MEMORY[0x242648490](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    *a4 = *((_QWORD *)a1 + 2);
    return swift_bridgeObjectRetain();
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

_QWORD *POSIXSignalInputSignal.init(context:observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a3;
  v25 = a4;
  v22 = a1;
  v23 = a2;
  v5 = sub_23DF1504C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DF15040();
  MEMORY[0x24BDAC7A8](v10, v11);
  v12 = sub_23DF14D34();
  MEMORY[0x24BDAC7A8](v12, v13);
  v4[2] = 0xD000000000000016;
  v4[3] = 0x800000023DF1A4D0;
  v4[4] = 0;
  v4[5] = 0;
  v14 = MEMORY[0x24BEE4AF8];
  v15 = sub_23DE948FC(MEMORY[0x24BEE4AF8]);
  v16 = sub_23DE94A08(v14);
  sub_23DEEC210();
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v17 + 32) = MEMORY[0x24BEE4B00];
  v4[10] = v17;
  sub_23DE90F5C(0, (unint64_t *)&qword_25432C220);
  sub_23DF14D28();
  v26 = v14;
  sub_23DEA068C((unint64_t *)&qword_25432D9B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  sub_23DEEC26C();
  sub_23DEA068C((unint64_t *)&qword_25432D960, 255, (uint64_t (*)(uint64_t))sub_23DEEC26C, MEMORY[0x24BEE12C8]);
  sub_23DF15148();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x24BEE5750], v5);
  v4[11] = sub_23DF15064();
  v18 = v23;
  v4[8] = v22;
  v4[9] = v18;
  v19 = v25;
  v4[6] = v24;
  v4[7] = v19;
  return v4;
}

uint64_t POSIXSignalInputSignal.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t POSIXSignalInputSignal.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_23DEE60C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DEE60F4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_23DEE611C(uint64_t a1, uint64_t a2)
{
  return POSIXSignalInputSignal.beginObservation(from:configurations:)(a1, a2);
}

void sub_23DEE613C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  unint64_t *p_os_unfair_lock_opaque;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 80);
  p_os_unfair_lock_opaque = (unint64_t *)&v1[4]._os_unfair_lock_opaque;
  v3 = v1 + 10;
  os_unfair_lock_lock(v1 + 10);
  sub_23DEE5A44(p_os_unfair_lock_opaque);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_23DEE6190()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 40))
  {
    v2 = *(_QWORD *)(v1 + 32);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_23DEE61DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  __int128 v13;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;

  v3 = v2;
  v6 = *v2;
  sub_23DF15478();
  __swift_project_boxed_opaque_existential_1((_QWORD *)a2, *(_QWORD *)(a2 + 24));
  swift_bridgeObjectRetain();
  sub_23DF14DC4();
  v7 = sub_23DF154A8();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      sub_23DEA8704(*(_QWORD *)(v6 + 48) + 40 * v9, (uint64_t)v16);
      v11 = v17;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      LOBYTE(v11) = sub_23DEB4944(a2, v11);
      sub_23DEA8740((uint64_t)v16);
      if ((v11 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_23DEA8740(a2);
    sub_23DEA8704(*(_QWORD *)(*v3 + 48) + 40 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23DEA8704(a2, (uint64_t)v16);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DEE81A0((uint64_t)v16, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_23DEE639C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = sub_23DF14C50();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  sub_23DEA068C(&qword_25432E0C0, 255, v12, MEMORY[0x24BDCF2A8]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = sub_23DF14DB8();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      sub_23DEA068C(&qword_25432E0C8, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2C0]);
      v22 = sub_23DF14DDC();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DEE8358((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

uint64_t sub_23DEE6600(_DWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x242647EB4](*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DEE85C4(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_23DEE6700(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  v8 = sub_23DF154A8();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23DF15400() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23DF15400() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_23DEE86E8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23DEE68AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;

  v10 = *v5;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  v11 = sub_23DF154A8();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(v10 + 48);
    v15 = (_QWORD *)(v14 + 32 * v13);
    v16 = *v15 == a2 && v15[1] == a3;
    if (v16 || (sub_23DF15400() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = (uint64_t *)(*(_QWORD *)(*v5 + 48) + 32 * v13);
      v18 = v17[1];
      v20 = v17[2];
      v19 = v17[3];
      *a1 = *v17;
      a1[1] = v18;
      a1[2] = v20;
      a1[3] = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    v22 = ~v12;
    while (1)
    {
      v13 = (v13 + 1) & v22;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        break;
      v23 = (_QWORD *)(v14 + 32 * v13);
      v24 = *v23 == a2 && v23[1] == a3;
      if (v24 || (sub_23DF15400() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27 = *v5;
  *v5 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DEE8880(a2, a3, a4, a5, v13, isUniquelyReferenced_nonNull_native);
  *v5 = v27;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  result = 1;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t sub_23DEE6AA0(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = sub_23DF14BA8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, v12, MEMORY[0x24BDCDAF0]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = sub_23DF14DB8();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      sub_23DEA068C(qword_256D0EB40, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
      v22 = sub_23DF14DDC();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DEE8A3C((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

uint64_t sub_23DEE6D04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *v4;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  sub_23DF15484();
  v10 = sub_23DF154A8();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v9 + 48);
    while (1)
    {
      v15 = (_QWORD *)(v14 + 24 * v12);
      v16 = v15[2];
      v17 = *v15 == a2 && v15[1] == a3;
      if ((v17 || (sub_23DF15400() & 1) != 0) && v16 == a4)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = (uint64_t *)(*(_QWORD *)(*v4 + 48) + 24 * v12);
    v22 = *v20;
    v21 = v20[1];
    v23 = v20[2];
    *a1 = v22;
    a1[1] = v21;
    a1[2] = v23;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v4;
    *v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_23DEE8CA8(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *v4 = v24;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    result = 1;
    a1[2] = a4;
  }
  return result;
}

uint64_t sub_23DEE6EE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v1 = *v0;
  sub_23DEDAE1C(0, &qword_25432DA00, (uint64_t (*)(void))sub_23DECEC84, (uint64_t)&type metadata for Orchestrator.AnyConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = sub_23DF1516C();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v31 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v30 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v14 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v15 = v14 | (v9 << 6);
      }
      else
      {
        v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v30)
          goto LABEL_33;
        v17 = v31[v16];
        ++v9;
        if (!v17)
        {
          v9 = v16 + 1;
          if (v16 + 1 >= v30)
            goto LABEL_33;
          v17 = v31[v9];
          if (!v17)
          {
            v9 = v16 + 2;
            if (v16 + 2 >= v30)
              goto LABEL_33;
            v17 = v31[v9];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v30)
              {
LABEL_33:
                swift_release();
                v29 = 1 << *(_BYTE *)(v1 + 32);
                if (v29 > 63)
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v29;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  v9 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v9 >= v30)
                    goto LABEL_33;
                  v17 = v31[v9];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v9 = v18;
            }
          }
        }
LABEL_23:
        v6 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v9 << 6);
      }
      v19 = *(_QWORD *)(v1 + 48) + 40 * v15;
      v20 = *(_QWORD *)(v19 + 32);
      v21 = *(_OWORD *)(v19 + 16);
      v32 = *(_OWORD *)v19;
      v33 = v21;
      v34 = v20;
      sub_23DF15478();
      __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
      sub_23DF14DC4();
      result = sub_23DF154A8();
      v22 = -1 << *(_BYTE *)(v3 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v7 + 8 * (v23 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v7 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v7 + 8 * v24);
        }
        while (v28 == -1);
        v10 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      v11 = *(_QWORD *)(v3 + 48) + 40 * v10;
      v12 = v32;
      v13 = v33;
      *(_QWORD *)(v11 + 32) = v34;
      *(_OWORD *)v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

uint64_t sub_23DEE7220()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  sub_23DEEC9C0(0, &qword_256D0F968);
  result = sub_23DF1516C();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
      result = MEMORY[0x242647EB4](*(_QWORD *)(v4 + 40), v18, 4);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DEE74B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_23DEEC9C0(0, &qword_25432DA08);
  v3 = sub_23DF1516C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_23DF15478();
      sub_23DF14E3C();
      result = sub_23DF154A8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DEE77A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v1 = v0;
  v2 = *v0;
  sub_23DEDAE1C(0, (unint64_t *)&qword_25432E2D0, (uint64_t (*)(void))sub_23DE95570, (uint64_t)&type metadata for InputSignalIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_23DF1516C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_33;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_33;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_33;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v32)
                    goto LABEL_33;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = v2;
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
      v20 = *v19;
      v21 = v19[1];
      v23 = v19[2];
      v22 = v19[3];
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      result = sub_23DF154A8();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
      *v12 = v20;
      v12[1] = v21;
      v12[2] = v23;
      v12[3] = v22;
      ++*(_QWORD *)(v4 + 16);
      v2 = v18;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DEE7ADC(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  unint64_t *v49;
  uint64_t v50;

  v10 = v5;
  v11 = a2(0);
  v47 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v43 - v13;
  v15 = *v5;
  v48 = a2;
  v49 = a4;
  v50 = a5;
  sub_23DEECA08(0, a3, a2, a4, a5);
  v16 = sub_23DF1516C();
  v17 = v16;
  if (*(_QWORD *)(v15 + 16))
  {
    v18 = 1 << *(_BYTE *)(v15 + 32);
    v19 = *(_QWORD *)(v15 + 56);
    v46 = (_QWORD *)(v15 + 56);
    if (v18 < 64)
      v20 = ~(-1 << v18);
    else
      v20 = -1;
    v21 = v20 & v19;
    v44 = v5;
    v45 = (unint64_t)(v18 + 63) >> 6;
    v22 = v16 + 56;
    result = swift_retain();
    v24 = 0;
    while (1)
    {
      if (v21)
      {
        v26 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        v27 = v26 | (v24 << 6);
      }
      else
      {
        v28 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v28 >= v45)
          goto LABEL_33;
        v29 = v46[v28];
        ++v24;
        if (!v29)
        {
          v24 = v28 + 1;
          if (v28 + 1 >= v45)
            goto LABEL_33;
          v29 = v46[v24];
          if (!v29)
          {
            v24 = v28 + 2;
            if (v28 + 2 >= v45)
              goto LABEL_33;
            v29 = v46[v24];
            if (!v29)
            {
              v30 = v28 + 3;
              if (v30 >= v45)
              {
LABEL_33:
                swift_release();
                v10 = v44;
                v42 = 1 << *(_BYTE *)(v15 + 32);
                if (v42 > 63)
                  bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v46 = -1 << v42;
                *(_QWORD *)(v15 + 16) = 0;
                break;
              }
              v29 = v46[v30];
              if (!v29)
              {
                while (1)
                {
                  v24 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_39;
                  if (v24 >= v45)
                    goto LABEL_33;
                  v29 = v46[v24];
                  ++v30;
                  if (v29)
                    goto LABEL_23;
                }
              }
              v24 = v30;
            }
          }
        }
LABEL_23:
        v21 = (v29 - 1) & v29;
        v27 = __clz(__rbit64(v29)) + (v24 << 6);
      }
      v31 = v15;
      v32 = *(_QWORD *)(v15 + 48);
      v33 = *(_QWORD *)(v47 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 32);
      v34(v14, v32 + v33 * v27, v11);
      sub_23DEA068C(v49, 255, v48, v50);
      result = sub_23DF14DB8();
      v35 = -1 << *(_BYTE *)(v17 + 32);
      v36 = result & ~v35;
      v37 = v36 >> 6;
      if (((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6))) != 0)
      {
        v25 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v38 = 0;
        v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v40 = v37 == v39;
          if (v37 == v39)
            v37 = 0;
          v38 |= v40;
          v41 = *(_QWORD *)(v22 + 8 * v37);
        }
        while (v41 == -1);
        v25 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v34)(*(_QWORD *)(v17 + 48) + v25 * v33, v14, v11);
      ++*(_QWORD *)(v17 + 16);
      v15 = v31;
    }
  }
  result = swift_release();
  *v10 = v17;
  return result;
}

uint64_t sub_23DEE7E5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v1 = v0;
  v2 = *v0;
  sub_23DEDAE1C(0, (unint64_t *)&unk_256D0F970, (uint64_t (*)(void))sub_23DECE9BC, (uint64_t)&type metadata for WorkPlanIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_23DF1516C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v32 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v31 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31)
          goto LABEL_33;
        v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_33;
          v16 = v32[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v31)
              goto LABEL_33;
            v16 = v32[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v30 = 1 << *(_BYTE *)(v2 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v31)
                    goto LABEL_33;
                  v16 = v32[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = v2;
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 24 * v14);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      sub_23DF15478();
      swift_bridgeObjectRetain();
      sub_23DF14E3C();
      swift_bridgeObjectRelease();
      sub_23DF15484();
      result = sub_23DF154A8();
      v23 = -1 << *(_BYTE *)(v4 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 24 * v11);
      *v12 = v20;
      v12[1] = v21;
      v12[2] = v22;
      ++*(_QWORD *)(v4 + 16);
      v2 = v18;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DEE81A0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23DEE6EE0();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_23DEE8E60();
      goto LABEL_12;
    }
    sub_23DEE9998();
  }
  v9 = *v3;
  sub_23DF15478();
  __swift_project_boxed_opaque_existential_1((_QWORD *)v6, *(_QWORD *)(v6 + 24));
  sub_23DF14DC4();
  result = sub_23DF154A8();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v10;
    do
    {
      sub_23DEA8704(*(_QWORD *)(v9 + 48) + 40 * a2, (uint64_t)v20);
      v12 = v21;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      LOBYTE(v12) = sub_23DEB4944(v6, v12);
      result = sub_23DEA8740((uint64_t)v20);
      if ((v12 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v11;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v14 = *(_QWORD *)(v13 + 48) + 40 * a2;
  v15 = *(_OWORD *)v6;
  v16 = *(_OWORD *)(v6 + 16);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v6 + 32);
  *(_OWORD *)v14 = v15;
  *(_OWORD *)(v14 + 16) = v16;
  v17 = *(_QWORD *)(v13 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v13 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23DF15418();
  __break(1u);
  return result;
}

uint64_t sub_23DEE8358(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = a1;
  v6 = sub_23DF14C50();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_23DEE7ADC(v13, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], &qword_256D0F980, &qword_25432E0C0, MEMORY[0x24BDCF2A8]);
  }
  else
  {
    if (v12 > v11)
    {
      sub_23DEE9590((uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], &qword_256D0F980, &qword_25432E0C0, MEMORY[0x24BDCF2A8]);
      goto LABEL_12;
    }
    sub_23DEEA4D4(v13, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], &qword_256D0F980, &qword_25432E0C0, MEMORY[0x24BDCF2A8]);
  }
  v14 = *v3;
  sub_23DEA068C(&qword_25432E0C0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
  v15 = sub_23DF14DB8();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v10, *(_QWORD *)(v14 + 48) + v18 * a2, v6);
      sub_23DEA068C(&qword_25432E0C8, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2C0]);
      v20 = sub_23DF14DDC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v20 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = v28;
  v22 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v22 + 48) + *(_QWORD *)(v7 + 72) * a2, v21, v6);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23DF15418();
  __break(1u);
  return result;
}

uint64_t sub_23DEE85C4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_23DEE7220();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_23DEE9048();
      goto LABEL_14;
    }
    sub_23DEE9C9C();
  }
  v8 = *v3;
  result = MEMORY[0x242647EB4](*(_QWORD *)(*v3 + 40), v5, 4);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      result = sub_23DF15418();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_DWORD *)(v10 + 4 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v12 + 48) + 4 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_23DEE86E8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23DEE74B8();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23DEE91F0();
      goto LABEL_22;
    }
    sub_23DEE9F14();
  }
  v11 = *v4;
  sub_23DF15478();
  sub_23DF14E3C();
  result = sub_23DF154A8();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23DF15400(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23DF15418();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23DF15400();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_23DEE8880(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v7 = v6;
  v12 = result;
  v13 = *(_QWORD *)(*v6 + 16);
  v14 = *(_QWORD *)(*v6 + 24);
  if (v14 > v13 && (a6 & 1) != 0)
    goto LABEL_22;
  if ((a6 & 1) != 0)
  {
    sub_23DEE77A8();
  }
  else
  {
    if (v14 > v13)
    {
      result = (uint64_t)sub_23DEE93B4();
      goto LABEL_22;
    }
    sub_23DEEA1D4();
  }
  v15 = *v6;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  result = sub_23DF154A8();
  v16 = -1 << *(_BYTE *)(v15 + 32);
  a5 = result & ~v16;
  v17 = v15 + 56;
  if (((*(_QWORD *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v18 = *(_QWORD *)(v15 + 48);
    v19 = (_QWORD *)(v18 + 32 * a5);
    v20 = *v19 == v12 && v19[1] == a2;
    if (v20 || (result = sub_23DF15400(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23DF15418();
      __break(1u);
    }
    else
    {
      v21 = ~v16;
      while (1)
      {
        a5 = (a5 + 1) & v21;
        if (((*(_QWORD *)(v17 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
          break;
        v22 = (_QWORD *)(v18 + 32 * a5);
        if (*v22 != v12 || v22[1] != a2)
        {
          result = sub_23DF15400();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v7;
  *(_QWORD *)(*v7 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v25 = (uint64_t *)(*(_QWORD *)(v24 + 48) + 32 * a5);
  *v25 = v12;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
  return result;
}

uint64_t sub_23DEE8A3C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = a1;
  v6 = sub_23DF14BA8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_23DEE7ADC(v13, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], &qword_256D0F988, (unint64_t *)&unk_256D0E410, MEMORY[0x24BDCDAF0]);
  }
  else
  {
    if (v12 > v11)
    {
      sub_23DEE9590((uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], &qword_256D0F988, (unint64_t *)&unk_256D0E410, MEMORY[0x24BDCDAF0]);
      goto LABEL_12;
    }
    sub_23DEEA4D4(v13, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], &qword_256D0F988, (unint64_t *)&unk_256D0E410, MEMORY[0x24BDCDAF0]);
  }
  v14 = *v3;
  sub_23DEA068C((unint64_t *)&unk_256D0E410, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  v15 = sub_23DF14DB8();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v10, *(_QWORD *)(v14 + 48) + v18 * a2, v6);
      sub_23DEA068C(qword_256D0EB40, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
      v20 = sub_23DF14DDC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v20 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = v28;
  v22 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v22 + 48) + *(_QWORD *)(v7 + 72) * a2, v21, v6);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23DF15418();
  __break(1u);
  return result;
}

uint64_t sub_23DEE8CA8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v6 = v5;
  v10 = result;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0)
    goto LABEL_18;
  if ((a5 & 1) != 0)
  {
    sub_23DEE7E5C();
  }
  else
  {
    if (v12 > v11)
    {
      result = (uint64_t)sub_23DEE97C0();
      goto LABEL_18;
    }
    sub_23DEEA810();
  }
  v13 = *v5;
  sub_23DF15478();
  swift_bridgeObjectRetain();
  sub_23DF14E3C();
  swift_bridgeObjectRelease();
  sub_23DF15484();
  result = sub_23DF154A8();
  v14 = -1 << *(_BYTE *)(v13 + 32);
  a4 = result & ~v14;
  v15 = v13 + 56;
  if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v13 + 48);
    do
    {
      v18 = (uint64_t *)(v17 + 24 * a4);
      result = *v18;
      v19 = v18[2];
      v20 = *v18 == v10 && v18[1] == a2;
      if (v20 || (result = sub_23DF15400(), (result & 1) != 0))
      {
        if (v19 == a3)
          goto LABEL_21;
      }
      a4 = (a4 + 1) & v16;
    }
    while (((*(_QWORD *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_18:
  v21 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v22 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 24 * a4);
  *v22 = v10;
  v22[1] = a2;
  v22[2] = a3;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_21:
  result = sub_23DF15418();
  __break(1u);
  return result;
}

void *sub_23DEE8E60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_23DEDAE1C(0, &qword_25432DA00, (uint64_t (*)(void))sub_23DECEC84, (uint64_t)&type metadata for Orchestrator.AnyConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = *v0;
  v3 = sub_23DF15160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_23DEA8704(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DEE9048()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_23DEEC9C0(0, &qword_256D0F968);
  v2 = *v0;
  v3 = sub_23DF15160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DEE91F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DEEC9C0(0, &qword_25432DA08);
  v2 = *v0;
  v3 = sub_23DF15160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DEE93B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_23DEDAE1C(0, (unint64_t *)&qword_25432E2D0, (uint64_t (*)(void))sub_23DE95570, (uint64_t)&type metadata for InputSignalIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = *v0;
  v3 = sub_23DF15160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v20 = v17[2];
    v19 = v17[3];
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    v21[2] = v20;
    v21[3] = v19;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DEE9590(uint64_t (*a1)(uint64_t), unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  uint64_t v18;
  unint64_t v19;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v9 = a1(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v32 - v12;
  sub_23DEECA08(0, a2, a1, a3, a4);
  v33 = v4;
  v14 = *v4;
  v15 = sub_23DF15160();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v33 = v16;
    return result;
  }
  result = (void *)(v15 + 56);
  v18 = v14 + 56;
  v19 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v14 || (unint64_t)result >= v14 + 56 + 8 * v19)
    result = memmove(result, (const void *)(v14 + 56), 8 * v19);
  v21 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 + 16);
  v22 = 1 << *(_BYTE *)(v14 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v14 + 56);
  v25 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v21 << 6);
      goto LABEL_12;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v25)
      goto LABEL_28;
    v30 = *(_QWORD *)(v18 + 8 * v29);
    ++v21;
    if (!v30)
    {
      v21 = v29 + 1;
      if (v29 + 1 >= v25)
        goto LABEL_28;
      v30 = *(_QWORD *)(v18 + 8 * v21);
      if (!v30)
      {
        v21 = v29 + 2;
        if (v29 + 2 >= v25)
          goto LABEL_28;
        v30 = *(_QWORD *)(v18 + 8 * v21);
        if (!v30)
          break;
      }
    }
LABEL_27:
    v24 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v21 << 6);
LABEL_12:
    v28 = *(_QWORD *)(v10 + 72) * v27;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v13, *(_QWORD *)(v14 + 48) + v28, v9);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v16 + 48) + v28, v13, v9);
  }
  v31 = v29 + 3;
  if (v31 >= v25)
    goto LABEL_28;
  v30 = *(_QWORD *)(v18 + 8 * v31);
  if (v30)
  {
    v21 = v31;
    goto LABEL_27;
  }
  while (1)
  {
    v21 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v21 >= v25)
      goto LABEL_28;
    v30 = *(_QWORD *)(v18 + 8 * v21);
    ++v31;
    if (v30)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DEE97C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_23DEDAE1C(0, (unint64_t *)&unk_256D0F970, (uint64_t (*)(void))sub_23DECE9BC, (uint64_t)&type metadata for WorkPlanIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = *v0;
  v3 = sub_23DF15160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = v17[2];
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v21[2] = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23DEE9998()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v1 = *v0;
  sub_23DEDAE1C(0, &qword_25432DA00, (uint64_t (*)(void))sub_23DECEC84, (uint64_t)&type metadata for Orchestrator.AnyConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = sub_23DF1516C();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v26 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v27 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v14 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_24;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v27)
      goto LABEL_33;
    v17 = *(_QWORD *)(v26 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v27)
        goto LABEL_33;
      v17 = *(_QWORD *)(v26 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v27)
          goto LABEL_33;
        v17 = *(_QWORD *)(v26 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_24:
    sub_23DEA8704(*(_QWORD *)(v1 + 48) + 40 * v15, (uint64_t)&v28);
    sub_23DF15478();
    __swift_project_boxed_opaque_existential_1(&v28, *((uint64_t *)&v29 + 1));
    sub_23DF14DC4();
    result = sub_23DF154A8();
    v19 = -1 << *(_BYTE *)(v3 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v7 + 8 * (v20 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v7 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v7 + 8 * v21);
      }
      while (v25 == -1);
      v10 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = *(_QWORD *)(v3 + 48) + 40 * v10;
    v12 = v28;
    v13 = v29;
    *(_QWORD *)(v11 + 32) = v30;
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    ++*(_QWORD *)(v3 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v26 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v27)
      goto LABEL_33;
    v17 = *(_QWORD *)(v26 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DEE9C9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_23DEEC9C0(0, &qword_256D0F968);
  result = sub_23DF1516C();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    result = MEMORY[0x242647EB4](*(_QWORD *)(v4 + 40), v18, 4);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DEE9F14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23DEEC9C0(0, &qword_25432DA08);
  v3 = sub_23DF1516C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_23DF15478();
    swift_bridgeObjectRetain();
    sub_23DF14E3C();
    result = sub_23DF154A8();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DEEA1D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v1 = v0;
  v2 = *v0;
  sub_23DEDAE1C(0, (unint64_t *)&qword_25432E2D0, (uint64_t (*)(void))sub_23DE95570, (uint64_t)&type metadata for InputSignalIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_23DF1516C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v31)
      goto LABEL_33;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_33;
      v16 = *(_QWORD *)(v30 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_33;
        v16 = *(_QWORD *)(v30 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v22 = v18[2];
    v21 = v18[3];
    sub_23DF15478();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    result = sub_23DF154A8();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
    *v12 = v19;
    v12[1] = v20;
    v12[2] = v22;
    v12[3] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v30 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v31)
      goto LABEL_33;
    v16 = *(_QWORD *)(v30 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DEEA4D4(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t (*v43)(uint64_t);
  unint64_t *v44;
  uint64_t v45;

  v10 = v5;
  v11 = a2(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v40 - v14;
  v16 = *v5;
  v43 = a2;
  v44 = a4;
  v45 = a5;
  sub_23DEECA08(0, a3, a2, a4, a5);
  v17 = sub_23DF1516C();
  v18 = v17;
  if (!*(_QWORD *)(v16 + 16))
  {
    result = swift_release();
LABEL_35:
    *v10 = v18;
    return result;
  }
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = *(_QWORD *)(v16 + 56);
  v40 = v5;
  v41 = v16 + 56;
  if (v19 < 64)
    v21 = ~(-1 << v19);
  else
    v21 = -1;
  v22 = v21 & v20;
  v42 = (unint64_t)(v19 + 63) >> 6;
  v23 = v17 + 56;
  result = swift_retain();
  v25 = 0;
  while (1)
  {
    if (v22)
    {
      v27 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v28 = v27 | (v25 << 6);
      goto LABEL_24;
    }
    v29 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v29 >= v42)
      goto LABEL_33;
    v30 = *(_QWORD *)(v41 + 8 * v29);
    ++v25;
    if (!v30)
    {
      v25 = v29 + 1;
      if (v29 + 1 >= v42)
        goto LABEL_33;
      v30 = *(_QWORD *)(v41 + 8 * v25);
      if (!v30)
      {
        v25 = v29 + 2;
        if (v29 + 2 >= v42)
          goto LABEL_33;
        v30 = *(_QWORD *)(v41 + 8 * v25);
        if (!v30)
          break;
      }
    }
LABEL_23:
    v22 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v25 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v15, *(_QWORD *)(v16 + 48) + v32 * v28, v11);
    sub_23DEA068C(v44, 255, v43, v45);
    result = sub_23DF14DB8();
    v33 = -1 << *(_BYTE *)(v18 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v23 + 8 * (v34 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v23 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v23 + 8 * v35);
      }
      while (v39 == -1);
      v26 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v18 + 48) + v26 * v32, v15, v11);
    ++*(_QWORD *)(v18 + 16);
  }
  v31 = v29 + 3;
  if (v31 >= v42)
  {
LABEL_33:
    result = swift_release_n();
    v10 = v40;
    goto LABEL_35;
  }
  v30 = *(_QWORD *)(v41 + 8 * v31);
  if (v30)
  {
    v25 = v31;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v25 >= v42)
      goto LABEL_33;
    v30 = *(_QWORD *)(v41 + 8 * v25);
    ++v31;
    if (v30)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DEEA810()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;

  v1 = *v0;
  sub_23DEDAE1C(0, (unint64_t *)&unk_256D0F970, (uint64_t (*)(void))sub_23DECE9BC, (uint64_t)&type metadata for WorkPlanIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = sub_23DF1516C();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v28 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v29 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_33;
      v15 = *(_QWORD *)(v28 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_33;
        v15 = *(_QWORD *)(v28 + 8 * v9);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 24 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    sub_23DF15478();
    swift_bridgeObjectRetain_n();
    sub_23DF14E3C();
    swift_bridgeObjectRelease();
    sub_23DF15484();
    result = sub_23DF154A8();
    v21 = -1 << *(_BYTE *)(v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 24 * v10);
    *v11 = v18;
    v11[1] = v19;
    v11[2] = v20;
    ++*(_QWORD *)(v3 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DEEAB18(unsigned int a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_23DEA6424(a1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_23DECA4C8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a1;
    *(double *)(v16[7] + 8 * v10) = a3;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_23DEC7170(result, a2 & 1);
  result = sub_23DEA6424(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEAC3C(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_23DE946E8(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_23DECA63C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a1;
    v20[1] = a2;
    *(double *)(v18[7] + 8 * v12) = a4;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23DEC7408(result, a3 & 1);
  result = sub_23DE946E8(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEAD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v7 = v6;
  v14 = *v6;
  v16 = sub_23DEA6458(a2, a3, a4, a5);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_23DECAAD4();
LABEL_7:
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_release();
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 32 * v16);
    *v27 = a2;
    v27[1] = a3;
    v27[2] = a4;
    v27[3] = a5;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v28 = v22[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23DEC7AF8(v19, a6 & 1);
  v25 = sub_23DEA6458(a2, a3, a4, a5);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEAF1C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v4 = (_QWORD **)v3;
  v8 = sub_23DF14BA8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_23DEA63B4(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v4;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = v21[7];
        v23 = sub_23DF14BF0();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v15, a1, v23);
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_23DECA7E4();
      goto LABEL_7;
    }
    sub_23DEC76F0(v18, a3 & 1);
    v25 = sub_23DEA63B4(a2);
    if ((v19 & 1) == (v26 & 1))
    {
      v15 = v25;
      v21 = *v4;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return sub_23DEEBA00(v15, (uint64_t)v12, a1, v21);
    }
  }
  result = sub_23DF15424();
  __break(1u);
  return result;
}

void sub_23DEEB0A4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_23DF14BA8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_23DEA63B4(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_23DECB0AC();
    goto LABEL_7;
  }
  sub_23DEC84CC(v18, a3 & 1);
  v23 = sub_23DEA63B4(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    sub_23DF15424();
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  sub_23DEEBAB8(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_23DEEB200(uint64_t a1, __int128 *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = v3;
  v8 = *v3;
  v10 = sub_23DEA64E4((uint64_t)a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_23DECB4CC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v21 = (_OWORD *)(v16[6] + 48 * v10);
    v22 = *a2;
    v23 = a2[2];
    v21[1] = a2[1];
    v21[2] = v23;
    *v21 = v22;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v24 = v16[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v16[2] = v26;
      return sub_23DEAEBB0((uint64_t)a2);
    }
    goto LABEL_14;
  }
  sub_23DEC8BEC(v13, a3 & 1);
  v19 = sub_23DEA64E4((uint64_t)a2);
  if ((v14 & 1) == (v20 & 1))
  {
    v10 = v19;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEB360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_23DE946E8(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_23DECB6B8();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23DEC8F7C(v17, a5 & 1);
  v23 = sub_23DE946E8(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEB4D4(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_23DEA6424(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_23DECBA5C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_unknownObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_23DEC95E8(result, a3 & 1);
  result = sub_23DEA6424(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEB608(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_23DEA6424(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_23DECBC0C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_23DEC98AC(result, a3 & 1);
  result = sub_23DEA6424(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEB730(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_23DE946E8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_23DECB890();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23DEC92C0(v15, a4 & 1);
  v21 = sub_23DE946E8(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEB88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_23DE946E8(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_23DECBF68();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_unknownObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23DEC9E74(v17, a5 & 1);
  v23 = sub_23DE946E8(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23DF15424();
  __break(1u);
  return result;
}

uint64_t sub_23DEEBA00(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_23DF14BA8();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_23DF14BF0();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_23DEEBAB8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_23DF14BA8();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_23DEEBB50(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, a2);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_23DEEC004((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      v4 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v4 = sub_23DEEC004((uint64_t)v9, v6, v4, a2);
    MEMORY[0x242648490](v9, -1, -1);
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_23DEEBCCC(uint64_t a1, uint64_t (*a2)(_QWORD, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v16)) + (v10 << 6))
  {
    result = a2(*(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * i), *(double *)(*(_QWORD *)(a1 + 56) + 8 * i));
    if ((v14 & 1) != 0)
    {
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v18 = result;
      v19 = v13;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23DF064C0(0, v26[2] + 1, 1, v26);
        v26 = (_QWORD *)result;
      }
      v21 = v26[2];
      v20 = v26[3];
      v22 = v21 + 1;
      if (v21 >= v20 >> 1)
      {
        v24 = v26[2];
        v25 = v21 + 1;
        result = (uint64_t)sub_23DF064C0((_QWORD *)(v20 > 1), v21 + 1, 1, v26);
        v21 = v24;
        v22 = v25;
        v26 = (_QWORD *)result;
      }
      v26[2] = v22;
      v23 = &v26[2 * v21];
      *((_DWORD *)v23 + 8) = v18;
      v23[5] = v19;
      if (v7)
        goto LABEL_4;
    }
LABEL_7:
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_29;
      v16 = *(_QWORD *)(v4 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_29;
        v16 = *(_QWORD *)(v4 + 8 * v10);
        if (!v16)
        {
          v10 = v15 + 3;
          if (v15 + 3 >= v8)
            goto LABEL_29;
          v16 = *(_QWORD *)(v4 + 8 * v10);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v16 - 1) & v16;
  }
  v17 = v15 + 4;
  if (v17 >= v8)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v26;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v4 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_23DEEBED4(unsigned int a1)
{
  uint64_t v1;

  return sub_23DEE4934(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_23DEEBEDC()
{
  unint64_t result;

  result = qword_256D0F848;
  if (!qword_256D0F848)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A7A8, &type metadata for POSIXSignalInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F848);
  }
  return result;
}

void sub_23DEEBF20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0F850)
  {
    v0 = sub_23DF14DAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0F850);
  }
}

uint64_t sub_23DEEBF84(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    sub_23DEEBF20();
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x2426483D0](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for POSIXSignalInputSignal()
{
  return objc_opt_self();
}

uint64_t sub_23DEEC004(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v24;

  v24 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = a4 + 56;
  while (1)
  {
    while (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v6 << 6);
      if (*(_QWORD *)(a4 + 16))
      {
LABEL_19:
        v18 = *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v14);
        result = MEMORY[0x242647EB4](*(_QWORD *)(a4 + 40), v18, 4);
        v19 = -1 << *(_BYTE *)(a4 + 32);
        v20 = result & ~v19;
        if (((*(_QWORD *)(v12 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          v21 = *(_QWORD *)(a4 + 48);
          if (*(_DWORD *)(v21 + 4 * v20) == v18)
          {
LABEL_24:
            *(unint64_t *)((char *)v24 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
            v15 = __OFADD__(v5++, 1);
            if (v15)
              goto LABEL_33;
          }
          else
          {
            v22 = ~v19;
            while (1)
            {
              v20 = (v20 + 1) & v22;
              if (((*(_QWORD *)(v12 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                break;
              if (*(_DWORD *)(v21 + 4 * v20) == v18)
                goto LABEL_24;
            }
          }
        }
      }
    }
    v15 = __OFADD__(v6++, 1);
    if (v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v6 >= v11)
      return sub_23DEFEDF4(v24, a2, v5, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    if (!v16)
      break;
LABEL_18:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v6 << 6);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_19;
  }
  v17 = v6 + 1;
  if (v6 + 1 >= v11)
    return sub_23DEFEDF4(v24, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v6 + 2;
  if (v6 + 2 >= v11)
    return sub_23DEFEDF4(v24, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v6 + 3;
  if (v6 + 3 >= v11)
    return sub_23DEFEDF4(v24, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_17:
    v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return sub_23DEFEDF4(v24, a2, v5, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

void sub_23DEEC210()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DA48)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432DA48);
  }
}

void sub_23DEEC26C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432D950)
  {
    sub_23DF15040();
    v0 = sub_23DF14F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432D950);
  }
}

unint64_t sub_23DEEC2C4()
{
  unint64_t result;

  result = qword_256D0F870;
  if (!qword_256D0F870)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Configuration, &type metadata for POSIXSignalInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F870);
  }
  return result;
}

unint64_t sub_23DEEC308(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23DEEC33C();
  a1[2] = sub_23DEEC380();
  result = sub_23DEEC3C4();
  a1[3] = result;
  return result;
}

unint64_t sub_23DEEC33C()
{
  unint64_t result;

  result = qword_256D0F8C0;
  if (!qword_256D0F8C0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Anchor, &type metadata for POSIXSignalInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F8C0);
  }
  return result;
}

unint64_t sub_23DEEC380()
{
  unint64_t result;

  result = qword_256D0F8C8;
  if (!qword_256D0F8C8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Anchor, &type metadata for POSIXSignalInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F8C8);
  }
  return result;
}

unint64_t sub_23DEEC3C4()
{
  unint64_t result;

  result = qword_256D0F8D0;
  if (!qword_256D0F8D0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Anchor, &type metadata for POSIXSignalInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F8D0);
  }
  return result;
}

unint64_t sub_23DEEC408(uint64_t a1)
{
  unint64_t result;

  result = sub_23DEEC42C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DEEC42C()
{
  unint64_t result;

  result = qword_256D0F8D8;
  if (!qword_256D0F8D8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Configuration, &type metadata for POSIXSignalInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F8D8);
  }
  return result;
}

unint64_t sub_23DEEC474()
{
  unint64_t result;

  result = qword_256D0F8E0;
  if (!qword_256D0F8E0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Configuration, &type metadata for POSIXSignalInputSignal.Configuration);
    atomic_store(result, (unint64_t *)&qword_256D0F8E0);
  }
  return result;
}

unint64_t sub_23DEEC4BC()
{
  unint64_t result;

  result = qword_256D0F8E8;
  if (!qword_256D0F8E8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for POSIXSignalInputSignal.Anchor, &type metadata for POSIXSignalInputSignal.Anchor);
    atomic_store(result, (unint64_t *)&qword_256D0F8E8);
  }
  return result;
}

uint64_t sub_23DEEC500(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23DEA068C(qword_25432E238, a2, (uint64_t (*)(uint64_t))type metadata accessor for POSIXSignalInputSignal, (uint64_t)&protocol conformance descriptor for POSIXSignalInputSignal);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for POSIXSignalInputSignal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of POSIXSignalInputSignal.__allocating_init(context:observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for POSIXSignalInputSignal.Anchor()
{
  return &type metadata for POSIXSignalInputSignal.Anchor;
}

ValueMetadata *type metadata accessor for POSIXSignalInputSignal.Configuration()
{
  return &type metadata for POSIXSignalInputSignal.Configuration;
}

uint64_t destroy for POSIXSignalInputSignal.ProtectedState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthOrchestration22POSIXSignalInputSignalC14ProtectedStateVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for POSIXSignalInputSignal.ProtectedState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for POSIXSignalInputSignal.ProtectedState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for POSIXSignalInputSignal.ProtectedState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for POSIXSignalInputSignal.ProtectedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for POSIXSignalInputSignal.ProtectedState()
{
  return &type metadata for POSIXSignalInputSignal.ProtectedState;
}

uint64_t storeEnumTagSinglePayload for POSIXSignalInputSignal.Anchor.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DEEC79C + 4 * byte_23DF1A4E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DEEC7BC + 4 * byte_23DF1A4E5[v4]))();
}

_BYTE *sub_23DEEC79C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DEEC7BC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEEC7C4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEEC7CC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEEC7D4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEEC7DC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for POSIXSignalInputSignal.Anchor.CodingKeys()
{
  return &type metadata for POSIXSignalInputSignal.Anchor.CodingKeys;
}

unint64_t sub_23DEEC7FC()
{
  unint64_t result;

  result = qword_256D0F950;
  if (!qword_256D0F950)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A780, &type metadata for POSIXSignalInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F950);
  }
  return result;
}

unint64_t sub_23DEEC844()
{
  unint64_t result;

  result = qword_256D0F958;
  if (!qword_256D0F958)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A6F0, &type metadata for POSIXSignalInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F958);
  }
  return result;
}

unint64_t sub_23DEEC88C()
{
  unint64_t result;

  result = qword_256D0F960;
  if (!qword_256D0F960)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A718, &type metadata for POSIXSignalInputSignal.Anchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F960);
  }
  return result;
}

uint64_t sub_23DEEC8D0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023DF1D660)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23DF15400();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23DEEC954()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DEEC978()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEEC99C()
{
  uint64_t v0;

  return sub_23DEE54D8(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void sub_23DEEC9C0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DF15184();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_23DEECA08(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_23DEA068C(a4, 255, a3, a5);
    v9 = sub_23DF15184();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_23DEECAA0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t MockContext.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MockContext.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC19HealthOrchestration11MockContext_logger;
  v4 = sub_23DF14C80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MockContext.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_23DF14C74();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return v4;
}

uint64_t MockContext.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DF14C74();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t MockContext.Description.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MockContext.Description.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MockContext.Description.identifier.modify())()
{
  return nullsub_1;
}

uint64_t sub_23DEECC34()
{
  return 0x696669746E656469;
}

uint64_t sub_23DEECC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DF15400();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DEECCF0()
{
  sub_23DEECE34();
  return sub_23DF154CC();
}

uint64_t sub_23DEECD18()
{
  sub_23DEECE34();
  return sub_23DF154D8();
}

uint64_t MockContext.Description.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_23DEECF9C(0, &qword_256D0F990, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEECE34();
  sub_23DF154C0();
  sub_23DF15364();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_23DEECE34()
{
  unint64_t result;

  result = qword_256D0F998;
  if (!qword_256D0F998)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1AA6C, &type metadata for MockContext.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0F998);
  }
  return result;
}

uint64_t MockContext.Description.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23DEECF9C(0, &qword_256D0F9A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v15 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEECE34();
  sub_23DF154B4();
  if (!v2)
  {
    v11 = sub_23DF15310();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *a2 = v11;
    a2[1] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_23DEECF9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DEECE34();
    v7 = a3(a1, &type metadata for MockContext.Description.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DEECFF8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return MockContext.Description.init(from:)(a1, a2);
}

uint64_t sub_23DEED00C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_23DEECF9C(0, &qword_256D0F990, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DEECE34();
  sub_23DF154C0();
  sub_23DF15364();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t MockContext.contextDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t static MockContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return sub_23DF15400();
}

uint64_t MockContext.description.getter()
{
  _QWORD v1[2];

  sub_23DF15190();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "<MockContext: ");
  swift_bridgeObjectRetain();
  sub_23DF14E60();
  swift_bridgeObjectRelease();
  sub_23DF14E60();
  return v1[0];
}

uint64_t MockContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC19HealthOrchestration11MockContext_logger;
  v2 = sub_23DF14C80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MockContext.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC19HealthOrchestration11MockContext_logger;
  v2 = sub_23DF14C80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23DEED284@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DEED290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC19HealthOrchestration11MockContext_logger;
  v4 = sub_23DF14C80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23DEED2D4()
{
  return MockContext.description.getter();
}

uint64_t sub_23DEED2F4(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16)
    && *(_QWORD *)(*(_QWORD *)a1 + 24) == *(_QWORD *)(*(_QWORD *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return sub_23DF15400();
  }
}

uint64_t (*MockContextProvider.startHandler.getter())(uint64_t, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  return sub_23DEEE018;
}

uint64_t MockContextProvider.startHandler.setter(uint64_t a1, uint64_t a2)
{
  sub_23DEEE01C(a1, a2);
  return swift_release();
}

void (*MockContextProvider.startHandler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  swift_retain();
  os_unfair_lock_unlock(v5);
  v8 = swift_allocObject();
  v3[3] = sub_23DEEE018;
  v3[4] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  return sub_23DEED478;
}

void sub_23DEED478(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    v2[5] = sub_23DEEE0C8;
    v2[6] = v6;
    v7 = *(_QWORD *)(v5 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    v9 = v2[5];
    v8 = v2[6];
    swift_release();
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 24) = v8;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    swift_release();
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v3;
    *(_QWORD *)(v10 + 24) = v4;
    v2[5] = sub_23DEEEAA0;
    v2[6] = v10;
    v11 = *(_QWORD *)(v5 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    v13 = v2[5];
    v12 = v2[6];
    swift_release();
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v12;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  }
  swift_release();
  swift_endAccess();
  free(v2);
}

uint64_t (*MockContextProvider.stopHandler.getter())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  return sub_23DECDAC0;
}

__n128 sub_23DEED630@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_23DEB32A4((uint64_t *)(v4 + 16), &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  v6 = v7;
  swift_release();
  result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_23DEED6CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *a1;
  v10 = a1[1];
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v10;
  swift_retain();
  a7(a6, v11);
  return swift_release();
}

uint64_t MockContextProvider.stopHandler.setter(uint64_t a1, uint64_t a2)
{
  sub_23DEEE0F0(a1, a2);
  return swift_release();
}

void (*MockContextProvider.stopHandler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  swift_retain();
  os_unfair_lock_unlock(v5);
  v8 = swift_allocObject();
  v3[3] = sub_23DEEEA58;
  v3[4] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  return sub_23DEED7FC;
}

void sub_23DEED7FC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    v2[5] = sub_23DE9A540;
    v2[6] = v6;
    v7 = *(_QWORD *)(v5 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    v9 = v2[5];
    v8 = v2[6];
    swift_release();
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 24) = v8;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    swift_release();
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v3;
    *(_QWORD *)(v10 + 24) = v4;
    v2[5] = sub_23DEEEAA8;
    v2[6] = v10;
    v11 = *(_QWORD *)(v5 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    v13 = v2[5];
    v12 = v2[6];
    swift_release();
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v12;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  }
  swift_release();
  swift_endAccess();
  free(v2);
}

_QWORD *(*MockContextProvider.contextHandler.getter())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  return sub_23DEEE19C;
}

__n128 sub_23DEED9B4@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 32);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_23DEB32A4((uint64_t *)(v4 + 16), &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  v6 = v7;
  swift_release();
  result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_23DEEDA50@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  type metadata accessor for MockContext();
  v5 = swift_allocObject();
  swift_bridgeObjectRetain();
  result = sub_23DF14C74();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = v5;
  return result;
}

uint64_t MockContextProvider.contextHandler.setter(uint64_t a1, uint64_t a2)
{
  sub_23DEEE1B0(a1, a2);
  return swift_release();
}

void (*MockContextProvider.contextHandler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 32);
  v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  swift_retain();
  os_unfair_lock_unlock(v5);
  v8 = swift_allocObject();
  v3[3] = sub_23DEEE19C;
  v3[4] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  return sub_23DEEDB88;
}

void sub_23DEEDB88(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    v2[5] = sub_23DEEE25C;
    v2[6] = v6;
    v7 = *(_QWORD *)(v5 + 32);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    v9 = v2[5];
    v8 = v2[6];
    swift_release();
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 24) = v8;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    swift_release();
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v3;
    *(_QWORD *)(v10 + 24) = v4;
    v2[5] = sub_23DEEE25C;
    v2[6] = v10;
    v11 = *(_QWORD *)(v5 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    v13 = v2[5];
    v12 = v2[6];
    swift_release();
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v12;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  }
  swift_release();
  swift_endAccess();
  free(v2);
}

uint64_t MockContextProvider.start(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(_QWORD *);
  _QWORD v8[2];

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  v6 = *(void (**)(_QWORD *))(v5 + 16);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  swift_release();
  v8[0] = a1;
  v8[1] = a2;
  v6(v8);
  return swift_release();
}

Swift::Void __swiftcall MockContextProvider.stop()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v2 = *(void (**)(uint64_t))(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  v3 = swift_release();
  v2(v3);
  swift_release();
}

void MockContextProvider.context(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *);
  _QWORD v7[2];
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(v5 + 16);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  if (v2)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    v7[0] = v3;
    v7[1] = v4;
    v6(&v8, v7);
    swift_release();
  }
}

uint64_t MockContextProvider.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  MockContextProvider.init()();
  return v0;
}

_QWORD *MockContextProvider.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23DEEE350(0, &qword_256D0F9A8, (void (*)(uint64_t))sub_23DEEE270);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = nullsub_1;
  *(_QWORD *)(v1 + 24) = 0;
  v0[2] = v1;
  sub_23DEEE350(0, &qword_256D0F9C0, (void (*)(uint64_t))sub_23DEEE310);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = nullsub_1;
  *(_QWORD *)(v2 + 24) = 0;
  v0[3] = v2;
  sub_23DEEE350(0, &qword_256D0F9C8, (void (*)(uint64_t))sub_23DEEE3B4);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = sub_23DEEDA50;
  *(_QWORD *)(v3 + 24) = 0;
  v0[4] = v3;
  return v0;
}

uint64_t MockContextProvider.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t MockContextProvider.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

void sub_23DEEDFD8(uint64_t *a1)
{
  MockContextProvider.context(for:)(a1);
}

uint64_t sub_23DEEDFF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEEE01C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  *(_QWORD *)(v6 + 16) = sub_23DEEEAA0;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  return swift_endAccess();
}

uint64_t sub_23DEEE0C8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_23DEEE0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  *(_QWORD *)(v6 + 16) = sub_23DEEEAA8;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  return swift_endAccess();
}

_QWORD *sub_23DEEE19C()
{
  return sub_23DEEE9CC();
}

uint64_t sub_23DEEE1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 32);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  *(_QWORD *)(v6 + 16) = sub_23DEEE25C;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  return swift_endAccess();
}

uint64_t sub_23DEEE25C@<X0>(uint64_t *a1@<X8>)
{
  return sub_23DEEEA2C(a1);
}

unint64_t sub_23DEEE270()
{
  unint64_t result;

  result = qword_256D0F9B0;
  if (!qword_256D0F9B0)
  {
    sub_23DEEE2C0();
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&qword_256D0F9B0);
  }
  return result;
}

unint64_t sub_23DEEE2C0()
{
  unint64_t result;

  result = qword_256D0F9B8;
  if (!qword_256D0F9B8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D0F9B8);
  }
  return result;
}

unint64_t sub_23DEEE310()
{
  unint64_t result;

  result = qword_25432DBC0;
  if (!qword_25432DBC0)
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&qword_25432DBC0);
  }
  return result;
}

void sub_23DEEE350(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for os_unfair_lock_s(255);
    v4 = sub_23DF151E4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DEEE3B4()
{
  unint64_t result;

  result = qword_256D0F9D0;
  if (!qword_256D0F9D0)
  {
    type metadata accessor for MockContext();
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&qword_256D0F9D0);
  }
  return result;
}

uint64_t type metadata accessor for MockContext()
{
  uint64_t result;

  result = qword_256D0FA88;
  if (!qword_256D0FA88)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23DEEE43C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_23DEEE468();
  result = sub_23DEEE4AC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_23DEEE468()
{
  unint64_t result;

  result = qword_256D0F9D8;
  if (!qword_256D0F9D8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for MockContext.Description, &type metadata for MockContext.Description);
    atomic_store(result, (unint64_t *)&qword_256D0F9D8);
  }
  return result;
}

unint64_t sub_23DEEE4AC()
{
  unint64_t result;

  result = qword_256D0F9E0;
  if (!qword_256D0F9E0)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for MockContext.Description, &type metadata for MockContext.Description);
    atomic_store(result, (unint64_t *)&qword_256D0F9E0);
  }
  return result;
}

unint64_t sub_23DEEE4F4()
{
  unint64_t result;

  result = qword_256D0F9E8;
  if (!qword_256D0F9E8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for MockContext.Description, &type metadata for MockContext.Description);
    atomic_store(result, (unint64_t *)&qword_256D0F9E8);
  }
  return result;
}

uint64_t sub_23DEEE538(uint64_t a1)
{
  uint64_t result;

  result = sub_23DEEE590(&qword_256D0FA20, (uint64_t)&protocol conformance descriptor for MockContext);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23DEEE56C()
{
  return sub_23DEEE590(&qword_256D0FA28, (uint64_t)&protocol conformance descriptor for MockContext);
}

uint64_t sub_23DEEE590(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MockContext();
    result = MEMORY[0x2426483D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DEEE5D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23DEED6CC(a1, a2, a3, a4, (uint64_t)&unk_250EB2C68, (uint64_t)sub_23DEEE018, (void (*)(uint64_t, uint64_t))sub_23DEEE01C);
}

uint64_t sub_23DEEE604(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23DEED6CC(a1, a2, a3, a4, (uint64_t)&unk_250EB2C40, (uint64_t)sub_23DEEEA58, (void (*)(uint64_t, uint64_t))sub_23DEEE0F0);
}

uint64_t sub_23DEEE634(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23DEED6CC(a1, a2, a3, a4, (uint64_t)&unk_250EB2C18, (uint64_t)sub_23DEEE19C, (void (*)(uint64_t, uint64_t))sub_23DEEE1B0);
}

uint64_t sub_23DEEE660()
{
  return type metadata accessor for MockContext();
}

uint64_t sub_23DEEE668()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DF14C80();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MockContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MockContext.__allocating_init(identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

_QWORD *initializeBufferWithCopyOfBuffer for MockContext.Description(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MockContext.Description(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MockContext.Description(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MockContext.Description(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MockContext.Description(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MockContext.Description()
{
  return &type metadata for MockContext.Description;
}

uint64_t type metadata accessor for MockContextProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for MockContextProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MockContextProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for MockContext.Description.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DEEE898 + 4 * byte_23DF1A800[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DEEE8B8 + 4 * byte_23DF1A805[v4]))();
}

_BYTE *sub_23DEEE898(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DEEE8B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEEE8C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEEE8C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DEEE8D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DEEE8D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MockContext.Description.CodingKeys()
{
  return &type metadata for MockContext.Description.CodingKeys;
}

unint64_t sub_23DEEE8F8()
{
  unint64_t result;

  result = qword_256D0FBC8;
  if (!qword_256D0FBC8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1AA44, &type metadata for MockContext.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0FBC8);
  }
  return result;
}

unint64_t sub_23DEEE940()
{
  unint64_t result;

  result = qword_256D0FBD0;
  if (!qword_256D0FBD0)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A9B4, &type metadata for MockContext.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0FBD0);
  }
  return result;
}

unint64_t sub_23DEEE988()
{
  unint64_t result;

  result = qword_256D0FBD8;
  if (!qword_256D0FBD8)
  {
    result = MEMORY[0x2426483D0](&unk_23DF1A9DC, &type metadata for MockContext.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D0FBD8);
  }
  return result;
}

_QWORD *sub_23DEEE9CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1)
    return (_QWORD *)v3;
  return result;
}

uint64_t sub_23DEEE9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[2];

  v3 = *(uint64_t (**)(_QWORD *))(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

uint64_t sub_23DEEEA2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t WorkQueue.__allocating_init(environment:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  WorkQueue.init(environment:)(a1);
  return v2;
}

uint64_t WorkQueue.enqueue(priorityThresholdOverride:barrier:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v15;

  v6 = *(os_unfair_lock_s **)(v3 + 16);
  v7 = (uint64_t *)&v6[4];
  v8 = v6 + 19;
  v9 = *a1;
  os_unfair_lock_lock(v6 + 19);
  sub_23DEF01F8(v7, a2, a3, v9, &v15);
  os_unfair_lock_unlock(v8);
  v10 = *(_QWORD *)(v15 + 16);
  if (v10)
  {
    v11 = v15 + 40;
    do
    {
      v12 = *(void (**)(uint64_t))(v11 - 8);
      v13 = swift_retain();
      v12(v13);
      swift_release();
      v11 += 16;
      --v10;
    }
    while (v10);
  }
  return swift_bridgeObjectRelease();
}

void WorkQueue.statusObserver.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3 + 19);
  sub_23DE9A5DC((uint64_t)&v3[8], a1);
  os_unfair_lock_unlock(v3 + 19);
}

uint64_t WorkQueue.statusObserver.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF30D8(a1, (uint64_t)&v3[8]);
  os_unfair_lock_unlock(v3 + 19);
  return sub_23DEF037C(a1);
}

void WorkQueue.priorityThreshold.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 76));
  *a1 = *(_BYTE *)(v3 + 72);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 76));
}

uint64_t WorkQueue.priorityThreshold.setter(char *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v11;

  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 19;
  v5 = *a1;
  os_unfair_lock_lock(v2 + 19);
  sub_23DEF0CFC(v3, v5, &v11);
  os_unfair_lock_unlock(v4);
  v6 = *(_QWORD *)(v11 + 16);
  if (v6)
  {
    v7 = v11 + 40;
    do
    {
      v8 = *(void (**)(uint64_t))(v7 - 8);
      v9 = swift_retain();
      v8(v9);
      swift_release();
      v7 += 16;
      --v6;
    }
    while (v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t WorkQueue.debugSnapshot.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 19;
  os_unfair_lock_lock(v1 + 19);
  sub_23DEF14D0(v2);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DEEED64(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  return a3(a1, *a2);
}

uint64_t sub_23DEEED88(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;

  v4 = a2;
  return a3(a1, &v4);
}

Swift::Void __swiftcall WorkQueue.enqueue(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF0090(v4, (uint64_t)a1._rawValue, &v10);
  os_unfair_lock_unlock(v5);
  v6 = *(_QWORD *)(v10 + 16);
  if (v6)
  {
    v7 = v10 + 40;
    do
    {
      v8 = *(void (**)(uint64_t))(v7 - 8);
      v9 = swift_retain();
      v8(v9);
      swift_release();
      v7 += 16;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
}

uint64_t WorkQueue.WorkSet.init(items:executorIdentifier:anchor:context:scheduleTime:onFinish:)@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v11 = *((_QWORD *)a2 + 3);
  *(_QWORD *)a8 = result;
  *(_OWORD *)(a8 + 8) = v9;
  *(_QWORD *)(a8 + 24) = v10;
  *(_QWORD *)(a8 + 32) = v11;
  *(_OWORD *)(a8 + 40) = a2[2];
  *(_QWORD *)(a8 + 56) = a3;
  *(_QWORD *)(a8 + 64) = a4;
  *(_QWORD *)(a8 + 72) = a5;
  *(double *)(a8 + 80) = a9;
  *(_QWORD *)(a8 + 88) = a6;
  *(_QWORD *)(a8 + 96) = a7;
  return result;
}

uint64_t sub_23DEEEE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v8 = sub_23DF150F4();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v13 = (char *)v26 - v12;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11, v15);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE902F4(a1, (uint64_t)&v29);
  sub_23DE90254(0, (unint64_t *)&qword_25432D878);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v18)
  {
    v19(v13, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, a2);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(a3 + 40);
    a4[3] = a2;
    a4[4] = a3;
    __swift_allocate_boxed_opaque_existential_1(a4);
    v20(v17, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a2);
  }
  else
  {
    v19(v13, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    sub_23DEABD84(0, &qword_256D0FBF0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_23DF16970;
    v29 = 0;
    v30 = 0xE000000000000000;
    sub_23DF15190();
    v27 = v29;
    v28 = v30;
    sub_23DF14E60();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(&v29, a2, a3);
    v23 = v31;
    v26[1] = v29;
    v26[2] = v30;
    swift_bridgeObjectRetain();
    sub_23DF14E60();
    v26[0] = v23;
    sub_23DF153C4();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    sub_23DF14E60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DF14E60();
    v24 = v27;
    v25 = v28;
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v25;
    sub_23DF15460();
    swift_bridgeObjectRelease();
    return sub_23DE902F4(a1, (uint64_t)a4);
  }
}

uint64_t WorkSource.nextWorkItem()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23DEEF188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_23DEEF234;
  return sub_23DF153DC();
}

uint64_t sub_23DEEF234()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23DEEF284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23DEF29B4();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v7, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a4 + 8))(sub_23DEF2A78, v13, a3, a4);
  return swift_release();
}

uint64_t sub_23DEEF378(uint64_t a1)
{
  _BYTE v2[136];

  sub_23DEAC648(a1, (uint64_t)v2);
  sub_23DEF29B4();
  return sub_23DF14F38();
}

uint64_t WorkQueue.WorkSet.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WorkQueue.WorkSet.items.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*WorkQueue.WorkSet.items.modify())()
{
  return nullsub_1;
}

uint64_t WorkQueue.WorkSet.executorIdentifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v6 = v1[5];
  v5 = v1[6];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 WorkQueue.WorkSet.executorIdentifier.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 8) = v6;
  result = v5;
  *(__n128 *)(v1 + 24) = v5;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t (*WorkQueue.WorkSet.executorIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t WorkQueue.WorkSet.anchor.getter()
{
  return swift_retain();
}

uint64_t WorkQueue.WorkSet.anchor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*WorkQueue.WorkSet.anchor.modify())()
{
  return nullsub_1;
}

uint64_t WorkQueue.WorkSet.context.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t WorkQueue.WorkSet.context.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*WorkQueue.WorkSet.context.modify())()
{
  return nullsub_1;
}

double WorkQueue.WorkSet.scheduleTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void WorkQueue.WorkSet.scheduleTime.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 80) = a1;
}

uint64_t (*WorkQueue.WorkSet.scheduleTime.modify())()
{
  return nullsub_1;
}

uint64_t sub_23DEEF58C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 88) = sub_23DEF21F4;
  *(_QWORD *)(a2 + 96) = v5;
  return result;
}

uint64_t WorkQueue.WorkSet.onFinish.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_retain();
  return v1;
}

uint64_t WorkQueue.WorkSet.onFinish.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*WorkQueue.WorkSet.onFinish.modify())()
{
  return nullsub_1;
}

uint64_t WorkQueue.init(environment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)(v1 + 24) = a1;
  v8[0] = MEMORY[0x24BEE4AF8];
  v8[1] = MEMORY[0x24BEE4AF8];
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v12 = 3;
  sub_23DE9B2F8(0, &qword_25432DD18);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 76) = 0;
  sub_23DEF1904((uint64_t)v8, v3 + 16);
  swift_retain();
  sub_23DEF1938((uint64_t)v8);
  *(_QWORD *)(v1 + 16) = v3;
  v4 = *(os_unfair_lock_s **)(a1 + 16);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 10;
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_23DF0506C(v5, v1, (uint64_t)&protocol witness table for WorkQueue);
  os_unfair_lock_unlock(v6);
  swift_release();
  swift_release();
  return v1;
}

uint64_t WorkQueue.count.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 19;
  os_unfair_lock_lock(v1 + 19);
  v4 = sub_23DEF27D4(v2);
  os_unfair_lock_unlock(v3);
  return v4;
}

uint64_t WorkQueue.activeCount.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 19;
  os_unfair_lock_lock(v1 + 19);
  sub_23DEEF7EC(v2, (unint64_t)&v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_23DEEF7EC(uint64_t *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  os_unfair_lock_s *v22;
  _QWORD *v23;

  v4 = v2;
  v6 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_20;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_21;
  while (1)
  {
    v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_23DEAA488(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v8 = 0;
    v9 = v23;
    v20 = (_QWORD *)a2;
    v21 = v6 & 0xC000000000000001;
    v10 = v6;
    while (v7 != v8)
    {
      if (v21)
      {
        v11 = MEMORY[0x242647BF0](v8, v6);
      }
      else
      {
        v11 = *(_QWORD *)(v6 + 8 * v8 + 32);
        swift_retain();
      }
      v12 = *(os_unfair_lock_s **)(v11 + 16);
      v13 = (uint64_t)&v12[4];
      v3 = v12 + 11;
      os_unfair_lock_lock(v12 + 11);
      sub_23DEF4404(v13, &v22);
      if (v4)
        goto LABEL_25;
      v4 = 0;
      os_unfair_lock_unlock(v3);
      v3 = v22;
      swift_release();
      v23 = v9;
      a2 = v9[2];
      v14 = v9[3];
      if (a2 >= v14 >> 1)
      {
        sub_23DEAA488(v14 > 1, a2 + 1, 1);
        v9 = v23;
      }
      ++v8;
      v9[2] = a2 + 1;
      v9[a2 + 4] = v3;
      v6 = v10;
      if (v7 == v8)
      {
        swift_bridgeObjectRelease();
        a2 = (unint64_t)v20;
        v15 = v9[2];
        if (v15)
          goto LABEL_14;
LABEL_22:
        v16 = 0;
LABEL_23:
        swift_bridgeObjectRelease();
        *(_QWORD *)a2 = v16;
        return;
      }
    }
    __break(1u);
    while (1)
    {
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain_n();
      v7 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (v7)
        break;
LABEL_21:
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v15)
        goto LABEL_22;
LABEL_14:
      v16 = 0;
      v17 = v9 + 4;
      while (1)
      {
        v18 = *v17++;
        v19 = __OFADD__(v16, v18);
        v16 += v18;
        if (v19)
          break;
        if (!--v15)
          goto LABEL_23;
      }
    }
  }
  __break(1u);
LABEL_25:
  os_unfair_lock_unlock(v3);
  __break(1u);
}

void sub_23DEEFA00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEEFACC(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_23DEEFA5C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _BYTE v7[40];

  sub_23DE9A5DC(a1, (uint64_t)v7);
  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF21C0(v4);
  os_unfair_lock_unlock(v5);
  return sub_23DEF037C((uint64_t)v7);
}

uint64_t sub_23DEEFACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DE9A5DC(a1 + 16, a2);
}

uint64_t sub_23DEEFAF8(uint64_t a1, uint64_t a2)
{
  return sub_23DEF30D8(a2, a1 + 16);
}

void (*WorkQueue.statusObserver.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + 16);
  v3[10] = v4;
  os_unfair_lock_lock(v4 + 19);
  sub_23DE9A5DC((uint64_t)&v4[8], (uint64_t)v3);
  os_unfair_lock_unlock(v4 + 19);
  return sub_23DEEFB90;
}

void sub_23DEEFB90(uint64_t *a1, char a2)
{
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v2 = (void *)*a1;
  v3 = *(os_unfair_lock_s **)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    v4 = (uint64_t)&v3[8];
    v5 = v3 + 19;
    sub_23DE9A5DC(*a1, (uint64_t)v2 + 40);
    os_unfair_lock_lock(v5);
    sub_23DEF30D8((uint64_t)v2 + 40, v4);
    os_unfair_lock_unlock(v5);
    sub_23DEF037C((uint64_t)v2 + 40);
  }
  else
  {
    v6 = (uint64_t)&v3[8];
    v7 = v3 + 19;
    os_unfair_lock_lock(v3 + 19);
    sub_23DEF30D8((uint64_t)v2, v6);
    os_unfair_lock_unlock(v7);
  }
  sub_23DEF037C((uint64_t)v2);
  free(v2);
}

uint64_t sub_23DEEFC48(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(void))(a3 + 88))();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (a2 != (void *)1)
      sub_23DEEFCC4(a1, a2);
    return swift_release();
  }
  return result;
}

void sub_23DEEFCC4(uint64_t a1, void *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  os_unfair_lock_s *v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t (*v10)();

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (uint64_t *)&v5[4];
  v7 = v5 + 19;
  os_unfair_lock_lock(v5 + 19);
  sub_23DEF0854(v6, a1, v2, a2, &v10);
  os_unfair_lock_unlock(v7);
  v8 = v10;
  if (v10)
  {
    v9 = swift_retain();
    ((void (*)(uint64_t))v8)(v9);
    sub_23DE9B2E8((uint64_t)v8);
    sub_23DE9B2E8((uint64_t)v8);
  }
}

uint64_t sub_23DEEFD78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = v2;
  v5 = *(_OWORD *)(a1 + 80);
  v31 = *(_OWORD *)(a1 + 64);
  v32 = v5;
  v33 = *(_QWORD *)(a1 + 96);
  v6 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v30[2] = *(_OWORD *)(a1 + 32);
  v30[3] = v7;
  v8 = sub_23DEF2B38(a2);
  v9 = *(os_unfair_lock_s **)(*(_QWORD *)(v2 + 24) + 16);
  v10 = v9 + 4;
  v11 = v9 + 10;
  os_unfair_lock_lock(v9 + 10);
  sub_23DED7914(v10, v27);
  os_unfair_lock_unlock(v11);
  v12 = (void *)v27[0];
  v13 = *(_QWORD *)&v30[0];
  swift_retain();
  sub_23DEF2D44((uint64_t)v30);
  v14 = swift_bridgeObjectRetain();
  v15 = (_QWORD *)sub_23DEF2278(v14, v3, (uint64_t)v30);
  sub_23DEF2DC8((uint64_t)v30);
  swift_bridgeObjectRelease();
  swift_release();
  v16 = *(os_unfair_lock_s **)(v8 + 16);
  v17 = (uint64_t)&v16[4];
  v18 = v16 + 11;
  os_unfair_lock_lock(v16 + 11);
  sub_23DEF4DD4(v17, v15, v12);
  os_unfair_lock_unlock(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DE9A5DC((uint64_t)(a2 + 2), (uint64_t)&v25);
  if (v26)
  {
    sub_23DE902DC(&v25, (uint64_t)v27);
    v19 = v28;
    v20 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    v21 = *(_QWORD *)(v13 + 16);
    v22 = v31;
    v23 = sub_23DEF27D4(a2);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v20 + 8))(v21, v22, *((_QWORD *)&v22 + 1), v23, v19, v20);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    swift_release();
    return sub_23DEF037C((uint64_t)&v25);
  }
}

uint64_t sub_23DEEFF60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_23DF15298();
    if (result)
      goto LABEL_3;
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 208) = 0;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_8;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x242647BF0](0, v3);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    v7 = *(os_unfair_lock_s **)(v6 + 16);
    v8 = (uint64_t)&v7[4];
    v9 = v7 + 11;
    os_unfair_lock_lock(v7 + 11);
    sub_23DEF52B0(v8, a2);
    os_unfair_lock_unlock(v9);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_23DEF0090@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v21[8];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a1;
  v4 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a2 + v6 + 40);
      v9 = *(_QWORD *)(a2 + v6 + 48);
      v8 = *(_QWORD *)(a2 + v6 + 56);
      v11 = *(_QWORD *)(a2 + v6 + 64);
      v10 = *(_QWORD *)(a2 + v6 + 72);
      v13 = *(_QWORD *)(a2 + v6 + 80);
      v12 = *(_QWORD *)(a2 + v6 + 88);
      v14 = *(_QWORD *)(a2 + v6 + 112);
      v15 = *(_QWORD *)(a2 + v6 + 120);
      v16 = *(_QWORD *)(a2 + v6 + 128);
      v21[0] = *(_QWORD *)(a2 + v6 + 32);
      v21[1] = v7;
      v26 = v21[0];
      v21[2] = v9;
      v21[3] = v8;
      v21[4] = v11;
      v21[5] = v10;
      v21[6] = v13;
      v21[7] = v12;
      v22 = *(_OWORD *)(a2 + v6 + 96);
      v23 = v14;
      v24 = v15;
      v25 = v16;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23DEEFD78((uint64_t)v21, a1);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 += 104;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v4 = a3;
    v3 = a1;
  }
  result = sub_23DEF24A4(v3);
  *v4 = result;
  return result;
}

uint64_t sub_23DEF01F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v11 = sub_23DEF2B38(a1);
  type metadata accessor for WorkBarrier();
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = a2;
  *(_QWORD *)(v12 + 32) = a3;
  *(_BYTE *)(v12 + 40) = a4;
  v13 = *(os_unfair_lock_s **)(v11 + 16);
  v14 = (uint64_t)&v13[4];
  v15 = v13 + 11;
  swift_retain();
  os_unfair_lock_lock(v15);
  sub_23DEF4A94(v14, v12);
  if (v5)
  {
    os_unfair_lock_unlock(v15);
    swift_release();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v15);
    swift_release();
    v16 = sub_23DEF03B8(a1);
    if (v16)
    {
      v18 = v16;
      v19 = v17;
      sub_23DE95234(0, &qword_25432DBB0, (uint64_t (*)(uint64_t))sub_23DEEE310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_23DF16970;
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v18;
      *(_QWORD *)(v21 + 24) = v19;
      *(_QWORD *)(v20 + 32) = sub_23DEEEA58;
      *(_QWORD *)(v20 + 40) = v21;
    }
    else
    {
      v20 = sub_23DEF24A4(a1);
    }
    result = swift_release();
    *a5 = v20;
  }
  return result;
}

uint64_t sub_23DEF037C(uint64_t a1)
{
  uint64_t v2;

  sub_23DE9A620();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*sub_23DEF03B8(uint64_t *a1))()
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  os_unfair_lock_s *v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  void *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t (*result)();
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[8];
  uint64_t v46;
  _QWORD *v47;

  v2 = *a1;
  v3 = (unint64_t)*a1 >> 62;
  if (v3)
    goto LABEL_29;
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x242647BF0](0, v2);
      }
      else
      {
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          v36 = (os_unfair_lock_s *)swift_unexpectedError();
          __break(1u);
          os_unfair_lock_unlock(v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = (uint64_t (*)())swift_unexpectedError();
          __break(1u);
          return result;
        }
        v5 = *(_QWORD *)(v2 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      v6 = *(os_unfair_lock_s **)(v5 + 16);
      v7 = (uint64_t *)&v6[4];
      v8 = v6 + 11;
      os_unfair_lock_lock(v6 + 11);
      sub_23DEF4428(v7, &v42);
      os_unfair_lock_unlock(v8);
      if (v42 != 1)
        goto LABEL_10;
      os_unfair_lock_lock(v8);
      sub_23DEF4574(v7, &v42);
      os_unfair_lock_unlock(v8);
      v39 = v5;
      v38 = v42;
      v9 = v43;
      if (v3)
      {
        swift_bridgeObjectRetain();
        v10 = sub_23DF15298();
        swift_bridgeObjectRelease();
        if (!v10)
          goto LABEL_35;
        swift_bridgeObjectRetain();
        v11 = sub_23DF15298();
        swift_bridgeObjectRelease();
        if (!v11)
          goto LABEL_34;
      }
      else if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_10:
        swift_release();
        return 0;
      }
      if ((v2 & 0xC000000000000001) != 0)
      {
        MEMORY[0x242647BF0](0, v2);
        if (!v3)
          goto LABEL_15;
      }
      else
      {
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        swift_retain();
        if (!v3)
        {
LABEL_15:
          if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_16;
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRetain();
      v35 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (v35)
      {
LABEL_16:
        sub_23DF087A8(0, 1);
        swift_release();
        v12 = sub_23DEF2B38(a1);
        v13 = v12;
        v14 = *(_QWORD *)(v9 + 16);
        v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v40 = v9;
        if (v14)
        {
          v37 = v12;
          v47 = (_QWORD *)MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_23DEAA4A4(0, v14, 0);
          v16 = v9 + 32;
          v15 = v47;
          do
          {
            sub_23DEB2338(v16, (uint64_t)&v42);
            sub_23DEAC648((uint64_t)&v44, (uint64_t)v45);
            sub_23DEF1A70((uint64_t)&v42);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23DEAA4A4(0, v15[2] + 1, 1);
              v15 = v47;
            }
            v18 = v15[2];
            v17 = v15[3];
            if (v18 >= v17 >> 1)
            {
              sub_23DEAA4A4(v17 > 1, v18 + 1, 1);
              v15 = v47;
            }
            v15[2] = v18 + 1;
            v19 = &v15[17 * v18];
            *((_OWORD *)v19 + 2) = v45[0];
            v20 = v45[1];
            v21 = v45[2];
            v22 = v45[4];
            *((_OWORD *)v19 + 5) = v45[3];
            *((_OWORD *)v19 + 6) = v22;
            *((_OWORD *)v19 + 3) = v20;
            *((_OWORD *)v19 + 4) = v21;
            v23 = v45[5];
            v24 = v45[6];
            v25 = v45[7];
            v19[20] = v46;
            *((_OWORD *)v19 + 8) = v24;
            *((_OWORD *)v19 + 9) = v25;
            *((_OWORD *)v19 + 7) = v23;
            v16 += 216;
            --v14;
          }
          while (v14);
          swift_bridgeObjectRelease();
          v13 = v37;
        }
        v26 = *(os_unfair_lock_s **)(*(_QWORD *)(v41 + 24) + 16);
        v27 = v26 + 4;
        v28 = v26 + 10;
        os_unfair_lock_lock(v26 + 10);
        sub_23DED7914(v27, &v42);
        os_unfair_lock_unlock(v28);
        v29 = (void *)v42;
        v30 = *(os_unfair_lock_s **)(v13 + 16);
        v31 = (uint64_t)&v30[4];
        v32 = v30 + 11;
        os_unfair_lock_lock(v30 + 11);
        sub_23DEF4DD4(v31, v15, v29);
        os_unfair_lock_unlock(v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = v38;
        *(_QWORD *)(v33 + 32) = v40;
        *(_QWORD *)(v33 + 40) = v41;
        *(_QWORD *)(v33 + 48) = v39;
        swift_retain();
        return sub_23DEF3010;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
    }
    while (sub_23DF15298());
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23DEF0854(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  double Current;
  double v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[40];
  _BYTE v29[40];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v6 = v5;
  v12 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
LABEL_11:
    sub_23DEF1A1C((uint64_t)&v30);
    *a5 = 0;
    a5[1] = 0;
    return;
  }
  swift_bridgeObjectRetain();
  if (!sub_23DF15298())
    goto LABEL_10;
LABEL_3:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = MEMORY[0x242647BF0](0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_14;
    }
    v14 = *(_QWORD *)(v12 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v15 = *(os_unfair_lock_s **)(v14 + 16);
  v16 = (uint64_t)&v15[4];
  v12 = (uint64_t)&v15[11];
  os_unfair_lock_lock(v15 + 11);
  sub_23DEF5908(v16, (_QWORD *)a2, (uint64_t)&v30);
  if (!v6)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v12);
    swift_release();
    if ((_QWORD)v35)
    {
      v52 = v40;
      v53 = v41;
      v54 = v42;
      v55 = v43;
      v48 = v36;
      v49 = v37;
      v50 = v38;
      v51 = v39;
      *(_OWORD *)&v45[16] = v32;
      *(_OWORD *)&v45[32] = v33;
      v46 = v34;
      v47 = v35;
      v44 = v30;
      *(_OWORD *)v45 = v31;
      v17 = sub_23DEF03B8(a1);
      v19 = v18;
      v56 = *(_OWORD *)&v45[8];
      v57 = *(_OWORD *)&v45[24];
      v58 = *(_QWORD *)&v45[40];
      sub_23DE9A5DC((uint64_t)(a1 + 2), (uint64_t)v29);
      Current = CFAbsoluteTimeGetCurrent();
      sub_23DEF1A70((uint64_t)&v44);
      v21 = Current - *(double *)(a2 + 112);
      sub_23DEF2ED8((uint64_t)v29, (uint64_t)v28);
      sub_23DEAC648(a2, (uint64_t)&v30);
      v22 = swift_allocObject();
      sub_23DEF2ED8((uint64_t)v28, v22 + 16);
      v23 = v34;
      *(_OWORD *)(v22 + 136) = v35;
      v24 = v37;
      *(_OWORD *)(v22 + 152) = v36;
      *(_OWORD *)(v22 + 168) = v24;
      v25 = v30;
      *(_OWORD *)(v22 + 72) = v31;
      v26 = v33;
      *(_OWORD *)(v22 + 88) = v32;
      *(_OWORD *)(v22 + 104) = v26;
      *(_OWORD *)(v22 + 120) = v23;
      *(_QWORD *)(v22 + 184) = v38;
      *(_OWORD *)(v22 + 56) = v25;
      *(double *)(v22 + 192) = v21;
      v27 = v57;
      *(_OWORD *)(v22 + 200) = v56;
      *(_OWORD *)(v22 + 216) = v27;
      *(_QWORD *)(v22 + 232) = v58;
      *(_QWORD *)(v22 + 240) = a4;
      *(_QWORD *)(v22 + 248) = a3;
      *(_QWORD *)(v22 + 256) = v17;
      *(_QWORD *)(v22 + 264) = v19;
      *a5 = sub_23DEF2FA8;
      a5[1] = (uint64_t (*)())v22;
      sub_23DEF2FC4(a4);
      swift_retain();
      return;
    }
    goto LABEL_11;
  }
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)v12);
  __break(1u);
}

uint64_t sub_23DEF0B14(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), double a7)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  sub_23DE9A5DC(a1, (uint64_t)&v28);
  if (v30)
  {
    sub_23DE902DC(&v28, (uint64_t)v35);
    v27 = v36;
    v13 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    v14 = *(_OWORD *)(a3 + 16);
    v33[0] = *(_OWORD *)a3;
    v33[1] = v14;
    v34 = *(_QWORD *)(a3 + 32);
    v15 = a2[3];
    v16 = a2[4];
    v17 = a2[5];
    v19 = a2[6];
    v18 = a2[7];
    *(_QWORD *)&v28 = a2[2];
    *((_QWORD *)&v28 + 1) = v15;
    v29 = v16;
    v30 = v17;
    v31 = v19;
    v32 = v18;
    v20 = *(_QWORD *)(a5 + 16);
    v21 = (uint64_t *)(v20 + 16);
    v22 = (os_unfair_lock_s *)(v20 + 76);
    v23 = *a2;
    v24 = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v22);
    v25 = sub_23DEF27D4(v21);
    os_unfair_lock_unlock(v22);
    (*(void (**)(uint64_t *, _OWORD *, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t))(v13 + 16))(a2 + 8, v33, a4, &v28, v23, v24, v25, v27, a7, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if (!a6)
      return result;
  }
  else
  {
    result = sub_23DEF037C((uint64_t)&v28);
    if (!a6)
      return result;
  }
  return a6(result);
}

void sub_23DEF0C88(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  char v6;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF0CF0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_23DEF0CF0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 56);
  return result;
}

void sub_23DEF0CFC(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;

  v4 = v3;
  *(_BYTE *)(a1 + 56) = a2;
  v5 = *(_QWORD *)a1;
  if (!(*(_QWORD *)a1 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    *a3 = sub_23DEF24A4((uint64_t *)a1);
    return;
  }
LABEL_13:
  swift_bridgeObjectRetain_n();
  v6 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_11;
LABEL_3:
  v7 = 4;
  while (1)
  {
    v8 = v7 - 4;
    if ((v5 & 0xC000000000000001) != 0)
    {
      v9 = MEMORY[0x242647BF0](v7 - 4, v5);
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_12;
    }
    else
    {
      v9 = *(_QWORD *)(v5 + 8 * v7);
      swift_retain();
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    v11 = *(os_unfair_lock_s **)(v9 + 16);
    v12 = (uint64_t)&v11[4];
    v13 = v11 + 11;
    os_unfair_lock_lock(v11 + 11);
    sub_23DEF4710(v12, a2);
    if (v4)
      break;
    v4 = 0;
    os_unfair_lock_unlock(v13);
    swift_release();
    ++v7;
    if (v10 == v6)
      goto LABEL_11;
  }
  os_unfair_lock_unlock(v13);
  __break(1u);
}

uint64_t (*WorkQueue.priorityThreshold.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 76));
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v3 + 72);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 76));
  return sub_23DE97BF0;
}

Swift::Void __swiftcall WorkQueue.pause()()
{
  char v0;

  v0 = 1;
  WorkQueue.priorityThreshold.setter(&v0);
}

Swift::Void __swiftcall WorkQueue.resume()()
{
  char v0;

  v0 = 3;
  WorkQueue.priorityThreshold.setter(&v0);
}

uint64_t sub_23DEF0F10@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_23DEF03B8();
  if (v4)
  {
    v6 = v4;
    v7 = v5;
    sub_23DE95234(0, &qword_25432DBB0, (uint64_t (*)(uint64_t))sub_23DEEE310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_23DF16970;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(v8 + 32) = sub_23DECDAC0;
    *(_QWORD *)(v8 + 40) = result;
  }
  else
  {
    result = sub_23DEF24A4(a1);
    v8 = result;
  }
  *a2 = v8;
  return result;
}

uint64_t WorkQueue.fetchNextWorkPlan(completion:)(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  _BYTE *v9;
  _OWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[5];
  _OWORD v22[8];
  uint64_t v23;
  _BYTE v24[216];

  v3 = v2;
  v6 = *(os_unfair_lock_s **)(v3 + 16);
  v7 = (uint64_t *)&v6[4];
  v8 = v6 + 19;
  os_unfair_lock_lock(v6 + 19);
  sub_23DEF10DC(v7, (uint64_t)a1, a2, (uint64_t)v24);
  os_unfair_lock_unlock(v8);
  sub_23DEF19C0((uint64_t)v24, (uint64_t)v11);
  if ((_QWORD)v12)
  {
    v22[5] = v17;
    v22[6] = v18;
    v22[7] = v19;
    v23 = v20;
    v22[1] = v13;
    v22[2] = v14;
    v22[3] = v15;
    v22[4] = v16;
    v21[2] = v11[2];
    v21[3] = v11[3];
    v21[4] = v11[4];
    v22[0] = v12;
    v21[0] = v11[0];
    v21[1] = v11[1];
    a1(v22);
    sub_23DEF1A70((uint64_t)v21);
    v9 = v24;
  }
  else
  {
    sub_23DEF1A1C((uint64_t)v24);
    v9 = v11;
  }
  return sub_23DEF1A1C((uint64_t)v9);
}

double sub_23DEF10DC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _OWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  sub_23DEEFF60(a1, (uint64_t)v20);
  if ((_QWORD)v21)
  {
    v8 = v27;
    *(_OWORD *)(a4 + 160) = v26;
    *(_OWORD *)(a4 + 176) = v8;
    *(_OWORD *)(a4 + 192) = v28;
    *(_QWORD *)(a4 + 208) = v29;
    v9 = v23;
    *(_OWORD *)(a4 + 96) = v22;
    *(_OWORD *)(a4 + 112) = v9;
    v10 = v25;
    *(_OWORD *)(a4 + 128) = v24;
    *(_OWORD *)(a4 + 144) = v10;
    v11 = v20[3];
    *(_OWORD *)(a4 + 32) = v20[2];
    *(_OWORD *)(a4 + 48) = v11;
    v12 = v21;
    *(_OWORD *)(a4 + 64) = v20[4];
    *(_OWORD *)(a4 + 80) = v12;
    result = *(double *)v20;
    v14 = v20[1];
    *(_OWORD *)a4 = v20[0];
    *(_OWORD *)(a4 + 16) = v14;
  }
  else
  {
    sub_23DEF1A1C((uint64_t)v20);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a2;
    *(_QWORD *)(v15 + 24) = a3;
    v16 = (_QWORD *)a1[1];
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = sub_23DF0706C(0, v16[2] + 1, 1, v16);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = sub_23DF0706C((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v19 = &v16[2 * v18];
    v19[4] = sub_23DE9A540;
    v19[5] = v15;
    a1[1] = (uint64_t)v16;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_QWORD *)(a4 + 208) = 0;
  }
  return result;
}

Swift::Void __swiftcall WorkQueue.didUpdate(environmentalState:)(Swift::OpaquePointer environmentalState)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 19;
  os_unfair_lock_lock(v3 + 19);
  sub_23DEF12B8(v4, environmentalState._rawValue);
  os_unfair_lock_unlock(v5);
}

void sub_23DEF12B8(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  v3 = v2;
  v4 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_13:
  swift_bridgeObjectRetain_n();
  v5 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
LABEL_3:
  v6 = 4;
  while (1)
  {
    v7 = v6 - 4;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x242647BF0](v6 - 4, v4);
      v9 = v6 - 3;
      if (__OFADD__(v7, 1))
        goto LABEL_12;
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 8 * v6);
      swift_retain();
      v9 = v6 - 3;
      if (__OFADD__(v7, 1))
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    v10 = *(os_unfair_lock_s **)(v8 + 16);
    v11 = (uint64_t)&v10[4];
    v12 = v10 + 11;
    os_unfair_lock_lock(v10 + 11);
    sub_23DEF5BF8(v11, a2);
    if (v3)
      break;
    v3 = 0;
    os_unfair_lock_unlock(v12);
    swift_release();
    ++v6;
    if (v9 == v5)
      goto LABEL_11;
  }
  os_unfair_lock_unlock(v12);
  __break(1u);
}

uint64_t WorkQueue.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t WorkQueue.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEF145C(void (*a1)(_OWORD *), uint64_t a2)
{
  return WorkQueue.fetchNextWorkPlan(completion:)(a1, a2);
}

void sub_23DEF147C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 19;
  os_unfair_lock_lock(v1 + 19);
  sub_23DEF2260(v2);
  os_unfair_lock_unlock(v3);
}

void sub_23DEF14D0(uint64_t a1)
{
  uint64_t inited;

  sub_23DE95234(0, (unint64_t *)&qword_25432C2C0, (uint64_t (*)(uint64_t))sub_23DE9ACDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16AA0;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x800000023DF1D7B0;
  __asm { BR              X12 }
}

_QWORD *sub_23DEF1588()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *result;
  unint64_t v19;
  _QWORD *v20;

  *(_QWORD *)(v1 + 48) = 0x746E65677275;
  *(_QWORD *)(v1 + 56) = 0xE600000000000000;
  *(_QWORD *)(v1 + 64) = 0x756F4368636F7065;
  *(_QWORD *)(v1 + 72) = 0xEA0000000000746ELL;
  if (*(_QWORD *)v2 >> 62)
    goto LABEL_15;
  v6 = *(_QWORD *)((*(_QWORD *)v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    *(_QWORD *)(v5 - 72) = v6;
    v7 = (os_unfair_lock_s *)MEMORY[0x24BEE1768];
    *(_QWORD *)(v1 + 80) = sub_23DF153C4();
    *(_QWORD *)(v1 + 88) = v8;
    strcpy((char *)(v1 + 96), "pendingCount");
    *(_BYTE *)(v1 + 109) = 0;
    *(_WORD *)(v1 + 110) = -5120;
    *(_QWORD *)(v5 - 72) = sub_23DEF27D4((uint64_t *)v2);
    *(_QWORD *)(v1 + 112) = sub_23DF153C4();
    *(_QWORD *)(v1 + 120) = v9;
    *(_QWORD *)(v1 + 128) = v3 + 2;
    *(_QWORD *)(v1 + 136) = 0x800000023DF1D7D0;
    *(_QWORD *)(v5 - 72) = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
    *(_QWORD *)(v1 + 144) = sub_23DF153C4();
    *(_QWORD *)(v1 + 152) = v10;
    v11 = sub_23DE930F0(v1);
    sub_23DE95234(0, (unint64_t *)&unk_256D0EE90, (uint64_t (*)(uint64_t))sub_23DE9AD3C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23DF16970;
    *(_QWORD *)(inited + 32) = 0x7368636F7065;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    v2 = *(_QWORD *)v2;
    if ((unint64_t)v2 >> 62)
      break;
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3)
      goto LABEL_20;
LABEL_5:
    *(_QWORD *)(v5 - 72) = MEMORY[0x24BEE4AF8];
    sub_23DF15220();
    if (v3 < 0)
    {
      __break(1u);
LABEL_23:
      os_unfair_lock_unlock(v7);
      __break(1u);
      JUMPOUT(0x23DEF18E8);
    }
    v19 = v11;
    v20 = v4;
    v4 = 0;
    v1 = v2 & 0xC000000000000001;
    while ((_QWORD *)v3 != v4)
    {
      if (v1)
      {
        v13 = MEMORY[0x242647BF0](v4, v2);
      }
      else
      {
        v13 = *(_QWORD *)(v2 + 8 * (_QWORD)v4 + 32);
        swift_retain();
      }
      v14 = *(os_unfair_lock_s **)(v13 + 16);
      v15 = (uint64_t)&v14[4];
      v7 = v14 + 11;
      os_unfair_lock_lock(v14 + 11);
      sub_23DEF5D58(v15);
      if (v0)
        goto LABEL_23;
      v0 = 0;
      v4 = (_QWORD *)((char *)v4 + 1);
      os_unfair_lock_unlock(v7);
      swift_release();
      sub_23DF151FC();
      sub_23DF1522C();
      sub_23DF15238();
      sub_23DF15208();
      if ((_QWORD *)v3 == v4)
      {
        v16 = *(_QWORD *)(v5 - 72);
        swift_bridgeObjectRelease();
        v11 = v19;
        v4 = v20;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v6 = sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  if (v2 < 0)
    v7 = (os_unfair_lock_s *)v2;
  else
    v7 = (os_unfair_lock_s *)(v2 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain_n();
  v3 = sub_23DF15298();
  swift_bridgeObjectRelease();
  if (v3)
    goto LABEL_5;
LABEL_20:
  swift_bridgeObjectRelease();
  v16 = MEMORY[0x24BEE4AF8];
LABEL_21:
  *(_QWORD *)(inited + 48) = v16;
  v17 = sub_23DE935F0(inited);
  type metadata accessor for DebugSnapshot();
  result = (_QWORD *)swift_allocObject();
  result[2] = 0x657551206B726F57;
  result[3] = 0xEA00000000006575;
  result[4] = v11;
  result[5] = v17;
  *v4 = result;
  return result;
}

uint64_t sub_23DEF18F8(uint64_t a1)
{
  uint64_t *v1;

  return sub_23DEEF284(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_23DEF1904(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for WorkQueue.State(a2, a1);
  return a2;
}

uint64_t sub_23DEF1938(uint64_t a1)
{
  destroy for WorkQueue.State(a1);
  return a1;
}

uint64_t sub_23DEF1964()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 19;
  os_unfair_lock_lock(v1 + 19);
  sub_23DEF2248(v2);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_23DEF19C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DEABD84(0, qword_25432DC70, (uint64_t)&type metadata for EnqueuedWorkPlan, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DEF1A1C(uint64_t a1)
{
  uint64_t v2;

  sub_23DEABD84(0, qword_25432DC70, (uint64_t)&type metadata for EnqueuedWorkPlan, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DEF1A70(uint64_t a1)
{
  destroy for EnqueuedWorkPlan(a1);
  return a1;
}

uint64_t sub_23DEF1AA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = sub_23DEF2224;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23DEF1B04(char *a1)
{
  char v2;

  v2 = *a1;
  return WorkQueue.priorityThreshold.setter(&v2);
}

uint64_t dispatch thunk of WorkSource.fetchNextWorkPlan(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for WorkQueue()
{
  return objc_opt_self();
}

uint64_t method lookup function for WorkQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WorkQueue.__allocating_init(environment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t destroy for WorkQueue.WorkSet()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for WorkQueue.WorkSet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for WorkQueue.WorkSet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  v4 = a2[9];
  a1[8] = a2[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[9] = v4;
  a1[10] = a2[10];
  v5 = a2[12];
  a1[11] = a2[11];
  a1[12] = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for WorkQueue.WorkSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkQueue.WorkSet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkQueue.WorkSet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkQueue.WorkSet()
{
  return &type metadata for WorkQueue.WorkSet;
}

uint64_t destroy for WorkQueue.State(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return result;
}

uint64_t initializeWithCopy for WorkQueue.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = a2 + 16;
  v7 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 16, v6, v7);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v6 + 32);
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for WorkQueue.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_8:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WorkQueue.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkQueue.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkQueue.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkQueue.State()
{
  return &type metadata for WorkQueue.State;
}

uint64_t sub_23DEF21C0(uint64_t a1)
{
  uint64_t v1;

  return sub_23DEF30D8(*(_QWORD *)(v1 + 16), a1 + 16);
}

uint64_t sub_23DEF21D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEF21F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t *);
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16);
  v5 = a2;
  return v3(a1, &v5);
}

uint64_t sub_23DEF2224(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(a1, *a2);
}

void sub_23DEF2248(uint64_t a1)
{
  sub_23DEF14D0(a1);
}

void sub_23DEF2260(uint64_t *a1)
{
  uint64_t v1;

  sub_23DEF12B8(a1, *(void **)(v1 + 16));
}

uint64_t sub_23DEF2278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v38 = MEMORY[0x24BEE4AF8];
    sub_23DEAA4A4(0, v3, 0);
    v7 = a1 + 32;
    v8 = *(_OWORD *)(a3 + 64);
    v9 = *(_OWORD *)(a3 + 24);
    v39 = *(_OWORD *)(a3 + 8);
    v40 = v9;
    v41 = *(_OWORD *)(a3 + 40);
    v10 = *(_QWORD *)(a3 + 56);
    v11 = *(_QWORD *)(a3 + 80);
    v28 = v8;
    do
    {
      sub_23DE902F4(v7, (uint64_t)v29);
      v12 = swift_allocObject();
      swift_weakInit();
      v13 = swift_allocObject();
      v14 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v13 + 80) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v13 + 96) = v14;
      v15 = *(_QWORD *)(a3 + 96);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)a3;
      *(_OWORD *)(v13 + 32) = v16;
      v17 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v13 + 48) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v13 + 64) = v17;
      *(_QWORD *)(v13 + 112) = v15;
      *(_QWORD *)(v13 + 120) = v12;
      v30 = v28;
      v32 = v40;
      v33 = v41;
      v31 = v39;
      sub_23DE902DC(v29, (uint64_t)v34);
      *((_QWORD *)&v35 + 1) = v10;
      *(_QWORD *)&v36 = v11;
      *((_QWORD *)&v36 + 1) = sub_23DEF2ECC;
      v37 = v13;
      v4 = v38;
      swift_unknownObjectRetain();
      sub_23DEAEBB0((uint64_t)&v39);
      swift_retain();
      sub_23DEF2D44(a3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DEAA4A4(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v38;
      }
      v19 = *(_QWORD *)(v4 + 16);
      v18 = *(_QWORD *)(v4 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_23DEAA4A4(v18 > 1, v19 + 1, 1);
        v4 = v38;
      }
      *(_QWORD *)(v4 + 16) = v19 + 1;
      v20 = v4 + 136 * v19;
      *(_OWORD *)(v20 + 32) = v30;
      v21 = v31;
      v22 = v32;
      v23 = v34[0];
      *(_OWORD *)(v20 + 80) = v33;
      *(_OWORD *)(v20 + 96) = v23;
      *(_OWORD *)(v20 + 48) = v21;
      *(_OWORD *)(v20 + 64) = v22;
      v24 = v34[1];
      v25 = v35;
      v26 = v36;
      *(_QWORD *)(v20 + 160) = v37;
      *(_OWORD *)(v20 + 128) = v25;
      *(_OWORD *)(v20 + 144) = v26;
      *(_OWORD *)(v20 + 112) = v24;
      v7 += 40;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_23DEF24A4(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[13];
  uint64_t v41;

  v2 = a1 + 1;
  v1 = (_QWORD *)a1[1];
  if (!v1[2])
    return MEMORY[0x24BEE4AF8];
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v5 = v1[4];
    v6 = v1[5];
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
      v25 = sub_23DF15298();
      result = swift_bridgeObjectRelease();
      if (!v25)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        v39 = 0;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
LABEL_21:
        swift_release();
        sub_23DEF1A1C((uint64_t)&v26);
        return (uint64_t)v4;
      }
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      result = swift_retain();
      if (!v9)
        goto LABEL_20;
    }
    if ((v8 & 0xC000000000000001) == 0)
      break;
    v11 = MEMORY[0x242647BF0](0, v8);
LABEL_8:
    swift_bridgeObjectRelease();
    v12 = *(os_unfair_lock_s **)(v11 + 16);
    v13 = (uint64_t)&v12[4];
    v14 = v12 + 11;
    os_unfair_lock_lock(v12 + 11);
    sub_23DEF52B0(v13, (uint64_t)&v26);
    os_unfair_lock_unlock(v14);
    swift_release();
    if (!(_QWORD)v31)
      goto LABEL_21;
    v40[10] = v36;
    v40[11] = v37;
    v40[12] = v38;
    v41 = v39;
    v40[6] = v32;
    v40[7] = v33;
    v40[8] = v34;
    v40[9] = v35;
    v40[2] = v28;
    v40[3] = v29;
    v40[4] = v30;
    v40[5] = v31;
    v40[0] = v26;
    v40[1] = v27;
    sub_23DEB2338((uint64_t)v40, (uint64_t)&v26);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = sub_23DE9A540;
    *(_QWORD *)(v15 + 24) = v7;
    v16 = v37;
    *(_OWORD *)(v15 + 192) = v36;
    *(_OWORD *)(v15 + 208) = v16;
    *(_OWORD *)(v15 + 224) = v38;
    *(_QWORD *)(v15 + 240) = v39;
    v17 = v33;
    *(_OWORD *)(v15 + 128) = v32;
    *(_OWORD *)(v15 + 144) = v17;
    v18 = v35;
    *(_OWORD *)(v15 + 160) = v34;
    *(_OWORD *)(v15 + 176) = v18;
    v19 = v29;
    *(_OWORD *)(v15 + 64) = v28;
    *(_OWORD *)(v15 + 80) = v19;
    v20 = v31;
    *(_OWORD *)(v15 + 96) = v30;
    *(_OWORD *)(v15 + 112) = v20;
    v21 = v27;
    *(_OWORD *)(v15 + 32) = v26;
    *(_OWORD *)(v15 + 48) = v21;
    swift_retain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23DF07080(0, v4[2] + 1, 1, v4);
      v4 = (_QWORD *)result;
    }
    v23 = v4[2];
    v22 = v4[3];
    if (v23 >= v22 >> 1)
    {
      result = (uint64_t)sub_23DF07080((_QWORD *)(v22 > 1), v23 + 1, 1, v4);
      v4 = (_QWORD *)result;
    }
    v4[2] = v23 + 1;
    v24 = &v4[2 * v23];
    v24[4] = sub_23DEF2B10;
    v24[5] = v15;
    if (!*(_QWORD *)(*v2 + 16))
      goto LABEL_24;
    swift_retain();
    sub_23DF0803C(0, 1);
    swift_release();
    swift_release();
    sub_23DEF1A70((uint64_t)v40);
    v1 = (_QWORD *)*v2;
    if (!*(_QWORD *)(*v2 + 16))
      return (uint64_t)v4;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(_QWORD *)(v8 + 32);
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_23DEF27D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_19;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_20;
  while (1)
  {
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = sub_23DEAA488(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v5 = v18;
    while (v2 != v4)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x242647BF0](v4, v1);
      }
      else
      {
        v6 = *(_QWORD *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      v7 = *(os_unfair_lock_s **)(v6 + 16);
      v8 = (uint64_t)&v7[4];
      v9 = v7 + 11;
      os_unfair_lock_lock(v7 + 11);
      sub_23DEF43F4(v8, &v17);
      os_unfair_lock_unlock(v9);
      v10 = v17;
      swift_release();
      v18 = v5;
      v12 = v5[2];
      v11 = v5[3];
      if (v12 >= v11 >> 1)
      {
        sub_23DEAA488(v11 > 1, v12 + 1, 1);
        v5 = v18;
      }
      ++v4;
      v5[2] = v12 + 1;
      v5[v12 + 4] = v10;
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        v13 = v5[2];
        if (v13)
          goto LABEL_13;
LABEL_21:
        v1 = 0;
LABEL_22:
        swift_bridgeObjectRelease();
        return v1;
      }
    }
    __break(1u);
    while (1)
    {
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain_n();
      v2 = sub_23DF15298();
      swift_bridgeObjectRelease();
      if (v2)
        break;
LABEL_20:
      swift_bridgeObjectRelease();
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v13)
        goto LABEL_21;
LABEL_13:
      v1 = 0;
      v14 = v5 + 4;
      while (1)
      {
        v15 = *v14++;
        v16 = __OFADD__(v1, v15);
        v1 += v15;
        if (v16)
          break;
        if (!--v13)
          goto LABEL_22;
      }
    }
  }
  __break(1u);
  return result;
}

void sub_23DEF29B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0FBE8)
  {
    v0 = sub_23DF14F44();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0FBE8);
  }
}

uint64_t sub_23DEF2A18()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DEF29B4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_23DEF2A78(uint64_t a1)
{
  sub_23DEF29B4();
  return sub_23DEEF378(a1);
}

uint64_t sub_23DEF2AB4()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEF2B10()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + 112);
}

uint64_t sub_23DEF2B38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v16;

  v3 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    type metadata accessor for WorkEpoch();
    v1 = swift_allocObject();
    sub_23DE9B2F8(0, (unint64_t *)&qword_25432E2E8);
    v9 = swift_allocObject();
    v10 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v9 + 32) = v10;
    *(_WORD *)(v9 + 40) = 3;
    *(_QWORD *)(v1 + 16) = v9;
    *(_DWORD *)(v9 + 44) = 0;
    v11 = (os_unfair_lock_s *)(v9 + 44);
    *(_QWORD *)(v9 + 16) = 0;
    v12 = v9 + 16;
    v13 = *((_BYTE *)a1 + 56);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 44));
    sub_23DEF4710(v12, v13);
    os_unfair_lock_unlock(v11);
    v14 = swift_retain();
    MEMORY[0x242647908](v14);
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_13:
      sub_23DF14F08();
      sub_23DF14ED8();
      return v1;
    }
LABEL_19:
    sub_23DF14EE4();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v4 = sub_23DF15298();
  if (!v4)
    goto LABEL_11;
LABEL_3:
  v5 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0xC000000000000001) == 0)
  {
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v5 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v1 = *(_QWORD *)(v3 + 8 * v5 + 32);
      swift_retain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_19;
  }
  v1 = MEMORY[0x242647BF0](v5, v3);
LABEL_8:
  swift_bridgeObjectRelease();
  v6 = *(os_unfair_lock_s **)(v1 + 16);
  v7 = v6 + 4;
  v8 = v6 + 11;
  os_unfair_lock_lock(v6 + 11);
  sub_23DEF4414(v7, &v16);
  os_unfair_lock_unlock(v8);
  if (v16)
  {
    swift_release();
    goto LABEL_12;
  }
  return v1;
}

uint64_t sub_23DEF2D44(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DEF2DC8(uint64_t a1)
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DEF2E4C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DEF2E70()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEF2ECC(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_23DEEFC48(a1, a2, v2 + 16);
}

uint64_t sub_23DEF2ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE9A620();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DEF2F1C()
{
  _QWORD *v0;
  void *v1;

  if (v0[5])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 15));
  swift_release();
  swift_release();
  v1 = (void *)v0[30];
  if ((unint64_t)v1 >= 2)

  swift_release();
  if (v0[32])
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEF2FA8()
{
  uint64_t v0;

  return sub_23DEF0B14(v0 + 16, (uint64_t *)(v0 + 56), v0 + 200, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(uint64_t (**)(uint64_t))(v0 + 256), *(double *)(v0 + 192));
}

id sub_23DEF2FC4(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t sub_23DEF2FD4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEF3010()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return sub_23DEF3040();
}

uint64_t sub_23DEF3040()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 19;
  os_unfair_lock_lock(v1 + 19);
  sub_23DEF0F10(v2, &v9);
  os_unfair_lock_unlock(v3);
  v4 = *(_QWORD *)(v9 + 16);
  if (v4)
  {
    v5 = v9 + 40;
    do
    {
      v6 = *(void (**)(uint64_t))(v5 - 8);
      v7 = swift_retain();
      v6(v7);
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DEF30D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE9A620();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DEF3130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *i;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[13];
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v25 = MEMORY[0x24BEE4AF8];
    sub_23DEAA4C0(0, v4, 0);
    v5 = v25;
    for (i = (_QWORD *)(a1 + 32); ; i += 27)
    {
      sub_23DEF4FB4(i, a2, (uint64_t)v23);
      if (v3)
        break;
      v3 = 0;
      v25 = v5;
      v10 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_23DEAA4C0(v9 > 1, v10 + 1, 1);
        v5 = v25;
      }
      *(_QWORD *)(v5 + 16) = v10 + 1;
      v11 = v5 + 216 * v10;
      v12 = v23[1];
      *(_OWORD *)(v11 + 32) = v23[0];
      *(_OWORD *)(v11 + 48) = v12;
      v13 = v23[2];
      v14 = v23[3];
      v15 = v23[5];
      *(_OWORD *)(v11 + 96) = v23[4];
      *(_OWORD *)(v11 + 112) = v15;
      *(_OWORD *)(v11 + 64) = v13;
      *(_OWORD *)(v11 + 80) = v14;
      v16 = v23[6];
      v17 = v23[7];
      v18 = v23[9];
      *(_OWORD *)(v11 + 160) = v23[8];
      *(_OWORD *)(v11 + 176) = v18;
      *(_OWORD *)(v11 + 128) = v16;
      *(_OWORD *)(v11 + 144) = v17;
      v19 = v23[10];
      v20 = v23[11];
      v21 = v23[12];
      *(_QWORD *)(v11 + 240) = v24;
      *(_OWORD *)(v11 + 208) = v20;
      *(_OWORD *)(v11 + 224) = v21;
      *(_OWORD *)(v11 + 192) = v19;
      if (!--v4)
        return v5;
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_23DEF3284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23DF06718(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  sub_23DEF92E4();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEF33E8(unint64_t a1)
{
  return sub_23DEF3C78(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_23DF10EE0);
}

uint64_t sub_23DEF33F4(unint64_t a1)
{
  return sub_23DEF3C78(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_23DF10F04);
}

uint64_t sub_23DEF3400(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  int isUniquelyReferenced_nonNull_native;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t (*v58)(unint64_t, char *, uint64_t);
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v72;
  unint64_t v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t);
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  unint64_t v85;
  unint64_t v86;

  v3 = sub_23DF14BA8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v80 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE95234(0, &qword_256D0E858, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v8, v9);
  v81 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = (char *)&v69 - v14;
  MEMORY[0x24BDAC7A8](v13, v16);
  v20 = (char *)&v69 - v19;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *v1;
  v23 = *(_QWORD *)(*v1 + 16);
  v24 = v23 + v21;
  if (__OFADD__(v23, v21))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v22;
  v79 = v15;
  if (!isUniquelyReferenced_nonNull_native || (v26 = *(_QWORD *)(v22 + 24) >> 1, v26 < v24))
  {
    if (v23 <= v24)
      v27 = v23 + v21;
    else
      v27 = v23;
    v22 = sub_23DF06C04(isUniquelyReferenced_nonNull_native, v27, 1, v22);
    *v1 = v22;
    v26 = *(_QWORD *)(v22 + 24) >> 1;
  }
  v28 = *(_QWORD *)(v22 + 16);
  v23 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24 = *(_QWORD *)(v4 + 72);
  v29 = v26 - v28;
  v30 = sub_23DF11370(&v82, v22 + v23 + v24 * v28, v26 - v28, a1);
  if (v30 < v21)
    goto LABEL_15;
  if (v30)
  {
    v33 = *(_QWORD *)(v22 + 16);
    v34 = __OFADD__(v33, v30);
    v35 = v33 + v30;
    if (v34)
    {
      __break(1u);
LABEL_20:
      v40 = v22 + 1;
      if (__OFADD__(v22, 1))
      {
        __break(1u);
      }
      else
      {
        v41 = ((unint64_t)v31 + 64) >> 6;
        v77 = v22;
        if (v40 >= v41)
          goto LABEL_40;
        v42 = *(_QWORD *)(v32 + 8 * v40);
        if (v42)
        {
LABEL_23:
          v37 = (v42 - 1) & v42;
          v38 = __clz(__rbit64(v42)) + (v40 << 6);
          v22 = v40;
          goto LABEL_18;
        }
        v43 = v22 + 2;
        v77 = v22 + 1;
        if ((uint64_t)(v22 + 2) >= v41)
          goto LABEL_40;
        v18 = v29;
        v17 = v21;
        v42 = *(_QWORD *)(v32 + 8 * v43);
        if (v42)
        {
LABEL_26:
          v40 = v43;
          goto LABEL_23;
        }
        v77 = v22 + 2;
        if ((uint64_t)(v22 + 3) >= v41)
          goto LABEL_40;
        v42 = *(_QWORD *)(v78 + 8 * (v22 + 3));
        if (v42)
        {
          v40 = v22 + 3;
          goto LABEL_23;
        }
        v43 = v22 + 4;
        v77 = v22 + 3;
        if ((uint64_t)(v22 + 4) >= v41)
          goto LABEL_40;
        v42 = *(_QWORD *)(v78 + 8 * v43);
        if (v42)
          goto LABEL_26;
        v40 = v22 + 5;
        v77 = v22 + 4;
        if ((uint64_t)(v22 + 5) >= v41)
        {
LABEL_40:
          v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v71(v20, 1, 1, v3);
          v39 = 0;
          v22 = v77;
          goto LABEL_41;
        }
        v42 = *(_QWORD *)(v78 + 8 * v40);
        if (v42)
          goto LABEL_23;
        v77 = v41 - 1;
        v44 = v22 + 6;
        while (v41 != v44)
        {
          v42 = *(_QWORD *)(v78 + 8 * v44++);
          if (v42)
          {
            v40 = v44 - 1;
            goto LABEL_23;
          }
        }
      }
      v21 = v17;
      v29 = v18;
      goto LABEL_40;
    }
    *(_QWORD *)(v22 + 16) = v35;
  }
  if (v30 != v29)
    return sub_23DEA8AD4();
LABEL_16:
  v29 = *(_QWORD *)(v22 + 16);
  v21 = v82;
  v32 = v83;
  v31 = v84;
  v22 = v85;
  v74 = v84;
  v78 = v83;
  if (!v86)
    goto LABEL_20;
  v37 = (v86 - 1) & v86;
  v38 = __clz(__rbit64(v86)) | (v85 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v20, *(_QWORD *)(v21 + 48) + v38 * v24, v3);
  v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v71(v20, 0, 1, v3);
  v39 = v37;
LABEL_41:
  v76 = v39;
  v77 = v22;
  v82 = v21;
  v83 = v78;
  v84 = v74;
  v85 = v22;
  v86 = v39;
  v45 = (uint64_t)v79;
  sub_23DEF9234((uint64_t)v20, (uint64_t)v79);
  v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v46 = v75(v45, 1, v3);
  v47 = v80;
  if (v46 == 1)
  {
LABEL_80:
    sub_23DEF9290((uint64_t)v20);
    sub_23DEA8AD4();
    return sub_23DEF9290((uint64_t)v79);
  }
  v48 = (uint64_t)v79;
  while (1)
  {
    sub_23DEF9290(v48);
    v49 = *(_QWORD *)(*v1 + 24);
    v50 = v49 >> 1;
    if ((uint64_t)(v49 >> 1) < v29 + 1)
    {
      v68 = sub_23DF06C04(v49 > 1, v29 + 1, 1, *v1);
      *v1 = v68;
      v78 = v68;
      v50 = *(_QWORD *)(v68 + 24) >> 1;
    }
    else
    {
      v78 = *v1;
    }
    v51 = v81;
    sub_23DEF9234((uint64_t)v20, v81);
    if (v75(v51, 1, v3) != 1)
      break;
    v52 = v81;
LABEL_49:
    sub_23DEF9290(v52);
    v53 = v29;
LABEL_44:
    *(_QWORD *)(*v1 + 16) = v53;
    v48 = (uint64_t)v79;
    sub_23DEF9234((uint64_t)v20, (uint64_t)v79);
    if (v75(v48, 1, v3) == 1)
    {
      v77 = v85;
      v78 = v83;
      v76 = v86;
      goto LABEL_80;
    }
  }
  v73 = v78 + v23;
  v74 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  if (v29 <= v50)
    v53 = v50;
  else
    v53 = v29;
  v52 = v81;
  v72 = v53;
  while (1)
  {
    v57 = v52;
    v58 = (uint64_t (*)(unint64_t, char *, uint64_t))v74;
    v74(v47, v57, v3);
    if (v29 == v53)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v47, v3);
      v29 = v53;
      goto LABEL_44;
    }
    sub_23DEF9290((uint64_t)v20);
    result = v58(v73 + v29 * v24, v47, v3);
    v59 = v82;
    v60 = v85;
    v77 = v83;
    v78 = v29;
    v76 = (unint64_t)v84;
    if (v86)
    {
      v54 = (v86 - 1) & v86;
      v61 = __clz(__rbit64(v86)) | (v85 << 6);
      goto LABEL_59;
    }
    v70 = v82;
    v63 = v85 + 1;
    if (__OFADD__(v85, 1))
      break;
    v64 = ((unint64_t)v84 + 64) >> 6;
    v62 = v85;
    if (v63 < v64)
    {
      v65 = *(_QWORD *)(v83 + 8 * v63);
      if (v65)
        goto LABEL_63;
      v66 = v85 + 2;
      v62 = v85 + 1;
      if ((uint64_t)(v85 + 2) < v64)
      {
        v65 = *(_QWORD *)(v83 + 8 * v66);
        if (v65)
          goto LABEL_66;
        v62 = v85 + 2;
        if ((uint64_t)(v85 + 3) < v64)
        {
          v65 = *(_QWORD *)(v83 + 8 * (v85 + 3));
          if (v65)
          {
            v63 = v85 + 3;
LABEL_63:
            v54 = (v65 - 1) & v65;
            v61 = __clz(__rbit64(v65)) + (v63 << 6);
            v60 = v63;
            v59 = v70;
LABEL_59:
            v55 = v59;
            (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v20, *(_QWORD *)(v59 + 48) + v61 * v24, v3);
            v71(v20, 0, 1, v3);
            v62 = v60;
            goto LABEL_55;
          }
          v66 = v85 + 4;
          v62 = v85 + 3;
          if ((uint64_t)(v85 + 4) < v64)
          {
            v65 = *(_QWORD *)(v83 + 8 * v66);
            if (v65)
            {
LABEL_66:
              v63 = v66;
              goto LABEL_63;
            }
            v63 = v85 + 5;
            v62 = v85 + 4;
            if ((uint64_t)(v85 + 5) < v64)
            {
              v65 = *(_QWORD *)(v83 + 8 * v63);
              if (v65)
                goto LABEL_63;
              v62 = v64 - 1;
              v67 = v85 + 6;
              while (v64 != v67)
              {
                v65 = *(_QWORD *)(v83 + 8 * v67++);
                if (v65)
                {
                  v63 = v67 - 1;
                  goto LABEL_63;
                }
              }
            }
          }
        }
      }
    }
    v71(v20, 1, 1, v3);
    v54 = 0;
    v55 = v70;
LABEL_55:
    v82 = v55;
    v29 = v78 + 1;
    v83 = v77;
    v84 = (void (*)(_QWORD, _QWORD, _QWORD))v76;
    v85 = v62;
    v86 = v54;
    v52 = v81;
    sub_23DEF9234((uint64_t)v20, v81);
    v56 = v75(v52, 1, v3);
    v47 = v80;
    v53 = v72;
    if (v56 == 1)
      goto LABEL_49;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DEF3B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23DF06F54(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEF3C6C(unint64_t a1)
{
  return sub_23DEF3C78(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_23DF11150);
}

uint64_t sub_23DEF3C78(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_23DF15298();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x242647BFC](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = sub_23DF15298();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_23DF14ED8();
  }
  __break(1u);
  return result;
}

uint64_t sub_23DEF3E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23DF071AC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[27 * v8 + 4];
  if (a1 + 32 < v9 + 216 * v2 && v9 < a1 + 32 + 216 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t WorkEpoch.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  sub_23DEF4398();
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 44) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v2;
  *(_WORD *)(v1 + 40) = 3;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

void WorkEpoch.priorityThreshold.setter(char *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char v5;

  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 11;
  v5 = *a1;
  os_unfair_lock_lock(v2 + 11);
  sub_23DEF4710(v3, v5);
  os_unfair_lock_unlock(v4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WorkEpoch.enqueue(_:environment:)(Swift::OpaquePointer _, Swift::OpaquePointer environment)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 11;
  os_unfair_lock_lock(v5 + 11);
  sub_23DEF4DD4(v6, _._rawValue, environment._rawValue);
  os_unfair_lock_unlock(v7);
}

void WorkEpoch.enqueue(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  sub_23DEF4A94(v4, a1);
  os_unfair_lock_unlock(v5);
}

void WorkEpoch.finish(_:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 11;
  os_unfair_lock_lock(v5 + 11);
  sub_23DEF5908(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

void WorkEpoch.pop()(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  sub_23DEF52B0(v4, a1);
  os_unfair_lock_unlock(v5);
}

void WorkEpoch.finish()(_QWORD *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  sub_23DEF4574(v4, a1);
  os_unfair_lock_unlock(v5);
}

Swift::Void __swiftcall WorkEpoch.didUpdate(environmentalState:)(Swift::OpaquePointer environmentalState)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  sub_23DEF5BF8(v4, environmentalState._rawValue);
  os_unfair_lock_unlock(v5);
}

uint64_t WorkEpoch.debugSnapshot.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DEF5D58(v2);
  os_unfair_lock_unlock(v3);
  return v5;
}

BOOL static WorkEpoch.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t WorkEpoch.Errors.hash(into:)()
{
  return sub_23DF15484();
}

uint64_t WorkEpoch.Errors.hashValue.getter()
{
  sub_23DF15478();
  sub_23DF15484();
  return sub_23DF154A8();
}

uint64_t WorkEpoch.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23DEF4398();
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 44) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v2;
  *(_WORD *)(v1 + 40) = 3;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

void sub_23DEF4398()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432E2E8)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25432E2E8);
  }
}

uint64_t sub_23DEF43F4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
  return result;
}

uint64_t sub_23DEF4404@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 16);
  return result;
}

_QWORD *sub_23DEF4414@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t *sub_23DEF4428@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[224];
  uint64_t *v6;

  v3 = *result;
  if (*result)
  {
    if ((*((_BYTE *)result + 25) & 1) != 0 || *(_QWORD *)(result[2] + 16))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      result = (uint64_t *)result[1];
      if (result[2])
      {
        v4 = (uint64_t)(result + 4);
        v6 = result;
        swift_bridgeObjectRetain();
        sub_23DEB2338(v4, (uint64_t)v5);
        __asm { BR              X9 }
      }
      LOBYTE(v3) = 1;
    }
  }
  *a2 = v3;
  return result;
}

uint64_t sub_23DEF4574@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;

  if ((*((_BYTE *)a1 + 25) & 1) != 0)
  {
    v2 = 2;
  }
  else
  {
    v3 = *a1;
    v2 = 1;
    if (*a1)
    {
      *((_BYTE *)a1 + 25) = 1;
      v4 = a1[1];
      a1[1] = MEMORY[0x24BEE4AF8];
      v5 = *(_QWORD *)(v3 + 32);
      *a2 = *(_QWORD *)(v3 + 24);
      a2[1] = v5;
      a2[2] = v4;
      return swift_retain();
    }
  }
  sub_23DEF8458();
  swift_allocError();
  *v7 = v2;
  return swift_willThrow();
}

void WorkEpoch.priorityThreshold.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 44));
  *a1 = *(_BYTE *)(v3 + 40);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 44));
}

void sub_23DEF4640(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  char v6;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 11;
  os_unfair_lock_lock(v3 + 11);
  sub_23DEF4704(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void sub_23DEF46A8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 11;
  os_unfair_lock_lock(v2 + 11);
  sub_23DEF6538(v3);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_23DEF4704@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 24);
  return result;
}

uint64_t sub_23DEF4710(uint64_t a1, char a2)
{
  double Current;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char v8;
  double *v9;
  uint64_t result;
  _BYTE v11[216];
  _BYTE v12[8];
  double v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[24];

  Current = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(a1 + 24) = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17[22] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DEAA4C0(0, v6, 0);
    sub_23DEB2338(v5 + 32, (uint64_t)v11);
    v8 = v11[0];
    sub_23DEB2338((uint64_t)v11, (uint64_t)v12);
    v9 = (double *)&v15;
    if (v14)
    {
      v9 = (double *)&v16;
      if (v14 != 1)
        v9 = (double *)v17;
    }
    *v9 = Current - v13 + *v9;
    v13 = Current;
    __asm { BR              X8 }
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v7;
  return result;
}

void (*WorkEpoch.priorityThreshold.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 44));
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v3 + 40);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 44));
  return sub_23DEF4A40;
}

void sub_23DEF4A40(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;
  char v3;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)a1 + 44);
  v2 = *(_QWORD *)a1 + 16;
  v3 = *(_BYTE *)(a1 + 8);
  os_unfair_lock_lock(v1);
  sub_23DEF4710(v2, v3);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_23DEF4A94(uint64_t a1, uint64_t a2)
{
  char v2;
  char *v4;
  uint64_t result;
  double Current;
  uint64_t v8;
  int64_t v9;
  double v10;
  char v11;
  double *v12;
  uint64_t v13;
  _BYTE v14[216];
  _BYTE v15[8];
  double v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[24];

  if ((*(_BYTE *)(a1 + 25) & 1) != 0)
  {
    v2 = 2;
LABEL_5:
    sub_23DEF8458();
    swift_allocError();
    *v4 = v2;
    return swift_willThrow();
  }
  if (*(_QWORD *)a1)
  {
    v2 = 0;
    goto LABEL_5;
  }
  Current = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)a1 = a2;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = Current;
    v20[22] = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_23DEAA4C0(0, v9, 0);
    sub_23DEB2338(v8 + 32, (uint64_t)v14);
    v11 = v14[0];
    sub_23DEB2338((uint64_t)v14, (uint64_t)v15);
    v12 = (double *)&v18;
    if (v17)
    {
      v12 = (double *)&v19;
      if (v17 != 1)
        v12 = (double *)v20;
    }
    *v12 = v10 - v16 + *v12;
    v16 = v10;
    __asm { BR              X8 }
  }
  swift_retain();
  v13 = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v13;
  return result;
}

uint64_t sub_23DEF4DD4(uint64_t a1, _QWORD *a2, void *a3)
{
  char v3;
  char *v5;
  uint64_t result;
  Swift::OpaquePointer v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  _BYTE v18[80];
  _QWORD v19[16];
  _QWORD *v20;

  if ((*(_BYTE *)(a1 + 25) & 1) != 0)
  {
    v3 = 2;
LABEL_5:
    sub_23DEF8458();
    swift_allocError();
    *v5 = v3;
    return swift_willThrow();
  }
  if (*(_QWORD *)a1)
  {
    v3 = 0;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v9._rawValue = a3;
  v10 = sub_23DEF84B8(a2, v9);
  swift_bridgeObjectRelease();
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v11 = (_QWORD **)(a1 + 8);
  swift_bridgeObjectRetain();
  v12 = sub_23DEF88A0((uint64_t *)(a1 + 8), (uint64_t)a2, &v20);
  result = swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (v13 < v12)
  {
    __break(1u);
  }
  else
  {
    sub_23DF087B4(v12, v13);
    v14 = v20[2];
    if (v14)
    {
      v15 = v20 + 4;
      swift_bridgeObjectRetain();
      do
      {
        sub_23DEB2338((uint64_t)v15, (uint64_t)v18);
        v16 = (void (*)(_QWORD *, uint64_t))v19[15];
        swift_retain();
        v16(v19, 1);
        swift_release();
        sub_23DEF1A70((uint64_t)v18);
        v15 += 27;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    v17 = sub_23DEF3130(v10, (uint64_t)&v20);
    swift_bridgeObjectRelease();
    sub_23DEF3E34(v17);
    sub_23DEF5240(v11, sub_23DEF6778);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23DEF4FB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;

  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v5)
  {
    swift_bridgeObjectRetain();
LABEL_11:
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v6 = *(_QWORD *)a2 + 32;
  v47 = a1 + 18;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    sub_23DEB2338(v6, (uint64_t)&v33);
    v7 = *((_QWORD *)&v43 + 1);
    v8 = v44;
    __swift_project_boxed_opaque_existential_1(&v42, *((uint64_t *)&v43 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v8 + 24))(&v19, v7, v8);
    v9 = v19;
    v10 = v20;
    v11 = a1[21];
    v12 = a1[22];
    __swift_project_boxed_opaque_existential_1(v47, v11);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 24))(&v17, v11, v12);
    v13 = v18;
    if (v9 == v17)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v14 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
        goto LABEL_4;
    }
    if (v10 == v13)
      break;
LABEL_4:
    sub_23DEF1A70((uint64_t)&v33);
    v6 += 216;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      v4 = a3;
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  v30 = v44;
  v31 = v45;
  v26 = v40;
  v27 = v41;
  v32 = v46;
  v28 = v42;
  v29 = v43;
  v21 = v35;
  v22 = v36;
  v23 = v37;
  v24 = v38;
  v25 = v39;
  v19 = v33;
  v20 = v34;
  swift_bridgeObjectRelease();
  v4 = a3;
  if (!(_QWORD)v24)
  {
LABEL_12:
    sub_23DE9A9BC((uint64_t)&v19, (uint64_t (*)(_QWORD))sub_23DEF9180);
    return sub_23DEB2338((uint64_t)a1, v4);
  }
  v43 = v29;
  v44 = v30;
  v45 = v31;
  v39 = v25;
  v40 = v26;
  v46 = v32;
  v41 = v27;
  v42 = v28;
  v35 = v21;
  v36 = v22;
  v37 = v23;
  v38 = v24;
  v33 = v19;
  v34 = v20;
  sub_23DEB1B1C((uint64_t)a1, a3);
  return sub_23DEF1A70((uint64_t)&v33);
}

uint64_t sub_23DEF5240(_QWORD **a1, uint64_t (*a2)(_QWORD *))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23DF07534(v4);
  v5 = v4[2];
  v7[0] = v4 + 4;
  v7[1] = v5;
  result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t sub_23DEF52B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  double Current;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD v54[3];
  __int128 v55;
  __int128 v56;
  _OWORD v57[11];
  uint64_t v58;
  _BYTE v59[64];
  uint64_t v60[3];
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[64];
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[16];
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  _OWORD v71[5];
  _OWORD v72[8];
  uint64_t v73;

  v2 = a1;
  v4 = a1 + 8;
  result = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(result + 16);
  if (!v5)
    goto LABEL_20;
  v48 = v4;
  v49 = a2;
  v6 = result + 32;
  swift_bridgeObjectRetain();
  v7 = 0;
  v50 = v2;
  v46 = v6;
  v47 = v5;
  while (2)
  {
    v8 = *(_QWORD *)(v2 + 16);
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      if (v7 >= *(_QWORD *)(*(_QWORD *)v48 + 16))
      {
        __break(1u);
      }
      else
      {
        sub_23DEB2338(*(_QWORD *)v48 + 216 * v7 + 32, (uint64_t)v71);
        v24 = *(_BYTE *)(v2 + 24);
        if (*(_QWORD *)v2 && *(_BYTE *)(*(_QWORD *)v2 + 40) != 4)
          v24 = *(_BYTE *)(*(_QWORD *)v2 + 40);
        if (qword_23DF1ACB8[SLOBYTE(v71[0])] >= qword_23DF1ACB8[v24])
        {
          result = sub_23DEF1A70((uint64_t)v71);
          *(_OWORD *)v49 = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)(v49 + 64) = 0u;
          *(_OWORD *)(v49 + 80) = 0u;
          *(_OWORD *)(v49 + 96) = 0u;
          *(_OWORD *)(v49 + 112) = 0u;
          *(_OWORD *)(v49 + 128) = 0u;
          *(_OWORD *)(v49 + 144) = 0u;
          *(_OWORD *)(v49 + 160) = 0u;
          *(_OWORD *)(v49 + 176) = 0u;
          *(_OWORD *)(v49 + 192) = 0u;
          *(_QWORD *)(v49 + 208) = 0;
          return result;
        }
        sub_23DEF57E8(v7, (uint64_t)&v55);
        sub_23DEF1A70((uint64_t)&v55);
        Current = CFAbsoluteTimeGetCurrent();
        sub_23DEB2338((uint64_t)v71, (uint64_t)&v55);
        if ((_BYTE)v56)
        {
          if (v56 == 1)
            v26 = (double *)v57;
          else
            v26 = (double *)v57 + 1;
        }
        else
        {
          v26 = (double *)&v56 + 1;
        }
        *v26 = Current - *((double *)&v55 + 1) + *v26;
        *((double *)&v55 + 1) = Current;
        v7 = *(_QWORD *)(v2 + 16);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
          goto LABEL_34;
      }
      result = (uint64_t)sub_23DF071AC(0, *(_QWORD *)(v7 + 16) + 1, 1, (_QWORD *)v7);
      v7 = result;
LABEL_34:
      v28 = *(_QWORD *)(v7 + 16);
      v27 = *(_QWORD *)(v7 + 24);
      if (v28 >= v27 >> 1)
      {
        result = (uint64_t)sub_23DF071AC((_QWORD *)(v27 > 1), v28 + 1, 1, (_QWORD *)v7);
        v7 = result;
      }
      *(_QWORD *)(v7 + 16) = v28 + 1;
      v29 = v7 + 216 * v28;
      v30 = v56;
      *(_OWORD *)(v29 + 32) = v55;
      *(_OWORD *)(v29 + 48) = v30;
      v31 = v57[0];
      v32 = v57[1];
      v33 = v57[3];
      *(_OWORD *)(v29 + 96) = v57[2];
      *(_OWORD *)(v29 + 112) = v33;
      *(_OWORD *)(v29 + 64) = v31;
      *(_OWORD *)(v29 + 80) = v32;
      v34 = v57[4];
      v35 = v57[5];
      v36 = v57[7];
      *(_OWORD *)(v29 + 160) = v57[6];
      *(_OWORD *)(v29 + 176) = v36;
      *(_OWORD *)(v29 + 128) = v34;
      *(_OWORD *)(v29 + 144) = v35;
      v37 = v57[8];
      v38 = v57[9];
      v39 = v57[10];
      *(_QWORD *)(v29 + 240) = v58;
      *(_OWORD *)(v29 + 208) = v38;
      *(_OWORD *)(v29 + 224) = v39;
      *(_OWORD *)(v29 + 192) = v37;
      *(_QWORD *)(v2 + 16) = v7;
      v40 = v72[6];
      *(_OWORD *)(v49 + 160) = v72[5];
      *(_OWORD *)(v49 + 176) = v40;
      *(_OWORD *)(v49 + 192) = v72[7];
      *(_QWORD *)(v49 + 208) = v73;
      v41 = v72[2];
      *(_OWORD *)(v49 + 96) = v72[1];
      *(_OWORD *)(v49 + 112) = v41;
      v42 = v72[4];
      *(_OWORD *)(v49 + 128) = v72[3];
      *(_OWORD *)(v49 + 144) = v42;
      v43 = v71[3];
      *(_OWORD *)(v49 + 32) = v71[2];
      *(_OWORD *)(v49 + 48) = v43;
      v44 = v72[0];
      *(_OWORD *)(v49 + 64) = v71[4];
      *(_OWORD *)(v49 + 80) = v44;
      v45 = v71[1];
      *(_OWORD *)v49 = v71[0];
      *(_OWORD *)(v49 + 16) = v45;
      return result;
    }
    v10 = v8 + 32;
    v51 = v7;
    v11 = v6 + 216 * v7 + 80;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      sub_23DEB2338(v10, (uint64_t)v71);
      swift_getObjectType();
      v12 = sub_23DEF937C();
      sub_23DEAC648((uint64_t)v72, (uint64_t)&v55);
      sub_23DEAC648(v11, (uint64_t)v67);
      if ((v12 & 1) == 0
        || (v13 = v57[0], v14 = v69, v15 = v70, v56 != v68) && (sub_23DF15400() & 1) == 0
        || v13 != __PAIR128__(v15, v14) && (sub_23DF15400() & 1) == 0)
      {
        sub_23DEAC67C((uint64_t)v67);
        sub_23DEAC67C((uint64_t)&v55);
        sub_23DEAC648((uint64_t)v72, (uint64_t)v63);
        sub_23DEAC648(v11, (uint64_t)v59);
        goto LABEL_6;
      }
      sub_23DEAC67C((uint64_t)v67);
      sub_23DEAC67C((uint64_t)&v55);
      sub_23DEAC648((uint64_t)v72, (uint64_t)v63);
      sub_23DEAC648(v11, (uint64_t)v59);
      v16 = v65;
      v17 = v66;
      __swift_project_boxed_opaque_existential_1(v64, v65);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 24))(v54, v16, v17);
      v18 = v54[0];
      v19 = v54[1];
      v52 = v54[2];
      v21 = v61;
      v20 = v62;
      __swift_project_boxed_opaque_existential_1(v60, v61);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v53, v21, v20);
      v22 = v53[2];
      if (v18 == v53[0] && v19 == v53[1])
        break;
      v23 = sub_23DF15400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        goto LABEL_17;
LABEL_6:
      sub_23DEAC67C((uint64_t)v63);
      sub_23DEAC67C((uint64_t)v59);
      sub_23DEF1A70((uint64_t)v71);
LABEL_7:
      v10 += 216;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v2 = v50;
        v7 = v51;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_17:
    sub_23DEAC67C((uint64_t)v63);
    sub_23DEAC67C((uint64_t)v59);
    sub_23DEF1A70((uint64_t)v71);
    if (v52 != v22)
      goto LABEL_7;
    swift_bridgeObjectRelease_n();
    v7 = v51 + 1;
    v6 = v46;
    v2 = v50;
    if (v51 + 1 != v47)
      continue;
    break;
  }
  result = swift_bridgeObjectRelease();
  a2 = v49;
LABEL_20:
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_23DEF57E8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_23DF07534(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[27 * a1];
    v8 = *((_OWORD *)v7 + 13);
    v9 = v6 - 1;
    *(_OWORD *)(a2 + 160) = *((_OWORD *)v7 + 12);
    *(_OWORD *)(a2 + 176) = v8;
    *(_OWORD *)(a2 + 192) = *((_OWORD *)v7 + 14);
    *(_QWORD *)(a2 + 208) = v7[30];
    v10 = *((_OWORD *)v7 + 9);
    *(_OWORD *)(a2 + 96) = *((_OWORD *)v7 + 8);
    *(_OWORD *)(a2 + 112) = v10;
    v11 = *((_OWORD *)v7 + 11);
    *(_OWORD *)(a2 + 128) = *((_OWORD *)v7 + 10);
    *(_OWORD *)(a2 + 144) = v11;
    v12 = *((_OWORD *)v7 + 5);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v7 + 4);
    *(_OWORD *)(a2 + 48) = v12;
    v13 = *((_OWORD *)v7 + 7);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)v7 + 6);
    *(_OWORD *)(a2 + 80) = v13;
    v14 = *((_OWORD *)v7 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v7 + 2);
    *(_OWORD *)(a2 + 16) = v14;
    v15 = v6 - 1 - a1;
    if (v15 >= 0)
    {
      result = (uint64_t)memmove(v7 + 4, v7 + 31, 216 * v15);
      v5[2] = v9;
      *v2 = v5;
      return result;
    }
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

uint64_t sub_23DEF5908@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  _OWORD v19[13];
  uint64_t v20;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v8 = v5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DEB2338(v8, (uint64_t)v19);
      if ((ScheduledWorkPlan.matches(_:)(a2) & 1) != 0)
        break;
      sub_23DEF1A70((uint64_t)v19);
      v8 += 216;
      if (!--v6)
        goto LABEL_7;
    }
    v9 = v19[11];
    *(_OWORD *)(a3 + 160) = v19[10];
    *(_OWORD *)(a3 + 176) = v9;
    *(_OWORD *)(a3 + 192) = v19[12];
    *(_QWORD *)(a3 + 208) = v20;
    v10 = v19[7];
    *(_OWORD *)(a3 + 96) = v19[6];
    *(_OWORD *)(a3 + 112) = v10;
    v11 = v19[9];
    *(_OWORD *)(a3 + 128) = v19[8];
    *(_OWORD *)(a3 + 144) = v11;
    v12 = v19[3];
    *(_OWORD *)(a3 + 32) = v19[2];
    *(_OWORD *)(a3 + 48) = v12;
    v13 = v19[5];
    *(_OWORD *)(a3 + 64) = v19[4];
    *(_OWORD *)(a3 + 80) = v13;
    v14 = v19[1];
    *(_OWORD *)a3 = v19[0];
    *(_OWORD *)(a3 + 16) = v14;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    *(_QWORD *)(a3 + 208) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  v15 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v15, v16);
  result = sub_23DEF6568(sub_23DEF849C);
  v18 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  if (v18 >= result)
    return sub_23DF087B4(result, v18);
  __break(1u);
  return result;
}

uint64_t sub_23DEF5A9C(uint64_t a1, uint64_t a2)
{
  char v3;
  void (*v4)();
  _OWORD v6[5];
  _OWORD v7[8];
  uint64_t v8;
  _BYTE v9[80];
  uint64_t v10;
  _BYTE v11[80];
  uint64_t v12;
  _OWORD v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[216];

  sub_23DEB2338(a1, (uint64_t)v23);
  sub_23DEF19C0((uint64_t)v23, (uint64_t)v11);
  sub_23DEF19C0(a2, (uint64_t)v13);
  if (v12)
  {
    sub_23DEF19C0((uint64_t)v11, (uint64_t)v9);
    if ((_QWORD)v14)
    {
      v7[5] = v19;
      v7[6] = v20;
      v7[7] = v21;
      v8 = v22;
      v7[1] = v15;
      v7[2] = v16;
      v7[3] = v17;
      v7[4] = v18;
      v6[2] = v13[2];
      v6[3] = v13[3];
      v6[4] = v13[4];
      v7[0] = v14;
      v6[0] = v13[0];
      v6[1] = v13[1];
      v3 = _s19HealthOrchestration17ScheduledWorkPlanV2eeoiySbAC_ACtFZ_0((uint64_t)&v10, (uint64_t)v7);
      sub_23DEF1A70((uint64_t)v6);
      v4 = sub_23DEF9180;
      sub_23DE9A9BC((uint64_t)v23, (uint64_t (*)(_QWORD))sub_23DEF9180);
      sub_23DEF1A70((uint64_t)v9);
    }
    else
    {
      sub_23DE9A9BC((uint64_t)v23, (uint64_t (*)(_QWORD))sub_23DEF9180);
      sub_23DEF1A70((uint64_t)v9);
      v3 = 0;
      v4 = sub_23DEF91D4;
    }
  }
  else
  {
    sub_23DE9A9BC((uint64_t)v23, (uint64_t (*)(_QWORD))sub_23DEF9180);
    if ((_QWORD)v14)
      v4 = sub_23DEF91D4;
    else
      v4 = sub_23DEF9180;
    if ((_QWORD)v14)
      v3 = 0;
    else
      v3 = -1;
  }
  sub_23DE9A9BC((uint64_t)v11, (uint64_t (*)(_QWORD))v4);
  return v3 & 1;
}

uint64_t sub_23DEF5BF8(uint64_t a1, void *a2)
{
  uint64_t *v4;
  int64_t *v5;
  Swift::OpaquePointer v6;
  uint64_t v7;
  uint64_t result;

  CFAbsoluteTimeGetCurrent();
  v4 = (uint64_t *)(a1 + 8);
  swift_bridgeObjectRetain();
  v5 = (int64_t *)swift_bridgeObjectRetain();
  v6._rawValue = a2;
  v7 = sub_23DEF7DCC(v5, v6);
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease();
  *v4 = v7;
  return result;
}

uint64_t WorkEpoch.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t WorkEpoch.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_23DEF5D04()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DEF6550(v2);
  os_unfair_lock_unlock(v3);
}

void sub_23DEF5D58(uint64_t a1)
{
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;

  sub_23DE95234(0, (unint64_t *)&qword_25432C2C0, (uint64_t (*)(uint64_t))sub_23DE9ACDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DF16AB0;
  *(_QWORD *)(inited + 32) = 0x6574617473;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  if ((*(_BYTE *)(a1 + 25) & 1) != 0)
  {
    v3 = 0xE800000000000000;
    v4 = 0x64656873696E6966;
  }
  else
  {
    v4 = 0x6465736F6C63;
    if (*(_QWORD *)a1)
    {
      v3 = 0xE600000000000000;
    }
    else
    {
      v4 = 1852141679;
      v3 = 0xE400000000000000;
    }
  }
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = 0xD000000000000011;
  *(_QWORD *)(inited + 72) = 0x800000023DF1D7B0;
  __asm { BR              X13 }
}

_QWORD *sub_23DEF5E7C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[10] = 0x746E65677275;
  v3[11] = 0xE600000000000000;
  v3[12] = v1 + 8;
  v3[13] = 0x800000023DF1D820;
  if (*(_QWORD *)v2 && *(_BYTE *)(*(_QWORD *)v2 + 40) != 4)
    v0 = *(unsigned __int8 *)(*(_QWORD *)v2 + 40);
  return ((_QWORD *(*)())((char *)sub_23DEF5F20 + 4 * byte_23DF1AB6C[v0]))();
}

_QWORD *sub_23DEF5F20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *result;

  *(_QWORD *)(v1 + 112) = 0x746E65677275;
  *(_QWORD *)(v1 + 120) = 0xE600000000000000;
  strcpy((char *)(v1 + 128), "pendingCount");
  *(_BYTE *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 142) = -5120;
  *(_QWORD *)(v1 + 144) = sub_23DF153C4();
  *(_QWORD *)(v1 + 152) = v2;
  *(_QWORD *)(v1 + 160) = 0x6F43657669746361;
  *(_QWORD *)(v1 + 168) = 0xEB00000000746E75;
  *(_QWORD *)(v1 + 176) = sub_23DF153C4();
  *(_QWORD *)(v1 + 184) = v3;
  v4 = sub_23DE930F0(v1);
  v5 = sub_23DE935F0(MEMORY[0x24BEE4AF8]);
  type metadata accessor for DebugSnapshot();
  result = (_QWORD *)swift_allocObject();
  result[2] = 0x6F7045206B726F57;
  result[3] = 0xEA00000000006863;
  result[4] = v4;
  result[5] = v5;
  *v0 = result;
  return result;
}

unint64_t sub_23DEF6074()
{
  unint64_t result;

  result = qword_256D0FBF8;
  if (!qword_256D0FBF8)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkEpoch.Errors, &type metadata for WorkEpoch.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0FBF8);
  }
  return result;
}

uint64_t sub_23DEF60B8()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 11;
  os_unfair_lock_lock(v1 + 11);
  sub_23DEF5D58(v2);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t type metadata accessor for WorkEpoch()
{
  return objc_opt_self();
}

uint64_t method lookup function for WorkEpoch()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WorkEpoch.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for WorkEpoch.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DEF61A0 + 4 * byte_23DF1AB75[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DEF61D4 + 4 * byte_23DF1AB70[v4]))();
}

uint64_t sub_23DEF61D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEF61DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEF61E4);
  return result;
}

uint64_t sub_23DEF61F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEF61F8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DEF61FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEF6204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkEpoch.Errors()
{
  return &type metadata for WorkEpoch.Errors;
}

uint64_t destroy for WorkEpoch.Result()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthOrchestration9WorkEpochC6ResultVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for WorkEpoch.Result(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WorkEpoch.Result(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for WorkEpoch.Result()
{
  return &type metadata for WorkEpoch.Result;
}

uint64_t destroy for WorkEpoch.State()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkEpoch.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkEpoch.State(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t assignWithTake for WorkEpoch.State(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkEpoch.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkEpoch.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkEpoch.State()
{
  return &type metadata for WorkEpoch.State;
}

uint64_t sub_23DEF6538(uint64_t a1)
{
  uint64_t v1;

  return sub_23DEF4710(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_23DEF6550(uint64_t a1)
{
  uint64_t v1;

  return sub_23DEF5BF8(a1, *(void **)(v1 + 16));
}

uint64_t sub_23DEF6568(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t i;
  char v8;
  uint64_t result;
  unint64_t v10;
  unint64_t j;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v16;
  _BYTE v17[216];
  _BYTE v18[224];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (!v4)
    return 0;
  swift_bridgeObjectRetain();
  v6 = 0;
  for (i = 31; ; i += 27)
  {
    v8 = a1(v3 + i * 8 - 216);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
    if ((v8 & 1) != 0)
      break;
    if (v4 == ++v6)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v3 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    v10 = *(_QWORD *)(v3 + 16);
    if (v6 + 1 == v10)
      return v6;
    for (j = v6 + 1; j < v10; ++j)
    {
      sub_23DEB2338(v3 + i * 8, (uint64_t)v18);
      v12 = a1((uint64_t)v18);
      result = sub_23DEF1A70((uint64_t)v18);
      if ((v12 & 1) == 0)
      {
        if (j != v6)
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_31;
          v13 = (_QWORD *)*v1;
          v14 = *(_QWORD *)(*v1 + 16);
          if (v6 >= v14)
            goto LABEL_32;
          result = sub_23DEB2338((uint64_t)&v13[27 * v6 + 4], (uint64_t)v18);
          if (j >= v14)
            goto LABEL_33;
          sub_23DEB2338((uint64_t)&v13[i], (uint64_t)v17);
          result = swift_isUniquelyReferenced_nonNull_native();
          *v1 = (uint64_t)v13;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23DF07534(v13);
            v13 = (_QWORD *)result;
            *v1 = result;
          }
          if (v6 >= v13[2])
            goto LABEL_34;
          result = sub_23DEF83C0((uint64_t)v17, (uint64_t)&v13[27 * v6 + 4]);
          if (j >= *(_QWORD *)(*v1 + 16))
            goto LABEL_35;
          result = sub_23DEF83C0((uint64_t)v18, *v1 + i * 8);
        }
        if (__OFADD__(v6++, 1))
          goto LABEL_30;
      }
      v16 = j + 1;
      if (__OFADD__(j, 1))
        goto LABEL_29;
      v3 = *v1;
      v10 = *(_QWORD *)(*v1 + 16);
      i += 27;
      if (v16 == v10)
        return v6;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23DEF6778(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *__dst;
  _BYTE v118[192];
  double v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v2 = v1;
  v3 = a1;
  v4 = a1[1];
  result = sub_23DF153B8();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_150;
    if (v4)
      return sub_23DEF71A0(0, v4, 1, v3);
  }
  else
  {
    if (v4 >= 0)
      v6 = v4;
    else
      v6 = v4 + 1;
    if (v4 < -1)
    {
LABEL_158:
      result = sub_23DF15280();
      __break(1u);
      return result;
    }
    v110 = result;
    if (v4 >= 2)
    {
      v7 = v6 >> 1;
      v8 = sub_23DF14EFC();
      *(_QWORD *)(v8 + 16) = v7;
      v109 = v8;
      __dst = (char *)(v8 + 32);
      goto LABEL_13;
    }
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 == 1)
    {
      v109 = MEMORY[0x24BEE4AF8];
LABEL_13:
      v10 = 0;
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v113 = v3;
      while (1)
      {
        v13 = v10++;
        v112 = v13;
        if (v10 < v4)
        {
          v114 = v4;
          v14 = *v3;
          sub_23DEB2338(*v3 + 216 * v10, (uint64_t)&v120);
          v111 = v14;
          sub_23DEB2338(v14 + 216 * v13, (uint64_t)v118);
          v15 = qword_23DF1ACB8[(char)v120];
          v16 = qword_23DF1ACB8[v118[0]];
          if (v15 >= v16)
            v17 = v16 >= v15 && *(double *)&v132 < v119;
          else
            v17 = 1;
          sub_23DEF1A70((uint64_t)v118);
          sub_23DEF1A70((uint64_t)&v120);
          v10 = v13 + 2;
          if (v13 + 2 < v114)
          {
            v18 = v14 + 216 * v13 + 216;
            while (1)
            {
              sub_23DEB2338(v18 + 216, (uint64_t)&v120);
              sub_23DEB2338(v18, (uint64_t)v118);
              v19 = qword_23DF1ACB8[(char)v120];
              v20 = qword_23DF1ACB8[v118[0]];
              v21 = v19 < v20 || v20 >= v19 && *(double *)&v132 < v119;
              sub_23DEF1A70((uint64_t)v118);
              sub_23DEF1A70((uint64_t)&v120);
              if (v17 != v21)
                break;
              ++v10;
              v18 += 216;
              if (v114 == v10)
              {
                v10 = v114;
                break;
              }
            }
            v13 = v112;
          }
          if (v17)
          {
            if (v10 < v13)
              goto LABEL_151;
            if (v13 < v10)
            {
              v134 = v2;
              v22 = v13;
              v23 = (_OWORD *)(v111 + 216 * v10 - 216);
              v24 = (_OWORD *)(v111 + 216 * v13);
              v25 = v10;
              v26 = v10;
              v27 = v22;
              do
              {
                if (v27 != --v26)
                {
                  if (!v111)
                    goto LABEL_156;
                  v130 = v24[10];
                  v131 = v24[11];
                  v132 = v24[12];
                  v133 = *((_QWORD *)v24 + 26);
                  v126 = v24[6];
                  v127 = v24[7];
                  v128 = v24[8];
                  v129 = v24[9];
                  v122 = v24[2];
                  v123 = v24[3];
                  v124 = v24[4];
                  v125 = v24[5];
                  v120 = *v24;
                  v121 = v24[1];
                  memmove(v24, v23, 0xD8uLL);
                  v23[10] = v130;
                  v23[11] = v131;
                  v23[12] = v132;
                  *((_QWORD *)v23 + 26) = v133;
                  v23[6] = v126;
                  v23[7] = v127;
                  v23[8] = v128;
                  v23[9] = v129;
                  v23[2] = v122;
                  v23[3] = v123;
                  v23[4] = v124;
                  v23[5] = v125;
                  *v23 = v120;
                  v23[1] = v121;
                }
                ++v27;
                v23 = (_OWORD *)((char *)v23 - 216);
                v24 = (_OWORD *)((char *)v24 + 216);
              }
              while (v27 < v26);
              v2 = v134;
              v10 = v25;
              v13 = v112;
            }
          }
          v4 = v114;
        }
        if (v10 >= v4)
          goto LABEL_65;
        if (__OFSUB__(v10, v13))
          goto LABEL_149;
        if (v10 - v13 >= v110)
          goto LABEL_65;
        if (__OFADD__(v13, v110))
          goto LABEL_152;
        v28 = v13 + v110 >= v4 ? v4 : v13 + v110;
        if (v28 < v13)
          break;
        if (v10 == v28)
          goto LABEL_65;
        v134 = v2;
        v29 = 216 * v10;
        v115 = v28;
        while (2)
        {
          v30 = v112;
          v31 = v29;
          while (1)
          {
            v32 = v10;
            v33 = *v3 + v31;
            sub_23DEB2338(v33, (uint64_t)&v120);
            sub_23DEB2338(v33 - 216, (uint64_t)v118);
            v34 = qword_23DF1ACB8[(char)v120];
            v35 = qword_23DF1ACB8[v118[0]];
            if (v34 >= v35)
              break;
            sub_23DEF1A70((uint64_t)v118);
            sub_23DEF1A70((uint64_t)&v120);
            v10 = v32;
LABEL_61:
            if (!*v3)
              goto LABEL_154;
            v38 = *v3 + v31;
            v130 = *(_OWORD *)(v38 + 160);
            v131 = *(_OWORD *)(v38 + 176);
            v132 = *(_OWORD *)(v38 + 192);
            v133 = *(_QWORD *)(v38 + 208);
            v126 = *(_OWORD *)(v38 + 96);
            v127 = *(_OWORD *)(v38 + 112);
            v128 = *(_OWORD *)(v38 + 128);
            v129 = *(_OWORD *)(v38 + 144);
            v122 = *(_OWORD *)(v38 + 32);
            v123 = *(_OWORD *)(v38 + 48);
            v124 = *(_OWORD *)(v38 + 64);
            v125 = *(_OWORD *)(v38 + 80);
            v120 = *(_OWORD *)v38;
            v121 = *(_OWORD *)(v38 + 16);
            v39 = *(_OWORD *)(v38 - 40);
            *(_OWORD *)(v38 + 160) = *(_OWORD *)(v38 - 56);
            *(_OWORD *)(v38 + 176) = v39;
            *(_OWORD *)(v38 + 192) = *(_OWORD *)(v38 - 24);
            *(_QWORD *)(v38 + 208) = *(_QWORD *)(v38 - 8);
            v40 = *(_OWORD *)(v38 - 104);
            *(_OWORD *)(v38 + 96) = *(_OWORD *)(v38 - 120);
            *(_OWORD *)(v38 + 112) = v40;
            v41 = *(_OWORD *)(v38 - 72);
            *(_OWORD *)(v38 + 128) = *(_OWORD *)(v38 - 88);
            *(_OWORD *)(v38 + 144) = v41;
            v42 = *(_OWORD *)(v38 - 168);
            *(_OWORD *)(v38 + 32) = *(_OWORD *)(v38 - 184);
            *(_OWORD *)(v38 + 48) = v42;
            v43 = *(_OWORD *)(v38 - 136);
            *(_OWORD *)(v38 + 64) = *(_OWORD *)(v38 - 152);
            *(_OWORD *)(v38 + 80) = v43;
            v44 = *(_OWORD *)(v38 - 200);
            *(_OWORD *)v38 = *(_OWORD *)(v38 - 216);
            *(_OWORD *)(v38 + 16) = v44;
            *(_OWORD *)(v38 - 56) = v130;
            *(_OWORD *)(v38 - 40) = v131;
            *(_OWORD *)(v38 - 24) = v132;
            *(_QWORD *)(v38 - 8) = v133;
            *(_OWORD *)(v38 - 120) = v126;
            *(_OWORD *)(v38 - 104) = v127;
            *(_OWORD *)(v38 - 88) = v128;
            *(_OWORD *)(v38 - 72) = v129;
            *(_OWORD *)(v38 - 184) = v122;
            *(_OWORD *)(v38 - 168) = v123;
            *(_OWORD *)(v38 - 152) = v124;
            *(_OWORD *)(v38 - 136) = v125;
            *(_OWORD *)(v38 - 216) = v120;
            *(_OWORD *)(v38 - 200) = v121;
            v31 -= 216;
            if (v10 == ++v30)
              goto LABEL_55;
          }
          v10 = v32;
          if (v35 >= v34)
          {
            v36 = *(double *)&v132;
            v37 = v119;
            sub_23DEF1A70((uint64_t)v118);
            sub_23DEF1A70((uint64_t)&v120);
            if (v36 >= v37)
              goto LABEL_55;
            goto LABEL_61;
          }
          sub_23DEF1A70((uint64_t)v118);
          sub_23DEF1A70((uint64_t)&v120);
LABEL_55:
          ++v10;
          v29 += 216;
          if (v10 != v115)
            continue;
          break;
        }
        v10 = v115;
        v2 = v134;
        v13 = v112;
LABEL_65:
        if (v10 < v13)
          goto LABEL_144;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_23DEF77DC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v46 = *((_QWORD *)v11 + 2);
        v45 = *((_QWORD *)v11 + 3);
        v12 = v46 + 1;
        v134 = v2;
        if (v46 >= v45 >> 1)
          v11 = sub_23DEF77DC((char *)(v45 > 1), v46 + 1, 1, v11);
        *((_QWORD *)v11 + 2) = v12;
        v47 = v11 + 32;
        v48 = &v11[16 * v46 + 32];
        *(_QWORD *)v48 = v112;
        *((_QWORD *)v48 + 1) = v10;
        if (v46)
        {
          v116 = v10;
          while (1)
          {
            v49 = v12 - 1;
            if (v12 >= 4)
            {
              v54 = &v47[16 * v12];
              v55 = *((_QWORD *)v54 - 8);
              v56 = *((_QWORD *)v54 - 7);
              v60 = __OFSUB__(v56, v55);
              v57 = v56 - v55;
              if (v60)
                goto LABEL_133;
              v59 = *((_QWORD *)v54 - 6);
              v58 = *((_QWORD *)v54 - 5);
              v60 = __OFSUB__(v58, v59);
              v52 = v58 - v59;
              v53 = v60;
              if (v60)
                goto LABEL_134;
              v61 = v12 - 2;
              v62 = &v47[16 * v12 - 32];
              v64 = *(_QWORD *)v62;
              v63 = *((_QWORD *)v62 + 1);
              v60 = __OFSUB__(v63, v64);
              v65 = v63 - v64;
              if (v60)
                goto LABEL_136;
              v60 = __OFADD__(v52, v65);
              v66 = v52 + v65;
              if (v60)
                goto LABEL_139;
              if (v66 >= v57)
              {
                v84 = &v47[16 * v49];
                v86 = *(_QWORD *)v84;
                v85 = *((_QWORD *)v84 + 1);
                v60 = __OFSUB__(v85, v86);
                v87 = v85 - v86;
                if (v60)
                  goto LABEL_143;
                v77 = v52 < v87;
                goto LABEL_103;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v78 = *((_QWORD *)v11 + 4);
                v79 = *((_QWORD *)v11 + 5);
                v60 = __OFSUB__(v79, v78);
                v71 = v79 - v78;
                v72 = v60;
                goto LABEL_97;
              }
              v51 = *((_QWORD *)v11 + 4);
              v50 = *((_QWORD *)v11 + 5);
              v60 = __OFSUB__(v50, v51);
              v52 = v50 - v51;
              v53 = v60;
            }
            if ((v53 & 1) != 0)
              goto LABEL_135;
            v61 = v12 - 2;
            v67 = &v47[16 * v12 - 32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v70 = __OFSUB__(v68, v69);
            v71 = v68 - v69;
            v72 = v70;
            if (v70)
              goto LABEL_138;
            v73 = &v47[16 * v49];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v60 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v60)
              goto LABEL_141;
            if (__OFADD__(v71, v76))
              goto LABEL_142;
            if (v71 + v76 >= v52)
            {
              v77 = v52 < v76;
LABEL_103:
              if (v77)
                v49 = v61;
              goto LABEL_105;
            }
LABEL_97:
            if ((v72 & 1) != 0)
              goto LABEL_137;
            v80 = &v47[16 * v49];
            v82 = *(_QWORD *)v80;
            v81 = *((_QWORD *)v80 + 1);
            v60 = __OFSUB__(v81, v82);
            v83 = v81 - v82;
            if (v60)
              goto LABEL_140;
            if (v83 < v71)
              goto LABEL_15;
LABEL_105:
            v88 = v11;
            v89 = v49 - 1;
            if (v49 - 1 >= v12)
            {
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
              goto LABEL_153;
            }
            v90 = *v3;
            if (!*v3)
              goto LABEL_155;
            v91 = &v47[16 * v89];
            v92 = *(_QWORD *)v91;
            v93 = v47;
            v94 = v49;
            v95 = &v47[16 * v49];
            v96 = *((_QWORD *)v95 + 1);
            v97 = v134;
            sub_23DEF7418((char *)(v90 + 216 * *(_QWORD *)v91), (char *)(v90 + 216 * *(_QWORD *)v95), v90 + 216 * v96, __dst);
            v134 = v97;
            if (v97)
              goto LABEL_113;
            if (v96 < v92)
              goto LABEL_130;
            if (v94 > *((_QWORD *)v88 + 2))
              goto LABEL_131;
            *(_QWORD *)v91 = v92;
            *(_QWORD *)&v93[16 * v89 + 8] = v96;
            v98 = *((_QWORD *)v88 + 2);
            if (v94 >= v98)
              goto LABEL_132;
            v11 = v88;
            v12 = v98 - 1;
            memmove(v95, v95 + 16, 16 * (v98 - 1 - v94));
            v47 = v93;
            *((_QWORD *)v88 + 2) = v98 - 1;
            v3 = v113;
            v10 = v116;
            if (v98 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v4 = v3[1];
        v2 = v134;
        if (v10 >= v4)
        {
          v9 = v109;
          goto LABEL_116;
        }
      }
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_116:
    v99 = v11;
    v109 = v9;
    if (v12 >= 2)
    {
      v100 = *v3;
      do
      {
        v101 = v12 - 2;
        if (v12 < 2)
          goto LABEL_145;
        if (!v100)
          goto LABEL_157;
        v102 = v99;
        v103 = *(_QWORD *)&v99[16 * v101 + 32];
        v104 = *(_QWORD *)&v99[16 * v12 + 24];
        sub_23DEF7418((char *)(v100 + 216 * v103), (char *)(v100 + 216 * *(_QWORD *)&v99[16 * v12 + 16]), v100 + 216 * v104, __dst);
        if (v2)
          break;
        if (v104 < v103)
          goto LABEL_146;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v102 = sub_23DEF7D18((uint64_t)v102);
        if (v101 >= *((_QWORD *)v102 + 2))
          goto LABEL_147;
        v105 = v102 + 32;
        v106 = &v102[16 * v101 + 32];
        *(_QWORD *)v106 = v103;
        *((_QWORD *)v106 + 1) = v104;
        v107 = v102;
        v108 = *((_QWORD *)v102 + 2);
        if (v12 > v108)
          goto LABEL_148;
        memmove(&v105[16 * v12 - 16], &v105[16 * v12], 16 * (v108 - v12));
        v99 = v107;
        *((_QWORD *)v107 + 2) = v108 - 1;
        v12 = v108 - 1;
      }
      while (v108 > 2);
    }
LABEL_113:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v109 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23DEF71A0(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[192];
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v7 = 216 * a3;
LABEL_6:
    v8 = v38;
    v9 = v7;
    while (1)
    {
      v10 = *a4 + v9;
      sub_23DEB2338(v10, (uint64_t)&v24);
      sub_23DEB2338(v10 - 216, (uint64_t)v22);
      v11 = qword_23DF1ACB8[(char)v24];
      v12 = qword_23DF1ACB8[v22[0]];
      if (v11 >= v12)
      {
        if (v12 < v11)
        {
          sub_23DEF1A70((uint64_t)v22);
          result = sub_23DEF1A70((uint64_t)&v24);
LABEL_5:
          ++v5;
          v7 += 216;
          if (v5 == a2)
            return result;
          goto LABEL_6;
        }
        v13 = *(double *)&v36;
        v14 = v23;
        sub_23DEF1A70((uint64_t)v22);
        result = sub_23DEF1A70((uint64_t)&v24);
        if (v13 >= v14)
          goto LABEL_5;
      }
      else
      {
        sub_23DEF1A70((uint64_t)v22);
        result = sub_23DEF1A70((uint64_t)&v24);
      }
      if (!*a4)
        break;
      v15 = *a4 + v9;
      v34 = *(_OWORD *)(v15 + 160);
      v35 = *(_OWORD *)(v15 + 176);
      v36 = *(_OWORD *)(v15 + 192);
      v37 = *(_QWORD *)(v15 + 208);
      v30 = *(_OWORD *)(v15 + 96);
      v31 = *(_OWORD *)(v15 + 112);
      v32 = *(_OWORD *)(v15 + 128);
      v33 = *(_OWORD *)(v15 + 144);
      v26 = *(_OWORD *)(v15 + 32);
      v27 = *(_OWORD *)(v15 + 48);
      v28 = *(_OWORD *)(v15 + 64);
      v29 = *(_OWORD *)(v15 + 80);
      v24 = *(_OWORD *)v15;
      v25 = *(_OWORD *)(v15 + 16);
      v16 = *(_OWORD *)(v15 - 40);
      *(_OWORD *)(v15 + 160) = *(_OWORD *)(v15 - 56);
      *(_OWORD *)(v15 + 176) = v16;
      *(_OWORD *)(v15 + 192) = *(_OWORD *)(v15 - 24);
      *(_QWORD *)(v15 + 208) = *(_QWORD *)(v15 - 8);
      v17 = *(_OWORD *)(v15 - 104);
      *(_OWORD *)(v15 + 96) = *(_OWORD *)(v15 - 120);
      *(_OWORD *)(v15 + 112) = v17;
      v18 = *(_OWORD *)(v15 - 72);
      *(_OWORD *)(v15 + 128) = *(_OWORD *)(v15 - 88);
      *(_OWORD *)(v15 + 144) = v18;
      v19 = *(_OWORD *)(v15 - 168);
      *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 - 184);
      *(_OWORD *)(v15 + 48) = v19;
      v20 = *(_OWORD *)(v15 - 136);
      *(_OWORD *)(v15 + 64) = *(_OWORD *)(v15 - 152);
      *(_OWORD *)(v15 + 80) = v20;
      v21 = *(_OWORD *)(v15 - 200);
      *(_OWORD *)v15 = *(_OWORD *)(v15 - 216);
      *(_OWORD *)(v15 + 16) = v21;
      *(_OWORD *)(v15 - 56) = v34;
      *(_OWORD *)(v15 - 40) = v35;
      *(_OWORD *)(v15 - 24) = v36;
      *(_QWORD *)(v15 - 8) = v37;
      *(_OWORD *)(v15 - 120) = v30;
      *(_OWORD *)(v15 - 104) = v31;
      *(_OWORD *)(v15 - 88) = v32;
      *(_OWORD *)(v15 - 72) = v33;
      *(_OWORD *)(v15 - 184) = v26;
      *(_OWORD *)(v15 - 168) = v27;
      *(_OWORD *)(v15 - 152) = v28;
      *(_OWORD *)(v15 - 136) = v29;
      *(_OWORD *)(v15 - 216) = v24;
      *(_OWORD *)(v15 - 200) = v25;
      v9 -= 216;
      if (v5 == ++v8)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DEF7418(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  double v17;
  double v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  char *v26;
  unint64_t v27;
  uint64_t result;
  _BYTE v29[192];
  double v30;
  _BYTE v31[192];
  double v32;
  unint64_t v33;
  char *v34;
  char *v35;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 216;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 216;
  v35 = __src;
  v34 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -215)
    {
      if (__dst != a2 || &a2[216 * v11] <= __dst)
        memmove(__dst, a2, 216 * v11);
      v20 = &v4[216 * v11];
      v33 = (unint64_t)v20;
      v35 = v6;
      if (__src < v6 && v10 >= 216)
      {
        v21 = (char *)(a3 - 216);
        do
        {
          sub_23DEB2338((uint64_t)(v20 - 216), (uint64_t)v31);
          v22 = (unint64_t)(v6 - 216);
          sub_23DEB2338((uint64_t)(v6 - 216), (uint64_t)v29);
          v23 = qword_23DF1ACB8[v31[0]];
          v24 = qword_23DF1ACB8[v29[0]];
          v25 = v23 < v24 || v24 >= v23 && v32 < v30;
          v26 = v21 + 216;
          sub_23DEF1A70((uint64_t)v29);
          sub_23DEF1A70((uint64_t)v31);
          if (v25)
          {
            if (v26 != v6 || v21 >= v6)
              memmove(v21, v6 - 216, 0xD8uLL);
            v35 -= 216;
            v20 = (char *)v33;
            if (v33 <= (unint64_t)v4)
              break;
          }
          else
          {
            v27 = v33;
            v20 = (char *)(v33 - 216);
            v33 -= 216;
            if ((unint64_t)v26 < v27 || (unint64_t)v21 >= v27 || v26 != (char *)v27)
              memmove(v21, (const void *)(v27 - 216), 0xD8uLL);
            v22 = (unint64_t)v6;
            if (v20 <= v4)
              break;
          }
          v21 -= 216;
          v6 = (char *)v22;
        }
        while (v22 > (unint64_t)__src);
      }
LABEL_49:
      sub_23DEF7C58((void **)&v35, (const void **)&v34, &v33);
      return 1;
    }
  }
  else if (v8 >= -215)
  {
    if (__dst != __src || &__src[216 * v9] <= __dst)
      memmove(__dst, __src, 216 * v9);
    v12 = (unint64_t)&v4[216 * v9];
    v33 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 216)
    {
      while (1)
      {
        sub_23DEB2338((uint64_t)v6, (uint64_t)v31);
        sub_23DEB2338((uint64_t)v4, (uint64_t)v29);
        v13 = qword_23DF1ACB8[v31[0]];
        v14 = qword_23DF1ACB8[v29[0]];
        if (v13 >= v14)
        {
          if (v14 < v13)
          {
            sub_23DEF1A70((uint64_t)v29);
            sub_23DEF1A70((uint64_t)v31);
LABEL_17:
            v15 = v35;
            v19 = v34 + 216;
            if (v35 != v34 || v35 >= v19)
              memmove(v35, v34, 0xD8uLL);
            v34 = v19;
            v16 = (unint64_t)v6;
            goto LABEL_22;
          }
          v17 = v32;
          v18 = v30;
          sub_23DEF1A70((uint64_t)v29);
          sub_23DEF1A70((uint64_t)v31);
          if (v17 >= v18)
            goto LABEL_17;
        }
        else
        {
          sub_23DEF1A70((uint64_t)v29);
          sub_23DEF1A70((uint64_t)v31);
        }
        v15 = v35;
        v16 = (unint64_t)(v6 + 216);
        if (v35 >= v6 && (unint64_t)v35 < v16 && v35 == v6)
          v15 = v6;
        else
          memmove(v35, v6, 0xD8uLL);
LABEL_22:
        v35 = v15 + 216;
        v4 = v34;
        if ((unint64_t)v34 < v12)
        {
          v6 = (char *)v16;
          if (v16 < a3)
            continue;
        }
        goto LABEL_49;
      }
    }
    goto LABEL_49;
  }
  result = sub_23DF152D4();
  __break(1u);
  return result;
}

char *sub_23DEF77DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DE95234(0, &qword_256D0FC00, (uint64_t (*)(uint64_t))sub_23DEF83FC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23DEF78E8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_23DF152D4();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_23DEF7990(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 31;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)sub_23DF152D4();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
      return (char *)memmove(result, v3, 32 * v7);
  }
  return result;
}

char *sub_23DEF7A38(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_23DF152D4();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_23DEF7AE4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    result = (char *)sub_23DF152D4();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
      return (char *)memmove(result, v3, 48 * v6);
  }
  return result;
}

char *sub_23DEF7BA0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)sub_23DF152D4();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_23DEF7C58(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -216)
  {
    result = (char *)sub_23DF152D4();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 216;
    if (result != v3 || result >= &v3[216 * v6])
      return (char *)memmove(result, v3, 216 * v6);
  }
  return result;
}

char *sub_23DEF7D18(uint64_t a1)
{
  return sub_23DEF77DC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DEF7D2C(uint64_t a1)
{
  return sub_23DEAA514(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DEF7D40(_QWORD *a1)
{
  return sub_23DEAA690(0, a1[2], 0, a1);
}

uint64_t sub_23DEF7D54(uint64_t a1)
{
  return sub_23DEAA9B4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_23DEF7D68()
{
  JUMPOUT(0x242647DF4);
}

uint64_t sub_23DEF7D7C(uint64_t a1)
{
  return sub_23DEAB1C0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DEF7D90(uint64_t a1)
{
  return sub_23DEAB358(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DEF7DA4(uint64_t a1)
{
  return sub_23DEAAB24(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DEF7DB8(_QWORD *a1)
{
  return sub_23DEAAFE0(0, a1[2], 0, a1);
}

uint64_t sub_23DEF7DCC(int64_t *a1, Swift::OpaquePointer a2)
{
  int64_t v2;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Bool v14;
  int v15;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;

  v2 = a1[2];
  if (v2)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_23DEAA4C0(0, v2, 0);
    v17 = a1 + 4;
    v5 = a1[25];
    v6 = v17[22];
    __swift_project_boxed_opaque_existential_1(v17 + 18, v17[21]);
    (*(void (**)(uint64_t *__return_ptr, int64_t, uint64_t))(v6 + 32))(&v21, v5, v6);
    v7 = v21;
    v20 = v22;
    v8 = *(_QWORD *)(v21 + 16);
    if (!v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v9 = v21 + 32;
    swift_bridgeObjectRetain();
    v10 = 0;
    v18 = v8;
    while (1)
    {
      if (v10 >= *(_QWORD *)(v7 + 16))
      {
        __break(1u);
        JUMPOUT(0x23DEF8390);
      }
      v11 = (unsigned __int8 *)(v9 + 16 * v10);
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v12)
        break;
LABEL_4:
      if (++v10 == v8)
      {
        swift_bridgeObjectRelease_n();
LABEL_13:
        v15 = v20;
LABEL_14:
        __asm { BR              X9 }
      }
    }
    v19 = v11[8];
    swift_bridgeObjectRetain_n();
    v13 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = EnvironmentalStateDescription.matches(_:)(a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
        break;
      if (v12 == ++v13)
      {
        swift_bridgeObjectRelease_n();
        v9 = v7 + 32;
        v8 = v18;
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v15 = v19;
    goto LABEL_14;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23DEF83C0(uint64_t a1, uint64_t a2)
{
  assignWithTake for EnqueuedWorkPlan(a2, a1);
  return a2;
}

void sub_23DEF83FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0FC08)
  {
    v0 = sub_23DF14FEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0FC08);
  }
}

unint64_t sub_23DEF8458()
{
  unint64_t result;

  result = qword_256D0FC10;
  if (!qword_256D0FC10)
  {
    result = MEMORY[0x2426483D0](&protocol conformance descriptor for WorkEpoch.Errors, &type metadata for WorkEpoch.Errors);
    atomic_store(result, (unint64_t *)&qword_256D0FC10);
  }
  return result;
}

uint64_t sub_23DEF849C(uint64_t a1)
{
  uint64_t v1;

  return sub_23DEF5A9C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_23DEF84B8(_QWORD *a1, Swift::OpaquePointer a2)
{
  int64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Bool v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  _BYTE v22[144];
  CFAbsoluteTime Current;
  __int128 v24;
  _BYTE v25[40];
  __int128 v26;
  uint64_t v27;

  v2 = a1[2];
  if (v2)
  {
    v27 = MEMORY[0x24BEE4AF8];
    sub_23DEAA4C0(0, v2, 0);
    sub_23DEAC648((uint64_t)(a1 + 4), (uint64_t)v22);
    v5 = a1[15];
    v6 = a1[16];
    __swift_project_boxed_opaque_existential_1(a1 + 12, v5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 32))(&v20, v5, v6);
    v7 = v20;
    v8 = v21;
    v9 = *(_QWORD *)(v20 + 16);
    if (!v9)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v10 = v20 + 32;
    swift_bridgeObjectRetain();
    v11 = 0;
    v17 = v9;
    v18 = v8;
    while (1)
    {
      if (v11 >= *(_QWORD *)(v7 + 16))
      {
        __break(1u);
        JUMPOUT(0x23DEF8890);
      }
      v12 = (unsigned __int8 *)(v10 + 16 * v11);
      v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      if (v13)
        break;
LABEL_4:
      if (++v11 == v9)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_13;
      }
    }
    v19 = v12[8];
    swift_bridgeObjectRetain_n();
    v14 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = EnvironmentalStateDescription.matches(_:)(a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15)
        break;
      if (v13 == ++v14)
      {
        swift_bridgeObjectRelease_n();
        v9 = v17;
        v8 = v18;
        v10 = v7 + 32;
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v8 = v19;
LABEL_13:
    memset(v25, 0, 32);
    v24 = 0u;
    v25[32] = 1;
    sub_23DEAC648((uint64_t)v22, (uint64_t)&v26);
    v22[136] = v8;
    Current = CFAbsoluteTimeGetCurrent();
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23DEF88A0(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  char v61;
  _QWORD *v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  _OWORD v92[4];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _OWORD v106[4];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[8];
  uint64_t v121[3];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v3 = *a1;
  v81 = *(_QWORD *)(v3 + 16);
  if (!v81)
    return 0;
  v80 = v3 + 32;
  v124 = *(_QWORD *)(a2 + 16);
  v77 = v3;
  swift_bridgeObjectRetain();
  v5 = 0;
  v79 = (uint64_t *)(a2 + 72);
  v83 = a2;
  while (!v124)
  {
LABEL_4:
    if (++v5 == v81)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v77 + 16);
    }
  }
  v85 = v5;
  v6 = v80 + 216 * v5;
  v7 = v6 + 80;
  v89 = (uint64_t *)(v6 + 112);
  v90 = (_QWORD *)(v6 + 96);
  swift_bridgeObjectRetain();
  v8 = v79;
  v9 = v124;
  v88 = v7;
  while (1)
  {
    v10 = *(v8 - 1);
    v11 = *v8;
    v13 = *v89;
    v12 = v89[1];
    v14 = *(v8 - 3) == *v90 && *(v8 - 2) == v90[1];
    if (!v14 && (sub_23DF15400() & 1) == 0
      || (v10 == v13 ? (v15 = v11 == v12) : (v15 = 0), !v15 && (sub_23DF15400() & 1) == 0))
    {
      sub_23DEAC648((uint64_t)(v8 - 5), (uint64_t)v106);
      sub_23DEAC648(v7, (uint64_t)v92);
      sub_23DEAC67C((uint64_t)v106);
      sub_23DEAC67C((uint64_t)v92);
      sub_23DEAC648((uint64_t)(v8 - 5), (uint64_t)v120);
      goto LABEL_8;
    }
    sub_23DEAC648((uint64_t)(v8 - 5), (uint64_t)v106);
    sub_23DEAC648(v7, (uint64_t)v92);
    v16 = *((_QWORD *)&v108 + 1);
    v17 = v109;
    __swift_project_boxed_opaque_existential_1(&v107, *((uint64_t *)&v108 + 1));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 24))(v120, v16, v17);
    v18 = (_QWORD *)v120[0];
    v19 = (_QWORD *)v120[1];
    v20 = v120[2];
    v21 = *((_QWORD *)&v94 + 1);
    v22 = v95;
    __swift_project_boxed_opaque_existential_1(&v93, *((uint64_t *)&v94 + 1));
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(v22 + 24))(&v117, v21, v22);
    v23 = v119;
    if (v18 == v117 && v19 == v118)
      break;
    v24 = sub_23DF15400();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      goto LABEL_25;
    sub_23DEAC67C((uint64_t)v106);
    sub_23DEAC67C((uint64_t)v92);
    sub_23DEAC648((uint64_t)(v8 - 5), (uint64_t)v120);
    v7 = v88;
LABEL_8:
    sub_23DEAC648(v7, (uint64_t)&v117);
LABEL_9:
    sub_23DEAC67C((uint64_t)v120);
    sub_23DEAC67C((uint64_t)&v117);
LABEL_10:
    v8 += 17;
    if (!--v9)
    {
      swift_bridgeObjectRelease();
      v5 = v85;
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_25:
  sub_23DEAC67C((uint64_t)v106);
  sub_23DEAC67C((uint64_t)v92);
  sub_23DEAC648((uint64_t)(v8 - 5), (uint64_t)v120);
  v7 = v88;
  sub_23DEAC648(v88, (uint64_t)&v117);
  if (v20 != v23)
    goto LABEL_9;
  swift_getObjectType();
  v25 = sub_23DEF937C();
  sub_23DEAC67C((uint64_t)v120);
  sub_23DEAC67C((uint64_t)&v117);
  if ((v25 & 1) == 0)
    goto LABEL_10;
  v26 = v83;
  swift_bridgeObjectRelease();
  v27 = v85;
  sub_23DEB2338(v80 + 216 * v85, (uint64_t)v106);
  v28 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_92;
  while (1)
  {
    v31 = v28[2];
    v30 = v28[3];
    v32 = v77;
    if (v31 >= v30 >> 1)
    {
      v28 = sub_23DF071AC((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
      v32 = v77;
      *a3 = v28;
    }
    v28[2] = v31 + 1;
    v33 = &v28[27 * v31];
    v34 = v106[1];
    *((_OWORD *)v33 + 2) = v106[0];
    *((_OWORD *)v33 + 3) = v34;
    v35 = v106[2];
    v36 = v106[3];
    v37 = v108;
    *((_OWORD *)v33 + 6) = v107;
    *((_OWORD *)v33 + 7) = v37;
    *((_OWORD *)v33 + 4) = v35;
    *((_OWORD *)v33 + 5) = v36;
    v38 = v109;
    v39 = v110;
    v40 = v112;
    *((_OWORD *)v33 + 10) = v111;
    *((_OWORD *)v33 + 11) = v40;
    *((_OWORD *)v33 + 8) = v38;
    *((_OWORD *)v33 + 9) = v39;
    v41 = v113;
    v42 = v114;
    v43 = v115;
    v33[30] = v116;
    *((_OWORD *)v33 + 13) = v42;
    *((_OWORD *)v33 + 14) = v43;
    *((_OWORD *)v33 + 12) = v41;
    v44 = v32;
    result = swift_bridgeObjectRelease();
    v46 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    v47 = *(_QWORD *)(v44 + 16);
    if (v46 == v47)
      return v27;
    v82 = (uint64_t *)(v26 + 72);
LABEL_35:
    if (v46 >= v47)
    {
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    v86 = v27;
    v87 = v46;
    sub_23DEB2338(v44 + 216 * v46 + 32, (uint64_t)v106);
    swift_bridgeObjectRetain();
    v48 = 0;
    v49 = v82;
    do
    {
      v50 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
        goto LABEL_84;
      }
      v28 = (_QWORD *)*(v49 - 1);
      v51 = *v49;
      v27 = *((_QWORD *)&v110 + 1);
      v26 = v110;
      v52 = *(v49 - 3) == (_QWORD)v109 && *(v49 - 2) == *((_QWORD *)&v109 + 1);
      if (!v52 && (sub_23DF15400() & 1) == 0
        || (v28 == (_QWORD *)v26 ? (v53 = v51 == v27) : (v53 = 0), !v53 && (sub_23DF15400() & 1) == 0))
      {
        sub_23DEAC648((uint64_t)(v49 - 5), (uint64_t)v92);
        sub_23DEAC648((uint64_t)&v108, (uint64_t)v120);
        sub_23DEAC67C((uint64_t)v92);
        sub_23DEAC67C((uint64_t)v120);
        sub_23DEAC648((uint64_t)(v49 - 5), (uint64_t)&v117);
LABEL_38:
        sub_23DEAC648((uint64_t)&v108, (uint64_t)&v103);
LABEL_39:
        sub_23DEAC67C((uint64_t)&v117);
        sub_23DEAC67C((uint64_t)&v103);
        goto LABEL_40;
      }
      sub_23DEAC648((uint64_t)(v49 - 5), (uint64_t)v92);
      sub_23DEAC648((uint64_t)&v108, (uint64_t)v120);
      v54 = *((_QWORD *)&v94 + 1);
      v55 = v95;
      __swift_project_boxed_opaque_existential_1(&v93, *((uint64_t *)&v94 + 1));
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(v55 + 24))(&v117, v54, v55);
      v26 = (uint64_t)v117;
      v56 = v118;
      v91 = v119;
      v57 = v122;
      v58 = v123;
      __swift_project_boxed_opaque_existential_1(v121, v122);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v58 + 24))(&v103, v57, v58);
      v28 = v104;
      v27 = v105;
      if (v26 == v103 && v56 == v104)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v26 = sub_23DF15400();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          sub_23DEAC67C((uint64_t)v92);
          sub_23DEAC67C((uint64_t)v120);
          sub_23DEAC648((uint64_t)(v49 - 5), (uint64_t)&v117);
          goto LABEL_38;
        }
      }
      sub_23DEAC67C((uint64_t)v92);
      sub_23DEAC67C((uint64_t)v120);
      sub_23DEAC648((uint64_t)(v49 - 5), (uint64_t)&v117);
      sub_23DEAC648((uint64_t)&v108, (uint64_t)&v103);
      if (v91 != v27)
        goto LABEL_39;
      v28 = v117;
      swift_getObjectType();
      v59 = sub_23DEF937C();
      sub_23DEAC67C((uint64_t)&v117);
      sub_23DEAC67C((uint64_t)&v103);
      if ((v59 & 1) != 0)
      {
        v26 = v83;
        swift_bridgeObjectRelease();
        sub_23DEB2338((uint64_t)v106, (uint64_t)v92);
        v62 = *a3;
        v63 = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v62;
        if ((v63 & 1) == 0)
        {
          v62 = sub_23DF071AC(0, v62[2] + 1, 1, v62);
          *a3 = v62;
        }
        v27 = v86;
        v65 = v62[2];
        v64 = v62[3];
        v28 = (_QWORD *)(v65 + 1);
        if (v65 >= v64 >> 1)
        {
          v62 = sub_23DF071AC((_QWORD *)(v64 > 1), v65 + 1, 1, v62);
          *a3 = v62;
        }
        v62[2] = v28;
        v66 = &v62[27 * v65];
        v67 = v92[1];
        *((_OWORD *)v66 + 2) = v92[0];
        *((_OWORD *)v66 + 3) = v67;
        v68 = v92[2];
        v69 = v92[3];
        v70 = v94;
        *((_OWORD *)v66 + 6) = v93;
        *((_OWORD *)v66 + 7) = v70;
        *((_OWORD *)v66 + 4) = v68;
        *((_OWORD *)v66 + 5) = v69;
        v71 = v95;
        v72 = v96;
        v73 = v98;
        *((_OWORD *)v66 + 10) = v97;
        *((_OWORD *)v66 + 11) = v73;
        *((_OWORD *)v66 + 8) = v71;
        *((_OWORD *)v66 + 9) = v72;
        v74 = v99;
        v75 = v100;
        v76 = v101;
        v66[30] = v102;
        *((_OWORD *)v66 + 13) = v75;
        *((_OWORD *)v66 + 14) = v76;
        *((_OWORD *)v66 + 12) = v74;
        sub_23DEF1A70((uint64_t)v106);
        v46 = v87 + 1;
        if (__OFADD__(v87, 1))
          goto LABEL_85;
LABEL_71:
        v44 = *a1;
        v47 = *(_QWORD *)(*a1 + 16);
        if (v46 != v47)
          goto LABEL_35;
        return v27;
      }
LABEL_40:
      v49 += 17;
      ++v48;
    }
    while (v50 != v124);
    v26 = v83;
    swift_bridgeObjectRelease();
    sub_23DEF1A70((uint64_t)v106);
    v27 = v86;
    if (v86 == v87)
      goto LABEL_69;
    if ((v86 & 0x8000000000000000) != 0)
      goto LABEL_87;
    v60 = (_QWORD *)*a1;
    v28 = *(_QWORD **)(*a1 + 16);
    if (v86 >= (unint64_t)v28)
      goto LABEL_88;
    sub_23DEB2338((uint64_t)&v60[27 * v86 + 4], (uint64_t)v106);
    if (v87 >= (unint64_t)v28)
      goto LABEL_89;
    sub_23DEB2338((uint64_t)&v60[27 * v87 + 4], (uint64_t)v92);
    v61 = swift_isUniquelyReferenced_nonNull_native();
    *a1 = (uint64_t)v60;
    if ((v61 & 1) == 0)
    {
      v60 = sub_23DF07534(v60);
      *a1 = (uint64_t)v60;
    }
    if (v86 < v60[2])
    {
      sub_23DEF83C0((uint64_t)v92, (uint64_t)&v60[27 * v86 + 4]);
      if (v87 >= *(_QWORD *)(*a1 + 16))
        goto LABEL_91;
      sub_23DEF83C0((uint64_t)v106, *a1 + 216 * v87 + 32);
LABEL_69:
      v27 = v86 + 1;
      if (__OFADD__(v86, 1))
        goto LABEL_86;
      v46 = v87 + 1;
      if (__OFADD__(v87, 1))
        goto LABEL_85;
      goto LABEL_71;
    }
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    v28 = sub_23DF071AC(0, v28[2] + 1, 1, v28);
    *a3 = v28;
  }
  __break(1u);
  return result;
}

void sub_23DEF9180()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25432DC70[0])
  {
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, qword_25432DC70);
  }
}

void sub_23DEF91D4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25432E0E8)
  {
    sub_23DEF9180();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25432E0E8);
  }
}

uint64_t sub_23DEF9234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE95234(0, &qword_256D0E858, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DEF9290(uint64_t a1)
{
  uint64_t v2;

  sub_23DE95234(0, &qword_256D0E858, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DEF92E4()
{
  unint64_t result;

  result = qword_25432C280;
  if (!qword_25432C280)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25432C280);
  }
  return result;
}

uint64_t dispatch thunk of WorkContext.contextDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of WorkContext.logger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ContextProviderDelegate.didUpdate(contexts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ContextProvider.context(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ContextProvider.start(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ContextProvider.stop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_23DEF937C()
{
  char v0;

  sub_23DEA8CEC();
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    v0 = sub_23DF14DDC();
    swift_unknownObjectRelease();
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

void OptionalValueAnchor.init(identifier:value:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  type metadata accessor for OptionalValueAnchor();
}

uint64_t sub_23DEF9468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 52);
  v4 = sub_23DF150F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void type metadata accessor for OptionalValueAnchor()
{
  JUMPOUT(0x242648388);
}

uint64_t OptionalValueAnchor.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t OptionalValueAnchor.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = sub_23DF150F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t OptionalValueAnchor.hasDifference(from:for:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v59 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1, v4);
  v52 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v6;
  v7 = sub_23DF150F4();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v54 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v9);
  v55 = (char *)&v51 - v11;
  v60 = *(_QWORD *)(v7 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v53 = (char *)&v51 - v18;
  MEMORY[0x24BDAC7A8](v17, v19);
  v21 = (char *)&v51 - v20;
  v22 = sub_23DF150F4();
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v27 = (char *)&v51 - v26;
  v28 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v25, v29);
  v31 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v56, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v27, 1, a3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v27, a3);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    v35(v21, v57 + *(int *)(a3 + 52), v7);
    v36 = &v31[*(int *)(a3 + 52)];
    v57 = TupleTypeMetadata2;
    v37 = *(int *)(TupleTypeMetadata2 + 48);
    v38 = v55;
    v39 = &v55[v37];
    v35(v55, (uint64_t)v21, v7);
    v35(v39, (uint64_t)v36, v7);
    v40 = v58;
    v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
    if (v41(v38, 1, v58) == 1)
    {
      v42 = v38;
      v43 = *(void (**)(char *, uint64_t))(v60 + 8);
      v43(v21, v7);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, a3);
      if (v41(v39, 1, v40) == 1)
      {
        v43(v42, v7);
        v34 = 0;
        return v34 & 1;
      }
    }
    else
    {
      v56 = v31;
      v44 = v53;
      v35(v53, (uint64_t)v38, v7);
      if (v41(v39, 1, v40) != 1)
      {
        v45 = v59;
        v46 = v52;
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v52, v39, v40);
        v47 = sub_23DF14DDC();
        v48 = *(void (**)(char *, uint64_t))(v45 + 8);
        v48(v46, v40);
        v49 = *(void (**)(char *, uint64_t))(v60 + 8);
        v49(v21, v7);
        (*(void (**)(char *, uint64_t))(v28 + 8))(v56, a3);
        v48(v44, v40);
        v49(v55, v7);
        v34 = v47 ^ 1;
        return v34 & 1;
      }
      v42 = v38;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v7);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v56, a3);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v40);
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v57);
    v34 = 1;
    return v34 & 1;
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  v32 = v57 + *(int *)(a3 + 52);
  v33 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v15, v32, v7);
  v34 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v15, 1, v58) != 1;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v7);
  return v34 & 1;
}

uint64_t OptionalValueAnchor.merged(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t static OptionalValueAnchor.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  _QWORD v22[2];
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v23 = a5;
  v25 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v22[0] = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DF150F4();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22[1] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2, v12);
  v15 = MEMORY[0x24BDAC7A8](v13, v14);
  v24 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  MEMORY[0x24BDAC7A8](v18, v19);
  if (*a1 == *a2 && a1[1] == a2[1] || (v20 = sub_23DF15400(), result = 0, (v20 & 1) != 0))
  {
    v27 = a3;
    v28 = a4;
    v29 = v23;
    v30 = a6;
    v23 = a6;
    type metadata accessor for OptionalValueAnchor();
  }
  return result;
}

uint64_t sub_23DEF9CB8(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF1AF18, a1);
  return sub_23DF154CC();
}

uint64_t sub_23DEF9CEC(uint64_t a1)
{
  MEMORY[0x2426483D0](&unk_23DF1AF18, a1);
  return sub_23DF154D8();
}

void OptionalValueAnchor.encode(to:)()
{
  type metadata accessor for OptionalValueAnchor.CodingKeys();
}

uint64_t sub_23DEF9D68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x2426483D0](&unk_23DF1AF18, a1);
  v4 = sub_23DF153A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v12 - v7;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23DF154C0();
  v9 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v3 - 112) = *(_QWORD *)v2;
  *(_QWORD *)(v3 - 104) = v9;
  *(_OWORD *)(v3 - 96) = *(_OWORD *)(v2 + 16);
  *(_BYTE *)(v3 - 65) = 0;
  sub_23DE90E54();
  v10 = *(_QWORD *)(v3 - 120);
  sub_23DF15388();
  if (!v10)
  {
    *(_BYTE *)(v3 - 112) = 1;
    sub_23DF15358();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void type metadata accessor for OptionalValueAnchor.CodingKeys()
{
  JUMPOUT(0x242648388);
}

void OptionalValueAnchor.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[16];

  v12[3] = a5;
  v9 = sub_23DF150F4();
  v12[1] = *(_QWORD *)(v9 - 8);
  v12[2] = v9;
  MEMORY[0x24BDAC7A8](v9, v10);
  v12[6] = (char *)v12 - v11;
  v12[12] = a1;
  v12[13] = a2;
  v12[14] = a3;
  v12[15] = a4;
  type metadata accessor for OptionalValueAnchor.CodingKeys();
}

void sub_23DEF9F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x2426483D0](&unk_23DF1AF18, a1);
  v6 = sub_23DF15340();
  *(_QWORD *)(v5 - 128) = v6;
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  *(_QWORD *)(v5 - 152) = v4;
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 112) = v4;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 96) = v3;
  *(_QWORD *)(v5 - 88) = v2;
  type metadata accessor for OptionalValueAnchor();
}

uint64_t sub_23DEF9FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v4 - 176) = a1;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v7 = (char *)&v15 - v6;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  *(_QWORD *)(v4 - 136) = v2;
  v8 = *(_QWORD *)(v4 - 120);
  sub_23DF154B4();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 120) = v5;
  v10 = *(_QWORD *)(v4 - 176);
  v9 = *(_QWORD *)(v4 - 168);
  v11 = *(_QWORD *)(v4 - 160);
  *(_BYTE *)(v4 - 65) = 0;
  sub_23DE90B4C();
  sub_23DF15334();
  v12 = *(_QWORD *)(v4 - 104);
  *(_QWORD *)v7 = *(_QWORD *)(v4 - 112);
  *((_QWORD *)v7 + 1) = v12;
  *((_OWORD *)v7 + 1) = *(_OWORD *)(v4 - 96);
  *(_BYTE *)(v4 - 112) = 1;
  sub_23DF15304();
  (*(void (**)(_QWORD, _QWORD))(v9 + 8))(*(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 128));
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v4 - 200) + 32))(&v7[*(int *)(v10 + 52)], v11, *(_QWORD *)(v4 - 192));
  v13 = *(_QWORD *)(v4 - 120);
  (*(void (**)(_QWORD, char *, uint64_t))(v13 + 16))(*(_QWORD *)(v4 - 184), v7, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v7, v10);
}

uint64_t sub_23DEFA164(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x2426483D0](&protocol conformance descriptor for OptionalValueAnchor<A>);
  a1[2] = MEMORY[0x2426483D0](&protocol conformance descriptor for OptionalValueAnchor<A>, a2);
  result = MEMORY[0x2426483D0](&protocol conformance descriptor for OptionalValueAnchor<A>, a2);
  a1[3] = result;
  return result;
}

void sub_23DEFA1BC(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  OptionalValueAnchor.init(from:)(a1[2], a1[3], a1[4], a1[5], a2);
}

void sub_23DEFA1DC()
{
  OptionalValueAnchor.encode(to:)();
}

uint64_t sub_23DEFA1F0(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  return static OptionalValueAnchor.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_23DEFA200()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DF150F4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DEFA278(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 32) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = a2[3];
    a1[2] = a2[2];
    a1[3] = v14;
    v15 = (void *)(((unint64_t)a1 + v7 + 32) & ~v7);
    v16 = (const void *)(((unint64_t)a2 + v7 + 32) & ~v7);
    v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_23DEFA3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_QWORD *sub_23DEFA424(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  size_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 32) & ~v8);
  v10 = (const void *)(((unint64_t)a2 + v8 + 32) & ~v8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v12 = *(_QWORD *)(v7 + 64);
    else
      v12 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_23DEFA4FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 32) & ~v8);
  v10 = (void *)(((unint64_t)a2 + v8 + 32) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

_OWORD *sub_23DEFA644(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)a1 + v7 + 32) & ~v7);
  v9 = (const void *)(((unint64_t)a2 + v7 + 32) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
  }
  return a1;
}

_QWORD *sub_23DEFA700(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)a1 + v10 + 32) & ~v10);
  v12 = (void *)(((unint64_t)a2 + v10 + 32) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
  return a1;
}

uint64_t sub_23DEFA828(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 32) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if ((v6 & 0x80000000) != 0)
      {
        v18 = (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v9 + 32) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 8);
        if (v17 >= 0xFFFFFFFF)
          LODWORD(v17) = -1;
        return (v17 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_23DEFA9A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_23DEFABFC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23DEFAC04()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23DEFAC24()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23DEFAC2C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23DEFAC3C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23DEFAC48(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DEFAC94 + 4 * byte_23DF1AD57[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DEFACC8 + 4 * byte_23DF1AD52[v4]))();
}

uint64_t sub_23DEFACC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEFACD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DEFACD8);
  return result;
}

uint64_t sub_23DEFACE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DEFACECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DEFACF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DEFACF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23DEFAD04()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEFAD14()
{
  JUMPOUT(0x2426483D0);
}

void sub_23DEFAD24()
{
  JUMPOUT(0x2426483D0);
}

uint64_t MockDispatchTarget.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  sub_23DEFAFB4();
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = sub_23DEFAF78;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t MockDispatchTarget.init()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DEFAFB4();
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = sub_23DEFAF78;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t MockDispatchTarget.run(_:for:context:completion:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _OWORD *, _QWORD *, _QWORD *);
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  _QWORD v20[2];
  _QWORD v21[2];
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v17 = a2[1];
  v18 = *a2;
  v11 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  swift_beginAccess();
  v13 = *(_QWORD *)(v6 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 32));
  v14 = *(void (**)(uint64_t, _OWORD *, _QWORD *, _QWORD *))(v13 + 16);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 32));
  swift_release();
  v22[0] = v18;
  v22[1] = v17;
  v23 = v11;
  v24 = v12;
  v21[0] = a3;
  v21[1] = a4;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = a6;
  v20[0] = sub_23DECFF48;
  v20[1] = v15;
  swift_retain();
  v14(a1, v22, v21, v20);
  swift_release();
  return swift_release();
}

uint64_t (*MockDispatchTarget.runHandler.getter())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  return sub_23DEFB5A4;
}

uint64_t sub_23DEFAF78(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(uint64_t *))
{
  void (*v4)(uint64_t *);
  uint64_t v6;

  v4 = *a4;
  v6 = 0;
  swift_retain();
  v4(&v6);
  return swift_release();
}

void sub_23DEFAFB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0FC60)
  {
    sub_23DEFB018();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DF151E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0FC60);
  }
}

unint64_t sub_23DEFB018()
{
  unint64_t result;

  result = qword_256D0FC68;
  if (!qword_256D0FC68)
  {
    sub_23DE95524(255, (unint64_t *)&qword_25432D878);
    sub_23DE95524(255, (unint64_t *)&qword_25432C268);
    sub_23DEFB0C0();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D0FC68);
  }
  return result;
}

unint64_t sub_23DEFB0C0()
{
  unint64_t result;

  result = qword_256D0FC70;
  if (!qword_256D0FC70)
  {
    sub_23DEFB110();
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&qword_256D0FC70);
  }
  return result;
}

void sub_23DEFB110()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D0FC78)
  {
    sub_23DEFB164();
    v0 = sub_23DF150F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D0FC78);
  }
}

unint64_t sub_23DEFB164()
{
  unint64_t result;

  result = qword_256D0FC80;
  if (!qword_256D0FC80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256D0FC80);
  }
  return result;
}

uint64_t sub_23DEFB1A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1), uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *a3;
  v9 = a3[1];
  v11 = *a4;
  v10 = a4[1];
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v10;
  swift_retain();
  a5(a1, a2, v8, v9, sub_23DEFB69C, v12);
  return swift_release();
}

uint64_t sub_23DEFB238(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain();
  sub_23DEFB5AC((uint64_t)sub_23DEFB6F0, v3);
  return swift_release();
}

uint64_t sub_23DEFB29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, _QWORD *, _QWORD *))
{
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  v14[0] = sub_23DEFB6CC;
  v14[1] = v12;
  swift_retain();
  a7(a1, a2, v15, v14);
  return swift_release();
}

uint64_t MockDispatchTarget.runHandler.setter(uint64_t a1, uint64_t a2)
{
  sub_23DEFB5AC(a1, a2);
  return swift_release();
}

void (*MockDispatchTarget.runHandler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  swift_retain();
  os_unfair_lock_unlock(v5);
  v8 = swift_allocObject();
  v3[3] = sub_23DEFB6F0;
  v3[4] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  return sub_23DEFB3FC;
}

void sub_23DEFB3FC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    v2[5] = sub_23DEFB658;
    v2[6] = v6;
    v7 = *(_QWORD *)(v5 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    v9 = v2[5];
    v8 = v2[6];
    swift_release();
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 24) = v8;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    swift_release();
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v3;
    *(_QWORD *)(v10 + 24) = v4;
    v2[5] = sub_23DEFB6F4;
    v2[6] = v10;
    v11 = *(_QWORD *)(v5 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    v13 = v2[5];
    v12 = v2[6];
    swift_release();
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v12;
    swift_retain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  }
  swift_release();
  swift_endAccess();
  free(v2);
}

uint64_t MockDispatchTarget.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t MockDispatchTarget.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23DEFB560(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MockDispatchTarget.run(_:for:context:completion:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_23DEFB580()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DEFB5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_23DEFB29C(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD *))(v6 + 16));
}

uint64_t sub_23DEFB5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  *(_QWORD *)(v6 + 16) = sub_23DEFB6F4;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  return swift_endAccess();
}

uint64_t sub_23DEFB658(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;

  return sub_23DEFB1A0(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(v4 + 16));
}

uint64_t type metadata accessor for MockDispatchTarget()
{
  return objc_opt_self();
}

uint64_t method lookup function for MockDispatchTarget()
{
  return swift_lookUpClassMethod();
}

